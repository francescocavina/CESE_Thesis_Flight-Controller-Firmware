
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000134a4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000848  08013648  08013648  00014648  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013e90  08013e90  00015338  2**0
                  CONTENTS
  4 .ARM          00000008  08013e90  08013e90  00014e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013e98  08013e98  00015338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013e98  08013e98  00014e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013e9c  08013e9c  00014e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000338  20000000  08013ea0  00015000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf8  20000338  080141d8  00015338  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f30  080141d8  00015f30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015338  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002711b  00000000  00000000  00015368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006175  00000000  00000000  0003c483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002108  00000000  00000000  000425f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001978  00000000  00000000  00044700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000211f8  00000000  00000000  00046078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f061  00000000  00000000  00067270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae420  00000000  00000000  000962d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001446f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009be4  00000000  00000000  00144734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  0014e318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000338 	.word	0x20000338
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801362c 	.word	0x0801362c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000033c 	.word	0x2000033c
 80001dc:	0801362c 	.word	0x0801362c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <FreeRTOS_CreateStartUpTasks>:
extern ADC_HandleTypeDef hadc1;

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
void FreeRTOS_CreateStartUpTasks(void) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af02      	add	r7, sp, #8

    BaseType_t ret;

    /* Task: FlightController_Startup */
    ret = xTaskCreate(FlightController_StartUp, "FlightController_StartUp", (4 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t)TASK_FLIGHTCONTROLLER_STARTUP_PRIORITY), &FlightController_StartUp_Handle);
 8000f8e:	4b2b      	ldr	r3, [pc, #172]	@ (800103c <FreeRTOS_CreateStartUpTasks+0xb4>)
 8000f90:	9301      	str	r3, [sp, #4]
 8000f92:	2302      	movs	r3, #2
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2300      	movs	r3, #0
 8000f98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f9c:	4928      	ldr	r1, [pc, #160]	@ (8001040 <FreeRTOS_CreateStartUpTasks+0xb8>)
 8000f9e:	4829      	ldr	r0, [pc, #164]	@ (8001044 <FreeRTOS_CreateStartUpTasks+0xbc>)
 8000fa0:	f00c ff60 	bl	800de64 <xTaskCreate>
 8000fa4:	60f8      	str	r0, [r7, #12]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d00b      	beq.n	8000fc4 <FreeRTOS_CreateStartUpTasks+0x3c>
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortRaiseBASEPRI(void) {
    uint32_t ulNewBASEPRI;

    __asm volatile("	mov %0, %1												\n"
 8000fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fb0:	f383 8811 	msr	BASEPRI, r3
 8000fb4:	f3bf 8f6f 	isb	sy
 8000fb8:	f3bf 8f4f 	dsb	sy
 8000fbc:	60bb      	str	r3, [r7, #8]
                   "	isb														\n"
                   "	dsb														\n"
                   : "=r"(ulNewBASEPRI)
                   : "i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
                   : "memory");
}
 8000fbe:	bf00      	nop
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <FreeRTOS_CreateStartUpTasks+0x38>

    if (FlightController_StartUp_Handle == NULL) {
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800103c <FreeRTOS_CreateStartUpTasks+0xb4>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d104      	bne.n	8000fd6 <FreeRTOS_CreateStartUpTasks+0x4e>
        vTaskDelete(FlightController_StartUp_Handle);
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800103c <FreeRTOS_CreateStartUpTasks+0xb4>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f00d f879 	bl	800e0c8 <vTaskDelete>
    }

    /* Task: FlightController_OnOffButton */
    ret = xTaskCreate(FlightController_OnOffButton, "FlightController_OnOffButton", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t)TASK_FLIGHTCONTROLLER_ONOFFBUTTON_PRIORITY), &FlightController_OnOffButton_Handle);
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001048 <FreeRTOS_CreateStartUpTasks+0xc0>)
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	2302      	movs	r3, #2
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fe4:	4919      	ldr	r1, [pc, #100]	@ (800104c <FreeRTOS_CreateStartUpTasks+0xc4>)
 8000fe6:	481a      	ldr	r0, [pc, #104]	@ (8001050 <FreeRTOS_CreateStartUpTasks+0xc8>)
 8000fe8:	f00c ff3c 	bl	800de64 <xTaskCreate>
 8000fec:	60f8      	str	r0, [r7, #12]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d00b      	beq.n	800100c <FreeRTOS_CreateStartUpTasks+0x84>
    __asm volatile("	mov %0, %1												\n"
 8000ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ff8:	f383 8811 	msr	BASEPRI, r3
 8000ffc:	f3bf 8f6f 	isb	sy
 8001000:	f3bf 8f4f 	dsb	sy
 8001004:	607b      	str	r3, [r7, #4]
}
 8001006:	bf00      	nop
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <FreeRTOS_CreateStartUpTasks+0x80>

    if (FlightController_OnOffButton_Handle == NULL) {
 800100c:	4b0e      	ldr	r3, [pc, #56]	@ (8001048 <FreeRTOS_CreateStartUpTasks+0xc0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d104      	bne.n	800101e <FreeRTOS_CreateStartUpTasks+0x96>
        vTaskDelete(FlightController_OnOffButton_Handle);
 8001014:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <FreeRTOS_CreateStartUpTasks+0xc0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f00d f855 	bl	800e0c8 <vTaskDelete>
    }

    /* Timer1: OnOff_Button */
    Timer1_Handle = xTimerCreate("OnOff_Button", 100, pdTRUE, (void *)0, Timer1_Callback);
 800101e:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <FreeRTOS_CreateStartUpTasks+0xcc>)
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	2300      	movs	r3, #0
 8001024:	2201      	movs	r2, #1
 8001026:	2164      	movs	r1, #100	@ 0x64
 8001028:	480b      	ldr	r0, [pc, #44]	@ (8001058 <FreeRTOS_CreateStartUpTasks+0xd0>)
 800102a:	f00d fec1 	bl	800edb0 <xTimerCreate>
 800102e:	4603      	mov	r3, r0
 8001030:	4a0a      	ldr	r2, [pc, #40]	@ (800105c <FreeRTOS_CreateStartUpTasks+0xd4>)
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000358 	.word	0x20000358
 8001040:	08013648 	.word	0x08013648
 8001044:	08001341 	.word	0x08001341
 8001048:	20000364 	.word	0x20000364
 800104c:	08013664 	.word	0x08013664
 8001050:	08001d9d 	.word	0x08001d9d
 8001054:	080025d1 	.word	0x080025d1
 8001058:	08013684 	.word	0x08013684
 800105c:	20000378 	.word	0x20000378

08001060 <FreeRTOS_CreateTasks>:

void FreeRTOS_CreateTasks(void) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	@ 0x28
 8001064:	af02      	add	r7, sp, #8

    BaseType_t ret;

    /* Task 1: FlightController_ControlSystem */
    ret = xTaskCreate(FlightController_ControlSystem, "FlightController_ControlSystem", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t)TASK_FLIGHTCONTROLLER_CONTROLSYSTEM_PRIORITY), &FlightController_ControlSystem_Handle);
 8001066:	4b6e      	ldr	r3, [pc, #440]	@ (8001220 <FreeRTOS_CreateTasks+0x1c0>)
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	2302      	movs	r3, #2
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2300      	movs	r3, #0
 8001070:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001074:	496b      	ldr	r1, [pc, #428]	@ (8001224 <FreeRTOS_CreateTasks+0x1c4>)
 8001076:	486c      	ldr	r0, [pc, #432]	@ (8001228 <FreeRTOS_CreateTasks+0x1c8>)
 8001078:	f00c fef4 	bl	800de64 <xTaskCreate>
 800107c:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d00b      	beq.n	800109c <FreeRTOS_CreateTasks+0x3c>
    __asm volatile("	mov %0, %1												\n"
 8001084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001088:	f383 8811 	msr	BASEPRI, r3
 800108c:	f3bf 8f6f 	isb	sy
 8001090:	f3bf 8f4f 	dsb	sy
 8001094:	61bb      	str	r3, [r7, #24]
}
 8001096:	bf00      	nop
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <FreeRTOS_CreateTasks+0x38>

    if (FlightController_ControlSystem_Handle == NULL) {
 800109c:	4b60      	ldr	r3, [pc, #384]	@ (8001220 <FreeRTOS_CreateTasks+0x1c0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d104      	bne.n	80010ae <FreeRTOS_CreateTasks+0x4e>
        vTaskDelete(FlightController_ControlSystem_Handle);
 80010a4:	4b5e      	ldr	r3, [pc, #376]	@ (8001220 <FreeRTOS_CreateTasks+0x1c0>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f00d f80d 	bl	800e0c8 <vTaskDelete>
    }

    /* Task 2: FlightController_Data_Logging */
    ret = xTaskCreate(FlightController_Data_Logging, "FlightController_Data_Logging", (4 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t)TASK_FLIGHTCONTROLLER_DATA_LOGGING_PRIORITY), &FlightController_Data_Logging_Handle);
 80010ae:	4b5f      	ldr	r3, [pc, #380]	@ (800122c <FreeRTOS_CreateTasks+0x1cc>)
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	2302      	movs	r3, #2
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2300      	movs	r3, #0
 80010b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010bc:	495c      	ldr	r1, [pc, #368]	@ (8001230 <FreeRTOS_CreateTasks+0x1d0>)
 80010be:	485d      	ldr	r0, [pc, #372]	@ (8001234 <FreeRTOS_CreateTasks+0x1d4>)
 80010c0:	f00c fed0 	bl	800de64 <xTaskCreate>
 80010c4:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d00b      	beq.n	80010e4 <FreeRTOS_CreateTasks+0x84>
    __asm volatile("	mov %0, %1												\n"
 80010cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010d0:	f383 8811 	msr	BASEPRI, r3
 80010d4:	f3bf 8f6f 	isb	sy
 80010d8:	f3bf 8f4f 	dsb	sy
 80010dc:	617b      	str	r3, [r7, #20]
}
 80010de:	bf00      	nop
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <FreeRTOS_CreateTasks+0x80>

    if (FlightController_Data_Logging_Handle == NULL) {
 80010e4:	4b51      	ldr	r3, [pc, #324]	@ (800122c <FreeRTOS_CreateTasks+0x1cc>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d104      	bne.n	80010f6 <FreeRTOS_CreateTasks+0x96>
        vTaskDelete(FlightController_Data_Logging_Handle);
 80010ec:	4b4f      	ldr	r3, [pc, #316]	@ (800122c <FreeRTOS_CreateTasks+0x1cc>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f00c ffe9 	bl	800e0c8 <vTaskDelete>
    }

    /* Task 3: FlightController_BatteryLevel */
    ret = xTaskCreate(FlightController_BatteryLevel, "FlightController_BatteryLevel", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t)TASK_FLIGHTCONTROLLER_BATTERYLEVEL_PRIORITY), &FlightController_BatteryLevel_Handle);
 80010f6:	4b50      	ldr	r3, [pc, #320]	@ (8001238 <FreeRTOS_CreateTasks+0x1d8>)
 80010f8:	9301      	str	r3, [sp, #4]
 80010fa:	2302      	movs	r3, #2
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2300      	movs	r3, #0
 8001100:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001104:	494d      	ldr	r1, [pc, #308]	@ (800123c <FreeRTOS_CreateTasks+0x1dc>)
 8001106:	484e      	ldr	r0, [pc, #312]	@ (8001240 <FreeRTOS_CreateTasks+0x1e0>)
 8001108:	f00c feac 	bl	800de64 <xTaskCreate>
 800110c:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d00b      	beq.n	800112c <FreeRTOS_CreateTasks+0xcc>
    __asm volatile("	mov %0, %1												\n"
 8001114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001118:	f383 8811 	msr	BASEPRI, r3
 800111c:	f3bf 8f6f 	isb	sy
 8001120:	f3bf 8f4f 	dsb	sy
 8001124:	613b      	str	r3, [r7, #16]
}
 8001126:	bf00      	nop
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <FreeRTOS_CreateTasks+0xc8>

    if (FlightController_BatteryLevel_Handle == NULL) {
 800112c:	4b42      	ldr	r3, [pc, #264]	@ (8001238 <FreeRTOS_CreateTasks+0x1d8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d104      	bne.n	800113e <FreeRTOS_CreateTasks+0xde>
        vTaskDelete(FlightController_BatteryLevel_Handle);
 8001134:	4b40      	ldr	r3, [pc, #256]	@ (8001238 <FreeRTOS_CreateTasks+0x1d8>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f00c ffc5 	bl	800e0c8 <vTaskDelete>
    }

    /* Task 4: FlightController_BatteryAlarm */
    ret = xTaskCreate(FlightController_BatteryAlarm, "FlightController_BatteryAlarm", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t)TASK_FLIGHTCONTROLLER_BATTERYALARM_PRIORITY), &FlightController_BatteryAlarm_Handle);
 800113e:	4b41      	ldr	r3, [pc, #260]	@ (8001244 <FreeRTOS_CreateTasks+0x1e4>)
 8001140:	9301      	str	r3, [sp, #4]
 8001142:	2302      	movs	r3, #2
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2300      	movs	r3, #0
 8001148:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800114c:	493e      	ldr	r1, [pc, #248]	@ (8001248 <FreeRTOS_CreateTasks+0x1e8>)
 800114e:	483f      	ldr	r0, [pc, #252]	@ (800124c <FreeRTOS_CreateTasks+0x1ec>)
 8001150:	f00c fe88 	bl	800de64 <xTaskCreate>
 8001154:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d00b      	beq.n	8001174 <FreeRTOS_CreateTasks+0x114>
    __asm volatile("	mov %0, %1												\n"
 800115c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001160:	f383 8811 	msr	BASEPRI, r3
 8001164:	f3bf 8f6f 	isb	sy
 8001168:	f3bf 8f4f 	dsb	sy
 800116c:	60fb      	str	r3, [r7, #12]
}
 800116e:	bf00      	nop
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <FreeRTOS_CreateTasks+0x110>

    if (FlightController_BatteryAlarm_Handle == NULL) {
 8001174:	4b33      	ldr	r3, [pc, #204]	@ (8001244 <FreeRTOS_CreateTasks+0x1e4>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d104      	bne.n	8001186 <FreeRTOS_CreateTasks+0x126>
        vTaskDelete(FlightController_BatteryAlarm_Handle);
 800117c:	4b31      	ldr	r3, [pc, #196]	@ (8001244 <FreeRTOS_CreateTasks+0x1e4>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f00c ffa1 	bl	800e0c8 <vTaskDelete>
    }

    /* Task 5: FlightController_HeartbeatLight */
    ret = xTaskCreate(FlightController_HeartbeatLight, "FlightController_HeartbeatLight", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t)TASK_FLIGHTCONTROLLER_HEARTBEATLIGHT_PRIORITY), &FlightController_HeartbeatLight_Handle);
 8001186:	4b32      	ldr	r3, [pc, #200]	@ (8001250 <FreeRTOS_CreateTasks+0x1f0>)
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	2302      	movs	r3, #2
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2300      	movs	r3, #0
 8001190:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001194:	492f      	ldr	r1, [pc, #188]	@ (8001254 <FreeRTOS_CreateTasks+0x1f4>)
 8001196:	4830      	ldr	r0, [pc, #192]	@ (8001258 <FreeRTOS_CreateTasks+0x1f8>)
 8001198:	f00c fe64 	bl	800de64 <xTaskCreate>
 800119c:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d00b      	beq.n	80011bc <FreeRTOS_CreateTasks+0x15c>
    __asm volatile("	mov %0, %1												\n"
 80011a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011a8:	f383 8811 	msr	BASEPRI, r3
 80011ac:	f3bf 8f6f 	isb	sy
 80011b0:	f3bf 8f4f 	dsb	sy
 80011b4:	60bb      	str	r3, [r7, #8]
}
 80011b6:	bf00      	nop
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <FreeRTOS_CreateTasks+0x158>

    if (FlightController_HeartbeatLight_Handle == NULL) {
 80011bc:	4b24      	ldr	r3, [pc, #144]	@ (8001250 <FreeRTOS_CreateTasks+0x1f0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d104      	bne.n	80011ce <FreeRTOS_CreateTasks+0x16e>
        vTaskDelete(FlightController_HeartbeatLight_Handle);
 80011c4:	4b22      	ldr	r3, [pc, #136]	@ (8001250 <FreeRTOS_CreateTasks+0x1f0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f00c ff7d 	bl	800e0c8 <vTaskDelete>
    }

    /* Task 6: FlightController_FlightLights */
    ret = xTaskCreate(FlightController_FlightLights, "FlightController_FlightLights", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t)TASK_FLIGHTCONTROLLER_FLIGHTLIGHTS_PRIORITY), &FlightController_FlightLights_Handle);
 80011ce:	4b23      	ldr	r3, [pc, #140]	@ (800125c <FreeRTOS_CreateTasks+0x1fc>)
 80011d0:	9301      	str	r3, [sp, #4]
 80011d2:	2302      	movs	r3, #2
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2300      	movs	r3, #0
 80011d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011dc:	4920      	ldr	r1, [pc, #128]	@ (8001260 <FreeRTOS_CreateTasks+0x200>)
 80011de:	4821      	ldr	r0, [pc, #132]	@ (8001264 <FreeRTOS_CreateTasks+0x204>)
 80011e0:	f00c fe40 	bl	800de64 <xTaskCreate>
 80011e4:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d00b      	beq.n	8001204 <FreeRTOS_CreateTasks+0x1a4>
    __asm volatile("	mov %0, %1												\n"
 80011ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011f0:	f383 8811 	msr	BASEPRI, r3
 80011f4:	f3bf 8f6f 	isb	sy
 80011f8:	f3bf 8f4f 	dsb	sy
 80011fc:	607b      	str	r3, [r7, #4]
}
 80011fe:	bf00      	nop
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <FreeRTOS_CreateTasks+0x1a0>

    if (FlightController_FlightLights_Handle == NULL) {
 8001204:	4b15      	ldr	r3, [pc, #84]	@ (800125c <FreeRTOS_CreateTasks+0x1fc>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d104      	bne.n	8001216 <FreeRTOS_CreateTasks+0x1b6>
        vTaskDelete(FlightController_FlightLights_Handle);
 800120c:	4b13      	ldr	r3, [pc, #76]	@ (800125c <FreeRTOS_CreateTasks+0x1fc>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f00c ff59 	bl	800e0c8 <vTaskDelete>
    }
}
 8001216:	bf00      	nop
 8001218:	3720      	adds	r7, #32
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	2000035c 	.word	0x2000035c
 8001224:	08013694 	.word	0x08013694
 8001228:	080013c9 	.word	0x080013c9
 800122c:	20000360 	.word	0x20000360
 8001230:	080136b4 	.word	0x080136b4
 8001234:	08001ce9 	.word	0x08001ce9
 8001238:	20000368 	.word	0x20000368
 800123c:	080136d4 	.word	0x080136d4
 8001240:	08001df9 	.word	0x08001df9
 8001244:	2000036c 	.word	0x2000036c
 8001248:	080136f4 	.word	0x080136f4
 800124c:	08001eed 	.word	0x08001eed
 8001250:	20000370 	.word	0x20000370
 8001254:	08013714 	.word	0x08013714
 8001258:	08001f99 	.word	0x08001f99
 800125c:	20000374 	.word	0x20000374
 8001260:	08013734 	.word	0x08013734
 8001264:	08001ff1 	.word	0x08001ff1

08001268 <FreeRTOS_CreateTimers>:

void FreeRTOS_CreateTimers(void) {
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b083      	sub	sp, #12
 800126c:	af02      	add	r7, sp, #8

    /* Timer2: BatteryLevelAlarm */
    Timer2_Handle = xTimerCreate("BatteryLevelAlarm", pdMS_TO_TICKS(200), pdTRUE, (void *)0, Timer2_Callback);
 800126e:	4b2b      	ldr	r3, [pc, #172]	@ (800131c <FreeRTOS_CreateTimers+0xb4>)
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	2300      	movs	r3, #0
 8001274:	2201      	movs	r2, #1
 8001276:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800127a:	4829      	ldr	r0, [pc, #164]	@ (8001320 <FreeRTOS_CreateTimers+0xb8>)
 800127c:	f00d fd98 	bl	800edb0 <xTimerCreate>
 8001280:	4603      	mov	r3, r0
 8001282:	4a28      	ldr	r2, [pc, #160]	@ (8001324 <FreeRTOS_CreateTimers+0xbc>)
 8001284:	6013      	str	r3, [r2, #0]
    if (NULL != Timer2_Handle) {
 8001286:	4b27      	ldr	r3, [pc, #156]	@ (8001324 <FreeRTOS_CreateTimers+0xbc>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00b      	beq.n	80012a6 <FreeRTOS_CreateTimers+0x3e>
        /* Start timer */
        xTimerStart(Timer2_Handle, 0);
 800128e:	4b25      	ldr	r3, [pc, #148]	@ (8001324 <FreeRTOS_CreateTimers+0xbc>)
 8001290:	681c      	ldr	r4, [r3, #0]
 8001292:	f00d f987 	bl	800e5a4 <xTaskGetTickCount>
 8001296:	4602      	mov	r2, r0
 8001298:	2300      	movs	r3, #0
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	2300      	movs	r3, #0
 800129e:	2101      	movs	r1, #1
 80012a0:	4620      	mov	r0, r4
 80012a2:	f00d fde3 	bl	800ee6c <xTimerGenericCommand>
    }

    /* Timer3: FlightLights */
    Timer3_Handle = xTimerCreate("FlightLights", pdMS_TO_TICKS(100), pdTRUE, (void *)0, Timer3_Callback);
 80012a6:	4b20      	ldr	r3, [pc, #128]	@ (8001328 <FreeRTOS_CreateTimers+0xc0>)
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2300      	movs	r3, #0
 80012ac:	2201      	movs	r2, #1
 80012ae:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80012b2:	481e      	ldr	r0, [pc, #120]	@ (800132c <FreeRTOS_CreateTimers+0xc4>)
 80012b4:	f00d fd7c 	bl	800edb0 <xTimerCreate>
 80012b8:	4603      	mov	r3, r0
 80012ba:	4a1d      	ldr	r2, [pc, #116]	@ (8001330 <FreeRTOS_CreateTimers+0xc8>)
 80012bc:	6013      	str	r3, [r2, #0]
    if (NULL != Timer3_Handle) {
 80012be:	4b1c      	ldr	r3, [pc, #112]	@ (8001330 <FreeRTOS_CreateTimers+0xc8>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d00b      	beq.n	80012de <FreeRTOS_CreateTimers+0x76>
        /* Start timer */
        xTimerStart(Timer3_Handle, 0);
 80012c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001330 <FreeRTOS_CreateTimers+0xc8>)
 80012c8:	681c      	ldr	r4, [r3, #0]
 80012ca:	f00d f96b 	bl	800e5a4 <xTaskGetTickCount>
 80012ce:	4602      	mov	r2, r0
 80012d0:	2300      	movs	r3, #0
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2300      	movs	r3, #0
 80012d6:	2101      	movs	r1, #1
 80012d8:	4620      	mov	r0, r4
 80012da:	f00d fdc7 	bl	800ee6c <xTimerGenericCommand>
    }

    /* Timer4: ControlSystem */
    Timer4_Handle = xTimerCreate("ControlSystem", pdMS_TO_TICKS(1), pdTRUE, (void *)0, Timer4_Callback);
 80012de:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <FreeRTOS_CreateTimers+0xcc>)
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	2300      	movs	r3, #0
 80012e4:	2201      	movs	r2, #1
 80012e6:	210a      	movs	r1, #10
 80012e8:	4813      	ldr	r0, [pc, #76]	@ (8001338 <FreeRTOS_CreateTimers+0xd0>)
 80012ea:	f00d fd61 	bl	800edb0 <xTimerCreate>
 80012ee:	4603      	mov	r3, r0
 80012f0:	4a12      	ldr	r2, [pc, #72]	@ (800133c <FreeRTOS_CreateTimers+0xd4>)
 80012f2:	6013      	str	r3, [r2, #0]
    if (NULL != Timer4_Handle) {
 80012f4:	4b11      	ldr	r3, [pc, #68]	@ (800133c <FreeRTOS_CreateTimers+0xd4>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d00b      	beq.n	8001314 <FreeRTOS_CreateTimers+0xac>
        /* Start timer */
        xTimerStart(Timer4_Handle, 0);
 80012fc:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <FreeRTOS_CreateTimers+0xd4>)
 80012fe:	681c      	ldr	r4, [r3, #0]
 8001300:	f00d f950 	bl	800e5a4 <xTaskGetTickCount>
 8001304:	4602      	mov	r2, r0
 8001306:	2300      	movs	r3, #0
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	2300      	movs	r3, #0
 800130c:	2101      	movs	r1, #1
 800130e:	4620      	mov	r0, r4
 8001310:	f00d fdac 	bl	800ee6c <xTimerGenericCommand>
    }
}
 8001314:	bf00      	nop
 8001316:	3704      	adds	r7, #4
 8001318:	46bd      	mov	sp, r7
 800131a:	bd90      	pop	{r4, r7, pc}
 800131c:	080026a9 	.word	0x080026a9
 8001320:	08013754 	.word	0x08013754
 8001324:	2000037c 	.word	0x2000037c
 8001328:	08002719 	.word	0x08002719
 800132c:	08013768 	.word	0x08013768
 8001330:	20000380 	.word	0x20000380
 8001334:	08002789 	.word	0x08002789
 8001338:	08013778 	.word	0x08013778
 800133c:	20000384 	.word	0x20000384

08001340 <FlightController_StartUp>:

void FlightController_StartUp(void * ptr) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001348:	23c8      	movs	r3, #200	@ 0xc8
 800134a:	60fb      	str	r3, [r7, #12]

    while (1) {

        /* Turn on-board LED off */
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 800134c:	2201      	movs	r2, #1
 800134e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001352:	4813      	ldr	r0, [pc, #76]	@ (80013a0 <FlightController_StartUp+0x60>)
 8001354:	f004 faa6 	bl	80058a4 <HAL_GPIO_WritePin>

        /* Check if flight controller is already running */
        /* Create tasks and timers, and initialize drivers (only once) */
        if (FlightController_isRunning) {
 8001358:	4b12      	ldr	r3, [pc, #72]	@ (80013a4 <FlightController_StartUp+0x64>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d01a      	beq.n	8001396 <FlightController_StartUp+0x56>
#ifdef MAIN_APP_USE_LOGGING_STARTUP
            LOG((uint8_t *)"Initializing Flight Controller...\r\n\n", LOG_INFORMATION);
#endif

            /* Create system tasks */
            FreeRTOS_CreateTasks();
 8001360:	f7ff fe7e 	bl	8001060 <FreeRTOS_CreateTasks>

            /* Create system timers */
            FreeRTOS_CreateTimers();
 8001364:	f7ff ff80 	bl	8001268 <FreeRTOS_CreateTimers>

            /* Initialize drivers */
            rc_controller = FSA8S_Init(&huart2);
 8001368:	480f      	ldr	r0, [pc, #60]	@ (80013a8 <FlightController_StartUp+0x68>)
 800136a:	f002 fa73 	bl	8003854 <FSA8S_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	4a0e      	ldr	r2, [pc, #56]	@ (80013ac <FlightController_StartUp+0x6c>)
 8001372:	6013      	str	r3, [r2, #0]
#ifdef MAIN_APP_USE_LOGGING_STARTUP
            LOG((uint8_t *)"FSA8S Radio Controller Initialized.\r\n\n", LOG_INFORMATION);
#endif

            hgy87 = GY87_Init(&hi2c1);
 8001374:	480e      	ldr	r0, [pc, #56]	@ (80013b0 <FlightController_StartUp+0x70>)
 8001376:	f002 fecb 	bl	8004110 <GY87_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	4a0d      	ldr	r2, [pc, #52]	@ (80013b4 <FlightController_StartUp+0x74>)
 800137e:	6013      	str	r3, [r2, #0]
#ifdef MAIN_APP_USE_LOGGING_STARTUP
            LOG((uint8_t *)"GY-87 IMU Initialized.\r\n\n", LOG_INFORMATION);
#endif

            hesc = ESC_Init(&htim3);
 8001380:	480d      	ldr	r0, [pc, #52]	@ (80013b8 <FlightController_StartUp+0x78>)
 8001382:	f002 f8e5 	bl	8003550 <ESC_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	4a0c      	ldr	r2, [pc, #48]	@ (80013bc <FlightController_StartUp+0x7c>)
 800138a:	6013      	str	r3, [r2, #0]
#ifdef MAIN_APP_USE_LOGGING_STARTUP
            LOG((uint8_t *)"ESCs Initialized.\r\n\n", LOG_INFORMATION);
#endif

            /* Delete this task, as initialization must happen only once */
            vTaskDelete(FlightController_StartUp_Handle);
 800138c:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <FlightController_StartUp+0x80>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f00c fe99 	bl	800e0c8 <vTaskDelete>
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f00c ff26 	bl	800e1e8 <vTaskDelay>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 800139c:	e7d6      	b.n	800134c <FlightController_StartUp+0xc>
 800139e:	bf00      	nop
 80013a0:	40020800 	.word	0x40020800
 80013a4:	20000354 	.word	0x20000354
 80013a8:	20000c90 	.word	0x20000c90
 80013ac:	2000038c 	.word	0x2000038c
 80013b0:	20000bf4 	.word	0x20000bf4
 80013b4:	20000390 	.word	0x20000390
 80013b8:	20000c48 	.word	0x20000c48
 80013bc:	20000394 	.word	0x20000394
 80013c0:	20000358 	.word	0x20000358
 80013c4:	00000000 	.word	0x00000000

080013c8 <FlightController_ControlSystem>:
    }
}

void FlightController_ControlSystem(void * ptr) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(1);
 80013d0:	230a      	movs	r3, #10
 80013d2:	60fb      	str	r3, [r7, #12]
            if (false == accelerometerCalibrationIsDone) {
                accelerometerCalibrationIsDone = GY87_CalibrateAccelerometer(hgy87);
            }
        } else {

            gyroscopeCalibrationIsDone = true;
 80013d4:	4b94      	ldr	r3, [pc, #592]	@ (8001628 <FlightController_ControlSystem+0x260>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	701a      	strb	r2, [r3, #0]
            accelerometerCalibrationIsDone = true;
 80013da:	4b94      	ldr	r3, [pc, #592]	@ (800162c <FlightController_ControlSystem+0x264>)
 80013dc:	2201      	movs	r2, #1
 80013de:	701a      	strb	r2, [r3, #0]
        }

        if (true == gyroscopeCalibrationIsDone && true == accelerometerCalibrationIsDone) {
 80013e0:	4b91      	ldr	r3, [pc, #580]	@ (8001628 <FlightController_ControlSystem+0x260>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d007      	beq.n	80013f8 <FlightController_ControlSystem+0x30>
 80013e8:	4b90      	ldr	r3, [pc, #576]	@ (800162c <FlightController_ControlSystem+0x264>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <FlightController_ControlSystem+0x30>
#ifdef MAIN_APP_USE_LOGGING_STARTUP
            vTaskDelay(pdMS_TO_TICKS(5));
            LOG((uint8_t *)"Flight Controller Initialized.\r\n\n", LOG_INFORMATION);
#endif
            FlightController_isInitialized = true;
 80013f0:	4b8f      	ldr	r3, [pc, #572]	@ (8001630 <FlightController_ControlSystem+0x268>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
 80013f6:	e002      	b.n	80013fe <FlightController_ControlSystem+0x36>
        } else {

            FlightController_isInitialized = false;
 80013f8:	4b8d      	ldr	r3, [pc, #564]	@ (8001630 <FlightController_ControlSystem+0x268>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]
        }

        /* Read flight lights controls */
        FSA8S_channelValues[7] = FSA8S_ReadChannel(rc_controller, CHANNEL_8);
 80013fe:	4b8d      	ldr	r3, [pc, #564]	@ (8001634 <FlightController_ControlSystem+0x26c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2108      	movs	r1, #8
 8001404:	4618      	mov	r0, r3
 8001406:	f002 fa7f 	bl	8003908 <FSA8S_ReadChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	461a      	mov	r2, r3
 800140e:	4b8a      	ldr	r3, [pc, #552]	@ (8001638 <FlightController_ControlSystem+0x270>)
 8001410:	81da      	strh	r2, [r3, #14]
        FSA8S_channelValues[8] = FSA8S_ReadChannel(rc_controller, CHANNEL_9);
 8001412:	4b88      	ldr	r3, [pc, #544]	@ (8001634 <FlightController_ControlSystem+0x26c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2109      	movs	r1, #9
 8001418:	4618      	mov	r0, r3
 800141a:	f002 fa75 	bl	8003908 <FSA8S_ReadChannel>
 800141e:	4603      	mov	r3, r0
 8001420:	461a      	mov	r2, r3
 8001422:	4b85      	ldr	r3, [pc, #532]	@ (8001638 <FlightController_ControlSystem+0x270>)
 8001424:	821a      	strh	r2, [r3, #16]
        FSA8S_channelValues[9] = FSA8S_ReadChannel(rc_controller, CHANNEL_10);
 8001426:	4b83      	ldr	r3, [pc, #524]	@ (8001634 <FlightController_ControlSystem+0x26c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	210a      	movs	r1, #10
 800142c:	4618      	mov	r0, r3
 800142e:	f002 fa6b 	bl	8003908 <FSA8S_ReadChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	461a      	mov	r2, r3
 8001436:	4b80      	ldr	r3, [pc, #512]	@ (8001638 <FlightController_ControlSystem+0x270>)
 8001438:	825a      	strh	r2, [r3, #18]
                }
            }

#endif

        } else if (FlightController_isInitialized && 3 == CONTROL_SYSTEM_MODE) {
 800143a:	4b7d      	ldr	r3, [pc, #500]	@ (8001630 <FlightController_ControlSystem+0x268>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 8427 	beq.w	8001c92 <FlightController_ControlSystem+0x8ca>

#if 3 == CONTROL_SYSTEM_MODE

            /* Avoid uncontrolled motor start */
            while (false == throttleStick_startedDown) {
 8001444:	e01e      	b.n	8001484 <FlightController_ControlSystem+0xbc>

                /* Read throttle input from radio controller */
                inputValue_throttle = FSA8S_ReadChannel(rc_controller, CHANNEL_3);
 8001446:	4b7b      	ldr	r3, [pc, #492]	@ (8001634 <FlightController_ControlSystem+0x26c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2103      	movs	r1, #3
 800144c:	4618      	mov	r0, r3
 800144e:	f002 fa5b 	bl	8003908 <FSA8S_ReadChannel>
 8001452:	4603      	mov	r3, r0
 8001454:	ee07 3a90 	vmov	s15, r3
 8001458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800145c:	4b77      	ldr	r3, [pc, #476]	@ (800163c <FlightController_ControlSystem+0x274>)
 800145e:	edc3 7a00 	vstr	s15, [r3]

                if (15 > inputValue_throttle) {
 8001462:	4b76      	ldr	r3, [pc, #472]	@ (800163c <FlightController_ControlSystem+0x274>)
 8001464:	edd3 7a00 	vldr	s15, [r3]
 8001468:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 800146c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001474:	d503      	bpl.n	800147e <FlightController_ControlSystem+0xb6>

                    throttleStick_startedDown = true;
 8001476:	4b72      	ldr	r3, [pc, #456]	@ (8001640 <FlightController_ControlSystem+0x278>)
 8001478:	2201      	movs	r2, #1
 800147a:	701a      	strb	r2, [r3, #0]
 800147c:	e002      	b.n	8001484 <FlightController_ControlSystem+0xbc>

                } else {

                    throttleStick_startedDown = false;
 800147e:	4b70      	ldr	r3, [pc, #448]	@ (8001640 <FlightController_ControlSystem+0x278>)
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]
            while (false == throttleStick_startedDown) {
 8001484:	4b6e      	ldr	r3, [pc, #440]	@ (8001640 <FlightController_ControlSystem+0x278>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	f083 0301 	eor.w	r3, r3, #1
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1d9      	bne.n	8001446 <FlightController_ControlSystem+0x7e>
                }
            }

            /* Check if ESCs are enabled (Switch B on radio controller) */
            if (500 <= FSA8S_ReadChannel(rc_controller, CHANNEL_6)) {
 8001492:	4b68      	ldr	r3, [pc, #416]	@ (8001634 <FlightController_ControlSystem+0x26c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2106      	movs	r1, #6
 8001498:	4618      	mov	r0, r3
 800149a:	f002 fa35 	bl	8003908 <FSA8S_ReadChannel>
 800149e:	4603      	mov	r3, r0
 80014a0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014a4:	d303      	bcc.n	80014ae <FlightController_ControlSystem+0xe6>
                ESC_isEnabled = true;
 80014a6:	4b67      	ldr	r3, [pc, #412]	@ (8001644 <FlightController_ControlSystem+0x27c>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	701a      	strb	r2, [r3, #0]
 80014ac:	e002      	b.n	80014b4 <FlightController_ControlSystem+0xec>
            } else {
                ESC_isEnabled = false;
 80014ae:	4b65      	ldr	r3, [pc, #404]	@ (8001644 <FlightController_ControlSystem+0x27c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
            }

            /* Turn off motors in case ESCs are disabled */
            if (false == ESC_isEnabled) {
 80014b4:	4b63      	ldr	r3, [pc, #396]	@ (8001644 <FlightController_ControlSystem+0x27c>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	f083 0301 	eor.w	r3, r3, #1
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d04a      	beq.n	8001558 <FlightController_ControlSystem+0x190>

                /* Save motors speed */
                ESC_speeds[1] = 0;
 80014c2:	4b61      	ldr	r3, [pc, #388]	@ (8001648 <FlightController_ControlSystem+0x280>)
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	605a      	str	r2, [r3, #4]
                ESC_speeds[2] = 0;
 80014ca:	4b5f      	ldr	r3, [pc, #380]	@ (8001648 <FlightController_ControlSystem+0x280>)
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
                ESC_speeds[3] = 0;
 80014d2:	4b5d      	ldr	r3, [pc, #372]	@ (8001648 <FlightController_ControlSystem+0x280>)
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
                ESC_speeds[4] = 0;
 80014da:	4b5b      	ldr	r3, [pc, #364]	@ (8001648 <FlightController_ControlSystem+0x280>)
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]

                /* Turn off motors */
                ESC_SetSpeed(hesc, hesc->esc1, ESC_speeds[4]);
 80014e2:	4b5a      	ldr	r3, [pc, #360]	@ (800164c <FlightController_ControlSystem+0x284>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	4b59      	ldr	r3, [pc, #356]	@ (800164c <FlightController_ControlSystem+0x284>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	791b      	ldrb	r3, [r3, #4]
 80014ec:	4956      	ldr	r1, [pc, #344]	@ (8001648 <FlightController_ControlSystem+0x280>)
 80014ee:	edd1 7a04 	vldr	s15, [r1, #16]
 80014f2:	eeb0 0a67 	vmov.f32	s0, s15
 80014f6:	4619      	mov	r1, r3
 80014f8:	4610      	mov	r0, r2
 80014fa:	f002 f86d 	bl	80035d8 <ESC_SetSpeed>
                ESC_SetSpeed(hesc, hesc->esc2, ESC_speeds[2]);
 80014fe:	4b53      	ldr	r3, [pc, #332]	@ (800164c <FlightController_ControlSystem+0x284>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	4b52      	ldr	r3, [pc, #328]	@ (800164c <FlightController_ControlSystem+0x284>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	795b      	ldrb	r3, [r3, #5]
 8001508:	494f      	ldr	r1, [pc, #316]	@ (8001648 <FlightController_ControlSystem+0x280>)
 800150a:	edd1 7a02 	vldr	s15, [r1, #8]
 800150e:	eeb0 0a67 	vmov.f32	s0, s15
 8001512:	4619      	mov	r1, r3
 8001514:	4610      	mov	r0, r2
 8001516:	f002 f85f 	bl	80035d8 <ESC_SetSpeed>
                ESC_SetSpeed(hesc, hesc->esc3, ESC_speeds[3]);
 800151a:	4b4c      	ldr	r3, [pc, #304]	@ (800164c <FlightController_ControlSystem+0x284>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	4b4b      	ldr	r3, [pc, #300]	@ (800164c <FlightController_ControlSystem+0x284>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	799b      	ldrb	r3, [r3, #6]
 8001524:	4948      	ldr	r1, [pc, #288]	@ (8001648 <FlightController_ControlSystem+0x280>)
 8001526:	edd1 7a03 	vldr	s15, [r1, #12]
 800152a:	eeb0 0a67 	vmov.f32	s0, s15
 800152e:	4619      	mov	r1, r3
 8001530:	4610      	mov	r0, r2
 8001532:	f002 f851 	bl	80035d8 <ESC_SetSpeed>
                ESC_SetSpeed(hesc, hesc->esc4, ESC_speeds[1]);
 8001536:	4b45      	ldr	r3, [pc, #276]	@ (800164c <FlightController_ControlSystem+0x284>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	4b44      	ldr	r3, [pc, #272]	@ (800164c <FlightController_ControlSystem+0x284>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	79db      	ldrb	r3, [r3, #7]
 8001540:	4941      	ldr	r1, [pc, #260]	@ (8001648 <FlightController_ControlSystem+0x280>)
 8001542:	edd1 7a01 	vldr	s15, [r1, #4]
 8001546:	eeb0 0a67 	vmov.f32	s0, s15
 800154a:	4619      	mov	r1, r3
 800154c:	4610      	mov	r0, r2
 800154e:	f002 f843 	bl	80035d8 <ESC_SetSpeed>

                /* Reset PID variables */
                CSM3_ResetPID();
 8001552:	f000 fff9 	bl	8002548 <CSM3_ResetPID>
 8001556:	e39c      	b.n	8001c92 <FlightController_ControlSystem+0x8ca>

            } else {

                /* Check if timer has expired */
                if (Timer4_flag) {
 8001558:	4b3d      	ldr	r3, [pc, #244]	@ (8001650 <FlightController_ControlSystem+0x288>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	f000 8398 	beq.w	8001c92 <FlightController_ControlSystem+0x8ca>

                    /* Read input throttle from radio controller */
                    inputValue_throttle = FSA8S_ReadChannel(rc_controller, CHANNEL_3);
 8001562:	4b34      	ldr	r3, [pc, #208]	@ (8001634 <FlightController_ControlSystem+0x26c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2103      	movs	r1, #3
 8001568:	4618      	mov	r0, r3
 800156a:	f002 f9cd 	bl	8003908 <FSA8S_ReadChannel>
 800156e:	4603      	mov	r3, r0
 8001570:	ee07 3a90 	vmov	s15, r3
 8001574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001578:	4b30      	ldr	r3, [pc, #192]	@ (800163c <FlightController_ControlSystem+0x274>)
 800157a:	edc3 7a00 	vstr	s15, [r3]

                    /* Check if throttle stick is low */
                    if (CONTROL_SYSTEM_MINIMUM_INPUT_THROTTLE > inputValue_throttle) {
 800157e:	4b2f      	ldr	r3, [pc, #188]	@ (800163c <FlightController_ControlSystem+0x274>)
 8001580:	edd3 7a00 	vldr	s15, [r3]
 8001584:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001588:	eef4 7ac7 	vcmpe.f32	s15, s14
 800158c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001590:	d560      	bpl.n	8001654 <FlightController_ControlSystem+0x28c>

                        /* Save motors speed */
                        ESC_speeds[1] = 0;
 8001592:	4b2d      	ldr	r3, [pc, #180]	@ (8001648 <FlightController_ControlSystem+0x280>)
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	605a      	str	r2, [r3, #4]
                        ESC_speeds[2] = 0;
 800159a:	4b2b      	ldr	r3, [pc, #172]	@ (8001648 <FlightController_ControlSystem+0x280>)
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
                        ESC_speeds[3] = 0;
 80015a2:	4b29      	ldr	r3, [pc, #164]	@ (8001648 <FlightController_ControlSystem+0x280>)
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
                        ESC_speeds[4] = 0;
 80015aa:	4b27      	ldr	r3, [pc, #156]	@ (8001648 <FlightController_ControlSystem+0x280>)
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]

                        /* Turn off motors */
                        ESC_SetSpeed(hesc, hesc->esc1, ESC_speeds[4]);
 80015b2:	4b26      	ldr	r3, [pc, #152]	@ (800164c <FlightController_ControlSystem+0x284>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	4b25      	ldr	r3, [pc, #148]	@ (800164c <FlightController_ControlSystem+0x284>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	791b      	ldrb	r3, [r3, #4]
 80015bc:	4922      	ldr	r1, [pc, #136]	@ (8001648 <FlightController_ControlSystem+0x280>)
 80015be:	edd1 7a04 	vldr	s15, [r1, #16]
 80015c2:	eeb0 0a67 	vmov.f32	s0, s15
 80015c6:	4619      	mov	r1, r3
 80015c8:	4610      	mov	r0, r2
 80015ca:	f002 f805 	bl	80035d8 <ESC_SetSpeed>
                        ESC_SetSpeed(hesc, hesc->esc2, ESC_speeds[2]);
 80015ce:	4b1f      	ldr	r3, [pc, #124]	@ (800164c <FlightController_ControlSystem+0x284>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	4b1e      	ldr	r3, [pc, #120]	@ (800164c <FlightController_ControlSystem+0x284>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	795b      	ldrb	r3, [r3, #5]
 80015d8:	491b      	ldr	r1, [pc, #108]	@ (8001648 <FlightController_ControlSystem+0x280>)
 80015da:	edd1 7a02 	vldr	s15, [r1, #8]
 80015de:	eeb0 0a67 	vmov.f32	s0, s15
 80015e2:	4619      	mov	r1, r3
 80015e4:	4610      	mov	r0, r2
 80015e6:	f001 fff7 	bl	80035d8 <ESC_SetSpeed>
                        ESC_SetSpeed(hesc, hesc->esc3, ESC_speeds[3]);
 80015ea:	4b18      	ldr	r3, [pc, #96]	@ (800164c <FlightController_ControlSystem+0x284>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	4b17      	ldr	r3, [pc, #92]	@ (800164c <FlightController_ControlSystem+0x284>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	799b      	ldrb	r3, [r3, #6]
 80015f4:	4914      	ldr	r1, [pc, #80]	@ (8001648 <FlightController_ControlSystem+0x280>)
 80015f6:	edd1 7a03 	vldr	s15, [r1, #12]
 80015fa:	eeb0 0a67 	vmov.f32	s0, s15
 80015fe:	4619      	mov	r1, r3
 8001600:	4610      	mov	r0, r2
 8001602:	f001 ffe9 	bl	80035d8 <ESC_SetSpeed>
                        ESC_SetSpeed(hesc, hesc->esc4, ESC_speeds[1]);
 8001606:	4b11      	ldr	r3, [pc, #68]	@ (800164c <FlightController_ControlSystem+0x284>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	4b10      	ldr	r3, [pc, #64]	@ (800164c <FlightController_ControlSystem+0x284>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	79db      	ldrb	r3, [r3, #7]
 8001610:	490d      	ldr	r1, [pc, #52]	@ (8001648 <FlightController_ControlSystem+0x280>)
 8001612:	edd1 7a01 	vldr	s15, [r1, #4]
 8001616:	eeb0 0a67 	vmov.f32	s0, s15
 800161a:	4619      	mov	r1, r3
 800161c:	4610      	mov	r0, r2
 800161e:	f001 ffdb 	bl	80035d8 <ESC_SetSpeed>

                        /* Reset PID variables */
                        CSM3_ResetPID();
 8001622:	f000 ff91 	bl	8002548 <CSM3_ResetPID>
 8001626:	e331      	b.n	8001c8c <FlightController_ControlSystem+0x8c4>
 8001628:	200003dc 	.word	0x200003dc
 800162c:	200003dd 	.word	0x200003dd
 8001630:	20000355 	.word	0x20000355
 8001634:	2000038c 	.word	0x2000038c
 8001638:	20000398 	.word	0x20000398
 800163c:	200003ec 	.word	0x200003ec
 8001640:	200003e8 	.word	0x200003e8
 8001644:	2000049c 	.word	0x2000049c
 8001648:	200004a0 	.word	0x200004a0
 800164c:	20000394 	.word	0x20000394
 8001650:	2000038b 	.word	0x2000038b

                    } else {

                        /* Read GY-87 gyroscope sensor */
                        GY87_ReadGyroscope(hgy87, &GY87_gyroscopeValues);
 8001654:	4bc6      	ldr	r3, [pc, #792]	@ (8001970 <FlightController_ControlSystem+0x5a8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	49c6      	ldr	r1, [pc, #792]	@ (8001974 <FlightController_ControlSystem+0x5ac>)
 800165a:	4618      	mov	r0, r3
 800165c:	f002 fda2 	bl	80041a4 <GY87_ReadGyroscope>
                        /* Read GY-87 accelerometer sensor */
                        GY87_ReadAccelerometer(hgy87, &GY87_accelerometerValues);
 8001660:	4bc3      	ldr	r3, [pc, #780]	@ (8001970 <FlightController_ControlSystem+0x5a8>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	49c4      	ldr	r1, [pc, #784]	@ (8001978 <FlightController_ControlSystem+0x5b0>)
 8001666:	4618      	mov	r0, r3
 8001668:	f002 fe52 	bl	8004310 <GY87_ReadAccelerometer>

                        /* Calculate Kalman roll angle */
                        Kalman_CalculateAngle(&Kalman_predictionValue_rollAngle, &Kalman_uncertaintyValue_rollAngle, GY87_gyroscopeValues.rotationRateRoll, GY87_accelerometerValues.angleRoll);
 800166c:	4bc1      	ldr	r3, [pc, #772]	@ (8001974 <FlightController_ControlSystem+0x5ac>)
 800166e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001672:	4bc1      	ldr	r3, [pc, #772]	@ (8001978 <FlightController_ControlSystem+0x5b0>)
 8001674:	ed93 7a05 	vldr	s14, [r3, #20]
 8001678:	eef0 0a47 	vmov.f32	s1, s14
 800167c:	eeb0 0a67 	vmov.f32	s0, s15
 8001680:	49be      	ldr	r1, [pc, #760]	@ (800197c <FlightController_ControlSystem+0x5b4>)
 8001682:	48bf      	ldr	r0, [pc, #764]	@ (8001980 <FlightController_ControlSystem+0x5b8>)
 8001684:	f000 fe34 	bl	80022f0 <Kalman_CalculateAngle>
                        /* Calculate Kalman pitch angle */
                        Kalman_CalculateAngle(&Kalman_predictionValue_pitchAngle, &Kalman_uncertaintyValue_pitchAngle, GY87_gyroscopeValues.rotationRatePitch, GY87_accelerometerValues.anglePitch);
 8001688:	4bba      	ldr	r3, [pc, #744]	@ (8001974 <FlightController_ControlSystem+0x5ac>)
 800168a:	edd3 7a03 	vldr	s15, [r3, #12]
 800168e:	4bba      	ldr	r3, [pc, #744]	@ (8001978 <FlightController_ControlSystem+0x5b0>)
 8001690:	ed93 7a06 	vldr	s14, [r3, #24]
 8001694:	eef0 0a47 	vmov.f32	s1, s14
 8001698:	eeb0 0a67 	vmov.f32	s0, s15
 800169c:	49b9      	ldr	r1, [pc, #740]	@ (8001984 <FlightController_ControlSystem+0x5bc>)
 800169e:	48ba      	ldr	r0, [pc, #744]	@ (8001988 <FlightController_ControlSystem+0x5c0>)
 80016a0:	f000 fe26 	bl	80022f0 <Kalman_CalculateAngle>

                        /* Read inputs from radio controller */
                        inputValue_throttle = FSA8S_ReadChannel(rc_controller, CHANNEL_3);
 80016a4:	4bb9      	ldr	r3, [pc, #740]	@ (800198c <FlightController_ControlSystem+0x5c4>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2103      	movs	r1, #3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f002 f92c 	bl	8003908 <FSA8S_ReadChannel>
 80016b0:	4603      	mov	r3, r0
 80016b2:	ee07 3a90 	vmov	s15, r3
 80016b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016ba:	4bb5      	ldr	r3, [pc, #724]	@ (8001990 <FlightController_ControlSystem+0x5c8>)
 80016bc:	edc3 7a00 	vstr	s15, [r3]
                        inputValue_rollAngle = FSA8S_ReadChannel(rc_controller, CHANNEL_1);
 80016c0:	4bb2      	ldr	r3, [pc, #712]	@ (800198c <FlightController_ControlSystem+0x5c4>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2101      	movs	r1, #1
 80016c6:	4618      	mov	r0, r3
 80016c8:	f002 f91e 	bl	8003908 <FSA8S_ReadChannel>
 80016cc:	4603      	mov	r3, r0
 80016ce:	ee07 3a90 	vmov	s15, r3
 80016d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016d6:	4baf      	ldr	r3, [pc, #700]	@ (8001994 <FlightController_ControlSystem+0x5cc>)
 80016d8:	edc3 7a00 	vstr	s15, [r3]
                        inputValue_pitchAngle = FSA8S_ReadChannel(rc_controller, CHANNEL_2);
 80016dc:	4bab      	ldr	r3, [pc, #684]	@ (800198c <FlightController_ControlSystem+0x5c4>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2102      	movs	r1, #2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f002 f910 	bl	8003908 <FSA8S_ReadChannel>
 80016e8:	4603      	mov	r3, r0
 80016ea:	ee07 3a90 	vmov	s15, r3
 80016ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016f2:	4ba9      	ldr	r3, [pc, #676]	@ (8001998 <FlightController_ControlSystem+0x5d0>)
 80016f4:	edc3 7a00 	vstr	s15, [r3]
                        inputValue_yawRate = FSA8S_ReadChannel(rc_controller, CHANNEL_4);
 80016f8:	4ba4      	ldr	r3, [pc, #656]	@ (800198c <FlightController_ControlSystem+0x5c4>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2104      	movs	r1, #4
 80016fe:	4618      	mov	r0, r3
 8001700:	f002 f902 	bl	8003908 <FSA8S_ReadChannel>
 8001704:	4603      	mov	r3, r0
 8001706:	ee07 3a90 	vmov	s15, r3
 800170a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800170e:	4ba3      	ldr	r3, [pc, #652]	@ (800199c <FlightController_ControlSystem+0x5d4>)
 8001710:	edc3 7a00 	vstr	s15, [r3]
//                        kI_pitchRate = 3.463 + (FSA8S_ReadChannel(rc_controller, CHANNEL_8) - 500) / 100;
//                        if(kP_pitchRate < 0)
//                        	kP_pitchRate = 0;
//                        if(kI_pitchRate < 0)
//                        	kI_pitchRate = 0;
                        kP_rollRate = FSA8S_ReadChannel(rc_controller, CHANNEL_7) / 250;
 8001714:	4b9d      	ldr	r3, [pc, #628]	@ (800198c <FlightController_ControlSystem+0x5c4>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2107      	movs	r1, #7
 800171a:	4618      	mov	r0, r3
 800171c:	f002 f8f4 	bl	8003908 <FSA8S_ReadChannel>
 8001720:	4603      	mov	r3, r0
 8001722:	461a      	mov	r2, r3
 8001724:	4b9e      	ldr	r3, [pc, #632]	@ (80019a0 <FlightController_ControlSystem+0x5d8>)
 8001726:	fba3 2302 	umull	r2, r3, r3, r2
 800172a:	091b      	lsrs	r3, r3, #4
 800172c:	b29b      	uxth	r3, r3
 800172e:	ee07 3a90 	vmov	s15, r3
 8001732:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001736:	4b9b      	ldr	r3, [pc, #620]	@ (80019a4 <FlightController_ControlSystem+0x5dc>)
 8001738:	edc3 7a00 	vstr	s15, [r3]
						kI_rollRate = FSA8S_ReadChannel(rc_controller, CHANNEL_8) / 250;
 800173c:	4b93      	ldr	r3, [pc, #588]	@ (800198c <FlightController_ControlSystem+0x5c4>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2108      	movs	r1, #8
 8001742:	4618      	mov	r0, r3
 8001744:	f002 f8e0 	bl	8003908 <FSA8S_ReadChannel>
 8001748:	4603      	mov	r3, r0
 800174a:	461a      	mov	r2, r3
 800174c:	4b94      	ldr	r3, [pc, #592]	@ (80019a0 <FlightController_ControlSystem+0x5d8>)
 800174e:	fba3 2302 	umull	r2, r3, r3, r2
 8001752:	091b      	lsrs	r3, r3, #4
 8001754:	b29b      	uxth	r3, r3
 8001756:	ee07 3a90 	vmov	s15, r3
 800175a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800175e:	4b92      	ldr	r3, [pc, #584]	@ (80019a8 <FlightController_ControlSystem+0x5e0>)
 8001760:	edc3 7a00 	vstr	s15, [r3]

                        /* Adjust and limit throttle input */
                        if (CONTROL_SYSTEM_MAXIMUM_INPUT_THROTTLE < inputValue_throttle) {
 8001764:	4b8a      	ldr	r3, [pc, #552]	@ (8001990 <FlightController_ControlSystem+0x5c8>)
 8001766:	edd3 7a00 	vldr	s15, [r3]
 800176a:	ed9f 7a90 	vldr	s14, [pc, #576]	@ 80019ac <FlightController_ControlSystem+0x5e4>
 800176e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001776:	dd02      	ble.n	800177e <FlightController_ControlSystem+0x3b6>
                            inputValue_throttle = CONTROL_SYSTEM_MAXIMUM_INPUT_THROTTLE;
 8001778:	4b85      	ldr	r3, [pc, #532]	@ (8001990 <FlightController_ControlSystem+0x5c8>)
 800177a:	4a8d      	ldr	r2, [pc, #564]	@ (80019b0 <FlightController_ControlSystem+0x5e8>)
 800177c:	601a      	str	r2, [r3, #0]
                        }

                        /* Calculate desired angles by mapping radio controller values to angles */
                        desiredValue_rollAngle = 0.03 * (inputValue_rollAngle - 500);
 800177e:	4b85      	ldr	r3, [pc, #532]	@ (8001994 <FlightController_ControlSystem+0x5cc>)
 8001780:	edd3 7a00 	vldr	s15, [r3]
 8001784:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 80019b4 <FlightController_ControlSystem+0x5ec>
 8001788:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800178c:	ee17 0a90 	vmov	r0, s15
 8001790:	f7fe fee2 	bl	8000558 <__aeabi_f2d>
 8001794:	a374      	add	r3, pc, #464	@ (adr r3, 8001968 <FlightController_ControlSystem+0x5a0>)
 8001796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179a:	f7fe ff35 	bl	8000608 <__aeabi_dmul>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4610      	mov	r0, r2
 80017a4:	4619      	mov	r1, r3
 80017a6:	f7ff fa27 	bl	8000bf8 <__aeabi_d2f>
 80017aa:	4603      	mov	r3, r0
 80017ac:	4a82      	ldr	r2, [pc, #520]	@ (80019b8 <FlightController_ControlSystem+0x5f0>)
 80017ae:	6013      	str	r3, [r2, #0]
                        desiredValue_pitchAngle = 0.03 * (inputValue_pitchAngle - 500);
 80017b0:	4b79      	ldr	r3, [pc, #484]	@ (8001998 <FlightController_ControlSystem+0x5d0>)
 80017b2:	edd3 7a00 	vldr	s15, [r3]
 80017b6:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 80019b4 <FlightController_ControlSystem+0x5ec>
 80017ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017be:	ee17 0a90 	vmov	r0, s15
 80017c2:	f7fe fec9 	bl	8000558 <__aeabi_f2d>
 80017c6:	a368      	add	r3, pc, #416	@ (adr r3, 8001968 <FlightController_ControlSystem+0x5a0>)
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	f7fe ff1c 	bl	8000608 <__aeabi_dmul>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f7ff fa0e 	bl	8000bf8 <__aeabi_d2f>
 80017dc:	4603      	mov	r3, r0
 80017de:	4a77      	ldr	r2, [pc, #476]	@ (80019bc <FlightController_ControlSystem+0x5f4>)
 80017e0:	6013      	str	r3, [r2, #0]

                        /* Calculate angles errors */
                        errorValue_rollAngle = desiredValue_rollAngle - Kalman_predictionValue_rollAngle;
 80017e2:	4b75      	ldr	r3, [pc, #468]	@ (80019b8 <FlightController_ControlSystem+0x5f0>)
 80017e4:	ed93 7a00 	vldr	s14, [r3]
 80017e8:	4b65      	ldr	r3, [pc, #404]	@ (8001980 <FlightController_ControlSystem+0x5b8>)
 80017ea:	edd3 7a00 	vldr	s15, [r3]
 80017ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f2:	4b73      	ldr	r3, [pc, #460]	@ (80019c0 <FlightController_ControlSystem+0x5f8>)
 80017f4:	edc3 7a00 	vstr	s15, [r3]
                        errorValue_pitchAngle = desiredValue_pitchAngle - Kalman_predictionValue_pitchAngle;
 80017f8:	4b70      	ldr	r3, [pc, #448]	@ (80019bc <FlightController_ControlSystem+0x5f4>)
 80017fa:	ed93 7a00 	vldr	s14, [r3]
 80017fe:	4b62      	ldr	r3, [pc, #392]	@ (8001988 <FlightController_ControlSystem+0x5c0>)
 8001800:	edd3 7a00 	vldr	s15, [r3]
 8001804:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001808:	4b6e      	ldr	r3, [pc, #440]	@ (80019c4 <FlightController_ControlSystem+0x5fc>)
 800180a:	edc3 7a00 	vstr	s15, [r3]

                        /* Calculate PID for roll angle */
                        CSM2_CalculatePID(&pidOutputValue_rollAngle, &previousIterm_rollAngle, &previousErrorValue_rollAngle, errorValue_rollAngle, kP_rollAngle, kI_rollAngle, kD_rollAngle);
 800180e:	4b6c      	ldr	r3, [pc, #432]	@ (80019c0 <FlightController_ControlSystem+0x5f8>)
 8001810:	edd3 7a00 	vldr	s15, [r3]
 8001814:	4b6c      	ldr	r3, [pc, #432]	@ (80019c8 <FlightController_ControlSystem+0x600>)
 8001816:	ed93 7a00 	vldr	s14, [r3]
 800181a:	4b6c      	ldr	r3, [pc, #432]	@ (80019cc <FlightController_ControlSystem+0x604>)
 800181c:	edd3 6a00 	vldr	s13, [r3]
 8001820:	4b6b      	ldr	r3, [pc, #428]	@ (80019d0 <FlightController_ControlSystem+0x608>)
 8001822:	ed93 6a00 	vldr	s12, [r3]
 8001826:	eef0 1a46 	vmov.f32	s3, s12
 800182a:	eeb0 1a66 	vmov.f32	s2, s13
 800182e:	eef0 0a47 	vmov.f32	s1, s14
 8001832:	eeb0 0a67 	vmov.f32	s0, s15
 8001836:	4a67      	ldr	r2, [pc, #412]	@ (80019d4 <FlightController_ControlSystem+0x60c>)
 8001838:	4967      	ldr	r1, [pc, #412]	@ (80019d8 <FlightController_ControlSystem+0x610>)
 800183a:	4868      	ldr	r0, [pc, #416]	@ (80019dc <FlightController_ControlSystem+0x614>)
 800183c:	f000 fdd0 	bl	80023e0 <CSM2_CalculatePID>
                        /* Calculate PID for pitch angle */
                        CSM2_CalculatePID(&pidOutputValue_pitchAngle, &previousIterm_pitchAngle, &previousErrorValue_pitchAngle, errorValue_pitchAngle, kP_pitchAngle, kI_pitchAngle, kD_pitchAngle);
 8001840:	4b60      	ldr	r3, [pc, #384]	@ (80019c4 <FlightController_ControlSystem+0x5fc>)
 8001842:	edd3 7a00 	vldr	s15, [r3]
 8001846:	4b66      	ldr	r3, [pc, #408]	@ (80019e0 <FlightController_ControlSystem+0x618>)
 8001848:	ed93 7a00 	vldr	s14, [r3]
 800184c:	4b65      	ldr	r3, [pc, #404]	@ (80019e4 <FlightController_ControlSystem+0x61c>)
 800184e:	edd3 6a00 	vldr	s13, [r3]
 8001852:	4b65      	ldr	r3, [pc, #404]	@ (80019e8 <FlightController_ControlSystem+0x620>)
 8001854:	ed93 6a00 	vldr	s12, [r3]
 8001858:	eef0 1a46 	vmov.f32	s3, s12
 800185c:	eeb0 1a66 	vmov.f32	s2, s13
 8001860:	eef0 0a47 	vmov.f32	s1, s14
 8001864:	eeb0 0a67 	vmov.f32	s0, s15
 8001868:	4a60      	ldr	r2, [pc, #384]	@ (80019ec <FlightController_ControlSystem+0x624>)
 800186a:	4961      	ldr	r1, [pc, #388]	@ (80019f0 <FlightController_ControlSystem+0x628>)
 800186c:	4861      	ldr	r0, [pc, #388]	@ (80019f4 <FlightController_ControlSystem+0x62c>)
 800186e:	f000 fdb7 	bl	80023e0 <CSM2_CalculatePID>

                        /* Calculate desired rates */
                        desiredValue_rollRate = pidOutputValue_rollAngle;
 8001872:	4b5a      	ldr	r3, [pc, #360]	@ (80019dc <FlightController_ControlSystem+0x614>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a60      	ldr	r2, [pc, #384]	@ (80019f8 <FlightController_ControlSystem+0x630>)
 8001878:	6013      	str	r3, [r2, #0]
                        desiredValue_pitchRate = pidOutputValue_pitchAngle;
 800187a:	4b5e      	ldr	r3, [pc, #376]	@ (80019f4 <FlightController_ControlSystem+0x62c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a5f      	ldr	r2, [pc, #380]	@ (80019fc <FlightController_ControlSystem+0x634>)
 8001880:	6013      	str	r3, [r2, #0]
                        desiredValue_yawRate = 0.03 * (inputValue_yawRate - 500);
 8001882:	4b46      	ldr	r3, [pc, #280]	@ (800199c <FlightController_ControlSystem+0x5d4>)
 8001884:	edd3 7a00 	vldr	s15, [r3]
 8001888:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80019b4 <FlightController_ControlSystem+0x5ec>
 800188c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001890:	ee17 0a90 	vmov	r0, s15
 8001894:	f7fe fe60 	bl	8000558 <__aeabi_f2d>
 8001898:	a333      	add	r3, pc, #204	@ (adr r3, 8001968 <FlightController_ControlSystem+0x5a0>)
 800189a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189e:	f7fe feb3 	bl	8000608 <__aeabi_dmul>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	f7ff f9a5 	bl	8000bf8 <__aeabi_d2f>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4a53      	ldr	r2, [pc, #332]	@ (8001a00 <FlightController_ControlSystem+0x638>)
 80018b2:	6013      	str	r3, [r2, #0]

                        /* Calculate rates errors */
                        errorValue_rollRate = desiredValue_rollRate - GY87_gyroscopeValues.rotationRateRoll;
 80018b4:	4b50      	ldr	r3, [pc, #320]	@ (80019f8 <FlightController_ControlSystem+0x630>)
 80018b6:	ed93 7a00 	vldr	s14, [r3]
 80018ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001974 <FlightController_ControlSystem+0x5ac>)
 80018bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80018c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018c4:	4b4f      	ldr	r3, [pc, #316]	@ (8001a04 <FlightController_ControlSystem+0x63c>)
 80018c6:	edc3 7a00 	vstr	s15, [r3]
                        errorValue_pitchRate = desiredValue_pitchRate - GY87_gyroscopeValues.rotationRatePitch;
 80018ca:	4b4c      	ldr	r3, [pc, #304]	@ (80019fc <FlightController_ControlSystem+0x634>)
 80018cc:	ed93 7a00 	vldr	s14, [r3]
 80018d0:	4b28      	ldr	r3, [pc, #160]	@ (8001974 <FlightController_ControlSystem+0x5ac>)
 80018d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80018d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018da:	4b4b      	ldr	r3, [pc, #300]	@ (8001a08 <FlightController_ControlSystem+0x640>)
 80018dc:	edc3 7a00 	vstr	s15, [r3]
                        errorValue_yawRate = desiredValue_yawRate - GY87_gyroscopeValues.rotationRateYaw;
 80018e0:	4b47      	ldr	r3, [pc, #284]	@ (8001a00 <FlightController_ControlSystem+0x638>)
 80018e2:	ed93 7a00 	vldr	s14, [r3]
 80018e6:	4b23      	ldr	r3, [pc, #140]	@ (8001974 <FlightController_ControlSystem+0x5ac>)
 80018e8:	edd3 7a04 	vldr	s15, [r3, #16]
 80018ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f0:	4b46      	ldr	r3, [pc, #280]	@ (8001a0c <FlightController_ControlSystem+0x644>)
 80018f2:	edc3 7a00 	vstr	s15, [r3]

                        /* Calculate PID for roll rate */
                        CSM2_CalculatePID(&pidOutputValue_rollRate, &previousIterm_rollRate, &previousErrorValue_rollRate, errorValue_rollRate, kP_rollRate, kI_rollRate, kD_rollRate);
 80018f6:	4b43      	ldr	r3, [pc, #268]	@ (8001a04 <FlightController_ControlSystem+0x63c>)
 80018f8:	edd3 7a00 	vldr	s15, [r3]
 80018fc:	4b29      	ldr	r3, [pc, #164]	@ (80019a4 <FlightController_ControlSystem+0x5dc>)
 80018fe:	ed93 7a00 	vldr	s14, [r3]
 8001902:	4b29      	ldr	r3, [pc, #164]	@ (80019a8 <FlightController_ControlSystem+0x5e0>)
 8001904:	edd3 6a00 	vldr	s13, [r3]
 8001908:	4b41      	ldr	r3, [pc, #260]	@ (8001a10 <FlightController_ControlSystem+0x648>)
 800190a:	ed93 6a00 	vldr	s12, [r3]
 800190e:	eef0 1a46 	vmov.f32	s3, s12
 8001912:	eeb0 1a66 	vmov.f32	s2, s13
 8001916:	eef0 0a47 	vmov.f32	s1, s14
 800191a:	eeb0 0a67 	vmov.f32	s0, s15
 800191e:	4a3d      	ldr	r2, [pc, #244]	@ (8001a14 <FlightController_ControlSystem+0x64c>)
 8001920:	493d      	ldr	r1, [pc, #244]	@ (8001a18 <FlightController_ControlSystem+0x650>)
 8001922:	483e      	ldr	r0, [pc, #248]	@ (8001a1c <FlightController_ControlSystem+0x654>)
 8001924:	f000 fd5c 	bl	80023e0 <CSM2_CalculatePID>
                        /* Calculate PID for pitch rate */
                        CSM2_CalculatePID(&pidOutputValue_pitchRate, &previousIterm_pitchRate, &previousErrorValue_pitchRate, errorValue_pitchRate, kP_pitchRate, kI_pitchRate, kD_pitchRate);
 8001928:	4b37      	ldr	r3, [pc, #220]	@ (8001a08 <FlightController_ControlSystem+0x640>)
 800192a:	edd3 7a00 	vldr	s15, [r3]
 800192e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a20 <FlightController_ControlSystem+0x658>)
 8001930:	ed93 7a00 	vldr	s14, [r3]
 8001934:	4b3b      	ldr	r3, [pc, #236]	@ (8001a24 <FlightController_ControlSystem+0x65c>)
 8001936:	edd3 6a00 	vldr	s13, [r3]
 800193a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a28 <FlightController_ControlSystem+0x660>)
 800193c:	ed93 6a00 	vldr	s12, [r3]
 8001940:	eef0 1a46 	vmov.f32	s3, s12
 8001944:	eeb0 1a66 	vmov.f32	s2, s13
 8001948:	eef0 0a47 	vmov.f32	s1, s14
 800194c:	eeb0 0a67 	vmov.f32	s0, s15
 8001950:	4a36      	ldr	r2, [pc, #216]	@ (8001a2c <FlightController_ControlSystem+0x664>)
 8001952:	4937      	ldr	r1, [pc, #220]	@ (8001a30 <FlightController_ControlSystem+0x668>)
 8001954:	4837      	ldr	r0, [pc, #220]	@ (8001a34 <FlightController_ControlSystem+0x66c>)
 8001956:	f000 fd43 	bl	80023e0 <CSM2_CalculatePID>
                        /* Calculate PID for yaw rate */
                        CSM2_CalculatePID(&pidOutputValue_yawRate, &previousIterm_yawRate, &previousErrorValue_yawRate, errorValue_yawRate, kP_yawRate, kI_yawRate, kD_yawRate);
 800195a:	4b2c      	ldr	r3, [pc, #176]	@ (8001a0c <FlightController_ControlSystem+0x644>)
 800195c:	edd3 7a00 	vldr	s15, [r3]
 8001960:	e06a      	b.n	8001a38 <FlightController_ControlSystem+0x670>
 8001962:	bf00      	nop
 8001964:	f3af 8000 	nop.w
 8001968:	eb851eb8 	.word	0xeb851eb8
 800196c:	3f9eb851 	.word	0x3f9eb851
 8001970:	20000390 	.word	0x20000390
 8001974:	200003ac 	.word	0x200003ac
 8001978:	200003c0 	.word	0x200003c0
 800197c:	20000008 	.word	0x20000008
 8001980:	200003e0 	.word	0x200003e0
 8001984:	2000000c 	.word	0x2000000c
 8001988:	200003e4 	.word	0x200003e4
 800198c:	2000038c 	.word	0x2000038c
 8001990:	200003ec 	.word	0x200003ec
 8001994:	200003f0 	.word	0x200003f0
 8001998:	200003f4 	.word	0x200003f4
 800199c:	20000430 	.word	0x20000430
 80019a0:	10624dd3 	.word	0x10624dd3
 80019a4:	20000018 	.word	0x20000018
 80019a8:	2000001c 	.word	0x2000001c
 80019ac:	44e10000 	.word	0x44e10000
 80019b0:	44e10000 	.word	0x44e10000
 80019b4:	43fa0000 	.word	0x43fa0000
 80019b8:	200003f8 	.word	0x200003f8
 80019bc:	200003fc 	.word	0x200003fc
 80019c0:	20000400 	.word	0x20000400
 80019c4:	20000404 	.word	0x20000404
 80019c8:	20000010 	.word	0x20000010
 80019cc:	20000418 	.word	0x20000418
 80019d0:	20000420 	.word	0x20000420
 80019d4:	20000408 	.word	0x20000408
 80019d8:	20000410 	.word	0x20000410
 80019dc:	20000428 	.word	0x20000428
 80019e0:	20000014 	.word	0x20000014
 80019e4:	2000041c 	.word	0x2000041c
 80019e8:	20000424 	.word	0x20000424
 80019ec:	2000040c 	.word	0x2000040c
 80019f0:	20000414 	.word	0x20000414
 80019f4:	2000042c 	.word	0x2000042c
 80019f8:	20000434 	.word	0x20000434
 80019fc:	20000438 	.word	0x20000438
 8001a00:	2000043c 	.word	0x2000043c
 8001a04:	20000440 	.word	0x20000440
 8001a08:	20000444 	.word	0x20000444
 8001a0c:	20000448 	.word	0x20000448
 8001a10:	20000474 	.word	0x20000474
 8001a14:	2000044c 	.word	0x2000044c
 8001a18:	20000458 	.word	0x20000458
 8001a1c:	20000480 	.word	0x20000480
 8001a20:	20000464 	.word	0x20000464
 8001a24:	2000046c 	.word	0x2000046c
 8001a28:	20000478 	.word	0x20000478
 8001a2c:	20000450 	.word	0x20000450
 8001a30:	2000045c 	.word	0x2000045c
 8001a34:	20000484 	.word	0x20000484
 8001a38:	4b98      	ldr	r3, [pc, #608]	@ (8001c9c <FlightController_ControlSystem+0x8d4>)
 8001a3a:	ed93 7a00 	vldr	s14, [r3]
 8001a3e:	4b98      	ldr	r3, [pc, #608]	@ (8001ca0 <FlightController_ControlSystem+0x8d8>)
 8001a40:	edd3 6a00 	vldr	s13, [r3]
 8001a44:	4b97      	ldr	r3, [pc, #604]	@ (8001ca4 <FlightController_ControlSystem+0x8dc>)
 8001a46:	ed93 6a00 	vldr	s12, [r3]
 8001a4a:	eef0 1a46 	vmov.f32	s3, s12
 8001a4e:	eeb0 1a66 	vmov.f32	s2, s13
 8001a52:	eef0 0a47 	vmov.f32	s1, s14
 8001a56:	eeb0 0a67 	vmov.f32	s0, s15
 8001a5a:	4a93      	ldr	r2, [pc, #588]	@ (8001ca8 <FlightController_ControlSystem+0x8e0>)
 8001a5c:	4993      	ldr	r1, [pc, #588]	@ (8001cac <FlightController_ControlSystem+0x8e4>)
 8001a5e:	4894      	ldr	r0, [pc, #592]	@ (8001cb0 <FlightController_ControlSystem+0x8e8>)
 8001a60:	f000 fcbe 	bl	80023e0 <CSM2_CalculatePID>

                        /* Calculate motors speed */
                        motorSpeed1 = (inputValue_throttle - pidOutputValue_rollRate - pidOutputValue_pitchRate - pidOutputValue_yawRate) / 10;
 8001a64:	4b93      	ldr	r3, [pc, #588]	@ (8001cb4 <FlightController_ControlSystem+0x8ec>)
 8001a66:	ed93 7a00 	vldr	s14, [r3]
 8001a6a:	4b93      	ldr	r3, [pc, #588]	@ (8001cb8 <FlightController_ControlSystem+0x8f0>)
 8001a6c:	edd3 7a00 	vldr	s15, [r3]
 8001a70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a74:	4b91      	ldr	r3, [pc, #580]	@ (8001cbc <FlightController_ControlSystem+0x8f4>)
 8001a76:	edd3 7a00 	vldr	s15, [r3]
 8001a7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a7e:	4b8c      	ldr	r3, [pc, #560]	@ (8001cb0 <FlightController_ControlSystem+0x8e8>)
 8001a80:	edd3 7a00 	vldr	s15, [r3]
 8001a84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a88:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001a8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a90:	4b8b      	ldr	r3, [pc, #556]	@ (8001cc0 <FlightController_ControlSystem+0x8f8>)
 8001a92:	edc3 7a00 	vstr	s15, [r3]
                        motorSpeed2 = (inputValue_throttle + pidOutputValue_rollRate + pidOutputValue_pitchRate - pidOutputValue_yawRate) / 10;
 8001a96:	4b87      	ldr	r3, [pc, #540]	@ (8001cb4 <FlightController_ControlSystem+0x8ec>)
 8001a98:	ed93 7a00 	vldr	s14, [r3]
 8001a9c:	4b86      	ldr	r3, [pc, #536]	@ (8001cb8 <FlightController_ControlSystem+0x8f0>)
 8001a9e:	edd3 7a00 	vldr	s15, [r3]
 8001aa2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aa6:	4b85      	ldr	r3, [pc, #532]	@ (8001cbc <FlightController_ControlSystem+0x8f4>)
 8001aa8:	edd3 7a00 	vldr	s15, [r3]
 8001aac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ab0:	4b7f      	ldr	r3, [pc, #508]	@ (8001cb0 <FlightController_ControlSystem+0x8e8>)
 8001ab2:	edd3 7a00 	vldr	s15, [r3]
 8001ab6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001aba:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001abe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ac2:	4b80      	ldr	r3, [pc, #512]	@ (8001cc4 <FlightController_ControlSystem+0x8fc>)
 8001ac4:	edc3 7a00 	vstr	s15, [r3]
                        motorSpeed3 = (inputValue_throttle + pidOutputValue_rollRate - pidOutputValue_pitchRate + pidOutputValue_yawRate) / 10;
 8001ac8:	4b7a      	ldr	r3, [pc, #488]	@ (8001cb4 <FlightController_ControlSystem+0x8ec>)
 8001aca:	ed93 7a00 	vldr	s14, [r3]
 8001ace:	4b7a      	ldr	r3, [pc, #488]	@ (8001cb8 <FlightController_ControlSystem+0x8f0>)
 8001ad0:	edd3 7a00 	vldr	s15, [r3]
 8001ad4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ad8:	4b78      	ldr	r3, [pc, #480]	@ (8001cbc <FlightController_ControlSystem+0x8f4>)
 8001ada:	edd3 7a00 	vldr	s15, [r3]
 8001ade:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ae2:	4b73      	ldr	r3, [pc, #460]	@ (8001cb0 <FlightController_ControlSystem+0x8e8>)
 8001ae4:	edd3 7a00 	vldr	s15, [r3]
 8001ae8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aec:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001af0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001af4:	4b74      	ldr	r3, [pc, #464]	@ (8001cc8 <FlightController_ControlSystem+0x900>)
 8001af6:	edc3 7a00 	vstr	s15, [r3]
                        motorSpeed4 = (inputValue_throttle - pidOutputValue_rollRate + pidOutputValue_pitchRate + pidOutputValue_yawRate) / 10;
 8001afa:	4b6e      	ldr	r3, [pc, #440]	@ (8001cb4 <FlightController_ControlSystem+0x8ec>)
 8001afc:	ed93 7a00 	vldr	s14, [r3]
 8001b00:	4b6d      	ldr	r3, [pc, #436]	@ (8001cb8 <FlightController_ControlSystem+0x8f0>)
 8001b02:	edd3 7a00 	vldr	s15, [r3]
 8001b06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b0a:	4b6c      	ldr	r3, [pc, #432]	@ (8001cbc <FlightController_ControlSystem+0x8f4>)
 8001b0c:	edd3 7a00 	vldr	s15, [r3]
 8001b10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b14:	4b66      	ldr	r3, [pc, #408]	@ (8001cb0 <FlightController_ControlSystem+0x8e8>)
 8001b16:	edd3 7a00 	vldr	s15, [r3]
 8001b1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b1e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001b22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b26:	4b69      	ldr	r3, [pc, #420]	@ (8001ccc <FlightController_ControlSystem+0x904>)
 8001b28:	edc3 7a00 	vstr	s15, [r3]

                        /* Adjust and limit motors maximum speed */
                        if (ESC_MAXIMUM_SPEED < motorSpeed1)
 8001b2c:	4b64      	ldr	r3, [pc, #400]	@ (8001cc0 <FlightController_ControlSystem+0x8f8>)
 8001b2e:	edd3 7a00 	vldr	s15, [r3]
 8001b32:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8001cd0 <FlightController_ControlSystem+0x908>
 8001b36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3e:	dd02      	ble.n	8001b46 <FlightController_ControlSystem+0x77e>
                            motorSpeed1 = ESC_MAXIMUM_SPEED;
 8001b40:	4b5f      	ldr	r3, [pc, #380]	@ (8001cc0 <FlightController_ControlSystem+0x8f8>)
 8001b42:	4a64      	ldr	r2, [pc, #400]	@ (8001cd4 <FlightController_ControlSystem+0x90c>)
 8001b44:	601a      	str	r2, [r3, #0]
                        if (ESC_MAXIMUM_SPEED < motorSpeed2)
 8001b46:	4b5f      	ldr	r3, [pc, #380]	@ (8001cc4 <FlightController_ControlSystem+0x8fc>)
 8001b48:	edd3 7a00 	vldr	s15, [r3]
 8001b4c:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8001cd0 <FlightController_ControlSystem+0x908>
 8001b50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b58:	dd02      	ble.n	8001b60 <FlightController_ControlSystem+0x798>
                            motorSpeed2 = ESC_MAXIMUM_SPEED;
 8001b5a:	4b5a      	ldr	r3, [pc, #360]	@ (8001cc4 <FlightController_ControlSystem+0x8fc>)
 8001b5c:	4a5d      	ldr	r2, [pc, #372]	@ (8001cd4 <FlightController_ControlSystem+0x90c>)
 8001b5e:	601a      	str	r2, [r3, #0]
                        if (ESC_MAXIMUM_SPEED < motorSpeed3)
 8001b60:	4b59      	ldr	r3, [pc, #356]	@ (8001cc8 <FlightController_ControlSystem+0x900>)
 8001b62:	edd3 7a00 	vldr	s15, [r3]
 8001b66:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8001cd0 <FlightController_ControlSystem+0x908>
 8001b6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b72:	dd02      	ble.n	8001b7a <FlightController_ControlSystem+0x7b2>
                            motorSpeed3 = ESC_MAXIMUM_SPEED;
 8001b74:	4b54      	ldr	r3, [pc, #336]	@ (8001cc8 <FlightController_ControlSystem+0x900>)
 8001b76:	4a57      	ldr	r2, [pc, #348]	@ (8001cd4 <FlightController_ControlSystem+0x90c>)
 8001b78:	601a      	str	r2, [r3, #0]
                        if (ESC_MAXIMUM_SPEED < motorSpeed4)
 8001b7a:	4b54      	ldr	r3, [pc, #336]	@ (8001ccc <FlightController_ControlSystem+0x904>)
 8001b7c:	edd3 7a00 	vldr	s15, [r3]
 8001b80:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001cd0 <FlightController_ControlSystem+0x908>
 8001b84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8c:	dd02      	ble.n	8001b94 <FlightController_ControlSystem+0x7cc>
                            motorSpeed4 = ESC_MAXIMUM_SPEED;
 8001b8e:	4b4f      	ldr	r3, [pc, #316]	@ (8001ccc <FlightController_ControlSystem+0x904>)
 8001b90:	4a50      	ldr	r2, [pc, #320]	@ (8001cd4 <FlightController_ControlSystem+0x90c>)
 8001b92:	601a      	str	r2, [r3, #0]

                        /* Adjust and limit motors minimum speed */
                        if (ESC_MINIMUM_SPEED > motorSpeed1)
 8001b94:	4b4a      	ldr	r3, [pc, #296]	@ (8001cc0 <FlightController_ControlSystem+0x8f8>)
 8001b96:	edd3 7a00 	vldr	s15, [r3]
 8001b9a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001b9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba6:	d502      	bpl.n	8001bae <FlightController_ControlSystem+0x7e6>
                            motorSpeed1 = ESC_MINIMUM_SPEED;
 8001ba8:	4b45      	ldr	r3, [pc, #276]	@ (8001cc0 <FlightController_ControlSystem+0x8f8>)
 8001baa:	4a4b      	ldr	r2, [pc, #300]	@ (8001cd8 <FlightController_ControlSystem+0x910>)
 8001bac:	601a      	str	r2, [r3, #0]
                        if (ESC_MINIMUM_SPEED > motorSpeed2)
 8001bae:	4b45      	ldr	r3, [pc, #276]	@ (8001cc4 <FlightController_ControlSystem+0x8fc>)
 8001bb0:	edd3 7a00 	vldr	s15, [r3]
 8001bb4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001bb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc0:	d502      	bpl.n	8001bc8 <FlightController_ControlSystem+0x800>
                            motorSpeed2 = ESC_MINIMUM_SPEED;
 8001bc2:	4b40      	ldr	r3, [pc, #256]	@ (8001cc4 <FlightController_ControlSystem+0x8fc>)
 8001bc4:	4a44      	ldr	r2, [pc, #272]	@ (8001cd8 <FlightController_ControlSystem+0x910>)
 8001bc6:	601a      	str	r2, [r3, #0]
                        if (ESC_MINIMUM_SPEED > motorSpeed3)
 8001bc8:	4b3f      	ldr	r3, [pc, #252]	@ (8001cc8 <FlightController_ControlSystem+0x900>)
 8001bca:	edd3 7a00 	vldr	s15, [r3]
 8001bce:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001bd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bda:	d502      	bpl.n	8001be2 <FlightController_ControlSystem+0x81a>
                            motorSpeed3 = ESC_MINIMUM_SPEED;
 8001bdc:	4b3a      	ldr	r3, [pc, #232]	@ (8001cc8 <FlightController_ControlSystem+0x900>)
 8001bde:	4a3e      	ldr	r2, [pc, #248]	@ (8001cd8 <FlightController_ControlSystem+0x910>)
 8001be0:	601a      	str	r2, [r3, #0]
                        if (ESC_MINIMUM_SPEED > motorSpeed4)
 8001be2:	4b3a      	ldr	r3, [pc, #232]	@ (8001ccc <FlightController_ControlSystem+0x904>)
 8001be4:	edd3 7a00 	vldr	s15, [r3]
 8001be8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001bec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf4:	d502      	bpl.n	8001bfc <FlightController_ControlSystem+0x834>
                            motorSpeed4 = ESC_MINIMUM_SPEED;
 8001bf6:	4b35      	ldr	r3, [pc, #212]	@ (8001ccc <FlightController_ControlSystem+0x904>)
 8001bf8:	4a37      	ldr	r2, [pc, #220]	@ (8001cd8 <FlightController_ControlSystem+0x910>)
 8001bfa:	601a      	str	r2, [r3, #0]

                        /* Save motors speed */
                        ESC_speeds[1] = motorSpeed1;
 8001bfc:	4b30      	ldr	r3, [pc, #192]	@ (8001cc0 <FlightController_ControlSystem+0x8f8>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a36      	ldr	r2, [pc, #216]	@ (8001cdc <FlightController_ControlSystem+0x914>)
 8001c02:	6053      	str	r3, [r2, #4]
                        ESC_speeds[2] = motorSpeed2;
 8001c04:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc4 <FlightController_ControlSystem+0x8fc>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a34      	ldr	r2, [pc, #208]	@ (8001cdc <FlightController_ControlSystem+0x914>)
 8001c0a:	6093      	str	r3, [r2, #8]
                        ESC_speeds[3] = motorSpeed3;
 8001c0c:	4b2e      	ldr	r3, [pc, #184]	@ (8001cc8 <FlightController_ControlSystem+0x900>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a32      	ldr	r2, [pc, #200]	@ (8001cdc <FlightController_ControlSystem+0x914>)
 8001c12:	60d3      	str	r3, [r2, #12]
                        ESC_speeds[4] = motorSpeed4;
 8001c14:	4b2d      	ldr	r3, [pc, #180]	@ (8001ccc <FlightController_ControlSystem+0x904>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a30      	ldr	r2, [pc, #192]	@ (8001cdc <FlightController_ControlSystem+0x914>)
 8001c1a:	6113      	str	r3, [r2, #16]

                        /* Set motors speed */
                        ESC_SetSpeed(hesc, hesc->esc1, ESC_speeds[4]);
 8001c1c:	4b30      	ldr	r3, [pc, #192]	@ (8001ce0 <FlightController_ControlSystem+0x918>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b2f      	ldr	r3, [pc, #188]	@ (8001ce0 <FlightController_ControlSystem+0x918>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	791b      	ldrb	r3, [r3, #4]
 8001c26:	492d      	ldr	r1, [pc, #180]	@ (8001cdc <FlightController_ControlSystem+0x914>)
 8001c28:	edd1 7a04 	vldr	s15, [r1, #16]
 8001c2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c30:	4619      	mov	r1, r3
 8001c32:	4610      	mov	r0, r2
 8001c34:	f001 fcd0 	bl	80035d8 <ESC_SetSpeed>
                        ESC_SetSpeed(hesc, hesc->esc2, ESC_speeds[2]);
 8001c38:	4b29      	ldr	r3, [pc, #164]	@ (8001ce0 <FlightController_ControlSystem+0x918>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b28      	ldr	r3, [pc, #160]	@ (8001ce0 <FlightController_ControlSystem+0x918>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	795b      	ldrb	r3, [r3, #5]
 8001c42:	4926      	ldr	r1, [pc, #152]	@ (8001cdc <FlightController_ControlSystem+0x914>)
 8001c44:	edd1 7a02 	vldr	s15, [r1, #8]
 8001c48:	eeb0 0a67 	vmov.f32	s0, s15
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4610      	mov	r0, r2
 8001c50:	f001 fcc2 	bl	80035d8 <ESC_SetSpeed>
                        ESC_SetSpeed(hesc, hesc->esc3, ESC_speeds[3]);
 8001c54:	4b22      	ldr	r3, [pc, #136]	@ (8001ce0 <FlightController_ControlSystem+0x918>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4b21      	ldr	r3, [pc, #132]	@ (8001ce0 <FlightController_ControlSystem+0x918>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	799b      	ldrb	r3, [r3, #6]
 8001c5e:	491f      	ldr	r1, [pc, #124]	@ (8001cdc <FlightController_ControlSystem+0x914>)
 8001c60:	edd1 7a03 	vldr	s15, [r1, #12]
 8001c64:	eeb0 0a67 	vmov.f32	s0, s15
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	f001 fcb4 	bl	80035d8 <ESC_SetSpeed>
                        ESC_SetSpeed(hesc, hesc->esc4, ESC_speeds[1]);
 8001c70:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce0 <FlightController_ControlSystem+0x918>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce0 <FlightController_ControlSystem+0x918>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	79db      	ldrb	r3, [r3, #7]
 8001c7a:	4918      	ldr	r1, [pc, #96]	@ (8001cdc <FlightController_ControlSystem+0x914>)
 8001c7c:	edd1 7a01 	vldr	s15, [r1, #4]
 8001c80:	eeb0 0a67 	vmov.f32	s0, s15
 8001c84:	4619      	mov	r1, r3
 8001c86:	4610      	mov	r0, r2
 8001c88:	f001 fca6 	bl	80035d8 <ESC_SetSpeed>
                    }

                    /* Reset Timer4 flag */
                    Timer4_flag = false;
 8001c8c:	4b15      	ldr	r3, [pc, #84]	@ (8001ce4 <FlightController_ControlSystem+0x91c>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	701a      	strb	r2, [r3, #0]

#endif
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f00c faa8 	bl	800e1e8 <vTaskDelay>
        if (1 == GY87_CALIBRATION_EN) {
 8001c98:	f7ff bb9c 	b.w	80013d4 <FlightController_ControlSystem+0xc>
 8001c9c:	20000468 	.word	0x20000468
 8001ca0:	20000470 	.word	0x20000470
 8001ca4:	2000047c 	.word	0x2000047c
 8001ca8:	20000454 	.word	0x20000454
 8001cac:	20000460 	.word	0x20000460
 8001cb0:	20000488 	.word	0x20000488
 8001cb4:	200003ec 	.word	0x200003ec
 8001cb8:	20000480 	.word	0x20000480
 8001cbc:	20000484 	.word	0x20000484
 8001cc0:	2000048c 	.word	0x2000048c
 8001cc4:	20000490 	.word	0x20000490
 8001cc8:	20000494 	.word	0x20000494
 8001ccc:	20000498 	.word	0x20000498
 8001cd0:	42b40000 	.word	0x42b40000
 8001cd4:	42b40000 	.word	0x42b40000
 8001cd8:	41200000 	.word	0x41200000
 8001cdc:	200004a0 	.word	0x200004a0
 8001ce0:	20000394 	.word	0x20000394
 8001ce4:	2000038b 	.word	0x2000038b

08001ce8 <FlightController_Data_Logging>:
    }
}

void FlightController_Data_Logging(void * ptr) {
 8001ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cea:	b0b5      	sub	sp, #212	@ 0xd4
 8001cec:	af08      	add	r7, sp, #32
 8001cee:	60f8      	str	r0, [r7, #12]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
 8001cf0:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8001cf4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

    uint8_t loggingStr[150] = {0};
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	f107 0318 	add.w	r3, r7, #24
 8001d00:	2292      	movs	r2, #146	@ 0x92
 8001d02:	2100      	movs	r1, #0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f00f f9c8 	bl	801109a <memset>
        }
#endif

#ifdef MAIN_APP_USE_LOGGING_FSA8S
        /* Check if GY-87 calibrations are done */
        if (true == gyroscopeCalibrationIsDone && true == accelerometerCalibrationIsDone) {
 8001d0a:	4b20      	ldr	r3, [pc, #128]	@ (8001d8c <FlightController_Data_Logging+0xa4>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d037      	beq.n	8001d82 <FlightController_Data_Logging+0x9a>
 8001d12:	4b1f      	ldr	r3, [pc, #124]	@ (8001d90 <FlightController_Data_Logging+0xa8>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d033      	beq.n	8001d82 <FlightController_Data_Logging+0x9a>
            /* Log channel values */
            sprintf((char *)loggingStr, "FSA8S Ch1: %04d, Ch2: %04d, Ch3: %04d, Ch4: %04d, Ch5: %04d, Ch6: %04d, Ch7: %04d, Ch8: %04d, Ch9: %04d, Ch10: %04d\r\n", FSA8S_channelValues[0], FSA8S_channelValues[1], FSA8S_channelValues[2],
 8001d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d94 <FlightController_Data_Logging+0xac>)
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	469c      	mov	ip, r3
 8001d20:	4b1c      	ldr	r3, [pc, #112]	@ (8001d94 <FlightController_Data_Logging+0xac>)
 8001d22:	885b      	ldrh	r3, [r3, #2]
 8001d24:	469e      	mov	lr, r3
 8001d26:	4b1b      	ldr	r3, [pc, #108]	@ (8001d94 <FlightController_Data_Logging+0xac>)
 8001d28:	889b      	ldrh	r3, [r3, #4]
 8001d2a:	461a      	mov	r2, r3
                    FSA8S_channelValues[3], FSA8S_channelValues[4], FSA8S_channelValues[5], FSA8S_channelValues[6], FSA8S_channelValues[7], FSA8S_channelValues[8], FSA8S_channelValues[9]);
 8001d2c:	4b19      	ldr	r3, [pc, #100]	@ (8001d94 <FlightController_Data_Logging+0xac>)
 8001d2e:	88db      	ldrh	r3, [r3, #6]
            sprintf((char *)loggingStr, "FSA8S Ch1: %04d, Ch2: %04d, Ch3: %04d, Ch4: %04d, Ch5: %04d, Ch6: %04d, Ch7: %04d, Ch8: %04d, Ch9: %04d, Ch10: %04d\r\n", FSA8S_channelValues[0], FSA8S_channelValues[1], FSA8S_channelValues[2],
 8001d30:	4619      	mov	r1, r3
                    FSA8S_channelValues[3], FSA8S_channelValues[4], FSA8S_channelValues[5], FSA8S_channelValues[6], FSA8S_channelValues[7], FSA8S_channelValues[8], FSA8S_channelValues[9]);
 8001d32:	4b18      	ldr	r3, [pc, #96]	@ (8001d94 <FlightController_Data_Logging+0xac>)
 8001d34:	891b      	ldrh	r3, [r3, #8]
            sprintf((char *)loggingStr, "FSA8S Ch1: %04d, Ch2: %04d, Ch3: %04d, Ch4: %04d, Ch5: %04d, Ch6: %04d, Ch7: %04d, Ch8: %04d, Ch9: %04d, Ch10: %04d\r\n", FSA8S_channelValues[0], FSA8S_channelValues[1], FSA8S_channelValues[2],
 8001d36:	461c      	mov	r4, r3
                    FSA8S_channelValues[3], FSA8S_channelValues[4], FSA8S_channelValues[5], FSA8S_channelValues[6], FSA8S_channelValues[7], FSA8S_channelValues[8], FSA8S_channelValues[9]);
 8001d38:	4b16      	ldr	r3, [pc, #88]	@ (8001d94 <FlightController_Data_Logging+0xac>)
 8001d3a:	895b      	ldrh	r3, [r3, #10]
            sprintf((char *)loggingStr, "FSA8S Ch1: %04d, Ch2: %04d, Ch3: %04d, Ch4: %04d, Ch5: %04d, Ch6: %04d, Ch7: %04d, Ch8: %04d, Ch9: %04d, Ch10: %04d\r\n", FSA8S_channelValues[0], FSA8S_channelValues[1], FSA8S_channelValues[2],
 8001d3c:	461d      	mov	r5, r3
                    FSA8S_channelValues[3], FSA8S_channelValues[4], FSA8S_channelValues[5], FSA8S_channelValues[6], FSA8S_channelValues[7], FSA8S_channelValues[8], FSA8S_channelValues[9]);
 8001d3e:	4b15      	ldr	r3, [pc, #84]	@ (8001d94 <FlightController_Data_Logging+0xac>)
 8001d40:	899b      	ldrh	r3, [r3, #12]
            sprintf((char *)loggingStr, "FSA8S Ch1: %04d, Ch2: %04d, Ch3: %04d, Ch4: %04d, Ch5: %04d, Ch6: %04d, Ch7: %04d, Ch8: %04d, Ch9: %04d, Ch10: %04d\r\n", FSA8S_channelValues[0], FSA8S_channelValues[1], FSA8S_channelValues[2],
 8001d42:	461e      	mov	r6, r3
                    FSA8S_channelValues[3], FSA8S_channelValues[4], FSA8S_channelValues[5], FSA8S_channelValues[6], FSA8S_channelValues[7], FSA8S_channelValues[8], FSA8S_channelValues[9]);
 8001d44:	4b13      	ldr	r3, [pc, #76]	@ (8001d94 <FlightController_Data_Logging+0xac>)
 8001d46:	89db      	ldrh	r3, [r3, #14]
            sprintf((char *)loggingStr, "FSA8S Ch1: %04d, Ch2: %04d, Ch3: %04d, Ch4: %04d, Ch5: %04d, Ch6: %04d, Ch7: %04d, Ch8: %04d, Ch9: %04d, Ch10: %04d\r\n", FSA8S_channelValues[0], FSA8S_channelValues[1], FSA8S_channelValues[2],
 8001d48:	60bb      	str	r3, [r7, #8]
                    FSA8S_channelValues[3], FSA8S_channelValues[4], FSA8S_channelValues[5], FSA8S_channelValues[6], FSA8S_channelValues[7], FSA8S_channelValues[8], FSA8S_channelValues[9]);
 8001d4a:	4b12      	ldr	r3, [pc, #72]	@ (8001d94 <FlightController_Data_Logging+0xac>)
 8001d4c:	8a1b      	ldrh	r3, [r3, #16]
            sprintf((char *)loggingStr, "FSA8S Ch1: %04d, Ch2: %04d, Ch3: %04d, Ch4: %04d, Ch5: %04d, Ch6: %04d, Ch7: %04d, Ch8: %04d, Ch9: %04d, Ch10: %04d\r\n", FSA8S_channelValues[0], FSA8S_channelValues[1], FSA8S_channelValues[2],
 8001d4e:	607b      	str	r3, [r7, #4]
                    FSA8S_channelValues[3], FSA8S_channelValues[4], FSA8S_channelValues[5], FSA8S_channelValues[6], FSA8S_channelValues[7], FSA8S_channelValues[8], FSA8S_channelValues[9]);
 8001d50:	4b10      	ldr	r3, [pc, #64]	@ (8001d94 <FlightController_Data_Logging+0xac>)
 8001d52:	8a5b      	ldrh	r3, [r3, #18]
            sprintf((char *)loggingStr, "FSA8S Ch1: %04d, Ch2: %04d, Ch3: %04d, Ch4: %04d, Ch5: %04d, Ch6: %04d, Ch7: %04d, Ch8: %04d, Ch9: %04d, Ch10: %04d\r\n", FSA8S_channelValues[0], FSA8S_channelValues[1], FSA8S_channelValues[2],
 8001d54:	f107 0014 	add.w	r0, r7, #20
 8001d58:	9307      	str	r3, [sp, #28]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	9306      	str	r3, [sp, #24]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	9305      	str	r3, [sp, #20]
 8001d62:	9604      	str	r6, [sp, #16]
 8001d64:	9503      	str	r5, [sp, #12]
 8001d66:	9402      	str	r4, [sp, #8]
 8001d68:	9101      	str	r1, [sp, #4]
 8001d6a:	9200      	str	r2, [sp, #0]
 8001d6c:	4673      	mov	r3, lr
 8001d6e:	4662      	mov	r2, ip
 8001d70:	4909      	ldr	r1, [pc, #36]	@ (8001d98 <FlightController_Data_Logging+0xb0>)
 8001d72:	f00f f92f 	bl	8010fd4 <siprintf>
            LOG(loggingStr, LOG_INFORMATION);
 8001d76:	f107 0314 	add.w	r3, r7, #20
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f002 fc17 	bl	80045b0 <LOG>
        sprintf((char *)loggingStr, (const char *)"Battery Level: %.2f [V]\r\n\n", FlightController_batteryLevelValue);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001d82:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001d86:	f00c fa2f 	bl	800e1e8 <vTaskDelay>
        if (true == gyroscopeCalibrationIsDone && true == accelerometerCalibrationIsDone) {
 8001d8a:	e7be      	b.n	8001d0a <FlightController_Data_Logging+0x22>
 8001d8c:	200003dc 	.word	0x200003dc
 8001d90:	200003dd 	.word	0x200003dd
 8001d94:	20000398 	.word	0x20000398
 8001d98:	08013788 	.word	0x08013788

08001d9c <FlightController_OnOffButton>:
    }
}

void FlightController_OnOffButton(void * ptr) {
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b087      	sub	sp, #28
 8001da0:	af02      	add	r7, sp, #8
 8001da2:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001da4:	23c8      	movs	r3, #200	@ 0xc8
 8001da6:	60fb      	str	r3, [r7, #12]

    while (1) {

        /* Check On/Off Button status */
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 8001da8:	2120      	movs	r1, #32
 8001daa:	4810      	ldr	r0, [pc, #64]	@ (8001dec <FlightController_OnOffButton+0x50>)
 8001dac:	f003 fd62 	bl	8005874 <HAL_GPIO_ReadPin>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d115      	bne.n	8001de2 <FlightController_OnOffButton+0x46>
            /* User is trying to turn it on or off */
            if (!Timer1_running) {
 8001db6:	4b0e      	ldr	r3, [pc, #56]	@ (8001df0 <FlightController_OnOffButton+0x54>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	f083 0301 	eor.w	r3, r3, #1
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00e      	beq.n	8001de2 <FlightController_OnOffButton+0x46>

                xTimerStart(Timer1_Handle, 0);
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001df4 <FlightController_OnOffButton+0x58>)
 8001dc6:	681c      	ldr	r4, [r3, #0]
 8001dc8:	f00c fbec 	bl	800e5a4 <xTaskGetTickCount>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	2300      	movs	r3, #0
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	f00d f848 	bl	800ee6c <xTimerGenericCommand>
                Timer1_running = true;
 8001ddc:	4b04      	ldr	r3, [pc, #16]	@ (8001df0 <FlightController_OnOffButton+0x54>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	701a      	strb	r2, [r3, #0]
            }
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f00c fa00 	bl	800e1e8 <vTaskDelay>
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 8001de8:	e7de      	b.n	8001da8 <FlightController_OnOffButton+0xc>
 8001dea:	bf00      	nop
 8001dec:	40020400 	.word	0x40020400
 8001df0:	20000388 	.word	0x20000388
 8001df4:	20000378 	.word	0x20000378

08001df8 <FlightController_BatteryLevel>:
    }
}

void FlightController_BatteryLevel(void * ptr) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]

    uint16_t adcValue;

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(1000);
 8001e00:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001e04:	60fb      	str	r3, [r7, #12]

    while (1) {

        /* Start ADC Conversion */
        HAL_ADC_Start(&hadc1);
 8001e06:	4836      	ldr	r0, [pc, #216]	@ (8001ee0 <FlightController_BatteryLevel+0xe8>)
 8001e08:	f002 fd34 	bl	8004874 <HAL_ADC_Start>

        /* Poll ADC peripheral */
        HAL_ADC_PollForConversion(&hadc1, 1);
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	4834      	ldr	r0, [pc, #208]	@ (8001ee0 <FlightController_BatteryLevel+0xe8>)
 8001e10:	f002 fde4 	bl	80049dc <HAL_ADC_PollForConversion>

        /* Read ADC value */
        adcValue = HAL_ADC_GetValue(&hadc1);
 8001e14:	4832      	ldr	r0, [pc, #200]	@ (8001ee0 <FlightController_BatteryLevel+0xe8>)
 8001e16:	f002 fe6c 	bl	8004af2 <HAL_ADC_GetValue>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	817b      	strh	r3, [r7, #10]

        /* Convert ADC value to real value */
        FlightController_batteryLevelValue = (adcValue * 3.3) / 4096;
 8001e1e:	897b      	ldrh	r3, [r7, #10]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe fb87 	bl	8000534 <__aeabi_i2d>
 8001e26:	a326      	add	r3, pc, #152	@ (adr r3, 8001ec0 <FlightController_BatteryLevel+0xc8>)
 8001e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2c:	f7fe fbec 	bl	8000608 <__aeabi_dmul>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4610      	mov	r0, r2
 8001e36:	4619      	mov	r1, r3
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	4b29      	ldr	r3, [pc, #164]	@ (8001ee4 <FlightController_BatteryLevel+0xec>)
 8001e3e:	f7fe fd0d 	bl	800085c <__aeabi_ddiv>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4610      	mov	r0, r2
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f7fe fed5 	bl	8000bf8 <__aeabi_d2f>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	4a25      	ldr	r2, [pc, #148]	@ (8001ee8 <FlightController_BatteryLevel+0xf0>)
 8001e52:	6013      	str	r3, [r2, #0]

        /* Correct real value, as when battery full, ADC input is not 3.3V */
        FlightController_batteryLevelValue = FlightController_batteryLevelValue * 1.046046;
 8001e54:	4b24      	ldr	r3, [pc, #144]	@ (8001ee8 <FlightController_BatteryLevel+0xf0>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fb7d 	bl	8000558 <__aeabi_f2d>
 8001e5e:	a31a      	add	r3, pc, #104	@ (adr r3, 8001ec8 <FlightController_BatteryLevel+0xd0>)
 8001e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e64:	f7fe fbd0 	bl	8000608 <__aeabi_dmul>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f7fe fec2 	bl	8000bf8 <__aeabi_d2f>
 8001e74:	4603      	mov	r3, r0
 8001e76:	4a1c      	ldr	r2, [pc, #112]	@ (8001ee8 <FlightController_BatteryLevel+0xf0>)
 8001e78:	6013      	str	r3, [r2, #0]

        /* Map real value to battery levels */
        FlightController_batteryLevelValue = FlightController_batteryLevelValue * 3.363636 + BATTERY_LEVEL_CALIBRATION_OFFSET;
 8001e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee8 <FlightController_BatteryLevel+0xf0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7fe fb6a 	bl	8000558 <__aeabi_f2d>
 8001e84:	a312      	add	r3, pc, #72	@ (adr r3, 8001ed0 <FlightController_BatteryLevel+0xd8>)
 8001e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8a:	f7fe fbbd 	bl	8000608 <__aeabi_dmul>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4610      	mov	r0, r2
 8001e94:	4619      	mov	r1, r3
 8001e96:	a310      	add	r3, pc, #64	@ (adr r3, 8001ed8 <FlightController_BatteryLevel+0xe0>)
 8001e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9c:	f7fe f9fe 	bl	800029c <__adddf3>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	4610      	mov	r0, r2
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	f7fe fea6 	bl	8000bf8 <__aeabi_d2f>
 8001eac:	4603      	mov	r3, r0
 8001eae:	4a0e      	ldr	r2, [pc, #56]	@ (8001ee8 <FlightController_BatteryLevel+0xf0>)
 8001eb0:	6013      	str	r3, [r2, #0]

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f00c f998 	bl	800e1e8 <vTaskDelay>
        HAL_ADC_Start(&hadc1);
 8001eb8:	bf00      	nop
 8001eba:	e7a4      	b.n	8001e06 <FlightController_BatteryLevel+0xe>
 8001ebc:	f3af 8000 	nop.w
 8001ec0:	66666666 	.word	0x66666666
 8001ec4:	400a6666 	.word	0x400a6666
 8001ec8:	bb01c92e 	.word	0xbb01c92e
 8001ecc:	3ff0bc9a 	.word	0x3ff0bc9a
 8001ed0:	fdbd2fa1 	.word	0xfdbd2fa1
 8001ed4:	400ae8b9 	.word	0x400ae8b9
 8001ed8:	851eb852 	.word	0x851eb852
 8001edc:	3fe851eb 	.word	0x3fe851eb
 8001ee0:	20000bac 	.word	0x20000bac
 8001ee4:	40b00000 	.word	0x40b00000
 8001ee8:	20000020 	.word	0x20000020

08001eec <FlightController_BatteryAlarm>:
    }
}

void FlightController_BatteryAlarm(void * ptr) {
 8001eec:	b5b0      	push	{r4, r5, r7, lr}
 8001eee:	b08e      	sub	sp, #56	@ 0x38
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]

    uint8_t alarmSequence[] = {1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 8001ef4:	4b24      	ldr	r3, [pc, #144]	@ (8001f88 <FlightController_BatteryAlarm+0x9c>)
 8001ef6:	f107 0408 	add.w	r4, r7, #8
 8001efa:	461d      	mov	r5, r3
 8001efc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f04:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001f08:	e884 0003 	stmia.w	r4, {r0, r1}
    uint8_t alarmSequenceSize = sizeof(alarmSequence);
 8001f0c:	2328      	movs	r3, #40	@ 0x28
 8001f0e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    uint8_t alarmSequenceCursor = 0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001f18:	23c8      	movs	r3, #200	@ 0xc8
 8001f1a:	633b      	str	r3, [r7, #48]	@ 0x30

    while (1) {

        if (FlightController_batteryLevelValue < BATTERY_ALARM_THRESHOLD) {
 8001f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001f8c <FlightController_BatteryAlarm+0xa0>)
 8001f1e:	edd3 7a00 	vldr	s15, [r3]
 8001f22:	eeb2 7a03 	vmov.f32	s14, #35	@ 0x41180000  9.5
 8001f26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f2e:	d521      	bpl.n	8001f74 <FlightController_BatteryAlarm+0x88>

            if (Timer2_flag) {
 8001f30:	4b17      	ldr	r3, [pc, #92]	@ (8001f90 <FlightController_BatteryAlarm+0xa4>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d023      	beq.n	8001f80 <FlightController_BatteryAlarm+0x94>
                /* If timer expired */

                /* Parse alarm sequence */
                alarmSequenceCursor++;
 8001f38:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                if (alarmSequenceSize <= alarmSequenceCursor) {
 8001f42:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8001f46:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d802      	bhi.n	8001f54 <FlightController_BatteryAlarm+0x68>
                    alarmSequenceCursor = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                }

                /* Write to buzzer */
                HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, alarmSequence[alarmSequenceCursor]);
 8001f54:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f58:	3338      	adds	r3, #56	@ 0x38
 8001f5a:	443b      	add	r3, r7
 8001f5c:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001f60:	461a      	mov	r2, r3
 8001f62:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f66:	480b      	ldr	r0, [pc, #44]	@ (8001f94 <FlightController_BatteryAlarm+0xa8>)
 8001f68:	f003 fc9c 	bl	80058a4 <HAL_GPIO_WritePin>

                /* Reset Timer2 flag */
                Timer2_flag = false;
 8001f6c:	4b08      	ldr	r3, [pc, #32]	@ (8001f90 <FlightController_BatteryAlarm+0xa4>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	701a      	strb	r2, [r3, #0]
 8001f72:	e005      	b.n	8001f80 <FlightController_BatteryAlarm+0x94>
            }

        } else {

            HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8001f74:	2200      	movs	r2, #0
 8001f76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f7a:	4806      	ldr	r0, [pc, #24]	@ (8001f94 <FlightController_BatteryAlarm+0xa8>)
 8001f7c:	f003 fc92 	bl	80058a4 <HAL_GPIO_WritePin>
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001f80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f82:	f00c f931 	bl	800e1e8 <vTaskDelay>
        if (FlightController_batteryLevelValue < BATTERY_ALARM_THRESHOLD) {
 8001f86:	e7c9      	b.n	8001f1c <FlightController_BatteryAlarm+0x30>
 8001f88:	08013800 	.word	0x08013800
 8001f8c:	20000020 	.word	0x20000020
 8001f90:	20000389 	.word	0x20000389
 8001f94:	40020000 	.word	0x40020000

08001f98 <FlightController_HeartbeatLight>:
    }
}

void FlightController_HeartbeatLight(void * ptr) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]

    uint8_t ledState = GPIO_PIN_RESET;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	73fb      	strb	r3, [r7, #15]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(HEARTBEAT_PERIOD / 2);
 8001fa4:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001fa8:	60bb      	str	r3, [r7, #8]

    while (1) {

        if (FlightController_isInitialized) {
 8001faa:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe8 <FlightController_HeartbeatLight+0x50>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00f      	beq.n	8001fd2 <FlightController_HeartbeatLight+0x3a>
            HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ledState);
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fba:	480c      	ldr	r0, [pc, #48]	@ (8001fec <FlightController_HeartbeatLight+0x54>)
 8001fbc:	f003 fc72 	bl	80058a4 <HAL_GPIO_WritePin>

            /* Change pin state */
            if (ledState == GPIO_PIN_RESET) {
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d102      	bne.n	8001fcc <FlightController_HeartbeatLight+0x34>

                ledState = GPIO_PIN_SET;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	73fb      	strb	r3, [r7, #15]
 8001fca:	e008      	b.n	8001fde <FlightController_HeartbeatLight+0x46>
            } else {

                ledState = GPIO_PIN_RESET;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	73fb      	strb	r3, [r7, #15]
 8001fd0:	e005      	b.n	8001fde <FlightController_HeartbeatLight+0x46>
            }
        } else {
            HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fd8:	4804      	ldr	r0, [pc, #16]	@ (8001fec <FlightController_HeartbeatLight+0x54>)
 8001fda:	f003 fc63 	bl	80058a4 <HAL_GPIO_WritePin>
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001fde:	68b8      	ldr	r0, [r7, #8]
 8001fe0:	f00c f902 	bl	800e1e8 <vTaskDelay>
        if (FlightController_isInitialized) {
 8001fe4:	e7e1      	b.n	8001faa <FlightController_HeartbeatLight+0x12>
 8001fe6:	bf00      	nop
 8001fe8:	20000355 	.word	0x20000355
 8001fec:	40020800 	.word	0x40020800

08001ff0 <FlightController_FlightLights>:
    }
}

void FlightController_FlightLights(void * ptr) {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b09c      	sub	sp, #112	@ 0x70
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]

    /* Define flight lights sequences */
    uint8_t flightLightsSequenceA1[] = {1, 0, 0, 0, 0, 0, 0, 0};
 8001ff8:	4ab2      	ldr	r2, [pc, #712]	@ (80022c4 <FlightController_FlightLights+0x2d4>)
 8001ffa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001ffe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002002:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceA3[] = {1, 0, 0, 0, 0, 0, 0, 0};
 8002006:	4aaf      	ldr	r2, [pc, #700]	@ (80022c4 <FlightController_FlightLights+0x2d4>)
 8002008:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800200c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002010:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceA2[] = {0, 0, 1, 0, 0, 0, 0, 0};
 8002014:	4aac      	ldr	r2, [pc, #688]	@ (80022c8 <FlightController_FlightLights+0x2d8>)
 8002016:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800201a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800201e:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceA4[] = {0, 0, 1, 0, 0, 0, 0, 0};
 8002022:	4aa9      	ldr	r2, [pc, #676]	@ (80022c8 <FlightController_FlightLights+0x2d8>)
 8002024:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002028:	e892 0003 	ldmia.w	r2, {r0, r1}
 800202c:	e883 0003 	stmia.w	r3, {r0, r1}

    uint8_t flightLightsSequenceB1[] = {1, 0, 1, 0, 0, 0, 0, 0};
 8002030:	4aa6      	ldr	r2, [pc, #664]	@ (80022cc <FlightController_FlightLights+0x2dc>)
 8002032:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002036:	e892 0003 	ldmia.w	r2, {r0, r1}
 800203a:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceB3[] = {1, 0, 1, 0, 0, 0, 0, 0};
 800203e:	4aa3      	ldr	r2, [pc, #652]	@ (80022cc <FlightController_FlightLights+0x2dc>)
 8002040:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002044:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002048:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceB2[] = {0, 0, 0, 0, 1, 0, 1, 0};
 800204c:	4aa0      	ldr	r2, [pc, #640]	@ (80022d0 <FlightController_FlightLights+0x2e0>)
 800204e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002052:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002056:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceB4[] = {0, 0, 0, 0, 1, 0, 1, 0};
 800205a:	4a9d      	ldr	r2, [pc, #628]	@ (80022d0 <FlightController_FlightLights+0x2e0>)
 800205c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002060:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002064:	e883 0003 	stmia.w	r3, {r0, r1}

    uint8_t flightLightsSequenceC1[] = {1, 0, 1, 0, 0, 0, 0, 0};
 8002068:	4a98      	ldr	r2, [pc, #608]	@ (80022cc <FlightController_FlightLights+0x2dc>)
 800206a:	f107 0320 	add.w	r3, r7, #32
 800206e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002072:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceC3[] = {1, 0, 1, 0, 0, 0, 0, 0};
 8002076:	4a95      	ldr	r2, [pc, #596]	@ (80022cc <FlightController_FlightLights+0x2dc>)
 8002078:	f107 0318 	add.w	r3, r7, #24
 800207c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002080:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceC2[] = {0, 0, 0, 0, 1, 0, 0, 0};
 8002084:	4a93      	ldr	r2, [pc, #588]	@ (80022d4 <FlightController_FlightLights+0x2e4>)
 8002086:	f107 0310 	add.w	r3, r7, #16
 800208a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800208e:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceC4[] = {0, 0, 0, 0, 1, 0, 0, 0};
 8002092:	4a90      	ldr	r2, [pc, #576]	@ (80022d4 <FlightController_FlightLights+0x2e4>)
 8002094:	f107 0308 	add.w	r3, r7, #8
 8002098:	e892 0003 	ldmia.w	r2, {r0, r1}
 800209c:	e883 0003 	stmia.w	r3, {r0, r1}

    uint8_t flightLightsSequence = 0;
 80020a0:	2300      	movs	r3, #0
 80020a2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    uint8_t flightLightsSequenceSize = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
    uint8_t flightLightsSequenceCursor = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 80020b2:	23c8      	movs	r3, #200	@ 0xc8
 80020b4:	66bb      	str	r3, [r7, #104]	@ 0x68

    while (1) {

        /* Turn on/off flight lights (Switch D on radio controller) */
        if (500 <= FSA8S_channelValues[9]) {
 80020b6:	4b88      	ldr	r3, [pc, #544]	@ (80022d8 <FlightController_FlightLights+0x2e8>)
 80020b8:	8a5b      	ldrh	r3, [r3, #18]
 80020ba:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80020be:	f0c0 80e5 	bcc.w	800228c <FlightController_FlightLights+0x29c>

            /* Set flight light sequence (Switch C on radio controller) */
            if (250 >= FSA8S_channelValues[8]) {
 80020c2:	4b85      	ldr	r3, [pc, #532]	@ (80022d8 <FlightController_FlightLights+0x2e8>)
 80020c4:	8a1b      	ldrh	r3, [r3, #16]
 80020c6:	2bfa      	cmp	r3, #250	@ 0xfa
 80020c8:	d803      	bhi.n	80020d2 <FlightController_FlightLights+0xe2>

                flightLightsSequence = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80020d0:	e016      	b.n	8002100 <FlightController_FlightLights+0x110>

            } else if (250 < FSA8S_channelValues[8] && 750 >= FSA8S_channelValues[8]) {
 80020d2:	4b81      	ldr	r3, [pc, #516]	@ (80022d8 <FlightController_FlightLights+0x2e8>)
 80020d4:	8a1b      	ldrh	r3, [r3, #16]
 80020d6:	2bfa      	cmp	r3, #250	@ 0xfa
 80020d8:	d909      	bls.n	80020ee <FlightController_FlightLights+0xfe>
 80020da:	4b7f      	ldr	r3, [pc, #508]	@ (80022d8 <FlightController_FlightLights+0x2e8>)
 80020dc:	8a1b      	ldrh	r3, [r3, #16]
 80020de:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d803      	bhi.n	80020ee <FlightController_FlightLights+0xfe>

                flightLightsSequence = 1;
 80020e6:	2301      	movs	r3, #1
 80020e8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80020ec:	e008      	b.n	8002100 <FlightController_FlightLights+0x110>

            } else if (750 < FSA8S_channelValues[8]) {
 80020ee:	4b7a      	ldr	r3, [pc, #488]	@ (80022d8 <FlightController_FlightLights+0x2e8>)
 80020f0:	8a1b      	ldrh	r3, [r3, #16]
 80020f2:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d902      	bls.n	8002100 <FlightController_FlightLights+0x110>

                flightLightsSequence = 2;
 80020fa:	2302      	movs	r3, #2
 80020fc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
            }

            /* Set flight light sequence speed (Potentiometer B on radio controller) */
            Timer3_AutoReloadTime = 200 + FSA8S_channelValues[7] / 5;
 8002100:	4b75      	ldr	r3, [pc, #468]	@ (80022d8 <FlightController_FlightLights+0x2e8>)
 8002102:	89db      	ldrh	r3, [r3, #14]
 8002104:	4a75      	ldr	r2, [pc, #468]	@ (80022dc <FlightController_FlightLights+0x2ec>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	089b      	lsrs	r3, r3, #2
 800210c:	b29b      	uxth	r3, r3
 800210e:	33c8      	adds	r3, #200	@ 0xc8
 8002110:	b29a      	uxth	r2, r3
 8002112:	4b73      	ldr	r3, [pc, #460]	@ (80022e0 <FlightController_FlightLights+0x2f0>)
 8002114:	801a      	strh	r2, [r3, #0]

            /* Check if timer has expired */
            if (Timer3_flag) {
 8002116:	4b73      	ldr	r3, [pc, #460]	@ (80022e4 <FlightController_FlightLights+0x2f4>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 80cd 	beq.w	80022ba <FlightController_FlightLights+0x2ca>

                /* Parse flight lights sequences */
                flightLightsSequenceCursor++;
 8002120:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002124:	3301      	adds	r3, #1
 8002126:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
                if (flightLightsSequenceSize <= flightLightsSequenceCursor) {
 800212a:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 800212e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002132:	429a      	cmp	r2, r3
 8002134:	d802      	bhi.n	800213c <FlightController_FlightLights+0x14c>
                    flightLightsSequenceCursor = 0;
 8002136:	2300      	movs	r3, #0
 8002138:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
                }

                /* Write to flight lights */
                if (flightLightsSequence == 0) {
 800213c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002140:	2b00      	cmp	r3, #0
 8002142:	d132      	bne.n	80021aa <FlightController_FlightLights+0x1ba>

                    flightLightsSequenceSize = sizeof(flightLightsSequenceA1);
 8002144:	2308      	movs	r3, #8
 8002146:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

                    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, flightLightsSequenceA1[flightLightsSequenceCursor]);
 800214a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800214e:	3370      	adds	r3, #112	@ 0x70
 8002150:	443b      	add	r3, r7
 8002152:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002156:	461a      	mov	r2, r3
 8002158:	2104      	movs	r1, #4
 800215a:	4863      	ldr	r0, [pc, #396]	@ (80022e8 <FlightController_FlightLights+0x2f8>)
 800215c:	f003 fba2 	bl	80058a4 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, flightLightsSequenceA2[flightLightsSequenceCursor]);
 8002160:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002164:	3370      	adds	r3, #112	@ 0x70
 8002166:	443b      	add	r3, r7
 8002168:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800216c:	461a      	mov	r2, r3
 800216e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002172:	485d      	ldr	r0, [pc, #372]	@ (80022e8 <FlightController_FlightLights+0x2f8>)
 8002174:	f003 fb96 	bl	80058a4 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, flightLightsSequenceA3[flightLightsSequenceCursor]);
 8002178:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800217c:	3370      	adds	r3, #112	@ 0x70
 800217e:	443b      	add	r3, r7
 8002180:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002184:	461a      	mov	r2, r3
 8002186:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800218a:	4857      	ldr	r0, [pc, #348]	@ (80022e8 <FlightController_FlightLights+0x2f8>)
 800218c:	f003 fb8a 	bl	80058a4 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, flightLightsSequenceA4[flightLightsSequenceCursor]);
 8002190:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002194:	3370      	adds	r3, #112	@ 0x70
 8002196:	443b      	add	r3, r7
 8002198:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800219c:	461a      	mov	r2, r3
 800219e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80021a2:	4852      	ldr	r0, [pc, #328]	@ (80022ec <FlightController_FlightLights+0x2fc>)
 80021a4:	f003 fb7e 	bl	80058a4 <HAL_GPIO_WritePin>
 80021a8:	e06c      	b.n	8002284 <FlightController_FlightLights+0x294>

                } else if (flightLightsSequence == 1) {
 80021aa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d132      	bne.n	8002218 <FlightController_FlightLights+0x228>

                    flightLightsSequenceSize = sizeof(flightLightsSequenceB1);
 80021b2:	2308      	movs	r3, #8
 80021b4:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

                    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, flightLightsSequenceB1[flightLightsSequenceCursor]);
 80021b8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80021bc:	3370      	adds	r3, #112	@ 0x70
 80021be:	443b      	add	r3, r7
 80021c0:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80021c4:	461a      	mov	r2, r3
 80021c6:	2104      	movs	r1, #4
 80021c8:	4847      	ldr	r0, [pc, #284]	@ (80022e8 <FlightController_FlightLights+0x2f8>)
 80021ca:	f003 fb6b 	bl	80058a4 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, flightLightsSequenceB2[flightLightsSequenceCursor]);
 80021ce:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80021d2:	3370      	adds	r3, #112	@ 0x70
 80021d4:	443b      	add	r3, r7
 80021d6:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 80021da:	461a      	mov	r2, r3
 80021dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021e0:	4841      	ldr	r0, [pc, #260]	@ (80022e8 <FlightController_FlightLights+0x2f8>)
 80021e2:	f003 fb5f 	bl	80058a4 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, flightLightsSequenceB3[flightLightsSequenceCursor]);
 80021e6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80021ea:	3370      	adds	r3, #112	@ 0x70
 80021ec:	443b      	add	r3, r7
 80021ee:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80021f2:	461a      	mov	r2, r3
 80021f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80021f8:	483b      	ldr	r0, [pc, #236]	@ (80022e8 <FlightController_FlightLights+0x2f8>)
 80021fa:	f003 fb53 	bl	80058a4 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, flightLightsSequenceB4[flightLightsSequenceCursor]);
 80021fe:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002202:	3370      	adds	r3, #112	@ 0x70
 8002204:	443b      	add	r3, r7
 8002206:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800220a:	461a      	mov	r2, r3
 800220c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002210:	4836      	ldr	r0, [pc, #216]	@ (80022ec <FlightController_FlightLights+0x2fc>)
 8002212:	f003 fb47 	bl	80058a4 <HAL_GPIO_WritePin>
 8002216:	e035      	b.n	8002284 <FlightController_FlightLights+0x294>

                } else if (flightLightsSequence == 2) {
 8002218:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800221c:	2b02      	cmp	r3, #2
 800221e:	d131      	bne.n	8002284 <FlightController_FlightLights+0x294>

                    flightLightsSequenceSize = sizeof(flightLightsSequenceC1);
 8002220:	2308      	movs	r3, #8
 8002222:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

                    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, flightLightsSequenceC1[flightLightsSequenceCursor]);
 8002226:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800222a:	3370      	adds	r3, #112	@ 0x70
 800222c:	443b      	add	r3, r7
 800222e:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 8002232:	461a      	mov	r2, r3
 8002234:	2104      	movs	r1, #4
 8002236:	482c      	ldr	r0, [pc, #176]	@ (80022e8 <FlightController_FlightLights+0x2f8>)
 8002238:	f003 fb34 	bl	80058a4 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, flightLightsSequenceC2[flightLightsSequenceCursor]);
 800223c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002240:	3370      	adds	r3, #112	@ 0x70
 8002242:	443b      	add	r3, r7
 8002244:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 8002248:	461a      	mov	r2, r3
 800224a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800224e:	4826      	ldr	r0, [pc, #152]	@ (80022e8 <FlightController_FlightLights+0x2f8>)
 8002250:	f003 fb28 	bl	80058a4 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, flightLightsSequenceC3[flightLightsSequenceCursor]);
 8002254:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002258:	3370      	adds	r3, #112	@ 0x70
 800225a:	443b      	add	r3, r7
 800225c:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8002260:	461a      	mov	r2, r3
 8002262:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002266:	4820      	ldr	r0, [pc, #128]	@ (80022e8 <FlightController_FlightLights+0x2f8>)
 8002268:	f003 fb1c 	bl	80058a4 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, flightLightsSequenceC4[flightLightsSequenceCursor]);
 800226c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002270:	3370      	adds	r3, #112	@ 0x70
 8002272:	443b      	add	r3, r7
 8002274:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8002278:	461a      	mov	r2, r3
 800227a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800227e:	481b      	ldr	r0, [pc, #108]	@ (80022ec <FlightController_FlightLights+0x2fc>)
 8002280:	f003 fb10 	bl	80058a4 <HAL_GPIO_WritePin>
                }

                /* Reset Timer3 flag */
                Timer3_flag = false;
 8002284:	4b17      	ldr	r3, [pc, #92]	@ (80022e4 <FlightController_FlightLights+0x2f4>)
 8002286:	2200      	movs	r2, #0
 8002288:	701a      	strb	r2, [r3, #0]
 800228a:	e016      	b.n	80022ba <FlightController_FlightLights+0x2ca>
            }

        } else {

            /* Turn off flight lights */
            HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 800228c:	2200      	movs	r2, #0
 800228e:	2104      	movs	r1, #4
 8002290:	4815      	ldr	r0, [pc, #84]	@ (80022e8 <FlightController_FlightLights+0x2f8>)
 8002292:	f003 fb07 	bl	80058a4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8002296:	2200      	movs	r2, #0
 8002298:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800229c:	4812      	ldr	r0, [pc, #72]	@ (80022e8 <FlightController_FlightLights+0x2f8>)
 800229e:	f003 fb01 	bl	80058a4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 80022a2:	2200      	movs	r2, #0
 80022a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80022a8:	480f      	ldr	r0, [pc, #60]	@ (80022e8 <FlightController_FlightLights+0x2f8>)
 80022aa:	f003 fafb 	bl	80058a4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 80022ae:	2200      	movs	r2, #0
 80022b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80022b4:	480d      	ldr	r0, [pc, #52]	@ (80022ec <FlightController_FlightLights+0x2fc>)
 80022b6:	f003 faf5 	bl	80058a4 <HAL_GPIO_WritePin>
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 80022ba:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80022bc:	f00b ff94 	bl	800e1e8 <vTaskDelay>
        if (500 <= FSA8S_channelValues[9]) {
 80022c0:	e6f9      	b.n	80020b6 <FlightController_FlightLights+0xc6>
 80022c2:	bf00      	nop
 80022c4:	08013828 	.word	0x08013828
 80022c8:	08013830 	.word	0x08013830
 80022cc:	08013838 	.word	0x08013838
 80022d0:	08013840 	.word	0x08013840
 80022d4:	08013848 	.word	0x08013848
 80022d8:	20000398 	.word	0x20000398
 80022dc:	cccccccd 	.word	0xcccccccd
 80022e0:	20000004 	.word	0x20000004
 80022e4:	2000038a 	.word	0x2000038a
 80022e8:	40020400 	.word	0x40020400
 80022ec:	40020800 	.word	0x40020800

080022f0 <Kalman_CalculateAngle>:
    }
}

void Kalman_CalculateAngle(float * kalmanState, float * kalmanUncertainty, float kalmanInput, float kalmanMeasurement) {
 80022f0:	b5b0      	push	{r4, r5, r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	ed87 0a01 	vstr	s0, [r7, #4]
 80022fe:	edc7 0a00 	vstr	s1, [r7]

    float kalmanGain;

    *kalmanState = *kalmanState + CONTROL_SYSTEM_LOOP_PERIOD_S * kalmanInput;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe f926 	bl	8000558 <__aeabi_f2d>
 800230c:	4604      	mov	r4, r0
 800230e:	460d      	mov	r5, r1
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7fe f921 	bl	8000558 <__aeabi_f2d>
 8002316:	a32e      	add	r3, pc, #184	@ (adr r3, 80023d0 <Kalman_CalculateAngle+0xe0>)
 8002318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231c:	f7fe f974 	bl	8000608 <__aeabi_dmul>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4620      	mov	r0, r4
 8002326:	4629      	mov	r1, r5
 8002328:	f7fd ffb8 	bl	800029c <__adddf3>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	4610      	mov	r0, r2
 8002332:	4619      	mov	r1, r3
 8002334:	f7fe fc60 	bl	8000bf8 <__aeabi_d2f>
 8002338:	4602      	mov	r2, r0
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	601a      	str	r2, [r3, #0]
    *kalmanUncertainty = *kalmanUncertainty + CONTROL_SYSTEM_LOOP_PERIOD_S * CONTROL_SYSTEM_LOOP_PERIOD_S * 4 * 4;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f7fe f908 	bl	8000558 <__aeabi_f2d>
 8002348:	a323      	add	r3, pc, #140	@ (adr r3, 80023d8 <Kalman_CalculateAngle+0xe8>)
 800234a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234e:	f7fd ffa5 	bl	800029c <__adddf3>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4610      	mov	r0, r2
 8002358:	4619      	mov	r1, r3
 800235a:	f7fe fc4d 	bl	8000bf8 <__aeabi_d2f>
 800235e:	4602      	mov	r2, r0
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	601a      	str	r2, [r3, #0]
    kalmanGain = *kalmanUncertainty * 1 / (1 * *kalmanUncertainty + 3 * 3);
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	edd3 6a00 	vldr	s13, [r3]
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	edd3 7a00 	vldr	s15, [r3]
 8002370:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8002374:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002378:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800237c:	edc7 7a05 	vstr	s15, [r7, #20]
    *kalmanState = *kalmanState + kalmanGain * (kalmanMeasurement - *kalmanState);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	ed93 7a00 	vldr	s14, [r3]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	edd3 7a00 	vldr	s15, [r3]
 800238c:	edd7 6a00 	vldr	s13, [r7]
 8002390:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002394:	edd7 7a05 	vldr	s15, [r7, #20]
 8002398:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800239c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	edc3 7a00 	vstr	s15, [r3]
    *kalmanUncertainty = (1 - kalmanGain) * *kalmanUncertainty;
 80023a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80023aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80023ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	edd3 7a00 	vldr	s15, [r3]
 80023b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	edc3 7a00 	vstr	s15, [r3]
}
 80023c2:	bf00      	nop
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bdb0      	pop	{r4, r5, r7, pc}
 80023ca:	bf00      	nop
 80023cc:	f3af 8000 	nop.w
 80023d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80023d4:	3f70624d 	.word	0x3f70624d
 80023d8:	a0b5ed8d 	.word	0xa0b5ed8d
 80023dc:	3f30c6f7 	.word	0x3f30c6f7

080023e0 <CSM2_CalculatePID>:

void CSM2_CalculatePID(float * PID_Output, float * previousIterm, float * previousErrorValue, float errorValue, float kP, float kI, float kD) {
 80023e0:	b5b0      	push	{r4, r5, r7, lr}
 80023e2:	b08c      	sub	sp, #48	@ 0x30
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	61f8      	str	r0, [r7, #28]
 80023e8:	61b9      	str	r1, [r7, #24]
 80023ea:	617a      	str	r2, [r7, #20]
 80023ec:	ed87 0a04 	vstr	s0, [r7, #16]
 80023f0:	edc7 0a03 	vstr	s1, [r7, #12]
 80023f4:	ed87 1a02 	vstr	s2, [r7, #8]
 80023f8:	edc7 1a01 	vstr	s3, [r7, #4]
    float Iterm;
    float Dterm;
    float pidOutputValue;

    /* Calculate proportional term */
    Pterm = kP * errorValue;
 80023fc:	ed97 7a03 	vldr	s14, [r7, #12]
 8002400:	edd7 7a04 	vldr	s15, [r7, #16]
 8002404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002408:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    /* Calculate integral term */
    Iterm = *previousIterm + kI * ((*previousErrorValue + errorValue) / 2) * CONTROL_SYSTEM_LOOP_PERIOD_S;
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe f8a1 	bl	8000558 <__aeabi_f2d>
 8002416:	4604      	mov	r4, r0
 8002418:	460d      	mov	r5, r1
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	ed93 7a00 	vldr	s14, [r3]
 8002420:	edd7 7a04 	vldr	s15, [r7, #16]
 8002424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002428:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800242c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002430:	edd7 7a02 	vldr	s15, [r7, #8]
 8002434:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002438:	ee17 0a90 	vmov	r0, s15
 800243c:	f7fe f88c 	bl	8000558 <__aeabi_f2d>
 8002440:	a33b      	add	r3, pc, #236	@ (adr r3, 8002530 <CSM2_CalculatePID+0x150>)
 8002442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002446:	f7fe f8df 	bl	8000608 <__aeabi_dmul>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4620      	mov	r0, r4
 8002450:	4629      	mov	r1, r5
 8002452:	f7fd ff23 	bl	800029c <__adddf3>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	4610      	mov	r0, r2
 800245c:	4619      	mov	r1, r3
 800245e:	f7fe fbcb 	bl	8000bf8 <__aeabi_d2f>
 8002462:	4603      	mov	r3, r0
 8002464:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Clamp integral term to avoid integral wind-up */
    if (-CONTROL_SYSTEM_PID_ITERM_LIMIT > Iterm) {
 8002466:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800246a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8002538 <CSM2_CalculatePID+0x158>
 800246e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002476:	d502      	bpl.n	800247e <CSM2_CalculatePID+0x9e>
        Iterm = -CONTROL_SYSTEM_PID_ITERM_LIMIT;
 8002478:	4b30      	ldr	r3, [pc, #192]	@ (800253c <CSM2_CalculatePID+0x15c>)
 800247a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800247c:	e00a      	b.n	8002494 <CSM2_CalculatePID+0xb4>
    } else if (CONTROL_SYSTEM_PID_ITERM_LIMIT < Iterm) {
 800247e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002482:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002540 <CSM2_CalculatePID+0x160>
 8002486:	eef4 7ac7 	vcmpe.f32	s15, s14
 800248a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248e:	dd01      	ble.n	8002494 <CSM2_CalculatePID+0xb4>
        Iterm = CONTROL_SYSTEM_PID_ITERM_LIMIT;
 8002490:	4b2c      	ldr	r3, [pc, #176]	@ (8002544 <CSM2_CalculatePID+0x164>)
 8002492:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    /* Calculate derivative term */
    Dterm = kD * (errorValue - *previousErrorValue) / CONTROL_SYSTEM_LOOP_PERIOD_S;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	edd3 7a00 	vldr	s15, [r3]
 800249a:	ed97 7a04 	vldr	s14, [r7, #16]
 800249e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80024a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024aa:	ee17 0a90 	vmov	r0, s15
 80024ae:	f7fe f853 	bl	8000558 <__aeabi_f2d>
 80024b2:	a31f      	add	r3, pc, #124	@ (adr r3, 8002530 <CSM2_CalculatePID+0x150>)
 80024b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b8:	f7fe f9d0 	bl	800085c <__aeabi_ddiv>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4610      	mov	r0, r2
 80024c2:	4619      	mov	r1, r3
 80024c4:	f7fe fb98 	bl	8000bf8 <__aeabi_d2f>
 80024c8:	4603      	mov	r3, r0
 80024ca:	623b      	str	r3, [r7, #32]

    /* Calculate PID output */
    pidOutputValue = Pterm + Iterm + Dterm;
 80024cc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80024d0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80024d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d8:	ed97 7a08 	vldr	s14, [r7, #32]
 80024dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024e0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    /* Limit the PID output */
    if (-CONTROL_SYSTEM_PID_OUTPUT_LIMIT > pidOutputValue) {
 80024e4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80024e8:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8002538 <CSM2_CalculatePID+0x158>
 80024ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f4:	d502      	bpl.n	80024fc <CSM2_CalculatePID+0x11c>
        pidOutputValue = -CONTROL_SYSTEM_PID_OUTPUT_LIMIT;
 80024f6:	4b11      	ldr	r3, [pc, #68]	@ (800253c <CSM2_CalculatePID+0x15c>)
 80024f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024fa:	e00a      	b.n	8002512 <CSM2_CalculatePID+0x132>
    } else if (CONTROL_SYSTEM_PID_OUTPUT_LIMIT < pidOutputValue) {
 80024fc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002500:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002540 <CSM2_CalculatePID+0x160>
 8002504:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250c:	dd01      	ble.n	8002512 <CSM2_CalculatePID+0x132>
        pidOutputValue = CONTROL_SYSTEM_PID_OUTPUT_LIMIT;
 800250e:	4b0d      	ldr	r3, [pc, #52]	@ (8002544 <CSM2_CalculatePID+0x164>)
 8002510:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Return values */
    *PID_Output = pidOutputValue;
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002516:	601a      	str	r2, [r3, #0]
    *previousErrorValue = errorValue;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	601a      	str	r2, [r3, #0]
    *previousIterm = Iterm;
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002522:	601a      	str	r2, [r3, #0]
}
 8002524:	bf00      	nop
 8002526:	3730      	adds	r7, #48	@ 0x30
 8002528:	46bd      	mov	sp, r7
 800252a:	bdb0      	pop	{r4, r5, r7, pc}
 800252c:	f3af 8000 	nop.w
 8002530:	d2f1a9fc 	.word	0xd2f1a9fc
 8002534:	3f70624d 	.word	0x3f70624d
 8002538:	c3480000 	.word	0xc3480000
 800253c:	c3480000 	.word	0xc3480000
 8002540:	43480000 	.word	0x43480000
 8002544:	43480000 	.word	0x43480000

08002548 <CSM3_ResetPID>:
}

void CSM3_CalculatePID(void) {
}

void CSM3_ResetPID(void) {
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0

#if 3 == CONTROL_SYSTEM_MODE

    /* Reset previously stored PID errors and terms values: Angles */
    previousErrorValue_rollAngle = 0;
 800254c:	4b16      	ldr	r3, [pc, #88]	@ (80025a8 <CSM3_ResetPID+0x60>)
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
    previousErrorValue_pitchAngle = 0;
 8002554:	4b15      	ldr	r3, [pc, #84]	@ (80025ac <CSM3_ResetPID+0x64>)
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
    previousIterm_rollAngle = 0;
 800255c:	4b14      	ldr	r3, [pc, #80]	@ (80025b0 <CSM3_ResetPID+0x68>)
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
    previousIterm_pitchAngle = 0;
 8002564:	4b13      	ldr	r3, [pc, #76]	@ (80025b4 <CSM3_ResetPID+0x6c>)
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	601a      	str	r2, [r3, #0]

    /* Reset previously stored PID errors and terms values: Rates */
    previousErrorValue_rollRate = 0;
 800256c:	4b12      	ldr	r3, [pc, #72]	@ (80025b8 <CSM3_ResetPID+0x70>)
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
    previousErrorValue_pitchRate = 0;
 8002574:	4b11      	ldr	r3, [pc, #68]	@ (80025bc <CSM3_ResetPID+0x74>)
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
    previousErrorValue_yawRate = 0;
 800257c:	4b10      	ldr	r3, [pc, #64]	@ (80025c0 <CSM3_ResetPID+0x78>)
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
    previousIterm_rollRate = 0;
 8002584:	4b0f      	ldr	r3, [pc, #60]	@ (80025c4 <CSM3_ResetPID+0x7c>)
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
    previousIterm_pitchRate = 0;
 800258c:	4b0e      	ldr	r3, [pc, #56]	@ (80025c8 <CSM3_ResetPID+0x80>)
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
    previousIterm_yawRate = 0;
 8002594:	4b0d      	ldr	r3, [pc, #52]	@ (80025cc <CSM3_ResetPID+0x84>)
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	601a      	str	r2, [r3, #0]

#endif
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	20000408 	.word	0x20000408
 80025ac:	2000040c 	.word	0x2000040c
 80025b0:	20000410 	.word	0x20000410
 80025b4:	20000414 	.word	0x20000414
 80025b8:	2000044c 	.word	0x2000044c
 80025bc:	20000450 	.word	0x20000450
 80025c0:	20000454 	.word	0x20000454
 80025c4:	20000458 	.word	0x20000458
 80025c8:	2000045c 	.word	0x2000045c
 80025cc:	20000460 	.word	0x20000460

080025d0 <Timer1_Callback>:

/* --- Private callback function implementation ------------------------------------------------ */
void Timer1_Callback(TimerHandle_t xTimer) {
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]

    /* Get no. of times this timer has expired */
    uint32_t ulCount = (uint32_t)pvTimerGetTimerID(xTimer);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f00c ff59 	bl	800f490 <pvTimerGetTimerID>
 80025de:	4603      	mov	r3, r0
 80025e0:	60fb      	str	r3, [r7, #12]

    /* Get timer period */
    uint32_t xTimerPeriod = xTimerGetPeriod(xTimer);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f00c fc90 	bl	800ef08 <xTimerGetPeriod>
 80025e8:	60b8      	str	r0, [r7, #8]

    /* Increment the count */
    ulCount++;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	3301      	adds	r3, #1
 80025ee:	60fb      	str	r3, [r7, #12]

    if (ulCount >= (pdMS_TO_TICKS(Timer1_AutoReloadTime) / xTimerPeriod)) {
 80025f0:	4b26      	ldr	r3, [pc, #152]	@ (800268c <Timer1_Callback+0xbc>)
 80025f2:	881b      	ldrh	r3, [r3, #0]
 80025f4:	461a      	mov	r2, r3
 80025f6:	f242 7310 	movw	r3, #10000	@ 0x2710
 80025fa:	fb02 f303 	mul.w	r3, r2, r3
 80025fe:	4a24      	ldr	r2, [pc, #144]	@ (8002690 <Timer1_Callback+0xc0>)
 8002600:	fba2 2303 	umull	r2, r3, r2, r3
 8002604:	099a      	lsrs	r2, r3, #6
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	fbb2 f3f3 	udiv	r3, r2, r3
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	429a      	cmp	r2, r3
 8002610:	d333      	bcc.n	800267a <Timer1_Callback+0xaa>
        /* Check if On/Off Button is still pressed after 3 seconds */
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 8002612:	2120      	movs	r1, #32
 8002614:	481f      	ldr	r0, [pc, #124]	@ (8002694 <Timer1_Callback+0xc4>)
 8002616:	f003 f92d 	bl	8005874 <HAL_GPIO_ReadPin>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d124      	bne.n	800266a <Timer1_Callback+0x9a>

            if (!FlightController_isRunning) {
 8002620:	4b1d      	ldr	r3, [pc, #116]	@ (8002698 <Timer1_Callback+0xc8>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	f083 0301 	eor.w	r3, r3, #1
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d008      	beq.n	8002640 <Timer1_Callback+0x70>
                /* Flight controller was off */
                /* User turned it on */
                /* Turn on flight controller */
                HAL_GPIO_WritePin(PW_ON_OFF_DRIVER_OUTPUT_GPIO_Port, PW_ON_OFF_DRIVER_OUTPUT_Pin, 1);
 800262e:	2201      	movs	r2, #1
 8002630:	2110      	movs	r1, #16
 8002632:	4818      	ldr	r0, [pc, #96]	@ (8002694 <Timer1_Callback+0xc4>)
 8002634:	f003 f936 	bl	80058a4 <HAL_GPIO_WritePin>

                FlightController_isRunning = true;
 8002638:	4b17      	ldr	r3, [pc, #92]	@ (8002698 <Timer1_Callback+0xc8>)
 800263a:	2201      	movs	r2, #1
 800263c:	701a      	strb	r2, [r3, #0]
 800263e:	e014      	b.n	800266a <Timer1_Callback+0x9a>
            } else {
                /* Flight controller was on */
                /* User turned it off */
                /* Suspend HeartbeatLight task and turn on-board LED on */
                vTaskSuspend(FlightController_HeartbeatLight_Handle);
 8002640:	4b16      	ldr	r3, [pc, #88]	@ (800269c <Timer1_Callback+0xcc>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f00b fe05 	bl	800e254 <vTaskSuspend>
                HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 800264a:	2200      	movs	r2, #0
 800264c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002650:	4813      	ldr	r0, [pc, #76]	@ (80026a0 <Timer1_Callback+0xd0>)
 8002652:	f003 f927 	bl	80058a4 <HAL_GPIO_WritePin>

                FlightController_isRunning = false;
 8002656:	4b10      	ldr	r3, [pc, #64]	@ (8002698 <Timer1_Callback+0xc8>)
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]

                /* Turn off flight controller */
                HAL_GPIO_WritePin(PW_ON_OFF_DRIVER_OUTPUT_GPIO_Port, PW_ON_OFF_DRIVER_OUTPUT_Pin, 0);
 800265c:	2200      	movs	r2, #0
 800265e:	2110      	movs	r1, #16
 8002660:	480c      	ldr	r0, [pc, #48]	@ (8002694 <Timer1_Callback+0xc4>)
 8002662:	f003 f91f 	bl	80058a4 <HAL_GPIO_WritePin>

                /* Next line will execute only if USB power is connected */
                /* Reset micro-controller */
                HAL_NVIC_SystemReset();
 8002666:	f002 fd8a 	bl	800517e <HAL_NVIC_SystemReset>
            }
        }

        /* Reset timer count */
        vTimerSetTimerID(xTimer, (void *)0);
 800266a:	2100      	movs	r1, #0
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f00c ff30 	bl	800f4d2 <vTimerSetTimerID>

        /* Reset running flag */
        Timer1_running = false;
 8002672:	4b0c      	ldr	r3, [pc, #48]	@ (80026a4 <Timer1_Callback+0xd4>)
 8002674:	2200      	movs	r2, #0
 8002676:	701a      	strb	r2, [r3, #0]
    } else {
        /* Store the incremented count back into the timer's ID */
        vTimerSetTimerID(xTimer, (void *)ulCount);
    }
}
 8002678:	e004      	b.n	8002684 <Timer1_Callback+0xb4>
        vTimerSetTimerID(xTimer, (void *)ulCount);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	4619      	mov	r1, r3
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f00c ff27 	bl	800f4d2 <vTimerSetTimerID>
}
 8002684:	bf00      	nop
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20000000 	.word	0x20000000
 8002690:	10624dd3 	.word	0x10624dd3
 8002694:	40020400 	.word	0x40020400
 8002698:	20000354 	.word	0x20000354
 800269c:	20000370 	.word	0x20000370
 80026a0:	40020800 	.word	0x40020800
 80026a4:	20000388 	.word	0x20000388

080026a8 <Timer2_Callback>:

void Timer2_Callback(TimerHandle_t xTimer) {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]

    /* Get no. of times this timer has expired */
    uint32_t ulCount = (uint32_t)pvTimerGetTimerID(xTimer);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f00c feed 	bl	800f490 <pvTimerGetTimerID>
 80026b6:	4603      	mov	r3, r0
 80026b8:	60fb      	str	r3, [r7, #12]

    /* Get timer period */
    uint32_t xTimerPeriod = xTimerGetPeriod(xTimer);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f00c fc24 	bl	800ef08 <xTimerGetPeriod>
 80026c0:	60b8      	str	r0, [r7, #8]

    /* Increment the count */
    ulCount++;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	3301      	adds	r3, #1
 80026c6:	60fb      	str	r3, [r7, #12]

    if (ulCount >= (pdMS_TO_TICKS(Timer2_AutoReloadTime) / xTimerPeriod)) {
 80026c8:	4b10      	ldr	r3, [pc, #64]	@ (800270c <Timer2_Callback+0x64>)
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	f242 7310 	movw	r3, #10000	@ 0x2710
 80026d2:	fb02 f303 	mul.w	r3, r2, r3
 80026d6:	4a0e      	ldr	r2, [pc, #56]	@ (8002710 <Timer2_Callback+0x68>)
 80026d8:	fba2 2303 	umull	r2, r3, r2, r3
 80026dc:	099a      	lsrs	r2, r3, #6
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d307      	bcc.n	80026fa <Timer2_Callback+0x52>

        /* Set Timer2 flag to true */
        Timer2_flag = true;
 80026ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002714 <Timer2_Callback+0x6c>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	701a      	strb	r2, [r3, #0]

        /* Reset timer count */
        vTimerSetTimerID(xTimer, (void *)0);
 80026f0:	2100      	movs	r1, #0
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f00c feed 	bl	800f4d2 <vTimerSetTimerID>

    } else {
        /* Store the incremented count back into the timer's ID */
        vTimerSetTimerID(xTimer, (void *)ulCount);
    }
}
 80026f8:	e004      	b.n	8002704 <Timer2_Callback+0x5c>
        vTimerSetTimerID(xTimer, (void *)ulCount);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4619      	mov	r1, r3
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f00c fee7 	bl	800f4d2 <vTimerSetTimerID>
}
 8002704:	bf00      	nop
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	20000002 	.word	0x20000002
 8002710:	10624dd3 	.word	0x10624dd3
 8002714:	20000389 	.word	0x20000389

08002718 <Timer3_Callback>:

void Timer3_Callback(TimerHandle_t xTimer) {
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]

    /* Get no. of times this timer has expired */
    uint32_t ulCount = (uint32_t)pvTimerGetTimerID(xTimer);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f00c feb5 	bl	800f490 <pvTimerGetTimerID>
 8002726:	4603      	mov	r3, r0
 8002728:	60fb      	str	r3, [r7, #12]

    /* Get timer period */
    uint32_t xTimerPeriod = xTimerGetPeriod(xTimer);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f00c fbec 	bl	800ef08 <xTimerGetPeriod>
 8002730:	60b8      	str	r0, [r7, #8]

    /* Increment the count */
    ulCount++;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	3301      	adds	r3, #1
 8002736:	60fb      	str	r3, [r7, #12]

    if (ulCount >= (pdMS_TO_TICKS(Timer3_AutoReloadTime) / xTimerPeriod)) {
 8002738:	4b10      	ldr	r3, [pc, #64]	@ (800277c <Timer3_Callback+0x64>)
 800273a:	881b      	ldrh	r3, [r3, #0]
 800273c:	461a      	mov	r2, r3
 800273e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002742:	fb02 f303 	mul.w	r3, r2, r3
 8002746:	4a0e      	ldr	r2, [pc, #56]	@ (8002780 <Timer3_Callback+0x68>)
 8002748:	fba2 2303 	umull	r2, r3, r2, r3
 800274c:	099a      	lsrs	r2, r3, #6
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	fbb2 f3f3 	udiv	r3, r2, r3
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	429a      	cmp	r2, r3
 8002758:	d307      	bcc.n	800276a <Timer3_Callback+0x52>

        /* Set Timer3 flag to true */
        Timer3_flag = true;
 800275a:	4b0a      	ldr	r3, [pc, #40]	@ (8002784 <Timer3_Callback+0x6c>)
 800275c:	2201      	movs	r2, #1
 800275e:	701a      	strb	r2, [r3, #0]

        /* Reset timer count */
        vTimerSetTimerID(xTimer, (void *)0);
 8002760:	2100      	movs	r1, #0
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f00c feb5 	bl	800f4d2 <vTimerSetTimerID>

    } else {
        /* Store the incremented count back into the timer's ID */
        vTimerSetTimerID(xTimer, (void *)ulCount);
    }
}
 8002768:	e004      	b.n	8002774 <Timer3_Callback+0x5c>
        vTimerSetTimerID(xTimer, (void *)ulCount);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4619      	mov	r1, r3
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f00c feaf 	bl	800f4d2 <vTimerSetTimerID>
}
 8002774:	bf00      	nop
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	20000004 	.word	0x20000004
 8002780:	10624dd3 	.word	0x10624dd3
 8002784:	2000038a 	.word	0x2000038a

08002788 <Timer4_Callback>:

void Timer4_Callback(TimerHandle_t xTimer) {
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]

    /* Get no. of times this timer has expired */
    uint32_t ulCount = (uint32_t)pvTimerGetTimerID(xTimer);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f00c fe7d 	bl	800f490 <pvTimerGetTimerID>
 8002796:	4603      	mov	r3, r0
 8002798:	60fb      	str	r3, [r7, #12]

    /* Get timer period */
    uint32_t xTimerPeriod = xTimerGetPeriod(xTimer);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f00c fbb4 	bl	800ef08 <xTimerGetPeriod>
 80027a0:	60b8      	str	r0, [r7, #8]

    /* Increment the count */
    ulCount++;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	3301      	adds	r3, #1
 80027a6:	60fb      	str	r3, [r7, #12]

    if (ulCount >= (pdMS_TO_TICKS(Timer4_AutoReloadTime) / xTimerPeriod)) {
 80027a8:	4b10      	ldr	r3, [pc, #64]	@ (80027ec <Timer4_Callback+0x64>)
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	461a      	mov	r2, r3
 80027ae:	f242 7310 	movw	r3, #10000	@ 0x2710
 80027b2:	fb02 f303 	mul.w	r3, r2, r3
 80027b6:	4a0e      	ldr	r2, [pc, #56]	@ (80027f0 <Timer4_Callback+0x68>)
 80027b8:	fba2 2303 	umull	r2, r3, r2, r3
 80027bc:	099a      	lsrs	r2, r3, #6
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d307      	bcc.n	80027da <Timer4_Callback+0x52>

        /* Set Timer3 flag to true */
        Timer4_flag = true;
 80027ca:	4b0a      	ldr	r3, [pc, #40]	@ (80027f4 <Timer4_Callback+0x6c>)
 80027cc:	2201      	movs	r2, #1
 80027ce:	701a      	strb	r2, [r3, #0]

        /* Reset timer count */
        vTimerSetTimerID(xTimer, (void *)0);
 80027d0:	2100      	movs	r1, #0
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f00c fe7d 	bl	800f4d2 <vTimerSetTimerID>

    } else {
        /* Store the incremented count back into the timer's ID */
        vTimerSetTimerID(xTimer, (void *)ulCount);
    }
}
 80027d8:	e004      	b.n	80027e4 <Timer4_Callback+0x5c>
        vTimerSetTimerID(xTimer, (void *)ulCount);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4619      	mov	r1, r3
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f00c fe77 	bl	800f4d2 <vTimerSetTimerID>
}
 80027e4:	bf00      	nop
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	20000006 	.word	0x20000006
 80027f0:	10624dd3 	.word	0x10624dd3
 80027f4:	2000038b 	.word	0x2000038b

080027f8 <FlightController_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
void FlightController_Init(void) {
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0

    /* Create start-up tasks and timers */
    FreeRTOS_CreateStartUpTasks();
 80027fc:	f7fe fbc4 	bl	8000f88 <FreeRTOS_CreateStartUpTasks>
}
 8002800:	bf00      	nop
 8002802:	bd80      	pop	{r7, pc}

08002804 <vApplicationGetIdleTaskMemory>:

/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t ** ppxIdleTaskTCBBuffer, StackType_t ** ppxIdleTaskStackBuffer, uint32_t * pulIdleTaskStackSize) {
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4a07      	ldr	r2, [pc, #28]	@ (8002830 <vApplicationGetIdleTaskMemory+0x2c>)
 8002814:	601a      	str	r2, [r3, #0]
    *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	4a06      	ldr	r2, [pc, #24]	@ (8002834 <vApplicationGetIdleTaskMemory+0x30>)
 800281a:	601a      	str	r2, [r3, #0]
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2280      	movs	r2, #128	@ 0x80
 8002820:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 8002822:	bf00      	nop
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	200004b4 	.word	0x200004b4
 8002834:	20000530 	.word	0x20000530

08002838 <vApplicationGetTimerTaskMemory>:

/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory(StaticTask_t ** ppxTimerTaskTCBBuffer, StackType_t ** ppxTimerTaskStackBuffer, uint32_t * pulTimerTaskStackSize) {
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4a07      	ldr	r2, [pc, #28]	@ (8002864 <vApplicationGetTimerTaskMemory+0x2c>)
 8002848:	601a      	str	r2, [r3, #0]
    *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	4a06      	ldr	r2, [pc, #24]	@ (8002868 <vApplicationGetTimerTaskMemory+0x30>)
 800284e:	601a      	str	r2, [r3, #0]
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002856:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 8002858:	bf00      	nop
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	20000730 	.word	0x20000730
 8002868:	200007ac 	.word	0x200007ac

0800286c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800286c:	b5b0      	push	{r4, r5, r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8002872:	f001 ff25 	bl	80046c0 <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8002876:	f000 f827 	bl	80028c8 <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800287a:	f000 f9cd 	bl	8002c18 <MX_GPIO_Init>
    MX_DMA_Init();
 800287e:	f000 f9b1 	bl	8002be4 <MX_DMA_Init>
    MX_USART2_UART_Init();
 8002882:	f000 f985 	bl	8002b90 <MX_USART2_UART_Init>
    MX_I2C1_Init();
 8002886:	f000 f8db 	bl	8002a40 <MX_I2C1_Init>
    MX_TIM3_Init();
 800288a:	f000 f907 	bl	8002a9c <MX_TIM3_Init>
    MX_ADC1_Init();
 800288e:	f000 f885 	bl	800299c <MX_ADC1_Init>
    /* USER CODE BEGIN 2 */

    // Initialize Flight Controller
    FlightController_Init();
 8002892:	f7ff ffb1 	bl	80027f8 <FlightController_Init>
    /* add queues, ... */
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* definition and creation of defaultTask */
    osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002896:	4b0a      	ldr	r3, [pc, #40]	@ (80028c0 <main+0x54>)
 8002898:	1d3c      	adds	r4, r7, #4
 800289a:	461d      	mov	r5, r3
 800289c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800289e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80028a8:	1d3b      	adds	r3, r7, #4
 80028aa:	2100      	movs	r1, #0
 80028ac:	4618      	mov	r0, r3
 80028ae:	f00a fc7a 	bl	800d1a6 <osThreadCreate>
 80028b2:	4603      	mov	r3, r0
 80028b4:	4a03      	ldr	r2, [pc, #12]	@ (80028c4 <main+0x58>)
 80028b6:	6013      	str	r3, [r2, #0]
    /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
    /* USER CODE END RTOS_THREADS */

    /* Start scheduler */
    osKernelStart();
 80028b8:	f00a fc6e 	bl	800d198 <osKernelStart>
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    while (1) {
 80028bc:	bf00      	nop
 80028be:	e7fd      	b.n	80028bc <main+0x50>
 80028c0:	0801385c 	.word	0x0801385c
 80028c4:	20000d34 	.word	0x20000d34

080028c8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b094      	sub	sp, #80	@ 0x50
 80028cc:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028ce:	f107 0320 	add.w	r3, r7, #32
 80028d2:	2230      	movs	r2, #48	@ 0x30
 80028d4:	2100      	movs	r1, #0
 80028d6:	4618      	mov	r0, r3
 80028d8:	f00e fbdf 	bl	801109a <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028dc:	f107 030c 	add.w	r3, r7, #12
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	60da      	str	r2, [r3, #12]
 80028ea:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 80028ec:	2300      	movs	r3, #0
 80028ee:	60bb      	str	r3, [r7, #8]
 80028f0:	4b28      	ldr	r3, [pc, #160]	@ (8002994 <SystemClock_Config+0xcc>)
 80028f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f4:	4a27      	ldr	r2, [pc, #156]	@ (8002994 <SystemClock_Config+0xcc>)
 80028f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80028fc:	4b25      	ldr	r3, [pc, #148]	@ (8002994 <SystemClock_Config+0xcc>)
 80028fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002900:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002908:	2300      	movs	r3, #0
 800290a:	607b      	str	r3, [r7, #4]
 800290c:	4b22      	ldr	r3, [pc, #136]	@ (8002998 <SystemClock_Config+0xd0>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002914:	4a20      	ldr	r2, [pc, #128]	@ (8002998 <SystemClock_Config+0xd0>)
 8002916:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	4b1e      	ldr	r3, [pc, #120]	@ (8002998 <SystemClock_Config+0xd0>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002924:	607b      	str	r3, [r7, #4]
 8002926:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002928:	2301      	movs	r3, #1
 800292a:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800292c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002930:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002932:	2302      	movs	r3, #2
 8002934:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002936:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800293a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 25;
 800293c:	2319      	movs	r3, #25
 800293e:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 144;
 8002940:	2390      	movs	r3, #144	@ 0x90
 8002942:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002944:	2302      	movs	r3, #2
 8002946:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 3;
 8002948:	2303      	movs	r3, #3
 800294a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800294c:	f107 0320 	add.w	r3, r7, #32
 8002950:	4618      	mov	r0, r3
 8002952:	f005 f9fd 	bl	8007d50 <HAL_RCC_OscConfig>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <SystemClock_Config+0x98>
        Error_Handler();
 800295c:	f000 fa01 	bl	8002d62 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002960:	230f      	movs	r3, #15
 8002962:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002964:	2302      	movs	r3, #2
 8002966:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800296c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002970:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002972:	2300      	movs	r3, #0
 8002974:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002976:	f107 030c 	add.w	r3, r7, #12
 800297a:	2102      	movs	r1, #2
 800297c:	4618      	mov	r0, r3
 800297e:	f005 fc5f 	bl	8008240 <HAL_RCC_ClockConfig>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <SystemClock_Config+0xc4>
        Error_Handler();
 8002988:	f000 f9eb 	bl	8002d62 <Error_Handler>
    }
}
 800298c:	bf00      	nop
 800298e:	3750      	adds	r7, #80	@ 0x50
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40023800 	.word	0x40023800
 8002998:	40007000 	.word	0x40007000

0800299c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = {0};
 80029a2:	463b      	mov	r3, r7
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	605a      	str	r2, [r3, #4]
 80029aa:	609a      	str	r2, [r3, #8]
 80029ac:	60da      	str	r2, [r3, #12]

    /* USER CODE END ADC1_Init 1 */

    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
     */
    hadc1.Instance = ADC1;
 80029ae:	4b21      	ldr	r3, [pc, #132]	@ (8002a34 <MX_ADC1_Init+0x98>)
 80029b0:	4a21      	ldr	r2, [pc, #132]	@ (8002a38 <MX_ADC1_Init+0x9c>)
 80029b2:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80029b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002a34 <MX_ADC1_Init+0x98>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80029ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002a34 <MX_ADC1_Init+0x98>)
 80029bc:	2200      	movs	r2, #0
 80029be:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = DISABLE;
 80029c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002a34 <MX_ADC1_Init+0x98>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = DISABLE;
 80029c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a34 <MX_ADC1_Init+0x98>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 80029cc:	4b19      	ldr	r3, [pc, #100]	@ (8002a34 <MX_ADC1_Init+0x98>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80029d4:	4b17      	ldr	r3, [pc, #92]	@ (8002a34 <MX_ADC1_Init+0x98>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029da:	4b16      	ldr	r3, [pc, #88]	@ (8002a34 <MX_ADC1_Init+0x98>)
 80029dc:	4a17      	ldr	r2, [pc, #92]	@ (8002a3c <MX_ADC1_Init+0xa0>)
 80029de:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80029e0:	4b14      	ldr	r3, [pc, #80]	@ (8002a34 <MX_ADC1_Init+0x98>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 80029e6:	4b13      	ldr	r3, [pc, #76]	@ (8002a34 <MX_ADC1_Init+0x98>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 80029ec:	4b11      	ldr	r3, [pc, #68]	@ (8002a34 <MX_ADC1_Init+0x98>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80029f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002a34 <MX_ADC1_Init+0x98>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80029fa:	480e      	ldr	r0, [pc, #56]	@ (8002a34 <MX_ADC1_Init+0x98>)
 80029fc:	f001 fef6 	bl	80047ec <HAL_ADC_Init>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <MX_ADC1_Init+0x6e>
        Error_Handler();
 8002a06:	f000 f9ac 	bl	8002d62 <Error_Handler>
    }

    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
     */
    sConfig.Channel = ADC_CHANNEL_0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002a12:	2300      	movs	r3, #0
 8002a14:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002a16:	463b      	mov	r3, r7
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4806      	ldr	r0, [pc, #24]	@ (8002a34 <MX_ADC1_Init+0x98>)
 8002a1c:	f002 f876 	bl	8004b0c <HAL_ADC_ConfigChannel>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <MX_ADC1_Init+0x8e>
        Error_Handler();
 8002a26:	f000 f99c 	bl	8002d62 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */
}
 8002a2a:	bf00      	nop
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000bac 	.word	0x20000bac
 8002a38:	40012000 	.word	0x40012000
 8002a3c:	0f000001 	.word	0x0f000001

08002a40 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8002a44:	4b12      	ldr	r3, [pc, #72]	@ (8002a90 <MX_I2C1_Init+0x50>)
 8002a46:	4a13      	ldr	r2, [pc, #76]	@ (8002a94 <MX_I2C1_Init+0x54>)
 8002a48:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 8002a4a:	4b11      	ldr	r3, [pc, #68]	@ (8002a90 <MX_I2C1_Init+0x50>)
 8002a4c:	4a12      	ldr	r2, [pc, #72]	@ (8002a98 <MX_I2C1_Init+0x58>)
 8002a4e:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a50:	4b0f      	ldr	r3, [pc, #60]	@ (8002a90 <MX_I2C1_Init+0x50>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8002a56:	4b0e      	ldr	r3, [pc, #56]	@ (8002a90 <MX_I2C1_Init+0x50>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a90 <MX_I2C1_Init+0x50>)
 8002a5e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a62:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a64:	4b0a      	ldr	r3, [pc, #40]	@ (8002a90 <MX_I2C1_Init+0x50>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8002a6a:	4b09      	ldr	r3, [pc, #36]	@ (8002a90 <MX_I2C1_Init+0x50>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a70:	4b07      	ldr	r3, [pc, #28]	@ (8002a90 <MX_I2C1_Init+0x50>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a76:	4b06      	ldr	r3, [pc, #24]	@ (8002a90 <MX_I2C1_Init+0x50>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002a7c:	4804      	ldr	r0, [pc, #16]	@ (8002a90 <MX_I2C1_Init+0x50>)
 8002a7e:	f002 ff2b 	bl	80058d8 <HAL_I2C_Init>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <MX_I2C1_Init+0x4c>
        Error_Handler();
 8002a88:	f000 f96b 	bl	8002d62 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */
}
 8002a8c:	bf00      	nop
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20000bf4 	.word	0x20000bf4
 8002a94:	40005400 	.word	0x40005400
 8002a98:	000186a0 	.word	0x000186a0

08002a9c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08a      	sub	sp, #40	@ 0x28
 8002aa0:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aa2:	f107 0320 	add.w	r3, r7, #32
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8002aac:	1d3b      	adds	r3, r7, #4
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	605a      	str	r2, [r3, #4]
 8002ab4:	609a      	str	r2, [r3, #8]
 8002ab6:	60da      	str	r2, [r3, #12]
 8002ab8:	611a      	str	r2, [r3, #16]
 8002aba:	615a      	str	r2, [r3, #20]
 8002abc:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 8002abe:	4b32      	ldr	r3, [pc, #200]	@ (8002b88 <MX_TIM3_Init+0xec>)
 8002ac0:	4a32      	ldr	r2, [pc, #200]	@ (8002b8c <MX_TIM3_Init+0xf0>)
 8002ac2:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 20;
 8002ac4:	4b30      	ldr	r3, [pc, #192]	@ (8002b88 <MX_TIM3_Init+0xec>)
 8002ac6:	2214      	movs	r2, #20
 8002ac8:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aca:	4b2f      	ldr	r3, [pc, #188]	@ (8002b88 <MX_TIM3_Init+0xec>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 65535;
 8002ad0:	4b2d      	ldr	r3, [pc, #180]	@ (8002b88 <MX_TIM3_Init+0xec>)
 8002ad2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ad6:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8002b88 <MX_TIM3_Init+0xec>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ade:	4b2a      	ldr	r3, [pc, #168]	@ (8002b88 <MX_TIM3_Init+0xec>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8002ae4:	4828      	ldr	r0, [pc, #160]	@ (8002b88 <MX_TIM3_Init+0xec>)
 8002ae6:	f005 fd8b 	bl	8008600 <HAL_TIM_PWM_Init>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <MX_TIM3_Init+0x58>
        Error_Handler();
 8002af0:	f000 f937 	bl	8002d62 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002af4:	2300      	movs	r3, #0
 8002af6:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002af8:	2300      	movs	r3, #0
 8002afa:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8002afc:	f107 0320 	add.w	r3, r7, #32
 8002b00:	4619      	mov	r1, r3
 8002b02:	4821      	ldr	r0, [pc, #132]	@ (8002b88 <MX_TIM3_Init+0xec>)
 8002b04:	f006 f970 	bl	8008de8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <MX_TIM3_Init+0x76>
        Error_Handler();
 8002b0e:	f000 f928 	bl	8002d62 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b12:	2360      	movs	r3, #96	@ 0x60
 8002b14:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8002b22:	1d3b      	adds	r3, r7, #4
 8002b24:	2200      	movs	r2, #0
 8002b26:	4619      	mov	r1, r3
 8002b28:	4817      	ldr	r0, [pc, #92]	@ (8002b88 <MX_TIM3_Init+0xec>)
 8002b2a:	f005 fe69 	bl	8008800 <HAL_TIM_PWM_ConfigChannel>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <MX_TIM3_Init+0x9c>
        Error_Handler();
 8002b34:	f000 f915 	bl	8002d62 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8002b38:	1d3b      	adds	r3, r7, #4
 8002b3a:	2204      	movs	r2, #4
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4812      	ldr	r0, [pc, #72]	@ (8002b88 <MX_TIM3_Init+0xec>)
 8002b40:	f005 fe5e 	bl	8008800 <HAL_TIM_PWM_ConfigChannel>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <MX_TIM3_Init+0xb2>
        Error_Handler();
 8002b4a:	f000 f90a 	bl	8002d62 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8002b4e:	1d3b      	adds	r3, r7, #4
 8002b50:	2208      	movs	r2, #8
 8002b52:	4619      	mov	r1, r3
 8002b54:	480c      	ldr	r0, [pc, #48]	@ (8002b88 <MX_TIM3_Init+0xec>)
 8002b56:	f005 fe53 	bl	8008800 <HAL_TIM_PWM_ConfigChannel>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <MX_TIM3_Init+0xc8>
        Error_Handler();
 8002b60:	f000 f8ff 	bl	8002d62 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 8002b64:	1d3b      	adds	r3, r7, #4
 8002b66:	220c      	movs	r2, #12
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4807      	ldr	r0, [pc, #28]	@ (8002b88 <MX_TIM3_Init+0xec>)
 8002b6c:	f005 fe48 	bl	8008800 <HAL_TIM_PWM_ConfigChannel>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <MX_TIM3_Init+0xde>
        Error_Handler();
 8002b76:	f000 f8f4 	bl	8002d62 <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */
    HAL_TIM_MspPostInit(&htim3);
 8002b7a:	4803      	ldr	r0, [pc, #12]	@ (8002b88 <MX_TIM3_Init+0xec>)
 8002b7c:	f000 f9d2 	bl	8002f24 <HAL_TIM_MspPostInit>
}
 8002b80:	bf00      	nop
 8002b82:	3728      	adds	r7, #40	@ 0x28
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	20000c48 	.word	0x20000c48
 8002b8c:	40000400 	.word	0x40000400

08002b90 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART2_Init 0 */
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */
    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8002b94:	4b11      	ldr	r3, [pc, #68]	@ (8002bdc <MX_USART2_UART_Init+0x4c>)
 8002b96:	4a12      	ldr	r2, [pc, #72]	@ (8002be0 <MX_USART2_UART_Init+0x50>)
 8002b98:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8002b9a:	4b10      	ldr	r3, [pc, #64]	@ (8002bdc <MX_USART2_UART_Init+0x4c>)
 8002b9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ba0:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8002bdc <MX_USART2_UART_Init+0x4c>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8002ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8002bdc <MX_USART2_UART_Init+0x4c>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8002bae:	4b0b      	ldr	r3, [pc, #44]	@ (8002bdc <MX_USART2_UART_Init+0x4c>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_RX;
 8002bb4:	4b09      	ldr	r3, [pc, #36]	@ (8002bdc <MX_USART2_UART_Init+0x4c>)
 8002bb6:	2204      	movs	r2, #4
 8002bb8:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bba:	4b08      	ldr	r3, [pc, #32]	@ (8002bdc <MX_USART2_UART_Init+0x4c>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bc0:	4b06      	ldr	r3, [pc, #24]	@ (8002bdc <MX_USART2_UART_Init+0x4c>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002bc6:	4805      	ldr	r0, [pc, #20]	@ (8002bdc <MX_USART2_UART_Init+0x4c>)
 8002bc8:	f006 f97c 	bl	8008ec4 <HAL_UART_Init>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <MX_USART2_UART_Init+0x46>
        Error_Handler();
 8002bd2:	f000 f8c6 	bl	8002d62 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */
    /* USER CODE END USART2_Init 2 */
}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20000c90 	.word	0x20000c90
 8002be0:	40004400 	.word	0x40004400

08002be4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	607b      	str	r3, [r7, #4]
 8002bee:	4b09      	ldr	r3, [pc, #36]	@ (8002c14 <MX_DMA_Init+0x30>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf2:	4a08      	ldr	r2, [pc, #32]	@ (8002c14 <MX_DMA_Init+0x30>)
 8002bf4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bfa:	4b06      	ldr	r3, [pc, #24]	@ (8002c14 <MX_DMA_Init+0x30>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c02:	607b      	str	r3, [r7, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	40023800 	.word	0x40023800

08002c18 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08a      	sub	sp, #40	@ 0x28
 8002c1c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1e:	f107 0314 	add.w	r3, r7, #20
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	605a      	str	r2, [r3, #4]
 8002c28:	609a      	str	r2, [r3, #8]
 8002c2a:	60da      	str	r2, [r3, #12]
 8002c2c:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
 8002c32:	4b42      	ldr	r3, [pc, #264]	@ (8002d3c <MX_GPIO_Init+0x124>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c36:	4a41      	ldr	r2, [pc, #260]	@ (8002d3c <MX_GPIO_Init+0x124>)
 8002c38:	f043 0304 	orr.w	r3, r3, #4
 8002c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c3e:	4b3f      	ldr	r3, [pc, #252]	@ (8002d3c <MX_GPIO_Init+0x124>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	4b3b      	ldr	r3, [pc, #236]	@ (8002d3c <MX_GPIO_Init+0x124>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c52:	4a3a      	ldr	r2, [pc, #232]	@ (8002d3c <MX_GPIO_Init+0x124>)
 8002c54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c5a:	4b38      	ldr	r3, [pc, #224]	@ (8002d3c <MX_GPIO_Init+0x124>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	4b34      	ldr	r3, [pc, #208]	@ (8002d3c <MX_GPIO_Init+0x124>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6e:	4a33      	ldr	r2, [pc, #204]	@ (8002d3c <MX_GPIO_Init+0x124>)
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c76:	4b31      	ldr	r3, [pc, #196]	@ (8002d3c <MX_GPIO_Init+0x124>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	60bb      	str	r3, [r7, #8]
 8002c80:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	607b      	str	r3, [r7, #4]
 8002c86:	4b2d      	ldr	r3, [pc, #180]	@ (8002d3c <MX_GPIO_Init+0x124>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8a:	4a2c      	ldr	r2, [pc, #176]	@ (8002d3c <MX_GPIO_Init+0x124>)
 8002c8c:	f043 0302 	orr.w	r3, r3, #2
 8002c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c92:	4b2a      	ldr	r3, [pc, #168]	@ (8002d3c <MX_GPIO_Init+0x124>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	607b      	str	r3, [r7, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, LED_Pin | LED4_Pin, GPIO_PIN_RESET);
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002ca4:	4826      	ldr	r0, [pc, #152]	@ (8002d40 <MX_GPIO_Init+0x128>)
 8002ca6:	f002 fdfd 	bl	80058a4 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED3_Pin | PW_ON_OFF_DRIVER_OUTPUT_Pin | LED2_Pin, GPIO_PIN_RESET);
 8002caa:	2200      	movs	r2, #0
 8002cac:	f241 1114 	movw	r1, #4372	@ 0x1114
 8002cb0:	4824      	ldr	r0, [pc, #144]	@ (8002d44 <MX_GPIO_Init+0x12c>)
 8002cb2:	f002 fdf7 	bl	80058a4 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002cbc:	4822      	ldr	r0, [pc, #136]	@ (8002d48 <MX_GPIO_Init+0x130>)
 8002cbe:	f002 fdf1 	bl	80058a4 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : LED_Pin LED4_Pin */
    GPIO_InitStruct.Pin = LED_Pin | LED4_Pin;
 8002cc2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cd4:	f107 0314 	add.w	r3, r7, #20
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4819      	ldr	r0, [pc, #100]	@ (8002d40 <MX_GPIO_Init+0x128>)
 8002cdc:	f002 fc46 	bl	800556c <HAL_GPIO_Init>

    /*Configure GPIO pins : LED1_Pin LED3_Pin PW_ON_OFF_DRIVER_OUTPUT_Pin LED2_Pin */
    GPIO_InitStruct.Pin = LED1_Pin | LED3_Pin | PW_ON_OFF_DRIVER_OUTPUT_Pin | LED2_Pin;
 8002ce0:	f241 1314 	movw	r3, #4372	@ 0x1114
 8002ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf2:	f107 0314 	add.w	r3, r7, #20
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4812      	ldr	r0, [pc, #72]	@ (8002d44 <MX_GPIO_Init+0x12c>)
 8002cfa:	f002 fc37 	bl	800556c <HAL_GPIO_Init>

    /*Configure GPIO pin : BUZZER_Pin */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8002cfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d04:	2301      	movs	r3, #1
 8002d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002d10:	f107 0314 	add.w	r3, r7, #20
 8002d14:	4619      	mov	r1, r3
 8002d16:	480c      	ldr	r0, [pc, #48]	@ (8002d48 <MX_GPIO_Init+0x130>)
 8002d18:	f002 fc28 	bl	800556c <HAL_GPIO_Init>

    /*Configure GPIO pin : PW_ON_OFF_DRIVER_INPUT_Pin */
    GPIO_InitStruct.Pin = PW_ON_OFF_DRIVER_INPUT_Pin;
 8002d1c:	2320      	movs	r3, #32
 8002d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d20:	2300      	movs	r3, #0
 8002d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d24:	2300      	movs	r3, #0
 8002d26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, &GPIO_InitStruct);
 8002d28:	f107 0314 	add.w	r3, r7, #20
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4805      	ldr	r0, [pc, #20]	@ (8002d44 <MX_GPIO_Init+0x12c>)
 8002d30:	f002 fc1c 	bl	800556c <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8002d34:	bf00      	nop
 8002d36:	3728      	adds	r7, #40	@ 0x28
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40020800 	.word	0x40020800
 8002d44:	40020400 	.word	0x40020400
 8002d48:	40020000 	.word	0x40020000

08002d4c <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument) {
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
    /* init code for USB_DEVICE */
    MX_USB_DEVICE_Init();
 8002d54:	f00c fe56 	bl	800fa04 <MX_USB_DEVICE_Init>
    /* USER CODE BEGIN 5 */
    /* Infinite loop */
    for (;;) {
        osDelay(1000);
 8002d58:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002d5c:	f00a fa6f 	bl	800d23e <osDelay>
 8002d60:	e7fa      	b.n	8002d58 <StartDefaultTask+0xc>

08002d62 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002d62:	b480      	push	{r7}
 8002d64:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* USER CODE END Error_Handler_Debug */
}
 8002d66:	bf00      	nop
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <HAL_MspInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef * htim);
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	607b      	str	r3, [r7, #4]
 8002d7a:	4b12      	ldr	r3, [pc, #72]	@ (8002dc4 <HAL_MspInit+0x54>)
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7e:	4a11      	ldr	r2, [pc, #68]	@ (8002dc4 <HAL_MspInit+0x54>)
 8002d80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d86:	4b0f      	ldr	r3, [pc, #60]	@ (8002dc4 <HAL_MspInit+0x54>)
 8002d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d8e:	607b      	str	r3, [r7, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	603b      	str	r3, [r7, #0]
 8002d96:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc4 <HAL_MspInit+0x54>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc4 <HAL_MspInit+0x54>)
 8002d9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002da0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002da2:	4b08      	ldr	r3, [pc, #32]	@ (8002dc4 <HAL_MspInit+0x54>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002daa:	603b      	str	r3, [r7, #0]
 8002dac:	683b      	ldr	r3, [r7, #0]

    /* System interrupt init*/
    /* PendSV_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002dae:	2200      	movs	r2, #0
 8002db0:	210f      	movs	r1, #15
 8002db2:	f06f 0001 	mvn.w	r0, #1
 8002db6:	f002 f9b8 	bl	800512a <HAL_NVIC_SetPriority>

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40023800 	.word	0x40023800

08002dc8 <HAL_ADC_MspInit>:
 * @brief ADC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hadc: ADC handle pointer
 * @retval None
 */
void HAL_ADC_MspInit(ADC_HandleTypeDef * hadc) {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08a      	sub	sp, #40	@ 0x28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd0:	f107 0314 	add.w	r3, r7, #20
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	605a      	str	r2, [r3, #4]
 8002dda:	609a      	str	r2, [r3, #8]
 8002ddc:	60da      	str	r2, [r3, #12]
 8002dde:	611a      	str	r2, [r3, #16]
    if (hadc->Instance == ADC1) {
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a17      	ldr	r2, [pc, #92]	@ (8002e44 <HAL_ADC_MspInit+0x7c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d127      	bne.n	8002e3a <HAL_ADC_MspInit+0x72>
        /* USER CODE BEGIN ADC1_MspInit 0 */

        /* USER CODE END ADC1_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_ADC1_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	613b      	str	r3, [r7, #16]
 8002dee:	4b16      	ldr	r3, [pc, #88]	@ (8002e48 <HAL_ADC_MspInit+0x80>)
 8002df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df2:	4a15      	ldr	r2, [pc, #84]	@ (8002e48 <HAL_ADC_MspInit+0x80>)
 8002df4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002df8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dfa:	4b13      	ldr	r3, [pc, #76]	@ (8002e48 <HAL_ADC_MspInit+0x80>)
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e02:	613b      	str	r3, [r7, #16]
 8002e04:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8002e48 <HAL_ADC_MspInit+0x80>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0e:	4a0e      	ldr	r2, [pc, #56]	@ (8002e48 <HAL_ADC_MspInit+0x80>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e16:	4b0c      	ldr	r3, [pc, #48]	@ (8002e48 <HAL_ADC_MspInit+0x80>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	68fb      	ldr	r3, [r7, #12]
        /**ADC1 GPIO Configuration
        PA0-WKUP     ------> ADC1_IN0
        */
        GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e22:	2301      	movs	r3, #1
 8002e24:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e26:	2303      	movs	r3, #3
 8002e28:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e2e:	f107 0314 	add.w	r3, r7, #20
 8002e32:	4619      	mov	r1, r3
 8002e34:	4805      	ldr	r0, [pc, #20]	@ (8002e4c <HAL_ADC_MspInit+0x84>)
 8002e36:	f002 fb99 	bl	800556c <HAL_GPIO_Init>

        /* USER CODE BEGIN ADC1_MspInit 1 */

        /* USER CODE END ADC1_MspInit 1 */
    }
}
 8002e3a:	bf00      	nop
 8002e3c:	3728      	adds	r7, #40	@ 0x28
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40012000 	.word	0x40012000
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	40020000 	.word	0x40020000

08002e50 <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef * hi2c) {
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08a      	sub	sp, #40	@ 0x28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e58:	f107 0314 	add.w	r3, r7, #20
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	60da      	str	r2, [r3, #12]
 8002e66:	611a      	str	r2, [r3, #16]
    if (hi2c->Instance == I2C1) {
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a19      	ldr	r2, [pc, #100]	@ (8002ed4 <HAL_I2C_MspInit+0x84>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d12b      	bne.n	8002eca <HAL_I2C_MspInit+0x7a>
        /* USER CODE BEGIN I2C1_MspInit 0 */

        /* USER CODE END I2C1_MspInit 0 */

        __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	613b      	str	r3, [r7, #16]
 8002e76:	4b18      	ldr	r3, [pc, #96]	@ (8002ed8 <HAL_I2C_MspInit+0x88>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7a:	4a17      	ldr	r2, [pc, #92]	@ (8002ed8 <HAL_I2C_MspInit+0x88>)
 8002e7c:	f043 0302 	orr.w	r3, r3, #2
 8002e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e82:	4b15      	ldr	r3, [pc, #84]	@ (8002ed8 <HAL_I2C_MspInit+0x88>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	613b      	str	r3, [r7, #16]
 8002e8c:	693b      	ldr	r3, [r7, #16]
        /**I2C1 GPIO Configuration
        PB6     ------> I2C1_SCL
        PB7     ------> I2C1_SDA
        */
        GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8002e8e:	23c0      	movs	r3, #192	@ 0xc0
 8002e90:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e92:	2312      	movs	r3, #18
 8002e94:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e96:	2300      	movs	r3, #0
 8002e98:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e9e:	2304      	movs	r3, #4
 8002ea0:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea2:	f107 0314 	add.w	r3, r7, #20
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	480c      	ldr	r0, [pc, #48]	@ (8002edc <HAL_I2C_MspInit+0x8c>)
 8002eaa:	f002 fb5f 	bl	800556c <HAL_GPIO_Init>

        /* Peripheral clock enable */
        __HAL_RCC_I2C1_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	4b09      	ldr	r3, [pc, #36]	@ (8002ed8 <HAL_I2C_MspInit+0x88>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb6:	4a08      	ldr	r2, [pc, #32]	@ (8002ed8 <HAL_I2C_MspInit+0x88>)
 8002eb8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ebc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ebe:	4b06      	ldr	r3, [pc, #24]	@ (8002ed8 <HAL_I2C_MspInit+0x88>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
        /* USER CODE BEGIN I2C1_MspInit 1 */

        /* USER CODE END I2C1_MspInit 1 */
    }
}
 8002eca:	bf00      	nop
 8002ecc:	3728      	adds	r7, #40	@ 0x28
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40005400 	.word	0x40005400
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	40020400 	.word	0x40020400

08002ee0 <HAL_TIM_PWM_MspInit>:
 * @brief TIM_PWM MSP Initialization
 * This function configures the hardware resources used in this example
 * @param htim_pwm: TIM_PWM handle pointer
 * @retval None
 */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef * htim_pwm) {
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
    if (htim_pwm->Instance == TIM3) {
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a0b      	ldr	r2, [pc, #44]	@ (8002f1c <HAL_TIM_PWM_MspInit+0x3c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d10d      	bne.n	8002f0e <HAL_TIM_PWM_MspInit+0x2e>
        /* USER CODE BEGIN TIM3_MspInit 0 */

        /* USER CODE END TIM3_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_TIM3_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8002f20 <HAL_TIM_PWM_MspInit+0x40>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efa:	4a09      	ldr	r2, [pc, #36]	@ (8002f20 <HAL_TIM_PWM_MspInit+0x40>)
 8002efc:	f043 0302 	orr.w	r3, r3, #2
 8002f00:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f02:	4b07      	ldr	r3, [pc, #28]	@ (8002f20 <HAL_TIM_PWM_MspInit+0x40>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
        /* USER CODE BEGIN TIM3_MspInit 1 */

        /* USER CODE END TIM3_MspInit 1 */
    }
}
 8002f0e:	bf00      	nop
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	40000400 	.word	0x40000400
 8002f20:	40023800 	.word	0x40023800

08002f24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef * htim) {
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08a      	sub	sp, #40	@ 0x28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f2c:	f107 0314 	add.w	r3, r7, #20
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	60da      	str	r2, [r3, #12]
 8002f3a:	611a      	str	r2, [r3, #16]
    if (htim->Instance == TIM3) {
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a21      	ldr	r2, [pc, #132]	@ (8002fc8 <HAL_TIM_MspPostInit+0xa4>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d13b      	bne.n	8002fbe <HAL_TIM_MspPostInit+0x9a>
        /* USER CODE BEGIN TIM3_MspPostInit 0 */

        /* USER CODE END TIM3_MspPostInit 0 */

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	613b      	str	r3, [r7, #16]
 8002f4a:	4b20      	ldr	r3, [pc, #128]	@ (8002fcc <HAL_TIM_MspPostInit+0xa8>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8002fcc <HAL_TIM_MspPostInit+0xa8>)
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f56:	4b1d      	ldr	r3, [pc, #116]	@ (8002fcc <HAL_TIM_MspPostInit+0xa8>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	613b      	str	r3, [r7, #16]
 8002f60:	693b      	ldr	r3, [r7, #16]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f62:	2300      	movs	r3, #0
 8002f64:	60fb      	str	r3, [r7, #12]
 8002f66:	4b19      	ldr	r3, [pc, #100]	@ (8002fcc <HAL_TIM_MspPostInit+0xa8>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6a:	4a18      	ldr	r2, [pc, #96]	@ (8002fcc <HAL_TIM_MspPostInit+0xa8>)
 8002f6c:	f043 0302 	orr.w	r3, r3, #2
 8002f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f72:	4b16      	ldr	r3, [pc, #88]	@ (8002fcc <HAL_TIM_MspPostInit+0xa8>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
        PA6     ------> TIM3_CH1
        PA7     ------> TIM3_CH2
        PB0     ------> TIM3_CH3
        PB1     ------> TIM3_CH4
        */
        GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8002f7e:	23c0      	movs	r3, #192	@ 0xc0
 8002f80:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f82:	2302      	movs	r3, #2
 8002f84:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f8e:	2302      	movs	r3, #2
 8002f90:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f92:	f107 0314 	add.w	r3, r7, #20
 8002f96:	4619      	mov	r1, r3
 8002f98:	480d      	ldr	r0, [pc, #52]	@ (8002fd0 <HAL_TIM_MspPostInit+0xac>)
 8002f9a:	f002 fae7 	bl	800556c <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002faa:	2300      	movs	r3, #0
 8002fac:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fb2:	f107 0314 	add.w	r3, r7, #20
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4806      	ldr	r0, [pc, #24]	@ (8002fd4 <HAL_TIM_MspPostInit+0xb0>)
 8002fba:	f002 fad7 	bl	800556c <HAL_GPIO_Init>

        /* USER CODE BEGIN TIM3_MspPostInit 1 */

        /* USER CODE END TIM3_MspPostInit 1 */
    }
}
 8002fbe:	bf00      	nop
 8002fc0:	3728      	adds	r7, #40	@ 0x28
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40000400 	.word	0x40000400
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40020000 	.word	0x40020000
 8002fd4:	40020400 	.word	0x40020400

08002fd8 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef * huart) {
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08a      	sub	sp, #40	@ 0x28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe0:	f107 0314 	add.w	r3, r7, #20
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	605a      	str	r2, [r3, #4]
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	60da      	str	r2, [r3, #12]
 8002fee:	611a      	str	r2, [r3, #16]
    if (huart->Instance == USART2) {
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a31      	ldr	r2, [pc, #196]	@ (80030bc <HAL_UART_MspInit+0xe4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d15b      	bne.n	80030b2 <HAL_UART_MspInit+0xda>
        /* USER CODE BEGIN USART2_MspInit 0 */

        /* USER CODE END USART2_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_USART2_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	4b30      	ldr	r3, [pc, #192]	@ (80030c0 <HAL_UART_MspInit+0xe8>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003002:	4a2f      	ldr	r2, [pc, #188]	@ (80030c0 <HAL_UART_MspInit+0xe8>)
 8003004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003008:	6413      	str	r3, [r2, #64]	@ 0x40
 800300a:	4b2d      	ldr	r3, [pc, #180]	@ (80030c0 <HAL_UART_MspInit+0xe8>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	4b29      	ldr	r3, [pc, #164]	@ (80030c0 <HAL_UART_MspInit+0xe8>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301e:	4a28      	ldr	r2, [pc, #160]	@ (80030c0 <HAL_UART_MspInit+0xe8>)
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	6313      	str	r3, [r2, #48]	@ 0x30
 8003026:	4b26      	ldr	r3, [pc, #152]	@ (80030c0 <HAL_UART_MspInit+0xe8>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
        /**USART2 GPIO Configuration
        PA2     ------> USART2_TX
        PA3     ------> USART2_RX
        */
        GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8003032:	230c      	movs	r3, #12
 8003034:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003036:	2302      	movs	r3, #2
 8003038:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303a:	2300      	movs	r3, #0
 800303c:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800303e:	2303      	movs	r3, #3
 8003040:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003042:	2307      	movs	r3, #7
 8003044:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003046:	f107 0314 	add.w	r3, r7, #20
 800304a:	4619      	mov	r1, r3
 800304c:	481d      	ldr	r0, [pc, #116]	@ (80030c4 <HAL_UART_MspInit+0xec>)
 800304e:	f002 fa8d 	bl	800556c <HAL_GPIO_Init>

        /* USART2 DMA Init */
        /* USART2_RX Init */
        hdma_usart2_rx.Instance = DMA1_Stream5;
 8003052:	4b1d      	ldr	r3, [pc, #116]	@ (80030c8 <HAL_UART_MspInit+0xf0>)
 8003054:	4a1d      	ldr	r2, [pc, #116]	@ (80030cc <HAL_UART_MspInit+0xf4>)
 8003056:	601a      	str	r2, [r3, #0]
        hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003058:	4b1b      	ldr	r3, [pc, #108]	@ (80030c8 <HAL_UART_MspInit+0xf0>)
 800305a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800305e:	605a      	str	r2, [r3, #4]
        hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003060:	4b19      	ldr	r3, [pc, #100]	@ (80030c8 <HAL_UART_MspInit+0xf0>)
 8003062:	2200      	movs	r2, #0
 8003064:	609a      	str	r2, [r3, #8]
        hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003066:	4b18      	ldr	r3, [pc, #96]	@ (80030c8 <HAL_UART_MspInit+0xf0>)
 8003068:	2200      	movs	r2, #0
 800306a:	60da      	str	r2, [r3, #12]
        hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800306c:	4b16      	ldr	r3, [pc, #88]	@ (80030c8 <HAL_UART_MspInit+0xf0>)
 800306e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003072:	611a      	str	r2, [r3, #16]
        hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003074:	4b14      	ldr	r3, [pc, #80]	@ (80030c8 <HAL_UART_MspInit+0xf0>)
 8003076:	2200      	movs	r2, #0
 8003078:	615a      	str	r2, [r3, #20]
        hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800307a:	4b13      	ldr	r3, [pc, #76]	@ (80030c8 <HAL_UART_MspInit+0xf0>)
 800307c:	2200      	movs	r2, #0
 800307e:	619a      	str	r2, [r3, #24]
        hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003080:	4b11      	ldr	r3, [pc, #68]	@ (80030c8 <HAL_UART_MspInit+0xf0>)
 8003082:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003086:	61da      	str	r2, [r3, #28]
        hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003088:	4b0f      	ldr	r3, [pc, #60]	@ (80030c8 <HAL_UART_MspInit+0xf0>)
 800308a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800308e:	621a      	str	r2, [r3, #32]
        hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003090:	4b0d      	ldr	r3, [pc, #52]	@ (80030c8 <HAL_UART_MspInit+0xf0>)
 8003092:	2200      	movs	r2, #0
 8003094:	625a      	str	r2, [r3, #36]	@ 0x24
        if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 8003096:	480c      	ldr	r0, [pc, #48]	@ (80030c8 <HAL_UART_MspInit+0xf0>)
 8003098:	f002 f882 	bl	80051a0 <HAL_DMA_Init>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_UART_MspInit+0xce>
            Error_Handler();
 80030a2:	f7ff fe5e 	bl	8002d62 <Error_Handler>
        }

        __HAL_LINKDMA(huart, hdmarx, hdma_usart2_rx);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a07      	ldr	r2, [pc, #28]	@ (80030c8 <HAL_UART_MspInit+0xf0>)
 80030aa:	639a      	str	r2, [r3, #56]	@ 0x38
 80030ac:	4a06      	ldr	r2, [pc, #24]	@ (80030c8 <HAL_UART_MspInit+0xf0>)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* USER CODE BEGIN USART2_MspInit 1 */

        /* USER CODE END USART2_MspInit 1 */
    }
}
 80030b2:	bf00      	nop
 80030b4:	3728      	adds	r7, #40	@ 0x28
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40004400 	.word	0x40004400
 80030c0:	40023800 	.word	0x40023800
 80030c4:	40020000 	.word	0x40020000
 80030c8:	20000cd4 	.word	0x20000cd4
 80030cc:	40026088 	.word	0x40026088

080030d0 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 80030d4:	bf00      	nop
 80030d6:	e7fd      	b.n	80030d4 <NMI_Handler+0x4>

080030d8 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1) {
 80030dc:	bf00      	nop
 80030de:	e7fd      	b.n	80030dc <HardFault_Handler+0x4>

080030e0 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1) {
 80030e4:	bf00      	nop
 80030e6:	e7fd      	b.n	80030e4 <MemManage_Handler+0x4>

080030e8 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1) {
 80030ec:	bf00      	nop
 80030ee:	e7fd      	b.n	80030ec <BusFault_Handler+0x4>

080030f0 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1) {
 80030f4:	bf00      	nop
 80030f6:	e7fd      	b.n	80030f4 <UsageFault_Handler+0x4>

080030f8 <DebugMon_Handler>:
}

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030fc:	bf00      	nop
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8003106:	b580      	push	{r7, lr}
 8003108:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 800310a:	f001 fb2b 	bl	8004764 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1)
    if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
#endif /* INCLUDE_xTaskGetSchedulerState */
        xPortSysTickHandler();
 800310e:	f00c fbc3 	bl	800f898 <xPortSysTickHandler>
    }
#endif /* INCLUDE_xTaskGetSchedulerState */
       /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <OTG_FS_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles USB On The Go FS global interrupt.
 */
void OTG_FS_IRQHandler(void) {
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN OTG_FS_IRQn 0 */

    /* USER CODE END OTG_FS_IRQn 0 */
    HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800311c:	4802      	ldr	r0, [pc, #8]	@ (8003128 <OTG_FS_IRQHandler+0x10>)
 800311e:	f003 fcea 	bl	8006af6 <HAL_PCD_IRQHandler>
    /* USER CODE BEGIN OTG_FS_IRQn 1 */

    /* USER CODE END OTG_FS_IRQn 1 */
}
 8003122:	bf00      	nop
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	200016b8 	.word	0x200016b8

0800312c <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
    return 1;
 8003130:	2301      	movs	r3, #1
}
 8003132:	4618      	mov	r0, r3
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <_kill>:

int _kill(int pid, int sig) {
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
    (void)pid;
    (void)sig;
    errno = EINVAL;
 8003146:	f00e f819 	bl	801117c <__errno>
 800314a:	4603      	mov	r3, r0
 800314c:	2216      	movs	r2, #22
 800314e:	601a      	str	r2, [r3, #0]
    return -1;
 8003150:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003154:	4618      	mov	r0, r3
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <_exit>:

void _exit(int status) {
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
    _kill(status, -1);
 8003164:	f04f 31ff 	mov.w	r1, #4294967295
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f7ff ffe7 	bl	800313c <_kill>
    while (1) {
 800316e:	bf00      	nop
 8003170:	e7fd      	b.n	800316e <_exit+0x12>

08003172 <_read>:
    } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char * ptr, int len) {
 8003172:	b580      	push	{r7, lr}
 8003174:	b086      	sub	sp, #24
 8003176:	af00      	add	r7, sp, #0
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	e00a      	b.n	800319a <_read+0x28>
        *ptr++ = __io_getchar();
 8003184:	f3af 8000 	nop.w
 8003188:	4601      	mov	r1, r0
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	60ba      	str	r2, [r7, #8]
 8003190:	b2ca      	uxtb	r2, r1
 8003192:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	3301      	adds	r3, #1
 8003198:	617b      	str	r3, [r7, #20]
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	429a      	cmp	r2, r3
 80031a0:	dbf0      	blt.n	8003184 <_read+0x12>
    }

    return len;
 80031a2:	687b      	ldr	r3, [r7, #4]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3718      	adds	r7, #24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <_write>:

__attribute__((weak)) int _write(int file, char * ptr, int len) {
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	e009      	b.n	80031d2 <_write+0x26>
        __io_putchar(*ptr++);
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	1c5a      	adds	r2, r3, #1
 80031c2:	60ba      	str	r2, [r7, #8]
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f3af 8000 	nop.w
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	3301      	adds	r3, #1
 80031d0:	617b      	str	r3, [r7, #20]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	dbf1      	blt.n	80031be <_write+0x12>
    }
    return len;
 80031da:	687b      	ldr	r3, [r7, #4]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <_close>:

int _close(int file) {
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
    (void)file;
    return -1;
 80031ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <_fstat>:

int _fstat(int file, struct stat * st) {
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
    (void)file;
    st->st_mode = S_IFCHR;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800320c:	605a      	str	r2, [r3, #4]
    return 0;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <_isatty>:

int _isatty(int file) {
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
    (void)file;
    return 1;
 8003224:	2301      	movs	r3, #1
}
 8003226:	4618      	mov	r0, r3
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8003232:	b480      	push	{r7}
 8003234:	b085      	sub	sp, #20
 8003236:	af00      	add	r7, sp, #0
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	607a      	str	r2, [r7, #4]
    (void)file;
    (void)ptr;
    (void)dir;
    return 0;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003254:	4a14      	ldr	r2, [pc, #80]	@ (80032a8 <_sbrk+0x5c>)
 8003256:	4b15      	ldr	r3, [pc, #84]	@ (80032ac <_sbrk+0x60>)
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 8003260:	4b13      	ldr	r3, [pc, #76]	@ (80032b0 <_sbrk+0x64>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d102      	bne.n	800326e <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 8003268:	4b11      	ldr	r3, [pc, #68]	@ (80032b0 <_sbrk+0x64>)
 800326a:	4a12      	ldr	r2, [pc, #72]	@ (80032b4 <_sbrk+0x68>)
 800326c:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 800326e:	4b10      	ldr	r3, [pc, #64]	@ (80032b0 <_sbrk+0x64>)
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4413      	add	r3, r2
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	429a      	cmp	r2, r3
 800327a:	d207      	bcs.n	800328c <_sbrk+0x40>
        errno = ENOMEM;
 800327c:	f00d ff7e 	bl	801117c <__errno>
 8003280:	4603      	mov	r3, r0
 8003282:	220c      	movs	r2, #12
 8003284:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 8003286:	f04f 33ff 	mov.w	r3, #4294967295
 800328a:	e009      	b.n	80032a0 <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 800328c:	4b08      	ldr	r3, [pc, #32]	@ (80032b0 <_sbrk+0x64>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 8003292:	4b07      	ldr	r3, [pc, #28]	@ (80032b0 <_sbrk+0x64>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4413      	add	r3, r2
 800329a:	4a05      	ldr	r2, [pc, #20]	@ (80032b0 <_sbrk+0x64>)
 800329c:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 800329e:	68fb      	ldr	r3, [r7, #12]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	20010000 	.word	0x20010000
 80032ac:	00000400 	.word	0x00000400
 80032b0:	20000d38 	.word	0x20000d38
 80032b4:	20001f30 	.word	0x20001f30

080032b8 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 80032bc:	4b06      	ldr	r3, [pc, #24]	@ (80032d8 <SystemInit+0x20>)
 80032be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c2:	4a05      	ldr	r2, [pc, #20]	@ (80032d8 <SystemInit+0x20>)
 80032c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                                   /* USER_VECT_TAB_ADDRESS */
}
 80032cc:	bf00      	nop
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	e000ed00 	.word	0xe000ed00

080032dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80032dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003314 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032e0:	480d      	ldr	r0, [pc, #52]	@ (8003318 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80032e2:	490e      	ldr	r1, [pc, #56]	@ (800331c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80032e4:	4a0e      	ldr	r2, [pc, #56]	@ (8003320 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80032e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032e8:	e002      	b.n	80032f0 <LoopCopyDataInit>

080032ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032ee:	3304      	adds	r3, #4

080032f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032f4:	d3f9      	bcc.n	80032ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032f6:	4a0b      	ldr	r2, [pc, #44]	@ (8003324 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80032f8:	4c0b      	ldr	r4, [pc, #44]	@ (8003328 <LoopFillZerobss+0x26>)
  movs r3, #0
 80032fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032fc:	e001      	b.n	8003302 <LoopFillZerobss>

080032fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003300:	3204      	adds	r2, #4

08003302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003304:	d3fb      	bcc.n	80032fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003306:	f7ff ffd7 	bl	80032b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800330a:	f00d ff3d 	bl	8011188 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800330e:	f7ff faad 	bl	800286c <main>
  bx  lr
 8003312:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003314:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800331c:	20000338 	.word	0x20000338
  ldr r2, =_sidata
 8003320:	08013ea0 	.word	0x08013ea0
  ldr r2, =_sbss
 8003324:	20000338 	.word	0x20000338
  ldr r4, =_ebss
 8003328:	20001f30 	.word	0x20001f30

0800332c <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800332c:	e7fe      	b.n	800332c <ADC_IRQHandler>

0800332e <PWM_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t PWM_Init(ESC_HandleTypeDef_t * hesc) {
 800332e:	b580      	push	{r7, lr}
 8003330:	b082      	sub	sp, #8
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]

    /* Check first parameter */
    if (NULL == hesc) {
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <PWM_Init+0x12>
        return false;
 800333c:	2300      	movs	r3, #0
 800333e:	e02c      	b.n	800339a <PWM_Init+0x6c>
    }

    /* Start PWM signal generation */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_1)) {
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2100      	movs	r1, #0
 8003346:	4618      	mov	r0, r3
 8003348:	f005 f9aa 	bl	80086a0 <HAL_TIM_PWM_Start>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <PWM_Init+0x28>
        /* END MODIFY 1 */
        return false;
 8003352:	2300      	movs	r3, #0
 8003354:	e021      	b.n	800339a <PWM_Init+0x6c>
    }
    /* BEGIN MODIFY 2 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_2)) {
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2104      	movs	r1, #4
 800335c:	4618      	mov	r0, r3
 800335e:	f005 f99f 	bl	80086a0 <HAL_TIM_PWM_Start>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <PWM_Init+0x3e>
        /* END MODIFY 2 */
        return false;
 8003368:	2300      	movs	r3, #0
 800336a:	e016      	b.n	800339a <PWM_Init+0x6c>
    }
    /* BEGIN MODIFY 3 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_3)) {
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2108      	movs	r1, #8
 8003372:	4618      	mov	r0, r3
 8003374:	f005 f994 	bl	80086a0 <HAL_TIM_PWM_Start>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <PWM_Init+0x54>
        /* END MODIFY 3 */
        return false;
 800337e:	2300      	movs	r3, #0
 8003380:	e00b      	b.n	800339a <PWM_Init+0x6c>
    }
    /* BEGIN MODIFY 4 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_4)) {
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	210c      	movs	r1, #12
 8003388:	4618      	mov	r0, r3
 800338a:	f005 f989 	bl	80086a0 <HAL_TIM_PWM_Start>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <PWM_Init+0x6a>
        /* END MODIFY 4 */
        return false;
 8003394:	2300      	movs	r3, #0
 8003396:	e000      	b.n	800339a <PWM_Init+0x6c>
    }

    return true;
 8003398:	2301      	movs	r3, #1
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <PWM_SetDutyCycle>:
    }

    return true;
}

bool_t PWM_SetDutyCycle(ESC_HandleTypeDef_t * hesc, uint8_t channel, uint32_t dutyCycle) {
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	460b      	mov	r3, r1
 80033ae:	607a      	str	r2, [r7, #4]
 80033b0:	72fb      	strb	r3, [r7, #11]

    /* Check parameters */
    if (NULL == hesc) {
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <PWM_SetDutyCycle+0x18>
        return false;
 80033b8:	2300      	movs	r3, #0
 80033ba:	e02d      	b.n	8003418 <PWM_SetDutyCycle+0x74>
    }
    if (PWM_CHANNEL_1 != channel && PWM_CHANNEL_2 != channel && PWM_CHANNEL_3 != channel && PWM_CHANNEL_4 != channel) {
 80033bc:	7afb      	ldrb	r3, [r7, #11]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d00a      	beq.n	80033d8 <PWM_SetDutyCycle+0x34>
 80033c2:	7afb      	ldrb	r3, [r7, #11]
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d007      	beq.n	80033d8 <PWM_SetDutyCycle+0x34>
 80033c8:	7afb      	ldrb	r3, [r7, #11]
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d004      	beq.n	80033d8 <PWM_SetDutyCycle+0x34>
 80033ce:	7afb      	ldrb	r3, [r7, #11]
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d001      	beq.n	80033d8 <PWM_SetDutyCycle+0x34>
        return false;
 80033d4:	2300      	movs	r3, #0
 80033d6:	e01f      	b.n	8003418 <PWM_SetDutyCycle+0x74>
    }

    /* Set duty cycle */
    if (PWM_CHANNEL_1 == channel) {
 80033d8:	7afb      	ldrb	r3, [r7, #11]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d104      	bne.n	80033e8 <PWM_SetDutyCycle+0x44>
        /* BEGIN MODIFY 10 */
        TIM3->CCR1 = (uint16_t)dutyCycle;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	4b10      	ldr	r3, [pc, #64]	@ (8003424 <PWM_SetDutyCycle+0x80>)
 80033e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80033e6:	e016      	b.n	8003416 <PWM_SetDutyCycle+0x72>
        /* END MODIFY 10 */
    } else if (PWM_CHANNEL_2 == channel) {
 80033e8:	7afb      	ldrb	r3, [r7, #11]
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d104      	bne.n	80033f8 <PWM_SetDutyCycle+0x54>
        /* BEGIN MODIFY 11 */
        TIM3->CCR2 = (uint16_t)dutyCycle;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003424 <PWM_SetDutyCycle+0x80>)
 80033f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80033f6:	e00e      	b.n	8003416 <PWM_SetDutyCycle+0x72>
        /* END MODIFY 11 */
    } else if (PWM_CHANNEL_3 == channel) {
 80033f8:	7afb      	ldrb	r3, [r7, #11]
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	d104      	bne.n	8003408 <PWM_SetDutyCycle+0x64>
        /* BEGIN MODIFY 12 */
        TIM3->CCR3 = (uint16_t)dutyCycle;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	b29a      	uxth	r2, r3
 8003402:	4b08      	ldr	r3, [pc, #32]	@ (8003424 <PWM_SetDutyCycle+0x80>)
 8003404:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003406:	e006      	b.n	8003416 <PWM_SetDutyCycle+0x72>
        /* END MODIFY 12 */
    } else if (PWM_CHANNEL_4 == channel) {
 8003408:	7afb      	ldrb	r3, [r7, #11]
 800340a:	2b04      	cmp	r3, #4
 800340c:	d103      	bne.n	8003416 <PWM_SetDutyCycle+0x72>
        /* BEGIN MODIFY 13 */
        TIM3->CCR4 = (uint16_t)dutyCycle;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	b29a      	uxth	r2, r3
 8003412:	4b04      	ldr	r3, [pc, #16]	@ (8003424 <PWM_SetDutyCycle+0x80>)
 8003414:	641a      	str	r2, [r3, #64]	@ 0x40
        /* END MODIFY 13 */
    }

    return true;
 8003416:	2301      	movs	r3, #1
}
 8003418:	4618      	mov	r0, r3
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	40000400 	.word	0x40000400

08003428 <ESC_CalculatePWMDutyCycle>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t ESC_CalculatePWMDutyCycle(float speed, uint32_t * pwmValue) {
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003432:	6038      	str	r0, [r7, #0]

    /* Check parameters */
    if (0 > speed || 100 < speed) {
 8003434:	edd7 7a01 	vldr	s15, [r7, #4]
 8003438:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800343c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003440:	d408      	bmi.n	8003454 <ESC_CalculatePWMDutyCycle+0x2c>
 8003442:	edd7 7a01 	vldr	s15, [r7, #4]
 8003446:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80034b0 <ESC_CalculatePWMDutyCycle+0x88>
 800344a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800344e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003452:	dd01      	ble.n	8003458 <ESC_CalculatePWMDutyCycle+0x30>
        return false;
 8003454:	2300      	movs	r3, #0
 8003456:	e021      	b.n	800349c <ESC_CalculatePWMDutyCycle+0x74>
    }

    /* Calculate PWM value */
    *pwmValue = (uint32_t)((MAX_ESC_SPEED - MIN_ESC_SPEED) * (float)(speed / 100) + MIN_ESC_SPEED);
 8003458:	edd7 7a01 	vldr	s15, [r7, #4]
 800345c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80034b0 <ESC_CalculatePWMDutyCycle+0x88>
 8003460:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003464:	ee16 0a90 	vmov	r0, s13
 8003468:	f7fd f876 	bl	8000558 <__aeabi_f2d>
 800346c:	a30e      	add	r3, pc, #56	@ (adr r3, 80034a8 <ESC_CalculatePWMDutyCycle+0x80>)
 800346e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003472:	f7fd f8c9 	bl	8000608 <__aeabi_dmul>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	4610      	mov	r0, r2
 800347c:	4619      	mov	r1, r3
 800347e:	a30a      	add	r3, pc, #40	@ (adr r3, 80034a8 <ESC_CalculatePWMDutyCycle+0x80>)
 8003480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003484:	f7fc ff0a 	bl	800029c <__adddf3>
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	4610      	mov	r0, r2
 800348e:	4619      	mov	r1, r3
 8003490:	f7fd fb92 	bl	8000bb8 <__aeabi_d2uiz>
 8003494:	4602      	mov	r2, r0
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	601a      	str	r2, [r3, #0]

    return true;
 800349a:	2301      	movs	r3, #1
}
 800349c:	4618      	mov	r0, r3
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	f3af 8000 	nop.w
 80034a8:	00000000 	.word	0x00000000
 80034ac:	40a99980 	.word	0x40a99980
 80034b0:	42c80000 	.word	0x42c80000

080034b4 <ESC_AutoCalibrate>:

static bool_t ESC_AutoCalibrate(ESC_HandleTypeDef_t * hesc) {
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]

    /* Check parameters */
    if (NULL == hesc) {
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <ESC_AutoCalibrate+0x12>
        return false;
 80034c2:	2300      	movs	r3, #0
 80034c4:	e040      	b.n	8003548 <ESC_AutoCalibrate+0x94>
    //    if (false == PWM_SetDutyCycle(hesc, hesc->esc4, MAX_ESC_SPEED)) {
    //        return false;
    //    }

    /* Set ESC to minimum throttle */
    if (false == PWM_SetDutyCycle(hesc, hesc->esc1, MIN_ESC_SPEED)) {
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	791b      	ldrb	r3, [r3, #4]
 80034ca:	f640 42cc 	movw	r2, #3276	@ 0xccc
 80034ce:	4619      	mov	r1, r3
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7ff ff67 	bl	80033a4 <PWM_SetDutyCycle>
 80034d6:	4603      	mov	r3, r0
 80034d8:	f083 0301 	eor.w	r3, r3, #1
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <ESC_AutoCalibrate+0x32>
        return false;
 80034e2:	2300      	movs	r3, #0
 80034e4:	e030      	b.n	8003548 <ESC_AutoCalibrate+0x94>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc2, MIN_ESC_SPEED)) {
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	795b      	ldrb	r3, [r3, #5]
 80034ea:	f640 42cc 	movw	r2, #3276	@ 0xccc
 80034ee:	4619      	mov	r1, r3
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f7ff ff57 	bl	80033a4 <PWM_SetDutyCycle>
 80034f6:	4603      	mov	r3, r0
 80034f8:	f083 0301 	eor.w	r3, r3, #1
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <ESC_AutoCalibrate+0x52>
        return false;
 8003502:	2300      	movs	r3, #0
 8003504:	e020      	b.n	8003548 <ESC_AutoCalibrate+0x94>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc3, MIN_ESC_SPEED)) {
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	799b      	ldrb	r3, [r3, #6]
 800350a:	f640 42cc 	movw	r2, #3276	@ 0xccc
 800350e:	4619      	mov	r1, r3
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7ff ff47 	bl	80033a4 <PWM_SetDutyCycle>
 8003516:	4603      	mov	r3, r0
 8003518:	f083 0301 	eor.w	r3, r3, #1
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <ESC_AutoCalibrate+0x72>
        return false;
 8003522:	2300      	movs	r3, #0
 8003524:	e010      	b.n	8003548 <ESC_AutoCalibrate+0x94>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc4, MIN_ESC_SPEED)) {
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	79db      	ldrb	r3, [r3, #7]
 800352a:	f640 42cc 	movw	r2, #3276	@ 0xccc
 800352e:	4619      	mov	r1, r3
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f7ff ff37 	bl	80033a4 <PWM_SetDutyCycle>
 8003536:	4603      	mov	r3, r0
 8003538:	f083 0301 	eor.w	r3, r3, #1
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <ESC_AutoCalibrate+0x92>
        return false;
 8003542:	2300      	movs	r3, #0
 8003544:	e000      	b.n	8003548 <ESC_AutoCalibrate+0x94>

#ifdef ESC_USE_LOGGING
    LOG((uint8_t *)"ESCs auto-calibrated.\r\n\n", LOG_INFORMATION);
#endif

    return true;
 8003546:	2301      	movs	r3, #1
}
 8003548:	4618      	mov	r0, r3
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <ESC_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
ESC_HandleTypeDef_t * ESC_Init(TIM_HandleTypeDef * htim) {
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]

    /* Check parameters */
    if (NULL == htim) {
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <ESC_Init+0x12>
        return NULL;
 800355e:	2300      	movs	r3, #0
 8003560:	e036      	b.n	80035d0 <ESC_Init+0x80>
    LOG((uint8_t *)"Initializing ESCs...\r\n\n", LOG_INFORMATION);
#endif

    /* Allocate dynamic memory for the ESC_HandleTypeDef_t structure */
#ifdef USE_FREERTOS
    ESC_HandleTypeDef_t * hesc = pvPortMalloc(sizeof(ESC_HandleTypeDef_t));
 8003562:	2008      	movs	r0, #8
 8003564:	f00c fa2a 	bl	800f9bc <pvPortMalloc>
 8003568:	60f8      	str	r0, [r7, #12]
#else
    ESC_HandleTypeDef_t * hesc = malloc(sizeof(ESC_HandleTypeDef_t));
#endif

    /* Initialize ESC_HandleTypeDef structure */
    if (hesc) {
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00f      	beq.n	8003590 <ESC_Init+0x40>
        hesc->htim = htim;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	601a      	str	r2, [r3, #0]
        hesc->esc1 = PWM_CHANNEL_1;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2201      	movs	r2, #1
 800357a:	711a      	strb	r2, [r3, #4]
        hesc->esc2 = PWM_CHANNEL_2;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2202      	movs	r2, #2
 8003580:	715a      	strb	r2, [r3, #5]
        hesc->esc3 = PWM_CHANNEL_3;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2203      	movs	r2, #3
 8003586:	719a      	strb	r2, [r3, #6]
        hesc->esc4 = PWM_CHANNEL_4;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2204      	movs	r2, #4
 800358c:	71da      	strb	r2, [r3, #7]
 800358e:	e002      	b.n	8003596 <ESC_Init+0x46>
    } else {
        /* Dynamic memory allocation was not successful */
        /* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f00c fa25 	bl	800f9e0 <vPortFree>
        free(hesc);
#endif
    }

    /* Start PWM signal generation */
    if (false == PWM_Init(hesc)) {
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f7ff fec9 	bl	800332e <PWM_Init>
 800359c:	4603      	mov	r3, r0
 800359e:	f083 0301 	eor.w	r3, r3, #1
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d004      	beq.n	80035b2 <ESC_Init+0x62>
        LOG((uint8_t *)"ESCs  couldn't be initialized.\r\n\n", LOG_ERROR);
#endif

/* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f00c fa19 	bl	800f9e0 <vPortFree>
#else
        free(hesc);
#endif

        return NULL;
 80035ae:	2300      	movs	r3, #0
 80035b0:	e00e      	b.n	80035d0 <ESC_Init+0x80>
    }

    /* Calibrate ESC */
    if (false == ESC_AutoCalibrate(hesc)) {
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f7ff ff7e 	bl	80034b4 <ESC_AutoCalibrate>
 80035b8:	4603      	mov	r3, r0
 80035ba:	f083 0301 	eor.w	r3, r3, #1
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d004      	beq.n	80035ce <ESC_Init+0x7e>
        LOG((uint8_t *)"ESCs couldn't be calibrated.\r\n\n", LOG_ERROR);
#endif

/* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f00c fa0b 	bl	800f9e0 <vPortFree>
#else
        free(hesc);
#endif

        return NULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	e000      	b.n	80035d0 <ESC_Init+0x80>

#ifdef ESC_USE_LOGGING
    LOG((uint8_t *)"ESCs initialized.\r\n\n", LOG_INFORMATION);
#endif

    return hesc;
 80035ce:	68fb      	ldr	r3, [r7, #12]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <ESC_SetSpeed>:
#endif

    return true;
}

bool_t ESC_SetSpeed(ESC_HandleTypeDef_t * hesc, uint8_t channel, float speed) {
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	460b      	mov	r3, r1
 80035e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80035e6:	72fb      	strb	r3, [r7, #11]

    uint32_t pwmValue;

    /* Check parameters */
    if (NULL == hesc->htim) {
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <ESC_SetSpeed+0x1c>
        return false;
 80035f0:	2300      	movs	r3, #0
 80035f2:	e03d      	b.n	8003670 <ESC_SetSpeed+0x98>
    }
    if (PWM_CHANNEL_1 != channel && PWM_CHANNEL_2 != channel && PWM_CHANNEL_3 != channel && PWM_CHANNEL_4 != channel) {
 80035f4:	7afb      	ldrb	r3, [r7, #11]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d00a      	beq.n	8003610 <ESC_SetSpeed+0x38>
 80035fa:	7afb      	ldrb	r3, [r7, #11]
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d007      	beq.n	8003610 <ESC_SetSpeed+0x38>
 8003600:	7afb      	ldrb	r3, [r7, #11]
 8003602:	2b03      	cmp	r3, #3
 8003604:	d004      	beq.n	8003610 <ESC_SetSpeed+0x38>
 8003606:	7afb      	ldrb	r3, [r7, #11]
 8003608:	2b04      	cmp	r3, #4
 800360a:	d001      	beq.n	8003610 <ESC_SetSpeed+0x38>
        return false;
 800360c:	2300      	movs	r3, #0
 800360e:	e02f      	b.n	8003670 <ESC_SetSpeed+0x98>
    }
    if (speed < 0 || speed > 100) {
 8003610:	edd7 7a01 	vldr	s15, [r7, #4]
 8003614:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800361c:	d408      	bmi.n	8003630 <ESC_SetSpeed+0x58>
 800361e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003622:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8003678 <ESC_SetSpeed+0xa0>
 8003626:	eef4 7ac7 	vcmpe.f32	s15, s14
 800362a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800362e:	dd01      	ble.n	8003634 <ESC_SetSpeed+0x5c>
        return false;
 8003630:	2300      	movs	r3, #0
 8003632:	e01d      	b.n	8003670 <ESC_SetSpeed+0x98>
    }

    /* Calculate PWM duty cycle */
    if (false == ESC_CalculatePWMDutyCycle(speed, &pwmValue)) {
 8003634:	f107 0314 	add.w	r3, r7, #20
 8003638:	4618      	mov	r0, r3
 800363a:	ed97 0a01 	vldr	s0, [r7, #4]
 800363e:	f7ff fef3 	bl	8003428 <ESC_CalculatePWMDutyCycle>
 8003642:	4603      	mov	r3, r0
 8003644:	f083 0301 	eor.w	r3, r3, #1
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <ESC_SetSpeed+0x7a>
        return false;
 800364e:	2300      	movs	r3, #0
 8003650:	e00e      	b.n	8003670 <ESC_SetSpeed+0x98>
    }

    /* Set PWM duty cycle */
    if (false == PWM_SetDutyCycle(hesc, channel, pwmValue)) {
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	7afb      	ldrb	r3, [r7, #11]
 8003656:	4619      	mov	r1, r3
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f7ff fea3 	bl	80033a4 <PWM_SetDutyCycle>
 800365e:	4603      	mov	r3, r0
 8003660:	f083 0301 	eor.w	r3, r3, #1
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <ESC_SetSpeed+0x96>
        return false;
 800366a:	2300      	movs	r3, #0
 800366c:	e000      	b.n	8003670 <ESC_SetSpeed+0x98>
    };

    return true;
 800366e:	2301      	movs	r3, #1
}
 8003670:	4618      	mov	r0, r3
 8003672:	3718      	adds	r7, #24
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	42c80000 	.word	0x42c80000

0800367c <IBUS_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t IBUS_Init(IBUS_HandleTypeDef_t * hibus) {
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hibus) {
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <IBUS_Init+0x12>
        return false;
 800368a:	2300      	movs	r3, #0
 800368c:	e00e      	b.n	80036ac <IBUS_Init+0x30>
    }

    /* Initialize DMA reception */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_UART_Receive_DMA(hibus->huart, hibus->buffer, hibus->bufferSize)) {
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6818      	ldr	r0, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6859      	ldr	r1, [r3, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	7a1b      	ldrb	r3, [r3, #8]
 800369a:	461a      	mov	r2, r3
 800369c:	f005 fc5f 	bl	8008f5e <HAL_UART_Receive_DMA>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <IBUS_Init+0x2e>
        /* END MODIFY 1 */

        /* DMA initialization was unsuccessful */
        return false;
 80036a6:	2300      	movs	r3, #0
 80036a8:	e000      	b.n	80036ac <IBUS_Init+0x30>
    }

    /* iBus initialization was successful */
    return true;
 80036aa:	2301      	movs	r3, #1
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <FSA8S_CheckFirstBytes>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t FSA8S_CheckFirstBytes(IBUS_HandleTypeDef_t * hibus) {
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hibus) {
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <FSA8S_CheckFirstBytes+0x12>
        return false;
 80036c2:	2300      	movs	r3, #0
 80036c4:	e00d      	b.n	80036e2 <FSA8S_CheckFirstBytes+0x2e>
    }

    /* Check first bytes*/
    if (IBUS_BUFFER_LENGTH == hibus->buffer[0] && IBUS_COMMAND == hibus->buffer[1]) {
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b20      	cmp	r3, #32
 80036ce:	d107      	bne.n	80036e0 <FSA8S_CheckFirstBytes+0x2c>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	3301      	adds	r3, #1
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b40      	cmp	r3, #64	@ 0x40
 80036da:	d101      	bne.n	80036e0 <FSA8S_CheckFirstBytes+0x2c>
        /* First two bytes are correct */
        return true;
 80036dc:	2301      	movs	r3, #1
 80036de:	e000      	b.n	80036e2 <FSA8S_CheckFirstBytes+0x2e>
    } else {
        /* First two bytes are not correct */
        return false;
 80036e0:	2300      	movs	r3, #0
    }
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <FSA8S_Checksum>:

static bool_t FSA8S_Checksum(IBUS_HandleTypeDef_t * hibus) {
 80036ee:	b480      	push	{r7}
 80036f0:	b085      	sub	sp, #20
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]

    /* Declare variable for checksum value in data received */
    uint16_t sentChecksum;

    /* Define variable for checksum to calculate using the data received */
    uint16_t receivedChecksum = 0xFFFF;
 80036f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036fa:	81fb      	strh	r3, [r7, #14]

    /* Check parameter */
    if (NULL == hibus) {
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <FSA8S_Checksum+0x18>
        return false;
 8003702:	2300      	movs	r3, #0
 8003704:	e02c      	b.n	8003760 <FSA8S_Checksum+0x72>
    }

    /* Get received checksum value */
    sentChecksum = (hibus->buffer[hibus->bufferSize - 1] << 8) | (hibus->buffer[hibus->bufferSize - 2]);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	7a1b      	ldrb	r3, [r3, #8]
 800370e:	3b01      	subs	r3, #1
 8003710:	4413      	add	r3, r2
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	021b      	lsls	r3, r3, #8
 8003716:	b21a      	sxth	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6859      	ldr	r1, [r3, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	7a1b      	ldrb	r3, [r3, #8]
 8003720:	3b02      	subs	r3, #2
 8003722:	440b      	add	r3, r1
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	b21b      	sxth	r3, r3
 8003728:	4313      	orrs	r3, r2
 800372a:	b21b      	sxth	r3, r3
 800372c:	817b      	strh	r3, [r7, #10]

    /* Calculate checksum */
    for (uint8_t i = 0; i < 30; i++) {
 800372e:	2300      	movs	r3, #0
 8003730:	737b      	strb	r3, [r7, #13]
 8003732:	e00b      	b.n	800374c <FSA8S_Checksum+0x5e>
        receivedChecksum -= hibus->buffer[i];
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	7b7b      	ldrb	r3, [r7, #13]
 800373a:	4413      	add	r3, r2
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	89fb      	ldrh	r3, [r7, #14]
 8003742:	1a9b      	subs	r3, r3, r2
 8003744:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < 30; i++) {
 8003746:	7b7b      	ldrb	r3, [r7, #13]
 8003748:	3301      	adds	r3, #1
 800374a:	737b      	strb	r3, [r7, #13]
 800374c:	7b7b      	ldrb	r3, [r7, #13]
 800374e:	2b1d      	cmp	r3, #29
 8003750:	d9f0      	bls.n	8003734 <FSA8S_Checksum+0x46>
    }

    /* Compare received checksum value with calculated one */
    if (sentChecksum == receivedChecksum) {
 8003752:	897a      	ldrh	r2, [r7, #10]
 8003754:	89fb      	ldrh	r3, [r7, #14]
 8003756:	429a      	cmp	r2, r3
 8003758:	d101      	bne.n	800375e <FSA8S_Checksum+0x70>
        /* Received data is correct */
        return true;
 800375a:	2301      	movs	r3, #1
 800375c:	e000      	b.n	8003760 <FSA8S_Checksum+0x72>
    } else {
        /* Received data is corrupted */
        return false;
 800375e:	2300      	movs	r3, #0
    }
}
 8003760:	4618      	mov	r0, r3
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <FSA8S_AmendData>:

static void FSA8S_AmendData(IBUS_HandleTypeDef_t * hibus) {
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]

    /* Declare variable for channel value */
    uint16_t channelValue;

    /* Check parameter */
    if (NULL != hibus) {
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d061      	beq.n	800383e <FSA8S_AmendData+0xd2>

        /* Amend data */
        for (uint8_t i = 2; i < (hibus->bufferSize - 2); i += 2) {
 800377a:	2302      	movs	r3, #2
 800377c:	737b      	strb	r3, [r7, #13]
 800377e:	e058      	b.n	8003832 <FSA8S_AmendData+0xc6>

            channelValue = IBUS_CHANNEL_VALUE_NULL;
 8003780:	2300      	movs	r3, #0
 8003782:	81fb      	strh	r3, [r7, #14]

            /* Swap channel bytes */
            channelValue = ((hibus->buffer[i + 1] << 8) | (hibus->buffer[i])) - calibrationValues[(i - 2) / 2];
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	7b7b      	ldrb	r3, [r7, #13]
 800378a:	3301      	adds	r3, #1
 800378c:	4413      	add	r3, r2
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	021b      	lsls	r3, r3, #8
 8003792:	b21a      	sxth	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6859      	ldr	r1, [r3, #4]
 8003798:	7b7b      	ldrb	r3, [r7, #13]
 800379a:	440b      	add	r3, r1
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	b21b      	sxth	r3, r3
 80037a0:	4313      	orrs	r3, r2
 80037a2:	b21b      	sxth	r3, r3
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	7b7b      	ldrb	r3, [r7, #13]
 80037a8:	3b02      	subs	r3, #2
 80037aa:	0fd9      	lsrs	r1, r3, #31
 80037ac:	440b      	add	r3, r1
 80037ae:	105b      	asrs	r3, r3, #1
 80037b0:	4619      	mov	r1, r3
 80037b2:	4b26      	ldr	r3, [pc, #152]	@ (800384c <FSA8S_AmendData+0xe0>)
 80037b4:	5c5b      	ldrb	r3, [r3, r1]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	81fb      	strh	r3, [r7, #14]

            /* Map channel value from 0 to IBUS_CHANNEL_MAX_VALUE */
            if ((IBUS_CHANNEL_MIN_RAW_VALUE <= channelValue) && (IBUS_CHANNEL_MAX_RAW_VALUE >= channelValue)) {
 80037ba:	89fb      	ldrh	r3, [r7, #14]
 80037bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80037c0:	d308      	bcc.n	80037d4 <FSA8S_AmendData+0x68>
 80037c2:	89fb      	ldrh	r3, [r7, #14]
 80037c4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80037c8:	d804      	bhi.n	80037d4 <FSA8S_AmendData+0x68>
                channelValue -= IBUS_CHANNEL_MIN_RAW_VALUE;
 80037ca:	89fb      	ldrh	r3, [r7, #14]
 80037cc:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80037d0:	81fb      	strh	r3, [r7, #14]
 80037d2:	e001      	b.n	80037d8 <FSA8S_AmendData+0x6c>
            } else {
                channelValue = IBUS_CHANNEL_VALUE_NULL;
 80037d4:	2300      	movs	r3, #0
 80037d6:	81fb      	strh	r3, [r7, #14]
            }

            /* Map channel value between minimum and maximum values and store it */
            hibus->data[(i - 2) / 2] = channelValue * ((float)(IBUS_CHANNEL_MAX_VALUE + (calibrationValues[(i - 2) / 2] * ((float)IBUS_CHANNEL_MAX_VALUE / IBUS_CHANNEL_MIN_RAW_VALUE))) / IBUS_CHANNEL_MIN_RAW_VALUE);
 80037d8:	89fb      	ldrh	r3, [r7, #14]
 80037da:	ee07 3a90 	vmov	s15, r3
 80037de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037e2:	7b7b      	ldrb	r3, [r7, #13]
 80037e4:	3b02      	subs	r3, #2
 80037e6:	0fda      	lsrs	r2, r3, #31
 80037e8:	4413      	add	r3, r2
 80037ea:	105b      	asrs	r3, r3, #1
 80037ec:	461a      	mov	r2, r3
 80037ee:	4b17      	ldr	r3, [pc, #92]	@ (800384c <FSA8S_AmendData+0xe0>)
 80037f0:	5c9b      	ldrb	r3, [r3, r2]
 80037f2:	ee07 3a90 	vmov	s15, r3
 80037f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037fa:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8003850 <FSA8S_AmendData+0xe4>
 80037fe:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8003802:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8003850 <FSA8S_AmendData+0xe4>
 8003806:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800380a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68da      	ldr	r2, [r3, #12]
 8003812:	7b7b      	ldrb	r3, [r7, #13]
 8003814:	3b02      	subs	r3, #2
 8003816:	0fd9      	lsrs	r1, r3, #31
 8003818:	440b      	add	r3, r1
 800381a:	105b      	asrs	r3, r3, #1
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	4413      	add	r3, r2
 8003820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003824:	ee17 2a90 	vmov	r2, s15
 8003828:	b292      	uxth	r2, r2
 800382a:	801a      	strh	r2, [r3, #0]
        for (uint8_t i = 2; i < (hibus->bufferSize - 2); i += 2) {
 800382c:	7b7b      	ldrb	r3, [r7, #13]
 800382e:	3302      	adds	r3, #2
 8003830:	737b      	strb	r3, [r7, #13]
 8003832:	7b7a      	ldrb	r2, [r7, #13]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	7a1b      	ldrb	r3, [r3, #8]
 8003838:	3b02      	subs	r3, #2
 800383a:	429a      	cmp	r2, r3
 800383c:	dba0      	blt.n	8003780 <FSA8S_AmendData+0x14>
        }
    }
}
 800383e:	bf00      	nop
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	20000028 	.word	0x20000028
 8003850:	447a0000 	.word	0x447a0000

08003854 <FSA8S_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
IBUS_HandleTypeDef_t * FSA8S_Init(UART_HandleTypeDef * huart) {
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]

    /* Define variable to track number of initializations */
    static uint8_t alreadyInitialized = false;

    /* Check parameter */
    if (NULL == huart) {
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <FSA8S_Init+0x12>
        return NULL;
 8003862:	2300      	movs	r3, #0
 8003864:	e04a      	b.n	80038fc <FSA8S_Init+0xa8>
    }

    /* Check if driver was already initialized */
    if (alreadyInitialized) {
 8003866:	4b27      	ldr	r3, [pc, #156]	@ (8003904 <FSA8S_Init+0xb0>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <FSA8S_Init+0x1e>
        return NULL;
 800386e:	2300      	movs	r3, #0
 8003870:	e044      	b.n	80038fc <FSA8S_Init+0xa8>
    }

    /* Allocate dynamic memory for the IBUS_HandleTypeDef_t structure and for the buffer to receive
     * data */
#ifdef USE_FREERTOS
    IBUS_HandleTypeDef_t * hibus = (IBUS_HandleTypeDef_t *)pvPortMalloc(sizeof(IBUS_HandleTypeDef_t));
 8003872:	2014      	movs	r0, #20
 8003874:	f00c f8a2 	bl	800f9bc <pvPortMalloc>
 8003878:	6178      	str	r0, [r7, #20]
    uint8_t * buffer = (uint8_t *)pvPortMalloc(sizeof(uint8_t) * IBUS_BUFFER_LENGTH);
 800387a:	2020      	movs	r0, #32
 800387c:	f00c f89e 	bl	800f9bc <pvPortMalloc>
 8003880:	6138      	str	r0, [r7, #16]
    uint16_t * data = (uint16_t *)pvPortMalloc(sizeof(uint16_t) * IBUS_CHANNELS);
 8003882:	201c      	movs	r0, #28
 8003884:	f00c f89a 	bl	800f9bc <pvPortMalloc>
 8003888:	60f8      	str	r0, [r7, #12]
    uint8_t * buffer = (uint8_t *)malloc(sizeof(uint8_t) * IBUS_BUFFER_LENGTH);
    uint16_t * data = (uint16_t *)malloc(sizeof(uint16_t) * IBUS_CHANNELS);
#endif

    /* Initialize iBus_HandleTypeDef structure */
    if (hibus) {
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00f      	beq.n	80038b0 <FSA8S_Init+0x5c>
        hibus->huart = huart;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	601a      	str	r2, [r3, #0]
        hibus->buffer = buffer;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	605a      	str	r2, [r3, #4]
        hibus->bufferSize = IBUS_BUFFER_LENGTH;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	2220      	movs	r2, #32
 80038a0:	721a      	strb	r2, [r3, #8]
        hibus->data = data;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	60da      	str	r2, [r3, #12]
        hibus->channels = IBUS_CHANNELS;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	220e      	movs	r2, #14
 80038ac:	741a      	strb	r2, [r3, #16]
 80038ae:	e00c      	b.n	80038ca <FSA8S_Init+0x76>
    } else {
        /* Dynamic memory allocation was not successful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f00c f893 	bl	800f9e0 <vPortFree>
        vPortFree(hibus->data);
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	4618      	mov	r0, r3
 80038c0:	f00c f88e 	bl	800f9e0 <vPortFree>
        vPortFree(hibus);
 80038c4:	6978      	ldr	r0, [r7, #20]
 80038c6:	f00c f88b 	bl	800f9e0 <vPortFree>
        free(hibus);
#endif
    }

    /* Initialize iBus communication */
    if (IBUS_Init(hibus)) {
 80038ca:	6978      	ldr	r0, [r7, #20]
 80038cc:	f7ff fed6 	bl	800367c <IBUS_Init>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d004      	beq.n	80038e0 <FSA8S_Init+0x8c>
        /* Initialization was successful */
        alreadyInitialized = true;
 80038d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003904 <FSA8S_Init+0xb0>)
 80038d8:	2201      	movs	r2, #1
 80038da:	701a      	strb	r2, [r3, #0]
        return hibus;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	e00d      	b.n	80038fc <FSA8S_Init+0xa8>
    } else {
        /* Initialization was unsuccessful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f00c f87b 	bl	800f9e0 <vPortFree>
        vPortFree(hibus->data);
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f00c f876 	bl	800f9e0 <vPortFree>
        vPortFree(hibus);
 80038f4:	6978      	ldr	r0, [r7, #20]
 80038f6:	f00c f873 	bl	800f9e0 <vPortFree>
#else
        /* Free up dynamic allocated memory */
        free(hibus->buffer);
        free(hibus);
#endif
        return NULL;
 80038fa:	2300      	movs	r3, #0
    }
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	20000d3c 	.word	0x20000d3c

08003908 <FSA8S_ReadChannel>:

uint16_t FSA8S_ReadChannel(IBUS_HandleTypeDef_t * hibus, FSA8S_CHANNEL_t channel) {
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	460b      	mov	r3, r1
 8003912:	70fb      	strb	r3, [r7, #3]

    /* Check parameter */
    if (NULL == hibus) {
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <FSA8S_ReadChannel+0x16>
        return IBUS_CHANNEL_VALUE_NULL;
 800391a:	2300      	movs	r3, #0
 800391c:	e029      	b.n	8003972 <FSA8S_ReadChannel+0x6a>
    }

    /* Check parameter */
    if (!(channel > 0 && channel <= IBUS_CHANNELS)) {
 800391e:	78fb      	ldrb	r3, [r7, #3]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <FSA8S_ReadChannel+0x22>
 8003924:	78fb      	ldrb	r3, [r7, #3]
 8003926:	2b0e      	cmp	r3, #14
 8003928:	d901      	bls.n	800392e <FSA8S_ReadChannel+0x26>

#ifdef FSA8S_USE_LOGGING
        LOG((uint8_t *)"FSA8S invalid channel to read.\r\n\n", LOG_ERROR);
#endif

        return IBUS_CHANNEL_VALUE_NULL;
 800392a:	2300      	movs	r3, #0
 800392c:	e021      	b.n	8003972 <FSA8S_ReadChannel+0x6a>
    }

    /* Check if first two bytes are IBUS_LENGTH and IBUS_COMMAND */
    while (1) {
        while (!FSA8S_CheckFirstBytes(hibus)) {
 800392e:	bf00      	nop
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7ff febf 	bl	80036b4 <FSA8S_CheckFirstBytes>
 8003936:	4603      	mov	r3, r0
 8003938:	f083 0301 	eor.w	r3, r3, #1
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f6      	bne.n	8003930 <FSA8S_ReadChannel+0x28>
            /* Wait until a data frame with the right format is received */
        }

        /* Perform a checksum */
        if (!FSA8S_Checksum(hibus)) {
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff fed3 	bl	80036ee <FSA8S_Checksum>
 8003948:	4603      	mov	r3, r0
 800394a:	f083 0301 	eor.w	r3, r3, #1
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <FSA8S_ReadChannel+0x50>
            /* Received data is corrupted */
            /* Wait another transaction and check first to bytes */
            continue;
 8003954:	bf00      	nop
        while (!FSA8S_CheckFirstBytes(hibus)) {
 8003956:	e7ea      	b.n	800392e <FSA8S_ReadChannel+0x26>
        } else {
            /* Received data is correct */
            /* Quit outer while loop */
            break;
 8003958:	bf00      	nop
        }
    }

    /* Get channels data in little-endian */
    FSA8S_AmendData(hibus);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7ff ff06 	bl	800376c <FSA8S_AmendData>

    /* Return channel value */
    return hibus->data[channel - IBUS_CHANNEL_NUM_OFFSET];
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68da      	ldr	r2, [r3, #12]
 8003964:	78fb      	ldrb	r3, [r7, #3]
 8003966:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800396a:	3b01      	subs	r3, #1
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	4413      	add	r3, r2
 8003970:	881b      	ldrh	r3, [r3, #0]
}
 8003972:	4618      	mov	r0, r3
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <I2C_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t I2C_Init(GY87_HandleTypeDef_t * hgy87) {
 800397a:	b580      	push	{r7, lr}
 800397c:	b086      	sub	sp, #24
 800397e:	af02      	add	r7, sp, #8
 8003980:	6078      	str	r0, [r7, #4]

    uint8_t who_am_I_value;

    /* Check parameter */
    if (NULL == hgy87) {
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <I2C_Init+0x12>
        return false;
 8003988:	2300      	movs	r3, #0
 800398a:	e010      	b.n	80039ae <I2C_Init+0x34>
    }

    /* Read IMU device ID */
    I2C_Read(hgy87->hi2c, hgy87->address, MPU_6050_REG_WHO_AM_I, &who_am_I_value, 1);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6858      	ldr	r0, [r3, #4]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	7a19      	ldrb	r1, [r3, #8]
 8003994:	f107 030f 	add.w	r3, r7, #15
 8003998:	2201      	movs	r2, #1
 800399a:	9200      	str	r2, [sp, #0]
 800399c:	2275      	movs	r2, #117	@ 0x75
 800399e:	f000 f80a 	bl	80039b6 <I2C_Read>

    /* Check IMU device ID */
    if (who_am_I_value == MPU_6050_BIT_WHO_AM_I) {
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
 80039a4:	2b68      	cmp	r3, #104	@ 0x68
 80039a6:	d101      	bne.n	80039ac <I2C_Init+0x32>
        /* Right IMU device ID */
        return true;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e000      	b.n	80039ae <I2C_Init+0x34>
    } else {
        /* Wrong IMU device ID */
        return false;
 80039ac:	2300      	movs	r3, #0
    }
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <I2C_Read>:

bool_t I2C_Read(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b088      	sub	sp, #32
 80039ba:	af04      	add	r7, sp, #16
 80039bc:	60f8      	str	r0, [r7, #12]
 80039be:	607b      	str	r3, [r7, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	72fb      	strb	r3, [r7, #11]
 80039c4:	4613      	mov	r3, r2
 80039c6:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <I2C_Read+0x1c>
        return false;
 80039ce:	2300      	movs	r3, #0
 80039d0:	e019      	b.n	8003a06 <I2C_Read+0x50>
    }
    if (NULL == data) {
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <I2C_Read+0x26>
        return false;
 80039d8:	2300      	movs	r3, #0
 80039da:	e014      	b.n	8003a06 <I2C_Read+0x50>
    }

    /* Read I2C device data by passing a data register */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_I2C_Mem_Read(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, dataSize, MPU_6050_I2C_READ_TIMEOUT)) {
 80039dc:	7afb      	ldrb	r3, [r7, #11]
 80039de:	b299      	uxth	r1, r3
 80039e0:	7abb      	ldrb	r3, [r7, #10]
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	7e3b      	ldrb	r3, [r7, #24]
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	2064      	movs	r0, #100	@ 0x64
 80039ea:	9002      	str	r0, [sp, #8]
 80039ec:	9301      	str	r3, [sp, #4]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	2301      	movs	r3, #1
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f002 f9ad 	bl	8005d54 <HAL_I2C_Mem_Read>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <I2C_Read+0x4e>
        /* END MODIFY 1 */
        /* Data couldn't be read */
        return false;
 8003a00:	2300      	movs	r3, #0
 8003a02:	e000      	b.n	8003a06 <I2C_Read+0x50>
    } else {
        /* Data read successfully */
        return true;
 8003a04:	2301      	movs	r3, #1
    }
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <I2C_Write>:

bool_t I2C_Write(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data) {
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b088      	sub	sp, #32
 8003a12:	af04      	add	r7, sp, #16
 8003a14:	60f8      	str	r0, [r7, #12]
 8003a16:	607b      	str	r3, [r7, #4]
 8003a18:	460b      	mov	r3, r1
 8003a1a:	72fb      	strb	r3, [r7, #11]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <I2C_Write+0x1c>
        return false;
 8003a26:	2300      	movs	r3, #0
 8003a28:	e018      	b.n	8003a5c <I2C_Write+0x4e>
    }
    if (NULL == data) {
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <I2C_Write+0x26>
        return false;
 8003a30:	2300      	movs	r3, #0
 8003a32:	e013      	b.n	8003a5c <I2C_Write+0x4e>
    }

    /* Write to I2C device register */
    /* BEGIN MODIFY 2 */
    if (HAL_OK != HAL_I2C_Mem_Write(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, sizeof(*data), MPU_6050_I2C_WRITE_TIMEOUT)) {
 8003a34:	7afb      	ldrb	r3, [r7, #11]
 8003a36:	b299      	uxth	r1, r3
 8003a38:	7abb      	ldrb	r3, [r7, #10]
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	2364      	movs	r3, #100	@ 0x64
 8003a3e:	9302      	str	r3, [sp, #8]
 8003a40:	2301      	movs	r3, #1
 8003a42:	9301      	str	r3, [sp, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	2301      	movs	r3, #1
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f002 f888 	bl	8005b60 <HAL_I2C_Mem_Write>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <I2C_Write+0x4c>
        /* END MODIFY 2 */
        /* Data couldn't be written */
        return false;
 8003a56:	2300      	movs	r3, #0
 8003a58:	e000      	b.n	8003a5c <I2C_Write+0x4e>
    } else {

        /* Data written successfully */
        return true;
 8003a5a:	2301      	movs	r3, #1
    }
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <GY87_InstanceInit>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static GY87_HandleTypeDef_t * GY87_InstanceInit(I2C_HandleTypeDef * hi2c) {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]

#ifdef USE_FREERTOS
    /* Allocate dynamic memory for the GY87_HandleTypeDef_t structure */
    GY87_HandleTypeDef_t * hgy87 = pvPortMalloc(sizeof(GY87_HandleTypeDef_t));
 8003a6c:	2014      	movs	r0, #20
 8003a6e:	f00b ffa5 	bl	800f9bc <pvPortMalloc>
 8003a72:	60f8      	str	r0, [r7, #12]

    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = pvPortMalloc(sizeof(1));
 8003a74:	2004      	movs	r0, #4
 8003a76:	f00b ffa1 	bl	800f9bc <pvPortMalloc>
 8003a7a:	60b8      	str	r0, [r7, #8]
    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = malloc(sizeof(1));
#endif

    /* Check if dynamic memory allocation was successful */
    if (NULL == hgy87 || NULL == buffer) {
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <GY87_InstanceInit+0x24>
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d109      	bne.n	8003a9c <GY87_InstanceInit+0x38>
        /* Dynamic memory allocation was not successful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hgy87->buffer);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f00b ffa7 	bl	800f9e0 <vPortFree>
        vPortFree(hgy87);
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f00b ffa4 	bl	800f9e0 <vPortFree>
        /* Free up dynamic allocated memory */
        hgy87->buffer = 0;
        free(hgy87->buffer);
        free(hgy87);
#endif
        return NULL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	e01b      	b.n	8003ad4 <GY87_InstanceInit+0x70>
    } else {
        /* Dynamic memory allocation was successful */

        /* Initialize GY87_HandleTypeDef_t structure */
        if (instancesNumber == 0) {
 8003a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8003adc <GY87_InstanceInit+0x78>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d106      	bne.n	8003ab2 <GY87_InstanceInit+0x4e>
            hgy87->instance = 1;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	701a      	strb	r2, [r3, #0]
            hgy87->address = MPU6050_AUX_VAL_I2C_ADDR1;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	22d0      	movs	r2, #208	@ 0xd0
 8003aae:	721a      	strb	r2, [r3, #8]
 8003ab0:	e009      	b.n	8003ac6 <GY87_InstanceInit+0x62>
        } else if (instancesNumber == 1) {
 8003ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8003adc <GY87_InstanceInit+0x78>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d105      	bne.n	8003ac6 <GY87_InstanceInit+0x62>
            hgy87->instance = 2;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2202      	movs	r2, #2
 8003abe:	701a      	strb	r2, [r3, #0]
            hgy87->address = MPU6050_AUX_VAL_I2C_ADDR2;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	22d1      	movs	r2, #209	@ 0xd1
 8003ac4:	721a      	strb	r2, [r3, #8]
        }
        hgy87->hi2c = hi2c;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	605a      	str	r2, [r3, #4]
        hgy87->buffer = buffer;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	60da      	str	r2, [r3, #12]
    }

    /* Return created instance */
    return hgy87;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	20000d3d 	.word	0x20000d3d

08003ae0 <MPU6050_WakeUpDevice>:

static void MPU6050_WakeUpDevice(GY87_HandleTypeDef_t * hgy87) {
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af02      	add	r7, sp, #8
 8003ae6:	6078      	str	r0, [r7, #4]

    /* Wake up device */
    uint8_t regData;

    regData = MPU_6050_BIT_PWR_MGMT_1_SLEEP;
 8003ae8:	2340      	movs	r3, #64	@ 0x40
 8003aea:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_CLEAR_BIT);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6858      	ldr	r0, [r3, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	7a19      	ldrb	r1, [r3, #8]
 8003af4:	f107 030f 	add.w	r3, r7, #15
 8003af8:	2200      	movs	r2, #0
 8003afa:	9200      	str	r2, [sp, #0]
 8003afc:	226b      	movs	r2, #107	@ 0x6b
 8003afe:	f000 fad3 	bl	80040a8 <MPU6050_WriteRegisterBitmasked>
}
 8003b02:	bf00      	nop
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <MPU6050_SetClockSource>:

static void MPU6050_SetClockSource(GY87_HandleTypeDef_t * hgy87) {
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b086      	sub	sp, #24
 8003b0e:	af02      	add	r7, sp, #8
 8003b10:	6078      	str	r0, [r7, #4]

    /* Set clock source */
    uint8_t regData;

    regData = MPU_6050_BIT_PWR_MGMT_1_CLKSEL_1;
 8003b12:	2301      	movs	r3, #1
 8003b14:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_SET_BIT);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6858      	ldr	r0, [r3, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	7a19      	ldrb	r1, [r3, #8]
 8003b1e:	f107 030f 	add.w	r3, r7, #15
 8003b22:	2201      	movs	r2, #1
 8003b24:	9200      	str	r2, [sp, #0]
 8003b26:	226b      	movs	r2, #107	@ 0x6b
 8003b28:	f000 fabe 	bl	80040a8 <MPU6050_WriteRegisterBitmasked>
}
 8003b2c:	bf00      	nop
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <MPU6050_SetSampleDivider>:

static void MPU6050_SetSampleDivider(GY87_HandleTypeDef_t * hgy87) {
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af02      	add	r7, sp, #8
 8003b3a:	6078      	str	r0, [r7, #4]

    /* Set sample rate divider */
    uint8_t regData;

    regData = MPU_6050_BIT_SMPLRT_DIV;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_SMPLRT_DIV, &regData, MPU6050_SET_BIT);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6858      	ldr	r0, [r3, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	7a19      	ldrb	r1, [r3, #8]
 8003b48:	f107 030f 	add.w	r3, r7, #15
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	9200      	str	r2, [sp, #0]
 8003b50:	2219      	movs	r2, #25
 8003b52:	f000 faa9 	bl	80040a8 <MPU6050_WriteRegisterBitmasked>
}
 8003b56:	bf00      	nop
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <MPU6050_EnableDLPF>:

static void MPU6050_EnableDLPF(GY87_HandleTypeDef_t * hgy87) {
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b086      	sub	sp, #24
 8003b62:	af02      	add	r7, sp, #8
 8003b64:	6078      	str	r0, [r7, #4]

    /* Enable digital low pass filter */
    uint8_t regData;

    regData = MPU_6050_BIT_CONFIG_DLPF_CFG_3;
 8003b66:	2303      	movs	r3, #3
 8003b68:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_CONFIG, &regData, MPU6050_SET_BIT);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6858      	ldr	r0, [r3, #4]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	7a19      	ldrb	r1, [r3, #8]
 8003b72:	f107 030f 	add.w	r3, r7, #15
 8003b76:	2201      	movs	r2, #1
 8003b78:	9200      	str	r2, [sp, #0]
 8003b7a:	221a      	movs	r2, #26
 8003b7c:	f000 fa94 	bl	80040a8 <MPU6050_WriteRegisterBitmasked>
}
 8003b80:	bf00      	nop
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <MPU6050_SetGyroscopeRange>:

static void MPU6050_SetGyroscopeRange(GY87_HandleTypeDef_t * hgy87) {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af02      	add	r7, sp, #8
 8003b8e:	6078      	str	r0, [r7, #4]

    /* Set gyroscope range */
    uint8_t regData;

    regData = MPU_6050_BIT_GYRO_CONFIG_FS_SEL_1; // Full range
 8003b90:	2308      	movs	r3, #8
 8003b92:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_CONFIG, &regData, MPU6050_SET_BIT);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6858      	ldr	r0, [r3, #4]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	7a19      	ldrb	r1, [r3, #8]
 8003b9c:	f107 030f 	add.w	r3, r7, #15
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	9200      	str	r2, [sp, #0]
 8003ba4:	221b      	movs	r2, #27
 8003ba6:	f000 fa7f 	bl	80040a8 <MPU6050_WriteRegisterBitmasked>
}
 8003baa:	bf00      	nop
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <MPU6050_SetAccelerometerRange>:

static void MPU6050_SetAccelerometerRange(GY87_HandleTypeDef_t * hgy87) {
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b086      	sub	sp, #24
 8003bb6:	af02      	add	r7, sp, #8
 8003bb8:	6078      	str	r0, [r7, #4]

    /* Set accelerometer range */
    uint8_t regData;

    regData = MPU_6050_BIT_ACCEL_CONFIG_FS_SEL_2; // Full range
 8003bba:	2310      	movs	r3, #16
 8003bbc:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_CONFIG, &regData, MPU6050_SET_BIT);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6858      	ldr	r0, [r3, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	7a19      	ldrb	r1, [r3, #8]
 8003bc6:	f107 030f 	add.w	r3, r7, #15
 8003bca:	2201      	movs	r2, #1
 8003bcc:	9200      	str	r2, [sp, #0]
 8003bce:	221c      	movs	r2, #28
 8003bd0:	f000 fa6a 	bl	80040a8 <MPU6050_WriteRegisterBitmasked>
}
 8003bd4:	bf00      	nop
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <MPU6050_EnableI2CMasterMode>:

static void MPU6050_EnableI2CMasterMode(GY87_HandleTypeDef_t * hgy87) {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af02      	add	r7, sp, #8
 8003be2:	6078      	str	r0, [r7, #4]

    /* Enable I2C Master mode */
    uint8_t regData;

    regData = MPU_6050_BIT_USER_CTRL_MST_EN;
 8003be4:	2320      	movs	r3, #32
 8003be6:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_USER_CTRL, &regData, MPU6050_SET_BIT);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6858      	ldr	r0, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	7a19      	ldrb	r1, [r3, #8]
 8003bf0:	f107 030f 	add.w	r3, r7, #15
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	9200      	str	r2, [sp, #0]
 8003bf8:	226a      	movs	r2, #106	@ 0x6a
 8003bfa:	f000 fa55 	bl	80040a8 <MPU6050_WriteRegisterBitmasked>
}
 8003bfe:	bf00      	nop
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <MPU6050_DisableI2CMasterMode>:

static void MPU6050_DisableI2CMasterMode(GY87_HandleTypeDef_t * hgy87) {
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b086      	sub	sp, #24
 8003c0a:	af02      	add	r7, sp, #8
 8003c0c:	6078      	str	r0, [r7, #4]

    /* Disable I2C Master mode */
    uint8_t regData;

    regData = MPU_6050_BIT_USER_CTRL_MST_EN;
 8003c0e:	2320      	movs	r3, #32
 8003c10:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_USER_CTRL, &regData, MPU6050_CLEAR_BIT);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6858      	ldr	r0, [r3, #4]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	7a19      	ldrb	r1, [r3, #8]
 8003c1a:	f107 030f 	add.w	r3, r7, #15
 8003c1e:	2200      	movs	r2, #0
 8003c20:	9200      	str	r2, [sp, #0]
 8003c22:	226a      	movs	r2, #106	@ 0x6a
 8003c24:	f000 fa40 	bl	80040a8 <MPU6050_WriteRegisterBitmasked>
}
 8003c28:	bf00      	nop
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <MPU6050_EnableBypassMode>:

static void MPU6050_EnableBypassMode(GY87_HandleTypeDef_t * hgy87) {
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af02      	add	r7, sp, #8
 8003c36:	6078      	str	r0, [r7, #4]

    /* Enable Bypass mode */
    uint8_t regData;

    regData = MPU_6050_BIT_INT_PIN_CFG_I2C_BP_EN;
 8003c38:	2302      	movs	r3, #2
 8003c3a:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_INT_PIN_CFG, &regData, MPU6050_SET_BIT);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6858      	ldr	r0, [r3, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	7a19      	ldrb	r1, [r3, #8]
 8003c44:	f107 030f 	add.w	r3, r7, #15
 8003c48:	2201      	movs	r2, #1
 8003c4a:	9200      	str	r2, [sp, #0]
 8003c4c:	2237      	movs	r2, #55	@ 0x37
 8003c4e:	f000 fa2b 	bl	80040a8 <MPU6050_WriteRegisterBitmasked>
}
 8003c52:	bf00      	nop
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <MPU6050_DisableBypassMode>:

static void MPU6050_DisableBypassMode(GY87_HandleTypeDef_t * hgy87) {
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b086      	sub	sp, #24
 8003c5e:	af02      	add	r7, sp, #8
 8003c60:	6078      	str	r0, [r7, #4]

    /* Disable Bypass mode */
    uint8_t regData;

    regData = MPU_6050_BIT_INT_PIN_CFG_I2C_BP_EN;
 8003c62:	2302      	movs	r3, #2
 8003c64:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_INT_PIN_CFG, &regData, MPU6050_SET_BIT);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6858      	ldr	r0, [r3, #4]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	7a19      	ldrb	r1, [r3, #8]
 8003c6e:	f107 030f 	add.w	r3, r7, #15
 8003c72:	2201      	movs	r2, #1
 8003c74:	9200      	str	r2, [sp, #0]
 8003c76:	2237      	movs	r2, #55	@ 0x37
 8003c78:	f000 fa16 	bl	80040a8 <MPU6050_WriteRegisterBitmasked>
}
 8003c7c:	bf00      	nop
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <MPU6050_SetMasterClock>:

static void MPU6050_SetMasterClock(GY87_HandleTypeDef_t * hgy87) {
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af02      	add	r7, sp, #8
 8003c8a:	6078      	str	r0, [r7, #4]

    /* Set Master Clock */
    uint8_t regData;

    regData = MPU_6050_BIT_I2C_MST_CTRL_CLK_13;
 8003c8c:	230d      	movs	r3, #13
 8003c8e:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_MST_CTRL, &regData, MPU6050_SET_BIT);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6858      	ldr	r0, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	7a19      	ldrb	r1, [r3, #8]
 8003c98:	f107 030f 	add.w	r3, r7, #15
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	9200      	str	r2, [sp, #0]
 8003ca0:	2224      	movs	r2, #36	@ 0x24
 8003ca2:	f000 fa01 	bl	80040a8 <MPU6050_WriteRegisterBitmasked>
}
 8003ca6:	bf00      	nop
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <MPU6050_Configure_QMC5883l>:

static void MPU6050_Configure_QMC5883l(GY87_HandleTypeDef_t * hgy87) {
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b086      	sub	sp, #24
 8003cb2:	af02      	add	r7, sp, #8
 8003cb4:	6078      	str	r0, [r7, #4]

    /* Configure slave QMC5883L magnetometer in MPU6050 */
    uint8_t regData;

    /* Set slave QMC5883L magnetometer device address */
    regData = 0x80 | QMC5883L_AUX_VAL_I2C_ADDR;
 8003cb6:	238d      	movs	r3, #141	@ 0x8d
 8003cb8:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV0_ADDR, &regData, MPU6050_SET_BIT);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6858      	ldr	r0, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	7a19      	ldrb	r1, [r3, #8]
 8003cc2:	f107 030f 	add.w	r3, r7, #15
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	9200      	str	r2, [sp, #0]
 8003cca:	2225      	movs	r2, #37	@ 0x25
 8003ccc:	f000 f9ec 	bl	80040a8 <MPU6050_WriteRegisterBitmasked>

    /* Set slave QMC5883L magnetometer registers addresses to read */
    regData = QMC5883L_REG_X_LSB;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV0_REG, &regData, MPU6050_SET_BIT);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6858      	ldr	r0, [r3, #4]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	7a19      	ldrb	r1, [r3, #8]
 8003cdc:	f107 030f 	add.w	r3, r7, #15
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	9200      	str	r2, [sp, #0]
 8003ce4:	2226      	movs	r2, #38	@ 0x26
 8003ce6:	f000 f9df 	bl	80040a8 <MPU6050_WriteRegisterBitmasked>

    /* Set slave QMC5883L magnetometer number of registers to read*/
    regData = 0x80 | 0x06;
 8003cea:	2386      	movs	r3, #134	@ 0x86
 8003cec:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV0_CTRL, &regData, MPU6050_SET_BIT);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6858      	ldr	r0, [r3, #4]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	7a19      	ldrb	r1, [r3, #8]
 8003cf6:	f107 030f 	add.w	r3, r7, #15
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	9200      	str	r2, [sp, #0]
 8003cfe:	2227      	movs	r2, #39	@ 0x27
 8003d00:	f000 f9d2 	bl	80040a8 <MPU6050_WriteRegisterBitmasked>
}
 8003d04:	bf00      	nop
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <MPU6050_Configure_BMP180>:

static void MPU6050_Configure_BMP180(GY87_HandleTypeDef_t * hgy87) {
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]

    /* Configure slave BMP180 barometer in MPU6050 */
    uint8_t regData;

    /* Set slave BMP180 barometer device address (SLAVE 1: Registers 0xF6 to 0xF8) */
    regData = 0x80 | BMP180_AUX_VAL_I2C_ADDR;
 8003d14:	23f7      	movs	r3, #247	@ 0xf7
 8003d16:	73fb      	strb	r3, [r7, #15]
    // MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV1_ADDR, &regData, MPU6050_SET_BIT);
    MPU6050_WriteRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV1_ADDR, &regData);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6858      	ldr	r0, [r3, #4]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	7a19      	ldrb	r1, [r3, #8]
 8003d20:	f107 030f 	add.w	r3, r7, #15
 8003d24:	2228      	movs	r2, #40	@ 0x28
 8003d26:	f000 f9ac 	bl	8004082 <MPU6050_WriteRegister>

    /* Set slave BMP180 barometer registers addresses to read (SLAVE 1: Registers 0xF6 to 0xF8) */
    regData = 0xF6;
 8003d2a:	23f6      	movs	r3, #246	@ 0xf6
 8003d2c:	73fb      	strb	r3, [r7, #15]
    // MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV1_REG, &regData, MPU6050_SET_BIT);
    MPU6050_WriteRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV1_REG, &regData);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6858      	ldr	r0, [r3, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	7a19      	ldrb	r1, [r3, #8]
 8003d36:	f107 030f 	add.w	r3, r7, #15
 8003d3a:	2229      	movs	r2, #41	@ 0x29
 8003d3c:	f000 f9a1 	bl	8004082 <MPU6050_WriteRegister>

    /* Set slave BMP180 barometer number of registers to read (SLAVE 1: Registers 0xF6 to 0xF8) */
    regData = 0x80 | 0x03;
 8003d40:	2383      	movs	r3, #131	@ 0x83
 8003d42:	73fb      	strb	r3, [r7, #15]
    // MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV1_CTRL, &regData, MPU6050_SET_BIT);
    MPU6050_WriteRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV1_CTRL, &regData);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6858      	ldr	r0, [r3, #4]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	7a19      	ldrb	r1, [r3, #8]
 8003d4c:	f107 030f 	add.w	r3, r7, #15
 8003d50:	222a      	movs	r2, #42	@ 0x2a
 8003d52:	f000 f996 	bl	8004082 <MPU6050_WriteRegister>
}
 8003d56:	bf00      	nop
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
	...

08003d60 <GY87_Configure>:

static bool_t GY87_Configure(GY87_HandleTypeDef_t * hgy87) {
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]

    /* Configure MPU6050 device */

    /* Wake up device */
    MPU6050_WakeUpDevice(hgy87);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7ff feb9 	bl	8003ae0 <MPU6050_WakeUpDevice>

    /* Set clock source */
    MPU6050_SetClockSource(hgy87);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7ff fecb 	bl	8003b0a <MPU6050_SetClockSource>

    /* Set sample rate divider */
    MPU6050_SetSampleDivider(hgy87);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7ff fedd 	bl	8003b34 <MPU6050_SetSampleDivider>

    /* Enable digital low pass filter */
    MPU6050_EnableDLPF(hgy87);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff feef 	bl	8003b5e <MPU6050_EnableDLPF>

    /* Set gyroscope range */
    MPU6050_SetGyroscopeRange(hgy87);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff ff01 	bl	8003b88 <MPU6050_SetGyroscopeRange>

    /* Set accelerometer range */
    MPU6050_SetAccelerometerRange(hgy87);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7ff ff13 	bl	8003bb2 <MPU6050_SetAccelerometerRange>

    /* Disable I2C Master mode */
    MPU6050_DisableI2CMasterMode(hgy87);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7ff ff3a 	bl	8003c06 <MPU6050_DisableI2CMasterMode>

    /* Enable Bypass mode */
    MPU6050_EnableBypassMode(hgy87);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7ff ff4c 	bl	8003c30 <MPU6050_EnableBypassMode>

    /* Test QMC5883L magnetometer connection */
    if (!QMC5883L_TestConnection(hgy87)) {
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f845 	bl	8003e28 <QMC5883L_TestConnection>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	f083 0301 	eor.w	r3, r3, #1
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d005      	beq.n	8003db6 <GY87_Configure+0x56>
#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"QMC5883L magnetometer not detected.\r\n\n", LOG_ERROR);
 8003daa:	2103      	movs	r1, #3
 8003dac:	481a      	ldr	r0, [pc, #104]	@ (8003e18 <GY87_Configure+0xb8>)
 8003dae:	f000 fbff 	bl	80045b0 <LOG>
#endif
        return false;
 8003db2:	2300      	movs	r3, #0
 8003db4:	e02c      	b.n	8003e10 <GY87_Configure+0xb0>
    } else {
#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"QMC5883L magnetometer detected.\r\n\n", LOG_INFORMATION);
 8003db6:	2100      	movs	r1, #0
 8003db8:	4818      	ldr	r0, [pc, #96]	@ (8003e1c <GY87_Configure+0xbc>)
 8003dba:	f000 fbf9 	bl	80045b0 <LOG>
#endif
    }

    /* Configure QMC5883L magnetometer */
    QMC5883L_Configure(hgy87);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f862 	bl	8003e88 <QMC5883L_Configure>

    /* Test BMP180 barometer connection */
    if (!BMP180_TestConnection(hgy87)) {
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 f847 	bl	8003e58 <BMP180_TestConnection>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	f083 0301 	eor.w	r3, r3, #1
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d005      	beq.n	8003de2 <GY87_Configure+0x82>
#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"BMP180 barometer not detected.\r\n\n", LOG_ERROR);
 8003dd6:	2103      	movs	r1, #3
 8003dd8:	4811      	ldr	r0, [pc, #68]	@ (8003e20 <GY87_Configure+0xc0>)
 8003dda:	f000 fbe9 	bl	80045b0 <LOG>
#endif
        return false;
 8003dde:	2300      	movs	r3, #0
 8003de0:	e016      	b.n	8003e10 <GY87_Configure+0xb0>
    } else {
#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"BMP180 barometer detected.\r\n\n", LOG_INFORMATION);
 8003de2:	2100      	movs	r1, #0
 8003de4:	480f      	ldr	r0, [pc, #60]	@ (8003e24 <GY87_Configure+0xc4>)
 8003de6:	f000 fbe3 	bl	80045b0 <LOG>
#endif
    }

    /* Configure BMP180 barometer */
    BMP180_Configure(hgy87);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f878 	bl	8003ee0 <BMP180_Configure>

    /* Disable Bypass */
    MPU6050_DisableBypassMode(hgy87);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7ff ff32 	bl	8003c5a <MPU6050_DisableBypassMode>

    /* Enable I2C Master mode */
    MPU6050_EnableI2CMasterMode(hgy87);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7ff fef0 	bl	8003bdc <MPU6050_EnableI2CMasterMode>

    /* Set Master clock */
    MPU6050_SetMasterClock(hgy87);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff ff41 	bl	8003c84 <MPU6050_SetMasterClock>

    /* Configure slave QMC5883L magnetometer in MPU6050 */
    MPU6050_Configure_QMC5883l(hgy87);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7ff ff53 	bl	8003cae <MPU6050_Configure_QMC5883l>

    /* Configure slave BMP180 barometer in MPU6050 */
    MPU6050_Configure_BMP180(hgy87);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7ff ff7f 	bl	8003d0c <MPU6050_Configure_BMP180>

    return true;
 8003e0e:	2301      	movs	r3, #1
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	08013878 	.word	0x08013878
 8003e1c:	080138a0 	.word	0x080138a0
 8003e20:	080138c4 	.word	0x080138c4
 8003e24:	080138e8 	.word	0x080138e8

08003e28 <QMC5883L_TestConnection>:

static bool_t QMC5883L_TestConnection(GY87_HandleTypeDef_t * hgy87) {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	6078      	str	r0, [r7, #4]

    /* Test QMC5883L magnetometer connection */
    uint8_t regData;

    MPU6050_ReadRegister(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CHIP_ID, &regData, sizeof(regData));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6858      	ldr	r0, [r3, #4]
 8003e34:	f107 030f 	add.w	r3, r7, #15
 8003e38:	2201      	movs	r2, #1
 8003e3a:	9200      	str	r2, [sp, #0]
 8003e3c:	220d      	movs	r2, #13
 8003e3e:	211a      	movs	r1, #26
 8003e40:	f000 f90a 	bl	8004058 <MPU6050_ReadRegister>

    if (QMC5883L_BIT_CHIP_ID != regData) {
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
 8003e46:	2bff      	cmp	r3, #255	@ 0xff
 8003e48:	d001      	beq.n	8003e4e <QMC5883L_TestConnection+0x26>
        return false;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	e000      	b.n	8003e50 <QMC5883L_TestConnection+0x28>
    } else {
        return true;
 8003e4e:	2301      	movs	r3, #1
    }
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <BMP180_TestConnection>:

static bool_t BMP180_TestConnection(GY87_HandleTypeDef_t * hgy87) {
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af02      	add	r7, sp, #8
 8003e5e:	6078      	str	r0, [r7, #4]

    /* Test BMP180 barometer connection */
    uint8_t regData;

    MPU6050_ReadRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, BMP180_REG_ID, &regData, sizeof(regData));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6858      	ldr	r0, [r3, #4]
 8003e64:	f107 030f 	add.w	r3, r7, #15
 8003e68:	2201      	movs	r2, #1
 8003e6a:	9200      	str	r2, [sp, #0]
 8003e6c:	22d0      	movs	r2, #208	@ 0xd0
 8003e6e:	21ee      	movs	r1, #238	@ 0xee
 8003e70:	f000 f8f2 	bl	8004058 <MPU6050_ReadRegister>

    if (BMP180_AUX_VAL_ID != regData) {
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
 8003e76:	2b55      	cmp	r3, #85	@ 0x55
 8003e78:	d001      	beq.n	8003e7e <BMP180_TestConnection+0x26>
        return false;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	e000      	b.n	8003e80 <BMP180_TestConnection+0x28>
    } else {
        return true;
 8003e7e:	2301      	movs	r3, #1
    }
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <QMC5883L_Configure>:

static void QMC5883L_Configure(GY87_HandleTypeDef_t * hgy87) {
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af02      	add	r7, sp, #8
 8003e8e:	6078      	str	r0, [r7, #4]

    /* Configure QMC5883L magnetometer */
    uint8_t regData;

    /* Reset QMC5883L magnetometer */
    regData = 0b00000001;
 8003e90:	2301      	movs	r3, #1
 8003e92:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_RESET, &regData, QMC5883L_SET_BIT);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6858      	ldr	r0, [r3, #4]
 8003e98:	f107 030f 	add.w	r3, r7, #15
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	9200      	str	r2, [sp, #0]
 8003ea0:	220b      	movs	r2, #11
 8003ea2:	211a      	movs	r1, #26
 8003ea4:	f000 f900 	bl	80040a8 <MPU6050_WriteRegisterBitmasked>

    /* Configure QMC5883L magnetometer: Control Register 1 */
    regData = 0b00011101;
 8003ea8:	231d      	movs	r3, #29
 8003eaa:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CONFIG1, &regData, QMC5883L_SET_BIT);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6858      	ldr	r0, [r3, #4]
 8003eb0:	f107 030f 	add.w	r3, r7, #15
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	9200      	str	r2, [sp, #0]
 8003eb8:	2209      	movs	r2, #9
 8003eba:	211a      	movs	r1, #26
 8003ebc:	f000 f8f4 	bl	80040a8 <MPU6050_WriteRegisterBitmasked>

    /* Configure QMC5883L magnetometer: Control Register 2 */
    regData = 0b00000000;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CONFIG2, &regData, QMC5883L_SET_BIT);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6858      	ldr	r0, [r3, #4]
 8003ec8:	f107 030f 	add.w	r3, r7, #15
 8003ecc:	2201      	movs	r2, #1
 8003ece:	9200      	str	r2, [sp, #0]
 8003ed0:	220a      	movs	r2, #10
 8003ed2:	211a      	movs	r1, #26
 8003ed4:	f000 f8e8 	bl	80040a8 <MPU6050_WriteRegisterBitmasked>
}
 8003ed8:	bf00      	nop
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <BMP180_Configure>:

static void BMP180_Configure(GY87_HandleTypeDef_t * hgy87) {
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af02      	add	r7, sp, #8
 8003ee6:	6078      	str	r0, [r7, #4]

    /* Configure BMP180 barometer */
    uint8_t regData;
    uint8_t temperatureRawData[2] = {0};
 8003ee8:	2300      	movs	r3, #0
 8003eea:	81bb      	strh	r3, [r7, #12]

    /* Read calibration data */
    BMP180_ReadCalibrationData(hgy87);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f82b 	bl	8003f48 <BMP180_ReadCalibrationData>

    /* Read uncompensated temperature */
    regData = 0x2E;
 8003ef2:	232e      	movs	r3, #46	@ 0x2e
 8003ef4:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, 0xF4, &regData);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6858      	ldr	r0, [r3, #4]
 8003efa:	f107 030f 	add.w	r3, r7, #15
 8003efe:	22f4      	movs	r2, #244	@ 0xf4
 8003f00:	21ee      	movs	r1, #238	@ 0xee
 8003f02:	f000 f8be 	bl	8004082 <MPU6050_WriteRegister>
    // vTaskDelay(pdMS_TO_TICKS(5));
    // HAL_Delay(5);
#else
    // HAL_Delay(5);
#endif
    MPU6050_ReadRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, 0xF6, temperatureRawData, 2 * sizeof(uint8_t));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6858      	ldr	r0, [r3, #4]
 8003f0a:	f107 030c 	add.w	r3, r7, #12
 8003f0e:	2202      	movs	r2, #2
 8003f10:	9200      	str	r2, [sp, #0]
 8003f12:	22f6      	movs	r2, #246	@ 0xf6
 8003f14:	21ee      	movs	r1, #238	@ 0xee
 8003f16:	f000 f89f 	bl	8004058 <MPU6050_ReadRegister>
    BMP180_CalibrationData.UT = (temperatureRawData[0] << 8) | temperatureRawData[1];
 8003f1a:	7b3b      	ldrb	r3, [r7, #12]
 8003f1c:	021b      	lsls	r3, r3, #8
 8003f1e:	7b7a      	ldrb	r2, [r7, #13]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	4a08      	ldr	r2, [pc, #32]	@ (8003f44 <BMP180_Configure+0x64>)
 8003f24:	61d3      	str	r3, [r2, #28]

    /* Write register to read uncompensated pressure in the future */
    regData = 0x34 | (BMP180_OVERSAMPLING << 6);
 8003f26:	23b4      	movs	r3, #180	@ 0xb4
 8003f28:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, 0xF4, &regData);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6858      	ldr	r0, [r3, #4]
 8003f2e:	f107 030f 	add.w	r3, r7, #15
 8003f32:	22f4      	movs	r2, #244	@ 0xf4
 8003f34:	21ee      	movs	r1, #238	@ 0xee
 8003f36:	f000 f8a4 	bl	8004082 <MPU6050_WriteRegister>
    //    LOG(loggingStr, LOG_DEBUGGING);
    //
    //    sprintf((char *)loggingStr, (const char *)"BMP180_Configure(): UP = %d P\r\n", uncompensatedPressure);
    //    LOG(loggingStr, LOG_DEBUGGING);
    /* DEBUGGING DELETE */
}
 8003f3a:	bf00      	nop
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	20000d40 	.word	0x20000d40

08003f48 <BMP180_ReadCalibrationData>:

static void BMP180_ReadCalibrationData(GY87_HandleTypeDef_t * hgy87) {
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08a      	sub	sp, #40	@ 0x28
 8003f4c:	af02      	add	r7, sp, #8
 8003f4e:	6078      	str	r0, [r7, #4]

    uint8_t callibrationData[22] = {0};
 8003f50:	2300      	movs	r3, #0
 8003f52:	60bb      	str	r3, [r7, #8]
 8003f54:	f107 030c 	add.w	r3, r7, #12
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	605a      	str	r2, [r3, #4]
 8003f5e:	609a      	str	r2, [r3, #8]
 8003f60:	60da      	str	r2, [r3, #12]
 8003f62:	821a      	strh	r2, [r3, #16]
    uint16_t startRegisterAddress = 0xAA;
 8003f64:	23aa      	movs	r3, #170	@ 0xaa
 8003f66:	83fb      	strh	r3, [r7, #30]

    /* Read calibration data */
    MPU6050_ReadRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, startRegisterAddress, callibrationData, sizeof(callibrationData));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6858      	ldr	r0, [r3, #4]
 8003f6c:	8bfb      	ldrh	r3, [r7, #30]
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	f107 0308 	add.w	r3, r7, #8
 8003f74:	2116      	movs	r1, #22
 8003f76:	9100      	str	r1, [sp, #0]
 8003f78:	21ee      	movs	r1, #238	@ 0xee
 8003f7a:	f000 f86d 	bl	8004058 <MPU6050_ReadRegister>

    BMP180_CalibrationData.AC1 = ((callibrationData[0] << 8) | callibrationData[1]);
 8003f7e:	7a3b      	ldrb	r3, [r7, #8]
 8003f80:	021b      	lsls	r3, r3, #8
 8003f82:	b21a      	sxth	r2, r3
 8003f84:	7a7b      	ldrb	r3, [r7, #9]
 8003f86:	b21b      	sxth	r3, r3
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	b21a      	sxth	r2, r3
 8003f8c:	4b31      	ldr	r3, [pc, #196]	@ (8004054 <BMP180_ReadCalibrationData+0x10c>)
 8003f8e:	801a      	strh	r2, [r3, #0]
    BMP180_CalibrationData.AC2 = ((callibrationData[2] << 8) | callibrationData[3]);
 8003f90:	7abb      	ldrb	r3, [r7, #10]
 8003f92:	021b      	lsls	r3, r3, #8
 8003f94:	b21a      	sxth	r2, r3
 8003f96:	7afb      	ldrb	r3, [r7, #11]
 8003f98:	b21b      	sxth	r3, r3
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	b21a      	sxth	r2, r3
 8003f9e:	4b2d      	ldr	r3, [pc, #180]	@ (8004054 <BMP180_ReadCalibrationData+0x10c>)
 8003fa0:	805a      	strh	r2, [r3, #2]
    BMP180_CalibrationData.AC3 = ((callibrationData[4] << 8) | callibrationData[5]);
 8003fa2:	7b3b      	ldrb	r3, [r7, #12]
 8003fa4:	021b      	lsls	r3, r3, #8
 8003fa6:	b21a      	sxth	r2, r3
 8003fa8:	7b7b      	ldrb	r3, [r7, #13]
 8003faa:	b21b      	sxth	r3, r3
 8003fac:	4313      	orrs	r3, r2
 8003fae:	b21a      	sxth	r2, r3
 8003fb0:	4b28      	ldr	r3, [pc, #160]	@ (8004054 <BMP180_ReadCalibrationData+0x10c>)
 8003fb2:	809a      	strh	r2, [r3, #4]
    BMP180_CalibrationData.AC4 = ((callibrationData[6] << 8) | callibrationData[7]);
 8003fb4:	7bbb      	ldrb	r3, [r7, #14]
 8003fb6:	021b      	lsls	r3, r3, #8
 8003fb8:	b21a      	sxth	r2, r3
 8003fba:	7bfb      	ldrb	r3, [r7, #15]
 8003fbc:	b21b      	sxth	r3, r3
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	b21b      	sxth	r3, r3
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	4b23      	ldr	r3, [pc, #140]	@ (8004054 <BMP180_ReadCalibrationData+0x10c>)
 8003fc6:	80da      	strh	r2, [r3, #6]
    BMP180_CalibrationData.AC5 = ((callibrationData[8] << 8) | callibrationData[9]);
 8003fc8:	7c3b      	ldrb	r3, [r7, #16]
 8003fca:	021b      	lsls	r3, r3, #8
 8003fcc:	b21a      	sxth	r2, r3
 8003fce:	7c7b      	ldrb	r3, [r7, #17]
 8003fd0:	b21b      	sxth	r3, r3
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	b21b      	sxth	r3, r3
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	4b1e      	ldr	r3, [pc, #120]	@ (8004054 <BMP180_ReadCalibrationData+0x10c>)
 8003fda:	811a      	strh	r2, [r3, #8]
    BMP180_CalibrationData.AC6 = ((callibrationData[10] << 8) | callibrationData[11]);
 8003fdc:	7cbb      	ldrb	r3, [r7, #18]
 8003fde:	021b      	lsls	r3, r3, #8
 8003fe0:	b21a      	sxth	r2, r3
 8003fe2:	7cfb      	ldrb	r3, [r7, #19]
 8003fe4:	b21b      	sxth	r3, r3
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	b21b      	sxth	r3, r3
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	4b19      	ldr	r3, [pc, #100]	@ (8004054 <BMP180_ReadCalibrationData+0x10c>)
 8003fee:	815a      	strh	r2, [r3, #10]
    BMP180_CalibrationData.B1 = ((callibrationData[12] << 8) | callibrationData[13]);
 8003ff0:	7d3b      	ldrb	r3, [r7, #20]
 8003ff2:	021b      	lsls	r3, r3, #8
 8003ff4:	b21a      	sxth	r2, r3
 8003ff6:	7d7b      	ldrb	r3, [r7, #21]
 8003ff8:	b21b      	sxth	r3, r3
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	b21a      	sxth	r2, r3
 8003ffe:	4b15      	ldr	r3, [pc, #84]	@ (8004054 <BMP180_ReadCalibrationData+0x10c>)
 8004000:	819a      	strh	r2, [r3, #12]
    BMP180_CalibrationData.B2 = ((callibrationData[14] << 8) | callibrationData[15]);
 8004002:	7dbb      	ldrb	r3, [r7, #22]
 8004004:	021b      	lsls	r3, r3, #8
 8004006:	b21a      	sxth	r2, r3
 8004008:	7dfb      	ldrb	r3, [r7, #23]
 800400a:	b21b      	sxth	r3, r3
 800400c:	4313      	orrs	r3, r2
 800400e:	b21a      	sxth	r2, r3
 8004010:	4b10      	ldr	r3, [pc, #64]	@ (8004054 <BMP180_ReadCalibrationData+0x10c>)
 8004012:	81da      	strh	r2, [r3, #14]
    BMP180_CalibrationData.MB = ((callibrationData[16] << 8) | callibrationData[17]);
 8004014:	7e3b      	ldrb	r3, [r7, #24]
 8004016:	021b      	lsls	r3, r3, #8
 8004018:	b21a      	sxth	r2, r3
 800401a:	7e7b      	ldrb	r3, [r7, #25]
 800401c:	b21b      	sxth	r3, r3
 800401e:	4313      	orrs	r3, r2
 8004020:	b21a      	sxth	r2, r3
 8004022:	4b0c      	ldr	r3, [pc, #48]	@ (8004054 <BMP180_ReadCalibrationData+0x10c>)
 8004024:	829a      	strh	r2, [r3, #20]
    BMP180_CalibrationData.MC = ((callibrationData[18] << 8) | callibrationData[19]);
 8004026:	7ebb      	ldrb	r3, [r7, #26]
 8004028:	021b      	lsls	r3, r3, #8
 800402a:	b21a      	sxth	r2, r3
 800402c:	7efb      	ldrb	r3, [r7, #27]
 800402e:	b21b      	sxth	r3, r3
 8004030:	4313      	orrs	r3, r2
 8004032:	b21a      	sxth	r2, r3
 8004034:	4b07      	ldr	r3, [pc, #28]	@ (8004054 <BMP180_ReadCalibrationData+0x10c>)
 8004036:	82da      	strh	r2, [r3, #22]
    BMP180_CalibrationData.MD = ((callibrationData[20] << 8) | callibrationData[21]);
 8004038:	7f3b      	ldrb	r3, [r7, #28]
 800403a:	021b      	lsls	r3, r3, #8
 800403c:	b21a      	sxth	r2, r3
 800403e:	7f7b      	ldrb	r3, [r7, #29]
 8004040:	b21b      	sxth	r3, r3
 8004042:	4313      	orrs	r3, r2
 8004044:	b21a      	sxth	r2, r3
 8004046:	4b03      	ldr	r3, [pc, #12]	@ (8004054 <BMP180_ReadCalibrationData+0x10c>)
 8004048:	831a      	strh	r2, [r3, #24]
}
 800404a:	bf00      	nop
 800404c:	3720      	adds	r7, #32
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20000d40 	.word	0x20000d40

08004058 <MPU6050_ReadRegister>:
    /* DEBUGGING DELETE */

    return uncompensatedPressure;
}

static void MPU6050_ReadRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af02      	add	r7, sp, #8
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	607b      	str	r3, [r7, #4]
 8004062:	460b      	mov	r3, r1
 8004064:	72fb      	strb	r3, [r7, #11]
 8004066:	4613      	mov	r3, r2
 8004068:	72bb      	strb	r3, [r7, #10]

    /* Read register */
    I2C_Read(hi2c, address, reg, data, dataSize);
 800406a:	7aba      	ldrb	r2, [r7, #10]
 800406c:	7af9      	ldrb	r1, [r7, #11]
 800406e:	7e3b      	ldrb	r3, [r7, #24]
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f7ff fc9e 	bl	80039b6 <I2C_Read>
}
 800407a:	bf00      	nop
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <MPU6050_WriteRegister>:

static void MPU6050_WriteRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data) {
 8004082:	b580      	push	{r7, lr}
 8004084:	b084      	sub	sp, #16
 8004086:	af00      	add	r7, sp, #0
 8004088:	60f8      	str	r0, [r7, #12]
 800408a:	607b      	str	r3, [r7, #4]
 800408c:	460b      	mov	r3, r1
 800408e:	72fb      	strb	r3, [r7, #11]
 8004090:	4613      	mov	r3, r2
 8004092:	72bb      	strb	r3, [r7, #10]

    /* Write register - ¡Destructive operation! */
    I2C_Write(hi2c, address, reg, data);
 8004094:	7aba      	ldrb	r2, [r7, #10]
 8004096:	7af9      	ldrb	r1, [r7, #11]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f7ff fcb7 	bl	8003a0e <I2C_Write>
}
 80040a0:	bf00      	nop
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <MPU6050_WriteRegisterBitmasked>:

static void MPU6050_WriteRegisterBitmasked(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t set) {
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b088      	sub	sp, #32
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	607b      	str	r3, [r7, #4]
 80040b2:	460b      	mov	r3, r1
 80040b4:	72fb      	strb	r3, [r7, #11]
 80040b6:	4613      	mov	r3, r2
 80040b8:	72bb      	strb	r3, [r7, #10]
    uint8_t originalData;

    /* Declare variable for new data to write into register */
    uint8_t newData;

    MPU6050_ReadRegister(hi2c, address, reg, &originalData, sizeof(originalData));
 80040ba:	f107 0317 	add.w	r3, r7, #23
 80040be:	7aba      	ldrb	r2, [r7, #10]
 80040c0:	7af9      	ldrb	r1, [r7, #11]
 80040c2:	2001      	movs	r0, #1
 80040c4:	9000      	str	r0, [sp, #0]
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f7ff ffc6 	bl	8004058 <MPU6050_ReadRegister>

    /* Apply mask to data to write */
    if (set) {
 80040cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d006      	beq.n	80040e2 <MPU6050_WriteRegisterBitmasked+0x3a>

        newData = originalData | *data;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	781a      	ldrb	r2, [r3, #0]
 80040d8:	7dfb      	ldrb	r3, [r7, #23]
 80040da:	4313      	orrs	r3, r2
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	75bb      	strb	r3, [r7, #22]
 80040e0:	e00a      	b.n	80040f8 <MPU6050_WriteRegisterBitmasked+0x50>
    } else {

        newData = originalData & (~*data);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	b25b      	sxtb	r3, r3
 80040e8:	43db      	mvns	r3, r3
 80040ea:	b25a      	sxtb	r2, r3
 80040ec:	7dfb      	ldrb	r3, [r7, #23]
 80040ee:	b25b      	sxtb	r3, r3
 80040f0:	4013      	ands	r3, r2
 80040f2:	b25b      	sxtb	r3, r3
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	75bb      	strb	r3, [r7, #22]
    }

    MPU6050_WriteRegister(hi2c, address, reg, &newData);
 80040f8:	f107 0316 	add.w	r3, r7, #22
 80040fc:	7aba      	ldrb	r2, [r7, #10]
 80040fe:	7af9      	ldrb	r1, [r7, #11]
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f7ff ffbe 	bl	8004082 <MPU6050_WriteRegister>
}
 8004106:	bf00      	nop
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
	...

08004110 <GY87_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
GY87_HandleTypeDef_t * GY87_Init(I2C_HandleTypeDef * hi2c) {
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hi2c) {
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <GY87_Init+0x12>
        return NULL;
 800411e:	2300      	movs	r3, #0
 8004120:	e034      	b.n	800418c <GY87_Init+0x7c>
    }

    /* Check if driver was already once or twice initialized */
    if (GY87_MAX_NUMBER_INSTANCES == instancesNumber) {
 8004122:	4b1c      	ldr	r3, [pc, #112]	@ (8004194 <GY87_Init+0x84>)
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	2b02      	cmp	r3, #2
 8004128:	d101      	bne.n	800412e <GY87_Init+0x1e>
        return NULL;
 800412a:	2300      	movs	r3, #0
 800412c:	e02e      	b.n	800418c <GY87_Init+0x7c>
    }

    /* Create an instance of the MPU6050_IMU device */
    GY87_HandleTypeDef_t * hgy87 = GY87_InstanceInit(hi2c);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7ff fc98 	bl	8003a64 <GY87_InstanceInit>
 8004134:	60f8      	str	r0, [r7, #12]

    /* Check if instance was successfully created */
    if (NULL != hgy87) {
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d022      	beq.n	8004182 <GY87_Init+0x72>
        /* Instance was successfully created */

        /* Initialize I2C communication */
        if (I2C_Init(hgy87)) {
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f7ff fc1c 	bl	800397a <I2C_Init>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00e      	beq.n	8004166 <GY87_Init+0x56>

            /* Initialization was successful */
#ifdef GY87_USE_LOGGING
            LOG((uint8_t *)"MPU6050 IMU detected.\r\n\n", LOG_INFORMATION);
 8004148:	2100      	movs	r1, #0
 800414a:	4813      	ldr	r0, [pc, #76]	@ (8004198 <GY87_Init+0x88>)
 800414c:	f000 fa30 	bl	80045b0 <LOG>
#endif

            /* Configure device */
            GY87_Configure(hgy87);
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f7ff fe05 	bl	8003d60 <GY87_Configure>

            instancesNumber++;
 8004156:	4b0f      	ldr	r3, [pc, #60]	@ (8004194 <GY87_Init+0x84>)
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	3301      	adds	r3, #1
 800415c:	b2da      	uxtb	r2, r3
 800415e:	4b0d      	ldr	r3, [pc, #52]	@ (8004194 <GY87_Init+0x84>)
 8004160:	701a      	strb	r2, [r3, #0]

            return hgy87;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	e012      	b.n	800418c <GY87_Init+0x7c>
        } else {

            /* Initialization was unsuccessful */
#ifdef USE_FREERTOS
            /* Free up dynamic allocated memory */
            vPortFree(hgy87->buffer);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	4618      	mov	r0, r3
 800416c:	f00b fc38 	bl	800f9e0 <vPortFree>
            vPortFree(hgy87);
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f00b fc35 	bl	800f9e0 <vPortFree>
            free(hgy87->buffer);
            free(hgy87);
#endif

#ifdef GY87_USE_LOGGING
            LOG((uint8_t *)"GY87 IMU not detected.\r\n\n", LOG_ERROR);
 8004176:	2103      	movs	r1, #3
 8004178:	4808      	ldr	r0, [pc, #32]	@ (800419c <GY87_Init+0x8c>)
 800417a:	f000 fa19 	bl	80045b0 <LOG>
#endif
            return NULL;
 800417e:	2300      	movs	r3, #0
 8004180:	e004      	b.n	800418c <GY87_Init+0x7c>
        }
    } else {

        /* Instance couldn't be created */
#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"GY87 IMU couldn't be initialized.\r\n\n", LOG_ERROR);
 8004182:	2103      	movs	r1, #3
 8004184:	4806      	ldr	r0, [pc, #24]	@ (80041a0 <GY87_Init+0x90>)
 8004186:	f000 fa13 	bl	80045b0 <LOG>
#endif
        return NULL;
 800418a:	2300      	movs	r3, #0
    }
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	20000d3d 	.word	0x20000d3d
 8004198:	0801390c 	.word	0x0801390c
 800419c:	08013928 	.word	0x08013928
 80041a0:	08013944 	.word	0x08013944

080041a4 <GY87_ReadGyroscope>:

        return false;
    }
}

void GY87_ReadGyroscope(GY87_HandleTypeDef_t * hgy87, GY87_gyroscopeValues_t * gyroscopeValues) {
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af02      	add	r7, sp, #8
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t gyroscopeRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_GYRO_SF_0500;
 80041ae:	2341      	movs	r3, #65	@ 0x41
 80041b0:	81fb      	strh	r3, [r7, #14]

    /* Check parameters */
    if (NULL != hgy87 && NULL != gyroscopeValues) {
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 808a 	beq.w	80042ce <GY87_ReadGyroscope+0x12a>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 8086 	beq.w	80042ce <GY87_ReadGyroscope+0x12a>

        /* Read gyroscope raw value for X axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_XOUT_H, gyroscopeRawData, sizeof(uint16_t));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6858      	ldr	r0, [r3, #4]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	7a19      	ldrb	r1, [r3, #8]
 80041ca:	f107 030c 	add.w	r3, r7, #12
 80041ce:	2202      	movs	r2, #2
 80041d0:	9200      	str	r2, [sp, #0]
 80041d2:	2243      	movs	r2, #67	@ 0x43
 80041d4:	f7ff ff40 	bl	8004058 <MPU6050_ReadRegister>
        gyroscopeValues->rawValueX = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]);
 80041d8:	7b3b      	ldrb	r3, [r7, #12]
 80041da:	021b      	lsls	r3, r3, #8
 80041dc:	b21a      	sxth	r2, r3
 80041de:	7b7b      	ldrb	r3, [r7, #13]
 80041e0:	b21b      	sxth	r3, r3
 80041e2:	4313      	orrs	r3, r2
 80041e4:	b21a      	sxth	r2, r3
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	801a      	strh	r2, [r3, #0]
        /* Calculate gyroscope rotation rate along X axis (roll) */
        gyroscopeValues->rotationRateRoll = -((float)gyroscopeValues->rawValueX / scaleFactor) - gyroscopeCalibrationRoll;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041f0:	ee07 3a90 	vmov	s15, r3
 80041f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80041f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80041fc:	ee07 3a90 	vmov	s15, r3
 8004200:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004204:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004208:	eeb1 7a67 	vneg.f32	s14, s15
 800420c:	4b3d      	ldr	r3, [pc, #244]	@ (8004304 <GY87_ReadGyroscope+0x160>)
 800420e:	edd3 7a00 	vldr	s15, [r3]
 8004212:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	edc3 7a02 	vstr	s15, [r3, #8]

        /* Read gyroscope raw value for Y axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_YOUT_H, gyroscopeRawData, sizeof(uint16_t));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6858      	ldr	r0, [r3, #4]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	7a19      	ldrb	r1, [r3, #8]
 8004224:	f107 030c 	add.w	r3, r7, #12
 8004228:	2202      	movs	r2, #2
 800422a:	9200      	str	r2, [sp, #0]
 800422c:	2245      	movs	r2, #69	@ 0x45
 800422e:	f7ff ff13 	bl	8004058 <MPU6050_ReadRegister>
        gyroscopeValues->rawValueY = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]);
 8004232:	7b3b      	ldrb	r3, [r7, #12]
 8004234:	021b      	lsls	r3, r3, #8
 8004236:	b21a      	sxth	r2, r3
 8004238:	7b7b      	ldrb	r3, [r7, #13]
 800423a:	b21b      	sxth	r3, r3
 800423c:	4313      	orrs	r3, r2
 800423e:	b21a      	sxth	r2, r3
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	805a      	strh	r2, [r3, #2]
        /* Calculate gyroscope rotation rate along Y axis (pitch) */
        gyroscopeValues->rotationRatePitch = -((float)gyroscopeValues->rawValueY / scaleFactor) - gyroscopeCalibrationPitch;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800424a:	ee07 3a90 	vmov	s15, r3
 800424e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004252:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004256:	ee07 3a90 	vmov	s15, r3
 800425a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800425e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004262:	eeb1 7a67 	vneg.f32	s14, s15
 8004266:	4b28      	ldr	r3, [pc, #160]	@ (8004308 <GY87_ReadGyroscope+0x164>)
 8004268:	edd3 7a00 	vldr	s15, [r3]
 800426c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	edc3 7a03 	vstr	s15, [r3, #12]

        /* Read gyroscope raw value for Z axis  */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_ZOUT_H, gyroscopeRawData, sizeof(uint16_t));
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6858      	ldr	r0, [r3, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	7a19      	ldrb	r1, [r3, #8]
 800427e:	f107 030c 	add.w	r3, r7, #12
 8004282:	2202      	movs	r2, #2
 8004284:	9200      	str	r2, [sp, #0]
 8004286:	2247      	movs	r2, #71	@ 0x47
 8004288:	f7ff fee6 	bl	8004058 <MPU6050_ReadRegister>
        gyroscopeValues->rawValueZ = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]);
 800428c:	7b3b      	ldrb	r3, [r7, #12]
 800428e:	021b      	lsls	r3, r3, #8
 8004290:	b21a      	sxth	r2, r3
 8004292:	7b7b      	ldrb	r3, [r7, #13]
 8004294:	b21b      	sxth	r3, r3
 8004296:	4313      	orrs	r3, r2
 8004298:	b21a      	sxth	r2, r3
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	809a      	strh	r2, [r3, #4]
        /* Calculate gyroscope rotation rate along Z axis (yaw)  */
        gyroscopeValues->rotationRateYaw = ((float)gyroscopeValues->rawValueZ / scaleFactor) - gyroscopeCalibrationYaw;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80042a4:	ee07 3a90 	vmov	s15, r3
 80042a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80042ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80042b0:	ee07 3a90 	vmov	s15, r3
 80042b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042bc:	4b13      	ldr	r3, [pc, #76]	@ (800430c <GY87_ReadGyroscope+0x168>)
 80042be:	edd3 7a00 	vldr	s15, [r3]
 80042c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	edc3 7a04 	vstr	s15, [r3, #16]
 80042cc:	e015      	b.n	80042fa <GY87_ReadGyroscope+0x156>

    } else {

        /* Wrong parameters */
        gyroscopeValues->rawValueX = 0;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2200      	movs	r2, #0
 80042d2:	801a      	strh	r2, [r3, #0]
        gyroscopeValues->rawValueY = 0;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	2200      	movs	r2, #0
 80042d8:	805a      	strh	r2, [r3, #2]
        gyroscopeValues->rawValueZ = 0;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2200      	movs	r2, #0
 80042de:	809a      	strh	r2, [r3, #4]
        gyroscopeValues->rotationRateRoll = 0;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	609a      	str	r2, [r3, #8]
        gyroscopeValues->rotationRatePitch = 0;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	f04f 0200 	mov.w	r2, #0
 80042ee:	60da      	str	r2, [r3, #12]
        gyroscopeValues->rotationRateYaw = 0;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	f04f 0200 	mov.w	r2, #0
 80042f6:	611a      	str	r2, [r3, #16]
    }
}
 80042f8:	bf00      	nop
 80042fa:	bf00      	nop
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	20000038 	.word	0x20000038
 8004308:	2000003c 	.word	0x2000003c
 800430c:	20000040 	.word	0x20000040

08004310 <GY87_ReadAccelerometer>:

        return false;
    }
}

void GY87_ReadAccelerometer(GY87_HandleTypeDef_t * hgy87, GY87_accelerometerValues_t * accelerometerValues) {
 8004310:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004314:	b08a      	sub	sp, #40	@ 0x28
 8004316:	af02      	add	r7, sp, #8
 8004318:	6078      	str	r0, [r7, #4]
 800431a:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t accelerometerRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_ACCEL_FS_08;
 800431c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004320:	83fb      	strh	r3, [r7, #30]

    float accX, accY, accZ;

    /* Check parameters */
    if (NULL != hgy87 && NULL != accelerometerValues) {
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 810a 	beq.w	800453e <GY87_ReadAccelerometer+0x22e>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 8106 	beq.w	800453e <GY87_ReadAccelerometer+0x22e>

        /* Read accelerometer raw value for X axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_XOUT_H, accelerometerRawData, sizeof(uint16_t));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6858      	ldr	r0, [r3, #4]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	7a19      	ldrb	r1, [r3, #8]
 800433a:	f107 030c 	add.w	r3, r7, #12
 800433e:	2202      	movs	r2, #2
 8004340:	9200      	str	r2, [sp, #0]
 8004342:	223b      	movs	r2, #59	@ 0x3b
 8004344:	f7ff fe88 	bl	8004058 <MPU6050_ReadRegister>
        accelerometerValues->rawValueX = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]);
 8004348:	7b3b      	ldrb	r3, [r7, #12]
 800434a:	021b      	lsls	r3, r3, #8
 800434c:	b21a      	sxth	r2, r3
 800434e:	7b7b      	ldrb	r3, [r7, #13]
 8004350:	b21b      	sxth	r3, r3
 8004352:	4313      	orrs	r3, r2
 8004354:	b21a      	sxth	r2, r3
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	801a      	strh	r2, [r3, #0]
        /* Calculate accelerometer linear acceleration along X axis */
        accX = accelerometerValues->linearAccelerationX = -((float)accelerometerValues->rawValueX / scaleFactor) - accelerometerCalibrationX;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004360:	ee07 3a90 	vmov	s15, r3
 8004364:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004368:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800436c:	ee07 3a90 	vmov	s15, r3
 8004370:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004378:	eeb1 7a67 	vneg.f32	s14, s15
 800437c:	4b80      	ldr	r3, [pc, #512]	@ (8004580 <GY87_ReadAccelerometer+0x270>)
 800437e:	edd3 7a00 	vldr	s15, [r3]
 8004382:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	edc3 7a02 	vstr	s15, [r3, #8]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	61bb      	str	r3, [r7, #24]

        /* Read accelerometer raw value for Y axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_YOUT_H, accelerometerRawData, sizeof(uint16_t));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6858      	ldr	r0, [r3, #4]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	7a19      	ldrb	r1, [r3, #8]
 800439a:	f107 030c 	add.w	r3, r7, #12
 800439e:	2202      	movs	r2, #2
 80043a0:	9200      	str	r2, [sp, #0]
 80043a2:	223d      	movs	r2, #61	@ 0x3d
 80043a4:	f7ff fe58 	bl	8004058 <MPU6050_ReadRegister>
        accelerometerValues->rawValueY = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]);
 80043a8:	7b3b      	ldrb	r3, [r7, #12]
 80043aa:	021b      	lsls	r3, r3, #8
 80043ac:	b21a      	sxth	r2, r3
 80043ae:	7b7b      	ldrb	r3, [r7, #13]
 80043b0:	b21b      	sxth	r3, r3
 80043b2:	4313      	orrs	r3, r2
 80043b4:	b21a      	sxth	r2, r3
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	805a      	strh	r2, [r3, #2]
        /* Calculate accelerometer linear acceleration along Y axis */
        accY = accelerometerValues->linearAccelerationY = -((float)accelerometerValues->rawValueY / scaleFactor) - accelerometerCalibrationY;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80043c0:	ee07 3a90 	vmov	s15, r3
 80043c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80043c8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80043cc:	ee07 3a90 	vmov	s15, r3
 80043d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043d8:	eeb1 7a67 	vneg.f32	s14, s15
 80043dc:	4b69      	ldr	r3, [pc, #420]	@ (8004584 <GY87_ReadAccelerometer+0x274>)
 80043de:	edd3 7a00 	vldr	s15, [r3]
 80043e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	edc3 7a03 	vstr	s15, [r3, #12]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	617b      	str	r3, [r7, #20]

        /* Read accelerometer raw value for Z axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_ZOUT_H, accelerometerRawData, sizeof(uint16_t));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6858      	ldr	r0, [r3, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	7a19      	ldrb	r1, [r3, #8]
 80043fa:	f107 030c 	add.w	r3, r7, #12
 80043fe:	2202      	movs	r2, #2
 8004400:	9200      	str	r2, [sp, #0]
 8004402:	223f      	movs	r2, #63	@ 0x3f
 8004404:	f7ff fe28 	bl	8004058 <MPU6050_ReadRegister>
        accelerometerValues->rawValueZ = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]);
 8004408:	7b3b      	ldrb	r3, [r7, #12]
 800440a:	021b      	lsls	r3, r3, #8
 800440c:	b21a      	sxth	r2, r3
 800440e:	7b7b      	ldrb	r3, [r7, #13]
 8004410:	b21b      	sxth	r3, r3
 8004412:	4313      	orrs	r3, r2
 8004414:	b21a      	sxth	r2, r3
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	809a      	strh	r2, [r3, #4]
        /* Calculate accelerometer linear acceleration along Z axis */
        accZ = accelerometerValues->linearAccelerationZ = ((float)accelerometerValues->rawValueZ / scaleFactor) - accelerometerCalibrationZ;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004420:	ee07 3a90 	vmov	s15, r3
 8004424:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004428:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800442c:	ee07 3a90 	vmov	s15, r3
 8004430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004434:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004438:	4b53      	ldr	r3, [pc, #332]	@ (8004588 <GY87_ReadAccelerometer+0x278>)
 800443a:	edd3 7a00 	vldr	s15, [r3]
 800443e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	edc3 7a04 	vstr	s15, [r3, #16]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	613b      	str	r3, [r7, #16]

        /* Calculate roll and pitch angles using an approximation with linear accelerations */
        accelerometerValues->angleRoll = atan(accY / sqrt(accX * accX + accZ * accZ)) * RADIANS_TO_DEGREES_CONST;
 800444e:	6978      	ldr	r0, [r7, #20]
 8004450:	f7fc f882 	bl	8000558 <__aeabi_f2d>
 8004454:	4680      	mov	r8, r0
 8004456:	4689      	mov	r9, r1
 8004458:	edd7 7a06 	vldr	s15, [r7, #24]
 800445c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004460:	edd7 7a04 	vldr	s15, [r7, #16]
 8004464:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004468:	ee77 7a27 	vadd.f32	s15, s14, s15
 800446c:	ee17 0a90 	vmov	r0, s15
 8004470:	f7fc f872 	bl	8000558 <__aeabi_f2d>
 8004474:	4602      	mov	r2, r0
 8004476:	460b      	mov	r3, r1
 8004478:	ec43 2b10 	vmov	d0, r2, r3
 800447c:	f00e fe30 	bl	80130e0 <sqrt>
 8004480:	ec53 2b10 	vmov	r2, r3, d0
 8004484:	4640      	mov	r0, r8
 8004486:	4649      	mov	r1, r9
 8004488:	f7fc f9e8 	bl	800085c <__aeabi_ddiv>
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	ec43 2b17 	vmov	d7, r2, r3
 8004494:	eeb0 0a47 	vmov.f32	s0, s14
 8004498:	eef0 0a67 	vmov.f32	s1, s15
 800449c:	f00e fe4c 	bl	8013138 <atan>
 80044a0:	ec51 0b10 	vmov	r0, r1, d0
 80044a4:	a334      	add	r3, pc, #208	@ (adr r3, 8004578 <GY87_ReadAccelerometer+0x268>)
 80044a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044aa:	f7fc f8ad 	bl	8000608 <__aeabi_dmul>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	4610      	mov	r0, r2
 80044b4:	4619      	mov	r1, r3
 80044b6:	f7fc fb9f 	bl	8000bf8 <__aeabi_d2f>
 80044ba:	4602      	mov	r2, r0
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	615a      	str	r2, [r3, #20]
        accelerometerValues->anglePitch = -atan(accX / sqrt(accY * accY + accZ * accZ)) * RADIANS_TO_DEGREES_CONST;
 80044c0:	69b8      	ldr	r0, [r7, #24]
 80044c2:	f7fc f849 	bl	8000558 <__aeabi_f2d>
 80044c6:	4680      	mov	r8, r0
 80044c8:	4689      	mov	r9, r1
 80044ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80044ce:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80044d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80044d6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80044da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044de:	ee17 0a90 	vmov	r0, s15
 80044e2:	f7fc f839 	bl	8000558 <__aeabi_f2d>
 80044e6:	4602      	mov	r2, r0
 80044e8:	460b      	mov	r3, r1
 80044ea:	ec43 2b10 	vmov	d0, r2, r3
 80044ee:	f00e fdf7 	bl	80130e0 <sqrt>
 80044f2:	ec53 2b10 	vmov	r2, r3, d0
 80044f6:	4640      	mov	r0, r8
 80044f8:	4649      	mov	r1, r9
 80044fa:	f7fc f9af 	bl	800085c <__aeabi_ddiv>
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	ec43 2b17 	vmov	d7, r2, r3
 8004506:	eeb0 0a47 	vmov.f32	s0, s14
 800450a:	eef0 0a67 	vmov.f32	s1, s15
 800450e:	f00e fe13 	bl	8013138 <atan>
 8004512:	ec53 2b10 	vmov	r2, r3, d0
 8004516:	4614      	mov	r4, r2
 8004518:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800451c:	a316      	add	r3, pc, #88	@ (adr r3, 8004578 <GY87_ReadAccelerometer+0x268>)
 800451e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004522:	4620      	mov	r0, r4
 8004524:	4629      	mov	r1, r5
 8004526:	f7fc f86f 	bl	8000608 <__aeabi_dmul>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4610      	mov	r0, r2
 8004530:	4619      	mov	r1, r3
 8004532:	f7fc fb61 	bl	8000bf8 <__aeabi_d2f>
 8004536:	4602      	mov	r2, r0
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	619a      	str	r2, [r3, #24]
 800453c:	e015      	b.n	800456a <GY87_ReadAccelerometer+0x25a>

    } else {
        /* Wrong parameters */
        accelerometerValues->rawValueX = 0;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2200      	movs	r2, #0
 8004542:	801a      	strh	r2, [r3, #0]
        accelerometerValues->rawValueY = 0;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	2200      	movs	r2, #0
 8004548:	805a      	strh	r2, [r3, #2]
        accelerometerValues->rawValueZ = 0;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2200      	movs	r2, #0
 800454e:	809a      	strh	r2, [r3, #4]
        accelerometerValues->linearAccelerationX = 0;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	f04f 0200 	mov.w	r2, #0
 8004556:	609a      	str	r2, [r3, #8]
        accelerometerValues->linearAccelerationY = 0;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	f04f 0200 	mov.w	r2, #0
 800455e:	60da      	str	r2, [r3, #12]
        accelerometerValues->linearAccelerationZ = 0;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	f04f 0200 	mov.w	r2, #0
 8004566:	611a      	str	r2, [r3, #16]
    }
}
 8004568:	bf00      	nop
 800456a:	bf00      	nop
 800456c:	3720      	adds	r7, #32
 800456e:	46bd      	mov	sp, r7
 8004570:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004574:	f3af 8000 	nop.w
 8004578:	1a63c1f8 	.word	0x1a63c1f8
 800457c:	404ca5dc 	.word	0x404ca5dc
 8004580:	20000044 	.word	0x20000044
 8004584:	20000048 	.word	0x20000048
 8004588:	2000004c 	.word	0x2000004c

0800458c <USB_Write>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
void USB_Write(uint8_t * string) {
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]

    /* BEGIN MODIFY 1 */
    CDC_Transmit_FS(string, strlen((const char *)string));
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7fb fe73 	bl	8000280 <strlen>
 800459a:	4603      	mov	r3, r0
 800459c:	b29b      	uxth	r3, r3
 800459e:	4619      	mov	r1, r3
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f00b faed 	bl	800fb80 <CDC_Transmit_FS>
    /* END MODIFY 1 */
}
 80045a6:	bf00      	nop
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
	...

080045b0 <LOG>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t LOG(uint8_t * message, LOGGING_TYPE_t logType) {
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b0c2      	sub	sp, #264	@ 0x108
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80045be:	6018      	str	r0, [r3, #0]
 80045c0:	460a      	mov	r2, r1
 80045c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045c6:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 80045ca:	701a      	strb	r2, [r3, #0]

    /* Check parameters */
    if (NULL == message) {
 80045cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <LOG+0x2e>
        return false;
 80045da:	2300      	movs	r3, #0
 80045dc:	e063      	b.n	80046a6 <LOG+0xf6>
    }

    if (LOG_INFORMATION < 0 || logType > LOG_ERROR) {
 80045de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045e2:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	2b03      	cmp	r3, #3
 80045ea:	d901      	bls.n	80045f0 <LOG+0x40>
        return false;
 80045ec:	2300      	movs	r3, #0
 80045ee:	e05a      	b.n	80046a6 <LOG+0xf6>
    }

    /* Build log message */
    uint8_t logMessage[LOG_MESSAGE_MAX_LENGTH] = {0};
 80045f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045f4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80045f8:	2200      	movs	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	3304      	adds	r3, #4
 80045fe:	22fc      	movs	r2, #252	@ 0xfc
 8004600:	2100      	movs	r1, #0
 8004602:	4618      	mov	r0, r3
 8004604:	f00c fd49 	bl	801109a <memset>

    if (LOG_INFORMATION == logType) {
 8004608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800460c:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d108      	bne.n	8004628 <LOG+0x78>

        strcat((char *)logMessage, (char *)informationTypeLabel);
 8004616:	4b26      	ldr	r3, [pc, #152]	@ (80046b0 <LOG+0x100>)
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	f107 0308 	add.w	r3, r7, #8
 800461e:	4611      	mov	r1, r2
 8004620:	4618      	mov	r0, r3
 8004622:	f00c fd42 	bl	80110aa <strcat>
 8004626:	e02e      	b.n	8004686 <LOG+0xd6>
    } else if (LOG_DEBUGGING == logType) {
 8004628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800462c:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d108      	bne.n	8004648 <LOG+0x98>

        strcat((char *)logMessage, (char *)debuggingTypeLabel);
 8004636:	4b1f      	ldr	r3, [pc, #124]	@ (80046b4 <LOG+0x104>)
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	f107 0308 	add.w	r3, r7, #8
 800463e:	4611      	mov	r1, r2
 8004640:	4618      	mov	r0, r3
 8004642:	f00c fd32 	bl	80110aa <strcat>
 8004646:	e01e      	b.n	8004686 <LOG+0xd6>
    } else if (LOG_WARNING == logType) {
 8004648:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800464c:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b02      	cmp	r3, #2
 8004654:	d108      	bne.n	8004668 <LOG+0xb8>

        strcat((char *)logMessage, (char *)warningTypeLabel);
 8004656:	4b18      	ldr	r3, [pc, #96]	@ (80046b8 <LOG+0x108>)
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	f107 0308 	add.w	r3, r7, #8
 800465e:	4611      	mov	r1, r2
 8004660:	4618      	mov	r0, r3
 8004662:	f00c fd22 	bl	80110aa <strcat>
 8004666:	e00e      	b.n	8004686 <LOG+0xd6>
    } else if (LOG_ERROR == logType) {
 8004668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800466c:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b03      	cmp	r3, #3
 8004674:	d107      	bne.n	8004686 <LOG+0xd6>

        strcat((char *)logMessage, (char *)errorTypeLabel);
 8004676:	4b11      	ldr	r3, [pc, #68]	@ (80046bc <LOG+0x10c>)
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	f107 0308 	add.w	r3, r7, #8
 800467e:	4611      	mov	r1, r2
 8004680:	4618      	mov	r0, r3
 8004682:	f00c fd12 	bl	80110aa <strcat>
    }

    strcat((char *)logMessage, (char *)message);
 8004686:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800468a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800468e:	f107 0208 	add.w	r2, r7, #8
 8004692:	6819      	ldr	r1, [r3, #0]
 8004694:	4610      	mov	r0, r2
 8004696:	f00c fd08 	bl	80110aa <strcat>

    /* Send message through USB port */
    USB_Write(logMessage);
 800469a:	f107 0308 	add.w	r3, r7, #8
 800469e:	4618      	mov	r0, r3
 80046a0:	f7ff ff74 	bl	800458c <USB_Write>

    return true;
 80046a4:	2301      	movs	r3, #1
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	20000050 	.word	0x20000050
 80046b4:	20000054 	.word	0x20000054
 80046b8:	20000058 	.word	0x20000058
 80046bc:	2000005c 	.word	0x2000005c

080046c0 <HAL_Init>:
 * @note   SysTick is used as time base for the HAL_Delay() function, the application
 *         need to ensure that the SysTick time base is always set to 1 millisecond
 *         to have correct HAL operation.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void) {
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
    /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80046c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004700 <HAL_Init+0x40>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a0d      	ldr	r2, [pc, #52]	@ (8004700 <HAL_Init+0x40>)
 80046ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80046d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004700 <HAL_Init+0x40>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a0a      	ldr	r2, [pc, #40]	@ (8004700 <HAL_Init+0x40>)
 80046d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80046da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046dc:	4b08      	ldr	r3, [pc, #32]	@ (8004700 <HAL_Init+0x40>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a07      	ldr	r2, [pc, #28]	@ (8004700 <HAL_Init+0x40>)
 80046e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

    /* Set Interrupt Group Priority */
    HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046e8:	2003      	movs	r0, #3
 80046ea:	f000 fd13 	bl	8005114 <HAL_NVIC_SetPriorityGrouping>

    /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
    HAL_InitTick(TICK_INT_PRIORITY);
 80046ee:	200f      	movs	r0, #15
 80046f0:	f000 f808 	bl	8004704 <HAL_InitTick>

    /* Init the low level hardware */
    HAL_MspInit();
 80046f4:	f7fe fb3c 	bl	8002d70 <HAL_MspInit>

    /* Return function status */
    return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40023c00 	.word	0x40023c00

08004704 <HAL_InitTick>:
 *       The function is declared as __weak  to be overwritten  in case of other
 *       implementation  in user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U) {
 800470c:	4b12      	ldr	r3, [pc, #72]	@ (8004758 <HAL_InitTick+0x54>)
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	4b12      	ldr	r3, [pc, #72]	@ (800475c <HAL_InitTick+0x58>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	4619      	mov	r1, r3
 8004716:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800471a:	fbb3 f3f1 	udiv	r3, r3, r1
 800471e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fd2f 	bl	8005186 <HAL_SYSTICK_Config>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <HAL_InitTick+0x2e>
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e00e      	b.n	8004750 <HAL_InitTick+0x4c>
    }

    /* Configure the SysTick IRQ priority */
    if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b0f      	cmp	r3, #15
 8004736:	d80a      	bhi.n	800474e <HAL_InitTick+0x4a>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004738:	2200      	movs	r2, #0
 800473a:	6879      	ldr	r1, [r7, #4]
 800473c:	f04f 30ff 	mov.w	r0, #4294967295
 8004740:	f000 fcf3 	bl	800512a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004744:	4a06      	ldr	r2, [pc, #24]	@ (8004760 <HAL_InitTick+0x5c>)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6013      	str	r3, [r2, #0]
    } else {
        return HAL_ERROR;
    }

    /* Return function status */
    return HAL_OK;
 800474a:	2300      	movs	r3, #0
 800474c:	e000      	b.n	8004750 <HAL_InitTick+0x4c>
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
}
 8004750:	4618      	mov	r0, r3
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	20000024 	.word	0x20000024
 800475c:	20000064 	.word	0x20000064
 8004760:	20000060 	.word	0x20000060

08004764 <HAL_IncTick>:
 *       in SysTick ISR.
 * @note This function is declared as __weak to be overwritten in case of other
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
    uwTick += uwTickFreq;
 8004768:	4b06      	ldr	r3, [pc, #24]	@ (8004784 <HAL_IncTick+0x20>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	461a      	mov	r2, r3
 800476e:	4b06      	ldr	r3, [pc, #24]	@ (8004788 <HAL_IncTick+0x24>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4413      	add	r3, r2
 8004774:	4a04      	ldr	r2, [pc, #16]	@ (8004788 <HAL_IncTick+0x24>)
 8004776:	6013      	str	r3, [r2, #0]
}
 8004778:	bf00      	nop
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	20000064 	.word	0x20000064
 8004788:	20000d64 	.word	0x20000d64

0800478c <HAL_GetTick>:
 * @brief Provides a tick value in millisecond.
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
    return uwTick;
 8004790:	4b03      	ldr	r3, [pc, #12]	@ (80047a0 <HAL_GetTick+0x14>)
 8004792:	681b      	ldr	r3, [r3, #0]
}
 8004794:	4618      	mov	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	20000d64 	.word	0x20000d64

080047a4 <HAL_Delay>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @param Delay specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay) {
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 80047ac:	f7ff ffee 	bl	800478c <HAL_GetTick>
 80047b0:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	60fb      	str	r3, [r7, #12]

    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY) {
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047bc:	d005      	beq.n	80047ca <HAL_Delay+0x26>
        wait += (uint32_t)(uwTickFreq);
 80047be:	4b0a      	ldr	r3, [pc, #40]	@ (80047e8 <HAL_Delay+0x44>)
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	461a      	mov	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4413      	add	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]
    }

    while ((HAL_GetTick() - tickstart) < wait) {
 80047ca:	bf00      	nop
 80047cc:	f7ff ffde 	bl	800478c <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d8f7      	bhi.n	80047cc <HAL_Delay+0x28>
    }
}
 80047dc:	bf00      	nop
 80047de:	bf00      	nop
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	20000064 	.word	0x20000064

080047ec <HAL_ADC_Init>:
 *
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef * hadc) {
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047f4:	2300      	movs	r3, #0
 80047f6:	73fb      	strb	r3, [r7, #15]

    /* Check ADC handle */
    if (hadc == NULL) {
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_ADC_Init+0x16>
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e033      	b.n	800486a <HAL_ADC_Init+0x7e>

    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START) {
        assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
    }

    if (hadc->State == HAL_ADC_STATE_RESET) {
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004806:	2b00      	cmp	r3, #0
 8004808:	d109      	bne.n	800481e <HAL_ADC_Init+0x32>

        /* Init the low level hardware */
        hadc->MspInitCallback(hadc);
#else
        /* Init the low level hardware */
        HAL_ADC_MspInit(hadc);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7fe fadc 	bl	8002dc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

        /* Initialize ADC error code */
        ADC_CLEAR_ERRORCODE(hadc);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Allocate lock resource and initialize it */
        hadc->Lock = HAL_UNLOCKED;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    /* Configuration of ADC parameters if previous preliminary actions are      */
    /* correctly completed.                                                     */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL)) {
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004822:	f003 0310 	and.w	r3, r3, #16
 8004826:	2b00      	cmp	r3, #0
 8004828:	d118      	bne.n	800485c <HAL_ADC_Init+0x70>
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY, HAL_ADC_STATE_BUSY_INTERNAL);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004832:	f023 0302 	bic.w	r3, r3, #2
 8004836:	f043 0202 	orr.w	r2, r3, #2
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set ADC parameters */
        ADC_Init(hadc);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 fa86 	bl	8004d50 <ADC_Init>

        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484e:	f023 0303 	bic.w	r3, r3, #3
 8004852:	f043 0201 	orr.w	r2, r3, #1
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	641a      	str	r2, [r3, #64]	@ 0x40
 800485a:	e001      	b.n	8004860 <HAL_ADC_Init+0x74>
    } else {
        tmp_hal_status = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	73fb      	strb	r3, [r7, #15]
    }

    /* Release Lock */
    __HAL_UNLOCK(hadc);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return function status */
    return tmp_hal_status;
 8004868:	7bfb      	ldrb	r3, [r7, #15]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
	...

08004874 <HAL_ADC_Start>:
 * @brief  Enables ADC and starts conversion of the regular channels.
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef * hadc) {
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
    __IO uint32_t counter = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	60bb      	str	r3, [r7, #8]
    /* Check the parameters */
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

    /* Process locked */
    __HAL_LOCK(hadc);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004886:	2b01      	cmp	r3, #1
 8004888:	d101      	bne.n	800488e <HAL_ADC_Start+0x1a>
 800488a:	2302      	movs	r3, #2
 800488c:	e097      	b.n	80049be <HAL_ADC_Start+0x14a>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the ADC peripheral */
    /* Check if ADC peripheral is disabled in order to enable it and wait during
    Tstab time the ADC's stabilization */
    if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d018      	beq.n	80048d6 <HAL_ADC_Start+0x62>
        /* Enable the Peripheral */
        __HAL_ADC_ENABLE(hadc);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689a      	ldr	r2, [r3, #8]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	609a      	str	r2, [r3, #8]

        /* Delay for ADC stabilization time */
        /* Compute number of CPU cycles to wait for */
        counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80048b4:	4b45      	ldr	r3, [pc, #276]	@ (80049cc <HAL_ADC_Start+0x158>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a45      	ldr	r2, [pc, #276]	@ (80049d0 <HAL_ADC_Start+0x15c>)
 80048ba:	fba2 2303 	umull	r2, r3, r2, r3
 80048be:	0c9a      	lsrs	r2, r3, #18
 80048c0:	4613      	mov	r3, r2
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	4413      	add	r3, r2
 80048c6:	60bb      	str	r3, [r7, #8]
        while (counter != 0U) {
 80048c8:	e002      	b.n	80048d0 <HAL_ADC_Start+0x5c>
            counter--;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	3b01      	subs	r3, #1
 80048ce:	60bb      	str	r3, [r7, #8]
        while (counter != 0U) {
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1f9      	bne.n	80048ca <HAL_ADC_Start+0x56>
        }
    }

    /* Start conversion if ADC is effectively enabled */
    if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON)) {
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d15f      	bne.n	80049a4 <HAL_ADC_Start+0x130>
        /* Set ADC state                                                          */
        /* - Clear state bitfield related to regular group conversion results     */
        /* - Set state bitfield related to regular group operation                */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR, HAL_ADC_STATE_REG_BUSY);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80048ec:	f023 0301 	bic.w	r3, r3, #1
 80048f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* If conversions on group regular are also triggering group injected,    */
        /* update ADC state.                                                      */
        if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET) {
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004902:	2b00      	cmp	r3, #0
 8004904:	d007      	beq.n	8004916 <HAL_ADC_Start+0xa2>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800490e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	641a      	str	r2, [r3, #64]	@ 0x40
        }

        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800491e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004922:	d106      	bne.n	8004932 <HAL_ADC_Start+0xbe>
            /* Reset ADC error code fields related to conversions on group regular */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004928:	f023 0206 	bic.w	r2, r3, #6
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	645a      	str	r2, [r3, #68]	@ 0x44
 8004930:	e002      	b.n	8004938 <HAL_ADC_Start+0xc4>
        } else {
            /* Reset ADC all error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential           */
        /* interruption, to let the process to ADC IRQ Handler.                   */
        __HAL_UNLOCK(hadc);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Pointer to the common control register to which is belonging hadc    */
        /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
        /* control register)                                                    */
        tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004940:	4b24      	ldr	r3, [pc, #144]	@ (80049d4 <HAL_ADC_Start+0x160>)
 8004942:	60fb      	str	r3, [r7, #12]

        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC operations) */
        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800494c:	601a      	str	r2, [r3, #0]

        /* Check if Multimode enabled */
        if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI)) {
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f003 031f 	and.w	r3, r3, #31
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10f      	bne.n	800497a <HAL_ADC_Start+0x106>
#if defined(ADC2) && defined(ADC3)
            if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4))) {
#endif /* ADC2 || ADC3 */
                /* if no external trigger present enable software conversion of regular channels */
                if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) {
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d129      	bne.n	80049bc <HAL_ADC_Start+0x148>
                    /* Enable the selected ADC software conversion for regular group */
                    hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004976:	609a      	str	r2, [r3, #8]
 8004978:	e020      	b.n	80049bc <HAL_ADC_Start+0x148>
#if defined(ADC2) && defined(ADC3)
            }
#endif /* ADC2 || ADC3 */
        } else {
            /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
            if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)) {
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a16      	ldr	r2, [pc, #88]	@ (80049d8 <HAL_ADC_Start+0x164>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d11b      	bne.n	80049bc <HAL_ADC_Start+0x148>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d114      	bne.n	80049bc <HAL_ADC_Start+0x148>
                /* Enable the selected ADC software conversion for regular group */
                hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80049a0:	609a      	str	r2, [r3, #8]
 80049a2:	e00b      	b.n	80049bc <HAL_ADC_Start+0x148>
            }
        }
    } else {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a8:	f043 0210 	orr.w	r2, r3, #16
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b4:	f043 0201 	orr.w	r2, r3, #1
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Return function status */
    return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	20000024 	.word	0x20000024
 80049d0:	431bde83 	.word	0x431bde83
 80049d4:	40012300 	.word	0x40012300
 80049d8:	40012000 	.word	0x40012000

080049dc <HAL_ADC_PollForConversion>:
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @param  Timeout Timeout value in millisecond.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef * hadc, uint32_t Timeout) {
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
    uint32_t tickstart = 0U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	60fb      	str	r3, [r7, #12]
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and polling for end of each conversion.     */
    if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) && HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)) {
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049f8:	d113      	bne.n	8004a22 <HAL_ADC_PollForConversion+0x46>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a08:	d10b      	bne.n	8004a22 <HAL_ADC_PollForConversion+0x46>
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0e:	f043 0220 	orr.w	r2, r3, #32
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e063      	b.n	8004aea <HAL_ADC_PollForConversion+0x10e>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a22:	f7ff feb3 	bl	800478c <HAL_GetTick>
 8004a26:	60f8      	str	r0, [r7, #12]

    /* Check End of conversion flag */
    while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC))) {
 8004a28:	e021      	b.n	8004a6e <HAL_ADC_PollForConversion+0x92>
        /* Check if timeout is disabled (set to infinite wait) */
        if (Timeout != HAL_MAX_DELAY) {
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a30:	d01d      	beq.n	8004a6e <HAL_ADC_PollForConversion+0x92>
            if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout)) {
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d007      	beq.n	8004a48 <HAL_ADC_PollForConversion+0x6c>
 8004a38:	f7ff fea8 	bl	800478c <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d212      	bcs.n	8004a6e <HAL_ADC_PollForConversion+0x92>
                /* New check to avoid false timeout detection in case of preemption */
                if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC))) {
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d00b      	beq.n	8004a6e <HAL_ADC_PollForConversion+0x92>
                    /* Update ADC state machine to timeout */
                    SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5a:	f043 0204 	orr.w	r2, r3, #4
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	641a      	str	r2, [r3, #64]	@ 0x40

                    /* Process unlocked */
                    __HAL_UNLOCK(hadc);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

                    return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e03d      	b.n	8004aea <HAL_ADC_PollForConversion+0x10e>
    while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC))) {
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d1d6      	bne.n	8004a2a <HAL_ADC_PollForConversion+0x4e>
            }
        }
    }

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f06f 0212 	mvn.w	r2, #18
 8004a84:	601a      	str	r2, [r3, #0]

    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.          */
    /* Note: On STM32F4, there is no independent flag of end of sequence.       */
    /*       The test of scan sequence on going is done either with scan        */
    /*       sequence disabled or with end of conversion flag set to            */
    /*       of end of sequence.                                                */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc) && (hadc->Init.ContinuousConvMode == DISABLE) && (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS))) {
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d123      	bne.n	8004ae8 <HAL_ADC_PollForConversion+0x10c>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	7e1b      	ldrb	r3, [r3, #24]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d11f      	bne.n	8004ae8 <HAL_ADC_PollForConversion+0x10c>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aae:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d006      	beq.n	8004ac4 <HAL_ADC_PollForConversion+0xe8>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d111      	bne.n	8004ae8 <HAL_ADC_PollForConversion+0x10c>
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	641a      	str	r2, [r3, #64]	@ 0x40

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d105      	bne.n	8004ae8 <HAL_ADC_PollForConversion+0x10c>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae0:	f043 0201 	orr.w	r2, r3, #1
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	641a      	str	r2, [r3, #64]	@ 0x40
        }
    }

    /* Return ADC state */
    return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <HAL_ADC_GetValue>:
 * @brief  Gets the converted value from data register of regular channel.
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @retval Converted value
 */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef * hadc) {
 8004af2:	b480      	push	{r7}
 8004af4:	b083      	sub	sp, #12
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
    /* Return the selected ADC converted value */
    return hadc->Instance->DR;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_ADC_ConfigChannel>:
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @param  sConfig ADC configuration structure.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef * hadc, ADC_ChannelConfTypeDef * sConfig) {
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
    __IO uint32_t counter = 0U;
 8004b16:	2300      	movs	r3, #0
 8004b18:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

    /* Process locked */
    __HAL_LOCK(hadc);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <HAL_ADC_ConfigChannel+0x1c>
 8004b24:	2302      	movs	r3, #2
 8004b26:	e105      	b.n	8004d34 <HAL_ADC_ConfigChannel+0x228>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
    if (sConfig->Channel > ADC_CHANNEL_9) {
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2b09      	cmp	r3, #9
 8004b36:	d925      	bls.n	8004b84 <HAL_ADC_ConfigChannel+0x78>
        /* Clear the old sample time */
        hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68d9      	ldr	r1, [r3, #12]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	461a      	mov	r2, r3
 8004b46:	4613      	mov	r3, r2
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	4413      	add	r3, r2
 8004b4c:	3b1e      	subs	r3, #30
 8004b4e:	2207      	movs	r2, #7
 8004b50:	fa02 f303 	lsl.w	r3, r2, r3
 8004b54:	43da      	mvns	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	400a      	ands	r2, r1
 8004b5c:	60da      	str	r2, [r3, #12]

        /* Set the new sample time */
        hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68d9      	ldr	r1, [r3, #12]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	4618      	mov	r0, r3
 8004b70:	4603      	mov	r3, r0
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	4403      	add	r3, r0
 8004b76:	3b1e      	subs	r3, #30
 8004b78:	409a      	lsls	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	60da      	str	r2, [r3, #12]
 8004b82:	e022      	b.n	8004bca <HAL_ADC_ConfigChannel+0xbe>
    } else /* ADC_Channel include in ADC_Channel_[0..9] */
    {
        /* Clear the old sample time */
        hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6919      	ldr	r1, [r3, #16]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	461a      	mov	r2, r3
 8004b92:	4613      	mov	r3, r2
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	4413      	add	r3, r2
 8004b98:	2207      	movs	r2, #7
 8004b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9e:	43da      	mvns	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	400a      	ands	r2, r1
 8004ba6:	611a      	str	r2, [r3, #16]

        /* Set the new sample time */
        hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6919      	ldr	r1, [r3, #16]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	689a      	ldr	r2, [r3, #8]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	4618      	mov	r0, r3
 8004bba:	4603      	mov	r3, r0
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	4403      	add	r3, r0
 8004bc0:	409a      	lsls	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	611a      	str	r2, [r3, #16]
    }

    /* For Rank 1 to 6 */
    if (sConfig->Rank < 7U) {
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2b06      	cmp	r3, #6
 8004bd0:	d824      	bhi.n	8004c1c <HAL_ADC_ConfigChannel+0x110>
        /* Clear the old SQx bits for the selected rank */
        hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	3b05      	subs	r3, #5
 8004be4:	221f      	movs	r2, #31
 8004be6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bea:	43da      	mvns	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	400a      	ands	r2, r1
 8004bf2:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the SQx bits for the selected rank */
        hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	4618      	mov	r0, r3
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	4613      	mov	r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4413      	add	r3, r2
 8004c0c:	3b05      	subs	r3, #5
 8004c0e:	fa00 f203 	lsl.w	r2, r0, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	635a      	str	r2, [r3, #52]	@ 0x34
 8004c1a:	e04c      	b.n	8004cb6 <HAL_ADC_ConfigChannel+0x1aa>
    }
    /* For Rank 7 to 12 */
    else if (sConfig->Rank < 13U) {
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	2b0c      	cmp	r3, #12
 8004c22:	d824      	bhi.n	8004c6e <HAL_ADC_ConfigChannel+0x162>
        /* Clear the old SQx bits for the selected rank */
        hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	3b23      	subs	r3, #35	@ 0x23
 8004c36:	221f      	movs	r2, #31
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3c:	43da      	mvns	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	400a      	ands	r2, r1
 8004c44:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the SQx bits for the selected rank */
        hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	4618      	mov	r0, r3
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	3b23      	subs	r3, #35	@ 0x23
 8004c60:	fa00 f203 	lsl.w	r2, r0, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c6c:	e023      	b.n	8004cb6 <HAL_ADC_ConfigChannel+0x1aa>
    }
    /* For Rank 13 to 16 */
    else {
        /* Clear the old SQx bits for the selected rank */
        hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	3b41      	subs	r3, #65	@ 0x41
 8004c80:	221f      	movs	r2, #31
 8004c82:	fa02 f303 	lsl.w	r3, r2, r3
 8004c86:	43da      	mvns	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	400a      	ands	r2, r1
 8004c8e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the SQx bits for the selected rank */
        hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4413      	add	r3, r2
 8004ca8:	3b41      	subs	r3, #65	@ 0x41
 8004caa:	fa00 f203 	lsl.w	r2, r0, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004cb6:	4b22      	ldr	r3, [pc, #136]	@ (8004d40 <HAL_ADC_ConfigChannel+0x234>)
 8004cb8:	60fb      	str	r3, [r7, #12]

    /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
    if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT)) {
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a21      	ldr	r2, [pc, #132]	@ (8004d44 <HAL_ADC_ConfigChannel+0x238>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d109      	bne.n	8004cd8 <HAL_ADC_ConfigChannel+0x1cc>
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b12      	cmp	r3, #18
 8004cca:	d105      	bne.n	8004cd8 <HAL_ADC_ConfigChannel+0x1cc>
        /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
        if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT) {
            tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
        }
        /* Enable the VBAT channel*/
        tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	605a      	str	r2, [r3, #4]
    }

    /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
       Channel_17 is selected for VREFINT enable TSVREFE */
    if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT))) {
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a19      	ldr	r2, [pc, #100]	@ (8004d44 <HAL_ADC_ConfigChannel+0x238>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d123      	bne.n	8004d2a <HAL_ADC_ConfigChannel+0x21e>
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b10      	cmp	r3, #16
 8004ce8:	d003      	beq.n	8004cf2 <HAL_ADC_ConfigChannel+0x1e6>
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2b11      	cmp	r3, #17
 8004cf0:	d11b      	bne.n	8004d2a <HAL_ADC_ConfigChannel+0x21e>
        /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
        if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT) {
            tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
        }
        /* Enable the Temperature sensor and VREFINT channel*/
        tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	605a      	str	r2, [r3, #4]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) {
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b10      	cmp	r3, #16
 8004d04:	d111      	bne.n	8004d2a <HAL_ADC_ConfigChannel+0x21e>
            /* Delay for temperature sensor stabilization time */
            /* Compute number of CPU cycles to wait for */
            counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004d06:	4b10      	ldr	r3, [pc, #64]	@ (8004d48 <HAL_ADC_ConfigChannel+0x23c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a10      	ldr	r2, [pc, #64]	@ (8004d4c <HAL_ADC_ConfigChannel+0x240>)
 8004d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d10:	0c9a      	lsrs	r2, r3, #18
 8004d12:	4613      	mov	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	60bb      	str	r3, [r7, #8]
            while (counter != 0U) {
 8004d1c:	e002      	b.n	8004d24 <HAL_ADC_ConfigChannel+0x218>
                counter--;
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	3b01      	subs	r3, #1
 8004d22:	60bb      	str	r3, [r7, #8]
            while (counter != 0U) {
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1f9      	bne.n	8004d1e <HAL_ADC_ConfigChannel+0x212>
            }
        }
    }

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return function status */
    return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3714      	adds	r7, #20
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	40012300 	.word	0x40012300
 8004d44:	40012000 	.word	0x40012000
 8004d48:	20000024 	.word	0x20000024
 8004d4c:	431bde83 	.word	0x431bde83

08004d50 <ADC_Init>:
 *         in the ADC_InitStruct without initializing the ADC MSP.
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @retval None
 */
static void ADC_Init(ADC_HandleTypeDef * hadc) {
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]

    /* Set ADC parameters */
    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d58:	4b79      	ldr	r3, [pc, #484]	@ (8004f40 <ADC_Init+0x1f0>)
 8004d5a:	60fb      	str	r3, [r7, #12]

    /* Set the ADC clock prescaler */
    tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= hadc->Init.ClockPrescaler;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	431a      	orrs	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	605a      	str	r2, [r3, #4]

    /* Set ADC scan mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d84:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |= ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6859      	ldr	r1, [r3, #4]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	021a      	lsls	r2, r3, #8
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	605a      	str	r2, [r3, #4]

    /* Set ADC resolution */
    hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004da8:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |= hadc->Init.Resolution;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6859      	ldr	r1, [r3, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	605a      	str	r2, [r3, #4]

    /* Set ADC data alignment */
    hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004dca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6899      	ldr	r1, [r3, #8]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68da      	ldr	r2, [r3, #12]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	609a      	str	r2, [r3, #8]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START) {
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de2:	4a58      	ldr	r2, [pc, #352]	@ (8004f44 <ADC_Init+0x1f4>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d022      	beq.n	8004e2e <ADC_Init+0xde>
        /* Select external trigger to start conversion */
        hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689a      	ldr	r2, [r3, #8]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004df6:	609a      	str	r2, [r3, #8]
        hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6899      	ldr	r1, [r3, #8]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	609a      	str	r2, [r3, #8]

        /* Select external trigger polarity */
        hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004e18:	609a      	str	r2, [r3, #8]
        hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6899      	ldr	r1, [r3, #8]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	609a      	str	r2, [r3, #8]
 8004e2c:	e00f      	b.n	8004e4e <ADC_Init+0xfe>
    } else {
        /* Reset the external trigger */
        hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004e3c:	609a      	str	r2, [r3, #8]
        hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689a      	ldr	r2, [r3, #8]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004e4c:	609a      	str	r2, [r3, #8]
    }

    /* Enable or disable ADC continuous conversion mode */
    hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0202 	bic.w	r2, r2, #2
 8004e5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6899      	ldr	r1, [r3, #8]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	7e1b      	ldrb	r3, [r3, #24]
 8004e68:	005a      	lsls	r2, r3, #1
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	609a      	str	r2, [r3, #8]

    if (hadc->Init.DiscontinuousConvMode != DISABLE) {
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d01b      	beq.n	8004eb4 <ADC_Init+0x164>
        assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

        /* Enable the selected ADC regular discontinuous mode */
        hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e8a:	605a      	str	r2, [r3, #4]

        /* Set the number of channels to be converted in discontinuous mode */
        hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004e9a:	605a      	str	r2, [r3, #4]
        hadc->Instance->CR1 |= ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6859      	ldr	r1, [r3, #4]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	035a      	lsls	r2, r3, #13
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	605a      	str	r2, [r3, #4]
 8004eb2:	e007      	b.n	8004ec4 <ADC_Init+0x174>
    } else {
        /* Disable the selected ADC regular discontinuous mode */
        hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ec2:	605a      	str	r2, [r3, #4]
    }

    /* Set ADC number of conversion */
    hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004ed2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1(hadc->Init.NbrOfConversion);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	051a      	lsls	r2, r3, #20
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable or disable ADC DMA continuous request */
    hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004ef8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6899      	ldr	r1, [r3, #8]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004f06:	025a      	lsls	r2, r3, #9
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	609a      	str	r2, [r3, #8]

    /* Enable or disable ADC end of conversion selection */
    hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689a      	ldr	r2, [r3, #8]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6899      	ldr	r1, [r3, #8]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	029a      	lsls	r2, r3, #10
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	609a      	str	r2, [r3, #8]
}
 8004f34:	bf00      	nop
 8004f36:	3714      	adds	r7, #20
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	40012300 	.word	0x40012300
 8004f44:	0f000001 	.word	0x0f000001

08004f48 <__NVIC_SetPriorityGrouping>:
           Only values from 0..7 are used.
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
    uint32_t reg_value;
    uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL); /* only values 0..7 are used          */
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f003 0307 	and.w	r3, r3, #7
 8004f56:	60fb      	str	r3, [r7, #12]

    reg_value = SCB->AIRCR;                                                                                                /* read old register configuration    */
 8004f58:	4b0c      	ldr	r3, [pc, #48]	@ (8004f8c <__NVIC_SetPriorityGrouping+0x44>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	60bb      	str	r3, [r7, #8]
    reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));                                            /* clear bits to change               */
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004f64:	4013      	ands	r3, r2
 8004f66:	60bb      	str	r3, [r7, #8]
    reg_value = (reg_value | ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) | (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)); /* Insert write key and priority group */
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	021a      	lsls	r2, r3, #8
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004f74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f78:	60bb      	str	r3, [r7, #8]
    SCB->AIRCR = reg_value;
 8004f7a:	4a04      	ldr	r2, [pc, #16]	@ (8004f8c <__NVIC_SetPriorityGrouping+0x44>)
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	60d3      	str	r3, [r2, #12]
}
 8004f80:	bf00      	nop
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	e000ed00 	.word	0xe000ed00

08004f90 <__NVIC_GetPriorityGrouping>:
/**
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void) {
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
    return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f94:	4b04      	ldr	r3, [pc, #16]	@ (8004fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	0a1b      	lsrs	r3, r3, #8
 8004f9a:	f003 0307 	and.w	r3, r3, #7
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	e000ed00 	.word	0xe000ed00

08004fac <__NVIC_EnableIRQ>:
  \brief   Enable Interrupt
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn) {
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	71fb      	strb	r3, [r7, #7]
    if ((int32_t)(IRQn) >= 0) {
 8004fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	db0b      	blt.n	8004fd6 <__NVIC_EnableIRQ+0x2a>
        NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fbe:	79fb      	ldrb	r3, [r7, #7]
 8004fc0:	f003 021f 	and.w	r2, r3, #31
 8004fc4:	4907      	ldr	r1, [pc, #28]	@ (8004fe4 <__NVIC_EnableIRQ+0x38>)
 8004fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fca:	095b      	lsrs	r3, r3, #5
 8004fcc:	2001      	movs	r0, #1
 8004fce:	fa00 f202 	lsl.w	r2, r0, r2
 8004fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
}
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	e000e100 	.word	0xe000e100

08004fe8 <__NVIC_SetPriority>:
           or negative to specify a processor exception.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority) {
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	4603      	mov	r3, r0
 8004ff0:	6039      	str	r1, [r7, #0]
 8004ff2:	71fb      	strb	r3, [r7, #7]
    if ((int32_t)(IRQn) >= 0) {
 8004ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	db0a      	blt.n	8005012 <__NVIC_SetPriority+0x2a>
        NVIC->IP[((uint32_t)IRQn)] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	b2da      	uxtb	r2, r3
 8005000:	490c      	ldr	r1, [pc, #48]	@ (8005034 <__NVIC_SetPriority+0x4c>)
 8005002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005006:	0112      	lsls	r2, r2, #4
 8005008:	b2d2      	uxtb	r2, r2
 800500a:	440b      	add	r3, r1
 800500c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
    } else {
        SCB->SHP[(((uint32_t)IRQn) & 0xFUL) - 4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    }
}
 8005010:	e00a      	b.n	8005028 <__NVIC_SetPriority+0x40>
        SCB->SHP[(((uint32_t)IRQn) & 0xFUL) - 4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	b2da      	uxtb	r2, r3
 8005016:	4908      	ldr	r1, [pc, #32]	@ (8005038 <__NVIC_SetPriority+0x50>)
 8005018:	79fb      	ldrb	r3, [r7, #7]
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	3b04      	subs	r3, #4
 8005020:	0112      	lsls	r2, r2, #4
 8005022:	b2d2      	uxtb	r2, r2
 8005024:	440b      	add	r3, r1
 8005026:	761a      	strb	r2, [r3, #24]
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	e000e100 	.word	0xe000e100
 8005038:	e000ed00 	.word	0xe000ed00

0800503c <NVIC_EncodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority(uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority) {
 800503c:	b480      	push	{r7}
 800503e:	b089      	sub	sp, #36	@ 0x24
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
    uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL); /* only values 0..7 are used          */
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f003 0307 	and.w	r3, r3, #7
 800504e:	61fb      	str	r3, [r7, #28]
    uint32_t PreemptPriorityBits;
    uint32_t SubPriorityBits;

    PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	f1c3 0307 	rsb	r3, r3, #7
 8005056:	2b04      	cmp	r3, #4
 8005058:	bf28      	it	cs
 800505a:	2304      	movcs	r3, #4
 800505c:	61bb      	str	r3, [r7, #24]
    SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	3304      	adds	r3, #4
 8005062:	2b06      	cmp	r3, #6
 8005064:	d902      	bls.n	800506c <NVIC_EncodePriority+0x30>
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	3b03      	subs	r3, #3
 800506a:	e000      	b.n	800506e <NVIC_EncodePriority+0x32>
 800506c:	2300      	movs	r3, #0
 800506e:	617b      	str	r3, [r7, #20]

    return (((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) | ((SubPriority & (uint32_t)((1UL << (SubPriorityBits)) - 1UL))));
 8005070:	f04f 32ff 	mov.w	r2, #4294967295
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	fa02 f303 	lsl.w	r3, r2, r3
 800507a:	43da      	mvns	r2, r3
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	401a      	ands	r2, r3
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	409a      	lsls	r2, r3
 8005084:	f04f 31ff 	mov.w	r1, #4294967295
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	fa01 f303 	lsl.w	r3, r1, r3
 800508e:	43d9      	mvns	r1, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	400b      	ands	r3, r1
 8005094:	4313      	orrs	r3, r2
}
 8005096:	4618      	mov	r0, r3
 8005098:	3724      	adds	r7, #36	@ 0x24
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
	...

080050a4 <__NVIC_SystemReset>:

/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void) {
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
  \brief   Data Synchronization Barrier
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void) {
    __ASM volatile("dsb 0xF" ::: "memory");
 80050a8:	f3bf 8f4f 	dsb	sy
}
 80050ac:	bf00      	nop
    __DSB();                                                                                                                         /* Ensure all outstanding memory accesses included
                                                                                                                                        buffered write are completed before reset */
    SCB->AIRCR = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) | (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) | SCB_AIRCR_SYSRESETREQ_Msk); /* Keep priority group unchanged */
 80050ae:	4b06      	ldr	r3, [pc, #24]	@ (80050c8 <__NVIC_SystemReset+0x24>)
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80050b6:	4904      	ldr	r1, [pc, #16]	@ (80050c8 <__NVIC_SystemReset+0x24>)
 80050b8:	4b04      	ldr	r3, [pc, #16]	@ (80050cc <__NVIC_SystemReset+0x28>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	60cb      	str	r3, [r1, #12]
    __ASM volatile("dsb 0xF" ::: "memory");
 80050be:	f3bf 8f4f 	dsb	sy
}
 80050c2:	bf00      	nop
    __DSB();                                                                                                                         /* Ensure completion of memory access */

    for (;;) /* wait until reset */
    {
        __NOP();
 80050c4:	bf00      	nop
 80050c6:	e7fd      	b.n	80050c4 <__NVIC_SystemReset+0x20>
 80050c8:	e000ed00 	.word	0xe000ed00
 80050cc:	05fa0004 	.word	0x05fa0004

080050d0 <SysTick_Config>:
  \return          1  Function failed.
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks) {
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
    if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) {
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	3b01      	subs	r3, #1
 80050dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050e0:	d301      	bcc.n	80050e6 <SysTick_Config+0x16>
        return (1UL); /* Reload value impossible */
 80050e2:	2301      	movs	r3, #1
 80050e4:	e00f      	b.n	8005106 <SysTick_Config+0x36>
    }

    SysTick->LOAD = (uint32_t)(ticks - 1UL);                                                         /* set reload register */
 80050e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005110 <SysTick_Config+0x40>)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3b01      	subs	r3, #1
 80050ec:	6053      	str	r3, [r2, #4]
    NVIC_SetPriority(SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL);                                 /* set Priority for Systick Interrupt */
 80050ee:	210f      	movs	r1, #15
 80050f0:	f04f 30ff 	mov.w	r0, #4294967295
 80050f4:	f7ff ff78 	bl	8004fe8 <__NVIC_SetPriority>
    SysTick->VAL = 0UL;                                                                              /* Load the SysTick Counter Value */
 80050f8:	4b05      	ldr	r3, [pc, #20]	@ (8005110 <SysTick_Config+0x40>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk; /* Enable SysTick IRQ and SysTick Timer */
 80050fe:	4b04      	ldr	r3, [pc, #16]	@ (8005110 <SysTick_Config+0x40>)
 8005100:	2207      	movs	r2, #7
 8005102:	601a      	str	r2, [r3, #0]
    return (0UL);                                                                                    /* Function successful */
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	e000e010 	.word	0xe000e010

08005114 <HAL_NVIC_SetPriorityGrouping>:
 *                                    0 bits for subpriority
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
 *         The pending IRQ priority will be managed only by the subpriority.
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
    /* Check the parameters */
    assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

    /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
    NVIC_SetPriorityGrouping(PriorityGroup);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f7ff ff13 	bl	8004f48 <__NVIC_SetPriorityGrouping>
}
 8005122:	bf00      	nop
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <HAL_NVIC_SetPriority>:
 * @param  SubPriority the subpriority level for the IRQ channel.
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority) {
 800512a:	b580      	push	{r7, lr}
 800512c:	b086      	sub	sp, #24
 800512e:	af00      	add	r7, sp, #0
 8005130:	4603      	mov	r3, r0
 8005132:	60b9      	str	r1, [r7, #8]
 8005134:	607a      	str	r2, [r7, #4]
 8005136:	73fb      	strb	r3, [r7, #15]
    uint32_t prioritygroup = 0x00U;
 8005138:	2300      	movs	r3, #0
 800513a:	617b      	str	r3, [r7, #20]

    /* Check the parameters */
    assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
    assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

    prioritygroup = NVIC_GetPriorityGrouping();
 800513c:	f7ff ff28 	bl	8004f90 <__NVIC_GetPriorityGrouping>
 8005140:	6178      	str	r0, [r7, #20]

    NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	68b9      	ldr	r1, [r7, #8]
 8005146:	6978      	ldr	r0, [r7, #20]
 8005148:	f7ff ff78 	bl	800503c <NVIC_EncodePriority>
 800514c:	4602      	mov	r2, r0
 800514e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005152:	4611      	mov	r1, r2
 8005154:	4618      	mov	r0, r3
 8005156:	f7ff ff47 	bl	8004fe8 <__NVIC_SetPriority>
}
 800515a:	bf00      	nop
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <HAL_NVIC_EnableIRQ>:
 * @param  IRQn External interrupt number.
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
 * @retval None
 */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn) {
 8005162:	b580      	push	{r7, lr}
 8005164:	b082      	sub	sp, #8
 8005166:	af00      	add	r7, sp, #0
 8005168:	4603      	mov	r3, r0
 800516a:	71fb      	strb	r3, [r7, #7]
    /* Check the parameters */
    assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

    /* Enable interrupt */
    NVIC_EnableIRQ(IRQn);
 800516c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005170:	4618      	mov	r0, r3
 8005172:	f7ff ff1b 	bl	8004fac <__NVIC_EnableIRQ>
}
 8005176:	bf00      	nop
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <HAL_NVIC_SystemReset>:

/**
 * @brief  Initiates a system reset request to reset the MCU.
 * @retval None
 */
void HAL_NVIC_SystemReset(void) {
 800517e:	b580      	push	{r7, lr}
 8005180:	af00      	add	r7, sp, #0
    /* System Reset */
    NVIC_SystemReset();
 8005182:	f7ff ff8f 	bl	80050a4 <__NVIC_SystemReset>

08005186 <HAL_SYSTICK_Config>:
 *         Counter is in free running mode to generate periodic interrupts.
 * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb) {
 8005186:	b580      	push	{r7, lr}
 8005188:	b082      	sub	sp, #8
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
    return SysTick_Config(TicksNumb);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7ff ff9e 	bl	80050d0 <SysTick_Config>
 8005194:	4603      	mov	r3, r0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
	...

080051a0 <HAL_DMA_Init>:
 *         parameters in the DMA_InitTypeDef and create the associated handle.
 * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA Stream.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef * hdma) {
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
    uint32_t tmp = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	617b      	str	r3, [r7, #20]
    uint32_t tickstart = HAL_GetTick();
 80051ac:	f7ff faee 	bl	800478c <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]
    DMA_Base_Registers * regs;

    /* Check the DMA peripheral state */
    if (hdma == NULL) {
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <HAL_DMA_Init+0x1c>
        return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e099      	b.n	80052f0 <HAL_DMA_Init+0x150>
        assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
        assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0201 	bic.w	r2, r2, #1
 80051da:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while ((hdma->Instance->CR & DMA_SxCR_EN) != RESET) {
 80051dc:	e00f      	b.n	80051fe <HAL_DMA_Init+0x5e>
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT) {
 80051de:	f7ff fad5 	bl	800478c <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b05      	cmp	r3, #5
 80051ea:	d908      	bls.n	80051fe <HAL_DMA_Init+0x5e>
            /* Update error code */
            hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2220      	movs	r2, #32
 80051f0:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2203      	movs	r2, #3
 80051f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e078      	b.n	80052f0 <HAL_DMA_Init+0x150>
    while ((hdma->Instance->CR & DMA_SxCR_EN) != RESET) {
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1e8      	bne.n	80051de <HAL_DMA_Init+0x3e>
        }
    }

    /* Get the CR register value */
    tmp = hdma->Instance->CR;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    tmp &= ((uint32_t) ~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | DMA_SxCR_MINC | DMA_SxCR_PINC | DMA_SxCR_CIRC | DMA_SxCR_DIR | DMA_SxCR_CT | DMA_SxCR_DBM));
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	4b38      	ldr	r3, [pc, #224]	@ (80052f8 <HAL_DMA_Init+0x158>)
 8005218:	4013      	ands	r3, r2
 800521a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream configuration */
    tmp |= hdma->Init.Channel | hdma->Init.Direction | hdma->Init.PeriphInc | hdma->Init.MemInc | hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment | hdma->Init.Mode | hdma->Init.Priority;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	431a      	orrs	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	431a      	orrs	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	431a      	orrs	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	431a      	orrs	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	4313      	orrs	r3, r2
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	4313      	orrs	r3, r2
 800524e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE) {
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005254:	2b04      	cmp	r3, #4
 8005256:	d107      	bne.n	8005268 <HAL_DMA_Init+0xc8>
        /* Get memory burst and peripheral burst */
        tmp |= hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005260:	4313      	orrs	r3, r2
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	4313      	orrs	r3, r2
 8005266:	617b      	str	r3, [r7, #20]
    }

    /* Write to DMA Stream CR register */
    hdma->Instance->CR = tmp;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    tmp = hdma->Instance->FCR;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    tmp &= (uint32_t) ~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	f023 0307 	bic.w	r3, r3, #7
 800527e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    tmp |= hdma->Init.FIFOMode;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	4313      	orrs	r3, r2
 8005288:	617b      	str	r3, [r7, #20]

    /* The FIFO threshold is not used when the FIFO mode is disabled */
    if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE) {
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800528e:	2b04      	cmp	r3, #4
 8005290:	d117      	bne.n	80052c2 <HAL_DMA_Init+0x122>
        /* Get the FIFO threshold */
        tmp |= hdma->Init.FIFOThreshold;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	4313      	orrs	r3, r2
 800529a:	617b      	str	r3, [r7, #20]

        /* Check compatibility between FIFO threshold level and size of the memory burst */
        /* for INCR4, INCR8, INCR16 bursts */
        if (hdma->Init.MemBurst != DMA_MBURST_SINGLE) {
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00e      	beq.n	80052c2 <HAL_DMA_Init+0x122>
            if (DMA_CheckFifoParam(hdma) != HAL_OK) {
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 f8e5 	bl	8005474 <DMA_CheckFifoParam>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d008      	beq.n	80052c2 <HAL_DMA_Init+0x122>
                /* Update error code */
                hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2240      	movs	r2, #64	@ 0x40
 80052b4:	655a      	str	r2, [r3, #84]	@ 0x54

                /* Change the DMA state */
                hdma->State = HAL_DMA_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

                return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e016      	b.n	80052f0 <HAL_DMA_Init+0x150>
            }
        }
    }

    /* Write to DMA Stream FCR */
    hdma->Instance->FCR = tmp;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f89c 	bl	8005408 <DMA_CalcBaseAndBitshift>
 80052d0:	4603      	mov	r3, r0
 80052d2:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052d8:	223f      	movs	r2, #63	@ 0x3f
 80052da:	409a      	lsls	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	609a      	str	r2, [r3, #8]

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Initialize the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3718      	adds	r7, #24
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	f010803f 	.word	0xf010803f

080052fc <HAL_DMA_Start_IT>:
 * @param  SrcAddress The source memory Buffer address
 * @param  DstAddress The destination memory Buffer address
 * @param  DataLength The length of data to be transferred from source to destination
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef * hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength) {
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	603b      	str	r3, [r7, #0]
    HAL_StatusTypeDef status = HAL_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	75fb      	strb	r3, [r7, #23]

    /* calculate DMA base and stream number */
    DMA_Base_Registers * regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005312:	613b      	str	r3, [r7, #16]

    /* Check the parameters */
    assert_param(IS_DMA_BUFFER_SIZE(DataLength));

    /* Process locked */
    __HAL_LOCK(hdma);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800531a:	2b01      	cmp	r3, #1
 800531c:	d101      	bne.n	8005322 <HAL_DMA_Start_IT+0x26>
 800531e:	2302      	movs	r3, #2
 8005320:	e040      	b.n	80053a4 <HAL_DMA_Start_IT+0xa8>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    if (HAL_DMA_STATE_READY == hdma->State) {
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b01      	cmp	r3, #1
 8005334:	d12f      	bne.n	8005396 <HAL_DMA_Start_IT+0x9a>
        /* Change DMA peripheral state */
        hdma->State = HAL_DMA_STATE_BUSY;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2202      	movs	r2, #2
 800533a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Initialize the error code */
        hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Configure the source, destination address and the data length */
        DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	68b9      	ldr	r1, [r7, #8]
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f000 f82e 	bl	80053ac <DMA_SetConfig>

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005354:	223f      	movs	r2, #63	@ 0x3f
 8005356:	409a      	lsls	r2, r3
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	609a      	str	r2, [r3, #8]

        /* Enable Common interrupts*/
        hdma->Instance->CR |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f042 0216 	orr.w	r2, r2, #22
 800536a:	601a      	str	r2, [r3, #0]

        if (hdma->XferHalfCpltCallback != NULL) {
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005370:	2b00      	cmp	r3, #0
 8005372:	d007      	beq.n	8005384 <HAL_DMA_Start_IT+0x88>
            hdma->Instance->CR |= DMA_IT_HT;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f042 0208 	orr.w	r2, r2, #8
 8005382:	601a      	str	r2, [r3, #0]
        }

        /* Enable the Peripheral */
        __HAL_DMA_ENABLE(hdma);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f042 0201 	orr.w	r2, r2, #1
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	e005      	b.n	80053a2 <HAL_DMA_Start_IT+0xa6>
    } else {
        /* Process unlocked */
        __HAL_UNLOCK(hdma);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Return error status */
        status = HAL_BUSY;
 800539e:	2302      	movs	r3, #2
 80053a0:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 80053a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3718      	adds	r7, #24
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <DMA_SetConfig>:
 * @param  SrcAddress The source memory Buffer address
 * @param  DstAddress The destination memory Buffer address
 * @param  DataLength The length of data to be transferred from source to destination
 * @retval HAL status
 */
static void DMA_SetConfig(DMA_HandleTypeDef * hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength) {
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	603b      	str	r3, [r7, #0]
    /* Clear DBM bit */
    hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80053c8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    hdma->Instance->NDTR = DataLength;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	605a      	str	r2, [r3, #4]

    /* Memory to Peripheral */
    if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH) {
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	2b40      	cmp	r3, #64	@ 0x40
 80053d8:	d108      	bne.n	80053ec <DMA_SetConfig+0x40>
        /* Configure DMA Stream destination address */
        hdma->Instance->PAR = DstAddress;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	609a      	str	r2, [r3, #8]

        /* Configure DMA Stream source address */
        hdma->Instance->M0AR = SrcAddress;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	60da      	str	r2, [r3, #12]
        hdma->Instance->PAR = SrcAddress;

        /* Configure DMA Stream destination address */
        hdma->Instance->M0AR = DstAddress;
    }
}
 80053ea:	e007      	b.n	80053fc <DMA_SetConfig+0x50>
        hdma->Instance->PAR = SrcAddress;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	609a      	str	r2, [r3, #8]
        hdma->Instance->M0AR = DstAddress;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	60da      	str	r2, [r3, #12]
}
 80053fc:	bf00      	nop
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <DMA_CalcBaseAndBitshift>:
 * @brief  Returns the DMA Stream base address depending on stream number
 * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
 *                     the configuration information for the specified DMA Stream.
 * @retval Stream base address
 */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef * hdma) {
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
    uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	b2db      	uxtb	r3, r3
 8005416:	3b10      	subs	r3, #16
 8005418:	4a14      	ldr	r2, [pc, #80]	@ (800546c <DMA_CalcBaseAndBitshift+0x64>)
 800541a:	fba2 2303 	umull	r2, r3, r2, r3
 800541e:	091b      	lsrs	r3, r3, #4
 8005420:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005422:	4a13      	ldr	r2, [pc, #76]	@ (8005470 <DMA_CalcBaseAndBitshift+0x68>)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	4413      	add	r3, r2
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	461a      	mov	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U) {
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2b03      	cmp	r3, #3
 8005434:	d909      	bls.n	800544a <DMA_CalcBaseAndBitshift+0x42>
        /* return pointer to HISR and HIFCR */
        hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800543e:	f023 0303 	bic.w	r3, r3, #3
 8005442:	1d1a      	adds	r2, r3, #4
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	659a      	str	r2, [r3, #88]	@ 0x58
 8005448:	e007      	b.n	800545a <DMA_CalcBaseAndBitshift+0x52>
    } else {
        /* return pointer to LISR and LIFCR */
        hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005452:	f023 0303 	bic.w	r3, r3, #3
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	6593      	str	r3, [r2, #88]	@ 0x58
    }

    return hdma->StreamBaseAddress;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800545e:	4618      	mov	r0, r3
 8005460:	3714      	adds	r7, #20
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	aaaaaaab 	.word	0xaaaaaaab
 8005470:	08013ad8 	.word	0x08013ad8

08005474 <DMA_CheckFifoParam>:
 * @brief  Check compatibility between FIFO threshold level and size of the memory burst
 * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
 *                     the configuration information for the specified DMA Stream.
 * @retval HAL status
 */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef * hdma) {
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 800547c:	2300      	movs	r3, #0
 800547e:	73fb      	strb	r3, [r7, #15]
    uint32_t tmp = hdma->Init.FIFOThreshold;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005484:	60bb      	str	r3, [r7, #8]

    /* Memory Data size equal to Byte */
    if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE) {
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d11f      	bne.n	80054ce <DMA_CheckFifoParam+0x5a>
        switch (tmp) {
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b03      	cmp	r3, #3
 8005492:	d856      	bhi.n	8005542 <DMA_CheckFifoParam+0xce>
 8005494:	a201      	add	r2, pc, #4	@ (adr r2, 800549c <DMA_CheckFifoParam+0x28>)
 8005496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549a:	bf00      	nop
 800549c:	080054ad 	.word	0x080054ad
 80054a0:	080054bf 	.word	0x080054bf
 80054a4:	080054ad 	.word	0x080054ad
 80054a8:	08005543 	.word	0x08005543
        case DMA_FIFO_THRESHOLD_1QUARTERFULL:
        case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
            if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1) {
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d046      	beq.n	8005546 <DMA_CheckFifoParam+0xd2>
                status = HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80054bc:	e043      	b.n	8005546 <DMA_CheckFifoParam+0xd2>
        case DMA_FIFO_THRESHOLD_HALFFULL:
            if (hdma->Init.MemBurst == DMA_MBURST_INC16) {
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80054c6:	d140      	bne.n	800554a <DMA_CheckFifoParam+0xd6>
                status = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80054cc:	e03d      	b.n	800554a <DMA_CheckFifoParam+0xd6>
            break;
        }
    }

    /* Memory Data size equal to Half-Word */
    else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD) {
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054d6:	d121      	bne.n	800551c <DMA_CheckFifoParam+0xa8>
        switch (tmp) {
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2b03      	cmp	r3, #3
 80054dc:	d837      	bhi.n	800554e <DMA_CheckFifoParam+0xda>
 80054de:	a201      	add	r2, pc, #4	@ (adr r2, 80054e4 <DMA_CheckFifoParam+0x70>)
 80054e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e4:	080054f5 	.word	0x080054f5
 80054e8:	080054fb 	.word	0x080054fb
 80054ec:	080054f5 	.word	0x080054f5
 80054f0:	0800550d 	.word	0x0800550d
        case DMA_FIFO_THRESHOLD_1QUARTERFULL:
        case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
            status = HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	73fb      	strb	r3, [r7, #15]
            break;
 80054f8:	e030      	b.n	800555c <DMA_CheckFifoParam+0xe8>
        case DMA_FIFO_THRESHOLD_HALFFULL:
            if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1) {
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d025      	beq.n	8005552 <DMA_CheckFifoParam+0xde>
                status = HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800550a:	e022      	b.n	8005552 <DMA_CheckFifoParam+0xde>
        case DMA_FIFO_THRESHOLD_FULL:
            if (hdma->Init.MemBurst == DMA_MBURST_INC16) {
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005510:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005514:	d11f      	bne.n	8005556 <DMA_CheckFifoParam+0xe2>
                status = HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800551a:	e01c      	b.n	8005556 <DMA_CheckFifoParam+0xe2>
        }
    }

    /* Memory Data size equal to Word */
    else {
        switch (tmp) {
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	2b02      	cmp	r3, #2
 8005520:	d903      	bls.n	800552a <DMA_CheckFifoParam+0xb6>
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	2b03      	cmp	r3, #3
 8005526:	d003      	beq.n	8005530 <DMA_CheckFifoParam+0xbc>
            if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1) {
                status = HAL_ERROR;
            }
            break;
        default:
            break;
 8005528:	e018      	b.n	800555c <DMA_CheckFifoParam+0xe8>
            status = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	73fb      	strb	r3, [r7, #15]
            break;
 800552e:	e015      	b.n	800555c <DMA_CheckFifoParam+0xe8>
            if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1) {
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005534:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00e      	beq.n	800555a <DMA_CheckFifoParam+0xe6>
                status = HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	73fb      	strb	r3, [r7, #15]
            break;
 8005540:	e00b      	b.n	800555a <DMA_CheckFifoParam+0xe6>
            break;
 8005542:	bf00      	nop
 8005544:	e00a      	b.n	800555c <DMA_CheckFifoParam+0xe8>
            break;
 8005546:	bf00      	nop
 8005548:	e008      	b.n	800555c <DMA_CheckFifoParam+0xe8>
            break;
 800554a:	bf00      	nop
 800554c:	e006      	b.n	800555c <DMA_CheckFifoParam+0xe8>
            break;
 800554e:	bf00      	nop
 8005550:	e004      	b.n	800555c <DMA_CheckFifoParam+0xe8>
            break;
 8005552:	bf00      	nop
 8005554:	e002      	b.n	800555c <DMA_CheckFifoParam+0xe8>
            break;
 8005556:	bf00      	nop
 8005558:	e000      	b.n	800555c <DMA_CheckFifoParam+0xe8>
            break;
 800555a:	bf00      	nop
        }
    }

    return status;
 800555c:	7bfb      	ldrb	r3, [r7, #15]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3714      	adds	r7, #20
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop

0800556c <HAL_GPIO_Init>:
 *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
 * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef * GPIOx, GPIO_InitTypeDef * GPIO_Init) {
 800556c:	b480      	push	{r7}
 800556e:	b089      	sub	sp, #36	@ 0x24
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
    uint32_t position;
    uint32_t ioposition = 0x00U;
 8005576:	2300      	movs	r3, #0
 8005578:	617b      	str	r3, [r7, #20]
    uint32_t iocurrent = 0x00U;
 800557a:	2300      	movs	r3, #0
 800557c:	613b      	str	r3, [r7, #16]
    uint32_t temp = 0x00U;
 800557e:	2300      	movs	r3, #0
 8005580:	61bb      	str	r3, [r7, #24]
    assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
    assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
    assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

    /* Configure the port pins */
    for (position = 0U; position < GPIO_NUMBER; position++) {
 8005582:	2300      	movs	r3, #0
 8005584:	61fb      	str	r3, [r7, #28]
 8005586:	e159      	b.n	800583c <HAL_GPIO_Init+0x2d0>
        /* Get the IO position */
        ioposition = 0x01U << position;
 8005588:	2201      	movs	r2, #1
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	fa02 f303 	lsl.w	r3, r2, r3
 8005590:	617b      	str	r3, [r7, #20]
        /* Get the current IO position */
        iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	4013      	ands	r3, r2
 800559a:	613b      	str	r3, [r7, #16]

        if (iocurrent == ioposition) {
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	f040 8148 	bne.w	8005836 <HAL_GPIO_Init+0x2ca>
            /*--------------------- GPIO Mode Configuration ------------------------*/
            /* In case of Output or Alternate function mode selection */
            if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || (GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f003 0303 	and.w	r3, r3, #3
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d005      	beq.n	80055be <HAL_GPIO_Init+0x52>
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f003 0303 	and.w	r3, r3, #3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d130      	bne.n	8005620 <HAL_GPIO_Init+0xb4>
                /* Check the Speed parameter */
                assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
                /* Configure the IO Speed */
                temp = GPIOx->OSPEEDR;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	61bb      	str	r3, [r7, #24]
                temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	2203      	movs	r2, #3
 80055ca:	fa02 f303 	lsl.w	r3, r2, r3
 80055ce:	43db      	mvns	r3, r3
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	4013      	ands	r3, r2
 80055d4:	61bb      	str	r3, [r7, #24]
                temp |= (GPIO_Init->Speed << (position * 2U));
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68da      	ldr	r2, [r3, #12]
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	fa02 f303 	lsl.w	r3, r2, r3
 80055e2:	69ba      	ldr	r2, [r7, #24]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	61bb      	str	r3, [r7, #24]
                GPIOx->OSPEEDR = temp;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	609a      	str	r2, [r3, #8]

                /* Configure the IO Output Type */
                temp = GPIOx->OTYPER;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	61bb      	str	r3, [r7, #24]
                temp &= ~(GPIO_OTYPER_OT_0 << position);
 80055f4:	2201      	movs	r2, #1
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	fa02 f303 	lsl.w	r3, r2, r3
 80055fc:	43db      	mvns	r3, r3
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	4013      	ands	r3, r2
 8005602:	61bb      	str	r3, [r7, #24]
                temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	091b      	lsrs	r3, r3, #4
 800560a:	f003 0201 	and.w	r2, r3, #1
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	fa02 f303 	lsl.w	r3, r2, r3
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	4313      	orrs	r3, r2
 8005618:	61bb      	str	r3, [r7, #24]
                GPIOx->OTYPER = temp;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	605a      	str	r2, [r3, #4]
            }

            if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f003 0303 	and.w	r3, r3, #3
 8005628:	2b03      	cmp	r3, #3
 800562a:	d017      	beq.n	800565c <HAL_GPIO_Init+0xf0>
                /* Check the parameters */
                assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

                /* Activate the Pull-up or Pull down resistor for the current IO */
                temp = GPIOx->PUPDR;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	61bb      	str	r3, [r7, #24]
                temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	2203      	movs	r2, #3
 8005638:	fa02 f303 	lsl.w	r3, r2, r3
 800563c:	43db      	mvns	r3, r3
 800563e:	69ba      	ldr	r2, [r7, #24]
 8005640:	4013      	ands	r3, r2
 8005642:	61bb      	str	r3, [r7, #24]
                temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	689a      	ldr	r2, [r3, #8]
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	005b      	lsls	r3, r3, #1
 800564c:	fa02 f303 	lsl.w	r3, r2, r3
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	4313      	orrs	r3, r2
 8005654:	61bb      	str	r3, [r7, #24]
                GPIOx->PUPDR = temp;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	60da      	str	r2, [r3, #12]
            }

            /* In case of Alternate function mode selection */
            if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f003 0303 	and.w	r3, r3, #3
 8005664:	2b02      	cmp	r3, #2
 8005666:	d123      	bne.n	80056b0 <HAL_GPIO_Init+0x144>
                /* Check the Alternate function parameter */
                assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
                /* Configure Alternate function mapped with the current IO */
                temp = GPIOx->AFR[position >> 3U];
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	08da      	lsrs	r2, r3, #3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	3208      	adds	r2, #8
 8005670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005674:	61bb      	str	r3, [r7, #24]
                temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U));
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	f003 0307 	and.w	r3, r3, #7
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	220f      	movs	r2, #15
 8005680:	fa02 f303 	lsl.w	r3, r2, r3
 8005684:	43db      	mvns	r3, r3
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	4013      	ands	r3, r2
 800568a:	61bb      	str	r3, [r7, #24]
                temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	691a      	ldr	r2, [r3, #16]
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	f003 0307 	and.w	r3, r3, #7
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	fa02 f303 	lsl.w	r3, r2, r3
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	4313      	orrs	r3, r2
 80056a0:	61bb      	str	r3, [r7, #24]
                GPIOx->AFR[position >> 3U] = temp;
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	08da      	lsrs	r2, r3, #3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	3208      	adds	r2, #8
 80056aa:	69b9      	ldr	r1, [r7, #24]
 80056ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            }

            /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
            temp = GPIOx->MODER;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	61bb      	str	r3, [r7, #24]
            temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	2203      	movs	r2, #3
 80056bc:	fa02 f303 	lsl.w	r3, r2, r3
 80056c0:	43db      	mvns	r3, r3
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	4013      	ands	r3, r2
 80056c6:	61bb      	str	r3, [r7, #24]
            temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f003 0203 	and.w	r2, r3, #3
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	005b      	lsls	r3, r3, #1
 80056d4:	fa02 f303 	lsl.w	r3, r2, r3
 80056d8:	69ba      	ldr	r2, [r7, #24]
 80056da:	4313      	orrs	r3, r2
 80056dc:	61bb      	str	r3, [r7, #24]
            GPIOx->MODER = temp;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	601a      	str	r2, [r3, #0]

            /*--------------------- EXTI Mode Configuration ------------------------*/
            /* Configure the External Interrupt or event for the current IO */
            if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U) {
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 80a2 	beq.w	8005836 <HAL_GPIO_Init+0x2ca>
                /* Enable SYSCFG Clock */
                __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056f2:	2300      	movs	r3, #0
 80056f4:	60fb      	str	r3, [r7, #12]
 80056f6:	4b57      	ldr	r3, [pc, #348]	@ (8005854 <HAL_GPIO_Init+0x2e8>)
 80056f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056fa:	4a56      	ldr	r2, [pc, #344]	@ (8005854 <HAL_GPIO_Init+0x2e8>)
 80056fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005700:	6453      	str	r3, [r2, #68]	@ 0x44
 8005702:	4b54      	ldr	r3, [pc, #336]	@ (8005854 <HAL_GPIO_Init+0x2e8>)
 8005704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005706:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800570a:	60fb      	str	r3, [r7, #12]
 800570c:	68fb      	ldr	r3, [r7, #12]

                temp = SYSCFG->EXTICR[position >> 2U];
 800570e:	4a52      	ldr	r2, [pc, #328]	@ (8005858 <HAL_GPIO_Init+0x2ec>)
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	089b      	lsrs	r3, r3, #2
 8005714:	3302      	adds	r3, #2
 8005716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800571a:	61bb      	str	r3, [r7, #24]
                temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	f003 0303 	and.w	r3, r3, #3
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	220f      	movs	r2, #15
 8005726:	fa02 f303 	lsl.w	r3, r2, r3
 800572a:	43db      	mvns	r3, r3
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	4013      	ands	r3, r2
 8005730:	61bb      	str	r3, [r7, #24]
                temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a49      	ldr	r2, [pc, #292]	@ (800585c <HAL_GPIO_Init+0x2f0>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d019      	beq.n	800576e <HAL_GPIO_Init+0x202>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a48      	ldr	r2, [pc, #288]	@ (8005860 <HAL_GPIO_Init+0x2f4>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d013      	beq.n	800576a <HAL_GPIO_Init+0x1fe>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a47      	ldr	r2, [pc, #284]	@ (8005864 <HAL_GPIO_Init+0x2f8>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d00d      	beq.n	8005766 <HAL_GPIO_Init+0x1fa>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a46      	ldr	r2, [pc, #280]	@ (8005868 <HAL_GPIO_Init+0x2fc>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d007      	beq.n	8005762 <HAL_GPIO_Init+0x1f6>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a45      	ldr	r2, [pc, #276]	@ (800586c <HAL_GPIO_Init+0x300>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d101      	bne.n	800575e <HAL_GPIO_Init+0x1f2>
 800575a:	2304      	movs	r3, #4
 800575c:	e008      	b.n	8005770 <HAL_GPIO_Init+0x204>
 800575e:	2307      	movs	r3, #7
 8005760:	e006      	b.n	8005770 <HAL_GPIO_Init+0x204>
 8005762:	2303      	movs	r3, #3
 8005764:	e004      	b.n	8005770 <HAL_GPIO_Init+0x204>
 8005766:	2302      	movs	r3, #2
 8005768:	e002      	b.n	8005770 <HAL_GPIO_Init+0x204>
 800576a:	2301      	movs	r3, #1
 800576c:	e000      	b.n	8005770 <HAL_GPIO_Init+0x204>
 800576e:	2300      	movs	r3, #0
 8005770:	69fa      	ldr	r2, [r7, #28]
 8005772:	f002 0203 	and.w	r2, r2, #3
 8005776:	0092      	lsls	r2, r2, #2
 8005778:	4093      	lsls	r3, r2
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	4313      	orrs	r3, r2
 800577e:	61bb      	str	r3, [r7, #24]
                SYSCFG->EXTICR[position >> 2U] = temp;
 8005780:	4935      	ldr	r1, [pc, #212]	@ (8005858 <HAL_GPIO_Init+0x2ec>)
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	089b      	lsrs	r3, r3, #2
 8005786:	3302      	adds	r3, #2
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                /* Clear Rising Falling edge configuration */
                temp = EXTI->RTSR;
 800578e:	4b38      	ldr	r3, [pc, #224]	@ (8005870 <HAL_GPIO_Init+0x304>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	61bb      	str	r3, [r7, #24]
                temp &= ~((uint32_t)iocurrent);
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	43db      	mvns	r3, r3
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	4013      	ands	r3, r2
 800579c:	61bb      	str	r3, [r7, #24]
                if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U) {
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_GPIO_Init+0x246>
                    temp |= iocurrent;
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	61bb      	str	r3, [r7, #24]
                }
                EXTI->RTSR = temp;
 80057b2:	4a2f      	ldr	r2, [pc, #188]	@ (8005870 <HAL_GPIO_Init+0x304>)
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	6093      	str	r3, [r2, #8]

                temp = EXTI->FTSR;
 80057b8:	4b2d      	ldr	r3, [pc, #180]	@ (8005870 <HAL_GPIO_Init+0x304>)
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	61bb      	str	r3, [r7, #24]
                temp &= ~((uint32_t)iocurrent);
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	43db      	mvns	r3, r3
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	4013      	ands	r3, r2
 80057c6:	61bb      	str	r3, [r7, #24]
                if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U) {
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d003      	beq.n	80057dc <HAL_GPIO_Init+0x270>
                    temp |= iocurrent;
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	4313      	orrs	r3, r2
 80057da:	61bb      	str	r3, [r7, #24]
                }
                EXTI->FTSR = temp;
 80057dc:	4a24      	ldr	r2, [pc, #144]	@ (8005870 <HAL_GPIO_Init+0x304>)
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	60d3      	str	r3, [r2, #12]

                temp = EXTI->EMR;
 80057e2:	4b23      	ldr	r3, [pc, #140]	@ (8005870 <HAL_GPIO_Init+0x304>)
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	61bb      	str	r3, [r7, #24]
                temp &= ~((uint32_t)iocurrent);
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	43db      	mvns	r3, r3
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	4013      	ands	r3, r2
 80057f0:	61bb      	str	r3, [r7, #24]
                if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U) {
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <HAL_GPIO_Init+0x29a>
                    temp |= iocurrent;
 80057fe:	69ba      	ldr	r2, [r7, #24]
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	4313      	orrs	r3, r2
 8005804:	61bb      	str	r3, [r7, #24]
                }
                EXTI->EMR = temp;
 8005806:	4a1a      	ldr	r2, [pc, #104]	@ (8005870 <HAL_GPIO_Init+0x304>)
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	6053      	str	r3, [r2, #4]

                /* Clear EXTI line configuration */
                temp = EXTI->IMR;
 800580c:	4b18      	ldr	r3, [pc, #96]	@ (8005870 <HAL_GPIO_Init+0x304>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	61bb      	str	r3, [r7, #24]
                temp &= ~((uint32_t)iocurrent);
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	43db      	mvns	r3, r3
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	4013      	ands	r3, r2
 800581a:	61bb      	str	r3, [r7, #24]
                if ((GPIO_Init->Mode & EXTI_IT) != 0x00U) {
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <HAL_GPIO_Init+0x2c4>
                    temp |= iocurrent;
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	4313      	orrs	r3, r2
 800582e:	61bb      	str	r3, [r7, #24]
                }
                EXTI->IMR = temp;
 8005830:	4a0f      	ldr	r2, [pc, #60]	@ (8005870 <HAL_GPIO_Init+0x304>)
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	6013      	str	r3, [r2, #0]
    for (position = 0U; position < GPIO_NUMBER; position++) {
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	3301      	adds	r3, #1
 800583a:	61fb      	str	r3, [r7, #28]
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	2b0f      	cmp	r3, #15
 8005840:	f67f aea2 	bls.w	8005588 <HAL_GPIO_Init+0x1c>
            }
        }
    }
}
 8005844:	bf00      	nop
 8005846:	bf00      	nop
 8005848:	3724      	adds	r7, #36	@ 0x24
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	40023800 	.word	0x40023800
 8005858:	40013800 	.word	0x40013800
 800585c:	40020000 	.word	0x40020000
 8005860:	40020400 	.word	0x40020400
 8005864:	40020800 	.word	0x40020800
 8005868:	40020c00 	.word	0x40020c00
 800586c:	40021000 	.word	0x40021000
 8005870:	40013c00 	.word	0x40013c00

08005874 <HAL_GPIO_ReadPin>:
 *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
 * @param  GPIO_Pin specifies the port bit to read.
 *         This parameter can be GPIO_PIN_x where x can be (0..15).
 * @retval The input port pin value.
 */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin) {
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	460b      	mov	r3, r1
 800587e:	807b      	strh	r3, [r7, #2]
    GPIO_PinState bitstatus;

    /* Check the parameters */
    assert_param(IS_GPIO_PIN(GPIO_Pin));

    if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET) {
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	691a      	ldr	r2, [r3, #16]
 8005884:	887b      	ldrh	r3, [r7, #2]
 8005886:	4013      	ands	r3, r2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <HAL_GPIO_ReadPin+0x1e>
        bitstatus = GPIO_PIN_SET;
 800588c:	2301      	movs	r3, #1
 800588e:	73fb      	strb	r3, [r7, #15]
 8005890:	e001      	b.n	8005896 <HAL_GPIO_ReadPin+0x22>
    } else {
        bitstatus = GPIO_PIN_RESET;
 8005892:	2300      	movs	r3, #0
 8005894:	73fb      	strb	r3, [r7, #15]
    }
    return bitstatus;
 8005896:	7bfb      	ldrb	r3, [r7, #15]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3714      	adds	r7, #20
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_GPIO_WritePin>:
 *          This parameter can be one of the GPIO_PinState enum values:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState) {
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	460b      	mov	r3, r1
 80058ae:	807b      	strh	r3, [r7, #2]
 80058b0:	4613      	mov	r3, r2
 80058b2:	707b      	strb	r3, [r7, #1]
    /* Check the parameters */
    assert_param(IS_GPIO_PIN(GPIO_Pin));
    assert_param(IS_GPIO_PIN_ACTION(PinState));

    if (PinState != GPIO_PIN_RESET) {
 80058b4:	787b      	ldrb	r3, [r7, #1]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_GPIO_WritePin+0x1e>
        GPIOx->BSRR = GPIO_Pin;
 80058ba:	887a      	ldrh	r2, [r7, #2]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	619a      	str	r2, [r3, #24]
    } else {
        GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
    }
}
 80058c0:	e003      	b.n	80058ca <HAL_GPIO_WritePin+0x26>
        GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80058c2:	887b      	ldrh	r3, [r7, #2]
 80058c4:	041a      	lsls	r2, r3, #16
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	619a      	str	r2, [r3, #24]
}
 80058ca:	bf00      	nop
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
	...

080058d8 <HAL_I2C_Init>:
 *         in the I2C_InitTypeDef and initialize the associated handle.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef * hi2c) {
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
    uint32_t freqrange;
    uint32_t pclk1;

    /* Check the I2C handle allocation */
    if (hi2c == NULL) {
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <HAL_I2C_Init+0x12>
        return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e12b      	b.n	8005b42 <HAL_I2C_Init+0x26a>
    assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
    assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
    assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
    assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

    if (hi2c->State == HAL_I2C_STATE_RESET) {
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d106      	bne.n	8005904 <HAL_I2C_Init+0x2c>
        /* Allocate lock resource and initialize it */
        hi2c->Lock = HAL_UNLOCKED;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        hi2c->MspInitCallback(hi2c);
#else
        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        HAL_I2C_MspInit(hi2c);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7fd faa6 	bl	8002e50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2224      	movs	r2, #36	@ 0x24
 8005908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0201 	bic.w	r2, r2, #1
 800591a:	601a      	str	r2, [r3, #0]

    /*Reset I2C*/
    hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800592a:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800593a:	601a      	str	r2, [r3, #0]

    /* Get PCLK1 frequency */
    pclk1 = HAL_RCC_GetPCLK1Freq();
 800593c:	f002 fe38 	bl	80085b0 <HAL_RCC_GetPCLK1Freq>
 8005940:	60f8      	str	r0, [r7, #12]

    /* Check the minimum allowed PCLK1 frequency */
    if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U) {
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	4a81      	ldr	r2, [pc, #516]	@ (8005b4c <HAL_I2C_Init+0x274>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d807      	bhi.n	800595c <HAL_I2C_Init+0x84>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	4a80      	ldr	r2, [pc, #512]	@ (8005b50 <HAL_I2C_Init+0x278>)
 8005950:	4293      	cmp	r3, r2
 8005952:	bf94      	ite	ls
 8005954:	2301      	movls	r3, #1
 8005956:	2300      	movhi	r3, #0
 8005958:	b2db      	uxtb	r3, r3
 800595a:	e006      	b.n	800596a <HAL_I2C_Init+0x92>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4a7d      	ldr	r2, [pc, #500]	@ (8005b54 <HAL_I2C_Init+0x27c>)
 8005960:	4293      	cmp	r3, r2
 8005962:	bf94      	ite	ls
 8005964:	2301      	movls	r3, #1
 8005966:	2300      	movhi	r3, #0
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <HAL_I2C_Init+0x9a>
        return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e0e7      	b.n	8005b42 <HAL_I2C_Init+0x26a>
    }

    /* Calculate frequency range */
    freqrange = I2C_FREQRANGE(pclk1);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	4a78      	ldr	r2, [pc, #480]	@ (8005b58 <HAL_I2C_Init+0x280>)
 8005976:	fba2 2303 	umull	r2, r3, r2, r3
 800597a:	0c9b      	lsrs	r3, r3, #18
 800597c:	60bb      	str	r3, [r7, #8]

    /*---------------------------- I2Cx CR2 Configuration ----------------------*/
    /* Configure I2Cx: Frequency range */
    MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	430a      	orrs	r2, r1
 8005990:	605a      	str	r2, [r3, #4]

    /*---------------------------- I2Cx TRISE Configuration --------------------*/
    /* Configure I2Cx: Rise Time */
    MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6a1b      	ldr	r3, [r3, #32]
 8005998:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	4a6a      	ldr	r2, [pc, #424]	@ (8005b4c <HAL_I2C_Init+0x274>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d802      	bhi.n	80059ac <HAL_I2C_Init+0xd4>
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	3301      	adds	r3, #1
 80059aa:	e009      	b.n	80059c0 <HAL_I2C_Init+0xe8>
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80059b2:	fb02 f303 	mul.w	r3, r2, r3
 80059b6:	4a69      	ldr	r2, [pc, #420]	@ (8005b5c <HAL_I2C_Init+0x284>)
 80059b8:	fba2 2303 	umull	r2, r3, r2, r3
 80059bc:	099b      	lsrs	r3, r3, #6
 80059be:	3301      	adds	r3, #1
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	6812      	ldr	r2, [r2, #0]
 80059c4:	430b      	orrs	r3, r1
 80059c6:	6213      	str	r3, [r2, #32]

    /*---------------------------- I2Cx CCR Configuration ----------------------*/
    /* Configure I2Cx: Speed */
    MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80059d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	495c      	ldr	r1, [pc, #368]	@ (8005b4c <HAL_I2C_Init+0x274>)
 80059dc:	428b      	cmp	r3, r1
 80059de:	d819      	bhi.n	8005a14 <HAL_I2C_Init+0x13c>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	1e59      	subs	r1, r3, #1
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80059ee:	1c59      	adds	r1, r3, #1
 80059f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80059f4:	400b      	ands	r3, r1
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00a      	beq.n	8005a10 <HAL_I2C_Init+0x138>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	1e59      	subs	r1, r3, #1
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	005b      	lsls	r3, r3, #1
 8005a04:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a08:	3301      	adds	r3, #1
 8005a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a0e:	e051      	b.n	8005ab4 <HAL_I2C_Init+0x1dc>
 8005a10:	2304      	movs	r3, #4
 8005a12:	e04f      	b.n	8005ab4 <HAL_I2C_Init+0x1dc>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d111      	bne.n	8005a40 <HAL_I2C_Init+0x168>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	1e58      	subs	r0, r3, #1
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6859      	ldr	r1, [r3, #4]
 8005a24:	460b      	mov	r3, r1
 8005a26:	005b      	lsls	r3, r3, #1
 8005a28:	440b      	add	r3, r1
 8005a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a2e:	3301      	adds	r3, #1
 8005a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	bf0c      	ite	eq
 8005a38:	2301      	moveq	r3, #1
 8005a3a:	2300      	movne	r3, #0
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	e012      	b.n	8005a66 <HAL_I2C_Init+0x18e>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	1e58      	subs	r0, r3, #1
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6859      	ldr	r1, [r3, #4]
 8005a48:	460b      	mov	r3, r1
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	440b      	add	r3, r1
 8005a4e:	0099      	lsls	r1, r3, #2
 8005a50:	440b      	add	r3, r1
 8005a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a56:	3301      	adds	r3, #1
 8005a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	bf0c      	ite	eq
 8005a60:	2301      	moveq	r3, #1
 8005a62:	2300      	movne	r3, #0
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <HAL_I2C_Init+0x196>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e022      	b.n	8005ab4 <HAL_I2C_Init+0x1dc>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10e      	bne.n	8005a94 <HAL_I2C_Init+0x1bc>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	1e58      	subs	r0, r3, #1
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6859      	ldr	r1, [r3, #4]
 8005a7e:	460b      	mov	r3, r1
 8005a80:	005b      	lsls	r3, r3, #1
 8005a82:	440b      	add	r3, r1
 8005a84:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a88:	3301      	adds	r3, #1
 8005a8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a92:	e00f      	b.n	8005ab4 <HAL_I2C_Init+0x1dc>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	1e58      	subs	r0, r3, #1
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6859      	ldr	r1, [r3, #4]
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	440b      	add	r3, r1
 8005aa2:	0099      	lsls	r1, r3, #2
 8005aa4:	440b      	add	r3, r1
 8005aa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005aaa:	3301      	adds	r3, #1
 8005aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ab0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ab4:	6879      	ldr	r1, [r7, #4]
 8005ab6:	6809      	ldr	r1, [r1, #0]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	61cb      	str	r3, [r1, #28]

    /*---------------------------- I2Cx CR1 Configuration ----------------------*/
    /* Configure I2Cx: Generalcall and NoStretch mode */
    MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	69da      	ldr	r2, [r3, #28]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	431a      	orrs	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	430a      	orrs	r2, r1
 8005ad6:	601a      	str	r2, [r3, #0]

    /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
    /* Configure I2Cx: Own Address1 and addressing mode */
    MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005ae2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	6911      	ldr	r1, [r2, #16]
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	68d2      	ldr	r2, [r2, #12]
 8005aee:	4311      	orrs	r1, r2
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	6812      	ldr	r2, [r2, #0]
 8005af4:	430b      	orrs	r3, r1
 8005af6:	6093      	str	r3, [r2, #8]

    /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
    /* Configure I2Cx: Dual mode and Own Address2 */
    MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	695a      	ldr	r2, [r3, #20]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	430a      	orrs	r2, r1
 8005b12:	60da      	str	r2, [r3, #12]

    /* Enable the selected I2C peripheral */
    __HAL_I2C_ENABLE(hi2c);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f042 0201 	orr.w	r2, r2, #1
 8005b22:	601a      	str	r2, [r3, #0]

    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	000186a0 	.word	0x000186a0
 8005b50:	001e847f 	.word	0x001e847f
 8005b54:	003d08ff 	.word	0x003d08ff
 8005b58:	431bde83 	.word	0x431bde83
 8005b5c:	10624dd3 	.word	0x10624dd3

08005b60 <HAL_I2C_Mem_Write>:
 * @param  pData Pointer to data buffer
 * @param  Size Amount of data to be sent
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData, uint16_t Size, uint32_t Timeout) {
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b088      	sub	sp, #32
 8005b64:	af02      	add	r7, sp, #8
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	4608      	mov	r0, r1
 8005b6a:	4611      	mov	r1, r2
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	4603      	mov	r3, r0
 8005b70:	817b      	strh	r3, [r7, #10]
 8005b72:	460b      	mov	r3, r1
 8005b74:	813b      	strh	r3, [r7, #8]
 8005b76:	4613      	mov	r3, r2
 8005b78:	80fb      	strh	r3, [r7, #6]
    /* Init tickstart for timeout management*/
    uint32_t tickstart = HAL_GetTick();
 8005b7a:	f7fe fe07 	bl	800478c <HAL_GetTick>
 8005b7e:	6178      	str	r0, [r7, #20]

    /* Check the parameters */
    assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

    if (hi2c->State == HAL_I2C_STATE_READY) {
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	2b20      	cmp	r3, #32
 8005b8a:	f040 80d9 	bne.w	8005d40 <HAL_I2C_Mem_Write+0x1e0>
        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK) {
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	2319      	movs	r3, #25
 8005b94:	2201      	movs	r2, #1
 8005b96:	496d      	ldr	r1, [pc, #436]	@ (8005d4c <HAL_I2C_Mem_Write+0x1ec>)
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f000 fc7f 	bl	800649c <I2C_WaitOnFlagUntilTimeout>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d001      	beq.n	8005ba8 <HAL_I2C_Mem_Write+0x48>
            return HAL_BUSY;
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	e0cc      	b.n	8005d42 <HAL_I2C_Mem_Write+0x1e2>
        }

        /* Process Locked */
        __HAL_LOCK(hi2c);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d101      	bne.n	8005bb6 <HAL_I2C_Mem_Write+0x56>
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	e0c5      	b.n	8005d42 <HAL_I2C_Mem_Write+0x1e2>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Check if the I2C is already enabled */
        if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d007      	beq.n	8005bdc <HAL_I2C_Mem_Write+0x7c>
            /* Enable I2C peripheral */
            __HAL_I2C_ENABLE(hi2c);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0201 	orr.w	r2, r2, #1
 8005bda:	601a      	str	r2, [r3, #0]
        }

        /* Disable Pos */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bea:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_BUSY_TX;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2221      	movs	r2, #33	@ 0x21
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_MEM;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2240      	movs	r2, #64	@ 0x40
 8005bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Prepare transfer parameters */
        hi2c->pBuffPtr = pData;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6a3a      	ldr	r2, [r7, #32]
 8005c06:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount = Size;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005c0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize = hi2c->XferCount;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4a4d      	ldr	r2, [pc, #308]	@ (8005d50 <HAL_I2C_Mem_Write+0x1f0>)
 8005c1c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK) {
 8005c1e:	88f8      	ldrh	r0, [r7, #6]
 8005c20:	893a      	ldrh	r2, [r7, #8]
 8005c22:	8979      	ldrh	r1, [r7, #10]
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	9301      	str	r3, [sp, #4]
 8005c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f000 fab6 	bl	80061a0 <I2C_RequestMemoryWrite>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d052      	beq.n	8005ce0 <HAL_I2C_Mem_Write+0x180>
            return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e081      	b.n	8005d42 <HAL_I2C_Mem_Write+0x1e2>
        }

        while (hi2c->XferSize > 0U) {
            /* Wait until TXE flag is set */
            if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f000 fd00 	bl	8006648 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00d      	beq.n	8005c6a <HAL_I2C_Mem_Write+0x10a>
                if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	d107      	bne.n	8005c66 <HAL_I2C_Mem_Write+0x106>
                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c64:	601a      	str	r2, [r3, #0]
                }
                return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e06b      	b.n	8005d42 <HAL_I2C_Mem_Write+0x1e2>
            }

            /* Write data to DR */
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c6e:	781a      	ldrb	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	611a      	str	r2, [r3, #16]

            /* Increment Buffer pointer */
            hi2c->pBuffPtr++;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7a:	1c5a      	adds	r2, r3, #1
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	625a      	str	r2, [r3, #36]	@ 0x24

            /* Update counter */
            hi2c->XferSize--;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c84:	3b01      	subs	r3, #1
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	851a      	strh	r2, [r3, #40]	@ 0x28
            hi2c->XferCount--;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	3b01      	subs	r3, #1
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	855a      	strh	r2, [r3, #42]	@ 0x2a

            if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U)) {
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	f003 0304 	and.w	r3, r3, #4
 8005ca4:	2b04      	cmp	r3, #4
 8005ca6:	d11b      	bne.n	8005ce0 <HAL_I2C_Mem_Write+0x180>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d017      	beq.n	8005ce0 <HAL_I2C_Mem_Write+0x180>
                /* Write data to DR */
                hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb4:	781a      	ldrb	r2, [r3, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	611a      	str	r2, [r3, #16]

                /* Increment Buffer pointer */
                hi2c->pBuffPtr++;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	625a      	str	r2, [r3, #36]	@ 0x24

                /* Update counter */
                hi2c->XferSize--;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	851a      	strh	r2, [r3, #40]	@ 0x28
                hi2c->XferCount--;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	855a      	strh	r2, [r3, #42]	@ 0x2a
        while (hi2c->XferSize > 0U) {
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1aa      	bne.n	8005c3e <HAL_I2C_Mem_Write+0xde>
            }
        }

        /* Wait until BTF flag is set */
        if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 fcec 	bl	80066ca <I2C_WaitOnBTFFlagUntilTimeout>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00d      	beq.n	8005d14 <HAL_I2C_Mem_Write+0x1b4>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cfc:	2b04      	cmp	r3, #4
 8005cfe:	d107      	bne.n	8005d10 <HAL_I2C_Mem_Write+0x1b0>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d0e:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e016      	b.n	8005d42 <HAL_I2C_Mem_Write+0x1e2>
        }

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d22:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2220      	movs	r2, #32
 8005d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	e000      	b.n	8005d42 <HAL_I2C_Mem_Write+0x1e2>
    } else {
        return HAL_BUSY;
 8005d40:	2302      	movs	r3, #2
    }
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3718      	adds	r7, #24
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	00100002 	.word	0x00100002
 8005d50:	ffff0000 	.word	0xffff0000

08005d54 <HAL_I2C_Mem_Read>:
 * @param  pData Pointer to data buffer
 * @param  Size Amount of data to be sent
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData, uint16_t Size, uint32_t Timeout) {
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b08c      	sub	sp, #48	@ 0x30
 8005d58:	af02      	add	r7, sp, #8
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	4608      	mov	r0, r1
 8005d5e:	4611      	mov	r1, r2
 8005d60:	461a      	mov	r2, r3
 8005d62:	4603      	mov	r3, r0
 8005d64:	817b      	strh	r3, [r7, #10]
 8005d66:	460b      	mov	r3, r1
 8005d68:	813b      	strh	r3, [r7, #8]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	80fb      	strh	r3, [r7, #6]
    /* Init tickstart for timeout management*/
    uint32_t tickstart = HAL_GetTick();
 8005d6e:	f7fe fd0d 	bl	800478c <HAL_GetTick>
 8005d72:	6278      	str	r0, [r7, #36]	@ 0x24

    /* Check the parameters */
    assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

    if (hi2c->State == HAL_I2C_STATE_READY) {
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b20      	cmp	r3, #32
 8005d7e:	f040 8208 	bne.w	8006192 <HAL_I2C_Mem_Read+0x43e>
        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK) {
 8005d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	2319      	movs	r3, #25
 8005d88:	2201      	movs	r2, #1
 8005d8a:	497b      	ldr	r1, [pc, #492]	@ (8005f78 <HAL_I2C_Mem_Read+0x224>)
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f000 fb85 	bl	800649c <I2C_WaitOnFlagUntilTimeout>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <HAL_I2C_Mem_Read+0x48>
            return HAL_BUSY;
 8005d98:	2302      	movs	r3, #2
 8005d9a:	e1fb      	b.n	8006194 <HAL_I2C_Mem_Read+0x440>
        }

        /* Process Locked */
        __HAL_LOCK(hi2c);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d101      	bne.n	8005daa <HAL_I2C_Mem_Read+0x56>
 8005da6:	2302      	movs	r3, #2
 8005da8:	e1f4      	b.n	8006194 <HAL_I2C_Mem_Read+0x440>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Check if the I2C is already enabled */
        if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d007      	beq.n	8005dd0 <HAL_I2C_Mem_Read+0x7c>
            /* Enable I2C peripheral */
            __HAL_I2C_ENABLE(hi2c);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 0201 	orr.w	r2, r2, #1
 8005dce:	601a      	str	r2, [r3, #0]
        }

        /* Disable Pos */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005dde:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_BUSY_RX;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2222      	movs	r2, #34	@ 0x22
 8005de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_MEM;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2240      	movs	r2, #64	@ 0x40
 8005dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Prepare transfer parameters */
        hi2c->pBuffPtr = pData;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dfa:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount = Size;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005e00:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize = hi2c->XferCount;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4a5b      	ldr	r2, [pc, #364]	@ (8005f7c <HAL_I2C_Mem_Read+0x228>)
 8005e10:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK) {
 8005e12:	88f8      	ldrh	r0, [r7, #6]
 8005e14:	893a      	ldrh	r2, [r7, #8]
 8005e16:	8979      	ldrh	r1, [r7, #10]
 8005e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1a:	9301      	str	r3, [sp, #4]
 8005e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	4603      	mov	r3, r0
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f000 fa52 	bl	80062cc <I2C_RequestMemoryRead>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d001      	beq.n	8005e32 <HAL_I2C_Mem_Read+0xde>
            return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e1b0      	b.n	8006194 <HAL_I2C_Mem_Read+0x440>
        }

        if (hi2c->XferSize == 0U) {
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d113      	bne.n	8005e62 <HAL_I2C_Mem_Read+0x10e>
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	623b      	str	r3, [r7, #32]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	623b      	str	r3, [r7, #32]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	623b      	str	r3, [r7, #32]
 8005e4e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e5e:	601a      	str	r2, [r3, #0]
 8005e60:	e184      	b.n	800616c <HAL_I2C_Mem_Read+0x418>
        } else if (hi2c->XferSize == 1U) {
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d11b      	bne.n	8005ea2 <HAL_I2C_Mem_Read+0x14e>
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e78:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	61fb      	str	r3, [r7, #28]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	61fb      	str	r3, [r7, #28]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	61fb      	str	r3, [r7, #28]
 8005e8e:	69fb      	ldr	r3, [r7, #28]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e9e:	601a      	str	r2, [r3, #0]
 8005ea0:	e164      	b.n	800616c <HAL_I2C_Mem_Read+0x418>
        } else if (hi2c->XferSize == 2U) {
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d11b      	bne.n	8005ee2 <HAL_I2C_Mem_Read+0x18e>
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005eb8:	601a      	str	r2, [r3, #0]

            /* Enable Pos */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ec8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eca:	2300      	movs	r3, #0
 8005ecc:	61bb      	str	r3, [r7, #24]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	61bb      	str	r3, [r7, #24]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	61bb      	str	r3, [r7, #24]
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	e144      	b.n	800616c <HAL_I2C_Mem_Read+0x418>
        } else {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	617b      	str	r3, [r7, #20]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	617b      	str	r3, [r7, #20]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	697b      	ldr	r3, [r7, #20]
        }

        while (hi2c->XferSize > 0U) {
 8005ef8:	e138      	b.n	800616c <HAL_I2C_Mem_Read+0x418>
            if (hi2c->XferSize <= 3U) {
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005efe:	2b03      	cmp	r3, #3
 8005f00:	f200 80f1 	bhi.w	80060e6 <HAL_I2C_Mem_Read+0x392>
                /* One byte */
                if (hi2c->XferSize == 1U) {
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d123      	bne.n	8005f54 <HAL_I2C_Mem_Read+0x200>
                    /* Wait until RXNE flag is set */
                    if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8005f0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f0e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f000 fc1b 	bl	800674c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d001      	beq.n	8005f20 <HAL_I2C_Mem_Read+0x1cc>
                        return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e139      	b.n	8006194 <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	691a      	ldr	r2, [r3, #16]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f2a:	b2d2      	uxtb	r2, r2
 8005f2c:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f32:	1c5a      	adds	r2, r3, #1
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	851a      	strh	r2, [r3, #40]	@ 0x28
                    hi2c->XferCount--;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005f52:	e10b      	b.n	800616c <HAL_I2C_Mem_Read+0x418>
                }
                /* Two bytes */
                else if (hi2c->XferSize == 2U) {
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d14e      	bne.n	8005ffa <HAL_I2C_Mem_Read+0x2a6>
                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f62:	2200      	movs	r2, #0
 8005f64:	4906      	ldr	r1, [pc, #24]	@ (8005f80 <HAL_I2C_Mem_Read+0x22c>)
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f000 fa98 	bl	800649c <I2C_WaitOnFlagUntilTimeout>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d008      	beq.n	8005f84 <HAL_I2C_Mem_Read+0x230>
                        return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e10e      	b.n	8006194 <HAL_I2C_Mem_Read+0x440>
 8005f76:	bf00      	nop
 8005f78:	00100002 	.word	0x00100002
 8005f7c:	ffff0000 	.word	0xffff0000
 8005f80:	00010004 	.word	0x00010004
                    }

                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f92:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	691a      	ldr	r2, [r3, #16]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f9e:	b2d2      	uxtb	r2, r2
 8005fa0:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa6:	1c5a      	adds	r2, r3, #1
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	851a      	strh	r2, [r3, #40]	@ 0x28
                    hi2c->XferCount--;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	691a      	ldr	r2, [r3, #16]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd0:	b2d2      	uxtb	r2, r2
 8005fd2:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd8:	1c5a      	adds	r2, r3, #1
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	851a      	strh	r2, [r3, #40]	@ 0x28
                    hi2c->XferCount--;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005ff8:	e0b8      	b.n	800616c <HAL_I2C_Mem_Read+0x418>
                }
                /* 3 Last bytes */
                else {
                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006000:	2200      	movs	r2, #0
 8006002:	4966      	ldr	r1, [pc, #408]	@ (800619c <HAL_I2C_Mem_Read+0x448>)
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f000 fa49 	bl	800649c <I2C_WaitOnFlagUntilTimeout>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d001      	beq.n	8006014 <HAL_I2C_Mem_Read+0x2c0>
                        return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e0bf      	b.n	8006194 <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Disable Acknowledge */
                    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006022:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	691a      	ldr	r2, [r3, #16]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800602e:	b2d2      	uxtb	r2, r2
 8006030:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006036:	1c5a      	adds	r2, r3, #1
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006040:	3b01      	subs	r3, #1
 8006042:	b29a      	uxth	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	851a      	strh	r2, [r3, #40]	@ 0x28
                    hi2c->XferCount--;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800604c:	b29b      	uxth	r3, r3
 800604e:	3b01      	subs	r3, #1
 8006050:	b29a      	uxth	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	855a      	strh	r2, [r3, #42]	@ 0x2a

                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 8006056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800605c:	2200      	movs	r2, #0
 800605e:	494f      	ldr	r1, [pc, #316]	@ (800619c <HAL_I2C_Mem_Read+0x448>)
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f000 fa1b 	bl	800649c <I2C_WaitOnFlagUntilTimeout>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d001      	beq.n	8006070 <HAL_I2C_Mem_Read+0x31c>
                        return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e091      	b.n	8006194 <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800607e:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	691a      	ldr	r2, [r3, #16]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800608a:	b2d2      	uxtb	r2, r2
 800608c:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800609c:	3b01      	subs	r3, #1
 800609e:	b29a      	uxth	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	851a      	strh	r2, [r3, #40]	@ 0x28
                    hi2c->XferCount--;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	3b01      	subs	r3, #1
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	691a      	ldr	r2, [r3, #16]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060bc:	b2d2      	uxtb	r2, r2
 80060be:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c4:	1c5a      	adds	r2, r3, #1
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ce:	3b01      	subs	r3, #1
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	851a      	strh	r2, [r3, #40]	@ 0x28
                    hi2c->XferCount--;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060da:	b29b      	uxth	r3, r3
 80060dc:	3b01      	subs	r3, #1
 80060de:	b29a      	uxth	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80060e4:	e042      	b.n	800616c <HAL_I2C_Mem_Read+0x418>
                }
            } else {
                /* Wait until RXNE flag is set */
                if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 80060e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f000 fb2e 	bl	800674c <I2C_WaitOnRXNEFlagUntilTimeout>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <HAL_I2C_Mem_Read+0x3a6>
                    return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e04c      	b.n	8006194 <HAL_I2C_Mem_Read+0x440>
                }

                /* Read data from DR */
                *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	691a      	ldr	r2, [r3, #16]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006104:	b2d2      	uxtb	r2, r2
 8006106:	701a      	strb	r2, [r3, #0]

                /* Increment Buffer pointer */
                hi2c->pBuffPtr++;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800610c:	1c5a      	adds	r2, r3, #1
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	625a      	str	r2, [r3, #36]	@ 0x24

                /* Update counter */
                hi2c->XferSize--;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006116:	3b01      	subs	r3, #1
 8006118:	b29a      	uxth	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	851a      	strh	r2, [r3, #40]	@ 0x28
                hi2c->XferCount--;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006122:	b29b      	uxth	r3, r3
 8006124:	3b01      	subs	r3, #1
 8006126:	b29a      	uxth	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	855a      	strh	r2, [r3, #42]	@ 0x2a

                if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) {
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	f003 0304 	and.w	r3, r3, #4
 8006136:	2b04      	cmp	r3, #4
 8006138:	d118      	bne.n	800616c <HAL_I2C_Mem_Read+0x418>
                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	691a      	ldr	r2, [r3, #16]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006144:	b2d2      	uxtb	r2, r2
 8006146:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800614c:	1c5a      	adds	r2, r3, #1
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006156:	3b01      	subs	r3, #1
 8006158:	b29a      	uxth	r2, r3
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	851a      	strh	r2, [r3, #40]	@ 0x28
                    hi2c->XferCount--;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006162:	b29b      	uxth	r3, r3
 8006164:	3b01      	subs	r3, #1
 8006166:	b29a      	uxth	r2, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        while (hi2c->XferSize > 0U) {
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006170:	2b00      	cmp	r3, #0
 8006172:	f47f aec2 	bne.w	8005efa <HAL_I2C_Mem_Read+0x1a6>
                }
            }
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2220      	movs	r2, #32
 800617a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800618e:	2300      	movs	r3, #0
 8006190:	e000      	b.n	8006194 <HAL_I2C_Mem_Read+0x440>
    } else {
        return HAL_BUSY;
 8006192:	2302      	movs	r3, #2
    }
}
 8006194:	4618      	mov	r0, r3
 8006196:	3728      	adds	r7, #40	@ 0x28
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	00010004 	.word	0x00010004

080061a0 <I2C_RequestMemoryWrite>:
 * @param  MemAddSize Size of internal memory address
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart) {
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b088      	sub	sp, #32
 80061a4:	af02      	add	r7, sp, #8
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	4608      	mov	r0, r1
 80061aa:	4611      	mov	r1, r2
 80061ac:	461a      	mov	r2, r3
 80061ae:	4603      	mov	r3, r0
 80061b0:	817b      	strh	r3, [r7, #10]
 80061b2:	460b      	mov	r3, r1
 80061b4:	813b      	strh	r3, [r7, #8]
 80061b6:	4613      	mov	r3, r2
 80061b8:	80fb      	strh	r3, [r7, #6]
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061c8:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 80061ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	6a3b      	ldr	r3, [r7, #32]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f000 f960 	bl	800649c <I2C_WaitOnFlagUntilTimeout>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00d      	beq.n	80061fe <I2C_RequestMemoryWrite+0x5e>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061f0:	d103      	bne.n	80061fa <I2C_RequestMemoryWrite+0x5a>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061f8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e05f      	b.n	80062be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061fe:	897b      	ldrh	r3, [r7, #10]
 8006200:	b2db      	uxtb	r3, r3
 8006202:	461a      	mov	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800620c:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 800620e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006210:	6a3a      	ldr	r2, [r7, #32]
 8006212:	492d      	ldr	r1, [pc, #180]	@ (80062c8 <I2C_RequestMemoryWrite+0x128>)
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 f998 	bl	800654a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d001      	beq.n	8006224 <I2C_RequestMemoryWrite+0x84>
        return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e04c      	b.n	80062be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006224:	2300      	movs	r3, #0
 8006226:	617b      	str	r3, [r7, #20]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	617b      	str	r3, [r7, #20]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	617b      	str	r3, [r7, #20]
 8006238:	697b      	ldr	r3, [r7, #20]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 800623a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800623c:	6a39      	ldr	r1, [r7, #32]
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 fa02 	bl	8006648 <I2C_WaitOnTXEFlagUntilTimeout>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00d      	beq.n	8006266 <I2C_RequestMemoryWrite+0xc6>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800624e:	2b04      	cmp	r3, #4
 8006250:	d107      	bne.n	8006262 <I2C_RequestMemoryWrite+0xc2>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006260:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e02b      	b.n	80062be <I2C_RequestMemoryWrite+0x11e>
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 8006266:	88fb      	ldrh	r3, [r7, #6]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d105      	bne.n	8006278 <I2C_RequestMemoryWrite+0xd8>
        /* Send Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800626c:	893b      	ldrh	r3, [r7, #8]
 800626e:	b2da      	uxtb	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	611a      	str	r2, [r3, #16]
 8006276:	e021      	b.n	80062bc <I2C_RequestMemoryWrite+0x11c>
    }
    /* If Memory address size is 16Bit */
    else {
        /* Send MSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006278:	893b      	ldrh	r3, [r7, #8]
 800627a:	0a1b      	lsrs	r3, r3, #8
 800627c:	b29b      	uxth	r3, r3
 800627e:	b2da      	uxtb	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	611a      	str	r2, [r3, #16]

        /* Wait until TXE flag is set */
        if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8006286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006288:	6a39      	ldr	r1, [r7, #32]
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f000 f9dc 	bl	8006648 <I2C_WaitOnTXEFlagUntilTimeout>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00d      	beq.n	80062b2 <I2C_RequestMemoryWrite+0x112>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800629a:	2b04      	cmp	r3, #4
 800629c:	d107      	bne.n	80062ae <I2C_RequestMemoryWrite+0x10e>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062ac:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e005      	b.n	80062be <I2C_RequestMemoryWrite+0x11e>
        }

        /* Send LSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062b2:	893b      	ldrh	r3, [r7, #8]
 80062b4:	b2da      	uxtb	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	611a      	str	r2, [r3, #16]
    }

    return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3718      	adds	r7, #24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	00010002 	.word	0x00010002

080062cc <I2C_RequestMemoryRead>:
 * @param  MemAddSize Size of internal memory address
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart) {
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b088      	sub	sp, #32
 80062d0:	af02      	add	r7, sp, #8
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	4608      	mov	r0, r1
 80062d6:	4611      	mov	r1, r2
 80062d8:	461a      	mov	r2, r3
 80062da:	4603      	mov	r3, r0
 80062dc:	817b      	strh	r3, [r7, #10]
 80062de:	460b      	mov	r3, r1
 80062e0:	813b      	strh	r3, [r7, #8]
 80062e2:	4613      	mov	r3, r2
 80062e4:	80fb      	strh	r3, [r7, #6]
    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80062f4:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006304:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 8006306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	2200      	movs	r2, #0
 800630e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f000 f8c2 	bl	800649c <I2C_WaitOnFlagUntilTimeout>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00d      	beq.n	800633a <I2C_RequestMemoryRead+0x6e>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006328:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800632c:	d103      	bne.n	8006336 <I2C_RequestMemoryRead+0x6a>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006334:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e0aa      	b.n	8006490 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800633a:	897b      	ldrh	r3, [r7, #10]
 800633c:	b2db      	uxtb	r3, r3
 800633e:	461a      	mov	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006348:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 800634a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634c:	6a3a      	ldr	r2, [r7, #32]
 800634e:	4952      	ldr	r1, [pc, #328]	@ (8006498 <I2C_RequestMemoryRead+0x1cc>)
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 f8fa 	bl	800654a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <I2C_RequestMemoryRead+0x94>
        return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e097      	b.n	8006490 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006360:	2300      	movs	r3, #0
 8006362:	617b      	str	r3, [r7, #20]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	617b      	str	r3, [r7, #20]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	617b      	str	r3, [r7, #20]
 8006374:	697b      	ldr	r3, [r7, #20]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8006376:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006378:	6a39      	ldr	r1, [r7, #32]
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f000 f964 	bl	8006648 <I2C_WaitOnTXEFlagUntilTimeout>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00d      	beq.n	80063a2 <I2C_RequestMemoryRead+0xd6>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800638a:	2b04      	cmp	r3, #4
 800638c:	d107      	bne.n	800639e <I2C_RequestMemoryRead+0xd2>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800639c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e076      	b.n	8006490 <I2C_RequestMemoryRead+0x1c4>
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 80063a2:	88fb      	ldrh	r3, [r7, #6]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d105      	bne.n	80063b4 <I2C_RequestMemoryRead+0xe8>
        /* Send Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063a8:	893b      	ldrh	r3, [r7, #8]
 80063aa:	b2da      	uxtb	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	611a      	str	r2, [r3, #16]
 80063b2:	e021      	b.n	80063f8 <I2C_RequestMemoryRead+0x12c>
    }
    /* If Memory address size is 16Bit */
    else {
        /* Send MSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80063b4:	893b      	ldrh	r3, [r7, #8]
 80063b6:	0a1b      	lsrs	r3, r3, #8
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	611a      	str	r2, [r3, #16]

        /* Wait until TXE flag is set */
        if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 80063c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063c4:	6a39      	ldr	r1, [r7, #32]
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f000 f93e 	bl	8006648 <I2C_WaitOnTXEFlagUntilTimeout>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00d      	beq.n	80063ee <I2C_RequestMemoryRead+0x122>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d6:	2b04      	cmp	r3, #4
 80063d8:	d107      	bne.n	80063ea <I2C_RequestMemoryRead+0x11e>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063e8:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e050      	b.n	8006490 <I2C_RequestMemoryRead+0x1c4>
        }

        /* Send LSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063ee:	893b      	ldrh	r3, [r7, #8]
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	611a      	str	r2, [r3, #16]
    }

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 80063f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063fa:	6a39      	ldr	r1, [r7, #32]
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 f923 	bl	8006648 <I2C_WaitOnTXEFlagUntilTimeout>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00d      	beq.n	8006424 <I2C_RequestMemoryRead+0x158>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800640c:	2b04      	cmp	r3, #4
 800640e:	d107      	bne.n	8006420 <I2C_RequestMemoryRead+0x154>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800641e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e035      	b.n	8006490 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006432:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 8006434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	2200      	movs	r2, #0
 800643c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f000 f82b 	bl	800649c <I2C_WaitOnFlagUntilTimeout>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00d      	beq.n	8006468 <I2C_RequestMemoryRead+0x19c>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800645a:	d103      	bne.n	8006464 <I2C_RequestMemoryRead+0x198>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006462:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e013      	b.n	8006490 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006468:	897b      	ldrh	r3, [r7, #10]
 800646a:	b2db      	uxtb	r3, r3
 800646c:	f043 0301 	orr.w	r3, r3, #1
 8006470:	b2da      	uxtb	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 8006478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647a:	6a3a      	ldr	r2, [r7, #32]
 800647c:	4906      	ldr	r1, [pc, #24]	@ (8006498 <I2C_RequestMemoryRead+0x1cc>)
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f000 f863 	bl	800654a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <I2C_RequestMemoryRead+0x1c2>
        return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e000      	b.n	8006490 <I2C_RequestMemoryRead+0x1c4>
    }

    return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3718      	adds	r7, #24
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	00010002 	.word	0x00010002

0800649c <I2C_WaitOnFlagUntilTimeout>:
 * @param  Status The new Flag status (SET or RESET).
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart) {
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	603b      	str	r3, [r7, #0]
 80064a8:	4613      	mov	r3, r2
 80064aa:	71fb      	strb	r3, [r7, #7]
    /* Wait until flag is set */
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 80064ac:	e025      	b.n	80064fa <I2C_WaitOnFlagUntilTimeout+0x5e>
        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b4:	d021      	beq.n	80064fa <I2C_WaitOnFlagUntilTimeout+0x5e>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 80064b6:	f7fe f969 	bl	800478c <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	683a      	ldr	r2, [r7, #0]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d302      	bcc.n	80064cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d116      	bne.n	80064fa <I2C_WaitOnFlagUntilTimeout+0x5e>
                hi2c->PreviousState = I2C_STATE_NONE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	631a      	str	r2, [r3, #48]	@ 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2220      	movs	r2, #32
 80064d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e6:	f043 0220 	orr.w	r2, r3, #32
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	641a      	str	r2, [r3, #64]	@ 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

                return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e023      	b.n	8006542 <I2C_WaitOnFlagUntilTimeout+0xa6>
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	0c1b      	lsrs	r3, r3, #16
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b01      	cmp	r3, #1
 8006502:	d10d      	bne.n	8006520 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	43da      	mvns	r2, r3
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	4013      	ands	r3, r2
 8006510:	b29b      	uxth	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	bf0c      	ite	eq
 8006516:	2301      	moveq	r3, #1
 8006518:	2300      	movne	r3, #0
 800651a:	b2db      	uxtb	r3, r3
 800651c:	461a      	mov	r2, r3
 800651e:	e00c      	b.n	800653a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	43da      	mvns	r2, r3
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	4013      	ands	r3, r2
 800652c:	b29b      	uxth	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	bf0c      	ite	eq
 8006532:	2301      	moveq	r3, #1
 8006534:	2300      	movne	r3, #0
 8006536:	b2db      	uxtb	r3, r3
 8006538:	461a      	mov	r2, r3
 800653a:	79fb      	ldrb	r3, [r7, #7]
 800653c:	429a      	cmp	r2, r3
 800653e:	d0b6      	beq.n	80064ae <I2C_WaitOnFlagUntilTimeout+0x12>
            }
        }
    }
    return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 * @param  Flag specifies the I2C flag to check.
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart) {
 800654a:	b580      	push	{r7, lr}
 800654c:	b084      	sub	sp, #16
 800654e:	af00      	add	r7, sp, #0
 8006550:	60f8      	str	r0, [r7, #12]
 8006552:	60b9      	str	r1, [r7, #8]
 8006554:	607a      	str	r2, [r7, #4]
 8006556:	603b      	str	r3, [r7, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 8006558:	e051      	b.n	80065fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	695b      	ldr	r3, [r3, #20]
 8006560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006564:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006568:	d123      	bne.n	80065b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006578:	601a      	str	r2, [r3, #0]

            /* Clear AF Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006582:	615a      	str	r2, [r3, #20]

            hi2c->PreviousState = I2C_STATE_NONE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	631a      	str	r2, [r3, #48]	@ 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2220      	movs	r2, #32
 800658e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800659e:	f043 0204 	orr.w	r2, r3, #4
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e046      	b.n	8006640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b8:	d021      	beq.n	80065fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 80065ba:	f7fe f8e7 	bl	800478c <HAL_GetTick>
 80065be:	4602      	mov	r2, r0
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d302      	bcc.n	80065d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d116      	bne.n	80065fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
                hi2c->PreviousState = I2C_STATE_NONE;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	631a      	str	r2, [r3, #48]	@ 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2220      	movs	r2, #32
 80065da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ea:	f043 0220 	orr.w	r2, r3, #32
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	641a      	str	r2, [r3, #64]	@ 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

                return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e020      	b.n	8006640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	0c1b      	lsrs	r3, r3, #16
 8006602:	b2db      	uxtb	r3, r3
 8006604:	2b01      	cmp	r3, #1
 8006606:	d10c      	bne.n	8006622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	43da      	mvns	r2, r3
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	4013      	ands	r3, r2
 8006614:	b29b      	uxth	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	bf14      	ite	ne
 800661a:	2301      	movne	r3, #1
 800661c:	2300      	moveq	r3, #0
 800661e:	b2db      	uxtb	r3, r3
 8006620:	e00b      	b.n	800663a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	43da      	mvns	r2, r3
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	4013      	ands	r3, r2
 800662e:	b29b      	uxth	r3, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	bf14      	ite	ne
 8006634:	2301      	movne	r3, #1
 8006636:	2300      	moveq	r3, #0
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d18d      	bne.n	800655a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
            }
        }
    }
    return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <I2C_WaitOnTXEFlagUntilTimeout>:
 *                the configuration information for the specified I2C.
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout, uint32_t Tickstart) {
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 8006654:	e02d      	b.n	80066b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
        /* Check if a NACK is detected */
        if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f000 f8ce 	bl	80067f8 <I2C_IsAcknowledgeFailed>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d001      	beq.n	8006666 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
            return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e02d      	b.n	80066c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666c:	d021      	beq.n	80066b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 800666e:	f7fe f88d 	bl	800478c <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	429a      	cmp	r2, r3
 800667c:	d302      	bcc.n	8006684 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d116      	bne.n	80066b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
                hi2c->PreviousState = I2C_STATE_NONE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	631a      	str	r2, [r3, #48]	@ 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2220      	movs	r2, #32
 800668e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800669e:	f043 0220 	orr.w	r2, r3, #32
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	641a      	str	r2, [r3, #64]	@ 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

                return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e007      	b.n	80066c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066bc:	2b80      	cmp	r3, #128	@ 0x80
 80066be:	d1ca      	bne.n	8006656 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
            }
        }
    }
    return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <I2C_WaitOnBTFFlagUntilTimeout>:
 *                the configuration information for the specified I2C.
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout, uint32_t Tickstart) {
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b084      	sub	sp, #16
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	60f8      	str	r0, [r7, #12]
 80066d2:	60b9      	str	r1, [r7, #8]
 80066d4:	607a      	str	r2, [r7, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET) {
 80066d6:	e02d      	b.n	8006734 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
        /* Check if a NACK is detected */
        if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 f88d 	bl	80067f8 <I2C_IsAcknowledgeFailed>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d001      	beq.n	80066e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
            return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e02d      	b.n	8006744 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ee:	d021      	beq.n	8006734 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 80066f0:	f7fe f84c 	bl	800478c <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d302      	bcc.n	8006706 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d116      	bne.n	8006734 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
                hi2c->PreviousState = I2C_STATE_NONE;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	631a      	str	r2, [r3, #48]	@ 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2220      	movs	r2, #32
 8006710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006720:	f043 0220 	orr.w	r2, r3, #32
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	641a      	str	r2, [r3, #64]	@ 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

                return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e007      	b.n	8006744 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET) {
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	f003 0304 	and.w	r3, r3, #4
 800673e:	2b04      	cmp	r3, #4
 8006740:	d1ca      	bne.n	80066d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
            }
        }
    }
    return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <I2C_WaitOnRXNEFlagUntilTimeout>:
 *                the configuration information for the specified I2C.
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout, uint32_t Tickstart) {
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]

    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 8006758:	e042      	b.n	80067e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
        /* Check if a STOPF is detected */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) {
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	f003 0310 	and.w	r3, r3, #16
 8006764:	2b10      	cmp	r3, #16
 8006766:	d119      	bne.n	800679c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f06f 0210 	mvn.w	r2, #16
 8006770:	615a      	str	r2, [r3, #20]

            hi2c->PreviousState = I2C_STATE_NONE;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	631a      	str	r2, [r3, #48]	@ 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2220      	movs	r2, #32
 800677c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_NONE;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e029      	b.n	80067f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
        }

        /* Check for the Timeout */
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 800679c:	f7fd fff6 	bl	800478c <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	68ba      	ldr	r2, [r7, #8]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d302      	bcc.n	80067b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d116      	bne.n	80067e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
            hi2c->PreviousState = I2C_STATE_NONE;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	631a      	str	r2, [r3, #48]	@ 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2220      	movs	r2, #32
 80067bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067cc:	f043 0220 	orr.w	r2, r3, #32
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e007      	b.n	80067f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	695b      	ldr	r3, [r3, #20]
 80067e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ea:	2b40      	cmp	r3, #64	@ 0x40
 80067ec:	d1b5      	bne.n	800675a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
        }
    }
    return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3710      	adds	r7, #16
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <I2C_IsAcknowledgeFailed>:
 * @brief  This function handles Acknowledge failed detection during an I2C Communication.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef * hi2c) {
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800680a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800680e:	d11b      	bne.n	8006848 <I2C_IsAcknowledgeFailed+0x50>
        /* Clear NACKF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006818:	615a      	str	r2, [r3, #20]

        hi2c->PreviousState = I2C_STATE_NONE;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2220      	movs	r2, #32
 8006824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006834:	f043 0204 	orr.w	r2, r3, #4
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e000      	b.n	800684a <I2C_IsAcknowledgeFailed+0x52>
    }
    return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <HAL_PCD_Init>:
 * @brief  Initializes the PCD according to the specified
 *         parameters in the PCD_InitTypeDef and initialize the associated handle.
 * @param  hpcd PCD handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef * hpcd) {
 8006856:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006858:	b08f      	sub	sp, #60	@ 0x3c
 800685a:	af0a      	add	r7, sp, #40	@ 0x28
 800685c:	6078      	str	r0, [r7, #4]
    USB_OTG_GlobalTypeDef * USBx;
    uint8_t i;

    /* Check the PCD handle allocation */
    if (hpcd == NULL) {
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d101      	bne.n	8006868 <HAL_PCD_Init+0x12>
        return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e10f      	b.n	8006a88 <HAL_PCD_Init+0x232>
    }

    /* Check the parameters */
    assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

    USBx = hpcd->Instance;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	60bb      	str	r3, [r7, #8]

    if (hpcd->State == HAL_PCD_STATE_RESET) {
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d106      	bne.n	8006888 <HAL_PCD_Init+0x32>
        /* Allocate lock resource and initialize it */
        hpcd->Lock = HAL_UNLOCKED;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

        /* Init the low level hardware */
        hpcd->MspInitCallback(hpcd);
#else
        /* Init the low level hardware : GPIO, CLOCK, NVIC... */
        HAL_PCD_MspInit(hpcd);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f009 fac4 	bl	800fe10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
    }

    hpcd->State = HAL_PCD_STATE_BUSY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2203      	movs	r2, #3
 800688c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

    /* Disable DMA mode for FS instance */
    if ((USBx->CID & (0x1U << 8)) == 0U) {
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006898:	2b00      	cmp	r3, #0
 800689a:	d102      	bne.n	80068a2 <HAL_PCD_Init+0x4c>
        hpcd->Init.dma_enable = 0U;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	611a      	str	r2, [r3, #16]
    }

    /* Disable the Interrupts */
    __HAL_PCD_DISABLE(hpcd);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f003 f95f 	bl	8009b6a <USB_DisableGlobalInt>

    /*Init the Core (common init.) */
    if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK) {
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	603b      	str	r3, [r7, #0]
 80068b2:	687e      	ldr	r6, [r7, #4]
 80068b4:	466d      	mov	r5, sp
 80068b6:	f106 0410 	add.w	r4, r6, #16
 80068ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80068be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80068c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80068c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80068ca:	1d33      	adds	r3, r6, #4
 80068cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068ce:	6838      	ldr	r0, [r7, #0]
 80068d0:	f003 f836 	bl	8009940 <USB_CoreInit>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d005      	beq.n	80068e6 <HAL_PCD_Init+0x90>
        hpcd->State = HAL_PCD_STATE_ERROR;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2202      	movs	r2, #2
 80068de:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
        return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e0d0      	b.n	8006a88 <HAL_PCD_Init+0x232>
    }

    /* Force Device Mode*/
    (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2100      	movs	r1, #0
 80068ec:	4618      	mov	r0, r3
 80068ee:	f003 f94d 	bl	8009b8c <USB_SetCurrentMode>

    /* Init endpoints structures */
    for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 80068f2:	2300      	movs	r3, #0
 80068f4:	73fb      	strb	r3, [r7, #15]
 80068f6:	e04a      	b.n	800698e <HAL_PCD_Init+0x138>
        /* Init ep structure */
        hpcd->IN_ep[i].is_in = 1U;
 80068f8:	7bfa      	ldrb	r2, [r7, #15]
 80068fa:	6879      	ldr	r1, [r7, #4]
 80068fc:	4613      	mov	r3, r2
 80068fe:	00db      	lsls	r3, r3, #3
 8006900:	4413      	add	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	440b      	add	r3, r1
 8006906:	333d      	adds	r3, #61	@ 0x3d
 8006908:	2201      	movs	r2, #1
 800690a:	701a      	strb	r2, [r3, #0]
        hpcd->IN_ep[i].num = i;
 800690c:	7bfa      	ldrb	r2, [r7, #15]
 800690e:	6879      	ldr	r1, [r7, #4]
 8006910:	4613      	mov	r3, r2
 8006912:	00db      	lsls	r3, r3, #3
 8006914:	4413      	add	r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	440b      	add	r3, r1
 800691a:	333c      	adds	r3, #60	@ 0x3c
 800691c:	7bfa      	ldrb	r2, [r7, #15]
 800691e:	701a      	strb	r2, [r3, #0]
        hpcd->IN_ep[i].tx_fifo_num = i;
 8006920:	7bfa      	ldrb	r2, [r7, #15]
 8006922:	7bfb      	ldrb	r3, [r7, #15]
 8006924:	b298      	uxth	r0, r3
 8006926:	6879      	ldr	r1, [r7, #4]
 8006928:	4613      	mov	r3, r2
 800692a:	00db      	lsls	r3, r3, #3
 800692c:	4413      	add	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	440b      	add	r3, r1
 8006932:	3344      	adds	r3, #68	@ 0x44
 8006934:	4602      	mov	r2, r0
 8006936:	801a      	strh	r2, [r3, #0]
        /* Control until ep is activated */
        hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006938:	7bfa      	ldrb	r2, [r7, #15]
 800693a:	6879      	ldr	r1, [r7, #4]
 800693c:	4613      	mov	r3, r2
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	4413      	add	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	440b      	add	r3, r1
 8006946:	3340      	adds	r3, #64	@ 0x40
 8006948:	2200      	movs	r2, #0
 800694a:	701a      	strb	r2, [r3, #0]
        hpcd->IN_ep[i].maxpacket = 0U;
 800694c:	7bfa      	ldrb	r2, [r7, #15]
 800694e:	6879      	ldr	r1, [r7, #4]
 8006950:	4613      	mov	r3, r2
 8006952:	00db      	lsls	r3, r3, #3
 8006954:	4413      	add	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	440b      	add	r3, r1
 800695a:	3348      	adds	r3, #72	@ 0x48
 800695c:	2200      	movs	r2, #0
 800695e:	601a      	str	r2, [r3, #0]
        hpcd->IN_ep[i].xfer_buff = 0U;
 8006960:	7bfa      	ldrb	r2, [r7, #15]
 8006962:	6879      	ldr	r1, [r7, #4]
 8006964:	4613      	mov	r3, r2
 8006966:	00db      	lsls	r3, r3, #3
 8006968:	4413      	add	r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	440b      	add	r3, r1
 800696e:	334c      	adds	r3, #76	@ 0x4c
 8006970:	2200      	movs	r2, #0
 8006972:	601a      	str	r2, [r3, #0]
        hpcd->IN_ep[i].xfer_len = 0U;
 8006974:	7bfa      	ldrb	r2, [r7, #15]
 8006976:	6879      	ldr	r1, [r7, #4]
 8006978:	4613      	mov	r3, r2
 800697a:	00db      	lsls	r3, r3, #3
 800697c:	4413      	add	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	440b      	add	r3, r1
 8006982:	3354      	adds	r3, #84	@ 0x54
 8006984:	2200      	movs	r2, #0
 8006986:	601a      	str	r2, [r3, #0]
    for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 8006988:	7bfb      	ldrb	r3, [r7, #15]
 800698a:	3301      	adds	r3, #1
 800698c:	73fb      	strb	r3, [r7, #15]
 800698e:	7bfa      	ldrb	r2, [r7, #15]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	429a      	cmp	r2, r3
 8006996:	d3af      	bcc.n	80068f8 <HAL_PCD_Init+0xa2>
    }

    for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 8006998:	2300      	movs	r3, #0
 800699a:	73fb      	strb	r3, [r7, #15]
 800699c:	e044      	b.n	8006a28 <HAL_PCD_Init+0x1d2>
        hpcd->OUT_ep[i].is_in = 0U;
 800699e:	7bfa      	ldrb	r2, [r7, #15]
 80069a0:	6879      	ldr	r1, [r7, #4]
 80069a2:	4613      	mov	r3, r2
 80069a4:	00db      	lsls	r3, r3, #3
 80069a6:	4413      	add	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	440b      	add	r3, r1
 80069ac:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 80069b0:	2200      	movs	r2, #0
 80069b2:	701a      	strb	r2, [r3, #0]
        hpcd->OUT_ep[i].num = i;
 80069b4:	7bfa      	ldrb	r2, [r7, #15]
 80069b6:	6879      	ldr	r1, [r7, #4]
 80069b8:	4613      	mov	r3, r2
 80069ba:	00db      	lsls	r3, r3, #3
 80069bc:	4413      	add	r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	440b      	add	r3, r1
 80069c2:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80069c6:	7bfa      	ldrb	r2, [r7, #15]
 80069c8:	701a      	strb	r2, [r3, #0]
        /* Control until ep is activated */
        hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80069ca:	7bfa      	ldrb	r2, [r7, #15]
 80069cc:	6879      	ldr	r1, [r7, #4]
 80069ce:	4613      	mov	r3, r2
 80069d0:	00db      	lsls	r3, r3, #3
 80069d2:	4413      	add	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	440b      	add	r3, r1
 80069d8:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80069dc:	2200      	movs	r2, #0
 80069de:	701a      	strb	r2, [r3, #0]
        hpcd->OUT_ep[i].maxpacket = 0U;
 80069e0:	7bfa      	ldrb	r2, [r7, #15]
 80069e2:	6879      	ldr	r1, [r7, #4]
 80069e4:	4613      	mov	r3, r2
 80069e6:	00db      	lsls	r3, r3, #3
 80069e8:	4413      	add	r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	440b      	add	r3, r1
 80069ee:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80069f2:	2200      	movs	r2, #0
 80069f4:	601a      	str	r2, [r3, #0]
        hpcd->OUT_ep[i].xfer_buff = 0U;
 80069f6:	7bfa      	ldrb	r2, [r7, #15]
 80069f8:	6879      	ldr	r1, [r7, #4]
 80069fa:	4613      	mov	r3, r2
 80069fc:	00db      	lsls	r3, r3, #3
 80069fe:	4413      	add	r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	440b      	add	r3, r1
 8006a04:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8006a08:	2200      	movs	r2, #0
 8006a0a:	601a      	str	r2, [r3, #0]
        hpcd->OUT_ep[i].xfer_len = 0U;
 8006a0c:	7bfa      	ldrb	r2, [r7, #15]
 8006a0e:	6879      	ldr	r1, [r7, #4]
 8006a10:	4613      	mov	r3, r2
 8006a12:	00db      	lsls	r3, r3, #3
 8006a14:	4413      	add	r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	440b      	add	r3, r1
 8006a1a:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8006a1e:	2200      	movs	r2, #0
 8006a20:	601a      	str	r2, [r3, #0]
    for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 8006a22:	7bfb      	ldrb	r3, [r7, #15]
 8006a24:	3301      	adds	r3, #1
 8006a26:	73fb      	strb	r3, [r7, #15]
 8006a28:	7bfa      	ldrb	r2, [r7, #15]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d3b5      	bcc.n	800699e <HAL_PCD_Init+0x148>
    }

    /* Init Device */
    if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK) {
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	603b      	str	r3, [r7, #0]
 8006a38:	687e      	ldr	r6, [r7, #4]
 8006a3a:	466d      	mov	r5, sp
 8006a3c:	f106 0410 	add.w	r4, r6, #16
 8006a40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a48:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006a4c:	e885 0003 	stmia.w	r5, {r0, r1}
 8006a50:	1d33      	adds	r3, r6, #4
 8006a52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a54:	6838      	ldr	r0, [r7, #0]
 8006a56:	f003 f8e5 	bl	8009c24 <USB_DevInit>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d005      	beq.n	8006a6c <HAL_PCD_Init+0x216>
        hpcd->State = HAL_PCD_STATE_ERROR;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2202      	movs	r2, #2
 8006a64:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
        return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e00d      	b.n	8006a88 <HAL_PCD_Init+0x232>
    }

    hpcd->USB_Address = 0U;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    hpcd->State = HAL_PCD_STATE_READY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    /* Activate LPM */
    if (hpcd->Init.lpm_enable == 1U) {
        (void)HAL_PCDEx_ActivateLPM(hpcd);
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    (void)USB_DevDisconnect(hpcd->Instance);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4618      	mov	r0, r3
 8006a82:	f004 fa34 	bl	800aeee <USB_DevDisconnect>

    return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a90 <HAL_PCD_Start>:
/**
 * @brief  Start the USB device
 * @param  hpcd PCD handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef * hpcd) {
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
    USB_OTG_GlobalTypeDef * USBx = hpcd->Instance;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	60fb      	str	r3, [r7, #12]

    __HAL_LOCK(hpcd);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d101      	bne.n	8006aac <HAL_PCD_Start+0x1c>
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	e020      	b.n	8006aee <HAL_PCD_Start+0x5e>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    if ((hpcd->Init.battery_charging_enable == 1U) && (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY)) {
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d109      	bne.n	8006ad0 <HAL_PCD_Start+0x40>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d005      	beq.n	8006ad0 <HAL_PCD_Start+0x40>
        /* Enable USB Transceiver */
        USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ac8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    __HAL_PCD_ENABLE(hpcd);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f003 f837 	bl	8009b48 <USB_EnableGlobalInt>
    (void)USB_DevConnect(hpcd->Instance);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f004 f9e4 	bl	800aeac <USB_DevConnect>
    __HAL_UNLOCK(hpcd);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <HAL_PCD_IRQHandler>:
/**
 * @brief  Handles PCD interrupt request.
 * @param  hpcd PCD handle
 * @retval HAL status
 */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef * hpcd) {
 8006af6:	b590      	push	{r4, r7, lr}
 8006af8:	b08d      	sub	sp, #52	@ 0x34
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
    USB_OTG_GlobalTypeDef * USBx = hpcd->Instance;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	623b      	str	r3, [r7, #32]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	61fb      	str	r3, [r7, #28]
    uint32_t epnum;
    uint32_t fifoemptymsk;
    uint32_t RegVal;

    /* ensure that we are in device mode */
    if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE) {
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f004 faa2 	bl	800b056 <USB_GetMode>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f040 848a 	bne.w	800742e <HAL_PCD_IRQHandler+0x938>
        /* avoid spurious interrupt */
        if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) {
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f004 fa06 	bl	800af30 <USB_ReadInterrupts>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 8480 	beq.w	800742c <HAL_PCD_IRQHandler+0x936>
            return;
        }

        /* store current frame number */
        hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	0a1b      	lsrs	r3, r3, #8
 8006b36:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS)) {
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4618      	mov	r0, r3
 8006b46:	f004 f9f3 	bl	800af30 <USB_ReadInterrupts>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	f003 0302 	and.w	r3, r3, #2
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d107      	bne.n	8006b64 <HAL_PCD_IRQHandler+0x6e>
            /* incorrect mode, acknowledge the interrupt */
            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	695a      	ldr	r2, [r3, #20]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f002 0202 	and.w	r2, r2, #2
 8006b62:	615a      	str	r2, [r3, #20]
        }

        /* Handle RxQLevel Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL)) {
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f004 f9e1 	bl	800af30 <USB_ReadInterrupts>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	f003 0310 	and.w	r3, r3, #16
 8006b74:	2b10      	cmp	r3, #16
 8006b76:	d161      	bne.n	8006c3c <HAL_PCD_IRQHandler+0x146>
            USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	699a      	ldr	r2, [r3, #24]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f022 0210 	bic.w	r2, r2, #16
 8006b86:	619a      	str	r2, [r3, #24]

            RegVal = USBx->GRXSTSP;
 8006b88:	6a3b      	ldr	r3, [r7, #32]
 8006b8a:	6a1b      	ldr	r3, [r3, #32]
 8006b8c:	61bb      	str	r3, [r7, #24]

            ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	f003 020f 	and.w	r2, r3, #15
 8006b94:	4613      	mov	r3, r2
 8006b96:	00db      	lsls	r3, r3, #3
 8006b98:	4413      	add	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	3304      	adds	r3, #4
 8006ba6:	617b      	str	r3, [r7, #20]

            if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_DATA_UPDT) {
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	0c5b      	lsrs	r3, r3, #17
 8006bac:	f003 030f 	and.w	r3, r3, #15
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d124      	bne.n	8006bfe <HAL_PCD_IRQHandler+0x108>
                if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U) {
 8006bb4:	69ba      	ldr	r2, [r7, #24]
 8006bb6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006bba:	4013      	ands	r3, r2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d035      	beq.n	8006c2c <HAL_PCD_IRQHandler+0x136>
                    (void)USB_ReadPacket(USBx, ep->xfer_buff, (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	6919      	ldr	r1, [r3, #16]
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	091b      	lsrs	r3, r3, #4
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	6a38      	ldr	r0, [r7, #32]
 8006bd4:	f004 f818 	bl	800ac08 <USB_ReadPacket>

                    ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	691a      	ldr	r2, [r3, #16]
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	091b      	lsrs	r3, r3, #4
 8006be0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006be4:	441a      	add	r2, r3
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	611a      	str	r2, [r3, #16]
                    ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	6a1a      	ldr	r2, [r3, #32]
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	091b      	lsrs	r3, r3, #4
 8006bf2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bf6:	441a      	add	r2, r3
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	621a      	str	r2, [r3, #32]
 8006bfc:	e016      	b.n	8006c2c <HAL_PCD_IRQHandler+0x136>
                }
            } else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT) {
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	0c5b      	lsrs	r3, r3, #17
 8006c02:	f003 030f 	and.w	r3, r3, #15
 8006c06:	2b06      	cmp	r3, #6
 8006c08:	d110      	bne.n	8006c2c <HAL_PCD_IRQHandler+0x136>
                (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8006c10:	2208      	movs	r2, #8
 8006c12:	4619      	mov	r1, r3
 8006c14:	6a38      	ldr	r0, [r7, #32]
 8006c16:	f003 fff7 	bl	800ac08 <USB_ReadPacket>
                ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	6a1a      	ldr	r2, [r3, #32]
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	091b      	lsrs	r3, r3, #4
 8006c22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c26:	441a      	add	r2, r3
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	621a      	str	r2, [r3, #32]
            } else {
                /* ... */
            }

            USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	699a      	ldr	r2, [r3, #24]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f042 0210 	orr.w	r2, r2, #16
 8006c3a:	619a      	str	r2, [r3, #24]
        }

        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT)) {
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4618      	mov	r0, r3
 8006c42:	f004 f975 	bl	800af30 <USB_ReadInterrupts>
 8006c46:	4603      	mov	r3, r0
 8006c48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006c4c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006c50:	f040 80a7 	bne.w	8006da2 <HAL_PCD_IRQHandler+0x2ac>
            epnum = 0U;
 8006c54:	2300      	movs	r3, #0
 8006c56:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Read in the device interrupt bits */
            ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f004 f97a 	bl	800af56 <USB_ReadDevAllOutEpInterrupt>
 8006c62:	62b8      	str	r0, [r7, #40]	@ 0x28

            while (ep_intr != 0U) {
 8006c64:	e099      	b.n	8006d9a <HAL_PCD_IRQHandler+0x2a4>
                if ((ep_intr & 0x1U) != 0U) {
 8006c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f000 808e 	beq.w	8006d8e <HAL_PCD_IRQHandler+0x298>
                    epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c78:	b2d2      	uxtb	r2, r2
 8006c7a:	4611      	mov	r1, r2
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f004 f99e 	bl	800afbe <USB_ReadDevOutEPInterrupt>
 8006c82:	6138      	str	r0, [r7, #16]

                    if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC) {
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00c      	beq.n	8006ca8 <HAL_PCD_IRQHandler+0x1b2>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c90:	015a      	lsls	r2, r3, #5
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	6093      	str	r3, [r2, #8]
                        (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006ca0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 fec2 	bl	8007a2c <PCD_EP_OutXfrComplete_int>
                    }

                    if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) {
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	f003 0308 	and.w	r3, r3, #8
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00c      	beq.n	8006ccc <HAL_PCD_IRQHandler+0x1d6>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb4:	015a      	lsls	r2, r3, #5
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	4413      	add	r3, r2
 8006cba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	2308      	movs	r3, #8
 8006cc2:	6093      	str	r3, [r2, #8]
                        /* Class B setup phase done for previous decoded setup */
                        (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006cc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 ff98 	bl	8007bfc <PCD_EP_OutSetupPacket_int>
                    }

                    if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS) {
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	f003 0310 	and.w	r3, r3, #16
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d008      	beq.n	8006ce8 <HAL_PCD_IRQHandler+0x1f2>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd8:	015a      	lsls	r2, r3, #5
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	4413      	add	r3, r2
 8006cde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	2310      	movs	r3, #16
 8006ce6:	6093      	str	r3, [r2, #8]
                    }

                    /* Clear OUT Endpoint disable interrupt */
                    if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD) {
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d030      	beq.n	8006d54 <HAL_PCD_IRQHandler+0x25e>
                        if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF) {
 8006cf2:	6a3b      	ldr	r3, [r7, #32]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cfa:	2b80      	cmp	r3, #128	@ 0x80
 8006cfc:	d109      	bne.n	8006d12 <HAL_PCD_IRQHandler+0x21c>
                            USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	69fa      	ldr	r2, [r7, #28]
 8006d08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d0c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006d10:	6053      	str	r3, [r2, #4]
                        }

                        ep = &hpcd->OUT_ep[epnum];
 8006d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d14:	4613      	mov	r3, r2
 8006d16:	00db      	lsls	r3, r3, #3
 8006d18:	4413      	add	r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	4413      	add	r3, r2
 8006d24:	3304      	adds	r3, #4
 8006d26:	617b      	str	r3, [r7, #20]

                        if (ep->is_iso_incomplete == 1U) {
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	78db      	ldrb	r3, [r3, #3]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d108      	bne.n	8006d42 <HAL_PCD_IRQHandler+0x24c>
                            ep->is_iso_incomplete = 0U;
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	2200      	movs	r2, #0
 8006d34:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                            hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
                            HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f009 f963 	bl	8010008 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
                        }

                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d44:	015a      	lsls	r2, r3, #5
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d4e:	461a      	mov	r2, r3
 8006d50:	2302      	movs	r3, #2
 8006d52:	6093      	str	r3, [r2, #8]
                    }

                    /* Clear Status Phase Received interrupt */
                    if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) {
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	f003 0320 	and.w	r3, r3, #32
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d008      	beq.n	8006d70 <HAL_PCD_IRQHandler+0x27a>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	2320      	movs	r3, #32
 8006d6e:	6093      	str	r3, [r2, #8]
                    }

                    /* Clear OUT NAK interrupt */
                    if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK) {
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d009      	beq.n	8006d8e <HAL_PCD_IRQHandler+0x298>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7c:	015a      	lsls	r2, r3, #5
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	4413      	add	r3, r2
 8006d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d86:	461a      	mov	r2, r3
 8006d88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006d8c:	6093      	str	r3, [r2, #8]
                    }
                }
                epnum++;
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d90:	3301      	adds	r3, #1
 8006d92:	627b      	str	r3, [r7, #36]	@ 0x24
                ep_intr >>= 1U;
 8006d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d96:	085b      	lsrs	r3, r3, #1
 8006d98:	62bb      	str	r3, [r7, #40]	@ 0x28
            while (ep_intr != 0U) {
 8006d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f47f af62 	bne.w	8006c66 <HAL_PCD_IRQHandler+0x170>
            }
        }

        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT)) {
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4618      	mov	r0, r3
 8006da8:	f004 f8c2 	bl	800af30 <USB_ReadInterrupts>
 8006dac:	4603      	mov	r3, r0
 8006dae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006db2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006db6:	f040 80db 	bne.w	8006f70 <HAL_PCD_IRQHandler+0x47a>
            /* Read in the device interrupt bits */
            ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f004 f8e3 	bl	800af8a <USB_ReadDevAllInEpInterrupt>
 8006dc4:	62b8      	str	r0, [r7, #40]	@ 0x28

            epnum = 0U;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	627b      	str	r3, [r7, #36]	@ 0x24

            while (ep_intr != 0U) {
 8006dca:	e0cd      	b.n	8006f68 <HAL_PCD_IRQHandler+0x472>
                if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f000 80c2 	beq.w	8006f5c <HAL_PCD_IRQHandler+0x466>
                {
                    epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dde:	b2d2      	uxtb	r2, r2
 8006de0:	4611      	mov	r1, r2
 8006de2:	4618      	mov	r0, r3
 8006de4:	f004 f909 	bl	800affa <USB_ReadDevInEPInterrupt>
 8006de8:	6138      	str	r0, [r7, #16]

                    if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC) {
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	f003 0301 	and.w	r3, r3, #1
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d057      	beq.n	8006ea4 <HAL_PCD_IRQHandler+0x3ae>
                        fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df6:	f003 030f 	and.w	r3, r3, #15
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8006e00:	60fb      	str	r3, [r7, #12]
                        USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	43db      	mvns	r3, r3
 8006e0e:	69f9      	ldr	r1, [r7, #28]
 8006e10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e14:	4013      	ands	r3, r2
 8006e16:	634b      	str	r3, [r1, #52]	@ 0x34

                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e1a:	015a      	lsls	r2, r3, #5
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e24:	461a      	mov	r2, r3
 8006e26:	2301      	movs	r3, #1
 8006e28:	6093      	str	r3, [r2, #8]

                        if (hpcd->Init.dma_enable == 1U) {
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d132      	bne.n	8006e98 <HAL_PCD_IRQHandler+0x3a2>
                            hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006e32:	6879      	ldr	r1, [r7, #4]
 8006e34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e36:	4613      	mov	r3, r2
 8006e38:	00db      	lsls	r3, r3, #3
 8006e3a:	4413      	add	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	440b      	add	r3, r1
 8006e40:	334c      	adds	r3, #76	@ 0x4c
 8006e42:	6819      	ldr	r1, [r3, #0]
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e48:	4613      	mov	r3, r2
 8006e4a:	00db      	lsls	r3, r3, #3
 8006e4c:	4413      	add	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4403      	add	r3, r0
 8006e52:	3348      	adds	r3, #72	@ 0x48
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4419      	add	r1, r3
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	00db      	lsls	r3, r3, #3
 8006e60:	4413      	add	r3, r2
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4403      	add	r3, r0
 8006e66:	334c      	adds	r3, #76	@ 0x4c
 8006e68:	6019      	str	r1, [r3, #0]

                            /* this is ZLP, so prepare EP0 for next setup */
                            if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U)) {
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d113      	bne.n	8006e98 <HAL_PCD_IRQHandler+0x3a2>
 8006e70:	6879      	ldr	r1, [r7, #4]
 8006e72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e74:	4613      	mov	r3, r2
 8006e76:	00db      	lsls	r3, r3, #3
 8006e78:	4413      	add	r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	440b      	add	r3, r1
 8006e7e:	3354      	adds	r3, #84	@ 0x54
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d108      	bne.n	8006e98 <HAL_PCD_IRQHandler+0x3a2>
                                /* prepare to rx more setup packets */
                                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6818      	ldr	r0, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8006e90:	461a      	mov	r2, r3
 8006e92:	2101      	movs	r1, #1
 8006e94:	f004 f910 	bl	800b0b8 <USB_EP0_OutStart>
                        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                        hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
                        HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f009 f837 	bl	800ff12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
                    }
                    if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC) {
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	f003 0308 	and.w	r3, r3, #8
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d008      	beq.n	8006ec0 <HAL_PCD_IRQHandler+0x3ca>
                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb0:	015a      	lsls	r2, r3, #5
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eba:	461a      	mov	r2, r3
 8006ebc:	2308      	movs	r3, #8
 8006ebe:	6093      	str	r3, [r2, #8]
                    }
                    if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE) {
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	f003 0310 	and.w	r3, r3, #16
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d008      	beq.n	8006edc <HAL_PCD_IRQHandler+0x3e6>
                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ecc:	015a      	lsls	r2, r3, #5
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	2310      	movs	r3, #16
 8006eda:	6093      	str	r3, [r2, #8]
                    }
                    if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE) {
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d008      	beq.n	8006ef8 <HAL_PCD_IRQHandler+0x402>
                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee8:	015a      	lsls	r2, r3, #5
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	4413      	add	r3, r2
 8006eee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	2340      	movs	r3, #64	@ 0x40
 8006ef6:	6093      	str	r3, [r2, #8]
                    }
                    if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD) {
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	f003 0302 	and.w	r3, r3, #2
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d023      	beq.n	8006f4a <HAL_PCD_IRQHandler+0x454>
                        (void)USB_FlushTxFifo(USBx, epnum);
 8006f02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f04:	6a38      	ldr	r0, [r7, #32]
 8006f06:	f002 fff1 	bl	8009eec <USB_FlushTxFifo>

                        ep = &hpcd->IN_ep[epnum];
 8006f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	00db      	lsls	r3, r3, #3
 8006f10:	4413      	add	r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	3338      	adds	r3, #56	@ 0x38
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	4413      	add	r3, r2
 8006f1a:	3304      	adds	r3, #4
 8006f1c:	617b      	str	r3, [r7, #20]

                        if (ep->is_iso_incomplete == 1U) {
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	78db      	ldrb	r3, [r3, #3]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d108      	bne.n	8006f38 <HAL_PCD_IRQHandler+0x442>
                            ep->is_iso_incomplete = 0U;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                            hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
                            HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	4619      	mov	r1, r3
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f009 f87a 	bl	801002c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
                        }

                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f3a:	015a      	lsls	r2, r3, #5
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f44:	461a      	mov	r2, r3
 8006f46:	2302      	movs	r3, #2
 8006f48:	6093      	str	r3, [r2, #8]
                    }
                    if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE) {
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d003      	beq.n	8006f5c <HAL_PCD_IRQHandler+0x466>
                        (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006f54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 fcdb 	bl	8007912 <PCD_WriteEmptyTxFifo>
                    }
                }
                epnum++;
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5e:	3301      	adds	r3, #1
 8006f60:	627b      	str	r3, [r7, #36]	@ 0x24
                ep_intr >>= 1U;
 8006f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f64:	085b      	lsrs	r3, r3, #1
 8006f66:	62bb      	str	r3, [r7, #40]	@ 0x28
            while (ep_intr != 0U) {
 8006f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f47f af2e 	bne.w	8006dcc <HAL_PCD_IRQHandler+0x2d6>
            }
        }

        /* Handle Resume Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT)) {
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4618      	mov	r0, r3
 8006f76:	f003 ffdb 	bl	800af30 <USB_ReadInterrupts>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f84:	d122      	bne.n	8006fcc <HAL_PCD_IRQHandler+0x4d6>
            /* Clear the Remote Wake-up Signaling */
            USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	69fa      	ldr	r2, [r7, #28]
 8006f90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f94:	f023 0301 	bic.w	r3, r3, #1
 8006f98:	6053      	str	r3, [r2, #4]

            if (hpcd->LPM_State == LPM_L1) {
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d108      	bne.n	8006fb6 <HAL_PCD_IRQHandler+0x4c0>
                hpcd->LPM_State = LPM_L0;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
                HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006fac:	2100      	movs	r1, #0
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fec2 	bl	8007d38 <HAL_PCDEx_LPM_Callback>
 8006fb4:	e002      	b.n	8006fbc <HAL_PCD_IRQHandler+0x4c6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            } else {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                hpcd->ResumeCallback(hpcd);
#else
                HAL_PCD_ResumeCallback(hpcd);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f009 f818 	bl	800ffec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	695a      	ldr	r2, [r3, #20]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8006fca:	615a      	str	r2, [r3, #20]
        }

        /* Handle Suspend Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP)) {
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f003 ffad 	bl	800af30 <USB_ReadInterrupts>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fe0:	d112      	bne.n	8007008 <HAL_PCD_IRQHandler+0x512>
            if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS) {
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d102      	bne.n	8006ff8 <HAL_PCD_IRQHandler+0x502>
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                hpcd->SuspendCallback(hpcd);
#else
                HAL_PCD_SuspendCallback(hpcd);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f008 ffd4 	bl	800ffa0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	695a      	ldr	r2, [r3, #20]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8007006:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
        }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
        /* Handle Reset Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST)) {
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4618      	mov	r0, r3
 800700e:	f003 ff8f 	bl	800af30 <USB_ReadInterrupts>
 8007012:	4603      	mov	r3, r0
 8007014:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007018:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800701c:	f040 80b7 	bne.w	800718e <HAL_PCD_IRQHandler+0x698>
            USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	69fa      	ldr	r2, [r7, #28]
 800702a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800702e:	f023 0301 	bic.w	r3, r3, #1
 8007032:	6053      	str	r3, [r2, #4]
            (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2110      	movs	r1, #16
 800703a:	4618      	mov	r0, r3
 800703c:	f002 ff56 	bl	8009eec <USB_FlushTxFifo>

            for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 8007040:	2300      	movs	r3, #0
 8007042:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007044:	e046      	b.n	80070d4 <HAL_PCD_IRQHandler+0x5de>
                USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007048:	015a      	lsls	r2, r3, #5
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	4413      	add	r3, r2
 800704e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007052:	461a      	mov	r2, r3
 8007054:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007058:	6093      	str	r3, [r2, #8]
                USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800705a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800705c:	015a      	lsls	r2, r3, #5
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	4413      	add	r3, r2
 8007062:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800706a:	0151      	lsls	r1, r2, #5
 800706c:	69fa      	ldr	r2, [r7, #28]
 800706e:	440a      	add	r2, r1
 8007070:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007074:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007078:	6013      	str	r3, [r2, #0]
                USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800707a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800707c:	015a      	lsls	r2, r3, #5
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	4413      	add	r3, r2
 8007082:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007086:	461a      	mov	r2, r3
 8007088:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800708c:	6093      	str	r3, [r2, #8]
                USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800708e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	4413      	add	r3, r2
 8007096:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800709e:	0151      	lsls	r1, r2, #5
 80070a0:	69fa      	ldr	r2, [r7, #28]
 80070a2:	440a      	add	r2, r1
 80070a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070a8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80070ac:	6013      	str	r3, [r2, #0]
                USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80070ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b0:	015a      	lsls	r2, r3, #5
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070be:	0151      	lsls	r1, r2, #5
 80070c0:	69fa      	ldr	r2, [r7, #28]
 80070c2:	440a      	add	r2, r1
 80070c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070c8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80070cc:	6013      	str	r3, [r2, #0]
            for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 80070ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070d0:	3301      	adds	r3, #1
 80070d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070da:	429a      	cmp	r2, r3
 80070dc:	d3b3      	bcc.n	8007046 <HAL_PCD_IRQHandler+0x550>
            }
            USBx_DEVICE->DAINTMSK |= 0x10001U;
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070e4:	69db      	ldr	r3, [r3, #28]
 80070e6:	69fa      	ldr	r2, [r7, #28]
 80070e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070ec:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80070f0:	61d3      	str	r3, [r2, #28]

            if (hpcd->Init.use_dedicated_ep1 != 0U) {
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d016      	beq.n	8007128 <HAL_PCD_IRQHandler+0x632>
                USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM;
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007100:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007104:	69fa      	ldr	r2, [r7, #28]
 8007106:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800710a:	f043 030b 	orr.w	r3, r3, #11
 800710e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

                USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM;
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800711a:	69fa      	ldr	r2, [r7, #28]
 800711c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007120:	f043 030b 	orr.w	r3, r3, #11
 8007124:	6453      	str	r3, [r2, #68]	@ 0x44
 8007126:	e015      	b.n	8007154 <HAL_PCD_IRQHandler+0x65e>
            } else {
                USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM | USB_OTG_DOEPMSK_NAKM;
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800712e:	695b      	ldr	r3, [r3, #20]
 8007130:	69fa      	ldr	r2, [r7, #28]
 8007132:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007136:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800713a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800713e:	6153      	str	r3, [r2, #20]

                USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM;
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	69fa      	ldr	r2, [r7, #28]
 800714a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800714e:	f043 030b 	orr.w	r3, r3, #11
 8007152:	6113      	str	r3, [r2, #16]
            }

            /* Set Default Address to 0 */
            USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	69fa      	ldr	r2, [r7, #28]
 800715e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007162:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007166:	6013      	str	r3, [r2, #0]

            /* setup EP0 to receive SETUP packets */
            (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6818      	ldr	r0, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	b2d9      	uxtb	r1, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007178:	461a      	mov	r2, r3
 800717a:	f003 ff9d 	bl	800b0b8 <USB_EP0_OutStart>

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	695a      	ldr	r2, [r3, #20]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800718c:	615a      	str	r2, [r3, #20]
        }

        /* Handle Enumeration done Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE)) {
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4618      	mov	r0, r3
 8007194:	f003 fecc 	bl	800af30 <USB_ReadInterrupts>
 8007198:	4603      	mov	r3, r0
 800719a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800719e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071a2:	d124      	bne.n	80071ee <HAL_PCD_IRQHandler+0x6f8>
            (void)USB_ActivateSetup(hpcd->Instance);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4618      	mov	r0, r3
 80071aa:	f003 ff62 	bl	800b072 <USB_ActivateSetup>
            hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f002 ff17 	bl	8009fe6 <USB_GetDevSpeed>
 80071b8:	4603      	mov	r3, r0
 80071ba:	461a      	mov	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	60da      	str	r2, [r3, #12]

            /* Set USB Turnaround time */
            (void)USB_SetTurnaroundTime(hpcd->Instance, HAL_RCC_GetHCLKFreq(), (uint8_t)hpcd->Init.speed);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681c      	ldr	r4, [r3, #0]
 80071c4:	f001 f9e8 	bl	8008598 <HAL_RCC_GetHCLKFreq>
 80071c8:	4601      	mov	r1, r0
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	461a      	mov	r2, r3
 80071d2:	4620      	mov	r0, r4
 80071d4:	f002 fc16 	bl	8009a04 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->ResetCallback(hpcd);
#else
            HAL_PCD_ResetCallback(hpcd);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f008 fec2 	bl	800ff62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	695a      	ldr	r2, [r3, #20]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80071ec:	615a      	str	r2, [r3, #20]
        }

        /* Handle SOF Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF)) {
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4618      	mov	r0, r3
 80071f4:	f003 fe9c 	bl	800af30 <USB_ReadInterrupts>
 80071f8:	4603      	mov	r3, r0
 80071fa:	f003 0308 	and.w	r3, r3, #8
 80071fe:	2b08      	cmp	r3, #8
 8007200:	d10a      	bne.n	8007218 <HAL_PCD_IRQHandler+0x722>
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->SOFCallback(hpcd);
#else
            HAL_PCD_SOFCallback(hpcd);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f008 fe9f 	bl	800ff46 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	695a      	ldr	r2, [r3, #20]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f002 0208 	and.w	r2, r2, #8
 8007216:	615a      	str	r2, [r3, #20]
        }

        /* Handle Global OUT NAK effective Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF)) {
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4618      	mov	r0, r3
 800721e:	f003 fe87 	bl	800af30 <USB_ReadInterrupts>
 8007222:	4603      	mov	r3, r0
 8007224:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007228:	2b80      	cmp	r3, #128	@ 0x80
 800722a:	d122      	bne.n	8007272 <HAL_PCD_IRQHandler+0x77c>
            USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800722c:	6a3b      	ldr	r3, [r7, #32]
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007234:	6a3b      	ldr	r3, [r7, #32]
 8007236:	619a      	str	r2, [r3, #24]

            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 8007238:	2301      	movs	r3, #1
 800723a:	627b      	str	r3, [r7, #36]	@ 0x24
 800723c:	e014      	b.n	8007268 <HAL_PCD_IRQHandler+0x772>
                if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U) {
 800723e:	6879      	ldr	r1, [r7, #4]
 8007240:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007242:	4613      	mov	r3, r2
 8007244:	00db      	lsls	r3, r3, #3
 8007246:	4413      	add	r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	440b      	add	r3, r1
 800724c:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	2b01      	cmp	r3, #1
 8007254:	d105      	bne.n	8007262 <HAL_PCD_IRQHandler+0x76c>
                    /* Abort current transaction and disable the EP */
                    (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007258:	b2db      	uxtb	r3, r3
 800725a:	4619      	mov	r1, r3
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fb27 	bl	80078b0 <HAL_PCD_EP_Abort>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 8007262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007264:	3301      	adds	r3, #1
 8007266:	627b      	str	r3, [r7, #36]	@ 0x24
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800726e:	429a      	cmp	r2, r3
 8007270:	d3e5      	bcc.n	800723e <HAL_PCD_IRQHandler+0x748>
                }
            }
        }

        /* Handle Incomplete ISO IN Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR)) {
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4618      	mov	r0, r3
 8007278:	f003 fe5a 	bl	800af30 <USB_ReadInterrupts>
 800727c:	4603      	mov	r3, r0
 800727e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007282:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007286:	d13b      	bne.n	8007300 <HAL_PCD_IRQHandler+0x80a>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 8007288:	2301      	movs	r3, #1
 800728a:	627b      	str	r3, [r7, #36]	@ 0x24
 800728c:	e02b      	b.n	80072e6 <HAL_PCD_IRQHandler+0x7f0>
                RegVal = USBx_INEP(epnum)->DIEPCTL;
 800728e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007290:	015a      	lsls	r2, r3, #5
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	4413      	add	r3, r2
 8007296:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	61bb      	str	r3, [r7, #24]

                if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) && ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)) {
 800729e:	6879      	ldr	r1, [r7, #4]
 80072a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072a2:	4613      	mov	r3, r2
 80072a4:	00db      	lsls	r3, r3, #3
 80072a6:	4413      	add	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	440b      	add	r3, r1
 80072ac:	3340      	adds	r3, #64	@ 0x40
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d115      	bne.n	80072e0 <HAL_PCD_IRQHandler+0x7ea>
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	da12      	bge.n	80072e0 <HAL_PCD_IRQHandler+0x7ea>
                    hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80072ba:	6879      	ldr	r1, [r7, #4]
 80072bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072be:	4613      	mov	r3, r2
 80072c0:	00db      	lsls	r3, r3, #3
 80072c2:	4413      	add	r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	440b      	add	r3, r1
 80072c8:	333f      	adds	r3, #63	@ 0x3f
 80072ca:	2201      	movs	r2, #1
 80072cc:	701a      	strb	r2, [r3, #0]

                    /* Abort current transaction and disable the EP */
                    (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80072ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	4619      	mov	r1, r3
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fae8 	bl	80078b0 <HAL_PCD_EP_Abort>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 80072e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e2:	3301      	adds	r3, #1
 80072e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d3ce      	bcc.n	800728e <HAL_PCD_IRQHandler+0x798>
                }
            }

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	695a      	ldr	r2, [r3, #20]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80072fe:	615a      	str	r2, [r3, #20]
        }

        /* Handle Incomplete ISO OUT Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT)) {
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4618      	mov	r0, r3
 8007306:	f003 fe13 	bl	800af30 <USB_ReadInterrupts>
 800730a:	4603      	mov	r3, r0
 800730c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007310:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007314:	d155      	bne.n	80073c2 <HAL_PCD_IRQHandler+0x8cc>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 8007316:	2301      	movs	r3, #1
 8007318:	627b      	str	r3, [r7, #36]	@ 0x24
 800731a:	e045      	b.n	80073a8 <HAL_PCD_IRQHandler+0x8b2>
                RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800731c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731e:	015a      	lsls	r2, r3, #5
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	4413      	add	r3, r2
 8007324:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	61bb      	str	r3, [r7, #24]

                if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) && ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) && ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U))) {
 800732c:	6879      	ldr	r1, [r7, #4]
 800732e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007330:	4613      	mov	r3, r2
 8007332:	00db      	lsls	r3, r3, #3
 8007334:	4413      	add	r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	440b      	add	r3, r1
 800733a:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d12e      	bne.n	80073a2 <HAL_PCD_IRQHandler+0x8ac>
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	2b00      	cmp	r3, #0
 8007348:	da2b      	bge.n	80073a2 <HAL_PCD_IRQHandler+0x8ac>
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	429a      	cmp	r2, r3
 800735c:	d121      	bne.n	80073a2 <HAL_PCD_IRQHandler+0x8ac>
                    hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800735e:	6879      	ldr	r1, [r7, #4]
 8007360:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007362:	4613      	mov	r3, r2
 8007364:	00db      	lsls	r3, r3, #3
 8007366:	4413      	add	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	440b      	add	r3, r1
 800736c:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8007370:	2201      	movs	r2, #1
 8007372:	701a      	strb	r2, [r3, #0]

                    USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007374:	6a3b      	ldr	r3, [r7, #32]
 8007376:	699b      	ldr	r3, [r3, #24]
 8007378:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800737c:	6a3b      	ldr	r3, [r7, #32]
 800737e:	619a      	str	r2, [r3, #24]

                    if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U) {
 8007380:	6a3b      	ldr	r3, [r7, #32]
 8007382:	695b      	ldr	r3, [r3, #20]
 8007384:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007388:	2b00      	cmp	r3, #0
 800738a:	d10a      	bne.n	80073a2 <HAL_PCD_IRQHandler+0x8ac>
                        USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	69fa      	ldr	r2, [r7, #28]
 8007396:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800739a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800739e:	6053      	str	r3, [r2, #4]
                        break;
 80073a0:	e007      	b.n	80073b2 <HAL_PCD_IRQHandler+0x8bc>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 80073a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a4:	3301      	adds	r3, #1
 80073a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d3b4      	bcc.n	800731c <HAL_PCD_IRQHandler+0x826>
                    }
                }
            }

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	695a      	ldr	r2, [r3, #20]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80073c0:	615a      	str	r2, [r3, #20]
        }

        /* Handle Connection event Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT)) {
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4618      	mov	r0, r3
 80073c8:	f003 fdb2 	bl	800af30 <USB_ReadInterrupts>
 80073cc:	4603      	mov	r3, r0
 80073ce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80073d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073d6:	d10a      	bne.n	80073ee <HAL_PCD_IRQHandler+0x8f8>
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->ConnectCallback(hpcd);
#else
            HAL_PCD_ConnectCallback(hpcd);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f008 fe39 	bl	8010050 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	695a      	ldr	r2, [r3, #20]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80073ec:	615a      	str	r2, [r3, #20]
        }

        /* Handle Disconnection event Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT)) {
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4618      	mov	r0, r3
 80073f4:	f003 fd9c 	bl	800af30 <USB_ReadInterrupts>
 80073f8:	4603      	mov	r3, r0
 80073fa:	f003 0304 	and.w	r3, r3, #4
 80073fe:	2b04      	cmp	r3, #4
 8007400:	d115      	bne.n	800742e <HAL_PCD_IRQHandler+0x938>
            RegVal = hpcd->Instance->GOTGINT;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	61bb      	str	r3, [r7, #24]

            if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET) {
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	f003 0304 	and.w	r3, r3, #4
 8007410:	2b00      	cmp	r3, #0
 8007412:	d002      	beq.n	800741a <HAL_PCD_IRQHandler+0x924>
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                hpcd->DisconnectCallback(hpcd);
#else
                HAL_PCD_DisconnectCallback(hpcd);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f008 fe29 	bl	801006c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            hpcd->Instance->GOTGINT |= RegVal;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	6859      	ldr	r1, [r3, #4]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	69ba      	ldr	r2, [r7, #24]
 8007426:	430a      	orrs	r2, r1
 8007428:	605a      	str	r2, [r3, #4]
 800742a:	e000      	b.n	800742e <HAL_PCD_IRQHandler+0x938>
            return;
 800742c:	bf00      	nop
        }
    }
}
 800742e:	3734      	adds	r7, #52	@ 0x34
 8007430:	46bd      	mov	sp, r7
 8007432:	bd90      	pop	{r4, r7, pc}

08007434 <HAL_PCD_SetAddress>:
 * @brief  Set the USB Device address.
 * @param  hpcd PCD handle
 * @param  address new device address
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef * hpcd, uint8_t address) {
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	460b      	mov	r3, r1
 800743e:	70fb      	strb	r3, [r7, #3]
    __HAL_LOCK(hpcd);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007446:	2b01      	cmp	r3, #1
 8007448:	d101      	bne.n	800744e <HAL_PCD_SetAddress+0x1a>
 800744a:	2302      	movs	r3, #2
 800744c:	e013      	b.n	8007476 <HAL_PCD_SetAddress+0x42>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    hpcd->USB_Address = address;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	78fa      	ldrb	r2, [r7, #3]
 800745a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    (void)USB_SetDevAddress(hpcd->Instance, address);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	78fa      	ldrb	r2, [r7, #3]
 8007464:	4611      	mov	r1, r2
 8007466:	4618      	mov	r0, r3
 8007468:	f003 fcfa 	bl	800ae60 <USB_SetDevAddress>
    __HAL_UNLOCK(hpcd);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    return HAL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <HAL_PCD_EP_Open>:
 * @param  ep_addr endpoint address
 * @param  ep_mps endpoint max packet size
 * @param  ep_type endpoint type
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef * hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type) {
 800747e:	b580      	push	{r7, lr}
 8007480:	b084      	sub	sp, #16
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	4608      	mov	r0, r1
 8007488:	4611      	mov	r1, r2
 800748a:	461a      	mov	r2, r3
 800748c:	4603      	mov	r3, r0
 800748e:	70fb      	strb	r3, [r7, #3]
 8007490:	460b      	mov	r3, r1
 8007492:	803b      	strh	r3, [r7, #0]
 8007494:	4613      	mov	r3, r2
 8007496:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef ret = HAL_OK;
 8007498:	2300      	movs	r3, #0
 800749a:	72fb      	strb	r3, [r7, #11]
    PCD_EPTypeDef * ep;

    if ((ep_addr & 0x80U) == 0x80U) {
 800749c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	da0f      	bge.n	80074c4 <HAL_PCD_EP_Open+0x46>
        ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074a4:	78fb      	ldrb	r3, [r7, #3]
 80074a6:	f003 020f 	and.w	r2, r3, #15
 80074aa:	4613      	mov	r3, r2
 80074ac:	00db      	lsls	r3, r3, #3
 80074ae:	4413      	add	r3, r2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	3338      	adds	r3, #56	@ 0x38
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	4413      	add	r3, r2
 80074b8:	3304      	adds	r3, #4
 80074ba:	60fb      	str	r3, [r7, #12]
        ep->is_in = 1U;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2201      	movs	r2, #1
 80074c0:	705a      	strb	r2, [r3, #1]
 80074c2:	e00f      	b.n	80074e4 <HAL_PCD_EP_Open+0x66>
    } else {
        ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80074c4:	78fb      	ldrb	r3, [r7, #3]
 80074c6:	f003 020f 	and.w	r2, r3, #15
 80074ca:	4613      	mov	r3, r2
 80074cc:	00db      	lsls	r3, r3, #3
 80074ce:	4413      	add	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	4413      	add	r3, r2
 80074da:	3304      	adds	r3, #4
 80074dc:	60fb      	str	r3, [r7, #12]
        ep->is_in = 0U;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	705a      	strb	r2, [r3, #1]
    }

    ep->num = ep_addr & EP_ADDR_MSK;
 80074e4:	78fb      	ldrb	r3, [r7, #3]
 80074e6:	f003 030f 	and.w	r3, r3, #15
 80074ea:	b2da      	uxtb	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	701a      	strb	r2, [r3, #0]
    ep->maxpacket = ep_mps;
 80074f0:	883a      	ldrh	r2, [r7, #0]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	60da      	str	r2, [r3, #12]
    ep->type = ep_type;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	78ba      	ldrb	r2, [r7, #2]
 80074fa:	711a      	strb	r2, [r3, #4]

    if (ep->is_in != 0U) {
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	785b      	ldrb	r3, [r3, #1]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d004      	beq.n	800750e <HAL_PCD_EP_Open+0x90>
        /* Assign a Tx FIFO */
        ep->tx_fifo_num = ep->num;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	461a      	mov	r2, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	811a      	strh	r2, [r3, #8]
    }
    /* Set initial data PID. */
    if (ep_type == EP_TYPE_BULK) {
 800750e:	78bb      	ldrb	r3, [r7, #2]
 8007510:	2b02      	cmp	r3, #2
 8007512:	d102      	bne.n	800751a <HAL_PCD_EP_Open+0x9c>
        ep->data_pid_start = 0U;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2200      	movs	r2, #0
 8007518:	715a      	strb	r2, [r3, #5]
    }

    __HAL_LOCK(hpcd);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007520:	2b01      	cmp	r3, #1
 8007522:	d101      	bne.n	8007528 <HAL_PCD_EP_Open+0xaa>
 8007524:	2302      	movs	r3, #2
 8007526:	e00e      	b.n	8007546 <HAL_PCD_EP_Open+0xc8>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	68f9      	ldr	r1, [r7, #12]
 8007536:	4618      	mov	r0, r3
 8007538:	f002 fd7a 	bl	800a030 <USB_ActivateEndpoint>
    __HAL_UNLOCK(hpcd);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    return ret;
 8007544:	7afb      	ldrb	r3, [r7, #11]
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <HAL_PCD_EP_Close>:
 * @brief  Deactivate an endpoint.
 * @param  hpcd PCD handle
 * @param  ep_addr endpoint address
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef * hpcd, uint8_t ep_addr) {
 800754e:	b580      	push	{r7, lr}
 8007550:	b084      	sub	sp, #16
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	460b      	mov	r3, r1
 8007558:	70fb      	strb	r3, [r7, #3]
    PCD_EPTypeDef * ep;

    if ((ep_addr & 0x80U) == 0x80U) {
 800755a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800755e:	2b00      	cmp	r3, #0
 8007560:	da0f      	bge.n	8007582 <HAL_PCD_EP_Close+0x34>
        ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007562:	78fb      	ldrb	r3, [r7, #3]
 8007564:	f003 020f 	and.w	r2, r3, #15
 8007568:	4613      	mov	r3, r2
 800756a:	00db      	lsls	r3, r3, #3
 800756c:	4413      	add	r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	3338      	adds	r3, #56	@ 0x38
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	4413      	add	r3, r2
 8007576:	3304      	adds	r3, #4
 8007578:	60fb      	str	r3, [r7, #12]
        ep->is_in = 1U;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2201      	movs	r2, #1
 800757e:	705a      	strb	r2, [r3, #1]
 8007580:	e00f      	b.n	80075a2 <HAL_PCD_EP_Close+0x54>
    } else {
        ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007582:	78fb      	ldrb	r3, [r7, #3]
 8007584:	f003 020f 	and.w	r2, r3, #15
 8007588:	4613      	mov	r3, r2
 800758a:	00db      	lsls	r3, r3, #3
 800758c:	4413      	add	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	4413      	add	r3, r2
 8007598:	3304      	adds	r3, #4
 800759a:	60fb      	str	r3, [r7, #12]
        ep->is_in = 0U;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	705a      	strb	r2, [r3, #1]
    }
    ep->num = ep_addr & EP_ADDR_MSK;
 80075a2:	78fb      	ldrb	r3, [r7, #3]
 80075a4:	f003 030f 	and.w	r3, r3, #15
 80075a8:	b2da      	uxtb	r2, r3
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	701a      	strb	r2, [r3, #0]

    __HAL_LOCK(hpcd);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d101      	bne.n	80075bc <HAL_PCD_EP_Close+0x6e>
 80075b8:	2302      	movs	r3, #2
 80075ba:	e00e      	b.n	80075da <HAL_PCD_EP_Close+0x8c>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68f9      	ldr	r1, [r7, #12]
 80075ca:	4618      	mov	r0, r3
 80075cc:	f002 fdb8 	bl	800a140 <USB_DeactivateEndpoint>
    __HAL_UNLOCK(hpcd);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    return HAL_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <HAL_PCD_EP_Receive>:
 * @param  ep_addr endpoint address
 * @param  pBuf pointer to the reception buffer
 * @param  len amount of data to be received
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef * hpcd, uint8_t ep_addr, uint8_t * pBuf, uint32_t len) {
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b086      	sub	sp, #24
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	60f8      	str	r0, [r7, #12]
 80075ea:	607a      	str	r2, [r7, #4]
 80075ec:	603b      	str	r3, [r7, #0]
 80075ee:	460b      	mov	r3, r1
 80075f0:	72fb      	strb	r3, [r7, #11]
    PCD_EPTypeDef * ep;

    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80075f2:	7afb      	ldrb	r3, [r7, #11]
 80075f4:	f003 020f 	and.w	r2, r3, #15
 80075f8:	4613      	mov	r3, r2
 80075fa:	00db      	lsls	r3, r3, #3
 80075fc:	4413      	add	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	4413      	add	r3, r2
 8007608:	3304      	adds	r3, #4
 800760a:	617b      	str	r3, [r7, #20]

    /*setup and start the Xfer */
    ep->xfer_buff = pBuf;
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	611a      	str	r2, [r3, #16]
    ep->xfer_len = len;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	683a      	ldr	r2, [r7, #0]
 8007616:	619a      	str	r2, [r3, #24]
    ep->xfer_count = 0U;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	2200      	movs	r2, #0
 800761c:	621a      	str	r2, [r3, #32]
    ep->is_in = 0U;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	2200      	movs	r2, #0
 8007622:	705a      	strb	r2, [r3, #1]
    ep->num = ep_addr & EP_ADDR_MSK;
 8007624:	7afb      	ldrb	r3, [r7, #11]
 8007626:	f003 030f 	and.w	r3, r3, #15
 800762a:	b2da      	uxtb	r2, r3
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	701a      	strb	r2, [r3, #0]

    if (hpcd->Init.dma_enable == 1U) {
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d102      	bne.n	800763e <HAL_PCD_EP_Receive+0x5c>
        ep->dma_addr = (uint32_t)pBuf;
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	615a      	str	r2, [r3, #20]
    }

    if ((ep_addr & EP_ADDR_MSK) == 0U) {
 800763e:	7afb      	ldrb	r3, [r7, #11]
 8007640:	f003 030f 	and.w	r3, r3, #15
 8007644:	2b00      	cmp	r3, #0
 8007646:	d109      	bne.n	800765c <HAL_PCD_EP_Receive+0x7a>
        (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6818      	ldr	r0, [r3, #0]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	b2db      	uxtb	r3, r3
 8007652:	461a      	mov	r2, r3
 8007654:	6979      	ldr	r1, [r7, #20]
 8007656:	f003 f897 	bl	800a788 <USB_EP0StartXfer>
 800765a:	e008      	b.n	800766e <HAL_PCD_EP_Receive+0x8c>
    } else {
        (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6818      	ldr	r0, [r3, #0]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	b2db      	uxtb	r3, r3
 8007666:	461a      	mov	r2, r3
 8007668:	6979      	ldr	r1, [r7, #20]
 800766a:	f002 fe45 	bl	800a2f8 <USB_EPStartXfer>
    }

    return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3718      	adds	r7, #24
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <HAL_PCD_EP_GetRxCount>:
 * @brief  Get Received Data Size
 * @param  hpcd PCD handle
 * @param  ep_addr endpoint address
 * @retval Data Size
 */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef * hpcd, uint8_t ep_addr) {
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	460b      	mov	r3, r1
 8007682:	70fb      	strb	r3, [r7, #3]
    return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007684:	78fb      	ldrb	r3, [r7, #3]
 8007686:	f003 020f 	and.w	r2, r3, #15
 800768a:	6879      	ldr	r1, [r7, #4]
 800768c:	4613      	mov	r3, r2
 800768e:	00db      	lsls	r3, r3, #3
 8007690:	4413      	add	r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	440b      	add	r3, r1
 8007696:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800769a:	681b      	ldr	r3, [r3, #0]
}
 800769c:	4618      	mov	r0, r3
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <HAL_PCD_EP_Transmit>:
 * @param  ep_addr endpoint address
 * @param  pBuf pointer to the transmission buffer
 * @param  len amount of data to be sent
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef * hpcd, uint8_t ep_addr, uint8_t * pBuf, uint32_t len) {
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b086      	sub	sp, #24
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	607a      	str	r2, [r7, #4]
 80076b2:	603b      	str	r3, [r7, #0]
 80076b4:	460b      	mov	r3, r1
 80076b6:	72fb      	strb	r3, [r7, #11]
    PCD_EPTypeDef * ep;

    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076b8:	7afb      	ldrb	r3, [r7, #11]
 80076ba:	f003 020f 	and.w	r2, r3, #15
 80076be:	4613      	mov	r3, r2
 80076c0:	00db      	lsls	r3, r3, #3
 80076c2:	4413      	add	r3, r2
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	3338      	adds	r3, #56	@ 0x38
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	4413      	add	r3, r2
 80076cc:	3304      	adds	r3, #4
 80076ce:	617b      	str	r3, [r7, #20]

    /*setup and start the Xfer */
    ep->xfer_buff = pBuf;
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	611a      	str	r2, [r3, #16]
    ep->xfer_len = len;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	683a      	ldr	r2, [r7, #0]
 80076da:	619a      	str	r2, [r3, #24]
    ep->xfer_count = 0U;
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	2200      	movs	r2, #0
 80076e0:	621a      	str	r2, [r3, #32]
    ep->is_in = 1U;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	2201      	movs	r2, #1
 80076e6:	705a      	strb	r2, [r3, #1]
    ep->num = ep_addr & EP_ADDR_MSK;
 80076e8:	7afb      	ldrb	r3, [r7, #11]
 80076ea:	f003 030f 	and.w	r3, r3, #15
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	701a      	strb	r2, [r3, #0]

    if (hpcd->Init.dma_enable == 1U) {
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d102      	bne.n	8007702 <HAL_PCD_EP_Transmit+0x5a>
        ep->dma_addr = (uint32_t)pBuf;
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	615a      	str	r2, [r3, #20]
    }

    if ((ep_addr & EP_ADDR_MSK) == 0U) {
 8007702:	7afb      	ldrb	r3, [r7, #11]
 8007704:	f003 030f 	and.w	r3, r3, #15
 8007708:	2b00      	cmp	r3, #0
 800770a:	d109      	bne.n	8007720 <HAL_PCD_EP_Transmit+0x78>
        (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6818      	ldr	r0, [r3, #0]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	b2db      	uxtb	r3, r3
 8007716:	461a      	mov	r2, r3
 8007718:	6979      	ldr	r1, [r7, #20]
 800771a:	f003 f835 	bl	800a788 <USB_EP0StartXfer>
 800771e:	e008      	b.n	8007732 <HAL_PCD_EP_Transmit+0x8a>
    } else {
        (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6818      	ldr	r0, [r3, #0]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	b2db      	uxtb	r3, r3
 800772a:	461a      	mov	r2, r3
 800772c:	6979      	ldr	r1, [r7, #20]
 800772e:	f002 fde3 	bl	800a2f8 <USB_EPStartXfer>
    }

    return HAL_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3718      	adds	r7, #24
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <HAL_PCD_EP_SetStall>:
 * @brief  Set a STALL condition over an endpoint
 * @param  hpcd PCD handle
 * @param  ep_addr endpoint address
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef * hpcd, uint8_t ep_addr) {
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	460b      	mov	r3, r1
 8007746:	70fb      	strb	r3, [r7, #3]
    PCD_EPTypeDef * ep;

    if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints) {
 8007748:	78fb      	ldrb	r3, [r7, #3]
 800774a:	f003 020f 	and.w	r2, r3, #15
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	429a      	cmp	r2, r3
 8007754:	d901      	bls.n	800775a <HAL_PCD_EP_SetStall+0x1e>
        return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e050      	b.n	80077fc <HAL_PCD_EP_SetStall+0xc0>
    }

    if ((0x80U & ep_addr) == 0x80U) {
 800775a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800775e:	2b00      	cmp	r3, #0
 8007760:	da0f      	bge.n	8007782 <HAL_PCD_EP_SetStall+0x46>
        ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007762:	78fb      	ldrb	r3, [r7, #3]
 8007764:	f003 020f 	and.w	r2, r3, #15
 8007768:	4613      	mov	r3, r2
 800776a:	00db      	lsls	r3, r3, #3
 800776c:	4413      	add	r3, r2
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	3338      	adds	r3, #56	@ 0x38
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	4413      	add	r3, r2
 8007776:	3304      	adds	r3, #4
 8007778:	60fb      	str	r3, [r7, #12]
        ep->is_in = 1U;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2201      	movs	r2, #1
 800777e:	705a      	strb	r2, [r3, #1]
 8007780:	e00d      	b.n	800779e <HAL_PCD_EP_SetStall+0x62>
    } else {
        ep = &hpcd->OUT_ep[ep_addr];
 8007782:	78fa      	ldrb	r2, [r7, #3]
 8007784:	4613      	mov	r3, r2
 8007786:	00db      	lsls	r3, r3, #3
 8007788:	4413      	add	r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	4413      	add	r3, r2
 8007794:	3304      	adds	r3, #4
 8007796:	60fb      	str	r3, [r7, #12]
        ep->is_in = 0U;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	705a      	strb	r2, [r3, #1]
    }

    ep->is_stall = 1U;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2201      	movs	r2, #1
 80077a2:	709a      	strb	r2, [r3, #2]
    ep->num = ep_addr & EP_ADDR_MSK;
 80077a4:	78fb      	ldrb	r3, [r7, #3]
 80077a6:	f003 030f 	and.w	r3, r3, #15
 80077aa:	b2da      	uxtb	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	701a      	strb	r2, [r3, #0]

    __HAL_LOCK(hpcd);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d101      	bne.n	80077be <HAL_PCD_EP_SetStall+0x82>
 80077ba:	2302      	movs	r3, #2
 80077bc:	e01e      	b.n	80077fc <HAL_PCD_EP_SetStall+0xc0>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    (void)USB_EPSetStall(hpcd->Instance, ep);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68f9      	ldr	r1, [r7, #12]
 80077cc:	4618      	mov	r0, r3
 80077ce:	f003 fa73 	bl	800acb8 <USB_EPSetStall>

    if ((ep_addr & EP_ADDR_MSK) == 0U) {
 80077d2:	78fb      	ldrb	r3, [r7, #3]
 80077d4:	f003 030f 	and.w	r3, r3, #15
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10a      	bne.n	80077f2 <HAL_PCD_EP_SetStall+0xb6>
        (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6818      	ldr	r0, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	b2d9      	uxtb	r1, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80077ec:	461a      	mov	r2, r3
 80077ee:	f003 fc63 	bl	800b0b8 <USB_EP0_OutStart>
    }

    __HAL_UNLOCK(hpcd);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    return HAL_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3710      	adds	r7, #16
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <HAL_PCD_EP_ClrStall>:
 * @brief  Clear a STALL condition over in an endpoint
 * @param  hpcd PCD handle
 * @param  ep_addr endpoint address
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef * hpcd, uint8_t ep_addr) {
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	460b      	mov	r3, r1
 800780e:	70fb      	strb	r3, [r7, #3]
    PCD_EPTypeDef * ep;

    if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints) {
 8007810:	78fb      	ldrb	r3, [r7, #3]
 8007812:	f003 020f 	and.w	r2, r3, #15
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	429a      	cmp	r2, r3
 800781c:	d901      	bls.n	8007822 <HAL_PCD_EP_ClrStall+0x1e>
        return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e042      	b.n	80078a8 <HAL_PCD_EP_ClrStall+0xa4>
    }

    if ((0x80U & ep_addr) == 0x80U) {
 8007822:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007826:	2b00      	cmp	r3, #0
 8007828:	da0f      	bge.n	800784a <HAL_PCD_EP_ClrStall+0x46>
        ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800782a:	78fb      	ldrb	r3, [r7, #3]
 800782c:	f003 020f 	and.w	r2, r3, #15
 8007830:	4613      	mov	r3, r2
 8007832:	00db      	lsls	r3, r3, #3
 8007834:	4413      	add	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	3338      	adds	r3, #56	@ 0x38
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	4413      	add	r3, r2
 800783e:	3304      	adds	r3, #4
 8007840:	60fb      	str	r3, [r7, #12]
        ep->is_in = 1U;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2201      	movs	r2, #1
 8007846:	705a      	strb	r2, [r3, #1]
 8007848:	e00f      	b.n	800786a <HAL_PCD_EP_ClrStall+0x66>
    } else {
        ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800784a:	78fb      	ldrb	r3, [r7, #3]
 800784c:	f003 020f 	and.w	r2, r3, #15
 8007850:	4613      	mov	r3, r2
 8007852:	00db      	lsls	r3, r3, #3
 8007854:	4413      	add	r3, r2
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	4413      	add	r3, r2
 8007860:	3304      	adds	r3, #4
 8007862:	60fb      	str	r3, [r7, #12]
        ep->is_in = 0U;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	705a      	strb	r2, [r3, #1]
    }

    ep->is_stall = 0U;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	709a      	strb	r2, [r3, #2]
    ep->num = ep_addr & EP_ADDR_MSK;
 8007870:	78fb      	ldrb	r3, [r7, #3]
 8007872:	f003 030f 	and.w	r3, r3, #15
 8007876:	b2da      	uxtb	r2, r3
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	701a      	strb	r2, [r3, #0]

    __HAL_LOCK(hpcd);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007882:	2b01      	cmp	r3, #1
 8007884:	d101      	bne.n	800788a <HAL_PCD_EP_ClrStall+0x86>
 8007886:	2302      	movs	r3, #2
 8007888:	e00e      	b.n	80078a8 <HAL_PCD_EP_ClrStall+0xa4>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2201      	movs	r2, #1
 800788e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    (void)USB_EPClearStall(hpcd->Instance, ep);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68f9      	ldr	r1, [r7, #12]
 8007898:	4618      	mov	r0, r3
 800789a:	f003 fa7b 	bl	800ad94 <USB_EPClearStall>
    __HAL_UNLOCK(hpcd);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    return HAL_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <HAL_PCD_EP_Abort>:
 * @brief  Abort an USB EP transaction.
 * @param  hpcd PCD handle
 * @param  ep_addr endpoint address
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef * hpcd, uint8_t ep_addr) {
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	460b      	mov	r3, r1
 80078ba:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef ret;
    PCD_EPTypeDef * ep;

    if ((0x80U & ep_addr) == 0x80U) {
 80078bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	da0c      	bge.n	80078de <HAL_PCD_EP_Abort+0x2e>
        ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80078c4:	78fb      	ldrb	r3, [r7, #3]
 80078c6:	f003 020f 	and.w	r2, r3, #15
 80078ca:	4613      	mov	r3, r2
 80078cc:	00db      	lsls	r3, r3, #3
 80078ce:	4413      	add	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	3338      	adds	r3, #56	@ 0x38
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	4413      	add	r3, r2
 80078d8:	3304      	adds	r3, #4
 80078da:	60fb      	str	r3, [r7, #12]
 80078dc:	e00c      	b.n	80078f8 <HAL_PCD_EP_Abort+0x48>
    } else {
        ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80078de:	78fb      	ldrb	r3, [r7, #3]
 80078e0:	f003 020f 	and.w	r2, r3, #15
 80078e4:	4613      	mov	r3, r2
 80078e6:	00db      	lsls	r3, r3, #3
 80078e8:	4413      	add	r3, r2
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	4413      	add	r3, r2
 80078f4:	3304      	adds	r3, #4
 80078f6:	60fb      	str	r3, [r7, #12]
    }

    /* Stop Xfer */
    ret = USB_EPStopXfer(hpcd->Instance, ep);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68f9      	ldr	r1, [r7, #12]
 80078fe:	4618      	mov	r0, r3
 8007900:	f003 f89a 	bl	800aa38 <USB_EPStopXfer>
 8007904:	4603      	mov	r3, r0
 8007906:	72fb      	strb	r3, [r7, #11]

    return ret;
 8007908:	7afb      	ldrb	r3, [r7, #11]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <PCD_WriteEmptyTxFifo>:
 * @brief  Check FIFO for the next packet to be loaded.
 * @param  hpcd PCD handle
 * @param  epnum endpoint number
 * @retval HAL status
 */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef * hpcd, uint32_t epnum) {
 8007912:	b580      	push	{r7, lr}
 8007914:	b08a      	sub	sp, #40	@ 0x28
 8007916:	af02      	add	r7, sp, #8
 8007918:	6078      	str	r0, [r7, #4]
 800791a:	6039      	str	r1, [r7, #0]
    USB_OTG_GlobalTypeDef * USBx = hpcd->Instance;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	617b      	str	r3, [r7, #20]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	613b      	str	r3, [r7, #16]
    USB_OTG_EPTypeDef * ep;
    uint32_t len;
    uint32_t len32b;
    uint32_t fifoemptymsk;

    ep = &hpcd->IN_ep[epnum];
 8007926:	683a      	ldr	r2, [r7, #0]
 8007928:	4613      	mov	r3, r2
 800792a:	00db      	lsls	r3, r3, #3
 800792c:	4413      	add	r3, r2
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	3338      	adds	r3, #56	@ 0x38
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	4413      	add	r3, r2
 8007936:	3304      	adds	r3, #4
 8007938:	60fb      	str	r3, [r7, #12]

    if (ep->xfer_count > ep->xfer_len) {
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6a1a      	ldr	r2, [r3, #32]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	429a      	cmp	r2, r3
 8007944:	d901      	bls.n	800794a <PCD_WriteEmptyTxFifo+0x38>
        return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e06c      	b.n	8007a24 <PCD_WriteEmptyTxFifo+0x112>
    }

    len = ep->xfer_len - ep->xfer_count;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	699a      	ldr	r2, [r3, #24]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6a1b      	ldr	r3, [r3, #32]
 8007952:	1ad3      	subs	r3, r2, r3
 8007954:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket) {
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	69fa      	ldr	r2, [r7, #28]
 800795c:	429a      	cmp	r2, r3
 800795e:	d902      	bls.n	8007966 <PCD_WriteEmptyTxFifo+0x54>
        len = ep->maxpacket;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	61fb      	str	r3, [r7, #28]
    }

    len32b = (len + 3U) / 4U;
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	3303      	adds	r3, #3
 800796a:	089b      	lsrs	r3, r3, #2
 800796c:	61bb      	str	r3, [r7, #24]

    while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) && (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U)) {
 800796e:	e02b      	b.n	80079c8 <PCD_WriteEmptyTxFifo+0xb6>
        /* Write the FIFO */
        len = ep->xfer_len - ep->xfer_count;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	699a      	ldr	r2, [r3, #24]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6a1b      	ldr	r3, [r3, #32]
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	61fb      	str	r3, [r7, #28]

        if (len > ep->maxpacket) {
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	69fa      	ldr	r2, [r7, #28]
 8007982:	429a      	cmp	r2, r3
 8007984:	d902      	bls.n	800798c <PCD_WriteEmptyTxFifo+0x7a>
            len = ep->maxpacket;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	61fb      	str	r3, [r7, #28]
        }
        len32b = (len + 3U) / 4U;
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	3303      	adds	r3, #3
 8007990:	089b      	lsrs	r3, r3, #2
 8007992:	61bb      	str	r3, [r7, #24]

        (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len, (uint8_t)hpcd->Init.dma_enable);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6919      	ldr	r1, [r3, #16]
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	b2da      	uxtb	r2, r3
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	b298      	uxth	r0, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	9300      	str	r3, [sp, #0]
 80079a8:	4603      	mov	r3, r0
 80079aa:	6978      	ldr	r0, [r7, #20]
 80079ac:	f003 f8ee 	bl	800ab8c <USB_WritePacket>

        ep->xfer_buff += len;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	691a      	ldr	r2, [r3, #16]
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	441a      	add	r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	611a      	str	r2, [r3, #16]
        ep->xfer_count += len;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6a1a      	ldr	r2, [r3, #32]
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	441a      	add	r2, r3
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	621a      	str	r2, [r3, #32]
    while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) && (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U)) {
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	015a      	lsls	r2, r3, #5
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	4413      	add	r3, r2
 80079d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079d4:	699b      	ldr	r3, [r3, #24]
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	69ba      	ldr	r2, [r7, #24]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d809      	bhi.n	80079f2 <PCD_WriteEmptyTxFifo+0xe0>
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	6a1a      	ldr	r2, [r3, #32]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	699b      	ldr	r3, [r3, #24]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d203      	bcs.n	80079f2 <PCD_WriteEmptyTxFifo+0xe0>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d1be      	bne.n	8007970 <PCD_WriteEmptyTxFifo+0x5e>
    }

    if (ep->xfer_len <= ep->xfer_count) {
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	699a      	ldr	r2, [r3, #24]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	6a1b      	ldr	r3, [r3, #32]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d811      	bhi.n	8007a22 <PCD_WriteEmptyTxFifo+0x110>
        fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	f003 030f 	and.w	r3, r3, #15
 8007a04:	2201      	movs	r2, #1
 8007a06:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0a:	60bb      	str	r3, [r7, #8]
        USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	43db      	mvns	r3, r3
 8007a18:	6939      	ldr	r1, [r7, #16]
 8007a1a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a1e:	4013      	ands	r3, r2
 8007a20:	634b      	str	r3, [r1, #52]	@ 0x34
    }

    return HAL_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3720      	adds	r7, #32
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <PCD_EP_OutXfrComplete_int>:
 * @brief  process EP OUT transfer complete interrupt.
 * @param  hpcd PCD handle
 * @param  epnum endpoint number
 * @retval HAL status
 */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef * hpcd, uint32_t epnum) {
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b088      	sub	sp, #32
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
    USB_OTG_EPTypeDef * ep;
    USB_OTG_GlobalTypeDef * USBx = hpcd->Instance;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	61fb      	str	r3, [r7, #28]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	61bb      	str	r3, [r7, #24]
    uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	333c      	adds	r3, #60	@ 0x3c
 8007a44:	3304      	adds	r3, #4
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	617b      	str	r3, [r7, #20]
    uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	015a      	lsls	r2, r3, #5
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	4413      	add	r3, r2
 8007a52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	613b      	str	r3, [r7, #16]

    if (hpcd->Init.dma_enable == 1U) {
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d17b      	bne.n	8007b5a <PCD_EP_OutXfrComplete_int+0x12e>
        if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	f003 0308 	and.w	r3, r3, #8
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d015      	beq.n	8007a98 <PCD_EP_OutXfrComplete_int+0x6c>
        {
            /* StupPktRcvd = 1 this is a setup packet */
            if ((gSNPSiD > USB_OTG_CORE_ID_300A) && ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)) {
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	4a61      	ldr	r2, [pc, #388]	@ (8007bf4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	f240 80b9 	bls.w	8007be8 <PCD_EP_OutXfrComplete_int+0x1bc>
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f000 80b3 	beq.w	8007be8 <PCD_EP_OutXfrComplete_int+0x1bc>
                CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	015a      	lsls	r2, r3, #5
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	4413      	add	r3, r2
 8007a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a8e:	461a      	mov	r2, r3
 8007a90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a94:	6093      	str	r3, [r2, #8]
 8007a96:	e0a7      	b.n	8007be8 <PCD_EP_OutXfrComplete_int+0x1bc>
            }
        } else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	f003 0320 	and.w	r3, r3, #32
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d009      	beq.n	8007ab6 <PCD_EP_OutXfrComplete_int+0x8a>
        {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	015a      	lsls	r2, r3, #5
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aae:	461a      	mov	r2, r3
 8007ab0:	2320      	movs	r3, #32
 8007ab2:	6093      	str	r3, [r2, #8]
 8007ab4:	e098      	b.n	8007be8 <PCD_EP_OutXfrComplete_int+0x1bc>
        } else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U) {
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f040 8093 	bne.w	8007be8 <PCD_EP_OutXfrComplete_int+0x1bc>
            /* StupPktRcvd = 1 this is a setup packet */
            if ((gSNPSiD > USB_OTG_CORE_ID_300A) && ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)) {
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	4a4b      	ldr	r2, [pc, #300]	@ (8007bf4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d90f      	bls.n	8007aea <PCD_EP_OutXfrComplete_int+0xbe>
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00a      	beq.n	8007aea <PCD_EP_OutXfrComplete_int+0xbe>
                CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	015a      	lsls	r2, r3, #5
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	4413      	add	r3, r2
 8007adc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ae6:	6093      	str	r3, [r2, #8]
 8007ae8:	e07e      	b.n	8007be8 <PCD_EP_OutXfrComplete_int+0x1bc>
            } else {
                ep = &hpcd->OUT_ep[epnum];
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	4613      	mov	r3, r2
 8007aee:	00db      	lsls	r3, r3, #3
 8007af0:	4413      	add	r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	4413      	add	r3, r2
 8007afc:	3304      	adds	r3, #4
 8007afe:	60fb      	str	r3, [r7, #12]

                /* out data packet received over EP */
                ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	69da      	ldr	r2, [r3, #28]
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	0159      	lsls	r1, r3, #5
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	440b      	add	r3, r1
 8007b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b16:	1ad2      	subs	r2, r2, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	621a      	str	r2, [r3, #32]

                if (epnum == 0U) {
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d114      	bne.n	8007b4c <PCD_EP_OutXfrComplete_int+0x120>
                    if (ep->xfer_len == 0U) {
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	699b      	ldr	r3, [r3, #24]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d109      	bne.n	8007b3e <PCD_EP_OutXfrComplete_int+0x112>
                        /* this is ZLP, so prepare EP0 for next setup */
                        (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6818      	ldr	r0, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007b34:	461a      	mov	r2, r3
 8007b36:	2101      	movs	r1, #1
 8007b38:	f003 fabe 	bl	800b0b8 <USB_EP0_OutStart>
 8007b3c:	e006      	b.n	8007b4c <PCD_EP_OutXfrComplete_int+0x120>
                    } else {
                        ep->xfer_buff += ep->xfer_count;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	691a      	ldr	r2, [r3, #16]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6a1b      	ldr	r3, [r3, #32]
 8007b46:	441a      	add	r2, r3
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	611a      	str	r2, [r3, #16]
                }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
                HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	4619      	mov	r1, r3
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f008 f9c2 	bl	800fedc <HAL_PCD_DataOutStageCallback>
 8007b58:	e046      	b.n	8007be8 <PCD_EP_OutXfrComplete_int+0x1bc>
            }
        } else {
            /* ... */
        }
    } else {
        if (gSNPSiD == USB_OTG_CORE_ID_310A) {
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	4a26      	ldr	r2, [pc, #152]	@ (8007bf8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d124      	bne.n	8007bac <PCD_EP_OutXfrComplete_int+0x180>
            /* StupPktRcvd = 1 this is a setup packet */
            if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX) {
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00a      	beq.n	8007b82 <PCD_EP_OutXfrComplete_int+0x156>
                CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	015a      	lsls	r2, r3, #5
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	4413      	add	r3, r2
 8007b74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b78:	461a      	mov	r2, r3
 8007b7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b7e:	6093      	str	r3, [r2, #8]
 8007b80:	e032      	b.n	8007be8 <PCD_EP_OutXfrComplete_int+0x1bc>
            } else {
                if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) {
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	f003 0320 	and.w	r3, r3, #32
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d008      	beq.n	8007b9e <PCD_EP_OutXfrComplete_int+0x172>
                    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	015a      	lsls	r2, r3, #5
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	4413      	add	r3, r2
 8007b94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b98:	461a      	mov	r2, r3
 8007b9a:	2320      	movs	r3, #32
 8007b9c:	6093      	str	r3, [r2, #8]
                }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
                HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f008 f999 	bl	800fedc <HAL_PCD_DataOutStageCallback>
 8007baa:	e01d      	b.n	8007be8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
        } else {
            if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U)) {
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d114      	bne.n	8007bdc <PCD_EP_OutXfrComplete_int+0x1b0>
 8007bb2:	6879      	ldr	r1, [r7, #4]
 8007bb4:	683a      	ldr	r2, [r7, #0]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	00db      	lsls	r3, r3, #3
 8007bba:	4413      	add	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	440b      	add	r3, r1
 8007bc0:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d108      	bne.n	8007bdc <PCD_EP_OutXfrComplete_int+0x1b0>
                /* this is ZLP, so prepare EP0 for next setup */
                (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6818      	ldr	r0, [r3, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	2100      	movs	r1, #0
 8007bd8:	f003 fa6e 	bl	800b0b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	4619      	mov	r1, r3
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f008 f97a 	bl	800fedc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
    }

    return HAL_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3720      	adds	r7, #32
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	4f54300a 	.word	0x4f54300a
 8007bf8:	4f54310a 	.word	0x4f54310a

08007bfc <PCD_EP_OutSetupPacket_int>:
 * @brief  process EP OUT setup packet received interrupt.
 * @param  hpcd PCD handle
 * @param  epnum endpoint number
 * @retval HAL status
 */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef * hpcd, uint32_t epnum) {
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b086      	sub	sp, #24
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
    USB_OTG_GlobalTypeDef * USBx = hpcd->Instance;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	617b      	str	r3, [r7, #20]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	613b      	str	r3, [r7, #16]
    uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	333c      	adds	r3, #60	@ 0x3c
 8007c14:	3304      	adds	r3, #4
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	60fb      	str	r3, [r7, #12]
    uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	015a      	lsls	r2, r3, #5
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	4413      	add	r3, r2
 8007c22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	60bb      	str	r3, [r7, #8]

    if ((gSNPSiD > USB_OTG_CORE_ID_300A) && ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)) {
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	4a15      	ldr	r2, [pc, #84]	@ (8007c84 <PCD_EP_OutSetupPacket_int+0x88>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d90e      	bls.n	8007c50 <PCD_EP_OutSetupPacket_int+0x54>
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d009      	beq.n	8007c50 <PCD_EP_OutSetupPacket_int+0x54>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	015a      	lsls	r2, r3, #5
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	4413      	add	r3, r2
 8007c44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c48:	461a      	mov	r2, r3
 8007c4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c4e:	6093      	str	r3, [r2, #8]

    /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SetupStageCallback(hpcd);
#else
    HAL_PCD_SetupStageCallback(hpcd);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f008 f931 	bl	800feb8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U)) {
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	4a0a      	ldr	r2, [pc, #40]	@ (8007c84 <PCD_EP_OutSetupPacket_int+0x88>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d90c      	bls.n	8007c78 <PCD_EP_OutSetupPacket_int+0x7c>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d108      	bne.n	8007c78 <PCD_EP_OutSetupPacket_int+0x7c>
        (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6818      	ldr	r0, [r3, #0]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007c70:	461a      	mov	r2, r3
 8007c72:	2101      	movs	r1, #1
 8007c74:	f003 fa20 	bl	800b0b8 <USB_EP0_OutStart>
    }

    return HAL_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3718      	adds	r7, #24
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	4f54300a 	.word	0x4f54300a

08007c88 <HAL_PCDEx_SetTxFiFo>:
 * @param  hpcd PCD handle
 * @param  fifo The number of Tx fifo
 * @param  size Fifo size
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef * hpcd, uint8_t fifo, uint16_t size) {
 8007c88:	b480      	push	{r7}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	460b      	mov	r3, r1
 8007c92:	70fb      	strb	r3, [r7, #3]
 8007c94:	4613      	mov	r3, r2
 8007c96:	803b      	strh	r3, [r7, #0]
           --> Txn should be configured with the minimum space of 16 words
       The FIFO is used optimally when used TxFIFOs are allocated in the top
           of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
       When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

    Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c9e:	60bb      	str	r3, [r7, #8]

    if (fifo == 0U) {
 8007ca0:	78fb      	ldrb	r3, [r7, #3]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d107      	bne.n	8007cb6 <HAL_PCDEx_SetTxFiFo+0x2e>
        hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007ca6:	883b      	ldrh	r3, [r7, #0]
 8007ca8:	0419      	lsls	r1, r3, #16
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68ba      	ldr	r2, [r7, #8]
 8007cb0:	430a      	orrs	r2, r1
 8007cb2:	629a      	str	r2, [r3, #40]	@ 0x28
 8007cb4:	e028      	b.n	8007d08 <HAL_PCDEx_SetTxFiFo+0x80>
    } else {
        Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cbc:	0c1b      	lsrs	r3, r3, #16
 8007cbe:	68ba      	ldr	r2, [r7, #8]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	60bb      	str	r3, [r7, #8]
        for (i = 0U; i < (fifo - 1U); i++) {
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	73fb      	strb	r3, [r7, #15]
 8007cc8:	e00d      	b.n	8007ce6 <HAL_PCDEx_SetTxFiFo+0x5e>
            Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	7bfb      	ldrb	r3, [r7, #15]
 8007cd0:	3340      	adds	r3, #64	@ 0x40
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	0c1b      	lsrs	r3, r3, #16
 8007cda:	68ba      	ldr	r2, [r7, #8]
 8007cdc:	4413      	add	r3, r2
 8007cde:	60bb      	str	r3, [r7, #8]
        for (i = 0U; i < (fifo - 1U); i++) {
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	73fb      	strb	r3, [r7, #15]
 8007ce6:	7bfa      	ldrb	r2, [r7, #15]
 8007ce8:	78fb      	ldrb	r3, [r7, #3]
 8007cea:	3b01      	subs	r3, #1
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d3ec      	bcc.n	8007cca <HAL_PCDEx_SetTxFiFo+0x42>
        }

        /* Multiply Tx_Size by 2 to get higher performance */
        hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007cf0:	883b      	ldrh	r3, [r7, #0]
 8007cf2:	0418      	lsls	r0, r3, #16
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6819      	ldr	r1, [r3, #0]
 8007cf8:	78fb      	ldrb	r3, [r7, #3]
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	68ba      	ldr	r2, [r7, #8]
 8007cfe:	4302      	orrs	r2, r0
 8007d00:	3340      	adds	r3, #64	@ 0x40
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	440b      	add	r3, r1
 8007d06:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3714      	adds	r7, #20
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr

08007d16 <HAL_PCDEx_SetRxFiFo>:
 * @brief  Set Rx FIFO
 * @param  hpcd PCD handle
 * @param  size Size of Rx fifo
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef * hpcd, uint16_t size) {
 8007d16:	b480      	push	{r7}
 8007d18:	b083      	sub	sp, #12
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
 8007d1e:	460b      	mov	r3, r1
 8007d20:	807b      	strh	r3, [r7, #2]
    hpcd->Instance->GRXFSIZ = size;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	887a      	ldrh	r2, [r7, #2]
 8007d28:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <HAL_PCDEx_LPM_Callback>:
 * @brief  Send LPM message to user layer callback.
 * @param  hpcd PCD handle
 * @param  msg LPM message
 * @retval HAL status
 */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef * hpcd, PCD_LPM_MsgTypeDef msg) {
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	460b      	mov	r3, r1
 8007d42:	70fb      	strb	r3, [r7, #3]
    UNUSED(msg);

    /* NOTE : This function should not be modified, when the callback is needed,
              the HAL_PCDEx_LPM_Callback could be implemented in the user file
     */
}
 8007d44:	bf00      	nop
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <HAL_RCC_OscConfig>:
 * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 *         supported by this API. User should request a transition to HSE Off
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef * RCC_OscInitStruct) {
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b086      	sub	sp, #24
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
    uint32_t tickstart, pll_config;

    /* Check Null pointer */
    if (RCC_OscInitStruct == NULL) {
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d101      	bne.n	8007d62 <HAL_RCC_OscConfig+0x12>
        return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e267      	b.n	8008232 <HAL_RCC_OscConfig+0x4e2>
    }

    /* Check the parameters */
    assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
    /*------------------------------- HSE Configuration ------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE) {
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0301 	and.w	r3, r3, #1
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d075      	beq.n	8007e5a <HAL_RCC_OscConfig+0x10a>
        /* Check the parameters */
        assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
        if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE))) {
 8007d6e:	4b88      	ldr	r3, [pc, #544]	@ (8007f90 <HAL_RCC_OscConfig+0x240>)
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	f003 030c 	and.w	r3, r3, #12
 8007d76:	2b04      	cmp	r3, #4
 8007d78:	d00c      	beq.n	8007d94 <HAL_RCC_OscConfig+0x44>
 8007d7a:	4b85      	ldr	r3, [pc, #532]	@ (8007f90 <HAL_RCC_OscConfig+0x240>)
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	f003 030c 	and.w	r3, r3, #12
 8007d82:	2b08      	cmp	r3, #8
 8007d84:	d112      	bne.n	8007dac <HAL_RCC_OscConfig+0x5c>
 8007d86:	4b82      	ldr	r3, [pc, #520]	@ (8007f90 <HAL_RCC_OscConfig+0x240>)
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d92:	d10b      	bne.n	8007dac <HAL_RCC_OscConfig+0x5c>
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8007d94:	4b7e      	ldr	r3, [pc, #504]	@ (8007f90 <HAL_RCC_OscConfig+0x240>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d05b      	beq.n	8007e58 <HAL_RCC_OscConfig+0x108>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d157      	bne.n	8007e58 <HAL_RCC_OscConfig+0x108>
                return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e242      	b.n	8008232 <HAL_RCC_OscConfig+0x4e2>
            }
        } else {
            /* Set the new HSE configuration ---------------------------------------*/
            __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007db4:	d106      	bne.n	8007dc4 <HAL_RCC_OscConfig+0x74>
 8007db6:	4b76      	ldr	r3, [pc, #472]	@ (8007f90 <HAL_RCC_OscConfig+0x240>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a75      	ldr	r2, [pc, #468]	@ (8007f90 <HAL_RCC_OscConfig+0x240>)
 8007dbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007dc0:	6013      	str	r3, [r2, #0]
 8007dc2:	e01d      	b.n	8007e00 <HAL_RCC_OscConfig+0xb0>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007dcc:	d10c      	bne.n	8007de8 <HAL_RCC_OscConfig+0x98>
 8007dce:	4b70      	ldr	r3, [pc, #448]	@ (8007f90 <HAL_RCC_OscConfig+0x240>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a6f      	ldr	r2, [pc, #444]	@ (8007f90 <HAL_RCC_OscConfig+0x240>)
 8007dd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007dd8:	6013      	str	r3, [r2, #0]
 8007dda:	4b6d      	ldr	r3, [pc, #436]	@ (8007f90 <HAL_RCC_OscConfig+0x240>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a6c      	ldr	r2, [pc, #432]	@ (8007f90 <HAL_RCC_OscConfig+0x240>)
 8007de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007de4:	6013      	str	r3, [r2, #0]
 8007de6:	e00b      	b.n	8007e00 <HAL_RCC_OscConfig+0xb0>
 8007de8:	4b69      	ldr	r3, [pc, #420]	@ (8007f90 <HAL_RCC_OscConfig+0x240>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a68      	ldr	r2, [pc, #416]	@ (8007f90 <HAL_RCC_OscConfig+0x240>)
 8007dee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007df2:	6013      	str	r3, [r2, #0]
 8007df4:	4b66      	ldr	r3, [pc, #408]	@ (8007f90 <HAL_RCC_OscConfig+0x240>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a65      	ldr	r2, [pc, #404]	@ (8007f90 <HAL_RCC_OscConfig+0x240>)
 8007dfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007dfe:	6013      	str	r3, [r2, #0]

            /* Check the HSE State */
            if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF) {
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d013      	beq.n	8007e30 <HAL_RCC_OscConfig+0xe0>
                /* Get Start Tick */
                tickstart = HAL_GetTick();
 8007e08:	f7fc fcc0 	bl	800478c <HAL_GetTick>
 8007e0c:	6138      	str	r0, [r7, #16]

                /* Wait till HSE is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8007e0e:	e008      	b.n	8007e22 <HAL_RCC_OscConfig+0xd2>
                    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8007e10:	f7fc fcbc 	bl	800478c <HAL_GetTick>
 8007e14:	4602      	mov	r2, r0
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	2b64      	cmp	r3, #100	@ 0x64
 8007e1c:	d901      	bls.n	8007e22 <HAL_RCC_OscConfig+0xd2>
                        return HAL_TIMEOUT;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	e207      	b.n	8008232 <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8007e22:	4b5b      	ldr	r3, [pc, #364]	@ (8007f90 <HAL_RCC_OscConfig+0x240>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d0f0      	beq.n	8007e10 <HAL_RCC_OscConfig+0xc0>
 8007e2e:	e014      	b.n	8007e5a <HAL_RCC_OscConfig+0x10a>
                    }
                }
            } else {
                /* Get Start Tick */
                tickstart = HAL_GetTick();
 8007e30:	f7fc fcac 	bl	800478c <HAL_GetTick>
 8007e34:	6138      	str	r0, [r7, #16]

                /* Wait till HSE is bypassed or disabled */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8007e36:	e008      	b.n	8007e4a <HAL_RCC_OscConfig+0xfa>
                    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8007e38:	f7fc fca8 	bl	800478c <HAL_GetTick>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	2b64      	cmp	r3, #100	@ 0x64
 8007e44:	d901      	bls.n	8007e4a <HAL_RCC_OscConfig+0xfa>
                        return HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e1f3      	b.n	8008232 <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8007e4a:	4b51      	ldr	r3, [pc, #324]	@ (8007f90 <HAL_RCC_OscConfig+0x240>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1f0      	bne.n	8007e38 <HAL_RCC_OscConfig+0xe8>
 8007e56:	e000      	b.n	8007e5a <HAL_RCC_OscConfig+0x10a>
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8007e58:	bf00      	nop
                }
            }
        }
    }
    /*----------------------------- HSI Configuration --------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI) {
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f003 0302 	and.w	r3, r3, #2
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d063      	beq.n	8007f2e <HAL_RCC_OscConfig+0x1de>
        /* Check the parameters */
        assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
        assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

        /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
        if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI))) {
 8007e66:	4b4a      	ldr	r3, [pc, #296]	@ (8007f90 <HAL_RCC_OscConfig+0x240>)
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	f003 030c 	and.w	r3, r3, #12
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00b      	beq.n	8007e8a <HAL_RCC_OscConfig+0x13a>
 8007e72:	4b47      	ldr	r3, [pc, #284]	@ (8007f90 <HAL_RCC_OscConfig+0x240>)
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	f003 030c 	and.w	r3, r3, #12
 8007e7a:	2b08      	cmp	r3, #8
 8007e7c:	d11c      	bne.n	8007eb8 <HAL_RCC_OscConfig+0x168>
 8007e7e:	4b44      	ldr	r3, [pc, #272]	@ (8007f90 <HAL_RCC_OscConfig+0x240>)
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d116      	bne.n	8007eb8 <HAL_RCC_OscConfig+0x168>
            /* When HSI is used as system clock it will not disabled */
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 8007e8a:	4b41      	ldr	r3, [pc, #260]	@ (8007f90 <HAL_RCC_OscConfig+0x240>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 0302 	and.w	r3, r3, #2
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d005      	beq.n	8007ea2 <HAL_RCC_OscConfig+0x152>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d001      	beq.n	8007ea2 <HAL_RCC_OscConfig+0x152>
                return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e1c7      	b.n	8008232 <HAL_RCC_OscConfig+0x4e2>
            }
            /* Otherwise, just the calibration is allowed */
            else {
                /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
                __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ea2:	4b3b      	ldr	r3, [pc, #236]	@ (8007f90 <HAL_RCC_OscConfig+0x240>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	00db      	lsls	r3, r3, #3
 8007eb0:	4937      	ldr	r1, [pc, #220]	@ (8007f90 <HAL_RCC_OscConfig+0x240>)
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	600b      	str	r3, [r1, #0]
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 8007eb6:	e03a      	b.n	8007f2e <HAL_RCC_OscConfig+0x1de>
            }
        } else {
            /* Check the HSI State */
            if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d020      	beq.n	8007f02 <HAL_RCC_OscConfig+0x1b2>
                /* Enable the Internal High Speed oscillator (HSI). */
                __HAL_RCC_HSI_ENABLE();
 8007ec0:	4b34      	ldr	r3, [pc, #208]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	601a      	str	r2, [r3, #0]

                /* Get Start Tick*/
                tickstart = HAL_GetTick();
 8007ec6:	f7fc fc61 	bl	800478c <HAL_GetTick>
 8007eca:	6138      	str	r0, [r7, #16]

                /* Wait till HSI is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8007ecc:	e008      	b.n	8007ee0 <HAL_RCC_OscConfig+0x190>
                    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8007ece:	f7fc fc5d 	bl	800478c <HAL_GetTick>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	1ad3      	subs	r3, r2, r3
 8007ed8:	2b02      	cmp	r3, #2
 8007eda:	d901      	bls.n	8007ee0 <HAL_RCC_OscConfig+0x190>
                        return HAL_TIMEOUT;
 8007edc:	2303      	movs	r3, #3
 8007ede:	e1a8      	b.n	8008232 <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8007ee0:	4b2b      	ldr	r3, [pc, #172]	@ (8007f90 <HAL_RCC_OscConfig+0x240>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f003 0302 	and.w	r3, r3, #2
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d0f0      	beq.n	8007ece <HAL_RCC_OscConfig+0x17e>
                    }
                }

                /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
                __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007eec:	4b28      	ldr	r3, [pc, #160]	@ (8007f90 <HAL_RCC_OscConfig+0x240>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	691b      	ldr	r3, [r3, #16]
 8007ef8:	00db      	lsls	r3, r3, #3
 8007efa:	4925      	ldr	r1, [pc, #148]	@ (8007f90 <HAL_RCC_OscConfig+0x240>)
 8007efc:	4313      	orrs	r3, r2
 8007efe:	600b      	str	r3, [r1, #0]
 8007f00:	e015      	b.n	8007f2e <HAL_RCC_OscConfig+0x1de>
            } else {
                /* Disable the Internal High Speed oscillator (HSI). */
                __HAL_RCC_HSI_DISABLE();
 8007f02:	4b24      	ldr	r3, [pc, #144]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	601a      	str	r2, [r3, #0]

                /* Get Start Tick*/
                tickstart = HAL_GetTick();
 8007f08:	f7fc fc40 	bl	800478c <HAL_GetTick>
 8007f0c:	6138      	str	r0, [r7, #16]

                /* Wait till HSI is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8007f0e:	e008      	b.n	8007f22 <HAL_RCC_OscConfig+0x1d2>
                    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8007f10:	f7fc fc3c 	bl	800478c <HAL_GetTick>
 8007f14:	4602      	mov	r2, r0
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d901      	bls.n	8007f22 <HAL_RCC_OscConfig+0x1d2>
                        return HAL_TIMEOUT;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e187      	b.n	8008232 <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8007f22:	4b1b      	ldr	r3, [pc, #108]	@ (8007f90 <HAL_RCC_OscConfig+0x240>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 0302 	and.w	r3, r3, #2
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d1f0      	bne.n	8007f10 <HAL_RCC_OscConfig+0x1c0>
                }
            }
        }
    }
    /*------------------------------ LSI Configuration -------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI) {
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 0308 	and.w	r3, r3, #8
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d036      	beq.n	8007fa8 <HAL_RCC_OscConfig+0x258>
        /* Check the parameters */
        assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

        /* Check the LSI State */
        if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	695b      	ldr	r3, [r3, #20]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d016      	beq.n	8007f70 <HAL_RCC_OscConfig+0x220>
            /* Enable the Internal Low Speed oscillator (LSI). */
            __HAL_RCC_LSI_ENABLE();
 8007f42:	4b15      	ldr	r3, [pc, #84]	@ (8007f98 <HAL_RCC_OscConfig+0x248>)
 8007f44:	2201      	movs	r2, #1
 8007f46:	601a      	str	r2, [r3, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007f48:	f7fc fc20 	bl	800478c <HAL_GetTick>
 8007f4c:	6138      	str	r0, [r7, #16]

            /* Wait till LSI is ready */
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8007f4e:	e008      	b.n	8007f62 <HAL_RCC_OscConfig+0x212>
                if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8007f50:	f7fc fc1c 	bl	800478c <HAL_GetTick>
 8007f54:	4602      	mov	r2, r0
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d901      	bls.n	8007f62 <HAL_RCC_OscConfig+0x212>
                    return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e167      	b.n	8008232 <HAL_RCC_OscConfig+0x4e2>
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8007f62:	4b0b      	ldr	r3, [pc, #44]	@ (8007f90 <HAL_RCC_OscConfig+0x240>)
 8007f64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f66:	f003 0302 	and.w	r3, r3, #2
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d0f0      	beq.n	8007f50 <HAL_RCC_OscConfig+0x200>
 8007f6e:	e01b      	b.n	8007fa8 <HAL_RCC_OscConfig+0x258>
                }
            }
        } else {
            /* Disable the Internal Low Speed oscillator (LSI). */
            __HAL_RCC_LSI_DISABLE();
 8007f70:	4b09      	ldr	r3, [pc, #36]	@ (8007f98 <HAL_RCC_OscConfig+0x248>)
 8007f72:	2200      	movs	r2, #0
 8007f74:	601a      	str	r2, [r3, #0]

            /* Get Start Tick */
            tickstart = HAL_GetTick();
 8007f76:	f7fc fc09 	bl	800478c <HAL_GetTick>
 8007f7a:	6138      	str	r0, [r7, #16]

            /* Wait till LSI is ready */
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8007f7c:	e00e      	b.n	8007f9c <HAL_RCC_OscConfig+0x24c>
                if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8007f7e:	f7fc fc05 	bl	800478c <HAL_GetTick>
 8007f82:	4602      	mov	r2, r0
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	1ad3      	subs	r3, r2, r3
 8007f88:	2b02      	cmp	r3, #2
 8007f8a:	d907      	bls.n	8007f9c <HAL_RCC_OscConfig+0x24c>
                    return HAL_TIMEOUT;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	e150      	b.n	8008232 <HAL_RCC_OscConfig+0x4e2>
 8007f90:	40023800 	.word	0x40023800
 8007f94:	42470000 	.word	0x42470000
 8007f98:	42470e80 	.word	0x42470e80
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8007f9c:	4b88      	ldr	r3, [pc, #544]	@ (80081c0 <HAL_RCC_OscConfig+0x470>)
 8007f9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fa0:	f003 0302 	and.w	r3, r3, #2
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1ea      	bne.n	8007f7e <HAL_RCC_OscConfig+0x22e>
                }
            }
        }
    }
    /*------------------------------ LSE Configuration -------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE) {
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 0304 	and.w	r3, r3, #4
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	f000 8097 	beq.w	80080e4 <HAL_RCC_OscConfig+0x394>
        FlagStatus pwrclkchanged = RESET;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	75fb      	strb	r3, [r7, #23]
        /* Check the parameters */
        assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

        /* Update LSE configuration in Backup Domain control register    */
        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 8007fba:	4b81      	ldr	r3, [pc, #516]	@ (80081c0 <HAL_RCC_OscConfig+0x470>)
 8007fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d10f      	bne.n	8007fe6 <HAL_RCC_OscConfig+0x296>
            __HAL_RCC_PWR_CLK_ENABLE();
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	60bb      	str	r3, [r7, #8]
 8007fca:	4b7d      	ldr	r3, [pc, #500]	@ (80081c0 <HAL_RCC_OscConfig+0x470>)
 8007fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fce:	4a7c      	ldr	r2, [pc, #496]	@ (80081c0 <HAL_RCC_OscConfig+0x470>)
 8007fd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8007fd6:	4b7a      	ldr	r3, [pc, #488]	@ (80081c0 <HAL_RCC_OscConfig+0x470>)
 8007fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fde:	60bb      	str	r3, [r7, #8]
 8007fe0:	68bb      	ldr	r3, [r7, #8]
            pwrclkchanged = SET;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	75fb      	strb	r3, [r7, #23]
        }

        if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8007fe6:	4b77      	ldr	r3, [pc, #476]	@ (80081c4 <HAL_RCC_OscConfig+0x474>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d118      	bne.n	8008024 <HAL_RCC_OscConfig+0x2d4>
            /* Enable write access to Backup domain */
            SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ff2:	4b74      	ldr	r3, [pc, #464]	@ (80081c4 <HAL_RCC_OscConfig+0x474>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a73      	ldr	r2, [pc, #460]	@ (80081c4 <HAL_RCC_OscConfig+0x474>)
 8007ff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ffc:	6013      	str	r3, [r2, #0]

            /* Wait for Backup domain Write protection disable */
            tickstart = HAL_GetTick();
 8007ffe:	f7fc fbc5 	bl	800478c <HAL_GetTick>
 8008002:	6138      	str	r0, [r7, #16]

            while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8008004:	e008      	b.n	8008018 <HAL_RCC_OscConfig+0x2c8>
                if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8008006:	f7fc fbc1 	bl	800478c <HAL_GetTick>
 800800a:	4602      	mov	r2, r0
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	1ad3      	subs	r3, r2, r3
 8008010:	2b02      	cmp	r3, #2
 8008012:	d901      	bls.n	8008018 <HAL_RCC_OscConfig+0x2c8>
                    return HAL_TIMEOUT;
 8008014:	2303      	movs	r3, #3
 8008016:	e10c      	b.n	8008232 <HAL_RCC_OscConfig+0x4e2>
            while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8008018:	4b6a      	ldr	r3, [pc, #424]	@ (80081c4 <HAL_RCC_OscConfig+0x474>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008020:	2b00      	cmp	r3, #0
 8008022:	d0f0      	beq.n	8008006 <HAL_RCC_OscConfig+0x2b6>
                }
            }
        }

        /* Set the new LSE configuration -----------------------------------------*/
        __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	2b01      	cmp	r3, #1
 800802a:	d106      	bne.n	800803a <HAL_RCC_OscConfig+0x2ea>
 800802c:	4b64      	ldr	r3, [pc, #400]	@ (80081c0 <HAL_RCC_OscConfig+0x470>)
 800802e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008030:	4a63      	ldr	r2, [pc, #396]	@ (80081c0 <HAL_RCC_OscConfig+0x470>)
 8008032:	f043 0301 	orr.w	r3, r3, #1
 8008036:	6713      	str	r3, [r2, #112]	@ 0x70
 8008038:	e01c      	b.n	8008074 <HAL_RCC_OscConfig+0x324>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	2b05      	cmp	r3, #5
 8008040:	d10c      	bne.n	800805c <HAL_RCC_OscConfig+0x30c>
 8008042:	4b5f      	ldr	r3, [pc, #380]	@ (80081c0 <HAL_RCC_OscConfig+0x470>)
 8008044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008046:	4a5e      	ldr	r2, [pc, #376]	@ (80081c0 <HAL_RCC_OscConfig+0x470>)
 8008048:	f043 0304 	orr.w	r3, r3, #4
 800804c:	6713      	str	r3, [r2, #112]	@ 0x70
 800804e:	4b5c      	ldr	r3, [pc, #368]	@ (80081c0 <HAL_RCC_OscConfig+0x470>)
 8008050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008052:	4a5b      	ldr	r2, [pc, #364]	@ (80081c0 <HAL_RCC_OscConfig+0x470>)
 8008054:	f043 0301 	orr.w	r3, r3, #1
 8008058:	6713      	str	r3, [r2, #112]	@ 0x70
 800805a:	e00b      	b.n	8008074 <HAL_RCC_OscConfig+0x324>
 800805c:	4b58      	ldr	r3, [pc, #352]	@ (80081c0 <HAL_RCC_OscConfig+0x470>)
 800805e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008060:	4a57      	ldr	r2, [pc, #348]	@ (80081c0 <HAL_RCC_OscConfig+0x470>)
 8008062:	f023 0301 	bic.w	r3, r3, #1
 8008066:	6713      	str	r3, [r2, #112]	@ 0x70
 8008068:	4b55      	ldr	r3, [pc, #340]	@ (80081c0 <HAL_RCC_OscConfig+0x470>)
 800806a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800806c:	4a54      	ldr	r2, [pc, #336]	@ (80081c0 <HAL_RCC_OscConfig+0x470>)
 800806e:	f023 0304 	bic.w	r3, r3, #4
 8008072:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Check the LSE State */
        if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d015      	beq.n	80080a8 <HAL_RCC_OscConfig+0x358>
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800807c:	f7fc fb86 	bl	800478c <HAL_GetTick>
 8008080:	6138      	str	r0, [r7, #16]

            /* Wait till LSE is ready */
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8008082:	e00a      	b.n	800809a <HAL_RCC_OscConfig+0x34a>
                if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8008084:	f7fc fb82 	bl	800478c <HAL_GetTick>
 8008088:	4602      	mov	r2, r0
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	1ad3      	subs	r3, r2, r3
 800808e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008092:	4293      	cmp	r3, r2
 8008094:	d901      	bls.n	800809a <HAL_RCC_OscConfig+0x34a>
                    return HAL_TIMEOUT;
 8008096:	2303      	movs	r3, #3
 8008098:	e0cb      	b.n	8008232 <HAL_RCC_OscConfig+0x4e2>
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 800809a:	4b49      	ldr	r3, [pc, #292]	@ (80081c0 <HAL_RCC_OscConfig+0x470>)
 800809c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800809e:	f003 0302 	and.w	r3, r3, #2
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d0ee      	beq.n	8008084 <HAL_RCC_OscConfig+0x334>
 80080a6:	e014      	b.n	80080d2 <HAL_RCC_OscConfig+0x382>
                }
            }
        } else {
            /* Get Start Tick */
            tickstart = HAL_GetTick();
 80080a8:	f7fc fb70 	bl	800478c <HAL_GetTick>
 80080ac:	6138      	str	r0, [r7, #16]

            /* Wait till LSE is ready */
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 80080ae:	e00a      	b.n	80080c6 <HAL_RCC_OscConfig+0x376>
                if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80080b0:	f7fc fb6c 	bl	800478c <HAL_GetTick>
 80080b4:	4602      	mov	r2, r0
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	1ad3      	subs	r3, r2, r3
 80080ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080be:	4293      	cmp	r3, r2
 80080c0:	d901      	bls.n	80080c6 <HAL_RCC_OscConfig+0x376>
                    return HAL_TIMEOUT;
 80080c2:	2303      	movs	r3, #3
 80080c4:	e0b5      	b.n	8008232 <HAL_RCC_OscConfig+0x4e2>
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 80080c6:	4b3e      	ldr	r3, [pc, #248]	@ (80081c0 <HAL_RCC_OscConfig+0x470>)
 80080c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080ca:	f003 0302 	and.w	r3, r3, #2
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d1ee      	bne.n	80080b0 <HAL_RCC_OscConfig+0x360>
                }
            }
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET) {
 80080d2:	7dfb      	ldrb	r3, [r7, #23]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d105      	bne.n	80080e4 <HAL_RCC_OscConfig+0x394>
            __HAL_RCC_PWR_CLK_DISABLE();
 80080d8:	4b39      	ldr	r3, [pc, #228]	@ (80081c0 <HAL_RCC_OscConfig+0x470>)
 80080da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080dc:	4a38      	ldr	r2, [pc, #224]	@ (80081c0 <HAL_RCC_OscConfig+0x470>)
 80080de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80080e2:	6413      	str	r3, [r2, #64]	@ 0x40
        }
    }
    /*-------------------------------- PLL Configuration -----------------------*/
    /* Check the parameters */
    assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
    if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f000 80a1 	beq.w	8008230 <HAL_RCC_OscConfig+0x4e0>
        /* Check if the PLL is used as system clock or not */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL) {
 80080ee:	4b34      	ldr	r3, [pc, #208]	@ (80081c0 <HAL_RCC_OscConfig+0x470>)
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	f003 030c 	and.w	r3, r3, #12
 80080f6:	2b08      	cmp	r3, #8
 80080f8:	d05c      	beq.n	80081b4 <HAL_RCC_OscConfig+0x464>
            if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d141      	bne.n	8008186 <HAL_RCC_OscConfig+0x436>
                assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
                assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
                assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

                /* Disable the main PLL. */
                __HAL_RCC_PLL_DISABLE();
 8008102:	4b31      	ldr	r3, [pc, #196]	@ (80081c8 <HAL_RCC_OscConfig+0x478>)
 8008104:	2200      	movs	r2, #0
 8008106:	601a      	str	r2, [r3, #0]

                /* Get Start Tick */
                tickstart = HAL_GetTick();
 8008108:	f7fc fb40 	bl	800478c <HAL_GetTick>
 800810c:	6138      	str	r0, [r7, #16]

                /* Wait till PLL is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 800810e:	e008      	b.n	8008122 <HAL_RCC_OscConfig+0x3d2>
                    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8008110:	f7fc fb3c 	bl	800478c <HAL_GetTick>
 8008114:	4602      	mov	r2, r0
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	2b02      	cmp	r3, #2
 800811c:	d901      	bls.n	8008122 <HAL_RCC_OscConfig+0x3d2>
                        return HAL_TIMEOUT;
 800811e:	2303      	movs	r3, #3
 8008120:	e087      	b.n	8008232 <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8008122:	4b27      	ldr	r3, [pc, #156]	@ (80081c0 <HAL_RCC_OscConfig+0x470>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1f0      	bne.n	8008110 <HAL_RCC_OscConfig+0x3c0>
                    }
                }

                /* Configure the main PLL clock source, multiplication and division factors. */
                WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource | RCC_OscInitStruct->PLL.PLLM | (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos) | (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	69da      	ldr	r2, [r3, #28]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a1b      	ldr	r3, [r3, #32]
 8008136:	431a      	orrs	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800813c:	019b      	lsls	r3, r3, #6
 800813e:	431a      	orrs	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008144:	085b      	lsrs	r3, r3, #1
 8008146:	3b01      	subs	r3, #1
 8008148:	041b      	lsls	r3, r3, #16
 800814a:	431a      	orrs	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008150:	061b      	lsls	r3, r3, #24
 8008152:	491b      	ldr	r1, [pc, #108]	@ (80081c0 <HAL_RCC_OscConfig+0x470>)
 8008154:	4313      	orrs	r3, r2
 8008156:	604b      	str	r3, [r1, #4]
                                         (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
                /* Enable the main PLL. */
                __HAL_RCC_PLL_ENABLE();
 8008158:	4b1b      	ldr	r3, [pc, #108]	@ (80081c8 <HAL_RCC_OscConfig+0x478>)
 800815a:	2201      	movs	r2, #1
 800815c:	601a      	str	r2, [r3, #0]

                /* Get Start Tick */
                tickstart = HAL_GetTick();
 800815e:	f7fc fb15 	bl	800478c <HAL_GetTick>
 8008162:	6138      	str	r0, [r7, #16]

                /* Wait till PLL is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8008164:	e008      	b.n	8008178 <HAL_RCC_OscConfig+0x428>
                    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8008166:	f7fc fb11 	bl	800478c <HAL_GetTick>
 800816a:	4602      	mov	r2, r0
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	1ad3      	subs	r3, r2, r3
 8008170:	2b02      	cmp	r3, #2
 8008172:	d901      	bls.n	8008178 <HAL_RCC_OscConfig+0x428>
                        return HAL_TIMEOUT;
 8008174:	2303      	movs	r3, #3
 8008176:	e05c      	b.n	8008232 <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8008178:	4b11      	ldr	r3, [pc, #68]	@ (80081c0 <HAL_RCC_OscConfig+0x470>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008180:	2b00      	cmp	r3, #0
 8008182:	d0f0      	beq.n	8008166 <HAL_RCC_OscConfig+0x416>
 8008184:	e054      	b.n	8008230 <HAL_RCC_OscConfig+0x4e0>
                    }
                }
            } else {
                /* Disable the main PLL. */
                __HAL_RCC_PLL_DISABLE();
 8008186:	4b10      	ldr	r3, [pc, #64]	@ (80081c8 <HAL_RCC_OscConfig+0x478>)
 8008188:	2200      	movs	r2, #0
 800818a:	601a      	str	r2, [r3, #0]

                /* Get Start Tick */
                tickstart = HAL_GetTick();
 800818c:	f7fc fafe 	bl	800478c <HAL_GetTick>
 8008190:	6138      	str	r0, [r7, #16]

                /* Wait till PLL is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8008192:	e008      	b.n	80081a6 <HAL_RCC_OscConfig+0x456>
                    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8008194:	f7fc fafa 	bl	800478c <HAL_GetTick>
 8008198:	4602      	mov	r2, r0
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	1ad3      	subs	r3, r2, r3
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d901      	bls.n	80081a6 <HAL_RCC_OscConfig+0x456>
                        return HAL_TIMEOUT;
 80081a2:	2303      	movs	r3, #3
 80081a4:	e045      	b.n	8008232 <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 80081a6:	4b06      	ldr	r3, [pc, #24]	@ (80081c0 <HAL_RCC_OscConfig+0x470>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1f0      	bne.n	8008194 <HAL_RCC_OscConfig+0x444>
 80081b2:	e03d      	b.n	8008230 <HAL_RCC_OscConfig+0x4e0>
                    }
                }
            }
        } else {
            /* Check if there is a request to disable the PLL used as System clock source */
            if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) {
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	699b      	ldr	r3, [r3, #24]
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d107      	bne.n	80081cc <HAL_RCC_OscConfig+0x47c>
                return HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	e038      	b.n	8008232 <HAL_RCC_OscConfig+0x4e2>
 80081c0:	40023800 	.word	0x40023800
 80081c4:	40007000 	.word	0x40007000
 80081c8:	42470060 	.word	0x42470060
            } else {
                /* Do not return HAL_ERROR if request repeats the current configuration */
                pll_config = RCC->PLLCFGR;
 80081cc:	4b1b      	ldr	r3, [pc, #108]	@ (800823c <HAL_RCC_OscConfig+0x4ec>)
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	60fb      	str	r3, [r7, #12]
                if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
                if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	699b      	ldr	r3, [r3, #24]
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d028      	beq.n	800822c <HAL_RCC_OscConfig+0x4dc>
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	69db      	ldr	r3, [r3, #28]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d121      	bne.n	800822c <HAL_RCC_OscConfig+0x4dc>
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a1b      	ldr	r3, [r3, #32]
                if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d11a      	bne.n	800822c <HAL_RCC_OscConfig+0x4dc>
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80081fc:	4013      	ands	r3, r2
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008202:	0192      	lsls	r2, r2, #6
 8008204:	4293      	cmp	r3, r2
 8008206:	d111      	bne.n	800822c <HAL_RCC_OscConfig+0x4dc>
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008212:	085b      	lsrs	r3, r3, #1
 8008214:	3b01      	subs	r3, #1
 8008216:	041b      	lsls	r3, r3, #16
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008218:	429a      	cmp	r2, r3
 800821a:	d107      	bne.n	800822c <HAL_RCC_OscConfig+0x4dc>
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008226:	061b      	lsls	r3, r3, #24
 8008228:	429a      	cmp	r2, r3
 800822a:	d001      	beq.n	8008230 <HAL_RCC_OscConfig+0x4e0>
#endif
                {
                    return HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	e000      	b.n	8008232 <HAL_RCC_OscConfig+0x4e2>
                }
            }
        }
    }
    return HAL_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3718      	adds	r7, #24
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	40023800 	.word	0x40023800

08008240 <HAL_RCC_ClockConfig>:
 * @note   Depending on the device voltage range, the software has to set correctly
 *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 *         (for more details refer to section above "Initialization/de-initialization functions")
 * @retval None
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef * RCC_ClkInitStruct, uint32_t FLatency) {
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
    uint32_t tickstart;

    /* Check Null pointer */
    if (RCC_ClkInitStruct == NULL) {
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d101      	bne.n	8008254 <HAL_RCC_ClockConfig+0x14>
        return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e0cc      	b.n	80083ee <HAL_RCC_ClockConfig+0x1ae>
    /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
      must be correctly programmed according to the frequency of the CPU clock
      (HCLK) and the supply voltage of the device. */

    /* Increasing the number of wait states because of higher CPU frequency */
    if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 8008254:	4b68      	ldr	r3, [pc, #416]	@ (80083f8 <HAL_RCC_ClockConfig+0x1b8>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0307 	and.w	r3, r3, #7
 800825c:	683a      	ldr	r2, [r7, #0]
 800825e:	429a      	cmp	r2, r3
 8008260:	d90c      	bls.n	800827c <HAL_RCC_ClockConfig+0x3c>
        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
        __HAL_FLASH_SET_LATENCY(FLatency);
 8008262:	4b65      	ldr	r3, [pc, #404]	@ (80083f8 <HAL_RCC_ClockConfig+0x1b8>)
 8008264:	683a      	ldr	r2, [r7, #0]
 8008266:	b2d2      	uxtb	r2, r2
 8008268:	701a      	strb	r2, [r3, #0]

        /* Check that the new number of wait states is taken into account to access the Flash
        memory by reading the FLASH_ACR register */
        if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 800826a:	4b63      	ldr	r3, [pc, #396]	@ (80083f8 <HAL_RCC_ClockConfig+0x1b8>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f003 0307 	and.w	r3, r3, #7
 8008272:	683a      	ldr	r2, [r7, #0]
 8008274:	429a      	cmp	r2, r3
 8008276:	d001      	beq.n	800827c <HAL_RCC_ClockConfig+0x3c>
            return HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	e0b8      	b.n	80083ee <HAL_RCC_ClockConfig+0x1ae>
        }
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) {
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f003 0302 	and.w	r3, r3, #2
 8008284:	2b00      	cmp	r3, #0
 8008286:	d020      	beq.n	80082ca <HAL_RCC_ClockConfig+0x8a>
        /* Set the highest APBx dividers in order to ensure that we do not go through
           a non-spec phase whatever we decrease or increase HCLK. */
        if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) {
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 0304 	and.w	r3, r3, #4
 8008290:	2b00      	cmp	r3, #0
 8008292:	d005      	beq.n	80082a0 <HAL_RCC_ClockConfig+0x60>
            MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008294:	4b59      	ldr	r3, [pc, #356]	@ (80083fc <HAL_RCC_ClockConfig+0x1bc>)
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	4a58      	ldr	r2, [pc, #352]	@ (80083fc <HAL_RCC_ClockConfig+0x1bc>)
 800829a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800829e:	6093      	str	r3, [r2, #8]
        }

        if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2) {
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f003 0308 	and.w	r3, r3, #8
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d005      	beq.n	80082b8 <HAL_RCC_ClockConfig+0x78>
            MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80082ac:	4b53      	ldr	r3, [pc, #332]	@ (80083fc <HAL_RCC_ClockConfig+0x1bc>)
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	4a52      	ldr	r2, [pc, #328]	@ (80083fc <HAL_RCC_ClockConfig+0x1bc>)
 80082b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80082b6:	6093      	str	r3, [r2, #8]
        }

        assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082b8:	4b50      	ldr	r3, [pc, #320]	@ (80083fc <HAL_RCC_ClockConfig+0x1bc>)
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	494d      	ldr	r1, [pc, #308]	@ (80083fc <HAL_RCC_ClockConfig+0x1bc>)
 80082c6:	4313      	orrs	r3, r2
 80082c8:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK) {
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 0301 	and.w	r3, r3, #1
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d044      	beq.n	8008360 <HAL_RCC_ClockConfig+0x120>
        assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

        /* HSE is selected as System Clock Source */
        if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d107      	bne.n	80082ee <HAL_RCC_ClockConfig+0xae>
            /* Check the HSE ready flag */
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 80082de:	4b47      	ldr	r3, [pc, #284]	@ (80083fc <HAL_RCC_ClockConfig+0x1bc>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d119      	bne.n	800831e <HAL_RCC_ClockConfig+0xde>
                return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e07f      	b.n	80083ee <HAL_RCC_ClockConfig+0x1ae>
            }
        }
        /* PLL is selected as System Clock Source */
        else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) || (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)) {
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	d003      	beq.n	80082fe <HAL_RCC_ClockConfig+0xbe>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	2b03      	cmp	r3, #3
 80082fc:	d107      	bne.n	800830e <HAL_RCC_ClockConfig+0xce>
            /* Check the PLL ready flag */
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 80082fe:	4b3f      	ldr	r3, [pc, #252]	@ (80083fc <HAL_RCC_ClockConfig+0x1bc>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008306:	2b00      	cmp	r3, #0
 8008308:	d109      	bne.n	800831e <HAL_RCC_ClockConfig+0xde>
                return HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	e06f      	b.n	80083ee <HAL_RCC_ClockConfig+0x1ae>
            }
        }
        /* HSI is selected as System Clock Source */
        else {
            /* Check the HSI ready flag */
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 800830e:	4b3b      	ldr	r3, [pc, #236]	@ (80083fc <HAL_RCC_ClockConfig+0x1bc>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 0302 	and.w	r3, r3, #2
 8008316:	2b00      	cmp	r3, #0
 8008318:	d101      	bne.n	800831e <HAL_RCC_ClockConfig+0xde>
                return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e067      	b.n	80083ee <HAL_RCC_ClockConfig+0x1ae>
            }
        }

        __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800831e:	4b37      	ldr	r3, [pc, #220]	@ (80083fc <HAL_RCC_ClockConfig+0x1bc>)
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	f023 0203 	bic.w	r2, r3, #3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	4934      	ldr	r1, [pc, #208]	@ (80083fc <HAL_RCC_ClockConfig+0x1bc>)
 800832c:	4313      	orrs	r3, r2
 800832e:	608b      	str	r3, [r1, #8]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008330:	f7fc fa2c 	bl	800478c <HAL_GetTick>
 8008334:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 8008336:	e00a      	b.n	800834e <HAL_RCC_ClockConfig+0x10e>
            if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8008338:	f7fc fa28 	bl	800478c <HAL_GetTick>
 800833c:	4602      	mov	r2, r0
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	1ad3      	subs	r3, r2, r3
 8008342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008346:	4293      	cmp	r3, r2
 8008348:	d901      	bls.n	800834e <HAL_RCC_ClockConfig+0x10e>
                return HAL_TIMEOUT;
 800834a:	2303      	movs	r3, #3
 800834c:	e04f      	b.n	80083ee <HAL_RCC_ClockConfig+0x1ae>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 800834e:	4b2b      	ldr	r3, [pc, #172]	@ (80083fc <HAL_RCC_ClockConfig+0x1bc>)
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	f003 020c 	and.w	r2, r3, #12
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	429a      	cmp	r2, r3
 800835e:	d1eb      	bne.n	8008338 <HAL_RCC_ClockConfig+0xf8>
            }
        }
    }

    /* Decreasing the number of wait states because of lower CPU frequency */
    if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 8008360:	4b25      	ldr	r3, [pc, #148]	@ (80083f8 <HAL_RCC_ClockConfig+0x1b8>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 0307 	and.w	r3, r3, #7
 8008368:	683a      	ldr	r2, [r7, #0]
 800836a:	429a      	cmp	r2, r3
 800836c:	d20c      	bcs.n	8008388 <HAL_RCC_ClockConfig+0x148>
        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
        __HAL_FLASH_SET_LATENCY(FLatency);
 800836e:	4b22      	ldr	r3, [pc, #136]	@ (80083f8 <HAL_RCC_ClockConfig+0x1b8>)
 8008370:	683a      	ldr	r2, [r7, #0]
 8008372:	b2d2      	uxtb	r2, r2
 8008374:	701a      	strb	r2, [r3, #0]

        /* Check that the new number of wait states is taken into account to access the Flash
        memory by reading the FLASH_ACR register */
        if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8008376:	4b20      	ldr	r3, [pc, #128]	@ (80083f8 <HAL_RCC_ClockConfig+0x1b8>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 0307 	and.w	r3, r3, #7
 800837e:	683a      	ldr	r2, [r7, #0]
 8008380:	429a      	cmp	r2, r3
 8008382:	d001      	beq.n	8008388 <HAL_RCC_ClockConfig+0x148>
            return HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	e032      	b.n	80083ee <HAL_RCC_ClockConfig+0x1ae>
        }
    }

    /*-------------------------- PCLK1 Configuration ---------------------------*/
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) {
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 0304 	and.w	r3, r3, #4
 8008390:	2b00      	cmp	r3, #0
 8008392:	d008      	beq.n	80083a6 <HAL_RCC_ClockConfig+0x166>
        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008394:	4b19      	ldr	r3, [pc, #100]	@ (80083fc <HAL_RCC_ClockConfig+0x1bc>)
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	4916      	ldr	r1, [pc, #88]	@ (80083fc <HAL_RCC_ClockConfig+0x1bc>)
 80083a2:	4313      	orrs	r3, r2
 80083a4:	608b      	str	r3, [r1, #8]
    }

    /*-------------------------- PCLK2 Configuration ---------------------------*/
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2) {
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 0308 	and.w	r3, r3, #8
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d009      	beq.n	80083c6 <HAL_RCC_ClockConfig+0x186>
        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80083b2:	4b12      	ldr	r3, [pc, #72]	@ (80083fc <HAL_RCC_ClockConfig+0x1bc>)
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	691b      	ldr	r3, [r3, #16]
 80083be:	00db      	lsls	r3, r3, #3
 80083c0:	490e      	ldr	r1, [pc, #56]	@ (80083fc <HAL_RCC_ClockConfig+0x1bc>)
 80083c2:	4313      	orrs	r3, r2
 80083c4:	608b      	str	r3, [r1, #8]
    }

    /* Update the SystemCoreClock global variable */
    SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80083c6:	f000 f821 	bl	800840c <HAL_RCC_GetSysClockFreq>
 80083ca:	4602      	mov	r2, r0
 80083cc:	4b0b      	ldr	r3, [pc, #44]	@ (80083fc <HAL_RCC_ClockConfig+0x1bc>)
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	091b      	lsrs	r3, r3, #4
 80083d2:	f003 030f 	and.w	r3, r3, #15
 80083d6:	490a      	ldr	r1, [pc, #40]	@ (8008400 <HAL_RCC_ClockConfig+0x1c0>)
 80083d8:	5ccb      	ldrb	r3, [r1, r3]
 80083da:	fa22 f303 	lsr.w	r3, r2, r3
 80083de:	4a09      	ldr	r2, [pc, #36]	@ (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 80083e0:	6013      	str	r3, [r2, #0]

    /* Configure the source of time base considering new system clocks settings */
    HAL_InitTick(uwTickPrio);
 80083e2:	4b09      	ldr	r3, [pc, #36]	@ (8008408 <HAL_RCC_ClockConfig+0x1c8>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7fc f98c 	bl	8004704 <HAL_InitTick>

    return HAL_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	40023c00 	.word	0x40023c00
 80083fc:	40023800 	.word	0x40023800
 8008400:	08013ac0 	.word	0x08013ac0
 8008404:	20000024 	.word	0x20000024
 8008408:	20000060 	.word	0x20000060

0800840c <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
__weak uint32_t HAL_RCC_GetSysClockFreq(void) {
 800840c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008410:	b090      	sub	sp, #64	@ 0x40
 8008412:	af00      	add	r7, sp, #0
    uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008414:	2300      	movs	r3, #0
 8008416:	637b      	str	r3, [r7, #52]	@ 0x34
 8008418:	2300      	movs	r3, #0
 800841a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800841c:	2300      	movs	r3, #0
 800841e:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t sysclockfreq = 0U;
 8008420:	2300      	movs	r3, #0
 8008422:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Get SYSCLK source -------------------------------------------------------*/
    switch (RCC->CFGR & RCC_CFGR_SWS) {
 8008424:	4b59      	ldr	r3, [pc, #356]	@ (800858c <HAL_RCC_GetSysClockFreq+0x180>)
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	f003 030c 	and.w	r3, r3, #12
 800842c:	2b08      	cmp	r3, #8
 800842e:	d00d      	beq.n	800844c <HAL_RCC_GetSysClockFreq+0x40>
 8008430:	2b08      	cmp	r3, #8
 8008432:	f200 80a1 	bhi.w	8008578 <HAL_RCC_GetSysClockFreq+0x16c>
 8008436:	2b00      	cmp	r3, #0
 8008438:	d002      	beq.n	8008440 <HAL_RCC_GetSysClockFreq+0x34>
 800843a:	2b04      	cmp	r3, #4
 800843c:	d003      	beq.n	8008446 <HAL_RCC_GetSysClockFreq+0x3a>
 800843e:	e09b      	b.n	8008578 <HAL_RCC_GetSysClockFreq+0x16c>
    case RCC_CFGR_SWS_HSI: /* HSI used as system clock source */
    {
        sysclockfreq = HSI_VALUE;
 8008440:	4b53      	ldr	r3, [pc, #332]	@ (8008590 <HAL_RCC_GetSysClockFreq+0x184>)
 8008442:	63bb      	str	r3, [r7, #56]	@ 0x38
        break;
 8008444:	e09b      	b.n	800857e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE: /* HSE used as system clock  source */
    {
        sysclockfreq = HSE_VALUE;
 8008446:	4b53      	ldr	r3, [pc, #332]	@ (8008594 <HAL_RCC_GetSysClockFreq+0x188>)
 8008448:	63bb      	str	r3, [r7, #56]	@ 0x38
        break;
 800844a:	e098      	b.n	800857e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL: /* PLL used as system clock  source */
    {
        /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
        SYSCLK = PLL_VCO / PLLP */
        pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800844c:	4b4f      	ldr	r3, [pc, #316]	@ (800858c <HAL_RCC_GetSysClockFreq+0x180>)
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008454:	637b      	str	r3, [r7, #52]	@ 0x34
        if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI) {
 8008456:	4b4d      	ldr	r3, [pc, #308]	@ (800858c <HAL_RCC_GetSysClockFreq+0x180>)
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800845e:	2b00      	cmp	r3, #0
 8008460:	d028      	beq.n	80084b4 <HAL_RCC_GetSysClockFreq+0xa8>
            /* HSE used as PLL clock source */
            pllvco = (uint32_t)((((uint64_t)HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008462:	4b4a      	ldr	r3, [pc, #296]	@ (800858c <HAL_RCC_GetSysClockFreq+0x180>)
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	099b      	lsrs	r3, r3, #6
 8008468:	2200      	movs	r2, #0
 800846a:	623b      	str	r3, [r7, #32]
 800846c:	627a      	str	r2, [r7, #36]	@ 0x24
 800846e:	6a3b      	ldr	r3, [r7, #32]
 8008470:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008474:	2100      	movs	r1, #0
 8008476:	4b47      	ldr	r3, [pc, #284]	@ (8008594 <HAL_RCC_GetSysClockFreq+0x188>)
 8008478:	fb03 f201 	mul.w	r2, r3, r1
 800847c:	2300      	movs	r3, #0
 800847e:	fb00 f303 	mul.w	r3, r0, r3
 8008482:	4413      	add	r3, r2
 8008484:	4a43      	ldr	r2, [pc, #268]	@ (8008594 <HAL_RCC_GetSysClockFreq+0x188>)
 8008486:	fba0 1202 	umull	r1, r2, r0, r2
 800848a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800848c:	460a      	mov	r2, r1
 800848e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008490:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008492:	4413      	add	r3, r2
 8008494:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008498:	2200      	movs	r2, #0
 800849a:	61bb      	str	r3, [r7, #24]
 800849c:	61fa      	str	r2, [r7, #28]
 800849e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80084a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80084a6:	f7f8 fbf7 	bl	8000c98 <__aeabi_uldivmod>
 80084aa:	4602      	mov	r2, r0
 80084ac:	460b      	mov	r3, r1
 80084ae:	4613      	mov	r3, r2
 80084b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084b2:	e053      	b.n	800855c <HAL_RCC_GetSysClockFreq+0x150>
        } else {
            /* HSI used as PLL clock source */
            pllvco = (uint32_t)((((uint64_t)HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80084b4:	4b35      	ldr	r3, [pc, #212]	@ (800858c <HAL_RCC_GetSysClockFreq+0x180>)
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	099b      	lsrs	r3, r3, #6
 80084ba:	2200      	movs	r2, #0
 80084bc:	613b      	str	r3, [r7, #16]
 80084be:	617a      	str	r2, [r7, #20]
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80084c6:	f04f 0b00 	mov.w	fp, #0
 80084ca:	4652      	mov	r2, sl
 80084cc:	465b      	mov	r3, fp
 80084ce:	f04f 0000 	mov.w	r0, #0
 80084d2:	f04f 0100 	mov.w	r1, #0
 80084d6:	0159      	lsls	r1, r3, #5
 80084d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80084dc:	0150      	lsls	r0, r2, #5
 80084de:	4602      	mov	r2, r0
 80084e0:	460b      	mov	r3, r1
 80084e2:	ebb2 080a 	subs.w	r8, r2, sl
 80084e6:	eb63 090b 	sbc.w	r9, r3, fp
 80084ea:	f04f 0200 	mov.w	r2, #0
 80084ee:	f04f 0300 	mov.w	r3, #0
 80084f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80084f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80084fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80084fe:	ebb2 0408 	subs.w	r4, r2, r8
 8008502:	eb63 0509 	sbc.w	r5, r3, r9
 8008506:	f04f 0200 	mov.w	r2, #0
 800850a:	f04f 0300 	mov.w	r3, #0
 800850e:	00eb      	lsls	r3, r5, #3
 8008510:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008514:	00e2      	lsls	r2, r4, #3
 8008516:	4614      	mov	r4, r2
 8008518:	461d      	mov	r5, r3
 800851a:	eb14 030a 	adds.w	r3, r4, sl
 800851e:	603b      	str	r3, [r7, #0]
 8008520:	eb45 030b 	adc.w	r3, r5, fp
 8008524:	607b      	str	r3, [r7, #4]
 8008526:	f04f 0200 	mov.w	r2, #0
 800852a:	f04f 0300 	mov.w	r3, #0
 800852e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008532:	4629      	mov	r1, r5
 8008534:	028b      	lsls	r3, r1, #10
 8008536:	4621      	mov	r1, r4
 8008538:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800853c:	4621      	mov	r1, r4
 800853e:	028a      	lsls	r2, r1, #10
 8008540:	4610      	mov	r0, r2
 8008542:	4619      	mov	r1, r3
 8008544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008546:	2200      	movs	r2, #0
 8008548:	60bb      	str	r3, [r7, #8]
 800854a:	60fa      	str	r2, [r7, #12]
 800854c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008550:	f7f8 fba2 	bl	8000c98 <__aeabi_uldivmod>
 8008554:	4602      	mov	r2, r0
 8008556:	460b      	mov	r3, r1
 8008558:	4613      	mov	r3, r2
 800855a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800855c:	4b0b      	ldr	r3, [pc, #44]	@ (800858c <HAL_RCC_GetSysClockFreq+0x180>)
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	0c1b      	lsrs	r3, r3, #16
 8008562:	f003 0303 	and.w	r3, r3, #3
 8008566:	3301      	adds	r3, #1
 8008568:	005b      	lsls	r3, r3, #1
 800856a:	633b      	str	r3, [r7, #48]	@ 0x30

        sysclockfreq = pllvco / pllp;
 800856c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800856e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008570:	fbb2 f3f3 	udiv	r3, r2, r3
 8008574:	63bb      	str	r3, [r7, #56]	@ 0x38
        break;
 8008576:	e002      	b.n	800857e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default: {
        sysclockfreq = HSI_VALUE;
 8008578:	4b05      	ldr	r3, [pc, #20]	@ (8008590 <HAL_RCC_GetSysClockFreq+0x184>)
 800857a:	63bb      	str	r3, [r7, #56]	@ 0x38
        break;
 800857c:	bf00      	nop
    }
    }
    return sysclockfreq;
 800857e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008580:	4618      	mov	r0, r3
 8008582:	3740      	adds	r7, #64	@ 0x40
 8008584:	46bd      	mov	sp, r7
 8008586:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800858a:	bf00      	nop
 800858c:	40023800 	.word	0x40023800
 8008590:	00f42400 	.word	0x00f42400
 8008594:	017d7840 	.word	0x017d7840

08008598 <HAL_RCC_GetHCLKFreq>:
 *
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
 *         and updated within this function
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
 8008598:	b480      	push	{r7}
 800859a:	af00      	add	r7, sp, #0
    return SystemCoreClock;
 800859c:	4b03      	ldr	r3, [pc, #12]	@ (80085ac <HAL_RCC_GetHCLKFreq+0x14>)
 800859e:	681b      	ldr	r3, [r3, #0]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop
 80085ac:	20000024 	.word	0x20000024

080085b0 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Returns the PCLK1 frequency
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 80085b0:	b580      	push	{r7, lr}
 80085b2:	af00      	add	r7, sp, #0
    /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
    return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80085b4:	f7ff fff0 	bl	8008598 <HAL_RCC_GetHCLKFreq>
 80085b8:	4602      	mov	r2, r0
 80085ba:	4b05      	ldr	r3, [pc, #20]	@ (80085d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	0a9b      	lsrs	r3, r3, #10
 80085c0:	f003 0307 	and.w	r3, r3, #7
 80085c4:	4903      	ldr	r1, [pc, #12]	@ (80085d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80085c6:	5ccb      	ldrb	r3, [r1, r3]
 80085c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	40023800 	.word	0x40023800
 80085d4:	08013ad0 	.word	0x08013ad0

080085d8 <HAL_RCC_GetPCLK2Freq>:
 * @brief  Returns the PCLK2 frequency
 * @note   Each time PCLK2 changes, this function must be called to update the
 *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK2 frequency
 */
uint32_t HAL_RCC_GetPCLK2Freq(void) {
 80085d8:	b580      	push	{r7, lr}
 80085da:	af00      	add	r7, sp, #0
    /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
    return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80085dc:	f7ff ffdc 	bl	8008598 <HAL_RCC_GetHCLKFreq>
 80085e0:	4602      	mov	r2, r0
 80085e2:	4b05      	ldr	r3, [pc, #20]	@ (80085f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	0b5b      	lsrs	r3, r3, #13
 80085e8:	f003 0307 	and.w	r3, r3, #7
 80085ec:	4903      	ldr	r1, [pc, #12]	@ (80085fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80085ee:	5ccb      	ldrb	r3, [r1, r3]
 80085f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	40023800 	.word	0x40023800
 80085fc:	08013ad0 	.word	0x08013ad0

08008600 <HAL_TIM_PWM_Init>:
 *         due to DIR bit readonly in center aligned mode.
 *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
 * @param  htim TIM PWM handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef * htim) {
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
    /* Check the TIM handle allocation */
    if (htim == NULL) {
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d101      	bne.n	8008612 <HAL_TIM_PWM_Init+0x12>
        return HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	e041      	b.n	8008696 <HAL_TIM_PWM_Init+0x96>
    assert_param(IS_TIM_INSTANCE(htim->Instance));
    assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
    assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
    assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

    if (htim->State == HAL_TIM_STATE_RESET) {
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008618:	b2db      	uxtb	r3, r3
 800861a:	2b00      	cmp	r3, #0
 800861c:	d106      	bne.n	800862c <HAL_TIM_PWM_Init+0x2c>
        /* Allocate lock resource and initialize it */
        htim->Lock = HAL_UNLOCKED;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        }
        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        htim->PWM_MspInitCallback(htim);
#else
        /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
        HAL_TIM_PWM_MspInit(htim);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f7fa fc5a 	bl	8002ee0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }

    /* Set the TIM state */
    htim->State = HAL_TIM_STATE_BUSY;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2202      	movs	r2, #2
 8008630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init the base time for the PWM */
    TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	3304      	adds	r3, #4
 800863c:	4619      	mov	r1, r3
 800863e:	4610      	mov	r0, r2
 8008640:	f000 f9a0 	bl	8008984 <TIM_Base_SetConfig>

    /* Initialize the DMA burst operation state */
    htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

    /* Initialize the TIM channels state */
    TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    /* Initialize the TIM state*/
    htim->State = HAL_TIM_STATE_READY;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3708      	adds	r7, #8
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
	...

080086a0 <HAL_TIM_PWM_Start>:
 *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
 *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
 *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef * htim, uint32_t Channel) {
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]

    /* Check the parameters */
    assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

    /* Check the TIM channel state */
    if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY) {
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d109      	bne.n	80086c4 <HAL_TIM_PWM_Start+0x24>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	bf14      	ite	ne
 80086bc:	2301      	movne	r3, #1
 80086be:	2300      	moveq	r3, #0
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	e022      	b.n	800870a <HAL_TIM_PWM_Start+0x6a>
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	2b04      	cmp	r3, #4
 80086c8:	d109      	bne.n	80086de <HAL_TIM_PWM_Start+0x3e>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	bf14      	ite	ne
 80086d6:	2301      	movne	r3, #1
 80086d8:	2300      	moveq	r3, #0
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	e015      	b.n	800870a <HAL_TIM_PWM_Start+0x6a>
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	2b08      	cmp	r3, #8
 80086e2:	d109      	bne.n	80086f8 <HAL_TIM_PWM_Start+0x58>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	bf14      	ite	ne
 80086f0:	2301      	movne	r3, #1
 80086f2:	2300      	moveq	r3, #0
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	e008      	b.n	800870a <HAL_TIM_PWM_Start+0x6a>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	2b01      	cmp	r3, #1
 8008702:	bf14      	ite	ne
 8008704:	2301      	movne	r3, #1
 8008706:	2300      	moveq	r3, #0
 8008708:	b2db      	uxtb	r3, r3
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <HAL_TIM_PWM_Start+0x72>
        return HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	e068      	b.n	80087e4 <HAL_TIM_PWM_Start+0x144>
    }

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d104      	bne.n	8008722 <HAL_TIM_PWM_Start+0x82>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2202      	movs	r2, #2
 800871c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008720:	e013      	b.n	800874a <HAL_TIM_PWM_Start+0xaa>
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	2b04      	cmp	r3, #4
 8008726:	d104      	bne.n	8008732 <HAL_TIM_PWM_Start+0x92>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2202      	movs	r2, #2
 800872c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008730:	e00b      	b.n	800874a <HAL_TIM_PWM_Start+0xaa>
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	2b08      	cmp	r3, #8
 8008736:	d104      	bne.n	8008742 <HAL_TIM_PWM_Start+0xa2>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2202      	movs	r2, #2
 800873c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008740:	e003      	b.n	800874a <HAL_TIM_PWM_Start+0xaa>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2202      	movs	r2, #2
 8008746:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2201      	movs	r2, #1
 8008750:	6839      	ldr	r1, [r7, #0]
 8008752:	4618      	mov	r0, r3
 8008754:	f000 fb22 	bl	8008d9c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a23      	ldr	r2, [pc, #140]	@ (80087ec <HAL_TIM_PWM_Start+0x14c>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d107      	bne.n	8008772 <HAL_TIM_PWM_Start+0xd2>
        /* Enable the main output */
        __HAL_TIM_MOE_ENABLE(htim);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008770:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance)) {
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a1d      	ldr	r2, [pc, #116]	@ (80087ec <HAL_TIM_PWM_Start+0x14c>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d018      	beq.n	80087ae <HAL_TIM_PWM_Start+0x10e>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008784:	d013      	beq.n	80087ae <HAL_TIM_PWM_Start+0x10e>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a19      	ldr	r2, [pc, #100]	@ (80087f0 <HAL_TIM_PWM_Start+0x150>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d00e      	beq.n	80087ae <HAL_TIM_PWM_Start+0x10e>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a17      	ldr	r2, [pc, #92]	@ (80087f4 <HAL_TIM_PWM_Start+0x154>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d009      	beq.n	80087ae <HAL_TIM_PWM_Start+0x10e>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a16      	ldr	r2, [pc, #88]	@ (80087f8 <HAL_TIM_PWM_Start+0x158>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d004      	beq.n	80087ae <HAL_TIM_PWM_Start+0x10e>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a14      	ldr	r2, [pc, #80]	@ (80087fc <HAL_TIM_PWM_Start+0x15c>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d111      	bne.n	80087d2 <HAL_TIM_PWM_Start+0x132>
        tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	f003 0307 	and.w	r3, r3, #7
 80087b8:	60fb      	str	r3, [r7, #12]
        if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr)) {
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2b06      	cmp	r3, #6
 80087be:	d010      	beq.n	80087e2 <HAL_TIM_PWM_Start+0x142>
            __HAL_TIM_ENABLE(htim);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f042 0201 	orr.w	r2, r2, #1
 80087ce:	601a      	str	r2, [r3, #0]
        if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr)) {
 80087d0:	e007      	b.n	80087e2 <HAL_TIM_PWM_Start+0x142>
        }
    } else {
        __HAL_TIM_ENABLE(htim);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f042 0201 	orr.w	r2, r2, #1
 80087e0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3710      	adds	r7, #16
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	40010000 	.word	0x40010000
 80087f0:	40000400 	.word	0x40000400
 80087f4:	40000800 	.word	0x40000800
 80087f8:	40000c00 	.word	0x40000c00
 80087fc:	40014000 	.word	0x40014000

08008800 <HAL_TIM_PWM_ConfigChannel>:
 *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
 *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
 *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef * htim, TIM_OC_InitTypeDef * sConfig, uint32_t Channel) {
 8008800:	b580      	push	{r7, lr}
 8008802:	b086      	sub	sp, #24
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 800880c:	2300      	movs	r3, #0
 800880e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
    assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
    assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

    /* Process Locked */
    __HAL_LOCK(htim);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008816:	2b01      	cmp	r3, #1
 8008818:	d101      	bne.n	800881e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800881a:	2302      	movs	r3, #2
 800881c:	e0ae      	b.n	800897c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2201      	movs	r2, #1
 8008822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    switch (Channel) {
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2b0c      	cmp	r3, #12
 800882a:	f200 809f 	bhi.w	800896c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800882e:	a201      	add	r2, pc, #4	@ (adr r2, 8008834 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008834:	08008869 	.word	0x08008869
 8008838:	0800896d 	.word	0x0800896d
 800883c:	0800896d 	.word	0x0800896d
 8008840:	0800896d 	.word	0x0800896d
 8008844:	080088a9 	.word	0x080088a9
 8008848:	0800896d 	.word	0x0800896d
 800884c:	0800896d 	.word	0x0800896d
 8008850:	0800896d 	.word	0x0800896d
 8008854:	080088eb 	.word	0x080088eb
 8008858:	0800896d 	.word	0x0800896d
 800885c:	0800896d 	.word	0x0800896d
 8008860:	0800896d 	.word	0x0800896d
 8008864:	0800892b 	.word	0x0800892b
    case TIM_CHANNEL_1: {
        /* Check the parameters */
        assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

        /* Configure the Channel 1 in PWM mode */
        TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68b9      	ldr	r1, [r7, #8]
 800886e:	4618      	mov	r0, r3
 8008870:	f000 f908 	bl	8008a84 <TIM_OC1_SetConfig>

        /* Set the Preload enable bit for channel1 */
        htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	699a      	ldr	r2, [r3, #24]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f042 0208 	orr.w	r2, r2, #8
 8008882:	619a      	str	r2, [r3, #24]

        /* Configure the Output Fast mode */
        htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	699a      	ldr	r2, [r3, #24]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f022 0204 	bic.w	r2, r2, #4
 8008892:	619a      	str	r2, [r3, #24]
        htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	6999      	ldr	r1, [r3, #24]
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	691a      	ldr	r2, [r3, #16]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	430a      	orrs	r2, r1
 80088a4:	619a      	str	r2, [r3, #24]
        break;
 80088a6:	e064      	b.n	8008972 <HAL_TIM_PWM_ConfigChannel+0x172>
    case TIM_CHANNEL_2: {
        /* Check the parameters */
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

        /* Configure the Channel 2 in PWM mode */
        TIM_OC2_SetConfig(htim->Instance, sConfig);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68b9      	ldr	r1, [r7, #8]
 80088ae:	4618      	mov	r0, r3
 80088b0:	f000 f94e 	bl	8008b50 <TIM_OC2_SetConfig>

        /* Set the Preload enable bit for channel2 */
        htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	699a      	ldr	r2, [r3, #24]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088c2:	619a      	str	r2, [r3, #24]

        /* Configure the Output Fast mode */
        htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	699a      	ldr	r2, [r3, #24]
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088d2:	619a      	str	r2, [r3, #24]
        htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	6999      	ldr	r1, [r3, #24]
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	021a      	lsls	r2, r3, #8
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	430a      	orrs	r2, r1
 80088e6:	619a      	str	r2, [r3, #24]
        break;
 80088e8:	e043      	b.n	8008972 <HAL_TIM_PWM_ConfigChannel+0x172>
    case TIM_CHANNEL_3: {
        /* Check the parameters */
        assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

        /* Configure the Channel 3 in PWM mode */
        TIM_OC3_SetConfig(htim->Instance, sConfig);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	68b9      	ldr	r1, [r7, #8]
 80088f0:	4618      	mov	r0, r3
 80088f2:	f000 f999 	bl	8008c28 <TIM_OC3_SetConfig>

        /* Set the Preload enable bit for channel3 */
        htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	69da      	ldr	r2, [r3, #28]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f042 0208 	orr.w	r2, r2, #8
 8008904:	61da      	str	r2, [r3, #28]

        /* Configure the Output Fast mode */
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	69da      	ldr	r2, [r3, #28]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f022 0204 	bic.w	r2, r2, #4
 8008914:	61da      	str	r2, [r3, #28]
        htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	69d9      	ldr	r1, [r3, #28]
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	691a      	ldr	r2, [r3, #16]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	430a      	orrs	r2, r1
 8008926:	61da      	str	r2, [r3, #28]
        break;
 8008928:	e023      	b.n	8008972 <HAL_TIM_PWM_ConfigChannel+0x172>
    case TIM_CHANNEL_4: {
        /* Check the parameters */
        assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

        /* Configure the Channel 4 in PWM mode */
        TIM_OC4_SetConfig(htim->Instance, sConfig);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	68b9      	ldr	r1, [r7, #8]
 8008930:	4618      	mov	r0, r3
 8008932:	f000 f9e3 	bl	8008cfc <TIM_OC4_SetConfig>

        /* Set the Preload enable bit for channel4 */
        htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	69da      	ldr	r2, [r3, #28]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008944:	61da      	str	r2, [r3, #28]

        /* Configure the Output Fast mode */
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	69da      	ldr	r2, [r3, #28]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008954:	61da      	str	r2, [r3, #28]
        htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	69d9      	ldr	r1, [r3, #28]
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	021a      	lsls	r2, r3, #8
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	430a      	orrs	r2, r1
 8008968:	61da      	str	r2, [r3, #28]
        break;
 800896a:	e002      	b.n	8008972 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
        status = HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	75fb      	strb	r3, [r7, #23]
        break;
 8008970:	bf00      	nop
    }

    __HAL_UNLOCK(htim);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2200      	movs	r2, #0
 8008976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return status;
 800897a:	7dfb      	ldrb	r3, [r7, #23]
}
 800897c:	4618      	mov	r0, r3
 800897e:	3718      	adds	r7, #24
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <TIM_Base_SetConfig>:
 * @brief  Time Base configuration
 * @param  TIMx TIM peripheral
 * @param  Structure TIM Base configuration structure
 * @retval None
 */
void TIM_Base_SetConfig(TIM_TypeDef * TIMx, TIM_Base_InitTypeDef * Structure) {
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
    uint32_t tmpcr1;
    tmpcr1 = TIMx->CR1;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	60fb      	str	r3, [r7, #12]

    /* Set TIM Time Base Unit parameters ---------------------------------------*/
    if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx)) {
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a34      	ldr	r2, [pc, #208]	@ (8008a68 <TIM_Base_SetConfig+0xe4>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d00f      	beq.n	80089bc <TIM_Base_SetConfig+0x38>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089a2:	d00b      	beq.n	80089bc <TIM_Base_SetConfig+0x38>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a31      	ldr	r2, [pc, #196]	@ (8008a6c <TIM_Base_SetConfig+0xe8>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d007      	beq.n	80089bc <TIM_Base_SetConfig+0x38>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a30      	ldr	r2, [pc, #192]	@ (8008a70 <TIM_Base_SetConfig+0xec>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d003      	beq.n	80089bc <TIM_Base_SetConfig+0x38>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4a2f      	ldr	r2, [pc, #188]	@ (8008a74 <TIM_Base_SetConfig+0xf0>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d108      	bne.n	80089ce <TIM_Base_SetConfig+0x4a>
        /* Select the Counter Mode */
        tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089c2:	60fb      	str	r3, [r7, #12]
        tmpcr1 |= Structure->CounterMode;
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	68fa      	ldr	r2, [r7, #12]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	60fb      	str	r3, [r7, #12]
    }

    if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx)) {
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4a25      	ldr	r2, [pc, #148]	@ (8008a68 <TIM_Base_SetConfig+0xe4>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d01b      	beq.n	8008a0e <TIM_Base_SetConfig+0x8a>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089dc:	d017      	beq.n	8008a0e <TIM_Base_SetConfig+0x8a>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	4a22      	ldr	r2, [pc, #136]	@ (8008a6c <TIM_Base_SetConfig+0xe8>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d013      	beq.n	8008a0e <TIM_Base_SetConfig+0x8a>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4a21      	ldr	r2, [pc, #132]	@ (8008a70 <TIM_Base_SetConfig+0xec>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d00f      	beq.n	8008a0e <TIM_Base_SetConfig+0x8a>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	4a20      	ldr	r2, [pc, #128]	@ (8008a74 <TIM_Base_SetConfig+0xf0>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d00b      	beq.n	8008a0e <TIM_Base_SetConfig+0x8a>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4a1f      	ldr	r2, [pc, #124]	@ (8008a78 <TIM_Base_SetConfig+0xf4>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d007      	beq.n	8008a0e <TIM_Base_SetConfig+0x8a>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a1e      	ldr	r2, [pc, #120]	@ (8008a7c <TIM_Base_SetConfig+0xf8>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d003      	beq.n	8008a0e <TIM_Base_SetConfig+0x8a>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4a1d      	ldr	r2, [pc, #116]	@ (8008a80 <TIM_Base_SetConfig+0xfc>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d108      	bne.n	8008a20 <TIM_Base_SetConfig+0x9c>
        /* Set the clock division */
        tmpcr1 &= ~TIM_CR1_CKD;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a14:	60fb      	str	r3, [r7, #12]
        tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	68fa      	ldr	r2, [r7, #12]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	60fb      	str	r3, [r7, #12]
    }

    /* Set the auto-reload preload */
    MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	60fb      	str	r3, [r7, #12]

    TIMx->CR1 = tmpcr1;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	601a      	str	r2, [r3, #0]

    /* Set the Autoreload value */
    TIMx->ARR = (uint32_t)Structure->Period;
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	689a      	ldr	r2, [r3, #8]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the Prescaler value */
    TIMx->PSC = Structure->Prescaler;
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	629a      	str	r2, [r3, #40]	@ 0x28

    if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx)) {
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a08      	ldr	r2, [pc, #32]	@ (8008a68 <TIM_Base_SetConfig+0xe4>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d103      	bne.n	8008a54 <TIM_Base_SetConfig+0xd0>
        /* Set the Repetition Counter value */
        TIMx->RCR = Structure->RepetitionCounter;
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	691a      	ldr	r2, [r3, #16]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Generate an update event to reload the Prescaler
       and the repetition counter (only for advanced timer) value immediately */
    TIMx->EGR = TIM_EGR_UG;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	615a      	str	r2, [r3, #20]
}
 8008a5a:	bf00      	nop
 8008a5c:	3714      	adds	r7, #20
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr
 8008a66:	bf00      	nop
 8008a68:	40010000 	.word	0x40010000
 8008a6c:	40000400 	.word	0x40000400
 8008a70:	40000800 	.word	0x40000800
 8008a74:	40000c00 	.word	0x40000c00
 8008a78:	40014000 	.word	0x40014000
 8008a7c:	40014400 	.word	0x40014400
 8008a80:	40014800 	.word	0x40014800

08008a84 <TIM_OC1_SetConfig>:
 * @brief  Timer Output Compare 1 configuration
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config The output configuration structure
 * @retval None
 */
static void TIM_OC1_SetConfig(TIM_TypeDef * TIMx, TIM_OC_InitTypeDef * OC_Config) {
 8008a84:	b480      	push	{r7}
 8008a86:	b087      	sub	sp, #28
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
    uint32_t tmpccmrx;
    uint32_t tmpccer;
    uint32_t tmpcr2;

    /* Disable the Channel 1: Reset the CC1E Bit */
    TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6a1b      	ldr	r3, [r3, #32]
 8008a92:	f023 0201 	bic.w	r2, r3, #1
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	621a      	str	r2, [r3, #32]

    /* Get the TIMx CCER register value */
    tmpccer = TIMx->CCER;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a1b      	ldr	r3, [r3, #32]
 8008a9e:	617b      	str	r3, [r7, #20]
    /* Get the TIMx CR2 register value */
    tmpcr2 = TIMx->CR2;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	613b      	str	r3, [r7, #16]

    /* Get the TIMx CCMR1 register value */
    tmpccmrx = TIMx->CCMR1;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	699b      	ldr	r3, [r3, #24]
 8008aaa:	60fb      	str	r3, [r7, #12]

    /* Reset the Output Compare Mode Bits */
    tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ab2:	60fb      	str	r3, [r7, #12]
    tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f023 0303 	bic.w	r3, r3, #3
 8008aba:	60fb      	str	r3, [r7, #12]
    /* Select the Output Compare Mode */
    tmpccmrx |= OC_Config->OCMode;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68fa      	ldr	r2, [r7, #12]
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	60fb      	str	r3, [r7, #12]

    /* Reset the Output Polarity level */
    tmpccer &= ~TIM_CCER_CC1P;
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	f023 0302 	bic.w	r3, r3, #2
 8008acc:	617b      	str	r3, [r7, #20]
    /* Set the Output Compare Polarity */
    tmpccer |= OC_Config->OCPolarity;
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	697a      	ldr	r2, [r7, #20]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	617b      	str	r3, [r7, #20]

    if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1)) {
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a1c      	ldr	r2, [pc, #112]	@ (8008b4c <TIM_OC1_SetConfig+0xc8>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d10c      	bne.n	8008afa <TIM_OC1_SetConfig+0x76>
        /* Check parameters */
        assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

        /* Reset the Output N Polarity level */
        tmpccer &= ~TIM_CCER_CC1NP;
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	f023 0308 	bic.w	r3, r3, #8
 8008ae6:	617b      	str	r3, [r7, #20]
        /* Set the Output N Polarity */
        tmpccer |= OC_Config->OCNPolarity;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	697a      	ldr	r2, [r7, #20]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	617b      	str	r3, [r7, #20]
        /* Reset the Output N State */
        tmpccer &= ~TIM_CCER_CC1NE;
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	f023 0304 	bic.w	r3, r3, #4
 8008af8:	617b      	str	r3, [r7, #20]
    }

    if (IS_TIM_BREAK_INSTANCE(TIMx)) {
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4a13      	ldr	r2, [pc, #76]	@ (8008b4c <TIM_OC1_SetConfig+0xc8>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d111      	bne.n	8008b26 <TIM_OC1_SetConfig+0xa2>
        /* Check parameters */
        assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
        assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

        /* Reset the Output Compare and Output Compare N IDLE State */
        tmpcr2 &= ~TIM_CR2_OIS1;
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b08:	613b      	str	r3, [r7, #16]
        tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008b10:	613b      	str	r3, [r7, #16]
        /* Set the Output Idle state */
        tmpcr2 |= OC_Config->OCIdleState;
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	695b      	ldr	r3, [r3, #20]
 8008b16:	693a      	ldr	r2, [r7, #16]
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	613b      	str	r3, [r7, #16]
        /* Set the Output N Idle state */
        tmpcr2 |= OC_Config->OCNIdleState;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	693a      	ldr	r2, [r7, #16]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	613b      	str	r3, [r7, #16]
    }

    /* Write to TIMx CR2 */
    TIMx->CR2 = tmpcr2;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	693a      	ldr	r2, [r7, #16]
 8008b2a:	605a      	str	r2, [r3, #4]

    /* Write to TIMx CCMR1 */
    TIMx->CCMR1 = tmpccmrx;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	619a      	str	r2, [r3, #24]

    /* Set the Capture Compare Register value */
    TIMx->CCR1 = OC_Config->Pulse;
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	685a      	ldr	r2, [r3, #4]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Write to TIMx CCER */
    TIMx->CCER = tmpccer;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	697a      	ldr	r2, [r7, #20]
 8008b3e:	621a      	str	r2, [r3, #32]
}
 8008b40:	bf00      	nop
 8008b42:	371c      	adds	r7, #28
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr
 8008b4c:	40010000 	.word	0x40010000

08008b50 <TIM_OC2_SetConfig>:
 * @brief  Timer Output Compare 2 configuration
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config The output configuration structure
 * @retval None
 */
void TIM_OC2_SetConfig(TIM_TypeDef * TIMx, TIM_OC_InitTypeDef * OC_Config) {
 8008b50:	b480      	push	{r7}
 8008b52:	b087      	sub	sp, #28
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
    uint32_t tmpccmrx;
    uint32_t tmpccer;
    uint32_t tmpcr2;

    /* Disable the Channel 2: Reset the CC2E Bit */
    TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a1b      	ldr	r3, [r3, #32]
 8008b5e:	f023 0210 	bic.w	r2, r3, #16
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	621a      	str	r2, [r3, #32]

    /* Get the TIMx CCER register value */
    tmpccer = TIMx->CCER;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a1b      	ldr	r3, [r3, #32]
 8008b6a:	617b      	str	r3, [r7, #20]
    /* Get the TIMx CR2 register value */
    tmpcr2 = TIMx->CR2;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	613b      	str	r3, [r7, #16]

    /* Get the TIMx CCMR1 register value */
    tmpccmrx = TIMx->CCMR1;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	699b      	ldr	r3, [r3, #24]
 8008b76:	60fb      	str	r3, [r7, #12]

    /* Reset the Output Compare mode and Capture/Compare selection Bits */
    tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b7e:	60fb      	str	r3, [r7, #12]
    tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b86:	60fb      	str	r3, [r7, #12]

    /* Select the Output Compare Mode */
    tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	021b      	lsls	r3, r3, #8
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	60fb      	str	r3, [r7, #12]

    /* Reset the Output Polarity level */
    tmpccer &= ~TIM_CCER_CC2P;
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	f023 0320 	bic.w	r3, r3, #32
 8008b9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Compare Polarity */
    tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	011b      	lsls	r3, r3, #4
 8008ba2:	697a      	ldr	r2, [r7, #20]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	617b      	str	r3, [r7, #20]

    if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2)) {
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	4a1e      	ldr	r2, [pc, #120]	@ (8008c24 <TIM_OC2_SetConfig+0xd4>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d10d      	bne.n	8008bcc <TIM_OC2_SetConfig+0x7c>
        assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

        /* Reset the Output N Polarity level */
        tmpccer &= ~TIM_CCER_CC2NP;
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bb6:	617b      	str	r3, [r7, #20]
        /* Set the Output N Polarity */
        tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	011b      	lsls	r3, r3, #4
 8008bbe:	697a      	ldr	r2, [r7, #20]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	617b      	str	r3, [r7, #20]
        /* Reset the Output N State */
        tmpccer &= ~TIM_CCER_CC2NE;
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bca:	617b      	str	r3, [r7, #20]
    }

    if (IS_TIM_BREAK_INSTANCE(TIMx)) {
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	4a15      	ldr	r2, [pc, #84]	@ (8008c24 <TIM_OC2_SetConfig+0xd4>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d113      	bne.n	8008bfc <TIM_OC2_SetConfig+0xac>
        /* Check parameters */
        assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
        assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

        /* Reset the Output Compare and Output Compare N IDLE State */
        tmpcr2 &= ~TIM_CR2_OIS2;
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008bda:	613b      	str	r3, [r7, #16]
        tmpcr2 &= ~TIM_CR2_OIS2N;
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008be2:	613b      	str	r3, [r7, #16]
        /* Set the Output Idle state */
        tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	695b      	ldr	r3, [r3, #20]
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	693a      	ldr	r2, [r7, #16]
 8008bec:	4313      	orrs	r3, r2
 8008bee:	613b      	str	r3, [r7, #16]
        /* Set the Output N Idle state */
        tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	699b      	ldr	r3, [r3, #24]
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	693a      	ldr	r2, [r7, #16]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	613b      	str	r3, [r7, #16]
    }

    /* Write to TIMx CR2 */
    TIMx->CR2 = tmpcr2;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	693a      	ldr	r2, [r7, #16]
 8008c00:	605a      	str	r2, [r3, #4]

    /* Write to TIMx CCMR1 */
    TIMx->CCMR1 = tmpccmrx;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	619a      	str	r2, [r3, #24]

    /* Set the Capture Compare Register value */
    TIMx->CCR2 = OC_Config->Pulse;
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Write to TIMx CCER */
    TIMx->CCER = tmpccer;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	621a      	str	r2, [r3, #32]
}
 8008c16:	bf00      	nop
 8008c18:	371c      	adds	r7, #28
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	40010000 	.word	0x40010000

08008c28 <TIM_OC3_SetConfig>:
 * @brief  Timer Output Compare 3 configuration
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config The output configuration structure
 * @retval None
 */
static void TIM_OC3_SetConfig(TIM_TypeDef * TIMx, TIM_OC_InitTypeDef * OC_Config) {
 8008c28:	b480      	push	{r7}
 8008c2a:	b087      	sub	sp, #28
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
    uint32_t tmpccmrx;
    uint32_t tmpccer;
    uint32_t tmpcr2;

    /* Disable the Channel 3: Reset the CC2E Bit */
    TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a1b      	ldr	r3, [r3, #32]
 8008c36:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	621a      	str	r2, [r3, #32]

    /* Get the TIMx CCER register value */
    tmpccer = TIMx->CCER;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a1b      	ldr	r3, [r3, #32]
 8008c42:	617b      	str	r3, [r7, #20]
    /* Get the TIMx CR2 register value */
    tmpcr2 = TIMx->CR2;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	613b      	str	r3, [r7, #16]

    /* Get the TIMx CCMR2 register value */
    tmpccmrx = TIMx->CCMR2;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	69db      	ldr	r3, [r3, #28]
 8008c4e:	60fb      	str	r3, [r7, #12]

    /* Reset the Output Compare mode and Capture/Compare selection Bits */
    tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c56:	60fb      	str	r3, [r7, #12]
    tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f023 0303 	bic.w	r3, r3, #3
 8008c5e:	60fb      	str	r3, [r7, #12]
    /* Select the Output Compare Mode */
    tmpccmrx |= OC_Config->OCMode;
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68fa      	ldr	r2, [r7, #12]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	60fb      	str	r3, [r7, #12]

    /* Reset the Output Polarity level */
    tmpccer &= ~TIM_CCER_CC3P;
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008c70:	617b      	str	r3, [r7, #20]
    /* Set the Output Compare Polarity */
    tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	021b      	lsls	r3, r3, #8
 8008c78:	697a      	ldr	r2, [r7, #20]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	617b      	str	r3, [r7, #20]

    if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3)) {
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a1d      	ldr	r2, [pc, #116]	@ (8008cf8 <TIM_OC3_SetConfig+0xd0>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d10d      	bne.n	8008ca2 <TIM_OC3_SetConfig+0x7a>
        assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

        /* Reset the Output N Polarity level */
        tmpccer &= ~TIM_CCER_CC3NP;
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008c8c:	617b      	str	r3, [r7, #20]
        /* Set the Output N Polarity */
        tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	021b      	lsls	r3, r3, #8
 8008c94:	697a      	ldr	r2, [r7, #20]
 8008c96:	4313      	orrs	r3, r2
 8008c98:	617b      	str	r3, [r7, #20]
        /* Reset the Output N State */
        tmpccer &= ~TIM_CCER_CC3NE;
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ca0:	617b      	str	r3, [r7, #20]
    }

    if (IS_TIM_BREAK_INSTANCE(TIMx)) {
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	4a14      	ldr	r2, [pc, #80]	@ (8008cf8 <TIM_OC3_SetConfig+0xd0>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d113      	bne.n	8008cd2 <TIM_OC3_SetConfig+0xaa>
        /* Check parameters */
        assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
        assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

        /* Reset the Output Compare and Output Compare N IDLE State */
        tmpcr2 &= ~TIM_CR2_OIS3;
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008cb0:	613b      	str	r3, [r7, #16]
        tmpcr2 &= ~TIM_CR2_OIS3N;
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008cb8:	613b      	str	r3, [r7, #16]
        /* Set the Output Idle state */
        tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	695b      	ldr	r3, [r3, #20]
 8008cbe:	011b      	lsls	r3, r3, #4
 8008cc0:	693a      	ldr	r2, [r7, #16]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	613b      	str	r3, [r7, #16]
        /* Set the Output N Idle state */
        tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	699b      	ldr	r3, [r3, #24]
 8008cca:	011b      	lsls	r3, r3, #4
 8008ccc:	693a      	ldr	r2, [r7, #16]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	613b      	str	r3, [r7, #16]
    }

    /* Write to TIMx CR2 */
    TIMx->CR2 = tmpcr2;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	693a      	ldr	r2, [r7, #16]
 8008cd6:	605a      	str	r2, [r3, #4]

    /* Write to TIMx CCMR2 */
    TIMx->CCMR2 = tmpccmrx;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	61da      	str	r2, [r3, #28]

    /* Set the Capture Compare Register value */
    TIMx->CCR3 = OC_Config->Pulse;
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	685a      	ldr	r2, [r3, #4]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Write to TIMx CCER */
    TIMx->CCER = tmpccer;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	697a      	ldr	r2, [r7, #20]
 8008cea:	621a      	str	r2, [r3, #32]
}
 8008cec:	bf00      	nop
 8008cee:	371c      	adds	r7, #28
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr
 8008cf8:	40010000 	.word	0x40010000

08008cfc <TIM_OC4_SetConfig>:
 * @brief  Timer Output Compare 4 configuration
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config The output configuration structure
 * @retval None
 */
static void TIM_OC4_SetConfig(TIM_TypeDef * TIMx, TIM_OC_InitTypeDef * OC_Config) {
 8008cfc:	b480      	push	{r7}
 8008cfe:	b087      	sub	sp, #28
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
    uint32_t tmpccmrx;
    uint32_t tmpccer;
    uint32_t tmpcr2;

    /* Disable the Channel 4: Reset the CC4E Bit */
    TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6a1b      	ldr	r3, [r3, #32]
 8008d0a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	621a      	str	r2, [r3, #32]

    /* Get the TIMx CCER register value */
    tmpccer = TIMx->CCER;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a1b      	ldr	r3, [r3, #32]
 8008d16:	613b      	str	r3, [r7, #16]
    /* Get the TIMx CR2 register value */
    tmpcr2 = TIMx->CR2;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	617b      	str	r3, [r7, #20]

    /* Get the TIMx CCMR2 register value */
    tmpccmrx = TIMx->CCMR2;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	69db      	ldr	r3, [r3, #28]
 8008d22:	60fb      	str	r3, [r7, #12]

    /* Reset the Output Compare mode and Capture/Compare selection Bits */
    tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d2a:	60fb      	str	r3, [r7, #12]
    tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d32:	60fb      	str	r3, [r7, #12]

    /* Select the Output Compare Mode */
    tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	021b      	lsls	r3, r3, #8
 8008d3a:	68fa      	ldr	r2, [r7, #12]
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	60fb      	str	r3, [r7, #12]

    /* Reset the Output Polarity level */
    tmpccer &= ~TIM_CCER_CC4P;
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008d46:	613b      	str	r3, [r7, #16]
    /* Set the Output Compare Polarity */
    tmpccer |= (OC_Config->OCPolarity << 12U);
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	031b      	lsls	r3, r3, #12
 8008d4e:	693a      	ldr	r2, [r7, #16]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	613b      	str	r3, [r7, #16]

    if (IS_TIM_BREAK_INSTANCE(TIMx)) {
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4a10      	ldr	r2, [pc, #64]	@ (8008d98 <TIM_OC4_SetConfig+0x9c>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d109      	bne.n	8008d70 <TIM_OC4_SetConfig+0x74>
        /* Check parameters */
        assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

        /* Reset the Output Compare IDLE State */
        tmpcr2 &= ~TIM_CR2_OIS4;
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d62:	617b      	str	r3, [r7, #20]

        /* Set the Output Idle state */
        tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	695b      	ldr	r3, [r3, #20]
 8008d68:	019b      	lsls	r3, r3, #6
 8008d6a:	697a      	ldr	r2, [r7, #20]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	617b      	str	r3, [r7, #20]
    }

    /* Write to TIMx CR2 */
    TIMx->CR2 = tmpcr2;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	697a      	ldr	r2, [r7, #20]
 8008d74:	605a      	str	r2, [r3, #4]

    /* Write to TIMx CCMR2 */
    TIMx->CCMR2 = tmpccmrx;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	61da      	str	r2, [r3, #28]

    /* Set the Capture Compare Register value */
    TIMx->CCR4 = OC_Config->Pulse;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	685a      	ldr	r2, [r3, #4]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Write to TIMx CCER */
    TIMx->CCER = tmpccer;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	693a      	ldr	r2, [r7, #16]
 8008d88:	621a      	str	r2, [r3, #32]
}
 8008d8a:	bf00      	nop
 8008d8c:	371c      	adds	r7, #28
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop
 8008d98:	40010000 	.word	0x40010000

08008d9c <TIM_CCxChannelCmd>:
 *            @arg TIM_CHANNEL_4: TIM Channel 4
 * @param  ChannelState specifies the TIM Channel CCxE bit new state.
 *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
 * @retval None
 */
void TIM_CCxChannelCmd(TIM_TypeDef * TIMx, uint32_t Channel, uint32_t ChannelState) {
 8008d9c:	b480      	push	{r7}
 8008d9e:	b087      	sub	sp, #28
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]

    /* Check the parameters */
    assert_param(IS_TIM_CC1_INSTANCE(TIMx));
    assert_param(IS_TIM_CHANNELS(Channel));

    tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	f003 031f 	and.w	r3, r3, #31
 8008dae:	2201      	movs	r2, #1
 8008db0:	fa02 f303 	lsl.w	r3, r2, r3
 8008db4:	617b      	str	r3, [r7, #20]

    /* Reset the CCxE Bit */
    TIMx->CCER &= ~tmp;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6a1a      	ldr	r2, [r3, #32]
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	43db      	mvns	r3, r3
 8008dbe:	401a      	ands	r2, r3
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	621a      	str	r2, [r3, #32]

    /* Set or reset the CCxE Bit */
    TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6a1a      	ldr	r2, [r3, #32]
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	f003 031f 	and.w	r3, r3, #31
 8008dce:	6879      	ldr	r1, [r7, #4]
 8008dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8008dd4:	431a      	orrs	r2, r3
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	621a      	str	r2, [r3, #32]
}
 8008dda:	bf00      	nop
 8008ddc:	371c      	adds	r7, #28
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr
	...

08008de8 <HAL_TIMEx_MasterConfigSynchronization>:
 * @param  sMasterConfig pointer to a TIM_MasterConfigTypeDef structure that
 *         contains the selected trigger output (TRGO) and the Master/Slave
 *         mode.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef * htim, TIM_MasterConfigTypeDef * sMasterConfig) {
 8008de8:	b480      	push	{r7}
 8008dea:	b085      	sub	sp, #20
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
    assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
    assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
    assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

    /* Check input state */
    __HAL_LOCK(htim);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d101      	bne.n	8008e00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008dfc:	2302      	movs	r3, #2
 8008dfe:	e050      	b.n	8008ea2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Change the handler state */
    htim->State = HAL_TIM_STATE_BUSY;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2202      	movs	r2, #2
 8008e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Get the TIMx CR2 register value */
    tmpcr2 = htim->Instance->CR2;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	60fb      	str	r3, [r7, #12]

    /* Get the TIMx SMCR register value */
    tmpsmcr = htim->Instance->SMCR;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	60bb      	str	r3, [r7, #8]

    /* Reset the MMS Bits */
    tmpcr2 &= ~TIM_CR2_MMS;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO source */
    tmpcr2 |= sMasterConfig->MasterOutputTrigger;
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	68fa      	ldr	r2, [r7, #12]
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	60fb      	str	r3, [r7, #12]

    /* Update TIMx CR2 */
    htim->Instance->CR2 = tmpcr2;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	605a      	str	r2, [r3, #4]

    if (IS_TIM_SLAVE_INSTANCE(htim->Instance)) {
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a1c      	ldr	r2, [pc, #112]	@ (8008eb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d018      	beq.n	8008e76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e4c:	d013      	beq.n	8008e76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a18      	ldr	r2, [pc, #96]	@ (8008eb4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d00e      	beq.n	8008e76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a16      	ldr	r2, [pc, #88]	@ (8008eb8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d009      	beq.n	8008e76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a15      	ldr	r2, [pc, #84]	@ (8008ebc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d004      	beq.n	8008e76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a13      	ldr	r2, [pc, #76]	@ (8008ec0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d10c      	bne.n	8008e90 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
        /* Reset the MSM Bit */
        tmpsmcr &= ~TIM_SMCR_MSM;
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e7c:	60bb      	str	r3, [r7, #8]
        /* Set master mode */
        tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	60bb      	str	r3, [r7, #8]

        /* Update TIMx SMCR */
        htim->Instance->SMCR = tmpsmcr;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	68ba      	ldr	r2, [r7, #8]
 8008e8e:	609a      	str	r2, [r3, #8]
    }

    /* Change the htim state */
    htim->State = HAL_TIM_STATE_READY;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    __HAL_UNLOCK(htim);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3714      	adds	r7, #20
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	40010000 	.word	0x40010000
 8008eb4:	40000400 	.word	0x40000400
 8008eb8:	40000800 	.word	0x40000800
 8008ebc:	40000c00 	.word	0x40000c00
 8008ec0:	40014000 	.word	0x40014000

08008ec4 <HAL_UART_Init>:
 *         the UART_InitTypeDef and create the associated handle.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef * huart) {
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
    /* Check the UART handle allocation */
    if (huart == NULL) {
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d101      	bne.n	8008ed6 <HAL_UART_Init+0x12>
        return HAL_ERROR;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e03f      	b.n	8008f56 <HAL_UART_Init+0x92>
        assert_param(IS_UART_INSTANCE(huart->Instance));
    }
    assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
    assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

    if (huart->gState == HAL_UART_STATE_RESET) {
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d106      	bne.n	8008ef0 <HAL_UART_Init+0x2c>
        /* Allocate lock resource and initialize it */
        huart->Lock = HAL_UNLOCKED;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Init the low level hardware */
        huart->MspInitCallback(huart);
#else
        /* Init the low level hardware : GPIO, CLOCK */
        HAL_UART_MspInit(huart);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f7fa f874 	bl	8002fd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
    }

    huart->gState = HAL_UART_STATE_BUSY;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2224      	movs	r2, #36	@ 0x24
 8008ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the peripheral */
    __HAL_UART_DISABLE(huart);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	68da      	ldr	r2, [r3, #12]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008f06:	60da      	str	r2, [r3, #12]

    /* Set the UART Communication parameters */
    UART_SetConfig(huart);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 faa5 	bl	8009458 <UART_SetConfig>

    /* In asynchronous mode, the following bits must be kept cleared:
       - LINEN and CLKEN bits in the USART_CR2 register,
       - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
    CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	691a      	ldr	r2, [r3, #16]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008f1c:	611a      	str	r2, [r3, #16]
    CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	695a      	ldr	r2, [r3, #20]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008f2c:	615a      	str	r2, [r3, #20]

    /* Enable the peripheral */
    __HAL_UART_ENABLE(huart);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	68da      	ldr	r2, [r3, #12]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008f3c:	60da      	str	r2, [r3, #12]

    /* Initialize the UART state */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2200      	movs	r2, #0
 8008f42:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_READY;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2220      	movs	r2, #32
 8008f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2220      	movs	r2, #32
 8008f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    return HAL_OK;
 8008f54:	2300      	movs	r3, #0
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3708      	adds	r7, #8
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <HAL_UART_Receive_DMA>:
 * @param  pData Pointer to data buffer (u8 or u16 data elements).
 * @param  Size  Amount of data elements (u8 or u16) to be received.
 * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef * huart, uint8_t * pData, uint16_t Size) {
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b084      	sub	sp, #16
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	60f8      	str	r0, [r7, #12]
 8008f66:	60b9      	str	r1, [r7, #8]
 8008f68:	4613      	mov	r3, r2
 8008f6a:	80fb      	strh	r3, [r7, #6]
    /* Check that a Rx process is not already ongoing */
    if (huart->RxState == HAL_UART_STATE_READY) {
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	2b20      	cmp	r3, #32
 8008f76:	d11d      	bne.n	8008fb4 <HAL_UART_Receive_DMA+0x56>
        if ((pData == NULL) || (Size == 0U)) {
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d002      	beq.n	8008f84 <HAL_UART_Receive_DMA+0x26>
 8008f7e:	88fb      	ldrh	r3, [r7, #6]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d101      	bne.n	8008f88 <HAL_UART_Receive_DMA+0x2a>
            return HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	e016      	b.n	8008fb6 <HAL_UART_Receive_DMA+0x58>
        }

        /* Process Locked */
        __HAL_LOCK(huart);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d101      	bne.n	8008f96 <HAL_UART_Receive_DMA+0x38>
 8008f92:	2302      	movs	r3, #2
 8008f94:	e00f      	b.n	8008fb6 <HAL_UART_Receive_DMA+0x58>
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Set Reception type to Standard reception */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	631a      	str	r2, [r3, #48]	@ 0x30

        return (UART_Start_Receive_DMA(huart, pData, Size));
 8008fa4:	88fb      	ldrh	r3, [r7, #6]
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	68b9      	ldr	r1, [r7, #8]
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f000 f92a 	bl	8009204 <UART_Start_Receive_DMA>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	e000      	b.n	8008fb6 <HAL_UART_Receive_DMA+0x58>
    } else {
        return HAL_BUSY;
 8008fb4:	2302      	movs	r3, #2
    }
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <HAL_UART_RxCpltCallback>:
 * @brief  Rx Transfer completed callbacks.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart) {
 8008fbe:	b480      	push	{r7}
 8008fc0:	b083      	sub	sp, #12
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(huart);
    /* NOTE: This function should not be modified, when the callback is needed,
             the HAL_UART_RxCpltCallback could be implemented in the user file
     */
}
 8008fc6:	bf00      	nop
 8008fc8:	370c      	adds	r7, #12
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr

08008fd2 <HAL_UART_RxHalfCpltCallback>:
 * @brief  Rx Half Transfer completed callbacks.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef * huart) {
 8008fd2:	b480      	push	{r7}
 8008fd4:	b083      	sub	sp, #12
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(huart);
    /* NOTE: This function should not be modified, when the callback is needed,
             the HAL_UART_RxHalfCpltCallback could be implemented in the user file
     */
}
 8008fda:	bf00      	nop
 8008fdc:	370c      	adds	r7, #12
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr

08008fe6 <HAL_UART_ErrorCallback>:
 * @brief  UART error callbacks.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef * huart) {
 8008fe6:	b480      	push	{r7}
 8008fe8:	b083      	sub	sp, #12
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(huart);
    /* NOTE: This function should not be modified, when the callback is needed,
             the HAL_UART_ErrorCallback could be implemented in the user file
     */
}
 8008fee:	bf00      	nop
 8008ff0:	370c      	adds	r7, #12
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr

08008ffa <HAL_UARTEx_RxEventCallback>:
 * @param  huart UART handle
 * @param  Size  Number of data available in application reception buffer (indicates a position in
 *               reception buffer until which, data are available)
 * @retval None
 */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef * huart, uint16_t Size) {
 8008ffa:	b480      	push	{r7}
 8008ffc:	b083      	sub	sp, #12
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
 8009002:	460b      	mov	r3, r1
 8009004:	807b      	strh	r3, [r7, #2]
    UNUSED(Size);

    /* NOTE : This function should not be modified, when the callback is needed,
              the HAL_UARTEx_RxEventCallback can be implemented in the user file.
     */
}
 8009006:	bf00      	nop
 8009008:	370c      	adds	r7, #12
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr

08009012 <UART_DMAReceiveCplt>:
 * @brief  DMA UART receive process complete callback.
 * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA module.
 * @retval None
 */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef * hdma) {
 8009012:	b580      	push	{r7, lr}
 8009014:	b09c      	sub	sp, #112	@ 0x70
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800901e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    /* DMA Normal mode*/
    if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U) {
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800902a:	2b00      	cmp	r3, #0
 800902c:	d172      	bne.n	8009114 <UART_DMAReceiveCplt+0x102>
        huart->RxXferCount = 0U;
 800902e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009030:	2200      	movs	r2, #0
 8009032:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009034:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	330c      	adds	r3, #12
 800903a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  \return        value of type uint32_t at (*ptr)
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t * addr) {
    uint32_t result;

    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 800903c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800903e:	e853 3f00 	ldrex	r3, [r3]
 8009042:	64bb      	str	r3, [r7, #72]	@ 0x48
    return (result);
 8009044:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009046:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800904a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800904c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	330c      	adds	r3, #12
 8009052:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009054:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009056:	657b      	str	r3, [r7, #84]	@ 0x54
  \return          1  Function failed
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t * addr) {
    uint32_t result;

    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 8009058:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800905a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800905c:	e841 2300 	strex	r3, r2, [r1]
 8009060:	653b      	str	r3, [r7, #80]	@ 0x50
    return (result);
 8009062:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009064:	2b00      	cmp	r3, #0
 8009066:	d1e5      	bne.n	8009034 <UART_DMAReceiveCplt+0x22>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009068:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	3314      	adds	r3, #20
 800906e:	63bb      	str	r3, [r7, #56]	@ 0x38
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 8009070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009072:	e853 3f00 	ldrex	r3, [r3]
 8009076:	637b      	str	r3, [r7, #52]	@ 0x34
    return (result);
 8009078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800907a:	f023 0301 	bic.w	r3, r3, #1
 800907e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009080:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	3314      	adds	r3, #20
 8009086:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009088:	647a      	str	r2, [r7, #68]	@ 0x44
 800908a:	643b      	str	r3, [r7, #64]	@ 0x40
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 800908c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800908e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009090:	e841 2300 	strex	r3, r2, [r1]
 8009094:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return (result);
 8009096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009098:	2b00      	cmp	r3, #0
 800909a:	d1e5      	bne.n	8009068 <UART_DMAReceiveCplt+0x56>

        /* Disable the DMA transfer for the receiver request by setting the DMAR bit
           in the UART CR3 register */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800909c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	3314      	adds	r3, #20
 80090a2:	627b      	str	r3, [r7, #36]	@ 0x24
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 80090a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a6:	e853 3f00 	ldrex	r3, [r3]
 80090aa:	623b      	str	r3, [r7, #32]
    return (result);
 80090ac:	6a3b      	ldr	r3, [r7, #32]
 80090ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80090b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	3314      	adds	r3, #20
 80090ba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80090bc:	633a      	str	r2, [r7, #48]	@ 0x30
 80090be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 80090c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80090c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090c4:	e841 2300 	strex	r3, r2, [r1]
 80090c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    return (result);
 80090ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1e5      	bne.n	800909c <UART_DMAReceiveCplt+0x8a>

        /* At end of Rx process, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090d2:	2220      	movs	r2, #32
 80090d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 80090d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d119      	bne.n	8009114 <UART_DMAReceiveCplt+0x102>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	330c      	adds	r3, #12
 80090e6:	613b      	str	r3, [r7, #16]
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	e853 3f00 	ldrex	r3, [r3]
 80090ee:	60fb      	str	r3, [r7, #12]
    return (result);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f023 0310 	bic.w	r3, r3, #16
 80090f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80090f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	330c      	adds	r3, #12
 80090fe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009100:	61fa      	str	r2, [r7, #28]
 8009102:	61bb      	str	r3, [r7, #24]
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 8009104:	69b9      	ldr	r1, [r7, #24]
 8009106:	69fa      	ldr	r2, [r7, #28]
 8009108:	e841 2300 	strex	r3, r2, [r1]
 800910c:	617b      	str	r3, [r7, #20]
    return (result);
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d1e5      	bne.n	80090e0 <UART_DMAReceiveCplt+0xce>
        }
    }

    /* Check current reception Mode :
       If Reception till IDLE event has been selected : use Rx Event callback */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 8009114:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009118:	2b01      	cmp	r3, #1
 800911a:	d106      	bne.n	800912a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800911c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800911e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009120:	4619      	mov	r1, r3
 8009122:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009124:	f7ff ff69 	bl	8008ffa <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    }
}
 8009128:	e002      	b.n	8009130 <UART_DMAReceiveCplt+0x11e>
        HAL_UART_RxCpltCallback(huart);
 800912a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800912c:	f7ff ff47 	bl	8008fbe <HAL_UART_RxCpltCallback>
}
 8009130:	bf00      	nop
 8009132:	3770      	adds	r7, #112	@ 0x70
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <UART_DMARxHalfCplt>:
 * @brief DMA UART receive process half complete callback
 * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA module.
 * @retval None
 */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef * hdma) {
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009144:	60fb      	str	r3, [r7, #12]

    /* Check current reception Mode :
       If Reception till IDLE event has been selected : use Rx Event callback */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800914a:	2b01      	cmp	r3, #1
 800914c:	d108      	bne.n	8009160 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009152:	085b      	lsrs	r3, r3, #1
 8009154:	b29b      	uxth	r3, r3
 8009156:	4619      	mov	r1, r3
 8009158:	68f8      	ldr	r0, [r7, #12]
 800915a:	f7ff ff4e 	bl	8008ffa <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx Half complete callback*/
        HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    }
}
 800915e:	e002      	b.n	8009166 <UART_DMARxHalfCplt+0x2e>
        HAL_UART_RxHalfCpltCallback(huart);
 8009160:	68f8      	ldr	r0, [r7, #12]
 8009162:	f7ff ff36 	bl	8008fd2 <HAL_UART_RxHalfCpltCallback>
}
 8009166:	bf00      	nop
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <UART_DMAError>:
 * @brief  DMA UART communication error callback.
 * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA module.
 * @retval None
 */
static void UART_DMAError(DMA_HandleTypeDef * hdma) {
 800916e:	b580      	push	{r7, lr}
 8009170:	b084      	sub	sp, #16
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
    uint32_t dmarequest = 0x00U;
 8009176:	2300      	movs	r3, #0
 8009178:	60fb      	str	r3, [r7, #12]
    UART_HandleTypeDef * huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800917e:	60bb      	str	r3, [r7, #8]

    /* Stop UART DMA Tx request if ongoing */
    dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	695b      	ldr	r3, [r3, #20]
 8009186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800918a:	2b80      	cmp	r3, #128	@ 0x80
 800918c:	bf0c      	ite	eq
 800918e:	2301      	moveq	r3, #1
 8009190:	2300      	movne	r3, #0
 8009192:	b2db      	uxtb	r3, r3
 8009194:	60fb      	str	r3, [r7, #12]
    if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest) {
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800919c:	b2db      	uxtb	r3, r3
 800919e:	2b21      	cmp	r3, #33	@ 0x21
 80091a0:	d108      	bne.n	80091b4 <UART_DMAError+0x46>
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d005      	beq.n	80091b4 <UART_DMAError+0x46>
        huart->TxXferCount = 0x00U;
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	2200      	movs	r2, #0
 80091ac:	84da      	strh	r2, [r3, #38]	@ 0x26
        UART_EndTxTransfer(huart);
 80091ae:	68b8      	ldr	r0, [r7, #8]
 80091b0:	f000 f8c6 	bl	8009340 <UART_EndTxTransfer>
    }

    /* Stop UART DMA Rx request if ongoing */
    dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	695b      	ldr	r3, [r3, #20]
 80091ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091be:	2b40      	cmp	r3, #64	@ 0x40
 80091c0:	bf0c      	ite	eq
 80091c2:	2301      	moveq	r3, #1
 80091c4:	2300      	movne	r3, #0
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	60fb      	str	r3, [r7, #12]
    if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest) {
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	2b22      	cmp	r3, #34	@ 0x22
 80091d4:	d108      	bne.n	80091e8 <UART_DMAError+0x7a>
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d005      	beq.n	80091e8 <UART_DMAError+0x7a>
        huart->RxXferCount = 0x00U;
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	2200      	movs	r2, #0
 80091e0:	85da      	strh	r2, [r3, #46]	@ 0x2e
        UART_EndRxTransfer(huart);
 80091e2:	68b8      	ldr	r0, [r7, #8]
 80091e4:	f000 f8d4 	bl	8009390 <UART_EndRxTransfer>
    }

    huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091ec:	f043 0210 	orr.w	r2, r3, #16
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    huart->ErrorCallback(huart);
#else
    /*Call legacy weak error callback*/
    HAL_UART_ErrorCallback(huart);
 80091f4:	68b8      	ldr	r0, [r7, #8]
 80091f6:	f7ff fef6 	bl	8008fe6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091fa:	bf00      	nop
 80091fc:	3710      	adds	r7, #16
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
	...

08009204 <UART_Start_Receive_DMA>:
 * @param  huart UART handle.
 * @param  pData Pointer to data buffer (u8 or u16 data elements).
 * @param  Size  Amount of data elements (u8 or u16) to be received.
 * @retval HAL status
 */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef * huart, uint8_t * pData, uint16_t Size) {
 8009204:	b580      	push	{r7, lr}
 8009206:	b098      	sub	sp, #96	@ 0x60
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	4613      	mov	r3, r2
 8009210:	80fb      	strh	r3, [r7, #6]
    uint32_t * tmp;

    huart->pRxBuffPtr = pData;
 8009212:	68ba      	ldr	r2, [r7, #8]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	629a      	str	r2, [r3, #40]	@ 0x28
    huart->RxXferSize = Size;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	88fa      	ldrh	r2, [r7, #6]
 800921c:	859a      	strh	r2, [r3, #44]	@ 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2200      	movs	r2, #0
 8009222:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2222      	movs	r2, #34	@ 0x22
 8009228:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009230:	4a40      	ldr	r2, [pc, #256]	@ (8009334 <UART_Start_Receive_DMA+0x130>)
 8009232:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009238:	4a3f      	ldr	r2, [pc, #252]	@ (8009338 <UART_Start_Receive_DMA+0x134>)
 800923a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009240:	4a3e      	ldr	r2, [pc, #248]	@ (800933c <UART_Start_Receive_DMA+0x138>)
 8009242:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009248:	2200      	movs	r2, #0
 800924a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800924c:	f107 0308 	add.w	r3, r7, #8
 8009250:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	3304      	adds	r3, #4
 800925c:	4619      	mov	r1, r3
 800925e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	88fb      	ldrh	r3, [r7, #6]
 8009264:	f7fc f84a 	bl	80052fc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8009268:	2300      	movs	r3, #0
 800926a:	613b      	str	r3, [r7, #16]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	613b      	str	r3, [r7, #16]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	613b      	str	r3, [r7, #16]
 800927c:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2200      	movs	r2, #0
 8009282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if (huart->Init.Parity != UART_PARITY_NONE) {
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d019      	beq.n	80092c2 <UART_Start_Receive_DMA+0xbe>
        /* Enable the UART Parity Error Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	330c      	adds	r3, #12
 8009294:	643b      	str	r3, [r7, #64]	@ 0x40
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 8009296:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009298:	e853 3f00 	ldrex	r3, [r3]
 800929c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return (result);
 800929e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	330c      	adds	r3, #12
 80092ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80092ae:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80092b0:	64bb      	str	r3, [r7, #72]	@ 0x48
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 80092b2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80092b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80092b6:	e841 2300 	strex	r3, r2, [r1]
 80092ba:	647b      	str	r3, [r7, #68]	@ 0x44
    return (result);
 80092bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1e5      	bne.n	800928e <UART_Start_Receive_DMA+0x8a>
    }

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	3314      	adds	r3, #20
 80092c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 80092ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092cc:	e853 3f00 	ldrex	r3, [r3]
 80092d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    return (result);
 80092d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092d4:	f043 0301 	orr.w	r3, r3, #1
 80092d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	3314      	adds	r3, #20
 80092e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80092e2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80092e4:	637b      	str	r3, [r7, #52]	@ 0x34
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 80092e6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80092e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80092ea:	e841 2300 	strex	r3, r2, [r1]
 80092ee:	633b      	str	r3, [r7, #48]	@ 0x30
    return (result);
 80092f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1e5      	bne.n	80092c2 <UART_Start_Receive_DMA+0xbe>

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	3314      	adds	r3, #20
 80092fc:	61bb      	str	r3, [r7, #24]
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 80092fe:	69bb      	ldr	r3, [r7, #24]
 8009300:	e853 3f00 	ldrex	r3, [r3]
 8009304:	617b      	str	r3, [r7, #20]
    return (result);
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800930c:	653b      	str	r3, [r7, #80]	@ 0x50
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	3314      	adds	r3, #20
 8009314:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009316:	627a      	str	r2, [r7, #36]	@ 0x24
 8009318:	623b      	str	r3, [r7, #32]
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 800931a:	6a39      	ldr	r1, [r7, #32]
 800931c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800931e:	e841 2300 	strex	r3, r2, [r1]
 8009322:	61fb      	str	r3, [r7, #28]
    return (result);
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d1e5      	bne.n	80092f6 <UART_Start_Receive_DMA+0xf2>

    return HAL_OK;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3760      	adds	r7, #96	@ 0x60
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}
 8009334:	08009013 	.word	0x08009013
 8009338:	08009139 	.word	0x08009139
 800933c:	0800916f 	.word	0x0800916f

08009340 <UART_EndTxTransfer>:
/**
 * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
 * @param  huart UART handle.
 * @retval None
 */
static void UART_EndTxTransfer(UART_HandleTypeDef * huart) {
 8009340:	b480      	push	{r7}
 8009342:	b089      	sub	sp, #36	@ 0x24
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
    /* Disable TXEIE and TCIE interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	330c      	adds	r3, #12
 800934e:	60fb      	str	r3, [r7, #12]
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	e853 3f00 	ldrex	r3, [r3]
 8009356:	60bb      	str	r3, [r7, #8]
    return (result);
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800935e:	61fb      	str	r3, [r7, #28]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	330c      	adds	r3, #12
 8009366:	69fa      	ldr	r2, [r7, #28]
 8009368:	61ba      	str	r2, [r7, #24]
 800936a:	617b      	str	r3, [r7, #20]
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 800936c:	6979      	ldr	r1, [r7, #20]
 800936e:	69ba      	ldr	r2, [r7, #24]
 8009370:	e841 2300 	strex	r3, r2, [r1]
 8009374:	613b      	str	r3, [r7, #16]
    return (result);
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d1e5      	bne.n	8009348 <UART_EndTxTransfer+0x8>

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2220      	movs	r2, #32
 8009380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 8009384:	bf00      	nop
 8009386:	3724      	adds	r7, #36	@ 0x24
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr

08009390 <UART_EndRxTransfer>:
/**
 * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
 * @param  huart UART handle.
 * @retval None
 */
static void UART_EndRxTransfer(UART_HandleTypeDef * huart) {
 8009390:	b480      	push	{r7}
 8009392:	b095      	sub	sp, #84	@ 0x54
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	330c      	adds	r3, #12
 800939e:	637b      	str	r3, [r7, #52]	@ 0x34
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 80093a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093a2:	e853 3f00 	ldrex	r3, [r3]
 80093a6:	633b      	str	r3, [r7, #48]	@ 0x30
    return (result);
 80093a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	330c      	adds	r3, #12
 80093b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80093b8:	643a      	str	r2, [r7, #64]	@ 0x40
 80093ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 80093bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80093be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80093c0:	e841 2300 	strex	r3, r2, [r1]
 80093c4:	63bb      	str	r3, [r7, #56]	@ 0x38
    return (result);
 80093c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d1e5      	bne.n	8009398 <UART_EndRxTransfer+0x8>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	3314      	adds	r3, #20
 80093d2:	623b      	str	r3, [r7, #32]
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 80093d4:	6a3b      	ldr	r3, [r7, #32]
 80093d6:	e853 3f00 	ldrex	r3, [r3]
 80093da:	61fb      	str	r3, [r7, #28]
    return (result);
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	f023 0301 	bic.w	r3, r3, #1
 80093e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	3314      	adds	r3, #20
 80093ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80093ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 80093f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093f4:	e841 2300 	strex	r3, r2, [r1]
 80093f8:	627b      	str	r3, [r7, #36]	@ 0x24
    return (result);
 80093fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d1e5      	bne.n	80093cc <UART_EndRxTransfer+0x3c>

    /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009404:	2b01      	cmp	r3, #1
 8009406:	d119      	bne.n	800943c <UART_EndRxTransfer+0xac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	330c      	adds	r3, #12
 800940e:	60fb      	str	r3, [r7, #12]
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	e853 3f00 	ldrex	r3, [r3]
 8009416:	60bb      	str	r3, [r7, #8]
    return (result);
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	f023 0310 	bic.w	r3, r3, #16
 800941e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	330c      	adds	r3, #12
 8009426:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009428:	61ba      	str	r2, [r7, #24]
 800942a:	617b      	str	r3, [r7, #20]
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 800942c:	6979      	ldr	r1, [r7, #20]
 800942e:	69ba      	ldr	r2, [r7, #24]
 8009430:	e841 2300 	strex	r3, r2, [r1]
 8009434:	613b      	str	r3, [r7, #16]
    return (result);
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d1e5      	bne.n	8009408 <UART_EndRxTransfer+0x78>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2220      	movs	r2, #32
 8009440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800944a:	bf00      	nop
 800944c:	3754      	adds	r7, #84	@ 0x54
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr
	...

08009458 <UART_SetConfig>:
 * @brief  Configures the UART peripheral.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
static void UART_SetConfig(UART_HandleTypeDef * huart) {
 8009458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800945c:	b0c0      	sub	sp, #256	@ 0x100
 800945e:	af00      	add	r7, sp, #0
 8009460:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
    assert_param(IS_UART_MODE(huart->Init.Mode));

    /*-------------------------- USART CR2 Configuration -----------------------*/
    /* Configure the UART Stop Bits: Set STOP[13:12] bits
       according to huart->Init.StopBits value */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	691b      	ldr	r3, [r3, #16]
 800946c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009474:	68d9      	ldr	r1, [r3, #12]
 8009476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	ea40 0301 	orr.w	r3, r0, r1
 8009480:	6113      	str	r3, [r2, #16]
       Set the M bits according to huart->Init.WordLength value
       Set PCE and PS bits according to huart->Init.Parity value
       Set TE and RE bits according to huart->Init.Mode value
       Set OVER8 bit according to huart->Init.OverSampling value */

    tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009486:	689a      	ldr	r2, [r3, #8]
 8009488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800948c:	691b      	ldr	r3, [r3, #16]
 800948e:	431a      	orrs	r2, r3
 8009490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009494:	695b      	ldr	r3, [r3, #20]
 8009496:	431a      	orrs	r2, r3
 8009498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800949c:	69db      	ldr	r3, [r3, #28]
 800949e:	4313      	orrs	r3, r2
 80094a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    MODIFY_REG(huart->Instance->CR1, (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), tmpreg);
 80094a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80094b0:	f021 010c 	bic.w	r1, r1, #12
 80094b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80094be:	430b      	orrs	r3, r1
 80094c0:	60d3      	str	r3, [r2, #12]

    /*-------------------------- USART CR3 Configuration -----------------------*/
    /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
    MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80094c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	695b      	ldr	r3, [r3, #20]
 80094ca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80094ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094d2:	6999      	ldr	r1, [r3, #24]
 80094d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	ea40 0301 	orr.w	r3, r0, r1
 80094de:	6153      	str	r3, [r2, #20]
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10)) {
        pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6)) {
 80094e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	4b8f      	ldr	r3, [pc, #572]	@ (8009724 <UART_SetConfig+0x2cc>)
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d005      	beq.n	80094f8 <UART_SetConfig+0xa0>
 80094ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	4b8d      	ldr	r3, [pc, #564]	@ (8009728 <UART_SetConfig+0x2d0>)
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d104      	bne.n	8009502 <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetPCLK2Freq();
 80094f8:	f7ff f86e 	bl	80085d8 <HAL_RCC_GetPCLK2Freq>
 80094fc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009500:	e003      	b.n	800950a <UART_SetConfig+0xb2>
    if (huart->Instance == USART1) {
        pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else {
        pclk = HAL_RCC_GetPCLK1Freq();
 8009502:	f7ff f855 	bl	80085b0 <HAL_RCC_GetPCLK1Freq>
 8009506:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
    /*-------------------------- USART BRR Configuration ---------------------*/
    if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 800950a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800950e:	69db      	ldr	r3, [r3, #28]
 8009510:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009514:	f040 810c 	bne.w	8009730 <UART_SetConfig+0x2d8>
        huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009518:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800951c:	2200      	movs	r2, #0
 800951e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009522:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009526:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800952a:	4622      	mov	r2, r4
 800952c:	462b      	mov	r3, r5
 800952e:	1891      	adds	r1, r2, r2
 8009530:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009532:	415b      	adcs	r3, r3
 8009534:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009536:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800953a:	4621      	mov	r1, r4
 800953c:	eb12 0801 	adds.w	r8, r2, r1
 8009540:	4629      	mov	r1, r5
 8009542:	eb43 0901 	adc.w	r9, r3, r1
 8009546:	f04f 0200 	mov.w	r2, #0
 800954a:	f04f 0300 	mov.w	r3, #0
 800954e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009552:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009556:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800955a:	4690      	mov	r8, r2
 800955c:	4699      	mov	r9, r3
 800955e:	4623      	mov	r3, r4
 8009560:	eb18 0303 	adds.w	r3, r8, r3
 8009564:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009568:	462b      	mov	r3, r5
 800956a:	eb49 0303 	adc.w	r3, r9, r3
 800956e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800957e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009582:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009586:	460b      	mov	r3, r1
 8009588:	18db      	adds	r3, r3, r3
 800958a:	653b      	str	r3, [r7, #80]	@ 0x50
 800958c:	4613      	mov	r3, r2
 800958e:	eb42 0303 	adc.w	r3, r2, r3
 8009592:	657b      	str	r3, [r7, #84]	@ 0x54
 8009594:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009598:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800959c:	f7f7 fb7c 	bl	8000c98 <__aeabi_uldivmod>
 80095a0:	4602      	mov	r2, r0
 80095a2:	460b      	mov	r3, r1
 80095a4:	4b61      	ldr	r3, [pc, #388]	@ (800972c <UART_SetConfig+0x2d4>)
 80095a6:	fba3 2302 	umull	r2, r3, r3, r2
 80095aa:	095b      	lsrs	r3, r3, #5
 80095ac:	011c      	lsls	r4, r3, #4
 80095ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80095b2:	2200      	movs	r2, #0
 80095b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80095b8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80095bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80095c0:	4642      	mov	r2, r8
 80095c2:	464b      	mov	r3, r9
 80095c4:	1891      	adds	r1, r2, r2
 80095c6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80095c8:	415b      	adcs	r3, r3
 80095ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80095d0:	4641      	mov	r1, r8
 80095d2:	eb12 0a01 	adds.w	sl, r2, r1
 80095d6:	4649      	mov	r1, r9
 80095d8:	eb43 0b01 	adc.w	fp, r3, r1
 80095dc:	f04f 0200 	mov.w	r2, #0
 80095e0:	f04f 0300 	mov.w	r3, #0
 80095e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80095e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80095ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80095f0:	4692      	mov	sl, r2
 80095f2:	469b      	mov	fp, r3
 80095f4:	4643      	mov	r3, r8
 80095f6:	eb1a 0303 	adds.w	r3, sl, r3
 80095fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80095fe:	464b      	mov	r3, r9
 8009600:	eb4b 0303 	adc.w	r3, fp, r3
 8009604:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009614:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009618:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800961c:	460b      	mov	r3, r1
 800961e:	18db      	adds	r3, r3, r3
 8009620:	643b      	str	r3, [r7, #64]	@ 0x40
 8009622:	4613      	mov	r3, r2
 8009624:	eb42 0303 	adc.w	r3, r2, r3
 8009628:	647b      	str	r3, [r7, #68]	@ 0x44
 800962a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800962e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009632:	f7f7 fb31 	bl	8000c98 <__aeabi_uldivmod>
 8009636:	4602      	mov	r2, r0
 8009638:	460b      	mov	r3, r1
 800963a:	4611      	mov	r1, r2
 800963c:	4b3b      	ldr	r3, [pc, #236]	@ (800972c <UART_SetConfig+0x2d4>)
 800963e:	fba3 2301 	umull	r2, r3, r3, r1
 8009642:	095b      	lsrs	r3, r3, #5
 8009644:	2264      	movs	r2, #100	@ 0x64
 8009646:	fb02 f303 	mul.w	r3, r2, r3
 800964a:	1acb      	subs	r3, r1, r3
 800964c:	00db      	lsls	r3, r3, #3
 800964e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009652:	4b36      	ldr	r3, [pc, #216]	@ (800972c <UART_SetConfig+0x2d4>)
 8009654:	fba3 2302 	umull	r2, r3, r3, r2
 8009658:	095b      	lsrs	r3, r3, #5
 800965a:	005b      	lsls	r3, r3, #1
 800965c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009660:	441c      	add	r4, r3
 8009662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009666:	2200      	movs	r2, #0
 8009668:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800966c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009670:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009674:	4642      	mov	r2, r8
 8009676:	464b      	mov	r3, r9
 8009678:	1891      	adds	r1, r2, r2
 800967a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800967c:	415b      	adcs	r3, r3
 800967e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009680:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009684:	4641      	mov	r1, r8
 8009686:	1851      	adds	r1, r2, r1
 8009688:	6339      	str	r1, [r7, #48]	@ 0x30
 800968a:	4649      	mov	r1, r9
 800968c:	414b      	adcs	r3, r1
 800968e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009690:	f04f 0200 	mov.w	r2, #0
 8009694:	f04f 0300 	mov.w	r3, #0
 8009698:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800969c:	4659      	mov	r1, fp
 800969e:	00cb      	lsls	r3, r1, #3
 80096a0:	4651      	mov	r1, sl
 80096a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80096a6:	4651      	mov	r1, sl
 80096a8:	00ca      	lsls	r2, r1, #3
 80096aa:	4610      	mov	r0, r2
 80096ac:	4619      	mov	r1, r3
 80096ae:	4603      	mov	r3, r0
 80096b0:	4642      	mov	r2, r8
 80096b2:	189b      	adds	r3, r3, r2
 80096b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80096b8:	464b      	mov	r3, r9
 80096ba:	460a      	mov	r2, r1
 80096bc:	eb42 0303 	adc.w	r3, r2, r3
 80096c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80096c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80096d0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80096d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80096d8:	460b      	mov	r3, r1
 80096da:	18db      	adds	r3, r3, r3
 80096dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80096de:	4613      	mov	r3, r2
 80096e0:	eb42 0303 	adc.w	r3, r2, r3
 80096e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80096ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80096ee:	f7f7 fad3 	bl	8000c98 <__aeabi_uldivmod>
 80096f2:	4602      	mov	r2, r0
 80096f4:	460b      	mov	r3, r1
 80096f6:	4b0d      	ldr	r3, [pc, #52]	@ (800972c <UART_SetConfig+0x2d4>)
 80096f8:	fba3 1302 	umull	r1, r3, r3, r2
 80096fc:	095b      	lsrs	r3, r3, #5
 80096fe:	2164      	movs	r1, #100	@ 0x64
 8009700:	fb01 f303 	mul.w	r3, r1, r3
 8009704:	1ad3      	subs	r3, r2, r3
 8009706:	00db      	lsls	r3, r3, #3
 8009708:	3332      	adds	r3, #50	@ 0x32
 800970a:	4a08      	ldr	r2, [pc, #32]	@ (800972c <UART_SetConfig+0x2d4>)
 800970c:	fba2 2303 	umull	r2, r3, r2, r3
 8009710:	095b      	lsrs	r3, r3, #5
 8009712:	f003 0207 	and.w	r2, r3, #7
 8009716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4422      	add	r2, r4
 800971e:	609a      	str	r2, [r3, #8]
    } else {
        huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
}
 8009720:	e106      	b.n	8009930 <UART_SetConfig+0x4d8>
 8009722:	bf00      	nop
 8009724:	40011000 	.word	0x40011000
 8009728:	40011400 	.word	0x40011400
 800972c:	51eb851f 	.word	0x51eb851f
        huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009730:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009734:	2200      	movs	r2, #0
 8009736:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800973a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800973e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009742:	4642      	mov	r2, r8
 8009744:	464b      	mov	r3, r9
 8009746:	1891      	adds	r1, r2, r2
 8009748:	6239      	str	r1, [r7, #32]
 800974a:	415b      	adcs	r3, r3
 800974c:	627b      	str	r3, [r7, #36]	@ 0x24
 800974e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009752:	4641      	mov	r1, r8
 8009754:	1854      	adds	r4, r2, r1
 8009756:	4649      	mov	r1, r9
 8009758:	eb43 0501 	adc.w	r5, r3, r1
 800975c:	f04f 0200 	mov.w	r2, #0
 8009760:	f04f 0300 	mov.w	r3, #0
 8009764:	00eb      	lsls	r3, r5, #3
 8009766:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800976a:	00e2      	lsls	r2, r4, #3
 800976c:	4614      	mov	r4, r2
 800976e:	461d      	mov	r5, r3
 8009770:	4643      	mov	r3, r8
 8009772:	18e3      	adds	r3, r4, r3
 8009774:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009778:	464b      	mov	r3, r9
 800977a:	eb45 0303 	adc.w	r3, r5, r3
 800977e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	2200      	movs	r2, #0
 800978a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800978e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009792:	f04f 0200 	mov.w	r2, #0
 8009796:	f04f 0300 	mov.w	r3, #0
 800979a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800979e:	4629      	mov	r1, r5
 80097a0:	008b      	lsls	r3, r1, #2
 80097a2:	4621      	mov	r1, r4
 80097a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80097a8:	4621      	mov	r1, r4
 80097aa:	008a      	lsls	r2, r1, #2
 80097ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80097b0:	f7f7 fa72 	bl	8000c98 <__aeabi_uldivmod>
 80097b4:	4602      	mov	r2, r0
 80097b6:	460b      	mov	r3, r1
 80097b8:	4b60      	ldr	r3, [pc, #384]	@ (800993c <UART_SetConfig+0x4e4>)
 80097ba:	fba3 2302 	umull	r2, r3, r3, r2
 80097be:	095b      	lsrs	r3, r3, #5
 80097c0:	011c      	lsls	r4, r3, #4
 80097c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097c6:	2200      	movs	r2, #0
 80097c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80097cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80097d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80097d4:	4642      	mov	r2, r8
 80097d6:	464b      	mov	r3, r9
 80097d8:	1891      	adds	r1, r2, r2
 80097da:	61b9      	str	r1, [r7, #24]
 80097dc:	415b      	adcs	r3, r3
 80097de:	61fb      	str	r3, [r7, #28]
 80097e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80097e4:	4641      	mov	r1, r8
 80097e6:	1851      	adds	r1, r2, r1
 80097e8:	6139      	str	r1, [r7, #16]
 80097ea:	4649      	mov	r1, r9
 80097ec:	414b      	adcs	r3, r1
 80097ee:	617b      	str	r3, [r7, #20]
 80097f0:	f04f 0200 	mov.w	r2, #0
 80097f4:	f04f 0300 	mov.w	r3, #0
 80097f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80097fc:	4659      	mov	r1, fp
 80097fe:	00cb      	lsls	r3, r1, #3
 8009800:	4651      	mov	r1, sl
 8009802:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009806:	4651      	mov	r1, sl
 8009808:	00ca      	lsls	r2, r1, #3
 800980a:	4610      	mov	r0, r2
 800980c:	4619      	mov	r1, r3
 800980e:	4603      	mov	r3, r0
 8009810:	4642      	mov	r2, r8
 8009812:	189b      	adds	r3, r3, r2
 8009814:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009818:	464b      	mov	r3, r9
 800981a:	460a      	mov	r2, r1
 800981c:	eb42 0303 	adc.w	r3, r2, r3
 8009820:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800982e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009830:	f04f 0200 	mov.w	r2, #0
 8009834:	f04f 0300 	mov.w	r3, #0
 8009838:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800983c:	4649      	mov	r1, r9
 800983e:	008b      	lsls	r3, r1, #2
 8009840:	4641      	mov	r1, r8
 8009842:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009846:	4641      	mov	r1, r8
 8009848:	008a      	lsls	r2, r1, #2
 800984a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800984e:	f7f7 fa23 	bl	8000c98 <__aeabi_uldivmod>
 8009852:	4602      	mov	r2, r0
 8009854:	460b      	mov	r3, r1
 8009856:	4611      	mov	r1, r2
 8009858:	4b38      	ldr	r3, [pc, #224]	@ (800993c <UART_SetConfig+0x4e4>)
 800985a:	fba3 2301 	umull	r2, r3, r3, r1
 800985e:	095b      	lsrs	r3, r3, #5
 8009860:	2264      	movs	r2, #100	@ 0x64
 8009862:	fb02 f303 	mul.w	r3, r2, r3
 8009866:	1acb      	subs	r3, r1, r3
 8009868:	011b      	lsls	r3, r3, #4
 800986a:	3332      	adds	r3, #50	@ 0x32
 800986c:	4a33      	ldr	r2, [pc, #204]	@ (800993c <UART_SetConfig+0x4e4>)
 800986e:	fba2 2303 	umull	r2, r3, r2, r3
 8009872:	095b      	lsrs	r3, r3, #5
 8009874:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009878:	441c      	add	r4, r3
 800987a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800987e:	2200      	movs	r2, #0
 8009880:	673b      	str	r3, [r7, #112]	@ 0x70
 8009882:	677a      	str	r2, [r7, #116]	@ 0x74
 8009884:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009888:	4642      	mov	r2, r8
 800988a:	464b      	mov	r3, r9
 800988c:	1891      	adds	r1, r2, r2
 800988e:	60b9      	str	r1, [r7, #8]
 8009890:	415b      	adcs	r3, r3
 8009892:	60fb      	str	r3, [r7, #12]
 8009894:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009898:	4641      	mov	r1, r8
 800989a:	1851      	adds	r1, r2, r1
 800989c:	6039      	str	r1, [r7, #0]
 800989e:	4649      	mov	r1, r9
 80098a0:	414b      	adcs	r3, r1
 80098a2:	607b      	str	r3, [r7, #4]
 80098a4:	f04f 0200 	mov.w	r2, #0
 80098a8:	f04f 0300 	mov.w	r3, #0
 80098ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80098b0:	4659      	mov	r1, fp
 80098b2:	00cb      	lsls	r3, r1, #3
 80098b4:	4651      	mov	r1, sl
 80098b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098ba:	4651      	mov	r1, sl
 80098bc:	00ca      	lsls	r2, r1, #3
 80098be:	4610      	mov	r0, r2
 80098c0:	4619      	mov	r1, r3
 80098c2:	4603      	mov	r3, r0
 80098c4:	4642      	mov	r2, r8
 80098c6:	189b      	adds	r3, r3, r2
 80098c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80098ca:	464b      	mov	r3, r9
 80098cc:	460a      	mov	r2, r1
 80098ce:	eb42 0303 	adc.w	r3, r2, r3
 80098d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80098d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	2200      	movs	r2, #0
 80098dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80098de:	667a      	str	r2, [r7, #100]	@ 0x64
 80098e0:	f04f 0200 	mov.w	r2, #0
 80098e4:	f04f 0300 	mov.w	r3, #0
 80098e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80098ec:	4649      	mov	r1, r9
 80098ee:	008b      	lsls	r3, r1, #2
 80098f0:	4641      	mov	r1, r8
 80098f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098f6:	4641      	mov	r1, r8
 80098f8:	008a      	lsls	r2, r1, #2
 80098fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80098fe:	f7f7 f9cb 	bl	8000c98 <__aeabi_uldivmod>
 8009902:	4602      	mov	r2, r0
 8009904:	460b      	mov	r3, r1
 8009906:	4b0d      	ldr	r3, [pc, #52]	@ (800993c <UART_SetConfig+0x4e4>)
 8009908:	fba3 1302 	umull	r1, r3, r3, r2
 800990c:	095b      	lsrs	r3, r3, #5
 800990e:	2164      	movs	r1, #100	@ 0x64
 8009910:	fb01 f303 	mul.w	r3, r1, r3
 8009914:	1ad3      	subs	r3, r2, r3
 8009916:	011b      	lsls	r3, r3, #4
 8009918:	3332      	adds	r3, #50	@ 0x32
 800991a:	4a08      	ldr	r2, [pc, #32]	@ (800993c <UART_SetConfig+0x4e4>)
 800991c:	fba2 2303 	umull	r2, r3, r2, r3
 8009920:	095b      	lsrs	r3, r3, #5
 8009922:	f003 020f 	and.w	r2, r3, #15
 8009926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4422      	add	r2, r4
 800992e:	609a      	str	r2, [r3, #8]
}
 8009930:	bf00      	nop
 8009932:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009936:	46bd      	mov	sp, r7
 8009938:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800993c:	51eb851f 	.word	0x51eb851f

08009940 <USB_CoreInit>:
 * @param  USBx USB Instance
 * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
 *         the configuration information for the specified USBx peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef * USBx, USB_OTG_CfgTypeDef cfg) {
 8009940:	b084      	sub	sp, #16
 8009942:	b580      	push	{r7, lr}
 8009944:	b084      	sub	sp, #16
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
 800994a:	f107 001c 	add.w	r0, r7, #28
 800994e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    HAL_StatusTypeDef ret;
    if (cfg.phy_itface == USB_OTG_ULPI_PHY) {
 8009952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009954:	2b01      	cmp	r3, #1
 8009956:	d122      	bne.n	800999e <USB_CoreInit+0x5e>
        USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800995c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Init The ULPI Interface */
        USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	68db      	ldr	r3, [r3, #12]
 8009968:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800996c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	60d3      	str	r3, [r2, #12]

        /* Select vbus source */
        USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	60da      	str	r2, [r3, #12]
        if (cfg.use_external_vbus == 1U) {
 8009980:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009982:	2b01      	cmp	r3, #1
 8009984:	d105      	bne.n	8009992 <USB_CoreInit+0x52>
            USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	60da      	str	r2, [r3, #12]
        }

        /* Reset after a PHY select */
        ret = USB_CoreReset(USBx);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f001 fbee 	bl	800b174 <USB_CoreReset>
 8009998:	4603      	mov	r3, r0
 800999a:	73fb      	strb	r3, [r7, #15]
 800999c:	e01a      	b.n	80099d4 <USB_CoreInit+0x94>
    } else /* FS interface (embedded Phy) */
    {
        /* Select FS Embedded PHY */
        USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	68db      	ldr	r3, [r3, #12]
 80099a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	60da      	str	r2, [r3, #12]

        /* Reset after a PHY select */
        ret = USB_CoreReset(USBx);
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f001 fbe2 	bl	800b174 <USB_CoreReset>
 80099b0:	4603      	mov	r3, r0
 80099b2:	73fb      	strb	r3, [r7, #15]

        if (cfg.battery_charging_enable == 0U) {
 80099b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d106      	bne.n	80099c8 <USB_CoreInit+0x88>
            /* Activate the USB Transceiver */
            USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099be:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80099c6:	e005      	b.n	80099d4 <USB_CoreInit+0x94>
        } else {
            /* Deactivate the USB Transceiver */
            USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	639a      	str	r2, [r3, #56]	@ 0x38
        }
    }

    if (cfg.dma_enable == 1U) {
 80099d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d10b      	bne.n	80099f2 <USB_CoreInit+0xb2>
        USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	689b      	ldr	r3, [r3, #8]
 80099de:	f043 0206 	orr.w	r2, r3, #6
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	609a      	str	r2, [r3, #8]
        USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	f043 0220 	orr.w	r2, r3, #32
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	609a      	str	r2, [r3, #8]
    }

    return ret;
 80099f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3710      	adds	r7, #16
 80099f8:	46bd      	mov	sp, r7
 80099fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80099fe:	b004      	add	sp, #16
 8009a00:	4770      	bx	lr
	...

08009a04 <USB_SetTurnaroundTime>:
 * @brief  Set the USB turnaround time
 * @param  USBx USB Instance
 * @param  hclk: AHB clock frequency
 * @retval USB turnaround time In PHY Clocks number
 */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef * USBx, uint32_t hclk, uint8_t speed) {
 8009a04:	b480      	push	{r7}
 8009a06:	b087      	sub	sp, #28
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	4613      	mov	r3, r2
 8009a10:	71fb      	strb	r3, [r7, #7]

    /* The USBTRD is configured according to the tables below, depending on AHB frequency
    used by application. In the low AHB frequency range it is used to stretch enough the USB response
    time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
    latency to the Data FIFO */
    if (speed == USBD_FS_SPEED) {
 8009a12:	79fb      	ldrb	r3, [r7, #7]
 8009a14:	2b02      	cmp	r3, #2
 8009a16:	d165      	bne.n	8009ae4 <USB_SetTurnaroundTime+0xe0>
        if ((hclk >= 14200000U) && (hclk < 15000000U)) {
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	4a41      	ldr	r2, [pc, #260]	@ (8009b20 <USB_SetTurnaroundTime+0x11c>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d906      	bls.n	8009a2e <USB_SetTurnaroundTime+0x2a>
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	4a40      	ldr	r2, [pc, #256]	@ (8009b24 <USB_SetTurnaroundTime+0x120>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d202      	bcs.n	8009a2e <USB_SetTurnaroundTime+0x2a>
            /* hclk Clock Range between 14.2-15 MHz */
            UsbTrd = 0xFU;
 8009a28:	230f      	movs	r3, #15
 8009a2a:	617b      	str	r3, [r7, #20]
 8009a2c:	e062      	b.n	8009af4 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 15000000U) && (hclk < 16000000U)) {
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	4a3c      	ldr	r2, [pc, #240]	@ (8009b24 <USB_SetTurnaroundTime+0x120>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d306      	bcc.n	8009a44 <USB_SetTurnaroundTime+0x40>
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	4a3b      	ldr	r2, [pc, #236]	@ (8009b28 <USB_SetTurnaroundTime+0x124>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d202      	bcs.n	8009a44 <USB_SetTurnaroundTime+0x40>
            /* hclk Clock Range between 15-16 MHz */
            UsbTrd = 0xEU;
 8009a3e:	230e      	movs	r3, #14
 8009a40:	617b      	str	r3, [r7, #20]
 8009a42:	e057      	b.n	8009af4 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 16000000U) && (hclk < 17200000U)) {
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	4a38      	ldr	r2, [pc, #224]	@ (8009b28 <USB_SetTurnaroundTime+0x124>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d306      	bcc.n	8009a5a <USB_SetTurnaroundTime+0x56>
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	4a37      	ldr	r2, [pc, #220]	@ (8009b2c <USB_SetTurnaroundTime+0x128>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d202      	bcs.n	8009a5a <USB_SetTurnaroundTime+0x56>
            /* hclk Clock Range between 16-17.2 MHz */
            UsbTrd = 0xDU;
 8009a54:	230d      	movs	r3, #13
 8009a56:	617b      	str	r3, [r7, #20]
 8009a58:	e04c      	b.n	8009af4 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 17200000U) && (hclk < 18500000U)) {
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	4a33      	ldr	r2, [pc, #204]	@ (8009b2c <USB_SetTurnaroundTime+0x128>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d306      	bcc.n	8009a70 <USB_SetTurnaroundTime+0x6c>
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	4a32      	ldr	r2, [pc, #200]	@ (8009b30 <USB_SetTurnaroundTime+0x12c>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d802      	bhi.n	8009a70 <USB_SetTurnaroundTime+0x6c>
            /* hclk Clock Range between 17.2-18.5 MHz */
            UsbTrd = 0xCU;
 8009a6a:	230c      	movs	r3, #12
 8009a6c:	617b      	str	r3, [r7, #20]
 8009a6e:	e041      	b.n	8009af4 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 18500000U) && (hclk < 20000000U)) {
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	4a2f      	ldr	r2, [pc, #188]	@ (8009b30 <USB_SetTurnaroundTime+0x12c>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d906      	bls.n	8009a86 <USB_SetTurnaroundTime+0x82>
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	4a2e      	ldr	r2, [pc, #184]	@ (8009b34 <USB_SetTurnaroundTime+0x130>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d802      	bhi.n	8009a86 <USB_SetTurnaroundTime+0x82>
            /* hclk Clock Range between 18.5-20 MHz */
            UsbTrd = 0xBU;
 8009a80:	230b      	movs	r3, #11
 8009a82:	617b      	str	r3, [r7, #20]
 8009a84:	e036      	b.n	8009af4 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 20000000U) && (hclk < 21800000U)) {
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	4a2a      	ldr	r2, [pc, #168]	@ (8009b34 <USB_SetTurnaroundTime+0x130>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d906      	bls.n	8009a9c <USB_SetTurnaroundTime+0x98>
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	4a29      	ldr	r2, [pc, #164]	@ (8009b38 <USB_SetTurnaroundTime+0x134>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d802      	bhi.n	8009a9c <USB_SetTurnaroundTime+0x98>
            /* hclk Clock Range between 20-21.8 MHz */
            UsbTrd = 0xAU;
 8009a96:	230a      	movs	r3, #10
 8009a98:	617b      	str	r3, [r7, #20]
 8009a9a:	e02b      	b.n	8009af4 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 21800000U) && (hclk < 24000000U)) {
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	4a26      	ldr	r2, [pc, #152]	@ (8009b38 <USB_SetTurnaroundTime+0x134>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d906      	bls.n	8009ab2 <USB_SetTurnaroundTime+0xae>
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	4a25      	ldr	r2, [pc, #148]	@ (8009b3c <USB_SetTurnaroundTime+0x138>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d202      	bcs.n	8009ab2 <USB_SetTurnaroundTime+0xae>
            /* hclk Clock Range between 21.8-24 MHz */
            UsbTrd = 0x9U;
 8009aac:	2309      	movs	r3, #9
 8009aae:	617b      	str	r3, [r7, #20]
 8009ab0:	e020      	b.n	8009af4 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 24000000U) && (hclk < 27700000U)) {
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	4a21      	ldr	r2, [pc, #132]	@ (8009b3c <USB_SetTurnaroundTime+0x138>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d306      	bcc.n	8009ac8 <USB_SetTurnaroundTime+0xc4>
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	4a20      	ldr	r2, [pc, #128]	@ (8009b40 <USB_SetTurnaroundTime+0x13c>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d802      	bhi.n	8009ac8 <USB_SetTurnaroundTime+0xc4>
            /* hclk Clock Range between 24-27.7 MHz */
            UsbTrd = 0x8U;
 8009ac2:	2308      	movs	r3, #8
 8009ac4:	617b      	str	r3, [r7, #20]
 8009ac6:	e015      	b.n	8009af4 <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 27700000U) && (hclk < 32000000U)) {
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	4a1d      	ldr	r2, [pc, #116]	@ (8009b40 <USB_SetTurnaroundTime+0x13c>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d906      	bls.n	8009ade <USB_SetTurnaroundTime+0xda>
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	4a1c      	ldr	r2, [pc, #112]	@ (8009b44 <USB_SetTurnaroundTime+0x140>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d202      	bcs.n	8009ade <USB_SetTurnaroundTime+0xda>
            /* hclk Clock Range between 27.7-32 MHz */
            UsbTrd = 0x7U;
 8009ad8:	2307      	movs	r3, #7
 8009ada:	617b      	str	r3, [r7, #20]
 8009adc:	e00a      	b.n	8009af4 <USB_SetTurnaroundTime+0xf0>
        } else /* if(hclk >= 32000000) */
        {
            /* hclk Clock Range between 32-200 MHz */
            UsbTrd = 0x6U;
 8009ade:	2306      	movs	r3, #6
 8009ae0:	617b      	str	r3, [r7, #20]
 8009ae2:	e007      	b.n	8009af4 <USB_SetTurnaroundTime+0xf0>
        }
    } else if (speed == USBD_HS_SPEED) {
 8009ae4:	79fb      	ldrb	r3, [r7, #7]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d102      	bne.n	8009af0 <USB_SetTurnaroundTime+0xec>
        UsbTrd = USBD_HS_TRDT_VALUE;
 8009aea:	2309      	movs	r3, #9
 8009aec:	617b      	str	r3, [r7, #20]
 8009aee:	e001      	b.n	8009af4 <USB_SetTurnaroundTime+0xf0>
    } else {
        UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009af0:	2309      	movs	r3, #9
 8009af2:	617b      	str	r3, [r7, #20]
    }

    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	60da      	str	r2, [r3, #12]
    USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	68da      	ldr	r2, [r3, #12]
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	029b      	lsls	r3, r3, #10
 8009b08:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009b0c:	431a      	orrs	r2, r3
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8009b12:	2300      	movs	r3, #0
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	371c      	adds	r7, #28
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr
 8009b20:	00d8acbf 	.word	0x00d8acbf
 8009b24:	00e4e1c0 	.word	0x00e4e1c0
 8009b28:	00f42400 	.word	0x00f42400
 8009b2c:	01067380 	.word	0x01067380
 8009b30:	011a499f 	.word	0x011a499f
 8009b34:	01312cff 	.word	0x01312cff
 8009b38:	014ca43f 	.word	0x014ca43f
 8009b3c:	016e3600 	.word	0x016e3600
 8009b40:	01a6ab1f 	.word	0x01a6ab1f
 8009b44:	01e84800 	.word	0x01e84800

08009b48 <USB_EnableGlobalInt>:
 * @brief  USB_EnableGlobalInt
 *         Enables the controller's Global Int in the AHB Config reg
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef * USBx) {
 8009b48:	b480      	push	{r7}
 8009b4a:	b083      	sub	sp, #12
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	f043 0201 	orr.w	r2, r3, #1
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	370c      	adds	r7, #12
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr

08009b6a <USB_DisableGlobalInt>:
 * @brief  USB_DisableGlobalInt
 *         Disable the controller's Global Int in the AHB Config reg
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef * USBx) {
 8009b6a:	b480      	push	{r7}
 8009b6c:	b083      	sub	sp, #12
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
    USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	f023 0201 	bic.w	r2, r3, #1
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8009b7e:	2300      	movs	r3, #0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <USB_SetCurrentMode>:
 *          This parameter can be one of these values:
 *            @arg USB_DEVICE_MODE Peripheral mode
 *            @arg USB_HOST_MODE Host mode
 * @retval HAL status
 */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef * USBx, USB_OTG_ModeTypeDef mode) {
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	460b      	mov	r3, r1
 8009b96:	70fb      	strb	r3, [r7, #3]
    uint32_t ms = 0U;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	60fb      	str	r3, [r7, #12]

    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	60da      	str	r2, [r3, #12]

    if (mode == USB_HOST_MODE) {
 8009ba8:	78fb      	ldrb	r3, [r7, #3]
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d115      	bne.n	8009bda <USB_SetCurrentMode+0x4e>
        USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	60da      	str	r2, [r3, #12]

        do {
            HAL_Delay(1U);
 8009bba:	2001      	movs	r0, #1
 8009bbc:	f7fa fdf2 	bl	80047a4 <HAL_Delay>
            ms++;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	60fb      	str	r3, [r7, #12]
        } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f001 fa45 	bl	800b056 <USB_GetMode>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d01e      	beq.n	8009c10 <USB_SetCurrentMode+0x84>
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2b31      	cmp	r3, #49	@ 0x31
 8009bd6:	d9f0      	bls.n	8009bba <USB_SetCurrentMode+0x2e>
 8009bd8:	e01a      	b.n	8009c10 <USB_SetCurrentMode+0x84>
    } else if (mode == USB_DEVICE_MODE) {
 8009bda:	78fb      	ldrb	r3, [r7, #3]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d115      	bne.n	8009c0c <USB_SetCurrentMode+0x80>
        USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	60da      	str	r2, [r3, #12]

        do {
            HAL_Delay(1U);
 8009bec:	2001      	movs	r0, #1
 8009bee:	f7fa fdd9 	bl	80047a4 <HAL_Delay>
            ms++;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	60fb      	str	r3, [r7, #12]
        } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f001 fa2c 	bl	800b056 <USB_GetMode>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d005      	beq.n	8009c10 <USB_SetCurrentMode+0x84>
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2b31      	cmp	r3, #49	@ 0x31
 8009c08:	d9f0      	bls.n	8009bec <USB_SetCurrentMode+0x60>
 8009c0a:	e001      	b.n	8009c10 <USB_SetCurrentMode+0x84>
    } else {
        return HAL_ERROR;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	e005      	b.n	8009c1c <USB_SetCurrentMode+0x90>
    }

    if (ms == 50U) {
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2b32      	cmp	r3, #50	@ 0x32
 8009c14:	d101      	bne.n	8009c1a <USB_SetCurrentMode+0x8e>
        return HAL_ERROR;
 8009c16:	2301      	movs	r3, #1
 8009c18:	e000      	b.n	8009c1c <USB_SetCurrentMode+0x90>
    }

    return HAL_OK;
 8009c1a:	2300      	movs	r3, #0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3710      	adds	r7, #16
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <USB_DevInit>:
 * @param  USBx  Selected device
 * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
 *         the configuration information for the specified USBx peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef * USBx, USB_OTG_CfgTypeDef cfg) {
 8009c24:	b084      	sub	sp, #16
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b086      	sub	sp, #24
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
 8009c2e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009c32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    HAL_StatusTypeDef ret = HAL_OK;
 8009c36:	2300      	movs	r3, #0
 8009c38:	75fb      	strb	r3, [r7, #23]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	60fb      	str	r3, [r7, #12]
    uint32_t i;

    for (i = 0U; i < 15U; i++) {
 8009c3e:	2300      	movs	r3, #0
 8009c40:	613b      	str	r3, [r7, #16]
 8009c42:	e009      	b.n	8009c58 <USB_DevInit+0x34>
        USBx->DIEPTXF[i] = 0U;
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	3340      	adds	r3, #64	@ 0x40
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	4413      	add	r3, r2
 8009c4e:	2200      	movs	r2, #0
 8009c50:	605a      	str	r2, [r3, #4]
    for (i = 0U; i < 15U; i++) {
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	3301      	adds	r3, #1
 8009c56:	613b      	str	r3, [r7, #16]
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	2b0e      	cmp	r3, #14
 8009c5c:	d9f2      	bls.n	8009c44 <USB_DevInit+0x20>
        /* Enable HW VBUS sensing */
        USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
    }
#else
    /* VBUS Sensing setup */
    if (cfg.vbus_sensing_enable == 0U) {
 8009c5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d11c      	bne.n	8009c9e <USB_DevInit+0x7a>
        /*
         * Disable HW VBUS sensing. VBUS is internally considered to be always
         * at VBUS-Valid level (5V).
         */
        USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009c72:	f043 0302 	orr.w	r3, r3, #2
 8009c76:	6053      	str	r3, [r2, #4]
        USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c7c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	639a      	str	r2, [r3, #56]	@ 0x38
        USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c88:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	639a      	str	r2, [r3, #56]	@ 0x38
        USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c94:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	639a      	str	r2, [r3, #56]	@ 0x38
 8009c9c:	e00b      	b.n	8009cb6 <USB_DevInit+0x92>
    } else {
        /* Enable HW VBUS sensing */
        USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ca2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	639a      	str	r2, [r3, #56]	@ 0x38
        USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cae:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

    /* Restart the Phy Clock */
    USBx_PCGCCTL = 0U;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	6013      	str	r3, [r2, #0]

    /* Device mode configuration */
    USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cc8:	4619      	mov	r1, r3
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	680b      	ldr	r3, [r1, #0]
 8009cd4:	6013      	str	r3, [r2, #0]

    if (cfg.phy_itface == USB_OTG_ULPI_PHY) {
 8009cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d10c      	bne.n	8009cf6 <USB_DevInit+0xd2>
        if (cfg.speed == USBD_HS_SPEED) {
 8009cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d104      	bne.n	8009cec <USB_DevInit+0xc8>
            /* Set Core speed to High speed mode */
            (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009ce2:	2100      	movs	r1, #0
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 f965 	bl	8009fb4 <USB_SetDevSpeed>
 8009cea:	e008      	b.n	8009cfe <USB_DevInit+0xda>
        } else {
            /* Set Core speed to Full speed mode */
            (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009cec:	2101      	movs	r1, #1
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 f960 	bl	8009fb4 <USB_SetDevSpeed>
 8009cf4:	e003      	b.n	8009cfe <USB_DevInit+0xda>
        }
    } else {
        /* Set Core speed to Full speed mode */
        (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009cf6:	2103      	movs	r1, #3
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 f95b 	bl	8009fb4 <USB_SetDevSpeed>
    }

    /* Flush the FIFOs */
    if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009cfe:	2110      	movs	r1, #16
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 f8f3 	bl	8009eec <USB_FlushTxFifo>
 8009d06:	4603      	mov	r3, r0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d001      	beq.n	8009d10 <USB_DevInit+0xec>
    {
        ret = HAL_ERROR;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	75fb      	strb	r3, [r7, #23]
    }

    if (USB_FlushRxFifo(USBx) != HAL_OK) {
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 f91f 	bl	8009f54 <USB_FlushRxFifo>
 8009d16:	4603      	mov	r3, r0
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d001      	beq.n	8009d20 <USB_DevInit+0xfc>
        ret = HAL_ERROR;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	75fb      	strb	r3, [r7, #23]
    }

    /* Clear all pending Device Interrupts */
    USBx_DEVICE->DIEPMSK = 0U;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d26:	461a      	mov	r2, r3
 8009d28:	2300      	movs	r3, #0
 8009d2a:	6113      	str	r3, [r2, #16]
    USBx_DEVICE->DOEPMSK = 0U;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d32:	461a      	mov	r2, r3
 8009d34:	2300      	movs	r3, #0
 8009d36:	6153      	str	r3, [r2, #20]
    USBx_DEVICE->DAINTMSK = 0U;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d3e:	461a      	mov	r2, r3
 8009d40:	2300      	movs	r3, #0
 8009d42:	61d3      	str	r3, [r2, #28]

    for (i = 0U; i < cfg.dev_endpoints; i++) {
 8009d44:	2300      	movs	r3, #0
 8009d46:	613b      	str	r3, [r7, #16]
 8009d48:	e043      	b.n	8009dd2 <USB_DevInit+0x1ae>
        if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA) {
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	015a      	lsls	r2, r3, #5
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	4413      	add	r3, r2
 8009d52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d60:	d118      	bne.n	8009d94 <USB_DevInit+0x170>
            if (i == 0U) {
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d10a      	bne.n	8009d7e <USB_DevInit+0x15a>
                USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	015a      	lsls	r2, r3, #5
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	4413      	add	r3, r2
 8009d70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d74:	461a      	mov	r2, r3
 8009d76:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009d7a:	6013      	str	r3, [r2, #0]
 8009d7c:	e013      	b.n	8009da6 <USB_DevInit+0x182>
            } else {
                USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	015a      	lsls	r2, r3, #5
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	4413      	add	r3, r2
 8009d86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009d90:	6013      	str	r3, [r2, #0]
 8009d92:	e008      	b.n	8009da6 <USB_DevInit+0x182>
            }
        } else {
            USBx_INEP(i)->DIEPCTL = 0U;
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	015a      	lsls	r2, r3, #5
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	4413      	add	r3, r2
 8009d9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009da0:	461a      	mov	r2, r3
 8009da2:	2300      	movs	r3, #0
 8009da4:	6013      	str	r3, [r2, #0]
        }

        USBx_INEP(i)->DIEPTSIZ = 0U;
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	015a      	lsls	r2, r3, #5
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	4413      	add	r3, r2
 8009dae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009db2:	461a      	mov	r2, r3
 8009db4:	2300      	movs	r3, #0
 8009db6:	6113      	str	r3, [r2, #16]
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	015a      	lsls	r2, r3, #5
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	4413      	add	r3, r2
 8009dc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009dca:	6093      	str	r3, [r2, #8]
    for (i = 0U; i < cfg.dev_endpoints; i++) {
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	3301      	adds	r3, #1
 8009dd0:	613b      	str	r3, [r7, #16]
 8009dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dd4:	693a      	ldr	r2, [r7, #16]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d3b7      	bcc.n	8009d4a <USB_DevInit+0x126>
    }

    for (i = 0U; i < cfg.dev_endpoints; i++) {
 8009dda:	2300      	movs	r3, #0
 8009ddc:	613b      	str	r3, [r7, #16]
 8009dde:	e043      	b.n	8009e68 <USB_DevInit+0x244>
        if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) {
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	015a      	lsls	r2, r3, #5
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	4413      	add	r3, r2
 8009de8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009df2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009df6:	d118      	bne.n	8009e2a <USB_DevInit+0x206>
            if (i == 0U) {
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d10a      	bne.n	8009e14 <USB_DevInit+0x1f0>
                USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	015a      	lsls	r2, r3, #5
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	4413      	add	r3, r2
 8009e06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009e10:	6013      	str	r3, [r2, #0]
 8009e12:	e013      	b.n	8009e3c <USB_DevInit+0x218>
            } else {
                USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	015a      	lsls	r2, r3, #5
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e20:	461a      	mov	r2, r3
 8009e22:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009e26:	6013      	str	r3, [r2, #0]
 8009e28:	e008      	b.n	8009e3c <USB_DevInit+0x218>
            }
        } else {
            USBx_OUTEP(i)->DOEPCTL = 0U;
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	015a      	lsls	r2, r3, #5
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	4413      	add	r3, r2
 8009e32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e36:	461a      	mov	r2, r3
 8009e38:	2300      	movs	r3, #0
 8009e3a:	6013      	str	r3, [r2, #0]
        }

        USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	015a      	lsls	r2, r3, #5
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	4413      	add	r3, r2
 8009e44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e48:	461a      	mov	r2, r3
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	6113      	str	r3, [r2, #16]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	015a      	lsls	r2, r3, #5
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	4413      	add	r3, r2
 8009e56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009e60:	6093      	str	r3, [r2, #8]
    for (i = 0U; i < cfg.dev_endpoints; i++) {
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	3301      	adds	r3, #1
 8009e66:	613b      	str	r3, [r7, #16]
 8009e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e6a:	693a      	ldr	r2, [r7, #16]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d3b7      	bcc.n	8009de0 <USB_DevInit+0x1bc>
    }

    USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e76:	691b      	ldr	r3, [r3, #16]
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009e7e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e82:	6113      	str	r3, [r2, #16]

    /* Disable all interrupts. */
    USBx->GINTMSK = 0U;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	619a      	str	r2, [r3, #24]

    /* Clear any pending interrupts */
    USBx->GINTSTS = 0xBFFFFFFFU;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009e90:	615a      	str	r2, [r3, #20]

    /* Enable the common interrupts */
    if (cfg.dma_enable == 0U) {
 8009e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d105      	bne.n	8009ea4 <USB_DevInit+0x280>
        USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	699b      	ldr	r3, [r3, #24]
 8009e9c:	f043 0210 	orr.w	r2, r3, #16
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	619a      	str	r2, [r3, #24]
    }

    /* Enable interrupts matching to the Device mode ONLY */
    USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST | USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT | USB_OTG_GINTMSK_OEPINT | USB_OTG_GINTMSK_IISOIXFRM | USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	699a      	ldr	r2, [r3, #24]
 8009ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8009ee8 <USB_DevInit+0x2c4>)
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	6193      	str	r3, [r2, #24]

    if (cfg.Sof_enable != 0U) {
 8009eb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d005      	beq.n	8009ec2 <USB_DevInit+0x29e>
        USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	699b      	ldr	r3, [r3, #24]
 8009eba:	f043 0208 	orr.w	r2, r3, #8
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	619a      	str	r2, [r3, #24]
    }

    if (cfg.vbus_sensing_enable == 1U) {
 8009ec2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d107      	bne.n	8009ed8 <USB_DevInit+0x2b4>
        USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	699b      	ldr	r3, [r3, #24]
 8009ecc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009ed0:	f043 0304 	orr.w	r3, r3, #4
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	6193      	str	r3, [r2, #24]
    }

    return ret;
 8009ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3718      	adds	r7, #24
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ee4:	b004      	add	sp, #16
 8009ee6:	4770      	bx	lr
 8009ee8:	803c3800 	.word	0x803c3800

08009eec <USB_FlushTxFifo>:
  * @param  num  FIFO number
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef * USBx, uint32_t num) {
 8009eec:	b480      	push	{r7}
 8009eee:	b085      	sub	sp, #20
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
    __IO uint32_t count = 0U;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	60fb      	str	r3, [r7, #12]

    /* Wait for AHB master IDLE state. */
    do {
        count++;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	3301      	adds	r3, #1
 8009efe:	60fb      	str	r3, [r7, #12]

        if (count > 200000U) {
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	4a13      	ldr	r2, [pc, #76]	@ (8009f50 <USB_FlushTxFifo+0x64>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d901      	bls.n	8009f0c <USB_FlushTxFifo+0x20>
            return HAL_TIMEOUT;
 8009f08:	2303      	movs	r3, #3
 8009f0a:	e01b      	b.n	8009f44 <USB_FlushTxFifo+0x58>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	691b      	ldr	r3, [r3, #16]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	daf2      	bge.n	8009efa <USB_FlushTxFifo+0xe>

    /* Flush TX Fifo */
    count = 0U;
 8009f14:	2300      	movs	r3, #0
 8009f16:	60fb      	str	r3, [r7, #12]
    USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	019b      	lsls	r3, r3, #6
 8009f1c:	f043 0220 	orr.w	r2, r3, #32
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	611a      	str	r2, [r3, #16]

    do {
        count++;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	3301      	adds	r3, #1
 8009f28:	60fb      	str	r3, [r7, #12]

        if (count > 200000U) {
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	4a08      	ldr	r2, [pc, #32]	@ (8009f50 <USB_FlushTxFifo+0x64>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d901      	bls.n	8009f36 <USB_FlushTxFifo+0x4a>
            return HAL_TIMEOUT;
 8009f32:	2303      	movs	r3, #3
 8009f34:	e006      	b.n	8009f44 <USB_FlushTxFifo+0x58>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	f003 0320 	and.w	r3, r3, #32
 8009f3e:	2b20      	cmp	r3, #32
 8009f40:	d0f0      	beq.n	8009f24 <USB_FlushTxFifo+0x38>

    return HAL_OK;
 8009f42:	2300      	movs	r3, #0
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3714      	adds	r7, #20
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr
 8009f50:	00030d40 	.word	0x00030d40

08009f54 <USB_FlushRxFifo>:
/**
 * @brief  USB_FlushRxFifo  Flush Rx FIFO
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef * USBx) {
 8009f54:	b480      	push	{r7}
 8009f56:	b085      	sub	sp, #20
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
    __IO uint32_t count = 0U;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	60fb      	str	r3, [r7, #12]

    /* Wait for AHB master IDLE state. */
    do {
        count++;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	3301      	adds	r3, #1
 8009f64:	60fb      	str	r3, [r7, #12]

        if (count > 200000U) {
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	4a11      	ldr	r2, [pc, #68]	@ (8009fb0 <USB_FlushRxFifo+0x5c>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d901      	bls.n	8009f72 <USB_FlushRxFifo+0x1e>
            return HAL_TIMEOUT;
 8009f6e:	2303      	movs	r3, #3
 8009f70:	e018      	b.n	8009fa4 <USB_FlushRxFifo+0x50>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	691b      	ldr	r3, [r3, #16]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	daf2      	bge.n	8009f60 <USB_FlushRxFifo+0xc>

    /* Flush RX Fifo */
    count = 0U;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	60fb      	str	r3, [r7, #12]
    USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2210      	movs	r2, #16
 8009f82:	611a      	str	r2, [r3, #16]

    do {
        count++;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	3301      	adds	r3, #1
 8009f88:	60fb      	str	r3, [r7, #12]

        if (count > 200000U) {
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	4a08      	ldr	r2, [pc, #32]	@ (8009fb0 <USB_FlushRxFifo+0x5c>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d901      	bls.n	8009f96 <USB_FlushRxFifo+0x42>
            return HAL_TIMEOUT;
 8009f92:	2303      	movs	r3, #3
 8009f94:	e006      	b.n	8009fa4 <USB_FlushRxFifo+0x50>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	691b      	ldr	r3, [r3, #16]
 8009f9a:	f003 0310 	and.w	r3, r3, #16
 8009f9e:	2b10      	cmp	r3, #16
 8009fa0:	d0f0      	beq.n	8009f84 <USB_FlushRxFifo+0x30>

    return HAL_OK;
 8009fa2:	2300      	movs	r3, #0
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3714      	adds	r7, #20
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr
 8009fb0:	00030d40 	.word	0x00030d40

08009fb4 <USB_SetDevSpeed>:
 *            @arg USB_OTG_SPEED_HIGH: High speed mode
 *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
 *            @arg USB_OTG_SPEED_FULL: Full speed mode
 * @retval  Hal status
 */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef * USBx, uint8_t speed) {
 8009fb4:	b480      	push	{r7}
 8009fb6:	b085      	sub	sp, #20
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	70fb      	strb	r3, [r7, #3]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	60fb      	str	r3, [r7, #12]

    USBx_DEVICE->DCFG |= speed;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	78fb      	ldrb	r3, [r7, #3]
 8009fce:	68f9      	ldr	r1, [r7, #12]
 8009fd0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	600b      	str	r3, [r1, #0]
    return HAL_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3714      	adds	r7, #20
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr

08009fe6 <USB_GetDevSpeed>:
 * @retval speed  device speed
 *          This parameter can be one of these values:
 *            @arg USBD_HS_SPEED: High speed mode
 *            @arg USBD_FS_SPEED: Full speed mode
 */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef * USBx) {
 8009fe6:	b480      	push	{r7}
 8009fe8:	b087      	sub	sp, #28
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	613b      	str	r3, [r7, #16]
    uint8_t speed;
    uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	f003 0306 	and.w	r3, r3, #6
 8009ffe:	60fb      	str	r3, [r7, #12]

    if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ) {
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d102      	bne.n	800a00c <USB_GetDevSpeed+0x26>
        speed = USBD_HS_SPEED;
 800a006:	2300      	movs	r3, #0
 800a008:	75fb      	strb	r3, [r7, #23]
 800a00a:	e00a      	b.n	800a022 <USB_GetDevSpeed+0x3c>
    } else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) || (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ)) {
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2b02      	cmp	r3, #2
 800a010:	d002      	beq.n	800a018 <USB_GetDevSpeed+0x32>
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2b06      	cmp	r3, #6
 800a016:	d102      	bne.n	800a01e <USB_GetDevSpeed+0x38>
        speed = USBD_FS_SPEED;
 800a018:	2302      	movs	r3, #2
 800a01a:	75fb      	strb	r3, [r7, #23]
 800a01c:	e001      	b.n	800a022 <USB_GetDevSpeed+0x3c>
    } else {
        speed = 0xFU;
 800a01e:	230f      	movs	r3, #15
 800a020:	75fb      	strb	r3, [r7, #23]
    }

    return speed;
 800a022:	7dfb      	ldrb	r3, [r7, #23]
}
 800a024:	4618      	mov	r0, r3
 800a026:	371c      	adds	r7, #28
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr

0800a030 <USB_ActivateEndpoint>:
 * @brief  Activate and configure an endpoint
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep) {
 800a030:	b480      	push	{r7}
 800a032:	b085      	sub	sp, #20
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	60fb      	str	r3, [r7, #12]
    uint32_t epnum = (uint32_t)ep->num;
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	60bb      	str	r3, [r7, #8]

    if (ep->is_in == 1U) {
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	785b      	ldrb	r3, [r3, #1]
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d13a      	bne.n	800a0c2 <USB_ActivateEndpoint+0x92>
        USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a052:	69da      	ldr	r2, [r3, #28]
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	f003 030f 	and.w	r3, r3, #15
 800a05c:	2101      	movs	r1, #1
 800a05e:	fa01 f303 	lsl.w	r3, r1, r3
 800a062:	b29b      	uxth	r3, r3
 800a064:	68f9      	ldr	r1, [r7, #12]
 800a066:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a06a:	4313      	orrs	r3, r2
 800a06c:	61cb      	str	r3, [r1, #28]

        if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U) {
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	015a      	lsls	r2, r3, #5
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	4413      	add	r3, r2
 800a076:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a080:	2b00      	cmp	r3, #0
 800a082:	d155      	bne.n	800a130 <USB_ActivateEndpoint+0x100>
            USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) | ((uint32_t)ep->type << 18) | (epnum << 22) | USB_OTG_DIEPCTL_SD0PID_SEVNFRM | USB_OTG_DIEPCTL_USBAEP;
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	015a      	lsls	r2, r3, #5
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	4413      	add	r3, r2
 800a08c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	f3c3 010a 	ubfx	r1, r3, #0, #11
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	791b      	ldrb	r3, [r3, #4]
 800a09e:	049b      	lsls	r3, r3, #18
 800a0a0:	4319      	orrs	r1, r3
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	059b      	lsls	r3, r3, #22
 800a0a6:	430b      	orrs	r3, r1
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	68ba      	ldr	r2, [r7, #8]
 800a0ac:	0151      	lsls	r1, r2, #5
 800a0ae:	68fa      	ldr	r2, [r7, #12]
 800a0b0:	440a      	add	r2, r1
 800a0b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a0ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a0be:	6013      	str	r3, [r2, #0]
 800a0c0:	e036      	b.n	800a130 <USB_ActivateEndpoint+0x100>
        }
    } else {
        USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0c8:	69da      	ldr	r2, [r3, #28]
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	f003 030f 	and.w	r3, r3, #15
 800a0d2:	2101      	movs	r1, #1
 800a0d4:	fa01 f303 	lsl.w	r3, r1, r3
 800a0d8:	041b      	lsls	r3, r3, #16
 800a0da:	68f9      	ldr	r1, [r7, #12]
 800a0dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	61cb      	str	r3, [r1, #28]

        if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U) {
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	015a      	lsls	r2, r3, #5
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	4413      	add	r3, r2
 800a0ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d11a      	bne.n	800a130 <USB_ActivateEndpoint+0x100>
            USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) | ((uint32_t)ep->type << 18) | USB_OTG_DIEPCTL_SD0PID_SEVNFRM | USB_OTG_DOEPCTL_USBAEP;
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	015a      	lsls	r2, r3, #5
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	4413      	add	r3, r2
 800a102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	68db      	ldr	r3, [r3, #12]
 800a10c:	f3c3 010a 	ubfx	r1, r3, #0, #11
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	791b      	ldrb	r3, [r3, #4]
 800a114:	049b      	lsls	r3, r3, #18
 800a116:	430b      	orrs	r3, r1
 800a118:	4313      	orrs	r3, r2
 800a11a:	68ba      	ldr	r2, [r7, #8]
 800a11c:	0151      	lsls	r1, r2, #5
 800a11e:	68fa      	ldr	r2, [r7, #12]
 800a120:	440a      	add	r2, r1
 800a122:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a126:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a12a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a12e:	6013      	str	r3, [r2, #0]
        }
    }
    return HAL_OK;
 800a130:	2300      	movs	r3, #0
}
 800a132:	4618      	mov	r0, r3
 800a134:	3714      	adds	r7, #20
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr
	...

0800a140 <USB_DeactivateEndpoint>:
 * @brief  De-activate and de-initialize an endpoint
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep) {
 800a140:	b480      	push	{r7}
 800a142:	b085      	sub	sp, #20
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	60fb      	str	r3, [r7, #12]
    uint32_t epnum = (uint32_t)ep->num;
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	60bb      	str	r3, [r7, #8]

    /* Read DEPCTLn register */
    if (ep->is_in == 1U) {
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	785b      	ldrb	r3, [r3, #1]
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d161      	bne.n	800a220 <USB_DeactivateEndpoint+0xe0>
        if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA) {
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	015a      	lsls	r2, r3, #5
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	4413      	add	r3, r2
 800a164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a16e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a172:	d11f      	bne.n	800a1b4 <USB_DeactivateEndpoint+0x74>
            USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	015a      	lsls	r2, r3, #5
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	4413      	add	r3, r2
 800a17c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	68ba      	ldr	r2, [r7, #8]
 800a184:	0151      	lsls	r1, r2, #5
 800a186:	68fa      	ldr	r2, [r7, #12]
 800a188:	440a      	add	r2, r1
 800a18a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a18e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a192:	6013      	str	r3, [r2, #0]
            USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	015a      	lsls	r2, r3, #5
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	4413      	add	r3, r2
 800a19c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	68ba      	ldr	r2, [r7, #8]
 800a1a4:	0151      	lsls	r1, r2, #5
 800a1a6:	68fa      	ldr	r2, [r7, #12]
 800a1a8:	440a      	add	r2, r1
 800a1aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a1b2:	6013      	str	r3, [r2, #0]
        }

        USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	f003 030f 	and.w	r3, r3, #15
 800a1c4:	2101      	movs	r1, #1
 800a1c6:	fa01 f303 	lsl.w	r3, r1, r3
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	43db      	mvns	r3, r3
 800a1ce:	68f9      	ldr	r1, [r7, #12]
 800a1d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a1d4:	4013      	ands	r3, r2
 800a1d6:	63cb      	str	r3, [r1, #60]	@ 0x3c
        USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1de:	69da      	ldr	r2, [r3, #28]
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	f003 030f 	and.w	r3, r3, #15
 800a1e8:	2101      	movs	r1, #1
 800a1ea:	fa01 f303 	lsl.w	r3, r1, r3
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	43db      	mvns	r3, r3
 800a1f2:	68f9      	ldr	r1, [r7, #12]
 800a1f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a1f8:	4013      	ands	r3, r2
 800a1fa:	61cb      	str	r3, [r1, #28]
        USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP | USB_OTG_DIEPCTL_MPSIZ | USB_OTG_DIEPCTL_TXFNUM | USB_OTG_DIEPCTL_SD0PID_SEVNFRM | USB_OTG_DIEPCTL_EPTYP);
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	015a      	lsls	r2, r3, #5
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	4413      	add	r3, r2
 800a204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a208:	681a      	ldr	r2, [r3, #0]
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	0159      	lsls	r1, r3, #5
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	440b      	add	r3, r1
 800a212:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a216:	4619      	mov	r1, r3
 800a218:	4b35      	ldr	r3, [pc, #212]	@ (800a2f0 <USB_DeactivateEndpoint+0x1b0>)
 800a21a:	4013      	ands	r3, r2
 800a21c:	600b      	str	r3, [r1, #0]
 800a21e:	e060      	b.n	800a2e2 <USB_DeactivateEndpoint+0x1a2>
    } else {
        if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) {
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	015a      	lsls	r2, r3, #5
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	4413      	add	r3, r2
 800a228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a232:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a236:	d11f      	bne.n	800a278 <USB_DeactivateEndpoint+0x138>
            USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	015a      	lsls	r2, r3, #5
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	4413      	add	r3, r2
 800a240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	68ba      	ldr	r2, [r7, #8]
 800a248:	0151      	lsls	r1, r2, #5
 800a24a:	68fa      	ldr	r2, [r7, #12]
 800a24c:	440a      	add	r2, r1
 800a24e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a252:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a256:	6013      	str	r3, [r2, #0]
            USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	015a      	lsls	r2, r3, #5
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	4413      	add	r3, r2
 800a260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	68ba      	ldr	r2, [r7, #8]
 800a268:	0151      	lsls	r1, r2, #5
 800a26a:	68fa      	ldr	r2, [r7, #12]
 800a26c:	440a      	add	r2, r1
 800a26e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a272:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a276:	6013      	str	r3, [r2, #0]
        }

        USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a27e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	f003 030f 	and.w	r3, r3, #15
 800a288:	2101      	movs	r1, #1
 800a28a:	fa01 f303 	lsl.w	r3, r1, r3
 800a28e:	041b      	lsls	r3, r3, #16
 800a290:	43db      	mvns	r3, r3
 800a292:	68f9      	ldr	r1, [r7, #12]
 800a294:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a298:	4013      	ands	r3, r2
 800a29a:	63cb      	str	r3, [r1, #60]	@ 0x3c
        USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2a2:	69da      	ldr	r2, [r3, #28]
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	f003 030f 	and.w	r3, r3, #15
 800a2ac:	2101      	movs	r1, #1
 800a2ae:	fa01 f303 	lsl.w	r3, r1, r3
 800a2b2:	041b      	lsls	r3, r3, #16
 800a2b4:	43db      	mvns	r3, r3
 800a2b6:	68f9      	ldr	r1, [r7, #12]
 800a2b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a2bc:	4013      	ands	r3, r2
 800a2be:	61cb      	str	r3, [r1, #28]
        USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP | USB_OTG_DOEPCTL_MPSIZ | USB_OTG_DOEPCTL_SD0PID_SEVNFRM | USB_OTG_DOEPCTL_EPTYP);
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	015a      	lsls	r2, r3, #5
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	0159      	lsls	r1, r3, #5
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	440b      	add	r3, r1
 800a2d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2da:	4619      	mov	r1, r3
 800a2dc:	4b05      	ldr	r3, [pc, #20]	@ (800a2f4 <USB_DeactivateEndpoint+0x1b4>)
 800a2de:	4013      	ands	r3, r2
 800a2e0:	600b      	str	r3, [r1, #0]
    }

    return HAL_OK;
 800a2e2:	2300      	movs	r3, #0
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3714      	adds	r7, #20
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr
 800a2f0:	ec337800 	.word	0xec337800
 800a2f4:	eff37800 	.word	0xeff37800

0800a2f8 <USB_EPStartXfer>:
 *          This parameter can be one of these values:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep, uint8_t dma) {
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b08a      	sub	sp, #40	@ 0x28
 800a2fc:	af02      	add	r7, sp, #8
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	60b9      	str	r1, [r7, #8]
 800a302:	4613      	mov	r3, r2
 800a304:	71fb      	strb	r3, [r7, #7]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	61fb      	str	r3, [r7, #28]
    uint32_t epnum = (uint32_t)ep->num;
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	61bb      	str	r3, [r7, #24]
    uint16_t pktcnt;

    /* IN endpoint */
    if (ep->is_in == 1U) {
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	785b      	ldrb	r3, [r3, #1]
 800a314:	2b01      	cmp	r3, #1
 800a316:	f040 815c 	bne.w	800a5d2 <USB_EPStartXfer+0x2da>
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U) {
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	699b      	ldr	r3, [r3, #24]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d132      	bne.n	800a388 <USB_EPStartXfer+0x90>
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	015a      	lsls	r2, r3, #5
 800a326:	69fb      	ldr	r3, [r7, #28]
 800a328:	4413      	add	r3, r2
 800a32a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a32e:	691b      	ldr	r3, [r3, #16]
 800a330:	69ba      	ldr	r2, [r7, #24]
 800a332:	0151      	lsls	r1, r2, #5
 800a334:	69fa      	ldr	r2, [r7, #28]
 800a336:	440a      	add	r2, r1
 800a338:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a33c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a340:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a344:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	015a      	lsls	r2, r3, #5
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	4413      	add	r3, r2
 800a34e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a352:	691b      	ldr	r3, [r3, #16]
 800a354:	69ba      	ldr	r2, [r7, #24]
 800a356:	0151      	lsls	r1, r2, #5
 800a358:	69fa      	ldr	r2, [r7, #28]
 800a35a:	440a      	add	r2, r1
 800a35c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a360:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a364:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a366:	69bb      	ldr	r3, [r7, #24]
 800a368:	015a      	lsls	r2, r3, #5
 800a36a:	69fb      	ldr	r3, [r7, #28]
 800a36c:	4413      	add	r3, r2
 800a36e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a372:	691b      	ldr	r3, [r3, #16]
 800a374:	69ba      	ldr	r2, [r7, #24]
 800a376:	0151      	lsls	r1, r2, #5
 800a378:	69fa      	ldr	r2, [r7, #28]
 800a37a:	440a      	add	r2, r1
 800a37c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a380:	0cdb      	lsrs	r3, r3, #19
 800a382:	04db      	lsls	r3, r3, #19
 800a384:	6113      	str	r3, [r2, #16]
 800a386:	e074      	b.n	800a472 <USB_EPStartXfer+0x17a>
            /* Program the transfer size and packet count
             * as follows: xfersize = N * maxpacket +
             * short_packet pktcnt = N + (short_packet
             * exist ? 1 : 0)
             */
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a388:	69bb      	ldr	r3, [r7, #24]
 800a38a:	015a      	lsls	r2, r3, #5
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	4413      	add	r3, r2
 800a390:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a394:	691b      	ldr	r3, [r3, #16]
 800a396:	69ba      	ldr	r2, [r7, #24]
 800a398:	0151      	lsls	r1, r2, #5
 800a39a:	69fa      	ldr	r2, [r7, #28]
 800a39c:	440a      	add	r2, r1
 800a39e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3a2:	0cdb      	lsrs	r3, r3, #19
 800a3a4:	04db      	lsls	r3, r3, #19
 800a3a6:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a3a8:	69bb      	ldr	r3, [r7, #24]
 800a3aa:	015a      	lsls	r2, r3, #5
 800a3ac:	69fb      	ldr	r3, [r7, #28]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3b4:	691b      	ldr	r3, [r3, #16]
 800a3b6:	69ba      	ldr	r2, [r7, #24]
 800a3b8:	0151      	lsls	r1, r2, #5
 800a3ba:	69fa      	ldr	r2, [r7, #28]
 800a3bc:	440a      	add	r2, r1
 800a3be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3c2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a3c6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a3ca:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a3cc:	69bb      	ldr	r3, [r7, #24]
 800a3ce:	015a      	lsls	r2, r3, #5
 800a3d0:	69fb      	ldr	r3, [r7, #28]
 800a3d2:	4413      	add	r3, r2
 800a3d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3d8:	691a      	ldr	r2, [r3, #16]
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	6999      	ldr	r1, [r3, #24]
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	68db      	ldr	r3, [r3, #12]
 800a3e2:	440b      	add	r3, r1
 800a3e4:	1e59      	subs	r1, r3, #1
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	fbb1 f3f3 	udiv	r3, r1, r3
 800a3ee:	04d9      	lsls	r1, r3, #19
 800a3f0:	4b9d      	ldr	r3, [pc, #628]	@ (800a668 <USB_EPStartXfer+0x370>)
 800a3f2:	400b      	ands	r3, r1
 800a3f4:	69b9      	ldr	r1, [r7, #24]
 800a3f6:	0148      	lsls	r0, r1, #5
 800a3f8:	69f9      	ldr	r1, [r7, #28]
 800a3fa:	4401      	add	r1, r0
 800a3fc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a400:	4313      	orrs	r3, r2
 800a402:	610b      	str	r3, [r1, #16]

            USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a404:	69bb      	ldr	r3, [r7, #24]
 800a406:	015a      	lsls	r2, r3, #5
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	4413      	add	r3, r2
 800a40c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a410:	691a      	ldr	r2, [r3, #16]
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	699b      	ldr	r3, [r3, #24]
 800a416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a41a:	69b9      	ldr	r1, [r7, #24]
 800a41c:	0148      	lsls	r0, r1, #5
 800a41e:	69f9      	ldr	r1, [r7, #28]
 800a420:	4401      	add	r1, r0
 800a422:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a426:	4313      	orrs	r3, r2
 800a428:	610b      	str	r3, [r1, #16]

            if (ep->type == EP_TYPE_ISOC) {
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	791b      	ldrb	r3, [r3, #4]
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d11f      	bne.n	800a472 <USB_EPStartXfer+0x17a>
                USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a432:	69bb      	ldr	r3, [r7, #24]
 800a434:	015a      	lsls	r2, r3, #5
 800a436:	69fb      	ldr	r3, [r7, #28]
 800a438:	4413      	add	r3, r2
 800a43a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a43e:	691b      	ldr	r3, [r3, #16]
 800a440:	69ba      	ldr	r2, [r7, #24]
 800a442:	0151      	lsls	r1, r2, #5
 800a444:	69fa      	ldr	r2, [r7, #28]
 800a446:	440a      	add	r2, r1
 800a448:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a44c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a450:	6113      	str	r3, [r2, #16]
                USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	015a      	lsls	r2, r3, #5
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	4413      	add	r3, r2
 800a45a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a45e:	691b      	ldr	r3, [r3, #16]
 800a460:	69ba      	ldr	r2, [r7, #24]
 800a462:	0151      	lsls	r1, r2, #5
 800a464:	69fa      	ldr	r2, [r7, #28]
 800a466:	440a      	add	r2, r1
 800a468:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a46c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a470:	6113      	str	r3, [r2, #16]
            }
        }

        if (dma == 1U) {
 800a472:	79fb      	ldrb	r3, [r7, #7]
 800a474:	2b01      	cmp	r3, #1
 800a476:	d14b      	bne.n	800a510 <USB_EPStartXfer+0x218>
            if ((uint32_t)ep->dma_addr != 0U) {
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	695b      	ldr	r3, [r3, #20]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d009      	beq.n	800a494 <USB_EPStartXfer+0x19c>
                USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a480:	69bb      	ldr	r3, [r7, #24]
 800a482:	015a      	lsls	r2, r3, #5
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	4413      	add	r3, r2
 800a488:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a48c:	461a      	mov	r2, r3
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	695b      	ldr	r3, [r3, #20]
 800a492:	6153      	str	r3, [r2, #20]
            }

            if (ep->type == EP_TYPE_ISOC) {
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	791b      	ldrb	r3, [r3, #4]
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d128      	bne.n	800a4ee <USB_EPStartXfer+0x1f6>
                if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U) {
 800a49c:	69fb      	ldr	r3, [r7, #28]
 800a49e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4a2:	689b      	ldr	r3, [r3, #8]
 800a4a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d110      	bne.n	800a4ce <USB_EPStartXfer+0x1d6>
                    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a4ac:	69bb      	ldr	r3, [r7, #24]
 800a4ae:	015a      	lsls	r2, r3, #5
 800a4b0:	69fb      	ldr	r3, [r7, #28]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	69ba      	ldr	r2, [r7, #24]
 800a4bc:	0151      	lsls	r1, r2, #5
 800a4be:	69fa      	ldr	r2, [r7, #28]
 800a4c0:	440a      	add	r2, r1
 800a4c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4c6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a4ca:	6013      	str	r3, [r2, #0]
 800a4cc:	e00f      	b.n	800a4ee <USB_EPStartXfer+0x1f6>
                } else {
                    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	015a      	lsls	r2, r3, #5
 800a4d2:	69fb      	ldr	r3, [r7, #28]
 800a4d4:	4413      	add	r3, r2
 800a4d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	69ba      	ldr	r2, [r7, #24]
 800a4de:	0151      	lsls	r1, r2, #5
 800a4e0:	69fa      	ldr	r2, [r7, #28]
 800a4e2:	440a      	add	r2, r1
 800a4e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a4ec:	6013      	str	r3, [r2, #0]
                }
            }

            /* EP enable, IN data in FIFO */
            USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	015a      	lsls	r2, r3, #5
 800a4f2:	69fb      	ldr	r3, [r7, #28]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	69ba      	ldr	r2, [r7, #24]
 800a4fe:	0151      	lsls	r1, r2, #5
 800a500:	69fa      	ldr	r2, [r7, #28]
 800a502:	440a      	add	r2, r1
 800a504:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a508:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a50c:	6013      	str	r3, [r2, #0]
 800a50e:	e133      	b.n	800a778 <USB_EPStartXfer+0x480>
        } else {
            /* EP enable, IN data in FIFO */
            USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	015a      	lsls	r2, r3, #5
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	4413      	add	r3, r2
 800a518:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	69ba      	ldr	r2, [r7, #24]
 800a520:	0151      	lsls	r1, r2, #5
 800a522:	69fa      	ldr	r2, [r7, #28]
 800a524:	440a      	add	r2, r1
 800a526:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a52a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a52e:	6013      	str	r3, [r2, #0]

            if (ep->type != EP_TYPE_ISOC) {
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	791b      	ldrb	r3, [r3, #4]
 800a534:	2b01      	cmp	r3, #1
 800a536:	d015      	beq.n	800a564 <USB_EPStartXfer+0x26c>
                /* Enable the Tx FIFO Empty Interrupt for this EP */
                if (ep->xfer_len > 0U) {
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	699b      	ldr	r3, [r3, #24]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f000 811b 	beq.w	800a778 <USB_EPStartXfer+0x480>
                    USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a542:	69fb      	ldr	r3, [r7, #28]
 800a544:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a548:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	f003 030f 	and.w	r3, r3, #15
 800a552:	2101      	movs	r1, #1
 800a554:	fa01 f303 	lsl.w	r3, r1, r3
 800a558:	69f9      	ldr	r1, [r7, #28]
 800a55a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a55e:	4313      	orrs	r3, r2
 800a560:	634b      	str	r3, [r1, #52]	@ 0x34
 800a562:	e109      	b.n	800a778 <USB_EPStartXfer+0x480>
                }
            } else {
                if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U) {
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a570:	2b00      	cmp	r3, #0
 800a572:	d110      	bne.n	800a596 <USB_EPStartXfer+0x29e>
                    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a574:	69bb      	ldr	r3, [r7, #24]
 800a576:	015a      	lsls	r2, r3, #5
 800a578:	69fb      	ldr	r3, [r7, #28]
 800a57a:	4413      	add	r3, r2
 800a57c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	69ba      	ldr	r2, [r7, #24]
 800a584:	0151      	lsls	r1, r2, #5
 800a586:	69fa      	ldr	r2, [r7, #28]
 800a588:	440a      	add	r2, r1
 800a58a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a58e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a592:	6013      	str	r3, [r2, #0]
 800a594:	e00f      	b.n	800a5b6 <USB_EPStartXfer+0x2be>
                } else {
                    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a596:	69bb      	ldr	r3, [r7, #24]
 800a598:	015a      	lsls	r2, r3, #5
 800a59a:	69fb      	ldr	r3, [r7, #28]
 800a59c:	4413      	add	r3, r2
 800a59e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	69ba      	ldr	r2, [r7, #24]
 800a5a6:	0151      	lsls	r1, r2, #5
 800a5a8:	69fa      	ldr	r2, [r7, #28]
 800a5aa:	440a      	add	r2, r1
 800a5ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a5b4:	6013      	str	r3, [r2, #0]
                }

                (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	6919      	ldr	r1, [r3, #16]
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	781a      	ldrb	r2, [r3, #0]
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	699b      	ldr	r3, [r3, #24]
 800a5c2:	b298      	uxth	r0, r3
 800a5c4:	79fb      	ldrb	r3, [r7, #7]
 800a5c6:	9300      	str	r3, [sp, #0]
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	68f8      	ldr	r0, [r7, #12]
 800a5cc:	f000 fade 	bl	800ab8c <USB_WritePacket>
 800a5d0:	e0d2      	b.n	800a778 <USB_EPStartXfer+0x480>
    {
        /* Program the transfer size and packet count as follows:
         * pktcnt = N
         * xfersize = N * maxpacket
         */
        USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a5d2:	69bb      	ldr	r3, [r7, #24]
 800a5d4:	015a      	lsls	r2, r3, #5
 800a5d6:	69fb      	ldr	r3, [r7, #28]
 800a5d8:	4413      	add	r3, r2
 800a5da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5de:	691b      	ldr	r3, [r3, #16]
 800a5e0:	69ba      	ldr	r2, [r7, #24]
 800a5e2:	0151      	lsls	r1, r2, #5
 800a5e4:	69fa      	ldr	r2, [r7, #28]
 800a5e6:	440a      	add	r2, r1
 800a5e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5ec:	0cdb      	lsrs	r3, r3, #19
 800a5ee:	04db      	lsls	r3, r3, #19
 800a5f0:	6113      	str	r3, [r2, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a5f2:	69bb      	ldr	r3, [r7, #24]
 800a5f4:	015a      	lsls	r2, r3, #5
 800a5f6:	69fb      	ldr	r3, [r7, #28]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5fe:	691b      	ldr	r3, [r3, #16]
 800a600:	69ba      	ldr	r2, [r7, #24]
 800a602:	0151      	lsls	r1, r2, #5
 800a604:	69fa      	ldr	r2, [r7, #28]
 800a606:	440a      	add	r2, r1
 800a608:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a60c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a610:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a614:	6113      	str	r3, [r2, #16]

        if (ep->xfer_len == 0U) {
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	699b      	ldr	r3, [r3, #24]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d126      	bne.n	800a66c <USB_EPStartXfer+0x374>
            USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a61e:	69bb      	ldr	r3, [r7, #24]
 800a620:	015a      	lsls	r2, r3, #5
 800a622:	69fb      	ldr	r3, [r7, #28]
 800a624:	4413      	add	r3, r2
 800a626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a62a:	691a      	ldr	r2, [r3, #16]
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a634:	69b9      	ldr	r1, [r7, #24]
 800a636:	0148      	lsls	r0, r1, #5
 800a638:	69f9      	ldr	r1, [r7, #28]
 800a63a:	4401      	add	r1, r0
 800a63c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a640:	4313      	orrs	r3, r2
 800a642:	610b      	str	r3, [r1, #16]
            USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	015a      	lsls	r2, r3, #5
 800a648:	69fb      	ldr	r3, [r7, #28]
 800a64a:	4413      	add	r3, r2
 800a64c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a650:	691b      	ldr	r3, [r3, #16]
 800a652:	69ba      	ldr	r2, [r7, #24]
 800a654:	0151      	lsls	r1, r2, #5
 800a656:	69fa      	ldr	r2, [r7, #28]
 800a658:	440a      	add	r2, r1
 800a65a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a65e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a662:	6113      	str	r3, [r2, #16]
 800a664:	e03a      	b.n	800a6dc <USB_EPStartXfer+0x3e4>
 800a666:	bf00      	nop
 800a668:	1ff80000 	.word	0x1ff80000
        } else {
            pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	699a      	ldr	r2, [r3, #24]
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	4413      	add	r3, r2
 800a676:	1e5a      	subs	r2, r3, #1
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a680:	82fb      	strh	r3, [r7, #22]
            ep->xfer_size = ep->maxpacket * pktcnt;
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	68db      	ldr	r3, [r3, #12]
 800a686:	8afa      	ldrh	r2, [r7, #22]
 800a688:	fb03 f202 	mul.w	r2, r3, r2
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	61da      	str	r2, [r3, #28]

            USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a690:	69bb      	ldr	r3, [r7, #24]
 800a692:	015a      	lsls	r2, r3, #5
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	4413      	add	r3, r2
 800a698:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a69c:	691a      	ldr	r2, [r3, #16]
 800a69e:	8afb      	ldrh	r3, [r7, #22]
 800a6a0:	04d9      	lsls	r1, r3, #19
 800a6a2:	4b38      	ldr	r3, [pc, #224]	@ (800a784 <USB_EPStartXfer+0x48c>)
 800a6a4:	400b      	ands	r3, r1
 800a6a6:	69b9      	ldr	r1, [r7, #24]
 800a6a8:	0148      	lsls	r0, r1, #5
 800a6aa:	69f9      	ldr	r1, [r7, #28]
 800a6ac:	4401      	add	r1, r0
 800a6ae:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	610b      	str	r3, [r1, #16]
            USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	015a      	lsls	r2, r3, #5
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	4413      	add	r3, r2
 800a6be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6c2:	691a      	ldr	r2, [r3, #16]
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	69db      	ldr	r3, [r3, #28]
 800a6c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6cc:	69b9      	ldr	r1, [r7, #24]
 800a6ce:	0148      	lsls	r0, r1, #5
 800a6d0:	69f9      	ldr	r1, [r7, #28]
 800a6d2:	4401      	add	r1, r0
 800a6d4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	610b      	str	r3, [r1, #16]
        }

        if (dma == 1U) {
 800a6dc:	79fb      	ldrb	r3, [r7, #7]
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d10d      	bne.n	800a6fe <USB_EPStartXfer+0x406>
            if ((uint32_t)ep->xfer_buff != 0U) {
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	691b      	ldr	r3, [r3, #16]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d009      	beq.n	800a6fe <USB_EPStartXfer+0x406>
                USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	6919      	ldr	r1, [r3, #16]
 800a6ee:	69bb      	ldr	r3, [r7, #24]
 800a6f0:	015a      	lsls	r2, r3, #5
 800a6f2:	69fb      	ldr	r3, [r7, #28]
 800a6f4:	4413      	add	r3, r2
 800a6f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6fa:	460a      	mov	r2, r1
 800a6fc:	615a      	str	r2, [r3, #20]
            }
        }

        if (ep->type == EP_TYPE_ISOC) {
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	791b      	ldrb	r3, [r3, #4]
 800a702:	2b01      	cmp	r3, #1
 800a704:	d128      	bne.n	800a758 <USB_EPStartXfer+0x460>
            if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U) {
 800a706:	69fb      	ldr	r3, [r7, #28]
 800a708:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a70c:	689b      	ldr	r3, [r3, #8]
 800a70e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a712:	2b00      	cmp	r3, #0
 800a714:	d110      	bne.n	800a738 <USB_EPStartXfer+0x440>
                USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a716:	69bb      	ldr	r3, [r7, #24]
 800a718:	015a      	lsls	r2, r3, #5
 800a71a:	69fb      	ldr	r3, [r7, #28]
 800a71c:	4413      	add	r3, r2
 800a71e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	69ba      	ldr	r2, [r7, #24]
 800a726:	0151      	lsls	r1, r2, #5
 800a728:	69fa      	ldr	r2, [r7, #28]
 800a72a:	440a      	add	r2, r1
 800a72c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a730:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a734:	6013      	str	r3, [r2, #0]
 800a736:	e00f      	b.n	800a758 <USB_EPStartXfer+0x460>
            } else {
                USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a738:	69bb      	ldr	r3, [r7, #24]
 800a73a:	015a      	lsls	r2, r3, #5
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	4413      	add	r3, r2
 800a740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	69ba      	ldr	r2, [r7, #24]
 800a748:	0151      	lsls	r1, r2, #5
 800a74a:	69fa      	ldr	r2, [r7, #28]
 800a74c:	440a      	add	r2, r1
 800a74e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a752:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a756:	6013      	str	r3, [r2, #0]
            }
        }
        /* EP enable */
        USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a758:	69bb      	ldr	r3, [r7, #24]
 800a75a:	015a      	lsls	r2, r3, #5
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	4413      	add	r3, r2
 800a760:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	69ba      	ldr	r2, [r7, #24]
 800a768:	0151      	lsls	r1, r2, #5
 800a76a:	69fa      	ldr	r2, [r7, #28]
 800a76c:	440a      	add	r2, r1
 800a76e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a772:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a776:	6013      	str	r3, [r2, #0]
    }

    return HAL_OK;
 800a778:	2300      	movs	r3, #0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3720      	adds	r7, #32
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
 800a782:	bf00      	nop
 800a784:	1ff80000 	.word	0x1ff80000

0800a788 <USB_EP0StartXfer>:
 *          This parameter can be one of these values:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep, uint8_t dma) {
 800a788:	b480      	push	{r7}
 800a78a:	b087      	sub	sp, #28
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	60f8      	str	r0, [r7, #12]
 800a790:	60b9      	str	r1, [r7, #8]
 800a792:	4613      	mov	r3, r2
 800a794:	71fb      	strb	r3, [r7, #7]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	617b      	str	r3, [r7, #20]
    uint32_t epnum = (uint32_t)ep->num;
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	613b      	str	r3, [r7, #16]

    /* IN endpoint */
    if (ep->is_in == 1U) {
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	785b      	ldrb	r3, [r3, #1]
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	f040 80ce 	bne.w	800a946 <USB_EP0StartXfer+0x1be>
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U) {
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	699b      	ldr	r3, [r3, #24]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d132      	bne.n	800a818 <USB_EP0StartXfer+0x90>
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	015a      	lsls	r2, r3, #5
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	4413      	add	r3, r2
 800a7ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7be:	691b      	ldr	r3, [r3, #16]
 800a7c0:	693a      	ldr	r2, [r7, #16]
 800a7c2:	0151      	lsls	r1, r2, #5
 800a7c4:	697a      	ldr	r2, [r7, #20]
 800a7c6:	440a      	add	r2, r1
 800a7c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7cc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a7d0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a7d4:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	015a      	lsls	r2, r3, #5
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	4413      	add	r3, r2
 800a7de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7e2:	691b      	ldr	r3, [r3, #16]
 800a7e4:	693a      	ldr	r2, [r7, #16]
 800a7e6:	0151      	lsls	r1, r2, #5
 800a7e8:	697a      	ldr	r2, [r7, #20]
 800a7ea:	440a      	add	r2, r1
 800a7ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a7f4:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	015a      	lsls	r2, r3, #5
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a802:	691b      	ldr	r3, [r3, #16]
 800a804:	693a      	ldr	r2, [r7, #16]
 800a806:	0151      	lsls	r1, r2, #5
 800a808:	697a      	ldr	r2, [r7, #20]
 800a80a:	440a      	add	r2, r1
 800a80c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a810:	0cdb      	lsrs	r3, r3, #19
 800a812:	04db      	lsls	r3, r3, #19
 800a814:	6113      	str	r3, [r2, #16]
 800a816:	e04e      	b.n	800a8b6 <USB_EP0StartXfer+0x12e>
            /* Program the transfer size and packet count
             * as follows: xfersize = N * maxpacket +
             * short_packet pktcnt = N + (short_packet
             * exist ? 1 : 0)
             */
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	015a      	lsls	r2, r3, #5
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	4413      	add	r3, r2
 800a820:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a824:	691b      	ldr	r3, [r3, #16]
 800a826:	693a      	ldr	r2, [r7, #16]
 800a828:	0151      	lsls	r1, r2, #5
 800a82a:	697a      	ldr	r2, [r7, #20]
 800a82c:	440a      	add	r2, r1
 800a82e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a832:	0cdb      	lsrs	r3, r3, #19
 800a834:	04db      	lsls	r3, r3, #19
 800a836:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	015a      	lsls	r2, r3, #5
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	4413      	add	r3, r2
 800a840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a844:	691b      	ldr	r3, [r3, #16]
 800a846:	693a      	ldr	r2, [r7, #16]
 800a848:	0151      	lsls	r1, r2, #5
 800a84a:	697a      	ldr	r2, [r7, #20]
 800a84c:	440a      	add	r2, r1
 800a84e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a852:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a856:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a85a:	6113      	str	r3, [r2, #16]

            if (ep->xfer_len > ep->maxpacket) {
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	699a      	ldr	r2, [r3, #24]
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	68db      	ldr	r3, [r3, #12]
 800a864:	429a      	cmp	r2, r3
 800a866:	d903      	bls.n	800a870 <USB_EP0StartXfer+0xe8>
                ep->xfer_len = ep->maxpacket;
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	68da      	ldr	r2, [r3, #12]
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	619a      	str	r2, [r3, #24]
            }
            USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	015a      	lsls	r2, r3, #5
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	4413      	add	r3, r2
 800a878:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a87c:	691b      	ldr	r3, [r3, #16]
 800a87e:	693a      	ldr	r2, [r7, #16]
 800a880:	0151      	lsls	r1, r2, #5
 800a882:	697a      	ldr	r2, [r7, #20]
 800a884:	440a      	add	r2, r1
 800a886:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a88a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a88e:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	015a      	lsls	r2, r3, #5
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	4413      	add	r3, r2
 800a898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a89c:	691a      	ldr	r2, [r3, #16]
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	699b      	ldr	r3, [r3, #24]
 800a8a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a8a6:	6939      	ldr	r1, [r7, #16]
 800a8a8:	0148      	lsls	r0, r1, #5
 800a8aa:	6979      	ldr	r1, [r7, #20]
 800a8ac:	4401      	add	r1, r0
 800a8ae:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	610b      	str	r3, [r1, #16]
        }

        if (dma == 1U) {
 800a8b6:	79fb      	ldrb	r3, [r7, #7]
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d11e      	bne.n	800a8fa <USB_EP0StartXfer+0x172>
            if ((uint32_t)ep->dma_addr != 0U) {
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	695b      	ldr	r3, [r3, #20]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d009      	beq.n	800a8d8 <USB_EP0StartXfer+0x150>
                USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	015a      	lsls	r2, r3, #5
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	4413      	add	r3, r2
 800a8cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	695b      	ldr	r3, [r3, #20]
 800a8d6:	6153      	str	r3, [r2, #20]
            }

            /* EP enable, IN data in FIFO */
            USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	015a      	lsls	r2, r3, #5
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	4413      	add	r3, r2
 800a8e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	693a      	ldr	r2, [r7, #16]
 800a8e8:	0151      	lsls	r1, r2, #5
 800a8ea:	697a      	ldr	r2, [r7, #20]
 800a8ec:	440a      	add	r2, r1
 800a8ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8f2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a8f6:	6013      	str	r3, [r2, #0]
 800a8f8:	e097      	b.n	800aa2a <USB_EP0StartXfer+0x2a2>
        } else {
            /* EP enable, IN data in FIFO */
            USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	015a      	lsls	r2, r3, #5
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	4413      	add	r3, r2
 800a902:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	693a      	ldr	r2, [r7, #16]
 800a90a:	0151      	lsls	r1, r2, #5
 800a90c:	697a      	ldr	r2, [r7, #20]
 800a90e:	440a      	add	r2, r1
 800a910:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a914:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a918:	6013      	str	r3, [r2, #0]

            /* Enable the Tx FIFO Empty Interrupt for this EP */
            if (ep->xfer_len > 0U) {
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	699b      	ldr	r3, [r3, #24]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	f000 8083 	beq.w	800aa2a <USB_EP0StartXfer+0x2a2>
                USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a92a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	781b      	ldrb	r3, [r3, #0]
 800a930:	f003 030f 	and.w	r3, r3, #15
 800a934:	2101      	movs	r1, #1
 800a936:	fa01 f303 	lsl.w	r3, r1, r3
 800a93a:	6979      	ldr	r1, [r7, #20]
 800a93c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a940:	4313      	orrs	r3, r2
 800a942:	634b      	str	r3, [r1, #52]	@ 0x34
 800a944:	e071      	b.n	800aa2a <USB_EP0StartXfer+0x2a2>
    {
        /* Program the transfer size and packet count as follows:
         * pktcnt = N
         * xfersize = N * maxpacket
         */
        USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	015a      	lsls	r2, r3, #5
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	4413      	add	r3, r2
 800a94e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a952:	691b      	ldr	r3, [r3, #16]
 800a954:	693a      	ldr	r2, [r7, #16]
 800a956:	0151      	lsls	r1, r2, #5
 800a958:	697a      	ldr	r2, [r7, #20]
 800a95a:	440a      	add	r2, r1
 800a95c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a960:	0cdb      	lsrs	r3, r3, #19
 800a962:	04db      	lsls	r3, r3, #19
 800a964:	6113      	str	r3, [r2, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	015a      	lsls	r2, r3, #5
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	4413      	add	r3, r2
 800a96e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a972:	691b      	ldr	r3, [r3, #16]
 800a974:	693a      	ldr	r2, [r7, #16]
 800a976:	0151      	lsls	r1, r2, #5
 800a978:	697a      	ldr	r2, [r7, #20]
 800a97a:	440a      	add	r2, r1
 800a97c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a980:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a984:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a988:	6113      	str	r3, [r2, #16]

        if (ep->xfer_len > 0U) {
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	699b      	ldr	r3, [r3, #24]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d003      	beq.n	800a99a <USB_EP0StartXfer+0x212>
            ep->xfer_len = ep->maxpacket;
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	68da      	ldr	r2, [r3, #12]
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	619a      	str	r2, [r3, #24]
        }

        /* Store transfer size, for EP0 this is equal to endpoint max packet size */
        ep->xfer_size = ep->maxpacket;
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	68da      	ldr	r2, [r3, #12]
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	61da      	str	r2, [r3, #28]

        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	015a      	lsls	r2, r3, #5
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	4413      	add	r3, r2
 800a9aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9ae:	691b      	ldr	r3, [r3, #16]
 800a9b0:	693a      	ldr	r2, [r7, #16]
 800a9b2:	0151      	lsls	r1, r2, #5
 800a9b4:	697a      	ldr	r2, [r7, #20]
 800a9b6:	440a      	add	r2, r1
 800a9b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a9c0:	6113      	str	r3, [r2, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	015a      	lsls	r2, r3, #5
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	4413      	add	r3, r2
 800a9ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9ce:	691a      	ldr	r2, [r3, #16]
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	69db      	ldr	r3, [r3, #28]
 800a9d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a9d8:	6939      	ldr	r1, [r7, #16]
 800a9da:	0148      	lsls	r0, r1, #5
 800a9dc:	6979      	ldr	r1, [r7, #20]
 800a9de:	4401      	add	r1, r0
 800a9e0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	610b      	str	r3, [r1, #16]

        if (dma == 1U) {
 800a9e8:	79fb      	ldrb	r3, [r7, #7]
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d10d      	bne.n	800aa0a <USB_EP0StartXfer+0x282>
            if ((uint32_t)ep->xfer_buff != 0U) {
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	691b      	ldr	r3, [r3, #16]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d009      	beq.n	800aa0a <USB_EP0StartXfer+0x282>
                USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	6919      	ldr	r1, [r3, #16]
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	015a      	lsls	r2, r3, #5
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	4413      	add	r3, r2
 800aa02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa06:	460a      	mov	r2, r1
 800aa08:	615a      	str	r2, [r3, #20]
            }
        }

        /* EP enable */
        USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	015a      	lsls	r2, r3, #5
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	4413      	add	r3, r2
 800aa12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	693a      	ldr	r2, [r7, #16]
 800aa1a:	0151      	lsls	r1, r2, #5
 800aa1c:	697a      	ldr	r2, [r7, #20]
 800aa1e:	440a      	add	r2, r1
 800aa20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa24:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800aa28:	6013      	str	r3, [r2, #0]
    }

    return HAL_OK;
 800aa2a:	2300      	movs	r3, #0
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	371c      	adds	r7, #28
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <USB_EPStopXfer>:
 * @brief  USB_EPStoptXfer  Stop transfer on an EP
 * @param  USBx  usb device instance
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep) {
 800aa38:	b480      	push	{r7}
 800aa3a:	b087      	sub	sp, #28
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
    __IO uint32_t count = 0U;
 800aa42:	2300      	movs	r3, #0
 800aa44:	60fb      	str	r3, [r7, #12]
    HAL_StatusTypeDef ret = HAL_OK;
 800aa46:	2300      	movs	r3, #0
 800aa48:	75fb      	strb	r3, [r7, #23]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	613b      	str	r3, [r7, #16]

    /* IN endpoint */
    if (ep->is_in == 1U) {
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	785b      	ldrb	r3, [r3, #1]
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d14a      	bne.n	800aaec <USB_EPStopXfer+0xb4>
        /* EP enable, IN data in FIFO */
        if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA) {
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	015a      	lsls	r2, r3, #5
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	4413      	add	r3, r2
 800aa60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aa6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa6e:	f040 8086 	bne.w	800ab7e <USB_EPStopXfer+0x146>
            USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	015a      	lsls	r2, r3, #5
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	4413      	add	r3, r2
 800aa7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	683a      	ldr	r2, [r7, #0]
 800aa84:	7812      	ldrb	r2, [r2, #0]
 800aa86:	0151      	lsls	r1, r2, #5
 800aa88:	693a      	ldr	r2, [r7, #16]
 800aa8a:	440a      	add	r2, r1
 800aa8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa90:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800aa94:	6013      	str	r3, [r2, #0]
            USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	015a      	lsls	r2, r3, #5
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	4413      	add	r3, r2
 800aaa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	683a      	ldr	r2, [r7, #0]
 800aaa8:	7812      	ldrb	r2, [r2, #0]
 800aaaa:	0151      	lsls	r1, r2, #5
 800aaac:	693a      	ldr	r2, [r7, #16]
 800aaae:	440a      	add	r2, r1
 800aab0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aab4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aab8:	6013      	str	r3, [r2, #0]

            do {
                count++;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	3301      	adds	r3, #1
 800aabe:	60fb      	str	r3, [r7, #12]

                if (count > 10000U) {
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d902      	bls.n	800aad0 <USB_EPStopXfer+0x98>
                    ret = HAL_ERROR;
 800aaca:	2301      	movs	r3, #1
 800aacc:	75fb      	strb	r3, [r7, #23]
                    break;
 800aace:	e056      	b.n	800ab7e <USB_EPStopXfer+0x146>
                }
            } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA);
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	015a      	lsls	r2, r3, #5
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	4413      	add	r3, r2
 800aada:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aae4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aae8:	d0e7      	beq.n	800aaba <USB_EPStopXfer+0x82>
 800aaea:	e048      	b.n	800ab7e <USB_EPStopXfer+0x146>
        }
    } else /* OUT endpoint */
    {
        if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) {
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	015a      	lsls	r2, r3, #5
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	4413      	add	r3, r2
 800aaf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ab00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab04:	d13b      	bne.n	800ab7e <USB_EPStopXfer+0x146>
            USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	781b      	ldrb	r3, [r3, #0]
 800ab0a:	015a      	lsls	r2, r3, #5
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	4413      	add	r3, r2
 800ab10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	683a      	ldr	r2, [r7, #0]
 800ab18:	7812      	ldrb	r2, [r2, #0]
 800ab1a:	0151      	lsls	r1, r2, #5
 800ab1c:	693a      	ldr	r2, [r7, #16]
 800ab1e:	440a      	add	r2, r1
 800ab20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab24:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ab28:	6013      	str	r3, [r2, #0]
            USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	781b      	ldrb	r3, [r3, #0]
 800ab2e:	015a      	lsls	r2, r3, #5
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	4413      	add	r3, r2
 800ab34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	683a      	ldr	r2, [r7, #0]
 800ab3c:	7812      	ldrb	r2, [r2, #0]
 800ab3e:	0151      	lsls	r1, r2, #5
 800ab40:	693a      	ldr	r2, [r7, #16]
 800ab42:	440a      	add	r2, r1
 800ab44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ab4c:	6013      	str	r3, [r2, #0]

            do {
                count++;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	3301      	adds	r3, #1
 800ab52:	60fb      	str	r3, [r7, #12]

                if (count > 10000U) {
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d902      	bls.n	800ab64 <USB_EPStopXfer+0x12c>
                    ret = HAL_ERROR;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	75fb      	strb	r3, [r7, #23]
                    break;
 800ab62:	e00c      	b.n	800ab7e <USB_EPStopXfer+0x146>
                }
            } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA);
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	015a      	lsls	r2, r3, #5
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	4413      	add	r3, r2
 800ab6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ab78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab7c:	d0e7      	beq.n	800ab4e <USB_EPStopXfer+0x116>
        }
    }

    return ret;
 800ab7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	371c      	adds	r7, #28
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr

0800ab8c <USB_WritePacket>:
 *          This parameter can be one of these values:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @retval HAL status
 */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef * USBx, uint8_t * src, uint8_t ch_ep_num, uint16_t len, uint8_t dma) {
 800ab8c:	b480      	push	{r7}
 800ab8e:	b089      	sub	sp, #36	@ 0x24
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	4611      	mov	r1, r2
 800ab98:	461a      	mov	r2, r3
 800ab9a:	460b      	mov	r3, r1
 800ab9c:	71fb      	strb	r3, [r7, #7]
 800ab9e:	4613      	mov	r3, r2
 800aba0:	80bb      	strh	r3, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	617b      	str	r3, [r7, #20]
    uint8_t * pSrc = src;
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	61fb      	str	r3, [r7, #28]
    uint32_t count32b;
    uint32_t i;

    if (dma == 0U) {
 800abaa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d123      	bne.n	800abfa <USB_WritePacket+0x6e>
        count32b = ((uint32_t)len + 3U) / 4U;
 800abb2:	88bb      	ldrh	r3, [r7, #4]
 800abb4:	3303      	adds	r3, #3
 800abb6:	089b      	lsrs	r3, r3, #2
 800abb8:	613b      	str	r3, [r7, #16]
        for (i = 0U; i < count32b; i++) {
 800abba:	2300      	movs	r3, #0
 800abbc:	61bb      	str	r3, [r7, #24]
 800abbe:	e018      	b.n	800abf2 <USB_WritePacket+0x66>
            USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800abc0:	79fb      	ldrb	r3, [r7, #7]
 800abc2:	031a      	lsls	r2, r3, #12
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	4413      	add	r3, r2
 800abc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800abcc:	461a      	mov	r2, r3
 800abce:	69fb      	ldr	r3, [r7, #28]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	6013      	str	r3, [r2, #0]
            pSrc++;
 800abd4:	69fb      	ldr	r3, [r7, #28]
 800abd6:	3301      	adds	r3, #1
 800abd8:	61fb      	str	r3, [r7, #28]
            pSrc++;
 800abda:	69fb      	ldr	r3, [r7, #28]
 800abdc:	3301      	adds	r3, #1
 800abde:	61fb      	str	r3, [r7, #28]
            pSrc++;
 800abe0:	69fb      	ldr	r3, [r7, #28]
 800abe2:	3301      	adds	r3, #1
 800abe4:	61fb      	str	r3, [r7, #28]
            pSrc++;
 800abe6:	69fb      	ldr	r3, [r7, #28]
 800abe8:	3301      	adds	r3, #1
 800abea:	61fb      	str	r3, [r7, #28]
        for (i = 0U; i < count32b; i++) {
 800abec:	69bb      	ldr	r3, [r7, #24]
 800abee:	3301      	adds	r3, #1
 800abf0:	61bb      	str	r3, [r7, #24]
 800abf2:	69ba      	ldr	r2, [r7, #24]
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d3e2      	bcc.n	800abc0 <USB_WritePacket+0x34>
        }
    }

    return HAL_OK;
 800abfa:	2300      	movs	r3, #0
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3724      	adds	r7, #36	@ 0x24
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <USB_ReadPacket>:
 * @param  USBx  Selected device
 * @param  dest  source pointer
 * @param  len  Number of bytes to read
 * @retval pointer to destination buffer
 */
void * USB_ReadPacket(USB_OTG_GlobalTypeDef * USBx, uint8_t * dest, uint16_t len) {
 800ac08:	b480      	push	{r7}
 800ac0a:	b08b      	sub	sp, #44	@ 0x2c
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	60f8      	str	r0, [r7, #12]
 800ac10:	60b9      	str	r1, [r7, #8]
 800ac12:	4613      	mov	r3, r2
 800ac14:	80fb      	strh	r3, [r7, #6]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	61bb      	str	r3, [r7, #24]
    uint8_t * pDest = dest;
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t pData;
    uint32_t i;
    uint32_t count32b = (uint32_t)len >> 2U;
 800ac1e:	88fb      	ldrh	r3, [r7, #6]
 800ac20:	089b      	lsrs	r3, r3, #2
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	617b      	str	r3, [r7, #20]
    uint16_t remaining_bytes = len % 4U;
 800ac26:	88fb      	ldrh	r3, [r7, #6]
 800ac28:	f003 0303 	and.w	r3, r3, #3
 800ac2c:	83fb      	strh	r3, [r7, #30]

    for (i = 0U; i < count32b; i++) {
 800ac2e:	2300      	movs	r3, #0
 800ac30:	623b      	str	r3, [r7, #32]
 800ac32:	e014      	b.n	800ac5e <USB_ReadPacket+0x56>
        __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ac34:	69bb      	ldr	r3, [r7, #24]
 800ac36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac3e:	601a      	str	r2, [r3, #0]
        pDest++;
 800ac40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac42:	3301      	adds	r3, #1
 800ac44:	627b      	str	r3, [r7, #36]	@ 0x24
        pDest++;
 800ac46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac48:	3301      	adds	r3, #1
 800ac4a:	627b      	str	r3, [r7, #36]	@ 0x24
        pDest++;
 800ac4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac4e:	3301      	adds	r3, #1
 800ac50:	627b      	str	r3, [r7, #36]	@ 0x24
        pDest++;
 800ac52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac54:	3301      	adds	r3, #1
 800ac56:	627b      	str	r3, [r7, #36]	@ 0x24
    for (i = 0U; i < count32b; i++) {
 800ac58:	6a3b      	ldr	r3, [r7, #32]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	623b      	str	r3, [r7, #32]
 800ac5e:	6a3a      	ldr	r2, [r7, #32]
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d3e6      	bcc.n	800ac34 <USB_ReadPacket+0x2c>
    }

    /* When Number of data is not word aligned, read the remaining byte */
    if (remaining_bytes != 0U) {
 800ac66:	8bfb      	ldrh	r3, [r7, #30]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d01e      	beq.n	800acaa <USB_ReadPacket+0xa2>
        i = 0U;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	623b      	str	r3, [r7, #32]
        __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac76:	461a      	mov	r2, r3
 800ac78:	f107 0310 	add.w	r3, r7, #16
 800ac7c:	6812      	ldr	r2, [r2, #0]
 800ac7e:	601a      	str	r2, [r3, #0]

        do {
            *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ac80:	693a      	ldr	r2, [r7, #16]
 800ac82:	6a3b      	ldr	r3, [r7, #32]
 800ac84:	b2db      	uxtb	r3, r3
 800ac86:	00db      	lsls	r3, r3, #3
 800ac88:	fa22 f303 	lsr.w	r3, r2, r3
 800ac8c:	b2da      	uxtb	r2, r3
 800ac8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac90:	701a      	strb	r2, [r3, #0]
            i++;
 800ac92:	6a3b      	ldr	r3, [r7, #32]
 800ac94:	3301      	adds	r3, #1
 800ac96:	623b      	str	r3, [r7, #32]
            pDest++;
 800ac98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	627b      	str	r3, [r7, #36]	@ 0x24
            remaining_bytes--;
 800ac9e:	8bfb      	ldrh	r3, [r7, #30]
 800aca0:	3b01      	subs	r3, #1
 800aca2:	83fb      	strh	r3, [r7, #30]
        } while (remaining_bytes != 0U);
 800aca4:	8bfb      	ldrh	r3, [r7, #30]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d1ea      	bne.n	800ac80 <USB_ReadPacket+0x78>
    }

    return ((void *)pDest);
 800acaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800acac:	4618      	mov	r0, r3
 800acae:	372c      	adds	r7, #44	@ 0x2c
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <USB_EPSetStall>:
 * @brief  USB_EPSetStall : set a stall condition over an EP
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep) {
 800acb8:	b480      	push	{r7}
 800acba:	b085      	sub	sp, #20
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	60fb      	str	r3, [r7, #12]
    uint32_t epnum = (uint32_t)ep->num;
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	60bb      	str	r3, [r7, #8]

    if (ep->is_in == 1U) {
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	785b      	ldrb	r3, [r3, #1]
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d12c      	bne.n	800ad2e <USB_EPSetStall+0x76>
        if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U)) {
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	015a      	lsls	r2, r3, #5
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	4413      	add	r3, r2
 800acdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	db12      	blt.n	800ad0c <USB_EPSetStall+0x54>
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d00f      	beq.n	800ad0c <USB_EPSetStall+0x54>
            USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	015a      	lsls	r2, r3, #5
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	4413      	add	r3, r2
 800acf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	68ba      	ldr	r2, [r7, #8]
 800acfc:	0151      	lsls	r1, r2, #5
 800acfe:	68fa      	ldr	r2, [r7, #12]
 800ad00:	440a      	add	r2, r1
 800ad02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad06:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ad0a:	6013      	str	r3, [r2, #0]
        }
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	015a      	lsls	r2, r3, #5
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	4413      	add	r3, r2
 800ad14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	68ba      	ldr	r2, [r7, #8]
 800ad1c:	0151      	lsls	r1, r2, #5
 800ad1e:	68fa      	ldr	r2, [r7, #12]
 800ad20:	440a      	add	r2, r1
 800ad22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad26:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ad2a:	6013      	str	r3, [r2, #0]
 800ad2c:	e02b      	b.n	800ad86 <USB_EPSetStall+0xce>
    } else {
        if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U)) {
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	015a      	lsls	r2, r3, #5
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	4413      	add	r3, r2
 800ad36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	db12      	blt.n	800ad66 <USB_EPSetStall+0xae>
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d00f      	beq.n	800ad66 <USB_EPSetStall+0xae>
            USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	015a      	lsls	r2, r3, #5
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	4413      	add	r3, r2
 800ad4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	68ba      	ldr	r2, [r7, #8]
 800ad56:	0151      	lsls	r1, r2, #5
 800ad58:	68fa      	ldr	r2, [r7, #12]
 800ad5a:	440a      	add	r2, r1
 800ad5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad60:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ad64:	6013      	str	r3, [r2, #0]
        }
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	015a      	lsls	r2, r3, #5
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	4413      	add	r3, r2
 800ad6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	68ba      	ldr	r2, [r7, #8]
 800ad76:	0151      	lsls	r1, r2, #5
 800ad78:	68fa      	ldr	r2, [r7, #12]
 800ad7a:	440a      	add	r2, r1
 800ad7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad80:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ad84:	6013      	str	r3, [r2, #0]
    }

    return HAL_OK;
 800ad86:	2300      	movs	r3, #0
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3714      	adds	r7, #20
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr

0800ad94 <USB_EPClearStall>:
 * @brief  USB_EPClearStall : Clear a stall condition over an EP
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep) {
 800ad94:	b480      	push	{r7}
 800ad96:	b085      	sub	sp, #20
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	60fb      	str	r3, [r7, #12]
    uint32_t epnum = (uint32_t)ep->num;
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	60bb      	str	r3, [r7, #8]

    if (ep->is_in == 1U) {
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	785b      	ldrb	r3, [r3, #1]
 800adac:	2b01      	cmp	r3, #1
 800adae:	d128      	bne.n	800ae02 <USB_EPClearStall+0x6e>
        USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	015a      	lsls	r2, r3, #5
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	4413      	add	r3, r2
 800adb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	68ba      	ldr	r2, [r7, #8]
 800adc0:	0151      	lsls	r1, r2, #5
 800adc2:	68fa      	ldr	r2, [r7, #12]
 800adc4:	440a      	add	r2, r1
 800adc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800adca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800adce:	6013      	str	r3, [r2, #0]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK)) {
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	791b      	ldrb	r3, [r3, #4]
 800add4:	2b03      	cmp	r3, #3
 800add6:	d003      	beq.n	800ade0 <USB_EPClearStall+0x4c>
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	791b      	ldrb	r3, [r3, #4]
 800addc:	2b02      	cmp	r3, #2
 800adde:	d138      	bne.n	800ae52 <USB_EPClearStall+0xbe>
            USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	015a      	lsls	r2, r3, #5
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	4413      	add	r3, r2
 800ade8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	68ba      	ldr	r2, [r7, #8]
 800adf0:	0151      	lsls	r1, r2, #5
 800adf2:	68fa      	ldr	r2, [r7, #12]
 800adf4:	440a      	add	r2, r1
 800adf6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800adfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800adfe:	6013      	str	r3, [r2, #0]
 800ae00:	e027      	b.n	800ae52 <USB_EPClearStall+0xbe>
        }
    } else {
        USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	015a      	lsls	r2, r3, #5
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	4413      	add	r3, r2
 800ae0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	68ba      	ldr	r2, [r7, #8]
 800ae12:	0151      	lsls	r1, r2, #5
 800ae14:	68fa      	ldr	r2, [r7, #12]
 800ae16:	440a      	add	r2, r1
 800ae18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae1c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ae20:	6013      	str	r3, [r2, #0]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK)) {
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	791b      	ldrb	r3, [r3, #4]
 800ae26:	2b03      	cmp	r3, #3
 800ae28:	d003      	beq.n	800ae32 <USB_EPClearStall+0x9e>
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	791b      	ldrb	r3, [r3, #4]
 800ae2e:	2b02      	cmp	r3, #2
 800ae30:	d10f      	bne.n	800ae52 <USB_EPClearStall+0xbe>
            USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	015a      	lsls	r2, r3, #5
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	4413      	add	r3, r2
 800ae3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	68ba      	ldr	r2, [r7, #8]
 800ae42:	0151      	lsls	r1, r2, #5
 800ae44:	68fa      	ldr	r2, [r7, #12]
 800ae46:	440a      	add	r2, r1
 800ae48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ae50:	6013      	str	r3, [r2, #0]
        }
    }
    return HAL_OK;
 800ae52:	2300      	movs	r3, #0
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3714      	adds	r7, #20
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <USB_SetDevAddress>:
 * @param  USBx  Selected device
 * @param  address  new device address to be assigned
 *          This parameter can be a value from 0 to 255
 * @retval HAL status
 */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef * USBx, uint8_t address) {
 800ae60:	b480      	push	{r7}
 800ae62:	b085      	sub	sp, #20
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	460b      	mov	r3, r1
 800ae6a:	70fb      	strb	r3, [r7, #3]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	60fb      	str	r3, [r7, #12]

    USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	68fa      	ldr	r2, [r7, #12]
 800ae7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ae7e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ae82:	6013      	str	r3, [r2, #0]
    USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	78fb      	ldrb	r3, [r7, #3]
 800ae8e:	011b      	lsls	r3, r3, #4
 800ae90:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800ae94:	68f9      	ldr	r1, [r7, #12]
 800ae96:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	600b      	str	r3, [r1, #0]

    return HAL_OK;
 800ae9e:	2300      	movs	r3, #0
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3714      	adds	r7, #20
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr

0800aeac <USB_DevConnect>:
/**
 * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef * USBx) {
 800aeac:	b480      	push	{r7}
 800aeae:	b085      	sub	sp, #20
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	60fb      	str	r3, [r7, #12]

    /* In case phy is stopped, ensure to ungate and restore the phy CLK */
    USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	68fa      	ldr	r2, [r7, #12]
 800aec2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800aec6:	f023 0303 	bic.w	r3, r3, #3
 800aeca:	6013      	str	r3, [r2, #0]

    USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	68fa      	ldr	r2, [r7, #12]
 800aed6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aeda:	f023 0302 	bic.w	r3, r3, #2
 800aede:	6053      	str	r3, [r2, #4]

    return HAL_OK;
 800aee0:	2300      	movs	r3, #0
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3714      	adds	r7, #20
 800aee6:	46bd      	mov	sp, r7
 800aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeec:	4770      	bx	lr

0800aeee <USB_DevDisconnect>:
/**
 * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef * USBx) {
 800aeee:	b480      	push	{r7}
 800aef0:	b085      	sub	sp, #20
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	60fb      	str	r3, [r7, #12]

    /* In case phy is stopped, ensure to ungate and restore the phy CLK */
    USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	68fa      	ldr	r2, [r7, #12]
 800af04:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800af08:	f023 0303 	bic.w	r3, r3, #3
 800af0c:	6013      	str	r3, [r2, #0]

    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	68fa      	ldr	r2, [r7, #12]
 800af18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800af1c:	f043 0302 	orr.w	r3, r3, #2
 800af20:	6053      	str	r3, [r2, #4]

    return HAL_OK;
 800af22:	2300      	movs	r3, #0
}
 800af24:	4618      	mov	r0, r3
 800af26:	3714      	adds	r7, #20
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr

0800af30 <USB_ReadInterrupts>:
/**
 * @brief  USB_ReadInterrupts: return the global USB interrupt status
 * @param  USBx  Selected device
 * @retval HAL status
 */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef * USBx) {
 800af30:	b480      	push	{r7}
 800af32:	b085      	sub	sp, #20
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
    uint32_t tmpreg;

    tmpreg = USBx->GINTSTS;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	695b      	ldr	r3, [r3, #20]
 800af3c:	60fb      	str	r3, [r7, #12]
    tmpreg &= USBx->GINTMSK;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	699b      	ldr	r3, [r3, #24]
 800af42:	68fa      	ldr	r2, [r7, #12]
 800af44:	4013      	ands	r3, r2
 800af46:	60fb      	str	r3, [r7, #12]

    return tmpreg;
 800af48:	68fb      	ldr	r3, [r7, #12]
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3714      	adds	r7, #20
 800af4e:	46bd      	mov	sp, r7
 800af50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af54:	4770      	bx	lr

0800af56 <USB_ReadDevAllOutEpInterrupt>:
/**
 * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
 * @param  USBx  Selected device
 * @retval HAL status
 */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef * USBx) {
 800af56:	b480      	push	{r7}
 800af58:	b085      	sub	sp, #20
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	60fb      	str	r3, [r7, #12]
    uint32_t tmpreg;

    tmpreg = USBx_DEVICE->DAINT;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af68:	699b      	ldr	r3, [r3, #24]
 800af6a:	60bb      	str	r3, [r7, #8]
    tmpreg &= USBx_DEVICE->DAINTMSK;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af72:	69db      	ldr	r3, [r3, #28]
 800af74:	68ba      	ldr	r2, [r7, #8]
 800af76:	4013      	ands	r3, r2
 800af78:	60bb      	str	r3, [r7, #8]

    return ((tmpreg & 0xffff0000U) >> 16);
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	0c1b      	lsrs	r3, r3, #16
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3714      	adds	r7, #20
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr

0800af8a <USB_ReadDevAllInEpInterrupt>:
/**
 * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
 * @param  USBx  Selected device
 * @retval HAL status
 */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef * USBx) {
 800af8a:	b480      	push	{r7}
 800af8c:	b085      	sub	sp, #20
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	60fb      	str	r3, [r7, #12]
    uint32_t tmpreg;

    tmpreg = USBx_DEVICE->DAINT;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af9c:	699b      	ldr	r3, [r3, #24]
 800af9e:	60bb      	str	r3, [r7, #8]
    tmpreg &= USBx_DEVICE->DAINTMSK;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800afa6:	69db      	ldr	r3, [r3, #28]
 800afa8:	68ba      	ldr	r2, [r7, #8]
 800afaa:	4013      	ands	r3, r2
 800afac:	60bb      	str	r3, [r7, #8]

    return ((tmpreg & 0xFFFFU));
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	b29b      	uxth	r3, r3
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3714      	adds	r7, #20
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr

0800afbe <USB_ReadDevOutEPInterrupt>:
 * @param  USBx  Selected device
 * @param  epnum  endpoint number
 *          This parameter can be a value from 0 to 15
 * @retval Device OUT EP Interrupt register
 */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef * USBx, uint8_t epnum) {
 800afbe:	b480      	push	{r7}
 800afc0:	b085      	sub	sp, #20
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
 800afc6:	460b      	mov	r3, r1
 800afc8:	70fb      	strb	r3, [r7, #3]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	60fb      	str	r3, [r7, #12]
    uint32_t tmpreg;

    tmpreg = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800afce:	78fb      	ldrb	r3, [r7, #3]
 800afd0:	015a      	lsls	r2, r3, #5
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	4413      	add	r3, r2
 800afd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afda:	689b      	ldr	r3, [r3, #8]
 800afdc:	60bb      	str	r3, [r7, #8]
    tmpreg &= USBx_DEVICE->DOEPMSK;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800afe4:	695b      	ldr	r3, [r3, #20]
 800afe6:	68ba      	ldr	r2, [r7, #8]
 800afe8:	4013      	ands	r3, r2
 800afea:	60bb      	str	r3, [r7, #8]

    return tmpreg;
 800afec:	68bb      	ldr	r3, [r7, #8]
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3714      	adds	r7, #20
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr

0800affa <USB_ReadDevInEPInterrupt>:
 * @param  USBx  Selected device
 * @param  epnum  endpoint number
 *          This parameter can be a value from 0 to 15
 * @retval Device IN EP Interrupt register
 */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef * USBx, uint8_t epnum) {
 800affa:	b480      	push	{r7}
 800affc:	b087      	sub	sp, #28
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
 800b002:	460b      	mov	r3, r1
 800b004:	70fb      	strb	r3, [r7, #3]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	617b      	str	r3, [r7, #20]
    uint32_t tmpreg;
    uint32_t msk;
    uint32_t emp;

    msk = USBx_DEVICE->DIEPMSK;
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b010:	691b      	ldr	r3, [r3, #16]
 800b012:	613b      	str	r3, [r7, #16]
    emp = USBx_DEVICE->DIEPEMPMSK;
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b01a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b01c:	60fb      	str	r3, [r7, #12]
    msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b01e:	78fb      	ldrb	r3, [r7, #3]
 800b020:	f003 030f 	and.w	r3, r3, #15
 800b024:	68fa      	ldr	r2, [r7, #12]
 800b026:	fa22 f303 	lsr.w	r3, r2, r3
 800b02a:	01db      	lsls	r3, r3, #7
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	693a      	ldr	r2, [r7, #16]
 800b030:	4313      	orrs	r3, r2
 800b032:	613b      	str	r3, [r7, #16]
    tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b034:	78fb      	ldrb	r3, [r7, #3]
 800b036:	015a      	lsls	r2, r3, #5
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	4413      	add	r3, r2
 800b03c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	693a      	ldr	r2, [r7, #16]
 800b044:	4013      	ands	r3, r2
 800b046:	60bb      	str	r3, [r7, #8]

    return tmpreg;
 800b048:	68bb      	ldr	r3, [r7, #8]
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	371c      	adds	r7, #28
 800b04e:	46bd      	mov	sp, r7
 800b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b054:	4770      	bx	lr

0800b056 <USB_GetMode>:
 * @retval return core mode : Host or Device
 *          This parameter can be one of these values:
 *           0 : Host
 *           1 : Device
 */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef * USBx) {
 800b056:	b480      	push	{r7}
 800b058:	b083      	sub	sp, #12
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
    return ((USBx->GINTSTS) & 0x1U);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	695b      	ldr	r3, [r3, #20]
 800b062:	f003 0301 	and.w	r3, r3, #1
}
 800b066:	4618      	mov	r0, r3
 800b068:	370c      	adds	r7, #12
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr

0800b072 <USB_ActivateSetup>:
/**
 * @brief  Activate EP0 for Setup transactions
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef * USBx) {
 800b072:	b480      	push	{r7}
 800b074:	b085      	sub	sp, #20
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	60fb      	str	r3, [r7, #12]

    /* Set the MPS of the IN EP0 to 64 bytes */
    USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	68fa      	ldr	r2, [r7, #12]
 800b088:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b08c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b090:	f023 0307 	bic.w	r3, r3, #7
 800b094:	6013      	str	r3, [r2, #0]

    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	68fa      	ldr	r2, [r7, #12]
 800b0a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b0a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b0a8:	6053      	str	r3, [r2, #4]

    return HAL_OK;
 800b0aa:	2300      	movs	r3, #0
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3714      	adds	r7, #20
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b6:	4770      	bx	lr

0800b0b8 <USB_EP0_OutStart>:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @param  psetup  pointer to setup packet
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef * USBx, uint8_t dma, uint8_t * psetup) {
 800b0b8:	b480      	push	{r7}
 800b0ba:	b087      	sub	sp, #28
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	607a      	str	r2, [r7, #4]
 800b0c4:	72fb      	strb	r3, [r7, #11]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	617b      	str	r3, [r7, #20]
    uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	333c      	adds	r3, #60	@ 0x3c
 800b0ce:	3304      	adds	r3, #4
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	613b      	str	r3, [r7, #16]

    if (gSNPSiD > USB_OTG_CORE_ID_300A) {
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	4a26      	ldr	r2, [pc, #152]	@ (800b170 <USB_EP0_OutStart+0xb8>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d90a      	bls.n	800b0f2 <USB_EP0_OutStart+0x3a>
        if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) {
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b0e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b0ec:	d101      	bne.n	800b0f2 <USB_EP0_OutStart+0x3a>
            return HAL_OK;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	e037      	b.n	800b162 <USB_EP0_OutStart+0xaa>
        }
    }

    USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b104:	691b      	ldr	r3, [r3, #16]
 800b106:	697a      	ldr	r2, [r7, #20]
 800b108:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b10c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b110:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b118:	691b      	ldr	r3, [r3, #16]
 800b11a:	697a      	ldr	r2, [r7, #20]
 800b11c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b120:	f043 0318 	orr.w	r3, r3, #24
 800b124:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(0U)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_STUPCNT;
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b12c:	691b      	ldr	r3, [r3, #16]
 800b12e:	697a      	ldr	r2, [r7, #20]
 800b130:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b134:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b138:	6113      	str	r3, [r2, #16]

    if (dma == 1U) {
 800b13a:	7afb      	ldrb	r3, [r7, #11]
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d10f      	bne.n	800b160 <USB_EP0_OutStart+0xa8>
        USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b146:	461a      	mov	r2, r3
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6153      	str	r3, [r2, #20]
        /* EP enable */
        USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	697a      	ldr	r2, [r7, #20]
 800b156:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b15a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b15e:	6013      	str	r3, [r2, #0]
    }

    return HAL_OK;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	371c      	adds	r7, #28
 800b166:	46bd      	mov	sp, r7
 800b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16c:	4770      	bx	lr
 800b16e:	bf00      	nop
 800b170:	4f54300a 	.word	0x4f54300a

0800b174 <USB_CoreReset>:
/**
 * @brief  Reset the USB Core (needed after USB clock settings change)
 * @param  USBx  Selected device
 * @retval HAL status
 */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef * USBx) {
 800b174:	b480      	push	{r7}
 800b176:	b085      	sub	sp, #20
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
    __IO uint32_t count = 0U;
 800b17c:	2300      	movs	r3, #0
 800b17e:	60fb      	str	r3, [r7, #12]

    /* Wait for AHB master IDLE state. */
    do {
        count++;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	3301      	adds	r3, #1
 800b184:	60fb      	str	r3, [r7, #12]

        if (count > 200000U) {
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	4a13      	ldr	r2, [pc, #76]	@ (800b1d8 <USB_CoreReset+0x64>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d901      	bls.n	800b192 <USB_CoreReset+0x1e>
            return HAL_TIMEOUT;
 800b18e:	2303      	movs	r3, #3
 800b190:	e01b      	b.n	800b1ca <USB_CoreReset+0x56>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	691b      	ldr	r3, [r3, #16]
 800b196:	2b00      	cmp	r3, #0
 800b198:	daf2      	bge.n	800b180 <USB_CoreReset+0xc>

    /* Core Soft Reset */
    count = 0U;
 800b19a:	2300      	movs	r3, #0
 800b19c:	60fb      	str	r3, [r7, #12]
    USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	691b      	ldr	r3, [r3, #16]
 800b1a2:	f043 0201 	orr.w	r2, r3, #1
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	611a      	str	r2, [r3, #16]

    do {
        count++;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	3301      	adds	r3, #1
 800b1ae:	60fb      	str	r3, [r7, #12]

        if (count > 200000U) {
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	4a09      	ldr	r2, [pc, #36]	@ (800b1d8 <USB_CoreReset+0x64>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d901      	bls.n	800b1bc <USB_CoreReset+0x48>
            return HAL_TIMEOUT;
 800b1b8:	2303      	movs	r3, #3
 800b1ba:	e006      	b.n	800b1ca <USB_CoreReset+0x56>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	691b      	ldr	r3, [r3, #16]
 800b1c0:	f003 0301 	and.w	r3, r3, #1
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	d0f0      	beq.n	800b1aa <USB_CoreReset+0x36>

    return HAL_OK;
 800b1c8:	2300      	movs	r3, #0
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3714      	adds	r7, #20
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr
 800b1d6:	bf00      	nop
 800b1d8:	00030d40 	.word	0x00030d40

0800b1dc <USBD_CDC_Init>:
 *         Initialize the CDC interface
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef * pdev, uint8_t cfgidx) {
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b084      	sub	sp, #16
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
 800b1e4:	460b      	mov	r3, r1
 800b1e6:	70fb      	strb	r3, [r7, #3]
    UNUSED(cfgidx);
    USBD_CDC_HandleTypeDef * hcdc;

    hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b1e8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b1ec:	f005 f8d6 	bl	801039c <USBD_static_malloc>
 800b1f0:	60f8      	str	r0, [r7, #12]

    if (hcdc == NULL) {
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d109      	bne.n	800b20c <USBD_CDC_Init+0x30>
        pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	32b0      	adds	r2, #176	@ 0xb0
 800b202:	2100      	movs	r1, #0
 800b204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        return (uint8_t)USBD_EMEM;
 800b208:	2302      	movs	r3, #2
 800b20a:	e0d4      	b.n	800b3b6 <USBD_CDC_Init+0x1da>
    }

    (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b20c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b210:	2100      	movs	r1, #0
 800b212:	68f8      	ldr	r0, [r7, #12]
 800b214:	f005 ff41 	bl	801109a <memset>

    pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	32b0      	adds	r2, #176	@ 0xb0
 800b222:	68f9      	ldr	r1, [r7, #12]
 800b224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	32b0      	adds	r2, #176	@ 0xb0
 800b232:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    CDCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
    CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
    CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

    if (pdev->dev_speed == USBD_SPEED_HIGH) {
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	7c1b      	ldrb	r3, [r3, #16]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d138      	bne.n	800b2b6 <USBD_CDC_Init+0xda>
        /* Open EP IN */
        (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK, CDC_DATA_HS_IN_PACKET_SIZE);
 800b244:	4b5e      	ldr	r3, [pc, #376]	@ (800b3c0 <USBD_CDC_Init+0x1e4>)
 800b246:	7819      	ldrb	r1, [r3, #0]
 800b248:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b24c:	2202      	movs	r2, #2
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f004 ff81 	bl	8010156 <USBD_LL_OpenEP>

        pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b254:	4b5a      	ldr	r3, [pc, #360]	@ (800b3c0 <USBD_CDC_Init+0x1e4>)
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	f003 020f 	and.w	r2, r3, #15
 800b25c:	6879      	ldr	r1, [r7, #4]
 800b25e:	4613      	mov	r3, r2
 800b260:	009b      	lsls	r3, r3, #2
 800b262:	4413      	add	r3, r2
 800b264:	009b      	lsls	r3, r3, #2
 800b266:	440b      	add	r3, r1
 800b268:	3324      	adds	r3, #36	@ 0x24
 800b26a:	2201      	movs	r2, #1
 800b26c:	801a      	strh	r2, [r3, #0]

        /* Open EP OUT */
        (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK, CDC_DATA_HS_OUT_PACKET_SIZE);
 800b26e:	4b55      	ldr	r3, [pc, #340]	@ (800b3c4 <USBD_CDC_Init+0x1e8>)
 800b270:	7819      	ldrb	r1, [r3, #0]
 800b272:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b276:	2202      	movs	r2, #2
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f004 ff6c 	bl	8010156 <USBD_LL_OpenEP>

        pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b27e:	4b51      	ldr	r3, [pc, #324]	@ (800b3c4 <USBD_CDC_Init+0x1e8>)
 800b280:	781b      	ldrb	r3, [r3, #0]
 800b282:	f003 020f 	and.w	r2, r3, #15
 800b286:	6879      	ldr	r1, [r7, #4]
 800b288:	4613      	mov	r3, r2
 800b28a:	009b      	lsls	r3, r3, #2
 800b28c:	4413      	add	r3, r2
 800b28e:	009b      	lsls	r3, r3, #2
 800b290:	440b      	add	r3, r1
 800b292:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b296:	2201      	movs	r2, #1
 800b298:	801a      	strh	r2, [r3, #0]

        /* Set bInterval for CDC CMD Endpoint */
        pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b29a:	4b4b      	ldr	r3, [pc, #300]	@ (800b3c8 <USBD_CDC_Init+0x1ec>)
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	f003 020f 	and.w	r2, r3, #15
 800b2a2:	6879      	ldr	r1, [r7, #4]
 800b2a4:	4613      	mov	r3, r2
 800b2a6:	009b      	lsls	r3, r3, #2
 800b2a8:	4413      	add	r3, r2
 800b2aa:	009b      	lsls	r3, r3, #2
 800b2ac:	440b      	add	r3, r1
 800b2ae:	3326      	adds	r3, #38	@ 0x26
 800b2b0:	2210      	movs	r2, #16
 800b2b2:	801a      	strh	r2, [r3, #0]
 800b2b4:	e035      	b.n	800b322 <USBD_CDC_Init+0x146>
    } else {
        /* Open EP IN */
        (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK, CDC_DATA_FS_IN_PACKET_SIZE);
 800b2b6:	4b42      	ldr	r3, [pc, #264]	@ (800b3c0 <USBD_CDC_Init+0x1e4>)
 800b2b8:	7819      	ldrb	r1, [r3, #0]
 800b2ba:	2340      	movs	r3, #64	@ 0x40
 800b2bc:	2202      	movs	r2, #2
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f004 ff49 	bl	8010156 <USBD_LL_OpenEP>

        pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b2c4:	4b3e      	ldr	r3, [pc, #248]	@ (800b3c0 <USBD_CDC_Init+0x1e4>)
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	f003 020f 	and.w	r2, r3, #15
 800b2cc:	6879      	ldr	r1, [r7, #4]
 800b2ce:	4613      	mov	r3, r2
 800b2d0:	009b      	lsls	r3, r3, #2
 800b2d2:	4413      	add	r3, r2
 800b2d4:	009b      	lsls	r3, r3, #2
 800b2d6:	440b      	add	r3, r1
 800b2d8:	3324      	adds	r3, #36	@ 0x24
 800b2da:	2201      	movs	r2, #1
 800b2dc:	801a      	strh	r2, [r3, #0]

        /* Open EP OUT */
        (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK, CDC_DATA_FS_OUT_PACKET_SIZE);
 800b2de:	4b39      	ldr	r3, [pc, #228]	@ (800b3c4 <USBD_CDC_Init+0x1e8>)
 800b2e0:	7819      	ldrb	r1, [r3, #0]
 800b2e2:	2340      	movs	r3, #64	@ 0x40
 800b2e4:	2202      	movs	r2, #2
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f004 ff35 	bl	8010156 <USBD_LL_OpenEP>

        pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b2ec:	4b35      	ldr	r3, [pc, #212]	@ (800b3c4 <USBD_CDC_Init+0x1e8>)
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	f003 020f 	and.w	r2, r3, #15
 800b2f4:	6879      	ldr	r1, [r7, #4]
 800b2f6:	4613      	mov	r3, r2
 800b2f8:	009b      	lsls	r3, r3, #2
 800b2fa:	4413      	add	r3, r2
 800b2fc:	009b      	lsls	r3, r3, #2
 800b2fe:	440b      	add	r3, r1
 800b300:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b304:	2201      	movs	r2, #1
 800b306:	801a      	strh	r2, [r3, #0]

        /* Set bInterval for CMD Endpoint */
        pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b308:	4b2f      	ldr	r3, [pc, #188]	@ (800b3c8 <USBD_CDC_Init+0x1ec>)
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	f003 020f 	and.w	r2, r3, #15
 800b310:	6879      	ldr	r1, [r7, #4]
 800b312:	4613      	mov	r3, r2
 800b314:	009b      	lsls	r3, r3, #2
 800b316:	4413      	add	r3, r2
 800b318:	009b      	lsls	r3, r3, #2
 800b31a:	440b      	add	r3, r1
 800b31c:	3326      	adds	r3, #38	@ 0x26
 800b31e:	2210      	movs	r2, #16
 800b320:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b322:	4b29      	ldr	r3, [pc, #164]	@ (800b3c8 <USBD_CDC_Init+0x1ec>)
 800b324:	7819      	ldrb	r1, [r3, #0]
 800b326:	2308      	movs	r3, #8
 800b328:	2203      	movs	r2, #3
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f004 ff13 	bl	8010156 <USBD_LL_OpenEP>
    pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b330:	4b25      	ldr	r3, [pc, #148]	@ (800b3c8 <USBD_CDC_Init+0x1ec>)
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	f003 020f 	and.w	r2, r3, #15
 800b338:	6879      	ldr	r1, [r7, #4]
 800b33a:	4613      	mov	r3, r2
 800b33c:	009b      	lsls	r3, r3, #2
 800b33e:	4413      	add	r3, r2
 800b340:	009b      	lsls	r3, r3, #2
 800b342:	440b      	add	r3, r1
 800b344:	3324      	adds	r3, #36	@ 0x24
 800b346:	2201      	movs	r2, #1
 800b348:	801a      	strh	r2, [r3, #0]

    hcdc->RxBuffer = NULL;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2200      	movs	r2, #0
 800b34e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	33b0      	adds	r3, #176	@ 0xb0
 800b35c:	009b      	lsls	r3, r3, #2
 800b35e:	4413      	add	r3, r2
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2200      	movs	r2, #0
 800b36a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2200      	movs	r2, #0
 800b372:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (hcdc->RxBuffer == NULL) {
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d101      	bne.n	800b384 <USBD_CDC_Init+0x1a8>
        return (uint8_t)USBD_EMEM;
 800b380:	2302      	movs	r3, #2
 800b382:	e018      	b.n	800b3b6 <USBD_CDC_Init+0x1da>
    }

    if (pdev->dev_speed == USBD_SPEED_HIGH) {
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	7c1b      	ldrb	r3, [r3, #16]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d10a      	bne.n	800b3a2 <USBD_CDC_Init+0x1c6>
        /* Prepare Out endpoint to receive next packet */
        (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer, CDC_DATA_HS_OUT_PACKET_SIZE);
 800b38c:	4b0d      	ldr	r3, [pc, #52]	@ (800b3c4 <USBD_CDC_Init+0x1e8>)
 800b38e:	7819      	ldrb	r1, [r3, #0]
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b396:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f004 ffca 	bl	8010334 <USBD_LL_PrepareReceive>
 800b3a0:	e008      	b.n	800b3b4 <USBD_CDC_Init+0x1d8>
    } else {
        /* Prepare Out endpoint to receive next packet */
        (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer, CDC_DATA_FS_OUT_PACKET_SIZE);
 800b3a2:	4b08      	ldr	r3, [pc, #32]	@ (800b3c4 <USBD_CDC_Init+0x1e8>)
 800b3a4:	7819      	ldrb	r1, [r3, #0]
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b3ac:	2340      	movs	r3, #64	@ 0x40
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f004 ffc0 	bl	8010334 <USBD_LL_PrepareReceive>
    }

    return (uint8_t)USBD_OK;
 800b3b4:	2300      	movs	r3, #0
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3710      	adds	r7, #16
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	bf00      	nop
 800b3c0:	200000ef 	.word	0x200000ef
 800b3c4:	200000f0 	.word	0x200000f0
 800b3c8:	200000f1 	.word	0x200000f1

0800b3cc <USBD_CDC_DeInit>:
 *         DeInitialize the CDC layer
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef * pdev, uint8_t cfgidx) {
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b082      	sub	sp, #8
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	460b      	mov	r3, r1
 800b3d6:	70fb      	strb	r3, [r7, #3]
    CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
    CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b3d8:	4b3a      	ldr	r3, [pc, #232]	@ (800b4c4 <USBD_CDC_DeInit+0xf8>)
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	4619      	mov	r1, r3
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f004 fedf 	bl	80101a2 <USBD_LL_CloseEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b3e4:	4b37      	ldr	r3, [pc, #220]	@ (800b4c4 <USBD_CDC_DeInit+0xf8>)
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	f003 020f 	and.w	r2, r3, #15
 800b3ec:	6879      	ldr	r1, [r7, #4]
 800b3ee:	4613      	mov	r3, r2
 800b3f0:	009b      	lsls	r3, r3, #2
 800b3f2:	4413      	add	r3, r2
 800b3f4:	009b      	lsls	r3, r3, #2
 800b3f6:	440b      	add	r3, r1
 800b3f8:	3324      	adds	r3, #36	@ 0x24
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b3fe:	4b32      	ldr	r3, [pc, #200]	@ (800b4c8 <USBD_CDC_DeInit+0xfc>)
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	4619      	mov	r1, r3
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f004 fecc 	bl	80101a2 <USBD_LL_CloseEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b40a:	4b2f      	ldr	r3, [pc, #188]	@ (800b4c8 <USBD_CDC_DeInit+0xfc>)
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	f003 020f 	and.w	r2, r3, #15
 800b412:	6879      	ldr	r1, [r7, #4]
 800b414:	4613      	mov	r3, r2
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	4413      	add	r3, r2
 800b41a:	009b      	lsls	r3, r3, #2
 800b41c:	440b      	add	r3, r1
 800b41e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b422:	2200      	movs	r2, #0
 800b424:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b426:	4b29      	ldr	r3, [pc, #164]	@ (800b4cc <USBD_CDC_DeInit+0x100>)
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	4619      	mov	r1, r3
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f004 feb8 	bl	80101a2 <USBD_LL_CloseEP>
    pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b432:	4b26      	ldr	r3, [pc, #152]	@ (800b4cc <USBD_CDC_DeInit+0x100>)
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	f003 020f 	and.w	r2, r3, #15
 800b43a:	6879      	ldr	r1, [r7, #4]
 800b43c:	4613      	mov	r3, r2
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	4413      	add	r3, r2
 800b442:	009b      	lsls	r3, r3, #2
 800b444:	440b      	add	r3, r1
 800b446:	3324      	adds	r3, #36	@ 0x24
 800b448:	2200      	movs	r2, #0
 800b44a:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b44c:	4b1f      	ldr	r3, [pc, #124]	@ (800b4cc <USBD_CDC_DeInit+0x100>)
 800b44e:	781b      	ldrb	r3, [r3, #0]
 800b450:	f003 020f 	and.w	r2, r3, #15
 800b454:	6879      	ldr	r1, [r7, #4]
 800b456:	4613      	mov	r3, r2
 800b458:	009b      	lsls	r3, r3, #2
 800b45a:	4413      	add	r3, r2
 800b45c:	009b      	lsls	r3, r3, #2
 800b45e:	440b      	add	r3, r1
 800b460:	3326      	adds	r3, #38	@ 0x26
 800b462:	2200      	movs	r2, #0
 800b464:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    if (pdev->pClassDataCmsit[pdev->classId] != NULL) {
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	32b0      	adds	r2, #176	@ 0xb0
 800b470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d01f      	beq.n	800b4b8 <USBD_CDC_DeInit+0xec>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b47e:	687a      	ldr	r2, [r7, #4]
 800b480:	33b0      	adds	r3, #176	@ 0xb0
 800b482:	009b      	lsls	r3, r3, #2
 800b484:	4413      	add	r3, r2
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	4798      	blx	r3
        (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	32b0      	adds	r2, #176	@ 0xb0
 800b496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b49a:	4618      	mov	r0, r3
 800b49c:	f004 ff8c 	bl	80103b8 <USBD_static_free>
        pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	32b0      	adds	r2, #176	@ 0xb0
 800b4aa:	2100      	movs	r1, #0
 800b4ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pdev->pClassData = NULL;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    }

    return (uint8_t)USBD_OK;
 800b4b8:	2300      	movs	r3, #0
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3708      	adds	r7, #8
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}
 800b4c2:	bf00      	nop
 800b4c4:	200000ef 	.word	0x200000ef
 800b4c8:	200000f0 	.word	0x200000f0
 800b4cc:	200000f1 	.word	0x200000f1

0800b4d0 <USBD_CDC_Setup>:
 *         Handle the CDC specific requests
 * @param  pdev: instance
 * @param  req: usb requests
 * @retval status
 */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b086      	sub	sp, #24
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	6039      	str	r1, [r7, #0]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	32b0      	adds	r2, #176	@ 0xb0
 800b4e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4e8:	613b      	str	r3, [r7, #16]
    uint16_t len;
    uint8_t ifalt = 0U;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	737b      	strb	r3, [r7, #13]
    uint16_t status_info = 0U;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	817b      	strh	r3, [r7, #10]
    USBD_StatusTypeDef ret = USBD_OK;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	75fb      	strb	r3, [r7, #23]

    if (hcdc == NULL) {
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d101      	bne.n	800b500 <USBD_CDC_Setup+0x30>
        return (uint8_t)USBD_FAIL;
 800b4fc:	2303      	movs	r3, #3
 800b4fe:	e0bf      	b.n	800b680 <USBD_CDC_Setup+0x1b0>
    }

    switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	781b      	ldrb	r3, [r3, #0]
 800b504:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d050      	beq.n	800b5ae <USBD_CDC_Setup+0xde>
 800b50c:	2b20      	cmp	r3, #32
 800b50e:	f040 80af 	bne.w	800b670 <USBD_CDC_Setup+0x1a0>
    case USB_REQ_TYPE_CLASS:
        if (req->wLength != 0U) {
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	88db      	ldrh	r3, [r3, #6]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d03a      	beq.n	800b590 <USBD_CDC_Setup+0xc0>
            if ((req->bmRequest & 0x80U) != 0U) {
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	781b      	ldrb	r3, [r3, #0]
 800b51e:	b25b      	sxtb	r3, r3
 800b520:	2b00      	cmp	r3, #0
 800b522:	da1b      	bge.n	800b55c <USBD_CDC_Setup+0x8c>
                ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest, (uint8_t *)hcdc->data, req->wLength);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	33b0      	adds	r3, #176	@ 0xb0
 800b52e:	009b      	lsls	r3, r3, #2
 800b530:	4413      	add	r3, r2
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	689b      	ldr	r3, [r3, #8]
 800b536:	683a      	ldr	r2, [r7, #0]
 800b538:	7850      	ldrb	r0, [r2, #1]
 800b53a:	6939      	ldr	r1, [r7, #16]
 800b53c:	683a      	ldr	r2, [r7, #0]
 800b53e:	88d2      	ldrh	r2, [r2, #6]
 800b540:	4798      	blx	r3

                len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	88db      	ldrh	r3, [r3, #6]
 800b546:	2b07      	cmp	r3, #7
 800b548:	bf28      	it	cs
 800b54a:	2307      	movcs	r3, #7
 800b54c:	81fb      	strh	r3, [r7, #14]
                (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	89fa      	ldrh	r2, [r7, #14]
 800b552:	4619      	mov	r1, r3
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f001 fd87 	bl	800d068 <USBD_CtlSendData>
                (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
            }
        } else {
            ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest, (uint8_t *)req, 0U);
        }
        break;
 800b55a:	e090      	b.n	800b67e <USBD_CDC_Setup+0x1ae>
                hcdc->CmdOpCode = req->bRequest;
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	785a      	ldrb	r2, [r3, #1]
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
                hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	88db      	ldrh	r3, [r3, #6]
 800b56a:	2b3f      	cmp	r3, #63	@ 0x3f
 800b56c:	d803      	bhi.n	800b576 <USBD_CDC_Setup+0xa6>
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	88db      	ldrh	r3, [r3, #6]
 800b572:	b2da      	uxtb	r2, r3
 800b574:	e000      	b.n	800b578 <USBD_CDC_Setup+0xa8>
 800b576:	2240      	movs	r2, #64	@ 0x40
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
                (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b57e:	6939      	ldr	r1, [r7, #16]
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b586:	461a      	mov	r2, r3
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f001 fd99 	bl	800d0c0 <USBD_CtlPrepareRx>
        break;
 800b58e:	e076      	b.n	800b67e <USBD_CDC_Setup+0x1ae>
            ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest, (uint8_t *)req, 0U);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	33b0      	adds	r3, #176	@ 0xb0
 800b59a:	009b      	lsls	r3, r3, #2
 800b59c:	4413      	add	r3, r2
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	689b      	ldr	r3, [r3, #8]
 800b5a2:	683a      	ldr	r2, [r7, #0]
 800b5a4:	7850      	ldrb	r0, [r2, #1]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	6839      	ldr	r1, [r7, #0]
 800b5aa:	4798      	blx	r3
        break;
 800b5ac:	e067      	b.n	800b67e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
        switch (req->bRequest) {
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	785b      	ldrb	r3, [r3, #1]
 800b5b2:	2b0b      	cmp	r3, #11
 800b5b4:	d851      	bhi.n	800b65a <USBD_CDC_Setup+0x18a>
 800b5b6:	a201      	add	r2, pc, #4	@ (adr r2, 800b5bc <USBD_CDC_Setup+0xec>)
 800b5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5bc:	0800b5ed 	.word	0x0800b5ed
 800b5c0:	0800b669 	.word	0x0800b669
 800b5c4:	0800b65b 	.word	0x0800b65b
 800b5c8:	0800b65b 	.word	0x0800b65b
 800b5cc:	0800b65b 	.word	0x0800b65b
 800b5d0:	0800b65b 	.word	0x0800b65b
 800b5d4:	0800b65b 	.word	0x0800b65b
 800b5d8:	0800b65b 	.word	0x0800b65b
 800b5dc:	0800b65b 	.word	0x0800b65b
 800b5e0:	0800b65b 	.word	0x0800b65b
 800b5e4:	0800b617 	.word	0x0800b617
 800b5e8:	0800b641 	.word	0x0800b641
        case USB_REQ_GET_STATUS:
            if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5f2:	b2db      	uxtb	r3, r3
 800b5f4:	2b03      	cmp	r3, #3
 800b5f6:	d107      	bne.n	800b608 <USBD_CDC_Setup+0x138>
                (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b5f8:	f107 030a 	add.w	r3, r7, #10
 800b5fc:	2202      	movs	r2, #2
 800b5fe:	4619      	mov	r1, r3
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f001 fd31 	bl	800d068 <USBD_CtlSendData>
            } else {
                USBD_CtlError(pdev, req);
                ret = USBD_FAIL;
            }
            break;
 800b606:	e032      	b.n	800b66e <USBD_CDC_Setup+0x19e>
                USBD_CtlError(pdev, req);
 800b608:	6839      	ldr	r1, [r7, #0]
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f001 fcbb 	bl	800cf86 <USBD_CtlError>
                ret = USBD_FAIL;
 800b610:	2303      	movs	r3, #3
 800b612:	75fb      	strb	r3, [r7, #23]
            break;
 800b614:	e02b      	b.n	800b66e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
            if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b61c:	b2db      	uxtb	r3, r3
 800b61e:	2b03      	cmp	r3, #3
 800b620:	d107      	bne.n	800b632 <USBD_CDC_Setup+0x162>
                (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b622:	f107 030d 	add.w	r3, r7, #13
 800b626:	2201      	movs	r2, #1
 800b628:	4619      	mov	r1, r3
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f001 fd1c 	bl	800d068 <USBD_CtlSendData>
            } else {
                USBD_CtlError(pdev, req);
                ret = USBD_FAIL;
            }
            break;
 800b630:	e01d      	b.n	800b66e <USBD_CDC_Setup+0x19e>
                USBD_CtlError(pdev, req);
 800b632:	6839      	ldr	r1, [r7, #0]
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f001 fca6 	bl	800cf86 <USBD_CtlError>
                ret = USBD_FAIL;
 800b63a:	2303      	movs	r3, #3
 800b63c:	75fb      	strb	r3, [r7, #23]
            break;
 800b63e:	e016      	b.n	800b66e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
            if (pdev->dev_state != USBD_STATE_CONFIGURED) {
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b646:	b2db      	uxtb	r3, r3
 800b648:	2b03      	cmp	r3, #3
 800b64a:	d00f      	beq.n	800b66c <USBD_CDC_Setup+0x19c>
                USBD_CtlError(pdev, req);
 800b64c:	6839      	ldr	r1, [r7, #0]
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f001 fc99 	bl	800cf86 <USBD_CtlError>
                ret = USBD_FAIL;
 800b654:	2303      	movs	r3, #3
 800b656:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800b658:	e008      	b.n	800b66c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
            break;

        default:
            USBD_CtlError(pdev, req);
 800b65a:	6839      	ldr	r1, [r7, #0]
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f001 fc92 	bl	800cf86 <USBD_CtlError>
            ret = USBD_FAIL;
 800b662:	2303      	movs	r3, #3
 800b664:	75fb      	strb	r3, [r7, #23]
            break;
 800b666:	e002      	b.n	800b66e <USBD_CDC_Setup+0x19e>
            break;
 800b668:	bf00      	nop
 800b66a:	e008      	b.n	800b67e <USBD_CDC_Setup+0x1ae>
            break;
 800b66c:	bf00      	nop
        }
        break;
 800b66e:	e006      	b.n	800b67e <USBD_CDC_Setup+0x1ae>

    default:
        USBD_CtlError(pdev, req);
 800b670:	6839      	ldr	r1, [r7, #0]
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f001 fc87 	bl	800cf86 <USBD_CtlError>
        ret = USBD_FAIL;
 800b678:	2303      	movs	r3, #3
 800b67a:	75fb      	strb	r3, [r7, #23]
        break;
 800b67c:	bf00      	nop
    }

    return (uint8_t)ret;
 800b67e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b680:	4618      	mov	r0, r3
 800b682:	3718      	adds	r7, #24
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}

0800b688 <USBD_CDC_DataIn>:
 *         Data sent on non-control IN endpoint
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef * pdev, uint8_t epnum) {
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	460b      	mov	r3, r1
 800b692:	70fb      	strb	r3, [r7, #3]
    USBD_CDC_HandleTypeDef * hcdc;
    PCD_HandleTypeDef * hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b69a:	60fb      	str	r3, [r7, #12]

    if (pdev->pClassDataCmsit[pdev->classId] == NULL) {
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	32b0      	adds	r2, #176	@ 0xb0
 800b6a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d101      	bne.n	800b6b2 <USBD_CDC_DataIn+0x2a>
        return (uint8_t)USBD_FAIL;
 800b6ae:	2303      	movs	r3, #3
 800b6b0:	e065      	b.n	800b77e <USBD_CDC_DataIn+0xf6>
    }

    hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	32b0      	adds	r2, #176	@ 0xb0
 800b6bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6c0:	60bb      	str	r3, [r7, #8]

    if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) && ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U)) {
 800b6c2:	78fb      	ldrb	r3, [r7, #3]
 800b6c4:	f003 020f 	and.w	r2, r3, #15
 800b6c8:	6879      	ldr	r1, [r7, #4]
 800b6ca:	4613      	mov	r3, r2
 800b6cc:	009b      	lsls	r3, r3, #2
 800b6ce:	4413      	add	r3, r2
 800b6d0:	009b      	lsls	r3, r3, #2
 800b6d2:	440b      	add	r3, r1
 800b6d4:	3318      	adds	r3, #24
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d02f      	beq.n	800b73c <USBD_CDC_DataIn+0xb4>
 800b6dc:	78fb      	ldrb	r3, [r7, #3]
 800b6de:	f003 020f 	and.w	r2, r3, #15
 800b6e2:	6879      	ldr	r1, [r7, #4]
 800b6e4:	4613      	mov	r3, r2
 800b6e6:	009b      	lsls	r3, r3, #2
 800b6e8:	4413      	add	r3, r2
 800b6ea:	009b      	lsls	r3, r3, #2
 800b6ec:	440b      	add	r3, r1
 800b6ee:	3318      	adds	r3, #24
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	78fb      	ldrb	r3, [r7, #3]
 800b6f4:	f003 010f 	and.w	r1, r3, #15
 800b6f8:	68f8      	ldr	r0, [r7, #12]
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	00db      	lsls	r3, r3, #3
 800b6fe:	440b      	add	r3, r1
 800b700:	009b      	lsls	r3, r3, #2
 800b702:	4403      	add	r3, r0
 800b704:	3348      	adds	r3, #72	@ 0x48
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	fbb2 f1f3 	udiv	r1, r2, r3
 800b70c:	fb01 f303 	mul.w	r3, r1, r3
 800b710:	1ad3      	subs	r3, r2, r3
 800b712:	2b00      	cmp	r3, #0
 800b714:	d112      	bne.n	800b73c <USBD_CDC_DataIn+0xb4>
        /* Update the packet total length */
        pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b716:	78fb      	ldrb	r3, [r7, #3]
 800b718:	f003 020f 	and.w	r2, r3, #15
 800b71c:	6879      	ldr	r1, [r7, #4]
 800b71e:	4613      	mov	r3, r2
 800b720:	009b      	lsls	r3, r3, #2
 800b722:	4413      	add	r3, r2
 800b724:	009b      	lsls	r3, r3, #2
 800b726:	440b      	add	r3, r1
 800b728:	3318      	adds	r3, #24
 800b72a:	2200      	movs	r2, #0
 800b72c:	601a      	str	r2, [r3, #0]

        /* Send ZLP */
        (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b72e:	78f9      	ldrb	r1, [r7, #3]
 800b730:	2300      	movs	r3, #0
 800b732:	2200      	movs	r2, #0
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f004 fddc 	bl	80102f2 <USBD_LL_Transmit>
 800b73a:	e01f      	b.n	800b77c <USBD_CDC_DataIn+0xf4>
    } else {
        hcdc->TxState = 0U;
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	2200      	movs	r2, #0
 800b740:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

        if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL) {
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b74a:	687a      	ldr	r2, [r7, #4]
 800b74c:	33b0      	adds	r3, #176	@ 0xb0
 800b74e:	009b      	lsls	r3, r3, #2
 800b750:	4413      	add	r3, r2
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	691b      	ldr	r3, [r3, #16]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d010      	beq.n	800b77c <USBD_CDC_DataIn+0xf4>
            ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b760:	687a      	ldr	r2, [r7, #4]
 800b762:	33b0      	adds	r3, #176	@ 0xb0
 800b764:	009b      	lsls	r3, r3, #2
 800b766:	4413      	add	r3, r2
 800b768:	685b      	ldr	r3, [r3, #4]
 800b76a:	691b      	ldr	r3, [r3, #16]
 800b76c:	68ba      	ldr	r2, [r7, #8]
 800b76e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b772:	68ba      	ldr	r2, [r7, #8]
 800b774:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b778:	78fa      	ldrb	r2, [r7, #3]
 800b77a:	4798      	blx	r3
        }
    }

    return (uint8_t)USBD_OK;
 800b77c:	2300      	movs	r3, #0
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3710      	adds	r7, #16
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}

0800b786 <USBD_CDC_DataOut>:
 *         Data received on non-control Out endpoint
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef * pdev, uint8_t epnum) {
 800b786:	b580      	push	{r7, lr}
 800b788:	b084      	sub	sp, #16
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
 800b78e:	460b      	mov	r3, r1
 800b790:	70fb      	strb	r3, [r7, #3]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	32b0      	adds	r2, #176	@ 0xb0
 800b79c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7a0:	60fb      	str	r3, [r7, #12]

    if (pdev->pClassDataCmsit[pdev->classId] == NULL) {
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	32b0      	adds	r2, #176	@ 0xb0
 800b7ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d101      	bne.n	800b7b8 <USBD_CDC_DataOut+0x32>
        return (uint8_t)USBD_FAIL;
 800b7b4:	2303      	movs	r3, #3
 800b7b6:	e01a      	b.n	800b7ee <USBD_CDC_DataOut+0x68>
    }

    /* Get the received data length */
    hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b7b8:	78fb      	ldrb	r3, [r7, #3]
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f004 fdda 	bl	8010376 <USBD_LL_GetRxDataSize>
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

    /* USB data will be immediately processed, this allow next USB traffic being
    NAKed till the end of the application Xfer */

    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b7d0:	687a      	ldr	r2, [r7, #4]
 800b7d2:	33b0      	adds	r3, #176	@ 0xb0
 800b7d4:	009b      	lsls	r3, r3, #2
 800b7d6:	4413      	add	r3, r2
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	68db      	ldr	r3, [r3, #12]
 800b7dc:	68fa      	ldr	r2, [r7, #12]
 800b7de:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b7e2:	68fa      	ldr	r2, [r7, #12]
 800b7e4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b7e8:	4611      	mov	r1, r2
 800b7ea:	4798      	blx	r3

    return (uint8_t)USBD_OK;
 800b7ec:	2300      	movs	r3, #0
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}

0800b7f6 <USBD_CDC_EP0_RxReady>:
 * @brief  USBD_CDC_EP0_RxReady
 *         Handle EP0 Rx Ready event
 * @param  pdev: device instance
 * @retval status
 */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef * pdev) {
 800b7f6:	b580      	push	{r7, lr}
 800b7f8:	b084      	sub	sp, #16
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	6078      	str	r0, [r7, #4]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	32b0      	adds	r2, #176	@ 0xb0
 800b808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b80c:	60fb      	str	r3, [r7, #12]

    if (hcdc == NULL) {
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d101      	bne.n	800b818 <USBD_CDC_EP0_RxReady+0x22>
        return (uint8_t)USBD_FAIL;
 800b814:	2303      	movs	r3, #3
 800b816:	e024      	b.n	800b862 <USBD_CDC_EP0_RxReady+0x6c>
    }

    if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU)) {
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	33b0      	adds	r3, #176	@ 0xb0
 800b822:	009b      	lsls	r3, r3, #2
 800b824:	4413      	add	r3, r2
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d019      	beq.n	800b860 <USBD_CDC_EP0_RxReady+0x6a>
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b832:	2bff      	cmp	r3, #255	@ 0xff
 800b834:	d014      	beq.n	800b860 <USBD_CDC_EP0_RxReady+0x6a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode, (uint8_t *)hcdc->data, (uint16_t)hcdc->CmdLength);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b83c:	687a      	ldr	r2, [r7, #4]
 800b83e:	33b0      	adds	r3, #176	@ 0xb0
 800b840:	009b      	lsls	r3, r3, #2
 800b842:	4413      	add	r3, r2
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	689b      	ldr	r3, [r3, #8]
 800b848:	68fa      	ldr	r2, [r7, #12]
 800b84a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
 800b84e:	68f9      	ldr	r1, [r7, #12]
 800b850:	68fa      	ldr	r2, [r7, #12]
 800b852:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
 800b856:	4798      	blx	r3
        hcdc->CmdOpCode = 0xFFU;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	22ff      	movs	r2, #255	@ 0xff
 800b85c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
    }

    return (uint8_t)USBD_OK;
 800b860:	2300      	movs	r3, #0
}
 800b862:	4618      	mov	r0, r3
 800b864:	3710      	adds	r7, #16
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}
	...

0800b86c <USBD_CDC_GetFSCfgDesc>:
 * @brief  USBD_CDC_GetFSCfgDesc
 *         Return configuration descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t * USBD_CDC_GetFSCfgDesc(uint16_t * length) {
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b086      	sub	sp, #24
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
    USBD_EpDescTypeDef * pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b874:	2182      	movs	r1, #130	@ 0x82
 800b876:	4818      	ldr	r0, [pc, #96]	@ (800b8d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b878:	f000 fd4f 	bl	800c31a <USBD_GetEpDesc>
 800b87c:	6178      	str	r0, [r7, #20]
    USBD_EpDescTypeDef * pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b87e:	2101      	movs	r1, #1
 800b880:	4815      	ldr	r0, [pc, #84]	@ (800b8d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b882:	f000 fd4a 	bl	800c31a <USBD_GetEpDesc>
 800b886:	6138      	str	r0, [r7, #16]
    USBD_EpDescTypeDef * pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b888:	2181      	movs	r1, #129	@ 0x81
 800b88a:	4813      	ldr	r0, [pc, #76]	@ (800b8d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b88c:	f000 fd45 	bl	800c31a <USBD_GetEpDesc>
 800b890:	60f8      	str	r0, [r7, #12]

    if (pEpCmdDesc != NULL) {
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d002      	beq.n	800b89e <USBD_CDC_GetFSCfgDesc+0x32>
        pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	2210      	movs	r2, #16
 800b89c:	719a      	strb	r2, [r3, #6]
    }

    if (pEpOutDesc != NULL) {
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d006      	beq.n	800b8b2 <USBD_CDC_GetFSCfgDesc+0x46>
        pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b8ac:	711a      	strb	r2, [r3, #4]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	715a      	strb	r2, [r3, #5]
    }

    if (pEpInDesc != NULL) {
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d006      	beq.n	800b8c6 <USBD_CDC_GetFSCfgDesc+0x5a>
        pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b8c0:	711a      	strb	r2, [r3, #4]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	715a      	strb	r2, [r3, #5]
    }

    *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2243      	movs	r2, #67	@ 0x43
 800b8ca:	801a      	strh	r2, [r3, #0]
    return USBD_CDC_CfgDesc;
 800b8cc:	4b02      	ldr	r3, [pc, #8]	@ (800b8d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3718      	adds	r7, #24
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	200000ac 	.word	0x200000ac

0800b8dc <USBD_CDC_GetHSCfgDesc>:
 * @brief  USBD_CDC_GetHSCfgDesc
 *         Return configuration descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t * USBD_CDC_GetHSCfgDesc(uint16_t * length) {
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b086      	sub	sp, #24
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
    USBD_EpDescTypeDef * pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b8e4:	2182      	movs	r1, #130	@ 0x82
 800b8e6:	4818      	ldr	r0, [pc, #96]	@ (800b948 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b8e8:	f000 fd17 	bl	800c31a <USBD_GetEpDesc>
 800b8ec:	6178      	str	r0, [r7, #20]
    USBD_EpDescTypeDef * pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b8ee:	2101      	movs	r1, #1
 800b8f0:	4815      	ldr	r0, [pc, #84]	@ (800b948 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b8f2:	f000 fd12 	bl	800c31a <USBD_GetEpDesc>
 800b8f6:	6138      	str	r0, [r7, #16]
    USBD_EpDescTypeDef * pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b8f8:	2181      	movs	r1, #129	@ 0x81
 800b8fa:	4813      	ldr	r0, [pc, #76]	@ (800b948 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b8fc:	f000 fd0d 	bl	800c31a <USBD_GetEpDesc>
 800b900:	60f8      	str	r0, [r7, #12]

    if (pEpCmdDesc != NULL) {
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d002      	beq.n	800b90e <USBD_CDC_GetHSCfgDesc+0x32>
        pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	2210      	movs	r2, #16
 800b90c:	719a      	strb	r2, [r3, #6]
    }

    if (pEpOutDesc != NULL) {
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d006      	beq.n	800b922 <USBD_CDC_GetHSCfgDesc+0x46>
        pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	2200      	movs	r2, #0
 800b918:	711a      	strb	r2, [r3, #4]
 800b91a:	2200      	movs	r2, #0
 800b91c:	f042 0202 	orr.w	r2, r2, #2
 800b920:	715a      	strb	r2, [r3, #5]
    }

    if (pEpInDesc != NULL) {
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d006      	beq.n	800b936 <USBD_CDC_GetHSCfgDesc+0x5a>
        pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	2200      	movs	r2, #0
 800b92c:	711a      	strb	r2, [r3, #4]
 800b92e:	2200      	movs	r2, #0
 800b930:	f042 0202 	orr.w	r2, r2, #2
 800b934:	715a      	strb	r2, [r3, #5]
    }

    *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2243      	movs	r2, #67	@ 0x43
 800b93a:	801a      	strh	r2, [r3, #0]
    return USBD_CDC_CfgDesc;
 800b93c:	4b02      	ldr	r3, [pc, #8]	@ (800b948 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3718      	adds	r7, #24
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	200000ac 	.word	0x200000ac

0800b94c <USBD_CDC_GetOtherSpeedCfgDesc>:
 * @brief  USBD_CDC_GetOtherSpeedCfgDesc
 *         Return configuration descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t * USBD_CDC_GetOtherSpeedCfgDesc(uint16_t * length) {
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b086      	sub	sp, #24
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
    USBD_EpDescTypeDef * pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b954:	2182      	movs	r1, #130	@ 0x82
 800b956:	4818      	ldr	r0, [pc, #96]	@ (800b9b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b958:	f000 fcdf 	bl	800c31a <USBD_GetEpDesc>
 800b95c:	6178      	str	r0, [r7, #20]
    USBD_EpDescTypeDef * pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b95e:	2101      	movs	r1, #1
 800b960:	4815      	ldr	r0, [pc, #84]	@ (800b9b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b962:	f000 fcda 	bl	800c31a <USBD_GetEpDesc>
 800b966:	6138      	str	r0, [r7, #16]
    USBD_EpDescTypeDef * pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b968:	2181      	movs	r1, #129	@ 0x81
 800b96a:	4813      	ldr	r0, [pc, #76]	@ (800b9b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b96c:	f000 fcd5 	bl	800c31a <USBD_GetEpDesc>
 800b970:	60f8      	str	r0, [r7, #12]

    if (pEpCmdDesc != NULL) {
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d002      	beq.n	800b97e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
        pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	2210      	movs	r2, #16
 800b97c:	719a      	strb	r2, [r3, #6]
    }

    if (pEpOutDesc != NULL) {
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d006      	beq.n	800b992 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
        pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	2200      	movs	r2, #0
 800b988:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b98c:	711a      	strb	r2, [r3, #4]
 800b98e:	2200      	movs	r2, #0
 800b990:	715a      	strb	r2, [r3, #5]
    }

    if (pEpInDesc != NULL) {
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d006      	beq.n	800b9a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
        pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2200      	movs	r2, #0
 800b99c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b9a0:	711a      	strb	r2, [r3, #4]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	715a      	strb	r2, [r3, #5]
    }

    *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2243      	movs	r2, #67	@ 0x43
 800b9aa:	801a      	strh	r2, [r3, #0]
    return USBD_CDC_CfgDesc;
 800b9ac:	4b02      	ldr	r3, [pc, #8]	@ (800b9b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3718      	adds	r7, #24
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}
 800b9b6:	bf00      	nop
 800b9b8:	200000ac 	.word	0x200000ac

0800b9bc <USBD_CDC_GetDeviceQualifierDescriptor>:
 * @brief  USBD_CDC_GetDeviceQualifierDescriptor
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
uint8_t * USBD_CDC_GetDeviceQualifierDescriptor(uint16_t * length) {
 800b9bc:	b480      	push	{r7}
 800b9be:	b083      	sub	sp, #12
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
    *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	220a      	movs	r2, #10
 800b9c8:	801a      	strh	r2, [r3, #0]

    return USBD_CDC_DeviceQualifierDesc;
 800b9ca:	4b03      	ldr	r3, [pc, #12]	@ (800b9d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	370c      	adds	r7, #12
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d6:	4770      	bx	lr
 800b9d8:	20000068 	.word	0x20000068

0800b9dc <USBD_CDC_RegisterInterface>:
 * @brief  USBD_CDC_RegisterInterface
 * @param  pdev: device instance
 * @param  fops: CD  Interface callback
 * @retval status
 */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef * pdev, USBD_CDC_ItfTypeDef * fops) {
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	6039      	str	r1, [r7, #0]
    if (fops == NULL) {
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d101      	bne.n	800b9f0 <USBD_CDC_RegisterInterface+0x14>
        return (uint8_t)USBD_FAIL;
 800b9ec:	2303      	movs	r3, #3
 800b9ee:	e009      	b.n	800ba04 <USBD_CDC_RegisterInterface+0x28>
    }

    pdev->pUserData[pdev->classId] = fops;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b9f6:	687a      	ldr	r2, [r7, #4]
 800b9f8:	33b0      	adds	r3, #176	@ 0xb0
 800b9fa:	009b      	lsls	r3, r3, #2
 800b9fc:	4413      	add	r3, r2
 800b9fe:	683a      	ldr	r2, [r7, #0]
 800ba00:	605a      	str	r2, [r3, #4]

    return (uint8_t)USBD_OK;
 800ba02:	2300      	movs	r3, #0
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	370c      	adds	r7, #12
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr

0800ba10 <USBD_CDC_SetTxBuffer>:
 * @param  pdev: device instance
 * @param  pbuff: Tx Buffer
 * @param  length: Tx Buffer length
 * @retval status
 */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef * pdev, uint8_t * pbuff, uint32_t length) {
 800ba10:	b480      	push	{r7}
 800ba12:	b087      	sub	sp, #28
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	60f8      	str	r0, [r7, #12]
 800ba18:	60b9      	str	r1, [r7, #8]
 800ba1a:	607a      	str	r2, [r7, #4]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	32b0      	adds	r2, #176	@ 0xb0
 800ba26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba2a:	617b      	str	r3, [r7, #20]

    if (hcdc == NULL) {
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d101      	bne.n	800ba36 <USBD_CDC_SetTxBuffer+0x26>
        return (uint8_t)USBD_FAIL;
 800ba32:	2303      	movs	r3, #3
 800ba34:	e008      	b.n	800ba48 <USBD_CDC_SetTxBuffer+0x38>
    }

    hcdc->TxBuffer = pbuff;
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	68ba      	ldr	r2, [r7, #8]
 800ba3a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
    hcdc->TxLength = length;
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	687a      	ldr	r2, [r7, #4]
 800ba42:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

    return (uint8_t)USBD_OK;
 800ba46:	2300      	movs	r3, #0
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	371c      	adds	r7, #28
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba52:	4770      	bx	lr

0800ba54 <USBD_CDC_SetRxBuffer>:
 * @brief  USBD_CDC_SetRxBuffer
 * @param  pdev: device instance
 * @param  pbuff: Rx Buffer
 * @retval status
 */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef * pdev, uint8_t * pbuff) {
 800ba54:	b480      	push	{r7}
 800ba56:	b085      	sub	sp, #20
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
 800ba5c:	6039      	str	r1, [r7, #0]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	32b0      	adds	r2, #176	@ 0xb0
 800ba68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba6c:	60fb      	str	r3, [r7, #12]

    if (hcdc == NULL) {
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d101      	bne.n	800ba78 <USBD_CDC_SetRxBuffer+0x24>
        return (uint8_t)USBD_FAIL;
 800ba74:	2303      	movs	r3, #3
 800ba76:	e004      	b.n	800ba82 <USBD_CDC_SetRxBuffer+0x2e>
    }

    hcdc->RxBuffer = pbuff;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	683a      	ldr	r2, [r7, #0]
 800ba7c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

    return (uint8_t)USBD_OK;
 800ba80:	2300      	movs	r3, #0
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3714      	adds	r7, #20
 800ba86:	46bd      	mov	sp, r7
 800ba88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8c:	4770      	bx	lr
	...

0800ba90 <USBD_CDC_TransmitPacket>:
 * @brief  USBD_CDC_TransmitPacket
 *         Transmit packet on IN endpoint
 * @param  pdev: device instance
 * @retval status
 */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef * pdev) {
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b084      	sub	sp, #16
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	32b0      	adds	r2, #176	@ 0xb0
 800baa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baa6:	60bb      	str	r3, [r7, #8]
    USBD_StatusTypeDef ret = USBD_BUSY;
 800baa8:	2301      	movs	r3, #1
 800baaa:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
    /* Get the Endpoints addresses allocated for this class instance */
    CDCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
    if (pdev->pClassDataCmsit[pdev->classId] == NULL) {
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	32b0      	adds	r2, #176	@ 0xb0
 800bab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d101      	bne.n	800bac2 <USBD_CDC_TransmitPacket+0x32>
        return (uint8_t)USBD_FAIL;
 800babe:	2303      	movs	r3, #3
 800bac0:	e025      	b.n	800bb0e <USBD_CDC_TransmitPacket+0x7e>
    }

    if (hcdc->TxState == 0U) {
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d11f      	bne.n	800bb0c <USBD_CDC_TransmitPacket+0x7c>
        /* Tx Transfer in progress */
        hcdc->TxState = 1U;
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	2201      	movs	r2, #1
 800bad0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

        /* Update the packet total length */
        pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800bad4:	4b10      	ldr	r3, [pc, #64]	@ (800bb18 <USBD_CDC_TransmitPacket+0x88>)
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	f003 020f 	and.w	r2, r3, #15
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	4613      	mov	r3, r2
 800bae6:	009b      	lsls	r3, r3, #2
 800bae8:	4413      	add	r3, r2
 800baea:	009b      	lsls	r3, r3, #2
 800baec:	4403      	add	r3, r0
 800baee:	3318      	adds	r3, #24
 800baf0:	6019      	str	r1, [r3, #0]

        /* Transmit next packet */
        (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800baf2:	4b09      	ldr	r3, [pc, #36]	@ (800bb18 <USBD_CDC_TransmitPacket+0x88>)
 800baf4:	7819      	ldrb	r1, [r3, #0]
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f004 fbf5 	bl	80102f2 <USBD_LL_Transmit>

        ret = USBD_OK;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	73fb      	strb	r3, [r7, #15]
    }

    return (uint8_t)ret;
 800bb0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3710      	adds	r7, #16
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
 800bb16:	bf00      	nop
 800bb18:	200000ef 	.word	0x200000ef

0800bb1c <USBD_CDC_ReceivePacket>:
 * @brief  USBD_CDC_ReceivePacket
 *         prepare OUT Endpoint for reception
 * @param  pdev: device instance
 * @retval status
 */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef * pdev) {
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	32b0      	adds	r2, #176	@ 0xb0
 800bb2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb32:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
    /* Get the Endpoints addresses allocated for this class instance */
    CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

    if (pdev->pClassDataCmsit[pdev->classId] == NULL) {
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	32b0      	adds	r2, #176	@ 0xb0
 800bb3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d101      	bne.n	800bb4a <USBD_CDC_ReceivePacket+0x2e>
        return (uint8_t)USBD_FAIL;
 800bb46:	2303      	movs	r3, #3
 800bb48:	e018      	b.n	800bb7c <USBD_CDC_ReceivePacket+0x60>
    }

    if (pdev->dev_speed == USBD_SPEED_HIGH) {
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	7c1b      	ldrb	r3, [r3, #16]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d10a      	bne.n	800bb68 <USBD_CDC_ReceivePacket+0x4c>
        /* Prepare Out endpoint to receive next packet */
        (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer, CDC_DATA_HS_OUT_PACKET_SIZE);
 800bb52:	4b0c      	ldr	r3, [pc, #48]	@ (800bb84 <USBD_CDC_ReceivePacket+0x68>)
 800bb54:	7819      	ldrb	r1, [r3, #0]
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bb5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f004 fbe7 	bl	8010334 <USBD_LL_PrepareReceive>
 800bb66:	e008      	b.n	800bb7a <USBD_CDC_ReceivePacket+0x5e>
    } else {
        /* Prepare Out endpoint to receive next packet */
        (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer, CDC_DATA_FS_OUT_PACKET_SIZE);
 800bb68:	4b06      	ldr	r3, [pc, #24]	@ (800bb84 <USBD_CDC_ReceivePacket+0x68>)
 800bb6a:	7819      	ldrb	r1, [r3, #0]
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bb72:	2340      	movs	r3, #64	@ 0x40
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f004 fbdd 	bl	8010334 <USBD_LL_PrepareReceive>
    }

    return (uint8_t)USBD_OK;
 800bb7a:	2300      	movs	r3, #0
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3710      	adds	r7, #16
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	200000f0 	.word	0x200000f0

0800bb88 <USBD_Init>:
 * @param  pdev: device instance
 * @param  pdesc: Descriptor structure address
 * @param  id: Low level core index
 * @retval None
 */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef * pdev, USBD_DescriptorsTypeDef * pdesc, uint8_t id) {
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b086      	sub	sp, #24
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	4613      	mov	r3, r2
 800bb94:	71fb      	strb	r3, [r7, #7]
    USBD_StatusTypeDef ret;

    /* Check whether the USB Host handle is valid */
    if (pdev == NULL) {
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d101      	bne.n	800bba0 <USBD_Init+0x18>
#if (USBD_DEBUG_LEVEL > 1U)
        USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
        return USBD_FAIL;
 800bb9c:	2303      	movs	r3, #3
 800bb9e:	e01f      	b.n	800bbe0 <USBD_Init+0x58>
        pdev->NumClasses = 0;
        pdev->classId = 0;
    }
#else
    /* Unlink previous class*/
    pdev->pClass[0] = NULL;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2200      	movs	r2, #0
 800bba4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
    pdev->pUserData[0] = NULL;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

    pdev->pConfDesc = NULL;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

    /* Assign USBD Descriptors */
    if (pdesc != NULL) {
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d003      	beq.n	800bbc6 <USBD_Init+0x3e>
        pdev->pDesc = pdesc;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	68ba      	ldr	r2, [r7, #8]
 800bbc2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    }

    /* Set Device initial State */
    pdev->dev_state = USBD_STATE_DEFAULT;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2201      	movs	r2, #1
 800bbca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    pdev->id = id;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	79fa      	ldrb	r2, [r7, #7]
 800bbd2:	701a      	strb	r2, [r3, #0]

    /* Initialize low level driver */
    ret = USBD_LL_Init(pdev);
 800bbd4:	68f8      	ldr	r0, [r7, #12]
 800bbd6:	f004 fa57 	bl	8010088 <USBD_LL_Init>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	75fb      	strb	r3, [r7, #23]

    return ret;
 800bbde:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3718      	adds	r7, #24
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <USBD_RegisterClass>:
 *         Link class driver to Device Core.
 * @param  pDevice : Device Handle
 * @param  pclass: Class handle
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef * pdev, USBD_ClassTypeDef * pclass) {
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	6039      	str	r1, [r7, #0]
    uint16_t len = 0U;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	81fb      	strh	r3, [r7, #14]

    if (pclass == NULL) {
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d101      	bne.n	800bc00 <USBD_RegisterClass+0x18>
#if (USBD_DEBUG_LEVEL > 1U)
        USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
        return USBD_FAIL;
 800bbfc:	2303      	movs	r3, #3
 800bbfe:	e025      	b.n	800bc4c <USBD_RegisterClass+0x64>
    }

    /* link the class to the USB Device handle */
    pdev->pClass[0] = pclass;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	683a      	ldr	r2, [r7, #0]
 800bc04:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
#ifdef USE_USB_HS
    if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL) {
        pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
    }
#else  /* Default USE_USB_FS */
    if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL) {
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	32ae      	adds	r2, #174	@ 0xae
 800bc12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d00f      	beq.n	800bc3c <USBD_RegisterClass+0x54>
        pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	32ae      	adds	r2, #174	@ 0xae
 800bc26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc2c:	f107 020e 	add.w	r2, r7, #14
 800bc30:	4610      	mov	r0, r2
 800bc32:	4798      	blx	r3
 800bc34:	4602      	mov	r2, r0
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
    }
#endif /* USE_USB_FS */

    /* Increment the NumClasses */
    pdev->NumClasses++;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bc42:	1c5a      	adds	r2, r3, #1
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

    return USBD_OK;
 800bc4a:	2300      	movs	r3, #0
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3710      	adds	r7, #16
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <USBD_Start>:
 * @brief  USBD_Start
 *         Start the USB Device Core.
 * @param  pdev: Device Handle
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef * pdev) {
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b082      	sub	sp, #8
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
    pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

    /* Start the low level driver  */
    return USBD_LL_Start(pdev);
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f004 fa5f 	bl	8010120 <USBD_LL_Start>
 800bc62:	4603      	mov	r3, r0
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3708      	adds	r7, #8
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <USBD_RunTestMode>:
 * @brief  USBD_RunTestMode
 *         Launch test mode process
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef * pdev) {
 800bc6c:	b480      	push	{r7}
 800bc6e:	b083      	sub	sp, #12
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
    return ret;
#else
    /* Prevent unused argument compilation warning */
    UNUSED(pdev);

    return USBD_OK;
 800bc74:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	370c      	adds	r7, #12
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr

0800bc82 <USBD_SetClassConfig>:
 * @param  pdev: device instance
 * @param  cfgidx: configuration index
 * @retval status
 */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef * pdev, uint8_t cfgidx) {
 800bc82:	b580      	push	{r7, lr}
 800bc84:	b084      	sub	sp, #16
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
 800bc8a:	460b      	mov	r3, r1
 800bc8c:	70fb      	strb	r3, [r7, #3]
    USBD_StatusTypeDef ret = USBD_OK;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }
#else
    if (pdev->pClass[0] != NULL) {
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d009      	beq.n	800bcb0 <USBD_SetClassConfig+0x2e>
        /* Set configuration and Start the Class */
        ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	78fa      	ldrb	r2, [r7, #3]
 800bca6:	4611      	mov	r1, r2
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	4798      	blx	r3
 800bcac:	4603      	mov	r3, r0
 800bcae:	73fb      	strb	r3, [r7, #15]
    }
#endif /* USE_USBD_COMPOSITE */

    return ret;
 800bcb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3710      	adds	r7, #16
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}

0800bcba <USBD_ClrClassConfig>:
 *         Clear current configuration
 * @param  pdev: device instance
 * @param  cfgidx: configuration index
 * @retval status: USBD_StatusTypeDef
 */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef * pdev, uint8_t cfgidx) {
 800bcba:	b580      	push	{r7, lr}
 800bcbc:	b084      	sub	sp, #16
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	6078      	str	r0, [r7, #4]
 800bcc2:	460b      	mov	r3, r1
 800bcc4:	70fb      	strb	r3, [r7, #3]
    USBD_StatusTypeDef ret = USBD_OK;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	73fb      	strb	r3, [r7, #15]
            }
        }
    }
#else
    /* Clear configuration  and De-initialize the Class process */
    if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U) {
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	78fa      	ldrb	r2, [r7, #3]
 800bcd4:	4611      	mov	r1, r2
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	4798      	blx	r3
 800bcda:	4603      	mov	r3, r0
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d001      	beq.n	800bce4 <USBD_ClrClassConfig+0x2a>
        ret = USBD_FAIL;
 800bce0:	2303      	movs	r3, #3
 800bce2:	73fb      	strb	r3, [r7, #15]
    }
#endif /* USE_USBD_COMPOSITE */

    return ret;
 800bce4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3710      	adds	r7, #16
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}

0800bcee <USBD_LL_SetupStage>:
 * @brief  USBD_LL_SetupStage
 *         Handle the setup stage
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef * pdev, uint8_t * psetup) {
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	b084      	sub	sp, #16
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
 800bcf6:	6039      	str	r1, [r7, #0]
    USBD_StatusTypeDef ret;

    USBD_ParseSetupRequest(&pdev->request, psetup);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bcfe:	6839      	ldr	r1, [r7, #0]
 800bd00:	4618      	mov	r0, r3
 800bd02:	f001 f906 	bl	800cf12 <USBD_ParseSetupRequest>

    pdev->ep0_state = USBD_EP0_SETUP;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2201      	movs	r2, #1
 800bd0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

    pdev->ep0_data_len = pdev->request.wLength;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800bd14:	461a      	mov	r2, r3
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

    switch (pdev->request.bmRequest & 0x1FU) {
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bd22:	f003 031f 	and.w	r3, r3, #31
 800bd26:	2b02      	cmp	r3, #2
 800bd28:	d01a      	beq.n	800bd60 <USBD_LL_SetupStage+0x72>
 800bd2a:	2b02      	cmp	r3, #2
 800bd2c:	d822      	bhi.n	800bd74 <USBD_LL_SetupStage+0x86>
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d002      	beq.n	800bd38 <USBD_LL_SetupStage+0x4a>
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d00a      	beq.n	800bd4c <USBD_LL_SetupStage+0x5e>
 800bd36:	e01d      	b.n	800bd74 <USBD_LL_SetupStage+0x86>
    case USB_REQ_RECIPIENT_DEVICE:
        ret = USBD_StdDevReq(pdev, &pdev->request);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bd3e:	4619      	mov	r1, r3
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f000 fb5d 	bl	800c400 <USBD_StdDevReq>
 800bd46:	4603      	mov	r3, r0
 800bd48:	73fb      	strb	r3, [r7, #15]
        break;
 800bd4a:	e020      	b.n	800bd8e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
        ret = USBD_StdItfReq(pdev, &pdev->request);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bd52:	4619      	mov	r1, r3
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f000 fbc5 	bl	800c4e4 <USBD_StdItfReq>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	73fb      	strb	r3, [r7, #15]
        break;
 800bd5e:	e016      	b.n	800bd8e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
        ret = USBD_StdEPReq(pdev, &pdev->request);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bd66:	4619      	mov	r1, r3
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f000 fc27 	bl	800c5bc <USBD_StdEPReq>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	73fb      	strb	r3, [r7, #15]
        break;
 800bd72:	e00c      	b.n	800bd8e <USBD_LL_SetupStage+0xa0>

    default:
        ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bd7a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bd7e:	b2db      	uxtb	r3, r3
 800bd80:	4619      	mov	r1, r3
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f004 fa2c 	bl	80101e0 <USBD_LL_StallEP>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	73fb      	strb	r3, [r7, #15]
        break;
 800bd8c:	bf00      	nop
    }

    return ret;
 800bd8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3710      	adds	r7, #16
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <USBD_LL_DataOutStage>:
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @param  pdata: data pointer
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef * pdev, uint8_t epnum, uint8_t * pdata) {
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b086      	sub	sp, #24
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	60f8      	str	r0, [r7, #12]
 800bda0:	460b      	mov	r3, r1
 800bda2:	607a      	str	r2, [r7, #4]
 800bda4:	72fb      	strb	r3, [r7, #11]
    USBD_EndpointTypeDef * pep;
    USBD_StatusTypeDef ret = USBD_OK;
 800bda6:	2300      	movs	r3, #0
 800bda8:	75fb      	strb	r3, [r7, #23]
    uint8_t idx;

    if (epnum == 0U) {
 800bdaa:	7afb      	ldrb	r3, [r7, #11]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d16e      	bne.n	800be8e <USBD_LL_DataOutStage+0xf6>
        pep = &pdev->ep_out[0];
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800bdb6:	613b      	str	r3, [r7, #16]

        if (pdev->ep0_state == USBD_EP0_DATA_OUT) {
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bdbe:	2b03      	cmp	r3, #3
 800bdc0:	f040 8098 	bne.w	800bef4 <USBD_LL_DataOutStage+0x15c>
            if (pep->rem_length > pep->maxpacket) {
 800bdc4:	693b      	ldr	r3, [r7, #16]
 800bdc6:	689a      	ldr	r2, [r3, #8]
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	68db      	ldr	r3, [r3, #12]
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d913      	bls.n	800bdf8 <USBD_LL_DataOutStage+0x60>
                pep->rem_length -= pep->maxpacket;
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	689a      	ldr	r2, [r3, #8]
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	68db      	ldr	r3, [r3, #12]
 800bdd8:	1ad2      	subs	r2, r2, r3
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	609a      	str	r2, [r3, #8]

                (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	68da      	ldr	r2, [r3, #12]
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	689b      	ldr	r3, [r3, #8]
 800bde6:	4293      	cmp	r3, r2
 800bde8:	bf28      	it	cs
 800bdea:	4613      	movcs	r3, r2
 800bdec:	461a      	mov	r2, r3
 800bdee:	6879      	ldr	r1, [r7, #4]
 800bdf0:	68f8      	ldr	r0, [r7, #12]
 800bdf2:	f001 f982 	bl	800d0fa <USBD_CtlContinueRx>
 800bdf6:	e07d      	b.n	800bef4 <USBD_LL_DataOutStage+0x15c>
            } else {
                /* Find the class ID relative to the current request */
                switch (pdev->request.bmRequest & 0x1FU) {
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bdfe:	f003 031f 	and.w	r3, r3, #31
 800be02:	2b02      	cmp	r3, #2
 800be04:	d014      	beq.n	800be30 <USBD_LL_DataOutStage+0x98>
 800be06:	2b02      	cmp	r3, #2
 800be08:	d81d      	bhi.n	800be46 <USBD_LL_DataOutStage+0xae>
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d002      	beq.n	800be14 <USBD_LL_DataOutStage+0x7c>
 800be0e:	2b01      	cmp	r3, #1
 800be10:	d003      	beq.n	800be1a <USBD_LL_DataOutStage+0x82>
 800be12:	e018      	b.n	800be46 <USBD_LL_DataOutStage+0xae>
                case USB_REQ_RECIPIENT_DEVICE:
                    /* Device requests must be managed by the first instantiated class
                       (or duplicated by all classes for simplicity) */
                    idx = 0U;
 800be14:	2300      	movs	r3, #0
 800be16:	75bb      	strb	r3, [r7, #22]
                    break;
 800be18:	e018      	b.n	800be4c <USBD_LL_DataOutStage+0xb4>

                case USB_REQ_RECIPIENT_INTERFACE:
                    idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800be20:	b2db      	uxtb	r3, r3
 800be22:	4619      	mov	r1, r3
 800be24:	68f8      	ldr	r0, [r7, #12]
 800be26:	f000 fa5e 	bl	800c2e6 <USBD_CoreFindIF>
 800be2a:	4603      	mov	r3, r0
 800be2c:	75bb      	strb	r3, [r7, #22]
                    break;
 800be2e:	e00d      	b.n	800be4c <USBD_LL_DataOutStage+0xb4>

                case USB_REQ_RECIPIENT_ENDPOINT:
                    idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800be36:	b2db      	uxtb	r3, r3
 800be38:	4619      	mov	r1, r3
 800be3a:	68f8      	ldr	r0, [r7, #12]
 800be3c:	f000 fa60 	bl	800c300 <USBD_CoreFindEP>
 800be40:	4603      	mov	r3, r0
 800be42:	75bb      	strb	r3, [r7, #22]
                    break;
 800be44:	e002      	b.n	800be4c <USBD_LL_DataOutStage+0xb4>

                default:
                    /* Back to the first class in case of doubt */
                    idx = 0U;
 800be46:	2300      	movs	r3, #0
 800be48:	75bb      	strb	r3, [r7, #22]
                    break;
 800be4a:	bf00      	nop
                }

                if (idx < USBD_MAX_SUPPORTED_CLASS) {
 800be4c:	7dbb      	ldrb	r3, [r7, #22]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d119      	bne.n	800be86 <USBD_LL_DataOutStage+0xee>
                    /* Setup the class ID and route the request to the relative class function */
                    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be58:	b2db      	uxtb	r3, r3
 800be5a:	2b03      	cmp	r3, #3
 800be5c:	d113      	bne.n	800be86 <USBD_LL_DataOutStage+0xee>
                        if (pdev->pClass[idx]->EP0_RxReady != NULL) {
 800be5e:	7dba      	ldrb	r2, [r7, #22]
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	32ae      	adds	r2, #174	@ 0xae
 800be64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be68:	691b      	ldr	r3, [r3, #16]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d00b      	beq.n	800be86 <USBD_LL_DataOutStage+0xee>
                            pdev->classId = idx;
 800be6e:	7dba      	ldrb	r2, [r7, #22]
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                            pdev->pClass[idx]->EP0_RxReady(pdev);
 800be76:	7dba      	ldrb	r2, [r7, #22]
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	32ae      	adds	r2, #174	@ 0xae
 800be7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be80:	691b      	ldr	r3, [r3, #16]
 800be82:	68f8      	ldr	r0, [r7, #12]
 800be84:	4798      	blx	r3
                        }
                    }
                }

                (void)USBD_CtlSendStatus(pdev);
 800be86:	68f8      	ldr	r0, [r7, #12]
 800be88:	f001 f948 	bl	800d11c <USBD_CtlSendStatus>
 800be8c:	e032      	b.n	800bef4 <USBD_LL_DataOutStage+0x15c>
      }
#endif
        }
    } else {
        /* Get the class index relative to this interface */
        idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800be8e:	7afb      	ldrb	r3, [r7, #11]
 800be90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be94:	b2db      	uxtb	r3, r3
 800be96:	4619      	mov	r1, r3
 800be98:	68f8      	ldr	r0, [r7, #12]
 800be9a:	f000 fa31 	bl	800c300 <USBD_CoreFindEP>
 800be9e:	4603      	mov	r3, r0
 800bea0:	75bb      	strb	r3, [r7, #22]

        if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 800bea2:	7dbb      	ldrb	r3, [r7, #22]
 800bea4:	2bff      	cmp	r3, #255	@ 0xff
 800bea6:	d025      	beq.n	800bef4 <USBD_LL_DataOutStage+0x15c>
 800bea8:	7dbb      	ldrb	r3, [r7, #22]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d122      	bne.n	800bef4 <USBD_LL_DataOutStage+0x15c>
            /* Call the class data out function to manage the request */
            if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800beb4:	b2db      	uxtb	r3, r3
 800beb6:	2b03      	cmp	r3, #3
 800beb8:	d117      	bne.n	800beea <USBD_LL_DataOutStage+0x152>
                if (pdev->pClass[idx]->DataOut != NULL) {
 800beba:	7dba      	ldrb	r2, [r7, #22]
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	32ae      	adds	r2, #174	@ 0xae
 800bec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bec4:	699b      	ldr	r3, [r3, #24]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d00f      	beq.n	800beea <USBD_LL_DataOutStage+0x152>
                    pdev->classId = idx;
 800beca:	7dba      	ldrb	r2, [r7, #22]
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                    ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bed2:	7dba      	ldrb	r2, [r7, #22]
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	32ae      	adds	r2, #174	@ 0xae
 800bed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bedc:	699b      	ldr	r3, [r3, #24]
 800bede:	7afa      	ldrb	r2, [r7, #11]
 800bee0:	4611      	mov	r1, r2
 800bee2:	68f8      	ldr	r0, [r7, #12]
 800bee4:	4798      	blx	r3
 800bee6:	4603      	mov	r3, r0
 800bee8:	75fb      	strb	r3, [r7, #23]
                }
            }
            if (ret != USBD_OK) {
 800beea:	7dfb      	ldrb	r3, [r7, #23]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d001      	beq.n	800bef4 <USBD_LL_DataOutStage+0x15c>
                return ret;
 800bef0:	7dfb      	ldrb	r3, [r7, #23]
 800bef2:	e000      	b.n	800bef6 <USBD_LL_DataOutStage+0x15e>
            }
        }
    }

    return USBD_OK;
 800bef4:	2300      	movs	r3, #0
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3718      	adds	r7, #24
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}

0800befe <USBD_LL_DataInStage>:
 *         Handle data in stage
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef * pdev, uint8_t epnum, uint8_t * pdata) {
 800befe:	b580      	push	{r7, lr}
 800bf00:	b086      	sub	sp, #24
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	60f8      	str	r0, [r7, #12]
 800bf06:	460b      	mov	r3, r1
 800bf08:	607a      	str	r2, [r7, #4]
 800bf0a:	72fb      	strb	r3, [r7, #11]
    USBD_EndpointTypeDef * pep;
    USBD_StatusTypeDef ret;
    uint8_t idx;

    if (epnum == 0U) {
 800bf0c:	7afb      	ldrb	r3, [r7, #11]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d16f      	bne.n	800bff2 <USBD_LL_DataInStage+0xf4>
        pep = &pdev->ep_in[0];
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	3314      	adds	r3, #20
 800bf16:	613b      	str	r3, [r7, #16]

        if (pdev->ep0_state == USBD_EP0_DATA_IN) {
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bf1e:	2b02      	cmp	r3, #2
 800bf20:	d15a      	bne.n	800bfd8 <USBD_LL_DataInStage+0xda>
            if (pep->rem_length > pep->maxpacket) {
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	689a      	ldr	r2, [r3, #8]
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	68db      	ldr	r3, [r3, #12]
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d914      	bls.n	800bf58 <USBD_LL_DataInStage+0x5a>
                pep->rem_length -= pep->maxpacket;
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	689a      	ldr	r2, [r3, #8]
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	68db      	ldr	r3, [r3, #12]
 800bf36:	1ad2      	subs	r2, r2, r3
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	609a      	str	r2, [r3, #8]

                (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	689b      	ldr	r3, [r3, #8]
 800bf40:	461a      	mov	r2, r3
 800bf42:	6879      	ldr	r1, [r7, #4]
 800bf44:	68f8      	ldr	r0, [r7, #12]
 800bf46:	f001 f8aa 	bl	800d09e <USBD_CtlContinueSendData>

                /* Prepare endpoint for premature end of transfer */
                (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	2100      	movs	r1, #0
 800bf50:	68f8      	ldr	r0, [r7, #12]
 800bf52:	f004 f9ef 	bl	8010334 <USBD_LL_PrepareReceive>
 800bf56:	e03f      	b.n	800bfd8 <USBD_LL_DataInStage+0xda>
            } else {
                /* last packet is MPS multiple, so send ZLP packet */
                if ((pep->maxpacket == pep->rem_length) && (pep->total_length >= pep->maxpacket) && (pep->total_length < pdev->ep0_data_len)) {
 800bf58:	693b      	ldr	r3, [r7, #16]
 800bf5a:	68da      	ldr	r2, [r3, #12]
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	689b      	ldr	r3, [r3, #8]
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d11c      	bne.n	800bf9e <USBD_LL_DataInStage+0xa0>
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	685a      	ldr	r2, [r3, #4]
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	68db      	ldr	r3, [r3, #12]
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d316      	bcc.n	800bf9e <USBD_LL_DataInStage+0xa0>
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	685a      	ldr	r2, [r3, #4]
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	d20f      	bcs.n	800bf9e <USBD_LL_DataInStage+0xa0>
                    (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bf7e:	2200      	movs	r2, #0
 800bf80:	2100      	movs	r1, #0
 800bf82:	68f8      	ldr	r0, [r7, #12]
 800bf84:	f001 f88b 	bl	800d09e <USBD_CtlContinueSendData>
                    pdev->ep0_data_len = 0U;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

                    /* Prepare endpoint for premature end of transfer */
                    (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf90:	2300      	movs	r3, #0
 800bf92:	2200      	movs	r2, #0
 800bf94:	2100      	movs	r1, #0
 800bf96:	68f8      	ldr	r0, [r7, #12]
 800bf98:	f004 f9cc 	bl	8010334 <USBD_LL_PrepareReceive>
 800bf9c:	e01c      	b.n	800bfd8 <USBD_LL_DataInStage+0xda>
                } else {
                    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfa4:	b2db      	uxtb	r3, r3
 800bfa6:	2b03      	cmp	r3, #3
 800bfa8:	d10f      	bne.n	800bfca <USBD_LL_DataInStage+0xcc>
                        if (pdev->pClass[0]->EP0_TxSent != NULL) {
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfb0:	68db      	ldr	r3, [r3, #12]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d009      	beq.n	800bfca <USBD_LL_DataInStage+0xcc>
                            pdev->classId = 0U;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                            pdev->pClass[0]->EP0_TxSent(pdev);
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfc4:	68db      	ldr	r3, [r3, #12]
 800bfc6:	68f8      	ldr	r0, [r7, #12]
 800bfc8:	4798      	blx	r3
                        }
                    }
                    (void)USBD_LL_StallEP(pdev, 0x80U);
 800bfca:	2180      	movs	r1, #128	@ 0x80
 800bfcc:	68f8      	ldr	r0, [r7, #12]
 800bfce:	f004 f907 	bl	80101e0 <USBD_LL_StallEP>
                    (void)USBD_CtlReceiveStatus(pdev);
 800bfd2:	68f8      	ldr	r0, [r7, #12]
 800bfd4:	f001 f8b5 	bl	800d142 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
        }

        if (pdev->dev_test_mode != 0U) {
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d03a      	beq.n	800c058 <USBD_LL_DataInStage+0x15a>
            (void)USBD_RunTestMode(pdev);
 800bfe2:	68f8      	ldr	r0, [r7, #12]
 800bfe4:	f7ff fe42 	bl	800bc6c <USBD_RunTestMode>
            pdev->dev_test_mode = 0U;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2200      	movs	r2, #0
 800bfec:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bff0:	e032      	b.n	800c058 <USBD_LL_DataInStage+0x15a>
        }
    } else {
        /* Get the class index relative to this interface */
        idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bff2:	7afb      	ldrb	r3, [r7, #11]
 800bff4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bff8:	b2db      	uxtb	r3, r3
 800bffa:	4619      	mov	r1, r3
 800bffc:	68f8      	ldr	r0, [r7, #12]
 800bffe:	f000 f97f 	bl	800c300 <USBD_CoreFindEP>
 800c002:	4603      	mov	r3, r0
 800c004:	75fb      	strb	r3, [r7, #23]

        if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 800c006:	7dfb      	ldrb	r3, [r7, #23]
 800c008:	2bff      	cmp	r3, #255	@ 0xff
 800c00a:	d025      	beq.n	800c058 <USBD_LL_DataInStage+0x15a>
 800c00c:	7dfb      	ldrb	r3, [r7, #23]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d122      	bne.n	800c058 <USBD_LL_DataInStage+0x15a>
            /* Call the class data out function to manage the request */
            if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c018:	b2db      	uxtb	r3, r3
 800c01a:	2b03      	cmp	r3, #3
 800c01c:	d11c      	bne.n	800c058 <USBD_LL_DataInStage+0x15a>
                if (pdev->pClass[idx]->DataIn != NULL) {
 800c01e:	7dfa      	ldrb	r2, [r7, #23]
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	32ae      	adds	r2, #174	@ 0xae
 800c024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c028:	695b      	ldr	r3, [r3, #20]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d014      	beq.n	800c058 <USBD_LL_DataInStage+0x15a>
                    pdev->classId = idx;
 800c02e:	7dfa      	ldrb	r2, [r7, #23]
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                    ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c036:	7dfa      	ldrb	r2, [r7, #23]
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	32ae      	adds	r2, #174	@ 0xae
 800c03c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c040:	695b      	ldr	r3, [r3, #20]
 800c042:	7afa      	ldrb	r2, [r7, #11]
 800c044:	4611      	mov	r1, r2
 800c046:	68f8      	ldr	r0, [r7, #12]
 800c048:	4798      	blx	r3
 800c04a:	4603      	mov	r3, r0
 800c04c:	75bb      	strb	r3, [r7, #22]

                    if (ret != USBD_OK) {
 800c04e:	7dbb      	ldrb	r3, [r7, #22]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d001      	beq.n	800c058 <USBD_LL_DataInStage+0x15a>
                        return ret;
 800c054:	7dbb      	ldrb	r3, [r7, #22]
 800c056:	e000      	b.n	800c05a <USBD_LL_DataInStage+0x15c>
                }
            }
        }
    }

    return USBD_OK;
 800c058:	2300      	movs	r3, #0
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3718      	adds	r7, #24
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}

0800c062 <USBD_LL_Reset>:
 *         Handle Reset event
 * @param  pdev: device instance
 * @retval status
 */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef * pdev) {
 800c062:	b580      	push	{r7, lr}
 800c064:	b084      	sub	sp, #16
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
    USBD_StatusTypeDef ret = USBD_OK;
 800c06a:	2300      	movs	r3, #0
 800c06c:	73fb      	strb	r3, [r7, #15]

    /* Upon Reset call user call back */
    pdev->dev_state = USBD_STATE_DEFAULT;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2201      	movs	r2, #1
 800c072:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    pdev->ep0_state = USBD_EP0_IDLE;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2200      	movs	r2, #0
 800c07a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
    pdev->dev_config = 0U;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2200      	movs	r2, #0
 800c082:	605a      	str	r2, [r3, #4]
    pdev->dev_remote_wakeup = 0U;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2200      	movs	r2, #0
 800c088:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    pdev->dev_test_mode = 0U;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2200      	movs	r2, #0
 800c090:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
            }
        }
    }
#else

    if (pdev->pClass[0] != NULL) {
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d014      	beq.n	800c0c8 <USBD_LL_Reset+0x66>
        if (pdev->pClass[0]->DeInit != NULL) {
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d00e      	beq.n	800c0c8 <USBD_LL_Reset+0x66>
            if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK) {
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0b0:	685b      	ldr	r3, [r3, #4]
 800c0b2:	687a      	ldr	r2, [r7, #4]
 800c0b4:	6852      	ldr	r2, [r2, #4]
 800c0b6:	b2d2      	uxtb	r2, r2
 800c0b8:	4611      	mov	r1, r2
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	4798      	blx	r3
 800c0be:	4603      	mov	r3, r0
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d001      	beq.n	800c0c8 <USBD_LL_Reset+0x66>
                ret = USBD_FAIL;
 800c0c4:	2303      	movs	r3, #3
 800c0c6:	73fb      	strb	r3, [r7, #15]
        }
    }
#endif /* USE_USBD_COMPOSITE */

    /* Open EP0 OUT */
    (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c0c8:	2340      	movs	r3, #64	@ 0x40
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	2100      	movs	r1, #0
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f004 f841 	bl	8010156 <USBD_LL_OpenEP>
    pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

    pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2240      	movs	r2, #64	@ 0x40
 800c0e0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

    /* Open EP0 IN */
    (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c0e4:	2340      	movs	r3, #64	@ 0x40
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	2180      	movs	r1, #128	@ 0x80
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f004 f833 	bl	8010156 <USBD_LL_OpenEP>
    pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	849a      	strh	r2, [r3, #36]	@ 0x24

    pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2240      	movs	r2, #64	@ 0x40
 800c0fa:	621a      	str	r2, [r3, #32]

    return ret;
 800c0fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3710      	adds	r7, #16
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}

0800c106 <USBD_LL_SetSpeed>:
 * @brief  USBD_LL_SetSpeed
 *         Handle Reset event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef * pdev, USBD_SpeedTypeDef speed) {
 800c106:	b480      	push	{r7}
 800c108:	b083      	sub	sp, #12
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
 800c10e:	460b      	mov	r3, r1
 800c110:	70fb      	strb	r3, [r7, #3]
    pdev->dev_speed = speed;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	78fa      	ldrb	r2, [r7, #3]
 800c116:	741a      	strb	r2, [r3, #16]

    return USBD_OK;
 800c118:	2300      	movs	r3, #0
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	370c      	adds	r7, #12
 800c11e:	46bd      	mov	sp, r7
 800c120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c124:	4770      	bx	lr

0800c126 <USBD_LL_Suspend>:
 *         Handle Suspend event
 * @param  pdev: device instance
 * @retval status
 */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef * pdev) {
 800c126:	b480      	push	{r7}
 800c128:	b083      	sub	sp, #12
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	6078      	str	r0, [r7, #4]
    pdev->dev_old_state = pdev->dev_state;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c134:	b2da      	uxtb	r2, r3
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
    pdev->dev_state = USBD_STATE_SUSPENDED;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2204      	movs	r2, #4
 800c140:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

    return USBD_OK;
 800c144:	2300      	movs	r3, #0
}
 800c146:	4618      	mov	r0, r3
 800c148:	370c      	adds	r7, #12
 800c14a:	46bd      	mov	sp, r7
 800c14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c150:	4770      	bx	lr

0800c152 <USBD_LL_Resume>:
 *         Handle Resume event
 * @param  pdev: device instance
 * @retval status
 */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef * pdev) {
 800c152:	b480      	push	{r7}
 800c154:	b083      	sub	sp, #12
 800c156:	af00      	add	r7, sp, #0
 800c158:	6078      	str	r0, [r7, #4]
    if (pdev->dev_state == USBD_STATE_SUSPENDED) {
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c160:	b2db      	uxtb	r3, r3
 800c162:	2b04      	cmp	r3, #4
 800c164:	d106      	bne.n	800c174 <USBD_LL_Resume+0x22>
        pdev->dev_state = pdev->dev_old_state;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c16c:	b2da      	uxtb	r2, r3
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    }

    return USBD_OK;
 800c174:	2300      	movs	r3, #0
}
 800c176:	4618      	mov	r0, r3
 800c178:	370c      	adds	r7, #12
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr

0800c182 <USBD_LL_SOF>:
 *         Handle SOF event
 * @param  pdev: device instance
 * @retval status
 */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef * pdev) {
 800c182:	b580      	push	{r7, lr}
 800c184:	b082      	sub	sp, #8
 800c186:	af00      	add	r7, sp, #0
 800c188:	6078      	str	r0, [r7, #4]
    /* The SOF event can be distributed for all classes that support it */
    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c190:	b2db      	uxtb	r3, r3
 800c192:	2b03      	cmp	r3, #3
 800c194:	d110      	bne.n	800c1b8 <USBD_LL_SOF+0x36>
                    }
                }
            }
        }
#else
        if (pdev->pClass[0] != NULL) {
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d00b      	beq.n	800c1b8 <USBD_LL_SOF+0x36>
            if (pdev->pClass[0]->SOF != NULL) {
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1a6:	69db      	ldr	r3, [r3, #28]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d005      	beq.n	800c1b8 <USBD_LL_SOF+0x36>
                (void)pdev->pClass[0]->SOF(pdev);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1b2:	69db      	ldr	r3, [r3, #28]
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	4798      	blx	r3
            }
        }
#endif /* USE_USBD_COMPOSITE */
    }

    return USBD_OK;
 800c1b8:	2300      	movs	r3, #0
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3708      	adds	r7, #8
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <USBD_LL_IsoINIncomplete>:
 * @brief  USBD_LL_IsoINIncomplete
 *         Handle iso in incomplete event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef * pdev, uint8_t epnum) {
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b082      	sub	sp, #8
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
 800c1ca:	460b      	mov	r3, r1
 800c1cc:	70fb      	strb	r3, [r7, #3]
    if (pdev->pClass[pdev->classId] == NULL) {
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	32ae      	adds	r2, #174	@ 0xae
 800c1d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d101      	bne.n	800c1e4 <USBD_LL_IsoINIncomplete+0x22>
        return USBD_FAIL;
 800c1e0:	2303      	movs	r3, #3
 800c1e2:	e01c      	b.n	800c21e <USBD_LL_IsoINIncomplete+0x5c>
    }

    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1ea:	b2db      	uxtb	r3, r3
 800c1ec:	2b03      	cmp	r3, #3
 800c1ee:	d115      	bne.n	800c21c <USBD_LL_IsoINIncomplete+0x5a>
        if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL) {
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	32ae      	adds	r2, #174	@ 0xae
 800c1fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1fe:	6a1b      	ldr	r3, [r3, #32]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d00b      	beq.n	800c21c <USBD_LL_IsoINIncomplete+0x5a>
            (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	32ae      	adds	r2, #174	@ 0xae
 800c20e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c212:	6a1b      	ldr	r3, [r3, #32]
 800c214:	78fa      	ldrb	r2, [r7, #3]
 800c216:	4611      	mov	r1, r2
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	4798      	blx	r3
        }
    }

    return USBD_OK;
 800c21c:	2300      	movs	r3, #0
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3708      	adds	r7, #8
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}

0800c226 <USBD_LL_IsoOUTIncomplete>:
 * @brief  USBD_LL_IsoOUTIncomplete
 *         Handle iso out incomplete event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef * pdev, uint8_t epnum) {
 800c226:	b580      	push	{r7, lr}
 800c228:	b082      	sub	sp, #8
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	6078      	str	r0, [r7, #4]
 800c22e:	460b      	mov	r3, r1
 800c230:	70fb      	strb	r3, [r7, #3]
    if (pdev->pClass[pdev->classId] == NULL) {
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	32ae      	adds	r2, #174	@ 0xae
 800c23c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d101      	bne.n	800c248 <USBD_LL_IsoOUTIncomplete+0x22>
        return USBD_FAIL;
 800c244:	2303      	movs	r3, #3
 800c246:	e01c      	b.n	800c282 <USBD_LL_IsoOUTIncomplete+0x5c>
    }

    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c24e:	b2db      	uxtb	r3, r3
 800c250:	2b03      	cmp	r3, #3
 800c252:	d115      	bne.n	800c280 <USBD_LL_IsoOUTIncomplete+0x5a>
        if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL) {
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	32ae      	adds	r2, #174	@ 0xae
 800c25e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c264:	2b00      	cmp	r3, #0
 800c266:	d00b      	beq.n	800c280 <USBD_LL_IsoOUTIncomplete+0x5a>
            (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	32ae      	adds	r2, #174	@ 0xae
 800c272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c278:	78fa      	ldrb	r2, [r7, #3]
 800c27a:	4611      	mov	r1, r2
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	4798      	blx	r3
        }
    }

    return USBD_OK;
 800c280:	2300      	movs	r3, #0
}
 800c282:	4618      	mov	r0, r3
 800c284:	3708      	adds	r7, #8
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}

0800c28a <USBD_LL_DevConnected>:
 * @brief  USBD_LL_DevConnected
 *         Handle device connection event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef * pdev) {
 800c28a:	b480      	push	{r7}
 800c28c:	b083      	sub	sp, #12
 800c28e:	af00      	add	r7, sp, #0
 800c290:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument compilation warning */
    UNUSED(pdev);

    return USBD_OK;
 800c292:	2300      	movs	r3, #0
}
 800c294:	4618      	mov	r0, r3
 800c296:	370c      	adds	r7, #12
 800c298:	46bd      	mov	sp, r7
 800c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29e:	4770      	bx	lr

0800c2a0 <USBD_LL_DevDisconnected>:
 * @brief  USBD_LL_DevDisconnected
 *         Handle device disconnection event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef * pdev) {
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b084      	sub	sp, #16
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
    USBD_StatusTypeDef ret = USBD_OK;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	73fb      	strb	r3, [r7, #15]

    /* Free Class Resources */
    pdev->dev_state = USBD_STATE_DEFAULT;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2201      	movs	r2, #1
 800c2b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
                }
            }
        }
    }
#else
    if (pdev->pClass[0] != NULL) {
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d00e      	beq.n	800c2dc <USBD_LL_DevDisconnected+0x3c>
        if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U) {
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2c4:	685b      	ldr	r3, [r3, #4]
 800c2c6:	687a      	ldr	r2, [r7, #4]
 800c2c8:	6852      	ldr	r2, [r2, #4]
 800c2ca:	b2d2      	uxtb	r2, r2
 800c2cc:	4611      	mov	r1, r2
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	4798      	blx	r3
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d001      	beq.n	800c2dc <USBD_LL_DevDisconnected+0x3c>
            ret = USBD_FAIL;
 800c2d8:	2303      	movs	r3, #3
 800c2da:	73fb      	strb	r3, [r7, #15]
        }
    }
#endif /* USE_USBD_COMPOSITE */

    return ret;
 800c2dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3710      	adds	r7, #16
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}

0800c2e6 <USBD_CoreFindIF>:
 *         return the class index relative to the selected interface
 * @param  pdev: device instance
 * @param  index : selected interface number
 * @retval index of the class using the selected interface number. OxFF if no class found.
 */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef * pdev, uint8_t index) {
 800c2e6:	b480      	push	{r7}
 800c2e8:	b083      	sub	sp, #12
 800c2ea:	af00      	add	r7, sp, #0
 800c2ec:	6078      	str	r0, [r7, #4]
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	70fb      	strb	r3, [r7, #3]
    return 0xFFU;
#else
    UNUSED(pdev);
    UNUSED(index);

    return 0x00U;
 800c2f2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	370c      	adds	r7, #12
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr

0800c300 <USBD_CoreFindEP>:
 *         return the class index relative to the selected endpoint
 * @param  pdev: device instance
 * @param  index : selected endpoint number
 * @retval index of the class using the selected endpoint number. 0xFF if no class found.
 */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef * pdev, uint8_t index) {
 800c300:	b480      	push	{r7}
 800c302:	b083      	sub	sp, #12
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	460b      	mov	r3, r1
 800c30a:	70fb      	strb	r3, [r7, #3]
    return 0xFFU;
#else
    UNUSED(pdev);
    UNUSED(index);

    return 0x00U;
 800c30c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c30e:	4618      	mov	r0, r3
 800c310:	370c      	adds	r7, #12
 800c312:	46bd      	mov	sp, r7
 800c314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c318:	4770      	bx	lr

0800c31a <USBD_GetEpDesc>:
 * @param  pdev: device instance
 * @param  pConfDesc:  pointer to Bos descriptor
 * @param  EpAddr:  endpoint address
 * @retval pointer to video endpoint descriptor
 */
void * USBD_GetEpDesc(uint8_t * pConfDesc, uint8_t EpAddr) {
 800c31a:	b580      	push	{r7, lr}
 800c31c:	b086      	sub	sp, #24
 800c31e:	af00      	add	r7, sp, #0
 800c320:	6078      	str	r0, [r7, #4]
 800c322:	460b      	mov	r3, r1
 800c324:	70fb      	strb	r3, [r7, #3]
    USBD_DescHeaderTypeDef * pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	617b      	str	r3, [r7, #20]
    USBD_ConfigDescTypeDef * desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	60fb      	str	r3, [r7, #12]
    USBD_EpDescTypeDef * pEpDesc = NULL;
 800c32e:	2300      	movs	r3, #0
 800c330:	613b      	str	r3, [r7, #16]
    uint16_t ptr;

    if (desc->wTotalLength > desc->bLength) {
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	885b      	ldrh	r3, [r3, #2]
 800c336:	b29b      	uxth	r3, r3
 800c338:	68fa      	ldr	r2, [r7, #12]
 800c33a:	7812      	ldrb	r2, [r2, #0]
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d91f      	bls.n	800c380 <USBD_GetEpDesc+0x66>
        ptr = desc->bLength;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	781b      	ldrb	r3, [r3, #0]
 800c344:	817b      	strh	r3, [r7, #10]

        while (ptr < desc->wTotalLength) {
 800c346:	e013      	b.n	800c370 <USBD_GetEpDesc+0x56>
            pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c348:	f107 030a 	add.w	r3, r7, #10
 800c34c:	4619      	mov	r1, r3
 800c34e:	6978      	ldr	r0, [r7, #20]
 800c350:	f000 f81b 	bl	800c38a <USBD_GetNextDesc>
 800c354:	6178      	str	r0, [r7, #20]

            if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT) {
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	785b      	ldrb	r3, [r3, #1]
 800c35a:	2b05      	cmp	r3, #5
 800c35c:	d108      	bne.n	800c370 <USBD_GetEpDesc+0x56>
                pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	613b      	str	r3, [r7, #16]

                if (pEpDesc->bEndpointAddress == EpAddr) {
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	789b      	ldrb	r3, [r3, #2]
 800c366:	78fa      	ldrb	r2, [r7, #3]
 800c368:	429a      	cmp	r2, r3
 800c36a:	d008      	beq.n	800c37e <USBD_GetEpDesc+0x64>
                    break;
                } else {
                    pEpDesc = NULL;
 800c36c:	2300      	movs	r3, #0
 800c36e:	613b      	str	r3, [r7, #16]
        while (ptr < desc->wTotalLength) {
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	885b      	ldrh	r3, [r3, #2]
 800c374:	b29a      	uxth	r2, r3
 800c376:	897b      	ldrh	r3, [r7, #10]
 800c378:	429a      	cmp	r2, r3
 800c37a:	d8e5      	bhi.n	800c348 <USBD_GetEpDesc+0x2e>
 800c37c:	e000      	b.n	800c380 <USBD_GetEpDesc+0x66>
                    break;
 800c37e:	bf00      	nop
                }
            }
        }
    }

    return (void *)pEpDesc;
 800c380:	693b      	ldr	r3, [r7, #16]
}
 800c382:	4618      	mov	r0, r3
 800c384:	3718      	adds	r7, #24
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}

0800c38a <USBD_GetNextDesc>:
 *         This function return the next descriptor header
 * @param  buf: Buffer where the descriptor is available
 * @param  ptr: data pointer inside the descriptor
 * @retval next header
 */
USBD_DescHeaderTypeDef * USBD_GetNextDesc(uint8_t * pbuf, uint16_t * ptr) {
 800c38a:	b480      	push	{r7}
 800c38c:	b085      	sub	sp, #20
 800c38e:	af00      	add	r7, sp, #0
 800c390:	6078      	str	r0, [r7, #4]
 800c392:	6039      	str	r1, [r7, #0]
    USBD_DescHeaderTypeDef * pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	60fb      	str	r3, [r7, #12]

    *ptr += pnext->bLength;
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	881b      	ldrh	r3, [r3, #0]
 800c39c:	68fa      	ldr	r2, [r7, #12]
 800c39e:	7812      	ldrb	r2, [r2, #0]
 800c3a0:	4413      	add	r3, r2
 800c3a2:	b29a      	uxth	r2, r3
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	801a      	strh	r2, [r3, #0]
    pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	4413      	add	r3, r2
 800c3b2:	60fb      	str	r3, [r7, #12]

    return (pnext);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3714      	adds	r7, #20
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c0:	4770      	bx	lr

0800c3c2 <SWAPBYTE>:
 */

/** @defgroup USBD_DEF_Exported_Macros
 * @{
 */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t * addr) {
 800c3c2:	b480      	push	{r7}
 800c3c4:	b087      	sub	sp, #28
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	6078      	str	r0, [r7, #4]
    uint16_t _SwapVal, _Byte1, _Byte2;
    uint8_t * _pbuff = addr;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	617b      	str	r3, [r7, #20]

    _Byte1 = *(uint8_t *)_pbuff;
 800c3ce:	697b      	ldr	r3, [r7, #20]
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	827b      	strh	r3, [r7, #18]
    _pbuff++;
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	617b      	str	r3, [r7, #20]
    _Byte2 = *(uint8_t *)_pbuff;
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	781b      	ldrb	r3, [r3, #0]
 800c3de:	823b      	strh	r3, [r7, #16]

    _SwapVal = (_Byte2 << 8) | _Byte1;
 800c3e0:	8a3b      	ldrh	r3, [r7, #16]
 800c3e2:	021b      	lsls	r3, r3, #8
 800c3e4:	b21a      	sxth	r2, r3
 800c3e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	b21b      	sxth	r3, r3
 800c3ee:	81fb      	strh	r3, [r7, #14]

    return _SwapVal;
 800c3f0:	89fb      	ldrh	r3, [r7, #14]
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	371c      	adds	r7, #28
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fc:	4770      	bx	lr
	...

0800c400 <USBD_StdDevReq>:
 *         Handle standard usb device requests
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800c400:	b580      	push	{r7, lr}
 800c402:	b084      	sub	sp, #16
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
 800c408:	6039      	str	r1, [r7, #0]
    USBD_StatusTypeDef ret = USBD_OK;
 800c40a:	2300      	movs	r3, #0
 800c40c:	73fb      	strb	r3, [r7, #15]

    switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c416:	2b40      	cmp	r3, #64	@ 0x40
 800c418:	d005      	beq.n	800c426 <USBD_StdDevReq+0x26>
 800c41a:	2b40      	cmp	r3, #64	@ 0x40
 800c41c:	d857      	bhi.n	800c4ce <USBD_StdDevReq+0xce>
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d00f      	beq.n	800c442 <USBD_StdDevReq+0x42>
 800c422:	2b20      	cmp	r3, #32
 800c424:	d153      	bne.n	800c4ce <USBD_StdDevReq+0xce>
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
        ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	32ae      	adds	r2, #174	@ 0xae
 800c430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c434:	689b      	ldr	r3, [r3, #8]
 800c436:	6839      	ldr	r1, [r7, #0]
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	4798      	blx	r3
 800c43c:	4603      	mov	r3, r0
 800c43e:	73fb      	strb	r3, [r7, #15]
        break;
 800c440:	e04a      	b.n	800c4d8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
        switch (req->bRequest) {
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	785b      	ldrb	r3, [r3, #1]
 800c446:	2b09      	cmp	r3, #9
 800c448:	d83b      	bhi.n	800c4c2 <USBD_StdDevReq+0xc2>
 800c44a:	a201      	add	r2, pc, #4	@ (adr r2, 800c450 <USBD_StdDevReq+0x50>)
 800c44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c450:	0800c4a5 	.word	0x0800c4a5
 800c454:	0800c4b9 	.word	0x0800c4b9
 800c458:	0800c4c3 	.word	0x0800c4c3
 800c45c:	0800c4af 	.word	0x0800c4af
 800c460:	0800c4c3 	.word	0x0800c4c3
 800c464:	0800c483 	.word	0x0800c483
 800c468:	0800c479 	.word	0x0800c479
 800c46c:	0800c4c3 	.word	0x0800c4c3
 800c470:	0800c49b 	.word	0x0800c49b
 800c474:	0800c48d 	.word	0x0800c48d
        case USB_REQ_GET_DESCRIPTOR:
            USBD_GetDescriptor(pdev, req);
 800c478:	6839      	ldr	r1, [r7, #0]
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f000 fa3c 	bl	800c8f8 <USBD_GetDescriptor>
            break;
 800c480:	e024      	b.n	800c4cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
            USBD_SetAddress(pdev, req);
 800c482:	6839      	ldr	r1, [r7, #0]
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f000 fba1 	bl	800cbcc <USBD_SetAddress>
            break;
 800c48a:	e01f      	b.n	800c4cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
            ret = USBD_SetConfig(pdev, req);
 800c48c:	6839      	ldr	r1, [r7, #0]
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f000 fbe0 	bl	800cc54 <USBD_SetConfig>
 800c494:	4603      	mov	r3, r0
 800c496:	73fb      	strb	r3, [r7, #15]
            break;
 800c498:	e018      	b.n	800c4cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
            USBD_GetConfig(pdev, req);
 800c49a:	6839      	ldr	r1, [r7, #0]
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f000 fc83 	bl	800cda8 <USBD_GetConfig>
            break;
 800c4a2:	e013      	b.n	800c4cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
            USBD_GetStatus(pdev, req);
 800c4a4:	6839      	ldr	r1, [r7, #0]
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f000 fcb4 	bl	800ce14 <USBD_GetStatus>
            break;
 800c4ac:	e00e      	b.n	800c4cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
            USBD_SetFeature(pdev, req);
 800c4ae:	6839      	ldr	r1, [r7, #0]
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f000 fce3 	bl	800ce7c <USBD_SetFeature>
            break;
 800c4b6:	e009      	b.n	800c4cc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
            USBD_ClrFeature(pdev, req);
 800c4b8:	6839      	ldr	r1, [r7, #0]
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f000 fd07 	bl	800cece <USBD_ClrFeature>
            break;
 800c4c0:	e004      	b.n	800c4cc <USBD_StdDevReq+0xcc>

        default:
            USBD_CtlError(pdev, req);
 800c4c2:	6839      	ldr	r1, [r7, #0]
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f000 fd5e 	bl	800cf86 <USBD_CtlError>
            break;
 800c4ca:	bf00      	nop
        }
        break;
 800c4cc:	e004      	b.n	800c4d8 <USBD_StdDevReq+0xd8>

    default:
        USBD_CtlError(pdev, req);
 800c4ce:	6839      	ldr	r1, [r7, #0]
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f000 fd58 	bl	800cf86 <USBD_CtlError>
        break;
 800c4d6:	bf00      	nop
    }

    return ret;
 800c4d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3710      	adds	r7, #16
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
 800c4e2:	bf00      	nop

0800c4e4 <USBD_StdItfReq>:
 *         Handle standard usb interface requests
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b084      	sub	sp, #16
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	6039      	str	r1, [r7, #0]
    USBD_StatusTypeDef ret = USBD_OK;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	73fb      	strb	r3, [r7, #15]
    uint8_t idx;

    switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	781b      	ldrb	r3, [r3, #0]
 800c4f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c4fa:	2b40      	cmp	r3, #64	@ 0x40
 800c4fc:	d005      	beq.n	800c50a <USBD_StdItfReq+0x26>
 800c4fe:	2b40      	cmp	r3, #64	@ 0x40
 800c500:	d852      	bhi.n	800c5a8 <USBD_StdItfReq+0xc4>
 800c502:	2b00      	cmp	r3, #0
 800c504:	d001      	beq.n	800c50a <USBD_StdItfReq+0x26>
 800c506:	2b20      	cmp	r3, #32
 800c508:	d14e      	bne.n	800c5a8 <USBD_StdItfReq+0xc4>
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
        switch (pdev->dev_state) {
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c510:	b2db      	uxtb	r3, r3
 800c512:	3b01      	subs	r3, #1
 800c514:	2b02      	cmp	r3, #2
 800c516:	d840      	bhi.n	800c59a <USBD_StdItfReq+0xb6>
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

            if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) {
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	889b      	ldrh	r3, [r3, #4]
 800c51c:	b2db      	uxtb	r3, r3
 800c51e:	2b01      	cmp	r3, #1
 800c520:	d836      	bhi.n	800c590 <USBD_StdItfReq+0xac>
                /* Get the class index relative to this interface */
                idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	889b      	ldrh	r3, [r3, #4]
 800c526:	b2db      	uxtb	r3, r3
 800c528:	4619      	mov	r1, r3
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f7ff fedb 	bl	800c2e6 <USBD_CoreFindIF>
 800c530:	4603      	mov	r3, r0
 800c532:	73bb      	strb	r3, [r7, #14]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 800c534:	7bbb      	ldrb	r3, [r7, #14]
 800c536:	2bff      	cmp	r3, #255	@ 0xff
 800c538:	d01d      	beq.n	800c576 <USBD_StdItfReq+0x92>
 800c53a:	7bbb      	ldrb	r3, [r7, #14]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d11a      	bne.n	800c576 <USBD_StdItfReq+0x92>
                    /* Call the class data out function to manage the request */
                    if (pdev->pClass[idx]->Setup != NULL) {
 800c540:	7bba      	ldrb	r2, [r7, #14]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	32ae      	adds	r2, #174	@ 0xae
 800c546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c54a:	689b      	ldr	r3, [r3, #8]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d00f      	beq.n	800c570 <USBD_StdItfReq+0x8c>
                        pdev->classId = idx;
 800c550:	7bba      	ldrb	r2, [r7, #14]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                        ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c558:	7bba      	ldrb	r2, [r7, #14]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	32ae      	adds	r2, #174	@ 0xae
 800c55e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c562:	689b      	ldr	r3, [r3, #8]
 800c564:	6839      	ldr	r1, [r7, #0]
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	4798      	blx	r3
 800c56a:	4603      	mov	r3, r0
 800c56c:	73fb      	strb	r3, [r7, #15]
                    if (pdev->pClass[idx]->Setup != NULL) {
 800c56e:	e004      	b.n	800c57a <USBD_StdItfReq+0x96>
                    } else {
                        /* should never reach this condition */
                        ret = USBD_FAIL;
 800c570:	2303      	movs	r3, #3
 800c572:	73fb      	strb	r3, [r7, #15]
                    if (pdev->pClass[idx]->Setup != NULL) {
 800c574:	e001      	b.n	800c57a <USBD_StdItfReq+0x96>
                    }
                } else {
                    /* No relative interface found */
                    ret = USBD_FAIL;
 800c576:	2303      	movs	r3, #3
 800c578:	73fb      	strb	r3, [r7, #15]
                }

                if ((req->wLength == 0U) && (ret == USBD_OK)) {
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	88db      	ldrh	r3, [r3, #6]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d110      	bne.n	800c5a4 <USBD_StdItfReq+0xc0>
 800c582:	7bfb      	ldrb	r3, [r7, #15]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d10d      	bne.n	800c5a4 <USBD_StdItfReq+0xc0>
                    (void)USBD_CtlSendStatus(pdev);
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f000 fdc7 	bl	800d11c <USBD_CtlSendStatus>
                }
            } else {
                USBD_CtlError(pdev, req);
            }
            break;
 800c58e:	e009      	b.n	800c5a4 <USBD_StdItfReq+0xc0>
                USBD_CtlError(pdev, req);
 800c590:	6839      	ldr	r1, [r7, #0]
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f000 fcf7 	bl	800cf86 <USBD_CtlError>
            break;
 800c598:	e004      	b.n	800c5a4 <USBD_StdItfReq+0xc0>

        default:
            USBD_CtlError(pdev, req);
 800c59a:	6839      	ldr	r1, [r7, #0]
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f000 fcf2 	bl	800cf86 <USBD_CtlError>
            break;
 800c5a2:	e000      	b.n	800c5a6 <USBD_StdItfReq+0xc2>
            break;
 800c5a4:	bf00      	nop
        }
        break;
 800c5a6:	e004      	b.n	800c5b2 <USBD_StdItfReq+0xce>

    default:
        USBD_CtlError(pdev, req);
 800c5a8:	6839      	ldr	r1, [r7, #0]
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f000 fceb 	bl	800cf86 <USBD_CtlError>
        break;
 800c5b0:	bf00      	nop
    }

    return ret;
 800c5b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3710      	adds	r7, #16
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}

0800c5bc <USBD_StdEPReq>:
 *         Handle standard usb endpoint requests
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b084      	sub	sp, #16
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	6039      	str	r1, [r7, #0]
    USBD_EndpointTypeDef * pep;
    uint8_t ep_addr;
    uint8_t idx;
    USBD_StatusTypeDef ret = USBD_OK;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	73fb      	strb	r3, [r7, #15]

    ep_addr = LOBYTE(req->wIndex);
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	889b      	ldrh	r3, [r3, #4]
 800c5ce:	73bb      	strb	r3, [r7, #14]

    switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c5d8:	2b40      	cmp	r3, #64	@ 0x40
 800c5da:	d007      	beq.n	800c5ec <USBD_StdEPReq+0x30>
 800c5dc:	2b40      	cmp	r3, #64	@ 0x40
 800c5de:	f200 817f 	bhi.w	800c8e0 <USBD_StdEPReq+0x324>
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d02a      	beq.n	800c63c <USBD_StdEPReq+0x80>
 800c5e6:	2b20      	cmp	r3, #32
 800c5e8:	f040 817a 	bne.w	800c8e0 <USBD_StdEPReq+0x324>
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
        /* Get the class index relative to this endpoint */
        idx = USBD_CoreFindEP(pdev, ep_addr);
 800c5ec:	7bbb      	ldrb	r3, [r7, #14]
 800c5ee:	4619      	mov	r1, r3
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f7ff fe85 	bl	800c300 <USBD_CoreFindEP>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	737b      	strb	r3, [r7, #13]
        if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 800c5fa:	7b7b      	ldrb	r3, [r7, #13]
 800c5fc:	2bff      	cmp	r3, #255	@ 0xff
 800c5fe:	f000 8174 	beq.w	800c8ea <USBD_StdEPReq+0x32e>
 800c602:	7b7b      	ldrb	r3, [r7, #13]
 800c604:	2b00      	cmp	r3, #0
 800c606:	f040 8170 	bne.w	800c8ea <USBD_StdEPReq+0x32e>
            pdev->classId = idx;
 800c60a:	7b7a      	ldrb	r2, [r7, #13]
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
            /* Call the class data out function to manage the request */
            if (pdev->pClass[idx]->Setup != NULL) {
 800c612:	7b7a      	ldrb	r2, [r7, #13]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	32ae      	adds	r2, #174	@ 0xae
 800c618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c61c:	689b      	ldr	r3, [r3, #8]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	f000 8163 	beq.w	800c8ea <USBD_StdEPReq+0x32e>
                ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c624:	7b7a      	ldrb	r2, [r7, #13]
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	32ae      	adds	r2, #174	@ 0xae
 800c62a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c62e:	689b      	ldr	r3, [r3, #8]
 800c630:	6839      	ldr	r1, [r7, #0]
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	4798      	blx	r3
 800c636:	4603      	mov	r3, r0
 800c638:	73fb      	strb	r3, [r7, #15]
            }
        }
        break;
 800c63a:	e156      	b.n	800c8ea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
        switch (req->bRequest) {
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	785b      	ldrb	r3, [r3, #1]
 800c640:	2b03      	cmp	r3, #3
 800c642:	d008      	beq.n	800c656 <USBD_StdEPReq+0x9a>
 800c644:	2b03      	cmp	r3, #3
 800c646:	f300 8145 	bgt.w	800c8d4 <USBD_StdEPReq+0x318>
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	f000 809b 	beq.w	800c786 <USBD_StdEPReq+0x1ca>
 800c650:	2b01      	cmp	r3, #1
 800c652:	d03c      	beq.n	800c6ce <USBD_StdEPReq+0x112>
 800c654:	e13e      	b.n	800c8d4 <USBD_StdEPReq+0x318>
        case USB_REQ_SET_FEATURE:
            switch (pdev->dev_state) {
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c65c:	b2db      	uxtb	r3, r3
 800c65e:	2b02      	cmp	r3, #2
 800c660:	d002      	beq.n	800c668 <USBD_StdEPReq+0xac>
 800c662:	2b03      	cmp	r3, #3
 800c664:	d016      	beq.n	800c694 <USBD_StdEPReq+0xd8>
 800c666:	e02c      	b.n	800c6c2 <USBD_StdEPReq+0x106>
            case USBD_STATE_ADDRESSED:
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U)) {
 800c668:	7bbb      	ldrb	r3, [r7, #14]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d00d      	beq.n	800c68a <USBD_StdEPReq+0xce>
 800c66e:	7bbb      	ldrb	r3, [r7, #14]
 800c670:	2b80      	cmp	r3, #128	@ 0x80
 800c672:	d00a      	beq.n	800c68a <USBD_StdEPReq+0xce>
                    (void)USBD_LL_StallEP(pdev, ep_addr);
 800c674:	7bbb      	ldrb	r3, [r7, #14]
 800c676:	4619      	mov	r1, r3
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f003 fdb1 	bl	80101e0 <USBD_LL_StallEP>
                    (void)USBD_LL_StallEP(pdev, 0x80U);
 800c67e:	2180      	movs	r1, #128	@ 0x80
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f003 fdad 	bl	80101e0 <USBD_LL_StallEP>
 800c686:	bf00      	nop
                } else {
                    USBD_CtlError(pdev, req);
                }
                break;
 800c688:	e020      	b.n	800c6cc <USBD_StdEPReq+0x110>
                    USBD_CtlError(pdev, req);
 800c68a:	6839      	ldr	r1, [r7, #0]
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f000 fc7a 	bl	800cf86 <USBD_CtlError>
                break;
 800c692:	e01b      	b.n	800c6cc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
                if (req->wValue == USB_FEATURE_EP_HALT) {
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	885b      	ldrh	r3, [r3, #2]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d10e      	bne.n	800c6ba <USBD_StdEPReq+0xfe>
                    if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U)) {
 800c69c:	7bbb      	ldrb	r3, [r7, #14]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d00b      	beq.n	800c6ba <USBD_StdEPReq+0xfe>
 800c6a2:	7bbb      	ldrb	r3, [r7, #14]
 800c6a4:	2b80      	cmp	r3, #128	@ 0x80
 800c6a6:	d008      	beq.n	800c6ba <USBD_StdEPReq+0xfe>
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	88db      	ldrh	r3, [r3, #6]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d104      	bne.n	800c6ba <USBD_StdEPReq+0xfe>
                        (void)USBD_LL_StallEP(pdev, ep_addr);
 800c6b0:	7bbb      	ldrb	r3, [r7, #14]
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f003 fd93 	bl	80101e0 <USBD_LL_StallEP>
                    }
                }
                (void)USBD_CtlSendStatus(pdev);
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f000 fd2e 	bl	800d11c <USBD_CtlSendStatus>

                break;
 800c6c0:	e004      	b.n	800c6cc <USBD_StdEPReq+0x110>

            default:
                USBD_CtlError(pdev, req);
 800c6c2:	6839      	ldr	r1, [r7, #0]
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f000 fc5e 	bl	800cf86 <USBD_CtlError>
                break;
 800c6ca:	bf00      	nop
            }
            break;
 800c6cc:	e107      	b.n	800c8de <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

            switch (pdev->dev_state) {
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6d4:	b2db      	uxtb	r3, r3
 800c6d6:	2b02      	cmp	r3, #2
 800c6d8:	d002      	beq.n	800c6e0 <USBD_StdEPReq+0x124>
 800c6da:	2b03      	cmp	r3, #3
 800c6dc:	d016      	beq.n	800c70c <USBD_StdEPReq+0x150>
 800c6de:	e04b      	b.n	800c778 <USBD_StdEPReq+0x1bc>
            case USBD_STATE_ADDRESSED:
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U)) {
 800c6e0:	7bbb      	ldrb	r3, [r7, #14]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d00d      	beq.n	800c702 <USBD_StdEPReq+0x146>
 800c6e6:	7bbb      	ldrb	r3, [r7, #14]
 800c6e8:	2b80      	cmp	r3, #128	@ 0x80
 800c6ea:	d00a      	beq.n	800c702 <USBD_StdEPReq+0x146>
                    (void)USBD_LL_StallEP(pdev, ep_addr);
 800c6ec:	7bbb      	ldrb	r3, [r7, #14]
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f003 fd75 	bl	80101e0 <USBD_LL_StallEP>
                    (void)USBD_LL_StallEP(pdev, 0x80U);
 800c6f6:	2180      	movs	r1, #128	@ 0x80
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f003 fd71 	bl	80101e0 <USBD_LL_StallEP>
 800c6fe:	bf00      	nop
                } else {
                    USBD_CtlError(pdev, req);
                }
                break;
 800c700:	e040      	b.n	800c784 <USBD_StdEPReq+0x1c8>
                    USBD_CtlError(pdev, req);
 800c702:	6839      	ldr	r1, [r7, #0]
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f000 fc3e 	bl	800cf86 <USBD_CtlError>
                break;
 800c70a:	e03b      	b.n	800c784 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
                if (req->wValue == USB_FEATURE_EP_HALT) {
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	885b      	ldrh	r3, [r3, #2]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d136      	bne.n	800c782 <USBD_StdEPReq+0x1c6>
                    if ((ep_addr & 0x7FU) != 0x00U) {
 800c714:	7bbb      	ldrb	r3, [r7, #14]
 800c716:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d004      	beq.n	800c728 <USBD_StdEPReq+0x16c>
                        (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c71e:	7bbb      	ldrb	r3, [r7, #14]
 800c720:	4619      	mov	r1, r3
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f003 fd7b 	bl	801021e <USBD_LL_ClearStallEP>
                    }
                    (void)USBD_CtlSendStatus(pdev);
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f000 fcf7 	bl	800d11c <USBD_CtlSendStatus>

                    /* Get the class index relative to this interface */
                    idx = USBD_CoreFindEP(pdev, ep_addr);
 800c72e:	7bbb      	ldrb	r3, [r7, #14]
 800c730:	4619      	mov	r1, r3
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f7ff fde4 	bl	800c300 <USBD_CoreFindEP>
 800c738:	4603      	mov	r3, r0
 800c73a:	737b      	strb	r3, [r7, #13]
                    if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 800c73c:	7b7b      	ldrb	r3, [r7, #13]
 800c73e:	2bff      	cmp	r3, #255	@ 0xff
 800c740:	d01f      	beq.n	800c782 <USBD_StdEPReq+0x1c6>
 800c742:	7b7b      	ldrb	r3, [r7, #13]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d11c      	bne.n	800c782 <USBD_StdEPReq+0x1c6>
                        pdev->classId = idx;
 800c748:	7b7a      	ldrb	r2, [r7, #13]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                        /* Call the class data out function to manage the request */
                        if (pdev->pClass[idx]->Setup != NULL) {
 800c750:	7b7a      	ldrb	r2, [r7, #13]
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	32ae      	adds	r2, #174	@ 0xae
 800c756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c75a:	689b      	ldr	r3, [r3, #8]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d010      	beq.n	800c782 <USBD_StdEPReq+0x1c6>
                            ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c760:	7b7a      	ldrb	r2, [r7, #13]
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	32ae      	adds	r2, #174	@ 0xae
 800c766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c76a:	689b      	ldr	r3, [r3, #8]
 800c76c:	6839      	ldr	r1, [r7, #0]
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	4798      	blx	r3
 800c772:	4603      	mov	r3, r0
 800c774:	73fb      	strb	r3, [r7, #15]
                        }
                    }
                }
                break;
 800c776:	e004      	b.n	800c782 <USBD_StdEPReq+0x1c6>

            default:
                USBD_CtlError(pdev, req);
 800c778:	6839      	ldr	r1, [r7, #0]
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 fc03 	bl	800cf86 <USBD_CtlError>
                break;
 800c780:	e000      	b.n	800c784 <USBD_StdEPReq+0x1c8>
                break;
 800c782:	bf00      	nop
            }
            break;
 800c784:	e0ab      	b.n	800c8de <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
            switch (pdev->dev_state) {
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c78c:	b2db      	uxtb	r3, r3
 800c78e:	2b02      	cmp	r3, #2
 800c790:	d002      	beq.n	800c798 <USBD_StdEPReq+0x1dc>
 800c792:	2b03      	cmp	r3, #3
 800c794:	d032      	beq.n	800c7fc <USBD_StdEPReq+0x240>
 800c796:	e097      	b.n	800c8c8 <USBD_StdEPReq+0x30c>
            case USBD_STATE_ADDRESSED:
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U)) {
 800c798:	7bbb      	ldrb	r3, [r7, #14]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d007      	beq.n	800c7ae <USBD_StdEPReq+0x1f2>
 800c79e:	7bbb      	ldrb	r3, [r7, #14]
 800c7a0:	2b80      	cmp	r3, #128	@ 0x80
 800c7a2:	d004      	beq.n	800c7ae <USBD_StdEPReq+0x1f2>
                    USBD_CtlError(pdev, req);
 800c7a4:	6839      	ldr	r1, [r7, #0]
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f000 fbed 	bl	800cf86 <USBD_CtlError>
                    break;
 800c7ac:	e091      	b.n	800c8d2 <USBD_StdEPReq+0x316>
                }
                pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : &pdev->ep_out[ep_addr & 0x7FU];
 800c7ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	da0b      	bge.n	800c7ce <USBD_StdEPReq+0x212>
 800c7b6:	7bbb      	ldrb	r3, [r7, #14]
 800c7b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c7bc:	4613      	mov	r3, r2
 800c7be:	009b      	lsls	r3, r3, #2
 800c7c0:	4413      	add	r3, r2
 800c7c2:	009b      	lsls	r3, r3, #2
 800c7c4:	3310      	adds	r3, #16
 800c7c6:	687a      	ldr	r2, [r7, #4]
 800c7c8:	4413      	add	r3, r2
 800c7ca:	3304      	adds	r3, #4
 800c7cc:	e00b      	b.n	800c7e6 <USBD_StdEPReq+0x22a>
 800c7ce:	7bbb      	ldrb	r3, [r7, #14]
 800c7d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c7d4:	4613      	mov	r3, r2
 800c7d6:	009b      	lsls	r3, r3, #2
 800c7d8:	4413      	add	r3, r2
 800c7da:	009b      	lsls	r3, r3, #2
 800c7dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c7e0:	687a      	ldr	r2, [r7, #4]
 800c7e2:	4413      	add	r3, r2
 800c7e4:	3304      	adds	r3, #4
 800c7e6:	60bb      	str	r3, [r7, #8]

                pep->status = 0x0000U;
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	601a      	str	r2, [r3, #0]

                (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	2202      	movs	r2, #2
 800c7f2:	4619      	mov	r1, r3
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f000 fc37 	bl	800d068 <USBD_CtlSendData>
                break;
 800c7fa:	e06a      	b.n	800c8d2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
                if ((ep_addr & 0x80U) == 0x80U) {
 800c7fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c800:	2b00      	cmp	r3, #0
 800c802:	da11      	bge.n	800c828 <USBD_StdEPReq+0x26c>
                    if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U) {
 800c804:	7bbb      	ldrb	r3, [r7, #14]
 800c806:	f003 020f 	and.w	r2, r3, #15
 800c80a:	6879      	ldr	r1, [r7, #4]
 800c80c:	4613      	mov	r3, r2
 800c80e:	009b      	lsls	r3, r3, #2
 800c810:	4413      	add	r3, r2
 800c812:	009b      	lsls	r3, r3, #2
 800c814:	440b      	add	r3, r1
 800c816:	3324      	adds	r3, #36	@ 0x24
 800c818:	881b      	ldrh	r3, [r3, #0]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d117      	bne.n	800c84e <USBD_StdEPReq+0x292>
                        USBD_CtlError(pdev, req);
 800c81e:	6839      	ldr	r1, [r7, #0]
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f000 fbb0 	bl	800cf86 <USBD_CtlError>
                        break;
 800c826:	e054      	b.n	800c8d2 <USBD_StdEPReq+0x316>
                    }
                } else {
                    if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U) {
 800c828:	7bbb      	ldrb	r3, [r7, #14]
 800c82a:	f003 020f 	and.w	r2, r3, #15
 800c82e:	6879      	ldr	r1, [r7, #4]
 800c830:	4613      	mov	r3, r2
 800c832:	009b      	lsls	r3, r3, #2
 800c834:	4413      	add	r3, r2
 800c836:	009b      	lsls	r3, r3, #2
 800c838:	440b      	add	r3, r1
 800c83a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c83e:	881b      	ldrh	r3, [r3, #0]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d104      	bne.n	800c84e <USBD_StdEPReq+0x292>
                        USBD_CtlError(pdev, req);
 800c844:	6839      	ldr	r1, [r7, #0]
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f000 fb9d 	bl	800cf86 <USBD_CtlError>
                        break;
 800c84c:	e041      	b.n	800c8d2 <USBD_StdEPReq+0x316>
                    }
                }

                pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : &pdev->ep_out[ep_addr & 0x7FU];
 800c84e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c852:	2b00      	cmp	r3, #0
 800c854:	da0b      	bge.n	800c86e <USBD_StdEPReq+0x2b2>
 800c856:	7bbb      	ldrb	r3, [r7, #14]
 800c858:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c85c:	4613      	mov	r3, r2
 800c85e:	009b      	lsls	r3, r3, #2
 800c860:	4413      	add	r3, r2
 800c862:	009b      	lsls	r3, r3, #2
 800c864:	3310      	adds	r3, #16
 800c866:	687a      	ldr	r2, [r7, #4]
 800c868:	4413      	add	r3, r2
 800c86a:	3304      	adds	r3, #4
 800c86c:	e00b      	b.n	800c886 <USBD_StdEPReq+0x2ca>
 800c86e:	7bbb      	ldrb	r3, [r7, #14]
 800c870:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c874:	4613      	mov	r3, r2
 800c876:	009b      	lsls	r3, r3, #2
 800c878:	4413      	add	r3, r2
 800c87a:	009b      	lsls	r3, r3, #2
 800c87c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c880:	687a      	ldr	r2, [r7, #4]
 800c882:	4413      	add	r3, r2
 800c884:	3304      	adds	r3, #4
 800c886:	60bb      	str	r3, [r7, #8]

                if ((ep_addr == 0x00U) || (ep_addr == 0x80U)) {
 800c888:	7bbb      	ldrb	r3, [r7, #14]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d002      	beq.n	800c894 <USBD_StdEPReq+0x2d8>
 800c88e:	7bbb      	ldrb	r3, [r7, #14]
 800c890:	2b80      	cmp	r3, #128	@ 0x80
 800c892:	d103      	bne.n	800c89c <USBD_StdEPReq+0x2e0>
                    pep->status = 0x0000U;
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	2200      	movs	r2, #0
 800c898:	601a      	str	r2, [r3, #0]
 800c89a:	e00e      	b.n	800c8ba <USBD_StdEPReq+0x2fe>
                } else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U) {
 800c89c:	7bbb      	ldrb	r3, [r7, #14]
 800c89e:	4619      	mov	r1, r3
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f003 fcdb 	bl	801025c <USBD_LL_IsStallEP>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d003      	beq.n	800c8b4 <USBD_StdEPReq+0x2f8>
                    pep->status = 0x0001U;
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	2201      	movs	r2, #1
 800c8b0:	601a      	str	r2, [r3, #0]
 800c8b2:	e002      	b.n	800c8ba <USBD_StdEPReq+0x2fe>
                } else {
                    pep->status = 0x0000U;
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	601a      	str	r2, [r3, #0]
                }

                (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	2202      	movs	r2, #2
 800c8be:	4619      	mov	r1, r3
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f000 fbd1 	bl	800d068 <USBD_CtlSendData>
                break;
 800c8c6:	e004      	b.n	800c8d2 <USBD_StdEPReq+0x316>

            default:
                USBD_CtlError(pdev, req);
 800c8c8:	6839      	ldr	r1, [r7, #0]
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f000 fb5b 	bl	800cf86 <USBD_CtlError>
                break;
 800c8d0:	bf00      	nop
            }
            break;
 800c8d2:	e004      	b.n	800c8de <USBD_StdEPReq+0x322>

        default:
            USBD_CtlError(pdev, req);
 800c8d4:	6839      	ldr	r1, [r7, #0]
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f000 fb55 	bl	800cf86 <USBD_CtlError>
            break;
 800c8dc:	bf00      	nop
        }
        break;
 800c8de:	e005      	b.n	800c8ec <USBD_StdEPReq+0x330>

    default:
        USBD_CtlError(pdev, req);
 800c8e0:	6839      	ldr	r1, [r7, #0]
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f000 fb4f 	bl	800cf86 <USBD_CtlError>
        break;
 800c8e8:	e000      	b.n	800c8ec <USBD_StdEPReq+0x330>
        break;
 800c8ea:	bf00      	nop
    }

    return ret;
 800c8ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3710      	adds	r7, #16
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}
	...

0800c8f8 <USBD_GetDescriptor>:
 *         Handle Get Descriptor requests
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_GetDescriptor(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b084      	sub	sp, #16
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	6039      	str	r1, [r7, #0]
    uint16_t len = 0U;
 800c902:	2300      	movs	r3, #0
 800c904:	813b      	strh	r3, [r7, #8]
    uint8_t * pbuf = NULL;
 800c906:	2300      	movs	r3, #0
 800c908:	60fb      	str	r3, [r7, #12]
    uint8_t err = 0U;
 800c90a:	2300      	movs	r3, #0
 800c90c:	72fb      	strb	r3, [r7, #11]

    switch (req->wValue >> 8) {
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	885b      	ldrh	r3, [r3, #2]
 800c912:	0a1b      	lsrs	r3, r3, #8
 800c914:	b29b      	uxth	r3, r3
 800c916:	3b01      	subs	r3, #1
 800c918:	2b06      	cmp	r3, #6
 800c91a:	f200 8128 	bhi.w	800cb6e <USBD_GetDescriptor+0x276>
 800c91e:	a201      	add	r2, pc, #4	@ (adr r2, 800c924 <USBD_GetDescriptor+0x2c>)
 800c920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c924:	0800c941 	.word	0x0800c941
 800c928:	0800c959 	.word	0x0800c959
 800c92c:	0800c999 	.word	0x0800c999
 800c930:	0800cb6f 	.word	0x0800cb6f
 800c934:	0800cb6f 	.word	0x0800cb6f
 800c938:	0800cb0f 	.word	0x0800cb0f
 800c93c:	0800cb3b 	.word	0x0800cb3b
            err++;
        }
        break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
        pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	687a      	ldr	r2, [r7, #4]
 800c94a:	7c12      	ldrb	r2, [r2, #16]
 800c94c:	f107 0108 	add.w	r1, r7, #8
 800c950:	4610      	mov	r0, r2
 800c952:	4798      	blx	r3
 800c954:	60f8      	str	r0, [r7, #12]
        break;
 800c956:	e112      	b.n	800cb7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
        if (pdev->dev_speed == USBD_SPEED_HIGH) {
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	7c1b      	ldrb	r3, [r3, #16]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d10d      	bne.n	800c97c <USBD_GetDescriptor+0x84>
            if ((uint8_t)(pdev->NumClasses) > 0U) {
                pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
            } else
#endif /* USE_USBD_COMPOSITE */
            {
                pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c968:	f107 0208 	add.w	r2, r7, #8
 800c96c:	4610      	mov	r0, r2
 800c96e:	4798      	blx	r3
 800c970:	60f8      	str	r0, [r7, #12]
            }
            pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	3301      	adds	r3, #1
 800c976:	2202      	movs	r2, #2
 800c978:	701a      	strb	r2, [r3, #0]
            {
                pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
            }
            pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
        }
        break;
 800c97a:	e100      	b.n	800cb7e <USBD_GetDescriptor+0x286>
                pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c984:	f107 0208 	add.w	r2, r7, #8
 800c988:	4610      	mov	r0, r2
 800c98a:	4798      	blx	r3
 800c98c:	60f8      	str	r0, [r7, #12]
            pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	3301      	adds	r3, #1
 800c992:	2202      	movs	r2, #2
 800c994:	701a      	strb	r2, [r3, #0]
        break;
 800c996:	e0f2      	b.n	800cb7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
        switch ((uint8_t)(req->wValue)) {
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	885b      	ldrh	r3, [r3, #2]
 800c99c:	b2db      	uxtb	r3, r3
 800c99e:	2b05      	cmp	r3, #5
 800c9a0:	f200 80ac 	bhi.w	800cafc <USBD_GetDescriptor+0x204>
 800c9a4:	a201      	add	r2, pc, #4	@ (adr r2, 800c9ac <USBD_GetDescriptor+0xb4>)
 800c9a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9aa:	bf00      	nop
 800c9ac:	0800c9c5 	.word	0x0800c9c5
 800c9b0:	0800c9f9 	.word	0x0800c9f9
 800c9b4:	0800ca2d 	.word	0x0800ca2d
 800c9b8:	0800ca61 	.word	0x0800ca61
 800c9bc:	0800ca95 	.word	0x0800ca95
 800c9c0:	0800cac9 	.word	0x0800cac9
        case USBD_IDX_LANGID_STR:
            if (pdev->pDesc->GetLangIDStrDescriptor != NULL) {
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9ca:	685b      	ldr	r3, [r3, #4]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d00b      	beq.n	800c9e8 <USBD_GetDescriptor+0xf0>
                pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	7c12      	ldrb	r2, [r2, #16]
 800c9dc:	f107 0108 	add.w	r1, r7, #8
 800c9e0:	4610      	mov	r0, r2
 800c9e2:	4798      	blx	r3
 800c9e4:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 800c9e6:	e091      	b.n	800cb0c <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 800c9e8:	6839      	ldr	r1, [r7, #0]
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f000 facb 	bl	800cf86 <USBD_CtlError>
                err++;
 800c9f0:	7afb      	ldrb	r3, [r7, #11]
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	72fb      	strb	r3, [r7, #11]
            break;
 800c9f6:	e089      	b.n	800cb0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
            if (pdev->pDesc->GetManufacturerStrDescriptor != NULL) {
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9fe:	689b      	ldr	r3, [r3, #8]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d00b      	beq.n	800ca1c <USBD_GetDescriptor+0x124>
                pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca0a:	689b      	ldr	r3, [r3, #8]
 800ca0c:	687a      	ldr	r2, [r7, #4]
 800ca0e:	7c12      	ldrb	r2, [r2, #16]
 800ca10:	f107 0108 	add.w	r1, r7, #8
 800ca14:	4610      	mov	r0, r2
 800ca16:	4798      	blx	r3
 800ca18:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 800ca1a:	e077      	b.n	800cb0c <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 800ca1c:	6839      	ldr	r1, [r7, #0]
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 fab1 	bl	800cf86 <USBD_CtlError>
                err++;
 800ca24:	7afb      	ldrb	r3, [r7, #11]
 800ca26:	3301      	adds	r3, #1
 800ca28:	72fb      	strb	r3, [r7, #11]
            break;
 800ca2a:	e06f      	b.n	800cb0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
            if (pdev->pDesc->GetProductStrDescriptor != NULL) {
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca32:	68db      	ldr	r3, [r3, #12]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d00b      	beq.n	800ca50 <USBD_GetDescriptor+0x158>
                pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca3e:	68db      	ldr	r3, [r3, #12]
 800ca40:	687a      	ldr	r2, [r7, #4]
 800ca42:	7c12      	ldrb	r2, [r2, #16]
 800ca44:	f107 0108 	add.w	r1, r7, #8
 800ca48:	4610      	mov	r0, r2
 800ca4a:	4798      	blx	r3
 800ca4c:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 800ca4e:	e05d      	b.n	800cb0c <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 800ca50:	6839      	ldr	r1, [r7, #0]
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f000 fa97 	bl	800cf86 <USBD_CtlError>
                err++;
 800ca58:	7afb      	ldrb	r3, [r7, #11]
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	72fb      	strb	r3, [r7, #11]
            break;
 800ca5e:	e055      	b.n	800cb0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
            if (pdev->pDesc->GetSerialStrDescriptor != NULL) {
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca66:	691b      	ldr	r3, [r3, #16]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d00b      	beq.n	800ca84 <USBD_GetDescriptor+0x18c>
                pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca72:	691b      	ldr	r3, [r3, #16]
 800ca74:	687a      	ldr	r2, [r7, #4]
 800ca76:	7c12      	ldrb	r2, [r2, #16]
 800ca78:	f107 0108 	add.w	r1, r7, #8
 800ca7c:	4610      	mov	r0, r2
 800ca7e:	4798      	blx	r3
 800ca80:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 800ca82:	e043      	b.n	800cb0c <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 800ca84:	6839      	ldr	r1, [r7, #0]
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f000 fa7d 	bl	800cf86 <USBD_CtlError>
                err++;
 800ca8c:	7afb      	ldrb	r3, [r7, #11]
 800ca8e:	3301      	adds	r3, #1
 800ca90:	72fb      	strb	r3, [r7, #11]
            break;
 800ca92:	e03b      	b.n	800cb0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
            if (pdev->pDesc->GetConfigurationStrDescriptor != NULL) {
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca9a:	695b      	ldr	r3, [r3, #20]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d00b      	beq.n	800cab8 <USBD_GetDescriptor+0x1c0>
                pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800caa6:	695b      	ldr	r3, [r3, #20]
 800caa8:	687a      	ldr	r2, [r7, #4]
 800caaa:	7c12      	ldrb	r2, [r2, #16]
 800caac:	f107 0108 	add.w	r1, r7, #8
 800cab0:	4610      	mov	r0, r2
 800cab2:	4798      	blx	r3
 800cab4:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 800cab6:	e029      	b.n	800cb0c <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 800cab8:	6839      	ldr	r1, [r7, #0]
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f000 fa63 	bl	800cf86 <USBD_CtlError>
                err++;
 800cac0:	7afb      	ldrb	r3, [r7, #11]
 800cac2:	3301      	adds	r3, #1
 800cac4:	72fb      	strb	r3, [r7, #11]
            break;
 800cac6:	e021      	b.n	800cb0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
            if (pdev->pDesc->GetInterfaceStrDescriptor != NULL) {
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cace:	699b      	ldr	r3, [r3, #24]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d00b      	beq.n	800caec <USBD_GetDescriptor+0x1f4>
                pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cada:	699b      	ldr	r3, [r3, #24]
 800cadc:	687a      	ldr	r2, [r7, #4]
 800cade:	7c12      	ldrb	r2, [r2, #16]
 800cae0:	f107 0108 	add.w	r1, r7, #8
 800cae4:	4610      	mov	r0, r2
 800cae6:	4798      	blx	r3
 800cae8:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 800caea:	e00f      	b.n	800cb0c <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 800caec:	6839      	ldr	r1, [r7, #0]
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f000 fa49 	bl	800cf86 <USBD_CtlError>
                err++;
 800caf4:	7afb      	ldrb	r3, [r7, #11]
 800caf6:	3301      	adds	r3, #1
 800caf8:	72fb      	strb	r3, [r7, #11]
            break;
 800cafa:	e007      	b.n	800cb0c <USBD_GetDescriptor+0x214>
                err++;
            }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
            USBD_CtlError(pdev, req);
 800cafc:	6839      	ldr	r1, [r7, #0]
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f000 fa41 	bl	800cf86 <USBD_CtlError>
            err++;
 800cb04:	7afb      	ldrb	r3, [r7, #11]
 800cb06:	3301      	adds	r3, #1
 800cb08:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
            break;
 800cb0a:	bf00      	nop
        }
        break;
 800cb0c:	e037      	b.n	800cb7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
        if (pdev->dev_speed == USBD_SPEED_HIGH) {
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	7c1b      	ldrb	r3, [r3, #16]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d109      	bne.n	800cb2a <USBD_GetDescriptor+0x232>
            if ((uint8_t)(pdev->NumClasses) > 0U) {
                pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
            } else
#endif /* USE_USBD_COMPOSITE */
            {
                pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb1e:	f107 0208 	add.w	r2, r7, #8
 800cb22:	4610      	mov	r0, r2
 800cb24:	4798      	blx	r3
 800cb26:	60f8      	str	r0, [r7, #12]
            }
        } else {
            USBD_CtlError(pdev, req);
            err++;
        }
        break;
 800cb28:	e029      	b.n	800cb7e <USBD_GetDescriptor+0x286>
            USBD_CtlError(pdev, req);
 800cb2a:	6839      	ldr	r1, [r7, #0]
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f000 fa2a 	bl	800cf86 <USBD_CtlError>
            err++;
 800cb32:	7afb      	ldrb	r3, [r7, #11]
 800cb34:	3301      	adds	r3, #1
 800cb36:	72fb      	strb	r3, [r7, #11]
        break;
 800cb38:	e021      	b.n	800cb7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
        if (pdev->dev_speed == USBD_SPEED_HIGH) {
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	7c1b      	ldrb	r3, [r3, #16]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d10d      	bne.n	800cb5e <USBD_GetDescriptor+0x266>
            if ((uint8_t)(pdev->NumClasses) > 0U) {
                pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
            } else
#endif /* USE_USBD_COMPOSITE */
            {
                pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb4a:	f107 0208 	add.w	r2, r7, #8
 800cb4e:	4610      	mov	r0, r2
 800cb50:	4798      	blx	r3
 800cb52:	60f8      	str	r0, [r7, #12]
            }
            pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	3301      	adds	r3, #1
 800cb58:	2207      	movs	r2, #7
 800cb5a:	701a      	strb	r2, [r3, #0]
        } else {
            USBD_CtlError(pdev, req);
            err++;
        }
        break;
 800cb5c:	e00f      	b.n	800cb7e <USBD_GetDescriptor+0x286>
            USBD_CtlError(pdev, req);
 800cb5e:	6839      	ldr	r1, [r7, #0]
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f000 fa10 	bl	800cf86 <USBD_CtlError>
            err++;
 800cb66:	7afb      	ldrb	r3, [r7, #11]
 800cb68:	3301      	adds	r3, #1
 800cb6a:	72fb      	strb	r3, [r7, #11]
        break;
 800cb6c:	e007      	b.n	800cb7e <USBD_GetDescriptor+0x286>

    default:
        USBD_CtlError(pdev, req);
 800cb6e:	6839      	ldr	r1, [r7, #0]
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f000 fa08 	bl	800cf86 <USBD_CtlError>
        err++;
 800cb76:	7afb      	ldrb	r3, [r7, #11]
 800cb78:	3301      	adds	r3, #1
 800cb7a:	72fb      	strb	r3, [r7, #11]
        break;
 800cb7c:	bf00      	nop
    }

    if (err != 0U) {
 800cb7e:	7afb      	ldrb	r3, [r7, #11]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d11e      	bne.n	800cbc2 <USBD_GetDescriptor+0x2ca>
        return;
    }

    if (req->wLength != 0U) {
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	88db      	ldrh	r3, [r3, #6]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d016      	beq.n	800cbba <USBD_GetDescriptor+0x2c2>
        if (len != 0U) {
 800cb8c:	893b      	ldrh	r3, [r7, #8]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d00e      	beq.n	800cbb0 <USBD_GetDescriptor+0x2b8>
            len = MIN(len, req->wLength);
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	88da      	ldrh	r2, [r3, #6]
 800cb96:	893b      	ldrh	r3, [r7, #8]
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	bf28      	it	cs
 800cb9c:	4613      	movcs	r3, r2
 800cb9e:	b29b      	uxth	r3, r3
 800cba0:	813b      	strh	r3, [r7, #8]
            (void)USBD_CtlSendData(pdev, pbuf, len);
 800cba2:	893b      	ldrh	r3, [r7, #8]
 800cba4:	461a      	mov	r2, r3
 800cba6:	68f9      	ldr	r1, [r7, #12]
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f000 fa5d 	bl	800d068 <USBD_CtlSendData>
 800cbae:	e009      	b.n	800cbc4 <USBD_GetDescriptor+0x2cc>
        } else {
            USBD_CtlError(pdev, req);
 800cbb0:	6839      	ldr	r1, [r7, #0]
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f000 f9e7 	bl	800cf86 <USBD_CtlError>
 800cbb8:	e004      	b.n	800cbc4 <USBD_GetDescriptor+0x2cc>
        }
    } else {
        (void)USBD_CtlSendStatus(pdev);
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f000 faae 	bl	800d11c <USBD_CtlSendStatus>
 800cbc0:	e000      	b.n	800cbc4 <USBD_GetDescriptor+0x2cc>
        return;
 800cbc2:	bf00      	nop
    }
}
 800cbc4:	3710      	adds	r7, #16
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
 800cbca:	bf00      	nop

0800cbcc <USBD_SetAddress>:
 *         Set device address
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_SetAddress(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b084      	sub	sp, #16
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6039      	str	r1, [r7, #0]
    uint8_t dev_addr;

    if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U)) {
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	889b      	ldrh	r3, [r3, #4]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d131      	bne.n	800cc42 <USBD_SetAddress+0x76>
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	88db      	ldrh	r3, [r3, #6]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d12d      	bne.n	800cc42 <USBD_SetAddress+0x76>
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	885b      	ldrh	r3, [r3, #2]
 800cbea:	2b7f      	cmp	r3, #127	@ 0x7f
 800cbec:	d829      	bhi.n	800cc42 <USBD_SetAddress+0x76>
        dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	885b      	ldrh	r3, [r3, #2]
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbf8:	73fb      	strb	r3, [r7, #15]

        if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc00:	b2db      	uxtb	r3, r3
 800cc02:	2b03      	cmp	r3, #3
 800cc04:	d104      	bne.n	800cc10 <USBD_SetAddress+0x44>
            USBD_CtlError(pdev, req);
 800cc06:	6839      	ldr	r1, [r7, #0]
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f000 f9bc 	bl	800cf86 <USBD_CtlError>
        if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800cc0e:	e01d      	b.n	800cc4c <USBD_SetAddress+0x80>
        } else {
            pdev->dev_address = dev_addr;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	7bfa      	ldrb	r2, [r7, #15]
 800cc14:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
            (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cc18:	7bfb      	ldrb	r3, [r7, #15]
 800cc1a:	4619      	mov	r1, r3
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f003 fb49 	bl	80102b4 <USBD_LL_SetUSBAddress>
            (void)USBD_CtlSendStatus(pdev);
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f000 fa7a 	bl	800d11c <USBD_CtlSendStatus>

            if (dev_addr != 0U) {
 800cc28:	7bfb      	ldrb	r3, [r7, #15]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d004      	beq.n	800cc38 <USBD_SetAddress+0x6c>
                pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2202      	movs	r2, #2
 800cc32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800cc36:	e009      	b.n	800cc4c <USBD_SetAddress+0x80>
            } else {
                pdev->dev_state = USBD_STATE_DEFAULT;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800cc40:	e004      	b.n	800cc4c <USBD_SetAddress+0x80>
            }
        }
    } else {
        USBD_CtlError(pdev, req);
 800cc42:	6839      	ldr	r1, [r7, #0]
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 f99e 	bl	800cf86 <USBD_CtlError>
    }
}
 800cc4a:	bf00      	nop
 800cc4c:	bf00      	nop
 800cc4e:	3710      	adds	r7, #16
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}

0800cc54 <USBD_SetConfig>:
 *         Handle Set device configuration request
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b084      	sub	sp, #16
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	6039      	str	r1, [r7, #0]
    USBD_StatusTypeDef ret = USBD_OK;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	73fb      	strb	r3, [r7, #15]
    static uint8_t cfgidx;

    cfgidx = (uint8_t)(req->wValue);
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	885b      	ldrh	r3, [r3, #2]
 800cc66:	b2da      	uxtb	r2, r3
 800cc68:	4b4e      	ldr	r3, [pc, #312]	@ (800cda4 <USBD_SetConfig+0x150>)
 800cc6a:	701a      	strb	r2, [r3, #0]

    if (cfgidx > USBD_MAX_NUM_CONFIGURATION) {
 800cc6c:	4b4d      	ldr	r3, [pc, #308]	@ (800cda4 <USBD_SetConfig+0x150>)
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	d905      	bls.n	800cc80 <USBD_SetConfig+0x2c>
        USBD_CtlError(pdev, req);
 800cc74:	6839      	ldr	r1, [r7, #0]
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f000 f985 	bl	800cf86 <USBD_CtlError>
        return USBD_FAIL;
 800cc7c:	2303      	movs	r3, #3
 800cc7e:	e08c      	b.n	800cd9a <USBD_SetConfig+0x146>
    }

    switch (pdev->dev_state) {
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc86:	b2db      	uxtb	r3, r3
 800cc88:	2b02      	cmp	r3, #2
 800cc8a:	d002      	beq.n	800cc92 <USBD_SetConfig+0x3e>
 800cc8c:	2b03      	cmp	r3, #3
 800cc8e:	d029      	beq.n	800cce4 <USBD_SetConfig+0x90>
 800cc90:	e075      	b.n	800cd7e <USBD_SetConfig+0x12a>
    case USBD_STATE_ADDRESSED:
        if (cfgidx != 0U) {
 800cc92:	4b44      	ldr	r3, [pc, #272]	@ (800cda4 <USBD_SetConfig+0x150>)
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d020      	beq.n	800ccdc <USBD_SetConfig+0x88>
            pdev->dev_config = cfgidx;
 800cc9a:	4b42      	ldr	r3, [pc, #264]	@ (800cda4 <USBD_SetConfig+0x150>)
 800cc9c:	781b      	ldrb	r3, [r3, #0]
 800cc9e:	461a      	mov	r2, r3
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	605a      	str	r2, [r3, #4]

            ret = USBD_SetClassConfig(pdev, cfgidx);
 800cca4:	4b3f      	ldr	r3, [pc, #252]	@ (800cda4 <USBD_SetConfig+0x150>)
 800cca6:	781b      	ldrb	r3, [r3, #0]
 800cca8:	4619      	mov	r1, r3
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f7fe ffe9 	bl	800bc82 <USBD_SetClassConfig>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	73fb      	strb	r3, [r7, #15]

            if (ret != USBD_OK) {
 800ccb4:	7bfb      	ldrb	r3, [r7, #15]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d008      	beq.n	800cccc <USBD_SetConfig+0x78>
                USBD_CtlError(pdev, req);
 800ccba:	6839      	ldr	r1, [r7, #0]
 800ccbc:	6878      	ldr	r0, [r7, #4]
 800ccbe:	f000 f962 	bl	800cf86 <USBD_CtlError>
                pdev->dev_state = USBD_STATE_ADDRESSED;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2202      	movs	r2, #2
 800ccc6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
                pdev->dev_state = USBD_STATE_CONFIGURED;
            }
        } else {
            (void)USBD_CtlSendStatus(pdev);
        }
        break;
 800ccca:	e065      	b.n	800cd98 <USBD_SetConfig+0x144>
                (void)USBD_CtlSendStatus(pdev);
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f000 fa25 	bl	800d11c <USBD_CtlSendStatus>
                pdev->dev_state = USBD_STATE_CONFIGURED;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2203      	movs	r2, #3
 800ccd6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        break;
 800ccda:	e05d      	b.n	800cd98 <USBD_SetConfig+0x144>
            (void)USBD_CtlSendStatus(pdev);
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f000 fa1d 	bl	800d11c <USBD_CtlSendStatus>
        break;
 800cce2:	e059      	b.n	800cd98 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U) {
 800cce4:	4b2f      	ldr	r3, [pc, #188]	@ (800cda4 <USBD_SetConfig+0x150>)
 800cce6:	781b      	ldrb	r3, [r3, #0]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d112      	bne.n	800cd12 <USBD_SetConfig+0xbe>
            pdev->dev_state = USBD_STATE_ADDRESSED;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2202      	movs	r2, #2
 800ccf0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
            pdev->dev_config = cfgidx;
 800ccf4:	4b2b      	ldr	r3, [pc, #172]	@ (800cda4 <USBD_SetConfig+0x150>)
 800ccf6:	781b      	ldrb	r3, [r3, #0]
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	605a      	str	r2, [r3, #4]
            (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ccfe:	4b29      	ldr	r3, [pc, #164]	@ (800cda4 <USBD_SetConfig+0x150>)
 800cd00:	781b      	ldrb	r3, [r3, #0]
 800cd02:	4619      	mov	r1, r3
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f7fe ffd8 	bl	800bcba <USBD_ClrClassConfig>
            (void)USBD_CtlSendStatus(pdev);
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f000 fa06 	bl	800d11c <USBD_CtlSendStatus>
                (void)USBD_CtlSendStatus(pdev);
            }
        } else {
            (void)USBD_CtlSendStatus(pdev);
        }
        break;
 800cd10:	e042      	b.n	800cd98 <USBD_SetConfig+0x144>
        } else if (cfgidx != pdev->dev_config) {
 800cd12:	4b24      	ldr	r3, [pc, #144]	@ (800cda4 <USBD_SetConfig+0x150>)
 800cd14:	781b      	ldrb	r3, [r3, #0]
 800cd16:	461a      	mov	r2, r3
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	685b      	ldr	r3, [r3, #4]
 800cd1c:	429a      	cmp	r2, r3
 800cd1e:	d02a      	beq.n	800cd76 <USBD_SetConfig+0x122>
            (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	685b      	ldr	r3, [r3, #4]
 800cd24:	b2db      	uxtb	r3, r3
 800cd26:	4619      	mov	r1, r3
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f7fe ffc6 	bl	800bcba <USBD_ClrClassConfig>
            pdev->dev_config = cfgidx;
 800cd2e:	4b1d      	ldr	r3, [pc, #116]	@ (800cda4 <USBD_SetConfig+0x150>)
 800cd30:	781b      	ldrb	r3, [r3, #0]
 800cd32:	461a      	mov	r2, r3
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	605a      	str	r2, [r3, #4]
            ret = USBD_SetClassConfig(pdev, cfgidx);
 800cd38:	4b1a      	ldr	r3, [pc, #104]	@ (800cda4 <USBD_SetConfig+0x150>)
 800cd3a:	781b      	ldrb	r3, [r3, #0]
 800cd3c:	4619      	mov	r1, r3
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f7fe ff9f 	bl	800bc82 <USBD_SetClassConfig>
 800cd44:	4603      	mov	r3, r0
 800cd46:	73fb      	strb	r3, [r7, #15]
            if (ret != USBD_OK) {
 800cd48:	7bfb      	ldrb	r3, [r7, #15]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d00f      	beq.n	800cd6e <USBD_SetConfig+0x11a>
                USBD_CtlError(pdev, req);
 800cd4e:	6839      	ldr	r1, [r7, #0]
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f000 f918 	bl	800cf86 <USBD_CtlError>
                (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	b2db      	uxtb	r3, r3
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f7fe ffab 	bl	800bcba <USBD_ClrClassConfig>
                pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2202      	movs	r2, #2
 800cd68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        break;
 800cd6c:	e014      	b.n	800cd98 <USBD_SetConfig+0x144>
                (void)USBD_CtlSendStatus(pdev);
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f000 f9d4 	bl	800d11c <USBD_CtlSendStatus>
        break;
 800cd74:	e010      	b.n	800cd98 <USBD_SetConfig+0x144>
            (void)USBD_CtlSendStatus(pdev);
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f000 f9d0 	bl	800d11c <USBD_CtlSendStatus>
        break;
 800cd7c:	e00c      	b.n	800cd98 <USBD_SetConfig+0x144>

    default:
        USBD_CtlError(pdev, req);
 800cd7e:	6839      	ldr	r1, [r7, #0]
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f000 f900 	bl	800cf86 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cd86:	4b07      	ldr	r3, [pc, #28]	@ (800cda4 <USBD_SetConfig+0x150>)
 800cd88:	781b      	ldrb	r3, [r3, #0]
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f7fe ff94 	bl	800bcba <USBD_ClrClassConfig>
        ret = USBD_FAIL;
 800cd92:	2303      	movs	r3, #3
 800cd94:	73fb      	strb	r3, [r7, #15]
        break;
 800cd96:	bf00      	nop
    }

    return ret;
 800cd98:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3710      	adds	r7, #16
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
 800cda2:	bf00      	nop
 800cda4:	20000d68 	.word	0x20000d68

0800cda8 <USBD_GetConfig>:
 *         Handle Get device configuration request
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_GetConfig(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b082      	sub	sp, #8
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
 800cdb0:	6039      	str	r1, [r7, #0]
    if (req->wLength != 1U) {
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	88db      	ldrh	r3, [r3, #6]
 800cdb6:	2b01      	cmp	r3, #1
 800cdb8:	d004      	beq.n	800cdc4 <USBD_GetConfig+0x1c>
        USBD_CtlError(pdev, req);
 800cdba:	6839      	ldr	r1, [r7, #0]
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f000 f8e2 	bl	800cf86 <USBD_CtlError>
        default:
            USBD_CtlError(pdev, req);
            break;
        }
    }
}
 800cdc2:	e023      	b.n	800ce0c <USBD_GetConfig+0x64>
        switch (pdev->dev_state) {
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cdca:	b2db      	uxtb	r3, r3
 800cdcc:	2b02      	cmp	r3, #2
 800cdce:	dc02      	bgt.n	800cdd6 <USBD_GetConfig+0x2e>
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	dc03      	bgt.n	800cddc <USBD_GetConfig+0x34>
 800cdd4:	e015      	b.n	800ce02 <USBD_GetConfig+0x5a>
 800cdd6:	2b03      	cmp	r3, #3
 800cdd8:	d00b      	beq.n	800cdf2 <USBD_GetConfig+0x4a>
 800cdda:	e012      	b.n	800ce02 <USBD_GetConfig+0x5a>
            pdev->dev_default_config = 0U;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2200      	movs	r2, #0
 800cde0:	609a      	str	r2, [r3, #8]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	3308      	adds	r3, #8
 800cde6:	2201      	movs	r2, #1
 800cde8:	4619      	mov	r1, r3
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f000 f93c 	bl	800d068 <USBD_CtlSendData>
            break;
 800cdf0:	e00c      	b.n	800ce0c <USBD_GetConfig+0x64>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	3304      	adds	r3, #4
 800cdf6:	2201      	movs	r2, #1
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f000 f934 	bl	800d068 <USBD_CtlSendData>
            break;
 800ce00:	e004      	b.n	800ce0c <USBD_GetConfig+0x64>
            USBD_CtlError(pdev, req);
 800ce02:	6839      	ldr	r1, [r7, #0]
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	f000 f8be 	bl	800cf86 <USBD_CtlError>
            break;
 800ce0a:	bf00      	nop
}
 800ce0c:	bf00      	nop
 800ce0e:	3708      	adds	r7, #8
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}

0800ce14 <USBD_GetStatus>:
 *         Handle Get Status request
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_GetStatus(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b082      	sub	sp, #8
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	6039      	str	r1, [r7, #0]
    switch (pdev->dev_state) {
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce24:	b2db      	uxtb	r3, r3
 800ce26:	3b01      	subs	r3, #1
 800ce28:	2b02      	cmp	r3, #2
 800ce2a:	d81e      	bhi.n	800ce6a <USBD_GetStatus+0x56>
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
        if (req->wLength != 0x2U) {
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	88db      	ldrh	r3, [r3, #6]
 800ce30:	2b02      	cmp	r3, #2
 800ce32:	d004      	beq.n	800ce3e <USBD_GetStatus+0x2a>
            USBD_CtlError(pdev, req);
 800ce34:	6839      	ldr	r1, [r7, #0]
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f000 f8a5 	bl	800cf86 <USBD_CtlError>
            break;
 800ce3c:	e01a      	b.n	800ce74 <USBD_GetStatus+0x60>
        }

#if (USBD_SELF_POWERED == 1U)
        pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2201      	movs	r2, #1
 800ce42:	60da      	str	r2, [r3, #12]
#else
        pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

        if (pdev->dev_remote_wakeup != 0U) {
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d005      	beq.n	800ce5a <USBD_GetStatus+0x46>
            pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	68db      	ldr	r3, [r3, #12]
 800ce52:	f043 0202 	orr.w	r2, r3, #2
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	60da      	str	r2, [r3, #12]
        }

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	330c      	adds	r3, #12
 800ce5e:	2202      	movs	r2, #2
 800ce60:	4619      	mov	r1, r3
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f000 f900 	bl	800d068 <USBD_CtlSendData>
        break;
 800ce68:	e004      	b.n	800ce74 <USBD_GetStatus+0x60>

    default:
        USBD_CtlError(pdev, req);
 800ce6a:	6839      	ldr	r1, [r7, #0]
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f000 f88a 	bl	800cf86 <USBD_CtlError>
        break;
 800ce72:	bf00      	nop
    }
}
 800ce74:	bf00      	nop
 800ce76:	3708      	adds	r7, #8
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <USBD_SetFeature>:
 *         Handle Set device feature request
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_SetFeature(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	6039      	str	r1, [r7, #0]
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) {
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	885b      	ldrh	r3, [r3, #2]
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	d107      	bne.n	800ce9e <USBD_SetFeature+0x22>
        pdev->dev_remote_wakeup = 1U;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2201      	movs	r2, #1
 800ce92:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f000 f940 	bl	800d11c <USBD_CtlSendStatus>
        pdev->dev_test_mode = req->wIndex >> 8;
        (void)USBD_CtlSendStatus(pdev);
    } else {
        USBD_CtlError(pdev, req);
    }
}
 800ce9c:	e013      	b.n	800cec6 <USBD_SetFeature+0x4a>
    } else if (req->wValue == USB_FEATURE_TEST_MODE) {
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	885b      	ldrh	r3, [r3, #2]
 800cea2:	2b02      	cmp	r3, #2
 800cea4:	d10b      	bne.n	800cebe <USBD_SetFeature+0x42>
        pdev->dev_test_mode = req->wIndex >> 8;
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	889b      	ldrh	r3, [r3, #4]
 800ceaa:	0a1b      	lsrs	r3, r3, #8
 800ceac:	b29b      	uxth	r3, r3
 800ceae:	b2da      	uxtb	r2, r3
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
        (void)USBD_CtlSendStatus(pdev);
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f000 f930 	bl	800d11c <USBD_CtlSendStatus>
}
 800cebc:	e003      	b.n	800cec6 <USBD_SetFeature+0x4a>
        USBD_CtlError(pdev, req);
 800cebe:	6839      	ldr	r1, [r7, #0]
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f000 f860 	bl	800cf86 <USBD_CtlError>
}
 800cec6:	bf00      	nop
 800cec8:	3708      	adds	r7, #8
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}

0800cece <USBD_ClrFeature>:
 *         Handle clear device feature request
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_ClrFeature(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800cece:	b580      	push	{r7, lr}
 800ced0:	b082      	sub	sp, #8
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	6078      	str	r0, [r7, #4]
 800ced6:	6039      	str	r1, [r7, #0]
    switch (pdev->dev_state) {
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cede:	b2db      	uxtb	r3, r3
 800cee0:	3b01      	subs	r3, #1
 800cee2:	2b02      	cmp	r3, #2
 800cee4:	d80b      	bhi.n	800cefe <USBD_ClrFeature+0x30>
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) {
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	885b      	ldrh	r3, [r3, #2]
 800ceea:	2b01      	cmp	r3, #1
 800ceec:	d10c      	bne.n	800cf08 <USBD_ClrFeature+0x3a>
            pdev->dev_remote_wakeup = 0U;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2200      	movs	r2, #0
 800cef2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
            (void)USBD_CtlSendStatus(pdev);
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f000 f910 	bl	800d11c <USBD_CtlSendStatus>
        }
        break;
 800cefc:	e004      	b.n	800cf08 <USBD_ClrFeature+0x3a>

    default:
        USBD_CtlError(pdev, req);
 800cefe:	6839      	ldr	r1, [r7, #0]
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f000 f840 	bl	800cf86 <USBD_CtlError>
        break;
 800cf06:	e000      	b.n	800cf0a <USBD_ClrFeature+0x3c>
        break;
 800cf08:	bf00      	nop
    }
}
 800cf0a:	bf00      	nop
 800cf0c:	3708      	adds	r7, #8
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}

0800cf12 <USBD_ParseSetupRequest>:
 *         Copy buffer into setup structure
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval None
 */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef * req, uint8_t * pdata) {
 800cf12:	b580      	push	{r7, lr}
 800cf14:	b084      	sub	sp, #16
 800cf16:	af00      	add	r7, sp, #0
 800cf18:	6078      	str	r0, [r7, #4]
 800cf1a:	6039      	str	r1, [r7, #0]
    uint8_t * pbuff = pdata;
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	60fb      	str	r3, [r7, #12]

    req->bmRequest = *(uint8_t *)(pbuff);
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	781a      	ldrb	r2, [r3, #0]
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	701a      	strb	r2, [r3, #0]

    pbuff++;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	60fb      	str	r3, [r7, #12]
    req->bRequest = *(uint8_t *)(pbuff);
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	781a      	ldrb	r2, [r3, #0]
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	705a      	strb	r2, [r3, #1]

    pbuff++;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	3301      	adds	r3, #1
 800cf3a:	60fb      	str	r3, [r7, #12]
    req->wValue = SWAPBYTE(pbuff);
 800cf3c:	68f8      	ldr	r0, [r7, #12]
 800cf3e:	f7ff fa40 	bl	800c3c2 <SWAPBYTE>
 800cf42:	4603      	mov	r3, r0
 800cf44:	461a      	mov	r2, r3
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	805a      	strh	r2, [r3, #2]

    pbuff++;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	3301      	adds	r3, #1
 800cf4e:	60fb      	str	r3, [r7, #12]
    pbuff++;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	3301      	adds	r3, #1
 800cf54:	60fb      	str	r3, [r7, #12]
    req->wIndex = SWAPBYTE(pbuff);
 800cf56:	68f8      	ldr	r0, [r7, #12]
 800cf58:	f7ff fa33 	bl	800c3c2 <SWAPBYTE>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	461a      	mov	r2, r3
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	809a      	strh	r2, [r3, #4]

    pbuff++;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	3301      	adds	r3, #1
 800cf68:	60fb      	str	r3, [r7, #12]
    pbuff++;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	3301      	adds	r3, #1
 800cf6e:	60fb      	str	r3, [r7, #12]
    req->wLength = SWAPBYTE(pbuff);
 800cf70:	68f8      	ldr	r0, [r7, #12]
 800cf72:	f7ff fa26 	bl	800c3c2 <SWAPBYTE>
 800cf76:	4603      	mov	r3, r0
 800cf78:	461a      	mov	r2, r3
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	80da      	strh	r2, [r3, #6]
}
 800cf7e:	bf00      	nop
 800cf80:	3710      	adds	r7, #16
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}

0800cf86 <USBD_CtlError>:
 *         Handle USB low level Error
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval None
 */
void USBD_CtlError(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800cf86:	b580      	push	{r7, lr}
 800cf88:	b082      	sub	sp, #8
 800cf8a:	af00      	add	r7, sp, #0
 800cf8c:	6078      	str	r0, [r7, #4]
 800cf8e:	6039      	str	r1, [r7, #0]
    UNUSED(req);

    (void)USBD_LL_StallEP(pdev, 0x80U);
 800cf90:	2180      	movs	r1, #128	@ 0x80
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f003 f924 	bl	80101e0 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, 0U);
 800cf98:	2100      	movs	r1, #0
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f003 f920 	bl	80101e0 <USBD_LL_StallEP>
}
 800cfa0:	bf00      	nop
 800cfa2:	3708      	adds	r7, #8
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}

0800cfa8 <USBD_GetString>:
 * @param  desc : descriptor buffer
 * @param  unicode : Formatted string buffer (unicode)
 * @param  len : descriptor length
 * @retval None
 */
void USBD_GetString(uint8_t * desc, uint8_t * unicode, uint16_t * len) {
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b086      	sub	sp, #24
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	60f8      	str	r0, [r7, #12]
 800cfb0:	60b9      	str	r1, [r7, #8]
 800cfb2:	607a      	str	r2, [r7, #4]
    uint8_t idx = 0U;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	75fb      	strb	r3, [r7, #23]
    uint8_t * pdesc;

    if (desc == NULL) {
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d036      	beq.n	800d02c <USBD_GetString+0x84>
        return;
    }

    pdesc = desc;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	613b      	str	r3, [r7, #16]
    *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cfc2:	6938      	ldr	r0, [r7, #16]
 800cfc4:	f000 f836 	bl	800d034 <USBD_GetLen>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	3301      	adds	r3, #1
 800cfcc:	b29b      	uxth	r3, r3
 800cfce:	005b      	lsls	r3, r3, #1
 800cfd0:	b29a      	uxth	r2, r3
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	801a      	strh	r2, [r3, #0]

    unicode[idx] = *(uint8_t *)len;
 800cfd6:	7dfb      	ldrb	r3, [r7, #23]
 800cfd8:	68ba      	ldr	r2, [r7, #8]
 800cfda:	4413      	add	r3, r2
 800cfdc:	687a      	ldr	r2, [r7, #4]
 800cfde:	7812      	ldrb	r2, [r2, #0]
 800cfe0:	701a      	strb	r2, [r3, #0]
    idx++;
 800cfe2:	7dfb      	ldrb	r3, [r7, #23]
 800cfe4:	3301      	adds	r3, #1
 800cfe6:	75fb      	strb	r3, [r7, #23]
    unicode[idx] = USB_DESC_TYPE_STRING;
 800cfe8:	7dfb      	ldrb	r3, [r7, #23]
 800cfea:	68ba      	ldr	r2, [r7, #8]
 800cfec:	4413      	add	r3, r2
 800cfee:	2203      	movs	r2, #3
 800cff0:	701a      	strb	r2, [r3, #0]
    idx++;
 800cff2:	7dfb      	ldrb	r3, [r7, #23]
 800cff4:	3301      	adds	r3, #1
 800cff6:	75fb      	strb	r3, [r7, #23]

    while (*pdesc != (uint8_t)'\0') {
 800cff8:	e013      	b.n	800d022 <USBD_GetString+0x7a>
        unicode[idx] = *pdesc;
 800cffa:	7dfb      	ldrb	r3, [r7, #23]
 800cffc:	68ba      	ldr	r2, [r7, #8]
 800cffe:	4413      	add	r3, r2
 800d000:	693a      	ldr	r2, [r7, #16]
 800d002:	7812      	ldrb	r2, [r2, #0]
 800d004:	701a      	strb	r2, [r3, #0]
        pdesc++;
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	3301      	adds	r3, #1
 800d00a:	613b      	str	r3, [r7, #16]
        idx++;
 800d00c:	7dfb      	ldrb	r3, [r7, #23]
 800d00e:	3301      	adds	r3, #1
 800d010:	75fb      	strb	r3, [r7, #23]

        unicode[idx] = 0U;
 800d012:	7dfb      	ldrb	r3, [r7, #23]
 800d014:	68ba      	ldr	r2, [r7, #8]
 800d016:	4413      	add	r3, r2
 800d018:	2200      	movs	r2, #0
 800d01a:	701a      	strb	r2, [r3, #0]
        idx++;
 800d01c:	7dfb      	ldrb	r3, [r7, #23]
 800d01e:	3301      	adds	r3, #1
 800d020:	75fb      	strb	r3, [r7, #23]
    while (*pdesc != (uint8_t)'\0') {
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	781b      	ldrb	r3, [r3, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d1e7      	bne.n	800cffa <USBD_GetString+0x52>
 800d02a:	e000      	b.n	800d02e <USBD_GetString+0x86>
        return;
 800d02c:	bf00      	nop
    }
}
 800d02e:	3718      	adds	r7, #24
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}

0800d034 <USBD_GetLen>:
 * @brief  USBD_GetLen
 *         return the string length
 * @param  buf : pointer to the ascii string buffer
 * @retval string length
 */
static uint8_t USBD_GetLen(uint8_t * buf) {
 800d034:	b480      	push	{r7}
 800d036:	b085      	sub	sp, #20
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
    uint8_t len = 0U;
 800d03c:	2300      	movs	r3, #0
 800d03e:	73fb      	strb	r3, [r7, #15]
    uint8_t * pbuff = buf;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	60bb      	str	r3, [r7, #8]

    while (*pbuff != (uint8_t)'\0') {
 800d044:	e005      	b.n	800d052 <USBD_GetLen+0x1e>
        len++;
 800d046:	7bfb      	ldrb	r3, [r7, #15]
 800d048:	3301      	adds	r3, #1
 800d04a:	73fb      	strb	r3, [r7, #15]
        pbuff++;
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	3301      	adds	r3, #1
 800d050:	60bb      	str	r3, [r7, #8]
    while (*pbuff != (uint8_t)'\0') {
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	781b      	ldrb	r3, [r3, #0]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d1f5      	bne.n	800d046 <USBD_GetLen+0x12>
    }

    return len;
 800d05a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3714      	adds	r7, #20
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr

0800d068 <USBD_CtlSendData>:
 * @param  pdev: device instance
 * @param  buff: pointer to data buffer
 * @param  len: length of data to be sent
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef * pdev, uint8_t * pbuf, uint32_t len) {
 800d068:	b580      	push	{r7, lr}
 800d06a:	b084      	sub	sp, #16
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	60f8      	str	r0, [r7, #12]
 800d070:	60b9      	str	r1, [r7, #8]
 800d072:	607a      	str	r2, [r7, #4]
    /* Set EP0 State */
    pdev->ep0_state = USBD_EP0_DATA_IN;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	2202      	movs	r2, #2
 800d078:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
    pdev->ep_in[0].total_length = len;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	687a      	ldr	r2, [r7, #4]
 800d080:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
    pdev->ep_in[0].rem_length = 0U;
#else
    pdev->ep_in[0].rem_length = len;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

    /* Start the transfer */
    (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	68ba      	ldr	r2, [r7, #8]
 800d08c:	2100      	movs	r1, #0
 800d08e:	68f8      	ldr	r0, [r7, #12]
 800d090:	f003 f92f 	bl	80102f2 <USBD_LL_Transmit>

    return USBD_OK;
 800d094:	2300      	movs	r3, #0
}
 800d096:	4618      	mov	r0, r3
 800d098:	3710      	adds	r7, #16
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}

0800d09e <USBD_CtlContinueSendData>:
 * @param  pdev: device instance
 * @param  buff: pointer to data buffer
 * @param  len: length of data to be sent
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef * pdev, uint8_t * pbuf, uint32_t len) {
 800d09e:	b580      	push	{r7, lr}
 800d0a0:	b084      	sub	sp, #16
 800d0a2:	af00      	add	r7, sp, #0
 800d0a4:	60f8      	str	r0, [r7, #12]
 800d0a6:	60b9      	str	r1, [r7, #8]
 800d0a8:	607a      	str	r2, [r7, #4]
    /* Start the next transfer */
    (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	68ba      	ldr	r2, [r7, #8]
 800d0ae:	2100      	movs	r1, #0
 800d0b0:	68f8      	ldr	r0, [r7, #12]
 800d0b2:	f003 f91e 	bl	80102f2 <USBD_LL_Transmit>

    return USBD_OK;
 800d0b6:	2300      	movs	r3, #0
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3710      	adds	r7, #16
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}

0800d0c0 <USBD_CtlPrepareRx>:
 * @param  pdev: device instance
 * @param  buff: pointer to data buffer
 * @param  len: length of data to be received
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef * pdev, uint8_t * pbuf, uint32_t len) {
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b084      	sub	sp, #16
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	60f8      	str	r0, [r7, #12]
 800d0c8:	60b9      	str	r1, [r7, #8]
 800d0ca:	607a      	str	r2, [r7, #4]
    /* Set EP0 State */
    pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	2203      	movs	r2, #3
 800d0d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
    pdev->ep_out[0].total_length = len;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	687a      	ldr	r2, [r7, #4]
 800d0d8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
    pdev->ep_out[0].rem_length = 0U;
#else
    pdev->ep_out[0].rem_length = len;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	687a      	ldr	r2, [r7, #4]
 800d0e0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

    /* Start the transfer */
    (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	68ba      	ldr	r2, [r7, #8]
 800d0e8:	2100      	movs	r1, #0
 800d0ea:	68f8      	ldr	r0, [r7, #12]
 800d0ec:	f003 f922 	bl	8010334 <USBD_LL_PrepareReceive>

    return USBD_OK;
 800d0f0:	2300      	movs	r3, #0
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3710      	adds	r7, #16
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}

0800d0fa <USBD_CtlContinueRx>:
 * @param  pdev: device instance
 * @param  buff: pointer to data buffer
 * @param  len: length of data to be received
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef * pdev, uint8_t * pbuf, uint32_t len) {
 800d0fa:	b580      	push	{r7, lr}
 800d0fc:	b084      	sub	sp, #16
 800d0fe:	af00      	add	r7, sp, #0
 800d100:	60f8      	str	r0, [r7, #12]
 800d102:	60b9      	str	r1, [r7, #8]
 800d104:	607a      	str	r2, [r7, #4]
    (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	68ba      	ldr	r2, [r7, #8]
 800d10a:	2100      	movs	r1, #0
 800d10c:	68f8      	ldr	r0, [r7, #12]
 800d10e:	f003 f911 	bl	8010334 <USBD_LL_PrepareReceive>

    return USBD_OK;
 800d112:	2300      	movs	r3, #0
}
 800d114:	4618      	mov	r0, r3
 800d116:	3710      	adds	r7, #16
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}

0800d11c <USBD_CtlSendStatus>:
 * @brief  USBD_CtlSendStatus
 *         send zero lzngth packet on the ctl pipe
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef * pdev) {
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b082      	sub	sp, #8
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
    /* Set EP0 State */
    pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2204      	movs	r2, #4
 800d128:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

    /* Start the transfer */
    (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d12c:	2300      	movs	r3, #0
 800d12e:	2200      	movs	r2, #0
 800d130:	2100      	movs	r1, #0
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f003 f8dd 	bl	80102f2 <USBD_LL_Transmit>

    return USBD_OK;
 800d138:	2300      	movs	r3, #0
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3708      	adds	r7, #8
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}

0800d142 <USBD_CtlReceiveStatus>:
 * @brief  USBD_CtlReceiveStatus
 *         receive zero lzngth packet on the ctl pipe
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef * pdev) {
 800d142:	b580      	push	{r7, lr}
 800d144:	b082      	sub	sp, #8
 800d146:	af00      	add	r7, sp, #0
 800d148:	6078      	str	r0, [r7, #4]
    /* Set EP0 State */
    pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2205      	movs	r2, #5
 800d14e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

    /* Start the transfer */
    (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d152:	2300      	movs	r3, #0
 800d154:	2200      	movs	r2, #0
 800d156:	2100      	movs	r1, #0
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f003 f8eb 	bl	8010334 <USBD_LL_PrepareReceive>

    return USBD_OK;
 800d15e:	2300      	movs	r3, #0
}
 800d160:	4618      	mov	r0, r3
 800d162:	3708      	adds	r7, #8
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}

0800d168 <makeFreeRtosPriority>:
#endif

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority(osPriority priority) {
 800d168:	b480      	push	{r7}
 800d16a:	b085      	sub	sp, #20
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	4603      	mov	r3, r0
 800d170:	80fb      	strh	r3, [r7, #6]
    unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d172:	2300      	movs	r3, #0
 800d174:	60fb      	str	r3, [r7, #12]

    if (priority != osPriorityError) {
 800d176:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d17a:	2b84      	cmp	r3, #132	@ 0x84
 800d17c:	d005      	beq.n	800d18a <makeFreeRtosPriority+0x22>
        fpriority += (priority - osPriorityIdle);
 800d17e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	4413      	add	r3, r2
 800d186:	3303      	adds	r3, #3
 800d188:	60fb      	str	r3, [r7, #12]
    }

    return fpriority;
 800d18a:	68fb      	ldr	r3, [r7, #12]
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3714      	adds	r7, #20
 800d190:	46bd      	mov	sp, r7
 800d192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d196:	4770      	bx	lr

0800d198 <osKernelStart>:
 * @param  thread_def    thread definition referenced with \ref osThread.
 * @param  argument      pointer that is passed to the thread function as start argument.
 * @retval status code that indicates the execution status of the function
 * @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
 */
osStatus osKernelStart(void) {
 800d198:	b580      	push	{r7, lr}
 800d19a:	af00      	add	r7, sp, #0
    vTaskStartScheduler();
 800d19c:	f001 f8ee 	bl	800e37c <vTaskStartScheduler>

    return osOK;
 800d1a0:	2300      	movs	r3, #0
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	bd80      	pop	{r7, pc}

0800d1a6 <osThreadCreate>:
 * @param  thread_def    thread definition referenced with \ref osThread.
 * @param  argument      pointer that is passed to the thread function as start argument.
 * @retval thread ID for reference by other functions or NULL in case of error.
 * @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
 */
osThreadId osThreadCreate(const osThreadDef_t * thread_def, void * argument) {
 800d1a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1a8:	b089      	sub	sp, #36	@ 0x24
 800d1aa:	af04      	add	r7, sp, #16
 800d1ac:	6078      	str	r0, [r7, #4]
 800d1ae:	6039      	str	r1, [r7, #0]
    TaskHandle_t handle;

#if (configSUPPORT_STATIC_ALLOCATION == 1) && (configSUPPORT_DYNAMIC_ALLOCATION == 1)
    if ((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	695b      	ldr	r3, [r3, #20]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d020      	beq.n	800d1fa <osThreadCreate+0x54>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	699b      	ldr	r3, [r3, #24]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d01c      	beq.n	800d1fa <osThreadCreate+0x54>
        handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread, (const portCHAR *)thread_def->name, thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority), thread_def->buffer, thread_def->controlblock);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	685c      	ldr	r4, [r3, #4]
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681d      	ldr	r5, [r3, #0]
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	691e      	ldr	r6, [r3, #16]
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7ff ffc8 	bl	800d168 <makeFreeRtosPriority>
 800d1d8:	4601      	mov	r1, r0
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	695b      	ldr	r3, [r3, #20]
 800d1de:	687a      	ldr	r2, [r7, #4]
 800d1e0:	6992      	ldr	r2, [r2, #24]
 800d1e2:	9202      	str	r2, [sp, #8]
 800d1e4:	9301      	str	r3, [sp, #4]
 800d1e6:	9100      	str	r1, [sp, #0]
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	4632      	mov	r2, r6
 800d1ec:	4629      	mov	r1, r5
 800d1ee:	4620      	mov	r0, r4
 800d1f0:	f000 fdd8 	bl	800dda4 <xTaskCreateStatic>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	60fb      	str	r3, [r7, #12]
 800d1f8:	e01c      	b.n	800d234 <osThreadCreate+0x8e>
    } else {
        if (xTaskCreate((TaskFunction_t)thread_def->pthread, (const portCHAR *)thread_def->name, thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority), &handle) != pdPASS) {
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	685c      	ldr	r4, [r3, #4]
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681d      	ldr	r5, [r3, #0]
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	691b      	ldr	r3, [r3, #16]
 800d206:	b29e      	uxth	r6, r3
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d20e:	4618      	mov	r0, r3
 800d210:	f7ff ffaa 	bl	800d168 <makeFreeRtosPriority>
 800d214:	4602      	mov	r2, r0
 800d216:	f107 030c 	add.w	r3, r7, #12
 800d21a:	9301      	str	r3, [sp, #4]
 800d21c:	9200      	str	r2, [sp, #0]
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	4632      	mov	r2, r6
 800d222:	4629      	mov	r1, r5
 800d224:	4620      	mov	r0, r4
 800d226:	f000 fe1d 	bl	800de64 <xTaskCreate>
 800d22a:	4603      	mov	r3, r0
 800d22c:	2b01      	cmp	r3, #1
 800d22e:	d001      	beq.n	800d234 <osThreadCreate+0x8e>
            return NULL;
 800d230:	2300      	movs	r3, #0
 800d232:	e000      	b.n	800d236 <osThreadCreate+0x90>
    if (xTaskCreate((TaskFunction_t)thread_def->pthread, (const portCHAR *)thread_def->name, thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority), &handle) != pdPASS) {
        return NULL;
    }
#endif

    return handle;
 800d234:	68fb      	ldr	r3, [r7, #12]
}
 800d236:	4618      	mov	r0, r3
 800d238:	3714      	adds	r7, #20
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d23e <osDelay>:
/**
 * @brief   Wait for Timeout (Time Delay)
 * @param   millisec      time delay value
 * @retval  status code that indicates the execution status of the function.
 */
osStatus osDelay(uint32_t millisec) {
 800d23e:	b580      	push	{r7, lr}
 800d240:	b084      	sub	sp, #16
 800d242:	af00      	add	r7, sp, #0
 800d244:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
    TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2200      	movs	r2, #0
 800d24a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d24e:	60fb      	str	r3, [r7, #12]

    vTaskDelay(ticks ? ticks : 1); /* Minimum delay = 1 tick */
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d001      	beq.n	800d25a <osDelay+0x1c>
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	e000      	b.n	800d25c <osDelay+0x1e>
 800d25a:	2301      	movs	r3, #1
 800d25c:	4618      	mov	r0, r3
 800d25e:	f000 ffc3 	bl	800e1e8 <vTaskDelay>

    return osOK;
 800d262:	2300      	movs	r3, #0
#else
    (void)millisec;

    return osErrorResource;
#endif
}
 800d264:	4618      	mov	r0, r3
 800d266:	3710      	adds	r7, #16
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}

0800d26c <vListInitialise>:

/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise(List_t * const pxList) {
 800d26c:	b480      	push	{r7}
 800d26e:	b083      	sub	sp, #12
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f103 0208 	add.w	r2, r3, #8
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f04f 32ff 	mov.w	r2, #4294967295
 800d284:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = (ListItem_t *)&(pxList->xListEnd);     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	f103 0208 	add.w	r2, r3, #8
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f103 0208 	add.w	r2, r3, #8
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = (UBaseType_t)0U;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2200      	movs	r2, #0
 800d29e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
    configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE(pxList);
    listSET_LIST_INTEGRITY_CHECK_2_VALUE(pxList);
}
 800d2a0:	bf00      	nop
 800d2a2:	370c      	adds	r7, #12
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2aa:	4770      	bx	lr

0800d2ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem(ListItem_t * const pxItem) {
 800d2ac:	b480      	push	{r7}
 800d2ae:	b083      	sub	sp, #12
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
    configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE(pxItem);
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE(pxItem);
}
 800d2ba:	bf00      	nop
 800d2bc:	370c      	adds	r7, #12
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c4:	4770      	bx	lr

0800d2c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t * const pxList, ListItem_t * const pxNewListItem) {
 800d2c6:	b480      	push	{r7}
 800d2c8:	b085      	sub	sp, #20
 800d2ca:	af00      	add	r7, sp, #0
 800d2cc:	6078      	str	r0, [r7, #4]
 800d2ce:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	68fa      	ldr	r2, [r7, #12]
 800d2da:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	689a      	ldr	r2, [r3, #8]
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	689b      	ldr	r3, [r3, #8]
 800d2e8:	683a      	ldr	r2, [r7, #0]
 800d2ea:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	683a      	ldr	r2, [r7, #0]
 800d2f0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	687a      	ldr	r2, [r7, #4]
 800d2f6:	611a      	str	r2, [r3, #16]

    (pxList->uxNumberOfItems)++;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	1c5a      	adds	r2, r3, #1
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	601a      	str	r2, [r3, #0]
}
 800d302:	bf00      	nop
 800d304:	3714      	adds	r7, #20
 800d306:	46bd      	mov	sp, r7
 800d308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30c:	4770      	bx	lr

0800d30e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert(List_t * const pxList, ListItem_t * const pxNewListItem) {
 800d30e:	b480      	push	{r7}
 800d310:	b085      	sub	sp, #20
 800d312:	af00      	add	r7, sp, #0
 800d314:	6078      	str	r0, [r7, #4]
 800d316:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	60bb      	str	r3, [r7, #8]
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if (xValueOfInsertion == portMAX_DELAY) {
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d324:	d103      	bne.n	800d32e <vListInsert+0x20>
        pxIterator = pxList->xListEnd.pxPrevious;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	691b      	ldr	r3, [r3, #16]
 800d32a:	60fb      	str	r3, [r7, #12]
 800d32c:	e00c      	b.n	800d348 <vListInsert+0x3a>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	3308      	adds	r3, #8
 800d332:	60fb      	str	r3, [r7, #12]
 800d334:	e002      	b.n	800d33c <vListInsert+0x2e>
             pxIterator = pxIterator->pxNext) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */ /*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	685b      	ldr	r3, [r3, #4]
 800d33a:	60fb      	str	r3, [r7, #12]
        for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	685b      	ldr	r3, [r3, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	68ba      	ldr	r2, [r7, #8]
 800d344:	429a      	cmp	r2, r3
 800d346:	d2f6      	bcs.n	800d336 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	685a      	ldr	r2, [r3, #4]
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	685b      	ldr	r3, [r3, #4]
 800d354:	683a      	ldr	r2, [r7, #0]
 800d356:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	68fa      	ldr	r2, [r7, #12]
 800d35c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	683a      	ldr	r2, [r7, #0]
 800d362:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	687a      	ldr	r2, [r7, #4]
 800d368:	611a      	str	r2, [r3, #16]

    (pxList->uxNumberOfItems)++;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	1c5a      	adds	r2, r3, #1
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	601a      	str	r2, [r3, #0]
}
 800d374:	bf00      	nop
 800d376:	3714      	adds	r7, #20
 800d378:	46bd      	mov	sp, r7
 800d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37e:	4770      	bx	lr

0800d380 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove(ListItem_t * const pxItemToRemove) {
 800d380:	b480      	push	{r7}
 800d382:	b085      	sub	sp, #20
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
    item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	691b      	ldr	r3, [r3, #16]
 800d38c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	685b      	ldr	r3, [r3, #4]
 800d392:	687a      	ldr	r2, [r7, #4]
 800d394:	6892      	ldr	r2, [r2, #8]
 800d396:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	689b      	ldr	r3, [r3, #8]
 800d39c:	687a      	ldr	r2, [r7, #4]
 800d39e:	6852      	ldr	r2, [r2, #4]
 800d3a0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if (pxList->pxIndex == pxItemToRemove) {
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	685b      	ldr	r3, [r3, #4]
 800d3a6:	687a      	ldr	r2, [r7, #4]
 800d3a8:	429a      	cmp	r2, r3
 800d3aa:	d103      	bne.n	800d3b4 <uxListRemove+0x34>
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	689a      	ldr	r2, [r3, #8]
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	605a      	str	r2, [r3, #4]
    } else {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	611a      	str	r2, [r3, #16]
    (pxList->uxNumberOfItems)--;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	1e5a      	subs	r2, r3, #1
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	681b      	ldr	r3, [r3, #0]
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	3714      	adds	r7, #20
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d2:	4770      	bx	lr

0800d3d4 <xQueueGenericReset>:
        }                                                                                                                                                                                                                                                \
    }                                                                                                                                                                                                                                                    \
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset(QueueHandle_t xQueue, BaseType_t xNewQueue) {
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b084      	sub	sp, #16
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	60fb      	str	r3, [r7, #12]

    configASSERT(pxQueue);
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d10b      	bne.n	800d400 <xQueueGenericReset+0x2c>
    __asm volatile("	mov %0, %1												\n"
 800d3e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3ec:	f383 8811 	msr	BASEPRI, r3
 800d3f0:	f3bf 8f6f 	isb	sy
 800d3f4:	f3bf 8f4f 	dsb	sy
 800d3f8:	60bb      	str	r3, [r7, #8]
}
 800d3fa:	bf00      	nop
 800d3fc:	bf00      	nop
 800d3fe:	e7fd      	b.n	800d3fc <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800d400:	f002 f9ba 	bl	800f778 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + (pxQueue->uxLength * pxQueue->uxItemSize); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	681a      	ldr	r2, [r3, #0]
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d40c:	68f9      	ldr	r1, [r7, #12]
 800d40e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d410:	fb01 f303 	mul.w	r3, r1, r3
 800d414:	441a      	add	r2, r3
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = (UBaseType_t)0U;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2200      	movs	r2, #0
 800d41e:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	681a      	ldr	r2, [r3, #0]
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ((pxQueue->uxLength - 1U) * pxQueue->uxItemSize); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	681a      	ldr	r2, [r3, #0]
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d430:	3b01      	subs	r3, #1
 800d432:	68f9      	ldr	r1, [r7, #12]
 800d434:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d436:	fb01 f303 	mul.w	r3, r1, r3
 800d43a:	441a      	add	r2, r3
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	22ff      	movs	r2, #255	@ 0xff
 800d444:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	22ff      	movs	r2, #255	@ 0xff
 800d44c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if (xNewQueue == pdFALSE) {
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d114      	bne.n	800d480 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
            the tasks will remain blocked as after this function exits the queue
            will still be empty.  If there are tasks blocked waiting to write to
            the queue, then one should be unblocked as after this function exits
            it will be possible to write to it. */
            if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	691b      	ldr	r3, [r3, #16]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d01a      	beq.n	800d494 <xQueueGenericReset+0xc0>
                if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	3310      	adds	r3, #16
 800d462:	4618      	mov	r0, r3
 800d464:	f001 fa16 	bl	800e894 <xTaskRemoveFromEventList>
 800d468:	4603      	mov	r3, r0
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d012      	beq.n	800d494 <xQueueGenericReset+0xc0>
                    queueYIELD_IF_USING_PREEMPTION();
 800d46e:	4b0d      	ldr	r3, [pc, #52]	@ (800d4a4 <xQueueGenericReset+0xd0>)
 800d470:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d474:	601a      	str	r2, [r3, #0]
 800d476:	f3bf 8f4f 	dsb	sy
 800d47a:	f3bf 8f6f 	isb	sy
 800d47e:	e009      	b.n	800d494 <xQueueGenericReset+0xc0>
            } else {
                mtCOVERAGE_TEST_MARKER();
            }
        } else {
            /* Ensure the event queues start in the correct state. */
            vListInitialise(&(pxQueue->xTasksWaitingToSend));
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	3310      	adds	r3, #16
 800d484:	4618      	mov	r0, r3
 800d486:	f7ff fef1 	bl	800d26c <vListInitialise>
            vListInitialise(&(pxQueue->xTasksWaitingToReceive));
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	3324      	adds	r3, #36	@ 0x24
 800d48e:	4618      	mov	r0, r3
 800d490:	f7ff feec 	bl	800d26c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800d494:	f002 f9a2 	bl	800f7dc <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
    versions. */
    return pdPASS;
 800d498:	2301      	movs	r3, #1
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	3710      	adds	r7, #16
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}
 800d4a2:	bf00      	nop
 800d4a4:	e000ed04 	.word	0xe000ed04

0800d4a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if (configSUPPORT_STATIC_ALLOCATION == 1)

QueueHandle_t xQueueGenericCreateStatic(const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t * pucQueueStorage, StaticQueue_t * pxStaticQueue, const uint8_t ucQueueType) {
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b08e      	sub	sp, #56	@ 0x38
 800d4ac:	af02      	add	r7, sp, #8
 800d4ae:	60f8      	str	r0, [r7, #12]
 800d4b0:	60b9      	str	r1, [r7, #8]
 800d4b2:	607a      	str	r2, [r7, #4]
 800d4b4:	603b      	str	r3, [r7, #0]
    Queue_t * pxNewQueue;

    configASSERT(uxQueueLength > (UBaseType_t)0);
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d10b      	bne.n	800d4d4 <xQueueGenericCreateStatic+0x2c>
    __asm volatile("	mov %0, %1												\n"
 800d4bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4c0:	f383 8811 	msr	BASEPRI, r3
 800d4c4:	f3bf 8f6f 	isb	sy
 800d4c8:	f3bf 8f4f 	dsb	sy
 800d4cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d4ce:	bf00      	nop
 800d4d0:	bf00      	nop
 800d4d2:	e7fd      	b.n	800d4d0 <xQueueGenericCreateStatic+0x28>

    /* The StaticQueue_t structure and the queue storage area must be
    supplied. */
    configASSERT(pxStaticQueue != NULL);
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d10b      	bne.n	800d4f2 <xQueueGenericCreateStatic+0x4a>
    __asm volatile("	mov %0, %1												\n"
 800d4da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4de:	f383 8811 	msr	BASEPRI, r3
 800d4e2:	f3bf 8f6f 	isb	sy
 800d4e6:	f3bf 8f4f 	dsb	sy
 800d4ea:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d4ec:	bf00      	nop
 800d4ee:	bf00      	nop
 800d4f0:	e7fd      	b.n	800d4ee <xQueueGenericCreateStatic+0x46>

    /* A queue storage area should be provided if the item size is not 0, and
    should not be provided if the item size is 0. */
    configASSERT(!((pucQueueStorage != NULL) && (uxItemSize == 0)));
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d002      	beq.n	800d4fe <xQueueGenericCreateStatic+0x56>
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d001      	beq.n	800d502 <xQueueGenericCreateStatic+0x5a>
 800d4fe:	2301      	movs	r3, #1
 800d500:	e000      	b.n	800d504 <xQueueGenericCreateStatic+0x5c>
 800d502:	2300      	movs	r3, #0
 800d504:	2b00      	cmp	r3, #0
 800d506:	d10b      	bne.n	800d520 <xQueueGenericCreateStatic+0x78>
    __asm volatile("	mov %0, %1												\n"
 800d508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d50c:	f383 8811 	msr	BASEPRI, r3
 800d510:	f3bf 8f6f 	isb	sy
 800d514:	f3bf 8f4f 	dsb	sy
 800d518:	623b      	str	r3, [r7, #32]
}
 800d51a:	bf00      	nop
 800d51c:	bf00      	nop
 800d51e:	e7fd      	b.n	800d51c <xQueueGenericCreateStatic+0x74>
    configASSERT(!((pucQueueStorage == NULL) && (uxItemSize != 0)));
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d102      	bne.n	800d52c <xQueueGenericCreateStatic+0x84>
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d101      	bne.n	800d530 <xQueueGenericCreateStatic+0x88>
 800d52c:	2301      	movs	r3, #1
 800d52e:	e000      	b.n	800d532 <xQueueGenericCreateStatic+0x8a>
 800d530:	2300      	movs	r3, #0
 800d532:	2b00      	cmp	r3, #0
 800d534:	d10b      	bne.n	800d54e <xQueueGenericCreateStatic+0xa6>
    __asm volatile("	mov %0, %1												\n"
 800d536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d53a:	f383 8811 	msr	BASEPRI, r3
 800d53e:	f3bf 8f6f 	isb	sy
 800d542:	f3bf 8f4f 	dsb	sy
 800d546:	61fb      	str	r3, [r7, #28]
}
 800d548:	bf00      	nop
 800d54a:	bf00      	nop
 800d54c:	e7fd      	b.n	800d54a <xQueueGenericCreateStatic+0xa2>
#if (configASSERT_DEFINED == 1)
    {
        /* Sanity check that the size of the structure used to declare a
        variable of type StaticQueue_t or StaticSemaphore_t equals the size of
        the real queue and semaphore structures. */
        volatile size_t xSize = sizeof(StaticQueue_t);
 800d54e:	2348      	movs	r3, #72	@ 0x48
 800d550:	617b      	str	r3, [r7, #20]
        configASSERT(xSize == sizeof(Queue_t));
 800d552:	697b      	ldr	r3, [r7, #20]
 800d554:	2b48      	cmp	r3, #72	@ 0x48
 800d556:	d00b      	beq.n	800d570 <xQueueGenericCreateStatic+0xc8>
    __asm volatile("	mov %0, %1												\n"
 800d558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d55c:	f383 8811 	msr	BASEPRI, r3
 800d560:	f3bf 8f6f 	isb	sy
 800d564:	f3bf 8f4f 	dsb	sy
 800d568:	61bb      	str	r3, [r7, #24]
}
 800d56a:	bf00      	nop
 800d56c:	bf00      	nop
 800d56e:	e7fd      	b.n	800d56c <xQueueGenericCreateStatic+0xc4>
        (void)xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d570:	697b      	ldr	r3, [r7, #20]
#endif /* configASSERT_DEFINED */

    /* The address of a statically allocated queue was passed in, use it.
    The address of a statically allocated storage area was also passed in
    but is already set. */
    pxNewQueue = (Queue_t *)pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (pxNewQueue != NULL) {
 800d576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d00d      	beq.n	800d598 <xQueueGenericCreateStatic+0xf0>
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
        {
            /* Queues can be allocated wither statically or dynamically, so
            note this queue was allocated statically in case the queue is
            later deleted. */
            pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d57c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d57e:	2201      	movs	r2, #1
 800d580:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
        }
#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

        prvInitialiseNewQueue(uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue);
 800d584:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d58a:	9300      	str	r3, [sp, #0]
 800d58c:	4613      	mov	r3, r2
 800d58e:	687a      	ldr	r2, [r7, #4]
 800d590:	68b9      	ldr	r1, [r7, #8]
 800d592:	68f8      	ldr	r0, [r7, #12]
 800d594:	f000 f805 	bl	800d5a2 <prvInitialiseNewQueue>
    } else {
        traceQUEUE_CREATE_FAILED(ucQueueType);
        mtCOVERAGE_TEST_MARKER();
    }

    return pxNewQueue;
 800d598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	3730      	adds	r7, #48	@ 0x30
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}

0800d5a2 <prvInitialiseNewQueue>:
}

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue(const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t * pucQueueStorage, const uint8_t ucQueueType, Queue_t * pxNewQueue) {
 800d5a2:	b580      	push	{r7, lr}
 800d5a4:	b084      	sub	sp, #16
 800d5a6:	af00      	add	r7, sp, #0
 800d5a8:	60f8      	str	r0, [r7, #12]
 800d5aa:	60b9      	str	r1, [r7, #8]
 800d5ac:	607a      	str	r2, [r7, #4]
 800d5ae:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
    configUSE_TRACE_FACILITY not be set to 1. */
    (void)ucQueueType;

    if (uxItemSize == (UBaseType_t)0) {
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d103      	bne.n	800d5be <prvInitialiseNewQueue+0x1c>
        /* No RAM was allocated for the queue storage area, but PC head cannot
        be set to NULL because NULL is used as a key to say the queue is used as
        a mutex.  Therefore just set pcHead to point to the queue as a benign
        value that is known to be within the memory map. */
        pxNewQueue->pcHead = (int8_t *)pxNewQueue;
 800d5b6:	69bb      	ldr	r3, [r7, #24]
 800d5b8:	69ba      	ldr	r2, [r7, #24]
 800d5ba:	601a      	str	r2, [r3, #0]
 800d5bc:	e002      	b.n	800d5c4 <prvInitialiseNewQueue+0x22>
    } else {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = (int8_t *)pucQueueStorage;
 800d5be:	69bb      	ldr	r3, [r7, #24]
 800d5c0:	687a      	ldr	r2, [r7, #4]
 800d5c2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
    defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800d5c4:	69bb      	ldr	r3, [r7, #24]
 800d5c6:	68fa      	ldr	r2, [r7, #12]
 800d5c8:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800d5ca:	69bb      	ldr	r3, [r7, #24]
 800d5cc:	68ba      	ldr	r2, [r7, #8]
 800d5ce:	641a      	str	r2, [r3, #64]	@ 0x40
    (void)xQueueGenericReset(pxNewQueue, pdTRUE);
 800d5d0:	2101      	movs	r1, #1
 800d5d2:	69b8      	ldr	r0, [r7, #24]
 800d5d4:	f7ff fefe 	bl	800d3d4 <xQueueGenericReset>
#if (configUSE_QUEUE_SETS == 1)
    { pxNewQueue->pxQueueSetContainer = NULL; }
#endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE(pxNewQueue);
}
 800d5d8:	bf00      	nop
 800d5da:	3710      	adds	r7, #16
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <xQueueGenericSend>:
}

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend(QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition) {
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b08e      	sub	sp, #56	@ 0x38
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	60f8      	str	r0, [r7, #12]
 800d5e8:	60b9      	str	r1, [r7, #8]
 800d5ea:	607a      	str	r2, [r7, #4]
 800d5ec:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT(pxQueue);
 800d5f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d10b      	bne.n	800d614 <xQueueGenericSend+0x34>
    __asm volatile("	mov %0, %1												\n"
 800d5fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d600:	f383 8811 	msr	BASEPRI, r3
 800d604:	f3bf 8f6f 	isb	sy
 800d608:	f3bf 8f4f 	dsb	sy
 800d60c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d60e:	bf00      	nop
 800d610:	bf00      	nop
 800d612:	e7fd      	b.n	800d610 <xQueueGenericSend+0x30>
    configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d103      	bne.n	800d622 <xQueueGenericSend+0x42>
 800d61a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d61c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d101      	bne.n	800d626 <xQueueGenericSend+0x46>
 800d622:	2301      	movs	r3, #1
 800d624:	e000      	b.n	800d628 <xQueueGenericSend+0x48>
 800d626:	2300      	movs	r3, #0
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d10b      	bne.n	800d644 <xQueueGenericSend+0x64>
    __asm volatile("	mov %0, %1												\n"
 800d62c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d630:	f383 8811 	msr	BASEPRI, r3
 800d634:	f3bf 8f6f 	isb	sy
 800d638:	f3bf 8f4f 	dsb	sy
 800d63c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d63e:	bf00      	nop
 800d640:	bf00      	nop
 800d642:	e7fd      	b.n	800d640 <xQueueGenericSend+0x60>
    configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	2b02      	cmp	r3, #2
 800d648:	d103      	bne.n	800d652 <xQueueGenericSend+0x72>
 800d64a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d64c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d64e:	2b01      	cmp	r3, #1
 800d650:	d101      	bne.n	800d656 <xQueueGenericSend+0x76>
 800d652:	2301      	movs	r3, #1
 800d654:	e000      	b.n	800d658 <xQueueGenericSend+0x78>
 800d656:	2300      	movs	r3, #0
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d10b      	bne.n	800d674 <xQueueGenericSend+0x94>
    __asm volatile("	mov %0, %1												\n"
 800d65c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d660:	f383 8811 	msr	BASEPRI, r3
 800d664:	f3bf 8f6f 	isb	sy
 800d668:	f3bf 8f4f 	dsb	sy
 800d66c:	623b      	str	r3, [r7, #32]
}
 800d66e:	bf00      	nop
 800d670:	bf00      	nop
 800d672:	e7fd      	b.n	800d670 <xQueueGenericSend+0x90>
#if ((INCLUDE_xTaskGetSchedulerState == 1) || (configUSE_TIMERS == 1))
    { configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0))); }
 800d674:	f001 face 	bl	800ec14 <xTaskGetSchedulerState>
 800d678:	4603      	mov	r3, r0
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d102      	bne.n	800d684 <xQueueGenericSend+0xa4>
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d101      	bne.n	800d688 <xQueueGenericSend+0xa8>
 800d684:	2301      	movs	r3, #1
 800d686:	e000      	b.n	800d68a <xQueueGenericSend+0xaa>
 800d688:	2300      	movs	r3, #0
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d10b      	bne.n	800d6a6 <xQueueGenericSend+0xc6>
    __asm volatile("	mov %0, %1												\n"
 800d68e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d692:	f383 8811 	msr	BASEPRI, r3
 800d696:	f3bf 8f6f 	isb	sy
 800d69a:	f3bf 8f4f 	dsb	sy
 800d69e:	61fb      	str	r3, [r7, #28]
}
 800d6a0:	bf00      	nop
 800d6a2:	bf00      	nop
 800d6a4:	e7fd      	b.n	800d6a2 <xQueueGenericSend+0xc2>

    /*lint -save -e904 This function relaxes the coding standard somewhat to
    allow return statements within the function itself.  This is done in the
    interest of execution time efficiency. */
    for (;;) {
        taskENTER_CRITICAL();
 800d6a6:	f002 f867 	bl	800f778 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
            highest priority task wanting to access the queue.  If the head item
            in the queue is to be overwritten then it does not matter if the
            queue is full. */
            if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
 800d6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d302      	bcc.n	800d6bc <xQueueGenericSend+0xdc>
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	2b02      	cmp	r3, #2
 800d6ba:	d129      	bne.n	800d710 <xQueueGenericSend+0x130>
                        }
                    }
                }
#else  /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
 800d6bc:	683a      	ldr	r2, [r7, #0]
 800d6be:	68b9      	ldr	r1, [r7, #8]
 800d6c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d6c2:	f000 fa0f 	bl	800dae4 <prvCopyDataToQueue>
 800d6c6:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                    queue then unblock it now. */
                    if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
 800d6c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d010      	beq.n	800d6f2 <xQueueGenericSend+0x112>
                        if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
 800d6d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6d2:	3324      	adds	r3, #36	@ 0x24
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f001 f8dd 	bl	800e894 <xTaskRemoveFromEventList>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d013      	beq.n	800d708 <xQueueGenericSend+0x128>
                            /* The unblocked task has a priority higher than
                            our own so yield immediately.  Yes it is ok to do
                            this from within the critical section - the kernel
                            takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800d6e0:	4b3f      	ldr	r3, [pc, #252]	@ (800d7e0 <xQueueGenericSend+0x200>)
 800d6e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6e6:	601a      	str	r2, [r3, #0]
 800d6e8:	f3bf 8f4f 	dsb	sy
 800d6ec:	f3bf 8f6f 	isb	sy
 800d6f0:	e00a      	b.n	800d708 <xQueueGenericSend+0x128>
                        } else {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    } else if (xYieldRequired != pdFALSE) {
 800d6f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d007      	beq.n	800d708 <xQueueGenericSend+0x128>
                        /* This path is a special case that will only get
                        executed if the task was holding multiple mutexes and
                        the mutexes were given back in an order that is
                        different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800d6f8:	4b39      	ldr	r3, [pc, #228]	@ (800d7e0 <xQueueGenericSend+0x200>)
 800d6fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6fe:	601a      	str	r2, [r3, #0]
 800d700:	f3bf 8f4f 	dsb	sy
 800d704:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
#endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800d708:	f002 f868 	bl	800f7dc <vPortExitCritical>
                return pdPASS;
 800d70c:	2301      	movs	r3, #1
 800d70e:	e063      	b.n	800d7d8 <xQueueGenericSend+0x1f8>
            } else {
                if (xTicksToWait == (TickType_t)0) {
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d103      	bne.n	800d71e <xQueueGenericSend+0x13e>
                    /* The queue was full and no block time is specified (or
                    the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800d716:	f002 f861 	bl	800f7dc <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                    the function. */
                    traceQUEUE_SEND_FAILED(pxQueue);
                    return errQUEUE_FULL;
 800d71a:	2300      	movs	r3, #0
 800d71c:	e05c      	b.n	800d7d8 <xQueueGenericSend+0x1f8>
                } else if (xEntryTimeSet == pdFALSE) {
 800d71e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d720:	2b00      	cmp	r3, #0
 800d722:	d106      	bne.n	800d732 <xQueueGenericSend+0x152>
                    /* The queue was full and a block time was specified so
                    configure the timeout structure. */
                    vTaskInternalSetTimeOutState(&xTimeOut);
 800d724:	f107 0314 	add.w	r3, r7, #20
 800d728:	4618      	mov	r0, r3
 800d72a:	f001 f917 	bl	800e95c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800d72e:	2301      	movs	r3, #1
 800d730:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800d732:	f002 f853 	bl	800f7dc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
        now the critical section has been exited. */

        vTaskSuspendAll();
 800d736:	f000 fe89 	bl	800e44c <vTaskSuspendAll>
        prvLockQueue(pxQueue);
 800d73a:	f002 f81d 	bl	800f778 <vPortEnterCritical>
 800d73e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d740:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d744:	b25b      	sxtb	r3, r3
 800d746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d74a:	d103      	bne.n	800d754 <xQueueGenericSend+0x174>
 800d74c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d74e:	2200      	movs	r2, #0
 800d750:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d756:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d75a:	b25b      	sxtb	r3, r3
 800d75c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d760:	d103      	bne.n	800d76a <xQueueGenericSend+0x18a>
 800d762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d764:	2200      	movs	r2, #0
 800d766:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d76a:	f002 f837 	bl	800f7dc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
 800d76e:	1d3a      	adds	r2, r7, #4
 800d770:	f107 0314 	add.w	r3, r7, #20
 800d774:	4611      	mov	r1, r2
 800d776:	4618      	mov	r0, r3
 800d778:	f001 f906 	bl	800e988 <xTaskCheckForTimeOut>
 800d77c:	4603      	mov	r3, r0
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d124      	bne.n	800d7cc <xQueueGenericSend+0x1ec>
            if (prvIsQueueFull(pxQueue) != pdFALSE) {
 800d782:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d784:	f000 fa98 	bl	800dcb8 <prvIsQueueFull>
 800d788:	4603      	mov	r3, r0
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d018      	beq.n	800d7c0 <xQueueGenericSend+0x1e0>
                traceBLOCKING_ON_QUEUE_SEND(pxQueue);
                vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend), xTicksToWait);
 800d78e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d790:	3310      	adds	r3, #16
 800d792:	687a      	ldr	r2, [r7, #4]
 800d794:	4611      	mov	r1, r2
 800d796:	4618      	mov	r0, r3
 800d798:	f001 f82a 	bl	800e7f0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                event list.  It is possible that interrupts occurring now
                remove this task from the event list again - but as the
                scheduler is suspended the task will go onto the pending
                ready last instead of the actual ready list. */
                prvUnlockQueue(pxQueue);
 800d79c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d79e:	f000 fa23 	bl	800dbe8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                ready list into the ready list - so it is feasible that this
                task is already in a ready list before it yields - in which
                case the yield will not cause a context switch unless there
                is also a higher priority task in the pending ready list. */
                if (xTaskResumeAll() == pdFALSE) {
 800d7a2:	f000 fe61 	bl	800e468 <xTaskResumeAll>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	f47f af7c 	bne.w	800d6a6 <xQueueGenericSend+0xc6>
                    portYIELD_WITHIN_API();
 800d7ae:	4b0c      	ldr	r3, [pc, #48]	@ (800d7e0 <xQueueGenericSend+0x200>)
 800d7b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d7b4:	601a      	str	r2, [r3, #0]
 800d7b6:	f3bf 8f4f 	dsb	sy
 800d7ba:	f3bf 8f6f 	isb	sy
 800d7be:	e772      	b.n	800d6a6 <xQueueGenericSend+0xc6>
                }
            } else {
                /* Try again. */
                prvUnlockQueue(pxQueue);
 800d7c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d7c2:	f000 fa11 	bl	800dbe8 <prvUnlockQueue>
                (void)xTaskResumeAll();
 800d7c6:	f000 fe4f 	bl	800e468 <xTaskResumeAll>
 800d7ca:	e76c      	b.n	800d6a6 <xQueueGenericSend+0xc6>
            }
        } else {
            /* The timeout has expired. */
            prvUnlockQueue(pxQueue);
 800d7cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d7ce:	f000 fa0b 	bl	800dbe8 <prvUnlockQueue>
            (void)xTaskResumeAll();
 800d7d2:	f000 fe49 	bl	800e468 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED(pxQueue);
            return errQUEUE_FULL;
 800d7d6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3738      	adds	r7, #56	@ 0x38
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}
 800d7e0:	e000ed04 	.word	0xe000ed04

0800d7e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR(QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition) {
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b090      	sub	sp, #64	@ 0x40
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	60f8      	str	r0, [r7, #12]
 800d7ec:	60b9      	str	r1, [r7, #8]
 800d7ee:	607a      	str	r2, [r7, #4]
 800d7f0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT(pxQueue);
 800d7f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d10b      	bne.n	800d814 <xQueueGenericSendFromISR+0x30>
    __asm volatile("	mov %0, %1												\n"
 800d7fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d800:	f383 8811 	msr	BASEPRI, r3
 800d804:	f3bf 8f6f 	isb	sy
 800d808:	f3bf 8f4f 	dsb	sy
 800d80c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d80e:	bf00      	nop
 800d810:	bf00      	nop
 800d812:	e7fd      	b.n	800d810 <xQueueGenericSendFromISR+0x2c>
    configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d103      	bne.n	800d822 <xQueueGenericSendFromISR+0x3e>
 800d81a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d81c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d101      	bne.n	800d826 <xQueueGenericSendFromISR+0x42>
 800d822:	2301      	movs	r3, #1
 800d824:	e000      	b.n	800d828 <xQueueGenericSendFromISR+0x44>
 800d826:	2300      	movs	r3, #0
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d10b      	bne.n	800d844 <xQueueGenericSendFromISR+0x60>
    __asm volatile("	mov %0, %1												\n"
 800d82c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d830:	f383 8811 	msr	BASEPRI, r3
 800d834:	f3bf 8f6f 	isb	sy
 800d838:	f3bf 8f4f 	dsb	sy
 800d83c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d83e:	bf00      	nop
 800d840:	bf00      	nop
 800d842:	e7fd      	b.n	800d840 <xQueueGenericSendFromISR+0x5c>
    configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	2b02      	cmp	r3, #2
 800d848:	d103      	bne.n	800d852 <xQueueGenericSendFromISR+0x6e>
 800d84a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d84c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d84e:	2b01      	cmp	r3, #1
 800d850:	d101      	bne.n	800d856 <xQueueGenericSendFromISR+0x72>
 800d852:	2301      	movs	r3, #1
 800d854:	e000      	b.n	800d858 <xQueueGenericSendFromISR+0x74>
 800d856:	2300      	movs	r3, #0
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d10b      	bne.n	800d874 <xQueueGenericSendFromISR+0x90>
    __asm volatile("	mov %0, %1												\n"
 800d85c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d860:	f383 8811 	msr	BASEPRI, r3
 800d864:	f3bf 8f6f 	isb	sy
 800d868:	f3bf 8f4f 	dsb	sy
 800d86c:	623b      	str	r3, [r7, #32]
}
 800d86e:	bf00      	nop
 800d870:	bf00      	nop
 800d872:	e7fd      	b.n	800d870 <xQueueGenericSendFromISR+0x8c>
    that have been assigned a priority at or (logically) below the maximum
    system call	interrupt priority.  FreeRTOS maintains a separate interrupt
    safe API to ensure interrupt entry is as fast and as simple as possible.
    More information (albeit Cortex-M specific) is provided on the following
    link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d874:	f002 f860 	bl	800f938 <vPortValidateInterruptPriority>
/*-----------------------------------------------------------*/

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI(void) {
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile("	mrs %0, basepri											\n"
 800d878:	f3ef 8211 	mrs	r2, BASEPRI
 800d87c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d880:	f383 8811 	msr	BASEPRI, r3
 800d884:	f3bf 8f6f 	isb	sy
 800d888:	f3bf 8f4f 	dsb	sy
 800d88c:	61fa      	str	r2, [r7, #28]
 800d88e:	61bb      	str	r3, [r7, #24]
                   : "i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
                   : "memory");

    /* This return will not be reached but is necessary to prevent compiler
    warnings. */
    return ulOriginalBASEPRI;
 800d890:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
    in the queue.  Also don't directly wake a task that was blocked on a queue
    read, instead return a flag to say whether a context switch is required or
    not (i.e. has a task with a higher priority than us been woken by this
    post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d892:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
 800d894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d896:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d89a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d302      	bcc.n	800d8a6 <xQueueGenericSendFromISR+0xc2>
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	2b02      	cmp	r3, #2
 800d8a4:	d12f      	bne.n	800d906 <xQueueGenericSendFromISR+0x122>
            const int8_t cTxLock = pxQueue->cTxLock;
 800d8a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d8ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d8b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
            semaphore or mutex.  That means prvCopyDataToQueue() cannot result
            in a task disinheriting a priority and prvCopyDataToQueue() can be
            called here even though the disinherit function does not check if
            the scheduler is suspended before accessing the ready lists. */
            (void)prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
 800d8b6:	683a      	ldr	r2, [r7, #0]
 800d8b8:	68b9      	ldr	r1, [r7, #8]
 800d8ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d8bc:	f000 f912 	bl	800dae4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
            be done when the queue is unlocked later. */
            if (cTxLock == queueUNLOCKED) {
 800d8c0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d8c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8c8:	d112      	bne.n	800d8f0 <xQueueGenericSendFromISR+0x10c>
                        }
                    }
                }
#else  /* configUSE_QUEUE_SETS */
                {
                    if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
 800d8ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d016      	beq.n	800d900 <xQueueGenericSendFromISR+0x11c>
                        if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
 800d8d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8d4:	3324      	adds	r3, #36	@ 0x24
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f000 ffdc 	bl	800e894 <xTaskRemoveFromEventList>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d00e      	beq.n	800d900 <xQueueGenericSendFromISR+0x11c>
                            /* The task waiting has a higher priority so record that a
                            context	switch is required. */
                            if (pxHigherPriorityTaskWoken != NULL) {
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d00b      	beq.n	800d900 <xQueueGenericSendFromISR+0x11c>
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2201      	movs	r2, #1
 800d8ec:	601a      	str	r2, [r3, #0]
 800d8ee:	e007      	b.n	800d900 <xQueueGenericSendFromISR+0x11c>
                }
#endif /* configUSE_QUEUE_SETS */
            } else {
                /* Increment the lock count so the task that unlocks the queue
                knows that data was posted while it was locked. */
                pxQueue->cTxLock = (int8_t)(cTxLock + 1);
 800d8f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d8f4:	3301      	adds	r3, #1
 800d8f6:	b2db      	uxtb	r3, r3
 800d8f8:	b25a      	sxtb	r2, r3
 800d8fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 800d900:	2301      	movs	r3, #1
 800d902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
 800d904:	e001      	b.n	800d90a <xQueueGenericSendFromISR+0x126>
        } else {
            traceQUEUE_SEND_FROM_ISR_FAILED(pxQueue);
            xReturn = errQUEUE_FULL;
 800d906:	2300      	movs	r3, #0
 800d908:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d90a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d90c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue) {
    __asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	f383 8811 	msr	BASEPRI, r3
}
 800d914:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);

    return xReturn;
 800d916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3740      	adds	r7, #64	@ 0x40
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}

0800d920 <xQueueReceive>:

    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive(QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait) {
 800d920:	b580      	push	{r7, lr}
 800d922:	b08c      	sub	sp, #48	@ 0x30
 800d924:	af00      	add	r7, sp, #0
 800d926:	60f8      	str	r0, [r7, #12]
 800d928:	60b9      	str	r1, [r7, #8]
 800d92a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800d92c:	2300      	movs	r3, #0
 800d92e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT((pxQueue));
 800d934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d936:	2b00      	cmp	r3, #0
 800d938:	d10b      	bne.n	800d952 <xQueueReceive+0x32>
    __asm volatile("	mov %0, %1												\n"
 800d93a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d93e:	f383 8811 	msr	BASEPRI, r3
 800d942:	f3bf 8f6f 	isb	sy
 800d946:	f3bf 8f4f 	dsb	sy
 800d94a:	623b      	str	r3, [r7, #32]
}
 800d94c:	bf00      	nop
 800d94e:	bf00      	nop
 800d950:	e7fd      	b.n	800d94e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
    is zero (so no data is copied into the buffer. */
    configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d103      	bne.n	800d960 <xQueueReceive+0x40>
 800d958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d95a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d101      	bne.n	800d964 <xQueueReceive+0x44>
 800d960:	2301      	movs	r3, #1
 800d962:	e000      	b.n	800d966 <xQueueReceive+0x46>
 800d964:	2300      	movs	r3, #0
 800d966:	2b00      	cmp	r3, #0
 800d968:	d10b      	bne.n	800d982 <xQueueReceive+0x62>
    __asm volatile("	mov %0, %1												\n"
 800d96a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d96e:	f383 8811 	msr	BASEPRI, r3
 800d972:	f3bf 8f6f 	isb	sy
 800d976:	f3bf 8f4f 	dsb	sy
 800d97a:	61fb      	str	r3, [r7, #28]
}
 800d97c:	bf00      	nop
 800d97e:	bf00      	nop
 800d980:	e7fd      	b.n	800d97e <xQueueReceive+0x5e>

/* Cannot block if the scheduler is suspended. */
#if ((INCLUDE_xTaskGetSchedulerState == 1) || (configUSE_TIMERS == 1))
    { configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0))); }
 800d982:	f001 f947 	bl	800ec14 <xTaskGetSchedulerState>
 800d986:	4603      	mov	r3, r0
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d102      	bne.n	800d992 <xQueueReceive+0x72>
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d101      	bne.n	800d996 <xQueueReceive+0x76>
 800d992:	2301      	movs	r3, #1
 800d994:	e000      	b.n	800d998 <xQueueReceive+0x78>
 800d996:	2300      	movs	r3, #0
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d10b      	bne.n	800d9b4 <xQueueReceive+0x94>
    __asm volatile("	mov %0, %1												\n"
 800d99c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9a0:	f383 8811 	msr	BASEPRI, r3
 800d9a4:	f3bf 8f6f 	isb	sy
 800d9a8:	f3bf 8f4f 	dsb	sy
 800d9ac:	61bb      	str	r3, [r7, #24]
}
 800d9ae:	bf00      	nop
 800d9b0:	bf00      	nop
 800d9b2:	e7fd      	b.n	800d9b0 <xQueueReceive+0x90>

    /*lint -save -e904  This function relaxes the coding standard somewhat to
    allow return statements within the function itself.  This is done in the
    interest of execution time efficiency. */
    for (;;) {
        taskENTER_CRITICAL();
 800d9b4:	f001 fee0 	bl	800f778 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d9b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9bc:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
            must be the highest priority task wanting to access the queue. */
            if (uxMessagesWaiting > (UBaseType_t)0) {
 800d9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d01f      	beq.n	800da04 <xQueueReceive+0xe4>
                /* Data available, remove one item. */
                prvCopyDataFromQueue(pxQueue, pvBuffer);
 800d9c4:	68b9      	ldr	r1, [r7, #8]
 800d9c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9c8:	f000 f8e8 	bl	800db9c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE(pxQueue);
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - (UBaseType_t)1;
 800d9cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ce:	1e5a      	subs	r2, r3, #1
 800d9d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9d2:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                post to the queue?  If so, unblock the highest priority waiting
                task. */
                if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
 800d9d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9d6:	691b      	ldr	r3, [r3, #16]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d00f      	beq.n	800d9fc <xQueueReceive+0xdc>
                    if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
 800d9dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9de:	3310      	adds	r3, #16
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f000 ff57 	bl	800e894 <xTaskRemoveFromEventList>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d007      	beq.n	800d9fc <xQueueReceive+0xdc>
                        queueYIELD_IF_USING_PREEMPTION();
 800d9ec:	4b3c      	ldr	r3, [pc, #240]	@ (800dae0 <xQueueReceive+0x1c0>)
 800d9ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9f2:	601a      	str	r2, [r3, #0]
 800d9f4:	f3bf 8f4f 	dsb	sy
 800d9f8:	f3bf 8f6f 	isb	sy
                    }
                } else {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800d9fc:	f001 feee 	bl	800f7dc <vPortExitCritical>
                return pdPASS;
 800da00:	2301      	movs	r3, #1
 800da02:	e069      	b.n	800dad8 <xQueueReceive+0x1b8>
            } else {
                if (xTicksToWait == (TickType_t)0) {
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d103      	bne.n	800da12 <xQueueReceive+0xf2>
                    /* The queue was empty and no block time is specified (or
                    the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800da0a:	f001 fee7 	bl	800f7dc <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED(pxQueue);
                    return errQUEUE_EMPTY;
 800da0e:	2300      	movs	r3, #0
 800da10:	e062      	b.n	800dad8 <xQueueReceive+0x1b8>
                } else if (xEntryTimeSet == pdFALSE) {
 800da12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da14:	2b00      	cmp	r3, #0
 800da16:	d106      	bne.n	800da26 <xQueueReceive+0x106>
                    /* The queue was empty and a block time was specified so
                    configure the timeout structure. */
                    vTaskInternalSetTimeOutState(&xTimeOut);
 800da18:	f107 0310 	add.w	r3, r7, #16
 800da1c:	4618      	mov	r0, r3
 800da1e:	f000 ff9d 	bl	800e95c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800da22:	2301      	movs	r3, #1
 800da24:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800da26:	f001 fed9 	bl	800f7dc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
        now the critical section has been exited. */

        vTaskSuspendAll();
 800da2a:	f000 fd0f 	bl	800e44c <vTaskSuspendAll>
        prvLockQueue(pxQueue);
 800da2e:	f001 fea3 	bl	800f778 <vPortEnterCritical>
 800da32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800da38:	b25b      	sxtb	r3, r3
 800da3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da3e:	d103      	bne.n	800da48 <xQueueReceive+0x128>
 800da40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da42:	2200      	movs	r2, #0
 800da44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800da48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800da4e:	b25b      	sxtb	r3, r3
 800da50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da54:	d103      	bne.n	800da5e <xQueueReceive+0x13e>
 800da56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da58:	2200      	movs	r2, #0
 800da5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800da5e:	f001 febd 	bl	800f7dc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
 800da62:	1d3a      	adds	r2, r7, #4
 800da64:	f107 0310 	add.w	r3, r7, #16
 800da68:	4611      	mov	r1, r2
 800da6a:	4618      	mov	r0, r3
 800da6c:	f000 ff8c 	bl	800e988 <xTaskCheckForTimeOut>
 800da70:	4603      	mov	r3, r0
 800da72:	2b00      	cmp	r3, #0
 800da74:	d123      	bne.n	800dabe <xQueueReceive+0x19e>
            /* The timeout has not expired.  If the queue is still empty place
            the task on the list of tasks waiting to receive from the queue. */
            if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
 800da76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da78:	f000 f908 	bl	800dc8c <prvIsQueueEmpty>
 800da7c:	4603      	mov	r3, r0
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d017      	beq.n	800dab2 <xQueueReceive+0x192>
                traceBLOCKING_ON_QUEUE_RECEIVE(pxQueue);
                vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
 800da82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da84:	3324      	adds	r3, #36	@ 0x24
 800da86:	687a      	ldr	r2, [r7, #4]
 800da88:	4611      	mov	r1, r2
 800da8a:	4618      	mov	r0, r3
 800da8c:	f000 feb0 	bl	800e7f0 <vTaskPlaceOnEventList>
                prvUnlockQueue(pxQueue);
 800da90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da92:	f000 f8a9 	bl	800dbe8 <prvUnlockQueue>
                if (xTaskResumeAll() == pdFALSE) {
 800da96:	f000 fce7 	bl	800e468 <xTaskResumeAll>
 800da9a:	4603      	mov	r3, r0
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d189      	bne.n	800d9b4 <xQueueReceive+0x94>
                    portYIELD_WITHIN_API();
 800daa0:	4b0f      	ldr	r3, [pc, #60]	@ (800dae0 <xQueueReceive+0x1c0>)
 800daa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800daa6:	601a      	str	r2, [r3, #0]
 800daa8:	f3bf 8f4f 	dsb	sy
 800daac:	f3bf 8f6f 	isb	sy
 800dab0:	e780      	b.n	800d9b4 <xQueueReceive+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } else {
                /* The queue contains data again.  Loop back to try and read the
                data. */
                prvUnlockQueue(pxQueue);
 800dab2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dab4:	f000 f898 	bl	800dbe8 <prvUnlockQueue>
                (void)xTaskResumeAll();
 800dab8:	f000 fcd6 	bl	800e468 <xTaskResumeAll>
 800dabc:	e77a      	b.n	800d9b4 <xQueueReceive+0x94>
            }
        } else {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
            back and attempt to read the data. */
            prvUnlockQueue(pxQueue);
 800dabe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dac0:	f000 f892 	bl	800dbe8 <prvUnlockQueue>
            (void)xTaskResumeAll();
 800dac4:	f000 fcd0 	bl	800e468 <xTaskResumeAll>

            if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
 800dac8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800daca:	f000 f8df 	bl	800dc8c <prvIsQueueEmpty>
 800dace:	4603      	mov	r3, r0
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	f43f af6f 	beq.w	800d9b4 <xQueueReceive+0x94>
                traceQUEUE_RECEIVE_FAILED(pxQueue);
                return errQUEUE_EMPTY;
 800dad6:	2300      	movs	r3, #0
            } else {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3730      	adds	r7, #48	@ 0x30
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}
 800dae0:	e000ed04 	.word	0xe000ed04

0800dae4 <prvCopyDataToQueue>:
}

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue(Queue_t * const pxQueue, const void * pvItemToQueue, const BaseType_t xPosition) {
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b086      	sub	sp, #24
 800dae8:	af00      	add	r7, sp, #0
 800daea:	60f8      	str	r0, [r7, #12]
 800daec:	60b9      	str	r1, [r7, #8]
 800daee:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800daf0:	2300      	movs	r3, #0
 800daf2:	613b      	str	r3, [r7, #16]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daf8:	617b      	str	r3, [r7, #20]

    if (pxQueue->uxItemSize == (UBaseType_t)0) {
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d043      	beq.n	800db8a <prvCopyDataToQueue+0xa6>
            } else {
                mtCOVERAGE_TEST_MARKER();
            }
        }
#endif /* configUSE_MUTEXES */
    } else if (xPosition == queueSEND_TO_BACK) {
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d119      	bne.n	800db3c <prvCopyDataToQueue+0x58>
        (void)memcpy((void *)pxQueue->pcWriteTo, pvItemToQueue, (size_t)pxQueue->uxItemSize); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	6858      	ldr	r0, [r3, #4]
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db10:	461a      	mov	r2, r3
 800db12:	68b9      	ldr	r1, [r7, #8]
 800db14:	f003 fb5f 	bl	80111d6 <memcpy>
                                                                                                 memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                            /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	685a      	ldr	r2, [r3, #4]
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db20:	441a      	add	r2, r3
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	605a      	str	r2, [r3, #4]
        if (pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail)                                   /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	685a      	ldr	r2, [r3, #4]
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	689b      	ldr	r3, [r3, #8]
 800db2e:	429a      	cmp	r2, r3
 800db30:	d32b      	bcc.n	800db8a <prvCopyDataToQueue+0xa6>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	681a      	ldr	r2, [r3, #0]
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	605a      	str	r2, [r3, #4]
 800db3a:	e026      	b.n	800db8a <prvCopyDataToQueue+0xa6>
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    } else {
        (void)memcpy((void *)pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, (size_t)pxQueue->uxItemSize); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	68d8      	ldr	r0, [r3, #12]
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db44:	461a      	mov	r2, r3
 800db46:	68b9      	ldr	r1, [r7, #8]
 800db48:	f003 fb45 	bl	80111d6 <memcpy>
                                                                                                           no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	68da      	ldr	r2, [r3, #12]
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db54:	425b      	negs	r3, r3
 800db56:	441a      	add	r2, r3
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	60da      	str	r2, [r3, #12]
        if (pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	68da      	ldr	r2, [r3, #12]
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	429a      	cmp	r2, r3
 800db66:	d207      	bcs.n	800db78 <prvCopyDataToQueue+0x94>
        {
            pxQueue->u.xQueue.pcReadFrom = (pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize);
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	689a      	ldr	r2, [r3, #8]
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db70:	425b      	negs	r3, r3
 800db72:	441a      	add	r2, r3
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	60da      	str	r2, [r3, #12]
        } else {
            mtCOVERAGE_TEST_MARKER();
        }

        if (xPosition == queueOVERWRITE) {
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2b02      	cmp	r3, #2
 800db7c:	d105      	bne.n	800db8a <prvCopyDataToQueue+0xa6>
            if (uxMessagesWaiting > (UBaseType_t)0) {
 800db7e:	697b      	ldr	r3, [r7, #20]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d002      	beq.n	800db8a <prvCopyDataToQueue+0xa6>
                /* An item is not being added but overwritten, so subtract
                one from the recorded number of items in the queue so when
                one is added again below the number of recorded items remains
                correct. */
                --uxMessagesWaiting;
 800db84:	697b      	ldr	r3, [r7, #20]
 800db86:	3b01      	subs	r3, #1
 800db88:	617b      	str	r3, [r7, #20]
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t)1;
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	1c5a      	adds	r2, r3, #1
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800db92:	693b      	ldr	r3, [r7, #16]
}
 800db94:	4618      	mov	r0, r3
 800db96:	3718      	adds	r7, #24
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}

0800db9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue(Queue_t * const pxQueue, void * const pvBuffer) {
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b082      	sub	sp, #8
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	6039      	str	r1, [r7, #0]
    if (pxQueue->uxItemSize != (UBaseType_t)0) {
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d018      	beq.n	800dbe0 <prvCopyDataFromQueue+0x44>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;          /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	68da      	ldr	r2, [r3, #12]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbb6:	441a      	add	r2, r3
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	60da      	str	r2, [r3, #12]
        if (pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	68da      	ldr	r2, [r3, #12]
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	689b      	ldr	r3, [r3, #8]
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d303      	bcc.n	800dbd0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681a      	ldr	r2, [r3, #0]
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	60da      	str	r2, [r3, #12]
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
        (void)memcpy((void *)pvBuffer, (void *)pxQueue->u.xQueue.pcReadFrom,
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	68d9      	ldr	r1, [r3, #12]
                     (size_t)pxQueue->uxItemSize); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        (void)memcpy((void *)pvBuffer, (void *)pxQueue->u.xQueue.pcReadFrom,
 800dbd8:	461a      	mov	r2, r3
 800dbda:	6838      	ldr	r0, [r7, #0]
 800dbdc:	f003 fafb 	bl	80111d6 <memcpy>
                                                      required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    }
}
 800dbe0:	bf00      	nop
 800dbe2:	3708      	adds	r7, #8
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}

0800dbe8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue(Queue_t * const pxQueue) {
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b084      	sub	sp, #16
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
    removed from the queue while the queue was locked.  When a queue is
    locked items can be added or removed, but the event lists cannot be
    updated. */
    taskENTER_CRITICAL();
 800dbf0:	f001 fdc2 	bl	800f778 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dbfa:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while (cTxLock > queueLOCKED_UNMODIFIED) {
 800dbfc:	e011      	b.n	800dc22 <prvUnlockQueue+0x3a>
            }
#else  /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                the pending ready list as the scheduler is still suspended. */
                if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d012      	beq.n	800dc2c <prvUnlockQueue+0x44>
                    if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	3324      	adds	r3, #36	@ 0x24
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f000 fe42 	bl	800e894 <xTaskRemoveFromEventList>
 800dc10:	4603      	mov	r3, r0
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d001      	beq.n	800dc1a <prvUnlockQueue+0x32>
                        /* The task waiting has a higher priority so record that
                        a context switch is required. */
                        vTaskMissedYield();
 800dc16:	f000 ff1b 	bl	800ea50 <vTaskMissedYield>
                    break;
                }
            }
#endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800dc1a:	7bfb      	ldrb	r3, [r7, #15]
 800dc1c:	3b01      	subs	r3, #1
 800dc1e:	b2db      	uxtb	r3, r3
 800dc20:	73fb      	strb	r3, [r7, #15]
        while (cTxLock > queueLOCKED_UNMODIFIED) {
 800dc22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	dce9      	bgt.n	800dbfe <prvUnlockQueue+0x16>
 800dc2a:	e000      	b.n	800dc2e <prvUnlockQueue+0x46>
                    break;
 800dc2c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	22ff      	movs	r2, #255	@ 0xff
 800dc32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800dc36:	f001 fdd1 	bl	800f7dc <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800dc3a:	f001 fd9d 	bl	800f778 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dc44:	73bb      	strb	r3, [r7, #14]

        while (cRxLock > queueLOCKED_UNMODIFIED) {
 800dc46:	e011      	b.n	800dc6c <prvUnlockQueue+0x84>
            if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	691b      	ldr	r3, [r3, #16]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d012      	beq.n	800dc76 <prvUnlockQueue+0x8e>
                if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	3310      	adds	r3, #16
 800dc54:	4618      	mov	r0, r3
 800dc56:	f000 fe1d 	bl	800e894 <xTaskRemoveFromEventList>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d001      	beq.n	800dc64 <prvUnlockQueue+0x7c>
                    vTaskMissedYield();
 800dc60:	f000 fef6 	bl	800ea50 <vTaskMissedYield>
                } else {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800dc64:	7bbb      	ldrb	r3, [r7, #14]
 800dc66:	3b01      	subs	r3, #1
 800dc68:	b2db      	uxtb	r3, r3
 800dc6a:	73bb      	strb	r3, [r7, #14]
        while (cRxLock > queueLOCKED_UNMODIFIED) {
 800dc6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	dce9      	bgt.n	800dc48 <prvUnlockQueue+0x60>
 800dc74:	e000      	b.n	800dc78 <prvUnlockQueue+0x90>
            } else {
                break;
 800dc76:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	22ff      	movs	r2, #255	@ 0xff
 800dc7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800dc80:	f001 fdac 	bl	800f7dc <vPortExitCritical>
}
 800dc84:	bf00      	nop
 800dc86:	3710      	adds	r7, #16
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}

0800dc8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty(const Queue_t * pxQueue) {
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b084      	sub	sp, #16
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800dc94:	f001 fd70 	bl	800f778 <vPortEnterCritical>
    {
        if (pxQueue->uxMessagesWaiting == (UBaseType_t)0) {
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d102      	bne.n	800dca6 <prvIsQueueEmpty+0x1a>
            xReturn = pdTRUE;
 800dca0:	2301      	movs	r3, #1
 800dca2:	60fb      	str	r3, [r7, #12]
 800dca4:	e001      	b.n	800dcaa <prvIsQueueEmpty+0x1e>
        } else {
            xReturn = pdFALSE;
 800dca6:	2300      	movs	r3, #0
 800dca8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800dcaa:	f001 fd97 	bl	800f7dc <vPortExitCritical>

    return xReturn;
 800dcae:	68fb      	ldr	r3, [r7, #12]
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	3710      	adds	r7, #16
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}

0800dcb8 <prvIsQueueFull>:

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull(const Queue_t * pxQueue) {
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b084      	sub	sp, #16
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800dcc0:	f001 fd5a 	bl	800f778 <vPortEnterCritical>
    {
        if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dccc:	429a      	cmp	r2, r3
 800dcce:	d102      	bne.n	800dcd6 <prvIsQueueFull+0x1e>
            xReturn = pdTRUE;
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	60fb      	str	r3, [r7, #12]
 800dcd4:	e001      	b.n	800dcda <prvIsQueueFull+0x22>
        } else {
            xReturn = pdFALSE;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800dcda:	f001 fd7f 	bl	800f7dc <vPortExitCritical>

    return xReturn;
 800dcde:	68fb      	ldr	r3, [r7, #12]
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3710      	adds	r7, #16
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}

0800dce8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if (configQUEUE_REGISTRY_SIZE > 0)

void vQueueAddToRegistry(QueueHandle_t xQueue, const char * pcQueueName) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800dce8:	b480      	push	{r7}
 800dcea:	b085      	sub	sp, #20
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
 800dcf0:	6039      	str	r1, [r7, #0]
    UBaseType_t ux;

    /* See if there is an empty space in the registry.  A NULL name denotes
    a free slot. */
    for (ux = (UBaseType_t)0U; ux < (UBaseType_t)configQUEUE_REGISTRY_SIZE; ux++) {
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	60fb      	str	r3, [r7, #12]
 800dcf6:	e014      	b.n	800dd22 <vQueueAddToRegistry+0x3a>
        if (xQueueRegistry[ux].pcQueueName == NULL) {
 800dcf8:	4a0f      	ldr	r2, [pc, #60]	@ (800dd38 <vQueueAddToRegistry+0x50>)
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d10b      	bne.n	800dd1c <vQueueAddToRegistry+0x34>
            /* Store the information on this queue. */
            xQueueRegistry[ux].pcQueueName = pcQueueName;
 800dd04:	490c      	ldr	r1, [pc, #48]	@ (800dd38 <vQueueAddToRegistry+0x50>)
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	683a      	ldr	r2, [r7, #0]
 800dd0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
            xQueueRegistry[ux].xHandle = xQueue;
 800dd0e:	4a0a      	ldr	r2, [pc, #40]	@ (800dd38 <vQueueAddToRegistry+0x50>)
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	00db      	lsls	r3, r3, #3
 800dd14:	4413      	add	r3, r2
 800dd16:	687a      	ldr	r2, [r7, #4]
 800dd18:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD(xQueue, pcQueueName);
            break;
 800dd1a:	e006      	b.n	800dd2a <vQueueAddToRegistry+0x42>
    for (ux = (UBaseType_t)0U; ux < (UBaseType_t)configQUEUE_REGISTRY_SIZE; ux++) {
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	3301      	adds	r3, #1
 800dd20:	60fb      	str	r3, [r7, #12]
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	2b07      	cmp	r3, #7
 800dd26:	d9e7      	bls.n	800dcf8 <vQueueAddToRegistry+0x10>
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800dd28:	bf00      	nop
 800dd2a:	bf00      	nop
 800dd2c:	3714      	adds	r7, #20
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd34:	4770      	bx	lr
 800dd36:	bf00      	nop
 800dd38:	20000d6c 	.word	0x20000d6c

0800dd3c <vQueueWaitForMessageRestricted>:
#endif /* configQUEUE_REGISTRY_SIZE */
/*-----------------------------------------------------------*/

#if (configUSE_TIMERS == 1)

void vQueueWaitForMessageRestricted(QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely) {
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b086      	sub	sp, #24
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	60f8      	str	r0, [r7, #12]
 800dd44:	60b9      	str	r1, [r7, #8]
 800dd46:	607a      	str	r2, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	617b      	str	r3, [r7, #20]
    will not actually cause the task to block, just place it on a blocked
    list.  It will not block until the scheduler is unlocked - at which
    time a yield will be performed.  If an item is added to the queue while
    the queue is locked, and the calling task blocks on the queue, then the
    calling task will be immediately unblocked when the queue is unlocked. */
    prvLockQueue(pxQueue);
 800dd4c:	f001 fd14 	bl	800f778 <vPortEnterCritical>
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dd56:	b25b      	sxtb	r3, r3
 800dd58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd5c:	d103      	bne.n	800dd66 <vQueueWaitForMessageRestricted+0x2a>
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	2200      	movs	r2, #0
 800dd62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dd6c:	b25b      	sxtb	r3, r3
 800dd6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd72:	d103      	bne.n	800dd7c <vQueueWaitForMessageRestricted+0x40>
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	2200      	movs	r2, #0
 800dd78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dd7c:	f001 fd2e 	bl	800f7dc <vPortExitCritical>
    if (pxQueue->uxMessagesWaiting == (UBaseType_t)0U) {
 800dd80:	697b      	ldr	r3, [r7, #20]
 800dd82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d106      	bne.n	800dd96 <vQueueWaitForMessageRestricted+0x5a>
        /* There is nothing in the queue, block for the specified period. */
        vTaskPlaceOnEventListRestricted(&(pxQueue->xTasksWaitingToReceive), xTicksToWait, xWaitIndefinitely);
 800dd88:	697b      	ldr	r3, [r7, #20]
 800dd8a:	3324      	adds	r3, #36	@ 0x24
 800dd8c:	687a      	ldr	r2, [r7, #4]
 800dd8e:	68b9      	ldr	r1, [r7, #8]
 800dd90:	4618      	mov	r0, r3
 800dd92:	f000 fd53 	bl	800e83c <vTaskPlaceOnEventListRestricted>
    } else {
        mtCOVERAGE_TEST_MARKER();
    }
    prvUnlockQueue(pxQueue);
 800dd96:	6978      	ldr	r0, [r7, #20]
 800dd98:	f7ff ff26 	bl	800dbe8 <prvUnlockQueue>
}
 800dd9c:	bf00      	nop
 800dd9e:	3718      	adds	r7, #24
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <xTaskCreateStatic>:
/*-----------------------------------------------------------*/

#if (configSUPPORT_STATIC_ALLOCATION == 1)

TaskHandle_t xTaskCreateStatic(TaskFunction_t pxTaskCode, const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                               const uint32_t ulStackDepth, void * const pvParameters, UBaseType_t uxPriority, StackType_t * const puxStackBuffer, StaticTask_t * const pxTaskBuffer) {
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b08e      	sub	sp, #56	@ 0x38
 800dda8:	af04      	add	r7, sp, #16
 800ddaa:	60f8      	str	r0, [r7, #12]
 800ddac:	60b9      	str	r1, [r7, #8]
 800ddae:	607a      	str	r2, [r7, #4]
 800ddb0:	603b      	str	r3, [r7, #0]
    TCB_t * pxNewTCB;
    TaskHandle_t xReturn;

    configASSERT(puxStackBuffer != NULL);
 800ddb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d10b      	bne.n	800ddd0 <xTaskCreateStatic+0x2c>
    __asm volatile("	mov %0, %1												\n"
 800ddb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddbc:	f383 8811 	msr	BASEPRI, r3
 800ddc0:	f3bf 8f6f 	isb	sy
 800ddc4:	f3bf 8f4f 	dsb	sy
 800ddc8:	623b      	str	r3, [r7, #32]
}
 800ddca:	bf00      	nop
 800ddcc:	bf00      	nop
 800ddce:	e7fd      	b.n	800ddcc <xTaskCreateStatic+0x28>
    configASSERT(pxTaskBuffer != NULL);
 800ddd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d10b      	bne.n	800ddee <xTaskCreateStatic+0x4a>
    __asm volatile("	mov %0, %1												\n"
 800ddd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddda:	f383 8811 	msr	BASEPRI, r3
 800ddde:	f3bf 8f6f 	isb	sy
 800dde2:	f3bf 8f4f 	dsb	sy
 800dde6:	61fb      	str	r3, [r7, #28]
}
 800dde8:	bf00      	nop
 800ddea:	bf00      	nop
 800ddec:	e7fd      	b.n	800ddea <xTaskCreateStatic+0x46>
#if (configASSERT_DEFINED == 1)
    {
        /* Sanity check that the size of the structure used to declare a
        variable of type StaticTask_t equals the size of the real task
        structure. */
        volatile size_t xSize = sizeof(StaticTask_t);
 800ddee:	237c      	movs	r3, #124	@ 0x7c
 800ddf0:	613b      	str	r3, [r7, #16]
        configASSERT(xSize == sizeof(TCB_t));
 800ddf2:	693b      	ldr	r3, [r7, #16]
 800ddf4:	2b7c      	cmp	r3, #124	@ 0x7c
 800ddf6:	d00b      	beq.n	800de10 <xTaskCreateStatic+0x6c>
    __asm volatile("	mov %0, %1												\n"
 800ddf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddfc:	f383 8811 	msr	BASEPRI, r3
 800de00:	f3bf 8f6f 	isb	sy
 800de04:	f3bf 8f4f 	dsb	sy
 800de08:	61bb      	str	r3, [r7, #24]
}
 800de0a:	bf00      	nop
 800de0c:	bf00      	nop
 800de0e:	e7fd      	b.n	800de0c <xTaskCreateStatic+0x68>
        (void)xSize; /* Prevent lint warning when configASSERT() is not used. */
 800de10:	693b      	ldr	r3, [r7, #16]
    }
#endif /* configASSERT_DEFINED */

    if ((pxTaskBuffer != NULL) && (puxStackBuffer != NULL)) {
 800de12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de14:	2b00      	cmp	r3, #0
 800de16:	d01e      	beq.n	800de56 <xTaskCreateStatic+0xb2>
 800de18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d01b      	beq.n	800de56 <xTaskCreateStatic+0xb2>
        /* The memory used for the task's TCB and stack are passed into this
        function - use them. */
        pxNewTCB = (TCB_t *)pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800de1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de20:	627b      	str	r3, [r7, #36]	@ 0x24
        pxNewTCB->pxStack = (StackType_t *)puxStackBuffer;
 800de22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800de26:	631a      	str	r2, [r3, #48]	@ 0x30

#if (tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* Tasks can be created statically or dynamically, so note this
            task was created statically in case the task is later deleted. */
            pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800de28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de2a:	2202      	movs	r2, #2
 800de2c:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
        }
#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

        prvInitialiseNewTask(pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL);
 800de30:	2300      	movs	r3, #0
 800de32:	9303      	str	r3, [sp, #12]
 800de34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de36:	9302      	str	r3, [sp, #8]
 800de38:	f107 0314 	add.w	r3, r7, #20
 800de3c:	9301      	str	r3, [sp, #4]
 800de3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de40:	9300      	str	r3, [sp, #0]
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	687a      	ldr	r2, [r7, #4]
 800de46:	68b9      	ldr	r1, [r7, #8]
 800de48:	68f8      	ldr	r0, [r7, #12]
 800de4a:	f000 f850 	bl	800deee <prvInitialiseNewTask>
        prvAddNewTaskToReadyList(pxNewTCB);
 800de4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800de50:	f000 f8d0 	bl	800dff4 <prvAddNewTaskToReadyList>
 800de54:	e001      	b.n	800de5a <xTaskCreateStatic+0xb6>
    } else {
        xReturn = NULL;
 800de56:	2300      	movs	r3, #0
 800de58:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800de5a:	697b      	ldr	r3, [r7, #20]
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	3728      	adds	r7, #40	@ 0x28
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}

0800de64 <xTaskCreate>:
/*-----------------------------------------------------------*/

#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)

BaseType_t xTaskCreate(TaskFunction_t pxTaskCode, const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                       const configSTACK_DEPTH_TYPE usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask) {
 800de64:	b580      	push	{r7, lr}
 800de66:	b08c      	sub	sp, #48	@ 0x30
 800de68:	af04      	add	r7, sp, #16
 800de6a:	60f8      	str	r0, [r7, #12]
 800de6c:	60b9      	str	r1, [r7, #8]
 800de6e:	603b      	str	r3, [r7, #0]
 800de70:	4613      	mov	r3, r2
 800de72:	80fb      	strh	r3, [r7, #6]
#else  /* portSTACK_GROWTH */
    {
        StackType_t * pxStack;

        /* Allocate space for the stack used by the task being created. */
        pxStack = pvPortMalloc((((size_t)usStackDepth) * sizeof(StackType_t))); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800de74:	88fb      	ldrh	r3, [r7, #6]
 800de76:	009b      	lsls	r3, r3, #2
 800de78:	4618      	mov	r0, r3
 800de7a:	f001 fd9f 	bl	800f9bc <pvPortMalloc>
 800de7e:	6178      	str	r0, [r7, #20]

        if (pxStack != NULL) {
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d00e      	beq.n	800dea4 <xTaskCreate+0x40>
            /* Allocate space for the TCB. */
            pxNewTCB = (TCB_t *)pvPortMalloc(sizeof(TCB_t)); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800de86:	207c      	movs	r0, #124	@ 0x7c
 800de88:	f001 fd98 	bl	800f9bc <pvPortMalloc>
 800de8c:	61f8      	str	r0, [r7, #28]

            if (pxNewTCB != NULL) {
 800de8e:	69fb      	ldr	r3, [r7, #28]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d003      	beq.n	800de9c <xTaskCreate+0x38>
                /* Store the stack location in the TCB. */
                pxNewTCB->pxStack = pxStack;
 800de94:	69fb      	ldr	r3, [r7, #28]
 800de96:	697a      	ldr	r2, [r7, #20]
 800de98:	631a      	str	r2, [r3, #48]	@ 0x30
 800de9a:	e005      	b.n	800dea8 <xTaskCreate+0x44>
            } else {
                /* The stack cannot be used as the TCB was not created.  Free
                it again. */
                vPortFree(pxStack);
 800de9c:	6978      	ldr	r0, [r7, #20]
 800de9e:	f001 fd9f 	bl	800f9e0 <vPortFree>
 800dea2:	e001      	b.n	800dea8 <xTaskCreate+0x44>
            }
        } else {
            pxNewTCB = NULL;
 800dea4:	2300      	movs	r3, #0
 800dea6:	61fb      	str	r3, [r7, #28]
        }
    }
#endif /* portSTACK_GROWTH */

    if (pxNewTCB != NULL) {
 800dea8:	69fb      	ldr	r3, [r7, #28]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d017      	beq.n	800dede <xTaskCreate+0x7a>
#if (tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
        {
            /* Tasks can be created statically or dynamically, so note this
            task was created dynamically in case it is later deleted. */
            pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800deae:	69fb      	ldr	r3, [r7, #28]
 800deb0:	2200      	movs	r2, #0
 800deb2:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
        }
#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

        prvInitialiseNewTask(pxTaskCode, pcName, (uint32_t)usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL);
 800deb6:	88fa      	ldrh	r2, [r7, #6]
 800deb8:	2300      	movs	r3, #0
 800deba:	9303      	str	r3, [sp, #12]
 800debc:	69fb      	ldr	r3, [r7, #28]
 800debe:	9302      	str	r3, [sp, #8]
 800dec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dec2:	9301      	str	r3, [sp, #4]
 800dec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dec6:	9300      	str	r3, [sp, #0]
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	68b9      	ldr	r1, [r7, #8]
 800decc:	68f8      	ldr	r0, [r7, #12]
 800dece:	f000 f80e 	bl	800deee <prvInitialiseNewTask>
        prvAddNewTaskToReadyList(pxNewTCB);
 800ded2:	69f8      	ldr	r0, [r7, #28]
 800ded4:	f000 f88e 	bl	800dff4 <prvAddNewTaskToReadyList>
        xReturn = pdPASS;
 800ded8:	2301      	movs	r3, #1
 800deda:	61bb      	str	r3, [r7, #24]
 800dedc:	e002      	b.n	800dee4 <xTaskCreate+0x80>
    } else {
        xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dede:	f04f 33ff 	mov.w	r3, #4294967295
 800dee2:	61bb      	str	r3, [r7, #24]
    }

    return xReturn;
 800dee4:	69bb      	ldr	r3, [r7, #24]
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	3720      	adds	r7, #32
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}

0800deee <prvInitialiseNewTask>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewTask(TaskFunction_t pxTaskCode, const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                 const uint32_t ulStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, TCB_t * pxNewTCB, const MemoryRegion_t * const xRegions) {
 800deee:	b580      	push	{r7, lr}
 800def0:	b088      	sub	sp, #32
 800def2:	af00      	add	r7, sp, #0
 800def4:	60f8      	str	r0, [r7, #12]
 800def6:	60b9      	str	r1, [r7, #8]
 800def8:	607a      	str	r2, [r7, #4]
 800defa:	603b      	str	r3, [r7, #0]
grows from high memory to low (as per the 80x86) or vice versa.
portSTACK_GROWTH is used to make the result positive or negative as required
by the port. */
#if (portSTACK_GROWTH < 0)
    {
        pxTopOfStack = &(pxNewTCB->pxStack[ulStackDepth - (uint32_t)1]);
 800defc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800defe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df06:	3b01      	subs	r3, #1
 800df08:	009b      	lsls	r3, r3, #2
 800df0a:	4413      	add	r3, r2
 800df0c:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = (StackType_t *)(((portPOINTER_SIZE_TYPE)pxTopOfStack) & (~((portPOINTER_SIZE_TYPE)portBYTE_ALIGNMENT_MASK))); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size
 800df0e:	69bb      	ldr	r3, [r7, #24]
 800df10:	f023 0307 	bic.w	r3, r3, #7
 800df14:	61bb      	str	r3, [r7, #24]
                                                                                                                                        differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT((((portPOINTER_SIZE_TYPE)pxTopOfStack & (portPOINTER_SIZE_TYPE)portBYTE_ALIGNMENT_MASK) == 0UL));
 800df16:	69bb      	ldr	r3, [r7, #24]
 800df18:	f003 0307 	and.w	r3, r3, #7
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d00b      	beq.n	800df38 <prvInitialiseNewTask+0x4a>
    __asm volatile("	mov %0, %1												\n"
 800df20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df24:	f383 8811 	msr	BASEPRI, r3
 800df28:	f3bf 8f6f 	isb	sy
 800df2c:	f3bf 8f4f 	dsb	sy
 800df30:	617b      	str	r3, [r7, #20]
}
 800df32:	bf00      	nop
 800df34:	bf00      	nop
 800df36:	e7fd      	b.n	800df34 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + (ulStackDepth - (uint32_t)1);
    }
#endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if (pcName != NULL) {
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d01f      	beq.n	800df7e <prvInitialiseNewTask+0x90>
        for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
 800df3e:	2300      	movs	r3, #0
 800df40:	61fb      	str	r3, [r7, #28]
 800df42:	e012      	b.n	800df6a <prvInitialiseNewTask+0x7c>
            pxNewTCB->pcTaskName[x] = pcName[x];
 800df44:	68ba      	ldr	r2, [r7, #8]
 800df46:	69fb      	ldr	r3, [r7, #28]
 800df48:	4413      	add	r3, r2
 800df4a:	7819      	ldrb	r1, [r3, #0]
 800df4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df4e:	69fb      	ldr	r3, [r7, #28]
 800df50:	4413      	add	r3, r2
 800df52:	3334      	adds	r3, #52	@ 0x34
 800df54:	460a      	mov	r2, r1
 800df56:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
            configMAX_TASK_NAME_LEN characters just in case the memory after the
            string is not accessible (extremely unlikely). */
            if (pcName[x] == (char)0x00) {
 800df58:	68ba      	ldr	r2, [r7, #8]
 800df5a:	69fb      	ldr	r3, [r7, #28]
 800df5c:	4413      	add	r3, r2
 800df5e:	781b      	ldrb	r3, [r3, #0]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d006      	beq.n	800df72 <prvInitialiseNewTask+0x84>
        for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
 800df64:	69fb      	ldr	r3, [r7, #28]
 800df66:	3301      	adds	r3, #1
 800df68:	61fb      	str	r3, [r7, #28]
 800df6a:	69fb      	ldr	r3, [r7, #28]
 800df6c:	2b3f      	cmp	r3, #63	@ 0x3f
 800df6e:	d9e9      	bls.n	800df44 <prvInitialiseNewTask+0x56>
 800df70:	e000      	b.n	800df74 <prvInitialiseNewTask+0x86>
                break;
 800df72:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
        was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[configMAX_TASK_NAME_LEN - 1] = '\0';
 800df74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df76:	2200      	movs	r2, #0
 800df78:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
 800df7c:	e003      	b.n	800df86 <prvInitialiseNewTask+0x98>
    } else {
        /* The task has not been given a name, so just ensure there is a NULL
        terminator when it is read out. */
        pxNewTCB->pcTaskName[0] = 0x00;
 800df7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df80:	2200      	movs	r2, #0
 800df82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
    remove the privilege bit if one is present. */
    if (uxPriority >= (UBaseType_t)configMAX_PRIORITIES) {
 800df86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df88:	2b06      	cmp	r3, #6
 800df8a:	d901      	bls.n	800df90 <prvInitialiseNewTask+0xa2>
        uxPriority = (UBaseType_t)configMAX_PRIORITIES - (UBaseType_t)1U;
 800df8c:	2306      	movs	r3, #6
 800df8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    } else {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800df90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800df94:	62da      	str	r2, [r3, #44]	@ 0x2c
        pxNewTCB->uxBasePriority = uxPriority;
        pxNewTCB->uxMutexesHeld = 0;
    }
#endif /* configUSE_MUTEXES */

    vListInitialiseItem(&(pxNewTCB->xStateListItem));
 800df96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df98:	3304      	adds	r3, #4
 800df9a:	4618      	mov	r0, r3
 800df9c:	f7ff f986 	bl	800d2ac <vListInitialiseItem>
    vListInitialiseItem(&(pxNewTCB->xEventListItem));
 800dfa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfa2:	3318      	adds	r3, #24
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f7ff f981 	bl	800d2ac <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
    back to	the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER(&(pxNewTCB->xStateListItem), pxNewTCB);
 800dfaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dfae:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE(&(pxNewTCB->xEventListItem), (TickType_t)configMAX_PRIORITIES - (TickType_t)uxPriority); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfb2:	f1c3 0207 	rsb	r2, r3, #7
 800dfb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfb8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER(&(pxNewTCB->xEventListItem), pxNewTCB);
 800dfba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dfbe:	625a      	str	r2, [r3, #36]	@ 0x24
    }
#endif

#if (configUSE_TASK_NOTIFICATIONS == 1)
    {
        pxNewTCB->ulNotifiedValue = 0;
 800dfc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	675a      	str	r2, [r3, #116]	@ 0x74
        pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dfc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfc8:	2200      	movs	r2, #0
 800dfca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
            }
#endif /* portSTACK_GROWTH */
        }
#else  /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters);
 800dfce:	683a      	ldr	r2, [r7, #0]
 800dfd0:	68f9      	ldr	r1, [r7, #12]
 800dfd2:	69b8      	ldr	r0, [r7, #24]
 800dfd4:	f001 fa9e 	bl	800f514 <pxPortInitialiseStack>
 800dfd8:	4602      	mov	r2, r0
 800dfda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfdc:	601a      	str	r2, [r3, #0]
        }
#endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
#endif /* portUSING_MPU_WRAPPERS */

    if (pxCreatedTask != NULL) {
 800dfde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d002      	beq.n	800dfea <prvInitialiseNewTask+0xfc>
        /* Pass the handle out in an anonymous way.  The handle can be used to
        change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = (TaskHandle_t)pxNewTCB;
 800dfe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfe6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dfe8:	601a      	str	r2, [r3, #0]
    } else {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800dfea:	bf00      	nop
 800dfec:	3720      	adds	r7, #32
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}
	...

0800dff4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList(TCB_t * pxNewTCB) {
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b082      	sub	sp, #8
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
    updated. */
    taskENTER_CRITICAL();
 800dffc:	f001 fbbc 	bl	800f778 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800e000:	4b2a      	ldr	r3, [pc, #168]	@ (800e0ac <prvAddNewTaskToReadyList+0xb8>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	3301      	adds	r3, #1
 800e006:	4a29      	ldr	r2, [pc, #164]	@ (800e0ac <prvAddNewTaskToReadyList+0xb8>)
 800e008:	6013      	str	r3, [r2, #0]
        if (pxCurrentTCB == NULL) {
 800e00a:	4b29      	ldr	r3, [pc, #164]	@ (800e0b0 <prvAddNewTaskToReadyList+0xbc>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d109      	bne.n	800e026 <prvAddNewTaskToReadyList+0x32>
            /* There are no other tasks, or all the other tasks are in
            the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800e012:	4a27      	ldr	r2, [pc, #156]	@ (800e0b0 <prvAddNewTaskToReadyList+0xbc>)
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	6013      	str	r3, [r2, #0]

            if (uxCurrentNumberOfTasks == (UBaseType_t)1) {
 800e018:	4b24      	ldr	r3, [pc, #144]	@ (800e0ac <prvAddNewTaskToReadyList+0xb8>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	2b01      	cmp	r3, #1
 800e01e:	d110      	bne.n	800e042 <prvAddNewTaskToReadyList+0x4e>
                /* This is the first task to be created so do the preliminary
                initialisation required.  We will not recover if this call
                fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800e020:	f000 fd3a 	bl	800ea98 <prvInitialiseTaskLists>
 800e024:	e00d      	b.n	800e042 <prvAddNewTaskToReadyList+0x4e>
            }
        } else {
            /* If the scheduler is not already running, make this task the
            current task if it is the highest priority task to be created
            so far. */
            if (xSchedulerRunning == pdFALSE) {
 800e026:	4b23      	ldr	r3, [pc, #140]	@ (800e0b4 <prvAddNewTaskToReadyList+0xc0>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d109      	bne.n	800e042 <prvAddNewTaskToReadyList+0x4e>
                if (pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority) {
 800e02e:	4b20      	ldr	r3, [pc, #128]	@ (800e0b0 <prvAddNewTaskToReadyList+0xbc>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e038:	429a      	cmp	r2, r3
 800e03a:	d802      	bhi.n	800e042 <prvAddNewTaskToReadyList+0x4e>
                    pxCurrentTCB = pxNewTCB;
 800e03c:	4a1c      	ldr	r2, [pc, #112]	@ (800e0b0 <prvAddNewTaskToReadyList+0xbc>)
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	6013      	str	r3, [r2, #0]
            } else {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800e042:	4b1d      	ldr	r3, [pc, #116]	@ (800e0b8 <prvAddNewTaskToReadyList+0xc4>)
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	3301      	adds	r3, #1
 800e048:	4a1b      	ldr	r2, [pc, #108]	@ (800e0b8 <prvAddNewTaskToReadyList+0xc4>)
 800e04a:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
#endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE(pxNewTCB);

        prvAddTaskToReadyList(pxNewTCB);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e050:	2201      	movs	r2, #1
 800e052:	409a      	lsls	r2, r3
 800e054:	4b19      	ldr	r3, [pc, #100]	@ (800e0bc <prvAddNewTaskToReadyList+0xc8>)
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	4313      	orrs	r3, r2
 800e05a:	4a18      	ldr	r2, [pc, #96]	@ (800e0bc <prvAddNewTaskToReadyList+0xc8>)
 800e05c:	6013      	str	r3, [r2, #0]
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e062:	4613      	mov	r3, r2
 800e064:	009b      	lsls	r3, r3, #2
 800e066:	4413      	add	r3, r2
 800e068:	009b      	lsls	r3, r3, #2
 800e06a:	4a15      	ldr	r2, [pc, #84]	@ (800e0c0 <prvAddNewTaskToReadyList+0xcc>)
 800e06c:	441a      	add	r2, r3
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	3304      	adds	r3, #4
 800e072:	4619      	mov	r1, r3
 800e074:	4610      	mov	r0, r2
 800e076:	f7ff f926 	bl	800d2c6 <vListInsertEnd>

        portSETUP_TCB(pxNewTCB);
    }
    taskEXIT_CRITICAL();
 800e07a:	f001 fbaf 	bl	800f7dc <vPortExitCritical>

    if (xSchedulerRunning != pdFALSE) {
 800e07e:	4b0d      	ldr	r3, [pc, #52]	@ (800e0b4 <prvAddNewTaskToReadyList+0xc0>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d00e      	beq.n	800e0a4 <prvAddNewTaskToReadyList+0xb0>
        /* If the created task is of a higher priority than the current task
        then it should run now. */
        if (pxCurrentTCB->uxPriority < pxNewTCB->uxPriority) {
 800e086:	4b0a      	ldr	r3, [pc, #40]	@ (800e0b0 <prvAddNewTaskToReadyList+0xbc>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e090:	429a      	cmp	r2, r3
 800e092:	d207      	bcs.n	800e0a4 <prvAddNewTaskToReadyList+0xb0>
            taskYIELD_IF_USING_PREEMPTION();
 800e094:	4b0b      	ldr	r3, [pc, #44]	@ (800e0c4 <prvAddNewTaskToReadyList+0xd0>)
 800e096:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e09a:	601a      	str	r2, [r3, #0]
 800e09c:	f3bf 8f4f 	dsb	sy
 800e0a0:	f3bf 8f6f 	isb	sy
            mtCOVERAGE_TEST_MARKER();
        }
    } else {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800e0a4:	bf00      	nop
 800e0a6:	3708      	adds	r7, #8
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}
 800e0ac:	20000eac 	.word	0x20000eac
 800e0b0:	20000dac 	.word	0x20000dac
 800e0b4:	20000eb8 	.word	0x20000eb8
 800e0b8:	20000ec8 	.word	0x20000ec8
 800e0bc:	20000eb4 	.word	0x20000eb4
 800e0c0:	20000db0 	.word	0x20000db0
 800e0c4:	e000ed04 	.word	0xe000ed04

0800e0c8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if (INCLUDE_vTaskDelete == 1)

void vTaskDelete(TaskHandle_t xTaskToDelete) {
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b084      	sub	sp, #16
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
    TCB_t * pxTCB;

    taskENTER_CRITICAL();
 800e0d0:	f001 fb52 	bl	800f778 <vPortEnterCritical>
    {
        /* If null is passed in here then it is the calling task that is
        being deleted. */
        pxTCB = prvGetTCBFromHandle(xTaskToDelete);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d102      	bne.n	800e0e0 <vTaskDelete+0x18>
 800e0da:	4b39      	ldr	r3, [pc, #228]	@ (800e1c0 <vTaskDelete+0xf8>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	e000      	b.n	800e0e2 <vTaskDelete+0x1a>
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	60fb      	str	r3, [r7, #12]

        /* Remove task from the ready/delayed list. */
        if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	3304      	adds	r3, #4
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f7ff f949 	bl	800d380 <uxListRemove>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d115      	bne.n	800e120 <vTaskDelete+0x58>
            taskRESET_READY_PRIORITY(pxTCB->uxPriority);
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0f8:	4932      	ldr	r1, [pc, #200]	@ (800e1c4 <vTaskDelete+0xfc>)
 800e0fa:	4613      	mov	r3, r2
 800e0fc:	009b      	lsls	r3, r3, #2
 800e0fe:	4413      	add	r3, r2
 800e100:	009b      	lsls	r3, r3, #2
 800e102:	440b      	add	r3, r1
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d10a      	bne.n	800e120 <vTaskDelete+0x58>
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e10e:	2201      	movs	r2, #1
 800e110:	fa02 f303 	lsl.w	r3, r2, r3
 800e114:	43da      	mvns	r2, r3
 800e116:	4b2c      	ldr	r3, [pc, #176]	@ (800e1c8 <vTaskDelete+0x100>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	4013      	ands	r3, r2
 800e11c:	4a2a      	ldr	r2, [pc, #168]	@ (800e1c8 <vTaskDelete+0x100>)
 800e11e:	6013      	str	r3, [r2, #0]
        } else {
            mtCOVERAGE_TEST_MARKER();
        }

        /* Is the task waiting on an event also? */
        if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e124:	2b00      	cmp	r3, #0
 800e126:	d004      	beq.n	800e132 <vTaskDelete+0x6a>
            (void)uxListRemove(&(pxTCB->xEventListItem));
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	3318      	adds	r3, #24
 800e12c:	4618      	mov	r0, r3
 800e12e:	f7ff f927 	bl	800d380 <uxListRemove>

        /* Increment the uxTaskNumber also so kernel aware debuggers can
        detect that the task lists need re-generating.  This is done before
        portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
        not return. */
        uxTaskNumber++;
 800e132:	4b26      	ldr	r3, [pc, #152]	@ (800e1cc <vTaskDelete+0x104>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	3301      	adds	r3, #1
 800e138:	4a24      	ldr	r2, [pc, #144]	@ (800e1cc <vTaskDelete+0x104>)
 800e13a:	6013      	str	r3, [r2, #0]

        if (pxTCB == pxCurrentTCB) {
 800e13c:	4b20      	ldr	r3, [pc, #128]	@ (800e1c0 <vTaskDelete+0xf8>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	68fa      	ldr	r2, [r7, #12]
 800e142:	429a      	cmp	r2, r3
 800e144:	d10b      	bne.n	800e15e <vTaskDelete+0x96>
            /* A task is deleting itself.  This cannot complete within the
            task itself, as a context switch to another task is required.
            Place the task in the termination list.  The idle task will
            check the termination list and free up any memory allocated by
            the scheduler for the TCB and stack of the deleted task. */
            vListInsertEnd(&xTasksWaitingTermination, &(pxTCB->xStateListItem));
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	3304      	adds	r3, #4
 800e14a:	4619      	mov	r1, r3
 800e14c:	4820      	ldr	r0, [pc, #128]	@ (800e1d0 <vTaskDelete+0x108>)
 800e14e:	f7ff f8ba 	bl	800d2c6 <vListInsertEnd>

            /* Increment the ucTasksDeleted variable so the idle task knows
            there is a task that has been deleted and that it should therefore
            check the xTasksWaitingTermination list. */
            ++uxDeletedTasksWaitingCleanUp;
 800e152:	4b20      	ldr	r3, [pc, #128]	@ (800e1d4 <vTaskDelete+0x10c>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	3301      	adds	r3, #1
 800e158:	4a1e      	ldr	r2, [pc, #120]	@ (800e1d4 <vTaskDelete+0x10c>)
 800e15a:	6013      	str	r3, [r2, #0]
 800e15c:	e009      	b.n	800e172 <vTaskDelete+0xaa>
            after which it is not possible to yield away from this task -
            hence xYieldPending is used to latch that a context switch is
            required. */
            portPRE_TASK_DELETE_HOOK(pxTCB, &xYieldPending);
        } else {
            --uxCurrentNumberOfTasks;
 800e15e:	4b1e      	ldr	r3, [pc, #120]	@ (800e1d8 <vTaskDelete+0x110>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	3b01      	subs	r3, #1
 800e164:	4a1c      	ldr	r2, [pc, #112]	@ (800e1d8 <vTaskDelete+0x110>)
 800e166:	6013      	str	r3, [r2, #0]
            traceTASK_DELETE(pxTCB);
            prvDeleteTCB(pxTCB);
 800e168:	68f8      	ldr	r0, [r7, #12]
 800e16a:	f000 fd03 	bl	800eb74 <prvDeleteTCB>

            /* Reset the next expected unblock time in case it referred to
            the task that has just been deleted. */
            prvResetNextTaskUnblockTime();
 800e16e:	f000 fd31 	bl	800ebd4 <prvResetNextTaskUnblockTime>
        }
    }
    taskEXIT_CRITICAL();
 800e172:	f001 fb33 	bl	800f7dc <vPortExitCritical>

    /* Force a reschedule if it is the currently running task that has just
    been deleted. */
    if (xSchedulerRunning != pdFALSE) {
 800e176:	4b19      	ldr	r3, [pc, #100]	@ (800e1dc <vTaskDelete+0x114>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d01c      	beq.n	800e1b8 <vTaskDelete+0xf0>
        if (pxTCB == pxCurrentTCB) {
 800e17e:	4b10      	ldr	r3, [pc, #64]	@ (800e1c0 <vTaskDelete+0xf8>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	68fa      	ldr	r2, [r7, #12]
 800e184:	429a      	cmp	r2, r3
 800e186:	d117      	bne.n	800e1b8 <vTaskDelete+0xf0>
            configASSERT(uxSchedulerSuspended == 0);
 800e188:	4b15      	ldr	r3, [pc, #84]	@ (800e1e0 <vTaskDelete+0x118>)
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d00b      	beq.n	800e1a8 <vTaskDelete+0xe0>
    __asm volatile("	mov %0, %1												\n"
 800e190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e194:	f383 8811 	msr	BASEPRI, r3
 800e198:	f3bf 8f6f 	isb	sy
 800e19c:	f3bf 8f4f 	dsb	sy
 800e1a0:	60bb      	str	r3, [r7, #8]
}
 800e1a2:	bf00      	nop
 800e1a4:	bf00      	nop
 800e1a6:	e7fd      	b.n	800e1a4 <vTaskDelete+0xdc>
            portYIELD_WITHIN_API();
 800e1a8:	4b0e      	ldr	r3, [pc, #56]	@ (800e1e4 <vTaskDelete+0x11c>)
 800e1aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e1ae:	601a      	str	r2, [r3, #0]
 800e1b0:	f3bf 8f4f 	dsb	sy
 800e1b4:	f3bf 8f6f 	isb	sy
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800e1b8:	bf00      	nop
 800e1ba:	3710      	adds	r7, #16
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	bd80      	pop	{r7, pc}
 800e1c0:	20000dac 	.word	0x20000dac
 800e1c4:	20000db0 	.word	0x20000db0
 800e1c8:	20000eb4 	.word	0x20000eb4
 800e1cc:	20000ec8 	.word	0x20000ec8
 800e1d0:	20000e80 	.word	0x20000e80
 800e1d4:	20000e94 	.word	0x20000e94
 800e1d8:	20000eac 	.word	0x20000eac
 800e1dc:	20000eb8 	.word	0x20000eb8
 800e1e0:	20000ed4 	.word	0x20000ed4
 800e1e4:	e000ed04 	.word	0xe000ed04

0800e1e8 <vTaskDelay>:
#endif /* INCLUDE_vTaskDelayUntil */
/*-----------------------------------------------------------*/

#if (INCLUDE_vTaskDelay == 1)

void vTaskDelay(const TickType_t xTicksToDelay) {
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b084      	sub	sp, #16
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
    BaseType_t xAlreadyYielded = pdFALSE;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	60fb      	str	r3, [r7, #12]

    /* A delay time of zero just forces a reschedule. */
    if (xTicksToDelay > (TickType_t)0U) {
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d018      	beq.n	800e22c <vTaskDelay+0x44>
        configASSERT(uxSchedulerSuspended == 0);
 800e1fa:	4b14      	ldr	r3, [pc, #80]	@ (800e24c <vTaskDelay+0x64>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d00b      	beq.n	800e21a <vTaskDelay+0x32>
    __asm volatile("	mov %0, %1												\n"
 800e202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e206:	f383 8811 	msr	BASEPRI, r3
 800e20a:	f3bf 8f6f 	isb	sy
 800e20e:	f3bf 8f4f 	dsb	sy
 800e212:	60bb      	str	r3, [r7, #8]
}
 800e214:	bf00      	nop
 800e216:	bf00      	nop
 800e218:	e7fd      	b.n	800e216 <vTaskDelay+0x2e>
        vTaskSuspendAll();
 800e21a:	f000 f917 	bl	800e44c <vTaskSuspendAll>
            list or removed from the blocked list until the scheduler
            is resumed.

            This task cannot be in an event list as it is the currently
            executing task. */
            prvAddCurrentTaskToDelayedList(xTicksToDelay, pdFALSE);
 800e21e:	2100      	movs	r1, #0
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	f000 fd15 	bl	800ec50 <prvAddCurrentTaskToDelayedList>
        }
        xAlreadyYielded = xTaskResumeAll();
 800e226:	f000 f91f 	bl	800e468 <xTaskResumeAll>
 800e22a:	60f8      	str	r0, [r7, #12]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Force a reschedule if xTaskResumeAll has not already done so, we may
    have put ourselves to sleep. */
    if (xAlreadyYielded == pdFALSE) {
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d107      	bne.n	800e242 <vTaskDelay+0x5a>
        portYIELD_WITHIN_API();
 800e232:	4b07      	ldr	r3, [pc, #28]	@ (800e250 <vTaskDelay+0x68>)
 800e234:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e238:	601a      	str	r2, [r3, #0]
 800e23a:	f3bf 8f4f 	dsb	sy
 800e23e:	f3bf 8f6f 	isb	sy
    } else {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800e242:	bf00      	nop
 800e244:	3710      	adds	r7, #16
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}
 800e24a:	bf00      	nop
 800e24c:	20000ed4 	.word	0x20000ed4
 800e250:	e000ed04 	.word	0xe000ed04

0800e254 <vTaskSuspend>:
#endif /* INCLUDE_vTaskPrioritySet */
/*-----------------------------------------------------------*/

#if (INCLUDE_vTaskSuspend == 1)

void vTaskSuspend(TaskHandle_t xTaskToSuspend) {
 800e254:	b580      	push	{r7, lr}
 800e256:	b084      	sub	sp, #16
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
    TCB_t * pxTCB;

    taskENTER_CRITICAL();
 800e25c:	f001 fa8c 	bl	800f778 <vPortEnterCritical>
    {
        /* If null is passed in here then it is the running task that is
        being suspended. */
        pxTCB = prvGetTCBFromHandle(xTaskToSuspend);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d102      	bne.n	800e26c <vTaskSuspend+0x18>
 800e266:	4b3d      	ldr	r3, [pc, #244]	@ (800e35c <vTaskSuspend+0x108>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	e000      	b.n	800e26e <vTaskSuspend+0x1a>
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	60fb      	str	r3, [r7, #12]

        traceTASK_SUSPEND(pxTCB);

        /* Remove task from the ready/delayed list and place in the
        suspended list. */
        if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	3304      	adds	r3, #4
 800e274:	4618      	mov	r0, r3
 800e276:	f7ff f883 	bl	800d380 <uxListRemove>
 800e27a:	4603      	mov	r3, r0
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d115      	bne.n	800e2ac <vTaskSuspend+0x58>
            taskRESET_READY_PRIORITY(pxTCB->uxPriority);
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e284:	4936      	ldr	r1, [pc, #216]	@ (800e360 <vTaskSuspend+0x10c>)
 800e286:	4613      	mov	r3, r2
 800e288:	009b      	lsls	r3, r3, #2
 800e28a:	4413      	add	r3, r2
 800e28c:	009b      	lsls	r3, r3, #2
 800e28e:	440b      	add	r3, r1
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d10a      	bne.n	800e2ac <vTaskSuspend+0x58>
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e29a:	2201      	movs	r2, #1
 800e29c:	fa02 f303 	lsl.w	r3, r2, r3
 800e2a0:	43da      	mvns	r2, r3
 800e2a2:	4b30      	ldr	r3, [pc, #192]	@ (800e364 <vTaskSuspend+0x110>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	4013      	ands	r3, r2
 800e2a8:	4a2e      	ldr	r2, [pc, #184]	@ (800e364 <vTaskSuspend+0x110>)
 800e2aa:	6013      	str	r3, [r2, #0]
        } else {
            mtCOVERAGE_TEST_MARKER();
        }

        /* Is the task waiting on an event also? */
        if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d004      	beq.n	800e2be <vTaskSuspend+0x6a>
            (void)uxListRemove(&(pxTCB->xEventListItem));
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	3318      	adds	r3, #24
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f7ff f861 	bl	800d380 <uxListRemove>
        } else {
            mtCOVERAGE_TEST_MARKER();
        }

        vListInsertEnd(&xSuspendedTaskList, &(pxTCB->xStateListItem));
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	3304      	adds	r3, #4
 800e2c2:	4619      	mov	r1, r3
 800e2c4:	4828      	ldr	r0, [pc, #160]	@ (800e368 <vTaskSuspend+0x114>)
 800e2c6:	f7fe fffe 	bl	800d2c6 <vListInsertEnd>

#if (configUSE_TASK_NOTIFICATIONS == 1)
        {
            if (pxTCB->ucNotifyState == taskWAITING_NOTIFICATION) {
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 800e2d0:	b2db      	uxtb	r3, r3
 800e2d2:	2b01      	cmp	r3, #1
 800e2d4:	d103      	bne.n	800e2de <vTaskSuspend+0x8a>
                /* The task was blocked to wait for a notification, but is
                now suspended, so no notification was received. */
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	2200      	movs	r2, #0
 800e2da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
            }
        }
#endif
    }
    taskEXIT_CRITICAL();
 800e2de:	f001 fa7d 	bl	800f7dc <vPortExitCritical>

    if (xSchedulerRunning != pdFALSE) {
 800e2e2:	4b22      	ldr	r3, [pc, #136]	@ (800e36c <vTaskSuspend+0x118>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d005      	beq.n	800e2f6 <vTaskSuspend+0xa2>
        /* Reset the next expected unblock time in case it referred to the
        task that is now in the Suspended state. */
        taskENTER_CRITICAL();
 800e2ea:	f001 fa45 	bl	800f778 <vPortEnterCritical>
        { prvResetNextTaskUnblockTime(); }
 800e2ee:	f000 fc71 	bl	800ebd4 <prvResetNextTaskUnblockTime>
        taskEXIT_CRITICAL();
 800e2f2:	f001 fa73 	bl	800f7dc <vPortExitCritical>
    } else {
        mtCOVERAGE_TEST_MARKER();
    }

    if (pxTCB == pxCurrentTCB) {
 800e2f6:	4b19      	ldr	r3, [pc, #100]	@ (800e35c <vTaskSuspend+0x108>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	68fa      	ldr	r2, [r7, #12]
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	d128      	bne.n	800e352 <vTaskSuspend+0xfe>
        if (xSchedulerRunning != pdFALSE) {
 800e300:	4b1a      	ldr	r3, [pc, #104]	@ (800e36c <vTaskSuspend+0x118>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d018      	beq.n	800e33a <vTaskSuspend+0xe6>
            /* The current task has just been suspended. */
            configASSERT(uxSchedulerSuspended == 0);
 800e308:	4b19      	ldr	r3, [pc, #100]	@ (800e370 <vTaskSuspend+0x11c>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d00b      	beq.n	800e328 <vTaskSuspend+0xd4>
    __asm volatile("	mov %0, %1												\n"
 800e310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e314:	f383 8811 	msr	BASEPRI, r3
 800e318:	f3bf 8f6f 	isb	sy
 800e31c:	f3bf 8f4f 	dsb	sy
 800e320:	60bb      	str	r3, [r7, #8]
}
 800e322:	bf00      	nop
 800e324:	bf00      	nop
 800e326:	e7fd      	b.n	800e324 <vTaskSuspend+0xd0>
            portYIELD_WITHIN_API();
 800e328:	4b12      	ldr	r3, [pc, #72]	@ (800e374 <vTaskSuspend+0x120>)
 800e32a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e32e:	601a      	str	r2, [r3, #0]
 800e330:	f3bf 8f4f 	dsb	sy
 800e334:	f3bf 8f6f 	isb	sy
            }
        }
    } else {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800e338:	e00b      	b.n	800e352 <vTaskSuspend+0xfe>
            if (listCURRENT_LIST_LENGTH(&xSuspendedTaskList) == uxCurrentNumberOfTasks) /*lint !e931 Right has no side effect, just volatile. */
 800e33a:	4b0b      	ldr	r3, [pc, #44]	@ (800e368 <vTaskSuspend+0x114>)
 800e33c:	681a      	ldr	r2, [r3, #0]
 800e33e:	4b0e      	ldr	r3, [pc, #56]	@ (800e378 <vTaskSuspend+0x124>)
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	429a      	cmp	r2, r3
 800e344:	d103      	bne.n	800e34e <vTaskSuspend+0xfa>
                pxCurrentTCB = NULL;
 800e346:	4b05      	ldr	r3, [pc, #20]	@ (800e35c <vTaskSuspend+0x108>)
 800e348:	2200      	movs	r2, #0
 800e34a:	601a      	str	r2, [r3, #0]
}
 800e34c:	e001      	b.n	800e352 <vTaskSuspend+0xfe>
                vTaskSwitchContext();
 800e34e:	f000 f9f3 	bl	800e738 <vTaskSwitchContext>
}
 800e352:	bf00      	nop
 800e354:	3710      	adds	r7, #16
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}
 800e35a:	bf00      	nop
 800e35c:	20000dac 	.word	0x20000dac
 800e360:	20000db0 	.word	0x20000db0
 800e364:	20000eb4 	.word	0x20000eb4
 800e368:	20000e98 	.word	0x20000e98
 800e36c:	20000eb8 	.word	0x20000eb8
 800e370:	20000ed4 	.word	0x20000ed4
 800e374:	e000ed04 	.word	0xe000ed04
 800e378:	20000eac 	.word	0x20000eac

0800e37c <vTaskStartScheduler>:
}

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler(void) {
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b08a      	sub	sp, #40	@ 0x28
 800e380:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

/* Add the idle task at the lowest priority. */
#if (configSUPPORT_STATIC_ALLOCATION == 1)
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800e382:	2300      	movs	r3, #0
 800e384:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 800e386:	2300      	movs	r3, #0
 800e388:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
        address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory(&pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize);
 800e38a:	463a      	mov	r2, r7
 800e38c:	1d39      	adds	r1, r7, #4
 800e38e:	f107 0308 	add.w	r3, r7, #8
 800e392:	4618      	mov	r0, r3
 800e394:	f7f4 fa36 	bl	8002804 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic(prvIdleTask, configIDLE_TASK_NAME, ulIdleTaskStackSize, (void *)NULL, /*lint !e961.  The cast is not redundant for all compilers. */
 800e398:	6839      	ldr	r1, [r7, #0]
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	68ba      	ldr	r2, [r7, #8]
 800e39e:	9202      	str	r2, [sp, #8]
 800e3a0:	9301      	str	r3, [sp, #4]
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	9300      	str	r3, [sp, #0]
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	460a      	mov	r2, r1
 800e3aa:	4922      	ldr	r1, [pc, #136]	@ (800e434 <vTaskStartScheduler+0xb8>)
 800e3ac:	4822      	ldr	r0, [pc, #136]	@ (800e438 <vTaskStartScheduler+0xbc>)
 800e3ae:	f7ff fcf9 	bl	800dda4 <xTaskCreateStatic>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	4a21      	ldr	r2, [pc, #132]	@ (800e43c <vTaskStartScheduler+0xc0>)
 800e3b6:	6013      	str	r3, [r2, #0]
                                            portPRIVILEGE_BIT,                                                    /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                            pxIdleTaskStackBuffer, pxIdleTaskTCBBuffer);                          /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if (xIdleTaskHandle != NULL) {
 800e3b8:	4b20      	ldr	r3, [pc, #128]	@ (800e43c <vTaskStartScheduler+0xc0>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d002      	beq.n	800e3c6 <vTaskStartScheduler+0x4a>
            xReturn = pdPASS;
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	617b      	str	r3, [r7, #20]
 800e3c4:	e001      	b.n	800e3ca <vTaskStartScheduler+0x4e>
        } else {
            xReturn = pdFAIL;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	617b      	str	r3, [r7, #20]
    }
#endif /* configSUPPORT_STATIC_ALLOCATION */

#if (configUSE_TIMERS == 1)
    {
        if (xReturn == pdPASS) {
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	2b01      	cmp	r3, #1
 800e3ce:	d102      	bne.n	800e3d6 <vTaskStartScheduler+0x5a>
            xReturn = xTimerCreateTimerTask();
 800e3d0:	f000 fca4 	bl	800ed1c <xTimerCreateTimerTask>
 800e3d4:	6178      	str	r0, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }
    }
#endif /* configUSE_TIMERS */

    if (xReturn == pdPASS) {
 800e3d6:	697b      	ldr	r3, [r7, #20]
 800e3d8:	2b01      	cmp	r3, #1
 800e3da:	d116      	bne.n	800e40a <vTaskStartScheduler+0x8e>
    __asm volatile("	mov %0, %1												\n"
 800e3dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3e0:	f383 8811 	msr	BASEPRI, r3
 800e3e4:	f3bf 8f6f 	isb	sy
 800e3e8:	f3bf 8f4f 	dsb	sy
 800e3ec:	613b      	str	r3, [r7, #16]
}
 800e3ee:	bf00      	nop
            for additional information. */
            _impure_ptr = &(pxCurrentTCB->xNewLib_reent);
        }
#endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800e3f0:	4b13      	ldr	r3, [pc, #76]	@ (800e440 <vTaskStartScheduler+0xc4>)
 800e3f2:	f04f 32ff 	mov.w	r2, #4294967295
 800e3f6:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800e3f8:	4b12      	ldr	r3, [pc, #72]	@ (800e444 <vTaskStartScheduler+0xc8>)
 800e3fa:	2201      	movs	r2, #1
 800e3fc:	601a      	str	r2, [r3, #0]
        xTickCount = (TickType_t)configINITIAL_TICK_COUNT;
 800e3fe:	4b12      	ldr	r3, [pc, #72]	@ (800e448 <vTaskStartScheduler+0xcc>)
 800e400:	2200      	movs	r2, #0
 800e402:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
        portable interface. */
        if (xPortStartScheduler() != pdFALSE) {
 800e404:	f001 f914 	bl	800f630 <xPortStartScheduler>
    }

    /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
    meaning xIdleTaskHandle is not used anywhere else. */
    (void)xIdleTaskHandle;
}
 800e408:	e00f      	b.n	800e42a <vTaskStartScheduler+0xae>
        configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
 800e40a:	697b      	ldr	r3, [r7, #20]
 800e40c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e410:	d10b      	bne.n	800e42a <vTaskStartScheduler+0xae>
    __asm volatile("	mov %0, %1												\n"
 800e412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e416:	f383 8811 	msr	BASEPRI, r3
 800e41a:	f3bf 8f6f 	isb	sy
 800e41e:	f3bf 8f4f 	dsb	sy
 800e422:	60fb      	str	r3, [r7, #12]
}
 800e424:	bf00      	nop
 800e426:	bf00      	nop
 800e428:	e7fd      	b.n	800e426 <vTaskStartScheduler+0xaa>
}
 800e42a:	bf00      	nop
 800e42c:	3718      	adds	r7, #24
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}
 800e432:	bf00      	nop
 800e434:	08013a60 	.word	0x08013a60
 800e438:	0800ea69 	.word	0x0800ea69
 800e43c:	20000ed0 	.word	0x20000ed0
 800e440:	20000ecc 	.word	0x20000ecc
 800e444:	20000eb8 	.word	0x20000eb8
 800e448:	20000eb0 	.word	0x20000eb0

0800e44c <vTaskSuspendAll>:
    xSchedulerRunning = pdFALSE;
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll(void) {
 800e44c:	b480      	push	{r7}
 800e44e:	af00      	add	r7, sp, #0
    do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
    is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800e450:	4b04      	ldr	r3, [pc, #16]	@ (800e464 <vTaskSuspendAll+0x18>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	3301      	adds	r3, #1
 800e456:	4a03      	ldr	r2, [pc, #12]	@ (800e464 <vTaskSuspendAll+0x18>)
 800e458:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
    the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800e45a:	bf00      	nop
 800e45c:	46bd      	mov	sp, r7
 800e45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e462:	4770      	bx	lr
 800e464:	20000ed4 	.word	0x20000ed4

0800e468 <xTaskResumeAll>:
}

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll(void) {
 800e468:	b580      	push	{r7, lr}
 800e46a:	b084      	sub	sp, #16
 800e46c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800e46e:	2300      	movs	r3, #0
 800e470:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800e472:	2300      	movs	r3, #0
 800e474:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
    previous call to vTaskSuspendAll(). */
    configASSERT(uxSchedulerSuspended);
 800e476:	4b42      	ldr	r3, [pc, #264]	@ (800e580 <xTaskResumeAll+0x118>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d10b      	bne.n	800e496 <xTaskResumeAll+0x2e>
    __asm volatile("	mov %0, %1												\n"
 800e47e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e482:	f383 8811 	msr	BASEPRI, r3
 800e486:	f3bf 8f6f 	isb	sy
 800e48a:	f3bf 8f4f 	dsb	sy
 800e48e:	603b      	str	r3, [r7, #0]
}
 800e490:	bf00      	nop
 800e492:	bf00      	nop
 800e494:	e7fd      	b.n	800e492 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
    list while the scheduler was suspended.  If this was the case then the
    removed task will have been added to the xPendingReadyList.  Once the
    scheduler has been resumed it is safe to move all the pending ready
    tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800e496:	f001 f96f 	bl	800f778 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800e49a:	4b39      	ldr	r3, [pc, #228]	@ (800e580 <xTaskResumeAll+0x118>)
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	3b01      	subs	r3, #1
 800e4a0:	4a37      	ldr	r2, [pc, #220]	@ (800e580 <xTaskResumeAll+0x118>)
 800e4a2:	6013      	str	r3, [r2, #0]

        if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
 800e4a4:	4b36      	ldr	r3, [pc, #216]	@ (800e580 <xTaskResumeAll+0x118>)
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d161      	bne.n	800e570 <xTaskResumeAll+0x108>
            if (uxCurrentNumberOfTasks > (UBaseType_t)0U) {
 800e4ac:	4b35      	ldr	r3, [pc, #212]	@ (800e584 <xTaskResumeAll+0x11c>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d05d      	beq.n	800e570 <xTaskResumeAll+0x108>
                /* Move any readied tasks from the pending list into the
                appropriate ready list. */
                while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
 800e4b4:	e02e      	b.n	800e514 <xTaskResumeAll+0xac>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY(
 800e4b6:	4b34      	ldr	r3, [pc, #208]	@ (800e588 <xTaskResumeAll+0x120>)
 800e4b8:	68db      	ldr	r3, [r3, #12]
 800e4ba:	68db      	ldr	r3, [r3, #12]
 800e4bc:	60fb      	str	r3, [r7, #12]
                        (&xPendingReadyList)); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
                    (void)uxListRemove(&(pxTCB->xEventListItem));
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	3318      	adds	r3, #24
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f7fe ff5c 	bl	800d380 <uxListRemove>
                    (void)uxListRemove(&(pxTCB->xStateListItem));
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	3304      	adds	r3, #4
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f7fe ff57 	bl	800d380 <uxListRemove>
                    prvAddTaskToReadyList(pxTCB);
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4d6:	2201      	movs	r2, #1
 800e4d8:	409a      	lsls	r2, r3
 800e4da:	4b2c      	ldr	r3, [pc, #176]	@ (800e58c <xTaskResumeAll+0x124>)
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	4313      	orrs	r3, r2
 800e4e0:	4a2a      	ldr	r2, [pc, #168]	@ (800e58c <xTaskResumeAll+0x124>)
 800e4e2:	6013      	str	r3, [r2, #0]
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4e8:	4613      	mov	r3, r2
 800e4ea:	009b      	lsls	r3, r3, #2
 800e4ec:	4413      	add	r3, r2
 800e4ee:	009b      	lsls	r3, r3, #2
 800e4f0:	4a27      	ldr	r2, [pc, #156]	@ (800e590 <xTaskResumeAll+0x128>)
 800e4f2:	441a      	add	r2, r3
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	3304      	adds	r3, #4
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	4610      	mov	r0, r2
 800e4fc:	f7fe fee3 	bl	800d2c6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                    task then a yield must be performed. */
                    if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e504:	4b23      	ldr	r3, [pc, #140]	@ (800e594 <xTaskResumeAll+0x12c>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e50a:	429a      	cmp	r2, r3
 800e50c:	d302      	bcc.n	800e514 <xTaskResumeAll+0xac>
                        xYieldPending = pdTRUE;
 800e50e:	4b22      	ldr	r3, [pc, #136]	@ (800e598 <xTaskResumeAll+0x130>)
 800e510:	2201      	movs	r2, #1
 800e512:	601a      	str	r2, [r3, #0]
                while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
 800e514:	4b1c      	ldr	r3, [pc, #112]	@ (800e588 <xTaskResumeAll+0x120>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d1cc      	bne.n	800e4b6 <xTaskResumeAll+0x4e>
                    } else {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if (pxTCB != NULL) {
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d001      	beq.n	800e526 <xTaskResumeAll+0xbe>
                    which may have prevented the next unblock time from being
                    re-calculated, in which case re-calculate it now.  Mainly
                    important for low power tickless implementations, where
                    this can prevent an unnecessary exit from low power
                    state. */
                    prvResetNextTaskUnblockTime();
 800e522:	f000 fb57 	bl	800ebd4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                they should be processed now.  This ensures the tick count does
                not	slip, and that any delayed tasks are resumed at the correct
                time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e526:	4b1d      	ldr	r3, [pc, #116]	@ (800e59c <xTaskResumeAll+0x134>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	607b      	str	r3, [r7, #4]

                    if (xPendedCounts > (TickType_t)0U) {
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d010      	beq.n	800e554 <xTaskResumeAll+0xec>
                        do {
                            if (xTaskIncrementTick() != pdFALSE) {
 800e532:	f000 f847 	bl	800e5c4 <xTaskIncrementTick>
 800e536:	4603      	mov	r3, r0
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d002      	beq.n	800e542 <xTaskResumeAll+0xda>
                                xYieldPending = pdTRUE;
 800e53c:	4b16      	ldr	r3, [pc, #88]	@ (800e598 <xTaskResumeAll+0x130>)
 800e53e:	2201      	movs	r2, #1
 800e540:	601a      	str	r2, [r3, #0]
                            } else {
                                mtCOVERAGE_TEST_MARKER();
                            }
                            --xPendedCounts;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	3b01      	subs	r3, #1
 800e546:	607b      	str	r3, [r7, #4]
                        } while (xPendedCounts > (TickType_t)0U);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d1f1      	bne.n	800e532 <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 800e54e:	4b13      	ldr	r3, [pc, #76]	@ (800e59c <xTaskResumeAll+0x134>)
 800e550:	2200      	movs	r2, #0
 800e552:	601a      	str	r2, [r3, #0]
                    } else {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if (xYieldPending != pdFALSE) {
 800e554:	4b10      	ldr	r3, [pc, #64]	@ (800e598 <xTaskResumeAll+0x130>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d009      	beq.n	800e570 <xTaskResumeAll+0x108>
#if (configUSE_PREEMPTION != 0)
                    { xAlreadyYielded = pdTRUE; }
 800e55c:	2301      	movs	r3, #1
 800e55e:	60bb      	str	r3, [r7, #8]
#endif
                    taskYIELD_IF_USING_PREEMPTION();
 800e560:	4b0f      	ldr	r3, [pc, #60]	@ (800e5a0 <xTaskResumeAll+0x138>)
 800e562:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e566:	601a      	str	r2, [r3, #0]
 800e568:	f3bf 8f4f 	dsb	sy
 800e56c:	f3bf 8f6f 	isb	sy
            }
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800e570:	f001 f934 	bl	800f7dc <vPortExitCritical>

    return xAlreadyYielded;
 800e574:	68bb      	ldr	r3, [r7, #8]
}
 800e576:	4618      	mov	r0, r3
 800e578:	3710      	adds	r7, #16
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}
 800e57e:	bf00      	nop
 800e580:	20000ed4 	.word	0x20000ed4
 800e584:	20000eac 	.word	0x20000eac
 800e588:	20000e6c 	.word	0x20000e6c
 800e58c:	20000eb4 	.word	0x20000eb4
 800e590:	20000db0 	.word	0x20000db0
 800e594:	20000dac 	.word	0x20000dac
 800e598:	20000ec0 	.word	0x20000ec0
 800e59c:	20000ebc 	.word	0x20000ebc
 800e5a0:	e000ed04 	.word	0xe000ed04

0800e5a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount(void) {
 800e5a4:	b480      	push	{r7}
 800e5a6:	b083      	sub	sp, #12
 800e5a8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    { xTicks = xTickCount; }
 800e5aa:	4b05      	ldr	r3, [pc, #20]	@ (800e5c0 <xTaskGetTickCount+0x1c>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	607b      	str	r3, [r7, #4]
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800e5b0:	687b      	ldr	r3, [r7, #4]
}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	370c      	adds	r7, #12
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5bc:	4770      	bx	lr
 800e5be:	bf00      	nop
 800e5c0:	20000eb0 	.word	0x20000eb0

0800e5c4 <xTaskIncrementTick>:
}

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick(void) {
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b086      	sub	sp, #24
 800e5c8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	617b      	str	r3, [r7, #20]

    /* Called by the portable layer each time a tick interrupt occurs.
    Increments the tick then checks to see if the new tick value will cause any
    tasks to be unblocked. */
    traceTASK_INCREMENT_TICK(xTickCount);
    if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
 800e5ce:	4b4f      	ldr	r3, [pc, #316]	@ (800e70c <xTaskIncrementTick+0x148>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	f040 808f 	bne.w	800e6f6 <xTaskIncrementTick+0x132>
        /* Minor optimisation.  The tick count cannot change in this
        block. */
        const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
 800e5d8:	4b4d      	ldr	r3, [pc, #308]	@ (800e710 <xTaskIncrementTick+0x14c>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	3301      	adds	r3, #1
 800e5de:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
        delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800e5e0:	4a4b      	ldr	r2, [pc, #300]	@ (800e710 <xTaskIncrementTick+0x14c>)
 800e5e2:	693b      	ldr	r3, [r7, #16]
 800e5e4:	6013      	str	r3, [r2, #0]

        if (xConstTickCount == (TickType_t)0U) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e5e6:	693b      	ldr	r3, [r7, #16]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d121      	bne.n	800e630 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800e5ec:	4b49      	ldr	r3, [pc, #292]	@ (800e714 <xTaskIncrementTick+0x150>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d00b      	beq.n	800e60e <xTaskIncrementTick+0x4a>
    __asm volatile("	mov %0, %1												\n"
 800e5f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5fa:	f383 8811 	msr	BASEPRI, r3
 800e5fe:	f3bf 8f6f 	isb	sy
 800e602:	f3bf 8f4f 	dsb	sy
 800e606:	603b      	str	r3, [r7, #0]
}
 800e608:	bf00      	nop
 800e60a:	bf00      	nop
 800e60c:	e7fd      	b.n	800e60a <xTaskIncrementTick+0x46>
 800e60e:	4b41      	ldr	r3, [pc, #260]	@ (800e714 <xTaskIncrementTick+0x150>)
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	60fb      	str	r3, [r7, #12]
 800e614:	4b40      	ldr	r3, [pc, #256]	@ (800e718 <xTaskIncrementTick+0x154>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	4a3e      	ldr	r2, [pc, #248]	@ (800e714 <xTaskIncrementTick+0x150>)
 800e61a:	6013      	str	r3, [r2, #0]
 800e61c:	4a3e      	ldr	r2, [pc, #248]	@ (800e718 <xTaskIncrementTick+0x154>)
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	6013      	str	r3, [r2, #0]
 800e622:	4b3e      	ldr	r3, [pc, #248]	@ (800e71c <xTaskIncrementTick+0x158>)
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	3301      	adds	r3, #1
 800e628:	4a3c      	ldr	r2, [pc, #240]	@ (800e71c <xTaskIncrementTick+0x158>)
 800e62a:	6013      	str	r3, [r2, #0]
 800e62c:	f000 fad2 	bl	800ebd4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
        the	queue in the order of their wake time - meaning once one task
        has been found whose block time has not expired there is no need to
        look any further down the list. */
        if (xConstTickCount >= xNextTaskUnblockTime) {
 800e630:	4b3b      	ldr	r3, [pc, #236]	@ (800e720 <xTaskIncrementTick+0x15c>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	693a      	ldr	r2, [r7, #16]
 800e636:	429a      	cmp	r2, r3
 800e638:	d348      	bcc.n	800e6cc <xTaskIncrementTick+0x108>
            for (;;) {
                if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
 800e63a:	4b36      	ldr	r3, [pc, #216]	@ (800e714 <xTaskIncrementTick+0x150>)
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d104      	bne.n	800e64e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                    to the maximum possible value so it is extremely
                    unlikely that the
                    if( xTickCount >= xNextTaskUnblockTime ) test will pass
                    next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e644:	4b36      	ldr	r3, [pc, #216]	@ (800e720 <xTaskIncrementTick+0x15c>)
 800e646:	f04f 32ff 	mov.w	r2, #4294967295
 800e64a:	601a      	str	r2, [r3, #0]
                    break;
 800e64c:	e03e      	b.n	800e6cc <xTaskIncrementTick+0x108>
                    /* The delayed list is not empty, get the value of the
                    item at the head of the delayed list.  This is the time
                    at which the task at the head of the delayed list must
                    be removed from the Blocked state. */
                    pxTCB =
                        listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e64e:	4b31      	ldr	r3, [pc, #196]	@ (800e714 <xTaskIncrementTick+0x150>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	68db      	ldr	r3, [r3, #12]
                    pxTCB =
 800e654:	68db      	ldr	r3, [r3, #12]
 800e656:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	685b      	ldr	r3, [r3, #4]
 800e65c:	607b      	str	r3, [r7, #4]

                    if (xConstTickCount < xItemValue) {
 800e65e:	693a      	ldr	r2, [r7, #16]
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	429a      	cmp	r2, r3
 800e664:	d203      	bcs.n	800e66e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                        item value is the time at which the task at the head
                        of the blocked list must be removed from the Blocked
                        state -	so record the item value in
                        xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800e666:	4a2e      	ldr	r2, [pc, #184]	@ (800e720 <xTaskIncrementTick+0x15c>)
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e66c:	e02e      	b.n	800e6cc <xTaskIncrementTick+0x108>
                    } else {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    (void)uxListRemove(&(pxTCB->xStateListItem));
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	3304      	adds	r3, #4
 800e672:	4618      	mov	r0, r3
 800e674:	f7fe fe84 	bl	800d380 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                    it from the event list. */
                    if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d004      	beq.n	800e68a <xTaskIncrementTick+0xc6>
                        (void)uxListRemove(&(pxTCB->xEventListItem));
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	3318      	adds	r3, #24
 800e684:	4618      	mov	r0, r3
 800e686:	f7fe fe7b 	bl	800d380 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                    list. */
                    prvAddTaskToReadyList(pxTCB);
 800e68a:	68bb      	ldr	r3, [r7, #8]
 800e68c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e68e:	2201      	movs	r2, #1
 800e690:	409a      	lsls	r2, r3
 800e692:	4b24      	ldr	r3, [pc, #144]	@ (800e724 <xTaskIncrementTick+0x160>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	4313      	orrs	r3, r2
 800e698:	4a22      	ldr	r2, [pc, #136]	@ (800e724 <xTaskIncrementTick+0x160>)
 800e69a:	6013      	str	r3, [r2, #0]
 800e69c:	68bb      	ldr	r3, [r7, #8]
 800e69e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6a0:	4613      	mov	r3, r2
 800e6a2:	009b      	lsls	r3, r3, #2
 800e6a4:	4413      	add	r3, r2
 800e6a6:	009b      	lsls	r3, r3, #2
 800e6a8:	4a1f      	ldr	r2, [pc, #124]	@ (800e728 <xTaskIncrementTick+0x164>)
 800e6aa:	441a      	add	r2, r3
 800e6ac:	68bb      	ldr	r3, [r7, #8]
 800e6ae:	3304      	adds	r3, #4
 800e6b0:	4619      	mov	r1, r3
 800e6b2:	4610      	mov	r0, r2
 800e6b4:	f7fe fe07 	bl	800d2c6 <vListInsertEnd>
                    {
                        /* Preemption is on, but a context switch should
                        only be performed if the unblocked task has a
                        priority that is equal to or higher than the
                        currently executing task. */
                        if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6bc:	4b1b      	ldr	r3, [pc, #108]	@ (800e72c <xTaskIncrementTick+0x168>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6c2:	429a      	cmp	r2, r3
 800e6c4:	d3b9      	bcc.n	800e63a <xTaskIncrementTick+0x76>
                            xSwitchRequired = pdTRUE;
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	617b      	str	r3, [r7, #20]
                if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
 800e6ca:	e7b6      	b.n	800e63a <xTaskIncrementTick+0x76>
/* Tasks of equal priority to the currently running task will share
processing time (time slice) if preemption is on, and the application
writer has not explicitly turned time slicing off. */
#if ((configUSE_PREEMPTION == 1) && (configUSE_TIME_SLICING == 1))
        {
            if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
 800e6cc:	4b17      	ldr	r3, [pc, #92]	@ (800e72c <xTaskIncrementTick+0x168>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6d2:	4915      	ldr	r1, [pc, #84]	@ (800e728 <xTaskIncrementTick+0x164>)
 800e6d4:	4613      	mov	r3, r2
 800e6d6:	009b      	lsls	r3, r3, #2
 800e6d8:	4413      	add	r3, r2
 800e6da:	009b      	lsls	r3, r3, #2
 800e6dc:	440b      	add	r3, r1
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	2b01      	cmp	r3, #1
 800e6e2:	d901      	bls.n	800e6e8 <xTaskIncrementTick+0x124>
                xSwitchRequired = pdTRUE;
 800e6e4:	2301      	movs	r3, #1
 800e6e6:	617b      	str	r3, [r7, #20]
        }
#endif /* configUSE_TICK_HOOK */

#if (configUSE_PREEMPTION == 1)
        {
            if (xYieldPending != pdFALSE) {
 800e6e8:	4b11      	ldr	r3, [pc, #68]	@ (800e730 <xTaskIncrementTick+0x16c>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d007      	beq.n	800e700 <xTaskIncrementTick+0x13c>
                xSwitchRequired = pdTRUE;
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	617b      	str	r3, [r7, #20]
 800e6f4:	e004      	b.n	800e700 <xTaskIncrementTick+0x13c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
#endif /* configUSE_PREEMPTION */
    } else {
        ++xPendedTicks;
 800e6f6:	4b0f      	ldr	r3, [pc, #60]	@ (800e734 <xTaskIncrementTick+0x170>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	3301      	adds	r3, #1
 800e6fc:	4a0d      	ldr	r2, [pc, #52]	@ (800e734 <xTaskIncrementTick+0x170>)
 800e6fe:	6013      	str	r3, [r2, #0]
#if (configUSE_TICK_HOOK == 1)
        { vApplicationTickHook(); }
#endif
    }

    return xSwitchRequired;
 800e700:	697b      	ldr	r3, [r7, #20]
}
 800e702:	4618      	mov	r0, r3
 800e704:	3718      	adds	r7, #24
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}
 800e70a:	bf00      	nop
 800e70c:	20000ed4 	.word	0x20000ed4
 800e710:	20000eb0 	.word	0x20000eb0
 800e714:	20000e64 	.word	0x20000e64
 800e718:	20000e68 	.word	0x20000e68
 800e71c:	20000ec4 	.word	0x20000ec4
 800e720:	20000ecc 	.word	0x20000ecc
 800e724:	20000eb4 	.word	0x20000eb4
 800e728:	20000db0 	.word	0x20000db0
 800e72c:	20000dac 	.word	0x20000dac
 800e730:	20000ec0 	.word	0x20000ec0
 800e734:	20000ebc 	.word	0x20000ebc

0800e738 <vTaskSwitchContext>:
}

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext(void) {
 800e738:	b480      	push	{r7}
 800e73a:	b087      	sub	sp, #28
 800e73c:	af00      	add	r7, sp, #0
    if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
 800e73e:	4b27      	ldr	r3, [pc, #156]	@ (800e7dc <vTaskSwitchContext+0xa4>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d003      	beq.n	800e74e <vTaskSwitchContext+0x16>
        /* The scheduler is currently suspended - do not allow a context
        switch. */
        xYieldPending = pdTRUE;
 800e746:	4b26      	ldr	r3, [pc, #152]	@ (800e7e0 <vTaskSwitchContext+0xa8>)
 800e748:	2201      	movs	r2, #1
 800e74a:	601a      	str	r2, [r3, #0]
            for additional information. */
            _impure_ptr = &(pxCurrentTCB->xNewLib_reent);
        }
#endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800e74c:	e040      	b.n	800e7d0 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 800e74e:	4b24      	ldr	r3, [pc, #144]	@ (800e7e0 <vTaskSwitchContext+0xa8>)
 800e750:	2200      	movs	r2, #0
 800e752:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e754:	4b23      	ldr	r3, [pc, #140]	@ (800e7e4 <vTaskSwitchContext+0xac>)
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	60fb      	str	r3, [r7, #12]
    __asm volatile("clz %0, %1" : "=r"(ucReturn) : "r"(ulBitmap) : "memory");
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	fab3 f383 	clz	r3, r3
 800e760:	72fb      	strb	r3, [r7, #11]
    return ucReturn;
 800e762:	7afb      	ldrb	r3, [r7, #11]
 800e764:	f1c3 031f 	rsb	r3, r3, #31
 800e768:	617b      	str	r3, [r7, #20]
 800e76a:	491f      	ldr	r1, [pc, #124]	@ (800e7e8 <vTaskSwitchContext+0xb0>)
 800e76c:	697a      	ldr	r2, [r7, #20]
 800e76e:	4613      	mov	r3, r2
 800e770:	009b      	lsls	r3, r3, #2
 800e772:	4413      	add	r3, r2
 800e774:	009b      	lsls	r3, r3, #2
 800e776:	440b      	add	r3, r1
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d10b      	bne.n	800e796 <vTaskSwitchContext+0x5e>
    __asm volatile("	mov %0, %1												\n"
 800e77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e782:	f383 8811 	msr	BASEPRI, r3
 800e786:	f3bf 8f6f 	isb	sy
 800e78a:	f3bf 8f4f 	dsb	sy
 800e78e:	607b      	str	r3, [r7, #4]
}
 800e790:	bf00      	nop
 800e792:	bf00      	nop
 800e794:	e7fd      	b.n	800e792 <vTaskSwitchContext+0x5a>
 800e796:	697a      	ldr	r2, [r7, #20]
 800e798:	4613      	mov	r3, r2
 800e79a:	009b      	lsls	r3, r3, #2
 800e79c:	4413      	add	r3, r2
 800e79e:	009b      	lsls	r3, r3, #2
 800e7a0:	4a11      	ldr	r2, [pc, #68]	@ (800e7e8 <vTaskSwitchContext+0xb0>)
 800e7a2:	4413      	add	r3, r2
 800e7a4:	613b      	str	r3, [r7, #16]
 800e7a6:	693b      	ldr	r3, [r7, #16]
 800e7a8:	685b      	ldr	r3, [r3, #4]
 800e7aa:	685a      	ldr	r2, [r3, #4]
 800e7ac:	693b      	ldr	r3, [r7, #16]
 800e7ae:	605a      	str	r2, [r3, #4]
 800e7b0:	693b      	ldr	r3, [r7, #16]
 800e7b2:	685a      	ldr	r2, [r3, #4]
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	3308      	adds	r3, #8
 800e7b8:	429a      	cmp	r2, r3
 800e7ba:	d104      	bne.n	800e7c6 <vTaskSwitchContext+0x8e>
 800e7bc:	693b      	ldr	r3, [r7, #16]
 800e7be:	685b      	ldr	r3, [r3, #4]
 800e7c0:	685a      	ldr	r2, [r3, #4]
 800e7c2:	693b      	ldr	r3, [r7, #16]
 800e7c4:	605a      	str	r2, [r3, #4]
 800e7c6:	693b      	ldr	r3, [r7, #16]
 800e7c8:	685b      	ldr	r3, [r3, #4]
 800e7ca:	68db      	ldr	r3, [r3, #12]
 800e7cc:	4a07      	ldr	r2, [pc, #28]	@ (800e7ec <vTaskSwitchContext+0xb4>)
 800e7ce:	6013      	str	r3, [r2, #0]
}
 800e7d0:	bf00      	nop
 800e7d2:	371c      	adds	r7, #28
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7da:	4770      	bx	lr
 800e7dc:	20000ed4 	.word	0x20000ed4
 800e7e0:	20000ec0 	.word	0x20000ec0
 800e7e4:	20000eb4 	.word	0x20000eb4
 800e7e8:	20000db0 	.word	0x20000db0
 800e7ec:	20000dac 	.word	0x20000dac

0800e7f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList(List_t * const pxEventList, const TickType_t xTicksToWait) {
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b084      	sub	sp, #16
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
 800e7f8:	6039      	str	r1, [r7, #0]
    configASSERT(pxEventList);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d10b      	bne.n	800e818 <vTaskPlaceOnEventList+0x28>
    __asm volatile("	mov %0, %1												\n"
 800e800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e804:	f383 8811 	msr	BASEPRI, r3
 800e808:	f3bf 8f6f 	isb	sy
 800e80c:	f3bf 8f4f 	dsb	sy
 800e810:	60fb      	str	r3, [r7, #12]
}
 800e812:	bf00      	nop
 800e814:	bf00      	nop
 800e816:	e7fd      	b.n	800e814 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
    This is placed in the list in priority order so the highest priority task
    is the first to be woken by the event.  The queue that contains the event
    list is locked, preventing simultaneous access from interrupts. */
    vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
 800e818:	4b07      	ldr	r3, [pc, #28]	@ (800e838 <vTaskPlaceOnEventList+0x48>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	3318      	adds	r3, #24
 800e81e:	4619      	mov	r1, r3
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f7fe fd74 	bl	800d30e <vListInsert>

    prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
 800e826:	2101      	movs	r1, #1
 800e828:	6838      	ldr	r0, [r7, #0]
 800e82a:	f000 fa11 	bl	800ec50 <prvAddCurrentTaskToDelayedList>
}
 800e82e:	bf00      	nop
 800e830:	3710      	adds	r7, #16
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}
 800e836:	bf00      	nop
 800e838:	20000dac 	.word	0x20000dac

0800e83c <vTaskPlaceOnEventListRestricted>:
}
/*-----------------------------------------------------------*/

#if (configUSE_TIMERS == 1)

void vTaskPlaceOnEventListRestricted(List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely) {
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b086      	sub	sp, #24
 800e840:	af00      	add	r7, sp, #0
 800e842:	60f8      	str	r0, [r7, #12]
 800e844:	60b9      	str	r1, [r7, #8]
 800e846:	607a      	str	r2, [r7, #4]
    configASSERT(pxEventList);
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d10b      	bne.n	800e866 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile("	mov %0, %1												\n"
 800e84e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e852:	f383 8811 	msr	BASEPRI, r3
 800e856:	f3bf 8f6f 	isb	sy
 800e85a:	f3bf 8f4f 	dsb	sy
 800e85e:	617b      	str	r3, [r7, #20]
}
 800e860:	bf00      	nop
 800e862:	bf00      	nop
 800e864:	e7fd      	b.n	800e862 <vTaskPlaceOnEventListRestricted+0x26>

    /* Place the event list item of the TCB in the appropriate event list.
    In this case it is assume that this is the only task that is going to
    be waiting on this event list, so the faster vListInsertEnd() function
    can be used in place of vListInsert. */
    vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
 800e866:	4b0a      	ldr	r3, [pc, #40]	@ (800e890 <vTaskPlaceOnEventListRestricted+0x54>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	3318      	adds	r3, #24
 800e86c:	4619      	mov	r1, r3
 800e86e:	68f8      	ldr	r0, [r7, #12]
 800e870:	f7fe fd29 	bl	800d2c6 <vListInsertEnd>

    /* If the task should block indefinitely then set the block time to a
    value that will be recognised as an indefinite delay inside the
    prvAddCurrentTaskToDelayedList() function. */
    if (xWaitIndefinitely != pdFALSE) {
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d002      	beq.n	800e880 <vTaskPlaceOnEventListRestricted+0x44>
        xTicksToWait = portMAX_DELAY;
 800e87a:	f04f 33ff 	mov.w	r3, #4294967295
 800e87e:	60bb      	str	r3, [r7, #8]
    }

    traceTASK_DELAY_UNTIL((xTickCount + xTicksToWait));
    prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
 800e880:	6879      	ldr	r1, [r7, #4]
 800e882:	68b8      	ldr	r0, [r7, #8]
 800e884:	f000 f9e4 	bl	800ec50 <prvAddCurrentTaskToDelayedList>
}
 800e888:	bf00      	nop
 800e88a:	3718      	adds	r7, #24
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}
 800e890:	20000dac 	.word	0x20000dac

0800e894 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList(const List_t * const pxEventList) {
 800e894:	b580      	push	{r7, lr}
 800e896:	b086      	sub	sp, #24
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
    get called - the lock count on the queue will get modified instead.  This
    means exclusive access to the event list is guaranteed here.

    This function assumes that a check has already been made to ensure that
    pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY(pxEventList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	68db      	ldr	r3, [r3, #12]
 800e8a0:	68db      	ldr	r3, [r3, #12]
 800e8a2:	613b      	str	r3, [r7, #16]
    configASSERT(pxUnblockedTCB);
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d10b      	bne.n	800e8c2 <xTaskRemoveFromEventList+0x2e>
    __asm volatile("	mov %0, %1												\n"
 800e8aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8ae:	f383 8811 	msr	BASEPRI, r3
 800e8b2:	f3bf 8f6f 	isb	sy
 800e8b6:	f3bf 8f4f 	dsb	sy
 800e8ba:	60fb      	str	r3, [r7, #12]
}
 800e8bc:	bf00      	nop
 800e8be:	bf00      	nop
 800e8c0:	e7fd      	b.n	800e8be <xTaskRemoveFromEventList+0x2a>
    (void)uxListRemove(&(pxUnblockedTCB->xEventListItem));
 800e8c2:	693b      	ldr	r3, [r7, #16]
 800e8c4:	3318      	adds	r3, #24
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f7fe fd5a 	bl	800d380 <uxListRemove>

    if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
 800e8cc:	4b1d      	ldr	r3, [pc, #116]	@ (800e944 <xTaskRemoveFromEventList+0xb0>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d11c      	bne.n	800e90e <xTaskRemoveFromEventList+0x7a>
        (void)uxListRemove(&(pxUnblockedTCB->xStateListItem));
 800e8d4:	693b      	ldr	r3, [r7, #16]
 800e8d6:	3304      	adds	r3, #4
 800e8d8:	4618      	mov	r0, r3
 800e8da:	f7fe fd51 	bl	800d380 <uxListRemove>
        prvAddTaskToReadyList(pxUnblockedTCB);
 800e8de:	693b      	ldr	r3, [r7, #16]
 800e8e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8e2:	2201      	movs	r2, #1
 800e8e4:	409a      	lsls	r2, r3
 800e8e6:	4b18      	ldr	r3, [pc, #96]	@ (800e948 <xTaskRemoveFromEventList+0xb4>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	4313      	orrs	r3, r2
 800e8ec:	4a16      	ldr	r2, [pc, #88]	@ (800e948 <xTaskRemoveFromEventList+0xb4>)
 800e8ee:	6013      	str	r3, [r2, #0]
 800e8f0:	693b      	ldr	r3, [r7, #16]
 800e8f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8f4:	4613      	mov	r3, r2
 800e8f6:	009b      	lsls	r3, r3, #2
 800e8f8:	4413      	add	r3, r2
 800e8fa:	009b      	lsls	r3, r3, #2
 800e8fc:	4a13      	ldr	r2, [pc, #76]	@ (800e94c <xTaskRemoveFromEventList+0xb8>)
 800e8fe:	441a      	add	r2, r3
 800e900:	693b      	ldr	r3, [r7, #16]
 800e902:	3304      	adds	r3, #4
 800e904:	4619      	mov	r1, r3
 800e906:	4610      	mov	r0, r2
 800e908:	f7fe fcdd 	bl	800d2c6 <vListInsertEnd>
 800e90c:	e005      	b.n	800e91a <xTaskRemoveFromEventList+0x86>
        }
#endif
    } else {
        /* The delayed and ready lists cannot be accessed, so hold this task
        pending until the scheduler is resumed. */
        vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
 800e90e:	693b      	ldr	r3, [r7, #16]
 800e910:	3318      	adds	r3, #24
 800e912:	4619      	mov	r1, r3
 800e914:	480e      	ldr	r0, [pc, #56]	@ (800e950 <xTaskRemoveFromEventList+0xbc>)
 800e916:	f7fe fcd6 	bl	800d2c6 <vListInsertEnd>
    }

    if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
 800e91a:	693b      	ldr	r3, [r7, #16]
 800e91c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e91e:	4b0d      	ldr	r3, [pc, #52]	@ (800e954 <xTaskRemoveFromEventList+0xc0>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e924:	429a      	cmp	r2, r3
 800e926:	d905      	bls.n	800e934 <xTaskRemoveFromEventList+0xa0>
        /* Return true if the task removed from the event list has a higher
        priority than the calling task.  This allows the calling task to know if
        it should force a context switch now. */
        xReturn = pdTRUE;
 800e928:	2301      	movs	r3, #1
 800e92a:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
        "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800e92c:	4b0a      	ldr	r3, [pc, #40]	@ (800e958 <xTaskRemoveFromEventList+0xc4>)
 800e92e:	2201      	movs	r2, #1
 800e930:	601a      	str	r2, [r3, #0]
 800e932:	e001      	b.n	800e938 <xTaskRemoveFromEventList+0xa4>
    } else {
        xReturn = pdFALSE;
 800e934:	2300      	movs	r3, #0
 800e936:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800e938:	697b      	ldr	r3, [r7, #20]
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3718      	adds	r7, #24
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}
 800e942:	bf00      	nop
 800e944:	20000ed4 	.word	0x20000ed4
 800e948:	20000eb4 	.word	0x20000eb4
 800e94c:	20000db0 	.word	0x20000db0
 800e950:	20000e6c 	.word	0x20000e6c
 800e954:	20000dac 	.word	0x20000dac
 800e958:	20000ec0 	.word	0x20000ec0

0800e95c <vTaskInternalSetTimeOutState>:
    }
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState(TimeOut_t * const pxTimeOut) {
 800e95c:	b480      	push	{r7}
 800e95e:	b083      	sub	sp, #12
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e964:	4b06      	ldr	r3, [pc, #24]	@ (800e980 <vTaskInternalSetTimeOutState+0x24>)
 800e966:	681a      	ldr	r2, [r3, #0]
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800e96c:	4b05      	ldr	r3, [pc, #20]	@ (800e984 <vTaskInternalSetTimeOutState+0x28>)
 800e96e:	681a      	ldr	r2, [r3, #0]
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	605a      	str	r2, [r3, #4]
}
 800e974:	bf00      	nop
 800e976:	370c      	adds	r7, #12
 800e978:	46bd      	mov	sp, r7
 800e97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97e:	4770      	bx	lr
 800e980:	20000ec4 	.word	0x20000ec4
 800e984:	20000eb0 	.word	0x20000eb0

0800e988 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut(TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait) {
 800e988:	b580      	push	{r7, lr}
 800e98a:	b088      	sub	sp, #32
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
 800e990:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT(pxTimeOut);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d10b      	bne.n	800e9b0 <xTaskCheckForTimeOut+0x28>
    __asm volatile("	mov %0, %1												\n"
 800e998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e99c:	f383 8811 	msr	BASEPRI, r3
 800e9a0:	f3bf 8f6f 	isb	sy
 800e9a4:	f3bf 8f4f 	dsb	sy
 800e9a8:	613b      	str	r3, [r7, #16]
}
 800e9aa:	bf00      	nop
 800e9ac:	bf00      	nop
 800e9ae:	e7fd      	b.n	800e9ac <xTaskCheckForTimeOut+0x24>
    configASSERT(pxTicksToWait);
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d10b      	bne.n	800e9ce <xTaskCheckForTimeOut+0x46>
    __asm volatile("	mov %0, %1												\n"
 800e9b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9ba:	f383 8811 	msr	BASEPRI, r3
 800e9be:	f3bf 8f6f 	isb	sy
 800e9c2:	f3bf 8f4f 	dsb	sy
 800e9c6:	60fb      	str	r3, [r7, #12]
}
 800e9c8:	bf00      	nop
 800e9ca:	bf00      	nop
 800e9cc:	e7fd      	b.n	800e9ca <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800e9ce:	f000 fed3 	bl	800f778 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800e9d2:	4b1d      	ldr	r3, [pc, #116]	@ (800ea48 <xTaskCheckForTimeOut+0xc0>)
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	685b      	ldr	r3, [r3, #4]
 800e9dc:	69ba      	ldr	r2, [r7, #24]
 800e9de:	1ad3      	subs	r3, r2, r3
 800e9e0:	617b      	str	r3, [r7, #20]
            xReturn = pdTRUE;
        } else
#endif

#if (INCLUDE_vTaskSuspend == 1)
            if (*pxTicksToWait == portMAX_DELAY) {
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9ea:	d102      	bne.n	800e9f2 <xTaskCheckForTimeOut+0x6a>
            /* If INCLUDE_vTaskSuspend is set to 1 and the block time
            specified is the maximum block time then the task should block
            indefinitely, and therefore never time out. */
            xReturn = pdFALSE;
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	61fb      	str	r3, [r7, #28]
 800e9f0:	e023      	b.n	800ea3a <xTaskCheckForTimeOut+0xb2>
        } else
#endif

            if ((xNumOfOverflows != pxTimeOut->xOverflowCount) && (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681a      	ldr	r2, [r3, #0]
 800e9f6:	4b15      	ldr	r3, [pc, #84]	@ (800ea4c <xTaskCheckForTimeOut+0xc4>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	429a      	cmp	r2, r3
 800e9fc:	d007      	beq.n	800ea0e <xTaskCheckForTimeOut+0x86>
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	685b      	ldr	r3, [r3, #4]
 800ea02:	69ba      	ldr	r2, [r7, #24]
 800ea04:	429a      	cmp	r2, r3
 800ea06:	d302      	bcc.n	800ea0e <xTaskCheckForTimeOut+0x86>
            /* The tick count is greater than the time at which
            vTaskSetTimeout() was called, but has also overflowed since
            vTaskSetTimeOut() was called.  It must have wrapped all the way
            around and gone past again. This passed since vTaskSetTimeout()
            was called. */
            xReturn = pdTRUE;
 800ea08:	2301      	movs	r3, #1
 800ea0a:	61fb      	str	r3, [r7, #28]
 800ea0c:	e015      	b.n	800ea3a <xTaskCheckForTimeOut+0xb2>
        } else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	697a      	ldr	r2, [r7, #20]
 800ea14:	429a      	cmp	r2, r3
 800ea16:	d20b      	bcs.n	800ea30 <xTaskCheckForTimeOut+0xa8>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	681a      	ldr	r2, [r3, #0]
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	1ad2      	subs	r2, r2, r3
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState(pxTimeOut);
 800ea24:	6878      	ldr	r0, [r7, #4]
 800ea26:	f7ff ff99 	bl	800e95c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	61fb      	str	r3, [r7, #28]
 800ea2e:	e004      	b.n	800ea3a <xTaskCheckForTimeOut+0xb2>
        } else {
            *pxTicksToWait = 0;
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	2200      	movs	r2, #0
 800ea34:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800ea36:	2301      	movs	r3, #1
 800ea38:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800ea3a:	f000 fecf 	bl	800f7dc <vPortExitCritical>

    return xReturn;
 800ea3e:	69fb      	ldr	r3, [r7, #28]
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	3720      	adds	r7, #32
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}
 800ea48:	20000eb0 	.word	0x20000eb0
 800ea4c:	20000ec4 	.word	0x20000ec4

0800ea50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield(void) {
 800ea50:	b480      	push	{r7}
 800ea52:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800ea54:	4b03      	ldr	r3, [pc, #12]	@ (800ea64 <vTaskMissedYield+0x14>)
 800ea56:	2201      	movs	r2, #1
 800ea58:	601a      	str	r2, [r3, #0]
}
 800ea5a:	bf00      	nop
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea62:	4770      	bx	lr
 800ea64:	20000ec0 	.word	0x20000ec0

0800ea68 <prvIdleTask>:
 * language extensions.  The equivalent prototype for this function is:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION(prvIdleTask, pvParameters) {
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b082      	sub	sp, #8
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
    portALLOCATE_SECURE_CONTEXT(configMINIMAL_SECURE_STACK_SIZE);

    for (;;) {
        /* See if any tasks have deleted themselves - if so then the idle task
        is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800ea70:	f000 f852 	bl	800eb18 <prvCheckTasksWaitingTermination>

            A critical region is not required here as we are just reading from
            the list, and an occasional incorrect value will not matter.  If
            the ready list at the idle priority contains more than one task
            then a task other than the idle task is ready to execute. */
            if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
 800ea74:	4b06      	ldr	r3, [pc, #24]	@ (800ea90 <prvIdleTask+0x28>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	2b01      	cmp	r3, #1
 800ea7a:	d9f9      	bls.n	800ea70 <prvIdleTask+0x8>
                taskYIELD();
 800ea7c:	4b05      	ldr	r3, [pc, #20]	@ (800ea94 <prvIdleTask+0x2c>)
 800ea7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea82:	601a      	str	r2, [r3, #0]
 800ea84:	f3bf 8f4f 	dsb	sy
 800ea88:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800ea8c:	e7f0      	b.n	800ea70 <prvIdleTask+0x8>
 800ea8e:	bf00      	nop
 800ea90:	20000db0 	.word	0x20000db0
 800ea94:	e000ed04 	.word	0xe000ed04

0800ea98 <prvInitialiseTaskLists>:
}

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists(void) {
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b082      	sub	sp, #8
 800ea9c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for (uxPriority = (UBaseType_t)0U; uxPriority < (UBaseType_t)configMAX_PRIORITIES; uxPriority++) {
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	607b      	str	r3, [r7, #4]
 800eaa2:	e00c      	b.n	800eabe <prvInitialiseTaskLists+0x26>
        vListInitialise(&(pxReadyTasksLists[uxPriority]));
 800eaa4:	687a      	ldr	r2, [r7, #4]
 800eaa6:	4613      	mov	r3, r2
 800eaa8:	009b      	lsls	r3, r3, #2
 800eaaa:	4413      	add	r3, r2
 800eaac:	009b      	lsls	r3, r3, #2
 800eaae:	4a12      	ldr	r2, [pc, #72]	@ (800eaf8 <prvInitialiseTaskLists+0x60>)
 800eab0:	4413      	add	r3, r2
 800eab2:	4618      	mov	r0, r3
 800eab4:	f7fe fbda 	bl	800d26c <vListInitialise>
    for (uxPriority = (UBaseType_t)0U; uxPriority < (UBaseType_t)configMAX_PRIORITIES; uxPriority++) {
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	3301      	adds	r3, #1
 800eabc:	607b      	str	r3, [r7, #4]
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2b06      	cmp	r3, #6
 800eac2:	d9ef      	bls.n	800eaa4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise(&xDelayedTaskList1);
 800eac4:	480d      	ldr	r0, [pc, #52]	@ (800eafc <prvInitialiseTaskLists+0x64>)
 800eac6:	f7fe fbd1 	bl	800d26c <vListInitialise>
    vListInitialise(&xDelayedTaskList2);
 800eaca:	480d      	ldr	r0, [pc, #52]	@ (800eb00 <prvInitialiseTaskLists+0x68>)
 800eacc:	f7fe fbce 	bl	800d26c <vListInitialise>
    vListInitialise(&xPendingReadyList);
 800ead0:	480c      	ldr	r0, [pc, #48]	@ (800eb04 <prvInitialiseTaskLists+0x6c>)
 800ead2:	f7fe fbcb 	bl	800d26c <vListInitialise>

#if (INCLUDE_vTaskDelete == 1)
    { vListInitialise(&xTasksWaitingTermination); }
 800ead6:	480c      	ldr	r0, [pc, #48]	@ (800eb08 <prvInitialiseTaskLists+0x70>)
 800ead8:	f7fe fbc8 	bl	800d26c <vListInitialise>
#endif /* INCLUDE_vTaskDelete */

#if (INCLUDE_vTaskSuspend == 1)
    { vListInitialise(&xSuspendedTaskList); }
 800eadc:	480b      	ldr	r0, [pc, #44]	@ (800eb0c <prvInitialiseTaskLists+0x74>)
 800eade:	f7fe fbc5 	bl	800d26c <vListInitialise>
#endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
    using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800eae2:	4b0b      	ldr	r3, [pc, #44]	@ (800eb10 <prvInitialiseTaskLists+0x78>)
 800eae4:	4a05      	ldr	r2, [pc, #20]	@ (800eafc <prvInitialiseTaskLists+0x64>)
 800eae6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eae8:	4b0a      	ldr	r3, [pc, #40]	@ (800eb14 <prvInitialiseTaskLists+0x7c>)
 800eaea:	4a05      	ldr	r2, [pc, #20]	@ (800eb00 <prvInitialiseTaskLists+0x68>)
 800eaec:	601a      	str	r2, [r3, #0]
}
 800eaee:	bf00      	nop
 800eaf0:	3708      	adds	r7, #8
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}
 800eaf6:	bf00      	nop
 800eaf8:	20000db0 	.word	0x20000db0
 800eafc:	20000e3c 	.word	0x20000e3c
 800eb00:	20000e50 	.word	0x20000e50
 800eb04:	20000e6c 	.word	0x20000e6c
 800eb08:	20000e80 	.word	0x20000e80
 800eb0c:	20000e98 	.word	0x20000e98
 800eb10:	20000e64 	.word	0x20000e64
 800eb14:	20000e68 	.word	0x20000e68

0800eb18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination(void) {
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b082      	sub	sp, #8
 800eb1c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
        being called too often in the idle task. */
        while (uxDeletedTasksWaitingCleanUp > (UBaseType_t)0U) {
 800eb1e:	e019      	b.n	800eb54 <prvCheckTasksWaitingTermination+0x3c>
            taskENTER_CRITICAL();
 800eb20:	f000 fe2a 	bl	800f778 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY(
 800eb24:	4b10      	ldr	r3, [pc, #64]	@ (800eb68 <prvCheckTasksWaitingTermination+0x50>)
 800eb26:	68db      	ldr	r3, [r3, #12]
 800eb28:	68db      	ldr	r3, [r3, #12]
 800eb2a:	607b      	str	r3, [r7, #4]
                    (&xTasksWaitingTermination)); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
                (void)uxListRemove(&(pxTCB->xStateListItem));
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	3304      	adds	r3, #4
 800eb30:	4618      	mov	r0, r3
 800eb32:	f7fe fc25 	bl	800d380 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800eb36:	4b0d      	ldr	r3, [pc, #52]	@ (800eb6c <prvCheckTasksWaitingTermination+0x54>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	3b01      	subs	r3, #1
 800eb3c:	4a0b      	ldr	r2, [pc, #44]	@ (800eb6c <prvCheckTasksWaitingTermination+0x54>)
 800eb3e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800eb40:	4b0b      	ldr	r3, [pc, #44]	@ (800eb70 <prvCheckTasksWaitingTermination+0x58>)
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	3b01      	subs	r3, #1
 800eb46:	4a0a      	ldr	r2, [pc, #40]	@ (800eb70 <prvCheckTasksWaitingTermination+0x58>)
 800eb48:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800eb4a:	f000 fe47 	bl	800f7dc <vPortExitCritical>

            prvDeleteTCB(pxTCB);
 800eb4e:	6878      	ldr	r0, [r7, #4]
 800eb50:	f000 f810 	bl	800eb74 <prvDeleteTCB>
        while (uxDeletedTasksWaitingCleanUp > (UBaseType_t)0U) {
 800eb54:	4b06      	ldr	r3, [pc, #24]	@ (800eb70 <prvCheckTasksWaitingTermination+0x58>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d1e1      	bne.n	800eb20 <prvCheckTasksWaitingTermination+0x8>
        }
    }
#endif /* INCLUDE_vTaskDelete */
}
 800eb5c:	bf00      	nop
 800eb5e:	bf00      	nop
 800eb60:	3708      	adds	r7, #8
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}
 800eb66:	bf00      	nop
 800eb68:	20000e80 	.word	0x20000e80
 800eb6c:	20000eac 	.word	0x20000eac
 800eb70:	20000e94 	.word	0x20000e94

0800eb74 <prvDeleteTCB>:
#endif /* INCLUDE_uxTaskGetStackHighWaterMark */
/*-----------------------------------------------------------*/

#if (INCLUDE_vTaskDelete == 1)

static void prvDeleteTCB(TCB_t * pxTCB) {
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b084      	sub	sp, #16
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
#elif (tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
    {
        /* The task could have been allocated statically or dynamically, so
        check what was statically allocated before trying to free the
        memory. */
        if (pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB) {
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d108      	bne.n	800eb98 <prvDeleteTCB+0x24>
            /* Both the stack and TCB were allocated dynamically, so both
            must be freed. */
            vPortFree(pxTCB->pxStack);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f000 ff28 	bl	800f9e0 <vPortFree>
            vPortFree(pxTCB);
 800eb90:	6878      	ldr	r0, [r7, #4]
 800eb92:	f000 ff25 	bl	800f9e0 <vPortFree>
            configASSERT(pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB);
            mtCOVERAGE_TEST_MARKER();
        }
    }
#endif                                                 /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800eb96:	e019      	b.n	800ebcc <prvDeleteTCB+0x58>
        } else if (pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY) {
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800eb9e:	2b01      	cmp	r3, #1
 800eba0:	d103      	bne.n	800ebaa <prvDeleteTCB+0x36>
            vPortFree(pxTCB);
 800eba2:	6878      	ldr	r0, [r7, #4]
 800eba4:	f000 ff1c 	bl	800f9e0 <vPortFree>
}
 800eba8:	e010      	b.n	800ebcc <prvDeleteTCB+0x58>
            configASSERT(pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800ebb0:	2b02      	cmp	r3, #2
 800ebb2:	d00b      	beq.n	800ebcc <prvDeleteTCB+0x58>
    __asm volatile("	mov %0, %1												\n"
 800ebb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebb8:	f383 8811 	msr	BASEPRI, r3
 800ebbc:	f3bf 8f6f 	isb	sy
 800ebc0:	f3bf 8f4f 	dsb	sy
 800ebc4:	60fb      	str	r3, [r7, #12]
}
 800ebc6:	bf00      	nop
 800ebc8:	bf00      	nop
 800ebca:	e7fd      	b.n	800ebc8 <prvDeleteTCB+0x54>
}
 800ebcc:	bf00      	nop
 800ebce:	3710      	adds	r7, #16
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}

0800ebd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime(void) {
 800ebd4:	b480      	push	{r7}
 800ebd6:	b083      	sub	sp, #12
 800ebd8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;

    if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
 800ebda:	4b0c      	ldr	r3, [pc, #48]	@ (800ec0c <prvResetNextTaskUnblockTime+0x38>)
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d104      	bne.n	800ebee <prvResetNextTaskUnblockTime+0x1a>
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
        the maximum possible value so it is	extremely unlikely that the
        if( xTickCount >= xNextTaskUnblockTime ) test will pass until
        there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800ebe4:	4b0a      	ldr	r3, [pc, #40]	@ (800ec10 <prvResetNextTaskUnblockTime+0x3c>)
 800ebe6:	f04f 32ff 	mov.w	r2, #4294967295
 800ebea:	601a      	str	r2, [r3, #0]
        which the task at the head of the delayed list should be removed
        from the Blocked state. */
        (pxTCB) = listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
        xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    }
}
 800ebec:	e008      	b.n	800ec00 <prvResetNextTaskUnblockTime+0x2c>
        (pxTCB) = listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebee:	4b07      	ldr	r3, [pc, #28]	@ (800ec0c <prvResetNextTaskUnblockTime+0x38>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	68db      	ldr	r3, [r3, #12]
 800ebf4:	68db      	ldr	r3, [r3, #12]
 800ebf6:	607b      	str	r3, [r7, #4]
        xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	4a04      	ldr	r2, [pc, #16]	@ (800ec10 <prvResetNextTaskUnblockTime+0x3c>)
 800ebfe:	6013      	str	r3, [r2, #0]
}
 800ec00:	bf00      	nop
 800ec02:	370c      	adds	r7, #12
 800ec04:	46bd      	mov	sp, r7
 800ec06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0a:	4770      	bx	lr
 800ec0c:	20000e64 	.word	0x20000e64
 800ec10:	20000ecc 	.word	0x20000ecc

0800ec14 <xTaskGetSchedulerState>:
#endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
/*-----------------------------------------------------------*/

#if ((INCLUDE_xTaskGetSchedulerState == 1) || (configUSE_TIMERS == 1))

BaseType_t xTaskGetSchedulerState(void) {
 800ec14:	b480      	push	{r7}
 800ec16:	b083      	sub	sp, #12
 800ec18:	af00      	add	r7, sp, #0
    BaseType_t xReturn;

    if (xSchedulerRunning == pdFALSE) {
 800ec1a:	4b0b      	ldr	r3, [pc, #44]	@ (800ec48 <xTaskGetSchedulerState+0x34>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d102      	bne.n	800ec28 <xTaskGetSchedulerState+0x14>
        xReturn = taskSCHEDULER_NOT_STARTED;
 800ec22:	2301      	movs	r3, #1
 800ec24:	607b      	str	r3, [r7, #4]
 800ec26:	e008      	b.n	800ec3a <xTaskGetSchedulerState+0x26>
    } else {
        if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
 800ec28:	4b08      	ldr	r3, [pc, #32]	@ (800ec4c <xTaskGetSchedulerState+0x38>)
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d102      	bne.n	800ec36 <xTaskGetSchedulerState+0x22>
            xReturn = taskSCHEDULER_RUNNING;
 800ec30:	2302      	movs	r3, #2
 800ec32:	607b      	str	r3, [r7, #4]
 800ec34:	e001      	b.n	800ec3a <xTaskGetSchedulerState+0x26>
        } else {
            xReturn = taskSCHEDULER_SUSPENDED;
 800ec36:	2300      	movs	r3, #0
 800ec38:	607b      	str	r3, [r7, #4]
        }
    }

    return xReturn;
 800ec3a:	687b      	ldr	r3, [r7, #4]
}
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	370c      	adds	r7, #12
 800ec40:	46bd      	mov	sp, r7
 800ec42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec46:	4770      	bx	lr
 800ec48:	20000eb8 	.word	0x20000eb8
 800ec4c:	20000ed4 	.word	0x20000ed4

0800ec50 <prvAddCurrentTaskToDelayedList>:
}

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely) {
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b084      	sub	sp, #16
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
 800ec58:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800ec5a:	4b29      	ldr	r3, [pc, #164]	@ (800ed00 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	60fb      	str	r3, [r7, #12]
    }
#endif

    /* Remove the task from the ready list before adding it to the blocked list
    as the same list item is used for both lists. */
    if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t)0) {
 800ec60:	4b28      	ldr	r3, [pc, #160]	@ (800ed04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	3304      	adds	r3, #4
 800ec66:	4618      	mov	r0, r3
 800ec68:	f7fe fb8a 	bl	800d380 <uxListRemove>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d10b      	bne.n	800ec8a <prvAddCurrentTaskToDelayedList+0x3a>
        /* The current task must be in a ready list, so there is no need to
        check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY(pxCurrentTCB->uxPriority,
 800ec72:	4b24      	ldr	r3, [pc, #144]	@ (800ed04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec78:	2201      	movs	r2, #1
 800ec7a:	fa02 f303 	lsl.w	r3, r2, r3
 800ec7e:	43da      	mvns	r2, r3
 800ec80:	4b21      	ldr	r3, [pc, #132]	@ (800ed08 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	4013      	ands	r3, r2
 800ec86:	4a20      	ldr	r2, [pc, #128]	@ (800ed08 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ec88:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

#if (INCLUDE_vTaskSuspend == 1)
    {
        if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec90:	d10a      	bne.n	800eca8 <prvAddCurrentTaskToDelayedList+0x58>
 800ec92:	683b      	ldr	r3, [r7, #0]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d007      	beq.n	800eca8 <prvAddCurrentTaskToDelayedList+0x58>
            /* Add the task to the suspended task list instead of a delayed task
            list to ensure it is not woken by a timing event.  It will block
            indefinitely. */
            vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
 800ec98:	4b1a      	ldr	r3, [pc, #104]	@ (800ed04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	3304      	adds	r3, #4
 800ec9e:	4619      	mov	r1, r3
 800eca0:	481a      	ldr	r0, [pc, #104]	@ (800ed0c <prvAddCurrentTaskToDelayedList+0xbc>)
 800eca2:	f7fe fb10 	bl	800d2c6 <vListInsertEnd>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        (void)xCanBlockIndefinitely;
    }
#endif /* INCLUDE_vTaskSuspend */
}
 800eca6:	e026      	b.n	800ecf6 <prvAddCurrentTaskToDelayedList+0xa6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800eca8:	68fa      	ldr	r2, [r7, #12]
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	4413      	add	r3, r2
 800ecae:	60bb      	str	r3, [r7, #8]
            listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem), xTimeToWake);
 800ecb0:	4b14      	ldr	r3, [pc, #80]	@ (800ed04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	68ba      	ldr	r2, [r7, #8]
 800ecb6:	605a      	str	r2, [r3, #4]
            if (xTimeToWake < xConstTickCount) {
 800ecb8:	68ba      	ldr	r2, [r7, #8]
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	d209      	bcs.n	800ecd4 <prvAddCurrentTaskToDelayedList+0x84>
                vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
 800ecc0:	4b13      	ldr	r3, [pc, #76]	@ (800ed10 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ecc2:	681a      	ldr	r2, [r3, #0]
 800ecc4:	4b0f      	ldr	r3, [pc, #60]	@ (800ed04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	3304      	adds	r3, #4
 800ecca:	4619      	mov	r1, r3
 800eccc:	4610      	mov	r0, r2
 800ecce:	f7fe fb1e 	bl	800d30e <vListInsert>
}
 800ecd2:	e010      	b.n	800ecf6 <prvAddCurrentTaskToDelayedList+0xa6>
                vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
 800ecd4:	4b0f      	ldr	r3, [pc, #60]	@ (800ed14 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ecd6:	681a      	ldr	r2, [r3, #0]
 800ecd8:	4b0a      	ldr	r3, [pc, #40]	@ (800ed04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	3304      	adds	r3, #4
 800ecde:	4619      	mov	r1, r3
 800ece0:	4610      	mov	r0, r2
 800ece2:	f7fe fb14 	bl	800d30e <vListInsert>
                if (xTimeToWake < xNextTaskUnblockTime) {
 800ece6:	4b0c      	ldr	r3, [pc, #48]	@ (800ed18 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	68ba      	ldr	r2, [r7, #8]
 800ecec:	429a      	cmp	r2, r3
 800ecee:	d202      	bcs.n	800ecf6 <prvAddCurrentTaskToDelayedList+0xa6>
                    xNextTaskUnblockTime = xTimeToWake;
 800ecf0:	4a09      	ldr	r2, [pc, #36]	@ (800ed18 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	6013      	str	r3, [r2, #0]
}
 800ecf6:	bf00      	nop
 800ecf8:	3710      	adds	r7, #16
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}
 800ecfe:	bf00      	nop
 800ed00:	20000eb0 	.word	0x20000eb0
 800ed04:	20000dac 	.word	0x20000dac
 800ed08:	20000eb4 	.word	0x20000eb4
 800ed0c:	20000e98 	.word	0x20000e98
 800ed10:	20000e68 	.word	0x20000e68
 800ed14:	20000e64 	.word	0x20000e64
 800ed18:	20000ecc 	.word	0x20000ecc

0800ed1c <xTimerCreateTimerTask>:
 */
static void prvInitialiseNewTimer(const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                  const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction, Timer_t * pxNewTimer) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask(void) {
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b08a      	sub	sp, #40	@ 0x28
 800ed20:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdFAIL;
 800ed22:	2300      	movs	r3, #0
 800ed24:	617b      	str	r3, [r7, #20]

    /* This function is called when the scheduler is started if
    configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
    timer service task has been created/initialised.  If timers have already
    been created then the initialisation will already have been performed. */
    prvCheckForValidListAndQueue();
 800ed26:	f000 fb73 	bl	800f410 <prvCheckForValidListAndQueue>

    if (xTimerQueue != NULL) {
 800ed2a:	4b1d      	ldr	r3, [pc, #116]	@ (800eda0 <xTimerCreateTimerTask+0x84>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d021      	beq.n	800ed76 <xTimerCreateTimerTask+0x5a>
#if (configSUPPORT_STATIC_ALLOCATION == 1)
        {
            StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800ed32:	2300      	movs	r3, #0
 800ed34:	60fb      	str	r3, [r7, #12]
            StackType_t * pxTimerTaskStackBuffer = NULL;
 800ed36:	2300      	movs	r3, #0
 800ed38:	60bb      	str	r3, [r7, #8]
            uint32_t ulTimerTaskStackSize;

            vApplicationGetTimerTaskMemory(&pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize);
 800ed3a:	1d3a      	adds	r2, r7, #4
 800ed3c:	f107 0108 	add.w	r1, r7, #8
 800ed40:	f107 030c 	add.w	r3, r7, #12
 800ed44:	4618      	mov	r0, r3
 800ed46:	f7f3 fd77 	bl	8002838 <vApplicationGetTimerTaskMemory>
            xTimerTaskHandle = xTaskCreateStatic(prvTimerTask, configTIMER_SERVICE_TASK_NAME, ulTimerTaskStackSize, NULL, ((UBaseType_t)configTIMER_TASK_PRIORITY) | portPRIVILEGE_BIT, pxTimerTaskStackBuffer, pxTimerTaskTCBBuffer);
 800ed4a:	6879      	ldr	r1, [r7, #4]
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	68fa      	ldr	r2, [r7, #12]
 800ed50:	9202      	str	r2, [sp, #8]
 800ed52:	9301      	str	r3, [sp, #4]
 800ed54:	2303      	movs	r3, #3
 800ed56:	9300      	str	r3, [sp, #0]
 800ed58:	2300      	movs	r3, #0
 800ed5a:	460a      	mov	r2, r1
 800ed5c:	4911      	ldr	r1, [pc, #68]	@ (800eda4 <xTimerCreateTimerTask+0x88>)
 800ed5e:	4812      	ldr	r0, [pc, #72]	@ (800eda8 <xTimerCreateTimerTask+0x8c>)
 800ed60:	f7ff f820 	bl	800dda4 <xTaskCreateStatic>
 800ed64:	4603      	mov	r3, r0
 800ed66:	4a11      	ldr	r2, [pc, #68]	@ (800edac <xTimerCreateTimerTask+0x90>)
 800ed68:	6013      	str	r3, [r2, #0]

            if (xTimerTaskHandle != NULL) {
 800ed6a:	4b10      	ldr	r3, [pc, #64]	@ (800edac <xTimerCreateTimerTask+0x90>)
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d001      	beq.n	800ed76 <xTimerCreateTimerTask+0x5a>
                xReturn = pdPASS;
 800ed72:	2301      	movs	r3, #1
 800ed74:	617b      	str	r3, [r7, #20]
#endif /* configSUPPORT_STATIC_ALLOCATION */
    } else {
        mtCOVERAGE_TEST_MARKER();
    }

    configASSERT(xReturn);
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d10b      	bne.n	800ed94 <xTimerCreateTimerTask+0x78>
    __asm volatile("	mov %0, %1												\n"
 800ed7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed80:	f383 8811 	msr	BASEPRI, r3
 800ed84:	f3bf 8f6f 	isb	sy
 800ed88:	f3bf 8f4f 	dsb	sy
 800ed8c:	613b      	str	r3, [r7, #16]
}
 800ed8e:	bf00      	nop
 800ed90:	bf00      	nop
 800ed92:	e7fd      	b.n	800ed90 <xTimerCreateTimerTask+0x74>
    return xReturn;
 800ed94:	697b      	ldr	r3, [r7, #20]
}
 800ed96:	4618      	mov	r0, r3
 800ed98:	3718      	adds	r7, #24
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}
 800ed9e:	bf00      	nop
 800eda0:	20000f08 	.word	0x20000f08
 800eda4:	08013a68 	.word	0x08013a68
 800eda8:	0800efe1 	.word	0x0800efe1
 800edac:	20000f0c 	.word	0x20000f0c

0800edb0 <xTimerCreate>:
/*-----------------------------------------------------------*/

#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)

TimerHandle_t xTimerCreate(const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                           const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction) {
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b088      	sub	sp, #32
 800edb4:	af02      	add	r7, sp, #8
 800edb6:	60f8      	str	r0, [r7, #12]
 800edb8:	60b9      	str	r1, [r7, #8]
 800edba:	607a      	str	r2, [r7, #4]
 800edbc:	603b      	str	r3, [r7, #0]
    Timer_t * pxNewTimer;

    pxNewTimer = (Timer_t *)pvPortMalloc(sizeof(Timer_t)); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800edbe:	2028      	movs	r0, #40	@ 0x28
 800edc0:	f000 fdfc 	bl	800f9bc <pvPortMalloc>
 800edc4:	6178      	str	r0, [r7, #20]

    if (pxNewTimer != NULL) {
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d00d      	beq.n	800ede8 <xTimerCreate+0x38>
        /* Status is thus far zero as the timer is not created statically
        and has not been started.  The auto-reload bit may get set in
        prvInitialiseNewTimer. */
        pxNewTimer->ucStatus = 0x00;
 800edcc:	697b      	ldr	r3, [r7, #20]
 800edce:	2200      	movs	r2, #0
 800edd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        prvInitialiseNewTimer(pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer);
 800edd4:	697b      	ldr	r3, [r7, #20]
 800edd6:	9301      	str	r3, [sp, #4]
 800edd8:	6a3b      	ldr	r3, [r7, #32]
 800edda:	9300      	str	r3, [sp, #0]
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	687a      	ldr	r2, [r7, #4]
 800ede0:	68b9      	ldr	r1, [r7, #8]
 800ede2:	68f8      	ldr	r0, [r7, #12]
 800ede4:	f000 f805 	bl	800edf2 <prvInitialiseNewTimer>
    }

    return pxNewTimer;
 800ede8:	697b      	ldr	r3, [r7, #20]
}
 800edea:	4618      	mov	r0, r3
 800edec:	3718      	adds	r7, #24
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}

0800edf2 <prvInitialiseNewTimer>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewTimer(const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                  const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction, Timer_t * pxNewTimer) {
 800edf2:	b580      	push	{r7, lr}
 800edf4:	b086      	sub	sp, #24
 800edf6:	af00      	add	r7, sp, #0
 800edf8:	60f8      	str	r0, [r7, #12]
 800edfa:	60b9      	str	r1, [r7, #8]
 800edfc:	607a      	str	r2, [r7, #4]
 800edfe:	603b      	str	r3, [r7, #0]
    /* 0 is not a valid value for xTimerPeriodInTicks. */
    configASSERT((xTimerPeriodInTicks > 0));
 800ee00:	68bb      	ldr	r3, [r7, #8]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d10b      	bne.n	800ee1e <prvInitialiseNewTimer+0x2c>
    __asm volatile("	mov %0, %1												\n"
 800ee06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee0a:	f383 8811 	msr	BASEPRI, r3
 800ee0e:	f3bf 8f6f 	isb	sy
 800ee12:	f3bf 8f4f 	dsb	sy
 800ee16:	617b      	str	r3, [r7, #20]
}
 800ee18:	bf00      	nop
 800ee1a:	bf00      	nop
 800ee1c:	e7fd      	b.n	800ee1a <prvInitialiseNewTimer+0x28>

    if (pxNewTimer != NULL) {
 800ee1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d01e      	beq.n	800ee62 <prvInitialiseNewTimer+0x70>
        /* Ensure the infrastructure used by the timer service task has been
        created/initialised. */
        prvCheckForValidListAndQueue();
 800ee24:	f000 faf4 	bl	800f410 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
        parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 800ee28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee2a:	68fa      	ldr	r2, [r7, #12]
 800ee2c:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ee2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee30:	68ba      	ldr	r2, [r7, #8]
 800ee32:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 800ee34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee36:	683a      	ldr	r2, [r7, #0]
 800ee38:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ee3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee3c:	6a3a      	ldr	r2, [r7, #32]
 800ee3e:	621a      	str	r2, [r3, #32]
        vListInitialiseItem(&(pxNewTimer->xTimerListItem));
 800ee40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee42:	3304      	adds	r3, #4
 800ee44:	4618      	mov	r0, r3
 800ee46:	f7fe fa31 	bl	800d2ac <vListInitialiseItem>
        if (uxAutoReload != pdFALSE) {
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d008      	beq.n	800ee62 <prvInitialiseNewTimer+0x70>
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800ee50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee52:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ee56:	f043 0304 	orr.w	r3, r3, #4
 800ee5a:	b2da      	uxtb	r2, r3
 800ee5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }
        traceTIMER_CREATE(pxNewTimer);
    }
}
 800ee62:	bf00      	nop
 800ee64:	3718      	adds	r7, #24
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bd80      	pop	{r7, pc}
	...

0800ee6c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand(TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait) {
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b08a      	sub	sp, #40	@ 0x28
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	60f8      	str	r0, [r7, #12]
 800ee74:	60b9      	str	r1, [r7, #8]
 800ee76:	607a      	str	r2, [r7, #4]
 800ee78:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdFAIL;
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	627b      	str	r3, [r7, #36]	@ 0x24
    DaemonTaskMessage_t xMessage;

    configASSERT(xTimer);
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d10b      	bne.n	800ee9c <xTimerGenericCommand+0x30>
    __asm volatile("	mov %0, %1												\n"
 800ee84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee88:	f383 8811 	msr	BASEPRI, r3
 800ee8c:	f3bf 8f6f 	isb	sy
 800ee90:	f3bf 8f4f 	dsb	sy
 800ee94:	623b      	str	r3, [r7, #32]
}
 800ee96:	bf00      	nop
 800ee98:	bf00      	nop
 800ee9a:	e7fd      	b.n	800ee98 <xTimerGenericCommand+0x2c>

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if (xTimerQueue != NULL) {
 800ee9c:	4b19      	ldr	r3, [pc, #100]	@ (800ef04 <xTimerGenericCommand+0x98>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d02a      	beq.n	800eefa <xTimerGenericCommand+0x8e>
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
 800eea4:	68bb      	ldr	r3, [r7, #8]
 800eea6:	617b      	str	r3, [r7, #20]
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	61bb      	str	r3, [r7, #24]
        xMessage.u.xTimerParameters.pxTimer = xTimer;
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	61fb      	str	r3, [r7, #28]

        if (xCommandID < tmrFIRST_FROM_ISR_COMMAND) {
 800eeb0:	68bb      	ldr	r3, [r7, #8]
 800eeb2:	2b05      	cmp	r3, #5
 800eeb4:	dc18      	bgt.n	800eee8 <xTimerGenericCommand+0x7c>
            if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
 800eeb6:	f7ff fead 	bl	800ec14 <xTaskGetSchedulerState>
 800eeba:	4603      	mov	r3, r0
 800eebc:	2b02      	cmp	r3, #2
 800eebe:	d109      	bne.n	800eed4 <xTimerGenericCommand+0x68>
                xReturn = xQueueSendToBack(xTimerQueue, &xMessage, xTicksToWait);
 800eec0:	4b10      	ldr	r3, [pc, #64]	@ (800ef04 <xTimerGenericCommand+0x98>)
 800eec2:	6818      	ldr	r0, [r3, #0]
 800eec4:	f107 0114 	add.w	r1, r7, #20
 800eec8:	2300      	movs	r3, #0
 800eeca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eecc:	f7fe fb88 	bl	800d5e0 <xQueueGenericSend>
 800eed0:	6278      	str	r0, [r7, #36]	@ 0x24
 800eed2:	e012      	b.n	800eefa <xTimerGenericCommand+0x8e>
            } else {
                xReturn = xQueueSendToBack(xTimerQueue, &xMessage, tmrNO_DELAY);
 800eed4:	4b0b      	ldr	r3, [pc, #44]	@ (800ef04 <xTimerGenericCommand+0x98>)
 800eed6:	6818      	ldr	r0, [r3, #0]
 800eed8:	f107 0114 	add.w	r1, r7, #20
 800eedc:	2300      	movs	r3, #0
 800eede:	2200      	movs	r2, #0
 800eee0:	f7fe fb7e 	bl	800d5e0 <xQueueGenericSend>
 800eee4:	6278      	str	r0, [r7, #36]	@ 0x24
 800eee6:	e008      	b.n	800eefa <xTimerGenericCommand+0x8e>
            }
        } else {
            xReturn = xQueueSendToBackFromISR(xTimerQueue, &xMessage, pxHigherPriorityTaskWoken);
 800eee8:	4b06      	ldr	r3, [pc, #24]	@ (800ef04 <xTimerGenericCommand+0x98>)
 800eeea:	6818      	ldr	r0, [r3, #0]
 800eeec:	f107 0114 	add.w	r1, r7, #20
 800eef0:	2300      	movs	r3, #0
 800eef2:	683a      	ldr	r2, [r7, #0]
 800eef4:	f7fe fc76 	bl	800d7e4 <xQueueGenericSendFromISR>
 800eef8:	6278      	str	r0, [r7, #36]	@ 0x24
        traceTIMER_COMMAND_SEND(xTimer, xCommandID, xOptionalValue, xReturn);
    } else {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
 800eefa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800eefc:	4618      	mov	r0, r3
 800eefe:	3728      	adds	r7, #40	@ 0x28
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}
 800ef04:	20000f08 	.word	0x20000f08

0800ef08 <xTimerGetPeriod>:
    configASSERT((xTimerTaskHandle != NULL));
    return xTimerTaskHandle;
}
/*-----------------------------------------------------------*/

TickType_t xTimerGetPeriod(TimerHandle_t xTimer) {
 800ef08:	b480      	push	{r7}
 800ef0a:	b085      	sub	sp, #20
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
    Timer_t * pxTimer = xTimer;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	60fb      	str	r3, [r7, #12]

    configASSERT(xTimer);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d10b      	bne.n	800ef32 <xTimerGetPeriod+0x2a>
    __asm volatile("	mov %0, %1												\n"
 800ef1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef1e:	f383 8811 	msr	BASEPRI, r3
 800ef22:	f3bf 8f6f 	isb	sy
 800ef26:	f3bf 8f4f 	dsb	sy
 800ef2a:	60bb      	str	r3, [r7, #8]
}
 800ef2c:	bf00      	nop
 800ef2e:	bf00      	nop
 800ef30:	e7fd      	b.n	800ef2e <xTimerGetPeriod+0x26>
    return pxTimer->xTimerPeriodInTicks;
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	699b      	ldr	r3, [r3, #24]
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3714      	adds	r7, #20
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef40:	4770      	bx	lr
	...

0800ef44 <prvProcessExpiredTimer>:
    configASSERT(xTimer);
    return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer(const TickType_t xNextExpireTime, const TickType_t xTimeNow) {
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b088      	sub	sp, #32
 800ef48:	af02      	add	r7, sp, #8
 800ef4a:	6078      	str	r0, [r7, #4]
 800ef4c:	6039      	str	r1, [r7, #0]
    BaseType_t xResult;
    Timer_t * const pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(
 800ef4e:	4b23      	ldr	r3, [pc, #140]	@ (800efdc <prvProcessExpiredTimer+0x98>)
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	68db      	ldr	r3, [r3, #12]
 800ef54:	68db      	ldr	r3, [r3, #12]
 800ef56:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    (void)uxListRemove(&(pxTimer->xTimerListItem));
 800ef58:	697b      	ldr	r3, [r7, #20]
 800ef5a:	3304      	adds	r3, #4
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f7fe fa0f 	bl	800d380 <uxListRemove>
    traceTIMER_EXPIRED(pxTimer);

    /* If the timer is an auto-reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if ((pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD) != 0) {
 800ef62:	697b      	ldr	r3, [r7, #20]
 800ef64:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ef68:	f003 0304 	and.w	r3, r3, #4
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d023      	beq.n	800efb8 <prvProcessExpiredTimer+0x74>
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if (prvInsertTimerInActiveList(pxTimer, (xNextExpireTime + pxTimer->xTimerPeriodInTicks), xTimeNow, xNextExpireTime) != pdFALSE) {
 800ef70:	697b      	ldr	r3, [r7, #20]
 800ef72:	699a      	ldr	r2, [r3, #24]
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	18d1      	adds	r1, r2, r3
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	683a      	ldr	r2, [r7, #0]
 800ef7c:	6978      	ldr	r0, [r7, #20]
 800ef7e:	f000 f8d5 	bl	800f12c <prvInsertTimerInActiveList>
 800ef82:	4603      	mov	r3, r0
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d020      	beq.n	800efca <prvProcessExpiredTimer+0x86>
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
 800ef88:	2300      	movs	r3, #0
 800ef8a:	9300      	str	r3, [sp, #0]
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	687a      	ldr	r2, [r7, #4]
 800ef90:	2100      	movs	r1, #0
 800ef92:	6978      	ldr	r0, [r7, #20]
 800ef94:	f7ff ff6a 	bl	800ee6c <xTimerGenericCommand>
 800ef98:	6138      	str	r0, [r7, #16]
            configASSERT(xResult);
 800ef9a:	693b      	ldr	r3, [r7, #16]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d114      	bne.n	800efca <prvProcessExpiredTimer+0x86>
    __asm volatile("	mov %0, %1												\n"
 800efa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efa4:	f383 8811 	msr	BASEPRI, r3
 800efa8:	f3bf 8f6f 	isb	sy
 800efac:	f3bf 8f4f 	dsb	sy
 800efb0:	60fb      	str	r3, [r7, #12]
}
 800efb2:	bf00      	nop
 800efb4:	bf00      	nop
 800efb6:	e7fd      	b.n	800efb4 <prvProcessExpiredTimer+0x70>
            (void)xResult;
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    } else {
        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800efb8:	697b      	ldr	r3, [r7, #20]
 800efba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800efbe:	f023 0301 	bic.w	r3, r3, #1
 800efc2:	b2da      	uxtb	r2, r3
 800efc4:	697b      	ldr	r3, [r7, #20]
 800efc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
 800efca:	697b      	ldr	r3, [r7, #20]
 800efcc:	6a1b      	ldr	r3, [r3, #32]
 800efce:	6978      	ldr	r0, [r7, #20]
 800efd0:	4798      	blx	r3
}
 800efd2:	bf00      	nop
 800efd4:	3718      	adds	r7, #24
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}
 800efda:	bf00      	nop
 800efdc:	20000f00 	.word	0x20000f00

0800efe0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION(prvTimerTask, pvParameters) {
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b084      	sub	sp, #16
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
#endif /* configUSE_DAEMON_TASK_STARTUP_HOOK */

    for (;;) {
        /* Query the timers list to see if it contains any timers, and if so,
        obtain the time at which the next timer will expire. */
        xNextExpireTime = prvGetNextExpireTime(&xListWasEmpty);
 800efe8:	f107 0308 	add.w	r3, r7, #8
 800efec:	4618      	mov	r0, r3
 800efee:	f000 f859 	bl	800f0a4 <prvGetNextExpireTime>
 800eff2:	60f8      	str	r0, [r7, #12]

        /* If a timer has expired, process it.  Otherwise, block this task
        until either a timer does expire, or a command is received. */
        prvProcessTimerOrBlockTask(xNextExpireTime, xListWasEmpty);
 800eff4:	68bb      	ldr	r3, [r7, #8]
 800eff6:	4619      	mov	r1, r3
 800eff8:	68f8      	ldr	r0, [r7, #12]
 800effa:	f000 f805 	bl	800f008 <prvProcessTimerOrBlockTask>

        /* Empty the command queue. */
        prvProcessReceivedCommands();
 800effe:	f000 f8d7 	bl	800f1b0 <prvProcessReceivedCommands>
        xNextExpireTime = prvGetNextExpireTime(&xListWasEmpty);
 800f002:	bf00      	nop
 800f004:	e7f0      	b.n	800efe8 <prvTimerTask+0x8>
	...

0800f008 <prvProcessTimerOrBlockTask>:
    }
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask(const TickType_t xNextExpireTime, BaseType_t xListWasEmpty) {
 800f008:	b580      	push	{r7, lr}
 800f00a:	b084      	sub	sp, #16
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
 800f010:	6039      	str	r1, [r7, #0]
    TickType_t xTimeNow;
    BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
 800f012:	f7ff fa1b 	bl	800e44c <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
 800f016:	f107 0308 	add.w	r3, r7, #8
 800f01a:	4618      	mov	r0, r3
 800f01c:	f000 f866 	bl	800f0ec <prvSampleTimeNow>
 800f020:	60f8      	str	r0, [r7, #12]
        if (xTimerListsWereSwitched == pdFALSE) {
 800f022:	68bb      	ldr	r3, [r7, #8]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d130      	bne.n	800f08a <prvProcessTimerOrBlockTask+0x82>
            /* The tick count has not overflowed, has the timer expired? */
            if ((xListWasEmpty == pdFALSE) && (xNextExpireTime <= xTimeNow)) {
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d10a      	bne.n	800f044 <prvProcessTimerOrBlockTask+0x3c>
 800f02e:	687a      	ldr	r2, [r7, #4]
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	429a      	cmp	r2, r3
 800f034:	d806      	bhi.n	800f044 <prvProcessTimerOrBlockTask+0x3c>
                (void)xTaskResumeAll();
 800f036:	f7ff fa17 	bl	800e468 <xTaskResumeAll>
                prvProcessExpiredTimer(xNextExpireTime, xTimeNow);
 800f03a:	68f9      	ldr	r1, [r7, #12]
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	f7ff ff81 	bl	800ef44 <prvProcessExpiredTimer>
            }
        } else {
            (void)xTaskResumeAll();
        }
    }
}
 800f042:	e024      	b.n	800f08e <prvProcessTimerOrBlockTask+0x86>
                if (xListWasEmpty != pdFALSE) {
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d008      	beq.n	800f05c <prvProcessTimerOrBlockTask+0x54>
                    xListWasEmpty = listLIST_IS_EMPTY(pxOverflowTimerList);
 800f04a:	4b13      	ldr	r3, [pc, #76]	@ (800f098 <prvProcessTimerOrBlockTask+0x90>)
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d101      	bne.n	800f058 <prvProcessTimerOrBlockTask+0x50>
 800f054:	2301      	movs	r3, #1
 800f056:	e000      	b.n	800f05a <prvProcessTimerOrBlockTask+0x52>
 800f058:	2300      	movs	r3, #0
 800f05a:	603b      	str	r3, [r7, #0]
                vQueueWaitForMessageRestricted(xTimerQueue, (xNextExpireTime - xTimeNow), xListWasEmpty);
 800f05c:	4b0f      	ldr	r3, [pc, #60]	@ (800f09c <prvProcessTimerOrBlockTask+0x94>)
 800f05e:	6818      	ldr	r0, [r3, #0]
 800f060:	687a      	ldr	r2, [r7, #4]
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	1ad3      	subs	r3, r2, r3
 800f066:	683a      	ldr	r2, [r7, #0]
 800f068:	4619      	mov	r1, r3
 800f06a:	f7fe fe67 	bl	800dd3c <vQueueWaitForMessageRestricted>
                if (xTaskResumeAll() == pdFALSE) {
 800f06e:	f7ff f9fb 	bl	800e468 <xTaskResumeAll>
 800f072:	4603      	mov	r3, r0
 800f074:	2b00      	cmp	r3, #0
 800f076:	d10a      	bne.n	800f08e <prvProcessTimerOrBlockTask+0x86>
                    portYIELD_WITHIN_API();
 800f078:	4b09      	ldr	r3, [pc, #36]	@ (800f0a0 <prvProcessTimerOrBlockTask+0x98>)
 800f07a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f07e:	601a      	str	r2, [r3, #0]
 800f080:	f3bf 8f4f 	dsb	sy
 800f084:	f3bf 8f6f 	isb	sy
}
 800f088:	e001      	b.n	800f08e <prvProcessTimerOrBlockTask+0x86>
            (void)xTaskResumeAll();
 800f08a:	f7ff f9ed 	bl	800e468 <xTaskResumeAll>
}
 800f08e:	bf00      	nop
 800f090:	3710      	adds	r7, #16
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}
 800f096:	bf00      	nop
 800f098:	20000f04 	.word	0x20000f04
 800f09c:	20000f08 	.word	0x20000f08
 800f0a0:	e000ed04 	.word	0xe000ed04

0800f0a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime(BaseType_t * const pxListWasEmpty) {
 800f0a4:	b480      	push	{r7}
 800f0a6:	b085      	sub	sp, #20
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
 800f0ac:	4b0e      	ldr	r3, [pc, #56]	@ (800f0e8 <prvGetNextExpireTime+0x44>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d101      	bne.n	800f0ba <prvGetNextExpireTime+0x16>
 800f0b6:	2201      	movs	r2, #1
 800f0b8:	e000      	b.n	800f0bc <prvGetNextExpireTime+0x18>
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	601a      	str	r2, [r3, #0]
    if (*pxListWasEmpty == pdFALSE) {
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d105      	bne.n	800f0d4 <prvGetNextExpireTime+0x30>
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
 800f0c8:	4b07      	ldr	r3, [pc, #28]	@ (800f0e8 <prvGetNextExpireTime+0x44>)
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	68db      	ldr	r3, [r3, #12]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	60fb      	str	r3, [r7, #12]
 800f0d2:	e001      	b.n	800f0d8 <prvGetNextExpireTime+0x34>
    } else {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = (TickType_t)0U;
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	60fb      	str	r3, [r7, #12]
    }

    return xNextExpireTime;
 800f0d8:	68fb      	ldr	r3, [r7, #12]
}
 800f0da:	4618      	mov	r0, r3
 800f0dc:	3714      	adds	r7, #20
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e4:	4770      	bx	lr
 800f0e6:	bf00      	nop
 800f0e8:	20000f00 	.word	0x20000f00

0800f0ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow(BaseType_t * const pxTimerListsWereSwitched) {
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b084      	sub	sp, #16
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
    TickType_t xTimeNow;
    PRIVILEGED_DATA static TickType_t xLastTime = (TickType_t)0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
 800f0f4:	f7ff fa56 	bl	800e5a4 <xTaskGetTickCount>
 800f0f8:	60f8      	str	r0, [r7, #12]

    if (xTimeNow < xLastTime) {
 800f0fa:	4b0b      	ldr	r3, [pc, #44]	@ (800f128 <prvSampleTimeNow+0x3c>)
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	68fa      	ldr	r2, [r7, #12]
 800f100:	429a      	cmp	r2, r3
 800f102:	d205      	bcs.n	800f110 <prvSampleTimeNow+0x24>
        prvSwitchTimerLists();
 800f104:	f000 f91e 	bl	800f344 <prvSwitchTimerLists>
        *pxTimerListsWereSwitched = pdTRUE;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2201      	movs	r2, #1
 800f10c:	601a      	str	r2, [r3, #0]
 800f10e:	e002      	b.n	800f116 <prvSampleTimeNow+0x2a>
    } else {
        *pxTimerListsWereSwitched = pdFALSE;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2200      	movs	r2, #0
 800f114:	601a      	str	r2, [r3, #0]
    }

    xLastTime = xTimeNow;
 800f116:	4a04      	ldr	r2, [pc, #16]	@ (800f128 <prvSampleTimeNow+0x3c>)
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	6013      	str	r3, [r2, #0]

    return xTimeNow;
 800f11c:	68fb      	ldr	r3, [r7, #12]
}
 800f11e:	4618      	mov	r0, r3
 800f120:	3710      	adds	r7, #16
 800f122:	46bd      	mov	sp, r7
 800f124:	bd80      	pop	{r7, pc}
 800f126:	bf00      	nop
 800f128:	20000f10 	.word	0x20000f10

0800f12c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList(Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime) {
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b086      	sub	sp, #24
 800f130:	af00      	add	r7, sp, #0
 800f132:	60f8      	str	r0, [r7, #12]
 800f134:	60b9      	str	r1, [r7, #8]
 800f136:	607a      	str	r2, [r7, #4]
 800f138:	603b      	str	r3, [r7, #0]
    BaseType_t xProcessTimerNow = pdFALSE;
 800f13a:	2300      	movs	r3, #0
 800f13c:	617b      	str	r3, [r7, #20]

    listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xNextExpiryTime);
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	68ba      	ldr	r2, [r7, #8]
 800f142:	605a      	str	r2, [r3, #4]
    listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	68fa      	ldr	r2, [r7, #12]
 800f148:	611a      	str	r2, [r3, #16]

    if (xNextExpiryTime <= xTimeNow) {
 800f14a:	68ba      	ldr	r2, [r7, #8]
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	429a      	cmp	r2, r3
 800f150:	d812      	bhi.n	800f178 <prvInsertTimerInActiveList+0x4c>
        /* Has the expiry time elapsed between the command to start/reset a
        timer was issued, and the time the command was processed? */
        if (((TickType_t)(xTimeNow - xCommandTime)) >= pxTimer->xTimerPeriodInTicks) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f152:	687a      	ldr	r2, [r7, #4]
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	1ad2      	subs	r2, r2, r3
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	699b      	ldr	r3, [r3, #24]
 800f15c:	429a      	cmp	r2, r3
 800f15e:	d302      	bcc.n	800f166 <prvInsertTimerInActiveList+0x3a>
        {
            /* The time between a command being issued and the command being
            processed actually exceeds the timers period.  */
            xProcessTimerNow = pdTRUE;
 800f160:	2301      	movs	r3, #1
 800f162:	617b      	str	r3, [r7, #20]
 800f164:	e01b      	b.n	800f19e <prvInsertTimerInActiveList+0x72>
        } else {
            vListInsert(pxOverflowTimerList, &(pxTimer->xTimerListItem));
 800f166:	4b10      	ldr	r3, [pc, #64]	@ (800f1a8 <prvInsertTimerInActiveList+0x7c>)
 800f168:	681a      	ldr	r2, [r3, #0]
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	3304      	adds	r3, #4
 800f16e:	4619      	mov	r1, r3
 800f170:	4610      	mov	r0, r2
 800f172:	f7fe f8cc 	bl	800d30e <vListInsert>
 800f176:	e012      	b.n	800f19e <prvInsertTimerInActiveList+0x72>
        }
    } else {
        if ((xTimeNow < xCommandTime) && (xNextExpiryTime >= xCommandTime)) {
 800f178:	687a      	ldr	r2, [r7, #4]
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	429a      	cmp	r2, r3
 800f17e:	d206      	bcs.n	800f18e <prvInsertTimerInActiveList+0x62>
 800f180:	68ba      	ldr	r2, [r7, #8]
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	429a      	cmp	r2, r3
 800f186:	d302      	bcc.n	800f18e <prvInsertTimerInActiveList+0x62>
            /* If, since the command was issued, the tick count has overflowed
            but the expiry time has not, then the timer must have already passed
            its expiry time and should be processed immediately. */
            xProcessTimerNow = pdTRUE;
 800f188:	2301      	movs	r3, #1
 800f18a:	617b      	str	r3, [r7, #20]
 800f18c:	e007      	b.n	800f19e <prvInsertTimerInActiveList+0x72>
        } else {
            vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
 800f18e:	4b07      	ldr	r3, [pc, #28]	@ (800f1ac <prvInsertTimerInActiveList+0x80>)
 800f190:	681a      	ldr	r2, [r3, #0]
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	3304      	adds	r3, #4
 800f196:	4619      	mov	r1, r3
 800f198:	4610      	mov	r0, r2
 800f19a:	f7fe f8b8 	bl	800d30e <vListInsert>
        }
    }

    return xProcessTimerNow;
 800f19e:	697b      	ldr	r3, [r7, #20]
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	3718      	adds	r7, #24
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}
 800f1a8:	20000f04 	.word	0x20000f04
 800f1ac:	20000f00 	.word	0x20000f00

0800f1b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void prvProcessReceivedCommands(void) {
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b08c      	sub	sp, #48	@ 0x30
 800f1b4:	af02      	add	r7, sp, #8
    DaemonTaskMessage_t xMessage;
    Timer_t * pxTimer;
    BaseType_t xTimerListsWereSwitched, xResult;
    TickType_t xTimeNow;

    while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY) != pdFAIL) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f1b6:	e0b2      	b.n	800f31e <prvProcessReceivedCommands+0x16e>
        }
#endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if (xMessage.xMessageID >= (BaseType_t)0) {
 800f1b8:	68bb      	ldr	r3, [r7, #8]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	f2c0 80af 	blt.w	800f31e <prvProcessReceivedCommands+0x16e>
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f1c0:	693b      	ldr	r3, [r7, #16]
 800f1c2:	627b      	str	r3, [r7, #36]	@ 0x24

            if (listIS_CONTAINED_WITHIN(NULL, &(pxTimer->xTimerListItem)) == pdFALSE) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1c6:	695b      	ldr	r3, [r3, #20]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d004      	beq.n	800f1d6 <prvProcessReceivedCommands+0x26>
            {
                /* The timer is in a list, remove it. */
                (void)uxListRemove(&(pxTimer->xTimerListItem));
 800f1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1ce:	3304      	adds	r3, #4
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	f7fe f8d5 	bl	800d380 <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
 800f1d6:	1d3b      	adds	r3, r7, #4
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f7ff ff87 	bl	800f0ec <prvSampleTimeNow>
 800f1de:	6238      	str	r0, [r7, #32]

            switch (xMessage.xMessageID) {
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	2b09      	cmp	r3, #9
 800f1e4:	f200 8098 	bhi.w	800f318 <prvProcessReceivedCommands+0x168>
 800f1e8:	a201      	add	r2, pc, #4	@ (adr r2, 800f1f0 <prvProcessReceivedCommands+0x40>)
 800f1ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1ee:	bf00      	nop
 800f1f0:	0800f219 	.word	0x0800f219
 800f1f4:	0800f219 	.word	0x0800f219
 800f1f8:	0800f219 	.word	0x0800f219
 800f1fc:	0800f28f 	.word	0x0800f28f
 800f200:	0800f2a3 	.word	0x0800f2a3
 800f204:	0800f2ef 	.word	0x0800f2ef
 800f208:	0800f219 	.word	0x0800f219
 800f20c:	0800f219 	.word	0x0800f219
 800f210:	0800f28f 	.word	0x0800f28f
 800f214:	0800f2a3 	.word	0x0800f2a3
            case tmrCOMMAND_START_FROM_ISR:
            case tmrCOMMAND_RESET:
            case tmrCOMMAND_RESET_FROM_ISR:
            case tmrCOMMAND_START_DONT_TRACE:
                /* Start or restart a timer. */
                pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f21a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f21e:	f043 0301 	orr.w	r3, r3, #1
 800f222:	b2da      	uxtb	r2, r3
 800f224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f226:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                if (prvInsertTimerInActiveList(pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue) != pdFALSE) {
 800f22a:	68fa      	ldr	r2, [r7, #12]
 800f22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f22e:	699b      	ldr	r3, [r3, #24]
 800f230:	18d1      	adds	r1, r2, r3
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	6a3a      	ldr	r2, [r7, #32]
 800f236:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f238:	f7ff ff78 	bl	800f12c <prvInsertTimerInActiveList>
 800f23c:	4603      	mov	r3, r0
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d06c      	beq.n	800f31c <prvProcessReceivedCommands+0x16c>
                    /* The timer expired before it was added to the active
                    timer list.  Process it now. */
                    pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
 800f242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f244:	6a1b      	ldr	r3, [r3, #32]
 800f246:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f248:	4798      	blx	r3
                    traceTIMER_EXPIRED(pxTimer);

                    if ((pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD) != 0) {
 800f24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f24c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f250:	f003 0304 	and.w	r3, r3, #4
 800f254:	2b00      	cmp	r3, #0
 800f256:	d061      	beq.n	800f31c <prvProcessReceivedCommands+0x16c>
                        xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY);
 800f258:	68fa      	ldr	r2, [r7, #12]
 800f25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f25c:	699b      	ldr	r3, [r3, #24]
 800f25e:	441a      	add	r2, r3
 800f260:	2300      	movs	r3, #0
 800f262:	9300      	str	r3, [sp, #0]
 800f264:	2300      	movs	r3, #0
 800f266:	2100      	movs	r1, #0
 800f268:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f26a:	f7ff fdff 	bl	800ee6c <xTimerGenericCommand>
 800f26e:	61f8      	str	r0, [r7, #28]
                        configASSERT(xResult);
 800f270:	69fb      	ldr	r3, [r7, #28]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d152      	bne.n	800f31c <prvProcessReceivedCommands+0x16c>
    __asm volatile("	mov %0, %1												\n"
 800f276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f27a:	f383 8811 	msr	BASEPRI, r3
 800f27e:	f3bf 8f6f 	isb	sy
 800f282:	f3bf 8f4f 	dsb	sy
 800f286:	61bb      	str	r3, [r7, #24]
}
 800f288:	bf00      	nop
 800f28a:	bf00      	nop
 800f28c:	e7fd      	b.n	800f28a <prvProcessReceivedCommands+0xda>
                break;

            case tmrCOMMAND_STOP:
            case tmrCOMMAND_STOP_FROM_ISR:
                /* The timer has already been removed from the active list. */
                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f290:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f294:	f023 0301 	bic.w	r3, r3, #1
 800f298:	b2da      	uxtb	r2, r3
 800f29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f29c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                break;
 800f2a0:	e03d      	b.n	800f31e <prvProcessReceivedCommands+0x16e>

            case tmrCOMMAND_CHANGE_PERIOD:
            case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f2a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f2a8:	f043 0301 	orr.w	r3, r3, #1
 800f2ac:	b2da      	uxtb	r2, r3
 800f2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f2b4:	68fa      	ldr	r2, [r7, #12]
 800f2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2b8:	619a      	str	r2, [r3, #24]
                configASSERT((pxTimer->xTimerPeriodInTicks > 0));
 800f2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2bc:	699b      	ldr	r3, [r3, #24]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d10b      	bne.n	800f2da <prvProcessReceivedCommands+0x12a>
    __asm volatile("	mov %0, %1												\n"
 800f2c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2c6:	f383 8811 	msr	BASEPRI, r3
 800f2ca:	f3bf 8f6f 	isb	sy
 800f2ce:	f3bf 8f4f 	dsb	sy
 800f2d2:	617b      	str	r3, [r7, #20]
}
 800f2d4:	bf00      	nop
 800f2d6:	bf00      	nop
 800f2d8:	e7fd      	b.n	800f2d6 <prvProcessReceivedCommands+0x126>
                be longer or shorter than the old one.  The command time is
                therefore set to the current time, and as the period cannot
                be zero the next expiry time can only be in the future,
                meaning (unlike for the xTimerStart() case above) there is
                no fail case that needs to be handled here. */
                (void)prvInsertTimerInActiveList(pxTimer, (xTimeNow + pxTimer->xTimerPeriodInTicks), xTimeNow, xTimeNow);
 800f2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2dc:	699a      	ldr	r2, [r3, #24]
 800f2de:	6a3b      	ldr	r3, [r7, #32]
 800f2e0:	18d1      	adds	r1, r2, r3
 800f2e2:	6a3b      	ldr	r3, [r7, #32]
 800f2e4:	6a3a      	ldr	r2, [r7, #32]
 800f2e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f2e8:	f7ff ff20 	bl	800f12c <prvInsertTimerInActiveList>
                break;
 800f2ec:	e017      	b.n	800f31e <prvProcessReceivedCommands+0x16e>
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            {
                /* The timer has already been removed from the active list,
                just free up the memory if the memory was dynamically
                allocated. */
                if ((pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED) == (uint8_t)0) {
 800f2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f2f4:	f003 0302 	and.w	r3, r3, #2
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d103      	bne.n	800f304 <prvProcessReceivedCommands+0x154>
                    vPortFree(pxTimer);
 800f2fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f2fe:	f000 fb6f 	bl	800f9e0 <vPortFree>
                no need to free the memory - just mark the timer as
                "not active". */
                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
            }
#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
            break;
 800f302:	e00c      	b.n	800f31e <prvProcessReceivedCommands+0x16e>
                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f306:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f30a:	f023 0301 	bic.w	r3, r3, #1
 800f30e:	b2da      	uxtb	r2, r3
 800f310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f312:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            break;
 800f316:	e002      	b.n	800f31e <prvProcessReceivedCommands+0x16e>

            default:
                /* Don't expect to get here. */
                break;
 800f318:	bf00      	nop
 800f31a:	e000      	b.n	800f31e <prvProcessReceivedCommands+0x16e>
                break;
 800f31c:	bf00      	nop
    while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY) != pdFAIL) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f31e:	4b08      	ldr	r3, [pc, #32]	@ (800f340 <prvProcessReceivedCommands+0x190>)
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	f107 0108 	add.w	r1, r7, #8
 800f326:	2200      	movs	r2, #0
 800f328:	4618      	mov	r0, r3
 800f32a:	f7fe faf9 	bl	800d920 <xQueueReceive>
 800f32e:	4603      	mov	r3, r0
 800f330:	2b00      	cmp	r3, #0
 800f332:	f47f af41 	bne.w	800f1b8 <prvProcessReceivedCommands+0x8>
            }
        }
    }
}
 800f336:	bf00      	nop
 800f338:	bf00      	nop
 800f33a:	3728      	adds	r7, #40	@ 0x28
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd80      	pop	{r7, pc}
 800f340:	20000f08 	.word	0x20000f08

0800f344 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists(void) {
 800f344:	b580      	push	{r7, lr}
 800f346:	b088      	sub	sp, #32
 800f348:	af02      	add	r7, sp, #8

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
 800f34a:	e049      	b.n	800f3e0 <prvSwitchTimerLists+0x9c>
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
 800f34c:	4b2e      	ldr	r3, [pc, #184]	@ (800f408 <prvSwitchTimerLists+0xc4>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	68db      	ldr	r3, [r3, #12]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	613b      	str	r3, [r7, #16]

        /* Remove the timer from the list. */
        pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(
 800f356:	4b2c      	ldr	r3, [pc, #176]	@ (800f408 <prvSwitchTimerLists+0xc4>)
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	68db      	ldr	r3, [r3, #12]
 800f35c:	68db      	ldr	r3, [r3, #12]
 800f35e:	60fb      	str	r3, [r7, #12]
            pxCurrentTimerList); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
        (void)uxListRemove(&(pxTimer->xTimerListItem));
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	3304      	adds	r3, #4
 800f364:	4618      	mov	r0, r3
 800f366:	f7fe f80b 	bl	800d380 <uxListRemove>
        traceTIMER_EXPIRED(pxTimer);

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	6a1b      	ldr	r3, [r3, #32]
 800f36e:	68f8      	ldr	r0, [r7, #12]
 800f370:	4798      	blx	r3

        if ((pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD) != 0) {
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f378:	f003 0304 	and.w	r3, r3, #4
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d02f      	beq.n	800f3e0 <prvSwitchTimerLists+0x9c>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = (xNextExpireTime + pxTimer->xTimerPeriodInTicks);
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	699b      	ldr	r3, [r3, #24]
 800f384:	693a      	ldr	r2, [r7, #16]
 800f386:	4413      	add	r3, r2
 800f388:	60bb      	str	r3, [r7, #8]
            if (xReloadTime > xNextExpireTime) {
 800f38a:	68ba      	ldr	r2, [r7, #8]
 800f38c:	693b      	ldr	r3, [r7, #16]
 800f38e:	429a      	cmp	r2, r3
 800f390:	d90e      	bls.n	800f3b0 <prvSwitchTimerLists+0x6c>
                listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xReloadTime);
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	68ba      	ldr	r2, [r7, #8]
 800f396:	605a      	str	r2, [r3, #4]
                listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	68fa      	ldr	r2, [r7, #12]
 800f39c:	611a      	str	r2, [r3, #16]
                vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
 800f39e:	4b1a      	ldr	r3, [pc, #104]	@ (800f408 <prvSwitchTimerLists+0xc4>)
 800f3a0:	681a      	ldr	r2, [r3, #0]
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	3304      	adds	r3, #4
 800f3a6:	4619      	mov	r1, r3
 800f3a8:	4610      	mov	r0, r2
 800f3aa:	f7fd ffb0 	bl	800d30e <vListInsert>
 800f3ae:	e017      	b.n	800f3e0 <prvSwitchTimerLists+0x9c>
            } else {
                xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	9300      	str	r3, [sp, #0]
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	693a      	ldr	r2, [r7, #16]
 800f3b8:	2100      	movs	r1, #0
 800f3ba:	68f8      	ldr	r0, [r7, #12]
 800f3bc:	f7ff fd56 	bl	800ee6c <xTimerGenericCommand>
 800f3c0:	6078      	str	r0, [r7, #4]
                configASSERT(xResult);
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d10b      	bne.n	800f3e0 <prvSwitchTimerLists+0x9c>
    __asm volatile("	mov %0, %1												\n"
 800f3c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3cc:	f383 8811 	msr	BASEPRI, r3
 800f3d0:	f3bf 8f6f 	isb	sy
 800f3d4:	f3bf 8f4f 	dsb	sy
 800f3d8:	603b      	str	r3, [r7, #0]
}
 800f3da:	bf00      	nop
 800f3dc:	bf00      	nop
 800f3de:	e7fd      	b.n	800f3dc <prvSwitchTimerLists+0x98>
    while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
 800f3e0:	4b09      	ldr	r3, [pc, #36]	@ (800f408 <prvSwitchTimerLists+0xc4>)
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d1b0      	bne.n	800f34c <prvSwitchTimerLists+0x8>
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
 800f3ea:	4b07      	ldr	r3, [pc, #28]	@ (800f408 <prvSwitchTimerLists+0xc4>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	617b      	str	r3, [r7, #20]
    pxCurrentTimerList = pxOverflowTimerList;
 800f3f0:	4b06      	ldr	r3, [pc, #24]	@ (800f40c <prvSwitchTimerLists+0xc8>)
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	4a04      	ldr	r2, [pc, #16]	@ (800f408 <prvSwitchTimerLists+0xc4>)
 800f3f6:	6013      	str	r3, [r2, #0]
    pxOverflowTimerList = pxTemp;
 800f3f8:	4a04      	ldr	r2, [pc, #16]	@ (800f40c <prvSwitchTimerLists+0xc8>)
 800f3fa:	697b      	ldr	r3, [r7, #20]
 800f3fc:	6013      	str	r3, [r2, #0]
}
 800f3fe:	bf00      	nop
 800f400:	3718      	adds	r7, #24
 800f402:	46bd      	mov	sp, r7
 800f404:	bd80      	pop	{r7, pc}
 800f406:	bf00      	nop
 800f408:	20000f00 	.word	0x20000f00
 800f40c:	20000f04 	.word	0x20000f04

0800f410 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue(void) {
 800f410:	b580      	push	{r7, lr}
 800f412:	b082      	sub	sp, #8
 800f414:	af02      	add	r7, sp, #8
    /* Check that the list from which active timers are referenced, and the
    queue used to communicate with the timer service, have been
    initialised. */
    taskENTER_CRITICAL();
 800f416:	f000 f9af 	bl	800f778 <vPortEnterCritical>
    {
        if (xTimerQueue == NULL) {
 800f41a:	4b15      	ldr	r3, [pc, #84]	@ (800f470 <prvCheckForValidListAndQueue+0x60>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d120      	bne.n	800f464 <prvCheckForValidListAndQueue+0x54>
            vListInitialise(&xActiveTimerList1);
 800f422:	4814      	ldr	r0, [pc, #80]	@ (800f474 <prvCheckForValidListAndQueue+0x64>)
 800f424:	f7fd ff22 	bl	800d26c <vListInitialise>
            vListInitialise(&xActiveTimerList2);
 800f428:	4813      	ldr	r0, [pc, #76]	@ (800f478 <prvCheckForValidListAndQueue+0x68>)
 800f42a:	f7fd ff1f 	bl	800d26c <vListInitialise>
            pxCurrentTimerList = &xActiveTimerList1;
 800f42e:	4b13      	ldr	r3, [pc, #76]	@ (800f47c <prvCheckForValidListAndQueue+0x6c>)
 800f430:	4a10      	ldr	r2, [pc, #64]	@ (800f474 <prvCheckForValidListAndQueue+0x64>)
 800f432:	601a      	str	r2, [r3, #0]
            pxOverflowTimerList = &xActiveTimerList2;
 800f434:	4b12      	ldr	r3, [pc, #72]	@ (800f480 <prvCheckForValidListAndQueue+0x70>)
 800f436:	4a10      	ldr	r2, [pc, #64]	@ (800f478 <prvCheckForValidListAndQueue+0x68>)
 800f438:	601a      	str	r2, [r3, #0]
                /* The timer queue is allocated statically in case
                configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                static StaticQueue_t xStaticTimerQueue;                                                                   /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                static uint8_t ucStaticTimerQueueStorage[(size_t)configTIMER_QUEUE_LENGTH * sizeof(DaemonTaskMessage_t)]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                xTimerQueue = xQueueCreateStatic((UBaseType_t)configTIMER_QUEUE_LENGTH, (UBaseType_t)sizeof(DaemonTaskMessage_t), &(ucStaticTimerQueueStorage[0]), &xStaticTimerQueue);
 800f43a:	2300      	movs	r3, #0
 800f43c:	9300      	str	r3, [sp, #0]
 800f43e:	4b11      	ldr	r3, [pc, #68]	@ (800f484 <prvCheckForValidListAndQueue+0x74>)
 800f440:	4a11      	ldr	r2, [pc, #68]	@ (800f488 <prvCheckForValidListAndQueue+0x78>)
 800f442:	210c      	movs	r1, #12
 800f444:	200a      	movs	r0, #10
 800f446:	f7fe f82f 	bl	800d4a8 <xQueueGenericCreateStatic>
 800f44a:	4603      	mov	r3, r0
 800f44c:	4a08      	ldr	r2, [pc, #32]	@ (800f470 <prvCheckForValidListAndQueue+0x60>)
 800f44e:	6013      	str	r3, [r2, #0]
            }
#endif

#if (configQUEUE_REGISTRY_SIZE > 0)
            {
                if (xTimerQueue != NULL) {
 800f450:	4b07      	ldr	r3, [pc, #28]	@ (800f470 <prvCheckForValidListAndQueue+0x60>)
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d005      	beq.n	800f464 <prvCheckForValidListAndQueue+0x54>
                    vQueueAddToRegistry(xTimerQueue, "TmrQ");
 800f458:	4b05      	ldr	r3, [pc, #20]	@ (800f470 <prvCheckForValidListAndQueue+0x60>)
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	490b      	ldr	r1, [pc, #44]	@ (800f48c <prvCheckForValidListAndQueue+0x7c>)
 800f45e:	4618      	mov	r0, r3
 800f460:	f7fe fc42 	bl	800dce8 <vQueueAddToRegistry>
#endif /* configQUEUE_REGISTRY_SIZE */
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800f464:	f000 f9ba 	bl	800f7dc <vPortExitCritical>
}
 800f468:	bf00      	nop
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}
 800f46e:	bf00      	nop
 800f470:	20000f08 	.word	0x20000f08
 800f474:	20000ed8 	.word	0x20000ed8
 800f478:	20000eec 	.word	0x20000eec
 800f47c:	20000f00 	.word	0x20000f00
 800f480:	20000f04 	.word	0x20000f04
 800f484:	20000f8c 	.word	0x20000f8c
 800f488:	20000f14 	.word	0x20000f14
 800f48c:	08013a70 	.word	0x08013a70

0800f490 <pvTimerGetTimerID>:

    return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void * pvTimerGetTimerID(const TimerHandle_t xTimer) {
 800f490:	b580      	push	{r7, lr}
 800f492:	b086      	sub	sp, #24
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
    Timer_t * const pxTimer = xTimer;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	617b      	str	r3, [r7, #20]
    void * pvReturn;

    configASSERT(xTimer);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d10b      	bne.n	800f4ba <pvTimerGetTimerID+0x2a>
    __asm volatile("	mov %0, %1												\n"
 800f4a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4a6:	f383 8811 	msr	BASEPRI, r3
 800f4aa:	f3bf 8f6f 	isb	sy
 800f4ae:	f3bf 8f4f 	dsb	sy
 800f4b2:	60fb      	str	r3, [r7, #12]
}
 800f4b4:	bf00      	nop
 800f4b6:	bf00      	nop
 800f4b8:	e7fd      	b.n	800f4b6 <pvTimerGetTimerID+0x26>

    taskENTER_CRITICAL();
 800f4ba:	f000 f95d 	bl	800f778 <vPortEnterCritical>
    { pvReturn = pxTimer->pvTimerID; }
 800f4be:	697b      	ldr	r3, [r7, #20]
 800f4c0:	69db      	ldr	r3, [r3, #28]
 800f4c2:	613b      	str	r3, [r7, #16]
    taskEXIT_CRITICAL();
 800f4c4:	f000 f98a 	bl	800f7dc <vPortExitCritical>

    return pvReturn;
 800f4c8:	693b      	ldr	r3, [r7, #16]
}
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	3718      	adds	r7, #24
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd80      	pop	{r7, pc}

0800f4d2 <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID(TimerHandle_t xTimer, void * pvNewID) {
 800f4d2:	b580      	push	{r7, lr}
 800f4d4:	b084      	sub	sp, #16
 800f4d6:	af00      	add	r7, sp, #0
 800f4d8:	6078      	str	r0, [r7, #4]
 800f4da:	6039      	str	r1, [r7, #0]
    Timer_t * const pxTimer = xTimer;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	60fb      	str	r3, [r7, #12]

    configASSERT(xTimer);
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d10b      	bne.n	800f4fe <vTimerSetTimerID+0x2c>
    __asm volatile("	mov %0, %1												\n"
 800f4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4ea:	f383 8811 	msr	BASEPRI, r3
 800f4ee:	f3bf 8f6f 	isb	sy
 800f4f2:	f3bf 8f4f 	dsb	sy
 800f4f6:	60bb      	str	r3, [r7, #8]
}
 800f4f8:	bf00      	nop
 800f4fa:	bf00      	nop
 800f4fc:	e7fd      	b.n	800f4fa <vTimerSetTimerID+0x28>

    taskENTER_CRITICAL();
 800f4fe:	f000 f93b 	bl	800f778 <vPortEnterCritical>
    { pxTimer->pvTimerID = pvNewID; }
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	683a      	ldr	r2, [r7, #0]
 800f506:	61da      	str	r2, [r3, #28]
    taskEXIT_CRITICAL();
 800f508:	f000 f968 	bl	800f7dc <vPortExitCritical>
}
 800f50c:	bf00      	nop
 800f50e:	3710      	adds	r7, #16
 800f510:	46bd      	mov	sp, r7
 800f512:	bd80      	pop	{r7, pc}

0800f514 <pxPortInitialiseStack>:
/*-----------------------------------------------------------*/

/*
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack(StackType_t * pxTopOfStack, TaskFunction_t pxCode, void * pvParameters) {
 800f514:	b480      	push	{r7}
 800f516:	b085      	sub	sp, #20
 800f518:	af00      	add	r7, sp, #0
 800f51a:	60f8      	str	r0, [r7, #12]
 800f51c:	60b9      	str	r1, [r7, #8]
 800f51e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
    interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
    of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	3b04      	subs	r3, #4
 800f524:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR; /* xPSR */
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f52c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	3b04      	subs	r3, #4
 800f532:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ((StackType_t)pxCode) & portSTART_ADDRESS_MASK; /* PC */
 800f534:	68bb      	ldr	r3, [r7, #8]
 800f536:	f023 0201 	bic.w	r2, r3, #1
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	3b04      	subs	r3, #4
 800f542:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = (StackType_t)portTASK_RETURN_ADDRESS; /* LR */
 800f544:	4a0c      	ldr	r2, [pc, #48]	@ (800f578 <pxPortInitialiseStack+0x64>)
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                         /* R12, R3, R2 and R1. */
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	3b14      	subs	r3, #20
 800f54e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = (StackType_t)pvParameters; /* R0 */
 800f550:	687a      	ldr	r2, [r7, #4]
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
    own exec return value. */
    pxTopOfStack--;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	3b04      	subs	r3, #4
 800f55a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	f06f 0202 	mvn.w	r2, #2
 800f562:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	3b20      	subs	r3, #32
 800f568:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800f56a:	68fb      	ldr	r3, [r7, #12]
}
 800f56c:	4618      	mov	r0, r3
 800f56e:	3714      	adds	r7, #20
 800f570:	46bd      	mov	sp, r7
 800f572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f576:	4770      	bx	lr
 800f578:	0800f57d 	.word	0x0800f57d

0800f57c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError(void) {
 800f57c:	b480      	push	{r7}
 800f57e:	b085      	sub	sp, #20
 800f580:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800f582:	2300      	movs	r3, #0
 800f584:	607b      	str	r3, [r7, #4]
    its caller as there is nothing to return to.  If a task wants to exit it
    should instead call vTaskDelete( NULL ).

    Artificially force an assert() to be triggered if configASSERT() is
    defined, then stop here so application writers can catch the error. */
    configASSERT(uxCriticalNesting == ~0UL);
 800f586:	4b13      	ldr	r3, [pc, #76]	@ (800f5d4 <prvTaskExitError+0x58>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f58e:	d00b      	beq.n	800f5a8 <prvTaskExitError+0x2c>
    __asm volatile("	mov %0, %1												\n"
 800f590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f594:	f383 8811 	msr	BASEPRI, r3
 800f598:	f3bf 8f6f 	isb	sy
 800f59c:	f3bf 8f4f 	dsb	sy
 800f5a0:	60fb      	str	r3, [r7, #12]
}
 800f5a2:	bf00      	nop
 800f5a4:	bf00      	nop
 800f5a6:	e7fd      	b.n	800f5a4 <prvTaskExitError+0x28>
    __asm volatile("	mov %0, %1												\n"
 800f5a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5ac:	f383 8811 	msr	BASEPRI, r3
 800f5b0:	f3bf 8f6f 	isb	sy
 800f5b4:	f3bf 8f4f 	dsb	sy
 800f5b8:	60bb      	str	r3, [r7, #8]
}
 800f5ba:	bf00      	nop
    portDISABLE_INTERRUPTS();
    while (ulDummy == 0) {
 800f5bc:	bf00      	nop
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d0fc      	beq.n	800f5be <prvTaskExitError+0x42>
        about code appearing after this function is called - making ulDummy
        volatile makes the compiler think the function could return and
        therefore not output an 'unreachable code' warning for code that appears
        after it. */
    }
}
 800f5c4:	bf00      	nop
 800f5c6:	bf00      	nop
 800f5c8:	3714      	adds	r7, #20
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d0:	4770      	bx	lr
 800f5d2:	bf00      	nop
 800f5d4:	200000f4 	.word	0x200000f4
	...

0800f5e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler(void) {
    __asm volatile("	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 800f5e0:	4b07      	ldr	r3, [pc, #28]	@ (800f600 <pxCurrentTCBConst2>)
 800f5e2:	6819      	ldr	r1, [r3, #0]
 800f5e4:	6808      	ldr	r0, [r1, #0]
 800f5e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5ea:	f380 8809 	msr	PSP, r0
 800f5ee:	f3bf 8f6f 	isb	sy
 800f5f2:	f04f 0000 	mov.w	r0, #0
 800f5f6:	f380 8811 	msr	BASEPRI, r0
 800f5fa:	4770      	bx	lr
 800f5fc:	f3af 8000 	nop.w

0800f600 <pxCurrentTCBConst2>:
 800f600:	20000dac 	.word	0x20000dac
                   "	msr	basepri, r0					\n"
                   "	bx r14							\n"
                   "									\n"
                   "	.align 4						\n"
                   "pxCurrentTCBConst2: .word pxCurrentTCB				\n");
}
 800f604:	bf00      	nop
 800f606:	bf00      	nop

0800f608 <prvPortStartFirstTask>:
static void prvPortStartFirstTask(void) {
    /* Start the first task.  This also clears the bit that indicates the FPU is
    in use in case the FPU was used before the scheduler was started - which
    would otherwise result in the unnecessary leaving of space in the SVC stack
    for lazy saving of FPU registers. */
    __asm volatile(" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 800f608:	4808      	ldr	r0, [pc, #32]	@ (800f62c <prvPortStartFirstTask+0x24>)
 800f60a:	6800      	ldr	r0, [r0, #0]
 800f60c:	6800      	ldr	r0, [r0, #0]
 800f60e:	f380 8808 	msr	MSP, r0
 800f612:	f04f 0000 	mov.w	r0, #0
 800f616:	f380 8814 	msr	CONTROL, r0
 800f61a:	b662      	cpsie	i
 800f61c:	b661      	cpsie	f
 800f61e:	f3bf 8f4f 	dsb	sy
 800f622:	f3bf 8f6f 	isb	sy
 800f626:	df00      	svc	0
 800f628:	bf00      	nop
                   " cpsie f				\n"
                   " dsb					\n"
                   " isb					\n"
                   " svc 0					\n" /* System call to start first task. */
                   " nop					\n");
}
 800f62a:	bf00      	nop
 800f62c:	e000ed08 	.word	0xe000ed08

0800f630 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler(void) {
 800f630:	b580      	push	{r7, lr}
 800f632:	b086      	sub	sp, #24
 800f634:	af00      	add	r7, sp, #0
    configASSERT(configMAX_SYSCALL_INTERRUPT_PRIORITY);

    /* This port can be used on all revisions of the Cortex-M7 core other than
    the r0p1 parts.  r0p1 parts should use the port from the
    /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
 800f636:	4b47      	ldr	r3, [pc, #284]	@ (800f754 <xPortStartScheduler+0x124>)
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	4a47      	ldr	r2, [pc, #284]	@ (800f758 <xPortStartScheduler+0x128>)
 800f63c:	4293      	cmp	r3, r2
 800f63e:	d10b      	bne.n	800f658 <xPortStartScheduler+0x28>
    __asm volatile("	mov %0, %1												\n"
 800f640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f644:	f383 8811 	msr	BASEPRI, r3
 800f648:	f3bf 8f6f 	isb	sy
 800f64c:	f3bf 8f4f 	dsb	sy
 800f650:	613b      	str	r3, [r7, #16]
}
 800f652:	bf00      	nop
 800f654:	bf00      	nop
 800f656:	e7fd      	b.n	800f654 <xPortStartScheduler+0x24>
    configASSERT(portCPUID != portCORTEX_M7_r0p0_ID);
 800f658:	4b3e      	ldr	r3, [pc, #248]	@ (800f754 <xPortStartScheduler+0x124>)
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	4a3f      	ldr	r2, [pc, #252]	@ (800f75c <xPortStartScheduler+0x12c>)
 800f65e:	4293      	cmp	r3, r2
 800f660:	d10b      	bne.n	800f67a <xPortStartScheduler+0x4a>
    __asm volatile("	mov %0, %1												\n"
 800f662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f666:	f383 8811 	msr	BASEPRI, r3
 800f66a:	f3bf 8f6f 	isb	sy
 800f66e:	f3bf 8f4f 	dsb	sy
 800f672:	60fb      	str	r3, [r7, #12]
}
 800f674:	bf00      	nop
 800f676:	bf00      	nop
 800f678:	e7fd      	b.n	800f676 <xPortStartScheduler+0x46>

#if (configASSERT_DEFINED == 1)
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = (volatile uint8_t * const)(portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER);
 800f67a:	4b39      	ldr	r3, [pc, #228]	@ (800f760 <xPortStartScheduler+0x130>)
 800f67c:	617b      	str	r3, [r7, #20]
        functions can be called.  ISR safe functions are those that end in
        "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
        ensure interrupt entry is as fast and simple as possible.

        Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f67e:	697b      	ldr	r3, [r7, #20]
 800f680:	781b      	ldrb	r3, [r3, #0]
 800f682:	b2db      	uxtb	r3, r3
 800f684:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
        possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	22ff      	movs	r2, #255	@ 0xff
 800f68a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f68c:	697b      	ldr	r3, [r7, #20]
 800f68e:	781b      	ldrb	r3, [r3, #0]
 800f690:	b2db      	uxtb	r3, r3
 800f692:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f694:	78fb      	ldrb	r3, [r7, #3]
 800f696:	b2db      	uxtb	r3, r3
 800f698:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f69c:	b2da      	uxtb	r2, r3
 800f69e:	4b31      	ldr	r3, [pc, #196]	@ (800f764 <xPortStartScheduler+0x134>)
 800f6a0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
        of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f6a2:	4b31      	ldr	r3, [pc, #196]	@ (800f768 <xPortStartScheduler+0x138>)
 800f6a4:	2207      	movs	r2, #7
 800f6a6:	601a      	str	r2, [r3, #0]
        while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 800f6a8:	e009      	b.n	800f6be <xPortStartScheduler+0x8e>
            ulMaxPRIGROUPValue--;
 800f6aa:	4b2f      	ldr	r3, [pc, #188]	@ (800f768 <xPortStartScheduler+0x138>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	3b01      	subs	r3, #1
 800f6b0:	4a2d      	ldr	r2, [pc, #180]	@ (800f768 <xPortStartScheduler+0x138>)
 800f6b2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= (uint8_t)0x01;
 800f6b4:	78fb      	ldrb	r3, [r7, #3]
 800f6b6:	b2db      	uxtb	r3, r3
 800f6b8:	005b      	lsls	r3, r3, #1
 800f6ba:	b2db      	uxtb	r3, r3
 800f6bc:	70fb      	strb	r3, [r7, #3]
        while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 800f6be:	78fb      	ldrb	r3, [r7, #3]
 800f6c0:	b2db      	uxtb	r3, r3
 800f6c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f6c6:	2b80      	cmp	r3, #128	@ 0x80
 800f6c8:	d0ef      	beq.n	800f6aa <xPortStartScheduler+0x7a>
#ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
            priority bits matches the number of priority bits actually queried
            from the hardware. */
            configASSERT((portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue) == configPRIO_BITS);
 800f6ca:	4b27      	ldr	r3, [pc, #156]	@ (800f768 <xPortStartScheduler+0x138>)
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	f1c3 0307 	rsb	r3, r3, #7
 800f6d2:	2b04      	cmp	r3, #4
 800f6d4:	d00b      	beq.n	800f6ee <xPortStartScheduler+0xbe>
    __asm volatile("	mov %0, %1												\n"
 800f6d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6da:	f383 8811 	msr	BASEPRI, r3
 800f6de:	f3bf 8f6f 	isb	sy
 800f6e2:	f3bf 8f4f 	dsb	sy
 800f6e6:	60bb      	str	r3, [r7, #8]
}
 800f6e8:	bf00      	nop
 800f6ea:	bf00      	nop
 800f6ec:	e7fd      	b.n	800f6ea <xPortStartScheduler+0xba>
        }
#endif

        /* Shift the priority group value back to its position within the AIRCR
        register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f6ee:	4b1e      	ldr	r3, [pc, #120]	@ (800f768 <xPortStartScheduler+0x138>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	021b      	lsls	r3, r3, #8
 800f6f4:	4a1c      	ldr	r2, [pc, #112]	@ (800f768 <xPortStartScheduler+0x138>)
 800f6f6:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f6f8:	4b1b      	ldr	r3, [pc, #108]	@ (800f768 <xPortStartScheduler+0x138>)
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f700:	4a19      	ldr	r2, [pc, #100]	@ (800f768 <xPortStartScheduler+0x138>)
 800f702:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
        value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	b2da      	uxtb	r2, r3
 800f708:	697b      	ldr	r3, [r7, #20]
 800f70a:	701a      	strb	r2, [r3, #0]
    }
#endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f70c:	4b17      	ldr	r3, [pc, #92]	@ (800f76c <xPortStartScheduler+0x13c>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	4a16      	ldr	r2, [pc, #88]	@ (800f76c <xPortStartScheduler+0x13c>)
 800f712:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f716:	6013      	str	r3, [r2, #0]
    portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f718:	4b14      	ldr	r3, [pc, #80]	@ (800f76c <xPortStartScheduler+0x13c>)
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	4a13      	ldr	r2, [pc, #76]	@ (800f76c <xPortStartScheduler+0x13c>)
 800f71e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f722:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
    here already. */
    vPortSetupTimerInterrupt();
 800f724:	f000 f8da 	bl	800f8dc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800f728:	4b11      	ldr	r3, [pc, #68]	@ (800f770 <xPortStartScheduler+0x140>)
 800f72a:	2200      	movs	r2, #0
 800f72c:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800f72e:	f000 f8f9 	bl	800f924 <vPortEnableVFP>

    /* Lazy save always. */
    *(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
 800f732:	4b10      	ldr	r3, [pc, #64]	@ (800f774 <xPortStartScheduler+0x144>)
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	4a0f      	ldr	r2, [pc, #60]	@ (800f774 <xPortStartScheduler+0x144>)
 800f738:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f73c:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800f73e:	f7ff ff63 	bl	800f608 <prvPortStartFirstTask>
    exit error function to prevent compiler warnings about a static function
    not being called in the case that the application writer overrides this
    functionality by defining configTASK_RETURN_ADDRESS.  Call
    vTaskSwitchContext() so link time optimisation does not remove the
    symbol. */
    vTaskSwitchContext();
 800f742:	f7fe fff9 	bl	800e738 <vTaskSwitchContext>
    prvTaskExitError();
 800f746:	f7ff ff19 	bl	800f57c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800f74a:	2300      	movs	r3, #0
}
 800f74c:	4618      	mov	r0, r3
 800f74e:	3718      	adds	r7, #24
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}
 800f754:	e000ed00 	.word	0xe000ed00
 800f758:	410fc271 	.word	0x410fc271
 800f75c:	410fc270 	.word	0x410fc270
 800f760:	e000e400 	.word	0xe000e400
 800f764:	20000fd4 	.word	0x20000fd4
 800f768:	20000fd8 	.word	0x20000fd8
 800f76c:	e000ed20 	.word	0xe000ed20
 800f770:	200000f4 	.word	0x200000f4
 800f774:	e000ef34 	.word	0xe000ef34

0800f778 <vPortEnterCritical>:
    Artificially force an assert. */
    configASSERT(uxCriticalNesting == 1000UL);
}
/*-----------------------------------------------------------*/

void vPortEnterCritical(void) {
 800f778:	b480      	push	{r7}
 800f77a:	b083      	sub	sp, #12
 800f77c:	af00      	add	r7, sp, #0
    __asm volatile("	mov %0, %1												\n"
 800f77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f782:	f383 8811 	msr	BASEPRI, r3
 800f786:	f3bf 8f6f 	isb	sy
 800f78a:	f3bf 8f4f 	dsb	sy
 800f78e:	607b      	str	r3, [r7, #4]
}
 800f790:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800f792:	4b10      	ldr	r3, [pc, #64]	@ (800f7d4 <vPortEnterCritical+0x5c>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	3301      	adds	r3, #1
 800f798:	4a0e      	ldr	r2, [pc, #56]	@ (800f7d4 <vPortEnterCritical+0x5c>)
 800f79a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
    assert() if it is being called from an interrupt context.  Only API
    functions that end in "FromISR" can be used in an interrupt.  Only assert if
    the critical nesting count is 1 to protect against recursive calls if the
    assert function also uses a critical section. */
    if (uxCriticalNesting == 1) {
 800f79c:	4b0d      	ldr	r3, [pc, #52]	@ (800f7d4 <vPortEnterCritical+0x5c>)
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	2b01      	cmp	r3, #1
 800f7a2:	d110      	bne.n	800f7c6 <vPortEnterCritical+0x4e>
        configASSERT((portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK) == 0);
 800f7a4:	4b0c      	ldr	r3, [pc, #48]	@ (800f7d8 <vPortEnterCritical+0x60>)
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	b2db      	uxtb	r3, r3
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d00b      	beq.n	800f7c6 <vPortEnterCritical+0x4e>
    __asm volatile("	mov %0, %1												\n"
 800f7ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7b2:	f383 8811 	msr	BASEPRI, r3
 800f7b6:	f3bf 8f6f 	isb	sy
 800f7ba:	f3bf 8f4f 	dsb	sy
 800f7be:	603b      	str	r3, [r7, #0]
}
 800f7c0:	bf00      	nop
 800f7c2:	bf00      	nop
 800f7c4:	e7fd      	b.n	800f7c2 <vPortEnterCritical+0x4a>
    }
}
 800f7c6:	bf00      	nop
 800f7c8:	370c      	adds	r7, #12
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d0:	4770      	bx	lr
 800f7d2:	bf00      	nop
 800f7d4:	200000f4 	.word	0x200000f4
 800f7d8:	e000ed04 	.word	0xe000ed04

0800f7dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical(void) {
 800f7dc:	b480      	push	{r7}
 800f7de:	b083      	sub	sp, #12
 800f7e0:	af00      	add	r7, sp, #0
    configASSERT(uxCriticalNesting);
 800f7e2:	4b12      	ldr	r3, [pc, #72]	@ (800f82c <vPortExitCritical+0x50>)
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d10b      	bne.n	800f802 <vPortExitCritical+0x26>
    __asm volatile("	mov %0, %1												\n"
 800f7ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7ee:	f383 8811 	msr	BASEPRI, r3
 800f7f2:	f3bf 8f6f 	isb	sy
 800f7f6:	f3bf 8f4f 	dsb	sy
 800f7fa:	607b      	str	r3, [r7, #4]
}
 800f7fc:	bf00      	nop
 800f7fe:	bf00      	nop
 800f800:	e7fd      	b.n	800f7fe <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800f802:	4b0a      	ldr	r3, [pc, #40]	@ (800f82c <vPortExitCritical+0x50>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	3b01      	subs	r3, #1
 800f808:	4a08      	ldr	r2, [pc, #32]	@ (800f82c <vPortExitCritical+0x50>)
 800f80a:	6013      	str	r3, [r2, #0]
    if (uxCriticalNesting == 0) {
 800f80c:	4b07      	ldr	r3, [pc, #28]	@ (800f82c <vPortExitCritical+0x50>)
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d105      	bne.n	800f820 <vPortExitCritical+0x44>
 800f814:	2300      	movs	r3, #0
 800f816:	603b      	str	r3, [r7, #0]
    __asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
 800f818:	683b      	ldr	r3, [r7, #0]
 800f81a:	f383 8811 	msr	BASEPRI, r3
}
 800f81e:	bf00      	nop
        portENABLE_INTERRUPTS();
    }
}
 800f820:	bf00      	nop
 800f822:	370c      	adds	r7, #12
 800f824:	46bd      	mov	sp, r7
 800f826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82a:	4770      	bx	lr
 800f82c:	200000f4 	.word	0x200000f4

0800f830 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void xPortPendSVHandler(void) {
    /* This is a naked function. */

    __asm volatile("	mrs r0, psp							\n"
 800f830:	f3ef 8009 	mrs	r0, PSP
 800f834:	f3bf 8f6f 	isb	sy
 800f838:	4b15      	ldr	r3, [pc, #84]	@ (800f890 <pxCurrentTCBConst>)
 800f83a:	681a      	ldr	r2, [r3, #0]
 800f83c:	f01e 0f10 	tst.w	lr, #16
 800f840:	bf08      	it	eq
 800f842:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f846:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f84a:	6010      	str	r0, [r2, #0]
 800f84c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f850:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f854:	f380 8811 	msr	BASEPRI, r0
 800f858:	f3bf 8f4f 	dsb	sy
 800f85c:	f3bf 8f6f 	isb	sy
 800f860:	f7fe ff6a 	bl	800e738 <vTaskSwitchContext>
 800f864:	f04f 0000 	mov.w	r0, #0
 800f868:	f380 8811 	msr	BASEPRI, r0
 800f86c:	bc09      	pop	{r0, r3}
 800f86e:	6819      	ldr	r1, [r3, #0]
 800f870:	6808      	ldr	r0, [r1, #0]
 800f872:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f876:	f01e 0f10 	tst.w	lr, #16
 800f87a:	bf08      	it	eq
 800f87c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f880:	f380 8809 	msr	PSP, r0
 800f884:	f3bf 8f6f 	isb	sy
 800f888:	4770      	bx	lr
 800f88a:	bf00      	nop
 800f88c:	f3af 8000 	nop.w

0800f890 <pxCurrentTCBConst>:
 800f890:	20000dac 	.word	0x20000dac
                   "										\n"
                   "	bx r14								\n"
                   "										\n"
                   "	.align 4							\n"
                   "pxCurrentTCBConst: .word pxCurrentTCB	\n" ::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY));
}
 800f894:	bf00      	nop
 800f896:	bf00      	nop

0800f898 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler(void) {
 800f898:	b580      	push	{r7, lr}
 800f89a:	b082      	sub	sp, #8
 800f89c:	af00      	add	r7, sp, #0
    __asm volatile("	mov %0, %1												\n"
 800f89e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8a2:	f383 8811 	msr	BASEPRI, r3
 800f8a6:	f3bf 8f6f 	isb	sy
 800f8aa:	f3bf 8f4f 	dsb	sy
 800f8ae:	607b      	str	r3, [r7, #4]
}
 800f8b0:	bf00      	nop
    save and then restore the interrupt mask value as its value is already
    known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if (xTaskIncrementTick() != pdFALSE) {
 800f8b2:	f7fe fe87 	bl	800e5c4 <xTaskIncrementTick>
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d003      	beq.n	800f8c4 <xPortSysTickHandler+0x2c>
            /* A context switch is required.  Context switching is performed in
            the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f8bc:	4b06      	ldr	r3, [pc, #24]	@ (800f8d8 <xPortSysTickHandler+0x40>)
 800f8be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f8c2:	601a      	str	r2, [r3, #0]
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	603b      	str	r3, [r7, #0]
    __asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	f383 8811 	msr	BASEPRI, r3
}
 800f8ce:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800f8d0:	bf00      	nop
 800f8d2:	3708      	adds	r7, #8
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd80      	pop	{r7, pc}
 800f8d8:	e000ed04 	.word	0xe000ed04

0800f8dc <vPortSetupTimerInterrupt>:

/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__((weak)) void vPortSetupTimerInterrupt(void) {
 800f8dc:	b480      	push	{r7}
 800f8de:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / (configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ);
    }
#endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f8e0:	4b0b      	ldr	r3, [pc, #44]	@ (800f910 <vPortSetupTimerInterrupt+0x34>)
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f8e6:	4b0b      	ldr	r3, [pc, #44]	@ (800f914 <vPortSetupTimerInterrupt+0x38>)
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 800f8ec:	4b0a      	ldr	r3, [pc, #40]	@ (800f918 <vPortSetupTimerInterrupt+0x3c>)
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	4a0a      	ldr	r2, [pc, #40]	@ (800f91c <vPortSetupTimerInterrupt+0x40>)
 800f8f2:	fba2 2303 	umull	r2, r3, r2, r3
 800f8f6:	0b5b      	lsrs	r3, r3, #13
 800f8f8:	4a09      	ldr	r2, [pc, #36]	@ (800f920 <vPortSetupTimerInterrupt+0x44>)
 800f8fa:	3b01      	subs	r3, #1
 800f8fc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = (portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT);
 800f8fe:	4b04      	ldr	r3, [pc, #16]	@ (800f910 <vPortSetupTimerInterrupt+0x34>)
 800f900:	2207      	movs	r2, #7
 800f902:	601a      	str	r2, [r3, #0]
}
 800f904:	bf00      	nop
 800f906:	46bd      	mov	sp, r7
 800f908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90c:	4770      	bx	lr
 800f90e:	bf00      	nop
 800f910:	e000e010 	.word	0xe000e010
 800f914:	e000e018 	.word	0xe000e018
 800f918:	20000024 	.word	0x20000024
 800f91c:	d1b71759 	.word	0xd1b71759
 800f920:	e000e014 	.word	0xe000e014

0800f924 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP(void) {
    __asm volatile("	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
 800f924:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f934 <vPortEnableVFP+0x10>
 800f928:	6801      	ldr	r1, [r0, #0]
 800f92a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f92e:	6001      	str	r1, [r0, #0]
 800f930:	4770      	bx	lr
                   "	ldr r1, [r0]				\n"
                   "								\n"
                   "	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
                   "	str r1, [r0]				\n"
                   "	bx r14						");
}
 800f932:	bf00      	nop
 800f934:	e000ed88 	.word	0xe000ed88

0800f938 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if (configASSERT_DEFINED == 1)

void vPortValidateInterruptPriority(void) {
 800f938:	b480      	push	{r7}
 800f93a:	b085      	sub	sp, #20
 800f93c:	af00      	add	r7, sp, #0
    uint32_t ulCurrentInterrupt;
    uint8_t ucCurrentPriority;

    /* Obtain the number of the currently executing interrupt. */
    __asm volatile("mrs %0, ipsr" : "=r"(ulCurrentInterrupt)::"memory");
 800f93e:	f3ef 8305 	mrs	r3, IPSR
 800f942:	60fb      	str	r3, [r7, #12]

    /* Is the interrupt number a user defined interrupt? */
    if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	2b0f      	cmp	r3, #15
 800f948:	d915      	bls.n	800f976 <vPortValidateInterruptPriority+0x3e>
        /* Look up the interrupt's priority. */
        ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
 800f94a:	4a18      	ldr	r2, [pc, #96]	@ (800f9ac <vPortValidateInterruptPriority+0x74>)
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	4413      	add	r3, r2
 800f950:	781b      	ldrb	r3, [r3, #0]
 800f952:	72fb      	strb	r3, [r7, #11]
        interrupt entry is as fast and simple as possible.

        The following links provide detailed information:
        http://www.freertos.org/RTOS-Cortex-M3-M4.html
        http://www.freertos.org/FAQHelp.html */
        configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
 800f954:	4b16      	ldr	r3, [pc, #88]	@ (800f9b0 <vPortValidateInterruptPriority+0x78>)
 800f956:	781b      	ldrb	r3, [r3, #0]
 800f958:	7afa      	ldrb	r2, [r7, #11]
 800f95a:	429a      	cmp	r2, r3
 800f95c:	d20b      	bcs.n	800f976 <vPortValidateInterruptPriority+0x3e>
    __asm volatile("	mov %0, %1												\n"
 800f95e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f962:	f383 8811 	msr	BASEPRI, r3
 800f966:	f3bf 8f6f 	isb	sy
 800f96a:	f3bf 8f4f 	dsb	sy
 800f96e:	607b      	str	r3, [r7, #4]
}
 800f970:	bf00      	nop
 800f972:	bf00      	nop
 800f974:	e7fd      	b.n	800f972 <vPortValidateInterruptPriority+0x3a>
    configuration then the correct setting can be achieved on all Cortex-M
    devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
    scheduler.  Note however that some vendor specific peripheral libraries
    assume a non-zero priority group setting, in which cases using a value
    of zero will result in unpredictable behaviour. */
    configASSERT((portAIRCR_REG & portPRIORITY_GROUP_MASK) <= ulMaxPRIGROUPValue);
 800f976:	4b0f      	ldr	r3, [pc, #60]	@ (800f9b4 <vPortValidateInterruptPriority+0x7c>)
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f97e:	4b0e      	ldr	r3, [pc, #56]	@ (800f9b8 <vPortValidateInterruptPriority+0x80>)
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	429a      	cmp	r2, r3
 800f984:	d90b      	bls.n	800f99e <vPortValidateInterruptPriority+0x66>
    __asm volatile("	mov %0, %1												\n"
 800f986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f98a:	f383 8811 	msr	BASEPRI, r3
 800f98e:	f3bf 8f6f 	isb	sy
 800f992:	f3bf 8f4f 	dsb	sy
 800f996:	603b      	str	r3, [r7, #0]
}
 800f998:	bf00      	nop
 800f99a:	bf00      	nop
 800f99c:	e7fd      	b.n	800f99a <vPortValidateInterruptPriority+0x62>
}
 800f99e:	bf00      	nop
 800f9a0:	3714      	adds	r7, #20
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a8:	4770      	bx	lr
 800f9aa:	bf00      	nop
 800f9ac:	e000e3f0 	.word	0xe000e3f0
 800f9b0:	20000fd4 	.word	0x20000fd4
 800f9b4:	e000ed0c 	.word	0xe000ed0c
 800f9b8:	20000fd8 	.word	0x20000fd8

0800f9bc <pvPortMalloc>:
#error This file must not be used if configSUPPORT_DYNAMIC_ALLOCATION is 0
#endif

/*-----------------------------------------------------------*/

void * pvPortMalloc(size_t xWantedSize) {
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b084      	sub	sp, #16
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
    void * pvReturn;

    vTaskSuspendAll();
 800f9c4:	f7fe fd42 	bl	800e44c <vTaskSuspendAll>
    {
        pvReturn = malloc(xWantedSize);
 800f9c8:	6878      	ldr	r0, [r7, #4]
 800f9ca:	f000 fd2b 	bl	8010424 <malloc>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	60fb      	str	r3, [r7, #12]
        traceMALLOC(pvReturn, xWantedSize);
    }
    (void)xTaskResumeAll();
 800f9d2:	f7fe fd49 	bl	800e468 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
#endif

    return pvReturn;
 800f9d6:	68fb      	ldr	r3, [r7, #12]
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	3710      	adds	r7, #16
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}

0800f9e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree(void * pv) {
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b082      	sub	sp, #8
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
    if (pv) {
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d006      	beq.n	800f9fc <vPortFree+0x1c>
        vTaskSuspendAll();
 800f9ee:	f7fe fd2d 	bl	800e44c <vTaskSuspendAll>
        {
            free(pv);
 800f9f2:	6878      	ldr	r0, [r7, #4]
 800f9f4:	f000 fd1e 	bl	8010434 <free>
            traceFREE(pv, 0);
        }
        (void)xTaskResumeAll();
 800f9f8:	f7fe fd36 	bl	800e468 <xTaskResumeAll>
    }
}
 800f9fc:	bf00      	nop
 800f9fe:	3708      	adds	r7, #8
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd80      	pop	{r7, pc}

0800fa04 <MX_USB_DEVICE_Init>:

/**
 * Init USB device Library, add supported class and start the library
 * @retval None
 */
void MX_USB_DEVICE_Init(void) {
 800fa04:	b580      	push	{r7, lr}
 800fa06:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

    /* USER CODE END USB_DEVICE_Init_PreTreatment */

    /* Init Device Library, add supported class and start the library. */
    if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 800fa08:	2200      	movs	r2, #0
 800fa0a:	4912      	ldr	r1, [pc, #72]	@ (800fa54 <MX_USB_DEVICE_Init+0x50>)
 800fa0c:	4812      	ldr	r0, [pc, #72]	@ (800fa58 <MX_USB_DEVICE_Init+0x54>)
 800fa0e:	f7fc f8bb 	bl	800bb88 <USBD_Init>
 800fa12:	4603      	mov	r3, r0
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d001      	beq.n	800fa1c <MX_USB_DEVICE_Init+0x18>
        Error_Handler();
 800fa18:	f7f3 f9a3 	bl	8002d62 <Error_Handler>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800fa1c:	490f      	ldr	r1, [pc, #60]	@ (800fa5c <MX_USB_DEVICE_Init+0x58>)
 800fa1e:	480e      	ldr	r0, [pc, #56]	@ (800fa58 <MX_USB_DEVICE_Init+0x54>)
 800fa20:	f7fc f8e2 	bl	800bbe8 <USBD_RegisterClass>
 800fa24:	4603      	mov	r3, r0
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d001      	beq.n	800fa2e <MX_USB_DEVICE_Init+0x2a>
        Error_Handler();
 800fa2a:	f7f3 f99a 	bl	8002d62 <Error_Handler>
    }
    if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800fa2e:	490c      	ldr	r1, [pc, #48]	@ (800fa60 <MX_USB_DEVICE_Init+0x5c>)
 800fa30:	4809      	ldr	r0, [pc, #36]	@ (800fa58 <MX_USB_DEVICE_Init+0x54>)
 800fa32:	f7fb ffd3 	bl	800b9dc <USBD_CDC_RegisterInterface>
 800fa36:	4603      	mov	r3, r0
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d001      	beq.n	800fa40 <MX_USB_DEVICE_Init+0x3c>
        Error_Handler();
 800fa3c:	f7f3 f991 	bl	8002d62 <Error_Handler>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800fa40:	4805      	ldr	r0, [pc, #20]	@ (800fa58 <MX_USB_DEVICE_Init+0x54>)
 800fa42:	f7fc f907 	bl	800bc54 <USBD_Start>
 800fa46:	4603      	mov	r3, r0
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d001      	beq.n	800fa50 <MX_USB_DEVICE_Init+0x4c>
        Error_Handler();
 800fa4c:	f7f3 f989 	bl	8002d62 <Error_Handler>
    }

    /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

    /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fa50:	bf00      	nop
 800fa52:	bd80      	pop	{r7, pc}
 800fa54:	2000010c 	.word	0x2000010c
 800fa58:	20000fdc 	.word	0x20000fdc
 800fa5c:	20000074 	.word	0x20000074
 800fa60:	200000f8 	.word	0x200000f8

0800fa64 <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 800fa64:	b580      	push	{r7, lr}
 800fa66:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fa68:	2200      	movs	r2, #0
 800fa6a:	4905      	ldr	r1, [pc, #20]	@ (800fa80 <CDC_Init_FS+0x1c>)
 800fa6c:	4805      	ldr	r0, [pc, #20]	@ (800fa84 <CDC_Init_FS+0x20>)
 800fa6e:	f7fb ffcf 	bl	800ba10 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fa72:	4905      	ldr	r1, [pc, #20]	@ (800fa88 <CDC_Init_FS+0x24>)
 800fa74:	4803      	ldr	r0, [pc, #12]	@ (800fa84 <CDC_Init_FS+0x20>)
 800fa76:	f7fb ffed 	bl	800ba54 <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 800fa7a:	2300      	movs	r3, #0
    /* USER CODE END 3 */
}
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	bd80      	pop	{r7, pc}
 800fa80:	200013b8 	.word	0x200013b8
 800fa84:	20000fdc 	.word	0x20000fdc
 800fa88:	200012b8 	.word	0x200012b8

0800fa8c <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 800fa8c:	b480      	push	{r7}
 800fa8e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 4 */
    return (USBD_OK);
 800fa90:	2300      	movs	r3, #0
    /* USER CODE END 4 */
}
 800fa92:	4618      	mov	r0, r3
 800fa94:	46bd      	mov	sp, r7
 800fa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9a:	4770      	bx	lr

0800fa9c <CDC_Control_FS>:
 * @param  cmd: Command code
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t * pbuf, uint16_t length) {
 800fa9c:	b480      	push	{r7}
 800fa9e:	b083      	sub	sp, #12
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	4603      	mov	r3, r0
 800faa4:	6039      	str	r1, [r7, #0]
 800faa6:	71fb      	strb	r3, [r7, #7]
 800faa8:	4613      	mov	r3, r2
 800faaa:	80bb      	strh	r3, [r7, #4]
    /* USER CODE BEGIN 5 */
    switch (cmd) {
 800faac:	79fb      	ldrb	r3, [r7, #7]
 800faae:	2b23      	cmp	r3, #35	@ 0x23
 800fab0:	d84a      	bhi.n	800fb48 <CDC_Control_FS+0xac>
 800fab2:	a201      	add	r2, pc, #4	@ (adr r2, 800fab8 <CDC_Control_FS+0x1c>)
 800fab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fab8:	0800fb49 	.word	0x0800fb49
 800fabc:	0800fb49 	.word	0x0800fb49
 800fac0:	0800fb49 	.word	0x0800fb49
 800fac4:	0800fb49 	.word	0x0800fb49
 800fac8:	0800fb49 	.word	0x0800fb49
 800facc:	0800fb49 	.word	0x0800fb49
 800fad0:	0800fb49 	.word	0x0800fb49
 800fad4:	0800fb49 	.word	0x0800fb49
 800fad8:	0800fb49 	.word	0x0800fb49
 800fadc:	0800fb49 	.word	0x0800fb49
 800fae0:	0800fb49 	.word	0x0800fb49
 800fae4:	0800fb49 	.word	0x0800fb49
 800fae8:	0800fb49 	.word	0x0800fb49
 800faec:	0800fb49 	.word	0x0800fb49
 800faf0:	0800fb49 	.word	0x0800fb49
 800faf4:	0800fb49 	.word	0x0800fb49
 800faf8:	0800fb49 	.word	0x0800fb49
 800fafc:	0800fb49 	.word	0x0800fb49
 800fb00:	0800fb49 	.word	0x0800fb49
 800fb04:	0800fb49 	.word	0x0800fb49
 800fb08:	0800fb49 	.word	0x0800fb49
 800fb0c:	0800fb49 	.word	0x0800fb49
 800fb10:	0800fb49 	.word	0x0800fb49
 800fb14:	0800fb49 	.word	0x0800fb49
 800fb18:	0800fb49 	.word	0x0800fb49
 800fb1c:	0800fb49 	.word	0x0800fb49
 800fb20:	0800fb49 	.word	0x0800fb49
 800fb24:	0800fb49 	.word	0x0800fb49
 800fb28:	0800fb49 	.word	0x0800fb49
 800fb2c:	0800fb49 	.word	0x0800fb49
 800fb30:	0800fb49 	.word	0x0800fb49
 800fb34:	0800fb49 	.word	0x0800fb49
 800fb38:	0800fb49 	.word	0x0800fb49
 800fb3c:	0800fb49 	.word	0x0800fb49
 800fb40:	0800fb49 	.word	0x0800fb49
 800fb44:	0800fb49 	.word	0x0800fb49
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 800fb48:	bf00      	nop
    }

    return (USBD_OK);
 800fb4a:	2300      	movs	r3, #0
    /* USER CODE END 5 */
}
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	370c      	adds	r7, #12
 800fb50:	46bd      	mov	sp, r7
 800fb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb56:	4770      	bx	lr

0800fb58 <CDC_Receive_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t * Buf, uint32_t * Len) {
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b082      	sub	sp, #8
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
 800fb60:	6039      	str	r1, [r7, #0]
    /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fb62:	6879      	ldr	r1, [r7, #4]
 800fb64:	4805      	ldr	r0, [pc, #20]	@ (800fb7c <CDC_Receive_FS+0x24>)
 800fb66:	f7fb ff75 	bl	800ba54 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fb6a:	4804      	ldr	r0, [pc, #16]	@ (800fb7c <CDC_Receive_FS+0x24>)
 800fb6c:	f7fb ffd6 	bl	800bb1c <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 800fb70:	2300      	movs	r3, #0
    /* USER CODE END 6 */
}
 800fb72:	4618      	mov	r0, r3
 800fb74:	3708      	adds	r7, #8
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}
 800fb7a:	bf00      	nop
 800fb7c:	20000fdc 	.word	0x20000fdc

0800fb80 <CDC_Transmit_FS>:
 *
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t * Buf, uint16_t Len) {
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b084      	sub	sp, #16
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
 800fb88:	460b      	mov	r3, r1
 800fb8a:	807b      	strh	r3, [r7, #2]
    uint8_t result = USBD_OK;
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	73fb      	strb	r3, [r7, #15]
    /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800fb90:	4b0d      	ldr	r3, [pc, #52]	@ (800fbc8 <CDC_Transmit_FS+0x48>)
 800fb92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fb96:	60bb      	str	r3, [r7, #8]
    if (hcdc->TxState != 0) {
 800fb98:	68bb      	ldr	r3, [r7, #8]
 800fb9a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d001      	beq.n	800fba6 <CDC_Transmit_FS+0x26>
        return USBD_BUSY;
 800fba2:	2301      	movs	r3, #1
 800fba4:	e00b      	b.n	800fbbe <CDC_Transmit_FS+0x3e>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800fba6:	887b      	ldrh	r3, [r7, #2]
 800fba8:	461a      	mov	r2, r3
 800fbaa:	6879      	ldr	r1, [r7, #4]
 800fbac:	4806      	ldr	r0, [pc, #24]	@ (800fbc8 <CDC_Transmit_FS+0x48>)
 800fbae:	f7fb ff2f 	bl	800ba10 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800fbb2:	4805      	ldr	r0, [pc, #20]	@ (800fbc8 <CDC_Transmit_FS+0x48>)
 800fbb4:	f7fb ff6c 	bl	800ba90 <USBD_CDC_TransmitPacket>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	73fb      	strb	r3, [r7, #15]
    /* USER CODE END 7 */
    return result;
 800fbbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	3710      	adds	r7, #16
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	bd80      	pop	{r7, pc}
 800fbc6:	bf00      	nop
 800fbc8:	20000fdc 	.word	0x20000fdc

0800fbcc <CDC_TransmitCplt_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t * Buf, uint32_t * Len, uint8_t epnum) {
 800fbcc:	b480      	push	{r7}
 800fbce:	b087      	sub	sp, #28
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	60f8      	str	r0, [r7, #12]
 800fbd4:	60b9      	str	r1, [r7, #8]
 800fbd6:	4613      	mov	r3, r2
 800fbd8:	71fb      	strb	r3, [r7, #7]
    uint8_t result = USBD_OK;
 800fbda:	2300      	movs	r3, #0
 800fbdc:	75fb      	strb	r3, [r7, #23]
    /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
    /* USER CODE END 13 */
    return result;
 800fbde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	371c      	adds	r7, #28
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbec:	4770      	bx	lr
	...

0800fbf0 <USBD_FS_DeviceDescriptor>:
 * @brief  Return the device descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800fbf0:	b480      	push	{r7}
 800fbf2:	b083      	sub	sp, #12
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	6039      	str	r1, [r7, #0]
 800fbfa:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    *length = sizeof(USBD_FS_DeviceDesc);
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	2212      	movs	r2, #18
 800fc00:	801a      	strh	r2, [r3, #0]
    return USBD_FS_DeviceDesc;
 800fc02:	4b03      	ldr	r3, [pc, #12]	@ (800fc10 <USBD_FS_DeviceDescriptor+0x20>)
}
 800fc04:	4618      	mov	r0, r3
 800fc06:	370c      	adds	r7, #12
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0e:	4770      	bx	lr
 800fc10:	20000128 	.word	0x20000128

0800fc14 <USBD_FS_LangIDStrDescriptor>:
 * @brief  Return the LangID string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800fc14:	b480      	push	{r7}
 800fc16:	b083      	sub	sp, #12
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	6039      	str	r1, [r7, #0]
 800fc1e:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    *length = sizeof(USBD_LangIDDesc);
 800fc20:	683b      	ldr	r3, [r7, #0]
 800fc22:	2204      	movs	r2, #4
 800fc24:	801a      	strh	r2, [r3, #0]
    return USBD_LangIDDesc;
 800fc26:	4b03      	ldr	r3, [pc, #12]	@ (800fc34 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fc28:	4618      	mov	r0, r3
 800fc2a:	370c      	adds	r7, #12
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc32:	4770      	bx	lr
 800fc34:	2000013c 	.word	0x2000013c

0800fc38 <USBD_FS_ProductStrDescriptor>:
 * @brief  Return the product string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b082      	sub	sp, #8
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	4603      	mov	r3, r0
 800fc40:	6039      	str	r1, [r7, #0]
 800fc42:	71fb      	strb	r3, [r7, #7]
    if (speed == 0) {
 800fc44:	79fb      	ldrb	r3, [r7, #7]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d105      	bne.n	800fc56 <USBD_FS_ProductStrDescriptor+0x1e>
        USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fc4a:	683a      	ldr	r2, [r7, #0]
 800fc4c:	4907      	ldr	r1, [pc, #28]	@ (800fc6c <USBD_FS_ProductStrDescriptor+0x34>)
 800fc4e:	4808      	ldr	r0, [pc, #32]	@ (800fc70 <USBD_FS_ProductStrDescriptor+0x38>)
 800fc50:	f7fd f9aa 	bl	800cfa8 <USBD_GetString>
 800fc54:	e004      	b.n	800fc60 <USBD_FS_ProductStrDescriptor+0x28>
    } else {
        USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fc56:	683a      	ldr	r2, [r7, #0]
 800fc58:	4904      	ldr	r1, [pc, #16]	@ (800fc6c <USBD_FS_ProductStrDescriptor+0x34>)
 800fc5a:	4805      	ldr	r0, [pc, #20]	@ (800fc70 <USBD_FS_ProductStrDescriptor+0x38>)
 800fc5c:	f7fd f9a4 	bl	800cfa8 <USBD_GetString>
    }
    return USBD_StrDesc;
 800fc60:	4b02      	ldr	r3, [pc, #8]	@ (800fc6c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fc62:	4618      	mov	r0, r3
 800fc64:	3708      	adds	r7, #8
 800fc66:	46bd      	mov	sp, r7
 800fc68:	bd80      	pop	{r7, pc}
 800fc6a:	bf00      	nop
 800fc6c:	200014b8 	.word	0x200014b8
 800fc70:	08013a78 	.word	0x08013a78

0800fc74 <USBD_FS_ManufacturerStrDescriptor>:
 * @brief  Return the manufacturer string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b082      	sub	sp, #8
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	6039      	str	r1, [r7, #0]
 800fc7e:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fc80:	683a      	ldr	r2, [r7, #0]
 800fc82:	4904      	ldr	r1, [pc, #16]	@ (800fc94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fc84:	4804      	ldr	r0, [pc, #16]	@ (800fc98 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fc86:	f7fd f98f 	bl	800cfa8 <USBD_GetString>
    return USBD_StrDesc;
 800fc8a:	4b02      	ldr	r3, [pc, #8]	@ (800fc94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	3708      	adds	r7, #8
 800fc90:	46bd      	mov	sp, r7
 800fc92:	bd80      	pop	{r7, pc}
 800fc94:	200014b8 	.word	0x200014b8
 800fc98:	08013a90 	.word	0x08013a90

0800fc9c <USBD_FS_SerialStrDescriptor>:
 * @brief  Return the serial number string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b082      	sub	sp, #8
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	4603      	mov	r3, r0
 800fca4:	6039      	str	r1, [r7, #0]
 800fca6:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    *length = USB_SIZ_STRING_SERIAL;
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	221a      	movs	r2, #26
 800fcac:	801a      	strh	r2, [r3, #0]

    /* Update the serial number string descriptor with the data from the unique
     * ID */
    Get_SerialNum();
 800fcae:	f000 f843 	bl	800fd38 <Get_SerialNum>
    /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

    /* USER CODE END USBD_FS_SerialStrDescriptor */
    return (uint8_t *)USBD_StringSerial;
 800fcb2:	4b02      	ldr	r3, [pc, #8]	@ (800fcbc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	3708      	adds	r7, #8
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd80      	pop	{r7, pc}
 800fcbc:	20000140 	.word	0x20000140

0800fcc0 <USBD_FS_ConfigStrDescriptor>:
 * @brief  Return the configuration string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b082      	sub	sp, #8
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	6039      	str	r1, [r7, #0]
 800fcca:	71fb      	strb	r3, [r7, #7]
    if (speed == USBD_SPEED_HIGH) {
 800fccc:	79fb      	ldrb	r3, [r7, #7]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d105      	bne.n	800fcde <USBD_FS_ConfigStrDescriptor+0x1e>
        USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fcd2:	683a      	ldr	r2, [r7, #0]
 800fcd4:	4907      	ldr	r1, [pc, #28]	@ (800fcf4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fcd6:	4808      	ldr	r0, [pc, #32]	@ (800fcf8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fcd8:	f7fd f966 	bl	800cfa8 <USBD_GetString>
 800fcdc:	e004      	b.n	800fce8 <USBD_FS_ConfigStrDescriptor+0x28>
    } else {
        USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fcde:	683a      	ldr	r2, [r7, #0]
 800fce0:	4904      	ldr	r1, [pc, #16]	@ (800fcf4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fce2:	4805      	ldr	r0, [pc, #20]	@ (800fcf8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fce4:	f7fd f960 	bl	800cfa8 <USBD_GetString>
    }
    return USBD_StrDesc;
 800fce8:	4b02      	ldr	r3, [pc, #8]	@ (800fcf4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fcea:	4618      	mov	r0, r3
 800fcec:	3708      	adds	r7, #8
 800fcee:	46bd      	mov	sp, r7
 800fcf0:	bd80      	pop	{r7, pc}
 800fcf2:	bf00      	nop
 800fcf4:	200014b8 	.word	0x200014b8
 800fcf8:	08013aa4 	.word	0x08013aa4

0800fcfc <USBD_FS_InterfaceStrDescriptor>:
 * @brief  Return the interface string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b082      	sub	sp, #8
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	4603      	mov	r3, r0
 800fd04:	6039      	str	r1, [r7, #0]
 800fd06:	71fb      	strb	r3, [r7, #7]
    if (speed == 0) {
 800fd08:	79fb      	ldrb	r3, [r7, #7]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d105      	bne.n	800fd1a <USBD_FS_InterfaceStrDescriptor+0x1e>
        USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fd0e:	683a      	ldr	r2, [r7, #0]
 800fd10:	4907      	ldr	r1, [pc, #28]	@ (800fd30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fd12:	4808      	ldr	r0, [pc, #32]	@ (800fd34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fd14:	f7fd f948 	bl	800cfa8 <USBD_GetString>
 800fd18:	e004      	b.n	800fd24 <USBD_FS_InterfaceStrDescriptor+0x28>
    } else {
        USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fd1a:	683a      	ldr	r2, [r7, #0]
 800fd1c:	4904      	ldr	r1, [pc, #16]	@ (800fd30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fd1e:	4805      	ldr	r0, [pc, #20]	@ (800fd34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fd20:	f7fd f942 	bl	800cfa8 <USBD_GetString>
    }
    return USBD_StrDesc;
 800fd24:	4b02      	ldr	r3, [pc, #8]	@ (800fd30 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fd26:	4618      	mov	r0, r3
 800fd28:	3708      	adds	r7, #8
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}
 800fd2e:	bf00      	nop
 800fd30:	200014b8 	.word	0x200014b8
 800fd34:	08013ab0 	.word	0x08013ab0

0800fd38 <Get_SerialNum>:
/**
 * @brief  Create the serial number string descriptor
 * @param  None
 * @retval None
 */
static void Get_SerialNum(void) {
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b084      	sub	sp, #16
 800fd3c:	af00      	add	r7, sp, #0
    uint32_t deviceserial0;
    uint32_t deviceserial1;
    uint32_t deviceserial2;

    deviceserial0 = *(uint32_t *)DEVICE_ID1;
 800fd3e:	4b0f      	ldr	r3, [pc, #60]	@ (800fd7c <Get_SerialNum+0x44>)
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	60fb      	str	r3, [r7, #12]
    deviceserial1 = *(uint32_t *)DEVICE_ID2;
 800fd44:	4b0e      	ldr	r3, [pc, #56]	@ (800fd80 <Get_SerialNum+0x48>)
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	60bb      	str	r3, [r7, #8]
    deviceserial2 = *(uint32_t *)DEVICE_ID3;
 800fd4a:	4b0e      	ldr	r3, [pc, #56]	@ (800fd84 <Get_SerialNum+0x4c>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	607b      	str	r3, [r7, #4]

    deviceserial0 += deviceserial2;
 800fd50:	68fa      	ldr	r2, [r7, #12]
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	4413      	add	r3, r2
 800fd56:	60fb      	str	r3, [r7, #12]

    if (deviceserial0 != 0) {
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d009      	beq.n	800fd72 <Get_SerialNum+0x3a>
        IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fd5e:	2208      	movs	r2, #8
 800fd60:	4909      	ldr	r1, [pc, #36]	@ (800fd88 <Get_SerialNum+0x50>)
 800fd62:	68f8      	ldr	r0, [r7, #12]
 800fd64:	f000 f814 	bl	800fd90 <IntToUnicode>
        IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fd68:	2204      	movs	r2, #4
 800fd6a:	4908      	ldr	r1, [pc, #32]	@ (800fd8c <Get_SerialNum+0x54>)
 800fd6c:	68b8      	ldr	r0, [r7, #8]
 800fd6e:	f000 f80f 	bl	800fd90 <IntToUnicode>
    }
}
 800fd72:	bf00      	nop
 800fd74:	3710      	adds	r7, #16
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}
 800fd7a:	bf00      	nop
 800fd7c:	1fff7a10 	.word	0x1fff7a10
 800fd80:	1fff7a14 	.word	0x1fff7a14
 800fd84:	1fff7a18 	.word	0x1fff7a18
 800fd88:	20000142 	.word	0x20000142
 800fd8c:	20000152 	.word	0x20000152

0800fd90 <IntToUnicode>:
 * @param  value: value to convert
 * @param  pbuf: pointer to the buffer
 * @param  len: buffer length
 * @retval None
 */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len) {
 800fd90:	b480      	push	{r7}
 800fd92:	b087      	sub	sp, #28
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	60f8      	str	r0, [r7, #12]
 800fd98:	60b9      	str	r1, [r7, #8]
 800fd9a:	4613      	mov	r3, r2
 800fd9c:	71fb      	strb	r3, [r7, #7]
    uint8_t idx = 0;
 800fd9e:	2300      	movs	r3, #0
 800fda0:	75fb      	strb	r3, [r7, #23]

    for (idx = 0; idx < len; idx++) {
 800fda2:	2300      	movs	r3, #0
 800fda4:	75fb      	strb	r3, [r7, #23]
 800fda6:	e027      	b.n	800fdf8 <IntToUnicode+0x68>
        if (((value >> 28)) < 0xA) {
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	0f1b      	lsrs	r3, r3, #28
 800fdac:	2b09      	cmp	r3, #9
 800fdae:	d80b      	bhi.n	800fdc8 <IntToUnicode+0x38>
            pbuf[2 * idx] = (value >> 28) + '0';
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	0f1b      	lsrs	r3, r3, #28
 800fdb4:	b2da      	uxtb	r2, r3
 800fdb6:	7dfb      	ldrb	r3, [r7, #23]
 800fdb8:	005b      	lsls	r3, r3, #1
 800fdba:	4619      	mov	r1, r3
 800fdbc:	68bb      	ldr	r3, [r7, #8]
 800fdbe:	440b      	add	r3, r1
 800fdc0:	3230      	adds	r2, #48	@ 0x30
 800fdc2:	b2d2      	uxtb	r2, r2
 800fdc4:	701a      	strb	r2, [r3, #0]
 800fdc6:	e00a      	b.n	800fdde <IntToUnicode+0x4e>
        } else {
            pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	0f1b      	lsrs	r3, r3, #28
 800fdcc:	b2da      	uxtb	r2, r3
 800fdce:	7dfb      	ldrb	r3, [r7, #23]
 800fdd0:	005b      	lsls	r3, r3, #1
 800fdd2:	4619      	mov	r1, r3
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	440b      	add	r3, r1
 800fdd8:	3237      	adds	r2, #55	@ 0x37
 800fdda:	b2d2      	uxtb	r2, r2
 800fddc:	701a      	strb	r2, [r3, #0]
        }

        value = value << 4;
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	011b      	lsls	r3, r3, #4
 800fde2:	60fb      	str	r3, [r7, #12]

        pbuf[2 * idx + 1] = 0;
 800fde4:	7dfb      	ldrb	r3, [r7, #23]
 800fde6:	005b      	lsls	r3, r3, #1
 800fde8:	3301      	adds	r3, #1
 800fdea:	68ba      	ldr	r2, [r7, #8]
 800fdec:	4413      	add	r3, r2
 800fdee:	2200      	movs	r2, #0
 800fdf0:	701a      	strb	r2, [r3, #0]
    for (idx = 0; idx < len; idx++) {
 800fdf2:	7dfb      	ldrb	r3, [r7, #23]
 800fdf4:	3301      	adds	r3, #1
 800fdf6:	75fb      	strb	r3, [r7, #23]
 800fdf8:	7dfa      	ldrb	r2, [r7, #23]
 800fdfa:	79fb      	ldrb	r3, [r7, #7]
 800fdfc:	429a      	cmp	r2, r3
 800fdfe:	d3d3      	bcc.n	800fda8 <IntToUnicode+0x18>
    }
}
 800fe00:	bf00      	nop
 800fe02:	bf00      	nop
 800fe04:	371c      	adds	r7, #28
 800fe06:	46bd      	mov	sp, r7
 800fe08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0c:	4770      	bx	lr
	...

0800fe10 <HAL_PCD_MspInit>:
/*******************************************************************************
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef * pcdHandle) {
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b08a      	sub	sp, #40	@ 0x28
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fe18:	f107 0314 	add.w	r3, r7, #20
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	601a      	str	r2, [r3, #0]
 800fe20:	605a      	str	r2, [r3, #4]
 800fe22:	609a      	str	r2, [r3, #8]
 800fe24:	60da      	str	r2, [r3, #12]
 800fe26:	611a      	str	r2, [r3, #16]
    if (pcdHandle->Instance == USB_OTG_FS) {
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fe30:	d13a      	bne.n	800fea8 <HAL_PCD_MspInit+0x98>
        /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

        /* USER CODE END USB_OTG_FS_MspInit 0 */

        __HAL_RCC_GPIOA_CLK_ENABLE();
 800fe32:	2300      	movs	r3, #0
 800fe34:	613b      	str	r3, [r7, #16]
 800fe36:	4b1e      	ldr	r3, [pc, #120]	@ (800feb0 <HAL_PCD_MspInit+0xa0>)
 800fe38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe3a:	4a1d      	ldr	r2, [pc, #116]	@ (800feb0 <HAL_PCD_MspInit+0xa0>)
 800fe3c:	f043 0301 	orr.w	r3, r3, #1
 800fe40:	6313      	str	r3, [r2, #48]	@ 0x30
 800fe42:	4b1b      	ldr	r3, [pc, #108]	@ (800feb0 <HAL_PCD_MspInit+0xa0>)
 800fe44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe46:	f003 0301 	and.w	r3, r3, #1
 800fe4a:	613b      	str	r3, [r7, #16]
 800fe4c:	693b      	ldr	r3, [r7, #16]
        /**USB_OTG_FS GPIO Configuration
        PA11     ------> USB_OTG_FS_DM
        PA12     ------> USB_OTG_FS_DP
        */
        GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 800fe4e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800fe52:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fe54:	2302      	movs	r3, #2
 800fe56:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe58:	2300      	movs	r3, #0
 800fe5a:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fe5c:	2303      	movs	r3, #3
 800fe5e:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fe60:	230a      	movs	r3, #10
 800fe62:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fe64:	f107 0314 	add.w	r3, r7, #20
 800fe68:	4619      	mov	r1, r3
 800fe6a:	4812      	ldr	r0, [pc, #72]	@ (800feb4 <HAL_PCD_MspInit+0xa4>)
 800fe6c:	f7f5 fb7e 	bl	800556c <HAL_GPIO_Init>

        /* Peripheral clock enable */
        __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fe70:	4b0f      	ldr	r3, [pc, #60]	@ (800feb0 <HAL_PCD_MspInit+0xa0>)
 800fe72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fe74:	4a0e      	ldr	r2, [pc, #56]	@ (800feb0 <HAL_PCD_MspInit+0xa0>)
 800fe76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe7a:	6353      	str	r3, [r2, #52]	@ 0x34
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	60fb      	str	r3, [r7, #12]
 800fe80:	4b0b      	ldr	r3, [pc, #44]	@ (800feb0 <HAL_PCD_MspInit+0xa0>)
 800fe82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe84:	4a0a      	ldr	r2, [pc, #40]	@ (800feb0 <HAL_PCD_MspInit+0xa0>)
 800fe86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800fe8a:	6453      	str	r3, [r2, #68]	@ 0x44
 800fe8c:	4b08      	ldr	r3, [pc, #32]	@ (800feb0 <HAL_PCD_MspInit+0xa0>)
 800fe8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fe94:	60fb      	str	r3, [r7, #12]
 800fe96:	68fb      	ldr	r3, [r7, #12]

        /* Peripheral interrupt init */
        HAL_NVIC_SetPriority(OTG_FS_IRQn, 2, 0);
 800fe98:	2200      	movs	r2, #0
 800fe9a:	2102      	movs	r1, #2
 800fe9c:	2043      	movs	r0, #67	@ 0x43
 800fe9e:	f7f5 f944 	bl	800512a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fea2:	2043      	movs	r0, #67	@ 0x43
 800fea4:	f7f5 f95d 	bl	8005162 <HAL_NVIC_EnableIRQ>
        /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

        /* USER CODE END USB_OTG_FS_MspInit 1 */
    }
}
 800fea8:	bf00      	nop
 800feaa:	3728      	adds	r7, #40	@ 0x28
 800feac:	46bd      	mov	sp, r7
 800feae:	bd80      	pop	{r7, pc}
 800feb0:	40023800 	.word	0x40023800
 800feb4:	40020000 	.word	0x40020000

0800feb8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b082      	sub	sp, #8
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
    USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800fecc:	4619      	mov	r1, r3
 800fece:	4610      	mov	r0, r2
 800fed0:	f7fb ff0d 	bl	800bcee <USBD_LL_SetupStage>
}
 800fed4:	bf00      	nop
 800fed6:	3708      	adds	r7, #8
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd80      	pop	{r7, pc}

0800fedc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b082      	sub	sp, #8
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
 800fee4:	460b      	mov	r3, r1
 800fee6:	70fb      	strb	r3, [r7, #3]
    USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800feee:	78fa      	ldrb	r2, [r7, #3]
 800fef0:	6879      	ldr	r1, [r7, #4]
 800fef2:	4613      	mov	r3, r2
 800fef4:	00db      	lsls	r3, r3, #3
 800fef6:	4413      	add	r3, r2
 800fef8:	009b      	lsls	r3, r3, #2
 800fefa:	440b      	add	r3, r1
 800fefc:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800ff00:	681a      	ldr	r2, [r3, #0]
 800ff02:	78fb      	ldrb	r3, [r7, #3]
 800ff04:	4619      	mov	r1, r3
 800ff06:	f7fb ff47 	bl	800bd98 <USBD_LL_DataOutStage>
}
 800ff0a:	bf00      	nop
 800ff0c:	3708      	adds	r7, #8
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	bd80      	pop	{r7, pc}

0800ff12 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff12:	b580      	push	{r7, lr}
 800ff14:	b082      	sub	sp, #8
 800ff16:	af00      	add	r7, sp, #0
 800ff18:	6078      	str	r0, [r7, #4]
 800ff1a:	460b      	mov	r3, r1
 800ff1c:	70fb      	strb	r3, [r7, #3]
    USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800ff24:	78fa      	ldrb	r2, [r7, #3]
 800ff26:	6879      	ldr	r1, [r7, #4]
 800ff28:	4613      	mov	r3, r2
 800ff2a:	00db      	lsls	r3, r3, #3
 800ff2c:	4413      	add	r3, r2
 800ff2e:	009b      	lsls	r3, r3, #2
 800ff30:	440b      	add	r3, r1
 800ff32:	334c      	adds	r3, #76	@ 0x4c
 800ff34:	681a      	ldr	r2, [r3, #0]
 800ff36:	78fb      	ldrb	r3, [r7, #3]
 800ff38:	4619      	mov	r1, r3
 800ff3a:	f7fb ffe0 	bl	800befe <USBD_LL_DataInStage>
}
 800ff3e:	bf00      	nop
 800ff40:	3708      	adds	r7, #8
 800ff42:	46bd      	mov	sp, r7
 800ff44:	bd80      	pop	{r7, pc}

0800ff46 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff46:	b580      	push	{r7, lr}
 800ff48:	b082      	sub	sp, #8
 800ff4a:	af00      	add	r7, sp, #0
 800ff4c:	6078      	str	r0, [r7, #4]
    USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800ff54:	4618      	mov	r0, r3
 800ff56:	f7fc f914 	bl	800c182 <USBD_LL_SOF>
}
 800ff5a:	bf00      	nop
 800ff5c:	3708      	adds	r7, #8
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	bd80      	pop	{r7, pc}

0800ff62 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff62:	b580      	push	{r7, lr}
 800ff64:	b084      	sub	sp, #16
 800ff66:	af00      	add	r7, sp, #0
 800ff68:	6078      	str	r0, [r7, #4]
    USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ff6a:	2301      	movs	r3, #1
 800ff6c:	73fb      	strb	r3, [r7, #15]

    if (hpcd->Init.speed != PCD_SPEED_FULL) {
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	68db      	ldr	r3, [r3, #12]
 800ff72:	2b02      	cmp	r3, #2
 800ff74:	d001      	beq.n	800ff7a <HAL_PCD_ResetCallback+0x18>
        Error_Handler();
 800ff76:	f7f2 fef4 	bl	8002d62 <Error_Handler>
    }
    /* Set Speed. */
    USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800ff80:	7bfa      	ldrb	r2, [r7, #15]
 800ff82:	4611      	mov	r1, r2
 800ff84:	4618      	mov	r0, r3
 800ff86:	f7fc f8be 	bl	800c106 <USBD_LL_SetSpeed>

    /* Reset Device. */
    USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800ff90:	4618      	mov	r0, r3
 800ff92:	f7fc f866 	bl	800c062 <USBD_LL_Reset>
}
 800ff96:	bf00      	nop
 800ff98:	3710      	adds	r7, #16
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}
	...

0800ffa0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b082      	sub	sp, #8
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
    /* Inform USB library that core enters in suspend Mode. */
    USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7fc f8b9 	bl	800c126 <USBD_LL_Suspend>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	687a      	ldr	r2, [r7, #4]
 800ffc0:	6812      	ldr	r2, [r2, #0]
 800ffc2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ffc6:	f043 0301 	orr.w	r3, r3, #1
 800ffca:	6013      	str	r3, [r2, #0]
    /* Enter in STOP mode. */
    /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	6a1b      	ldr	r3, [r3, #32]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d005      	beq.n	800ffe0 <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ffd4:	4b04      	ldr	r3, [pc, #16]	@ (800ffe8 <HAL_PCD_SuspendCallback+0x48>)
 800ffd6:	691b      	ldr	r3, [r3, #16]
 800ffd8:	4a03      	ldr	r2, [pc, #12]	@ (800ffe8 <HAL_PCD_SuspendCallback+0x48>)
 800ffda:	f043 0306 	orr.w	r3, r3, #6
 800ffde:	6113      	str	r3, [r2, #16]
    }
    /* USER CODE END 2 */
}
 800ffe0:	bf00      	nop
 800ffe2:	3708      	adds	r7, #8
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	bd80      	pop	{r7, pc}
 800ffe8:	e000ed00 	.word	0xe000ed00

0800ffec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b082      	sub	sp, #8
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN 3 */

    /* USER CODE END 3 */
    USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800fffa:	4618      	mov	r0, r3
 800fffc:	f7fc f8a9 	bl	800c152 <USBD_LL_Resume>
}
 8010000:	bf00      	nop
 8010002:	3708      	adds	r7, #8
 8010004:	46bd      	mov	sp, r7
 8010006:	bd80      	pop	{r7, pc}

08010008 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b082      	sub	sp, #8
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
 8010010:	460b      	mov	r3, r1
 8010012:	70fb      	strb	r3, [r7, #3]
    USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801001a:	78fa      	ldrb	r2, [r7, #3]
 801001c:	4611      	mov	r1, r2
 801001e:	4618      	mov	r0, r3
 8010020:	f7fc f901 	bl	800c226 <USBD_LL_IsoOUTIncomplete>
}
 8010024:	bf00      	nop
 8010026:	3708      	adds	r7, #8
 8010028:	46bd      	mov	sp, r7
 801002a:	bd80      	pop	{r7, pc}

0801002c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b082      	sub	sp, #8
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
 8010034:	460b      	mov	r3, r1
 8010036:	70fb      	strb	r3, [r7, #3]
    USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801003e:	78fa      	ldrb	r2, [r7, #3]
 8010040:	4611      	mov	r1, r2
 8010042:	4618      	mov	r0, r3
 8010044:	f7fc f8bd 	bl	800c1c2 <USBD_LL_IsoINIncomplete>
}
 8010048:	bf00      	nop
 801004a:	3708      	adds	r7, #8
 801004c:	46bd      	mov	sp, r7
 801004e:	bd80      	pop	{r7, pc}

08010050 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b082      	sub	sp, #8
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
    USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801005e:	4618      	mov	r0, r3
 8010060:	f7fc f913 	bl	800c28a <USBD_LL_DevConnected>
}
 8010064:	bf00      	nop
 8010066:	3708      	adds	r7, #8
 8010068:	46bd      	mov	sp, r7
 801006a:	bd80      	pop	{r7, pc}

0801006c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801006c:	b580      	push	{r7, lr}
 801006e:	b082      	sub	sp, #8
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
    USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801007a:	4618      	mov	r0, r3
 801007c:	f7fc f910 	bl	800c2a0 <USBD_LL_DevDisconnected>
}
 8010080:	bf00      	nop
 8010082:	3708      	adds	r7, #8
 8010084:	46bd      	mov	sp, r7
 8010086:	bd80      	pop	{r7, pc}

08010088 <USBD_LL_Init>:
/**
 * @brief  Initializes the low level portion of the device driver.
 * @param  pdev: Device handle
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef * pdev) {
 8010088:	b580      	push	{r7, lr}
 801008a:	b082      	sub	sp, #8
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
    /* Init USB Ip. */
    if (pdev->id == DEVICE_FS) {
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	781b      	ldrb	r3, [r3, #0]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d13c      	bne.n	8010112 <USBD_LL_Init+0x8a>
        /* Link the driver to the stack. */
        hpcd_USB_OTG_FS.pData = pdev;
 8010098:	4a20      	ldr	r2, [pc, #128]	@ (801011c <USBD_LL_Init+0x94>)
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
        pdev->pData = &hpcd_USB_OTG_FS;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	4a1e      	ldr	r2, [pc, #120]	@ (801011c <USBD_LL_Init+0x94>)
 80100a4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

        hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80100a8:	4b1c      	ldr	r3, [pc, #112]	@ (801011c <USBD_LL_Init+0x94>)
 80100aa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80100ae:	601a      	str	r2, [r3, #0]
        hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80100b0:	4b1a      	ldr	r3, [pc, #104]	@ (801011c <USBD_LL_Init+0x94>)
 80100b2:	2204      	movs	r2, #4
 80100b4:	605a      	str	r2, [r3, #4]
        hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80100b6:	4b19      	ldr	r3, [pc, #100]	@ (801011c <USBD_LL_Init+0x94>)
 80100b8:	2202      	movs	r2, #2
 80100ba:	60da      	str	r2, [r3, #12]
        hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80100bc:	4b17      	ldr	r3, [pc, #92]	@ (801011c <USBD_LL_Init+0x94>)
 80100be:	2200      	movs	r2, #0
 80100c0:	611a      	str	r2, [r3, #16]
        hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80100c2:	4b16      	ldr	r3, [pc, #88]	@ (801011c <USBD_LL_Init+0x94>)
 80100c4:	2202      	movs	r2, #2
 80100c6:	619a      	str	r2, [r3, #24]
        hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80100c8:	4b14      	ldr	r3, [pc, #80]	@ (801011c <USBD_LL_Init+0x94>)
 80100ca:	2200      	movs	r2, #0
 80100cc:	61da      	str	r2, [r3, #28]
        hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80100ce:	4b13      	ldr	r3, [pc, #76]	@ (801011c <USBD_LL_Init+0x94>)
 80100d0:	2200      	movs	r2, #0
 80100d2:	621a      	str	r2, [r3, #32]
        hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80100d4:	4b11      	ldr	r3, [pc, #68]	@ (801011c <USBD_LL_Init+0x94>)
 80100d6:	2200      	movs	r2, #0
 80100d8:	625a      	str	r2, [r3, #36]	@ 0x24
        hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80100da:	4b10      	ldr	r3, [pc, #64]	@ (801011c <USBD_LL_Init+0x94>)
 80100dc:	2200      	movs	r2, #0
 80100de:	62da      	str	r2, [r3, #44]	@ 0x2c
        hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80100e0:	4b0e      	ldr	r3, [pc, #56]	@ (801011c <USBD_LL_Init+0x94>)
 80100e2:	2200      	movs	r2, #0
 80100e4:	631a      	str	r2, [r3, #48]	@ 0x30
        if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 80100e6:	480d      	ldr	r0, [pc, #52]	@ (801011c <USBD_LL_Init+0x94>)
 80100e8:	f7f6 fbb5 	bl	8006856 <HAL_PCD_Init>
 80100ec:	4603      	mov	r3, r0
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d001      	beq.n	80100f6 <USBD_LL_Init+0x6e>
            Error_Handler();
 80100f2:	f7f2 fe36 	bl	8002d62 <Error_Handler>
        HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
        HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
        HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
        HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80100f6:	2180      	movs	r1, #128	@ 0x80
 80100f8:	4808      	ldr	r0, [pc, #32]	@ (801011c <USBD_LL_Init+0x94>)
 80100fa:	f7f7 fe0c 	bl	8007d16 <HAL_PCDEx_SetRxFiFo>
        HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80100fe:	2240      	movs	r2, #64	@ 0x40
 8010100:	2100      	movs	r1, #0
 8010102:	4806      	ldr	r0, [pc, #24]	@ (801011c <USBD_LL_Init+0x94>)
 8010104:	f7f7 fdc0 	bl	8007c88 <HAL_PCDEx_SetTxFiFo>
        HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010108:	2280      	movs	r2, #128	@ 0x80
 801010a:	2101      	movs	r1, #1
 801010c:	4803      	ldr	r0, [pc, #12]	@ (801011c <USBD_LL_Init+0x94>)
 801010e:	f7f7 fdbb 	bl	8007c88 <HAL_PCDEx_SetTxFiFo>
    }
    return USBD_OK;
 8010112:	2300      	movs	r3, #0
}
 8010114:	4618      	mov	r0, r3
 8010116:	3708      	adds	r7, #8
 8010118:	46bd      	mov	sp, r7
 801011a:	bd80      	pop	{r7, pc}
 801011c:	200016b8 	.word	0x200016b8

08010120 <USBD_LL_Start>:
/**
 * @brief  Starts the low level portion of the device driver.
 * @param  pdev: Device handle
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef * pdev) {
 8010120:	b580      	push	{r7, lr}
 8010122:	b084      	sub	sp, #16
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8010128:	2300      	movs	r3, #0
 801012a:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 801012c:	2300      	movs	r3, #0
 801012e:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_Start(pdev->pData);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010136:	4618      	mov	r0, r3
 8010138:	f7f6 fcaa 	bl	8006a90 <HAL_PCD_Start>
 801013c:	4603      	mov	r3, r0
 801013e:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 8010140:	7bfb      	ldrb	r3, [r7, #15]
 8010142:	4618      	mov	r0, r3
 8010144:	f000 f942 	bl	80103cc <USBD_Get_USB_Status>
 8010148:	4603      	mov	r3, r0
 801014a:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 801014c:	7bbb      	ldrb	r3, [r7, #14]
}
 801014e:	4618      	mov	r0, r3
 8010150:	3710      	adds	r7, #16
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}

08010156 <USBD_LL_OpenEP>:
 * @param  ep_addr: Endpoint number
 * @param  ep_type: Endpoint type
 * @param  ep_mps: Endpoint max packet size
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps) {
 8010156:	b580      	push	{r7, lr}
 8010158:	b084      	sub	sp, #16
 801015a:	af00      	add	r7, sp, #0
 801015c:	6078      	str	r0, [r7, #4]
 801015e:	4608      	mov	r0, r1
 8010160:	4611      	mov	r1, r2
 8010162:	461a      	mov	r2, r3
 8010164:	4603      	mov	r3, r0
 8010166:	70fb      	strb	r3, [r7, #3]
 8010168:	460b      	mov	r3, r1
 801016a:	70bb      	strb	r3, [r7, #2]
 801016c:	4613      	mov	r3, r2
 801016e:	803b      	strh	r3, [r7, #0]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8010170:	2300      	movs	r3, #0
 8010172:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 8010174:	2300      	movs	r3, #0
 8010176:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801017e:	78bb      	ldrb	r3, [r7, #2]
 8010180:	883a      	ldrh	r2, [r7, #0]
 8010182:	78f9      	ldrb	r1, [r7, #3]
 8010184:	f7f7 f97b 	bl	800747e <HAL_PCD_EP_Open>
 8010188:	4603      	mov	r3, r0
 801018a:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 801018c:	7bfb      	ldrb	r3, [r7, #15]
 801018e:	4618      	mov	r0, r3
 8010190:	f000 f91c 	bl	80103cc <USBD_Get_USB_Status>
 8010194:	4603      	mov	r3, r0
 8010196:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 8010198:	7bbb      	ldrb	r3, [r7, #14]
}
 801019a:	4618      	mov	r0, r3
 801019c:	3710      	adds	r7, #16
 801019e:	46bd      	mov	sp, r7
 80101a0:	bd80      	pop	{r7, pc}

080101a2 <USBD_LL_CloseEP>:
 * @brief  Closes an endpoint of the low level driver.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 80101a2:	b580      	push	{r7, lr}
 80101a4:	b084      	sub	sp, #16
 80101a6:	af00      	add	r7, sp, #0
 80101a8:	6078      	str	r0, [r7, #4]
 80101aa:	460b      	mov	r3, r1
 80101ac:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80101ae:	2300      	movs	r3, #0
 80101b0:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 80101b2:	2300      	movs	r3, #0
 80101b4:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80101bc:	78fa      	ldrb	r2, [r7, #3]
 80101be:	4611      	mov	r1, r2
 80101c0:	4618      	mov	r0, r3
 80101c2:	f7f7 f9c4 	bl	800754e <HAL_PCD_EP_Close>
 80101c6:	4603      	mov	r3, r0
 80101c8:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 80101ca:	7bfb      	ldrb	r3, [r7, #15]
 80101cc:	4618      	mov	r0, r3
 80101ce:	f000 f8fd 	bl	80103cc <USBD_Get_USB_Status>
 80101d2:	4603      	mov	r3, r0
 80101d4:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 80101d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80101d8:	4618      	mov	r0, r3
 80101da:	3710      	adds	r7, #16
 80101dc:	46bd      	mov	sp, r7
 80101de:	bd80      	pop	{r7, pc}

080101e0 <USBD_LL_StallEP>:
 * @brief  Sets a Stall condition on an endpoint of the Low Level Driver.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b084      	sub	sp, #16
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
 80101e8:	460b      	mov	r3, r1
 80101ea:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80101ec:	2300      	movs	r3, #0
 80101ee:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 80101f0:	2300      	movs	r3, #0
 80101f2:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80101fa:	78fa      	ldrb	r2, [r7, #3]
 80101fc:	4611      	mov	r1, r2
 80101fe:	4618      	mov	r0, r3
 8010200:	f7f7 fa9c 	bl	800773c <HAL_PCD_EP_SetStall>
 8010204:	4603      	mov	r3, r0
 8010206:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 8010208:	7bfb      	ldrb	r3, [r7, #15]
 801020a:	4618      	mov	r0, r3
 801020c:	f000 f8de 	bl	80103cc <USBD_Get_USB_Status>
 8010210:	4603      	mov	r3, r0
 8010212:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 8010214:	7bbb      	ldrb	r3, [r7, #14]
}
 8010216:	4618      	mov	r0, r3
 8010218:	3710      	adds	r7, #16
 801021a:	46bd      	mov	sp, r7
 801021c:	bd80      	pop	{r7, pc}

0801021e <USBD_LL_ClearStallEP>:
 * @brief  Clears a Stall condition on an endpoint of the Low Level Driver.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 801021e:	b580      	push	{r7, lr}
 8010220:	b084      	sub	sp, #16
 8010222:	af00      	add	r7, sp, #0
 8010224:	6078      	str	r0, [r7, #4]
 8010226:	460b      	mov	r3, r1
 8010228:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 801022a:	2300      	movs	r3, #0
 801022c:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 801022e:	2300      	movs	r3, #0
 8010230:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010238:	78fa      	ldrb	r2, [r7, #3]
 801023a:	4611      	mov	r1, r2
 801023c:	4618      	mov	r0, r3
 801023e:	f7f7 fae1 	bl	8007804 <HAL_PCD_EP_ClrStall>
 8010242:	4603      	mov	r3, r0
 8010244:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 8010246:	7bfb      	ldrb	r3, [r7, #15]
 8010248:	4618      	mov	r0, r3
 801024a:	f000 f8bf 	bl	80103cc <USBD_Get_USB_Status>
 801024e:	4603      	mov	r3, r0
 8010250:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 8010252:	7bbb      	ldrb	r3, [r7, #14]
}
 8010254:	4618      	mov	r0, r3
 8010256:	3710      	adds	r7, #16
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}

0801025c <USBD_LL_IsStallEP>:
 * @brief  Returns Stall condition.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval Stall (1: Yes, 0: No)
 */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 801025c:	b480      	push	{r7}
 801025e:	b085      	sub	sp, #20
 8010260:	af00      	add	r7, sp, #0
 8010262:	6078      	str	r0, [r7, #4]
 8010264:	460b      	mov	r3, r1
 8010266:	70fb      	strb	r3, [r7, #3]
    PCD_HandleTypeDef * hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801026e:	60fb      	str	r3, [r7, #12]

    if ((ep_addr & 0x80) == 0x80) {
 8010270:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010274:	2b00      	cmp	r3, #0
 8010276:	da0b      	bge.n	8010290 <USBD_LL_IsStallEP+0x34>
        return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010278:	78fb      	ldrb	r3, [r7, #3]
 801027a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801027e:	68f9      	ldr	r1, [r7, #12]
 8010280:	4613      	mov	r3, r2
 8010282:	00db      	lsls	r3, r3, #3
 8010284:	4413      	add	r3, r2
 8010286:	009b      	lsls	r3, r3, #2
 8010288:	440b      	add	r3, r1
 801028a:	333e      	adds	r3, #62	@ 0x3e
 801028c:	781b      	ldrb	r3, [r3, #0]
 801028e:	e00b      	b.n	80102a8 <USBD_LL_IsStallEP+0x4c>
    } else {
        return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010290:	78fb      	ldrb	r3, [r7, #3]
 8010292:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010296:	68f9      	ldr	r1, [r7, #12]
 8010298:	4613      	mov	r3, r2
 801029a:	00db      	lsls	r3, r3, #3
 801029c:	4413      	add	r3, r2
 801029e:	009b      	lsls	r3, r3, #2
 80102a0:	440b      	add	r3, r1
 80102a2:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 80102a6:	781b      	ldrb	r3, [r3, #0]
    }
}
 80102a8:	4618      	mov	r0, r3
 80102aa:	3714      	adds	r7, #20
 80102ac:	46bd      	mov	sp, r7
 80102ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b2:	4770      	bx	lr

080102b4 <USBD_LL_SetUSBAddress>:
 * @brief  Assigns a USB address to the device.
 * @param  pdev: Device handle
 * @param  dev_addr: Device address
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef * pdev, uint8_t dev_addr) {
 80102b4:	b580      	push	{r7, lr}
 80102b6:	b084      	sub	sp, #16
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
 80102bc:	460b      	mov	r3, r1
 80102be:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80102c0:	2300      	movs	r3, #0
 80102c2:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 80102c4:	2300      	movs	r3, #0
 80102c6:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80102ce:	78fa      	ldrb	r2, [r7, #3]
 80102d0:	4611      	mov	r1, r2
 80102d2:	4618      	mov	r0, r3
 80102d4:	f7f7 f8ae 	bl	8007434 <HAL_PCD_SetAddress>
 80102d8:	4603      	mov	r3, r0
 80102da:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 80102dc:	7bfb      	ldrb	r3, [r7, #15]
 80102de:	4618      	mov	r0, r3
 80102e0:	f000 f874 	bl	80103cc <USBD_Get_USB_Status>
 80102e4:	4603      	mov	r3, r0
 80102e6:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 80102e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80102ea:	4618      	mov	r0, r3
 80102ec:	3710      	adds	r7, #16
 80102ee:	46bd      	mov	sp, r7
 80102f0:	bd80      	pop	{r7, pc}

080102f2 <USBD_LL_Transmit>:
 * @param  ep_addr: Endpoint number
 * @param  pbuf: Pointer to data to be sent
 * @param  size: Data size
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef * pdev, uint8_t ep_addr, uint8_t * pbuf, uint32_t size) {
 80102f2:	b580      	push	{r7, lr}
 80102f4:	b086      	sub	sp, #24
 80102f6:	af00      	add	r7, sp, #0
 80102f8:	60f8      	str	r0, [r7, #12]
 80102fa:	607a      	str	r2, [r7, #4]
 80102fc:	603b      	str	r3, [r7, #0]
 80102fe:	460b      	mov	r3, r1
 8010300:	72fb      	strb	r3, [r7, #11]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8010302:	2300      	movs	r3, #0
 8010304:	75fb      	strb	r3, [r7, #23]
    USBD_StatusTypeDef usb_status = USBD_OK;
 8010306:	2300      	movs	r3, #0
 8010308:	75bb      	strb	r3, [r7, #22]

    hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010310:	7af9      	ldrb	r1, [r7, #11]
 8010312:	683b      	ldr	r3, [r7, #0]
 8010314:	687a      	ldr	r2, [r7, #4]
 8010316:	f7f7 f9c7 	bl	80076a8 <HAL_PCD_EP_Transmit>
 801031a:	4603      	mov	r3, r0
 801031c:	75fb      	strb	r3, [r7, #23]

    usb_status = USBD_Get_USB_Status(hal_status);
 801031e:	7dfb      	ldrb	r3, [r7, #23]
 8010320:	4618      	mov	r0, r3
 8010322:	f000 f853 	bl	80103cc <USBD_Get_USB_Status>
 8010326:	4603      	mov	r3, r0
 8010328:	75bb      	strb	r3, [r7, #22]

    return usb_status;
 801032a:	7dbb      	ldrb	r3, [r7, #22]
}
 801032c:	4618      	mov	r0, r3
 801032e:	3718      	adds	r7, #24
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}

08010334 <USBD_LL_PrepareReceive>:
 * @param  ep_addr: Endpoint number
 * @param  pbuf: Pointer to data to be received
 * @param  size: Data size
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef * pdev, uint8_t ep_addr, uint8_t * pbuf, uint32_t size) {
 8010334:	b580      	push	{r7, lr}
 8010336:	b086      	sub	sp, #24
 8010338:	af00      	add	r7, sp, #0
 801033a:	60f8      	str	r0, [r7, #12]
 801033c:	607a      	str	r2, [r7, #4]
 801033e:	603b      	str	r3, [r7, #0]
 8010340:	460b      	mov	r3, r1
 8010342:	72fb      	strb	r3, [r7, #11]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8010344:	2300      	movs	r3, #0
 8010346:	75fb      	strb	r3, [r7, #23]
    USBD_StatusTypeDef usb_status = USBD_OK;
 8010348:	2300      	movs	r3, #0
 801034a:	75bb      	strb	r3, [r7, #22]

    hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010352:	7af9      	ldrb	r1, [r7, #11]
 8010354:	683b      	ldr	r3, [r7, #0]
 8010356:	687a      	ldr	r2, [r7, #4]
 8010358:	f7f7 f943 	bl	80075e2 <HAL_PCD_EP_Receive>
 801035c:	4603      	mov	r3, r0
 801035e:	75fb      	strb	r3, [r7, #23]

    usb_status = USBD_Get_USB_Status(hal_status);
 8010360:	7dfb      	ldrb	r3, [r7, #23]
 8010362:	4618      	mov	r0, r3
 8010364:	f000 f832 	bl	80103cc <USBD_Get_USB_Status>
 8010368:	4603      	mov	r3, r0
 801036a:	75bb      	strb	r3, [r7, #22]

    return usb_status;
 801036c:	7dbb      	ldrb	r3, [r7, #22]
}
 801036e:	4618      	mov	r0, r3
 8010370:	3718      	adds	r7, #24
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}

08010376 <USBD_LL_GetRxDataSize>:
 * @brief  Returns the last transferred packet size.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval Received Data Size
 */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 8010376:	b580      	push	{r7, lr}
 8010378:	b082      	sub	sp, #8
 801037a:	af00      	add	r7, sp, #0
 801037c:	6078      	str	r0, [r7, #4]
 801037e:	460b      	mov	r3, r1
 8010380:	70fb      	strb	r3, [r7, #3]
    return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010388:	78fa      	ldrb	r2, [r7, #3]
 801038a:	4611      	mov	r1, r2
 801038c:	4618      	mov	r0, r3
 801038e:	f7f7 f973 	bl	8007678 <HAL_PCD_EP_GetRxCount>
 8010392:	4603      	mov	r3, r0
}
 8010394:	4618      	mov	r0, r3
 8010396:	3708      	adds	r7, #8
 8010398:	46bd      	mov	sp, r7
 801039a:	bd80      	pop	{r7, pc}

0801039c <USBD_static_malloc>:
/**
 * @brief  Static single allocation.
 * @param  size: Size of allocated memory
 * @retval None
 */
void * USBD_static_malloc(uint32_t size) {
 801039c:	b480      	push	{r7}
 801039e:	b083      	sub	sp, #12
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
    static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
    return mem;
 80103a4:	4b03      	ldr	r3, [pc, #12]	@ (80103b4 <USBD_static_malloc+0x18>)
}
 80103a6:	4618      	mov	r0, r3
 80103a8:	370c      	adds	r7, #12
 80103aa:	46bd      	mov	sp, r7
 80103ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b0:	4770      	bx	lr
 80103b2:	bf00      	nop
 80103b4:	20001bc4 	.word	0x20001bc4

080103b8 <USBD_static_free>:
/**
 * @brief  Dummy memory free
 * @param  p: Pointer to allocated  memory address
 * @retval None
 */
void USBD_static_free(void * p) {
 80103b8:	b480      	push	{r7}
 80103ba:	b083      	sub	sp, #12
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
}
 80103c0:	bf00      	nop
 80103c2:	370c      	adds	r7, #12
 80103c4:	46bd      	mov	sp, r7
 80103c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ca:	4770      	bx	lr

080103cc <USBD_Get_USB_Status>:
/**
 * @brief  Returns the USB status depending on the HAL status:
 * @param  hal_status: HAL status
 * @retval USB status
 */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status) {
 80103cc:	b480      	push	{r7}
 80103ce:	b085      	sub	sp, #20
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	4603      	mov	r3, r0
 80103d4:	71fb      	strb	r3, [r7, #7]
    USBD_StatusTypeDef usb_status = USBD_OK;
 80103d6:	2300      	movs	r3, #0
 80103d8:	73fb      	strb	r3, [r7, #15]

    switch (hal_status) {
 80103da:	79fb      	ldrb	r3, [r7, #7]
 80103dc:	2b03      	cmp	r3, #3
 80103de:	d817      	bhi.n	8010410 <USBD_Get_USB_Status+0x44>
 80103e0:	a201      	add	r2, pc, #4	@ (adr r2, 80103e8 <USBD_Get_USB_Status+0x1c>)
 80103e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103e6:	bf00      	nop
 80103e8:	080103f9 	.word	0x080103f9
 80103ec:	080103ff 	.word	0x080103ff
 80103f0:	08010405 	.word	0x08010405
 80103f4:	0801040b 	.word	0x0801040b
    case HAL_OK:
        usb_status = USBD_OK;
 80103f8:	2300      	movs	r3, #0
 80103fa:	73fb      	strb	r3, [r7, #15]
        break;
 80103fc:	e00b      	b.n	8010416 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR:
        usb_status = USBD_FAIL;
 80103fe:	2303      	movs	r3, #3
 8010400:	73fb      	strb	r3, [r7, #15]
        break;
 8010402:	e008      	b.n	8010416 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY:
        usb_status = USBD_BUSY;
 8010404:	2301      	movs	r3, #1
 8010406:	73fb      	strb	r3, [r7, #15]
        break;
 8010408:	e005      	b.n	8010416 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT:
        usb_status = USBD_FAIL;
 801040a:	2303      	movs	r3, #3
 801040c:	73fb      	strb	r3, [r7, #15]
        break;
 801040e:	e002      	b.n	8010416 <USBD_Get_USB_Status+0x4a>
    default:
        usb_status = USBD_FAIL;
 8010410:	2303      	movs	r3, #3
 8010412:	73fb      	strb	r3, [r7, #15]
        break;
 8010414:	bf00      	nop
    }
    return usb_status;
 8010416:	7bfb      	ldrb	r3, [r7, #15]
}
 8010418:	4618      	mov	r0, r3
 801041a:	3714      	adds	r7, #20
 801041c:	46bd      	mov	sp, r7
 801041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010422:	4770      	bx	lr

08010424 <malloc>:
 8010424:	4b02      	ldr	r3, [pc, #8]	@ (8010430 <malloc+0xc>)
 8010426:	4601      	mov	r1, r0
 8010428:	6818      	ldr	r0, [r3, #0]
 801042a:	f000 b82d 	b.w	8010488 <_malloc_r>
 801042e:	bf00      	nop
 8010430:	20000168 	.word	0x20000168

08010434 <free>:
 8010434:	4b02      	ldr	r3, [pc, #8]	@ (8010440 <free+0xc>)
 8010436:	4601      	mov	r1, r0
 8010438:	6818      	ldr	r0, [r3, #0]
 801043a:	f001 bd29 	b.w	8011e90 <_free_r>
 801043e:	bf00      	nop
 8010440:	20000168 	.word	0x20000168

08010444 <sbrk_aligned>:
 8010444:	b570      	push	{r4, r5, r6, lr}
 8010446:	4e0f      	ldr	r6, [pc, #60]	@ (8010484 <sbrk_aligned+0x40>)
 8010448:	460c      	mov	r4, r1
 801044a:	6831      	ldr	r1, [r6, #0]
 801044c:	4605      	mov	r5, r0
 801044e:	b911      	cbnz	r1, 8010456 <sbrk_aligned+0x12>
 8010450:	f000 fe72 	bl	8011138 <_sbrk_r>
 8010454:	6030      	str	r0, [r6, #0]
 8010456:	4621      	mov	r1, r4
 8010458:	4628      	mov	r0, r5
 801045a:	f000 fe6d 	bl	8011138 <_sbrk_r>
 801045e:	1c43      	adds	r3, r0, #1
 8010460:	d103      	bne.n	801046a <sbrk_aligned+0x26>
 8010462:	f04f 34ff 	mov.w	r4, #4294967295
 8010466:	4620      	mov	r0, r4
 8010468:	bd70      	pop	{r4, r5, r6, pc}
 801046a:	1cc4      	adds	r4, r0, #3
 801046c:	f024 0403 	bic.w	r4, r4, #3
 8010470:	42a0      	cmp	r0, r4
 8010472:	d0f8      	beq.n	8010466 <sbrk_aligned+0x22>
 8010474:	1a21      	subs	r1, r4, r0
 8010476:	4628      	mov	r0, r5
 8010478:	f000 fe5e 	bl	8011138 <_sbrk_r>
 801047c:	3001      	adds	r0, #1
 801047e:	d1f2      	bne.n	8010466 <sbrk_aligned+0x22>
 8010480:	e7ef      	b.n	8010462 <sbrk_aligned+0x1e>
 8010482:	bf00      	nop
 8010484:	20001de4 	.word	0x20001de4

08010488 <_malloc_r>:
 8010488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801048c:	1ccd      	adds	r5, r1, #3
 801048e:	f025 0503 	bic.w	r5, r5, #3
 8010492:	3508      	adds	r5, #8
 8010494:	2d0c      	cmp	r5, #12
 8010496:	bf38      	it	cc
 8010498:	250c      	movcc	r5, #12
 801049a:	2d00      	cmp	r5, #0
 801049c:	4606      	mov	r6, r0
 801049e:	db01      	blt.n	80104a4 <_malloc_r+0x1c>
 80104a0:	42a9      	cmp	r1, r5
 80104a2:	d904      	bls.n	80104ae <_malloc_r+0x26>
 80104a4:	230c      	movs	r3, #12
 80104a6:	6033      	str	r3, [r6, #0]
 80104a8:	2000      	movs	r0, #0
 80104aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010584 <_malloc_r+0xfc>
 80104b2:	f000 f869 	bl	8010588 <__malloc_lock>
 80104b6:	f8d8 3000 	ldr.w	r3, [r8]
 80104ba:	461c      	mov	r4, r3
 80104bc:	bb44      	cbnz	r4, 8010510 <_malloc_r+0x88>
 80104be:	4629      	mov	r1, r5
 80104c0:	4630      	mov	r0, r6
 80104c2:	f7ff ffbf 	bl	8010444 <sbrk_aligned>
 80104c6:	1c43      	adds	r3, r0, #1
 80104c8:	4604      	mov	r4, r0
 80104ca:	d158      	bne.n	801057e <_malloc_r+0xf6>
 80104cc:	f8d8 4000 	ldr.w	r4, [r8]
 80104d0:	4627      	mov	r7, r4
 80104d2:	2f00      	cmp	r7, #0
 80104d4:	d143      	bne.n	801055e <_malloc_r+0xd6>
 80104d6:	2c00      	cmp	r4, #0
 80104d8:	d04b      	beq.n	8010572 <_malloc_r+0xea>
 80104da:	6823      	ldr	r3, [r4, #0]
 80104dc:	4639      	mov	r1, r7
 80104de:	4630      	mov	r0, r6
 80104e0:	eb04 0903 	add.w	r9, r4, r3
 80104e4:	f000 fe28 	bl	8011138 <_sbrk_r>
 80104e8:	4581      	cmp	r9, r0
 80104ea:	d142      	bne.n	8010572 <_malloc_r+0xea>
 80104ec:	6821      	ldr	r1, [r4, #0]
 80104ee:	1a6d      	subs	r5, r5, r1
 80104f0:	4629      	mov	r1, r5
 80104f2:	4630      	mov	r0, r6
 80104f4:	f7ff ffa6 	bl	8010444 <sbrk_aligned>
 80104f8:	3001      	adds	r0, #1
 80104fa:	d03a      	beq.n	8010572 <_malloc_r+0xea>
 80104fc:	6823      	ldr	r3, [r4, #0]
 80104fe:	442b      	add	r3, r5
 8010500:	6023      	str	r3, [r4, #0]
 8010502:	f8d8 3000 	ldr.w	r3, [r8]
 8010506:	685a      	ldr	r2, [r3, #4]
 8010508:	bb62      	cbnz	r2, 8010564 <_malloc_r+0xdc>
 801050a:	f8c8 7000 	str.w	r7, [r8]
 801050e:	e00f      	b.n	8010530 <_malloc_r+0xa8>
 8010510:	6822      	ldr	r2, [r4, #0]
 8010512:	1b52      	subs	r2, r2, r5
 8010514:	d420      	bmi.n	8010558 <_malloc_r+0xd0>
 8010516:	2a0b      	cmp	r2, #11
 8010518:	d917      	bls.n	801054a <_malloc_r+0xc2>
 801051a:	1961      	adds	r1, r4, r5
 801051c:	42a3      	cmp	r3, r4
 801051e:	6025      	str	r5, [r4, #0]
 8010520:	bf18      	it	ne
 8010522:	6059      	strne	r1, [r3, #4]
 8010524:	6863      	ldr	r3, [r4, #4]
 8010526:	bf08      	it	eq
 8010528:	f8c8 1000 	streq.w	r1, [r8]
 801052c:	5162      	str	r2, [r4, r5]
 801052e:	604b      	str	r3, [r1, #4]
 8010530:	4630      	mov	r0, r6
 8010532:	f000 f82f 	bl	8010594 <__malloc_unlock>
 8010536:	f104 000b 	add.w	r0, r4, #11
 801053a:	1d23      	adds	r3, r4, #4
 801053c:	f020 0007 	bic.w	r0, r0, #7
 8010540:	1ac2      	subs	r2, r0, r3
 8010542:	bf1c      	itt	ne
 8010544:	1a1b      	subne	r3, r3, r0
 8010546:	50a3      	strne	r3, [r4, r2]
 8010548:	e7af      	b.n	80104aa <_malloc_r+0x22>
 801054a:	6862      	ldr	r2, [r4, #4]
 801054c:	42a3      	cmp	r3, r4
 801054e:	bf0c      	ite	eq
 8010550:	f8c8 2000 	streq.w	r2, [r8]
 8010554:	605a      	strne	r2, [r3, #4]
 8010556:	e7eb      	b.n	8010530 <_malloc_r+0xa8>
 8010558:	4623      	mov	r3, r4
 801055a:	6864      	ldr	r4, [r4, #4]
 801055c:	e7ae      	b.n	80104bc <_malloc_r+0x34>
 801055e:	463c      	mov	r4, r7
 8010560:	687f      	ldr	r7, [r7, #4]
 8010562:	e7b6      	b.n	80104d2 <_malloc_r+0x4a>
 8010564:	461a      	mov	r2, r3
 8010566:	685b      	ldr	r3, [r3, #4]
 8010568:	42a3      	cmp	r3, r4
 801056a:	d1fb      	bne.n	8010564 <_malloc_r+0xdc>
 801056c:	2300      	movs	r3, #0
 801056e:	6053      	str	r3, [r2, #4]
 8010570:	e7de      	b.n	8010530 <_malloc_r+0xa8>
 8010572:	230c      	movs	r3, #12
 8010574:	6033      	str	r3, [r6, #0]
 8010576:	4630      	mov	r0, r6
 8010578:	f000 f80c 	bl	8010594 <__malloc_unlock>
 801057c:	e794      	b.n	80104a8 <_malloc_r+0x20>
 801057e:	6005      	str	r5, [r0, #0]
 8010580:	e7d6      	b.n	8010530 <_malloc_r+0xa8>
 8010582:	bf00      	nop
 8010584:	20001de8 	.word	0x20001de8

08010588 <__malloc_lock>:
 8010588:	4801      	ldr	r0, [pc, #4]	@ (8010590 <__malloc_lock+0x8>)
 801058a:	f000 be22 	b.w	80111d2 <__retarget_lock_acquire_recursive>
 801058e:	bf00      	nop
 8010590:	20001f2c 	.word	0x20001f2c

08010594 <__malloc_unlock>:
 8010594:	4801      	ldr	r0, [pc, #4]	@ (801059c <__malloc_unlock+0x8>)
 8010596:	f000 be1d 	b.w	80111d4 <__retarget_lock_release_recursive>
 801059a:	bf00      	nop
 801059c:	20001f2c 	.word	0x20001f2c

080105a0 <__cvt>:
 80105a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80105a4:	ec57 6b10 	vmov	r6, r7, d0
 80105a8:	2f00      	cmp	r7, #0
 80105aa:	460c      	mov	r4, r1
 80105ac:	4619      	mov	r1, r3
 80105ae:	463b      	mov	r3, r7
 80105b0:	bfbb      	ittet	lt
 80105b2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80105b6:	461f      	movlt	r7, r3
 80105b8:	2300      	movge	r3, #0
 80105ba:	232d      	movlt	r3, #45	@ 0x2d
 80105bc:	700b      	strb	r3, [r1, #0]
 80105be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80105c0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80105c4:	4691      	mov	r9, r2
 80105c6:	f023 0820 	bic.w	r8, r3, #32
 80105ca:	bfbc      	itt	lt
 80105cc:	4632      	movlt	r2, r6
 80105ce:	4616      	movlt	r6, r2
 80105d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80105d4:	d005      	beq.n	80105e2 <__cvt+0x42>
 80105d6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80105da:	d100      	bne.n	80105de <__cvt+0x3e>
 80105dc:	3401      	adds	r4, #1
 80105de:	2102      	movs	r1, #2
 80105e0:	e000      	b.n	80105e4 <__cvt+0x44>
 80105e2:	2103      	movs	r1, #3
 80105e4:	ab03      	add	r3, sp, #12
 80105e6:	9301      	str	r3, [sp, #4]
 80105e8:	ab02      	add	r3, sp, #8
 80105ea:	9300      	str	r3, [sp, #0]
 80105ec:	ec47 6b10 	vmov	d0, r6, r7
 80105f0:	4653      	mov	r3, sl
 80105f2:	4622      	mov	r2, r4
 80105f4:	f000 fe88 	bl	8011308 <_dtoa_r>
 80105f8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80105fc:	4605      	mov	r5, r0
 80105fe:	d119      	bne.n	8010634 <__cvt+0x94>
 8010600:	f019 0f01 	tst.w	r9, #1
 8010604:	d00e      	beq.n	8010624 <__cvt+0x84>
 8010606:	eb00 0904 	add.w	r9, r0, r4
 801060a:	2200      	movs	r2, #0
 801060c:	2300      	movs	r3, #0
 801060e:	4630      	mov	r0, r6
 8010610:	4639      	mov	r1, r7
 8010612:	f7f0 fa61 	bl	8000ad8 <__aeabi_dcmpeq>
 8010616:	b108      	cbz	r0, 801061c <__cvt+0x7c>
 8010618:	f8cd 900c 	str.w	r9, [sp, #12]
 801061c:	2230      	movs	r2, #48	@ 0x30
 801061e:	9b03      	ldr	r3, [sp, #12]
 8010620:	454b      	cmp	r3, r9
 8010622:	d31e      	bcc.n	8010662 <__cvt+0xc2>
 8010624:	9b03      	ldr	r3, [sp, #12]
 8010626:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010628:	1b5b      	subs	r3, r3, r5
 801062a:	4628      	mov	r0, r5
 801062c:	6013      	str	r3, [r2, #0]
 801062e:	b004      	add	sp, #16
 8010630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010634:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010638:	eb00 0904 	add.w	r9, r0, r4
 801063c:	d1e5      	bne.n	801060a <__cvt+0x6a>
 801063e:	7803      	ldrb	r3, [r0, #0]
 8010640:	2b30      	cmp	r3, #48	@ 0x30
 8010642:	d10a      	bne.n	801065a <__cvt+0xba>
 8010644:	2200      	movs	r2, #0
 8010646:	2300      	movs	r3, #0
 8010648:	4630      	mov	r0, r6
 801064a:	4639      	mov	r1, r7
 801064c:	f7f0 fa44 	bl	8000ad8 <__aeabi_dcmpeq>
 8010650:	b918      	cbnz	r0, 801065a <__cvt+0xba>
 8010652:	f1c4 0401 	rsb	r4, r4, #1
 8010656:	f8ca 4000 	str.w	r4, [sl]
 801065a:	f8da 3000 	ldr.w	r3, [sl]
 801065e:	4499      	add	r9, r3
 8010660:	e7d3      	b.n	801060a <__cvt+0x6a>
 8010662:	1c59      	adds	r1, r3, #1
 8010664:	9103      	str	r1, [sp, #12]
 8010666:	701a      	strb	r2, [r3, #0]
 8010668:	e7d9      	b.n	801061e <__cvt+0x7e>

0801066a <__exponent>:
 801066a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801066c:	2900      	cmp	r1, #0
 801066e:	bfba      	itte	lt
 8010670:	4249      	neglt	r1, r1
 8010672:	232d      	movlt	r3, #45	@ 0x2d
 8010674:	232b      	movge	r3, #43	@ 0x2b
 8010676:	2909      	cmp	r1, #9
 8010678:	7002      	strb	r2, [r0, #0]
 801067a:	7043      	strb	r3, [r0, #1]
 801067c:	dd29      	ble.n	80106d2 <__exponent+0x68>
 801067e:	f10d 0307 	add.w	r3, sp, #7
 8010682:	461d      	mov	r5, r3
 8010684:	270a      	movs	r7, #10
 8010686:	461a      	mov	r2, r3
 8010688:	fbb1 f6f7 	udiv	r6, r1, r7
 801068c:	fb07 1416 	mls	r4, r7, r6, r1
 8010690:	3430      	adds	r4, #48	@ 0x30
 8010692:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010696:	460c      	mov	r4, r1
 8010698:	2c63      	cmp	r4, #99	@ 0x63
 801069a:	f103 33ff 	add.w	r3, r3, #4294967295
 801069e:	4631      	mov	r1, r6
 80106a0:	dcf1      	bgt.n	8010686 <__exponent+0x1c>
 80106a2:	3130      	adds	r1, #48	@ 0x30
 80106a4:	1e94      	subs	r4, r2, #2
 80106a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80106aa:	1c41      	adds	r1, r0, #1
 80106ac:	4623      	mov	r3, r4
 80106ae:	42ab      	cmp	r3, r5
 80106b0:	d30a      	bcc.n	80106c8 <__exponent+0x5e>
 80106b2:	f10d 0309 	add.w	r3, sp, #9
 80106b6:	1a9b      	subs	r3, r3, r2
 80106b8:	42ac      	cmp	r4, r5
 80106ba:	bf88      	it	hi
 80106bc:	2300      	movhi	r3, #0
 80106be:	3302      	adds	r3, #2
 80106c0:	4403      	add	r3, r0
 80106c2:	1a18      	subs	r0, r3, r0
 80106c4:	b003      	add	sp, #12
 80106c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106c8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80106cc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80106d0:	e7ed      	b.n	80106ae <__exponent+0x44>
 80106d2:	2330      	movs	r3, #48	@ 0x30
 80106d4:	3130      	adds	r1, #48	@ 0x30
 80106d6:	7083      	strb	r3, [r0, #2]
 80106d8:	70c1      	strb	r1, [r0, #3]
 80106da:	1d03      	adds	r3, r0, #4
 80106dc:	e7f1      	b.n	80106c2 <__exponent+0x58>
	...

080106e0 <_printf_float>:
 80106e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106e4:	b08d      	sub	sp, #52	@ 0x34
 80106e6:	460c      	mov	r4, r1
 80106e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80106ec:	4616      	mov	r6, r2
 80106ee:	461f      	mov	r7, r3
 80106f0:	4605      	mov	r5, r0
 80106f2:	f000 fce9 	bl	80110c8 <_localeconv_r>
 80106f6:	6803      	ldr	r3, [r0, #0]
 80106f8:	9304      	str	r3, [sp, #16]
 80106fa:	4618      	mov	r0, r3
 80106fc:	f7ef fdc0 	bl	8000280 <strlen>
 8010700:	2300      	movs	r3, #0
 8010702:	930a      	str	r3, [sp, #40]	@ 0x28
 8010704:	f8d8 3000 	ldr.w	r3, [r8]
 8010708:	9005      	str	r0, [sp, #20]
 801070a:	3307      	adds	r3, #7
 801070c:	f023 0307 	bic.w	r3, r3, #7
 8010710:	f103 0208 	add.w	r2, r3, #8
 8010714:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010718:	f8d4 b000 	ldr.w	fp, [r4]
 801071c:	f8c8 2000 	str.w	r2, [r8]
 8010720:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010724:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010728:	9307      	str	r3, [sp, #28]
 801072a:	f8cd 8018 	str.w	r8, [sp, #24]
 801072e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8010732:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010736:	4b9c      	ldr	r3, [pc, #624]	@ (80109a8 <_printf_float+0x2c8>)
 8010738:	f04f 32ff 	mov.w	r2, #4294967295
 801073c:	f7f0 f9fe 	bl	8000b3c <__aeabi_dcmpun>
 8010740:	bb70      	cbnz	r0, 80107a0 <_printf_float+0xc0>
 8010742:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010746:	4b98      	ldr	r3, [pc, #608]	@ (80109a8 <_printf_float+0x2c8>)
 8010748:	f04f 32ff 	mov.w	r2, #4294967295
 801074c:	f7f0 f9d8 	bl	8000b00 <__aeabi_dcmple>
 8010750:	bb30      	cbnz	r0, 80107a0 <_printf_float+0xc0>
 8010752:	2200      	movs	r2, #0
 8010754:	2300      	movs	r3, #0
 8010756:	4640      	mov	r0, r8
 8010758:	4649      	mov	r1, r9
 801075a:	f7f0 f9c7 	bl	8000aec <__aeabi_dcmplt>
 801075e:	b110      	cbz	r0, 8010766 <_printf_float+0x86>
 8010760:	232d      	movs	r3, #45	@ 0x2d
 8010762:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010766:	4a91      	ldr	r2, [pc, #580]	@ (80109ac <_printf_float+0x2cc>)
 8010768:	4b91      	ldr	r3, [pc, #580]	@ (80109b0 <_printf_float+0x2d0>)
 801076a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801076e:	bf94      	ite	ls
 8010770:	4690      	movls	r8, r2
 8010772:	4698      	movhi	r8, r3
 8010774:	2303      	movs	r3, #3
 8010776:	6123      	str	r3, [r4, #16]
 8010778:	f02b 0304 	bic.w	r3, fp, #4
 801077c:	6023      	str	r3, [r4, #0]
 801077e:	f04f 0900 	mov.w	r9, #0
 8010782:	9700      	str	r7, [sp, #0]
 8010784:	4633      	mov	r3, r6
 8010786:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010788:	4621      	mov	r1, r4
 801078a:	4628      	mov	r0, r5
 801078c:	f000 f9d2 	bl	8010b34 <_printf_common>
 8010790:	3001      	adds	r0, #1
 8010792:	f040 808d 	bne.w	80108b0 <_printf_float+0x1d0>
 8010796:	f04f 30ff 	mov.w	r0, #4294967295
 801079a:	b00d      	add	sp, #52	@ 0x34
 801079c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107a0:	4642      	mov	r2, r8
 80107a2:	464b      	mov	r3, r9
 80107a4:	4640      	mov	r0, r8
 80107a6:	4649      	mov	r1, r9
 80107a8:	f7f0 f9c8 	bl	8000b3c <__aeabi_dcmpun>
 80107ac:	b140      	cbz	r0, 80107c0 <_printf_float+0xe0>
 80107ae:	464b      	mov	r3, r9
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	bfbc      	itt	lt
 80107b4:	232d      	movlt	r3, #45	@ 0x2d
 80107b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80107ba:	4a7e      	ldr	r2, [pc, #504]	@ (80109b4 <_printf_float+0x2d4>)
 80107bc:	4b7e      	ldr	r3, [pc, #504]	@ (80109b8 <_printf_float+0x2d8>)
 80107be:	e7d4      	b.n	801076a <_printf_float+0x8a>
 80107c0:	6863      	ldr	r3, [r4, #4]
 80107c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80107c6:	9206      	str	r2, [sp, #24]
 80107c8:	1c5a      	adds	r2, r3, #1
 80107ca:	d13b      	bne.n	8010844 <_printf_float+0x164>
 80107cc:	2306      	movs	r3, #6
 80107ce:	6063      	str	r3, [r4, #4]
 80107d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80107d4:	2300      	movs	r3, #0
 80107d6:	6022      	str	r2, [r4, #0]
 80107d8:	9303      	str	r3, [sp, #12]
 80107da:	ab0a      	add	r3, sp, #40	@ 0x28
 80107dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80107e0:	ab09      	add	r3, sp, #36	@ 0x24
 80107e2:	9300      	str	r3, [sp, #0]
 80107e4:	6861      	ldr	r1, [r4, #4]
 80107e6:	ec49 8b10 	vmov	d0, r8, r9
 80107ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80107ee:	4628      	mov	r0, r5
 80107f0:	f7ff fed6 	bl	80105a0 <__cvt>
 80107f4:	9b06      	ldr	r3, [sp, #24]
 80107f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80107f8:	2b47      	cmp	r3, #71	@ 0x47
 80107fa:	4680      	mov	r8, r0
 80107fc:	d129      	bne.n	8010852 <_printf_float+0x172>
 80107fe:	1cc8      	adds	r0, r1, #3
 8010800:	db02      	blt.n	8010808 <_printf_float+0x128>
 8010802:	6863      	ldr	r3, [r4, #4]
 8010804:	4299      	cmp	r1, r3
 8010806:	dd41      	ble.n	801088c <_printf_float+0x1ac>
 8010808:	f1aa 0a02 	sub.w	sl, sl, #2
 801080c:	fa5f fa8a 	uxtb.w	sl, sl
 8010810:	3901      	subs	r1, #1
 8010812:	4652      	mov	r2, sl
 8010814:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010818:	9109      	str	r1, [sp, #36]	@ 0x24
 801081a:	f7ff ff26 	bl	801066a <__exponent>
 801081e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010820:	1813      	adds	r3, r2, r0
 8010822:	2a01      	cmp	r2, #1
 8010824:	4681      	mov	r9, r0
 8010826:	6123      	str	r3, [r4, #16]
 8010828:	dc02      	bgt.n	8010830 <_printf_float+0x150>
 801082a:	6822      	ldr	r2, [r4, #0]
 801082c:	07d2      	lsls	r2, r2, #31
 801082e:	d501      	bpl.n	8010834 <_printf_float+0x154>
 8010830:	3301      	adds	r3, #1
 8010832:	6123      	str	r3, [r4, #16]
 8010834:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010838:	2b00      	cmp	r3, #0
 801083a:	d0a2      	beq.n	8010782 <_printf_float+0xa2>
 801083c:	232d      	movs	r3, #45	@ 0x2d
 801083e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010842:	e79e      	b.n	8010782 <_printf_float+0xa2>
 8010844:	9a06      	ldr	r2, [sp, #24]
 8010846:	2a47      	cmp	r2, #71	@ 0x47
 8010848:	d1c2      	bne.n	80107d0 <_printf_float+0xf0>
 801084a:	2b00      	cmp	r3, #0
 801084c:	d1c0      	bne.n	80107d0 <_printf_float+0xf0>
 801084e:	2301      	movs	r3, #1
 8010850:	e7bd      	b.n	80107ce <_printf_float+0xee>
 8010852:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010856:	d9db      	bls.n	8010810 <_printf_float+0x130>
 8010858:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801085c:	d118      	bne.n	8010890 <_printf_float+0x1b0>
 801085e:	2900      	cmp	r1, #0
 8010860:	6863      	ldr	r3, [r4, #4]
 8010862:	dd0b      	ble.n	801087c <_printf_float+0x19c>
 8010864:	6121      	str	r1, [r4, #16]
 8010866:	b913      	cbnz	r3, 801086e <_printf_float+0x18e>
 8010868:	6822      	ldr	r2, [r4, #0]
 801086a:	07d0      	lsls	r0, r2, #31
 801086c:	d502      	bpl.n	8010874 <_printf_float+0x194>
 801086e:	3301      	adds	r3, #1
 8010870:	440b      	add	r3, r1
 8010872:	6123      	str	r3, [r4, #16]
 8010874:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010876:	f04f 0900 	mov.w	r9, #0
 801087a:	e7db      	b.n	8010834 <_printf_float+0x154>
 801087c:	b913      	cbnz	r3, 8010884 <_printf_float+0x1a4>
 801087e:	6822      	ldr	r2, [r4, #0]
 8010880:	07d2      	lsls	r2, r2, #31
 8010882:	d501      	bpl.n	8010888 <_printf_float+0x1a8>
 8010884:	3302      	adds	r3, #2
 8010886:	e7f4      	b.n	8010872 <_printf_float+0x192>
 8010888:	2301      	movs	r3, #1
 801088a:	e7f2      	b.n	8010872 <_printf_float+0x192>
 801088c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8010890:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010892:	4299      	cmp	r1, r3
 8010894:	db05      	blt.n	80108a2 <_printf_float+0x1c2>
 8010896:	6823      	ldr	r3, [r4, #0]
 8010898:	6121      	str	r1, [r4, #16]
 801089a:	07d8      	lsls	r0, r3, #31
 801089c:	d5ea      	bpl.n	8010874 <_printf_float+0x194>
 801089e:	1c4b      	adds	r3, r1, #1
 80108a0:	e7e7      	b.n	8010872 <_printf_float+0x192>
 80108a2:	2900      	cmp	r1, #0
 80108a4:	bfd4      	ite	le
 80108a6:	f1c1 0202 	rsble	r2, r1, #2
 80108aa:	2201      	movgt	r2, #1
 80108ac:	4413      	add	r3, r2
 80108ae:	e7e0      	b.n	8010872 <_printf_float+0x192>
 80108b0:	6823      	ldr	r3, [r4, #0]
 80108b2:	055a      	lsls	r2, r3, #21
 80108b4:	d407      	bmi.n	80108c6 <_printf_float+0x1e6>
 80108b6:	6923      	ldr	r3, [r4, #16]
 80108b8:	4642      	mov	r2, r8
 80108ba:	4631      	mov	r1, r6
 80108bc:	4628      	mov	r0, r5
 80108be:	47b8      	blx	r7
 80108c0:	3001      	adds	r0, #1
 80108c2:	d12b      	bne.n	801091c <_printf_float+0x23c>
 80108c4:	e767      	b.n	8010796 <_printf_float+0xb6>
 80108c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80108ca:	f240 80dd 	bls.w	8010a88 <_printf_float+0x3a8>
 80108ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80108d2:	2200      	movs	r2, #0
 80108d4:	2300      	movs	r3, #0
 80108d6:	f7f0 f8ff 	bl	8000ad8 <__aeabi_dcmpeq>
 80108da:	2800      	cmp	r0, #0
 80108dc:	d033      	beq.n	8010946 <_printf_float+0x266>
 80108de:	4a37      	ldr	r2, [pc, #220]	@ (80109bc <_printf_float+0x2dc>)
 80108e0:	2301      	movs	r3, #1
 80108e2:	4631      	mov	r1, r6
 80108e4:	4628      	mov	r0, r5
 80108e6:	47b8      	blx	r7
 80108e8:	3001      	adds	r0, #1
 80108ea:	f43f af54 	beq.w	8010796 <_printf_float+0xb6>
 80108ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80108f2:	4543      	cmp	r3, r8
 80108f4:	db02      	blt.n	80108fc <_printf_float+0x21c>
 80108f6:	6823      	ldr	r3, [r4, #0]
 80108f8:	07d8      	lsls	r0, r3, #31
 80108fa:	d50f      	bpl.n	801091c <_printf_float+0x23c>
 80108fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010900:	4631      	mov	r1, r6
 8010902:	4628      	mov	r0, r5
 8010904:	47b8      	blx	r7
 8010906:	3001      	adds	r0, #1
 8010908:	f43f af45 	beq.w	8010796 <_printf_float+0xb6>
 801090c:	f04f 0900 	mov.w	r9, #0
 8010910:	f108 38ff 	add.w	r8, r8, #4294967295
 8010914:	f104 0a1a 	add.w	sl, r4, #26
 8010918:	45c8      	cmp	r8, r9
 801091a:	dc09      	bgt.n	8010930 <_printf_float+0x250>
 801091c:	6823      	ldr	r3, [r4, #0]
 801091e:	079b      	lsls	r3, r3, #30
 8010920:	f100 8103 	bmi.w	8010b2a <_printf_float+0x44a>
 8010924:	68e0      	ldr	r0, [r4, #12]
 8010926:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010928:	4298      	cmp	r0, r3
 801092a:	bfb8      	it	lt
 801092c:	4618      	movlt	r0, r3
 801092e:	e734      	b.n	801079a <_printf_float+0xba>
 8010930:	2301      	movs	r3, #1
 8010932:	4652      	mov	r2, sl
 8010934:	4631      	mov	r1, r6
 8010936:	4628      	mov	r0, r5
 8010938:	47b8      	blx	r7
 801093a:	3001      	adds	r0, #1
 801093c:	f43f af2b 	beq.w	8010796 <_printf_float+0xb6>
 8010940:	f109 0901 	add.w	r9, r9, #1
 8010944:	e7e8      	b.n	8010918 <_printf_float+0x238>
 8010946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010948:	2b00      	cmp	r3, #0
 801094a:	dc39      	bgt.n	80109c0 <_printf_float+0x2e0>
 801094c:	4a1b      	ldr	r2, [pc, #108]	@ (80109bc <_printf_float+0x2dc>)
 801094e:	2301      	movs	r3, #1
 8010950:	4631      	mov	r1, r6
 8010952:	4628      	mov	r0, r5
 8010954:	47b8      	blx	r7
 8010956:	3001      	adds	r0, #1
 8010958:	f43f af1d 	beq.w	8010796 <_printf_float+0xb6>
 801095c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010960:	ea59 0303 	orrs.w	r3, r9, r3
 8010964:	d102      	bne.n	801096c <_printf_float+0x28c>
 8010966:	6823      	ldr	r3, [r4, #0]
 8010968:	07d9      	lsls	r1, r3, #31
 801096a:	d5d7      	bpl.n	801091c <_printf_float+0x23c>
 801096c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010970:	4631      	mov	r1, r6
 8010972:	4628      	mov	r0, r5
 8010974:	47b8      	blx	r7
 8010976:	3001      	adds	r0, #1
 8010978:	f43f af0d 	beq.w	8010796 <_printf_float+0xb6>
 801097c:	f04f 0a00 	mov.w	sl, #0
 8010980:	f104 0b1a 	add.w	fp, r4, #26
 8010984:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010986:	425b      	negs	r3, r3
 8010988:	4553      	cmp	r3, sl
 801098a:	dc01      	bgt.n	8010990 <_printf_float+0x2b0>
 801098c:	464b      	mov	r3, r9
 801098e:	e793      	b.n	80108b8 <_printf_float+0x1d8>
 8010990:	2301      	movs	r3, #1
 8010992:	465a      	mov	r2, fp
 8010994:	4631      	mov	r1, r6
 8010996:	4628      	mov	r0, r5
 8010998:	47b8      	blx	r7
 801099a:	3001      	adds	r0, #1
 801099c:	f43f aefb 	beq.w	8010796 <_printf_float+0xb6>
 80109a0:	f10a 0a01 	add.w	sl, sl, #1
 80109a4:	e7ee      	b.n	8010984 <_printf_float+0x2a4>
 80109a6:	bf00      	nop
 80109a8:	7fefffff 	.word	0x7fefffff
 80109ac:	08013ae0 	.word	0x08013ae0
 80109b0:	08013ae4 	.word	0x08013ae4
 80109b4:	08013ae8 	.word	0x08013ae8
 80109b8:	08013aec 	.word	0x08013aec
 80109bc:	08013af0 	.word	0x08013af0
 80109c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80109c2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80109c6:	4553      	cmp	r3, sl
 80109c8:	bfa8      	it	ge
 80109ca:	4653      	movge	r3, sl
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	4699      	mov	r9, r3
 80109d0:	dc36      	bgt.n	8010a40 <_printf_float+0x360>
 80109d2:	f04f 0b00 	mov.w	fp, #0
 80109d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80109da:	f104 021a 	add.w	r2, r4, #26
 80109de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80109e0:	9306      	str	r3, [sp, #24]
 80109e2:	eba3 0309 	sub.w	r3, r3, r9
 80109e6:	455b      	cmp	r3, fp
 80109e8:	dc31      	bgt.n	8010a4e <_printf_float+0x36e>
 80109ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109ec:	459a      	cmp	sl, r3
 80109ee:	dc3a      	bgt.n	8010a66 <_printf_float+0x386>
 80109f0:	6823      	ldr	r3, [r4, #0]
 80109f2:	07da      	lsls	r2, r3, #31
 80109f4:	d437      	bmi.n	8010a66 <_printf_float+0x386>
 80109f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109f8:	ebaa 0903 	sub.w	r9, sl, r3
 80109fc:	9b06      	ldr	r3, [sp, #24]
 80109fe:	ebaa 0303 	sub.w	r3, sl, r3
 8010a02:	4599      	cmp	r9, r3
 8010a04:	bfa8      	it	ge
 8010a06:	4699      	movge	r9, r3
 8010a08:	f1b9 0f00 	cmp.w	r9, #0
 8010a0c:	dc33      	bgt.n	8010a76 <_printf_float+0x396>
 8010a0e:	f04f 0800 	mov.w	r8, #0
 8010a12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010a16:	f104 0b1a 	add.w	fp, r4, #26
 8010a1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a1c:	ebaa 0303 	sub.w	r3, sl, r3
 8010a20:	eba3 0309 	sub.w	r3, r3, r9
 8010a24:	4543      	cmp	r3, r8
 8010a26:	f77f af79 	ble.w	801091c <_printf_float+0x23c>
 8010a2a:	2301      	movs	r3, #1
 8010a2c:	465a      	mov	r2, fp
 8010a2e:	4631      	mov	r1, r6
 8010a30:	4628      	mov	r0, r5
 8010a32:	47b8      	blx	r7
 8010a34:	3001      	adds	r0, #1
 8010a36:	f43f aeae 	beq.w	8010796 <_printf_float+0xb6>
 8010a3a:	f108 0801 	add.w	r8, r8, #1
 8010a3e:	e7ec      	b.n	8010a1a <_printf_float+0x33a>
 8010a40:	4642      	mov	r2, r8
 8010a42:	4631      	mov	r1, r6
 8010a44:	4628      	mov	r0, r5
 8010a46:	47b8      	blx	r7
 8010a48:	3001      	adds	r0, #1
 8010a4a:	d1c2      	bne.n	80109d2 <_printf_float+0x2f2>
 8010a4c:	e6a3      	b.n	8010796 <_printf_float+0xb6>
 8010a4e:	2301      	movs	r3, #1
 8010a50:	4631      	mov	r1, r6
 8010a52:	4628      	mov	r0, r5
 8010a54:	9206      	str	r2, [sp, #24]
 8010a56:	47b8      	blx	r7
 8010a58:	3001      	adds	r0, #1
 8010a5a:	f43f ae9c 	beq.w	8010796 <_printf_float+0xb6>
 8010a5e:	9a06      	ldr	r2, [sp, #24]
 8010a60:	f10b 0b01 	add.w	fp, fp, #1
 8010a64:	e7bb      	b.n	80109de <_printf_float+0x2fe>
 8010a66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a6a:	4631      	mov	r1, r6
 8010a6c:	4628      	mov	r0, r5
 8010a6e:	47b8      	blx	r7
 8010a70:	3001      	adds	r0, #1
 8010a72:	d1c0      	bne.n	80109f6 <_printf_float+0x316>
 8010a74:	e68f      	b.n	8010796 <_printf_float+0xb6>
 8010a76:	9a06      	ldr	r2, [sp, #24]
 8010a78:	464b      	mov	r3, r9
 8010a7a:	4442      	add	r2, r8
 8010a7c:	4631      	mov	r1, r6
 8010a7e:	4628      	mov	r0, r5
 8010a80:	47b8      	blx	r7
 8010a82:	3001      	adds	r0, #1
 8010a84:	d1c3      	bne.n	8010a0e <_printf_float+0x32e>
 8010a86:	e686      	b.n	8010796 <_printf_float+0xb6>
 8010a88:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010a8c:	f1ba 0f01 	cmp.w	sl, #1
 8010a90:	dc01      	bgt.n	8010a96 <_printf_float+0x3b6>
 8010a92:	07db      	lsls	r3, r3, #31
 8010a94:	d536      	bpl.n	8010b04 <_printf_float+0x424>
 8010a96:	2301      	movs	r3, #1
 8010a98:	4642      	mov	r2, r8
 8010a9a:	4631      	mov	r1, r6
 8010a9c:	4628      	mov	r0, r5
 8010a9e:	47b8      	blx	r7
 8010aa0:	3001      	adds	r0, #1
 8010aa2:	f43f ae78 	beq.w	8010796 <_printf_float+0xb6>
 8010aa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010aaa:	4631      	mov	r1, r6
 8010aac:	4628      	mov	r0, r5
 8010aae:	47b8      	blx	r7
 8010ab0:	3001      	adds	r0, #1
 8010ab2:	f43f ae70 	beq.w	8010796 <_printf_float+0xb6>
 8010ab6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010aba:	2200      	movs	r2, #0
 8010abc:	2300      	movs	r3, #0
 8010abe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010ac2:	f7f0 f809 	bl	8000ad8 <__aeabi_dcmpeq>
 8010ac6:	b9c0      	cbnz	r0, 8010afa <_printf_float+0x41a>
 8010ac8:	4653      	mov	r3, sl
 8010aca:	f108 0201 	add.w	r2, r8, #1
 8010ace:	4631      	mov	r1, r6
 8010ad0:	4628      	mov	r0, r5
 8010ad2:	47b8      	blx	r7
 8010ad4:	3001      	adds	r0, #1
 8010ad6:	d10c      	bne.n	8010af2 <_printf_float+0x412>
 8010ad8:	e65d      	b.n	8010796 <_printf_float+0xb6>
 8010ada:	2301      	movs	r3, #1
 8010adc:	465a      	mov	r2, fp
 8010ade:	4631      	mov	r1, r6
 8010ae0:	4628      	mov	r0, r5
 8010ae2:	47b8      	blx	r7
 8010ae4:	3001      	adds	r0, #1
 8010ae6:	f43f ae56 	beq.w	8010796 <_printf_float+0xb6>
 8010aea:	f108 0801 	add.w	r8, r8, #1
 8010aee:	45d0      	cmp	r8, sl
 8010af0:	dbf3      	blt.n	8010ada <_printf_float+0x3fa>
 8010af2:	464b      	mov	r3, r9
 8010af4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010af8:	e6df      	b.n	80108ba <_printf_float+0x1da>
 8010afa:	f04f 0800 	mov.w	r8, #0
 8010afe:	f104 0b1a 	add.w	fp, r4, #26
 8010b02:	e7f4      	b.n	8010aee <_printf_float+0x40e>
 8010b04:	2301      	movs	r3, #1
 8010b06:	4642      	mov	r2, r8
 8010b08:	e7e1      	b.n	8010ace <_printf_float+0x3ee>
 8010b0a:	2301      	movs	r3, #1
 8010b0c:	464a      	mov	r2, r9
 8010b0e:	4631      	mov	r1, r6
 8010b10:	4628      	mov	r0, r5
 8010b12:	47b8      	blx	r7
 8010b14:	3001      	adds	r0, #1
 8010b16:	f43f ae3e 	beq.w	8010796 <_printf_float+0xb6>
 8010b1a:	f108 0801 	add.w	r8, r8, #1
 8010b1e:	68e3      	ldr	r3, [r4, #12]
 8010b20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010b22:	1a5b      	subs	r3, r3, r1
 8010b24:	4543      	cmp	r3, r8
 8010b26:	dcf0      	bgt.n	8010b0a <_printf_float+0x42a>
 8010b28:	e6fc      	b.n	8010924 <_printf_float+0x244>
 8010b2a:	f04f 0800 	mov.w	r8, #0
 8010b2e:	f104 0919 	add.w	r9, r4, #25
 8010b32:	e7f4      	b.n	8010b1e <_printf_float+0x43e>

08010b34 <_printf_common>:
 8010b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b38:	4616      	mov	r6, r2
 8010b3a:	4698      	mov	r8, r3
 8010b3c:	688a      	ldr	r2, [r1, #8]
 8010b3e:	690b      	ldr	r3, [r1, #16]
 8010b40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010b44:	4293      	cmp	r3, r2
 8010b46:	bfb8      	it	lt
 8010b48:	4613      	movlt	r3, r2
 8010b4a:	6033      	str	r3, [r6, #0]
 8010b4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010b50:	4607      	mov	r7, r0
 8010b52:	460c      	mov	r4, r1
 8010b54:	b10a      	cbz	r2, 8010b5a <_printf_common+0x26>
 8010b56:	3301      	adds	r3, #1
 8010b58:	6033      	str	r3, [r6, #0]
 8010b5a:	6823      	ldr	r3, [r4, #0]
 8010b5c:	0699      	lsls	r1, r3, #26
 8010b5e:	bf42      	ittt	mi
 8010b60:	6833      	ldrmi	r3, [r6, #0]
 8010b62:	3302      	addmi	r3, #2
 8010b64:	6033      	strmi	r3, [r6, #0]
 8010b66:	6825      	ldr	r5, [r4, #0]
 8010b68:	f015 0506 	ands.w	r5, r5, #6
 8010b6c:	d106      	bne.n	8010b7c <_printf_common+0x48>
 8010b6e:	f104 0a19 	add.w	sl, r4, #25
 8010b72:	68e3      	ldr	r3, [r4, #12]
 8010b74:	6832      	ldr	r2, [r6, #0]
 8010b76:	1a9b      	subs	r3, r3, r2
 8010b78:	42ab      	cmp	r3, r5
 8010b7a:	dc26      	bgt.n	8010bca <_printf_common+0x96>
 8010b7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010b80:	6822      	ldr	r2, [r4, #0]
 8010b82:	3b00      	subs	r3, #0
 8010b84:	bf18      	it	ne
 8010b86:	2301      	movne	r3, #1
 8010b88:	0692      	lsls	r2, r2, #26
 8010b8a:	d42b      	bmi.n	8010be4 <_printf_common+0xb0>
 8010b8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010b90:	4641      	mov	r1, r8
 8010b92:	4638      	mov	r0, r7
 8010b94:	47c8      	blx	r9
 8010b96:	3001      	adds	r0, #1
 8010b98:	d01e      	beq.n	8010bd8 <_printf_common+0xa4>
 8010b9a:	6823      	ldr	r3, [r4, #0]
 8010b9c:	6922      	ldr	r2, [r4, #16]
 8010b9e:	f003 0306 	and.w	r3, r3, #6
 8010ba2:	2b04      	cmp	r3, #4
 8010ba4:	bf02      	ittt	eq
 8010ba6:	68e5      	ldreq	r5, [r4, #12]
 8010ba8:	6833      	ldreq	r3, [r6, #0]
 8010baa:	1aed      	subeq	r5, r5, r3
 8010bac:	68a3      	ldr	r3, [r4, #8]
 8010bae:	bf0c      	ite	eq
 8010bb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010bb4:	2500      	movne	r5, #0
 8010bb6:	4293      	cmp	r3, r2
 8010bb8:	bfc4      	itt	gt
 8010bba:	1a9b      	subgt	r3, r3, r2
 8010bbc:	18ed      	addgt	r5, r5, r3
 8010bbe:	2600      	movs	r6, #0
 8010bc0:	341a      	adds	r4, #26
 8010bc2:	42b5      	cmp	r5, r6
 8010bc4:	d11a      	bne.n	8010bfc <_printf_common+0xc8>
 8010bc6:	2000      	movs	r0, #0
 8010bc8:	e008      	b.n	8010bdc <_printf_common+0xa8>
 8010bca:	2301      	movs	r3, #1
 8010bcc:	4652      	mov	r2, sl
 8010bce:	4641      	mov	r1, r8
 8010bd0:	4638      	mov	r0, r7
 8010bd2:	47c8      	blx	r9
 8010bd4:	3001      	adds	r0, #1
 8010bd6:	d103      	bne.n	8010be0 <_printf_common+0xac>
 8010bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8010bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010be0:	3501      	adds	r5, #1
 8010be2:	e7c6      	b.n	8010b72 <_printf_common+0x3e>
 8010be4:	18e1      	adds	r1, r4, r3
 8010be6:	1c5a      	adds	r2, r3, #1
 8010be8:	2030      	movs	r0, #48	@ 0x30
 8010bea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010bee:	4422      	add	r2, r4
 8010bf0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010bf4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010bf8:	3302      	adds	r3, #2
 8010bfa:	e7c7      	b.n	8010b8c <_printf_common+0x58>
 8010bfc:	2301      	movs	r3, #1
 8010bfe:	4622      	mov	r2, r4
 8010c00:	4641      	mov	r1, r8
 8010c02:	4638      	mov	r0, r7
 8010c04:	47c8      	blx	r9
 8010c06:	3001      	adds	r0, #1
 8010c08:	d0e6      	beq.n	8010bd8 <_printf_common+0xa4>
 8010c0a:	3601      	adds	r6, #1
 8010c0c:	e7d9      	b.n	8010bc2 <_printf_common+0x8e>
	...

08010c10 <_printf_i>:
 8010c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010c14:	7e0f      	ldrb	r7, [r1, #24]
 8010c16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010c18:	2f78      	cmp	r7, #120	@ 0x78
 8010c1a:	4691      	mov	r9, r2
 8010c1c:	4680      	mov	r8, r0
 8010c1e:	460c      	mov	r4, r1
 8010c20:	469a      	mov	sl, r3
 8010c22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010c26:	d807      	bhi.n	8010c38 <_printf_i+0x28>
 8010c28:	2f62      	cmp	r7, #98	@ 0x62
 8010c2a:	d80a      	bhi.n	8010c42 <_printf_i+0x32>
 8010c2c:	2f00      	cmp	r7, #0
 8010c2e:	f000 80d2 	beq.w	8010dd6 <_printf_i+0x1c6>
 8010c32:	2f58      	cmp	r7, #88	@ 0x58
 8010c34:	f000 80b9 	beq.w	8010daa <_printf_i+0x19a>
 8010c38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010c3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010c40:	e03a      	b.n	8010cb8 <_printf_i+0xa8>
 8010c42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010c46:	2b15      	cmp	r3, #21
 8010c48:	d8f6      	bhi.n	8010c38 <_printf_i+0x28>
 8010c4a:	a101      	add	r1, pc, #4	@ (adr r1, 8010c50 <_printf_i+0x40>)
 8010c4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010c50:	08010ca9 	.word	0x08010ca9
 8010c54:	08010cbd 	.word	0x08010cbd
 8010c58:	08010c39 	.word	0x08010c39
 8010c5c:	08010c39 	.word	0x08010c39
 8010c60:	08010c39 	.word	0x08010c39
 8010c64:	08010c39 	.word	0x08010c39
 8010c68:	08010cbd 	.word	0x08010cbd
 8010c6c:	08010c39 	.word	0x08010c39
 8010c70:	08010c39 	.word	0x08010c39
 8010c74:	08010c39 	.word	0x08010c39
 8010c78:	08010c39 	.word	0x08010c39
 8010c7c:	08010dbd 	.word	0x08010dbd
 8010c80:	08010ce7 	.word	0x08010ce7
 8010c84:	08010d77 	.word	0x08010d77
 8010c88:	08010c39 	.word	0x08010c39
 8010c8c:	08010c39 	.word	0x08010c39
 8010c90:	08010ddf 	.word	0x08010ddf
 8010c94:	08010c39 	.word	0x08010c39
 8010c98:	08010ce7 	.word	0x08010ce7
 8010c9c:	08010c39 	.word	0x08010c39
 8010ca0:	08010c39 	.word	0x08010c39
 8010ca4:	08010d7f 	.word	0x08010d7f
 8010ca8:	6833      	ldr	r3, [r6, #0]
 8010caa:	1d1a      	adds	r2, r3, #4
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	6032      	str	r2, [r6, #0]
 8010cb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010cb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010cb8:	2301      	movs	r3, #1
 8010cba:	e09d      	b.n	8010df8 <_printf_i+0x1e8>
 8010cbc:	6833      	ldr	r3, [r6, #0]
 8010cbe:	6820      	ldr	r0, [r4, #0]
 8010cc0:	1d19      	adds	r1, r3, #4
 8010cc2:	6031      	str	r1, [r6, #0]
 8010cc4:	0606      	lsls	r6, r0, #24
 8010cc6:	d501      	bpl.n	8010ccc <_printf_i+0xbc>
 8010cc8:	681d      	ldr	r5, [r3, #0]
 8010cca:	e003      	b.n	8010cd4 <_printf_i+0xc4>
 8010ccc:	0645      	lsls	r5, r0, #25
 8010cce:	d5fb      	bpl.n	8010cc8 <_printf_i+0xb8>
 8010cd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010cd4:	2d00      	cmp	r5, #0
 8010cd6:	da03      	bge.n	8010ce0 <_printf_i+0xd0>
 8010cd8:	232d      	movs	r3, #45	@ 0x2d
 8010cda:	426d      	negs	r5, r5
 8010cdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010ce0:	4859      	ldr	r0, [pc, #356]	@ (8010e48 <_printf_i+0x238>)
 8010ce2:	230a      	movs	r3, #10
 8010ce4:	e011      	b.n	8010d0a <_printf_i+0xfa>
 8010ce6:	6821      	ldr	r1, [r4, #0]
 8010ce8:	6833      	ldr	r3, [r6, #0]
 8010cea:	0608      	lsls	r0, r1, #24
 8010cec:	f853 5b04 	ldr.w	r5, [r3], #4
 8010cf0:	d402      	bmi.n	8010cf8 <_printf_i+0xe8>
 8010cf2:	0649      	lsls	r1, r1, #25
 8010cf4:	bf48      	it	mi
 8010cf6:	b2ad      	uxthmi	r5, r5
 8010cf8:	2f6f      	cmp	r7, #111	@ 0x6f
 8010cfa:	4853      	ldr	r0, [pc, #332]	@ (8010e48 <_printf_i+0x238>)
 8010cfc:	6033      	str	r3, [r6, #0]
 8010cfe:	bf14      	ite	ne
 8010d00:	230a      	movne	r3, #10
 8010d02:	2308      	moveq	r3, #8
 8010d04:	2100      	movs	r1, #0
 8010d06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010d0a:	6866      	ldr	r6, [r4, #4]
 8010d0c:	60a6      	str	r6, [r4, #8]
 8010d0e:	2e00      	cmp	r6, #0
 8010d10:	bfa2      	ittt	ge
 8010d12:	6821      	ldrge	r1, [r4, #0]
 8010d14:	f021 0104 	bicge.w	r1, r1, #4
 8010d18:	6021      	strge	r1, [r4, #0]
 8010d1a:	b90d      	cbnz	r5, 8010d20 <_printf_i+0x110>
 8010d1c:	2e00      	cmp	r6, #0
 8010d1e:	d04b      	beq.n	8010db8 <_printf_i+0x1a8>
 8010d20:	4616      	mov	r6, r2
 8010d22:	fbb5 f1f3 	udiv	r1, r5, r3
 8010d26:	fb03 5711 	mls	r7, r3, r1, r5
 8010d2a:	5dc7      	ldrb	r7, [r0, r7]
 8010d2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010d30:	462f      	mov	r7, r5
 8010d32:	42bb      	cmp	r3, r7
 8010d34:	460d      	mov	r5, r1
 8010d36:	d9f4      	bls.n	8010d22 <_printf_i+0x112>
 8010d38:	2b08      	cmp	r3, #8
 8010d3a:	d10b      	bne.n	8010d54 <_printf_i+0x144>
 8010d3c:	6823      	ldr	r3, [r4, #0]
 8010d3e:	07df      	lsls	r7, r3, #31
 8010d40:	d508      	bpl.n	8010d54 <_printf_i+0x144>
 8010d42:	6923      	ldr	r3, [r4, #16]
 8010d44:	6861      	ldr	r1, [r4, #4]
 8010d46:	4299      	cmp	r1, r3
 8010d48:	bfde      	ittt	le
 8010d4a:	2330      	movle	r3, #48	@ 0x30
 8010d4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010d50:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010d54:	1b92      	subs	r2, r2, r6
 8010d56:	6122      	str	r2, [r4, #16]
 8010d58:	f8cd a000 	str.w	sl, [sp]
 8010d5c:	464b      	mov	r3, r9
 8010d5e:	aa03      	add	r2, sp, #12
 8010d60:	4621      	mov	r1, r4
 8010d62:	4640      	mov	r0, r8
 8010d64:	f7ff fee6 	bl	8010b34 <_printf_common>
 8010d68:	3001      	adds	r0, #1
 8010d6a:	d14a      	bne.n	8010e02 <_printf_i+0x1f2>
 8010d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8010d70:	b004      	add	sp, #16
 8010d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d76:	6823      	ldr	r3, [r4, #0]
 8010d78:	f043 0320 	orr.w	r3, r3, #32
 8010d7c:	6023      	str	r3, [r4, #0]
 8010d7e:	4833      	ldr	r0, [pc, #204]	@ (8010e4c <_printf_i+0x23c>)
 8010d80:	2778      	movs	r7, #120	@ 0x78
 8010d82:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010d86:	6823      	ldr	r3, [r4, #0]
 8010d88:	6831      	ldr	r1, [r6, #0]
 8010d8a:	061f      	lsls	r7, r3, #24
 8010d8c:	f851 5b04 	ldr.w	r5, [r1], #4
 8010d90:	d402      	bmi.n	8010d98 <_printf_i+0x188>
 8010d92:	065f      	lsls	r7, r3, #25
 8010d94:	bf48      	it	mi
 8010d96:	b2ad      	uxthmi	r5, r5
 8010d98:	6031      	str	r1, [r6, #0]
 8010d9a:	07d9      	lsls	r1, r3, #31
 8010d9c:	bf44      	itt	mi
 8010d9e:	f043 0320 	orrmi.w	r3, r3, #32
 8010da2:	6023      	strmi	r3, [r4, #0]
 8010da4:	b11d      	cbz	r5, 8010dae <_printf_i+0x19e>
 8010da6:	2310      	movs	r3, #16
 8010da8:	e7ac      	b.n	8010d04 <_printf_i+0xf4>
 8010daa:	4827      	ldr	r0, [pc, #156]	@ (8010e48 <_printf_i+0x238>)
 8010dac:	e7e9      	b.n	8010d82 <_printf_i+0x172>
 8010dae:	6823      	ldr	r3, [r4, #0]
 8010db0:	f023 0320 	bic.w	r3, r3, #32
 8010db4:	6023      	str	r3, [r4, #0]
 8010db6:	e7f6      	b.n	8010da6 <_printf_i+0x196>
 8010db8:	4616      	mov	r6, r2
 8010dba:	e7bd      	b.n	8010d38 <_printf_i+0x128>
 8010dbc:	6833      	ldr	r3, [r6, #0]
 8010dbe:	6825      	ldr	r5, [r4, #0]
 8010dc0:	6961      	ldr	r1, [r4, #20]
 8010dc2:	1d18      	adds	r0, r3, #4
 8010dc4:	6030      	str	r0, [r6, #0]
 8010dc6:	062e      	lsls	r6, r5, #24
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	d501      	bpl.n	8010dd0 <_printf_i+0x1c0>
 8010dcc:	6019      	str	r1, [r3, #0]
 8010dce:	e002      	b.n	8010dd6 <_printf_i+0x1c6>
 8010dd0:	0668      	lsls	r0, r5, #25
 8010dd2:	d5fb      	bpl.n	8010dcc <_printf_i+0x1bc>
 8010dd4:	8019      	strh	r1, [r3, #0]
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	6123      	str	r3, [r4, #16]
 8010dda:	4616      	mov	r6, r2
 8010ddc:	e7bc      	b.n	8010d58 <_printf_i+0x148>
 8010dde:	6833      	ldr	r3, [r6, #0]
 8010de0:	1d1a      	adds	r2, r3, #4
 8010de2:	6032      	str	r2, [r6, #0]
 8010de4:	681e      	ldr	r6, [r3, #0]
 8010de6:	6862      	ldr	r2, [r4, #4]
 8010de8:	2100      	movs	r1, #0
 8010dea:	4630      	mov	r0, r6
 8010dec:	f7ef f9f8 	bl	80001e0 <memchr>
 8010df0:	b108      	cbz	r0, 8010df6 <_printf_i+0x1e6>
 8010df2:	1b80      	subs	r0, r0, r6
 8010df4:	6060      	str	r0, [r4, #4]
 8010df6:	6863      	ldr	r3, [r4, #4]
 8010df8:	6123      	str	r3, [r4, #16]
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010e00:	e7aa      	b.n	8010d58 <_printf_i+0x148>
 8010e02:	6923      	ldr	r3, [r4, #16]
 8010e04:	4632      	mov	r2, r6
 8010e06:	4649      	mov	r1, r9
 8010e08:	4640      	mov	r0, r8
 8010e0a:	47d0      	blx	sl
 8010e0c:	3001      	adds	r0, #1
 8010e0e:	d0ad      	beq.n	8010d6c <_printf_i+0x15c>
 8010e10:	6823      	ldr	r3, [r4, #0]
 8010e12:	079b      	lsls	r3, r3, #30
 8010e14:	d413      	bmi.n	8010e3e <_printf_i+0x22e>
 8010e16:	68e0      	ldr	r0, [r4, #12]
 8010e18:	9b03      	ldr	r3, [sp, #12]
 8010e1a:	4298      	cmp	r0, r3
 8010e1c:	bfb8      	it	lt
 8010e1e:	4618      	movlt	r0, r3
 8010e20:	e7a6      	b.n	8010d70 <_printf_i+0x160>
 8010e22:	2301      	movs	r3, #1
 8010e24:	4632      	mov	r2, r6
 8010e26:	4649      	mov	r1, r9
 8010e28:	4640      	mov	r0, r8
 8010e2a:	47d0      	blx	sl
 8010e2c:	3001      	adds	r0, #1
 8010e2e:	d09d      	beq.n	8010d6c <_printf_i+0x15c>
 8010e30:	3501      	adds	r5, #1
 8010e32:	68e3      	ldr	r3, [r4, #12]
 8010e34:	9903      	ldr	r1, [sp, #12]
 8010e36:	1a5b      	subs	r3, r3, r1
 8010e38:	42ab      	cmp	r3, r5
 8010e3a:	dcf2      	bgt.n	8010e22 <_printf_i+0x212>
 8010e3c:	e7eb      	b.n	8010e16 <_printf_i+0x206>
 8010e3e:	2500      	movs	r5, #0
 8010e40:	f104 0619 	add.w	r6, r4, #25
 8010e44:	e7f5      	b.n	8010e32 <_printf_i+0x222>
 8010e46:	bf00      	nop
 8010e48:	08013af2 	.word	0x08013af2
 8010e4c:	08013b03 	.word	0x08013b03

08010e50 <std>:
 8010e50:	2300      	movs	r3, #0
 8010e52:	b510      	push	{r4, lr}
 8010e54:	4604      	mov	r4, r0
 8010e56:	e9c0 3300 	strd	r3, r3, [r0]
 8010e5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010e5e:	6083      	str	r3, [r0, #8]
 8010e60:	8181      	strh	r1, [r0, #12]
 8010e62:	6643      	str	r3, [r0, #100]	@ 0x64
 8010e64:	81c2      	strh	r2, [r0, #14]
 8010e66:	6183      	str	r3, [r0, #24]
 8010e68:	4619      	mov	r1, r3
 8010e6a:	2208      	movs	r2, #8
 8010e6c:	305c      	adds	r0, #92	@ 0x5c
 8010e6e:	f000 f914 	bl	801109a <memset>
 8010e72:	4b0d      	ldr	r3, [pc, #52]	@ (8010ea8 <std+0x58>)
 8010e74:	6263      	str	r3, [r4, #36]	@ 0x24
 8010e76:	4b0d      	ldr	r3, [pc, #52]	@ (8010eac <std+0x5c>)
 8010e78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8010eb0 <std+0x60>)
 8010e7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8010eb4 <std+0x64>)
 8010e80:	6323      	str	r3, [r4, #48]	@ 0x30
 8010e82:	4b0d      	ldr	r3, [pc, #52]	@ (8010eb8 <std+0x68>)
 8010e84:	6224      	str	r4, [r4, #32]
 8010e86:	429c      	cmp	r4, r3
 8010e88:	d006      	beq.n	8010e98 <std+0x48>
 8010e8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010e8e:	4294      	cmp	r4, r2
 8010e90:	d002      	beq.n	8010e98 <std+0x48>
 8010e92:	33d0      	adds	r3, #208	@ 0xd0
 8010e94:	429c      	cmp	r4, r3
 8010e96:	d105      	bne.n	8010ea4 <std+0x54>
 8010e98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ea0:	f000 b996 	b.w	80111d0 <__retarget_lock_init_recursive>
 8010ea4:	bd10      	pop	{r4, pc}
 8010ea6:	bf00      	nop
 8010ea8:	08011015 	.word	0x08011015
 8010eac:	08011037 	.word	0x08011037
 8010eb0:	0801106f 	.word	0x0801106f
 8010eb4:	08011093 	.word	0x08011093
 8010eb8:	20001dec 	.word	0x20001dec

08010ebc <stdio_exit_handler>:
 8010ebc:	4a02      	ldr	r2, [pc, #8]	@ (8010ec8 <stdio_exit_handler+0xc>)
 8010ebe:	4903      	ldr	r1, [pc, #12]	@ (8010ecc <stdio_exit_handler+0x10>)
 8010ec0:	4803      	ldr	r0, [pc, #12]	@ (8010ed0 <stdio_exit_handler+0x14>)
 8010ec2:	f000 b869 	b.w	8010f98 <_fwalk_sglue>
 8010ec6:	bf00      	nop
 8010ec8:	2000015c 	.word	0x2000015c
 8010ecc:	080129e1 	.word	0x080129e1
 8010ed0:	2000016c 	.word	0x2000016c

08010ed4 <cleanup_stdio>:
 8010ed4:	6841      	ldr	r1, [r0, #4]
 8010ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8010f08 <cleanup_stdio+0x34>)
 8010ed8:	4299      	cmp	r1, r3
 8010eda:	b510      	push	{r4, lr}
 8010edc:	4604      	mov	r4, r0
 8010ede:	d001      	beq.n	8010ee4 <cleanup_stdio+0x10>
 8010ee0:	f001 fd7e 	bl	80129e0 <_fflush_r>
 8010ee4:	68a1      	ldr	r1, [r4, #8]
 8010ee6:	4b09      	ldr	r3, [pc, #36]	@ (8010f0c <cleanup_stdio+0x38>)
 8010ee8:	4299      	cmp	r1, r3
 8010eea:	d002      	beq.n	8010ef2 <cleanup_stdio+0x1e>
 8010eec:	4620      	mov	r0, r4
 8010eee:	f001 fd77 	bl	80129e0 <_fflush_r>
 8010ef2:	68e1      	ldr	r1, [r4, #12]
 8010ef4:	4b06      	ldr	r3, [pc, #24]	@ (8010f10 <cleanup_stdio+0x3c>)
 8010ef6:	4299      	cmp	r1, r3
 8010ef8:	d004      	beq.n	8010f04 <cleanup_stdio+0x30>
 8010efa:	4620      	mov	r0, r4
 8010efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f00:	f001 bd6e 	b.w	80129e0 <_fflush_r>
 8010f04:	bd10      	pop	{r4, pc}
 8010f06:	bf00      	nop
 8010f08:	20001dec 	.word	0x20001dec
 8010f0c:	20001e54 	.word	0x20001e54
 8010f10:	20001ebc 	.word	0x20001ebc

08010f14 <global_stdio_init.part.0>:
 8010f14:	b510      	push	{r4, lr}
 8010f16:	4b0b      	ldr	r3, [pc, #44]	@ (8010f44 <global_stdio_init.part.0+0x30>)
 8010f18:	4c0b      	ldr	r4, [pc, #44]	@ (8010f48 <global_stdio_init.part.0+0x34>)
 8010f1a:	4a0c      	ldr	r2, [pc, #48]	@ (8010f4c <global_stdio_init.part.0+0x38>)
 8010f1c:	601a      	str	r2, [r3, #0]
 8010f1e:	4620      	mov	r0, r4
 8010f20:	2200      	movs	r2, #0
 8010f22:	2104      	movs	r1, #4
 8010f24:	f7ff ff94 	bl	8010e50 <std>
 8010f28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010f2c:	2201      	movs	r2, #1
 8010f2e:	2109      	movs	r1, #9
 8010f30:	f7ff ff8e 	bl	8010e50 <std>
 8010f34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010f38:	2202      	movs	r2, #2
 8010f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f3e:	2112      	movs	r1, #18
 8010f40:	f7ff bf86 	b.w	8010e50 <std>
 8010f44:	20001f24 	.word	0x20001f24
 8010f48:	20001dec 	.word	0x20001dec
 8010f4c:	08010ebd 	.word	0x08010ebd

08010f50 <__sfp_lock_acquire>:
 8010f50:	4801      	ldr	r0, [pc, #4]	@ (8010f58 <__sfp_lock_acquire+0x8>)
 8010f52:	f000 b93e 	b.w	80111d2 <__retarget_lock_acquire_recursive>
 8010f56:	bf00      	nop
 8010f58:	20001f2d 	.word	0x20001f2d

08010f5c <__sfp_lock_release>:
 8010f5c:	4801      	ldr	r0, [pc, #4]	@ (8010f64 <__sfp_lock_release+0x8>)
 8010f5e:	f000 b939 	b.w	80111d4 <__retarget_lock_release_recursive>
 8010f62:	bf00      	nop
 8010f64:	20001f2d 	.word	0x20001f2d

08010f68 <__sinit>:
 8010f68:	b510      	push	{r4, lr}
 8010f6a:	4604      	mov	r4, r0
 8010f6c:	f7ff fff0 	bl	8010f50 <__sfp_lock_acquire>
 8010f70:	6a23      	ldr	r3, [r4, #32]
 8010f72:	b11b      	cbz	r3, 8010f7c <__sinit+0x14>
 8010f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f78:	f7ff bff0 	b.w	8010f5c <__sfp_lock_release>
 8010f7c:	4b04      	ldr	r3, [pc, #16]	@ (8010f90 <__sinit+0x28>)
 8010f7e:	6223      	str	r3, [r4, #32]
 8010f80:	4b04      	ldr	r3, [pc, #16]	@ (8010f94 <__sinit+0x2c>)
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d1f5      	bne.n	8010f74 <__sinit+0xc>
 8010f88:	f7ff ffc4 	bl	8010f14 <global_stdio_init.part.0>
 8010f8c:	e7f2      	b.n	8010f74 <__sinit+0xc>
 8010f8e:	bf00      	nop
 8010f90:	08010ed5 	.word	0x08010ed5
 8010f94:	20001f24 	.word	0x20001f24

08010f98 <_fwalk_sglue>:
 8010f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f9c:	4607      	mov	r7, r0
 8010f9e:	4688      	mov	r8, r1
 8010fa0:	4614      	mov	r4, r2
 8010fa2:	2600      	movs	r6, #0
 8010fa4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010fa8:	f1b9 0901 	subs.w	r9, r9, #1
 8010fac:	d505      	bpl.n	8010fba <_fwalk_sglue+0x22>
 8010fae:	6824      	ldr	r4, [r4, #0]
 8010fb0:	2c00      	cmp	r4, #0
 8010fb2:	d1f7      	bne.n	8010fa4 <_fwalk_sglue+0xc>
 8010fb4:	4630      	mov	r0, r6
 8010fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fba:	89ab      	ldrh	r3, [r5, #12]
 8010fbc:	2b01      	cmp	r3, #1
 8010fbe:	d907      	bls.n	8010fd0 <_fwalk_sglue+0x38>
 8010fc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010fc4:	3301      	adds	r3, #1
 8010fc6:	d003      	beq.n	8010fd0 <_fwalk_sglue+0x38>
 8010fc8:	4629      	mov	r1, r5
 8010fca:	4638      	mov	r0, r7
 8010fcc:	47c0      	blx	r8
 8010fce:	4306      	orrs	r6, r0
 8010fd0:	3568      	adds	r5, #104	@ 0x68
 8010fd2:	e7e9      	b.n	8010fa8 <_fwalk_sglue+0x10>

08010fd4 <siprintf>:
 8010fd4:	b40e      	push	{r1, r2, r3}
 8010fd6:	b500      	push	{lr}
 8010fd8:	b09c      	sub	sp, #112	@ 0x70
 8010fda:	ab1d      	add	r3, sp, #116	@ 0x74
 8010fdc:	9002      	str	r0, [sp, #8]
 8010fde:	9006      	str	r0, [sp, #24]
 8010fe0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010fe4:	4809      	ldr	r0, [pc, #36]	@ (801100c <siprintf+0x38>)
 8010fe6:	9107      	str	r1, [sp, #28]
 8010fe8:	9104      	str	r1, [sp, #16]
 8010fea:	4909      	ldr	r1, [pc, #36]	@ (8011010 <siprintf+0x3c>)
 8010fec:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ff0:	9105      	str	r1, [sp, #20]
 8010ff2:	6800      	ldr	r0, [r0, #0]
 8010ff4:	9301      	str	r3, [sp, #4]
 8010ff6:	a902      	add	r1, sp, #8
 8010ff8:	f001 fb72 	bl	80126e0 <_svfiprintf_r>
 8010ffc:	9b02      	ldr	r3, [sp, #8]
 8010ffe:	2200      	movs	r2, #0
 8011000:	701a      	strb	r2, [r3, #0]
 8011002:	b01c      	add	sp, #112	@ 0x70
 8011004:	f85d eb04 	ldr.w	lr, [sp], #4
 8011008:	b003      	add	sp, #12
 801100a:	4770      	bx	lr
 801100c:	20000168 	.word	0x20000168
 8011010:	ffff0208 	.word	0xffff0208

08011014 <__sread>:
 8011014:	b510      	push	{r4, lr}
 8011016:	460c      	mov	r4, r1
 8011018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801101c:	f000 f87a 	bl	8011114 <_read_r>
 8011020:	2800      	cmp	r0, #0
 8011022:	bfab      	itete	ge
 8011024:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011026:	89a3      	ldrhlt	r3, [r4, #12]
 8011028:	181b      	addge	r3, r3, r0
 801102a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801102e:	bfac      	ite	ge
 8011030:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011032:	81a3      	strhlt	r3, [r4, #12]
 8011034:	bd10      	pop	{r4, pc}

08011036 <__swrite>:
 8011036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801103a:	461f      	mov	r7, r3
 801103c:	898b      	ldrh	r3, [r1, #12]
 801103e:	05db      	lsls	r3, r3, #23
 8011040:	4605      	mov	r5, r0
 8011042:	460c      	mov	r4, r1
 8011044:	4616      	mov	r6, r2
 8011046:	d505      	bpl.n	8011054 <__swrite+0x1e>
 8011048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801104c:	2302      	movs	r3, #2
 801104e:	2200      	movs	r2, #0
 8011050:	f000 f84e 	bl	80110f0 <_lseek_r>
 8011054:	89a3      	ldrh	r3, [r4, #12]
 8011056:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801105a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801105e:	81a3      	strh	r3, [r4, #12]
 8011060:	4632      	mov	r2, r6
 8011062:	463b      	mov	r3, r7
 8011064:	4628      	mov	r0, r5
 8011066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801106a:	f000 b875 	b.w	8011158 <_write_r>

0801106e <__sseek>:
 801106e:	b510      	push	{r4, lr}
 8011070:	460c      	mov	r4, r1
 8011072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011076:	f000 f83b 	bl	80110f0 <_lseek_r>
 801107a:	1c43      	adds	r3, r0, #1
 801107c:	89a3      	ldrh	r3, [r4, #12]
 801107e:	bf15      	itete	ne
 8011080:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011082:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011086:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801108a:	81a3      	strheq	r3, [r4, #12]
 801108c:	bf18      	it	ne
 801108e:	81a3      	strhne	r3, [r4, #12]
 8011090:	bd10      	pop	{r4, pc}

08011092 <__sclose>:
 8011092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011096:	f000 b81b 	b.w	80110d0 <_close_r>

0801109a <memset>:
 801109a:	4402      	add	r2, r0
 801109c:	4603      	mov	r3, r0
 801109e:	4293      	cmp	r3, r2
 80110a0:	d100      	bne.n	80110a4 <memset+0xa>
 80110a2:	4770      	bx	lr
 80110a4:	f803 1b01 	strb.w	r1, [r3], #1
 80110a8:	e7f9      	b.n	801109e <memset+0x4>

080110aa <strcat>:
 80110aa:	b510      	push	{r4, lr}
 80110ac:	4602      	mov	r2, r0
 80110ae:	7814      	ldrb	r4, [r2, #0]
 80110b0:	4613      	mov	r3, r2
 80110b2:	3201      	adds	r2, #1
 80110b4:	2c00      	cmp	r4, #0
 80110b6:	d1fa      	bne.n	80110ae <strcat+0x4>
 80110b8:	3b01      	subs	r3, #1
 80110ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80110be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80110c2:	2a00      	cmp	r2, #0
 80110c4:	d1f9      	bne.n	80110ba <strcat+0x10>
 80110c6:	bd10      	pop	{r4, pc}

080110c8 <_localeconv_r>:
 80110c8:	4800      	ldr	r0, [pc, #0]	@ (80110cc <_localeconv_r+0x4>)
 80110ca:	4770      	bx	lr
 80110cc:	200002a8 	.word	0x200002a8

080110d0 <_close_r>:
 80110d0:	b538      	push	{r3, r4, r5, lr}
 80110d2:	4d06      	ldr	r5, [pc, #24]	@ (80110ec <_close_r+0x1c>)
 80110d4:	2300      	movs	r3, #0
 80110d6:	4604      	mov	r4, r0
 80110d8:	4608      	mov	r0, r1
 80110da:	602b      	str	r3, [r5, #0]
 80110dc:	f7f2 f882 	bl	80031e4 <_close>
 80110e0:	1c43      	adds	r3, r0, #1
 80110e2:	d102      	bne.n	80110ea <_close_r+0x1a>
 80110e4:	682b      	ldr	r3, [r5, #0]
 80110e6:	b103      	cbz	r3, 80110ea <_close_r+0x1a>
 80110e8:	6023      	str	r3, [r4, #0]
 80110ea:	bd38      	pop	{r3, r4, r5, pc}
 80110ec:	20001f28 	.word	0x20001f28

080110f0 <_lseek_r>:
 80110f0:	b538      	push	{r3, r4, r5, lr}
 80110f2:	4d07      	ldr	r5, [pc, #28]	@ (8011110 <_lseek_r+0x20>)
 80110f4:	4604      	mov	r4, r0
 80110f6:	4608      	mov	r0, r1
 80110f8:	4611      	mov	r1, r2
 80110fa:	2200      	movs	r2, #0
 80110fc:	602a      	str	r2, [r5, #0]
 80110fe:	461a      	mov	r2, r3
 8011100:	f7f2 f897 	bl	8003232 <_lseek>
 8011104:	1c43      	adds	r3, r0, #1
 8011106:	d102      	bne.n	801110e <_lseek_r+0x1e>
 8011108:	682b      	ldr	r3, [r5, #0]
 801110a:	b103      	cbz	r3, 801110e <_lseek_r+0x1e>
 801110c:	6023      	str	r3, [r4, #0]
 801110e:	bd38      	pop	{r3, r4, r5, pc}
 8011110:	20001f28 	.word	0x20001f28

08011114 <_read_r>:
 8011114:	b538      	push	{r3, r4, r5, lr}
 8011116:	4d07      	ldr	r5, [pc, #28]	@ (8011134 <_read_r+0x20>)
 8011118:	4604      	mov	r4, r0
 801111a:	4608      	mov	r0, r1
 801111c:	4611      	mov	r1, r2
 801111e:	2200      	movs	r2, #0
 8011120:	602a      	str	r2, [r5, #0]
 8011122:	461a      	mov	r2, r3
 8011124:	f7f2 f825 	bl	8003172 <_read>
 8011128:	1c43      	adds	r3, r0, #1
 801112a:	d102      	bne.n	8011132 <_read_r+0x1e>
 801112c:	682b      	ldr	r3, [r5, #0]
 801112e:	b103      	cbz	r3, 8011132 <_read_r+0x1e>
 8011130:	6023      	str	r3, [r4, #0]
 8011132:	bd38      	pop	{r3, r4, r5, pc}
 8011134:	20001f28 	.word	0x20001f28

08011138 <_sbrk_r>:
 8011138:	b538      	push	{r3, r4, r5, lr}
 801113a:	4d06      	ldr	r5, [pc, #24]	@ (8011154 <_sbrk_r+0x1c>)
 801113c:	2300      	movs	r3, #0
 801113e:	4604      	mov	r4, r0
 8011140:	4608      	mov	r0, r1
 8011142:	602b      	str	r3, [r5, #0]
 8011144:	f7f2 f882 	bl	800324c <_sbrk>
 8011148:	1c43      	adds	r3, r0, #1
 801114a:	d102      	bne.n	8011152 <_sbrk_r+0x1a>
 801114c:	682b      	ldr	r3, [r5, #0]
 801114e:	b103      	cbz	r3, 8011152 <_sbrk_r+0x1a>
 8011150:	6023      	str	r3, [r4, #0]
 8011152:	bd38      	pop	{r3, r4, r5, pc}
 8011154:	20001f28 	.word	0x20001f28

08011158 <_write_r>:
 8011158:	b538      	push	{r3, r4, r5, lr}
 801115a:	4d07      	ldr	r5, [pc, #28]	@ (8011178 <_write_r+0x20>)
 801115c:	4604      	mov	r4, r0
 801115e:	4608      	mov	r0, r1
 8011160:	4611      	mov	r1, r2
 8011162:	2200      	movs	r2, #0
 8011164:	602a      	str	r2, [r5, #0]
 8011166:	461a      	mov	r2, r3
 8011168:	f7f2 f820 	bl	80031ac <_write>
 801116c:	1c43      	adds	r3, r0, #1
 801116e:	d102      	bne.n	8011176 <_write_r+0x1e>
 8011170:	682b      	ldr	r3, [r5, #0]
 8011172:	b103      	cbz	r3, 8011176 <_write_r+0x1e>
 8011174:	6023      	str	r3, [r4, #0]
 8011176:	bd38      	pop	{r3, r4, r5, pc}
 8011178:	20001f28 	.word	0x20001f28

0801117c <__errno>:
 801117c:	4b01      	ldr	r3, [pc, #4]	@ (8011184 <__errno+0x8>)
 801117e:	6818      	ldr	r0, [r3, #0]
 8011180:	4770      	bx	lr
 8011182:	bf00      	nop
 8011184:	20000168 	.word	0x20000168

08011188 <__libc_init_array>:
 8011188:	b570      	push	{r4, r5, r6, lr}
 801118a:	4d0d      	ldr	r5, [pc, #52]	@ (80111c0 <__libc_init_array+0x38>)
 801118c:	4c0d      	ldr	r4, [pc, #52]	@ (80111c4 <__libc_init_array+0x3c>)
 801118e:	1b64      	subs	r4, r4, r5
 8011190:	10a4      	asrs	r4, r4, #2
 8011192:	2600      	movs	r6, #0
 8011194:	42a6      	cmp	r6, r4
 8011196:	d109      	bne.n	80111ac <__libc_init_array+0x24>
 8011198:	4d0b      	ldr	r5, [pc, #44]	@ (80111c8 <__libc_init_array+0x40>)
 801119a:	4c0c      	ldr	r4, [pc, #48]	@ (80111cc <__libc_init_array+0x44>)
 801119c:	f002 fa46 	bl	801362c <_init>
 80111a0:	1b64      	subs	r4, r4, r5
 80111a2:	10a4      	asrs	r4, r4, #2
 80111a4:	2600      	movs	r6, #0
 80111a6:	42a6      	cmp	r6, r4
 80111a8:	d105      	bne.n	80111b6 <__libc_init_array+0x2e>
 80111aa:	bd70      	pop	{r4, r5, r6, pc}
 80111ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80111b0:	4798      	blx	r3
 80111b2:	3601      	adds	r6, #1
 80111b4:	e7ee      	b.n	8011194 <__libc_init_array+0xc>
 80111b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80111ba:	4798      	blx	r3
 80111bc:	3601      	adds	r6, #1
 80111be:	e7f2      	b.n	80111a6 <__libc_init_array+0x1e>
 80111c0:	08013e98 	.word	0x08013e98
 80111c4:	08013e98 	.word	0x08013e98
 80111c8:	08013e98 	.word	0x08013e98
 80111cc:	08013e9c 	.word	0x08013e9c

080111d0 <__retarget_lock_init_recursive>:
 80111d0:	4770      	bx	lr

080111d2 <__retarget_lock_acquire_recursive>:
 80111d2:	4770      	bx	lr

080111d4 <__retarget_lock_release_recursive>:
 80111d4:	4770      	bx	lr

080111d6 <memcpy>:
 80111d6:	440a      	add	r2, r1
 80111d8:	4291      	cmp	r1, r2
 80111da:	f100 33ff 	add.w	r3, r0, #4294967295
 80111de:	d100      	bne.n	80111e2 <memcpy+0xc>
 80111e0:	4770      	bx	lr
 80111e2:	b510      	push	{r4, lr}
 80111e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80111e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80111ec:	4291      	cmp	r1, r2
 80111ee:	d1f9      	bne.n	80111e4 <memcpy+0xe>
 80111f0:	bd10      	pop	{r4, pc}

080111f2 <quorem>:
 80111f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111f6:	6903      	ldr	r3, [r0, #16]
 80111f8:	690c      	ldr	r4, [r1, #16]
 80111fa:	42a3      	cmp	r3, r4
 80111fc:	4607      	mov	r7, r0
 80111fe:	db7e      	blt.n	80112fe <quorem+0x10c>
 8011200:	3c01      	subs	r4, #1
 8011202:	f101 0814 	add.w	r8, r1, #20
 8011206:	00a3      	lsls	r3, r4, #2
 8011208:	f100 0514 	add.w	r5, r0, #20
 801120c:	9300      	str	r3, [sp, #0]
 801120e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011212:	9301      	str	r3, [sp, #4]
 8011214:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011218:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801121c:	3301      	adds	r3, #1
 801121e:	429a      	cmp	r2, r3
 8011220:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011224:	fbb2 f6f3 	udiv	r6, r2, r3
 8011228:	d32e      	bcc.n	8011288 <quorem+0x96>
 801122a:	f04f 0a00 	mov.w	sl, #0
 801122e:	46c4      	mov	ip, r8
 8011230:	46ae      	mov	lr, r5
 8011232:	46d3      	mov	fp, sl
 8011234:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011238:	b298      	uxth	r0, r3
 801123a:	fb06 a000 	mla	r0, r6, r0, sl
 801123e:	0c02      	lsrs	r2, r0, #16
 8011240:	0c1b      	lsrs	r3, r3, #16
 8011242:	fb06 2303 	mla	r3, r6, r3, r2
 8011246:	f8de 2000 	ldr.w	r2, [lr]
 801124a:	b280      	uxth	r0, r0
 801124c:	b292      	uxth	r2, r2
 801124e:	1a12      	subs	r2, r2, r0
 8011250:	445a      	add	r2, fp
 8011252:	f8de 0000 	ldr.w	r0, [lr]
 8011256:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801125a:	b29b      	uxth	r3, r3
 801125c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011260:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011264:	b292      	uxth	r2, r2
 8011266:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801126a:	45e1      	cmp	r9, ip
 801126c:	f84e 2b04 	str.w	r2, [lr], #4
 8011270:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011274:	d2de      	bcs.n	8011234 <quorem+0x42>
 8011276:	9b00      	ldr	r3, [sp, #0]
 8011278:	58eb      	ldr	r3, [r5, r3]
 801127a:	b92b      	cbnz	r3, 8011288 <quorem+0x96>
 801127c:	9b01      	ldr	r3, [sp, #4]
 801127e:	3b04      	subs	r3, #4
 8011280:	429d      	cmp	r5, r3
 8011282:	461a      	mov	r2, r3
 8011284:	d32f      	bcc.n	80112e6 <quorem+0xf4>
 8011286:	613c      	str	r4, [r7, #16]
 8011288:	4638      	mov	r0, r7
 801128a:	f001 f8c5 	bl	8012418 <__mcmp>
 801128e:	2800      	cmp	r0, #0
 8011290:	db25      	blt.n	80112de <quorem+0xec>
 8011292:	4629      	mov	r1, r5
 8011294:	2000      	movs	r0, #0
 8011296:	f858 2b04 	ldr.w	r2, [r8], #4
 801129a:	f8d1 c000 	ldr.w	ip, [r1]
 801129e:	fa1f fe82 	uxth.w	lr, r2
 80112a2:	fa1f f38c 	uxth.w	r3, ip
 80112a6:	eba3 030e 	sub.w	r3, r3, lr
 80112aa:	4403      	add	r3, r0
 80112ac:	0c12      	lsrs	r2, r2, #16
 80112ae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80112b2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80112b6:	b29b      	uxth	r3, r3
 80112b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80112bc:	45c1      	cmp	r9, r8
 80112be:	f841 3b04 	str.w	r3, [r1], #4
 80112c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80112c6:	d2e6      	bcs.n	8011296 <quorem+0xa4>
 80112c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80112cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80112d0:	b922      	cbnz	r2, 80112dc <quorem+0xea>
 80112d2:	3b04      	subs	r3, #4
 80112d4:	429d      	cmp	r5, r3
 80112d6:	461a      	mov	r2, r3
 80112d8:	d30b      	bcc.n	80112f2 <quorem+0x100>
 80112da:	613c      	str	r4, [r7, #16]
 80112dc:	3601      	adds	r6, #1
 80112de:	4630      	mov	r0, r6
 80112e0:	b003      	add	sp, #12
 80112e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112e6:	6812      	ldr	r2, [r2, #0]
 80112e8:	3b04      	subs	r3, #4
 80112ea:	2a00      	cmp	r2, #0
 80112ec:	d1cb      	bne.n	8011286 <quorem+0x94>
 80112ee:	3c01      	subs	r4, #1
 80112f0:	e7c6      	b.n	8011280 <quorem+0x8e>
 80112f2:	6812      	ldr	r2, [r2, #0]
 80112f4:	3b04      	subs	r3, #4
 80112f6:	2a00      	cmp	r2, #0
 80112f8:	d1ef      	bne.n	80112da <quorem+0xe8>
 80112fa:	3c01      	subs	r4, #1
 80112fc:	e7ea      	b.n	80112d4 <quorem+0xe2>
 80112fe:	2000      	movs	r0, #0
 8011300:	e7ee      	b.n	80112e0 <quorem+0xee>
 8011302:	0000      	movs	r0, r0
 8011304:	0000      	movs	r0, r0
	...

08011308 <_dtoa_r>:
 8011308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801130c:	69c7      	ldr	r7, [r0, #28]
 801130e:	b099      	sub	sp, #100	@ 0x64
 8011310:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011314:	ec55 4b10 	vmov	r4, r5, d0
 8011318:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801131a:	9109      	str	r1, [sp, #36]	@ 0x24
 801131c:	4683      	mov	fp, r0
 801131e:	920e      	str	r2, [sp, #56]	@ 0x38
 8011320:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011322:	b97f      	cbnz	r7, 8011344 <_dtoa_r+0x3c>
 8011324:	2010      	movs	r0, #16
 8011326:	f7ff f87d 	bl	8010424 <malloc>
 801132a:	4602      	mov	r2, r0
 801132c:	f8cb 001c 	str.w	r0, [fp, #28]
 8011330:	b920      	cbnz	r0, 801133c <_dtoa_r+0x34>
 8011332:	4ba7      	ldr	r3, [pc, #668]	@ (80115d0 <_dtoa_r+0x2c8>)
 8011334:	21ef      	movs	r1, #239	@ 0xef
 8011336:	48a7      	ldr	r0, [pc, #668]	@ (80115d4 <_dtoa_r+0x2cc>)
 8011338:	f001 fb94 	bl	8012a64 <__assert_func>
 801133c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011340:	6007      	str	r7, [r0, #0]
 8011342:	60c7      	str	r7, [r0, #12]
 8011344:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011348:	6819      	ldr	r1, [r3, #0]
 801134a:	b159      	cbz	r1, 8011364 <_dtoa_r+0x5c>
 801134c:	685a      	ldr	r2, [r3, #4]
 801134e:	604a      	str	r2, [r1, #4]
 8011350:	2301      	movs	r3, #1
 8011352:	4093      	lsls	r3, r2
 8011354:	608b      	str	r3, [r1, #8]
 8011356:	4658      	mov	r0, fp
 8011358:	f000 fe24 	bl	8011fa4 <_Bfree>
 801135c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011360:	2200      	movs	r2, #0
 8011362:	601a      	str	r2, [r3, #0]
 8011364:	1e2b      	subs	r3, r5, #0
 8011366:	bfb9      	ittee	lt
 8011368:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801136c:	9303      	strlt	r3, [sp, #12]
 801136e:	2300      	movge	r3, #0
 8011370:	6033      	strge	r3, [r6, #0]
 8011372:	9f03      	ldr	r7, [sp, #12]
 8011374:	4b98      	ldr	r3, [pc, #608]	@ (80115d8 <_dtoa_r+0x2d0>)
 8011376:	bfbc      	itt	lt
 8011378:	2201      	movlt	r2, #1
 801137a:	6032      	strlt	r2, [r6, #0]
 801137c:	43bb      	bics	r3, r7
 801137e:	d112      	bne.n	80113a6 <_dtoa_r+0x9e>
 8011380:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011382:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011386:	6013      	str	r3, [r2, #0]
 8011388:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801138c:	4323      	orrs	r3, r4
 801138e:	f000 854d 	beq.w	8011e2c <_dtoa_r+0xb24>
 8011392:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011394:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80115ec <_dtoa_r+0x2e4>
 8011398:	2b00      	cmp	r3, #0
 801139a:	f000 854f 	beq.w	8011e3c <_dtoa_r+0xb34>
 801139e:	f10a 0303 	add.w	r3, sl, #3
 80113a2:	f000 bd49 	b.w	8011e38 <_dtoa_r+0xb30>
 80113a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80113aa:	2200      	movs	r2, #0
 80113ac:	ec51 0b17 	vmov	r0, r1, d7
 80113b0:	2300      	movs	r3, #0
 80113b2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80113b6:	f7ef fb8f 	bl	8000ad8 <__aeabi_dcmpeq>
 80113ba:	4680      	mov	r8, r0
 80113bc:	b158      	cbz	r0, 80113d6 <_dtoa_r+0xce>
 80113be:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80113c0:	2301      	movs	r3, #1
 80113c2:	6013      	str	r3, [r2, #0]
 80113c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80113c6:	b113      	cbz	r3, 80113ce <_dtoa_r+0xc6>
 80113c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80113ca:	4b84      	ldr	r3, [pc, #528]	@ (80115dc <_dtoa_r+0x2d4>)
 80113cc:	6013      	str	r3, [r2, #0]
 80113ce:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80115f0 <_dtoa_r+0x2e8>
 80113d2:	f000 bd33 	b.w	8011e3c <_dtoa_r+0xb34>
 80113d6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80113da:	aa16      	add	r2, sp, #88	@ 0x58
 80113dc:	a917      	add	r1, sp, #92	@ 0x5c
 80113de:	4658      	mov	r0, fp
 80113e0:	f001 f8ca 	bl	8012578 <__d2b>
 80113e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80113e8:	4681      	mov	r9, r0
 80113ea:	2e00      	cmp	r6, #0
 80113ec:	d077      	beq.n	80114de <_dtoa_r+0x1d6>
 80113ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80113f0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80113f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80113f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80113fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011400:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8011404:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011408:	4619      	mov	r1, r3
 801140a:	2200      	movs	r2, #0
 801140c:	4b74      	ldr	r3, [pc, #464]	@ (80115e0 <_dtoa_r+0x2d8>)
 801140e:	f7ee ff43 	bl	8000298 <__aeabi_dsub>
 8011412:	a369      	add	r3, pc, #420	@ (adr r3, 80115b8 <_dtoa_r+0x2b0>)
 8011414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011418:	f7ef f8f6 	bl	8000608 <__aeabi_dmul>
 801141c:	a368      	add	r3, pc, #416	@ (adr r3, 80115c0 <_dtoa_r+0x2b8>)
 801141e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011422:	f7ee ff3b 	bl	800029c <__adddf3>
 8011426:	4604      	mov	r4, r0
 8011428:	4630      	mov	r0, r6
 801142a:	460d      	mov	r5, r1
 801142c:	f7ef f882 	bl	8000534 <__aeabi_i2d>
 8011430:	a365      	add	r3, pc, #404	@ (adr r3, 80115c8 <_dtoa_r+0x2c0>)
 8011432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011436:	f7ef f8e7 	bl	8000608 <__aeabi_dmul>
 801143a:	4602      	mov	r2, r0
 801143c:	460b      	mov	r3, r1
 801143e:	4620      	mov	r0, r4
 8011440:	4629      	mov	r1, r5
 8011442:	f7ee ff2b 	bl	800029c <__adddf3>
 8011446:	4604      	mov	r4, r0
 8011448:	460d      	mov	r5, r1
 801144a:	f7ef fb8d 	bl	8000b68 <__aeabi_d2iz>
 801144e:	2200      	movs	r2, #0
 8011450:	4607      	mov	r7, r0
 8011452:	2300      	movs	r3, #0
 8011454:	4620      	mov	r0, r4
 8011456:	4629      	mov	r1, r5
 8011458:	f7ef fb48 	bl	8000aec <__aeabi_dcmplt>
 801145c:	b140      	cbz	r0, 8011470 <_dtoa_r+0x168>
 801145e:	4638      	mov	r0, r7
 8011460:	f7ef f868 	bl	8000534 <__aeabi_i2d>
 8011464:	4622      	mov	r2, r4
 8011466:	462b      	mov	r3, r5
 8011468:	f7ef fb36 	bl	8000ad8 <__aeabi_dcmpeq>
 801146c:	b900      	cbnz	r0, 8011470 <_dtoa_r+0x168>
 801146e:	3f01      	subs	r7, #1
 8011470:	2f16      	cmp	r7, #22
 8011472:	d851      	bhi.n	8011518 <_dtoa_r+0x210>
 8011474:	4b5b      	ldr	r3, [pc, #364]	@ (80115e4 <_dtoa_r+0x2dc>)
 8011476:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801147e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011482:	f7ef fb33 	bl	8000aec <__aeabi_dcmplt>
 8011486:	2800      	cmp	r0, #0
 8011488:	d048      	beq.n	801151c <_dtoa_r+0x214>
 801148a:	3f01      	subs	r7, #1
 801148c:	2300      	movs	r3, #0
 801148e:	9312      	str	r3, [sp, #72]	@ 0x48
 8011490:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011492:	1b9b      	subs	r3, r3, r6
 8011494:	1e5a      	subs	r2, r3, #1
 8011496:	bf44      	itt	mi
 8011498:	f1c3 0801 	rsbmi	r8, r3, #1
 801149c:	2300      	movmi	r3, #0
 801149e:	9208      	str	r2, [sp, #32]
 80114a0:	bf54      	ite	pl
 80114a2:	f04f 0800 	movpl.w	r8, #0
 80114a6:	9308      	strmi	r3, [sp, #32]
 80114a8:	2f00      	cmp	r7, #0
 80114aa:	db39      	blt.n	8011520 <_dtoa_r+0x218>
 80114ac:	9b08      	ldr	r3, [sp, #32]
 80114ae:	970f      	str	r7, [sp, #60]	@ 0x3c
 80114b0:	443b      	add	r3, r7
 80114b2:	9308      	str	r3, [sp, #32]
 80114b4:	2300      	movs	r3, #0
 80114b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80114b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114ba:	2b09      	cmp	r3, #9
 80114bc:	d864      	bhi.n	8011588 <_dtoa_r+0x280>
 80114be:	2b05      	cmp	r3, #5
 80114c0:	bfc4      	itt	gt
 80114c2:	3b04      	subgt	r3, #4
 80114c4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80114c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114c8:	f1a3 0302 	sub.w	r3, r3, #2
 80114cc:	bfcc      	ite	gt
 80114ce:	2400      	movgt	r4, #0
 80114d0:	2401      	movle	r4, #1
 80114d2:	2b03      	cmp	r3, #3
 80114d4:	d863      	bhi.n	801159e <_dtoa_r+0x296>
 80114d6:	e8df f003 	tbb	[pc, r3]
 80114da:	372a      	.short	0x372a
 80114dc:	5535      	.short	0x5535
 80114de:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80114e2:	441e      	add	r6, r3
 80114e4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80114e8:	2b20      	cmp	r3, #32
 80114ea:	bfc1      	itttt	gt
 80114ec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80114f0:	409f      	lslgt	r7, r3
 80114f2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80114f6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80114fa:	bfd6      	itet	le
 80114fc:	f1c3 0320 	rsble	r3, r3, #32
 8011500:	ea47 0003 	orrgt.w	r0, r7, r3
 8011504:	fa04 f003 	lslle.w	r0, r4, r3
 8011508:	f7ef f804 	bl	8000514 <__aeabi_ui2d>
 801150c:	2201      	movs	r2, #1
 801150e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8011512:	3e01      	subs	r6, #1
 8011514:	9214      	str	r2, [sp, #80]	@ 0x50
 8011516:	e777      	b.n	8011408 <_dtoa_r+0x100>
 8011518:	2301      	movs	r3, #1
 801151a:	e7b8      	b.n	801148e <_dtoa_r+0x186>
 801151c:	9012      	str	r0, [sp, #72]	@ 0x48
 801151e:	e7b7      	b.n	8011490 <_dtoa_r+0x188>
 8011520:	427b      	negs	r3, r7
 8011522:	930a      	str	r3, [sp, #40]	@ 0x28
 8011524:	2300      	movs	r3, #0
 8011526:	eba8 0807 	sub.w	r8, r8, r7
 801152a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801152c:	e7c4      	b.n	80114b8 <_dtoa_r+0x1b0>
 801152e:	2300      	movs	r3, #0
 8011530:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011532:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011534:	2b00      	cmp	r3, #0
 8011536:	dc35      	bgt.n	80115a4 <_dtoa_r+0x29c>
 8011538:	2301      	movs	r3, #1
 801153a:	9300      	str	r3, [sp, #0]
 801153c:	9307      	str	r3, [sp, #28]
 801153e:	461a      	mov	r2, r3
 8011540:	920e      	str	r2, [sp, #56]	@ 0x38
 8011542:	e00b      	b.n	801155c <_dtoa_r+0x254>
 8011544:	2301      	movs	r3, #1
 8011546:	e7f3      	b.n	8011530 <_dtoa_r+0x228>
 8011548:	2300      	movs	r3, #0
 801154a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801154c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801154e:	18fb      	adds	r3, r7, r3
 8011550:	9300      	str	r3, [sp, #0]
 8011552:	3301      	adds	r3, #1
 8011554:	2b01      	cmp	r3, #1
 8011556:	9307      	str	r3, [sp, #28]
 8011558:	bfb8      	it	lt
 801155a:	2301      	movlt	r3, #1
 801155c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8011560:	2100      	movs	r1, #0
 8011562:	2204      	movs	r2, #4
 8011564:	f102 0514 	add.w	r5, r2, #20
 8011568:	429d      	cmp	r5, r3
 801156a:	d91f      	bls.n	80115ac <_dtoa_r+0x2a4>
 801156c:	6041      	str	r1, [r0, #4]
 801156e:	4658      	mov	r0, fp
 8011570:	f000 fcd8 	bl	8011f24 <_Balloc>
 8011574:	4682      	mov	sl, r0
 8011576:	2800      	cmp	r0, #0
 8011578:	d13c      	bne.n	80115f4 <_dtoa_r+0x2ec>
 801157a:	4b1b      	ldr	r3, [pc, #108]	@ (80115e8 <_dtoa_r+0x2e0>)
 801157c:	4602      	mov	r2, r0
 801157e:	f240 11af 	movw	r1, #431	@ 0x1af
 8011582:	e6d8      	b.n	8011336 <_dtoa_r+0x2e>
 8011584:	2301      	movs	r3, #1
 8011586:	e7e0      	b.n	801154a <_dtoa_r+0x242>
 8011588:	2401      	movs	r4, #1
 801158a:	2300      	movs	r3, #0
 801158c:	9309      	str	r3, [sp, #36]	@ 0x24
 801158e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011590:	f04f 33ff 	mov.w	r3, #4294967295
 8011594:	9300      	str	r3, [sp, #0]
 8011596:	9307      	str	r3, [sp, #28]
 8011598:	2200      	movs	r2, #0
 801159a:	2312      	movs	r3, #18
 801159c:	e7d0      	b.n	8011540 <_dtoa_r+0x238>
 801159e:	2301      	movs	r3, #1
 80115a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80115a2:	e7f5      	b.n	8011590 <_dtoa_r+0x288>
 80115a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80115a6:	9300      	str	r3, [sp, #0]
 80115a8:	9307      	str	r3, [sp, #28]
 80115aa:	e7d7      	b.n	801155c <_dtoa_r+0x254>
 80115ac:	3101      	adds	r1, #1
 80115ae:	0052      	lsls	r2, r2, #1
 80115b0:	e7d8      	b.n	8011564 <_dtoa_r+0x25c>
 80115b2:	bf00      	nop
 80115b4:	f3af 8000 	nop.w
 80115b8:	636f4361 	.word	0x636f4361
 80115bc:	3fd287a7 	.word	0x3fd287a7
 80115c0:	8b60c8b3 	.word	0x8b60c8b3
 80115c4:	3fc68a28 	.word	0x3fc68a28
 80115c8:	509f79fb 	.word	0x509f79fb
 80115cc:	3fd34413 	.word	0x3fd34413
 80115d0:	08013b21 	.word	0x08013b21
 80115d4:	08013b38 	.word	0x08013b38
 80115d8:	7ff00000 	.word	0x7ff00000
 80115dc:	08013af1 	.word	0x08013af1
 80115e0:	3ff80000 	.word	0x3ff80000
 80115e4:	08013c30 	.word	0x08013c30
 80115e8:	08013b90 	.word	0x08013b90
 80115ec:	08013b1d 	.word	0x08013b1d
 80115f0:	08013af0 	.word	0x08013af0
 80115f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80115f8:	6018      	str	r0, [r3, #0]
 80115fa:	9b07      	ldr	r3, [sp, #28]
 80115fc:	2b0e      	cmp	r3, #14
 80115fe:	f200 80a4 	bhi.w	801174a <_dtoa_r+0x442>
 8011602:	2c00      	cmp	r4, #0
 8011604:	f000 80a1 	beq.w	801174a <_dtoa_r+0x442>
 8011608:	2f00      	cmp	r7, #0
 801160a:	dd33      	ble.n	8011674 <_dtoa_r+0x36c>
 801160c:	4bad      	ldr	r3, [pc, #692]	@ (80118c4 <_dtoa_r+0x5bc>)
 801160e:	f007 020f 	and.w	r2, r7, #15
 8011612:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011616:	ed93 7b00 	vldr	d7, [r3]
 801161a:	05f8      	lsls	r0, r7, #23
 801161c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011620:	ea4f 1427 	mov.w	r4, r7, asr #4
 8011624:	d516      	bpl.n	8011654 <_dtoa_r+0x34c>
 8011626:	4ba8      	ldr	r3, [pc, #672]	@ (80118c8 <_dtoa_r+0x5c0>)
 8011628:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801162c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011630:	f7ef f914 	bl	800085c <__aeabi_ddiv>
 8011634:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011638:	f004 040f 	and.w	r4, r4, #15
 801163c:	2603      	movs	r6, #3
 801163e:	4da2      	ldr	r5, [pc, #648]	@ (80118c8 <_dtoa_r+0x5c0>)
 8011640:	b954      	cbnz	r4, 8011658 <_dtoa_r+0x350>
 8011642:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011646:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801164a:	f7ef f907 	bl	800085c <__aeabi_ddiv>
 801164e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011652:	e028      	b.n	80116a6 <_dtoa_r+0x39e>
 8011654:	2602      	movs	r6, #2
 8011656:	e7f2      	b.n	801163e <_dtoa_r+0x336>
 8011658:	07e1      	lsls	r1, r4, #31
 801165a:	d508      	bpl.n	801166e <_dtoa_r+0x366>
 801165c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011660:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011664:	f7ee ffd0 	bl	8000608 <__aeabi_dmul>
 8011668:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801166c:	3601      	adds	r6, #1
 801166e:	1064      	asrs	r4, r4, #1
 8011670:	3508      	adds	r5, #8
 8011672:	e7e5      	b.n	8011640 <_dtoa_r+0x338>
 8011674:	f000 80d2 	beq.w	801181c <_dtoa_r+0x514>
 8011678:	427c      	negs	r4, r7
 801167a:	4b92      	ldr	r3, [pc, #584]	@ (80118c4 <_dtoa_r+0x5bc>)
 801167c:	4d92      	ldr	r5, [pc, #584]	@ (80118c8 <_dtoa_r+0x5c0>)
 801167e:	f004 020f 	and.w	r2, r4, #15
 8011682:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801168a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801168e:	f7ee ffbb 	bl	8000608 <__aeabi_dmul>
 8011692:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011696:	1124      	asrs	r4, r4, #4
 8011698:	2300      	movs	r3, #0
 801169a:	2602      	movs	r6, #2
 801169c:	2c00      	cmp	r4, #0
 801169e:	f040 80b2 	bne.w	8011806 <_dtoa_r+0x4fe>
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d1d3      	bne.n	801164e <_dtoa_r+0x346>
 80116a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80116a8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	f000 80b7 	beq.w	8011820 <_dtoa_r+0x518>
 80116b2:	4b86      	ldr	r3, [pc, #536]	@ (80118cc <_dtoa_r+0x5c4>)
 80116b4:	2200      	movs	r2, #0
 80116b6:	4620      	mov	r0, r4
 80116b8:	4629      	mov	r1, r5
 80116ba:	f7ef fa17 	bl	8000aec <__aeabi_dcmplt>
 80116be:	2800      	cmp	r0, #0
 80116c0:	f000 80ae 	beq.w	8011820 <_dtoa_r+0x518>
 80116c4:	9b07      	ldr	r3, [sp, #28]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	f000 80aa 	beq.w	8011820 <_dtoa_r+0x518>
 80116cc:	9b00      	ldr	r3, [sp, #0]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	dd37      	ble.n	8011742 <_dtoa_r+0x43a>
 80116d2:	1e7b      	subs	r3, r7, #1
 80116d4:	9304      	str	r3, [sp, #16]
 80116d6:	4620      	mov	r0, r4
 80116d8:	4b7d      	ldr	r3, [pc, #500]	@ (80118d0 <_dtoa_r+0x5c8>)
 80116da:	2200      	movs	r2, #0
 80116dc:	4629      	mov	r1, r5
 80116de:	f7ee ff93 	bl	8000608 <__aeabi_dmul>
 80116e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80116e6:	9c00      	ldr	r4, [sp, #0]
 80116e8:	3601      	adds	r6, #1
 80116ea:	4630      	mov	r0, r6
 80116ec:	f7ee ff22 	bl	8000534 <__aeabi_i2d>
 80116f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80116f4:	f7ee ff88 	bl	8000608 <__aeabi_dmul>
 80116f8:	4b76      	ldr	r3, [pc, #472]	@ (80118d4 <_dtoa_r+0x5cc>)
 80116fa:	2200      	movs	r2, #0
 80116fc:	f7ee fdce 	bl	800029c <__adddf3>
 8011700:	4605      	mov	r5, r0
 8011702:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011706:	2c00      	cmp	r4, #0
 8011708:	f040 808d 	bne.w	8011826 <_dtoa_r+0x51e>
 801170c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011710:	4b71      	ldr	r3, [pc, #452]	@ (80118d8 <_dtoa_r+0x5d0>)
 8011712:	2200      	movs	r2, #0
 8011714:	f7ee fdc0 	bl	8000298 <__aeabi_dsub>
 8011718:	4602      	mov	r2, r0
 801171a:	460b      	mov	r3, r1
 801171c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011720:	462a      	mov	r2, r5
 8011722:	4633      	mov	r3, r6
 8011724:	f7ef fa00 	bl	8000b28 <__aeabi_dcmpgt>
 8011728:	2800      	cmp	r0, #0
 801172a:	f040 828b 	bne.w	8011c44 <_dtoa_r+0x93c>
 801172e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011732:	462a      	mov	r2, r5
 8011734:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011738:	f7ef f9d8 	bl	8000aec <__aeabi_dcmplt>
 801173c:	2800      	cmp	r0, #0
 801173e:	f040 8128 	bne.w	8011992 <_dtoa_r+0x68a>
 8011742:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8011746:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801174a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801174c:	2b00      	cmp	r3, #0
 801174e:	f2c0 815a 	blt.w	8011a06 <_dtoa_r+0x6fe>
 8011752:	2f0e      	cmp	r7, #14
 8011754:	f300 8157 	bgt.w	8011a06 <_dtoa_r+0x6fe>
 8011758:	4b5a      	ldr	r3, [pc, #360]	@ (80118c4 <_dtoa_r+0x5bc>)
 801175a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801175e:	ed93 7b00 	vldr	d7, [r3]
 8011762:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011764:	2b00      	cmp	r3, #0
 8011766:	ed8d 7b00 	vstr	d7, [sp]
 801176a:	da03      	bge.n	8011774 <_dtoa_r+0x46c>
 801176c:	9b07      	ldr	r3, [sp, #28]
 801176e:	2b00      	cmp	r3, #0
 8011770:	f340 8101 	ble.w	8011976 <_dtoa_r+0x66e>
 8011774:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011778:	4656      	mov	r6, sl
 801177a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801177e:	4620      	mov	r0, r4
 8011780:	4629      	mov	r1, r5
 8011782:	f7ef f86b 	bl	800085c <__aeabi_ddiv>
 8011786:	f7ef f9ef 	bl	8000b68 <__aeabi_d2iz>
 801178a:	4680      	mov	r8, r0
 801178c:	f7ee fed2 	bl	8000534 <__aeabi_i2d>
 8011790:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011794:	f7ee ff38 	bl	8000608 <__aeabi_dmul>
 8011798:	4602      	mov	r2, r0
 801179a:	460b      	mov	r3, r1
 801179c:	4620      	mov	r0, r4
 801179e:	4629      	mov	r1, r5
 80117a0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80117a4:	f7ee fd78 	bl	8000298 <__aeabi_dsub>
 80117a8:	f806 4b01 	strb.w	r4, [r6], #1
 80117ac:	9d07      	ldr	r5, [sp, #28]
 80117ae:	eba6 040a 	sub.w	r4, r6, sl
 80117b2:	42a5      	cmp	r5, r4
 80117b4:	4602      	mov	r2, r0
 80117b6:	460b      	mov	r3, r1
 80117b8:	f040 8117 	bne.w	80119ea <_dtoa_r+0x6e2>
 80117bc:	f7ee fd6e 	bl	800029c <__adddf3>
 80117c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80117c4:	4604      	mov	r4, r0
 80117c6:	460d      	mov	r5, r1
 80117c8:	f7ef f9ae 	bl	8000b28 <__aeabi_dcmpgt>
 80117cc:	2800      	cmp	r0, #0
 80117ce:	f040 80f9 	bne.w	80119c4 <_dtoa_r+0x6bc>
 80117d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80117d6:	4620      	mov	r0, r4
 80117d8:	4629      	mov	r1, r5
 80117da:	f7ef f97d 	bl	8000ad8 <__aeabi_dcmpeq>
 80117de:	b118      	cbz	r0, 80117e8 <_dtoa_r+0x4e0>
 80117e0:	f018 0f01 	tst.w	r8, #1
 80117e4:	f040 80ee 	bne.w	80119c4 <_dtoa_r+0x6bc>
 80117e8:	4649      	mov	r1, r9
 80117ea:	4658      	mov	r0, fp
 80117ec:	f000 fbda 	bl	8011fa4 <_Bfree>
 80117f0:	2300      	movs	r3, #0
 80117f2:	7033      	strb	r3, [r6, #0]
 80117f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80117f6:	3701      	adds	r7, #1
 80117f8:	601f      	str	r7, [r3, #0]
 80117fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	f000 831d 	beq.w	8011e3c <_dtoa_r+0xb34>
 8011802:	601e      	str	r6, [r3, #0]
 8011804:	e31a      	b.n	8011e3c <_dtoa_r+0xb34>
 8011806:	07e2      	lsls	r2, r4, #31
 8011808:	d505      	bpl.n	8011816 <_dtoa_r+0x50e>
 801180a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801180e:	f7ee fefb 	bl	8000608 <__aeabi_dmul>
 8011812:	3601      	adds	r6, #1
 8011814:	2301      	movs	r3, #1
 8011816:	1064      	asrs	r4, r4, #1
 8011818:	3508      	adds	r5, #8
 801181a:	e73f      	b.n	801169c <_dtoa_r+0x394>
 801181c:	2602      	movs	r6, #2
 801181e:	e742      	b.n	80116a6 <_dtoa_r+0x39e>
 8011820:	9c07      	ldr	r4, [sp, #28]
 8011822:	9704      	str	r7, [sp, #16]
 8011824:	e761      	b.n	80116ea <_dtoa_r+0x3e2>
 8011826:	4b27      	ldr	r3, [pc, #156]	@ (80118c4 <_dtoa_r+0x5bc>)
 8011828:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801182a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801182e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011832:	4454      	add	r4, sl
 8011834:	2900      	cmp	r1, #0
 8011836:	d053      	beq.n	80118e0 <_dtoa_r+0x5d8>
 8011838:	4928      	ldr	r1, [pc, #160]	@ (80118dc <_dtoa_r+0x5d4>)
 801183a:	2000      	movs	r0, #0
 801183c:	f7ef f80e 	bl	800085c <__aeabi_ddiv>
 8011840:	4633      	mov	r3, r6
 8011842:	462a      	mov	r2, r5
 8011844:	f7ee fd28 	bl	8000298 <__aeabi_dsub>
 8011848:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801184c:	4656      	mov	r6, sl
 801184e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011852:	f7ef f989 	bl	8000b68 <__aeabi_d2iz>
 8011856:	4605      	mov	r5, r0
 8011858:	f7ee fe6c 	bl	8000534 <__aeabi_i2d>
 801185c:	4602      	mov	r2, r0
 801185e:	460b      	mov	r3, r1
 8011860:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011864:	f7ee fd18 	bl	8000298 <__aeabi_dsub>
 8011868:	3530      	adds	r5, #48	@ 0x30
 801186a:	4602      	mov	r2, r0
 801186c:	460b      	mov	r3, r1
 801186e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011872:	f806 5b01 	strb.w	r5, [r6], #1
 8011876:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801187a:	f7ef f937 	bl	8000aec <__aeabi_dcmplt>
 801187e:	2800      	cmp	r0, #0
 8011880:	d171      	bne.n	8011966 <_dtoa_r+0x65e>
 8011882:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011886:	4911      	ldr	r1, [pc, #68]	@ (80118cc <_dtoa_r+0x5c4>)
 8011888:	2000      	movs	r0, #0
 801188a:	f7ee fd05 	bl	8000298 <__aeabi_dsub>
 801188e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011892:	f7ef f92b 	bl	8000aec <__aeabi_dcmplt>
 8011896:	2800      	cmp	r0, #0
 8011898:	f040 8095 	bne.w	80119c6 <_dtoa_r+0x6be>
 801189c:	42a6      	cmp	r6, r4
 801189e:	f43f af50 	beq.w	8011742 <_dtoa_r+0x43a>
 80118a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80118a6:	4b0a      	ldr	r3, [pc, #40]	@ (80118d0 <_dtoa_r+0x5c8>)
 80118a8:	2200      	movs	r2, #0
 80118aa:	f7ee fead 	bl	8000608 <__aeabi_dmul>
 80118ae:	4b08      	ldr	r3, [pc, #32]	@ (80118d0 <_dtoa_r+0x5c8>)
 80118b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80118b4:	2200      	movs	r2, #0
 80118b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80118ba:	f7ee fea5 	bl	8000608 <__aeabi_dmul>
 80118be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80118c2:	e7c4      	b.n	801184e <_dtoa_r+0x546>
 80118c4:	08013c30 	.word	0x08013c30
 80118c8:	08013c08 	.word	0x08013c08
 80118cc:	3ff00000 	.word	0x3ff00000
 80118d0:	40240000 	.word	0x40240000
 80118d4:	401c0000 	.word	0x401c0000
 80118d8:	40140000 	.word	0x40140000
 80118dc:	3fe00000 	.word	0x3fe00000
 80118e0:	4631      	mov	r1, r6
 80118e2:	4628      	mov	r0, r5
 80118e4:	f7ee fe90 	bl	8000608 <__aeabi_dmul>
 80118e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80118ec:	9415      	str	r4, [sp, #84]	@ 0x54
 80118ee:	4656      	mov	r6, sl
 80118f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80118f4:	f7ef f938 	bl	8000b68 <__aeabi_d2iz>
 80118f8:	4605      	mov	r5, r0
 80118fa:	f7ee fe1b 	bl	8000534 <__aeabi_i2d>
 80118fe:	4602      	mov	r2, r0
 8011900:	460b      	mov	r3, r1
 8011902:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011906:	f7ee fcc7 	bl	8000298 <__aeabi_dsub>
 801190a:	3530      	adds	r5, #48	@ 0x30
 801190c:	f806 5b01 	strb.w	r5, [r6], #1
 8011910:	4602      	mov	r2, r0
 8011912:	460b      	mov	r3, r1
 8011914:	42a6      	cmp	r6, r4
 8011916:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801191a:	f04f 0200 	mov.w	r2, #0
 801191e:	d124      	bne.n	801196a <_dtoa_r+0x662>
 8011920:	4bac      	ldr	r3, [pc, #688]	@ (8011bd4 <_dtoa_r+0x8cc>)
 8011922:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011926:	f7ee fcb9 	bl	800029c <__adddf3>
 801192a:	4602      	mov	r2, r0
 801192c:	460b      	mov	r3, r1
 801192e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011932:	f7ef f8f9 	bl	8000b28 <__aeabi_dcmpgt>
 8011936:	2800      	cmp	r0, #0
 8011938:	d145      	bne.n	80119c6 <_dtoa_r+0x6be>
 801193a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801193e:	49a5      	ldr	r1, [pc, #660]	@ (8011bd4 <_dtoa_r+0x8cc>)
 8011940:	2000      	movs	r0, #0
 8011942:	f7ee fca9 	bl	8000298 <__aeabi_dsub>
 8011946:	4602      	mov	r2, r0
 8011948:	460b      	mov	r3, r1
 801194a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801194e:	f7ef f8cd 	bl	8000aec <__aeabi_dcmplt>
 8011952:	2800      	cmp	r0, #0
 8011954:	f43f aef5 	beq.w	8011742 <_dtoa_r+0x43a>
 8011958:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801195a:	1e73      	subs	r3, r6, #1
 801195c:	9315      	str	r3, [sp, #84]	@ 0x54
 801195e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011962:	2b30      	cmp	r3, #48	@ 0x30
 8011964:	d0f8      	beq.n	8011958 <_dtoa_r+0x650>
 8011966:	9f04      	ldr	r7, [sp, #16]
 8011968:	e73e      	b.n	80117e8 <_dtoa_r+0x4e0>
 801196a:	4b9b      	ldr	r3, [pc, #620]	@ (8011bd8 <_dtoa_r+0x8d0>)
 801196c:	f7ee fe4c 	bl	8000608 <__aeabi_dmul>
 8011970:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011974:	e7bc      	b.n	80118f0 <_dtoa_r+0x5e8>
 8011976:	d10c      	bne.n	8011992 <_dtoa_r+0x68a>
 8011978:	4b98      	ldr	r3, [pc, #608]	@ (8011bdc <_dtoa_r+0x8d4>)
 801197a:	2200      	movs	r2, #0
 801197c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011980:	f7ee fe42 	bl	8000608 <__aeabi_dmul>
 8011984:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011988:	f7ef f8c4 	bl	8000b14 <__aeabi_dcmpge>
 801198c:	2800      	cmp	r0, #0
 801198e:	f000 8157 	beq.w	8011c40 <_dtoa_r+0x938>
 8011992:	2400      	movs	r4, #0
 8011994:	4625      	mov	r5, r4
 8011996:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011998:	43db      	mvns	r3, r3
 801199a:	9304      	str	r3, [sp, #16]
 801199c:	4656      	mov	r6, sl
 801199e:	2700      	movs	r7, #0
 80119a0:	4621      	mov	r1, r4
 80119a2:	4658      	mov	r0, fp
 80119a4:	f000 fafe 	bl	8011fa4 <_Bfree>
 80119a8:	2d00      	cmp	r5, #0
 80119aa:	d0dc      	beq.n	8011966 <_dtoa_r+0x65e>
 80119ac:	b12f      	cbz	r7, 80119ba <_dtoa_r+0x6b2>
 80119ae:	42af      	cmp	r7, r5
 80119b0:	d003      	beq.n	80119ba <_dtoa_r+0x6b2>
 80119b2:	4639      	mov	r1, r7
 80119b4:	4658      	mov	r0, fp
 80119b6:	f000 faf5 	bl	8011fa4 <_Bfree>
 80119ba:	4629      	mov	r1, r5
 80119bc:	4658      	mov	r0, fp
 80119be:	f000 faf1 	bl	8011fa4 <_Bfree>
 80119c2:	e7d0      	b.n	8011966 <_dtoa_r+0x65e>
 80119c4:	9704      	str	r7, [sp, #16]
 80119c6:	4633      	mov	r3, r6
 80119c8:	461e      	mov	r6, r3
 80119ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80119ce:	2a39      	cmp	r2, #57	@ 0x39
 80119d0:	d107      	bne.n	80119e2 <_dtoa_r+0x6da>
 80119d2:	459a      	cmp	sl, r3
 80119d4:	d1f8      	bne.n	80119c8 <_dtoa_r+0x6c0>
 80119d6:	9a04      	ldr	r2, [sp, #16]
 80119d8:	3201      	adds	r2, #1
 80119da:	9204      	str	r2, [sp, #16]
 80119dc:	2230      	movs	r2, #48	@ 0x30
 80119de:	f88a 2000 	strb.w	r2, [sl]
 80119e2:	781a      	ldrb	r2, [r3, #0]
 80119e4:	3201      	adds	r2, #1
 80119e6:	701a      	strb	r2, [r3, #0]
 80119e8:	e7bd      	b.n	8011966 <_dtoa_r+0x65e>
 80119ea:	4b7b      	ldr	r3, [pc, #492]	@ (8011bd8 <_dtoa_r+0x8d0>)
 80119ec:	2200      	movs	r2, #0
 80119ee:	f7ee fe0b 	bl	8000608 <__aeabi_dmul>
 80119f2:	2200      	movs	r2, #0
 80119f4:	2300      	movs	r3, #0
 80119f6:	4604      	mov	r4, r0
 80119f8:	460d      	mov	r5, r1
 80119fa:	f7ef f86d 	bl	8000ad8 <__aeabi_dcmpeq>
 80119fe:	2800      	cmp	r0, #0
 8011a00:	f43f aebb 	beq.w	801177a <_dtoa_r+0x472>
 8011a04:	e6f0      	b.n	80117e8 <_dtoa_r+0x4e0>
 8011a06:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011a08:	2a00      	cmp	r2, #0
 8011a0a:	f000 80db 	beq.w	8011bc4 <_dtoa_r+0x8bc>
 8011a0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011a10:	2a01      	cmp	r2, #1
 8011a12:	f300 80bf 	bgt.w	8011b94 <_dtoa_r+0x88c>
 8011a16:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011a18:	2a00      	cmp	r2, #0
 8011a1a:	f000 80b7 	beq.w	8011b8c <_dtoa_r+0x884>
 8011a1e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011a22:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011a24:	4646      	mov	r6, r8
 8011a26:	9a08      	ldr	r2, [sp, #32]
 8011a28:	2101      	movs	r1, #1
 8011a2a:	441a      	add	r2, r3
 8011a2c:	4658      	mov	r0, fp
 8011a2e:	4498      	add	r8, r3
 8011a30:	9208      	str	r2, [sp, #32]
 8011a32:	f000 fb6b 	bl	801210c <__i2b>
 8011a36:	4605      	mov	r5, r0
 8011a38:	b15e      	cbz	r6, 8011a52 <_dtoa_r+0x74a>
 8011a3a:	9b08      	ldr	r3, [sp, #32]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	dd08      	ble.n	8011a52 <_dtoa_r+0x74a>
 8011a40:	42b3      	cmp	r3, r6
 8011a42:	9a08      	ldr	r2, [sp, #32]
 8011a44:	bfa8      	it	ge
 8011a46:	4633      	movge	r3, r6
 8011a48:	eba8 0803 	sub.w	r8, r8, r3
 8011a4c:	1af6      	subs	r6, r6, r3
 8011a4e:	1ad3      	subs	r3, r2, r3
 8011a50:	9308      	str	r3, [sp, #32]
 8011a52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011a54:	b1f3      	cbz	r3, 8011a94 <_dtoa_r+0x78c>
 8011a56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	f000 80b7 	beq.w	8011bcc <_dtoa_r+0x8c4>
 8011a5e:	b18c      	cbz	r4, 8011a84 <_dtoa_r+0x77c>
 8011a60:	4629      	mov	r1, r5
 8011a62:	4622      	mov	r2, r4
 8011a64:	4658      	mov	r0, fp
 8011a66:	f000 fc11 	bl	801228c <__pow5mult>
 8011a6a:	464a      	mov	r2, r9
 8011a6c:	4601      	mov	r1, r0
 8011a6e:	4605      	mov	r5, r0
 8011a70:	4658      	mov	r0, fp
 8011a72:	f000 fb61 	bl	8012138 <__multiply>
 8011a76:	4649      	mov	r1, r9
 8011a78:	9004      	str	r0, [sp, #16]
 8011a7a:	4658      	mov	r0, fp
 8011a7c:	f000 fa92 	bl	8011fa4 <_Bfree>
 8011a80:	9b04      	ldr	r3, [sp, #16]
 8011a82:	4699      	mov	r9, r3
 8011a84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011a86:	1b1a      	subs	r2, r3, r4
 8011a88:	d004      	beq.n	8011a94 <_dtoa_r+0x78c>
 8011a8a:	4649      	mov	r1, r9
 8011a8c:	4658      	mov	r0, fp
 8011a8e:	f000 fbfd 	bl	801228c <__pow5mult>
 8011a92:	4681      	mov	r9, r0
 8011a94:	2101      	movs	r1, #1
 8011a96:	4658      	mov	r0, fp
 8011a98:	f000 fb38 	bl	801210c <__i2b>
 8011a9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011a9e:	4604      	mov	r4, r0
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	f000 81cf 	beq.w	8011e44 <_dtoa_r+0xb3c>
 8011aa6:	461a      	mov	r2, r3
 8011aa8:	4601      	mov	r1, r0
 8011aaa:	4658      	mov	r0, fp
 8011aac:	f000 fbee 	bl	801228c <__pow5mult>
 8011ab0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ab2:	2b01      	cmp	r3, #1
 8011ab4:	4604      	mov	r4, r0
 8011ab6:	f300 8095 	bgt.w	8011be4 <_dtoa_r+0x8dc>
 8011aba:	9b02      	ldr	r3, [sp, #8]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	f040 8087 	bne.w	8011bd0 <_dtoa_r+0x8c8>
 8011ac2:	9b03      	ldr	r3, [sp, #12]
 8011ac4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	f040 8089 	bne.w	8011be0 <_dtoa_r+0x8d8>
 8011ace:	9b03      	ldr	r3, [sp, #12]
 8011ad0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011ad4:	0d1b      	lsrs	r3, r3, #20
 8011ad6:	051b      	lsls	r3, r3, #20
 8011ad8:	b12b      	cbz	r3, 8011ae6 <_dtoa_r+0x7de>
 8011ada:	9b08      	ldr	r3, [sp, #32]
 8011adc:	3301      	adds	r3, #1
 8011ade:	9308      	str	r3, [sp, #32]
 8011ae0:	f108 0801 	add.w	r8, r8, #1
 8011ae4:	2301      	movs	r3, #1
 8011ae6:	930a      	str	r3, [sp, #40]	@ 0x28
 8011ae8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	f000 81b0 	beq.w	8011e50 <_dtoa_r+0xb48>
 8011af0:	6923      	ldr	r3, [r4, #16]
 8011af2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011af6:	6918      	ldr	r0, [r3, #16]
 8011af8:	f000 fabc 	bl	8012074 <__hi0bits>
 8011afc:	f1c0 0020 	rsb	r0, r0, #32
 8011b00:	9b08      	ldr	r3, [sp, #32]
 8011b02:	4418      	add	r0, r3
 8011b04:	f010 001f 	ands.w	r0, r0, #31
 8011b08:	d077      	beq.n	8011bfa <_dtoa_r+0x8f2>
 8011b0a:	f1c0 0320 	rsb	r3, r0, #32
 8011b0e:	2b04      	cmp	r3, #4
 8011b10:	dd6b      	ble.n	8011bea <_dtoa_r+0x8e2>
 8011b12:	9b08      	ldr	r3, [sp, #32]
 8011b14:	f1c0 001c 	rsb	r0, r0, #28
 8011b18:	4403      	add	r3, r0
 8011b1a:	4480      	add	r8, r0
 8011b1c:	4406      	add	r6, r0
 8011b1e:	9308      	str	r3, [sp, #32]
 8011b20:	f1b8 0f00 	cmp.w	r8, #0
 8011b24:	dd05      	ble.n	8011b32 <_dtoa_r+0x82a>
 8011b26:	4649      	mov	r1, r9
 8011b28:	4642      	mov	r2, r8
 8011b2a:	4658      	mov	r0, fp
 8011b2c:	f000 fc08 	bl	8012340 <__lshift>
 8011b30:	4681      	mov	r9, r0
 8011b32:	9b08      	ldr	r3, [sp, #32]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	dd05      	ble.n	8011b44 <_dtoa_r+0x83c>
 8011b38:	4621      	mov	r1, r4
 8011b3a:	461a      	mov	r2, r3
 8011b3c:	4658      	mov	r0, fp
 8011b3e:	f000 fbff 	bl	8012340 <__lshift>
 8011b42:	4604      	mov	r4, r0
 8011b44:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d059      	beq.n	8011bfe <_dtoa_r+0x8f6>
 8011b4a:	4621      	mov	r1, r4
 8011b4c:	4648      	mov	r0, r9
 8011b4e:	f000 fc63 	bl	8012418 <__mcmp>
 8011b52:	2800      	cmp	r0, #0
 8011b54:	da53      	bge.n	8011bfe <_dtoa_r+0x8f6>
 8011b56:	1e7b      	subs	r3, r7, #1
 8011b58:	9304      	str	r3, [sp, #16]
 8011b5a:	4649      	mov	r1, r9
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	220a      	movs	r2, #10
 8011b60:	4658      	mov	r0, fp
 8011b62:	f000 fa41 	bl	8011fe8 <__multadd>
 8011b66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b68:	4681      	mov	r9, r0
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	f000 8172 	beq.w	8011e54 <_dtoa_r+0xb4c>
 8011b70:	2300      	movs	r3, #0
 8011b72:	4629      	mov	r1, r5
 8011b74:	220a      	movs	r2, #10
 8011b76:	4658      	mov	r0, fp
 8011b78:	f000 fa36 	bl	8011fe8 <__multadd>
 8011b7c:	9b00      	ldr	r3, [sp, #0]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	4605      	mov	r5, r0
 8011b82:	dc67      	bgt.n	8011c54 <_dtoa_r+0x94c>
 8011b84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b86:	2b02      	cmp	r3, #2
 8011b88:	dc41      	bgt.n	8011c0e <_dtoa_r+0x906>
 8011b8a:	e063      	b.n	8011c54 <_dtoa_r+0x94c>
 8011b8c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011b8e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8011b92:	e746      	b.n	8011a22 <_dtoa_r+0x71a>
 8011b94:	9b07      	ldr	r3, [sp, #28]
 8011b96:	1e5c      	subs	r4, r3, #1
 8011b98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011b9a:	42a3      	cmp	r3, r4
 8011b9c:	bfbf      	itttt	lt
 8011b9e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011ba0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8011ba2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8011ba4:	1ae3      	sublt	r3, r4, r3
 8011ba6:	bfb4      	ite	lt
 8011ba8:	18d2      	addlt	r2, r2, r3
 8011baa:	1b1c      	subge	r4, r3, r4
 8011bac:	9b07      	ldr	r3, [sp, #28]
 8011bae:	bfbc      	itt	lt
 8011bb0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8011bb2:	2400      	movlt	r4, #0
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	bfb5      	itete	lt
 8011bb8:	eba8 0603 	sublt.w	r6, r8, r3
 8011bbc:	9b07      	ldrge	r3, [sp, #28]
 8011bbe:	2300      	movlt	r3, #0
 8011bc0:	4646      	movge	r6, r8
 8011bc2:	e730      	b.n	8011a26 <_dtoa_r+0x71e>
 8011bc4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011bc6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8011bc8:	4646      	mov	r6, r8
 8011bca:	e735      	b.n	8011a38 <_dtoa_r+0x730>
 8011bcc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011bce:	e75c      	b.n	8011a8a <_dtoa_r+0x782>
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	e788      	b.n	8011ae6 <_dtoa_r+0x7de>
 8011bd4:	3fe00000 	.word	0x3fe00000
 8011bd8:	40240000 	.word	0x40240000
 8011bdc:	40140000 	.word	0x40140000
 8011be0:	9b02      	ldr	r3, [sp, #8]
 8011be2:	e780      	b.n	8011ae6 <_dtoa_r+0x7de>
 8011be4:	2300      	movs	r3, #0
 8011be6:	930a      	str	r3, [sp, #40]	@ 0x28
 8011be8:	e782      	b.n	8011af0 <_dtoa_r+0x7e8>
 8011bea:	d099      	beq.n	8011b20 <_dtoa_r+0x818>
 8011bec:	9a08      	ldr	r2, [sp, #32]
 8011bee:	331c      	adds	r3, #28
 8011bf0:	441a      	add	r2, r3
 8011bf2:	4498      	add	r8, r3
 8011bf4:	441e      	add	r6, r3
 8011bf6:	9208      	str	r2, [sp, #32]
 8011bf8:	e792      	b.n	8011b20 <_dtoa_r+0x818>
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	e7f6      	b.n	8011bec <_dtoa_r+0x8e4>
 8011bfe:	9b07      	ldr	r3, [sp, #28]
 8011c00:	9704      	str	r7, [sp, #16]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	dc20      	bgt.n	8011c48 <_dtoa_r+0x940>
 8011c06:	9300      	str	r3, [sp, #0]
 8011c08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c0a:	2b02      	cmp	r3, #2
 8011c0c:	dd1e      	ble.n	8011c4c <_dtoa_r+0x944>
 8011c0e:	9b00      	ldr	r3, [sp, #0]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	f47f aec0 	bne.w	8011996 <_dtoa_r+0x68e>
 8011c16:	4621      	mov	r1, r4
 8011c18:	2205      	movs	r2, #5
 8011c1a:	4658      	mov	r0, fp
 8011c1c:	f000 f9e4 	bl	8011fe8 <__multadd>
 8011c20:	4601      	mov	r1, r0
 8011c22:	4604      	mov	r4, r0
 8011c24:	4648      	mov	r0, r9
 8011c26:	f000 fbf7 	bl	8012418 <__mcmp>
 8011c2a:	2800      	cmp	r0, #0
 8011c2c:	f77f aeb3 	ble.w	8011996 <_dtoa_r+0x68e>
 8011c30:	4656      	mov	r6, sl
 8011c32:	2331      	movs	r3, #49	@ 0x31
 8011c34:	f806 3b01 	strb.w	r3, [r6], #1
 8011c38:	9b04      	ldr	r3, [sp, #16]
 8011c3a:	3301      	adds	r3, #1
 8011c3c:	9304      	str	r3, [sp, #16]
 8011c3e:	e6ae      	b.n	801199e <_dtoa_r+0x696>
 8011c40:	9c07      	ldr	r4, [sp, #28]
 8011c42:	9704      	str	r7, [sp, #16]
 8011c44:	4625      	mov	r5, r4
 8011c46:	e7f3      	b.n	8011c30 <_dtoa_r+0x928>
 8011c48:	9b07      	ldr	r3, [sp, #28]
 8011c4a:	9300      	str	r3, [sp, #0]
 8011c4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	f000 8104 	beq.w	8011e5c <_dtoa_r+0xb54>
 8011c54:	2e00      	cmp	r6, #0
 8011c56:	dd05      	ble.n	8011c64 <_dtoa_r+0x95c>
 8011c58:	4629      	mov	r1, r5
 8011c5a:	4632      	mov	r2, r6
 8011c5c:	4658      	mov	r0, fp
 8011c5e:	f000 fb6f 	bl	8012340 <__lshift>
 8011c62:	4605      	mov	r5, r0
 8011c64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d05a      	beq.n	8011d20 <_dtoa_r+0xa18>
 8011c6a:	6869      	ldr	r1, [r5, #4]
 8011c6c:	4658      	mov	r0, fp
 8011c6e:	f000 f959 	bl	8011f24 <_Balloc>
 8011c72:	4606      	mov	r6, r0
 8011c74:	b928      	cbnz	r0, 8011c82 <_dtoa_r+0x97a>
 8011c76:	4b84      	ldr	r3, [pc, #528]	@ (8011e88 <_dtoa_r+0xb80>)
 8011c78:	4602      	mov	r2, r0
 8011c7a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011c7e:	f7ff bb5a 	b.w	8011336 <_dtoa_r+0x2e>
 8011c82:	692a      	ldr	r2, [r5, #16]
 8011c84:	3202      	adds	r2, #2
 8011c86:	0092      	lsls	r2, r2, #2
 8011c88:	f105 010c 	add.w	r1, r5, #12
 8011c8c:	300c      	adds	r0, #12
 8011c8e:	f7ff faa2 	bl	80111d6 <memcpy>
 8011c92:	2201      	movs	r2, #1
 8011c94:	4631      	mov	r1, r6
 8011c96:	4658      	mov	r0, fp
 8011c98:	f000 fb52 	bl	8012340 <__lshift>
 8011c9c:	f10a 0301 	add.w	r3, sl, #1
 8011ca0:	9307      	str	r3, [sp, #28]
 8011ca2:	9b00      	ldr	r3, [sp, #0]
 8011ca4:	4453      	add	r3, sl
 8011ca6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011ca8:	9b02      	ldr	r3, [sp, #8]
 8011caa:	f003 0301 	and.w	r3, r3, #1
 8011cae:	462f      	mov	r7, r5
 8011cb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8011cb2:	4605      	mov	r5, r0
 8011cb4:	9b07      	ldr	r3, [sp, #28]
 8011cb6:	4621      	mov	r1, r4
 8011cb8:	3b01      	subs	r3, #1
 8011cba:	4648      	mov	r0, r9
 8011cbc:	9300      	str	r3, [sp, #0]
 8011cbe:	f7ff fa98 	bl	80111f2 <quorem>
 8011cc2:	4639      	mov	r1, r7
 8011cc4:	9002      	str	r0, [sp, #8]
 8011cc6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011cca:	4648      	mov	r0, r9
 8011ccc:	f000 fba4 	bl	8012418 <__mcmp>
 8011cd0:	462a      	mov	r2, r5
 8011cd2:	9008      	str	r0, [sp, #32]
 8011cd4:	4621      	mov	r1, r4
 8011cd6:	4658      	mov	r0, fp
 8011cd8:	f000 fbba 	bl	8012450 <__mdiff>
 8011cdc:	68c2      	ldr	r2, [r0, #12]
 8011cde:	4606      	mov	r6, r0
 8011ce0:	bb02      	cbnz	r2, 8011d24 <_dtoa_r+0xa1c>
 8011ce2:	4601      	mov	r1, r0
 8011ce4:	4648      	mov	r0, r9
 8011ce6:	f000 fb97 	bl	8012418 <__mcmp>
 8011cea:	4602      	mov	r2, r0
 8011cec:	4631      	mov	r1, r6
 8011cee:	4658      	mov	r0, fp
 8011cf0:	920e      	str	r2, [sp, #56]	@ 0x38
 8011cf2:	f000 f957 	bl	8011fa4 <_Bfree>
 8011cf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011cf8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011cfa:	9e07      	ldr	r6, [sp, #28]
 8011cfc:	ea43 0102 	orr.w	r1, r3, r2
 8011d00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011d02:	4319      	orrs	r1, r3
 8011d04:	d110      	bne.n	8011d28 <_dtoa_r+0xa20>
 8011d06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011d0a:	d029      	beq.n	8011d60 <_dtoa_r+0xa58>
 8011d0c:	9b08      	ldr	r3, [sp, #32]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	dd02      	ble.n	8011d18 <_dtoa_r+0xa10>
 8011d12:	9b02      	ldr	r3, [sp, #8]
 8011d14:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8011d18:	9b00      	ldr	r3, [sp, #0]
 8011d1a:	f883 8000 	strb.w	r8, [r3]
 8011d1e:	e63f      	b.n	80119a0 <_dtoa_r+0x698>
 8011d20:	4628      	mov	r0, r5
 8011d22:	e7bb      	b.n	8011c9c <_dtoa_r+0x994>
 8011d24:	2201      	movs	r2, #1
 8011d26:	e7e1      	b.n	8011cec <_dtoa_r+0x9e4>
 8011d28:	9b08      	ldr	r3, [sp, #32]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	db04      	blt.n	8011d38 <_dtoa_r+0xa30>
 8011d2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011d30:	430b      	orrs	r3, r1
 8011d32:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011d34:	430b      	orrs	r3, r1
 8011d36:	d120      	bne.n	8011d7a <_dtoa_r+0xa72>
 8011d38:	2a00      	cmp	r2, #0
 8011d3a:	dded      	ble.n	8011d18 <_dtoa_r+0xa10>
 8011d3c:	4649      	mov	r1, r9
 8011d3e:	2201      	movs	r2, #1
 8011d40:	4658      	mov	r0, fp
 8011d42:	f000 fafd 	bl	8012340 <__lshift>
 8011d46:	4621      	mov	r1, r4
 8011d48:	4681      	mov	r9, r0
 8011d4a:	f000 fb65 	bl	8012418 <__mcmp>
 8011d4e:	2800      	cmp	r0, #0
 8011d50:	dc03      	bgt.n	8011d5a <_dtoa_r+0xa52>
 8011d52:	d1e1      	bne.n	8011d18 <_dtoa_r+0xa10>
 8011d54:	f018 0f01 	tst.w	r8, #1
 8011d58:	d0de      	beq.n	8011d18 <_dtoa_r+0xa10>
 8011d5a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011d5e:	d1d8      	bne.n	8011d12 <_dtoa_r+0xa0a>
 8011d60:	9a00      	ldr	r2, [sp, #0]
 8011d62:	2339      	movs	r3, #57	@ 0x39
 8011d64:	7013      	strb	r3, [r2, #0]
 8011d66:	4633      	mov	r3, r6
 8011d68:	461e      	mov	r6, r3
 8011d6a:	3b01      	subs	r3, #1
 8011d6c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011d70:	2a39      	cmp	r2, #57	@ 0x39
 8011d72:	d052      	beq.n	8011e1a <_dtoa_r+0xb12>
 8011d74:	3201      	adds	r2, #1
 8011d76:	701a      	strb	r2, [r3, #0]
 8011d78:	e612      	b.n	80119a0 <_dtoa_r+0x698>
 8011d7a:	2a00      	cmp	r2, #0
 8011d7c:	dd07      	ble.n	8011d8e <_dtoa_r+0xa86>
 8011d7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011d82:	d0ed      	beq.n	8011d60 <_dtoa_r+0xa58>
 8011d84:	9a00      	ldr	r2, [sp, #0]
 8011d86:	f108 0301 	add.w	r3, r8, #1
 8011d8a:	7013      	strb	r3, [r2, #0]
 8011d8c:	e608      	b.n	80119a0 <_dtoa_r+0x698>
 8011d8e:	9b07      	ldr	r3, [sp, #28]
 8011d90:	9a07      	ldr	r2, [sp, #28]
 8011d92:	f803 8c01 	strb.w	r8, [r3, #-1]
 8011d96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011d98:	4293      	cmp	r3, r2
 8011d9a:	d028      	beq.n	8011dee <_dtoa_r+0xae6>
 8011d9c:	4649      	mov	r1, r9
 8011d9e:	2300      	movs	r3, #0
 8011da0:	220a      	movs	r2, #10
 8011da2:	4658      	mov	r0, fp
 8011da4:	f000 f920 	bl	8011fe8 <__multadd>
 8011da8:	42af      	cmp	r7, r5
 8011daa:	4681      	mov	r9, r0
 8011dac:	f04f 0300 	mov.w	r3, #0
 8011db0:	f04f 020a 	mov.w	r2, #10
 8011db4:	4639      	mov	r1, r7
 8011db6:	4658      	mov	r0, fp
 8011db8:	d107      	bne.n	8011dca <_dtoa_r+0xac2>
 8011dba:	f000 f915 	bl	8011fe8 <__multadd>
 8011dbe:	4607      	mov	r7, r0
 8011dc0:	4605      	mov	r5, r0
 8011dc2:	9b07      	ldr	r3, [sp, #28]
 8011dc4:	3301      	adds	r3, #1
 8011dc6:	9307      	str	r3, [sp, #28]
 8011dc8:	e774      	b.n	8011cb4 <_dtoa_r+0x9ac>
 8011dca:	f000 f90d 	bl	8011fe8 <__multadd>
 8011dce:	4629      	mov	r1, r5
 8011dd0:	4607      	mov	r7, r0
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	220a      	movs	r2, #10
 8011dd6:	4658      	mov	r0, fp
 8011dd8:	f000 f906 	bl	8011fe8 <__multadd>
 8011ddc:	4605      	mov	r5, r0
 8011dde:	e7f0      	b.n	8011dc2 <_dtoa_r+0xaba>
 8011de0:	9b00      	ldr	r3, [sp, #0]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	bfcc      	ite	gt
 8011de6:	461e      	movgt	r6, r3
 8011de8:	2601      	movle	r6, #1
 8011dea:	4456      	add	r6, sl
 8011dec:	2700      	movs	r7, #0
 8011dee:	4649      	mov	r1, r9
 8011df0:	2201      	movs	r2, #1
 8011df2:	4658      	mov	r0, fp
 8011df4:	f000 faa4 	bl	8012340 <__lshift>
 8011df8:	4621      	mov	r1, r4
 8011dfa:	4681      	mov	r9, r0
 8011dfc:	f000 fb0c 	bl	8012418 <__mcmp>
 8011e00:	2800      	cmp	r0, #0
 8011e02:	dcb0      	bgt.n	8011d66 <_dtoa_r+0xa5e>
 8011e04:	d102      	bne.n	8011e0c <_dtoa_r+0xb04>
 8011e06:	f018 0f01 	tst.w	r8, #1
 8011e0a:	d1ac      	bne.n	8011d66 <_dtoa_r+0xa5e>
 8011e0c:	4633      	mov	r3, r6
 8011e0e:	461e      	mov	r6, r3
 8011e10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011e14:	2a30      	cmp	r2, #48	@ 0x30
 8011e16:	d0fa      	beq.n	8011e0e <_dtoa_r+0xb06>
 8011e18:	e5c2      	b.n	80119a0 <_dtoa_r+0x698>
 8011e1a:	459a      	cmp	sl, r3
 8011e1c:	d1a4      	bne.n	8011d68 <_dtoa_r+0xa60>
 8011e1e:	9b04      	ldr	r3, [sp, #16]
 8011e20:	3301      	adds	r3, #1
 8011e22:	9304      	str	r3, [sp, #16]
 8011e24:	2331      	movs	r3, #49	@ 0x31
 8011e26:	f88a 3000 	strb.w	r3, [sl]
 8011e2a:	e5b9      	b.n	80119a0 <_dtoa_r+0x698>
 8011e2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011e2e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8011e8c <_dtoa_r+0xb84>
 8011e32:	b11b      	cbz	r3, 8011e3c <_dtoa_r+0xb34>
 8011e34:	f10a 0308 	add.w	r3, sl, #8
 8011e38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011e3a:	6013      	str	r3, [r2, #0]
 8011e3c:	4650      	mov	r0, sl
 8011e3e:	b019      	add	sp, #100	@ 0x64
 8011e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e46:	2b01      	cmp	r3, #1
 8011e48:	f77f ae37 	ble.w	8011aba <_dtoa_r+0x7b2>
 8011e4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011e50:	2001      	movs	r0, #1
 8011e52:	e655      	b.n	8011b00 <_dtoa_r+0x7f8>
 8011e54:	9b00      	ldr	r3, [sp, #0]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	f77f aed6 	ble.w	8011c08 <_dtoa_r+0x900>
 8011e5c:	4656      	mov	r6, sl
 8011e5e:	4621      	mov	r1, r4
 8011e60:	4648      	mov	r0, r9
 8011e62:	f7ff f9c6 	bl	80111f2 <quorem>
 8011e66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011e6a:	f806 8b01 	strb.w	r8, [r6], #1
 8011e6e:	9b00      	ldr	r3, [sp, #0]
 8011e70:	eba6 020a 	sub.w	r2, r6, sl
 8011e74:	4293      	cmp	r3, r2
 8011e76:	ddb3      	ble.n	8011de0 <_dtoa_r+0xad8>
 8011e78:	4649      	mov	r1, r9
 8011e7a:	2300      	movs	r3, #0
 8011e7c:	220a      	movs	r2, #10
 8011e7e:	4658      	mov	r0, fp
 8011e80:	f000 f8b2 	bl	8011fe8 <__multadd>
 8011e84:	4681      	mov	r9, r0
 8011e86:	e7ea      	b.n	8011e5e <_dtoa_r+0xb56>
 8011e88:	08013b90 	.word	0x08013b90
 8011e8c:	08013b14 	.word	0x08013b14

08011e90 <_free_r>:
 8011e90:	b538      	push	{r3, r4, r5, lr}
 8011e92:	4605      	mov	r5, r0
 8011e94:	2900      	cmp	r1, #0
 8011e96:	d041      	beq.n	8011f1c <_free_r+0x8c>
 8011e98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e9c:	1f0c      	subs	r4, r1, #4
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	bfb8      	it	lt
 8011ea2:	18e4      	addlt	r4, r4, r3
 8011ea4:	f7fe fb70 	bl	8010588 <__malloc_lock>
 8011ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8011f20 <_free_r+0x90>)
 8011eaa:	6813      	ldr	r3, [r2, #0]
 8011eac:	b933      	cbnz	r3, 8011ebc <_free_r+0x2c>
 8011eae:	6063      	str	r3, [r4, #4]
 8011eb0:	6014      	str	r4, [r2, #0]
 8011eb2:	4628      	mov	r0, r5
 8011eb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011eb8:	f7fe bb6c 	b.w	8010594 <__malloc_unlock>
 8011ebc:	42a3      	cmp	r3, r4
 8011ebe:	d908      	bls.n	8011ed2 <_free_r+0x42>
 8011ec0:	6820      	ldr	r0, [r4, #0]
 8011ec2:	1821      	adds	r1, r4, r0
 8011ec4:	428b      	cmp	r3, r1
 8011ec6:	bf01      	itttt	eq
 8011ec8:	6819      	ldreq	r1, [r3, #0]
 8011eca:	685b      	ldreq	r3, [r3, #4]
 8011ecc:	1809      	addeq	r1, r1, r0
 8011ece:	6021      	streq	r1, [r4, #0]
 8011ed0:	e7ed      	b.n	8011eae <_free_r+0x1e>
 8011ed2:	461a      	mov	r2, r3
 8011ed4:	685b      	ldr	r3, [r3, #4]
 8011ed6:	b10b      	cbz	r3, 8011edc <_free_r+0x4c>
 8011ed8:	42a3      	cmp	r3, r4
 8011eda:	d9fa      	bls.n	8011ed2 <_free_r+0x42>
 8011edc:	6811      	ldr	r1, [r2, #0]
 8011ede:	1850      	adds	r0, r2, r1
 8011ee0:	42a0      	cmp	r0, r4
 8011ee2:	d10b      	bne.n	8011efc <_free_r+0x6c>
 8011ee4:	6820      	ldr	r0, [r4, #0]
 8011ee6:	4401      	add	r1, r0
 8011ee8:	1850      	adds	r0, r2, r1
 8011eea:	4283      	cmp	r3, r0
 8011eec:	6011      	str	r1, [r2, #0]
 8011eee:	d1e0      	bne.n	8011eb2 <_free_r+0x22>
 8011ef0:	6818      	ldr	r0, [r3, #0]
 8011ef2:	685b      	ldr	r3, [r3, #4]
 8011ef4:	6053      	str	r3, [r2, #4]
 8011ef6:	4408      	add	r0, r1
 8011ef8:	6010      	str	r0, [r2, #0]
 8011efa:	e7da      	b.n	8011eb2 <_free_r+0x22>
 8011efc:	d902      	bls.n	8011f04 <_free_r+0x74>
 8011efe:	230c      	movs	r3, #12
 8011f00:	602b      	str	r3, [r5, #0]
 8011f02:	e7d6      	b.n	8011eb2 <_free_r+0x22>
 8011f04:	6820      	ldr	r0, [r4, #0]
 8011f06:	1821      	adds	r1, r4, r0
 8011f08:	428b      	cmp	r3, r1
 8011f0a:	bf04      	itt	eq
 8011f0c:	6819      	ldreq	r1, [r3, #0]
 8011f0e:	685b      	ldreq	r3, [r3, #4]
 8011f10:	6063      	str	r3, [r4, #4]
 8011f12:	bf04      	itt	eq
 8011f14:	1809      	addeq	r1, r1, r0
 8011f16:	6021      	streq	r1, [r4, #0]
 8011f18:	6054      	str	r4, [r2, #4]
 8011f1a:	e7ca      	b.n	8011eb2 <_free_r+0x22>
 8011f1c:	bd38      	pop	{r3, r4, r5, pc}
 8011f1e:	bf00      	nop
 8011f20:	20001de8 	.word	0x20001de8

08011f24 <_Balloc>:
 8011f24:	b570      	push	{r4, r5, r6, lr}
 8011f26:	69c6      	ldr	r6, [r0, #28]
 8011f28:	4604      	mov	r4, r0
 8011f2a:	460d      	mov	r5, r1
 8011f2c:	b976      	cbnz	r6, 8011f4c <_Balloc+0x28>
 8011f2e:	2010      	movs	r0, #16
 8011f30:	f7fe fa78 	bl	8010424 <malloc>
 8011f34:	4602      	mov	r2, r0
 8011f36:	61e0      	str	r0, [r4, #28]
 8011f38:	b920      	cbnz	r0, 8011f44 <_Balloc+0x20>
 8011f3a:	4b18      	ldr	r3, [pc, #96]	@ (8011f9c <_Balloc+0x78>)
 8011f3c:	4818      	ldr	r0, [pc, #96]	@ (8011fa0 <_Balloc+0x7c>)
 8011f3e:	216b      	movs	r1, #107	@ 0x6b
 8011f40:	f000 fd90 	bl	8012a64 <__assert_func>
 8011f44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011f48:	6006      	str	r6, [r0, #0]
 8011f4a:	60c6      	str	r6, [r0, #12]
 8011f4c:	69e6      	ldr	r6, [r4, #28]
 8011f4e:	68f3      	ldr	r3, [r6, #12]
 8011f50:	b183      	cbz	r3, 8011f74 <_Balloc+0x50>
 8011f52:	69e3      	ldr	r3, [r4, #28]
 8011f54:	68db      	ldr	r3, [r3, #12]
 8011f56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011f5a:	b9b8      	cbnz	r0, 8011f8c <_Balloc+0x68>
 8011f5c:	2101      	movs	r1, #1
 8011f5e:	fa01 f605 	lsl.w	r6, r1, r5
 8011f62:	1d72      	adds	r2, r6, #5
 8011f64:	0092      	lsls	r2, r2, #2
 8011f66:	4620      	mov	r0, r4
 8011f68:	f000 fd9a 	bl	8012aa0 <_calloc_r>
 8011f6c:	b160      	cbz	r0, 8011f88 <_Balloc+0x64>
 8011f6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011f72:	e00e      	b.n	8011f92 <_Balloc+0x6e>
 8011f74:	2221      	movs	r2, #33	@ 0x21
 8011f76:	2104      	movs	r1, #4
 8011f78:	4620      	mov	r0, r4
 8011f7a:	f000 fd91 	bl	8012aa0 <_calloc_r>
 8011f7e:	69e3      	ldr	r3, [r4, #28]
 8011f80:	60f0      	str	r0, [r6, #12]
 8011f82:	68db      	ldr	r3, [r3, #12]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d1e4      	bne.n	8011f52 <_Balloc+0x2e>
 8011f88:	2000      	movs	r0, #0
 8011f8a:	bd70      	pop	{r4, r5, r6, pc}
 8011f8c:	6802      	ldr	r2, [r0, #0]
 8011f8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011f92:	2300      	movs	r3, #0
 8011f94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011f98:	e7f7      	b.n	8011f8a <_Balloc+0x66>
 8011f9a:	bf00      	nop
 8011f9c:	08013b21 	.word	0x08013b21
 8011fa0:	08013ba1 	.word	0x08013ba1

08011fa4 <_Bfree>:
 8011fa4:	b570      	push	{r4, r5, r6, lr}
 8011fa6:	69c6      	ldr	r6, [r0, #28]
 8011fa8:	4605      	mov	r5, r0
 8011faa:	460c      	mov	r4, r1
 8011fac:	b976      	cbnz	r6, 8011fcc <_Bfree+0x28>
 8011fae:	2010      	movs	r0, #16
 8011fb0:	f7fe fa38 	bl	8010424 <malloc>
 8011fb4:	4602      	mov	r2, r0
 8011fb6:	61e8      	str	r0, [r5, #28]
 8011fb8:	b920      	cbnz	r0, 8011fc4 <_Bfree+0x20>
 8011fba:	4b09      	ldr	r3, [pc, #36]	@ (8011fe0 <_Bfree+0x3c>)
 8011fbc:	4809      	ldr	r0, [pc, #36]	@ (8011fe4 <_Bfree+0x40>)
 8011fbe:	218f      	movs	r1, #143	@ 0x8f
 8011fc0:	f000 fd50 	bl	8012a64 <__assert_func>
 8011fc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011fc8:	6006      	str	r6, [r0, #0]
 8011fca:	60c6      	str	r6, [r0, #12]
 8011fcc:	b13c      	cbz	r4, 8011fde <_Bfree+0x3a>
 8011fce:	69eb      	ldr	r3, [r5, #28]
 8011fd0:	6862      	ldr	r2, [r4, #4]
 8011fd2:	68db      	ldr	r3, [r3, #12]
 8011fd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011fd8:	6021      	str	r1, [r4, #0]
 8011fda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011fde:	bd70      	pop	{r4, r5, r6, pc}
 8011fe0:	08013b21 	.word	0x08013b21
 8011fe4:	08013ba1 	.word	0x08013ba1

08011fe8 <__multadd>:
 8011fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fec:	690d      	ldr	r5, [r1, #16]
 8011fee:	4607      	mov	r7, r0
 8011ff0:	460c      	mov	r4, r1
 8011ff2:	461e      	mov	r6, r3
 8011ff4:	f101 0c14 	add.w	ip, r1, #20
 8011ff8:	2000      	movs	r0, #0
 8011ffa:	f8dc 3000 	ldr.w	r3, [ip]
 8011ffe:	b299      	uxth	r1, r3
 8012000:	fb02 6101 	mla	r1, r2, r1, r6
 8012004:	0c1e      	lsrs	r6, r3, #16
 8012006:	0c0b      	lsrs	r3, r1, #16
 8012008:	fb02 3306 	mla	r3, r2, r6, r3
 801200c:	b289      	uxth	r1, r1
 801200e:	3001      	adds	r0, #1
 8012010:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012014:	4285      	cmp	r5, r0
 8012016:	f84c 1b04 	str.w	r1, [ip], #4
 801201a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801201e:	dcec      	bgt.n	8011ffa <__multadd+0x12>
 8012020:	b30e      	cbz	r6, 8012066 <__multadd+0x7e>
 8012022:	68a3      	ldr	r3, [r4, #8]
 8012024:	42ab      	cmp	r3, r5
 8012026:	dc19      	bgt.n	801205c <__multadd+0x74>
 8012028:	6861      	ldr	r1, [r4, #4]
 801202a:	4638      	mov	r0, r7
 801202c:	3101      	adds	r1, #1
 801202e:	f7ff ff79 	bl	8011f24 <_Balloc>
 8012032:	4680      	mov	r8, r0
 8012034:	b928      	cbnz	r0, 8012042 <__multadd+0x5a>
 8012036:	4602      	mov	r2, r0
 8012038:	4b0c      	ldr	r3, [pc, #48]	@ (801206c <__multadd+0x84>)
 801203a:	480d      	ldr	r0, [pc, #52]	@ (8012070 <__multadd+0x88>)
 801203c:	21ba      	movs	r1, #186	@ 0xba
 801203e:	f000 fd11 	bl	8012a64 <__assert_func>
 8012042:	6922      	ldr	r2, [r4, #16]
 8012044:	3202      	adds	r2, #2
 8012046:	f104 010c 	add.w	r1, r4, #12
 801204a:	0092      	lsls	r2, r2, #2
 801204c:	300c      	adds	r0, #12
 801204e:	f7ff f8c2 	bl	80111d6 <memcpy>
 8012052:	4621      	mov	r1, r4
 8012054:	4638      	mov	r0, r7
 8012056:	f7ff ffa5 	bl	8011fa4 <_Bfree>
 801205a:	4644      	mov	r4, r8
 801205c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012060:	3501      	adds	r5, #1
 8012062:	615e      	str	r6, [r3, #20]
 8012064:	6125      	str	r5, [r4, #16]
 8012066:	4620      	mov	r0, r4
 8012068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801206c:	08013b90 	.word	0x08013b90
 8012070:	08013ba1 	.word	0x08013ba1

08012074 <__hi0bits>:
 8012074:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012078:	4603      	mov	r3, r0
 801207a:	bf36      	itet	cc
 801207c:	0403      	lslcc	r3, r0, #16
 801207e:	2000      	movcs	r0, #0
 8012080:	2010      	movcc	r0, #16
 8012082:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012086:	bf3c      	itt	cc
 8012088:	021b      	lslcc	r3, r3, #8
 801208a:	3008      	addcc	r0, #8
 801208c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012090:	bf3c      	itt	cc
 8012092:	011b      	lslcc	r3, r3, #4
 8012094:	3004      	addcc	r0, #4
 8012096:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801209a:	bf3c      	itt	cc
 801209c:	009b      	lslcc	r3, r3, #2
 801209e:	3002      	addcc	r0, #2
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	db05      	blt.n	80120b0 <__hi0bits+0x3c>
 80120a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80120a8:	f100 0001 	add.w	r0, r0, #1
 80120ac:	bf08      	it	eq
 80120ae:	2020      	moveq	r0, #32
 80120b0:	4770      	bx	lr

080120b2 <__lo0bits>:
 80120b2:	6803      	ldr	r3, [r0, #0]
 80120b4:	4602      	mov	r2, r0
 80120b6:	f013 0007 	ands.w	r0, r3, #7
 80120ba:	d00b      	beq.n	80120d4 <__lo0bits+0x22>
 80120bc:	07d9      	lsls	r1, r3, #31
 80120be:	d421      	bmi.n	8012104 <__lo0bits+0x52>
 80120c0:	0798      	lsls	r0, r3, #30
 80120c2:	bf49      	itett	mi
 80120c4:	085b      	lsrmi	r3, r3, #1
 80120c6:	089b      	lsrpl	r3, r3, #2
 80120c8:	2001      	movmi	r0, #1
 80120ca:	6013      	strmi	r3, [r2, #0]
 80120cc:	bf5c      	itt	pl
 80120ce:	6013      	strpl	r3, [r2, #0]
 80120d0:	2002      	movpl	r0, #2
 80120d2:	4770      	bx	lr
 80120d4:	b299      	uxth	r1, r3
 80120d6:	b909      	cbnz	r1, 80120dc <__lo0bits+0x2a>
 80120d8:	0c1b      	lsrs	r3, r3, #16
 80120da:	2010      	movs	r0, #16
 80120dc:	b2d9      	uxtb	r1, r3
 80120de:	b909      	cbnz	r1, 80120e4 <__lo0bits+0x32>
 80120e0:	3008      	adds	r0, #8
 80120e2:	0a1b      	lsrs	r3, r3, #8
 80120e4:	0719      	lsls	r1, r3, #28
 80120e6:	bf04      	itt	eq
 80120e8:	091b      	lsreq	r3, r3, #4
 80120ea:	3004      	addeq	r0, #4
 80120ec:	0799      	lsls	r1, r3, #30
 80120ee:	bf04      	itt	eq
 80120f0:	089b      	lsreq	r3, r3, #2
 80120f2:	3002      	addeq	r0, #2
 80120f4:	07d9      	lsls	r1, r3, #31
 80120f6:	d403      	bmi.n	8012100 <__lo0bits+0x4e>
 80120f8:	085b      	lsrs	r3, r3, #1
 80120fa:	f100 0001 	add.w	r0, r0, #1
 80120fe:	d003      	beq.n	8012108 <__lo0bits+0x56>
 8012100:	6013      	str	r3, [r2, #0]
 8012102:	4770      	bx	lr
 8012104:	2000      	movs	r0, #0
 8012106:	4770      	bx	lr
 8012108:	2020      	movs	r0, #32
 801210a:	4770      	bx	lr

0801210c <__i2b>:
 801210c:	b510      	push	{r4, lr}
 801210e:	460c      	mov	r4, r1
 8012110:	2101      	movs	r1, #1
 8012112:	f7ff ff07 	bl	8011f24 <_Balloc>
 8012116:	4602      	mov	r2, r0
 8012118:	b928      	cbnz	r0, 8012126 <__i2b+0x1a>
 801211a:	4b05      	ldr	r3, [pc, #20]	@ (8012130 <__i2b+0x24>)
 801211c:	4805      	ldr	r0, [pc, #20]	@ (8012134 <__i2b+0x28>)
 801211e:	f240 1145 	movw	r1, #325	@ 0x145
 8012122:	f000 fc9f 	bl	8012a64 <__assert_func>
 8012126:	2301      	movs	r3, #1
 8012128:	6144      	str	r4, [r0, #20]
 801212a:	6103      	str	r3, [r0, #16]
 801212c:	bd10      	pop	{r4, pc}
 801212e:	bf00      	nop
 8012130:	08013b90 	.word	0x08013b90
 8012134:	08013ba1 	.word	0x08013ba1

08012138 <__multiply>:
 8012138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801213c:	4614      	mov	r4, r2
 801213e:	690a      	ldr	r2, [r1, #16]
 8012140:	6923      	ldr	r3, [r4, #16]
 8012142:	429a      	cmp	r2, r3
 8012144:	bfa8      	it	ge
 8012146:	4623      	movge	r3, r4
 8012148:	460f      	mov	r7, r1
 801214a:	bfa4      	itt	ge
 801214c:	460c      	movge	r4, r1
 801214e:	461f      	movge	r7, r3
 8012150:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012154:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012158:	68a3      	ldr	r3, [r4, #8]
 801215a:	6861      	ldr	r1, [r4, #4]
 801215c:	eb0a 0609 	add.w	r6, sl, r9
 8012160:	42b3      	cmp	r3, r6
 8012162:	b085      	sub	sp, #20
 8012164:	bfb8      	it	lt
 8012166:	3101      	addlt	r1, #1
 8012168:	f7ff fedc 	bl	8011f24 <_Balloc>
 801216c:	b930      	cbnz	r0, 801217c <__multiply+0x44>
 801216e:	4602      	mov	r2, r0
 8012170:	4b44      	ldr	r3, [pc, #272]	@ (8012284 <__multiply+0x14c>)
 8012172:	4845      	ldr	r0, [pc, #276]	@ (8012288 <__multiply+0x150>)
 8012174:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012178:	f000 fc74 	bl	8012a64 <__assert_func>
 801217c:	f100 0514 	add.w	r5, r0, #20
 8012180:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012184:	462b      	mov	r3, r5
 8012186:	2200      	movs	r2, #0
 8012188:	4543      	cmp	r3, r8
 801218a:	d321      	bcc.n	80121d0 <__multiply+0x98>
 801218c:	f107 0114 	add.w	r1, r7, #20
 8012190:	f104 0214 	add.w	r2, r4, #20
 8012194:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012198:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801219c:	9302      	str	r3, [sp, #8]
 801219e:	1b13      	subs	r3, r2, r4
 80121a0:	3b15      	subs	r3, #21
 80121a2:	f023 0303 	bic.w	r3, r3, #3
 80121a6:	3304      	adds	r3, #4
 80121a8:	f104 0715 	add.w	r7, r4, #21
 80121ac:	42ba      	cmp	r2, r7
 80121ae:	bf38      	it	cc
 80121b0:	2304      	movcc	r3, #4
 80121b2:	9301      	str	r3, [sp, #4]
 80121b4:	9b02      	ldr	r3, [sp, #8]
 80121b6:	9103      	str	r1, [sp, #12]
 80121b8:	428b      	cmp	r3, r1
 80121ba:	d80c      	bhi.n	80121d6 <__multiply+0x9e>
 80121bc:	2e00      	cmp	r6, #0
 80121be:	dd03      	ble.n	80121c8 <__multiply+0x90>
 80121c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d05b      	beq.n	8012280 <__multiply+0x148>
 80121c8:	6106      	str	r6, [r0, #16]
 80121ca:	b005      	add	sp, #20
 80121cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121d0:	f843 2b04 	str.w	r2, [r3], #4
 80121d4:	e7d8      	b.n	8012188 <__multiply+0x50>
 80121d6:	f8b1 a000 	ldrh.w	sl, [r1]
 80121da:	f1ba 0f00 	cmp.w	sl, #0
 80121de:	d024      	beq.n	801222a <__multiply+0xf2>
 80121e0:	f104 0e14 	add.w	lr, r4, #20
 80121e4:	46a9      	mov	r9, r5
 80121e6:	f04f 0c00 	mov.w	ip, #0
 80121ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 80121ee:	f8d9 3000 	ldr.w	r3, [r9]
 80121f2:	fa1f fb87 	uxth.w	fp, r7
 80121f6:	b29b      	uxth	r3, r3
 80121f8:	fb0a 330b 	mla	r3, sl, fp, r3
 80121fc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012200:	f8d9 7000 	ldr.w	r7, [r9]
 8012204:	4463      	add	r3, ip
 8012206:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801220a:	fb0a c70b 	mla	r7, sl, fp, ip
 801220e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012212:	b29b      	uxth	r3, r3
 8012214:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012218:	4572      	cmp	r2, lr
 801221a:	f849 3b04 	str.w	r3, [r9], #4
 801221e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012222:	d8e2      	bhi.n	80121ea <__multiply+0xb2>
 8012224:	9b01      	ldr	r3, [sp, #4]
 8012226:	f845 c003 	str.w	ip, [r5, r3]
 801222a:	9b03      	ldr	r3, [sp, #12]
 801222c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012230:	3104      	adds	r1, #4
 8012232:	f1b9 0f00 	cmp.w	r9, #0
 8012236:	d021      	beq.n	801227c <__multiply+0x144>
 8012238:	682b      	ldr	r3, [r5, #0]
 801223a:	f104 0c14 	add.w	ip, r4, #20
 801223e:	46ae      	mov	lr, r5
 8012240:	f04f 0a00 	mov.w	sl, #0
 8012244:	f8bc b000 	ldrh.w	fp, [ip]
 8012248:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801224c:	fb09 770b 	mla	r7, r9, fp, r7
 8012250:	4457      	add	r7, sl
 8012252:	b29b      	uxth	r3, r3
 8012254:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012258:	f84e 3b04 	str.w	r3, [lr], #4
 801225c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012260:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012264:	f8be 3000 	ldrh.w	r3, [lr]
 8012268:	fb09 330a 	mla	r3, r9, sl, r3
 801226c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012270:	4562      	cmp	r2, ip
 8012272:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012276:	d8e5      	bhi.n	8012244 <__multiply+0x10c>
 8012278:	9f01      	ldr	r7, [sp, #4]
 801227a:	51eb      	str	r3, [r5, r7]
 801227c:	3504      	adds	r5, #4
 801227e:	e799      	b.n	80121b4 <__multiply+0x7c>
 8012280:	3e01      	subs	r6, #1
 8012282:	e79b      	b.n	80121bc <__multiply+0x84>
 8012284:	08013b90 	.word	0x08013b90
 8012288:	08013ba1 	.word	0x08013ba1

0801228c <__pow5mult>:
 801228c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012290:	4615      	mov	r5, r2
 8012292:	f012 0203 	ands.w	r2, r2, #3
 8012296:	4607      	mov	r7, r0
 8012298:	460e      	mov	r6, r1
 801229a:	d007      	beq.n	80122ac <__pow5mult+0x20>
 801229c:	4c25      	ldr	r4, [pc, #148]	@ (8012334 <__pow5mult+0xa8>)
 801229e:	3a01      	subs	r2, #1
 80122a0:	2300      	movs	r3, #0
 80122a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80122a6:	f7ff fe9f 	bl	8011fe8 <__multadd>
 80122aa:	4606      	mov	r6, r0
 80122ac:	10ad      	asrs	r5, r5, #2
 80122ae:	d03d      	beq.n	801232c <__pow5mult+0xa0>
 80122b0:	69fc      	ldr	r4, [r7, #28]
 80122b2:	b97c      	cbnz	r4, 80122d4 <__pow5mult+0x48>
 80122b4:	2010      	movs	r0, #16
 80122b6:	f7fe f8b5 	bl	8010424 <malloc>
 80122ba:	4602      	mov	r2, r0
 80122bc:	61f8      	str	r0, [r7, #28]
 80122be:	b928      	cbnz	r0, 80122cc <__pow5mult+0x40>
 80122c0:	4b1d      	ldr	r3, [pc, #116]	@ (8012338 <__pow5mult+0xac>)
 80122c2:	481e      	ldr	r0, [pc, #120]	@ (801233c <__pow5mult+0xb0>)
 80122c4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80122c8:	f000 fbcc 	bl	8012a64 <__assert_func>
 80122cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80122d0:	6004      	str	r4, [r0, #0]
 80122d2:	60c4      	str	r4, [r0, #12]
 80122d4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80122d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80122dc:	b94c      	cbnz	r4, 80122f2 <__pow5mult+0x66>
 80122de:	f240 2171 	movw	r1, #625	@ 0x271
 80122e2:	4638      	mov	r0, r7
 80122e4:	f7ff ff12 	bl	801210c <__i2b>
 80122e8:	2300      	movs	r3, #0
 80122ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80122ee:	4604      	mov	r4, r0
 80122f0:	6003      	str	r3, [r0, #0]
 80122f2:	f04f 0900 	mov.w	r9, #0
 80122f6:	07eb      	lsls	r3, r5, #31
 80122f8:	d50a      	bpl.n	8012310 <__pow5mult+0x84>
 80122fa:	4631      	mov	r1, r6
 80122fc:	4622      	mov	r2, r4
 80122fe:	4638      	mov	r0, r7
 8012300:	f7ff ff1a 	bl	8012138 <__multiply>
 8012304:	4631      	mov	r1, r6
 8012306:	4680      	mov	r8, r0
 8012308:	4638      	mov	r0, r7
 801230a:	f7ff fe4b 	bl	8011fa4 <_Bfree>
 801230e:	4646      	mov	r6, r8
 8012310:	106d      	asrs	r5, r5, #1
 8012312:	d00b      	beq.n	801232c <__pow5mult+0xa0>
 8012314:	6820      	ldr	r0, [r4, #0]
 8012316:	b938      	cbnz	r0, 8012328 <__pow5mult+0x9c>
 8012318:	4622      	mov	r2, r4
 801231a:	4621      	mov	r1, r4
 801231c:	4638      	mov	r0, r7
 801231e:	f7ff ff0b 	bl	8012138 <__multiply>
 8012322:	6020      	str	r0, [r4, #0]
 8012324:	f8c0 9000 	str.w	r9, [r0]
 8012328:	4604      	mov	r4, r0
 801232a:	e7e4      	b.n	80122f6 <__pow5mult+0x6a>
 801232c:	4630      	mov	r0, r6
 801232e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012332:	bf00      	nop
 8012334:	08013bfc 	.word	0x08013bfc
 8012338:	08013b21 	.word	0x08013b21
 801233c:	08013ba1 	.word	0x08013ba1

08012340 <__lshift>:
 8012340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012344:	460c      	mov	r4, r1
 8012346:	6849      	ldr	r1, [r1, #4]
 8012348:	6923      	ldr	r3, [r4, #16]
 801234a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801234e:	68a3      	ldr	r3, [r4, #8]
 8012350:	4607      	mov	r7, r0
 8012352:	4691      	mov	r9, r2
 8012354:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012358:	f108 0601 	add.w	r6, r8, #1
 801235c:	42b3      	cmp	r3, r6
 801235e:	db0b      	blt.n	8012378 <__lshift+0x38>
 8012360:	4638      	mov	r0, r7
 8012362:	f7ff fddf 	bl	8011f24 <_Balloc>
 8012366:	4605      	mov	r5, r0
 8012368:	b948      	cbnz	r0, 801237e <__lshift+0x3e>
 801236a:	4602      	mov	r2, r0
 801236c:	4b28      	ldr	r3, [pc, #160]	@ (8012410 <__lshift+0xd0>)
 801236e:	4829      	ldr	r0, [pc, #164]	@ (8012414 <__lshift+0xd4>)
 8012370:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012374:	f000 fb76 	bl	8012a64 <__assert_func>
 8012378:	3101      	adds	r1, #1
 801237a:	005b      	lsls	r3, r3, #1
 801237c:	e7ee      	b.n	801235c <__lshift+0x1c>
 801237e:	2300      	movs	r3, #0
 8012380:	f100 0114 	add.w	r1, r0, #20
 8012384:	f100 0210 	add.w	r2, r0, #16
 8012388:	4618      	mov	r0, r3
 801238a:	4553      	cmp	r3, sl
 801238c:	db33      	blt.n	80123f6 <__lshift+0xb6>
 801238e:	6920      	ldr	r0, [r4, #16]
 8012390:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012394:	f104 0314 	add.w	r3, r4, #20
 8012398:	f019 091f 	ands.w	r9, r9, #31
 801239c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80123a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80123a4:	d02b      	beq.n	80123fe <__lshift+0xbe>
 80123a6:	f1c9 0e20 	rsb	lr, r9, #32
 80123aa:	468a      	mov	sl, r1
 80123ac:	2200      	movs	r2, #0
 80123ae:	6818      	ldr	r0, [r3, #0]
 80123b0:	fa00 f009 	lsl.w	r0, r0, r9
 80123b4:	4310      	orrs	r0, r2
 80123b6:	f84a 0b04 	str.w	r0, [sl], #4
 80123ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80123be:	459c      	cmp	ip, r3
 80123c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80123c4:	d8f3      	bhi.n	80123ae <__lshift+0x6e>
 80123c6:	ebac 0304 	sub.w	r3, ip, r4
 80123ca:	3b15      	subs	r3, #21
 80123cc:	f023 0303 	bic.w	r3, r3, #3
 80123d0:	3304      	adds	r3, #4
 80123d2:	f104 0015 	add.w	r0, r4, #21
 80123d6:	4584      	cmp	ip, r0
 80123d8:	bf38      	it	cc
 80123da:	2304      	movcc	r3, #4
 80123dc:	50ca      	str	r2, [r1, r3]
 80123de:	b10a      	cbz	r2, 80123e4 <__lshift+0xa4>
 80123e0:	f108 0602 	add.w	r6, r8, #2
 80123e4:	3e01      	subs	r6, #1
 80123e6:	4638      	mov	r0, r7
 80123e8:	612e      	str	r6, [r5, #16]
 80123ea:	4621      	mov	r1, r4
 80123ec:	f7ff fdda 	bl	8011fa4 <_Bfree>
 80123f0:	4628      	mov	r0, r5
 80123f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80123fa:	3301      	adds	r3, #1
 80123fc:	e7c5      	b.n	801238a <__lshift+0x4a>
 80123fe:	3904      	subs	r1, #4
 8012400:	f853 2b04 	ldr.w	r2, [r3], #4
 8012404:	f841 2f04 	str.w	r2, [r1, #4]!
 8012408:	459c      	cmp	ip, r3
 801240a:	d8f9      	bhi.n	8012400 <__lshift+0xc0>
 801240c:	e7ea      	b.n	80123e4 <__lshift+0xa4>
 801240e:	bf00      	nop
 8012410:	08013b90 	.word	0x08013b90
 8012414:	08013ba1 	.word	0x08013ba1

08012418 <__mcmp>:
 8012418:	690a      	ldr	r2, [r1, #16]
 801241a:	4603      	mov	r3, r0
 801241c:	6900      	ldr	r0, [r0, #16]
 801241e:	1a80      	subs	r0, r0, r2
 8012420:	b530      	push	{r4, r5, lr}
 8012422:	d10e      	bne.n	8012442 <__mcmp+0x2a>
 8012424:	3314      	adds	r3, #20
 8012426:	3114      	adds	r1, #20
 8012428:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801242c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012430:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012434:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012438:	4295      	cmp	r5, r2
 801243a:	d003      	beq.n	8012444 <__mcmp+0x2c>
 801243c:	d205      	bcs.n	801244a <__mcmp+0x32>
 801243e:	f04f 30ff 	mov.w	r0, #4294967295
 8012442:	bd30      	pop	{r4, r5, pc}
 8012444:	42a3      	cmp	r3, r4
 8012446:	d3f3      	bcc.n	8012430 <__mcmp+0x18>
 8012448:	e7fb      	b.n	8012442 <__mcmp+0x2a>
 801244a:	2001      	movs	r0, #1
 801244c:	e7f9      	b.n	8012442 <__mcmp+0x2a>
	...

08012450 <__mdiff>:
 8012450:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012454:	4689      	mov	r9, r1
 8012456:	4606      	mov	r6, r0
 8012458:	4611      	mov	r1, r2
 801245a:	4648      	mov	r0, r9
 801245c:	4614      	mov	r4, r2
 801245e:	f7ff ffdb 	bl	8012418 <__mcmp>
 8012462:	1e05      	subs	r5, r0, #0
 8012464:	d112      	bne.n	801248c <__mdiff+0x3c>
 8012466:	4629      	mov	r1, r5
 8012468:	4630      	mov	r0, r6
 801246a:	f7ff fd5b 	bl	8011f24 <_Balloc>
 801246e:	4602      	mov	r2, r0
 8012470:	b928      	cbnz	r0, 801247e <__mdiff+0x2e>
 8012472:	4b3f      	ldr	r3, [pc, #252]	@ (8012570 <__mdiff+0x120>)
 8012474:	f240 2137 	movw	r1, #567	@ 0x237
 8012478:	483e      	ldr	r0, [pc, #248]	@ (8012574 <__mdiff+0x124>)
 801247a:	f000 faf3 	bl	8012a64 <__assert_func>
 801247e:	2301      	movs	r3, #1
 8012480:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012484:	4610      	mov	r0, r2
 8012486:	b003      	add	sp, #12
 8012488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801248c:	bfbc      	itt	lt
 801248e:	464b      	movlt	r3, r9
 8012490:	46a1      	movlt	r9, r4
 8012492:	4630      	mov	r0, r6
 8012494:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012498:	bfba      	itte	lt
 801249a:	461c      	movlt	r4, r3
 801249c:	2501      	movlt	r5, #1
 801249e:	2500      	movge	r5, #0
 80124a0:	f7ff fd40 	bl	8011f24 <_Balloc>
 80124a4:	4602      	mov	r2, r0
 80124a6:	b918      	cbnz	r0, 80124b0 <__mdiff+0x60>
 80124a8:	4b31      	ldr	r3, [pc, #196]	@ (8012570 <__mdiff+0x120>)
 80124aa:	f240 2145 	movw	r1, #581	@ 0x245
 80124ae:	e7e3      	b.n	8012478 <__mdiff+0x28>
 80124b0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80124b4:	6926      	ldr	r6, [r4, #16]
 80124b6:	60c5      	str	r5, [r0, #12]
 80124b8:	f109 0310 	add.w	r3, r9, #16
 80124bc:	f109 0514 	add.w	r5, r9, #20
 80124c0:	f104 0e14 	add.w	lr, r4, #20
 80124c4:	f100 0b14 	add.w	fp, r0, #20
 80124c8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80124cc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80124d0:	9301      	str	r3, [sp, #4]
 80124d2:	46d9      	mov	r9, fp
 80124d4:	f04f 0c00 	mov.w	ip, #0
 80124d8:	9b01      	ldr	r3, [sp, #4]
 80124da:	f85e 0b04 	ldr.w	r0, [lr], #4
 80124de:	f853 af04 	ldr.w	sl, [r3, #4]!
 80124e2:	9301      	str	r3, [sp, #4]
 80124e4:	fa1f f38a 	uxth.w	r3, sl
 80124e8:	4619      	mov	r1, r3
 80124ea:	b283      	uxth	r3, r0
 80124ec:	1acb      	subs	r3, r1, r3
 80124ee:	0c00      	lsrs	r0, r0, #16
 80124f0:	4463      	add	r3, ip
 80124f2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80124f6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80124fa:	b29b      	uxth	r3, r3
 80124fc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012500:	4576      	cmp	r6, lr
 8012502:	f849 3b04 	str.w	r3, [r9], #4
 8012506:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801250a:	d8e5      	bhi.n	80124d8 <__mdiff+0x88>
 801250c:	1b33      	subs	r3, r6, r4
 801250e:	3b15      	subs	r3, #21
 8012510:	f023 0303 	bic.w	r3, r3, #3
 8012514:	3415      	adds	r4, #21
 8012516:	3304      	adds	r3, #4
 8012518:	42a6      	cmp	r6, r4
 801251a:	bf38      	it	cc
 801251c:	2304      	movcc	r3, #4
 801251e:	441d      	add	r5, r3
 8012520:	445b      	add	r3, fp
 8012522:	461e      	mov	r6, r3
 8012524:	462c      	mov	r4, r5
 8012526:	4544      	cmp	r4, r8
 8012528:	d30e      	bcc.n	8012548 <__mdiff+0xf8>
 801252a:	f108 0103 	add.w	r1, r8, #3
 801252e:	1b49      	subs	r1, r1, r5
 8012530:	f021 0103 	bic.w	r1, r1, #3
 8012534:	3d03      	subs	r5, #3
 8012536:	45a8      	cmp	r8, r5
 8012538:	bf38      	it	cc
 801253a:	2100      	movcc	r1, #0
 801253c:	440b      	add	r3, r1
 801253e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012542:	b191      	cbz	r1, 801256a <__mdiff+0x11a>
 8012544:	6117      	str	r7, [r2, #16]
 8012546:	e79d      	b.n	8012484 <__mdiff+0x34>
 8012548:	f854 1b04 	ldr.w	r1, [r4], #4
 801254c:	46e6      	mov	lr, ip
 801254e:	0c08      	lsrs	r0, r1, #16
 8012550:	fa1c fc81 	uxtah	ip, ip, r1
 8012554:	4471      	add	r1, lr
 8012556:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801255a:	b289      	uxth	r1, r1
 801255c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012560:	f846 1b04 	str.w	r1, [r6], #4
 8012564:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012568:	e7dd      	b.n	8012526 <__mdiff+0xd6>
 801256a:	3f01      	subs	r7, #1
 801256c:	e7e7      	b.n	801253e <__mdiff+0xee>
 801256e:	bf00      	nop
 8012570:	08013b90 	.word	0x08013b90
 8012574:	08013ba1 	.word	0x08013ba1

08012578 <__d2b>:
 8012578:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801257c:	460f      	mov	r7, r1
 801257e:	2101      	movs	r1, #1
 8012580:	ec59 8b10 	vmov	r8, r9, d0
 8012584:	4616      	mov	r6, r2
 8012586:	f7ff fccd 	bl	8011f24 <_Balloc>
 801258a:	4604      	mov	r4, r0
 801258c:	b930      	cbnz	r0, 801259c <__d2b+0x24>
 801258e:	4602      	mov	r2, r0
 8012590:	4b23      	ldr	r3, [pc, #140]	@ (8012620 <__d2b+0xa8>)
 8012592:	4824      	ldr	r0, [pc, #144]	@ (8012624 <__d2b+0xac>)
 8012594:	f240 310f 	movw	r1, #783	@ 0x30f
 8012598:	f000 fa64 	bl	8012a64 <__assert_func>
 801259c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80125a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80125a4:	b10d      	cbz	r5, 80125aa <__d2b+0x32>
 80125a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80125aa:	9301      	str	r3, [sp, #4]
 80125ac:	f1b8 0300 	subs.w	r3, r8, #0
 80125b0:	d023      	beq.n	80125fa <__d2b+0x82>
 80125b2:	4668      	mov	r0, sp
 80125b4:	9300      	str	r3, [sp, #0]
 80125b6:	f7ff fd7c 	bl	80120b2 <__lo0bits>
 80125ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 80125be:	b1d0      	cbz	r0, 80125f6 <__d2b+0x7e>
 80125c0:	f1c0 0320 	rsb	r3, r0, #32
 80125c4:	fa02 f303 	lsl.w	r3, r2, r3
 80125c8:	430b      	orrs	r3, r1
 80125ca:	40c2      	lsrs	r2, r0
 80125cc:	6163      	str	r3, [r4, #20]
 80125ce:	9201      	str	r2, [sp, #4]
 80125d0:	9b01      	ldr	r3, [sp, #4]
 80125d2:	61a3      	str	r3, [r4, #24]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	bf0c      	ite	eq
 80125d8:	2201      	moveq	r2, #1
 80125da:	2202      	movne	r2, #2
 80125dc:	6122      	str	r2, [r4, #16]
 80125de:	b1a5      	cbz	r5, 801260a <__d2b+0x92>
 80125e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80125e4:	4405      	add	r5, r0
 80125e6:	603d      	str	r5, [r7, #0]
 80125e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80125ec:	6030      	str	r0, [r6, #0]
 80125ee:	4620      	mov	r0, r4
 80125f0:	b003      	add	sp, #12
 80125f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80125f6:	6161      	str	r1, [r4, #20]
 80125f8:	e7ea      	b.n	80125d0 <__d2b+0x58>
 80125fa:	a801      	add	r0, sp, #4
 80125fc:	f7ff fd59 	bl	80120b2 <__lo0bits>
 8012600:	9b01      	ldr	r3, [sp, #4]
 8012602:	6163      	str	r3, [r4, #20]
 8012604:	3020      	adds	r0, #32
 8012606:	2201      	movs	r2, #1
 8012608:	e7e8      	b.n	80125dc <__d2b+0x64>
 801260a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801260e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012612:	6038      	str	r0, [r7, #0]
 8012614:	6918      	ldr	r0, [r3, #16]
 8012616:	f7ff fd2d 	bl	8012074 <__hi0bits>
 801261a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801261e:	e7e5      	b.n	80125ec <__d2b+0x74>
 8012620:	08013b90 	.word	0x08013b90
 8012624:	08013ba1 	.word	0x08013ba1

08012628 <__ssputs_r>:
 8012628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801262c:	688e      	ldr	r6, [r1, #8]
 801262e:	461f      	mov	r7, r3
 8012630:	42be      	cmp	r6, r7
 8012632:	680b      	ldr	r3, [r1, #0]
 8012634:	4682      	mov	sl, r0
 8012636:	460c      	mov	r4, r1
 8012638:	4690      	mov	r8, r2
 801263a:	d82d      	bhi.n	8012698 <__ssputs_r+0x70>
 801263c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012640:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012644:	d026      	beq.n	8012694 <__ssputs_r+0x6c>
 8012646:	6965      	ldr	r5, [r4, #20]
 8012648:	6909      	ldr	r1, [r1, #16]
 801264a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801264e:	eba3 0901 	sub.w	r9, r3, r1
 8012652:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012656:	1c7b      	adds	r3, r7, #1
 8012658:	444b      	add	r3, r9
 801265a:	106d      	asrs	r5, r5, #1
 801265c:	429d      	cmp	r5, r3
 801265e:	bf38      	it	cc
 8012660:	461d      	movcc	r5, r3
 8012662:	0553      	lsls	r3, r2, #21
 8012664:	d527      	bpl.n	80126b6 <__ssputs_r+0x8e>
 8012666:	4629      	mov	r1, r5
 8012668:	f7fd ff0e 	bl	8010488 <_malloc_r>
 801266c:	4606      	mov	r6, r0
 801266e:	b360      	cbz	r0, 80126ca <__ssputs_r+0xa2>
 8012670:	6921      	ldr	r1, [r4, #16]
 8012672:	464a      	mov	r2, r9
 8012674:	f7fe fdaf 	bl	80111d6 <memcpy>
 8012678:	89a3      	ldrh	r3, [r4, #12]
 801267a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801267e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012682:	81a3      	strh	r3, [r4, #12]
 8012684:	6126      	str	r6, [r4, #16]
 8012686:	6165      	str	r5, [r4, #20]
 8012688:	444e      	add	r6, r9
 801268a:	eba5 0509 	sub.w	r5, r5, r9
 801268e:	6026      	str	r6, [r4, #0]
 8012690:	60a5      	str	r5, [r4, #8]
 8012692:	463e      	mov	r6, r7
 8012694:	42be      	cmp	r6, r7
 8012696:	d900      	bls.n	801269a <__ssputs_r+0x72>
 8012698:	463e      	mov	r6, r7
 801269a:	6820      	ldr	r0, [r4, #0]
 801269c:	4632      	mov	r2, r6
 801269e:	4641      	mov	r1, r8
 80126a0:	f000 f9c6 	bl	8012a30 <memmove>
 80126a4:	68a3      	ldr	r3, [r4, #8]
 80126a6:	1b9b      	subs	r3, r3, r6
 80126a8:	60a3      	str	r3, [r4, #8]
 80126aa:	6823      	ldr	r3, [r4, #0]
 80126ac:	4433      	add	r3, r6
 80126ae:	6023      	str	r3, [r4, #0]
 80126b0:	2000      	movs	r0, #0
 80126b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126b6:	462a      	mov	r2, r5
 80126b8:	f000 fa18 	bl	8012aec <_realloc_r>
 80126bc:	4606      	mov	r6, r0
 80126be:	2800      	cmp	r0, #0
 80126c0:	d1e0      	bne.n	8012684 <__ssputs_r+0x5c>
 80126c2:	6921      	ldr	r1, [r4, #16]
 80126c4:	4650      	mov	r0, sl
 80126c6:	f7ff fbe3 	bl	8011e90 <_free_r>
 80126ca:	230c      	movs	r3, #12
 80126cc:	f8ca 3000 	str.w	r3, [sl]
 80126d0:	89a3      	ldrh	r3, [r4, #12]
 80126d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80126d6:	81a3      	strh	r3, [r4, #12]
 80126d8:	f04f 30ff 	mov.w	r0, #4294967295
 80126dc:	e7e9      	b.n	80126b2 <__ssputs_r+0x8a>
	...

080126e0 <_svfiprintf_r>:
 80126e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126e4:	4698      	mov	r8, r3
 80126e6:	898b      	ldrh	r3, [r1, #12]
 80126e8:	061b      	lsls	r3, r3, #24
 80126ea:	b09d      	sub	sp, #116	@ 0x74
 80126ec:	4607      	mov	r7, r0
 80126ee:	460d      	mov	r5, r1
 80126f0:	4614      	mov	r4, r2
 80126f2:	d510      	bpl.n	8012716 <_svfiprintf_r+0x36>
 80126f4:	690b      	ldr	r3, [r1, #16]
 80126f6:	b973      	cbnz	r3, 8012716 <_svfiprintf_r+0x36>
 80126f8:	2140      	movs	r1, #64	@ 0x40
 80126fa:	f7fd fec5 	bl	8010488 <_malloc_r>
 80126fe:	6028      	str	r0, [r5, #0]
 8012700:	6128      	str	r0, [r5, #16]
 8012702:	b930      	cbnz	r0, 8012712 <_svfiprintf_r+0x32>
 8012704:	230c      	movs	r3, #12
 8012706:	603b      	str	r3, [r7, #0]
 8012708:	f04f 30ff 	mov.w	r0, #4294967295
 801270c:	b01d      	add	sp, #116	@ 0x74
 801270e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012712:	2340      	movs	r3, #64	@ 0x40
 8012714:	616b      	str	r3, [r5, #20]
 8012716:	2300      	movs	r3, #0
 8012718:	9309      	str	r3, [sp, #36]	@ 0x24
 801271a:	2320      	movs	r3, #32
 801271c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012720:	f8cd 800c 	str.w	r8, [sp, #12]
 8012724:	2330      	movs	r3, #48	@ 0x30
 8012726:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80128c4 <_svfiprintf_r+0x1e4>
 801272a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801272e:	f04f 0901 	mov.w	r9, #1
 8012732:	4623      	mov	r3, r4
 8012734:	469a      	mov	sl, r3
 8012736:	f813 2b01 	ldrb.w	r2, [r3], #1
 801273a:	b10a      	cbz	r2, 8012740 <_svfiprintf_r+0x60>
 801273c:	2a25      	cmp	r2, #37	@ 0x25
 801273e:	d1f9      	bne.n	8012734 <_svfiprintf_r+0x54>
 8012740:	ebba 0b04 	subs.w	fp, sl, r4
 8012744:	d00b      	beq.n	801275e <_svfiprintf_r+0x7e>
 8012746:	465b      	mov	r3, fp
 8012748:	4622      	mov	r2, r4
 801274a:	4629      	mov	r1, r5
 801274c:	4638      	mov	r0, r7
 801274e:	f7ff ff6b 	bl	8012628 <__ssputs_r>
 8012752:	3001      	adds	r0, #1
 8012754:	f000 80a7 	beq.w	80128a6 <_svfiprintf_r+0x1c6>
 8012758:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801275a:	445a      	add	r2, fp
 801275c:	9209      	str	r2, [sp, #36]	@ 0x24
 801275e:	f89a 3000 	ldrb.w	r3, [sl]
 8012762:	2b00      	cmp	r3, #0
 8012764:	f000 809f 	beq.w	80128a6 <_svfiprintf_r+0x1c6>
 8012768:	2300      	movs	r3, #0
 801276a:	f04f 32ff 	mov.w	r2, #4294967295
 801276e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012772:	f10a 0a01 	add.w	sl, sl, #1
 8012776:	9304      	str	r3, [sp, #16]
 8012778:	9307      	str	r3, [sp, #28]
 801277a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801277e:	931a      	str	r3, [sp, #104]	@ 0x68
 8012780:	4654      	mov	r4, sl
 8012782:	2205      	movs	r2, #5
 8012784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012788:	484e      	ldr	r0, [pc, #312]	@ (80128c4 <_svfiprintf_r+0x1e4>)
 801278a:	f7ed fd29 	bl	80001e0 <memchr>
 801278e:	9a04      	ldr	r2, [sp, #16]
 8012790:	b9d8      	cbnz	r0, 80127ca <_svfiprintf_r+0xea>
 8012792:	06d0      	lsls	r0, r2, #27
 8012794:	bf44      	itt	mi
 8012796:	2320      	movmi	r3, #32
 8012798:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801279c:	0711      	lsls	r1, r2, #28
 801279e:	bf44      	itt	mi
 80127a0:	232b      	movmi	r3, #43	@ 0x2b
 80127a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80127a6:	f89a 3000 	ldrb.w	r3, [sl]
 80127aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80127ac:	d015      	beq.n	80127da <_svfiprintf_r+0xfa>
 80127ae:	9a07      	ldr	r2, [sp, #28]
 80127b0:	4654      	mov	r4, sl
 80127b2:	2000      	movs	r0, #0
 80127b4:	f04f 0c0a 	mov.w	ip, #10
 80127b8:	4621      	mov	r1, r4
 80127ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80127be:	3b30      	subs	r3, #48	@ 0x30
 80127c0:	2b09      	cmp	r3, #9
 80127c2:	d94b      	bls.n	801285c <_svfiprintf_r+0x17c>
 80127c4:	b1b0      	cbz	r0, 80127f4 <_svfiprintf_r+0x114>
 80127c6:	9207      	str	r2, [sp, #28]
 80127c8:	e014      	b.n	80127f4 <_svfiprintf_r+0x114>
 80127ca:	eba0 0308 	sub.w	r3, r0, r8
 80127ce:	fa09 f303 	lsl.w	r3, r9, r3
 80127d2:	4313      	orrs	r3, r2
 80127d4:	9304      	str	r3, [sp, #16]
 80127d6:	46a2      	mov	sl, r4
 80127d8:	e7d2      	b.n	8012780 <_svfiprintf_r+0xa0>
 80127da:	9b03      	ldr	r3, [sp, #12]
 80127dc:	1d19      	adds	r1, r3, #4
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	9103      	str	r1, [sp, #12]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	bfbb      	ittet	lt
 80127e6:	425b      	neglt	r3, r3
 80127e8:	f042 0202 	orrlt.w	r2, r2, #2
 80127ec:	9307      	strge	r3, [sp, #28]
 80127ee:	9307      	strlt	r3, [sp, #28]
 80127f0:	bfb8      	it	lt
 80127f2:	9204      	strlt	r2, [sp, #16]
 80127f4:	7823      	ldrb	r3, [r4, #0]
 80127f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80127f8:	d10a      	bne.n	8012810 <_svfiprintf_r+0x130>
 80127fa:	7863      	ldrb	r3, [r4, #1]
 80127fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80127fe:	d132      	bne.n	8012866 <_svfiprintf_r+0x186>
 8012800:	9b03      	ldr	r3, [sp, #12]
 8012802:	1d1a      	adds	r2, r3, #4
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	9203      	str	r2, [sp, #12]
 8012808:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801280c:	3402      	adds	r4, #2
 801280e:	9305      	str	r3, [sp, #20]
 8012810:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80128d4 <_svfiprintf_r+0x1f4>
 8012814:	7821      	ldrb	r1, [r4, #0]
 8012816:	2203      	movs	r2, #3
 8012818:	4650      	mov	r0, sl
 801281a:	f7ed fce1 	bl	80001e0 <memchr>
 801281e:	b138      	cbz	r0, 8012830 <_svfiprintf_r+0x150>
 8012820:	9b04      	ldr	r3, [sp, #16]
 8012822:	eba0 000a 	sub.w	r0, r0, sl
 8012826:	2240      	movs	r2, #64	@ 0x40
 8012828:	4082      	lsls	r2, r0
 801282a:	4313      	orrs	r3, r2
 801282c:	3401      	adds	r4, #1
 801282e:	9304      	str	r3, [sp, #16]
 8012830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012834:	4824      	ldr	r0, [pc, #144]	@ (80128c8 <_svfiprintf_r+0x1e8>)
 8012836:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801283a:	2206      	movs	r2, #6
 801283c:	f7ed fcd0 	bl	80001e0 <memchr>
 8012840:	2800      	cmp	r0, #0
 8012842:	d036      	beq.n	80128b2 <_svfiprintf_r+0x1d2>
 8012844:	4b21      	ldr	r3, [pc, #132]	@ (80128cc <_svfiprintf_r+0x1ec>)
 8012846:	bb1b      	cbnz	r3, 8012890 <_svfiprintf_r+0x1b0>
 8012848:	9b03      	ldr	r3, [sp, #12]
 801284a:	3307      	adds	r3, #7
 801284c:	f023 0307 	bic.w	r3, r3, #7
 8012850:	3308      	adds	r3, #8
 8012852:	9303      	str	r3, [sp, #12]
 8012854:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012856:	4433      	add	r3, r6
 8012858:	9309      	str	r3, [sp, #36]	@ 0x24
 801285a:	e76a      	b.n	8012732 <_svfiprintf_r+0x52>
 801285c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012860:	460c      	mov	r4, r1
 8012862:	2001      	movs	r0, #1
 8012864:	e7a8      	b.n	80127b8 <_svfiprintf_r+0xd8>
 8012866:	2300      	movs	r3, #0
 8012868:	3401      	adds	r4, #1
 801286a:	9305      	str	r3, [sp, #20]
 801286c:	4619      	mov	r1, r3
 801286e:	f04f 0c0a 	mov.w	ip, #10
 8012872:	4620      	mov	r0, r4
 8012874:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012878:	3a30      	subs	r2, #48	@ 0x30
 801287a:	2a09      	cmp	r2, #9
 801287c:	d903      	bls.n	8012886 <_svfiprintf_r+0x1a6>
 801287e:	2b00      	cmp	r3, #0
 8012880:	d0c6      	beq.n	8012810 <_svfiprintf_r+0x130>
 8012882:	9105      	str	r1, [sp, #20]
 8012884:	e7c4      	b.n	8012810 <_svfiprintf_r+0x130>
 8012886:	fb0c 2101 	mla	r1, ip, r1, r2
 801288a:	4604      	mov	r4, r0
 801288c:	2301      	movs	r3, #1
 801288e:	e7f0      	b.n	8012872 <_svfiprintf_r+0x192>
 8012890:	ab03      	add	r3, sp, #12
 8012892:	9300      	str	r3, [sp, #0]
 8012894:	462a      	mov	r2, r5
 8012896:	4b0e      	ldr	r3, [pc, #56]	@ (80128d0 <_svfiprintf_r+0x1f0>)
 8012898:	a904      	add	r1, sp, #16
 801289a:	4638      	mov	r0, r7
 801289c:	f7fd ff20 	bl	80106e0 <_printf_float>
 80128a0:	1c42      	adds	r2, r0, #1
 80128a2:	4606      	mov	r6, r0
 80128a4:	d1d6      	bne.n	8012854 <_svfiprintf_r+0x174>
 80128a6:	89ab      	ldrh	r3, [r5, #12]
 80128a8:	065b      	lsls	r3, r3, #25
 80128aa:	f53f af2d 	bmi.w	8012708 <_svfiprintf_r+0x28>
 80128ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80128b0:	e72c      	b.n	801270c <_svfiprintf_r+0x2c>
 80128b2:	ab03      	add	r3, sp, #12
 80128b4:	9300      	str	r3, [sp, #0]
 80128b6:	462a      	mov	r2, r5
 80128b8:	4b05      	ldr	r3, [pc, #20]	@ (80128d0 <_svfiprintf_r+0x1f0>)
 80128ba:	a904      	add	r1, sp, #16
 80128bc:	4638      	mov	r0, r7
 80128be:	f7fe f9a7 	bl	8010c10 <_printf_i>
 80128c2:	e7ed      	b.n	80128a0 <_svfiprintf_r+0x1c0>
 80128c4:	08013cf8 	.word	0x08013cf8
 80128c8:	08013d02 	.word	0x08013d02
 80128cc:	080106e1 	.word	0x080106e1
 80128d0:	08012629 	.word	0x08012629
 80128d4:	08013cfe 	.word	0x08013cfe

080128d8 <__sflush_r>:
 80128d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80128dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128e0:	0716      	lsls	r6, r2, #28
 80128e2:	4605      	mov	r5, r0
 80128e4:	460c      	mov	r4, r1
 80128e6:	d454      	bmi.n	8012992 <__sflush_r+0xba>
 80128e8:	684b      	ldr	r3, [r1, #4]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	dc02      	bgt.n	80128f4 <__sflush_r+0x1c>
 80128ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	dd48      	ble.n	8012986 <__sflush_r+0xae>
 80128f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80128f6:	2e00      	cmp	r6, #0
 80128f8:	d045      	beq.n	8012986 <__sflush_r+0xae>
 80128fa:	2300      	movs	r3, #0
 80128fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012900:	682f      	ldr	r7, [r5, #0]
 8012902:	6a21      	ldr	r1, [r4, #32]
 8012904:	602b      	str	r3, [r5, #0]
 8012906:	d030      	beq.n	801296a <__sflush_r+0x92>
 8012908:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801290a:	89a3      	ldrh	r3, [r4, #12]
 801290c:	0759      	lsls	r1, r3, #29
 801290e:	d505      	bpl.n	801291c <__sflush_r+0x44>
 8012910:	6863      	ldr	r3, [r4, #4]
 8012912:	1ad2      	subs	r2, r2, r3
 8012914:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012916:	b10b      	cbz	r3, 801291c <__sflush_r+0x44>
 8012918:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801291a:	1ad2      	subs	r2, r2, r3
 801291c:	2300      	movs	r3, #0
 801291e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012920:	6a21      	ldr	r1, [r4, #32]
 8012922:	4628      	mov	r0, r5
 8012924:	47b0      	blx	r6
 8012926:	1c43      	adds	r3, r0, #1
 8012928:	89a3      	ldrh	r3, [r4, #12]
 801292a:	d106      	bne.n	801293a <__sflush_r+0x62>
 801292c:	6829      	ldr	r1, [r5, #0]
 801292e:	291d      	cmp	r1, #29
 8012930:	d82b      	bhi.n	801298a <__sflush_r+0xb2>
 8012932:	4a2a      	ldr	r2, [pc, #168]	@ (80129dc <__sflush_r+0x104>)
 8012934:	410a      	asrs	r2, r1
 8012936:	07d6      	lsls	r6, r2, #31
 8012938:	d427      	bmi.n	801298a <__sflush_r+0xb2>
 801293a:	2200      	movs	r2, #0
 801293c:	6062      	str	r2, [r4, #4]
 801293e:	04d9      	lsls	r1, r3, #19
 8012940:	6922      	ldr	r2, [r4, #16]
 8012942:	6022      	str	r2, [r4, #0]
 8012944:	d504      	bpl.n	8012950 <__sflush_r+0x78>
 8012946:	1c42      	adds	r2, r0, #1
 8012948:	d101      	bne.n	801294e <__sflush_r+0x76>
 801294a:	682b      	ldr	r3, [r5, #0]
 801294c:	b903      	cbnz	r3, 8012950 <__sflush_r+0x78>
 801294e:	6560      	str	r0, [r4, #84]	@ 0x54
 8012950:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012952:	602f      	str	r7, [r5, #0]
 8012954:	b1b9      	cbz	r1, 8012986 <__sflush_r+0xae>
 8012956:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801295a:	4299      	cmp	r1, r3
 801295c:	d002      	beq.n	8012964 <__sflush_r+0x8c>
 801295e:	4628      	mov	r0, r5
 8012960:	f7ff fa96 	bl	8011e90 <_free_r>
 8012964:	2300      	movs	r3, #0
 8012966:	6363      	str	r3, [r4, #52]	@ 0x34
 8012968:	e00d      	b.n	8012986 <__sflush_r+0xae>
 801296a:	2301      	movs	r3, #1
 801296c:	4628      	mov	r0, r5
 801296e:	47b0      	blx	r6
 8012970:	4602      	mov	r2, r0
 8012972:	1c50      	adds	r0, r2, #1
 8012974:	d1c9      	bne.n	801290a <__sflush_r+0x32>
 8012976:	682b      	ldr	r3, [r5, #0]
 8012978:	2b00      	cmp	r3, #0
 801297a:	d0c6      	beq.n	801290a <__sflush_r+0x32>
 801297c:	2b1d      	cmp	r3, #29
 801297e:	d001      	beq.n	8012984 <__sflush_r+0xac>
 8012980:	2b16      	cmp	r3, #22
 8012982:	d11e      	bne.n	80129c2 <__sflush_r+0xea>
 8012984:	602f      	str	r7, [r5, #0]
 8012986:	2000      	movs	r0, #0
 8012988:	e022      	b.n	80129d0 <__sflush_r+0xf8>
 801298a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801298e:	b21b      	sxth	r3, r3
 8012990:	e01b      	b.n	80129ca <__sflush_r+0xf2>
 8012992:	690f      	ldr	r7, [r1, #16]
 8012994:	2f00      	cmp	r7, #0
 8012996:	d0f6      	beq.n	8012986 <__sflush_r+0xae>
 8012998:	0793      	lsls	r3, r2, #30
 801299a:	680e      	ldr	r6, [r1, #0]
 801299c:	bf08      	it	eq
 801299e:	694b      	ldreq	r3, [r1, #20]
 80129a0:	600f      	str	r7, [r1, #0]
 80129a2:	bf18      	it	ne
 80129a4:	2300      	movne	r3, #0
 80129a6:	eba6 0807 	sub.w	r8, r6, r7
 80129aa:	608b      	str	r3, [r1, #8]
 80129ac:	f1b8 0f00 	cmp.w	r8, #0
 80129b0:	dde9      	ble.n	8012986 <__sflush_r+0xae>
 80129b2:	6a21      	ldr	r1, [r4, #32]
 80129b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80129b6:	4643      	mov	r3, r8
 80129b8:	463a      	mov	r2, r7
 80129ba:	4628      	mov	r0, r5
 80129bc:	47b0      	blx	r6
 80129be:	2800      	cmp	r0, #0
 80129c0:	dc08      	bgt.n	80129d4 <__sflush_r+0xfc>
 80129c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80129ca:	81a3      	strh	r3, [r4, #12]
 80129cc:	f04f 30ff 	mov.w	r0, #4294967295
 80129d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129d4:	4407      	add	r7, r0
 80129d6:	eba8 0800 	sub.w	r8, r8, r0
 80129da:	e7e7      	b.n	80129ac <__sflush_r+0xd4>
 80129dc:	dfbffffe 	.word	0xdfbffffe

080129e0 <_fflush_r>:
 80129e0:	b538      	push	{r3, r4, r5, lr}
 80129e2:	690b      	ldr	r3, [r1, #16]
 80129e4:	4605      	mov	r5, r0
 80129e6:	460c      	mov	r4, r1
 80129e8:	b913      	cbnz	r3, 80129f0 <_fflush_r+0x10>
 80129ea:	2500      	movs	r5, #0
 80129ec:	4628      	mov	r0, r5
 80129ee:	bd38      	pop	{r3, r4, r5, pc}
 80129f0:	b118      	cbz	r0, 80129fa <_fflush_r+0x1a>
 80129f2:	6a03      	ldr	r3, [r0, #32]
 80129f4:	b90b      	cbnz	r3, 80129fa <_fflush_r+0x1a>
 80129f6:	f7fe fab7 	bl	8010f68 <__sinit>
 80129fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d0f3      	beq.n	80129ea <_fflush_r+0xa>
 8012a02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012a04:	07d0      	lsls	r0, r2, #31
 8012a06:	d404      	bmi.n	8012a12 <_fflush_r+0x32>
 8012a08:	0599      	lsls	r1, r3, #22
 8012a0a:	d402      	bmi.n	8012a12 <_fflush_r+0x32>
 8012a0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012a0e:	f7fe fbe0 	bl	80111d2 <__retarget_lock_acquire_recursive>
 8012a12:	4628      	mov	r0, r5
 8012a14:	4621      	mov	r1, r4
 8012a16:	f7ff ff5f 	bl	80128d8 <__sflush_r>
 8012a1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012a1c:	07da      	lsls	r2, r3, #31
 8012a1e:	4605      	mov	r5, r0
 8012a20:	d4e4      	bmi.n	80129ec <_fflush_r+0xc>
 8012a22:	89a3      	ldrh	r3, [r4, #12]
 8012a24:	059b      	lsls	r3, r3, #22
 8012a26:	d4e1      	bmi.n	80129ec <_fflush_r+0xc>
 8012a28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012a2a:	f7fe fbd3 	bl	80111d4 <__retarget_lock_release_recursive>
 8012a2e:	e7dd      	b.n	80129ec <_fflush_r+0xc>

08012a30 <memmove>:
 8012a30:	4288      	cmp	r0, r1
 8012a32:	b510      	push	{r4, lr}
 8012a34:	eb01 0402 	add.w	r4, r1, r2
 8012a38:	d902      	bls.n	8012a40 <memmove+0x10>
 8012a3a:	4284      	cmp	r4, r0
 8012a3c:	4623      	mov	r3, r4
 8012a3e:	d807      	bhi.n	8012a50 <memmove+0x20>
 8012a40:	1e43      	subs	r3, r0, #1
 8012a42:	42a1      	cmp	r1, r4
 8012a44:	d008      	beq.n	8012a58 <memmove+0x28>
 8012a46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012a4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012a4e:	e7f8      	b.n	8012a42 <memmove+0x12>
 8012a50:	4402      	add	r2, r0
 8012a52:	4601      	mov	r1, r0
 8012a54:	428a      	cmp	r2, r1
 8012a56:	d100      	bne.n	8012a5a <memmove+0x2a>
 8012a58:	bd10      	pop	{r4, pc}
 8012a5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012a5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012a62:	e7f7      	b.n	8012a54 <memmove+0x24>

08012a64 <__assert_func>:
 8012a64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012a66:	4614      	mov	r4, r2
 8012a68:	461a      	mov	r2, r3
 8012a6a:	4b09      	ldr	r3, [pc, #36]	@ (8012a90 <__assert_func+0x2c>)
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	4605      	mov	r5, r0
 8012a70:	68d8      	ldr	r0, [r3, #12]
 8012a72:	b954      	cbnz	r4, 8012a8a <__assert_func+0x26>
 8012a74:	4b07      	ldr	r3, [pc, #28]	@ (8012a94 <__assert_func+0x30>)
 8012a76:	461c      	mov	r4, r3
 8012a78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012a7c:	9100      	str	r1, [sp, #0]
 8012a7e:	462b      	mov	r3, r5
 8012a80:	4905      	ldr	r1, [pc, #20]	@ (8012a98 <__assert_func+0x34>)
 8012a82:	f000 f86f 	bl	8012b64 <fiprintf>
 8012a86:	f000 f87f 	bl	8012b88 <abort>
 8012a8a:	4b04      	ldr	r3, [pc, #16]	@ (8012a9c <__assert_func+0x38>)
 8012a8c:	e7f4      	b.n	8012a78 <__assert_func+0x14>
 8012a8e:	bf00      	nop
 8012a90:	20000168 	.word	0x20000168
 8012a94:	08013d4e 	.word	0x08013d4e
 8012a98:	08013d20 	.word	0x08013d20
 8012a9c:	08013d13 	.word	0x08013d13

08012aa0 <_calloc_r>:
 8012aa0:	b570      	push	{r4, r5, r6, lr}
 8012aa2:	fba1 5402 	umull	r5, r4, r1, r2
 8012aa6:	b93c      	cbnz	r4, 8012ab8 <_calloc_r+0x18>
 8012aa8:	4629      	mov	r1, r5
 8012aaa:	f7fd fced 	bl	8010488 <_malloc_r>
 8012aae:	4606      	mov	r6, r0
 8012ab0:	b928      	cbnz	r0, 8012abe <_calloc_r+0x1e>
 8012ab2:	2600      	movs	r6, #0
 8012ab4:	4630      	mov	r0, r6
 8012ab6:	bd70      	pop	{r4, r5, r6, pc}
 8012ab8:	220c      	movs	r2, #12
 8012aba:	6002      	str	r2, [r0, #0]
 8012abc:	e7f9      	b.n	8012ab2 <_calloc_r+0x12>
 8012abe:	462a      	mov	r2, r5
 8012ac0:	4621      	mov	r1, r4
 8012ac2:	f7fe faea 	bl	801109a <memset>
 8012ac6:	e7f5      	b.n	8012ab4 <_calloc_r+0x14>

08012ac8 <__ascii_mbtowc>:
 8012ac8:	b082      	sub	sp, #8
 8012aca:	b901      	cbnz	r1, 8012ace <__ascii_mbtowc+0x6>
 8012acc:	a901      	add	r1, sp, #4
 8012ace:	b142      	cbz	r2, 8012ae2 <__ascii_mbtowc+0x1a>
 8012ad0:	b14b      	cbz	r3, 8012ae6 <__ascii_mbtowc+0x1e>
 8012ad2:	7813      	ldrb	r3, [r2, #0]
 8012ad4:	600b      	str	r3, [r1, #0]
 8012ad6:	7812      	ldrb	r2, [r2, #0]
 8012ad8:	1e10      	subs	r0, r2, #0
 8012ada:	bf18      	it	ne
 8012adc:	2001      	movne	r0, #1
 8012ade:	b002      	add	sp, #8
 8012ae0:	4770      	bx	lr
 8012ae2:	4610      	mov	r0, r2
 8012ae4:	e7fb      	b.n	8012ade <__ascii_mbtowc+0x16>
 8012ae6:	f06f 0001 	mvn.w	r0, #1
 8012aea:	e7f8      	b.n	8012ade <__ascii_mbtowc+0x16>

08012aec <_realloc_r>:
 8012aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012af0:	4680      	mov	r8, r0
 8012af2:	4615      	mov	r5, r2
 8012af4:	460c      	mov	r4, r1
 8012af6:	b921      	cbnz	r1, 8012b02 <_realloc_r+0x16>
 8012af8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012afc:	4611      	mov	r1, r2
 8012afe:	f7fd bcc3 	b.w	8010488 <_malloc_r>
 8012b02:	b92a      	cbnz	r2, 8012b10 <_realloc_r+0x24>
 8012b04:	f7ff f9c4 	bl	8011e90 <_free_r>
 8012b08:	2400      	movs	r4, #0
 8012b0a:	4620      	mov	r0, r4
 8012b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b10:	f000 f841 	bl	8012b96 <_malloc_usable_size_r>
 8012b14:	4285      	cmp	r5, r0
 8012b16:	4606      	mov	r6, r0
 8012b18:	d802      	bhi.n	8012b20 <_realloc_r+0x34>
 8012b1a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012b1e:	d8f4      	bhi.n	8012b0a <_realloc_r+0x1e>
 8012b20:	4629      	mov	r1, r5
 8012b22:	4640      	mov	r0, r8
 8012b24:	f7fd fcb0 	bl	8010488 <_malloc_r>
 8012b28:	4607      	mov	r7, r0
 8012b2a:	2800      	cmp	r0, #0
 8012b2c:	d0ec      	beq.n	8012b08 <_realloc_r+0x1c>
 8012b2e:	42b5      	cmp	r5, r6
 8012b30:	462a      	mov	r2, r5
 8012b32:	4621      	mov	r1, r4
 8012b34:	bf28      	it	cs
 8012b36:	4632      	movcs	r2, r6
 8012b38:	f7fe fb4d 	bl	80111d6 <memcpy>
 8012b3c:	4621      	mov	r1, r4
 8012b3e:	4640      	mov	r0, r8
 8012b40:	f7ff f9a6 	bl	8011e90 <_free_r>
 8012b44:	463c      	mov	r4, r7
 8012b46:	e7e0      	b.n	8012b0a <_realloc_r+0x1e>

08012b48 <__ascii_wctomb>:
 8012b48:	4603      	mov	r3, r0
 8012b4a:	4608      	mov	r0, r1
 8012b4c:	b141      	cbz	r1, 8012b60 <__ascii_wctomb+0x18>
 8012b4e:	2aff      	cmp	r2, #255	@ 0xff
 8012b50:	d904      	bls.n	8012b5c <__ascii_wctomb+0x14>
 8012b52:	228a      	movs	r2, #138	@ 0x8a
 8012b54:	601a      	str	r2, [r3, #0]
 8012b56:	f04f 30ff 	mov.w	r0, #4294967295
 8012b5a:	4770      	bx	lr
 8012b5c:	700a      	strb	r2, [r1, #0]
 8012b5e:	2001      	movs	r0, #1
 8012b60:	4770      	bx	lr
	...

08012b64 <fiprintf>:
 8012b64:	b40e      	push	{r1, r2, r3}
 8012b66:	b503      	push	{r0, r1, lr}
 8012b68:	4601      	mov	r1, r0
 8012b6a:	ab03      	add	r3, sp, #12
 8012b6c:	4805      	ldr	r0, [pc, #20]	@ (8012b84 <fiprintf+0x20>)
 8012b6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b72:	6800      	ldr	r0, [r0, #0]
 8012b74:	9301      	str	r3, [sp, #4]
 8012b76:	f000 f83f 	bl	8012bf8 <_vfiprintf_r>
 8012b7a:	b002      	add	sp, #8
 8012b7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012b80:	b003      	add	sp, #12
 8012b82:	4770      	bx	lr
 8012b84:	20000168 	.word	0x20000168

08012b88 <abort>:
 8012b88:	b508      	push	{r3, lr}
 8012b8a:	2006      	movs	r0, #6
 8012b8c:	f000 fa08 	bl	8012fa0 <raise>
 8012b90:	2001      	movs	r0, #1
 8012b92:	f7f0 fae3 	bl	800315c <_exit>

08012b96 <_malloc_usable_size_r>:
 8012b96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b9a:	1f18      	subs	r0, r3, #4
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	bfbc      	itt	lt
 8012ba0:	580b      	ldrlt	r3, [r1, r0]
 8012ba2:	18c0      	addlt	r0, r0, r3
 8012ba4:	4770      	bx	lr

08012ba6 <__sfputc_r>:
 8012ba6:	6893      	ldr	r3, [r2, #8]
 8012ba8:	3b01      	subs	r3, #1
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	b410      	push	{r4}
 8012bae:	6093      	str	r3, [r2, #8]
 8012bb0:	da08      	bge.n	8012bc4 <__sfputc_r+0x1e>
 8012bb2:	6994      	ldr	r4, [r2, #24]
 8012bb4:	42a3      	cmp	r3, r4
 8012bb6:	db01      	blt.n	8012bbc <__sfputc_r+0x16>
 8012bb8:	290a      	cmp	r1, #10
 8012bba:	d103      	bne.n	8012bc4 <__sfputc_r+0x1e>
 8012bbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012bc0:	f000 b932 	b.w	8012e28 <__swbuf_r>
 8012bc4:	6813      	ldr	r3, [r2, #0]
 8012bc6:	1c58      	adds	r0, r3, #1
 8012bc8:	6010      	str	r0, [r2, #0]
 8012bca:	7019      	strb	r1, [r3, #0]
 8012bcc:	4608      	mov	r0, r1
 8012bce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012bd2:	4770      	bx	lr

08012bd4 <__sfputs_r>:
 8012bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bd6:	4606      	mov	r6, r0
 8012bd8:	460f      	mov	r7, r1
 8012bda:	4614      	mov	r4, r2
 8012bdc:	18d5      	adds	r5, r2, r3
 8012bde:	42ac      	cmp	r4, r5
 8012be0:	d101      	bne.n	8012be6 <__sfputs_r+0x12>
 8012be2:	2000      	movs	r0, #0
 8012be4:	e007      	b.n	8012bf6 <__sfputs_r+0x22>
 8012be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012bea:	463a      	mov	r2, r7
 8012bec:	4630      	mov	r0, r6
 8012bee:	f7ff ffda 	bl	8012ba6 <__sfputc_r>
 8012bf2:	1c43      	adds	r3, r0, #1
 8012bf4:	d1f3      	bne.n	8012bde <__sfputs_r+0xa>
 8012bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012bf8 <_vfiprintf_r>:
 8012bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bfc:	460d      	mov	r5, r1
 8012bfe:	b09d      	sub	sp, #116	@ 0x74
 8012c00:	4614      	mov	r4, r2
 8012c02:	4698      	mov	r8, r3
 8012c04:	4606      	mov	r6, r0
 8012c06:	b118      	cbz	r0, 8012c10 <_vfiprintf_r+0x18>
 8012c08:	6a03      	ldr	r3, [r0, #32]
 8012c0a:	b90b      	cbnz	r3, 8012c10 <_vfiprintf_r+0x18>
 8012c0c:	f7fe f9ac 	bl	8010f68 <__sinit>
 8012c10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012c12:	07d9      	lsls	r1, r3, #31
 8012c14:	d405      	bmi.n	8012c22 <_vfiprintf_r+0x2a>
 8012c16:	89ab      	ldrh	r3, [r5, #12]
 8012c18:	059a      	lsls	r2, r3, #22
 8012c1a:	d402      	bmi.n	8012c22 <_vfiprintf_r+0x2a>
 8012c1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012c1e:	f7fe fad8 	bl	80111d2 <__retarget_lock_acquire_recursive>
 8012c22:	89ab      	ldrh	r3, [r5, #12]
 8012c24:	071b      	lsls	r3, r3, #28
 8012c26:	d501      	bpl.n	8012c2c <_vfiprintf_r+0x34>
 8012c28:	692b      	ldr	r3, [r5, #16]
 8012c2a:	b99b      	cbnz	r3, 8012c54 <_vfiprintf_r+0x5c>
 8012c2c:	4629      	mov	r1, r5
 8012c2e:	4630      	mov	r0, r6
 8012c30:	f000 f938 	bl	8012ea4 <__swsetup_r>
 8012c34:	b170      	cbz	r0, 8012c54 <_vfiprintf_r+0x5c>
 8012c36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012c38:	07dc      	lsls	r4, r3, #31
 8012c3a:	d504      	bpl.n	8012c46 <_vfiprintf_r+0x4e>
 8012c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8012c40:	b01d      	add	sp, #116	@ 0x74
 8012c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c46:	89ab      	ldrh	r3, [r5, #12]
 8012c48:	0598      	lsls	r0, r3, #22
 8012c4a:	d4f7      	bmi.n	8012c3c <_vfiprintf_r+0x44>
 8012c4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012c4e:	f7fe fac1 	bl	80111d4 <__retarget_lock_release_recursive>
 8012c52:	e7f3      	b.n	8012c3c <_vfiprintf_r+0x44>
 8012c54:	2300      	movs	r3, #0
 8012c56:	9309      	str	r3, [sp, #36]	@ 0x24
 8012c58:	2320      	movs	r3, #32
 8012c5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012c5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c62:	2330      	movs	r3, #48	@ 0x30
 8012c64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012e14 <_vfiprintf_r+0x21c>
 8012c68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012c6c:	f04f 0901 	mov.w	r9, #1
 8012c70:	4623      	mov	r3, r4
 8012c72:	469a      	mov	sl, r3
 8012c74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c78:	b10a      	cbz	r2, 8012c7e <_vfiprintf_r+0x86>
 8012c7a:	2a25      	cmp	r2, #37	@ 0x25
 8012c7c:	d1f9      	bne.n	8012c72 <_vfiprintf_r+0x7a>
 8012c7e:	ebba 0b04 	subs.w	fp, sl, r4
 8012c82:	d00b      	beq.n	8012c9c <_vfiprintf_r+0xa4>
 8012c84:	465b      	mov	r3, fp
 8012c86:	4622      	mov	r2, r4
 8012c88:	4629      	mov	r1, r5
 8012c8a:	4630      	mov	r0, r6
 8012c8c:	f7ff ffa2 	bl	8012bd4 <__sfputs_r>
 8012c90:	3001      	adds	r0, #1
 8012c92:	f000 80a7 	beq.w	8012de4 <_vfiprintf_r+0x1ec>
 8012c96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012c98:	445a      	add	r2, fp
 8012c9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8012c9c:	f89a 3000 	ldrb.w	r3, [sl]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	f000 809f 	beq.w	8012de4 <_vfiprintf_r+0x1ec>
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8012cac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012cb0:	f10a 0a01 	add.w	sl, sl, #1
 8012cb4:	9304      	str	r3, [sp, #16]
 8012cb6:	9307      	str	r3, [sp, #28]
 8012cb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012cbc:	931a      	str	r3, [sp, #104]	@ 0x68
 8012cbe:	4654      	mov	r4, sl
 8012cc0:	2205      	movs	r2, #5
 8012cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cc6:	4853      	ldr	r0, [pc, #332]	@ (8012e14 <_vfiprintf_r+0x21c>)
 8012cc8:	f7ed fa8a 	bl	80001e0 <memchr>
 8012ccc:	9a04      	ldr	r2, [sp, #16]
 8012cce:	b9d8      	cbnz	r0, 8012d08 <_vfiprintf_r+0x110>
 8012cd0:	06d1      	lsls	r1, r2, #27
 8012cd2:	bf44      	itt	mi
 8012cd4:	2320      	movmi	r3, #32
 8012cd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012cda:	0713      	lsls	r3, r2, #28
 8012cdc:	bf44      	itt	mi
 8012cde:	232b      	movmi	r3, #43	@ 0x2b
 8012ce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012ce4:	f89a 3000 	ldrb.w	r3, [sl]
 8012ce8:	2b2a      	cmp	r3, #42	@ 0x2a
 8012cea:	d015      	beq.n	8012d18 <_vfiprintf_r+0x120>
 8012cec:	9a07      	ldr	r2, [sp, #28]
 8012cee:	4654      	mov	r4, sl
 8012cf0:	2000      	movs	r0, #0
 8012cf2:	f04f 0c0a 	mov.w	ip, #10
 8012cf6:	4621      	mov	r1, r4
 8012cf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012cfc:	3b30      	subs	r3, #48	@ 0x30
 8012cfe:	2b09      	cmp	r3, #9
 8012d00:	d94b      	bls.n	8012d9a <_vfiprintf_r+0x1a2>
 8012d02:	b1b0      	cbz	r0, 8012d32 <_vfiprintf_r+0x13a>
 8012d04:	9207      	str	r2, [sp, #28]
 8012d06:	e014      	b.n	8012d32 <_vfiprintf_r+0x13a>
 8012d08:	eba0 0308 	sub.w	r3, r0, r8
 8012d0c:	fa09 f303 	lsl.w	r3, r9, r3
 8012d10:	4313      	orrs	r3, r2
 8012d12:	9304      	str	r3, [sp, #16]
 8012d14:	46a2      	mov	sl, r4
 8012d16:	e7d2      	b.n	8012cbe <_vfiprintf_r+0xc6>
 8012d18:	9b03      	ldr	r3, [sp, #12]
 8012d1a:	1d19      	adds	r1, r3, #4
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	9103      	str	r1, [sp, #12]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	bfbb      	ittet	lt
 8012d24:	425b      	neglt	r3, r3
 8012d26:	f042 0202 	orrlt.w	r2, r2, #2
 8012d2a:	9307      	strge	r3, [sp, #28]
 8012d2c:	9307      	strlt	r3, [sp, #28]
 8012d2e:	bfb8      	it	lt
 8012d30:	9204      	strlt	r2, [sp, #16]
 8012d32:	7823      	ldrb	r3, [r4, #0]
 8012d34:	2b2e      	cmp	r3, #46	@ 0x2e
 8012d36:	d10a      	bne.n	8012d4e <_vfiprintf_r+0x156>
 8012d38:	7863      	ldrb	r3, [r4, #1]
 8012d3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8012d3c:	d132      	bne.n	8012da4 <_vfiprintf_r+0x1ac>
 8012d3e:	9b03      	ldr	r3, [sp, #12]
 8012d40:	1d1a      	adds	r2, r3, #4
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	9203      	str	r2, [sp, #12]
 8012d46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012d4a:	3402      	adds	r4, #2
 8012d4c:	9305      	str	r3, [sp, #20]
 8012d4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012e24 <_vfiprintf_r+0x22c>
 8012d52:	7821      	ldrb	r1, [r4, #0]
 8012d54:	2203      	movs	r2, #3
 8012d56:	4650      	mov	r0, sl
 8012d58:	f7ed fa42 	bl	80001e0 <memchr>
 8012d5c:	b138      	cbz	r0, 8012d6e <_vfiprintf_r+0x176>
 8012d5e:	9b04      	ldr	r3, [sp, #16]
 8012d60:	eba0 000a 	sub.w	r0, r0, sl
 8012d64:	2240      	movs	r2, #64	@ 0x40
 8012d66:	4082      	lsls	r2, r0
 8012d68:	4313      	orrs	r3, r2
 8012d6a:	3401      	adds	r4, #1
 8012d6c:	9304      	str	r3, [sp, #16]
 8012d6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d72:	4829      	ldr	r0, [pc, #164]	@ (8012e18 <_vfiprintf_r+0x220>)
 8012d74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012d78:	2206      	movs	r2, #6
 8012d7a:	f7ed fa31 	bl	80001e0 <memchr>
 8012d7e:	2800      	cmp	r0, #0
 8012d80:	d03f      	beq.n	8012e02 <_vfiprintf_r+0x20a>
 8012d82:	4b26      	ldr	r3, [pc, #152]	@ (8012e1c <_vfiprintf_r+0x224>)
 8012d84:	bb1b      	cbnz	r3, 8012dce <_vfiprintf_r+0x1d6>
 8012d86:	9b03      	ldr	r3, [sp, #12]
 8012d88:	3307      	adds	r3, #7
 8012d8a:	f023 0307 	bic.w	r3, r3, #7
 8012d8e:	3308      	adds	r3, #8
 8012d90:	9303      	str	r3, [sp, #12]
 8012d92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d94:	443b      	add	r3, r7
 8012d96:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d98:	e76a      	b.n	8012c70 <_vfiprintf_r+0x78>
 8012d9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d9e:	460c      	mov	r4, r1
 8012da0:	2001      	movs	r0, #1
 8012da2:	e7a8      	b.n	8012cf6 <_vfiprintf_r+0xfe>
 8012da4:	2300      	movs	r3, #0
 8012da6:	3401      	adds	r4, #1
 8012da8:	9305      	str	r3, [sp, #20]
 8012daa:	4619      	mov	r1, r3
 8012dac:	f04f 0c0a 	mov.w	ip, #10
 8012db0:	4620      	mov	r0, r4
 8012db2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012db6:	3a30      	subs	r2, #48	@ 0x30
 8012db8:	2a09      	cmp	r2, #9
 8012dba:	d903      	bls.n	8012dc4 <_vfiprintf_r+0x1cc>
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d0c6      	beq.n	8012d4e <_vfiprintf_r+0x156>
 8012dc0:	9105      	str	r1, [sp, #20]
 8012dc2:	e7c4      	b.n	8012d4e <_vfiprintf_r+0x156>
 8012dc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8012dc8:	4604      	mov	r4, r0
 8012dca:	2301      	movs	r3, #1
 8012dcc:	e7f0      	b.n	8012db0 <_vfiprintf_r+0x1b8>
 8012dce:	ab03      	add	r3, sp, #12
 8012dd0:	9300      	str	r3, [sp, #0]
 8012dd2:	462a      	mov	r2, r5
 8012dd4:	4b12      	ldr	r3, [pc, #72]	@ (8012e20 <_vfiprintf_r+0x228>)
 8012dd6:	a904      	add	r1, sp, #16
 8012dd8:	4630      	mov	r0, r6
 8012dda:	f7fd fc81 	bl	80106e0 <_printf_float>
 8012dde:	4607      	mov	r7, r0
 8012de0:	1c78      	adds	r0, r7, #1
 8012de2:	d1d6      	bne.n	8012d92 <_vfiprintf_r+0x19a>
 8012de4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012de6:	07d9      	lsls	r1, r3, #31
 8012de8:	d405      	bmi.n	8012df6 <_vfiprintf_r+0x1fe>
 8012dea:	89ab      	ldrh	r3, [r5, #12]
 8012dec:	059a      	lsls	r2, r3, #22
 8012dee:	d402      	bmi.n	8012df6 <_vfiprintf_r+0x1fe>
 8012df0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012df2:	f7fe f9ef 	bl	80111d4 <__retarget_lock_release_recursive>
 8012df6:	89ab      	ldrh	r3, [r5, #12]
 8012df8:	065b      	lsls	r3, r3, #25
 8012dfa:	f53f af1f 	bmi.w	8012c3c <_vfiprintf_r+0x44>
 8012dfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012e00:	e71e      	b.n	8012c40 <_vfiprintf_r+0x48>
 8012e02:	ab03      	add	r3, sp, #12
 8012e04:	9300      	str	r3, [sp, #0]
 8012e06:	462a      	mov	r2, r5
 8012e08:	4b05      	ldr	r3, [pc, #20]	@ (8012e20 <_vfiprintf_r+0x228>)
 8012e0a:	a904      	add	r1, sp, #16
 8012e0c:	4630      	mov	r0, r6
 8012e0e:	f7fd feff 	bl	8010c10 <_printf_i>
 8012e12:	e7e4      	b.n	8012dde <_vfiprintf_r+0x1e6>
 8012e14:	08013cf8 	.word	0x08013cf8
 8012e18:	08013d02 	.word	0x08013d02
 8012e1c:	080106e1 	.word	0x080106e1
 8012e20:	08012bd5 	.word	0x08012bd5
 8012e24:	08013cfe 	.word	0x08013cfe

08012e28 <__swbuf_r>:
 8012e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e2a:	460e      	mov	r6, r1
 8012e2c:	4614      	mov	r4, r2
 8012e2e:	4605      	mov	r5, r0
 8012e30:	b118      	cbz	r0, 8012e3a <__swbuf_r+0x12>
 8012e32:	6a03      	ldr	r3, [r0, #32]
 8012e34:	b90b      	cbnz	r3, 8012e3a <__swbuf_r+0x12>
 8012e36:	f7fe f897 	bl	8010f68 <__sinit>
 8012e3a:	69a3      	ldr	r3, [r4, #24]
 8012e3c:	60a3      	str	r3, [r4, #8]
 8012e3e:	89a3      	ldrh	r3, [r4, #12]
 8012e40:	071a      	lsls	r2, r3, #28
 8012e42:	d501      	bpl.n	8012e48 <__swbuf_r+0x20>
 8012e44:	6923      	ldr	r3, [r4, #16]
 8012e46:	b943      	cbnz	r3, 8012e5a <__swbuf_r+0x32>
 8012e48:	4621      	mov	r1, r4
 8012e4a:	4628      	mov	r0, r5
 8012e4c:	f000 f82a 	bl	8012ea4 <__swsetup_r>
 8012e50:	b118      	cbz	r0, 8012e5a <__swbuf_r+0x32>
 8012e52:	f04f 37ff 	mov.w	r7, #4294967295
 8012e56:	4638      	mov	r0, r7
 8012e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e5a:	6823      	ldr	r3, [r4, #0]
 8012e5c:	6922      	ldr	r2, [r4, #16]
 8012e5e:	1a98      	subs	r0, r3, r2
 8012e60:	6963      	ldr	r3, [r4, #20]
 8012e62:	b2f6      	uxtb	r6, r6
 8012e64:	4283      	cmp	r3, r0
 8012e66:	4637      	mov	r7, r6
 8012e68:	dc05      	bgt.n	8012e76 <__swbuf_r+0x4e>
 8012e6a:	4621      	mov	r1, r4
 8012e6c:	4628      	mov	r0, r5
 8012e6e:	f7ff fdb7 	bl	80129e0 <_fflush_r>
 8012e72:	2800      	cmp	r0, #0
 8012e74:	d1ed      	bne.n	8012e52 <__swbuf_r+0x2a>
 8012e76:	68a3      	ldr	r3, [r4, #8]
 8012e78:	3b01      	subs	r3, #1
 8012e7a:	60a3      	str	r3, [r4, #8]
 8012e7c:	6823      	ldr	r3, [r4, #0]
 8012e7e:	1c5a      	adds	r2, r3, #1
 8012e80:	6022      	str	r2, [r4, #0]
 8012e82:	701e      	strb	r6, [r3, #0]
 8012e84:	6962      	ldr	r2, [r4, #20]
 8012e86:	1c43      	adds	r3, r0, #1
 8012e88:	429a      	cmp	r2, r3
 8012e8a:	d004      	beq.n	8012e96 <__swbuf_r+0x6e>
 8012e8c:	89a3      	ldrh	r3, [r4, #12]
 8012e8e:	07db      	lsls	r3, r3, #31
 8012e90:	d5e1      	bpl.n	8012e56 <__swbuf_r+0x2e>
 8012e92:	2e0a      	cmp	r6, #10
 8012e94:	d1df      	bne.n	8012e56 <__swbuf_r+0x2e>
 8012e96:	4621      	mov	r1, r4
 8012e98:	4628      	mov	r0, r5
 8012e9a:	f7ff fda1 	bl	80129e0 <_fflush_r>
 8012e9e:	2800      	cmp	r0, #0
 8012ea0:	d0d9      	beq.n	8012e56 <__swbuf_r+0x2e>
 8012ea2:	e7d6      	b.n	8012e52 <__swbuf_r+0x2a>

08012ea4 <__swsetup_r>:
 8012ea4:	b538      	push	{r3, r4, r5, lr}
 8012ea6:	4b29      	ldr	r3, [pc, #164]	@ (8012f4c <__swsetup_r+0xa8>)
 8012ea8:	4605      	mov	r5, r0
 8012eaa:	6818      	ldr	r0, [r3, #0]
 8012eac:	460c      	mov	r4, r1
 8012eae:	b118      	cbz	r0, 8012eb8 <__swsetup_r+0x14>
 8012eb0:	6a03      	ldr	r3, [r0, #32]
 8012eb2:	b90b      	cbnz	r3, 8012eb8 <__swsetup_r+0x14>
 8012eb4:	f7fe f858 	bl	8010f68 <__sinit>
 8012eb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ebc:	0719      	lsls	r1, r3, #28
 8012ebe:	d422      	bmi.n	8012f06 <__swsetup_r+0x62>
 8012ec0:	06da      	lsls	r2, r3, #27
 8012ec2:	d407      	bmi.n	8012ed4 <__swsetup_r+0x30>
 8012ec4:	2209      	movs	r2, #9
 8012ec6:	602a      	str	r2, [r5, #0]
 8012ec8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012ecc:	81a3      	strh	r3, [r4, #12]
 8012ece:	f04f 30ff 	mov.w	r0, #4294967295
 8012ed2:	e033      	b.n	8012f3c <__swsetup_r+0x98>
 8012ed4:	0758      	lsls	r0, r3, #29
 8012ed6:	d512      	bpl.n	8012efe <__swsetup_r+0x5a>
 8012ed8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012eda:	b141      	cbz	r1, 8012eee <__swsetup_r+0x4a>
 8012edc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012ee0:	4299      	cmp	r1, r3
 8012ee2:	d002      	beq.n	8012eea <__swsetup_r+0x46>
 8012ee4:	4628      	mov	r0, r5
 8012ee6:	f7fe ffd3 	bl	8011e90 <_free_r>
 8012eea:	2300      	movs	r3, #0
 8012eec:	6363      	str	r3, [r4, #52]	@ 0x34
 8012eee:	89a3      	ldrh	r3, [r4, #12]
 8012ef0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012ef4:	81a3      	strh	r3, [r4, #12]
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	6063      	str	r3, [r4, #4]
 8012efa:	6923      	ldr	r3, [r4, #16]
 8012efc:	6023      	str	r3, [r4, #0]
 8012efe:	89a3      	ldrh	r3, [r4, #12]
 8012f00:	f043 0308 	orr.w	r3, r3, #8
 8012f04:	81a3      	strh	r3, [r4, #12]
 8012f06:	6923      	ldr	r3, [r4, #16]
 8012f08:	b94b      	cbnz	r3, 8012f1e <__swsetup_r+0x7a>
 8012f0a:	89a3      	ldrh	r3, [r4, #12]
 8012f0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012f10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012f14:	d003      	beq.n	8012f1e <__swsetup_r+0x7a>
 8012f16:	4621      	mov	r1, r4
 8012f18:	4628      	mov	r0, r5
 8012f1a:	f000 f883 	bl	8013024 <__smakebuf_r>
 8012f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f22:	f013 0201 	ands.w	r2, r3, #1
 8012f26:	d00a      	beq.n	8012f3e <__swsetup_r+0x9a>
 8012f28:	2200      	movs	r2, #0
 8012f2a:	60a2      	str	r2, [r4, #8]
 8012f2c:	6962      	ldr	r2, [r4, #20]
 8012f2e:	4252      	negs	r2, r2
 8012f30:	61a2      	str	r2, [r4, #24]
 8012f32:	6922      	ldr	r2, [r4, #16]
 8012f34:	b942      	cbnz	r2, 8012f48 <__swsetup_r+0xa4>
 8012f36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012f3a:	d1c5      	bne.n	8012ec8 <__swsetup_r+0x24>
 8012f3c:	bd38      	pop	{r3, r4, r5, pc}
 8012f3e:	0799      	lsls	r1, r3, #30
 8012f40:	bf58      	it	pl
 8012f42:	6962      	ldrpl	r2, [r4, #20]
 8012f44:	60a2      	str	r2, [r4, #8]
 8012f46:	e7f4      	b.n	8012f32 <__swsetup_r+0x8e>
 8012f48:	2000      	movs	r0, #0
 8012f4a:	e7f7      	b.n	8012f3c <__swsetup_r+0x98>
 8012f4c:	20000168 	.word	0x20000168

08012f50 <_raise_r>:
 8012f50:	291f      	cmp	r1, #31
 8012f52:	b538      	push	{r3, r4, r5, lr}
 8012f54:	4605      	mov	r5, r0
 8012f56:	460c      	mov	r4, r1
 8012f58:	d904      	bls.n	8012f64 <_raise_r+0x14>
 8012f5a:	2316      	movs	r3, #22
 8012f5c:	6003      	str	r3, [r0, #0]
 8012f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8012f62:	bd38      	pop	{r3, r4, r5, pc}
 8012f64:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012f66:	b112      	cbz	r2, 8012f6e <_raise_r+0x1e>
 8012f68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012f6c:	b94b      	cbnz	r3, 8012f82 <_raise_r+0x32>
 8012f6e:	4628      	mov	r0, r5
 8012f70:	f000 f830 	bl	8012fd4 <_getpid_r>
 8012f74:	4622      	mov	r2, r4
 8012f76:	4601      	mov	r1, r0
 8012f78:	4628      	mov	r0, r5
 8012f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f7e:	f000 b817 	b.w	8012fb0 <_kill_r>
 8012f82:	2b01      	cmp	r3, #1
 8012f84:	d00a      	beq.n	8012f9c <_raise_r+0x4c>
 8012f86:	1c59      	adds	r1, r3, #1
 8012f88:	d103      	bne.n	8012f92 <_raise_r+0x42>
 8012f8a:	2316      	movs	r3, #22
 8012f8c:	6003      	str	r3, [r0, #0]
 8012f8e:	2001      	movs	r0, #1
 8012f90:	e7e7      	b.n	8012f62 <_raise_r+0x12>
 8012f92:	2100      	movs	r1, #0
 8012f94:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012f98:	4620      	mov	r0, r4
 8012f9a:	4798      	blx	r3
 8012f9c:	2000      	movs	r0, #0
 8012f9e:	e7e0      	b.n	8012f62 <_raise_r+0x12>

08012fa0 <raise>:
 8012fa0:	4b02      	ldr	r3, [pc, #8]	@ (8012fac <raise+0xc>)
 8012fa2:	4601      	mov	r1, r0
 8012fa4:	6818      	ldr	r0, [r3, #0]
 8012fa6:	f7ff bfd3 	b.w	8012f50 <_raise_r>
 8012faa:	bf00      	nop
 8012fac:	20000168 	.word	0x20000168

08012fb0 <_kill_r>:
 8012fb0:	b538      	push	{r3, r4, r5, lr}
 8012fb2:	4d07      	ldr	r5, [pc, #28]	@ (8012fd0 <_kill_r+0x20>)
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	4604      	mov	r4, r0
 8012fb8:	4608      	mov	r0, r1
 8012fba:	4611      	mov	r1, r2
 8012fbc:	602b      	str	r3, [r5, #0]
 8012fbe:	f7f0 f8bd 	bl	800313c <_kill>
 8012fc2:	1c43      	adds	r3, r0, #1
 8012fc4:	d102      	bne.n	8012fcc <_kill_r+0x1c>
 8012fc6:	682b      	ldr	r3, [r5, #0]
 8012fc8:	b103      	cbz	r3, 8012fcc <_kill_r+0x1c>
 8012fca:	6023      	str	r3, [r4, #0]
 8012fcc:	bd38      	pop	{r3, r4, r5, pc}
 8012fce:	bf00      	nop
 8012fd0:	20001f28 	.word	0x20001f28

08012fd4 <_getpid_r>:
 8012fd4:	f7f0 b8aa 	b.w	800312c <_getpid>

08012fd8 <__swhatbuf_r>:
 8012fd8:	b570      	push	{r4, r5, r6, lr}
 8012fda:	460c      	mov	r4, r1
 8012fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fe0:	2900      	cmp	r1, #0
 8012fe2:	b096      	sub	sp, #88	@ 0x58
 8012fe4:	4615      	mov	r5, r2
 8012fe6:	461e      	mov	r6, r3
 8012fe8:	da0d      	bge.n	8013006 <__swhatbuf_r+0x2e>
 8012fea:	89a3      	ldrh	r3, [r4, #12]
 8012fec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012ff0:	f04f 0100 	mov.w	r1, #0
 8012ff4:	bf14      	ite	ne
 8012ff6:	2340      	movne	r3, #64	@ 0x40
 8012ff8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012ffc:	2000      	movs	r0, #0
 8012ffe:	6031      	str	r1, [r6, #0]
 8013000:	602b      	str	r3, [r5, #0]
 8013002:	b016      	add	sp, #88	@ 0x58
 8013004:	bd70      	pop	{r4, r5, r6, pc}
 8013006:	466a      	mov	r2, sp
 8013008:	f000 f848 	bl	801309c <_fstat_r>
 801300c:	2800      	cmp	r0, #0
 801300e:	dbec      	blt.n	8012fea <__swhatbuf_r+0x12>
 8013010:	9901      	ldr	r1, [sp, #4]
 8013012:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013016:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801301a:	4259      	negs	r1, r3
 801301c:	4159      	adcs	r1, r3
 801301e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013022:	e7eb      	b.n	8012ffc <__swhatbuf_r+0x24>

08013024 <__smakebuf_r>:
 8013024:	898b      	ldrh	r3, [r1, #12]
 8013026:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013028:	079d      	lsls	r5, r3, #30
 801302a:	4606      	mov	r6, r0
 801302c:	460c      	mov	r4, r1
 801302e:	d507      	bpl.n	8013040 <__smakebuf_r+0x1c>
 8013030:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013034:	6023      	str	r3, [r4, #0]
 8013036:	6123      	str	r3, [r4, #16]
 8013038:	2301      	movs	r3, #1
 801303a:	6163      	str	r3, [r4, #20]
 801303c:	b003      	add	sp, #12
 801303e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013040:	ab01      	add	r3, sp, #4
 8013042:	466a      	mov	r2, sp
 8013044:	f7ff ffc8 	bl	8012fd8 <__swhatbuf_r>
 8013048:	9f00      	ldr	r7, [sp, #0]
 801304a:	4605      	mov	r5, r0
 801304c:	4639      	mov	r1, r7
 801304e:	4630      	mov	r0, r6
 8013050:	f7fd fa1a 	bl	8010488 <_malloc_r>
 8013054:	b948      	cbnz	r0, 801306a <__smakebuf_r+0x46>
 8013056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801305a:	059a      	lsls	r2, r3, #22
 801305c:	d4ee      	bmi.n	801303c <__smakebuf_r+0x18>
 801305e:	f023 0303 	bic.w	r3, r3, #3
 8013062:	f043 0302 	orr.w	r3, r3, #2
 8013066:	81a3      	strh	r3, [r4, #12]
 8013068:	e7e2      	b.n	8013030 <__smakebuf_r+0xc>
 801306a:	89a3      	ldrh	r3, [r4, #12]
 801306c:	6020      	str	r0, [r4, #0]
 801306e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013072:	81a3      	strh	r3, [r4, #12]
 8013074:	9b01      	ldr	r3, [sp, #4]
 8013076:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801307a:	b15b      	cbz	r3, 8013094 <__smakebuf_r+0x70>
 801307c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013080:	4630      	mov	r0, r6
 8013082:	f000 f81d 	bl	80130c0 <_isatty_r>
 8013086:	b128      	cbz	r0, 8013094 <__smakebuf_r+0x70>
 8013088:	89a3      	ldrh	r3, [r4, #12]
 801308a:	f023 0303 	bic.w	r3, r3, #3
 801308e:	f043 0301 	orr.w	r3, r3, #1
 8013092:	81a3      	strh	r3, [r4, #12]
 8013094:	89a3      	ldrh	r3, [r4, #12]
 8013096:	431d      	orrs	r5, r3
 8013098:	81a5      	strh	r5, [r4, #12]
 801309a:	e7cf      	b.n	801303c <__smakebuf_r+0x18>

0801309c <_fstat_r>:
 801309c:	b538      	push	{r3, r4, r5, lr}
 801309e:	4d07      	ldr	r5, [pc, #28]	@ (80130bc <_fstat_r+0x20>)
 80130a0:	2300      	movs	r3, #0
 80130a2:	4604      	mov	r4, r0
 80130a4:	4608      	mov	r0, r1
 80130a6:	4611      	mov	r1, r2
 80130a8:	602b      	str	r3, [r5, #0]
 80130aa:	f7f0 f8a7 	bl	80031fc <_fstat>
 80130ae:	1c43      	adds	r3, r0, #1
 80130b0:	d102      	bne.n	80130b8 <_fstat_r+0x1c>
 80130b2:	682b      	ldr	r3, [r5, #0]
 80130b4:	b103      	cbz	r3, 80130b8 <_fstat_r+0x1c>
 80130b6:	6023      	str	r3, [r4, #0]
 80130b8:	bd38      	pop	{r3, r4, r5, pc}
 80130ba:	bf00      	nop
 80130bc:	20001f28 	.word	0x20001f28

080130c0 <_isatty_r>:
 80130c0:	b538      	push	{r3, r4, r5, lr}
 80130c2:	4d06      	ldr	r5, [pc, #24]	@ (80130dc <_isatty_r+0x1c>)
 80130c4:	2300      	movs	r3, #0
 80130c6:	4604      	mov	r4, r0
 80130c8:	4608      	mov	r0, r1
 80130ca:	602b      	str	r3, [r5, #0]
 80130cc:	f7f0 f8a6 	bl	800321c <_isatty>
 80130d0:	1c43      	adds	r3, r0, #1
 80130d2:	d102      	bne.n	80130da <_isatty_r+0x1a>
 80130d4:	682b      	ldr	r3, [r5, #0]
 80130d6:	b103      	cbz	r3, 80130da <_isatty_r+0x1a>
 80130d8:	6023      	str	r3, [r4, #0]
 80130da:	bd38      	pop	{r3, r4, r5, pc}
 80130dc:	20001f28 	.word	0x20001f28

080130e0 <sqrt>:
 80130e0:	b538      	push	{r3, r4, r5, lr}
 80130e2:	ed2d 8b02 	vpush	{d8}
 80130e6:	ec55 4b10 	vmov	r4, r5, d0
 80130ea:	f000 f9c5 	bl	8013478 <__ieee754_sqrt>
 80130ee:	4622      	mov	r2, r4
 80130f0:	462b      	mov	r3, r5
 80130f2:	4620      	mov	r0, r4
 80130f4:	4629      	mov	r1, r5
 80130f6:	eeb0 8a40 	vmov.f32	s16, s0
 80130fa:	eef0 8a60 	vmov.f32	s17, s1
 80130fe:	f7ed fd1d 	bl	8000b3c <__aeabi_dcmpun>
 8013102:	b990      	cbnz	r0, 801312a <sqrt+0x4a>
 8013104:	2200      	movs	r2, #0
 8013106:	2300      	movs	r3, #0
 8013108:	4620      	mov	r0, r4
 801310a:	4629      	mov	r1, r5
 801310c:	f7ed fcee 	bl	8000aec <__aeabi_dcmplt>
 8013110:	b158      	cbz	r0, 801312a <sqrt+0x4a>
 8013112:	f7fe f833 	bl	801117c <__errno>
 8013116:	2321      	movs	r3, #33	@ 0x21
 8013118:	6003      	str	r3, [r0, #0]
 801311a:	2200      	movs	r2, #0
 801311c:	2300      	movs	r3, #0
 801311e:	4610      	mov	r0, r2
 8013120:	4619      	mov	r1, r3
 8013122:	f7ed fb9b 	bl	800085c <__aeabi_ddiv>
 8013126:	ec41 0b18 	vmov	d8, r0, r1
 801312a:	eeb0 0a48 	vmov.f32	s0, s16
 801312e:	eef0 0a68 	vmov.f32	s1, s17
 8013132:	ecbd 8b02 	vpop	{d8}
 8013136:	bd38      	pop	{r3, r4, r5, pc}

08013138 <atan>:
 8013138:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801313c:	ec55 4b10 	vmov	r4, r5, d0
 8013140:	4bbf      	ldr	r3, [pc, #764]	@ (8013440 <atan+0x308>)
 8013142:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8013146:	429e      	cmp	r6, r3
 8013148:	46ab      	mov	fp, r5
 801314a:	d918      	bls.n	801317e <atan+0x46>
 801314c:	4bbd      	ldr	r3, [pc, #756]	@ (8013444 <atan+0x30c>)
 801314e:	429e      	cmp	r6, r3
 8013150:	d801      	bhi.n	8013156 <atan+0x1e>
 8013152:	d109      	bne.n	8013168 <atan+0x30>
 8013154:	b144      	cbz	r4, 8013168 <atan+0x30>
 8013156:	4622      	mov	r2, r4
 8013158:	462b      	mov	r3, r5
 801315a:	4620      	mov	r0, r4
 801315c:	4629      	mov	r1, r5
 801315e:	f7ed f89d 	bl	800029c <__adddf3>
 8013162:	4604      	mov	r4, r0
 8013164:	460d      	mov	r5, r1
 8013166:	e006      	b.n	8013176 <atan+0x3e>
 8013168:	f1bb 0f00 	cmp.w	fp, #0
 801316c:	f340 812b 	ble.w	80133c6 <atan+0x28e>
 8013170:	a597      	add	r5, pc, #604	@ (adr r5, 80133d0 <atan+0x298>)
 8013172:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013176:	ec45 4b10 	vmov	d0, r4, r5
 801317a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801317e:	4bb2      	ldr	r3, [pc, #712]	@ (8013448 <atan+0x310>)
 8013180:	429e      	cmp	r6, r3
 8013182:	d813      	bhi.n	80131ac <atan+0x74>
 8013184:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8013188:	429e      	cmp	r6, r3
 801318a:	d80c      	bhi.n	80131a6 <atan+0x6e>
 801318c:	a392      	add	r3, pc, #584	@ (adr r3, 80133d8 <atan+0x2a0>)
 801318e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013192:	4620      	mov	r0, r4
 8013194:	4629      	mov	r1, r5
 8013196:	f7ed f881 	bl	800029c <__adddf3>
 801319a:	4bac      	ldr	r3, [pc, #688]	@ (801344c <atan+0x314>)
 801319c:	2200      	movs	r2, #0
 801319e:	f7ed fcc3 	bl	8000b28 <__aeabi_dcmpgt>
 80131a2:	2800      	cmp	r0, #0
 80131a4:	d1e7      	bne.n	8013176 <atan+0x3e>
 80131a6:	f04f 3aff 	mov.w	sl, #4294967295
 80131aa:	e029      	b.n	8013200 <atan+0xc8>
 80131ac:	f000 f95c 	bl	8013468 <fabs>
 80131b0:	4ba7      	ldr	r3, [pc, #668]	@ (8013450 <atan+0x318>)
 80131b2:	429e      	cmp	r6, r3
 80131b4:	ec55 4b10 	vmov	r4, r5, d0
 80131b8:	f200 80bc 	bhi.w	8013334 <atan+0x1fc>
 80131bc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80131c0:	429e      	cmp	r6, r3
 80131c2:	f200 809e 	bhi.w	8013302 <atan+0x1ca>
 80131c6:	4622      	mov	r2, r4
 80131c8:	462b      	mov	r3, r5
 80131ca:	4620      	mov	r0, r4
 80131cc:	4629      	mov	r1, r5
 80131ce:	f7ed f865 	bl	800029c <__adddf3>
 80131d2:	4b9e      	ldr	r3, [pc, #632]	@ (801344c <atan+0x314>)
 80131d4:	2200      	movs	r2, #0
 80131d6:	f7ed f85f 	bl	8000298 <__aeabi_dsub>
 80131da:	2200      	movs	r2, #0
 80131dc:	4606      	mov	r6, r0
 80131de:	460f      	mov	r7, r1
 80131e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80131e4:	4620      	mov	r0, r4
 80131e6:	4629      	mov	r1, r5
 80131e8:	f7ed f858 	bl	800029c <__adddf3>
 80131ec:	4602      	mov	r2, r0
 80131ee:	460b      	mov	r3, r1
 80131f0:	4630      	mov	r0, r6
 80131f2:	4639      	mov	r1, r7
 80131f4:	f7ed fb32 	bl	800085c <__aeabi_ddiv>
 80131f8:	f04f 0a00 	mov.w	sl, #0
 80131fc:	4604      	mov	r4, r0
 80131fe:	460d      	mov	r5, r1
 8013200:	4622      	mov	r2, r4
 8013202:	462b      	mov	r3, r5
 8013204:	4620      	mov	r0, r4
 8013206:	4629      	mov	r1, r5
 8013208:	f7ed f9fe 	bl	8000608 <__aeabi_dmul>
 801320c:	4602      	mov	r2, r0
 801320e:	460b      	mov	r3, r1
 8013210:	4680      	mov	r8, r0
 8013212:	4689      	mov	r9, r1
 8013214:	f7ed f9f8 	bl	8000608 <__aeabi_dmul>
 8013218:	a371      	add	r3, pc, #452	@ (adr r3, 80133e0 <atan+0x2a8>)
 801321a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801321e:	4606      	mov	r6, r0
 8013220:	460f      	mov	r7, r1
 8013222:	f7ed f9f1 	bl	8000608 <__aeabi_dmul>
 8013226:	a370      	add	r3, pc, #448	@ (adr r3, 80133e8 <atan+0x2b0>)
 8013228:	e9d3 2300 	ldrd	r2, r3, [r3]
 801322c:	f7ed f836 	bl	800029c <__adddf3>
 8013230:	4632      	mov	r2, r6
 8013232:	463b      	mov	r3, r7
 8013234:	f7ed f9e8 	bl	8000608 <__aeabi_dmul>
 8013238:	a36d      	add	r3, pc, #436	@ (adr r3, 80133f0 <atan+0x2b8>)
 801323a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801323e:	f7ed f82d 	bl	800029c <__adddf3>
 8013242:	4632      	mov	r2, r6
 8013244:	463b      	mov	r3, r7
 8013246:	f7ed f9df 	bl	8000608 <__aeabi_dmul>
 801324a:	a36b      	add	r3, pc, #428	@ (adr r3, 80133f8 <atan+0x2c0>)
 801324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013250:	f7ed f824 	bl	800029c <__adddf3>
 8013254:	4632      	mov	r2, r6
 8013256:	463b      	mov	r3, r7
 8013258:	f7ed f9d6 	bl	8000608 <__aeabi_dmul>
 801325c:	a368      	add	r3, pc, #416	@ (adr r3, 8013400 <atan+0x2c8>)
 801325e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013262:	f7ed f81b 	bl	800029c <__adddf3>
 8013266:	4632      	mov	r2, r6
 8013268:	463b      	mov	r3, r7
 801326a:	f7ed f9cd 	bl	8000608 <__aeabi_dmul>
 801326e:	a366      	add	r3, pc, #408	@ (adr r3, 8013408 <atan+0x2d0>)
 8013270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013274:	f7ed f812 	bl	800029c <__adddf3>
 8013278:	4642      	mov	r2, r8
 801327a:	464b      	mov	r3, r9
 801327c:	f7ed f9c4 	bl	8000608 <__aeabi_dmul>
 8013280:	a363      	add	r3, pc, #396	@ (adr r3, 8013410 <atan+0x2d8>)
 8013282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013286:	4680      	mov	r8, r0
 8013288:	4689      	mov	r9, r1
 801328a:	4630      	mov	r0, r6
 801328c:	4639      	mov	r1, r7
 801328e:	f7ed f9bb 	bl	8000608 <__aeabi_dmul>
 8013292:	a361      	add	r3, pc, #388	@ (adr r3, 8013418 <atan+0x2e0>)
 8013294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013298:	f7ec fffe 	bl	8000298 <__aeabi_dsub>
 801329c:	4632      	mov	r2, r6
 801329e:	463b      	mov	r3, r7
 80132a0:	f7ed f9b2 	bl	8000608 <__aeabi_dmul>
 80132a4:	a35e      	add	r3, pc, #376	@ (adr r3, 8013420 <atan+0x2e8>)
 80132a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132aa:	f7ec fff5 	bl	8000298 <__aeabi_dsub>
 80132ae:	4632      	mov	r2, r6
 80132b0:	463b      	mov	r3, r7
 80132b2:	f7ed f9a9 	bl	8000608 <__aeabi_dmul>
 80132b6:	a35c      	add	r3, pc, #368	@ (adr r3, 8013428 <atan+0x2f0>)
 80132b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132bc:	f7ec ffec 	bl	8000298 <__aeabi_dsub>
 80132c0:	4632      	mov	r2, r6
 80132c2:	463b      	mov	r3, r7
 80132c4:	f7ed f9a0 	bl	8000608 <__aeabi_dmul>
 80132c8:	a359      	add	r3, pc, #356	@ (adr r3, 8013430 <atan+0x2f8>)
 80132ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ce:	f7ec ffe3 	bl	8000298 <__aeabi_dsub>
 80132d2:	4632      	mov	r2, r6
 80132d4:	463b      	mov	r3, r7
 80132d6:	f7ed f997 	bl	8000608 <__aeabi_dmul>
 80132da:	4602      	mov	r2, r0
 80132dc:	460b      	mov	r3, r1
 80132de:	4640      	mov	r0, r8
 80132e0:	4649      	mov	r1, r9
 80132e2:	f7ec ffdb 	bl	800029c <__adddf3>
 80132e6:	4622      	mov	r2, r4
 80132e8:	462b      	mov	r3, r5
 80132ea:	f7ed f98d 	bl	8000608 <__aeabi_dmul>
 80132ee:	f1ba 3fff 	cmp.w	sl, #4294967295
 80132f2:	4602      	mov	r2, r0
 80132f4:	460b      	mov	r3, r1
 80132f6:	d148      	bne.n	801338a <atan+0x252>
 80132f8:	4620      	mov	r0, r4
 80132fa:	4629      	mov	r1, r5
 80132fc:	f7ec ffcc 	bl	8000298 <__aeabi_dsub>
 8013300:	e72f      	b.n	8013162 <atan+0x2a>
 8013302:	4b52      	ldr	r3, [pc, #328]	@ (801344c <atan+0x314>)
 8013304:	2200      	movs	r2, #0
 8013306:	4620      	mov	r0, r4
 8013308:	4629      	mov	r1, r5
 801330a:	f7ec ffc5 	bl	8000298 <__aeabi_dsub>
 801330e:	4b4f      	ldr	r3, [pc, #316]	@ (801344c <atan+0x314>)
 8013310:	4606      	mov	r6, r0
 8013312:	460f      	mov	r7, r1
 8013314:	2200      	movs	r2, #0
 8013316:	4620      	mov	r0, r4
 8013318:	4629      	mov	r1, r5
 801331a:	f7ec ffbf 	bl	800029c <__adddf3>
 801331e:	4602      	mov	r2, r0
 8013320:	460b      	mov	r3, r1
 8013322:	4630      	mov	r0, r6
 8013324:	4639      	mov	r1, r7
 8013326:	f7ed fa99 	bl	800085c <__aeabi_ddiv>
 801332a:	f04f 0a01 	mov.w	sl, #1
 801332e:	4604      	mov	r4, r0
 8013330:	460d      	mov	r5, r1
 8013332:	e765      	b.n	8013200 <atan+0xc8>
 8013334:	4b47      	ldr	r3, [pc, #284]	@ (8013454 <atan+0x31c>)
 8013336:	429e      	cmp	r6, r3
 8013338:	d21c      	bcs.n	8013374 <atan+0x23c>
 801333a:	4b47      	ldr	r3, [pc, #284]	@ (8013458 <atan+0x320>)
 801333c:	2200      	movs	r2, #0
 801333e:	4620      	mov	r0, r4
 8013340:	4629      	mov	r1, r5
 8013342:	f7ec ffa9 	bl	8000298 <__aeabi_dsub>
 8013346:	4b44      	ldr	r3, [pc, #272]	@ (8013458 <atan+0x320>)
 8013348:	4606      	mov	r6, r0
 801334a:	460f      	mov	r7, r1
 801334c:	2200      	movs	r2, #0
 801334e:	4620      	mov	r0, r4
 8013350:	4629      	mov	r1, r5
 8013352:	f7ed f959 	bl	8000608 <__aeabi_dmul>
 8013356:	4b3d      	ldr	r3, [pc, #244]	@ (801344c <atan+0x314>)
 8013358:	2200      	movs	r2, #0
 801335a:	f7ec ff9f 	bl	800029c <__adddf3>
 801335e:	4602      	mov	r2, r0
 8013360:	460b      	mov	r3, r1
 8013362:	4630      	mov	r0, r6
 8013364:	4639      	mov	r1, r7
 8013366:	f7ed fa79 	bl	800085c <__aeabi_ddiv>
 801336a:	f04f 0a02 	mov.w	sl, #2
 801336e:	4604      	mov	r4, r0
 8013370:	460d      	mov	r5, r1
 8013372:	e745      	b.n	8013200 <atan+0xc8>
 8013374:	4622      	mov	r2, r4
 8013376:	462b      	mov	r3, r5
 8013378:	4938      	ldr	r1, [pc, #224]	@ (801345c <atan+0x324>)
 801337a:	2000      	movs	r0, #0
 801337c:	f7ed fa6e 	bl	800085c <__aeabi_ddiv>
 8013380:	f04f 0a03 	mov.w	sl, #3
 8013384:	4604      	mov	r4, r0
 8013386:	460d      	mov	r5, r1
 8013388:	e73a      	b.n	8013200 <atan+0xc8>
 801338a:	4b35      	ldr	r3, [pc, #212]	@ (8013460 <atan+0x328>)
 801338c:	4e35      	ldr	r6, [pc, #212]	@ (8013464 <atan+0x32c>)
 801338e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013396:	f7ec ff7f 	bl	8000298 <__aeabi_dsub>
 801339a:	4622      	mov	r2, r4
 801339c:	462b      	mov	r3, r5
 801339e:	f7ec ff7b 	bl	8000298 <__aeabi_dsub>
 80133a2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80133a6:	4602      	mov	r2, r0
 80133a8:	460b      	mov	r3, r1
 80133aa:	e9d6 0100 	ldrd	r0, r1, [r6]
 80133ae:	f7ec ff73 	bl	8000298 <__aeabi_dsub>
 80133b2:	f1bb 0f00 	cmp.w	fp, #0
 80133b6:	4604      	mov	r4, r0
 80133b8:	460d      	mov	r5, r1
 80133ba:	f6bf aedc 	bge.w	8013176 <atan+0x3e>
 80133be:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80133c2:	461d      	mov	r5, r3
 80133c4:	e6d7      	b.n	8013176 <atan+0x3e>
 80133c6:	a51c      	add	r5, pc, #112	@ (adr r5, 8013438 <atan+0x300>)
 80133c8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80133cc:	e6d3      	b.n	8013176 <atan+0x3e>
 80133ce:	bf00      	nop
 80133d0:	54442d18 	.word	0x54442d18
 80133d4:	3ff921fb 	.word	0x3ff921fb
 80133d8:	8800759c 	.word	0x8800759c
 80133dc:	7e37e43c 	.word	0x7e37e43c
 80133e0:	e322da11 	.word	0xe322da11
 80133e4:	3f90ad3a 	.word	0x3f90ad3a
 80133e8:	24760deb 	.word	0x24760deb
 80133ec:	3fa97b4b 	.word	0x3fa97b4b
 80133f0:	a0d03d51 	.word	0xa0d03d51
 80133f4:	3fb10d66 	.word	0x3fb10d66
 80133f8:	c54c206e 	.word	0xc54c206e
 80133fc:	3fb745cd 	.word	0x3fb745cd
 8013400:	920083ff 	.word	0x920083ff
 8013404:	3fc24924 	.word	0x3fc24924
 8013408:	5555550d 	.word	0x5555550d
 801340c:	3fd55555 	.word	0x3fd55555
 8013410:	2c6a6c2f 	.word	0x2c6a6c2f
 8013414:	bfa2b444 	.word	0xbfa2b444
 8013418:	52defd9a 	.word	0x52defd9a
 801341c:	3fadde2d 	.word	0x3fadde2d
 8013420:	af749a6d 	.word	0xaf749a6d
 8013424:	3fb3b0f2 	.word	0x3fb3b0f2
 8013428:	fe231671 	.word	0xfe231671
 801342c:	3fbc71c6 	.word	0x3fbc71c6
 8013430:	9998ebc4 	.word	0x9998ebc4
 8013434:	3fc99999 	.word	0x3fc99999
 8013438:	54442d18 	.word	0x54442d18
 801343c:	bff921fb 	.word	0xbff921fb
 8013440:	440fffff 	.word	0x440fffff
 8013444:	7ff00000 	.word	0x7ff00000
 8013448:	3fdbffff 	.word	0x3fdbffff
 801344c:	3ff00000 	.word	0x3ff00000
 8013450:	3ff2ffff 	.word	0x3ff2ffff
 8013454:	40038000 	.word	0x40038000
 8013458:	3ff80000 	.word	0x3ff80000
 801345c:	bff00000 	.word	0xbff00000
 8013460:	08013e50 	.word	0x08013e50
 8013464:	08013e70 	.word	0x08013e70

08013468 <fabs>:
 8013468:	ec51 0b10 	vmov	r0, r1, d0
 801346c:	4602      	mov	r2, r0
 801346e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013472:	ec43 2b10 	vmov	d0, r2, r3
 8013476:	4770      	bx	lr

08013478 <__ieee754_sqrt>:
 8013478:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801347c:	4a68      	ldr	r2, [pc, #416]	@ (8013620 <__ieee754_sqrt+0x1a8>)
 801347e:	ec55 4b10 	vmov	r4, r5, d0
 8013482:	43aa      	bics	r2, r5
 8013484:	462b      	mov	r3, r5
 8013486:	4621      	mov	r1, r4
 8013488:	d110      	bne.n	80134ac <__ieee754_sqrt+0x34>
 801348a:	4622      	mov	r2, r4
 801348c:	4620      	mov	r0, r4
 801348e:	4629      	mov	r1, r5
 8013490:	f7ed f8ba 	bl	8000608 <__aeabi_dmul>
 8013494:	4602      	mov	r2, r0
 8013496:	460b      	mov	r3, r1
 8013498:	4620      	mov	r0, r4
 801349a:	4629      	mov	r1, r5
 801349c:	f7ec fefe 	bl	800029c <__adddf3>
 80134a0:	4604      	mov	r4, r0
 80134a2:	460d      	mov	r5, r1
 80134a4:	ec45 4b10 	vmov	d0, r4, r5
 80134a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134ac:	2d00      	cmp	r5, #0
 80134ae:	dc0e      	bgt.n	80134ce <__ieee754_sqrt+0x56>
 80134b0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80134b4:	4322      	orrs	r2, r4
 80134b6:	d0f5      	beq.n	80134a4 <__ieee754_sqrt+0x2c>
 80134b8:	b19d      	cbz	r5, 80134e2 <__ieee754_sqrt+0x6a>
 80134ba:	4622      	mov	r2, r4
 80134bc:	4620      	mov	r0, r4
 80134be:	4629      	mov	r1, r5
 80134c0:	f7ec feea 	bl	8000298 <__aeabi_dsub>
 80134c4:	4602      	mov	r2, r0
 80134c6:	460b      	mov	r3, r1
 80134c8:	f7ed f9c8 	bl	800085c <__aeabi_ddiv>
 80134cc:	e7e8      	b.n	80134a0 <__ieee754_sqrt+0x28>
 80134ce:	152a      	asrs	r2, r5, #20
 80134d0:	d115      	bne.n	80134fe <__ieee754_sqrt+0x86>
 80134d2:	2000      	movs	r0, #0
 80134d4:	e009      	b.n	80134ea <__ieee754_sqrt+0x72>
 80134d6:	0acb      	lsrs	r3, r1, #11
 80134d8:	3a15      	subs	r2, #21
 80134da:	0549      	lsls	r1, r1, #21
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d0fa      	beq.n	80134d6 <__ieee754_sqrt+0x5e>
 80134e0:	e7f7      	b.n	80134d2 <__ieee754_sqrt+0x5a>
 80134e2:	462a      	mov	r2, r5
 80134e4:	e7fa      	b.n	80134dc <__ieee754_sqrt+0x64>
 80134e6:	005b      	lsls	r3, r3, #1
 80134e8:	3001      	adds	r0, #1
 80134ea:	02dc      	lsls	r4, r3, #11
 80134ec:	d5fb      	bpl.n	80134e6 <__ieee754_sqrt+0x6e>
 80134ee:	1e44      	subs	r4, r0, #1
 80134f0:	1b12      	subs	r2, r2, r4
 80134f2:	f1c0 0420 	rsb	r4, r0, #32
 80134f6:	fa21 f404 	lsr.w	r4, r1, r4
 80134fa:	4323      	orrs	r3, r4
 80134fc:	4081      	lsls	r1, r0
 80134fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013502:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8013506:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801350a:	07d2      	lsls	r2, r2, #31
 801350c:	bf5c      	itt	pl
 801350e:	005b      	lslpl	r3, r3, #1
 8013510:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8013514:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013518:	bf58      	it	pl
 801351a:	0049      	lslpl	r1, r1, #1
 801351c:	2600      	movs	r6, #0
 801351e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8013522:	106d      	asrs	r5, r5, #1
 8013524:	0049      	lsls	r1, r1, #1
 8013526:	2016      	movs	r0, #22
 8013528:	4632      	mov	r2, r6
 801352a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801352e:	1917      	adds	r7, r2, r4
 8013530:	429f      	cmp	r7, r3
 8013532:	bfde      	ittt	le
 8013534:	193a      	addle	r2, r7, r4
 8013536:	1bdb      	suble	r3, r3, r7
 8013538:	1936      	addle	r6, r6, r4
 801353a:	0fcf      	lsrs	r7, r1, #31
 801353c:	3801      	subs	r0, #1
 801353e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8013542:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013546:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801354a:	d1f0      	bne.n	801352e <__ieee754_sqrt+0xb6>
 801354c:	4604      	mov	r4, r0
 801354e:	2720      	movs	r7, #32
 8013550:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8013554:	429a      	cmp	r2, r3
 8013556:	eb00 0e0c 	add.w	lr, r0, ip
 801355a:	db02      	blt.n	8013562 <__ieee754_sqrt+0xea>
 801355c:	d113      	bne.n	8013586 <__ieee754_sqrt+0x10e>
 801355e:	458e      	cmp	lr, r1
 8013560:	d811      	bhi.n	8013586 <__ieee754_sqrt+0x10e>
 8013562:	f1be 0f00 	cmp.w	lr, #0
 8013566:	eb0e 000c 	add.w	r0, lr, ip
 801356a:	da42      	bge.n	80135f2 <__ieee754_sqrt+0x17a>
 801356c:	2800      	cmp	r0, #0
 801356e:	db40      	blt.n	80135f2 <__ieee754_sqrt+0x17a>
 8013570:	f102 0801 	add.w	r8, r2, #1
 8013574:	1a9b      	subs	r3, r3, r2
 8013576:	458e      	cmp	lr, r1
 8013578:	bf88      	it	hi
 801357a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801357e:	eba1 010e 	sub.w	r1, r1, lr
 8013582:	4464      	add	r4, ip
 8013584:	4642      	mov	r2, r8
 8013586:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801358a:	3f01      	subs	r7, #1
 801358c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8013590:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013594:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8013598:	d1dc      	bne.n	8013554 <__ieee754_sqrt+0xdc>
 801359a:	4319      	orrs	r1, r3
 801359c:	d01b      	beq.n	80135d6 <__ieee754_sqrt+0x15e>
 801359e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8013624 <__ieee754_sqrt+0x1ac>
 80135a2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8013628 <__ieee754_sqrt+0x1b0>
 80135a6:	e9da 0100 	ldrd	r0, r1, [sl]
 80135aa:	e9db 2300 	ldrd	r2, r3, [fp]
 80135ae:	f7ec fe73 	bl	8000298 <__aeabi_dsub>
 80135b2:	e9da 8900 	ldrd	r8, r9, [sl]
 80135b6:	4602      	mov	r2, r0
 80135b8:	460b      	mov	r3, r1
 80135ba:	4640      	mov	r0, r8
 80135bc:	4649      	mov	r1, r9
 80135be:	f7ed fa9f 	bl	8000b00 <__aeabi_dcmple>
 80135c2:	b140      	cbz	r0, 80135d6 <__ieee754_sqrt+0x15e>
 80135c4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80135c8:	e9da 0100 	ldrd	r0, r1, [sl]
 80135cc:	e9db 2300 	ldrd	r2, r3, [fp]
 80135d0:	d111      	bne.n	80135f6 <__ieee754_sqrt+0x17e>
 80135d2:	3601      	adds	r6, #1
 80135d4:	463c      	mov	r4, r7
 80135d6:	1072      	asrs	r2, r6, #1
 80135d8:	0863      	lsrs	r3, r4, #1
 80135da:	07f1      	lsls	r1, r6, #31
 80135dc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80135e0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80135e4:	bf48      	it	mi
 80135e6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80135ea:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80135ee:	4618      	mov	r0, r3
 80135f0:	e756      	b.n	80134a0 <__ieee754_sqrt+0x28>
 80135f2:	4690      	mov	r8, r2
 80135f4:	e7be      	b.n	8013574 <__ieee754_sqrt+0xfc>
 80135f6:	f7ec fe51 	bl	800029c <__adddf3>
 80135fa:	e9da 8900 	ldrd	r8, r9, [sl]
 80135fe:	4602      	mov	r2, r0
 8013600:	460b      	mov	r3, r1
 8013602:	4640      	mov	r0, r8
 8013604:	4649      	mov	r1, r9
 8013606:	f7ed fa71 	bl	8000aec <__aeabi_dcmplt>
 801360a:	b120      	cbz	r0, 8013616 <__ieee754_sqrt+0x19e>
 801360c:	1ca0      	adds	r0, r4, #2
 801360e:	bf08      	it	eq
 8013610:	3601      	addeq	r6, #1
 8013612:	3402      	adds	r4, #2
 8013614:	e7df      	b.n	80135d6 <__ieee754_sqrt+0x15e>
 8013616:	1c63      	adds	r3, r4, #1
 8013618:	f023 0401 	bic.w	r4, r3, #1
 801361c:	e7db      	b.n	80135d6 <__ieee754_sqrt+0x15e>
 801361e:	bf00      	nop
 8013620:	7ff00000 	.word	0x7ff00000
 8013624:	20000330 	.word	0x20000330
 8013628:	20000328 	.word	0x20000328

0801362c <_init>:
 801362c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801362e:	bf00      	nop
 8013630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013632:	bc08      	pop	{r3}
 8013634:	469e      	mov	lr, r3
 8013636:	4770      	bx	lr

08013638 <_fini>:
 8013638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801363a:	bf00      	nop
 801363c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801363e:	bc08      	pop	{r3}
 8013640:	469e      	mov	lr, r3
 8013642:	4770      	bx	lr
