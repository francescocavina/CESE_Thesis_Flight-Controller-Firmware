
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000136d4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d0  08013878  08013878  00014878  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014048  08014048  00016338  2**0
                  CONTENTS
  4 .ARM          00000008  08014048  08014048  00015048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014050  08014050  00016338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014050  08014050  00015050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014054  08014054  00015054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000338  20000000  08014058  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c00  20000338  08014390  00016338  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f38  08014390  00016f38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016338  2**0
                  CONTENTS, READONLY
 12 .debug_info   000270db  00000000  00000000  00016368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006159  00000000  00000000  0003d443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002108  00000000  00000000  000435a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001977  00000000  00000000  000456a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000211f2  00000000  00000000  0004701f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f00e  00000000  00000000  00068211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae404  00000000  00000000  0009721f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00145623  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009bdc  00000000  00000000  00145668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  0014f244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000338 	.word	0x20000338
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801385c 	.word	0x0801385c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000033c 	.word	0x2000033c
 80001dc:	0801385c 	.word	0x0801385c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <FreeRTOS_CreateStartUpTasks>:
extern ADC_HandleTypeDef hadc1;

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
void FreeRTOS_CreateStartUpTasks(void) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af02      	add	r7, sp, #8

    BaseType_t ret;

    /* Task: FlightController_Startup */
    ret = xTaskCreate(FlightController_StartUp, "FlightController_StartUp", (4 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t)TASK_FLIGHTCONTROLLER_STARTUP_PRIORITY), &FlightController_StartUp_Handle);
 8000f8e:	4b2b      	ldr	r3, [pc, #172]	@ (800103c <FreeRTOS_CreateStartUpTasks+0xb4>)
 8000f90:	9301      	str	r3, [sp, #4]
 8000f92:	2302      	movs	r3, #2
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2300      	movs	r3, #0
 8000f98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f9c:	4928      	ldr	r1, [pc, #160]	@ (8001040 <FreeRTOS_CreateStartUpTasks+0xb8>)
 8000f9e:	4829      	ldr	r0, [pc, #164]	@ (8001044 <FreeRTOS_CreateStartUpTasks+0xbc>)
 8000fa0:	f00d f87c 	bl	800e09c <xTaskCreate>
 8000fa4:	60f8      	str	r0, [r7, #12]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d00b      	beq.n	8000fc4 <FreeRTOS_CreateStartUpTasks+0x3c>
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortRaiseBASEPRI(void) {
    uint32_t ulNewBASEPRI;

    __asm volatile("	mov %0, %1												\n"
 8000fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fb0:	f383 8811 	msr	BASEPRI, r3
 8000fb4:	f3bf 8f6f 	isb	sy
 8000fb8:	f3bf 8f4f 	dsb	sy
 8000fbc:	60bb      	str	r3, [r7, #8]
                   "	isb														\n"
                   "	dsb														\n"
                   : "=r"(ulNewBASEPRI)
                   : "i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
                   : "memory");
}
 8000fbe:	bf00      	nop
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <FreeRTOS_CreateStartUpTasks+0x38>

    if (FlightController_StartUp_Handle == NULL) {
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800103c <FreeRTOS_CreateStartUpTasks+0xb4>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d104      	bne.n	8000fd6 <FreeRTOS_CreateStartUpTasks+0x4e>
        vTaskDelete(FlightController_StartUp_Handle);
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800103c <FreeRTOS_CreateStartUpTasks+0xb4>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f00d f995 	bl	800e300 <vTaskDelete>
    }

    /* Task: FlightController_OnOffButton */
    ret = xTaskCreate(FlightController_OnOffButton, "FlightController_OnOffButton", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t)TASK_FLIGHTCONTROLLER_ONOFFBUTTON_PRIORITY), &FlightController_OnOffButton_Handle);
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001048 <FreeRTOS_CreateStartUpTasks+0xc0>)
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	2302      	movs	r3, #2
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fe4:	4919      	ldr	r1, [pc, #100]	@ (800104c <FreeRTOS_CreateStartUpTasks+0xc4>)
 8000fe6:	481a      	ldr	r0, [pc, #104]	@ (8001050 <FreeRTOS_CreateStartUpTasks+0xc8>)
 8000fe8:	f00d f858 	bl	800e09c <xTaskCreate>
 8000fec:	60f8      	str	r0, [r7, #12]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d00b      	beq.n	800100c <FreeRTOS_CreateStartUpTasks+0x84>
    __asm volatile("	mov %0, %1												\n"
 8000ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ff8:	f383 8811 	msr	BASEPRI, r3
 8000ffc:	f3bf 8f6f 	isb	sy
 8001000:	f3bf 8f4f 	dsb	sy
 8001004:	607b      	str	r3, [r7, #4]
}
 8001006:	bf00      	nop
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <FreeRTOS_CreateStartUpTasks+0x80>

    if (FlightController_OnOffButton_Handle == NULL) {
 800100c:	4b0e      	ldr	r3, [pc, #56]	@ (8001048 <FreeRTOS_CreateStartUpTasks+0xc0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d104      	bne.n	800101e <FreeRTOS_CreateStartUpTasks+0x96>
        vTaskDelete(FlightController_OnOffButton_Handle);
 8001014:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <FreeRTOS_CreateStartUpTasks+0xc0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f00d f971 	bl	800e300 <vTaskDelete>
    }

    /* Timer1: OnOff_Button */
    Timer1_Handle = xTimerCreate("OnOff_Button", 100, pdTRUE, (void *)0, Timer1_Callback);
 800101e:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <FreeRTOS_CreateStartUpTasks+0xcc>)
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	2300      	movs	r3, #0
 8001024:	2201      	movs	r2, #1
 8001026:	2164      	movs	r1, #100	@ 0x64
 8001028:	480b      	ldr	r0, [pc, #44]	@ (8001058 <FreeRTOS_CreateStartUpTasks+0xd0>)
 800102a:	f00d ffdd 	bl	800efe8 <xTimerCreate>
 800102e:	4603      	mov	r3, r0
 8001030:	4a0a      	ldr	r2, [pc, #40]	@ (800105c <FreeRTOS_CreateStartUpTasks+0xd4>)
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000358 	.word	0x20000358
 8001040:	08013878 	.word	0x08013878
 8001044:	08001341 	.word	0x08001341
 8001048:	20000364 	.word	0x20000364
 800104c:	08013894 	.word	0x08013894
 8001050:	08001d35 	.word	0x08001d35
 8001054:	08002569 	.word	0x08002569
 8001058:	080138b4 	.word	0x080138b4
 800105c:	20000378 	.word	0x20000378

08001060 <FreeRTOS_CreateTasks>:

void FreeRTOS_CreateTasks(void) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	@ 0x28
 8001064:	af02      	add	r7, sp, #8

    BaseType_t ret;

    /* Task 1: FlightController_ControlSystem */
    ret = xTaskCreate(FlightController_ControlSystem, "FlightController_ControlSystem", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t)TASK_FLIGHTCONTROLLER_CONTROLSYSTEM_PRIORITY), &FlightController_ControlSystem_Handle);
 8001066:	4b6e      	ldr	r3, [pc, #440]	@ (8001220 <FreeRTOS_CreateTasks+0x1c0>)
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	2302      	movs	r3, #2
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2300      	movs	r3, #0
 8001070:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001074:	496b      	ldr	r1, [pc, #428]	@ (8001224 <FreeRTOS_CreateTasks+0x1c4>)
 8001076:	486c      	ldr	r0, [pc, #432]	@ (8001228 <FreeRTOS_CreateTasks+0x1c8>)
 8001078:	f00d f810 	bl	800e09c <xTaskCreate>
 800107c:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d00b      	beq.n	800109c <FreeRTOS_CreateTasks+0x3c>
    __asm volatile("	mov %0, %1												\n"
 8001084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001088:	f383 8811 	msr	BASEPRI, r3
 800108c:	f3bf 8f6f 	isb	sy
 8001090:	f3bf 8f4f 	dsb	sy
 8001094:	61bb      	str	r3, [r7, #24]
}
 8001096:	bf00      	nop
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <FreeRTOS_CreateTasks+0x38>

    if (FlightController_ControlSystem_Handle == NULL) {
 800109c:	4b60      	ldr	r3, [pc, #384]	@ (8001220 <FreeRTOS_CreateTasks+0x1c0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d104      	bne.n	80010ae <FreeRTOS_CreateTasks+0x4e>
        vTaskDelete(FlightController_ControlSystem_Handle);
 80010a4:	4b5e      	ldr	r3, [pc, #376]	@ (8001220 <FreeRTOS_CreateTasks+0x1c0>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f00d f929 	bl	800e300 <vTaskDelete>
    }

    /* Task 2: FlightController_Data_Logging */
    ret = xTaskCreate(FlightController_Data_Logging, "FlightController_Data_Logging", (4 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t)TASK_FLIGHTCONTROLLER_DATA_LOGGING_PRIORITY), &FlightController_Data_Logging_Handle);
 80010ae:	4b5f      	ldr	r3, [pc, #380]	@ (800122c <FreeRTOS_CreateTasks+0x1cc>)
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	2302      	movs	r3, #2
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2300      	movs	r3, #0
 80010b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010bc:	495c      	ldr	r1, [pc, #368]	@ (8001230 <FreeRTOS_CreateTasks+0x1d0>)
 80010be:	485d      	ldr	r0, [pc, #372]	@ (8001234 <FreeRTOS_CreateTasks+0x1d4>)
 80010c0:	f00c ffec 	bl	800e09c <xTaskCreate>
 80010c4:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d00b      	beq.n	80010e4 <FreeRTOS_CreateTasks+0x84>
    __asm volatile("	mov %0, %1												\n"
 80010cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010d0:	f383 8811 	msr	BASEPRI, r3
 80010d4:	f3bf 8f6f 	isb	sy
 80010d8:	f3bf 8f4f 	dsb	sy
 80010dc:	617b      	str	r3, [r7, #20]
}
 80010de:	bf00      	nop
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <FreeRTOS_CreateTasks+0x80>

    if (FlightController_Data_Logging_Handle == NULL) {
 80010e4:	4b51      	ldr	r3, [pc, #324]	@ (800122c <FreeRTOS_CreateTasks+0x1cc>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d104      	bne.n	80010f6 <FreeRTOS_CreateTasks+0x96>
        vTaskDelete(FlightController_Data_Logging_Handle);
 80010ec:	4b4f      	ldr	r3, [pc, #316]	@ (800122c <FreeRTOS_CreateTasks+0x1cc>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f00d f905 	bl	800e300 <vTaskDelete>
    }

    /* Task 3: FlightController_BatteryLevel */
    ret = xTaskCreate(FlightController_BatteryLevel, "FlightController_BatteryLevel", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t)TASK_FLIGHTCONTROLLER_BATTERYLEVEL_PRIORITY), &FlightController_BatteryLevel_Handle);
 80010f6:	4b50      	ldr	r3, [pc, #320]	@ (8001238 <FreeRTOS_CreateTasks+0x1d8>)
 80010f8:	9301      	str	r3, [sp, #4]
 80010fa:	2302      	movs	r3, #2
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2300      	movs	r3, #0
 8001100:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001104:	494d      	ldr	r1, [pc, #308]	@ (800123c <FreeRTOS_CreateTasks+0x1dc>)
 8001106:	484e      	ldr	r0, [pc, #312]	@ (8001240 <FreeRTOS_CreateTasks+0x1e0>)
 8001108:	f00c ffc8 	bl	800e09c <xTaskCreate>
 800110c:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d00b      	beq.n	800112c <FreeRTOS_CreateTasks+0xcc>
    __asm volatile("	mov %0, %1												\n"
 8001114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001118:	f383 8811 	msr	BASEPRI, r3
 800111c:	f3bf 8f6f 	isb	sy
 8001120:	f3bf 8f4f 	dsb	sy
 8001124:	613b      	str	r3, [r7, #16]
}
 8001126:	bf00      	nop
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <FreeRTOS_CreateTasks+0xc8>

    if (FlightController_BatteryLevel_Handle == NULL) {
 800112c:	4b42      	ldr	r3, [pc, #264]	@ (8001238 <FreeRTOS_CreateTasks+0x1d8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d104      	bne.n	800113e <FreeRTOS_CreateTasks+0xde>
        vTaskDelete(FlightController_BatteryLevel_Handle);
 8001134:	4b40      	ldr	r3, [pc, #256]	@ (8001238 <FreeRTOS_CreateTasks+0x1d8>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f00d f8e1 	bl	800e300 <vTaskDelete>
    }

    /* Task 4: FlightController_BatteryAlarm */
    ret = xTaskCreate(FlightController_BatteryAlarm, "FlightController_BatteryAlarm", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t)TASK_FLIGHTCONTROLLER_BATTERYALARM_PRIORITY), &FlightController_BatteryAlarm_Handle);
 800113e:	4b41      	ldr	r3, [pc, #260]	@ (8001244 <FreeRTOS_CreateTasks+0x1e4>)
 8001140:	9301      	str	r3, [sp, #4]
 8001142:	2302      	movs	r3, #2
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2300      	movs	r3, #0
 8001148:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800114c:	493e      	ldr	r1, [pc, #248]	@ (8001248 <FreeRTOS_CreateTasks+0x1e8>)
 800114e:	483f      	ldr	r0, [pc, #252]	@ (800124c <FreeRTOS_CreateTasks+0x1ec>)
 8001150:	f00c ffa4 	bl	800e09c <xTaskCreate>
 8001154:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d00b      	beq.n	8001174 <FreeRTOS_CreateTasks+0x114>
    __asm volatile("	mov %0, %1												\n"
 800115c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001160:	f383 8811 	msr	BASEPRI, r3
 8001164:	f3bf 8f6f 	isb	sy
 8001168:	f3bf 8f4f 	dsb	sy
 800116c:	60fb      	str	r3, [r7, #12]
}
 800116e:	bf00      	nop
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <FreeRTOS_CreateTasks+0x110>

    if (FlightController_BatteryAlarm_Handle == NULL) {
 8001174:	4b33      	ldr	r3, [pc, #204]	@ (8001244 <FreeRTOS_CreateTasks+0x1e4>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d104      	bne.n	8001186 <FreeRTOS_CreateTasks+0x126>
        vTaskDelete(FlightController_BatteryAlarm_Handle);
 800117c:	4b31      	ldr	r3, [pc, #196]	@ (8001244 <FreeRTOS_CreateTasks+0x1e4>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f00d f8bd 	bl	800e300 <vTaskDelete>
    }

    /* Task 5: FlightController_HeartbeatLight */
    ret = xTaskCreate(FlightController_HeartbeatLight, "FlightController_HeartbeatLight", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t)TASK_FLIGHTCONTROLLER_HEARTBEATLIGHT_PRIORITY), &FlightController_HeartbeatLight_Handle);
 8001186:	4b32      	ldr	r3, [pc, #200]	@ (8001250 <FreeRTOS_CreateTasks+0x1f0>)
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	2302      	movs	r3, #2
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2300      	movs	r3, #0
 8001190:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001194:	492f      	ldr	r1, [pc, #188]	@ (8001254 <FreeRTOS_CreateTasks+0x1f4>)
 8001196:	4830      	ldr	r0, [pc, #192]	@ (8001258 <FreeRTOS_CreateTasks+0x1f8>)
 8001198:	f00c ff80 	bl	800e09c <xTaskCreate>
 800119c:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d00b      	beq.n	80011bc <FreeRTOS_CreateTasks+0x15c>
    __asm volatile("	mov %0, %1												\n"
 80011a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011a8:	f383 8811 	msr	BASEPRI, r3
 80011ac:	f3bf 8f6f 	isb	sy
 80011b0:	f3bf 8f4f 	dsb	sy
 80011b4:	60bb      	str	r3, [r7, #8]
}
 80011b6:	bf00      	nop
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <FreeRTOS_CreateTasks+0x158>

    if (FlightController_HeartbeatLight_Handle == NULL) {
 80011bc:	4b24      	ldr	r3, [pc, #144]	@ (8001250 <FreeRTOS_CreateTasks+0x1f0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d104      	bne.n	80011ce <FreeRTOS_CreateTasks+0x16e>
        vTaskDelete(FlightController_HeartbeatLight_Handle);
 80011c4:	4b22      	ldr	r3, [pc, #136]	@ (8001250 <FreeRTOS_CreateTasks+0x1f0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f00d f899 	bl	800e300 <vTaskDelete>
    }

    /* Task 6: FlightController_FlightLights */
    ret = xTaskCreate(FlightController_FlightLights, "FlightController_FlightLights", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t)TASK_FLIGHTCONTROLLER_FLIGHTLIGHTS_PRIORITY), &FlightController_FlightLights_Handle);
 80011ce:	4b23      	ldr	r3, [pc, #140]	@ (800125c <FreeRTOS_CreateTasks+0x1fc>)
 80011d0:	9301      	str	r3, [sp, #4]
 80011d2:	2302      	movs	r3, #2
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2300      	movs	r3, #0
 80011d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011dc:	4920      	ldr	r1, [pc, #128]	@ (8001260 <FreeRTOS_CreateTasks+0x200>)
 80011de:	4821      	ldr	r0, [pc, #132]	@ (8001264 <FreeRTOS_CreateTasks+0x204>)
 80011e0:	f00c ff5c 	bl	800e09c <xTaskCreate>
 80011e4:	61f8      	str	r0, [r7, #28]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d00b      	beq.n	8001204 <FreeRTOS_CreateTasks+0x1a4>
    __asm volatile("	mov %0, %1												\n"
 80011ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011f0:	f383 8811 	msr	BASEPRI, r3
 80011f4:	f3bf 8f6f 	isb	sy
 80011f8:	f3bf 8f4f 	dsb	sy
 80011fc:	607b      	str	r3, [r7, #4]
}
 80011fe:	bf00      	nop
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <FreeRTOS_CreateTasks+0x1a0>

    if (FlightController_FlightLights_Handle == NULL) {
 8001204:	4b15      	ldr	r3, [pc, #84]	@ (800125c <FreeRTOS_CreateTasks+0x1fc>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d104      	bne.n	8001216 <FreeRTOS_CreateTasks+0x1b6>
        vTaskDelete(FlightController_FlightLights_Handle);
 800120c:	4b13      	ldr	r3, [pc, #76]	@ (800125c <FreeRTOS_CreateTasks+0x1fc>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f00d f875 	bl	800e300 <vTaskDelete>
    }
}
 8001216:	bf00      	nop
 8001218:	3720      	adds	r7, #32
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	2000035c 	.word	0x2000035c
 8001224:	080138c4 	.word	0x080138c4
 8001228:	080013c9 	.word	0x080013c9
 800122c:	20000360 	.word	0x20000360
 8001230:	080138e4 	.word	0x080138e4
 8001234:	08001d09 	.word	0x08001d09
 8001238:	20000368 	.word	0x20000368
 800123c:	08013904 	.word	0x08013904
 8001240:	08001d91 	.word	0x08001d91
 8001244:	2000036c 	.word	0x2000036c
 8001248:	08013924 	.word	0x08013924
 800124c:	08001e85 	.word	0x08001e85
 8001250:	20000370 	.word	0x20000370
 8001254:	08013944 	.word	0x08013944
 8001258:	08001f31 	.word	0x08001f31
 800125c:	20000374 	.word	0x20000374
 8001260:	08013964 	.word	0x08013964
 8001264:	08001f89 	.word	0x08001f89

08001268 <FreeRTOS_CreateTimers>:

void FreeRTOS_CreateTimers(void) {
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b083      	sub	sp, #12
 800126c:	af02      	add	r7, sp, #8

    /* Timer2: BatteryLevelAlarm */
    Timer2_Handle = xTimerCreate("BatteryLevelAlarm", pdMS_TO_TICKS(200), pdTRUE, (void *)0, Timer2_Callback);
 800126e:	4b2b      	ldr	r3, [pc, #172]	@ (800131c <FreeRTOS_CreateTimers+0xb4>)
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	2300      	movs	r3, #0
 8001274:	2201      	movs	r2, #1
 8001276:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800127a:	4829      	ldr	r0, [pc, #164]	@ (8001320 <FreeRTOS_CreateTimers+0xb8>)
 800127c:	f00d feb4 	bl	800efe8 <xTimerCreate>
 8001280:	4603      	mov	r3, r0
 8001282:	4a28      	ldr	r2, [pc, #160]	@ (8001324 <FreeRTOS_CreateTimers+0xbc>)
 8001284:	6013      	str	r3, [r2, #0]
    if (NULL != Timer2_Handle) {
 8001286:	4b27      	ldr	r3, [pc, #156]	@ (8001324 <FreeRTOS_CreateTimers+0xbc>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00b      	beq.n	80012a6 <FreeRTOS_CreateTimers+0x3e>
        /* Start timer */
        xTimerStart(Timer2_Handle, 0);
 800128e:	4b25      	ldr	r3, [pc, #148]	@ (8001324 <FreeRTOS_CreateTimers+0xbc>)
 8001290:	681c      	ldr	r4, [r3, #0]
 8001292:	f00d faa3 	bl	800e7dc <xTaskGetTickCount>
 8001296:	4602      	mov	r2, r0
 8001298:	2300      	movs	r3, #0
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	2300      	movs	r3, #0
 800129e:	2101      	movs	r1, #1
 80012a0:	4620      	mov	r0, r4
 80012a2:	f00d feff 	bl	800f0a4 <xTimerGenericCommand>
    }

    /* Timer3: FlightLights */
    Timer3_Handle = xTimerCreate("FlightLights", pdMS_TO_TICKS(100), pdTRUE, (void *)0, Timer3_Callback);
 80012a6:	4b20      	ldr	r3, [pc, #128]	@ (8001328 <FreeRTOS_CreateTimers+0xc0>)
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2300      	movs	r3, #0
 80012ac:	2201      	movs	r2, #1
 80012ae:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80012b2:	481e      	ldr	r0, [pc, #120]	@ (800132c <FreeRTOS_CreateTimers+0xc4>)
 80012b4:	f00d fe98 	bl	800efe8 <xTimerCreate>
 80012b8:	4603      	mov	r3, r0
 80012ba:	4a1d      	ldr	r2, [pc, #116]	@ (8001330 <FreeRTOS_CreateTimers+0xc8>)
 80012bc:	6013      	str	r3, [r2, #0]
    if (NULL != Timer3_Handle) {
 80012be:	4b1c      	ldr	r3, [pc, #112]	@ (8001330 <FreeRTOS_CreateTimers+0xc8>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d00b      	beq.n	80012de <FreeRTOS_CreateTimers+0x76>
        /* Start timer */
        xTimerStart(Timer3_Handle, 0);
 80012c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001330 <FreeRTOS_CreateTimers+0xc8>)
 80012c8:	681c      	ldr	r4, [r3, #0]
 80012ca:	f00d fa87 	bl	800e7dc <xTaskGetTickCount>
 80012ce:	4602      	mov	r2, r0
 80012d0:	2300      	movs	r3, #0
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2300      	movs	r3, #0
 80012d6:	2101      	movs	r1, #1
 80012d8:	4620      	mov	r0, r4
 80012da:	f00d fee3 	bl	800f0a4 <xTimerGenericCommand>
    }

    /* Timer4: ControlSystem */
    Timer4_Handle = xTimerCreate("ControlSystem", pdMS_TO_TICKS(1), pdTRUE, (void *)0, Timer4_Callback);
 80012de:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <FreeRTOS_CreateTimers+0xcc>)
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	2300      	movs	r3, #0
 80012e4:	2201      	movs	r2, #1
 80012e6:	210a      	movs	r1, #10
 80012e8:	4813      	ldr	r0, [pc, #76]	@ (8001338 <FreeRTOS_CreateTimers+0xd0>)
 80012ea:	f00d fe7d 	bl	800efe8 <xTimerCreate>
 80012ee:	4603      	mov	r3, r0
 80012f0:	4a12      	ldr	r2, [pc, #72]	@ (800133c <FreeRTOS_CreateTimers+0xd4>)
 80012f2:	6013      	str	r3, [r2, #0]
    if (NULL != Timer4_Handle) {
 80012f4:	4b11      	ldr	r3, [pc, #68]	@ (800133c <FreeRTOS_CreateTimers+0xd4>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d00b      	beq.n	8001314 <FreeRTOS_CreateTimers+0xac>
        /* Start timer */
        xTimerStart(Timer4_Handle, 0);
 80012fc:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <FreeRTOS_CreateTimers+0xd4>)
 80012fe:	681c      	ldr	r4, [r3, #0]
 8001300:	f00d fa6c 	bl	800e7dc <xTaskGetTickCount>
 8001304:	4602      	mov	r2, r0
 8001306:	2300      	movs	r3, #0
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	2300      	movs	r3, #0
 800130c:	2101      	movs	r1, #1
 800130e:	4620      	mov	r0, r4
 8001310:	f00d fec8 	bl	800f0a4 <xTimerGenericCommand>
    }
}
 8001314:	bf00      	nop
 8001316:	3704      	adds	r7, #4
 8001318:	46bd      	mov	sp, r7
 800131a:	bd90      	pop	{r4, r7, pc}
 800131c:	08002641 	.word	0x08002641
 8001320:	08013984 	.word	0x08013984
 8001324:	2000037c 	.word	0x2000037c
 8001328:	080026b1 	.word	0x080026b1
 800132c:	08013998 	.word	0x08013998
 8001330:	20000380 	.word	0x20000380
 8001334:	08002721 	.word	0x08002721
 8001338:	080139a8 	.word	0x080139a8
 800133c:	20000384 	.word	0x20000384

08001340 <FlightController_StartUp>:

void FlightController_StartUp(void * ptr) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001348:	23c8      	movs	r3, #200	@ 0xc8
 800134a:	60fb      	str	r3, [r7, #12]

    while (1) {

        /* Turn on-board LED off */
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 800134c:	2201      	movs	r2, #1
 800134e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001352:	4813      	ldr	r0, [pc, #76]	@ (80013a0 <FlightController_StartUp+0x60>)
 8001354:	f004 fbc2 	bl	8005adc <HAL_GPIO_WritePin>

        /* Check if flight controller is already running */
        /* Create tasks and timers, and initialize drivers (only once) */
        if (FlightController_isRunning) {
 8001358:	4b12      	ldr	r3, [pc, #72]	@ (80013a4 <FlightController_StartUp+0x64>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d01a      	beq.n	8001396 <FlightController_StartUp+0x56>
#ifdef MAIN_APP_USE_LOGGING_STARTUP
            LOG((uint8_t *)"Initializing Flight Controller...\r\n\n", LOG_INFORMATION);
#endif

            /* Create system tasks */
            FreeRTOS_CreateTasks();
 8001360:	f7ff fe7e 	bl	8001060 <FreeRTOS_CreateTasks>

            /* Create system timers */
            FreeRTOS_CreateTimers();
 8001364:	f7ff ff80 	bl	8001268 <FreeRTOS_CreateTimers>

            /* Initialize drivers */
            rc_controller = FSA8S_Init(&huart2);
 8001368:	480f      	ldr	r0, [pc, #60]	@ (80013a8 <FlightController_StartUp+0x68>)
 800136a:	f002 fa3f 	bl	80037ec <FSA8S_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	4a0e      	ldr	r2, [pc, #56]	@ (80013ac <FlightController_StartUp+0x6c>)
 8001372:	6013      	str	r3, [r2, #0]
#ifdef MAIN_APP_USE_LOGGING_STARTUP
            LOG((uint8_t *)"FSA8S Radio Controller Initialized.\r\n\n", LOG_INFORMATION);
#endif

            hgy87 = GY87_Init(&hi2c1);
 8001374:	480e      	ldr	r0, [pc, #56]	@ (80013b0 <FlightController_StartUp+0x70>)
 8001376:	f002 fe97 	bl	80040a8 <GY87_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	4a0d      	ldr	r2, [pc, #52]	@ (80013b4 <FlightController_StartUp+0x74>)
 800137e:	6013      	str	r3, [r2, #0]
#ifdef MAIN_APP_USE_LOGGING_STARTUP
            LOG((uint8_t *)"GY-87 IMU Initialized.\r\n\n", LOG_INFORMATION);
#endif

            hesc = ESC_Init(&htim3);
 8001380:	480d      	ldr	r0, [pc, #52]	@ (80013b8 <FlightController_StartUp+0x78>)
 8001382:	f002 f8b1 	bl	80034e8 <ESC_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	4a0c      	ldr	r2, [pc, #48]	@ (80013bc <FlightController_StartUp+0x7c>)
 800138a:	6013      	str	r3, [r2, #0]
#ifdef MAIN_APP_USE_LOGGING_STARTUP
            LOG((uint8_t *)"ESCs Initialized.\r\n\n", LOG_INFORMATION);
#endif

            /* Delete this task, as initialization must happen only once */
            vTaskDelete(FlightController_StartUp_Handle);
 800138c:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <FlightController_StartUp+0x80>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f00c ffb5 	bl	800e300 <vTaskDelete>
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f00d f842 	bl	800e420 <vTaskDelay>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 800139c:	e7d6      	b.n	800134c <FlightController_StartUp+0xc>
 800139e:	bf00      	nop
 80013a0:	40020800 	.word	0x40020800
 80013a4:	20000354 	.word	0x20000354
 80013a8:	20000c78 	.word	0x20000c78
 80013ac:	2000038c 	.word	0x2000038c
 80013b0:	20000bdc 	.word	0x20000bdc
 80013b4:	20000390 	.word	0x20000390
 80013b8:	20000c30 	.word	0x20000c30
 80013bc:	20000394 	.word	0x20000394
 80013c0:	20000358 	.word	0x20000358
 80013c4:	00000000 	.word	0x00000000

080013c8 <FlightController_ControlSystem>:
    }
}

void FlightController_ControlSystem(void * ptr) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(1);
 80013d0:	230a      	movs	r3, #10
 80013d2:	60fb      	str	r3, [r7, #12]

    	/* Calibrate GY-87 sensors */
    	if (1 == GY87_CALIBRATION_EN){

			/* Calibrate GY-87 gyroscope sensor */
			if (false == gyroscopeCalibrationIsDone) {
 80013d4:	4ba1      	ldr	r3, [pc, #644]	@ (800165c <FlightController_ControlSystem+0x294>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	f083 0301 	eor.w	r3, r3, #1
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d008      	beq.n	80013f4 <FlightController_ControlSystem+0x2c>
				gyroscopeCalibrationIsDone = GY87_CalibrateGyroscope(hgy87);
 80013e2:	4b9f      	ldr	r3, [pc, #636]	@ (8001660 <FlightController_ControlSystem+0x298>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f002 fea8 	bl	800413c <GY87_CalibrateGyroscope>
 80013ec:	4603      	mov	r3, r0
 80013ee:	461a      	mov	r2, r3
 80013f0:	4b9a      	ldr	r3, [pc, #616]	@ (800165c <FlightController_ControlSystem+0x294>)
 80013f2:	701a      	strb	r2, [r3, #0]
			}

			/* Calibrate GY-87 accelerometer sensor */
			if (false == accelerometerCalibrationIsDone) {
 80013f4:	4b9b      	ldr	r3, [pc, #620]	@ (8001664 <FlightController_ControlSystem+0x29c>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	f083 0301 	eor.w	r3, r3, #1
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d008      	beq.n	8001414 <FlightController_ControlSystem+0x4c>
				accelerometerCalibrationIsDone = GY87_CalibrateAccelerometer(hgy87);
 8001402:	4b97      	ldr	r3, [pc, #604]	@ (8001660 <FlightController_ControlSystem+0x298>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f002 fff4 	bl	80043f4 <GY87_CalibrateAccelerometer>
 800140c:	4603      	mov	r3, r0
 800140e:	461a      	mov	r2, r3
 8001410:	4b94      	ldr	r3, [pc, #592]	@ (8001664 <FlightController_ControlSystem+0x29c>)
 8001412:	701a      	strb	r2, [r3, #0]

    		gyroscopeCalibrationIsDone = true;
    		accelerometerCalibrationIsDone = true;
    	}

        if (true == gyroscopeCalibrationIsDone && true == accelerometerCalibrationIsDone) {
 8001414:	4b91      	ldr	r3, [pc, #580]	@ (800165c <FlightController_ControlSystem+0x294>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d007      	beq.n	800142c <FlightController_ControlSystem+0x64>
 800141c:	4b91      	ldr	r3, [pc, #580]	@ (8001664 <FlightController_ControlSystem+0x29c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <FlightController_ControlSystem+0x64>
#ifdef MAIN_APP_USE_LOGGING_STARTUP
            vTaskDelay(pdMS_TO_TICKS(5));
            LOG((uint8_t *)"Flight Controller Initialized.\r\n\n", LOG_INFORMATION);
#endif
            FlightController_isInitialized = true;
 8001424:	4b90      	ldr	r3, [pc, #576]	@ (8001668 <FlightController_ControlSystem+0x2a0>)
 8001426:	2201      	movs	r2, #1
 8001428:	701a      	strb	r2, [r3, #0]
 800142a:	e002      	b.n	8001432 <FlightController_ControlSystem+0x6a>
        } else {

        	FlightController_isInitialized = false;
 800142c:	4b8e      	ldr	r3, [pc, #568]	@ (8001668 <FlightController_ControlSystem+0x2a0>)
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]
        }

        /* Read flight lights controls */
        FSA8S_channelValues[7] = FSA8S_ReadChannel(rc_controller, CHANNEL_8);
 8001432:	4b8e      	ldr	r3, [pc, #568]	@ (800166c <FlightController_ControlSystem+0x2a4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2108      	movs	r1, #8
 8001438:	4618      	mov	r0, r3
 800143a:	f002 fa31 	bl	80038a0 <FSA8S_ReadChannel>
 800143e:	4603      	mov	r3, r0
 8001440:	461a      	mov	r2, r3
 8001442:	4b8b      	ldr	r3, [pc, #556]	@ (8001670 <FlightController_ControlSystem+0x2a8>)
 8001444:	81da      	strh	r2, [r3, #14]
        FSA8S_channelValues[8] = FSA8S_ReadChannel(rc_controller, CHANNEL_9);
 8001446:	4b89      	ldr	r3, [pc, #548]	@ (800166c <FlightController_ControlSystem+0x2a4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2109      	movs	r1, #9
 800144c:	4618      	mov	r0, r3
 800144e:	f002 fa27 	bl	80038a0 <FSA8S_ReadChannel>
 8001452:	4603      	mov	r3, r0
 8001454:	461a      	mov	r2, r3
 8001456:	4b86      	ldr	r3, [pc, #536]	@ (8001670 <FlightController_ControlSystem+0x2a8>)
 8001458:	821a      	strh	r2, [r3, #16]
        FSA8S_channelValues[9] = FSA8S_ReadChannel(rc_controller, CHANNEL_10);
 800145a:	4b84      	ldr	r3, [pc, #528]	@ (800166c <FlightController_ControlSystem+0x2a4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	210a      	movs	r1, #10
 8001460:	4618      	mov	r0, r3
 8001462:	f002 fa1d 	bl	80038a0 <FSA8S_ReadChannel>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	4b81      	ldr	r3, [pc, #516]	@ (8001670 <FlightController_ControlSystem+0x2a8>)
 800146c:	825a      	strh	r2, [r3, #18]
                }
            }

#endif

        } else if (FlightController_isInitialized && 3 == CONTROL_SYSTEM_MODE) {
 800146e:	4b7e      	ldr	r3, [pc, #504]	@ (8001668 <FlightController_ControlSystem+0x2a0>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 8425 	beq.w	8001cc2 <FlightController_ControlSystem+0x8fa>

#if 3 == CONTROL_SYSTEM_MODE

            /* Avoid uncontrolled motor start */
            while (false == throttleStick_startedDown) {
 8001478:	e01e      	b.n	80014b8 <FlightController_ControlSystem+0xf0>

                /* Read throttle input from radio controller */
                inputValue_throttle = FSA8S_ReadChannel(rc_controller, CHANNEL_3);
 800147a:	4b7c      	ldr	r3, [pc, #496]	@ (800166c <FlightController_ControlSystem+0x2a4>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2103      	movs	r1, #3
 8001480:	4618      	mov	r0, r3
 8001482:	f002 fa0d 	bl	80038a0 <FSA8S_ReadChannel>
 8001486:	4603      	mov	r3, r0
 8001488:	ee07 3a90 	vmov	s15, r3
 800148c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001490:	4b78      	ldr	r3, [pc, #480]	@ (8001674 <FlightController_ControlSystem+0x2ac>)
 8001492:	edc3 7a00 	vstr	s15, [r3]

                if (15 > inputValue_throttle) {
 8001496:	4b77      	ldr	r3, [pc, #476]	@ (8001674 <FlightController_ControlSystem+0x2ac>)
 8001498:	edd3 7a00 	vldr	s15, [r3]
 800149c:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80014a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a8:	d503      	bpl.n	80014b2 <FlightController_ControlSystem+0xea>

                    throttleStick_startedDown = true;
 80014aa:	4b73      	ldr	r3, [pc, #460]	@ (8001678 <FlightController_ControlSystem+0x2b0>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]
 80014b0:	e002      	b.n	80014b8 <FlightController_ControlSystem+0xf0>

                } else {

                    throttleStick_startedDown = false;
 80014b2:	4b71      	ldr	r3, [pc, #452]	@ (8001678 <FlightController_ControlSystem+0x2b0>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
            while (false == throttleStick_startedDown) {
 80014b8:	4b6f      	ldr	r3, [pc, #444]	@ (8001678 <FlightController_ControlSystem+0x2b0>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	f083 0301 	eor.w	r3, r3, #1
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1d9      	bne.n	800147a <FlightController_ControlSystem+0xb2>
                }
            }

            /* Check if ESCs are enabled (Switch B on radio controller) */
            if (500 <= FSA8S_ReadChannel(rc_controller, CHANNEL_6)) {
 80014c6:	4b69      	ldr	r3, [pc, #420]	@ (800166c <FlightController_ControlSystem+0x2a4>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2106      	movs	r1, #6
 80014cc:	4618      	mov	r0, r3
 80014ce:	f002 f9e7 	bl	80038a0 <FSA8S_ReadChannel>
 80014d2:	4603      	mov	r3, r0
 80014d4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014d8:	d303      	bcc.n	80014e2 <FlightController_ControlSystem+0x11a>
                ESC_isEnabled = true;
 80014da:	4b68      	ldr	r3, [pc, #416]	@ (800167c <FlightController_ControlSystem+0x2b4>)
 80014dc:	2201      	movs	r2, #1
 80014de:	701a      	strb	r2, [r3, #0]
 80014e0:	e002      	b.n	80014e8 <FlightController_ControlSystem+0x120>
            } else {
                ESC_isEnabled = false;
 80014e2:	4b66      	ldr	r3, [pc, #408]	@ (800167c <FlightController_ControlSystem+0x2b4>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
            }

            /* Turn off motors in case ESCs are disabled */
            if (false == ESC_isEnabled) {
 80014e8:	4b64      	ldr	r3, [pc, #400]	@ (800167c <FlightController_ControlSystem+0x2b4>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	f083 0301 	eor.w	r3, r3, #1
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d04a      	beq.n	800158c <FlightController_ControlSystem+0x1c4>

                /* Save motors speed */
                ESC_speeds[1] = 0;
 80014f6:	4b62      	ldr	r3, [pc, #392]	@ (8001680 <FlightController_ControlSystem+0x2b8>)
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	605a      	str	r2, [r3, #4]
                ESC_speeds[2] = 0;
 80014fe:	4b60      	ldr	r3, [pc, #384]	@ (8001680 <FlightController_ControlSystem+0x2b8>)
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
                ESC_speeds[3] = 0;
 8001506:	4b5e      	ldr	r3, [pc, #376]	@ (8001680 <FlightController_ControlSystem+0x2b8>)
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
                ESC_speeds[4] = 0;
 800150e:	4b5c      	ldr	r3, [pc, #368]	@ (8001680 <FlightController_ControlSystem+0x2b8>)
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	611a      	str	r2, [r3, #16]

                /* Turn off motors */
                ESC_SetSpeed(hesc, hesc->esc1, ESC_speeds[4]);
 8001516:	4b5b      	ldr	r3, [pc, #364]	@ (8001684 <FlightController_ControlSystem+0x2bc>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	4b5a      	ldr	r3, [pc, #360]	@ (8001684 <FlightController_ControlSystem+0x2bc>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	791b      	ldrb	r3, [r3, #4]
 8001520:	4957      	ldr	r1, [pc, #348]	@ (8001680 <FlightController_ControlSystem+0x2b8>)
 8001522:	edd1 7a04 	vldr	s15, [r1, #16]
 8001526:	eeb0 0a67 	vmov.f32	s0, s15
 800152a:	4619      	mov	r1, r3
 800152c:	4610      	mov	r0, r2
 800152e:	f002 f81f 	bl	8003570 <ESC_SetSpeed>
                ESC_SetSpeed(hesc, hesc->esc2, ESC_speeds[2]);
 8001532:	4b54      	ldr	r3, [pc, #336]	@ (8001684 <FlightController_ControlSystem+0x2bc>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	4b53      	ldr	r3, [pc, #332]	@ (8001684 <FlightController_ControlSystem+0x2bc>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	795b      	ldrb	r3, [r3, #5]
 800153c:	4950      	ldr	r1, [pc, #320]	@ (8001680 <FlightController_ControlSystem+0x2b8>)
 800153e:	edd1 7a02 	vldr	s15, [r1, #8]
 8001542:	eeb0 0a67 	vmov.f32	s0, s15
 8001546:	4619      	mov	r1, r3
 8001548:	4610      	mov	r0, r2
 800154a:	f002 f811 	bl	8003570 <ESC_SetSpeed>
                ESC_SetSpeed(hesc, hesc->esc3, ESC_speeds[3]);
 800154e:	4b4d      	ldr	r3, [pc, #308]	@ (8001684 <FlightController_ControlSystem+0x2bc>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	4b4c      	ldr	r3, [pc, #304]	@ (8001684 <FlightController_ControlSystem+0x2bc>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	799b      	ldrb	r3, [r3, #6]
 8001558:	4949      	ldr	r1, [pc, #292]	@ (8001680 <FlightController_ControlSystem+0x2b8>)
 800155a:	edd1 7a03 	vldr	s15, [r1, #12]
 800155e:	eeb0 0a67 	vmov.f32	s0, s15
 8001562:	4619      	mov	r1, r3
 8001564:	4610      	mov	r0, r2
 8001566:	f002 f803 	bl	8003570 <ESC_SetSpeed>
                ESC_SetSpeed(hesc, hesc->esc4, ESC_speeds[1]);
 800156a:	4b46      	ldr	r3, [pc, #280]	@ (8001684 <FlightController_ControlSystem+0x2bc>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	4b45      	ldr	r3, [pc, #276]	@ (8001684 <FlightController_ControlSystem+0x2bc>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	79db      	ldrb	r3, [r3, #7]
 8001574:	4942      	ldr	r1, [pc, #264]	@ (8001680 <FlightController_ControlSystem+0x2b8>)
 8001576:	edd1 7a01 	vldr	s15, [r1, #4]
 800157a:	eeb0 0a67 	vmov.f32	s0, s15
 800157e:	4619      	mov	r1, r3
 8001580:	4610      	mov	r0, r2
 8001582:	f001 fff5 	bl	8003570 <ESC_SetSpeed>

                /* Reset PID variables */
                CSM3_ResetPID();
 8001586:	f000 ffab 	bl	80024e0 <CSM3_ResetPID>
 800158a:	e39a      	b.n	8001cc2 <FlightController_ControlSystem+0x8fa>

            } else {

                /* Check if timer has expired */
                if (Timer4_flag) {
 800158c:	4b3e      	ldr	r3, [pc, #248]	@ (8001688 <FlightController_ControlSystem+0x2c0>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 8396 	beq.w	8001cc2 <FlightController_ControlSystem+0x8fa>

                    /* Read input throttle from radio controller */
                    inputValue_throttle = FSA8S_ReadChannel(rc_controller, CHANNEL_3);
 8001596:	4b35      	ldr	r3, [pc, #212]	@ (800166c <FlightController_ControlSystem+0x2a4>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2103      	movs	r1, #3
 800159c:	4618      	mov	r0, r3
 800159e:	f002 f97f 	bl	80038a0 <FSA8S_ReadChannel>
 80015a2:	4603      	mov	r3, r0
 80015a4:	ee07 3a90 	vmov	s15, r3
 80015a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015ac:	4b31      	ldr	r3, [pc, #196]	@ (8001674 <FlightController_ControlSystem+0x2ac>)
 80015ae:	edc3 7a00 	vstr	s15, [r3]

                    /* Check if throttle stick is low */
                    if (CONTROL_SYSTEM_MINIMUM_INPUT_THROTTLE > inputValue_throttle) {
 80015b2:	4b30      	ldr	r3, [pc, #192]	@ (8001674 <FlightController_ControlSystem+0x2ac>)
 80015b4:	edd3 7a00 	vldr	s15, [r3]
 80015b8:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80015bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c4:	d562      	bpl.n	800168c <FlightController_ControlSystem+0x2c4>

                        /* Save motors speed */
                        ESC_speeds[1] = 0;
 80015c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001680 <FlightController_ControlSystem+0x2b8>)
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	605a      	str	r2, [r3, #4]
                        ESC_speeds[2] = 0;
 80015ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001680 <FlightController_ControlSystem+0x2b8>)
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
                        ESC_speeds[3] = 0;
 80015d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001680 <FlightController_ControlSystem+0x2b8>)
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	60da      	str	r2, [r3, #12]
                        ESC_speeds[4] = 0;
 80015de:	4b28      	ldr	r3, [pc, #160]	@ (8001680 <FlightController_ControlSystem+0x2b8>)
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	611a      	str	r2, [r3, #16]

                        /* Turn off motors */
                        ESC_SetSpeed(hesc, hesc->esc1, ESC_speeds[4]);
 80015e6:	4b27      	ldr	r3, [pc, #156]	@ (8001684 <FlightController_ControlSystem+0x2bc>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	4b26      	ldr	r3, [pc, #152]	@ (8001684 <FlightController_ControlSystem+0x2bc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	791b      	ldrb	r3, [r3, #4]
 80015f0:	4923      	ldr	r1, [pc, #140]	@ (8001680 <FlightController_ControlSystem+0x2b8>)
 80015f2:	edd1 7a04 	vldr	s15, [r1, #16]
 80015f6:	eeb0 0a67 	vmov.f32	s0, s15
 80015fa:	4619      	mov	r1, r3
 80015fc:	4610      	mov	r0, r2
 80015fe:	f001 ffb7 	bl	8003570 <ESC_SetSpeed>
                        ESC_SetSpeed(hesc, hesc->esc2, ESC_speeds[2]);
 8001602:	4b20      	ldr	r3, [pc, #128]	@ (8001684 <FlightController_ControlSystem+0x2bc>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	4b1f      	ldr	r3, [pc, #124]	@ (8001684 <FlightController_ControlSystem+0x2bc>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	795b      	ldrb	r3, [r3, #5]
 800160c:	491c      	ldr	r1, [pc, #112]	@ (8001680 <FlightController_ControlSystem+0x2b8>)
 800160e:	edd1 7a02 	vldr	s15, [r1, #8]
 8001612:	eeb0 0a67 	vmov.f32	s0, s15
 8001616:	4619      	mov	r1, r3
 8001618:	4610      	mov	r0, r2
 800161a:	f001 ffa9 	bl	8003570 <ESC_SetSpeed>
                        ESC_SetSpeed(hesc, hesc->esc3, ESC_speeds[3]);
 800161e:	4b19      	ldr	r3, [pc, #100]	@ (8001684 <FlightController_ControlSystem+0x2bc>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	4b18      	ldr	r3, [pc, #96]	@ (8001684 <FlightController_ControlSystem+0x2bc>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	799b      	ldrb	r3, [r3, #6]
 8001628:	4915      	ldr	r1, [pc, #84]	@ (8001680 <FlightController_ControlSystem+0x2b8>)
 800162a:	edd1 7a03 	vldr	s15, [r1, #12]
 800162e:	eeb0 0a67 	vmov.f32	s0, s15
 8001632:	4619      	mov	r1, r3
 8001634:	4610      	mov	r0, r2
 8001636:	f001 ff9b 	bl	8003570 <ESC_SetSpeed>
                        ESC_SetSpeed(hesc, hesc->esc4, ESC_speeds[1]);
 800163a:	4b12      	ldr	r3, [pc, #72]	@ (8001684 <FlightController_ControlSystem+0x2bc>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <FlightController_ControlSystem+0x2bc>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	79db      	ldrb	r3, [r3, #7]
 8001644:	490e      	ldr	r1, [pc, #56]	@ (8001680 <FlightController_ControlSystem+0x2b8>)
 8001646:	edd1 7a01 	vldr	s15, [r1, #4]
 800164a:	eeb0 0a67 	vmov.f32	s0, s15
 800164e:	4619      	mov	r1, r3
 8001650:	4610      	mov	r0, r2
 8001652:	f001 ff8d 	bl	8003570 <ESC_SetSpeed>

                        /* Reset PID variables */
                        CSM3_ResetPID();
 8001656:	f000 ff43 	bl	80024e0 <CSM3_ResetPID>
 800165a:	e32f      	b.n	8001cbc <FlightController_ControlSystem+0x8f4>
 800165c:	200003dc 	.word	0x200003dc
 8001660:	20000390 	.word	0x20000390
 8001664:	200003dd 	.word	0x200003dd
 8001668:	20000355 	.word	0x20000355
 800166c:	2000038c 	.word	0x2000038c
 8001670:	20000398 	.word	0x20000398
 8001674:	200003ec 	.word	0x200003ec
 8001678:	200003e8 	.word	0x200003e8
 800167c:	20000484 	.word	0x20000484
 8001680:	20000488 	.word	0x20000488
 8001684:	20000394 	.word	0x20000394
 8001688:	2000038b 	.word	0x2000038b

                    } else {

                        /* Read GY-87 gyroscope sensor */
                        GY87_ReadGyroscope(hgy87, &GY87_gyroscopeValues);
 800168c:	4bc6      	ldr	r3, [pc, #792]	@ (80019a8 <FlightController_ControlSystem+0x5e0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	49c6      	ldr	r1, [pc, #792]	@ (80019ac <FlightController_ControlSystem+0x5e4>)
 8001692:	4618      	mov	r0, r3
 8001694:	f002 fdf8 	bl	8004288 <GY87_ReadGyroscope>
                        /* Read GY-87 accelerometer sensor */
                        GY87_ReadAccelerometer(hgy87, &GY87_accelerometerValues);
 8001698:	4bc3      	ldr	r3, [pc, #780]	@ (80019a8 <FlightController_ControlSystem+0x5e0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	49c4      	ldr	r1, [pc, #784]	@ (80019b0 <FlightController_ControlSystem+0x5e8>)
 800169e:	4618      	mov	r0, r3
 80016a0:	f002 ff52 	bl	8004548 <GY87_ReadAccelerometer>

                        /* Calculate Kalman roll angle */
                        Kalman_CalculateAngle(&Kalman_predictionValue_rollAngle, &Kalman_uncertaintyValue_rollAngle, GY87_gyroscopeValues.rotationRateRoll, GY87_accelerometerValues.angleRoll);
 80016a4:	4bc1      	ldr	r3, [pc, #772]	@ (80019ac <FlightController_ControlSystem+0x5e4>)
 80016a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80016aa:	4bc1      	ldr	r3, [pc, #772]	@ (80019b0 <FlightController_ControlSystem+0x5e8>)
 80016ac:	ed93 7a05 	vldr	s14, [r3, #20]
 80016b0:	eef0 0a47 	vmov.f32	s1, s14
 80016b4:	eeb0 0a67 	vmov.f32	s0, s15
 80016b8:	49be      	ldr	r1, [pc, #760]	@ (80019b4 <FlightController_ControlSystem+0x5ec>)
 80016ba:	48bf      	ldr	r0, [pc, #764]	@ (80019b8 <FlightController_ControlSystem+0x5f0>)
 80016bc:	f000 fde4 	bl	8002288 <Kalman_CalculateAngle>
                        /* Calculate Kalman pitch angle */
                        Kalman_CalculateAngle(&Kalman_predictionValue_pitchAngle, &Kalman_uncertaintyValue_pitchAngle, GY87_gyroscopeValues.rotationRatePitch, GY87_accelerometerValues.anglePitch);
 80016c0:	4bba      	ldr	r3, [pc, #744]	@ (80019ac <FlightController_ControlSystem+0x5e4>)
 80016c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80016c6:	4bba      	ldr	r3, [pc, #744]	@ (80019b0 <FlightController_ControlSystem+0x5e8>)
 80016c8:	ed93 7a06 	vldr	s14, [r3, #24]
 80016cc:	eef0 0a47 	vmov.f32	s1, s14
 80016d0:	eeb0 0a67 	vmov.f32	s0, s15
 80016d4:	49b9      	ldr	r1, [pc, #740]	@ (80019bc <FlightController_ControlSystem+0x5f4>)
 80016d6:	48ba      	ldr	r0, [pc, #744]	@ (80019c0 <FlightController_ControlSystem+0x5f8>)
 80016d8:	f000 fdd6 	bl	8002288 <Kalman_CalculateAngle>

                        /* Read inputs from radio controller */
                        inputValue_throttle = FSA8S_ReadChannel(rc_controller, CHANNEL_3) + 1000;
 80016dc:	4bb9      	ldr	r3, [pc, #740]	@ (80019c4 <FlightController_ControlSystem+0x5fc>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2103      	movs	r1, #3
 80016e2:	4618      	mov	r0, r3
 80016e4:	f002 f8dc 	bl	80038a0 <FSA8S_ReadChannel>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80016ee:	ee07 3a90 	vmov	s15, r3
 80016f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016f6:	4bb4      	ldr	r3, [pc, #720]	@ (80019c8 <FlightController_ControlSystem+0x600>)
 80016f8:	edc3 7a00 	vstr	s15, [r3]
                        inputValue_rollAngle = FSA8S_ReadChannel(rc_controller, CHANNEL_1) + 1000;
 80016fc:	4bb1      	ldr	r3, [pc, #708]	@ (80019c4 <FlightController_ControlSystem+0x5fc>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2101      	movs	r1, #1
 8001702:	4618      	mov	r0, r3
 8001704:	f002 f8cc 	bl	80038a0 <FSA8S_ReadChannel>
 8001708:	4603      	mov	r3, r0
 800170a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800170e:	ee07 3a90 	vmov	s15, r3
 8001712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001716:	4bad      	ldr	r3, [pc, #692]	@ (80019cc <FlightController_ControlSystem+0x604>)
 8001718:	edc3 7a00 	vstr	s15, [r3]
                        inputValue_pitchAngle = FSA8S_ReadChannel(rc_controller, CHANNEL_2) + 1000;
 800171c:	4ba9      	ldr	r3, [pc, #676]	@ (80019c4 <FlightController_ControlSystem+0x5fc>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2102      	movs	r1, #2
 8001722:	4618      	mov	r0, r3
 8001724:	f002 f8bc 	bl	80038a0 <FSA8S_ReadChannel>
 8001728:	4603      	mov	r3, r0
 800172a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800172e:	ee07 3a90 	vmov	s15, r3
 8001732:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001736:	4ba6      	ldr	r3, [pc, #664]	@ (80019d0 <FlightController_ControlSystem+0x608>)
 8001738:	edc3 7a00 	vstr	s15, [r3]
                        inputValue_yawRate = FSA8S_ReadChannel(rc_controller, CHANNEL_4) + 1000;
 800173c:	4ba1      	ldr	r3, [pc, #644]	@ (80019c4 <FlightController_ControlSystem+0x5fc>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2104      	movs	r1, #4
 8001742:	4618      	mov	r0, r3
 8001744:	f002 f8ac 	bl	80038a0 <FSA8S_ReadChannel>
 8001748:	4603      	mov	r3, r0
 800174a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800174e:	ee07 3a90 	vmov	s15, r3
 8001752:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001756:	4b9f      	ldr	r3, [pc, #636]	@ (80019d4 <FlightController_ControlSystem+0x60c>)
 8001758:	edc3 7a00 	vstr	s15, [r3]

                        /* Adjust and limit throttle input */
                        if (CONTROL_SYSTEM_MAXIMUM_INPUT_THROTTLE < inputValue_throttle) {
 800175c:	4b9a      	ldr	r3, [pc, #616]	@ (80019c8 <FlightController_ControlSystem+0x600>)
 800175e:	edd3 7a00 	vldr	s15, [r3]
 8001762:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 80019d8 <FlightController_ControlSystem+0x610>
 8001766:	eef4 7ac7 	vcmpe.f32	s15, s14
 800176a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176e:	dd02      	ble.n	8001776 <FlightController_ControlSystem+0x3ae>
                            inputValue_throttle = CONTROL_SYSTEM_MAXIMUM_INPUT_THROTTLE;
 8001770:	4b95      	ldr	r3, [pc, #596]	@ (80019c8 <FlightController_ControlSystem+0x600>)
 8001772:	4a9a      	ldr	r2, [pc, #616]	@ (80019dc <FlightController_ControlSystem+0x614>)
 8001774:	601a      	str	r2, [r3, #0]
                        }

                        /* Calculate desired angles by mapping radio controller values to angles */
                        desiredValue_rollAngle = 0.10 * (inputValue_rollAngle - 1500);
 8001776:	4b95      	ldr	r3, [pc, #596]	@ (80019cc <FlightController_ControlSystem+0x604>)
 8001778:	edd3 7a00 	vldr	s15, [r3]
 800177c:	ed9f 7a98 	vldr	s14, [pc, #608]	@ 80019e0 <FlightController_ControlSystem+0x618>
 8001780:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001784:	ee17 0a90 	vmov	r0, s15
 8001788:	f7fe fee6 	bl	8000558 <__aeabi_f2d>
 800178c:	a382      	add	r3, pc, #520	@ (adr r3, 8001998 <FlightController_ControlSystem+0x5d0>)
 800178e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001792:	f7fe ff39 	bl	8000608 <__aeabi_dmul>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4610      	mov	r0, r2
 800179c:	4619      	mov	r1, r3
 800179e:	f7ff fa2b 	bl	8000bf8 <__aeabi_d2f>
 80017a2:	4603      	mov	r3, r0
 80017a4:	4a8f      	ldr	r2, [pc, #572]	@ (80019e4 <FlightController_ControlSystem+0x61c>)
 80017a6:	6013      	str	r3, [r2, #0]
                        desiredValue_pitchAngle = 0.10 * (inputValue_pitchAngle - 1500);
 80017a8:	4b89      	ldr	r3, [pc, #548]	@ (80019d0 <FlightController_ControlSystem+0x608>)
 80017aa:	edd3 7a00 	vldr	s15, [r3]
 80017ae:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 80019e0 <FlightController_ControlSystem+0x618>
 80017b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017b6:	ee17 0a90 	vmov	r0, s15
 80017ba:	f7fe fecd 	bl	8000558 <__aeabi_f2d>
 80017be:	a376      	add	r3, pc, #472	@ (adr r3, 8001998 <FlightController_ControlSystem+0x5d0>)
 80017c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c4:	f7fe ff20 	bl	8000608 <__aeabi_dmul>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4610      	mov	r0, r2
 80017ce:	4619      	mov	r1, r3
 80017d0:	f7ff fa12 	bl	8000bf8 <__aeabi_d2f>
 80017d4:	4603      	mov	r3, r0
 80017d6:	4a84      	ldr	r2, [pc, #528]	@ (80019e8 <FlightController_ControlSystem+0x620>)
 80017d8:	6013      	str	r3, [r2, #0]

                        /* Calculate angles errors */
                        errorValue_rollAngle = desiredValue_rollAngle - Kalman_predictionValue_rollAngle;
 80017da:	4b82      	ldr	r3, [pc, #520]	@ (80019e4 <FlightController_ControlSystem+0x61c>)
 80017dc:	ed93 7a00 	vldr	s14, [r3]
 80017e0:	4b75      	ldr	r3, [pc, #468]	@ (80019b8 <FlightController_ControlSystem+0x5f0>)
 80017e2:	edd3 7a00 	vldr	s15, [r3]
 80017e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ea:	4b80      	ldr	r3, [pc, #512]	@ (80019ec <FlightController_ControlSystem+0x624>)
 80017ec:	edc3 7a00 	vstr	s15, [r3]
                        errorValue_pitchAngle = desiredValue_pitchAngle - Kalman_predictionValue_pitchAngle;
 80017f0:	4b7d      	ldr	r3, [pc, #500]	@ (80019e8 <FlightController_ControlSystem+0x620>)
 80017f2:	ed93 7a00 	vldr	s14, [r3]
 80017f6:	4b72      	ldr	r3, [pc, #456]	@ (80019c0 <FlightController_ControlSystem+0x5f8>)
 80017f8:	edd3 7a00 	vldr	s15, [r3]
 80017fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001800:	4b7b      	ldr	r3, [pc, #492]	@ (80019f0 <FlightController_ControlSystem+0x628>)
 8001802:	edc3 7a00 	vstr	s15, [r3]

                        /* Calculate PID for roll angle */
                        CSM2_CalculatePID(&pidOutputValue_rollAngle, &previousIterm_rollAngle, &previousErrorValue_rollAngle, errorValue_rollAngle, kP_rollAngle, kI_rollAngle, kD_rollAngle);
 8001806:	4b79      	ldr	r3, [pc, #484]	@ (80019ec <FlightController_ControlSystem+0x624>)
 8001808:	edd3 7a00 	vldr	s15, [r3]
 800180c:	4b79      	ldr	r3, [pc, #484]	@ (80019f4 <FlightController_ControlSystem+0x62c>)
 800180e:	ed93 7a00 	vldr	s14, [r3]
 8001812:	4b79      	ldr	r3, [pc, #484]	@ (80019f8 <FlightController_ControlSystem+0x630>)
 8001814:	edd3 6a00 	vldr	s13, [r3]
 8001818:	4b78      	ldr	r3, [pc, #480]	@ (80019fc <FlightController_ControlSystem+0x634>)
 800181a:	ed93 6a00 	vldr	s12, [r3]
 800181e:	eef0 1a46 	vmov.f32	s3, s12
 8001822:	eeb0 1a66 	vmov.f32	s2, s13
 8001826:	eef0 0a47 	vmov.f32	s1, s14
 800182a:	eeb0 0a67 	vmov.f32	s0, s15
 800182e:	4a74      	ldr	r2, [pc, #464]	@ (8001a00 <FlightController_ControlSystem+0x638>)
 8001830:	4974      	ldr	r1, [pc, #464]	@ (8001a04 <FlightController_ControlSystem+0x63c>)
 8001832:	4875      	ldr	r0, [pc, #468]	@ (8001a08 <FlightController_ControlSystem+0x640>)
 8001834:	f000 fda0 	bl	8002378 <CSM2_CalculatePID>
                        /* Calculate PID for pitch angle */
                        CSM2_CalculatePID(&pidOutputValue_pitchAngle, &previousIterm_pitchAngle, &previousErrorValue_pitchAngle, errorValue_pitchAngle, kP_pitchAngle, kI_pitchAngle, kD_pitchAngle);
 8001838:	4b6d      	ldr	r3, [pc, #436]	@ (80019f0 <FlightController_ControlSystem+0x628>)
 800183a:	edd3 7a00 	vldr	s15, [r3]
 800183e:	4b73      	ldr	r3, [pc, #460]	@ (8001a0c <FlightController_ControlSystem+0x644>)
 8001840:	ed93 7a00 	vldr	s14, [r3]
 8001844:	4b72      	ldr	r3, [pc, #456]	@ (8001a10 <FlightController_ControlSystem+0x648>)
 8001846:	edd3 6a00 	vldr	s13, [r3]
 800184a:	4b72      	ldr	r3, [pc, #456]	@ (8001a14 <FlightController_ControlSystem+0x64c>)
 800184c:	ed93 6a00 	vldr	s12, [r3]
 8001850:	eef0 1a46 	vmov.f32	s3, s12
 8001854:	eeb0 1a66 	vmov.f32	s2, s13
 8001858:	eef0 0a47 	vmov.f32	s1, s14
 800185c:	eeb0 0a67 	vmov.f32	s0, s15
 8001860:	4a6d      	ldr	r2, [pc, #436]	@ (8001a18 <FlightController_ControlSystem+0x650>)
 8001862:	496e      	ldr	r1, [pc, #440]	@ (8001a1c <FlightController_ControlSystem+0x654>)
 8001864:	486e      	ldr	r0, [pc, #440]	@ (8001a20 <FlightController_ControlSystem+0x658>)
 8001866:	f000 fd87 	bl	8002378 <CSM2_CalculatePID>

                        /* Calculate desired rates */
                        desiredValue_rollRate = pidOutputValue_rollAngle;
 800186a:	4b67      	ldr	r3, [pc, #412]	@ (8001a08 <FlightController_ControlSystem+0x640>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a6d      	ldr	r2, [pc, #436]	@ (8001a24 <FlightController_ControlSystem+0x65c>)
 8001870:	6013      	str	r3, [r2, #0]
                        desiredValue_pitchRate = pidOutputValue_pitchAngle;
 8001872:	4b6b      	ldr	r3, [pc, #428]	@ (8001a20 <FlightController_ControlSystem+0x658>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a6c      	ldr	r2, [pc, #432]	@ (8001a28 <FlightController_ControlSystem+0x660>)
 8001878:	6013      	str	r3, [r2, #0]
                        desiredValue_yawRate = 0.15 * (inputValue_yawRate - 1500);
 800187a:	4b56      	ldr	r3, [pc, #344]	@ (80019d4 <FlightController_ControlSystem+0x60c>)
 800187c:	edd3 7a00 	vldr	s15, [r3]
 8001880:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 80019e0 <FlightController_ControlSystem+0x618>
 8001884:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001888:	ee17 0a90 	vmov	r0, s15
 800188c:	f7fe fe64 	bl	8000558 <__aeabi_f2d>
 8001890:	a343      	add	r3, pc, #268	@ (adr r3, 80019a0 <FlightController_ControlSystem+0x5d8>)
 8001892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001896:	f7fe feb7 	bl	8000608 <__aeabi_dmul>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4610      	mov	r0, r2
 80018a0:	4619      	mov	r1, r3
 80018a2:	f7ff f9a9 	bl	8000bf8 <__aeabi_d2f>
 80018a6:	4603      	mov	r3, r0
 80018a8:	4a60      	ldr	r2, [pc, #384]	@ (8001a2c <FlightController_ControlSystem+0x664>)
 80018aa:	6013      	str	r3, [r2, #0]

                        /* Calculate rates errors */
                        errorValue_rollRate = desiredValue_rollRate - GY87_gyroscopeValues.rotationRateRoll;
 80018ac:	4b5d      	ldr	r3, [pc, #372]	@ (8001a24 <FlightController_ControlSystem+0x65c>)
 80018ae:	ed93 7a00 	vldr	s14, [r3]
 80018b2:	4b3e      	ldr	r3, [pc, #248]	@ (80019ac <FlightController_ControlSystem+0x5e4>)
 80018b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80018b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018bc:	4b5c      	ldr	r3, [pc, #368]	@ (8001a30 <FlightController_ControlSystem+0x668>)
 80018be:	edc3 7a00 	vstr	s15, [r3]
                        errorValue_pitchRate = desiredValue_pitchRate - GY87_gyroscopeValues.rotationRatePitch;
 80018c2:	4b59      	ldr	r3, [pc, #356]	@ (8001a28 <FlightController_ControlSystem+0x660>)
 80018c4:	ed93 7a00 	vldr	s14, [r3]
 80018c8:	4b38      	ldr	r3, [pc, #224]	@ (80019ac <FlightController_ControlSystem+0x5e4>)
 80018ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80018ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d2:	4b58      	ldr	r3, [pc, #352]	@ (8001a34 <FlightController_ControlSystem+0x66c>)
 80018d4:	edc3 7a00 	vstr	s15, [r3]
                        errorValue_yawRate = desiredValue_yawRate - GY87_gyroscopeValues.rotationRateYaw;
 80018d8:	4b54      	ldr	r3, [pc, #336]	@ (8001a2c <FlightController_ControlSystem+0x664>)
 80018da:	ed93 7a00 	vldr	s14, [r3]
 80018de:	4b33      	ldr	r3, [pc, #204]	@ (80019ac <FlightController_ControlSystem+0x5e4>)
 80018e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80018e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018e8:	4b53      	ldr	r3, [pc, #332]	@ (8001a38 <FlightController_ControlSystem+0x670>)
 80018ea:	edc3 7a00 	vstr	s15, [r3]

                        /* Calculate PID for roll rate */
                        CSM2_CalculatePID(&pidOutputValue_rollRate, &previousIterm_rollRate, &previousErrorValue_rollRate, errorValue_rollRate, kP_rollRate, kI_rollRate, kD_rollRate);
 80018ee:	4b50      	ldr	r3, [pc, #320]	@ (8001a30 <FlightController_ControlSystem+0x668>)
 80018f0:	edd3 7a00 	vldr	s15, [r3]
 80018f4:	4b51      	ldr	r3, [pc, #324]	@ (8001a3c <FlightController_ControlSystem+0x674>)
 80018f6:	ed93 7a00 	vldr	s14, [r3]
 80018fa:	4b51      	ldr	r3, [pc, #324]	@ (8001a40 <FlightController_ControlSystem+0x678>)
 80018fc:	edd3 6a00 	vldr	s13, [r3]
 8001900:	4b50      	ldr	r3, [pc, #320]	@ (8001a44 <FlightController_ControlSystem+0x67c>)
 8001902:	ed93 6a00 	vldr	s12, [r3]
 8001906:	eef0 1a46 	vmov.f32	s3, s12
 800190a:	eeb0 1a66 	vmov.f32	s2, s13
 800190e:	eef0 0a47 	vmov.f32	s1, s14
 8001912:	eeb0 0a67 	vmov.f32	s0, s15
 8001916:	4a4c      	ldr	r2, [pc, #304]	@ (8001a48 <FlightController_ControlSystem+0x680>)
 8001918:	494c      	ldr	r1, [pc, #304]	@ (8001a4c <FlightController_ControlSystem+0x684>)
 800191a:	484d      	ldr	r0, [pc, #308]	@ (8001a50 <FlightController_ControlSystem+0x688>)
 800191c:	f000 fd2c 	bl	8002378 <CSM2_CalculatePID>
                        /* Calculate PID for pitch rate */
                        CSM2_CalculatePID(&pidOutputValue_pitchRate, &previousIterm_pitchRate, &previousErrorValue_pitchRate, errorValue_pitchRate, kP_pitchRate, kI_pitchRate, kD_pitchRate);
 8001920:	4b44      	ldr	r3, [pc, #272]	@ (8001a34 <FlightController_ControlSystem+0x66c>)
 8001922:	edd3 7a00 	vldr	s15, [r3]
 8001926:	4b4b      	ldr	r3, [pc, #300]	@ (8001a54 <FlightController_ControlSystem+0x68c>)
 8001928:	ed93 7a00 	vldr	s14, [r3]
 800192c:	4b4a      	ldr	r3, [pc, #296]	@ (8001a58 <FlightController_ControlSystem+0x690>)
 800192e:	edd3 6a00 	vldr	s13, [r3]
 8001932:	4b4a      	ldr	r3, [pc, #296]	@ (8001a5c <FlightController_ControlSystem+0x694>)
 8001934:	ed93 6a00 	vldr	s12, [r3]
 8001938:	eef0 1a46 	vmov.f32	s3, s12
 800193c:	eeb0 1a66 	vmov.f32	s2, s13
 8001940:	eef0 0a47 	vmov.f32	s1, s14
 8001944:	eeb0 0a67 	vmov.f32	s0, s15
 8001948:	4a45      	ldr	r2, [pc, #276]	@ (8001a60 <FlightController_ControlSystem+0x698>)
 800194a:	4946      	ldr	r1, [pc, #280]	@ (8001a64 <FlightController_ControlSystem+0x69c>)
 800194c:	4846      	ldr	r0, [pc, #280]	@ (8001a68 <FlightController_ControlSystem+0x6a0>)
 800194e:	f000 fd13 	bl	8002378 <CSM2_CalculatePID>
                        /* Calculate PID for yaw rate */
                        CSM2_CalculatePID(&pidOutputValue_yawRate, &previousIterm_yawRate, &previousErrorValue_yawRate, errorValue_yawRate, kP_yawRate, kI_yawRate, kD_yawRate);
 8001952:	4b39      	ldr	r3, [pc, #228]	@ (8001a38 <FlightController_ControlSystem+0x670>)
 8001954:	edd3 7a00 	vldr	s15, [r3]
 8001958:	4b44      	ldr	r3, [pc, #272]	@ (8001a6c <FlightController_ControlSystem+0x6a4>)
 800195a:	ed93 7a00 	vldr	s14, [r3]
 800195e:	4b44      	ldr	r3, [pc, #272]	@ (8001a70 <FlightController_ControlSystem+0x6a8>)
 8001960:	edd3 6a00 	vldr	s13, [r3]
 8001964:	4b43      	ldr	r3, [pc, #268]	@ (8001a74 <FlightController_ControlSystem+0x6ac>)
 8001966:	ed93 6a00 	vldr	s12, [r3]
 800196a:	eef0 1a46 	vmov.f32	s3, s12
 800196e:	eeb0 1a66 	vmov.f32	s2, s13
 8001972:	eef0 0a47 	vmov.f32	s1, s14
 8001976:	eeb0 0a67 	vmov.f32	s0, s15
 800197a:	4a3f      	ldr	r2, [pc, #252]	@ (8001a78 <FlightController_ControlSystem+0x6b0>)
 800197c:	493f      	ldr	r1, [pc, #252]	@ (8001a7c <FlightController_ControlSystem+0x6b4>)
 800197e:	4840      	ldr	r0, [pc, #256]	@ (8001a80 <FlightController_ControlSystem+0x6b8>)
 8001980:	f000 fcfa 	bl	8002378 <CSM2_CalculatePID>

                        /* Calculate motors speed */
                        motorSpeed1 = ((inputValue_throttle - pidOutputValue_rollRate - pidOutputValue_pitchRate - pidOutputValue_yawRate) - 1000) / 10;
 8001984:	4b10      	ldr	r3, [pc, #64]	@ (80019c8 <FlightController_ControlSystem+0x600>)
 8001986:	ed93 7a00 	vldr	s14, [r3]
 800198a:	4b31      	ldr	r3, [pc, #196]	@ (8001a50 <FlightController_ControlSystem+0x688>)
 800198c:	edd3 7a00 	vldr	s15, [r3]
 8001990:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001994:	e076      	b.n	8001a84 <FlightController_ControlSystem+0x6bc>
 8001996:	bf00      	nop
 8001998:	9999999a 	.word	0x9999999a
 800199c:	3fb99999 	.word	0x3fb99999
 80019a0:	33333333 	.word	0x33333333
 80019a4:	3fc33333 	.word	0x3fc33333
 80019a8:	20000390 	.word	0x20000390
 80019ac:	200003ac 	.word	0x200003ac
 80019b0:	200003c0 	.word	0x200003c0
 80019b4:	20000008 	.word	0x20000008
 80019b8:	200003e0 	.word	0x200003e0
 80019bc:	2000000c 	.word	0x2000000c
 80019c0:	200003e4 	.word	0x200003e4
 80019c4:	2000038c 	.word	0x2000038c
 80019c8:	200003ec 	.word	0x200003ec
 80019cc:	200003f0 	.word	0x200003f0
 80019d0:	200003f4 	.word	0x200003f4
 80019d4:	20000430 	.word	0x20000430
 80019d8:	44e10000 	.word	0x44e10000
 80019dc:	44e10000 	.word	0x44e10000
 80019e0:	44bb8000 	.word	0x44bb8000
 80019e4:	200003f8 	.word	0x200003f8
 80019e8:	200003fc 	.word	0x200003fc
 80019ec:	20000400 	.word	0x20000400
 80019f0:	20000404 	.word	0x20000404
 80019f4:	20000010 	.word	0x20000010
 80019f8:	20000418 	.word	0x20000418
 80019fc:	20000420 	.word	0x20000420
 8001a00:	20000408 	.word	0x20000408
 8001a04:	20000410 	.word	0x20000410
 8001a08:	20000428 	.word	0x20000428
 8001a0c:	20000014 	.word	0x20000014
 8001a10:	2000041c 	.word	0x2000041c
 8001a14:	20000424 	.word	0x20000424
 8001a18:	2000040c 	.word	0x2000040c
 8001a1c:	20000414 	.word	0x20000414
 8001a20:	2000042c 	.word	0x2000042c
 8001a24:	20000434 	.word	0x20000434
 8001a28:	20000438 	.word	0x20000438
 8001a2c:	2000043c 	.word	0x2000043c
 8001a30:	20000440 	.word	0x20000440
 8001a34:	20000444 	.word	0x20000444
 8001a38:	20000448 	.word	0x20000448
 8001a3c:	20000018 	.word	0x20000018
 8001a40:	20000024 	.word	0x20000024
 8001a44:	20000030 	.word	0x20000030
 8001a48:	2000044c 	.word	0x2000044c
 8001a4c:	20000458 	.word	0x20000458
 8001a50:	20000468 	.word	0x20000468
 8001a54:	2000001c 	.word	0x2000001c
 8001a58:	20000028 	.word	0x20000028
 8001a5c:	20000034 	.word	0x20000034
 8001a60:	20000450 	.word	0x20000450
 8001a64:	2000045c 	.word	0x2000045c
 8001a68:	2000046c 	.word	0x2000046c
 8001a6c:	20000020 	.word	0x20000020
 8001a70:	2000002c 	.word	0x2000002c
 8001a74:	20000464 	.word	0x20000464
 8001a78:	20000454 	.word	0x20000454
 8001a7c:	20000460 	.word	0x20000460
 8001a80:	20000470 	.word	0x20000470
 8001a84:	4b91      	ldr	r3, [pc, #580]	@ (8001ccc <FlightController_ControlSystem+0x904>)
 8001a86:	edd3 7a00 	vldr	s15, [r3]
 8001a8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a8e:	4b90      	ldr	r3, [pc, #576]	@ (8001cd0 <FlightController_ControlSystem+0x908>)
 8001a90:	edd3 7a00 	vldr	s15, [r3]
 8001a94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a98:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8001cd4 <FlightController_ControlSystem+0x90c>
 8001a9c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001aa0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001aa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aa8:	4b8b      	ldr	r3, [pc, #556]	@ (8001cd8 <FlightController_ControlSystem+0x910>)
 8001aaa:	edc3 7a00 	vstr	s15, [r3]
                        motorSpeed2 = ((inputValue_throttle + pidOutputValue_rollRate + pidOutputValue_pitchRate - pidOutputValue_yawRate) - 1000) / 10;
 8001aae:	4b8b      	ldr	r3, [pc, #556]	@ (8001cdc <FlightController_ControlSystem+0x914>)
 8001ab0:	ed93 7a00 	vldr	s14, [r3]
 8001ab4:	4b8a      	ldr	r3, [pc, #552]	@ (8001ce0 <FlightController_ControlSystem+0x918>)
 8001ab6:	edd3 7a00 	vldr	s15, [r3]
 8001aba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001abe:	4b83      	ldr	r3, [pc, #524]	@ (8001ccc <FlightController_ControlSystem+0x904>)
 8001ac0:	edd3 7a00 	vldr	s15, [r3]
 8001ac4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ac8:	4b81      	ldr	r3, [pc, #516]	@ (8001cd0 <FlightController_ControlSystem+0x908>)
 8001aca:	edd3 7a00 	vldr	s15, [r3]
 8001ace:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ad2:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8001cd4 <FlightController_ControlSystem+0x90c>
 8001ad6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001ada:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001ade:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ae2:	4b80      	ldr	r3, [pc, #512]	@ (8001ce4 <FlightController_ControlSystem+0x91c>)
 8001ae4:	edc3 7a00 	vstr	s15, [r3]
                        motorSpeed3 = ((inputValue_throttle + pidOutputValue_rollRate - pidOutputValue_pitchRate + pidOutputValue_yawRate) - 1000) / 10;
 8001ae8:	4b7c      	ldr	r3, [pc, #496]	@ (8001cdc <FlightController_ControlSystem+0x914>)
 8001aea:	ed93 7a00 	vldr	s14, [r3]
 8001aee:	4b7c      	ldr	r3, [pc, #496]	@ (8001ce0 <FlightController_ControlSystem+0x918>)
 8001af0:	edd3 7a00 	vldr	s15, [r3]
 8001af4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001af8:	4b74      	ldr	r3, [pc, #464]	@ (8001ccc <FlightController_ControlSystem+0x904>)
 8001afa:	edd3 7a00 	vldr	s15, [r3]
 8001afe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b02:	4b73      	ldr	r3, [pc, #460]	@ (8001cd0 <FlightController_ControlSystem+0x908>)
 8001b04:	edd3 7a00 	vldr	s15, [r3]
 8001b08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b0c:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8001cd4 <FlightController_ControlSystem+0x90c>
 8001b10:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001b14:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001b18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b1c:	4b72      	ldr	r3, [pc, #456]	@ (8001ce8 <FlightController_ControlSystem+0x920>)
 8001b1e:	edc3 7a00 	vstr	s15, [r3]
                        motorSpeed4 = ((inputValue_throttle - pidOutputValue_rollRate + pidOutputValue_pitchRate + pidOutputValue_yawRate) - 1000) / 10;
 8001b22:	4b6e      	ldr	r3, [pc, #440]	@ (8001cdc <FlightController_ControlSystem+0x914>)
 8001b24:	ed93 7a00 	vldr	s14, [r3]
 8001b28:	4b6d      	ldr	r3, [pc, #436]	@ (8001ce0 <FlightController_ControlSystem+0x918>)
 8001b2a:	edd3 7a00 	vldr	s15, [r3]
 8001b2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b32:	4b66      	ldr	r3, [pc, #408]	@ (8001ccc <FlightController_ControlSystem+0x904>)
 8001b34:	edd3 7a00 	vldr	s15, [r3]
 8001b38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b3c:	4b64      	ldr	r3, [pc, #400]	@ (8001cd0 <FlightController_ControlSystem+0x908>)
 8001b3e:	edd3 7a00 	vldr	s15, [r3]
 8001b42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b46:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8001cd4 <FlightController_ControlSystem+0x90c>
 8001b4a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001b4e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001b52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b56:	4b65      	ldr	r3, [pc, #404]	@ (8001cec <FlightController_ControlSystem+0x924>)
 8001b58:	edc3 7a00 	vstr	s15, [r3]

                        /* Adjust and limit motors maximum speed */
                        if (ESC_MAXIMUM_SPEED < motorSpeed1)
 8001b5c:	4b5e      	ldr	r3, [pc, #376]	@ (8001cd8 <FlightController_ControlSystem+0x910>)
 8001b5e:	edd3 7a00 	vldr	s15, [r3]
 8001b62:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8001cf0 <FlightController_ControlSystem+0x928>
 8001b66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6e:	dd02      	ble.n	8001b76 <FlightController_ControlSystem+0x7ae>
                            motorSpeed1 = ESC_MAXIMUM_SPEED;
 8001b70:	4b59      	ldr	r3, [pc, #356]	@ (8001cd8 <FlightController_ControlSystem+0x910>)
 8001b72:	4a60      	ldr	r2, [pc, #384]	@ (8001cf4 <FlightController_ControlSystem+0x92c>)
 8001b74:	601a      	str	r2, [r3, #0]
                        if (ESC_MAXIMUM_SPEED < motorSpeed2)
 8001b76:	4b5b      	ldr	r3, [pc, #364]	@ (8001ce4 <FlightController_ControlSystem+0x91c>)
 8001b78:	edd3 7a00 	vldr	s15, [r3]
 8001b7c:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8001cf0 <FlightController_ControlSystem+0x928>
 8001b80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b88:	dd02      	ble.n	8001b90 <FlightController_ControlSystem+0x7c8>
                            motorSpeed2 = ESC_MAXIMUM_SPEED;
 8001b8a:	4b56      	ldr	r3, [pc, #344]	@ (8001ce4 <FlightController_ControlSystem+0x91c>)
 8001b8c:	4a59      	ldr	r2, [pc, #356]	@ (8001cf4 <FlightController_ControlSystem+0x92c>)
 8001b8e:	601a      	str	r2, [r3, #0]
                        if (ESC_MAXIMUM_SPEED < motorSpeed3)
 8001b90:	4b55      	ldr	r3, [pc, #340]	@ (8001ce8 <FlightController_ControlSystem+0x920>)
 8001b92:	edd3 7a00 	vldr	s15, [r3]
 8001b96:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8001cf0 <FlightController_ControlSystem+0x928>
 8001b9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba2:	dd02      	ble.n	8001baa <FlightController_ControlSystem+0x7e2>
                            motorSpeed3 = ESC_MAXIMUM_SPEED;
 8001ba4:	4b50      	ldr	r3, [pc, #320]	@ (8001ce8 <FlightController_ControlSystem+0x920>)
 8001ba6:	4a53      	ldr	r2, [pc, #332]	@ (8001cf4 <FlightController_ControlSystem+0x92c>)
 8001ba8:	601a      	str	r2, [r3, #0]
                        if (ESC_MAXIMUM_SPEED < motorSpeed4)
 8001baa:	4b50      	ldr	r3, [pc, #320]	@ (8001cec <FlightController_ControlSystem+0x924>)
 8001bac:	edd3 7a00 	vldr	s15, [r3]
 8001bb0:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001cf0 <FlightController_ControlSystem+0x928>
 8001bb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbc:	dd02      	ble.n	8001bc4 <FlightController_ControlSystem+0x7fc>
                            motorSpeed4 = ESC_MAXIMUM_SPEED;
 8001bbe:	4b4b      	ldr	r3, [pc, #300]	@ (8001cec <FlightController_ControlSystem+0x924>)
 8001bc0:	4a4c      	ldr	r2, [pc, #304]	@ (8001cf4 <FlightController_ControlSystem+0x92c>)
 8001bc2:	601a      	str	r2, [r3, #0]

                        /* Adjust and limit motors minimum speed */
                        if (ESC_MINIMUM_SPEED > motorSpeed1)
 8001bc4:	4b44      	ldr	r3, [pc, #272]	@ (8001cd8 <FlightController_ControlSystem+0x910>)
 8001bc6:	edd3 7a00 	vldr	s15, [r3]
 8001bca:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001bce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd6:	d502      	bpl.n	8001bde <FlightController_ControlSystem+0x816>
                            motorSpeed1 = ESC_MINIMUM_SPEED;
 8001bd8:	4b3f      	ldr	r3, [pc, #252]	@ (8001cd8 <FlightController_ControlSystem+0x910>)
 8001bda:	4a47      	ldr	r2, [pc, #284]	@ (8001cf8 <FlightController_ControlSystem+0x930>)
 8001bdc:	601a      	str	r2, [r3, #0]
                        if (ESC_MINIMUM_SPEED > motorSpeed2)
 8001bde:	4b41      	ldr	r3, [pc, #260]	@ (8001ce4 <FlightController_ControlSystem+0x91c>)
 8001be0:	edd3 7a00 	vldr	s15, [r3]
 8001be4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001be8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf0:	d502      	bpl.n	8001bf8 <FlightController_ControlSystem+0x830>
                            motorSpeed2 = ESC_MINIMUM_SPEED;
 8001bf2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ce4 <FlightController_ControlSystem+0x91c>)
 8001bf4:	4a40      	ldr	r2, [pc, #256]	@ (8001cf8 <FlightController_ControlSystem+0x930>)
 8001bf6:	601a      	str	r2, [r3, #0]
                        if (ESC_MINIMUM_SPEED > motorSpeed3)
 8001bf8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ce8 <FlightController_ControlSystem+0x920>)
 8001bfa:	edd3 7a00 	vldr	s15, [r3]
 8001bfe:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0a:	d502      	bpl.n	8001c12 <FlightController_ControlSystem+0x84a>
                            motorSpeed3 = ESC_MINIMUM_SPEED;
 8001c0c:	4b36      	ldr	r3, [pc, #216]	@ (8001ce8 <FlightController_ControlSystem+0x920>)
 8001c0e:	4a3a      	ldr	r2, [pc, #232]	@ (8001cf8 <FlightController_ControlSystem+0x930>)
 8001c10:	601a      	str	r2, [r3, #0]
                        if (ESC_MINIMUM_SPEED > motorSpeed4)
 8001c12:	4b36      	ldr	r3, [pc, #216]	@ (8001cec <FlightController_ControlSystem+0x924>)
 8001c14:	edd3 7a00 	vldr	s15, [r3]
 8001c18:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001c1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c24:	d502      	bpl.n	8001c2c <FlightController_ControlSystem+0x864>
                            motorSpeed4 = ESC_MINIMUM_SPEED;
 8001c26:	4b31      	ldr	r3, [pc, #196]	@ (8001cec <FlightController_ControlSystem+0x924>)
 8001c28:	4a33      	ldr	r2, [pc, #204]	@ (8001cf8 <FlightController_ControlSystem+0x930>)
 8001c2a:	601a      	str	r2, [r3, #0]

                        /* Save motors speed */
                        ESC_speeds[1] = motorSpeed1;
 8001c2c:	4b2a      	ldr	r3, [pc, #168]	@ (8001cd8 <FlightController_ControlSystem+0x910>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a32      	ldr	r2, [pc, #200]	@ (8001cfc <FlightController_ControlSystem+0x934>)
 8001c32:	6053      	str	r3, [r2, #4]
                        ESC_speeds[2] = motorSpeed2;
 8001c34:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce4 <FlightController_ControlSystem+0x91c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a30      	ldr	r2, [pc, #192]	@ (8001cfc <FlightController_ControlSystem+0x934>)
 8001c3a:	6093      	str	r3, [r2, #8]
                        ESC_speeds[3] = motorSpeed3;
 8001c3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ce8 <FlightController_ControlSystem+0x920>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a2e      	ldr	r2, [pc, #184]	@ (8001cfc <FlightController_ControlSystem+0x934>)
 8001c42:	60d3      	str	r3, [r2, #12]
                        ESC_speeds[4] = motorSpeed4;
 8001c44:	4b29      	ldr	r3, [pc, #164]	@ (8001cec <FlightController_ControlSystem+0x924>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a2c      	ldr	r2, [pc, #176]	@ (8001cfc <FlightController_ControlSystem+0x934>)
 8001c4a:	6113      	str	r3, [r2, #16]

                        /* Set motors speed */
                        ESC_SetSpeed(hesc, hesc->esc1, ESC_speeds[4]);
 8001c4c:	4b2c      	ldr	r3, [pc, #176]	@ (8001d00 <FlightController_ControlSystem+0x938>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b2b      	ldr	r3, [pc, #172]	@ (8001d00 <FlightController_ControlSystem+0x938>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	791b      	ldrb	r3, [r3, #4]
 8001c56:	4929      	ldr	r1, [pc, #164]	@ (8001cfc <FlightController_ControlSystem+0x934>)
 8001c58:	edd1 7a04 	vldr	s15, [r1, #16]
 8001c5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c60:	4619      	mov	r1, r3
 8001c62:	4610      	mov	r0, r2
 8001c64:	f001 fc84 	bl	8003570 <ESC_SetSpeed>
                        ESC_SetSpeed(hesc, hesc->esc2, ESC_speeds[2]);
 8001c68:	4b25      	ldr	r3, [pc, #148]	@ (8001d00 <FlightController_ControlSystem+0x938>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b24      	ldr	r3, [pc, #144]	@ (8001d00 <FlightController_ControlSystem+0x938>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	795b      	ldrb	r3, [r3, #5]
 8001c72:	4922      	ldr	r1, [pc, #136]	@ (8001cfc <FlightController_ControlSystem+0x934>)
 8001c74:	edd1 7a02 	vldr	s15, [r1, #8]
 8001c78:	eeb0 0a67 	vmov.f32	s0, s15
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4610      	mov	r0, r2
 8001c80:	f001 fc76 	bl	8003570 <ESC_SetSpeed>
                        ESC_SetSpeed(hesc, hesc->esc3, ESC_speeds[3]);
 8001c84:	4b1e      	ldr	r3, [pc, #120]	@ (8001d00 <FlightController_ControlSystem+0x938>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b1d      	ldr	r3, [pc, #116]	@ (8001d00 <FlightController_ControlSystem+0x938>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	799b      	ldrb	r3, [r3, #6]
 8001c8e:	491b      	ldr	r1, [pc, #108]	@ (8001cfc <FlightController_ControlSystem+0x934>)
 8001c90:	edd1 7a03 	vldr	s15, [r1, #12]
 8001c94:	eeb0 0a67 	vmov.f32	s0, s15
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	f001 fc68 	bl	8003570 <ESC_SetSpeed>
                        ESC_SetSpeed(hesc, hesc->esc4, ESC_speeds[1]);
 8001ca0:	4b17      	ldr	r3, [pc, #92]	@ (8001d00 <FlightController_ControlSystem+0x938>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b16      	ldr	r3, [pc, #88]	@ (8001d00 <FlightController_ControlSystem+0x938>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	79db      	ldrb	r3, [r3, #7]
 8001caa:	4914      	ldr	r1, [pc, #80]	@ (8001cfc <FlightController_ControlSystem+0x934>)
 8001cac:	edd1 7a01 	vldr	s15, [r1, #4]
 8001cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	f001 fc5a 	bl	8003570 <ESC_SetSpeed>
                    }

                    /* Reset Timer4 flag */
                    Timer4_flag = false;
 8001cbc:	4b11      	ldr	r3, [pc, #68]	@ (8001d04 <FlightController_ControlSystem+0x93c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
#endif

        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f00c fbac 	bl	800e420 <vTaskDelay>
    	if (1 == GY87_CALIBRATION_EN){
 8001cc8:	f7ff bb84 	b.w	80013d4 <FlightController_ControlSystem+0xc>
 8001ccc:	2000046c 	.word	0x2000046c
 8001cd0:	20000470 	.word	0x20000470
 8001cd4:	447a0000 	.word	0x447a0000
 8001cd8:	20000474 	.word	0x20000474
 8001cdc:	200003ec 	.word	0x200003ec
 8001ce0:	20000468 	.word	0x20000468
 8001ce4:	20000478 	.word	0x20000478
 8001ce8:	2000047c 	.word	0x2000047c
 8001cec:	20000480 	.word	0x20000480
 8001cf0:	42b40000 	.word	0x42b40000
 8001cf4:	42b40000 	.word	0x42b40000
 8001cf8:	41200000 	.word	0x41200000
 8001cfc:	20000488 	.word	0x20000488
 8001d00:	20000394 	.word	0x20000394
 8001d04:	2000038b 	.word	0x2000038b

08001d08 <FlightController_Data_Logging>:
    }
}

void FlightController_Data_Logging(void * ptr) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b0aa      	sub	sp, #168	@ 0xa8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
 8001d10:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8001d14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    uint8_t loggingStr[150] = {0};
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	f107 0310 	add.w	r3, r7, #16
 8001d20:	2292      	movs	r2, #146	@ 0x92
 8001d22:	2100      	movs	r1, #0
 8001d24:	4618      	mov	r0, r3
 8001d26:	f00f fad0 	bl	80112ca <memset>
        sprintf((char *)loggingStr, (const char *)"Battery Level: %.2f [V]\r\n\n", FlightController_batteryLevelValue);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001d2a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8001d2e:	f00c fb77 	bl	800e420 <vTaskDelay>
 8001d32:	e7fa      	b.n	8001d2a <FlightController_Data_Logging+0x22>

08001d34 <FlightController_OnOffButton>:
    }
}

void FlightController_OnOffButton(void * ptr) {
 8001d34:	b590      	push	{r4, r7, lr}
 8001d36:	b087      	sub	sp, #28
 8001d38:	af02      	add	r7, sp, #8
 8001d3a:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001d3c:	23c8      	movs	r3, #200	@ 0xc8
 8001d3e:	60fb      	str	r3, [r7, #12]

    while (1) {

        /* Check On/Off Button status */
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 8001d40:	2120      	movs	r1, #32
 8001d42:	4810      	ldr	r0, [pc, #64]	@ (8001d84 <FlightController_OnOffButton+0x50>)
 8001d44:	f003 feb2 	bl	8005aac <HAL_GPIO_ReadPin>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d115      	bne.n	8001d7a <FlightController_OnOffButton+0x46>
            /* User is trying to turn it on or off */
            if (!Timer1_running) {
 8001d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d88 <FlightController_OnOffButton+0x54>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	f083 0301 	eor.w	r3, r3, #1
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00e      	beq.n	8001d7a <FlightController_OnOffButton+0x46>

                xTimerStart(Timer1_Handle, 0);
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d8c <FlightController_OnOffButton+0x58>)
 8001d5e:	681c      	ldr	r4, [r3, #0]
 8001d60:	f00c fd3c 	bl	800e7dc <xTaskGetTickCount>
 8001d64:	4602      	mov	r2, r0
 8001d66:	2300      	movs	r3, #0
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	4620      	mov	r0, r4
 8001d70:	f00d f998 	bl	800f0a4 <xTimerGenericCommand>
                Timer1_running = true;
 8001d74:	4b04      	ldr	r3, [pc, #16]	@ (8001d88 <FlightController_OnOffButton+0x54>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	701a      	strb	r2, [r3, #0]
            }
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f00c fb50 	bl	800e420 <vTaskDelay>
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 8001d80:	e7de      	b.n	8001d40 <FlightController_OnOffButton+0xc>
 8001d82:	bf00      	nop
 8001d84:	40020400 	.word	0x40020400
 8001d88:	20000388 	.word	0x20000388
 8001d8c:	20000378 	.word	0x20000378

08001d90 <FlightController_BatteryLevel>:
    }
}

void FlightController_BatteryLevel(void * ptr) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

    uint16_t adcValue;

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(1000);
 8001d98:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001d9c:	60fb      	str	r3, [r7, #12]

    while (1) {

        /* Start ADC Conversion */
        HAL_ADC_Start(&hadc1);
 8001d9e:	4836      	ldr	r0, [pc, #216]	@ (8001e78 <FlightController_BatteryLevel+0xe8>)
 8001da0:	f002 fe84 	bl	8004aac <HAL_ADC_Start>

        /* Poll ADC peripheral */
        HAL_ADC_PollForConversion(&hadc1, 1);
 8001da4:	2101      	movs	r1, #1
 8001da6:	4834      	ldr	r0, [pc, #208]	@ (8001e78 <FlightController_BatteryLevel+0xe8>)
 8001da8:	f002 ff34 	bl	8004c14 <HAL_ADC_PollForConversion>

        /* Read ADC value */
        adcValue = HAL_ADC_GetValue(&hadc1);
 8001dac:	4832      	ldr	r0, [pc, #200]	@ (8001e78 <FlightController_BatteryLevel+0xe8>)
 8001dae:	f002 ffbc 	bl	8004d2a <HAL_ADC_GetValue>
 8001db2:	4603      	mov	r3, r0
 8001db4:	817b      	strh	r3, [r7, #10]

        /* Convert ADC value to real value */
        FlightController_batteryLevelValue = (adcValue * 3.3) / 4096;
 8001db6:	897b      	ldrh	r3, [r7, #10]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe fbbb 	bl	8000534 <__aeabi_i2d>
 8001dbe:	a326      	add	r3, pc, #152	@ (adr r3, 8001e58 <FlightController_BatteryLevel+0xc8>)
 8001dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc4:	f7fe fc20 	bl	8000608 <__aeabi_dmul>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4610      	mov	r0, r2
 8001dce:	4619      	mov	r1, r3
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	4b29      	ldr	r3, [pc, #164]	@ (8001e7c <FlightController_BatteryLevel+0xec>)
 8001dd6:	f7fe fd41 	bl	800085c <__aeabi_ddiv>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4610      	mov	r0, r2
 8001de0:	4619      	mov	r1, r3
 8001de2:	f7fe ff09 	bl	8000bf8 <__aeabi_d2f>
 8001de6:	4603      	mov	r3, r0
 8001de8:	4a25      	ldr	r2, [pc, #148]	@ (8001e80 <FlightController_BatteryLevel+0xf0>)
 8001dea:	6013      	str	r3, [r2, #0]

        /* Correct real value, as when battery full, ADC input is not 3.3V */
        FlightController_batteryLevelValue = FlightController_batteryLevelValue * 1.046046;
 8001dec:	4b24      	ldr	r3, [pc, #144]	@ (8001e80 <FlightController_BatteryLevel+0xf0>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fbb1 	bl	8000558 <__aeabi_f2d>
 8001df6:	a31a      	add	r3, pc, #104	@ (adr r3, 8001e60 <FlightController_BatteryLevel+0xd0>)
 8001df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfc:	f7fe fc04 	bl	8000608 <__aeabi_dmul>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4610      	mov	r0, r2
 8001e06:	4619      	mov	r1, r3
 8001e08:	f7fe fef6 	bl	8000bf8 <__aeabi_d2f>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	4a1c      	ldr	r2, [pc, #112]	@ (8001e80 <FlightController_BatteryLevel+0xf0>)
 8001e10:	6013      	str	r3, [r2, #0]

        /* Map real value to battery levels */
        FlightController_batteryLevelValue = FlightController_batteryLevelValue * 3.363636 + BATTERY_LEVEL_CALIBRATION_OFFSET;
 8001e12:	4b1b      	ldr	r3, [pc, #108]	@ (8001e80 <FlightController_BatteryLevel+0xf0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fb9e 	bl	8000558 <__aeabi_f2d>
 8001e1c:	a312      	add	r3, pc, #72	@ (adr r3, 8001e68 <FlightController_BatteryLevel+0xd8>)
 8001e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e22:	f7fe fbf1 	bl	8000608 <__aeabi_dmul>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	a310      	add	r3, pc, #64	@ (adr r3, 8001e70 <FlightController_BatteryLevel+0xe0>)
 8001e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e34:	f7fe fa32 	bl	800029c <__adddf3>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f7fe feda 	bl	8000bf8 <__aeabi_d2f>
 8001e44:	4603      	mov	r3, r0
 8001e46:	4a0e      	ldr	r2, [pc, #56]	@ (8001e80 <FlightController_BatteryLevel+0xf0>)
 8001e48:	6013      	str	r3, [r2, #0]

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f00c fae8 	bl	800e420 <vTaskDelay>
        HAL_ADC_Start(&hadc1);
 8001e50:	bf00      	nop
 8001e52:	e7a4      	b.n	8001d9e <FlightController_BatteryLevel+0xe>
 8001e54:	f3af 8000 	nop.w
 8001e58:	66666666 	.word	0x66666666
 8001e5c:	400a6666 	.word	0x400a6666
 8001e60:	bb01c92e 	.word	0xbb01c92e
 8001e64:	3ff0bc9a 	.word	0x3ff0bc9a
 8001e68:	fdbd2fa1 	.word	0xfdbd2fa1
 8001e6c:	400ae8b9 	.word	0x400ae8b9
 8001e70:	851eb852 	.word	0x851eb852
 8001e74:	3fe851eb 	.word	0x3fe851eb
 8001e78:	20000b94 	.word	0x20000b94
 8001e7c:	40b00000 	.word	0x40b00000
 8001e80:	20000038 	.word	0x20000038

08001e84 <FlightController_BatteryAlarm>:
    }
}

void FlightController_BatteryAlarm(void * ptr) {
 8001e84:	b5b0      	push	{r4, r5, r7, lr}
 8001e86:	b08e      	sub	sp, #56	@ 0x38
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]

    uint8_t alarmSequence[] = {1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 8001e8c:	4b24      	ldr	r3, [pc, #144]	@ (8001f20 <FlightController_BatteryAlarm+0x9c>)
 8001e8e:	f107 0408 	add.w	r4, r7, #8
 8001e92:	461d      	mov	r5, r3
 8001e94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e9c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ea0:	e884 0003 	stmia.w	r4, {r0, r1}
    uint8_t alarmSequenceSize = sizeof(alarmSequence);
 8001ea4:	2328      	movs	r3, #40	@ 0x28
 8001ea6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    uint8_t alarmSequenceCursor = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001eb0:	23c8      	movs	r3, #200	@ 0xc8
 8001eb2:	633b      	str	r3, [r7, #48]	@ 0x30

    while (1) {

        if (FlightController_batteryLevelValue < BATTERY_ALARM_THRESHOLD) {
 8001eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f24 <FlightController_BatteryAlarm+0xa0>)
 8001eb6:	edd3 7a00 	vldr	s15, [r3]
 8001eba:	eeb2 7a03 	vmov.f32	s14, #35	@ 0x41180000  9.5
 8001ebe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec6:	d521      	bpl.n	8001f0c <FlightController_BatteryAlarm+0x88>

            if (Timer2_flag) {
 8001ec8:	4b17      	ldr	r3, [pc, #92]	@ (8001f28 <FlightController_BatteryAlarm+0xa4>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d023      	beq.n	8001f18 <FlightController_BatteryAlarm+0x94>
                /* If timer expired */

                /* Parse alarm sequence */
                alarmSequenceCursor++;
 8001ed0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                if (alarmSequenceSize <= alarmSequenceCursor) {
 8001eda:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8001ede:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d802      	bhi.n	8001eec <FlightController_BatteryAlarm+0x68>
                    alarmSequenceCursor = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                }

                /* Write to buzzer */
                HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, alarmSequence[alarmSequenceCursor]);
 8001eec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001ef0:	3338      	adds	r3, #56	@ 0x38
 8001ef2:	443b      	add	r3, r7
 8001ef4:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001efe:	480b      	ldr	r0, [pc, #44]	@ (8001f2c <FlightController_BatteryAlarm+0xa8>)
 8001f00:	f003 fdec 	bl	8005adc <HAL_GPIO_WritePin>

                /* Reset Timer2 flag */
                Timer2_flag = false;
 8001f04:	4b08      	ldr	r3, [pc, #32]	@ (8001f28 <FlightController_BatteryAlarm+0xa4>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	701a      	strb	r2, [r3, #0]
 8001f0a:	e005      	b.n	8001f18 <FlightController_BatteryAlarm+0x94>
            }

        } else {

            HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f12:	4806      	ldr	r0, [pc, #24]	@ (8001f2c <FlightController_BatteryAlarm+0xa8>)
 8001f14:	f003 fde2 	bl	8005adc <HAL_GPIO_WritePin>
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001f18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f1a:	f00c fa81 	bl	800e420 <vTaskDelay>
        if (FlightController_batteryLevelValue < BATTERY_ALARM_THRESHOLD) {
 8001f1e:	e7c9      	b.n	8001eb4 <FlightController_BatteryAlarm+0x30>
 8001f20:	080139b8 	.word	0x080139b8
 8001f24:	20000038 	.word	0x20000038
 8001f28:	20000389 	.word	0x20000389
 8001f2c:	40020000 	.word	0x40020000

08001f30 <FlightController_HeartbeatLight>:
    }
}

void FlightController_HeartbeatLight(void * ptr) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]

    uint8_t ledState = GPIO_PIN_RESET;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	73fb      	strb	r3, [r7, #15]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(HEARTBEAT_PERIOD / 2);
 8001f3c:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001f40:	60bb      	str	r3, [r7, #8]

    while (1) {

        if (FlightController_isInitialized) {
 8001f42:	4b0f      	ldr	r3, [pc, #60]	@ (8001f80 <FlightController_HeartbeatLight+0x50>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00f      	beq.n	8001f6a <FlightController_HeartbeatLight+0x3a>
            HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ledState);
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f52:	480c      	ldr	r0, [pc, #48]	@ (8001f84 <FlightController_HeartbeatLight+0x54>)
 8001f54:	f003 fdc2 	bl	8005adc <HAL_GPIO_WritePin>

            /* Change pin state */
            if (ledState == GPIO_PIN_RESET) {
 8001f58:	7bfb      	ldrb	r3, [r7, #15]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d102      	bne.n	8001f64 <FlightController_HeartbeatLight+0x34>

                ledState = GPIO_PIN_SET;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	73fb      	strb	r3, [r7, #15]
 8001f62:	e008      	b.n	8001f76 <FlightController_HeartbeatLight+0x46>
            } else {

                ledState = GPIO_PIN_RESET;
 8001f64:	2300      	movs	r3, #0
 8001f66:	73fb      	strb	r3, [r7, #15]
 8001f68:	e005      	b.n	8001f76 <FlightController_HeartbeatLight+0x46>
            }
        } else {
            HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f70:	4804      	ldr	r0, [pc, #16]	@ (8001f84 <FlightController_HeartbeatLight+0x54>)
 8001f72:	f003 fdb3 	bl	8005adc <HAL_GPIO_WritePin>
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001f76:	68b8      	ldr	r0, [r7, #8]
 8001f78:	f00c fa52 	bl	800e420 <vTaskDelay>
        if (FlightController_isInitialized) {
 8001f7c:	e7e1      	b.n	8001f42 <FlightController_HeartbeatLight+0x12>
 8001f7e:	bf00      	nop
 8001f80:	20000355 	.word	0x20000355
 8001f84:	40020800 	.word	0x40020800

08001f88 <FlightController_FlightLights>:
    }
}

void FlightController_FlightLights(void * ptr) {
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b09c      	sub	sp, #112	@ 0x70
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]

    /* Define flight lights sequences */
    uint8_t flightLightsSequenceA1[] = {1, 0, 0, 0, 0, 0, 0, 0};
 8001f90:	4ab2      	ldr	r2, [pc, #712]	@ (800225c <FlightController_FlightLights+0x2d4>)
 8001f92:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001f96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f9a:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceA3[] = {1, 0, 0, 0, 0, 0, 0, 0};
 8001f9e:	4aaf      	ldr	r2, [pc, #700]	@ (800225c <FlightController_FlightLights+0x2d4>)
 8001fa0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001fa4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fa8:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceA2[] = {0, 0, 1, 0, 0, 0, 0, 0};
 8001fac:	4aac      	ldr	r2, [pc, #688]	@ (8002260 <FlightController_FlightLights+0x2d8>)
 8001fae:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001fb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fb6:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceA4[] = {0, 0, 1, 0, 0, 0, 0, 0};
 8001fba:	4aa9      	ldr	r2, [pc, #676]	@ (8002260 <FlightController_FlightLights+0x2d8>)
 8001fbc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001fc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fc4:	e883 0003 	stmia.w	r3, {r0, r1}

    uint8_t flightLightsSequenceB1[] = {1, 0, 1, 0, 0, 0, 0, 0};
 8001fc8:	4aa6      	ldr	r2, [pc, #664]	@ (8002264 <FlightController_FlightLights+0x2dc>)
 8001fca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001fce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fd2:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceB3[] = {1, 0, 1, 0, 0, 0, 0, 0};
 8001fd6:	4aa3      	ldr	r2, [pc, #652]	@ (8002264 <FlightController_FlightLights+0x2dc>)
 8001fd8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001fdc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fe0:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceB2[] = {0, 0, 0, 0, 1, 0, 1, 0};
 8001fe4:	4aa0      	ldr	r2, [pc, #640]	@ (8002268 <FlightController_FlightLights+0x2e0>)
 8001fe6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001fea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fee:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceB4[] = {0, 0, 0, 0, 1, 0, 1, 0};
 8001ff2:	4a9d      	ldr	r2, [pc, #628]	@ (8002268 <FlightController_FlightLights+0x2e0>)
 8001ff4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ff8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ffc:	e883 0003 	stmia.w	r3, {r0, r1}

    uint8_t flightLightsSequenceC1[] = {1, 0, 1, 0, 0, 0, 0, 0};
 8002000:	4a98      	ldr	r2, [pc, #608]	@ (8002264 <FlightController_FlightLights+0x2dc>)
 8002002:	f107 0320 	add.w	r3, r7, #32
 8002006:	e892 0003 	ldmia.w	r2, {r0, r1}
 800200a:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceC3[] = {1, 0, 1, 0, 0, 0, 0, 0};
 800200e:	4a95      	ldr	r2, [pc, #596]	@ (8002264 <FlightController_FlightLights+0x2dc>)
 8002010:	f107 0318 	add.w	r3, r7, #24
 8002014:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002018:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceC2[] = {0, 0, 0, 0, 1, 0, 0, 0};
 800201c:	4a93      	ldr	r2, [pc, #588]	@ (800226c <FlightController_FlightLights+0x2e4>)
 800201e:	f107 0310 	add.w	r3, r7, #16
 8002022:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002026:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceC4[] = {0, 0, 0, 0, 1, 0, 0, 0};
 800202a:	4a90      	ldr	r2, [pc, #576]	@ (800226c <FlightController_FlightLights+0x2e4>)
 800202c:	f107 0308 	add.w	r3, r7, #8
 8002030:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002034:	e883 0003 	stmia.w	r3, {r0, r1}

    uint8_t flightLightsSequence = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    uint8_t flightLightsSequenceSize = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
    uint8_t flightLightsSequenceCursor = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 800204a:	23c8      	movs	r3, #200	@ 0xc8
 800204c:	66bb      	str	r3, [r7, #104]	@ 0x68

    while (1) {

        /* Turn on/off flight lights (Switch D on radio controller) */
        if (500 <= FSA8S_channelValues[9]) {
 800204e:	4b88      	ldr	r3, [pc, #544]	@ (8002270 <FlightController_FlightLights+0x2e8>)
 8002050:	8a5b      	ldrh	r3, [r3, #18]
 8002052:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002056:	f0c0 80e5 	bcc.w	8002224 <FlightController_FlightLights+0x29c>

            /* Set flight light sequence (Switch C on radio controller) */
            if (250 >= FSA8S_channelValues[8]) {
 800205a:	4b85      	ldr	r3, [pc, #532]	@ (8002270 <FlightController_FlightLights+0x2e8>)
 800205c:	8a1b      	ldrh	r3, [r3, #16]
 800205e:	2bfa      	cmp	r3, #250	@ 0xfa
 8002060:	d803      	bhi.n	800206a <FlightController_FlightLights+0xe2>

                flightLightsSequence = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8002068:	e016      	b.n	8002098 <FlightController_FlightLights+0x110>

            } else if (250 < FSA8S_channelValues[8] && 750 >= FSA8S_channelValues[8]) {
 800206a:	4b81      	ldr	r3, [pc, #516]	@ (8002270 <FlightController_FlightLights+0x2e8>)
 800206c:	8a1b      	ldrh	r3, [r3, #16]
 800206e:	2bfa      	cmp	r3, #250	@ 0xfa
 8002070:	d909      	bls.n	8002086 <FlightController_FlightLights+0xfe>
 8002072:	4b7f      	ldr	r3, [pc, #508]	@ (8002270 <FlightController_FlightLights+0x2e8>)
 8002074:	8a1b      	ldrh	r3, [r3, #16]
 8002076:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800207a:	4293      	cmp	r3, r2
 800207c:	d803      	bhi.n	8002086 <FlightController_FlightLights+0xfe>

                flightLightsSequence = 1;
 800207e:	2301      	movs	r3, #1
 8002080:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8002084:	e008      	b.n	8002098 <FlightController_FlightLights+0x110>

            } else if (750 < FSA8S_channelValues[8]) {
 8002086:	4b7a      	ldr	r3, [pc, #488]	@ (8002270 <FlightController_FlightLights+0x2e8>)
 8002088:	8a1b      	ldrh	r3, [r3, #16]
 800208a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800208e:	4293      	cmp	r3, r2
 8002090:	d902      	bls.n	8002098 <FlightController_FlightLights+0x110>

                flightLightsSequence = 2;
 8002092:	2302      	movs	r3, #2
 8002094:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
            }

            /* Set flight light sequence speed (Potentiometer B on radio controller) */
            Timer3_AutoReloadTime = 200 + FSA8S_channelValues[7] / 5;
 8002098:	4b75      	ldr	r3, [pc, #468]	@ (8002270 <FlightController_FlightLights+0x2e8>)
 800209a:	89db      	ldrh	r3, [r3, #14]
 800209c:	4a75      	ldr	r2, [pc, #468]	@ (8002274 <FlightController_FlightLights+0x2ec>)
 800209e:	fba2 2303 	umull	r2, r3, r2, r3
 80020a2:	089b      	lsrs	r3, r3, #2
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	33c8      	adds	r3, #200	@ 0xc8
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	4b73      	ldr	r3, [pc, #460]	@ (8002278 <FlightController_FlightLights+0x2f0>)
 80020ac:	801a      	strh	r2, [r3, #0]

            /* Check if timer has expired */
            if (Timer3_flag) {
 80020ae:	4b73      	ldr	r3, [pc, #460]	@ (800227c <FlightController_FlightLights+0x2f4>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 80cd 	beq.w	8002252 <FlightController_FlightLights+0x2ca>

                /* Parse flight lights sequences */
                flightLightsSequenceCursor++;
 80020b8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80020bc:	3301      	adds	r3, #1
 80020be:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
                if (flightLightsSequenceSize <= flightLightsSequenceCursor) {
 80020c2:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 80020c6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d802      	bhi.n	80020d4 <FlightController_FlightLights+0x14c>
                    flightLightsSequenceCursor = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
                }

                /* Write to flight lights */
                if (flightLightsSequence == 0) {
 80020d4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d132      	bne.n	8002142 <FlightController_FlightLights+0x1ba>

                    flightLightsSequenceSize = sizeof(flightLightsSequenceA1);
 80020dc:	2308      	movs	r3, #8
 80020de:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

                    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, flightLightsSequenceA1[flightLightsSequenceCursor]);
 80020e2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80020e6:	3370      	adds	r3, #112	@ 0x70
 80020e8:	443b      	add	r3, r7
 80020ea:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80020ee:	461a      	mov	r2, r3
 80020f0:	2104      	movs	r1, #4
 80020f2:	4863      	ldr	r0, [pc, #396]	@ (8002280 <FlightController_FlightLights+0x2f8>)
 80020f4:	f003 fcf2 	bl	8005adc <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, flightLightsSequenceA2[flightLightsSequenceCursor]);
 80020f8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80020fc:	3370      	adds	r3, #112	@ 0x70
 80020fe:	443b      	add	r3, r7
 8002100:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002104:	461a      	mov	r2, r3
 8002106:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800210a:	485d      	ldr	r0, [pc, #372]	@ (8002280 <FlightController_FlightLights+0x2f8>)
 800210c:	f003 fce6 	bl	8005adc <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, flightLightsSequenceA3[flightLightsSequenceCursor]);
 8002110:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002114:	3370      	adds	r3, #112	@ 0x70
 8002116:	443b      	add	r3, r7
 8002118:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800211c:	461a      	mov	r2, r3
 800211e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002122:	4857      	ldr	r0, [pc, #348]	@ (8002280 <FlightController_FlightLights+0x2f8>)
 8002124:	f003 fcda 	bl	8005adc <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, flightLightsSequenceA4[flightLightsSequenceCursor]);
 8002128:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800212c:	3370      	adds	r3, #112	@ 0x70
 800212e:	443b      	add	r3, r7
 8002130:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002134:	461a      	mov	r2, r3
 8002136:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800213a:	4852      	ldr	r0, [pc, #328]	@ (8002284 <FlightController_FlightLights+0x2fc>)
 800213c:	f003 fcce 	bl	8005adc <HAL_GPIO_WritePin>
 8002140:	e06c      	b.n	800221c <FlightController_FlightLights+0x294>

                } else if (flightLightsSequence == 1) {
 8002142:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002146:	2b01      	cmp	r3, #1
 8002148:	d132      	bne.n	80021b0 <FlightController_FlightLights+0x228>

                    flightLightsSequenceSize = sizeof(flightLightsSequenceB1);
 800214a:	2308      	movs	r3, #8
 800214c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

                    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, flightLightsSequenceB1[flightLightsSequenceCursor]);
 8002150:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002154:	3370      	adds	r3, #112	@ 0x70
 8002156:	443b      	add	r3, r7
 8002158:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800215c:	461a      	mov	r2, r3
 800215e:	2104      	movs	r1, #4
 8002160:	4847      	ldr	r0, [pc, #284]	@ (8002280 <FlightController_FlightLights+0x2f8>)
 8002162:	f003 fcbb 	bl	8005adc <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, flightLightsSequenceB2[flightLightsSequenceCursor]);
 8002166:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800216a:	3370      	adds	r3, #112	@ 0x70
 800216c:	443b      	add	r3, r7
 800216e:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8002172:	461a      	mov	r2, r3
 8002174:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002178:	4841      	ldr	r0, [pc, #260]	@ (8002280 <FlightController_FlightLights+0x2f8>)
 800217a:	f003 fcaf 	bl	8005adc <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, flightLightsSequenceB3[flightLightsSequenceCursor]);
 800217e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002182:	3370      	adds	r3, #112	@ 0x70
 8002184:	443b      	add	r3, r7
 8002186:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 800218a:	461a      	mov	r2, r3
 800218c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002190:	483b      	ldr	r0, [pc, #236]	@ (8002280 <FlightController_FlightLights+0x2f8>)
 8002192:	f003 fca3 	bl	8005adc <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, flightLightsSequenceB4[flightLightsSequenceCursor]);
 8002196:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800219a:	3370      	adds	r3, #112	@ 0x70
 800219c:	443b      	add	r3, r7
 800219e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80021a2:	461a      	mov	r2, r3
 80021a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80021a8:	4836      	ldr	r0, [pc, #216]	@ (8002284 <FlightController_FlightLights+0x2fc>)
 80021aa:	f003 fc97 	bl	8005adc <HAL_GPIO_WritePin>
 80021ae:	e035      	b.n	800221c <FlightController_FlightLights+0x294>

                } else if (flightLightsSequence == 2) {
 80021b0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d131      	bne.n	800221c <FlightController_FlightLights+0x294>

                    flightLightsSequenceSize = sizeof(flightLightsSequenceC1);
 80021b8:	2308      	movs	r3, #8
 80021ba:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

                    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, flightLightsSequenceC1[flightLightsSequenceCursor]);
 80021be:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80021c2:	3370      	adds	r3, #112	@ 0x70
 80021c4:	443b      	add	r3, r7
 80021c6:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 80021ca:	461a      	mov	r2, r3
 80021cc:	2104      	movs	r1, #4
 80021ce:	482c      	ldr	r0, [pc, #176]	@ (8002280 <FlightController_FlightLights+0x2f8>)
 80021d0:	f003 fc84 	bl	8005adc <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, flightLightsSequenceC2[flightLightsSequenceCursor]);
 80021d4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80021d8:	3370      	adds	r3, #112	@ 0x70
 80021da:	443b      	add	r3, r7
 80021dc:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 80021e0:	461a      	mov	r2, r3
 80021e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021e6:	4826      	ldr	r0, [pc, #152]	@ (8002280 <FlightController_FlightLights+0x2f8>)
 80021e8:	f003 fc78 	bl	8005adc <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, flightLightsSequenceC3[flightLightsSequenceCursor]);
 80021ec:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80021f0:	3370      	adds	r3, #112	@ 0x70
 80021f2:	443b      	add	r3, r7
 80021f4:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 80021f8:	461a      	mov	r2, r3
 80021fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80021fe:	4820      	ldr	r0, [pc, #128]	@ (8002280 <FlightController_FlightLights+0x2f8>)
 8002200:	f003 fc6c 	bl	8005adc <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, flightLightsSequenceC4[flightLightsSequenceCursor]);
 8002204:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002208:	3370      	adds	r3, #112	@ 0x70
 800220a:	443b      	add	r3, r7
 800220c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8002210:	461a      	mov	r2, r3
 8002212:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002216:	481b      	ldr	r0, [pc, #108]	@ (8002284 <FlightController_FlightLights+0x2fc>)
 8002218:	f003 fc60 	bl	8005adc <HAL_GPIO_WritePin>
                }

                /* Reset Timer3 flag */
                Timer3_flag = false;
 800221c:	4b17      	ldr	r3, [pc, #92]	@ (800227c <FlightController_FlightLights+0x2f4>)
 800221e:	2200      	movs	r2, #0
 8002220:	701a      	strb	r2, [r3, #0]
 8002222:	e016      	b.n	8002252 <FlightController_FlightLights+0x2ca>
            }

        } else {

            /* Turn off flight lights */
            HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8002224:	2200      	movs	r2, #0
 8002226:	2104      	movs	r1, #4
 8002228:	4815      	ldr	r0, [pc, #84]	@ (8002280 <FlightController_FlightLights+0x2f8>)
 800222a:	f003 fc57 	bl	8005adc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 800222e:	2200      	movs	r2, #0
 8002230:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002234:	4812      	ldr	r0, [pc, #72]	@ (8002280 <FlightController_FlightLights+0x2f8>)
 8002236:	f003 fc51 	bl	8005adc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 800223a:	2200      	movs	r2, #0
 800223c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002240:	480f      	ldr	r0, [pc, #60]	@ (8002280 <FlightController_FlightLights+0x2f8>)
 8002242:	f003 fc4b 	bl	8005adc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 8002246:	2200      	movs	r2, #0
 8002248:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800224c:	480d      	ldr	r0, [pc, #52]	@ (8002284 <FlightController_FlightLights+0x2fc>)
 800224e:	f003 fc45 	bl	8005adc <HAL_GPIO_WritePin>
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8002252:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002254:	f00c f8e4 	bl	800e420 <vTaskDelay>
        if (500 <= FSA8S_channelValues[9]) {
 8002258:	e6f9      	b.n	800204e <FlightController_FlightLights+0xc6>
 800225a:	bf00      	nop
 800225c:	080139e0 	.word	0x080139e0
 8002260:	080139e8 	.word	0x080139e8
 8002264:	080139f0 	.word	0x080139f0
 8002268:	080139f8 	.word	0x080139f8
 800226c:	08013a00 	.word	0x08013a00
 8002270:	20000398 	.word	0x20000398
 8002274:	cccccccd 	.word	0xcccccccd
 8002278:	20000004 	.word	0x20000004
 800227c:	2000038a 	.word	0x2000038a
 8002280:	40020400 	.word	0x40020400
 8002284:	40020800 	.word	0x40020800

08002288 <Kalman_CalculateAngle>:
    }
}

void Kalman_CalculateAngle(float * kalmanState, float * kalmanUncertainty, float kalmanInput, float kalmanMeasurement) {
 8002288:	b5b0      	push	{r4, r5, r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	ed87 0a01 	vstr	s0, [r7, #4]
 8002296:	edc7 0a00 	vstr	s1, [r7]

    float kalmanGain;

    *kalmanState = *kalmanState + CONTROL_SYSTEM_LOOP_PERIOD_S * kalmanInput;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe f95a 	bl	8000558 <__aeabi_f2d>
 80022a4:	4604      	mov	r4, r0
 80022a6:	460d      	mov	r5, r1
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7fe f955 	bl	8000558 <__aeabi_f2d>
 80022ae:	a32e      	add	r3, pc, #184	@ (adr r3, 8002368 <Kalman_CalculateAngle+0xe0>)
 80022b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b4:	f7fe f9a8 	bl	8000608 <__aeabi_dmul>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4620      	mov	r0, r4
 80022be:	4629      	mov	r1, r5
 80022c0:	f7fd ffec 	bl	800029c <__adddf3>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4610      	mov	r0, r2
 80022ca:	4619      	mov	r1, r3
 80022cc:	f7fe fc94 	bl	8000bf8 <__aeabi_d2f>
 80022d0:	4602      	mov	r2, r0
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	601a      	str	r2, [r3, #0]
    *kalmanUncertainty = *kalmanUncertainty + CONTROL_SYSTEM_LOOP_PERIOD_S * CONTROL_SYSTEM_LOOP_PERIOD_S * 4 * 4;
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe f93c 	bl	8000558 <__aeabi_f2d>
 80022e0:	a323      	add	r3, pc, #140	@ (adr r3, 8002370 <Kalman_CalculateAngle+0xe8>)
 80022e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e6:	f7fd ffd9 	bl	800029c <__adddf3>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	4610      	mov	r0, r2
 80022f0:	4619      	mov	r1, r3
 80022f2:	f7fe fc81 	bl	8000bf8 <__aeabi_d2f>
 80022f6:	4602      	mov	r2, r0
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	601a      	str	r2, [r3, #0]
    kalmanGain = *kalmanUncertainty * 1 / (1 * *kalmanUncertainty + 3 * 3);
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	edd3 6a00 	vldr	s13, [r3]
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	edd3 7a00 	vldr	s15, [r3]
 8002308:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 800230c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002310:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002314:	edc7 7a05 	vstr	s15, [r7, #20]
    *kalmanState = *kalmanState + kalmanGain * (kalmanMeasurement - *kalmanState);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	ed93 7a00 	vldr	s14, [r3]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	edd3 7a00 	vldr	s15, [r3]
 8002324:	edd7 6a00 	vldr	s13, [r7]
 8002328:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800232c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002330:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002334:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	edc3 7a00 	vstr	s15, [r3]
    *kalmanUncertainty = (1 - kalmanGain) * *kalmanUncertainty;
 800233e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002342:	edd7 7a05 	vldr	s15, [r7, #20]
 8002346:	ee37 7a67 	vsub.f32	s14, s14, s15
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	edd3 7a00 	vldr	s15, [r3]
 8002350:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	edc3 7a00 	vstr	s15, [r3]
}
 800235a:	bf00      	nop
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bdb0      	pop	{r4, r5, r7, pc}
 8002362:	bf00      	nop
 8002364:	f3af 8000 	nop.w
 8002368:	d2f1a9fc 	.word	0xd2f1a9fc
 800236c:	3f70624d 	.word	0x3f70624d
 8002370:	a0b5ed8d 	.word	0xa0b5ed8d
 8002374:	3f30c6f7 	.word	0x3f30c6f7

08002378 <CSM2_CalculatePID>:

void CSM2_CalculatePID(float * PID_Output, float * previousIterm, float * previousErrorValue, float errorValue, float kP, float kI, float kD) {
 8002378:	b5b0      	push	{r4, r5, r7, lr}
 800237a:	b08c      	sub	sp, #48	@ 0x30
 800237c:	af00      	add	r7, sp, #0
 800237e:	61f8      	str	r0, [r7, #28]
 8002380:	61b9      	str	r1, [r7, #24]
 8002382:	617a      	str	r2, [r7, #20]
 8002384:	ed87 0a04 	vstr	s0, [r7, #16]
 8002388:	edc7 0a03 	vstr	s1, [r7, #12]
 800238c:	ed87 1a02 	vstr	s2, [r7, #8]
 8002390:	edc7 1a01 	vstr	s3, [r7, #4]
    float Iterm;
    float Dterm;
    float pidOutputValue;

    /* Calculate proportional term */
    Pterm = kP * errorValue;
 8002394:	ed97 7a03 	vldr	s14, [r7, #12]
 8002398:	edd7 7a04 	vldr	s15, [r7, #16]
 800239c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    /* Calculate integral term */
    Iterm = *previousIterm + kI * ((*previousErrorValue + errorValue) / 2) * CONTROL_SYSTEM_LOOP_PERIOD_S;
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe f8d5 	bl	8000558 <__aeabi_f2d>
 80023ae:	4604      	mov	r4, r0
 80023b0:	460d      	mov	r5, r1
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	ed93 7a00 	vldr	s14, [r3]
 80023b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80023bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023c0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80023c4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80023c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80023cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d0:	ee17 0a90 	vmov	r0, s15
 80023d4:	f7fe f8c0 	bl	8000558 <__aeabi_f2d>
 80023d8:	a33b      	add	r3, pc, #236	@ (adr r3, 80024c8 <CSM2_CalculatePID+0x150>)
 80023da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023de:	f7fe f913 	bl	8000608 <__aeabi_dmul>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	4620      	mov	r0, r4
 80023e8:	4629      	mov	r1, r5
 80023ea:	f7fd ff57 	bl	800029c <__adddf3>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4610      	mov	r0, r2
 80023f4:	4619      	mov	r1, r3
 80023f6:	f7fe fbff 	bl	8000bf8 <__aeabi_d2f>
 80023fa:	4603      	mov	r3, r0
 80023fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Clamp integral term to avoid integral wind-up */
    if (-CONTROL_SYSTEM_PID_ITERM_LIMIT > Iterm) {
 80023fe:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002402:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80024d0 <CSM2_CalculatePID+0x158>
 8002406:	eef4 7ac7 	vcmpe.f32	s15, s14
 800240a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800240e:	d502      	bpl.n	8002416 <CSM2_CalculatePID+0x9e>
        Iterm = -CONTROL_SYSTEM_PID_ITERM_LIMIT;
 8002410:	4b30      	ldr	r3, [pc, #192]	@ (80024d4 <CSM2_CalculatePID+0x15c>)
 8002412:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002414:	e00a      	b.n	800242c <CSM2_CalculatePID+0xb4>
    } else if (CONTROL_SYSTEM_PID_ITERM_LIMIT < Iterm) {
 8002416:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800241a:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80024d8 <CSM2_CalculatePID+0x160>
 800241e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002426:	dd01      	ble.n	800242c <CSM2_CalculatePID+0xb4>
        Iterm = CONTROL_SYSTEM_PID_ITERM_LIMIT;
 8002428:	4b2c      	ldr	r3, [pc, #176]	@ (80024dc <CSM2_CalculatePID+0x164>)
 800242a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    /* Calculate derivative term */
    Dterm = kD * (errorValue - *previousErrorValue) / CONTROL_SYSTEM_LOOP_PERIOD_S;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	edd3 7a00 	vldr	s15, [r3]
 8002432:	ed97 7a04 	vldr	s14, [r7, #16]
 8002436:	ee37 7a67 	vsub.f32	s14, s14, s15
 800243a:	edd7 7a01 	vldr	s15, [r7, #4]
 800243e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002442:	ee17 0a90 	vmov	r0, s15
 8002446:	f7fe f887 	bl	8000558 <__aeabi_f2d>
 800244a:	a31f      	add	r3, pc, #124	@ (adr r3, 80024c8 <CSM2_CalculatePID+0x150>)
 800244c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002450:	f7fe fa04 	bl	800085c <__aeabi_ddiv>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4610      	mov	r0, r2
 800245a:	4619      	mov	r1, r3
 800245c:	f7fe fbcc 	bl	8000bf8 <__aeabi_d2f>
 8002460:	4603      	mov	r3, r0
 8002462:	623b      	str	r3, [r7, #32]

    /* Calculate PID output */
    pidOutputValue = Pterm + Iterm + Dterm;
 8002464:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002468:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800246c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002470:	ed97 7a08 	vldr	s14, [r7, #32]
 8002474:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002478:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    /* Limit the PID output */
    if (-CONTROL_SYSTEM_PID_OUTPUT_LIMIT > pidOutputValue) {
 800247c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002480:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80024d0 <CSM2_CalculatePID+0x158>
 8002484:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248c:	d502      	bpl.n	8002494 <CSM2_CalculatePID+0x11c>
        pidOutputValue = -CONTROL_SYSTEM_PID_OUTPUT_LIMIT;
 800248e:	4b11      	ldr	r3, [pc, #68]	@ (80024d4 <CSM2_CalculatePID+0x15c>)
 8002490:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002492:	e00a      	b.n	80024aa <CSM2_CalculatePID+0x132>
    } else if (CONTROL_SYSTEM_PID_OUTPUT_LIMIT < pidOutputValue) {
 8002494:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002498:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80024d8 <CSM2_CalculatePID+0x160>
 800249c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a4:	dd01      	ble.n	80024aa <CSM2_CalculatePID+0x132>
        pidOutputValue = CONTROL_SYSTEM_PID_OUTPUT_LIMIT;
 80024a6:	4b0d      	ldr	r3, [pc, #52]	@ (80024dc <CSM2_CalculatePID+0x164>)
 80024a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Return values */
    *PID_Output = pidOutputValue;
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024ae:	601a      	str	r2, [r3, #0]
    *previousErrorValue = errorValue;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	601a      	str	r2, [r3, #0]
    *previousIterm = Iterm;
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024ba:	601a      	str	r2, [r3, #0]
}
 80024bc:	bf00      	nop
 80024be:	3730      	adds	r7, #48	@ 0x30
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bdb0      	pop	{r4, r5, r7, pc}
 80024c4:	f3af 8000 	nop.w
 80024c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80024cc:	3f70624d 	.word	0x3f70624d
 80024d0:	c3c80000 	.word	0xc3c80000
 80024d4:	c3c80000 	.word	0xc3c80000
 80024d8:	43c80000 	.word	0x43c80000
 80024dc:	43c80000 	.word	0x43c80000

080024e0 <CSM3_ResetPID>:

void CSM3_CalculatePID(void) {

}

void CSM3_ResetPID(void) {
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0

#if 3 == CONTROL_SYSTEM_MODE

    /* Reset previously stored PID errors and terms values: Angles */
    previousErrorValue_rollAngle  = 0;
 80024e4:	4b16      	ldr	r3, [pc, #88]	@ (8002540 <CSM3_ResetPID+0x60>)
 80024e6:	f04f 0200 	mov.w	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
    previousErrorValue_pitchAngle = 0;
 80024ec:	4b15      	ldr	r3, [pc, #84]	@ (8002544 <CSM3_ResetPID+0x64>)
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
    previousIterm_rollAngle       = 0;
 80024f4:	4b14      	ldr	r3, [pc, #80]	@ (8002548 <CSM3_ResetPID+0x68>)
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
    previousIterm_pitchAngle      = 0;
 80024fc:	4b13      	ldr	r3, [pc, #76]	@ (800254c <CSM3_ResetPID+0x6c>)
 80024fe:	f04f 0200 	mov.w	r2, #0
 8002502:	601a      	str	r2, [r3, #0]

    /* Reset previously stored PID errors and terms values: Rates */
    previousErrorValue_rollRate   = 0;
 8002504:	4b12      	ldr	r3, [pc, #72]	@ (8002550 <CSM3_ResetPID+0x70>)
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
    previousErrorValue_pitchRate  = 0;
 800250c:	4b11      	ldr	r3, [pc, #68]	@ (8002554 <CSM3_ResetPID+0x74>)
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
    previousErrorValue_yawRate    = 0;
 8002514:	4b10      	ldr	r3, [pc, #64]	@ (8002558 <CSM3_ResetPID+0x78>)
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
    previousIterm_rollRate        = 0;
 800251c:	4b0f      	ldr	r3, [pc, #60]	@ (800255c <CSM3_ResetPID+0x7c>)
 800251e:	f04f 0200 	mov.w	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
    previousIterm_pitchRate       = 0;
 8002524:	4b0e      	ldr	r3, [pc, #56]	@ (8002560 <CSM3_ResetPID+0x80>)
 8002526:	f04f 0200 	mov.w	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
    previousIterm_yawRate         = 0;
 800252c:	4b0d      	ldr	r3, [pc, #52]	@ (8002564 <CSM3_ResetPID+0x84>)
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	601a      	str	r2, [r3, #0]

#endif
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	20000408 	.word	0x20000408
 8002544:	2000040c 	.word	0x2000040c
 8002548:	20000410 	.word	0x20000410
 800254c:	20000414 	.word	0x20000414
 8002550:	2000044c 	.word	0x2000044c
 8002554:	20000450 	.word	0x20000450
 8002558:	20000454 	.word	0x20000454
 800255c:	20000458 	.word	0x20000458
 8002560:	2000045c 	.word	0x2000045c
 8002564:	20000460 	.word	0x20000460

08002568 <Timer1_Callback>:

/* --- Private callback function implementation ------------------------------------------------ */
void Timer1_Callback(TimerHandle_t xTimer) {
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]

    /* Get no. of times this timer has expired */
    uint32_t ulCount = (uint32_t)pvTimerGetTimerID(xTimer);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f00d f8a9 	bl	800f6c8 <pvTimerGetTimerID>
 8002576:	4603      	mov	r3, r0
 8002578:	60fb      	str	r3, [r7, #12]

    /* Get timer period */
    uint32_t xTimerPeriod = xTimerGetPeriod(xTimer);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f00c fde0 	bl	800f140 <xTimerGetPeriod>
 8002580:	60b8      	str	r0, [r7, #8]

    /* Increment the count */
    ulCount++;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	3301      	adds	r3, #1
 8002586:	60fb      	str	r3, [r7, #12]

    if (ulCount >= (pdMS_TO_TICKS(Timer1_AutoReloadTime) / xTimerPeriod)) {
 8002588:	4b26      	ldr	r3, [pc, #152]	@ (8002624 <Timer1_Callback+0xbc>)
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	461a      	mov	r2, r3
 800258e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002592:	fb02 f303 	mul.w	r3, r2, r3
 8002596:	4a24      	ldr	r2, [pc, #144]	@ (8002628 <Timer1_Callback+0xc0>)
 8002598:	fba2 2303 	umull	r2, r3, r2, r3
 800259c:	099a      	lsrs	r2, r3, #6
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d333      	bcc.n	8002612 <Timer1_Callback+0xaa>
        /* Check if On/Off Button is still pressed after 3 seconds */
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 80025aa:	2120      	movs	r1, #32
 80025ac:	481f      	ldr	r0, [pc, #124]	@ (800262c <Timer1_Callback+0xc4>)
 80025ae:	f003 fa7d 	bl	8005aac <HAL_GPIO_ReadPin>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d124      	bne.n	8002602 <Timer1_Callback+0x9a>

            if (!FlightController_isRunning) {
 80025b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002630 <Timer1_Callback+0xc8>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	f083 0301 	eor.w	r3, r3, #1
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d008      	beq.n	80025d8 <Timer1_Callback+0x70>
                /* Flight controller was off */
                /* User turned it on */
                /* Turn on flight controller */
                HAL_GPIO_WritePin(PW_ON_OFF_DRIVER_OUTPUT_GPIO_Port, PW_ON_OFF_DRIVER_OUTPUT_Pin, 1);
 80025c6:	2201      	movs	r2, #1
 80025c8:	2110      	movs	r1, #16
 80025ca:	4818      	ldr	r0, [pc, #96]	@ (800262c <Timer1_Callback+0xc4>)
 80025cc:	f003 fa86 	bl	8005adc <HAL_GPIO_WritePin>

                FlightController_isRunning = true;
 80025d0:	4b17      	ldr	r3, [pc, #92]	@ (8002630 <Timer1_Callback+0xc8>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	701a      	strb	r2, [r3, #0]
 80025d6:	e014      	b.n	8002602 <Timer1_Callback+0x9a>
            } else {
                /* Flight controller was on */
                /* User turned it off */
                /* Suspend HeartbeatLight task and turn on-board LED on */
                vTaskSuspend(FlightController_HeartbeatLight_Handle);
 80025d8:	4b16      	ldr	r3, [pc, #88]	@ (8002634 <Timer1_Callback+0xcc>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f00b ff55 	bl	800e48c <vTaskSuspend>
                HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80025e2:	2200      	movs	r2, #0
 80025e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80025e8:	4813      	ldr	r0, [pc, #76]	@ (8002638 <Timer1_Callback+0xd0>)
 80025ea:	f003 fa77 	bl	8005adc <HAL_GPIO_WritePin>

                FlightController_isRunning = false;
 80025ee:	4b10      	ldr	r3, [pc, #64]	@ (8002630 <Timer1_Callback+0xc8>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]

                /* Turn off flight controller */
                HAL_GPIO_WritePin(PW_ON_OFF_DRIVER_OUTPUT_GPIO_Port, PW_ON_OFF_DRIVER_OUTPUT_Pin, 0);
 80025f4:	2200      	movs	r2, #0
 80025f6:	2110      	movs	r1, #16
 80025f8:	480c      	ldr	r0, [pc, #48]	@ (800262c <Timer1_Callback+0xc4>)
 80025fa:	f003 fa6f 	bl	8005adc <HAL_GPIO_WritePin>

                /* Next line will execute only if USB power is connected */
                /* Reset micro-controller */
                HAL_NVIC_SystemReset();
 80025fe:	f002 feda 	bl	80053b6 <HAL_NVIC_SystemReset>
            }
        }

        /* Reset timer count */
        vTimerSetTimerID(xTimer, (void *)0);
 8002602:	2100      	movs	r1, #0
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f00d f880 	bl	800f70a <vTimerSetTimerID>

        /* Reset running flag */
        Timer1_running = false;
 800260a:	4b0c      	ldr	r3, [pc, #48]	@ (800263c <Timer1_Callback+0xd4>)
 800260c:	2200      	movs	r2, #0
 800260e:	701a      	strb	r2, [r3, #0]
    } else {
        /* Store the incremented count back into the timer's ID */
        vTimerSetTimerID(xTimer, (void *)ulCount);
    }
}
 8002610:	e004      	b.n	800261c <Timer1_Callback+0xb4>
        vTimerSetTimerID(xTimer, (void *)ulCount);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4619      	mov	r1, r3
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f00d f877 	bl	800f70a <vTimerSetTimerID>
}
 800261c:	bf00      	nop
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20000000 	.word	0x20000000
 8002628:	10624dd3 	.word	0x10624dd3
 800262c:	40020400 	.word	0x40020400
 8002630:	20000354 	.word	0x20000354
 8002634:	20000370 	.word	0x20000370
 8002638:	40020800 	.word	0x40020800
 800263c:	20000388 	.word	0x20000388

08002640 <Timer2_Callback>:

void Timer2_Callback(TimerHandle_t xTimer) {
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]

    /* Get no. of times this timer has expired */
    uint32_t ulCount = (uint32_t)pvTimerGetTimerID(xTimer);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f00d f83d 	bl	800f6c8 <pvTimerGetTimerID>
 800264e:	4603      	mov	r3, r0
 8002650:	60fb      	str	r3, [r7, #12]

    /* Get timer period */
    uint32_t xTimerPeriod = xTimerGetPeriod(xTimer);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f00c fd74 	bl	800f140 <xTimerGetPeriod>
 8002658:	60b8      	str	r0, [r7, #8]

    /* Increment the count */
    ulCount++;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	3301      	adds	r3, #1
 800265e:	60fb      	str	r3, [r7, #12]

    if (ulCount >= (pdMS_TO_TICKS(Timer2_AutoReloadTime) / xTimerPeriod)) {
 8002660:	4b10      	ldr	r3, [pc, #64]	@ (80026a4 <Timer2_Callback+0x64>)
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	461a      	mov	r2, r3
 8002666:	f242 7310 	movw	r3, #10000	@ 0x2710
 800266a:	fb02 f303 	mul.w	r3, r2, r3
 800266e:	4a0e      	ldr	r2, [pc, #56]	@ (80026a8 <Timer2_Callback+0x68>)
 8002670:	fba2 2303 	umull	r2, r3, r2, r3
 8002674:	099a      	lsrs	r2, r3, #6
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	fbb2 f3f3 	udiv	r3, r2, r3
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	429a      	cmp	r2, r3
 8002680:	d307      	bcc.n	8002692 <Timer2_Callback+0x52>

        /* Set Timer2 flag to true */
        Timer2_flag = true;
 8002682:	4b0a      	ldr	r3, [pc, #40]	@ (80026ac <Timer2_Callback+0x6c>)
 8002684:	2201      	movs	r2, #1
 8002686:	701a      	strb	r2, [r3, #0]

        /* Reset timer count */
        vTimerSetTimerID(xTimer, (void *)0);
 8002688:	2100      	movs	r1, #0
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f00d f83d 	bl	800f70a <vTimerSetTimerID>

    } else {
        /* Store the incremented count back into the timer's ID */
        vTimerSetTimerID(xTimer, (void *)ulCount);
    }
}
 8002690:	e004      	b.n	800269c <Timer2_Callback+0x5c>
        vTimerSetTimerID(xTimer, (void *)ulCount);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4619      	mov	r1, r3
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f00d f837 	bl	800f70a <vTimerSetTimerID>
}
 800269c:	bf00      	nop
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	20000002 	.word	0x20000002
 80026a8:	10624dd3 	.word	0x10624dd3
 80026ac:	20000389 	.word	0x20000389

080026b0 <Timer3_Callback>:

void Timer3_Callback(TimerHandle_t xTimer) {
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]

    /* Get no. of times this timer has expired */
    uint32_t ulCount = (uint32_t)pvTimerGetTimerID(xTimer);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f00d f805 	bl	800f6c8 <pvTimerGetTimerID>
 80026be:	4603      	mov	r3, r0
 80026c0:	60fb      	str	r3, [r7, #12]

    /* Get timer period */
    uint32_t xTimerPeriod = xTimerGetPeriod(xTimer);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f00c fd3c 	bl	800f140 <xTimerGetPeriod>
 80026c8:	60b8      	str	r0, [r7, #8]

    /* Increment the count */
    ulCount++;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	3301      	adds	r3, #1
 80026ce:	60fb      	str	r3, [r7, #12]

    if (ulCount >= (pdMS_TO_TICKS(Timer3_AutoReloadTime) / xTimerPeriod)) {
 80026d0:	4b10      	ldr	r3, [pc, #64]	@ (8002714 <Timer3_Callback+0x64>)
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	461a      	mov	r2, r3
 80026d6:	f242 7310 	movw	r3, #10000	@ 0x2710
 80026da:	fb02 f303 	mul.w	r3, r2, r3
 80026de:	4a0e      	ldr	r2, [pc, #56]	@ (8002718 <Timer3_Callback+0x68>)
 80026e0:	fba2 2303 	umull	r2, r3, r2, r3
 80026e4:	099a      	lsrs	r2, r3, #6
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d307      	bcc.n	8002702 <Timer3_Callback+0x52>

        /* Set Timer3 flag to true */
        Timer3_flag = true;
 80026f2:	4b0a      	ldr	r3, [pc, #40]	@ (800271c <Timer3_Callback+0x6c>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	701a      	strb	r2, [r3, #0]

        /* Reset timer count */
        vTimerSetTimerID(xTimer, (void *)0);
 80026f8:	2100      	movs	r1, #0
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f00d f805 	bl	800f70a <vTimerSetTimerID>

    } else {
        /* Store the incremented count back into the timer's ID */
        vTimerSetTimerID(xTimer, (void *)ulCount);
    }
}
 8002700:	e004      	b.n	800270c <Timer3_Callback+0x5c>
        vTimerSetTimerID(xTimer, (void *)ulCount);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	4619      	mov	r1, r3
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f00c ffff 	bl	800f70a <vTimerSetTimerID>
}
 800270c:	bf00      	nop
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20000004 	.word	0x20000004
 8002718:	10624dd3 	.word	0x10624dd3
 800271c:	2000038a 	.word	0x2000038a

08002720 <Timer4_Callback>:

void Timer4_Callback(TimerHandle_t xTimer) {
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]

    /* Get no. of times this timer has expired */
    uint32_t ulCount = (uint32_t)pvTimerGetTimerID(xTimer);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f00c ffcd 	bl	800f6c8 <pvTimerGetTimerID>
 800272e:	4603      	mov	r3, r0
 8002730:	60fb      	str	r3, [r7, #12]

    /* Get timer period */
    uint32_t xTimerPeriod = xTimerGetPeriod(xTimer);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f00c fd04 	bl	800f140 <xTimerGetPeriod>
 8002738:	60b8      	str	r0, [r7, #8]

    /* Increment the count */
    ulCount++;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	3301      	adds	r3, #1
 800273e:	60fb      	str	r3, [r7, #12]

    if (ulCount >= (pdMS_TO_TICKS(Timer4_AutoReloadTime) / xTimerPeriod)) {
 8002740:	4b10      	ldr	r3, [pc, #64]	@ (8002784 <Timer4_Callback+0x64>)
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	461a      	mov	r2, r3
 8002746:	f242 7310 	movw	r3, #10000	@ 0x2710
 800274a:	fb02 f303 	mul.w	r3, r2, r3
 800274e:	4a0e      	ldr	r2, [pc, #56]	@ (8002788 <Timer4_Callback+0x68>)
 8002750:	fba2 2303 	umull	r2, r3, r2, r3
 8002754:	099a      	lsrs	r2, r3, #6
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	fbb2 f3f3 	udiv	r3, r2, r3
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	429a      	cmp	r2, r3
 8002760:	d307      	bcc.n	8002772 <Timer4_Callback+0x52>

        /* Set Timer3 flag to true */
        Timer4_flag = true;
 8002762:	4b0a      	ldr	r3, [pc, #40]	@ (800278c <Timer4_Callback+0x6c>)
 8002764:	2201      	movs	r2, #1
 8002766:	701a      	strb	r2, [r3, #0]

        /* Reset timer count */
        vTimerSetTimerID(xTimer, (void *)0);
 8002768:	2100      	movs	r1, #0
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f00c ffcd 	bl	800f70a <vTimerSetTimerID>

    } else {
        /* Store the incremented count back into the timer's ID */
        vTimerSetTimerID(xTimer, (void *)ulCount);
    }
}
 8002770:	e004      	b.n	800277c <Timer4_Callback+0x5c>
        vTimerSetTimerID(xTimer, (void *)ulCount);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	4619      	mov	r1, r3
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f00c ffc7 	bl	800f70a <vTimerSetTimerID>
}
 800277c:	bf00      	nop
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	20000006 	.word	0x20000006
 8002788:	10624dd3 	.word	0x10624dd3
 800278c:	2000038b 	.word	0x2000038b

08002790 <FlightController_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
void FlightController_Init(void) {
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0

    /* Create start-up tasks and timers */
    FreeRTOS_CreateStartUpTasks();
 8002794:	f7fe fbf8 	bl	8000f88 <FreeRTOS_CreateStartUpTasks>
}
 8002798:	bf00      	nop
 800279a:	bd80      	pop	{r7, pc}

0800279c <vApplicationGetIdleTaskMemory>:

/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t ** ppxIdleTaskTCBBuffer, StackType_t ** ppxIdleTaskStackBuffer, uint32_t * pulIdleTaskStackSize) {
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4a07      	ldr	r2, [pc, #28]	@ (80027c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80027ac:	601a      	str	r2, [r3, #0]
    *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	4a06      	ldr	r2, [pc, #24]	@ (80027cc <vApplicationGetIdleTaskMemory+0x30>)
 80027b2:	601a      	str	r2, [r3, #0]
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2280      	movs	r2, #128	@ 0x80
 80027b8:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 80027ba:	bf00      	nop
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	2000049c 	.word	0x2000049c
 80027cc:	20000518 	.word	0x20000518

080027d0 <vApplicationGetTimerTaskMemory>:

/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory(StaticTask_t ** ppxTimerTaskTCBBuffer, StackType_t ** ppxTimerTaskStackBuffer, uint32_t * pulTimerTaskStackSize) {
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4a07      	ldr	r2, [pc, #28]	@ (80027fc <vApplicationGetTimerTaskMemory+0x2c>)
 80027e0:	601a      	str	r2, [r3, #0]
    *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	4a06      	ldr	r2, [pc, #24]	@ (8002800 <vApplicationGetTimerTaskMemory+0x30>)
 80027e6:	601a      	str	r2, [r3, #0]
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027ee:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 80027f0:	bf00      	nop
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	20000718 	.word	0x20000718
 8002800:	20000794 	.word	0x20000794

08002804 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002804:	b5b0      	push	{r4, r5, r7, lr}
 8002806:	b088      	sub	sp, #32
 8002808:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800280a:	f002 f875 	bl	80048f8 <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800280e:	f000 f827 	bl	8002860 <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8002812:	f000 f9cd 	bl	8002bb0 <MX_GPIO_Init>
    MX_DMA_Init();
 8002816:	f000 f9b1 	bl	8002b7c <MX_DMA_Init>
    MX_USART2_UART_Init();
 800281a:	f000 f985 	bl	8002b28 <MX_USART2_UART_Init>
    MX_I2C1_Init();
 800281e:	f000 f8db 	bl	80029d8 <MX_I2C1_Init>
    MX_TIM3_Init();
 8002822:	f000 f907 	bl	8002a34 <MX_TIM3_Init>
    MX_ADC1_Init();
 8002826:	f000 f885 	bl	8002934 <MX_ADC1_Init>
    /* USER CODE BEGIN 2 */

    // Initialize Flight Controller
    FlightController_Init();
 800282a:	f7ff ffb1 	bl	8002790 <FlightController_Init>
    /* add queues, ... */
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* definition and creation of defaultTask */
    osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800282e:	4b0a      	ldr	r3, [pc, #40]	@ (8002858 <main+0x54>)
 8002830:	1d3c      	adds	r4, r7, #4
 8002832:	461d      	mov	r5, r3
 8002834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002836:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002838:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800283c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002840:	1d3b      	adds	r3, r7, #4
 8002842:	2100      	movs	r1, #0
 8002844:	4618      	mov	r0, r3
 8002846:	f00a fdca 	bl	800d3de <osThreadCreate>
 800284a:	4603      	mov	r3, r0
 800284c:	4a03      	ldr	r2, [pc, #12]	@ (800285c <main+0x58>)
 800284e:	6013      	str	r3, [r2, #0]
    /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
    /* USER CODE END RTOS_THREADS */

    /* Start scheduler */
    osKernelStart();
 8002850:	f00a fdbe 	bl	800d3d0 <osKernelStart>
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    while (1) {
 8002854:	bf00      	nop
 8002856:	e7fd      	b.n	8002854 <main+0x50>
 8002858:	08013a14 	.word	0x08013a14
 800285c:	20000d1c 	.word	0x20000d1c

08002860 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002860:	b580      	push	{r7, lr}
 8002862:	b094      	sub	sp, #80	@ 0x50
 8002864:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002866:	f107 0320 	add.w	r3, r7, #32
 800286a:	2230      	movs	r2, #48	@ 0x30
 800286c:	2100      	movs	r1, #0
 800286e:	4618      	mov	r0, r3
 8002870:	f00e fd2b 	bl	80112ca <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002874:	f107 030c 	add.w	r3, r7, #12
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	605a      	str	r2, [r3, #4]
 800287e:	609a      	str	r2, [r3, #8]
 8002880:	60da      	str	r2, [r3, #12]
 8002882:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8002884:	2300      	movs	r3, #0
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	4b28      	ldr	r3, [pc, #160]	@ (800292c <SystemClock_Config+0xcc>)
 800288a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288c:	4a27      	ldr	r2, [pc, #156]	@ (800292c <SystemClock_Config+0xcc>)
 800288e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002892:	6413      	str	r3, [r2, #64]	@ 0x40
 8002894:	4b25      	ldr	r3, [pc, #148]	@ (800292c <SystemClock_Config+0xcc>)
 8002896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80028a0:	2300      	movs	r3, #0
 80028a2:	607b      	str	r3, [r7, #4]
 80028a4:	4b22      	ldr	r3, [pc, #136]	@ (8002930 <SystemClock_Config+0xd0>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80028ac:	4a20      	ldr	r2, [pc, #128]	@ (8002930 <SystemClock_Config+0xd0>)
 80028ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028b2:	6013      	str	r3, [r2, #0]
 80028b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002930 <SystemClock_Config+0xd0>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80028bc:	607b      	str	r3, [r7, #4]
 80028be:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028c0:	2301      	movs	r3, #1
 80028c2:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028c8:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028ca:	2302      	movs	r3, #2
 80028cc:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80028d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 25;
 80028d4:	2319      	movs	r3, #25
 80028d6:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 144;
 80028d8:	2390      	movs	r3, #144	@ 0x90
 80028da:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028dc:	2302      	movs	r3, #2
 80028de:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 3;
 80028e0:	2303      	movs	r3, #3
 80028e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80028e4:	f107 0320 	add.w	r3, r7, #32
 80028e8:	4618      	mov	r0, r3
 80028ea:	f005 fb4d 	bl	8007f88 <HAL_RCC_OscConfig>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <SystemClock_Config+0x98>
        Error_Handler();
 80028f4:	f000 fa01 	bl	8002cfa <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80028f8:	230f      	movs	r3, #15
 80028fa:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028fc:	2302      	movs	r3, #2
 80028fe:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002904:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002908:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800290a:	2300      	movs	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800290e:	f107 030c 	add.w	r3, r7, #12
 8002912:	2102      	movs	r1, #2
 8002914:	4618      	mov	r0, r3
 8002916:	f005 fdaf 	bl	8008478 <HAL_RCC_ClockConfig>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <SystemClock_Config+0xc4>
        Error_Handler();
 8002920:	f000 f9eb 	bl	8002cfa <Error_Handler>
    }
}
 8002924:	bf00      	nop
 8002926:	3750      	adds	r7, #80	@ 0x50
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40023800 	.word	0x40023800
 8002930:	40007000 	.word	0x40007000

08002934 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = {0};
 800293a:	463b      	mov	r3, r7
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	605a      	str	r2, [r3, #4]
 8002942:	609a      	str	r2, [r3, #8]
 8002944:	60da      	str	r2, [r3, #12]

    /* USER CODE END ADC1_Init 1 */

    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
     */
    hadc1.Instance = ADC1;
 8002946:	4b21      	ldr	r3, [pc, #132]	@ (80029cc <MX_ADC1_Init+0x98>)
 8002948:	4a21      	ldr	r2, [pc, #132]	@ (80029d0 <MX_ADC1_Init+0x9c>)
 800294a:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800294c:	4b1f      	ldr	r3, [pc, #124]	@ (80029cc <MX_ADC1_Init+0x98>)
 800294e:	2200      	movs	r2, #0
 8002950:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002952:	4b1e      	ldr	r3, [pc, #120]	@ (80029cc <MX_ADC1_Init+0x98>)
 8002954:	2200      	movs	r2, #0
 8002956:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = DISABLE;
 8002958:	4b1c      	ldr	r3, [pc, #112]	@ (80029cc <MX_ADC1_Init+0x98>)
 800295a:	2200      	movs	r2, #0
 800295c:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = DISABLE;
 800295e:	4b1b      	ldr	r3, [pc, #108]	@ (80029cc <MX_ADC1_Init+0x98>)
 8002960:	2200      	movs	r2, #0
 8002962:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002964:	4b19      	ldr	r3, [pc, #100]	@ (80029cc <MX_ADC1_Init+0x98>)
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800296c:	4b17      	ldr	r3, [pc, #92]	@ (80029cc <MX_ADC1_Init+0x98>)
 800296e:	2200      	movs	r2, #0
 8002970:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002972:	4b16      	ldr	r3, [pc, #88]	@ (80029cc <MX_ADC1_Init+0x98>)
 8002974:	4a17      	ldr	r2, [pc, #92]	@ (80029d4 <MX_ADC1_Init+0xa0>)
 8002976:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002978:	4b14      	ldr	r3, [pc, #80]	@ (80029cc <MX_ADC1_Init+0x98>)
 800297a:	2200      	movs	r2, #0
 800297c:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 800297e:	4b13      	ldr	r3, [pc, #76]	@ (80029cc <MX_ADC1_Init+0x98>)
 8002980:	2201      	movs	r2, #1
 8002982:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8002984:	4b11      	ldr	r3, [pc, #68]	@ (80029cc <MX_ADC1_Init+0x98>)
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800298c:	4b0f      	ldr	r3, [pc, #60]	@ (80029cc <MX_ADC1_Init+0x98>)
 800298e:	2201      	movs	r2, #1
 8002990:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002992:	480e      	ldr	r0, [pc, #56]	@ (80029cc <MX_ADC1_Init+0x98>)
 8002994:	f002 f846 	bl	8004a24 <HAL_ADC_Init>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <MX_ADC1_Init+0x6e>
        Error_Handler();
 800299e:	f000 f9ac 	bl	8002cfa <Error_Handler>
    }

    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
     */
    sConfig.Channel = ADC_CHANNEL_0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 80029a6:	2301      	movs	r3, #1
 80029a8:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80029aa:	2300      	movs	r3, #0
 80029ac:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80029ae:	463b      	mov	r3, r7
 80029b0:	4619      	mov	r1, r3
 80029b2:	4806      	ldr	r0, [pc, #24]	@ (80029cc <MX_ADC1_Init+0x98>)
 80029b4:	f002 f9c6 	bl	8004d44 <HAL_ADC_ConfigChannel>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <MX_ADC1_Init+0x8e>
        Error_Handler();
 80029be:	f000 f99c 	bl	8002cfa <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */
}
 80029c2:	bf00      	nop
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000b94 	.word	0x20000b94
 80029d0:	40012000 	.word	0x40012000
 80029d4:	0f000001 	.word	0x0f000001

080029d8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 80029dc:	4b12      	ldr	r3, [pc, #72]	@ (8002a28 <MX_I2C1_Init+0x50>)
 80029de:	4a13      	ldr	r2, [pc, #76]	@ (8002a2c <MX_I2C1_Init+0x54>)
 80029e0:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 80029e2:	4b11      	ldr	r3, [pc, #68]	@ (8002a28 <MX_I2C1_Init+0x50>)
 80029e4:	4a12      	ldr	r2, [pc, #72]	@ (8002a30 <MX_I2C1_Init+0x58>)
 80029e6:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002a28 <MX_I2C1_Init+0x50>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 80029ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002a28 <MX_I2C1_Init+0x50>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002a28 <MX_I2C1_Init+0x50>)
 80029f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80029fa:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002a28 <MX_I2C1_Init+0x50>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8002a02:	4b09      	ldr	r3, [pc, #36]	@ (8002a28 <MX_I2C1_Init+0x50>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a08:	4b07      	ldr	r3, [pc, #28]	@ (8002a28 <MX_I2C1_Init+0x50>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a0e:	4b06      	ldr	r3, [pc, #24]	@ (8002a28 <MX_I2C1_Init+0x50>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002a14:	4804      	ldr	r0, [pc, #16]	@ (8002a28 <MX_I2C1_Init+0x50>)
 8002a16:	f003 f87b 	bl	8005b10 <HAL_I2C_Init>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <MX_I2C1_Init+0x4c>
        Error_Handler();
 8002a20:	f000 f96b 	bl	8002cfa <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */
}
 8002a24:	bf00      	nop
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20000bdc 	.word	0x20000bdc
 8002a2c:	40005400 	.word	0x40005400
 8002a30:	000186a0 	.word	0x000186a0

08002a34 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08a      	sub	sp, #40	@ 0x28
 8002a38:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a3a:	f107 0320 	add.w	r3, r7, #32
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8002a44:	1d3b      	adds	r3, r7, #4
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	605a      	str	r2, [r3, #4]
 8002a4c:	609a      	str	r2, [r3, #8]
 8002a4e:	60da      	str	r2, [r3, #12]
 8002a50:	611a      	str	r2, [r3, #16]
 8002a52:	615a      	str	r2, [r3, #20]
 8002a54:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 8002a56:	4b32      	ldr	r3, [pc, #200]	@ (8002b20 <MX_TIM3_Init+0xec>)
 8002a58:	4a32      	ldr	r2, [pc, #200]	@ (8002b24 <MX_TIM3_Init+0xf0>)
 8002a5a:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 20;
 8002a5c:	4b30      	ldr	r3, [pc, #192]	@ (8002b20 <MX_TIM3_Init+0xec>)
 8002a5e:	2214      	movs	r2, #20
 8002a60:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a62:	4b2f      	ldr	r3, [pc, #188]	@ (8002b20 <MX_TIM3_Init+0xec>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 65535;
 8002a68:	4b2d      	ldr	r3, [pc, #180]	@ (8002b20 <MX_TIM3_Init+0xec>)
 8002a6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a6e:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a70:	4b2b      	ldr	r3, [pc, #172]	@ (8002b20 <MX_TIM3_Init+0xec>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a76:	4b2a      	ldr	r3, [pc, #168]	@ (8002b20 <MX_TIM3_Init+0xec>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8002a7c:	4828      	ldr	r0, [pc, #160]	@ (8002b20 <MX_TIM3_Init+0xec>)
 8002a7e:	f005 fedb 	bl	8008838 <HAL_TIM_PWM_Init>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <MX_TIM3_Init+0x58>
        Error_Handler();
 8002a88:	f000 f937 	bl	8002cfa <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a90:	2300      	movs	r3, #0
 8002a92:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8002a94:	f107 0320 	add.w	r3, r7, #32
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4821      	ldr	r0, [pc, #132]	@ (8002b20 <MX_TIM3_Init+0xec>)
 8002a9c:	f006 fac0 	bl	8009020 <HAL_TIMEx_MasterConfigSynchronization>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_TIM3_Init+0x76>
        Error_Handler();
 8002aa6:	f000 f928 	bl	8002cfa <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002aaa:	2360      	movs	r3, #96	@ 0x60
 8002aac:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8002aba:	1d3b      	adds	r3, r7, #4
 8002abc:	2200      	movs	r2, #0
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4817      	ldr	r0, [pc, #92]	@ (8002b20 <MX_TIM3_Init+0xec>)
 8002ac2:	f005 ffb9 	bl	8008a38 <HAL_TIM_PWM_ConfigChannel>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_TIM3_Init+0x9c>
        Error_Handler();
 8002acc:	f000 f915 	bl	8002cfa <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8002ad0:	1d3b      	adds	r3, r7, #4
 8002ad2:	2204      	movs	r2, #4
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4812      	ldr	r0, [pc, #72]	@ (8002b20 <MX_TIM3_Init+0xec>)
 8002ad8:	f005 ffae 	bl	8008a38 <HAL_TIM_PWM_ConfigChannel>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_TIM3_Init+0xb2>
        Error_Handler();
 8002ae2:	f000 f90a 	bl	8002cfa <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8002ae6:	1d3b      	adds	r3, r7, #4
 8002ae8:	2208      	movs	r2, #8
 8002aea:	4619      	mov	r1, r3
 8002aec:	480c      	ldr	r0, [pc, #48]	@ (8002b20 <MX_TIM3_Init+0xec>)
 8002aee:	f005 ffa3 	bl	8008a38 <HAL_TIM_PWM_ConfigChannel>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <MX_TIM3_Init+0xc8>
        Error_Handler();
 8002af8:	f000 f8ff 	bl	8002cfa <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 8002afc:	1d3b      	adds	r3, r7, #4
 8002afe:	220c      	movs	r2, #12
 8002b00:	4619      	mov	r1, r3
 8002b02:	4807      	ldr	r0, [pc, #28]	@ (8002b20 <MX_TIM3_Init+0xec>)
 8002b04:	f005 ff98 	bl	8008a38 <HAL_TIM_PWM_ConfigChannel>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <MX_TIM3_Init+0xde>
        Error_Handler();
 8002b0e:	f000 f8f4 	bl	8002cfa <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */
    HAL_TIM_MspPostInit(&htim3);
 8002b12:	4803      	ldr	r0, [pc, #12]	@ (8002b20 <MX_TIM3_Init+0xec>)
 8002b14:	f000 f9d2 	bl	8002ebc <HAL_TIM_MspPostInit>
}
 8002b18:	bf00      	nop
 8002b1a:	3728      	adds	r7, #40	@ 0x28
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	20000c30 	.word	0x20000c30
 8002b24:	40000400 	.word	0x40000400

08002b28 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART2_Init 0 */
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */
    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8002b2c:	4b11      	ldr	r3, [pc, #68]	@ (8002b74 <MX_USART2_UART_Init+0x4c>)
 8002b2e:	4a12      	ldr	r2, [pc, #72]	@ (8002b78 <MX_USART2_UART_Init+0x50>)
 8002b30:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8002b32:	4b10      	ldr	r3, [pc, #64]	@ (8002b74 <MX_USART2_UART_Init+0x4c>)
 8002b34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b38:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b74 <MX_USART2_UART_Init+0x4c>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8002b40:	4b0c      	ldr	r3, [pc, #48]	@ (8002b74 <MX_USART2_UART_Init+0x4c>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8002b46:	4b0b      	ldr	r3, [pc, #44]	@ (8002b74 <MX_USART2_UART_Init+0x4c>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_RX;
 8002b4c:	4b09      	ldr	r3, [pc, #36]	@ (8002b74 <MX_USART2_UART_Init+0x4c>)
 8002b4e:	2204      	movs	r2, #4
 8002b50:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b52:	4b08      	ldr	r3, [pc, #32]	@ (8002b74 <MX_USART2_UART_Init+0x4c>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b58:	4b06      	ldr	r3, [pc, #24]	@ (8002b74 <MX_USART2_UART_Init+0x4c>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002b5e:	4805      	ldr	r0, [pc, #20]	@ (8002b74 <MX_USART2_UART_Init+0x4c>)
 8002b60:	f006 facc 	bl	80090fc <HAL_UART_Init>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <MX_USART2_UART_Init+0x46>
        Error_Handler();
 8002b6a:	f000 f8c6 	bl	8002cfa <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */
    /* USER CODE END USART2_Init 2 */
}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20000c78 	.word	0x20000c78
 8002b78:	40004400 	.word	0x40004400

08002b7c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	607b      	str	r3, [r7, #4]
 8002b86:	4b09      	ldr	r3, [pc, #36]	@ (8002bac <MX_DMA_Init+0x30>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8a:	4a08      	ldr	r2, [pc, #32]	@ (8002bac <MX_DMA_Init+0x30>)
 8002b8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b92:	4b06      	ldr	r3, [pc, #24]	@ (8002bac <MX_DMA_Init+0x30>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b9a:	607b      	str	r3, [r7, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	40023800 	.word	0x40023800

08002bb0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08a      	sub	sp, #40	@ 0x28
 8002bb4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb6:	f107 0314 	add.w	r3, r7, #20
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	605a      	str	r2, [r3, #4]
 8002bc0:	609a      	str	r2, [r3, #8]
 8002bc2:	60da      	str	r2, [r3, #12]
 8002bc4:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	613b      	str	r3, [r7, #16]
 8002bca:	4b42      	ldr	r3, [pc, #264]	@ (8002cd4 <MX_GPIO_Init+0x124>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bce:	4a41      	ldr	r2, [pc, #260]	@ (8002cd4 <MX_GPIO_Init+0x124>)
 8002bd0:	f043 0304 	orr.w	r3, r3, #4
 8002bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bd6:	4b3f      	ldr	r3, [pc, #252]	@ (8002cd4 <MX_GPIO_Init+0x124>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bda:	f003 0304 	and.w	r3, r3, #4
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	4b3b      	ldr	r3, [pc, #236]	@ (8002cd4 <MX_GPIO_Init+0x124>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bea:	4a3a      	ldr	r2, [pc, #232]	@ (8002cd4 <MX_GPIO_Init+0x124>)
 8002bec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bf2:	4b38      	ldr	r3, [pc, #224]	@ (8002cd4 <MX_GPIO_Init+0x124>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	4b34      	ldr	r3, [pc, #208]	@ (8002cd4 <MX_GPIO_Init+0x124>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c06:	4a33      	ldr	r2, [pc, #204]	@ (8002cd4 <MX_GPIO_Init+0x124>)
 8002c08:	f043 0301 	orr.w	r3, r3, #1
 8002c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c0e:	4b31      	ldr	r3, [pc, #196]	@ (8002cd4 <MX_GPIO_Init+0x124>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	607b      	str	r3, [r7, #4]
 8002c1e:	4b2d      	ldr	r3, [pc, #180]	@ (8002cd4 <MX_GPIO_Init+0x124>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c22:	4a2c      	ldr	r2, [pc, #176]	@ (8002cd4 <MX_GPIO_Init+0x124>)
 8002c24:	f043 0302 	orr.w	r3, r3, #2
 8002c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c2a:	4b2a      	ldr	r3, [pc, #168]	@ (8002cd4 <MX_GPIO_Init+0x124>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	607b      	str	r3, [r7, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, LED_Pin | LED4_Pin, GPIO_PIN_RESET);
 8002c36:	2200      	movs	r2, #0
 8002c38:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002c3c:	4826      	ldr	r0, [pc, #152]	@ (8002cd8 <MX_GPIO_Init+0x128>)
 8002c3e:	f002 ff4d 	bl	8005adc <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED3_Pin | PW_ON_OFF_DRIVER_OUTPUT_Pin | LED2_Pin, GPIO_PIN_RESET);
 8002c42:	2200      	movs	r2, #0
 8002c44:	f241 1114 	movw	r1, #4372	@ 0x1114
 8002c48:	4824      	ldr	r0, [pc, #144]	@ (8002cdc <MX_GPIO_Init+0x12c>)
 8002c4a:	f002 ff47 	bl	8005adc <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c54:	4822      	ldr	r0, [pc, #136]	@ (8002ce0 <MX_GPIO_Init+0x130>)
 8002c56:	f002 ff41 	bl	8005adc <HAL_GPIO_WritePin>

    /*Configure GPIO pins : LED_Pin LED4_Pin */
    GPIO_InitStruct.Pin = LED_Pin | LED4_Pin;
 8002c5a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c60:	2301      	movs	r3, #1
 8002c62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c6c:	f107 0314 	add.w	r3, r7, #20
 8002c70:	4619      	mov	r1, r3
 8002c72:	4819      	ldr	r0, [pc, #100]	@ (8002cd8 <MX_GPIO_Init+0x128>)
 8002c74:	f002 fd96 	bl	80057a4 <HAL_GPIO_Init>

    /*Configure GPIO pins : LED1_Pin LED3_Pin PW_ON_OFF_DRIVER_OUTPUT_Pin LED2_Pin */
    GPIO_InitStruct.Pin = LED1_Pin | LED3_Pin | PW_ON_OFF_DRIVER_OUTPUT_Pin | LED2_Pin;
 8002c78:	f241 1314 	movw	r3, #4372	@ 0x1114
 8002c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c86:	2300      	movs	r3, #0
 8002c88:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c8a:	f107 0314 	add.w	r3, r7, #20
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4812      	ldr	r0, [pc, #72]	@ (8002cdc <MX_GPIO_Init+0x12c>)
 8002c92:	f002 fd87 	bl	80057a4 <HAL_GPIO_Init>

    /*Configure GPIO pin : BUZZER_Pin */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8002c96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002ca8:	f107 0314 	add.w	r3, r7, #20
 8002cac:	4619      	mov	r1, r3
 8002cae:	480c      	ldr	r0, [pc, #48]	@ (8002ce0 <MX_GPIO_Init+0x130>)
 8002cb0:	f002 fd78 	bl	80057a4 <HAL_GPIO_Init>

    /*Configure GPIO pin : PW_ON_OFF_DRIVER_INPUT_Pin */
    GPIO_InitStruct.Pin = PW_ON_OFF_DRIVER_INPUT_Pin;
 8002cb4:	2320      	movs	r3, #32
 8002cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, &GPIO_InitStruct);
 8002cc0:	f107 0314 	add.w	r3, r7, #20
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4805      	ldr	r0, [pc, #20]	@ (8002cdc <MX_GPIO_Init+0x12c>)
 8002cc8:	f002 fd6c 	bl	80057a4 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8002ccc:	bf00      	nop
 8002cce:	3728      	adds	r7, #40	@ 0x28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	40020800 	.word	0x40020800
 8002cdc:	40020400 	.word	0x40020400
 8002ce0:	40020000 	.word	0x40020000

08002ce4 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument) {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
    /* init code for USB_DEVICE */
    MX_USB_DEVICE_Init();
 8002cec:	f00c ffa2 	bl	800fc34 <MX_USB_DEVICE_Init>
    /* USER CODE BEGIN 5 */
    /* Infinite loop */
    for (;;) {
        osDelay(1000);
 8002cf0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002cf4:	f00a fbbf 	bl	800d476 <osDelay>
 8002cf8:	e7fa      	b.n	8002cf0 <StartDefaultTask+0xc>

08002cfa <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002cfa:	b480      	push	{r7}
 8002cfc:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* USER CODE END Error_Handler_Debug */
}
 8002cfe:	bf00      	nop
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_MspInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef * htim);
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	607b      	str	r3, [r7, #4]
 8002d12:	4b12      	ldr	r3, [pc, #72]	@ (8002d5c <HAL_MspInit+0x54>)
 8002d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d16:	4a11      	ldr	r2, [pc, #68]	@ (8002d5c <HAL_MspInit+0x54>)
 8002d18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8002d5c <HAL_MspInit+0x54>)
 8002d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d26:	607b      	str	r3, [r7, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	603b      	str	r3, [r7, #0]
 8002d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d5c <HAL_MspInit+0x54>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d32:	4a0a      	ldr	r2, [pc, #40]	@ (8002d5c <HAL_MspInit+0x54>)
 8002d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d38:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d3a:	4b08      	ldr	r3, [pc, #32]	@ (8002d5c <HAL_MspInit+0x54>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d42:	603b      	str	r3, [r7, #0]
 8002d44:	683b      	ldr	r3, [r7, #0]

    /* System interrupt init*/
    /* PendSV_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d46:	2200      	movs	r2, #0
 8002d48:	210f      	movs	r1, #15
 8002d4a:	f06f 0001 	mvn.w	r0, #1
 8002d4e:	f002 fb08 	bl	8005362 <HAL_NVIC_SetPriority>

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 8002d52:	bf00      	nop
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40023800 	.word	0x40023800

08002d60 <HAL_ADC_MspInit>:
 * @brief ADC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hadc: ADC handle pointer
 * @retval None
 */
void HAL_ADC_MspInit(ADC_HandleTypeDef * hadc) {
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08a      	sub	sp, #40	@ 0x28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	f107 0314 	add.w	r3, r7, #20
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	611a      	str	r2, [r3, #16]
    if (hadc->Instance == ADC1) {
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a17      	ldr	r2, [pc, #92]	@ (8002ddc <HAL_ADC_MspInit+0x7c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d127      	bne.n	8002dd2 <HAL_ADC_MspInit+0x72>
        /* USER CODE BEGIN ADC1_MspInit 0 */

        /* USER CODE END ADC1_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_ADC1_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	4b16      	ldr	r3, [pc, #88]	@ (8002de0 <HAL_ADC_MspInit+0x80>)
 8002d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8a:	4a15      	ldr	r2, [pc, #84]	@ (8002de0 <HAL_ADC_MspInit+0x80>)
 8002d8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d90:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d92:	4b13      	ldr	r3, [pc, #76]	@ (8002de0 <HAL_ADC_MspInit+0x80>)
 8002d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	4b0f      	ldr	r3, [pc, #60]	@ (8002de0 <HAL_ADC_MspInit+0x80>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da6:	4a0e      	ldr	r2, [pc, #56]	@ (8002de0 <HAL_ADC_MspInit+0x80>)
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dae:	4b0c      	ldr	r3, [pc, #48]	@ (8002de0 <HAL_ADC_MspInit+0x80>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
        /**ADC1 GPIO Configuration
        PA0-WKUP     ------> ADC1_IN0
        */
        GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc6:	f107 0314 	add.w	r3, r7, #20
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4805      	ldr	r0, [pc, #20]	@ (8002de4 <HAL_ADC_MspInit+0x84>)
 8002dce:	f002 fce9 	bl	80057a4 <HAL_GPIO_Init>

        /* USER CODE BEGIN ADC1_MspInit 1 */

        /* USER CODE END ADC1_MspInit 1 */
    }
}
 8002dd2:	bf00      	nop
 8002dd4:	3728      	adds	r7, #40	@ 0x28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40012000 	.word	0x40012000
 8002de0:	40023800 	.word	0x40023800
 8002de4:	40020000 	.word	0x40020000

08002de8 <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef * hi2c) {
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08a      	sub	sp, #40	@ 0x28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df0:	f107 0314 	add.w	r3, r7, #20
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	611a      	str	r2, [r3, #16]
    if (hi2c->Instance == I2C1) {
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a19      	ldr	r2, [pc, #100]	@ (8002e6c <HAL_I2C_MspInit+0x84>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d12b      	bne.n	8002e62 <HAL_I2C_MspInit+0x7a>
        /* USER CODE BEGIN I2C1_MspInit 0 */

        /* USER CODE END I2C1_MspInit 0 */

        __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	4b18      	ldr	r3, [pc, #96]	@ (8002e70 <HAL_I2C_MspInit+0x88>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e12:	4a17      	ldr	r2, [pc, #92]	@ (8002e70 <HAL_I2C_MspInit+0x88>)
 8002e14:	f043 0302 	orr.w	r3, r3, #2
 8002e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e1a:	4b15      	ldr	r3, [pc, #84]	@ (8002e70 <HAL_I2C_MspInit+0x88>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	693b      	ldr	r3, [r7, #16]
        /**I2C1 GPIO Configuration
        PB6     ------> I2C1_SCL
        PB7     ------> I2C1_SDA
        */
        GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8002e26:	23c0      	movs	r3, #192	@ 0xc0
 8002e28:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e2a:	2312      	movs	r3, #18
 8002e2c:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e32:	2303      	movs	r3, #3
 8002e34:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e36:	2304      	movs	r3, #4
 8002e38:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e3a:	f107 0314 	add.w	r3, r7, #20
 8002e3e:	4619      	mov	r1, r3
 8002e40:	480c      	ldr	r0, [pc, #48]	@ (8002e74 <HAL_I2C_MspInit+0x8c>)
 8002e42:	f002 fcaf 	bl	80057a4 <HAL_GPIO_Init>

        /* Peripheral clock enable */
        __HAL_RCC_I2C1_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	4b09      	ldr	r3, [pc, #36]	@ (8002e70 <HAL_I2C_MspInit+0x88>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4e:	4a08      	ldr	r2, [pc, #32]	@ (8002e70 <HAL_I2C_MspInit+0x88>)
 8002e50:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002e54:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e56:	4b06      	ldr	r3, [pc, #24]	@ (8002e70 <HAL_I2C_MspInit+0x88>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
        /* USER CODE BEGIN I2C1_MspInit 1 */

        /* USER CODE END I2C1_MspInit 1 */
    }
}
 8002e62:	bf00      	nop
 8002e64:	3728      	adds	r7, #40	@ 0x28
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40005400 	.word	0x40005400
 8002e70:	40023800 	.word	0x40023800
 8002e74:	40020400 	.word	0x40020400

08002e78 <HAL_TIM_PWM_MspInit>:
 * @brief TIM_PWM MSP Initialization
 * This function configures the hardware resources used in this example
 * @param htim_pwm: TIM_PWM handle pointer
 * @retval None
 */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef * htim_pwm) {
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
    if (htim_pwm->Instance == TIM3) {
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a0b      	ldr	r2, [pc, #44]	@ (8002eb4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d10d      	bne.n	8002ea6 <HAL_TIM_PWM_MspInit+0x2e>
        /* USER CODE BEGIN TIM3_MspInit 0 */

        /* USER CODE END TIM3_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_TIM3_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb8 <HAL_TIM_PWM_MspInit+0x40>)
 8002e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e92:	4a09      	ldr	r2, [pc, #36]	@ (8002eb8 <HAL_TIM_PWM_MspInit+0x40>)
 8002e94:	f043 0302 	orr.w	r3, r3, #2
 8002e98:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e9a:	4b07      	ldr	r3, [pc, #28]	@ (8002eb8 <HAL_TIM_PWM_MspInit+0x40>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
        /* USER CODE BEGIN TIM3_MspInit 1 */

        /* USER CODE END TIM3_MspInit 1 */
    }
}
 8002ea6:	bf00      	nop
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40000400 	.word	0x40000400
 8002eb8:	40023800 	.word	0x40023800

08002ebc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef * htim) {
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08a      	sub	sp, #40	@ 0x28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec4:	f107 0314 	add.w	r3, r7, #20
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	605a      	str	r2, [r3, #4]
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	60da      	str	r2, [r3, #12]
 8002ed2:	611a      	str	r2, [r3, #16]
    if (htim->Instance == TIM3) {
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a21      	ldr	r2, [pc, #132]	@ (8002f60 <HAL_TIM_MspPostInit+0xa4>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d13b      	bne.n	8002f56 <HAL_TIM_MspPostInit+0x9a>
        /* USER CODE BEGIN TIM3_MspPostInit 0 */

        /* USER CODE END TIM3_MspPostInit 0 */

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ede:	2300      	movs	r3, #0
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	4b20      	ldr	r3, [pc, #128]	@ (8002f64 <HAL_TIM_MspPostInit+0xa8>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee6:	4a1f      	ldr	r2, [pc, #124]	@ (8002f64 <HAL_TIM_MspPostInit+0xa8>)
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eee:	4b1d      	ldr	r3, [pc, #116]	@ (8002f64 <HAL_TIM_MspPostInit+0xa8>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	613b      	str	r3, [r7, #16]
 8002ef8:	693b      	ldr	r3, [r7, #16]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	4b19      	ldr	r3, [pc, #100]	@ (8002f64 <HAL_TIM_MspPostInit+0xa8>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f02:	4a18      	ldr	r2, [pc, #96]	@ (8002f64 <HAL_TIM_MspPostInit+0xa8>)
 8002f04:	f043 0302 	orr.w	r3, r3, #2
 8002f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f0a:	4b16      	ldr	r3, [pc, #88]	@ (8002f64 <HAL_TIM_MspPostInit+0xa8>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]
        PA6     ------> TIM3_CH1
        PA7     ------> TIM3_CH2
        PB0     ------> TIM3_CH3
        PB1     ------> TIM3_CH4
        */
        GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8002f16:	23c0      	movs	r3, #192	@ 0xc0
 8002f18:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f22:	2300      	movs	r3, #0
 8002f24:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f26:	2302      	movs	r3, #2
 8002f28:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f2a:	f107 0314 	add.w	r3, r7, #20
 8002f2e:	4619      	mov	r1, r3
 8002f30:	480d      	ldr	r0, [pc, #52]	@ (8002f68 <HAL_TIM_MspPostInit+0xac>)
 8002f32:	f002 fc37 	bl	80057a4 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002f36:	2303      	movs	r3, #3
 8002f38:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f42:	2300      	movs	r3, #0
 8002f44:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f46:	2302      	movs	r3, #2
 8002f48:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f4a:	f107 0314 	add.w	r3, r7, #20
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4806      	ldr	r0, [pc, #24]	@ (8002f6c <HAL_TIM_MspPostInit+0xb0>)
 8002f52:	f002 fc27 	bl	80057a4 <HAL_GPIO_Init>

        /* USER CODE BEGIN TIM3_MspPostInit 1 */

        /* USER CODE END TIM3_MspPostInit 1 */
    }
}
 8002f56:	bf00      	nop
 8002f58:	3728      	adds	r7, #40	@ 0x28
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40000400 	.word	0x40000400
 8002f64:	40023800 	.word	0x40023800
 8002f68:	40020000 	.word	0x40020000
 8002f6c:	40020400 	.word	0x40020400

08002f70 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef * huart) {
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08a      	sub	sp, #40	@ 0x28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f78:	f107 0314 	add.w	r3, r7, #20
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	611a      	str	r2, [r3, #16]
    if (huart->Instance == USART2) {
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a31      	ldr	r2, [pc, #196]	@ (8003054 <HAL_UART_MspInit+0xe4>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d15b      	bne.n	800304a <HAL_UART_MspInit+0xda>
        /* USER CODE BEGIN USART2_MspInit 0 */

        /* USER CODE END USART2_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_USART2_CLK_ENABLE();
 8002f92:	2300      	movs	r3, #0
 8002f94:	613b      	str	r3, [r7, #16]
 8002f96:	4b30      	ldr	r3, [pc, #192]	@ (8003058 <HAL_UART_MspInit+0xe8>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9a:	4a2f      	ldr	r2, [pc, #188]	@ (8003058 <HAL_UART_MspInit+0xe8>)
 8002f9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fa2:	4b2d      	ldr	r3, [pc, #180]	@ (8003058 <HAL_UART_MspInit+0xe8>)
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002faa:	613b      	str	r3, [r7, #16]
 8002fac:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	4b29      	ldr	r3, [pc, #164]	@ (8003058 <HAL_UART_MspInit+0xe8>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb6:	4a28      	ldr	r2, [pc, #160]	@ (8003058 <HAL_UART_MspInit+0xe8>)
 8002fb8:	f043 0301 	orr.w	r3, r3, #1
 8002fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fbe:	4b26      	ldr	r3, [pc, #152]	@ (8003058 <HAL_UART_MspInit+0xe8>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
        /**USART2 GPIO Configuration
        PA2     ------> USART2_TX
        PA3     ------> USART2_RX
        */
        GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8002fca:	230c      	movs	r3, #12
 8002fcc:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fce:	2302      	movs	r3, #2
 8002fd0:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fda:	2307      	movs	r3, #7
 8002fdc:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fde:	f107 0314 	add.w	r3, r7, #20
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	481d      	ldr	r0, [pc, #116]	@ (800305c <HAL_UART_MspInit+0xec>)
 8002fe6:	f002 fbdd 	bl	80057a4 <HAL_GPIO_Init>

        /* USART2 DMA Init */
        /* USART2_RX Init */
        hdma_usart2_rx.Instance = DMA1_Stream5;
 8002fea:	4b1d      	ldr	r3, [pc, #116]	@ (8003060 <HAL_UART_MspInit+0xf0>)
 8002fec:	4a1d      	ldr	r2, [pc, #116]	@ (8003064 <HAL_UART_MspInit+0xf4>)
 8002fee:	601a      	str	r2, [r3, #0]
        hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8003060 <HAL_UART_MspInit+0xf0>)
 8002ff2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002ff6:	605a      	str	r2, [r3, #4]
        hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ff8:	4b19      	ldr	r3, [pc, #100]	@ (8003060 <HAL_UART_MspInit+0xf0>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	609a      	str	r2, [r3, #8]
        hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ffe:	4b18      	ldr	r3, [pc, #96]	@ (8003060 <HAL_UART_MspInit+0xf0>)
 8003000:	2200      	movs	r2, #0
 8003002:	60da      	str	r2, [r3, #12]
        hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003004:	4b16      	ldr	r3, [pc, #88]	@ (8003060 <HAL_UART_MspInit+0xf0>)
 8003006:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800300a:	611a      	str	r2, [r3, #16]
        hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800300c:	4b14      	ldr	r3, [pc, #80]	@ (8003060 <HAL_UART_MspInit+0xf0>)
 800300e:	2200      	movs	r2, #0
 8003010:	615a      	str	r2, [r3, #20]
        hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003012:	4b13      	ldr	r3, [pc, #76]	@ (8003060 <HAL_UART_MspInit+0xf0>)
 8003014:	2200      	movs	r2, #0
 8003016:	619a      	str	r2, [r3, #24]
        hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003018:	4b11      	ldr	r3, [pc, #68]	@ (8003060 <HAL_UART_MspInit+0xf0>)
 800301a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800301e:	61da      	str	r2, [r3, #28]
        hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003020:	4b0f      	ldr	r3, [pc, #60]	@ (8003060 <HAL_UART_MspInit+0xf0>)
 8003022:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003026:	621a      	str	r2, [r3, #32]
        hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003028:	4b0d      	ldr	r3, [pc, #52]	@ (8003060 <HAL_UART_MspInit+0xf0>)
 800302a:	2200      	movs	r2, #0
 800302c:	625a      	str	r2, [r3, #36]	@ 0x24
        if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 800302e:	480c      	ldr	r0, [pc, #48]	@ (8003060 <HAL_UART_MspInit+0xf0>)
 8003030:	f002 f9d2 	bl	80053d8 <HAL_DMA_Init>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <HAL_UART_MspInit+0xce>
            Error_Handler();
 800303a:	f7ff fe5e 	bl	8002cfa <Error_Handler>
        }

        __HAL_LINKDMA(huart, hdmarx, hdma_usart2_rx);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a07      	ldr	r2, [pc, #28]	@ (8003060 <HAL_UART_MspInit+0xf0>)
 8003042:	639a      	str	r2, [r3, #56]	@ 0x38
 8003044:	4a06      	ldr	r2, [pc, #24]	@ (8003060 <HAL_UART_MspInit+0xf0>)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6393      	str	r3, [r2, #56]	@ 0x38

        /* USER CODE BEGIN USART2_MspInit 1 */

        /* USER CODE END USART2_MspInit 1 */
    }
}
 800304a:	bf00      	nop
 800304c:	3728      	adds	r7, #40	@ 0x28
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	40004400 	.word	0x40004400
 8003058:	40023800 	.word	0x40023800
 800305c:	40020000 	.word	0x40020000
 8003060:	20000cbc 	.word	0x20000cbc
 8003064:	40026088 	.word	0x40026088

08003068 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 800306c:	bf00      	nop
 800306e:	e7fd      	b.n	800306c <NMI_Handler+0x4>

08003070 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1) {
 8003074:	bf00      	nop
 8003076:	e7fd      	b.n	8003074 <HardFault_Handler+0x4>

08003078 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1) {
 800307c:	bf00      	nop
 800307e:	e7fd      	b.n	800307c <MemManage_Handler+0x4>

08003080 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1) {
 8003084:	bf00      	nop
 8003086:	e7fd      	b.n	8003084 <BusFault_Handler+0x4>

08003088 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1) {
 800308c:	bf00      	nop
 800308e:	e7fd      	b.n	800308c <UsageFault_Handler+0x4>

08003090 <DebugMon_Handler>:
}

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003094:	bf00      	nop
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 800309e:	b580      	push	{r7, lr}
 80030a0:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 80030a2:	f001 fc7b 	bl	800499c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1)
    if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
#endif /* INCLUDE_xTaskGetSchedulerState */
        xPortSysTickHandler();
 80030a6:	f00c fd0f 	bl	800fac8 <xPortSysTickHandler>
    }
#endif /* INCLUDE_xTaskGetSchedulerState */
       /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 80030aa:	bf00      	nop
 80030ac:	bd80      	pop	{r7, pc}
	...

080030b0 <OTG_FS_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles USB On The Go FS global interrupt.
 */
void OTG_FS_IRQHandler(void) {
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN OTG_FS_IRQn 0 */

    /* USER CODE END OTG_FS_IRQn 0 */
    HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80030b4:	4802      	ldr	r0, [pc, #8]	@ (80030c0 <OTG_FS_IRQHandler+0x10>)
 80030b6:	f003 fe3a 	bl	8006d2e <HAL_PCD_IRQHandler>
    /* USER CODE BEGIN OTG_FS_IRQn 1 */

    /* USER CODE END OTG_FS_IRQn 1 */
}
 80030ba:	bf00      	nop
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	200016c0 	.word	0x200016c0

080030c4 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
    return 1;
 80030c8:	2301      	movs	r3, #1
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <_kill>:

int _kill(int pid, int sig) {
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
    (void)pid;
    (void)sig;
    errno = EINVAL;
 80030de:	f00e f965 	bl	80113ac <__errno>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2216      	movs	r2, #22
 80030e6:	601a      	str	r2, [r3, #0]
    return -1;
 80030e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <_exit>:

void _exit(int status) {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
    _kill(status, -1);
 80030fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7ff ffe7 	bl	80030d4 <_kill>
    while (1) {
 8003106:	bf00      	nop
 8003108:	e7fd      	b.n	8003106 <_exit+0x12>

0800310a <_read>:
    } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char * ptr, int len) {
 800310a:	b580      	push	{r7, lr}
 800310c:	b086      	sub	sp, #24
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003116:	2300      	movs	r3, #0
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	e00a      	b.n	8003132 <_read+0x28>
        *ptr++ = __io_getchar();
 800311c:	f3af 8000 	nop.w
 8003120:	4601      	mov	r1, r0
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	60ba      	str	r2, [r7, #8]
 8003128:	b2ca      	uxtb	r2, r1
 800312a:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	3301      	adds	r3, #1
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	429a      	cmp	r2, r3
 8003138:	dbf0      	blt.n	800311c <_read+0x12>
    }

    return len;
 800313a:	687b      	ldr	r3, [r7, #4]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <_write>:

__attribute__((weak)) int _write(int file, char * ptr, int len) {
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	e009      	b.n	800316a <_write+0x26>
        __io_putchar(*ptr++);
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	60ba      	str	r2, [r7, #8]
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f3af 8000 	nop.w
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	3301      	adds	r3, #1
 8003168:	617b      	str	r3, [r7, #20]
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	429a      	cmp	r2, r3
 8003170:	dbf1      	blt.n	8003156 <_write+0x12>
    }
    return len;
 8003172:	687b      	ldr	r3, [r7, #4]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <_close>:

int _close(int file) {
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
    (void)file;
    return -1;
 8003184:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003188:	4618      	mov	r0, r3
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <_fstat>:

int _fstat(int file, struct stat * st) {
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
    (void)file;
    st->st_mode = S_IFCHR;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031a4:	605a      	str	r2, [r3, #4]
    return 0;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <_isatty>:

int _isatty(int file) {
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
    (void)file;
    return 1;
 80031bc:	2301      	movs	r3, #1
}
 80031be:	4618      	mov	r0, r3
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80031ca:	b480      	push	{r7}
 80031cc:	b085      	sub	sp, #20
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	607a      	str	r2, [r7, #4]
    (void)file;
    (void)ptr;
    (void)dir;
    return 0;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031ec:	4a14      	ldr	r2, [pc, #80]	@ (8003240 <_sbrk+0x5c>)
 80031ee:	4b15      	ldr	r3, [pc, #84]	@ (8003244 <_sbrk+0x60>)
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 80031f8:	4b13      	ldr	r3, [pc, #76]	@ (8003248 <_sbrk+0x64>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d102      	bne.n	8003206 <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 8003200:	4b11      	ldr	r3, [pc, #68]	@ (8003248 <_sbrk+0x64>)
 8003202:	4a12      	ldr	r2, [pc, #72]	@ (800324c <_sbrk+0x68>)
 8003204:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 8003206:	4b10      	ldr	r3, [pc, #64]	@ (8003248 <_sbrk+0x64>)
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4413      	add	r3, r2
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	429a      	cmp	r2, r3
 8003212:	d207      	bcs.n	8003224 <_sbrk+0x40>
        errno = ENOMEM;
 8003214:	f00e f8ca 	bl	80113ac <__errno>
 8003218:	4603      	mov	r3, r0
 800321a:	220c      	movs	r2, #12
 800321c:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 800321e:	f04f 33ff 	mov.w	r3, #4294967295
 8003222:	e009      	b.n	8003238 <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8003224:	4b08      	ldr	r3, [pc, #32]	@ (8003248 <_sbrk+0x64>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 800322a:	4b07      	ldr	r3, [pc, #28]	@ (8003248 <_sbrk+0x64>)
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4413      	add	r3, r2
 8003232:	4a05      	ldr	r2, [pc, #20]	@ (8003248 <_sbrk+0x64>)
 8003234:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 8003236:	68fb      	ldr	r3, [r7, #12]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20010000 	.word	0x20010000
 8003244:	00000400 	.word	0x00000400
 8003248:	20000d20 	.word	0x20000d20
 800324c:	20001f38 	.word	0x20001f38

08003250 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8003254:	4b06      	ldr	r3, [pc, #24]	@ (8003270 <SystemInit+0x20>)
 8003256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800325a:	4a05      	ldr	r2, [pc, #20]	@ (8003270 <SystemInit+0x20>)
 800325c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003260:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                                   /* USER_VECT_TAB_ADDRESS */
}
 8003264:	bf00      	nop
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	e000ed00 	.word	0xe000ed00

08003274 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003274:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80032ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003278:	480d      	ldr	r0, [pc, #52]	@ (80032b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800327a:	490e      	ldr	r1, [pc, #56]	@ (80032b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800327c:	4a0e      	ldr	r2, [pc, #56]	@ (80032b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800327e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003280:	e002      	b.n	8003288 <LoopCopyDataInit>

08003282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003286:	3304      	adds	r3, #4

08003288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800328a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800328c:	d3f9      	bcc.n	8003282 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800328e:	4a0b      	ldr	r2, [pc, #44]	@ (80032bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003290:	4c0b      	ldr	r4, [pc, #44]	@ (80032c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003294:	e001      	b.n	800329a <LoopFillZerobss>

08003296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003298:	3204      	adds	r2, #4

0800329a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800329a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800329c:	d3fb      	bcc.n	8003296 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800329e:	f7ff ffd7 	bl	8003250 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032a2:	f00e f889 	bl	80113b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032a6:	f7ff faad 	bl	8002804 <main>
  bx  lr
 80032aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80032ac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80032b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032b4:	20000338 	.word	0x20000338
  ldr r2, =_sidata
 80032b8:	08014058 	.word	0x08014058
  ldr r2, =_sbss
 80032bc:	20000338 	.word	0x20000338
  ldr r4, =_ebss
 80032c0:	20001f38 	.word	0x20001f38

080032c4 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032c4:	e7fe      	b.n	80032c4 <ADC_IRQHandler>

080032c6 <PWM_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t PWM_Init(ESC_HandleTypeDef_t * hesc) {
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b082      	sub	sp, #8
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]

    /* Check first parameter */
    if (NULL == hesc) {
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <PWM_Init+0x12>
        return false;
 80032d4:	2300      	movs	r3, #0
 80032d6:	e02c      	b.n	8003332 <PWM_Init+0x6c>
    }

    /* Start PWM signal generation */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_1)) {
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2100      	movs	r1, #0
 80032de:	4618      	mov	r0, r3
 80032e0:	f005 fafa 	bl	80088d8 <HAL_TIM_PWM_Start>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <PWM_Init+0x28>
        /* END MODIFY 1 */
        return false;
 80032ea:	2300      	movs	r3, #0
 80032ec:	e021      	b.n	8003332 <PWM_Init+0x6c>
    }
    /* BEGIN MODIFY 2 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_2)) {
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2104      	movs	r1, #4
 80032f4:	4618      	mov	r0, r3
 80032f6:	f005 faef 	bl	80088d8 <HAL_TIM_PWM_Start>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <PWM_Init+0x3e>
        /* END MODIFY 2 */
        return false;
 8003300:	2300      	movs	r3, #0
 8003302:	e016      	b.n	8003332 <PWM_Init+0x6c>
    }
    /* BEGIN MODIFY 3 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_3)) {
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2108      	movs	r1, #8
 800330a:	4618      	mov	r0, r3
 800330c:	f005 fae4 	bl	80088d8 <HAL_TIM_PWM_Start>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <PWM_Init+0x54>
        /* END MODIFY 3 */
        return false;
 8003316:	2300      	movs	r3, #0
 8003318:	e00b      	b.n	8003332 <PWM_Init+0x6c>
    }
    /* BEGIN MODIFY 4 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_4)) {
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	210c      	movs	r1, #12
 8003320:	4618      	mov	r0, r3
 8003322:	f005 fad9 	bl	80088d8 <HAL_TIM_PWM_Start>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <PWM_Init+0x6a>
        /* END MODIFY 4 */
        return false;
 800332c:	2300      	movs	r3, #0
 800332e:	e000      	b.n	8003332 <PWM_Init+0x6c>
    }

    return true;
 8003330:	2301      	movs	r3, #1
}
 8003332:	4618      	mov	r0, r3
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
	...

0800333c <PWM_SetDutyCycle>:
    }

    return true;
}

bool_t PWM_SetDutyCycle(ESC_HandleTypeDef_t * hesc, uint8_t channel, uint32_t dutyCycle) {
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	460b      	mov	r3, r1
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	72fb      	strb	r3, [r7, #11]

    /* Check parameters */
    if (NULL == hesc) {
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <PWM_SetDutyCycle+0x18>
        return false;
 8003350:	2300      	movs	r3, #0
 8003352:	e02d      	b.n	80033b0 <PWM_SetDutyCycle+0x74>
    }
    if (PWM_CHANNEL_1 != channel && PWM_CHANNEL_2 != channel && PWM_CHANNEL_3 != channel && PWM_CHANNEL_4 != channel) {
 8003354:	7afb      	ldrb	r3, [r7, #11]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d00a      	beq.n	8003370 <PWM_SetDutyCycle+0x34>
 800335a:	7afb      	ldrb	r3, [r7, #11]
 800335c:	2b02      	cmp	r3, #2
 800335e:	d007      	beq.n	8003370 <PWM_SetDutyCycle+0x34>
 8003360:	7afb      	ldrb	r3, [r7, #11]
 8003362:	2b03      	cmp	r3, #3
 8003364:	d004      	beq.n	8003370 <PWM_SetDutyCycle+0x34>
 8003366:	7afb      	ldrb	r3, [r7, #11]
 8003368:	2b04      	cmp	r3, #4
 800336a:	d001      	beq.n	8003370 <PWM_SetDutyCycle+0x34>
        return false;
 800336c:	2300      	movs	r3, #0
 800336e:	e01f      	b.n	80033b0 <PWM_SetDutyCycle+0x74>
    }

    /* Set duty cycle */
    if (PWM_CHANNEL_1 == channel) {
 8003370:	7afb      	ldrb	r3, [r7, #11]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d104      	bne.n	8003380 <PWM_SetDutyCycle+0x44>
        /* BEGIN MODIFY 10 */
        TIM3->CCR1 = (uint16_t)dutyCycle;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	b29a      	uxth	r2, r3
 800337a:	4b10      	ldr	r3, [pc, #64]	@ (80033bc <PWM_SetDutyCycle+0x80>)
 800337c:	635a      	str	r2, [r3, #52]	@ 0x34
 800337e:	e016      	b.n	80033ae <PWM_SetDutyCycle+0x72>
        /* END MODIFY 10 */
    } else if (PWM_CHANNEL_2 == channel) {
 8003380:	7afb      	ldrb	r3, [r7, #11]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d104      	bne.n	8003390 <PWM_SetDutyCycle+0x54>
        /* BEGIN MODIFY 11 */
        TIM3->CCR2 = (uint16_t)dutyCycle;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	b29a      	uxth	r2, r3
 800338a:	4b0c      	ldr	r3, [pc, #48]	@ (80033bc <PWM_SetDutyCycle+0x80>)
 800338c:	639a      	str	r2, [r3, #56]	@ 0x38
 800338e:	e00e      	b.n	80033ae <PWM_SetDutyCycle+0x72>
        /* END MODIFY 11 */
    } else if (PWM_CHANNEL_3 == channel) {
 8003390:	7afb      	ldrb	r3, [r7, #11]
 8003392:	2b03      	cmp	r3, #3
 8003394:	d104      	bne.n	80033a0 <PWM_SetDutyCycle+0x64>
        /* BEGIN MODIFY 12 */
        TIM3->CCR3 = (uint16_t)dutyCycle;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	b29a      	uxth	r2, r3
 800339a:	4b08      	ldr	r3, [pc, #32]	@ (80033bc <PWM_SetDutyCycle+0x80>)
 800339c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800339e:	e006      	b.n	80033ae <PWM_SetDutyCycle+0x72>
        /* END MODIFY 12 */
    } else if (PWM_CHANNEL_4 == channel) {
 80033a0:	7afb      	ldrb	r3, [r7, #11]
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d103      	bne.n	80033ae <PWM_SetDutyCycle+0x72>
        /* BEGIN MODIFY 13 */
        TIM3->CCR4 = (uint16_t)dutyCycle;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	4b04      	ldr	r3, [pc, #16]	@ (80033bc <PWM_SetDutyCycle+0x80>)
 80033ac:	641a      	str	r2, [r3, #64]	@ 0x40
        /* END MODIFY 13 */
    }

    return true;
 80033ae:	2301      	movs	r3, #1
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	40000400 	.word	0x40000400

080033c0 <ESC_CalculatePWMDutyCycle>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t ESC_CalculatePWMDutyCycle(float speed, uint32_t * pwmValue) {
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80033ca:	6038      	str	r0, [r7, #0]

    /* Check parameters */
    if (0 > speed || 100 < speed) {
 80033cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80033d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d8:	d408      	bmi.n	80033ec <ESC_CalculatePWMDutyCycle+0x2c>
 80033da:	edd7 7a01 	vldr	s15, [r7, #4]
 80033de:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8003448 <ESC_CalculatePWMDutyCycle+0x88>
 80033e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ea:	dd01      	ble.n	80033f0 <ESC_CalculatePWMDutyCycle+0x30>
        return false;
 80033ec:	2300      	movs	r3, #0
 80033ee:	e021      	b.n	8003434 <ESC_CalculatePWMDutyCycle+0x74>
    }

    /* Calculate PWM value */
    *pwmValue = (uint32_t)((MAX_ESC_SPEED - MIN_ESC_SPEED) * (float)(speed / 100) + MIN_ESC_SPEED);
 80033f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80033f4:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003448 <ESC_CalculatePWMDutyCycle+0x88>
 80033f8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80033fc:	ee16 0a90 	vmov	r0, s13
 8003400:	f7fd f8aa 	bl	8000558 <__aeabi_f2d>
 8003404:	a30e      	add	r3, pc, #56	@ (adr r3, 8003440 <ESC_CalculatePWMDutyCycle+0x80>)
 8003406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340a:	f7fd f8fd 	bl	8000608 <__aeabi_dmul>
 800340e:	4602      	mov	r2, r0
 8003410:	460b      	mov	r3, r1
 8003412:	4610      	mov	r0, r2
 8003414:	4619      	mov	r1, r3
 8003416:	a30a      	add	r3, pc, #40	@ (adr r3, 8003440 <ESC_CalculatePWMDutyCycle+0x80>)
 8003418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341c:	f7fc ff3e 	bl	800029c <__adddf3>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	4610      	mov	r0, r2
 8003426:	4619      	mov	r1, r3
 8003428:	f7fd fbc6 	bl	8000bb8 <__aeabi_d2uiz>
 800342c:	4602      	mov	r2, r0
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	601a      	str	r2, [r3, #0]

    return true;
 8003432:	2301      	movs	r3, #1
}
 8003434:	4618      	mov	r0, r3
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	f3af 8000 	nop.w
 8003440:	00000000 	.word	0x00000000
 8003444:	40a99980 	.word	0x40a99980
 8003448:	42c80000 	.word	0x42c80000

0800344c <ESC_AutoCalibrate>:

static bool_t ESC_AutoCalibrate(ESC_HandleTypeDef_t * hesc) {
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]

    /* Check parameters */
    if (NULL == hesc) {
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <ESC_AutoCalibrate+0x12>
        return false;
 800345a:	2300      	movs	r3, #0
 800345c:	e040      	b.n	80034e0 <ESC_AutoCalibrate+0x94>
    //    if (false == PWM_SetDutyCycle(hesc, hesc->esc4, MAX_ESC_SPEED)) {
    //        return false;
    //    }

    /* Set ESC to minimum throttle */
    if (false == PWM_SetDutyCycle(hesc, hesc->esc1, MIN_ESC_SPEED)) {
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	791b      	ldrb	r3, [r3, #4]
 8003462:	f640 42cc 	movw	r2, #3276	@ 0xccc
 8003466:	4619      	mov	r1, r3
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f7ff ff67 	bl	800333c <PWM_SetDutyCycle>
 800346e:	4603      	mov	r3, r0
 8003470:	f083 0301 	eor.w	r3, r3, #1
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <ESC_AutoCalibrate+0x32>
        return false;
 800347a:	2300      	movs	r3, #0
 800347c:	e030      	b.n	80034e0 <ESC_AutoCalibrate+0x94>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc2, MIN_ESC_SPEED)) {
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	795b      	ldrb	r3, [r3, #5]
 8003482:	f640 42cc 	movw	r2, #3276	@ 0xccc
 8003486:	4619      	mov	r1, r3
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7ff ff57 	bl	800333c <PWM_SetDutyCycle>
 800348e:	4603      	mov	r3, r0
 8003490:	f083 0301 	eor.w	r3, r3, #1
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <ESC_AutoCalibrate+0x52>
        return false;
 800349a:	2300      	movs	r3, #0
 800349c:	e020      	b.n	80034e0 <ESC_AutoCalibrate+0x94>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc3, MIN_ESC_SPEED)) {
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	799b      	ldrb	r3, [r3, #6]
 80034a2:	f640 42cc 	movw	r2, #3276	@ 0xccc
 80034a6:	4619      	mov	r1, r3
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7ff ff47 	bl	800333c <PWM_SetDutyCycle>
 80034ae:	4603      	mov	r3, r0
 80034b0:	f083 0301 	eor.w	r3, r3, #1
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <ESC_AutoCalibrate+0x72>
        return false;
 80034ba:	2300      	movs	r3, #0
 80034bc:	e010      	b.n	80034e0 <ESC_AutoCalibrate+0x94>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc4, MIN_ESC_SPEED)) {
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	79db      	ldrb	r3, [r3, #7]
 80034c2:	f640 42cc 	movw	r2, #3276	@ 0xccc
 80034c6:	4619      	mov	r1, r3
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7ff ff37 	bl	800333c <PWM_SetDutyCycle>
 80034ce:	4603      	mov	r3, r0
 80034d0:	f083 0301 	eor.w	r3, r3, #1
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <ESC_AutoCalibrate+0x92>
        return false;
 80034da:	2300      	movs	r3, #0
 80034dc:	e000      	b.n	80034e0 <ESC_AutoCalibrate+0x94>

#ifdef ESC_USE_LOGGING
    LOG((uint8_t *)"ESCs auto-calibrated.\r\n\n", LOG_INFORMATION);
#endif

    return true;
 80034de:	2301      	movs	r3, #1
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <ESC_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
ESC_HandleTypeDef_t * ESC_Init(TIM_HandleTypeDef * htim) {
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]

    /* Check parameters */
    if (NULL == htim) {
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <ESC_Init+0x12>
        return NULL;
 80034f6:	2300      	movs	r3, #0
 80034f8:	e036      	b.n	8003568 <ESC_Init+0x80>
    LOG((uint8_t *)"Initializing ESCs...\r\n\n", LOG_INFORMATION);
#endif

    /* Allocate dynamic memory for the ESC_HandleTypeDef_t structure */
#ifdef USE_FREERTOS
    ESC_HandleTypeDef_t * hesc = pvPortMalloc(sizeof(ESC_HandleTypeDef_t));
 80034fa:	2008      	movs	r0, #8
 80034fc:	f00c fb76 	bl	800fbec <pvPortMalloc>
 8003500:	60f8      	str	r0, [r7, #12]
#else
    ESC_HandleTypeDef_t * hesc = malloc(sizeof(ESC_HandleTypeDef_t));
#endif

    /* Initialize ESC_HandleTypeDef structure */
    if (hesc) {
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00f      	beq.n	8003528 <ESC_Init+0x40>
        hesc->htim = htim;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	601a      	str	r2, [r3, #0]
        hesc->esc1 = PWM_CHANNEL_1;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2201      	movs	r2, #1
 8003512:	711a      	strb	r2, [r3, #4]
        hesc->esc2 = PWM_CHANNEL_2;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2202      	movs	r2, #2
 8003518:	715a      	strb	r2, [r3, #5]
        hesc->esc3 = PWM_CHANNEL_3;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2203      	movs	r2, #3
 800351e:	719a      	strb	r2, [r3, #6]
        hesc->esc4 = PWM_CHANNEL_4;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2204      	movs	r2, #4
 8003524:	71da      	strb	r2, [r3, #7]
 8003526:	e002      	b.n	800352e <ESC_Init+0x46>
    } else {
        /* Dynamic memory allocation was not successful */
        /* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f00c fb71 	bl	800fc10 <vPortFree>
        free(hesc);
#endif
    }

    /* Start PWM signal generation */
    if (false == PWM_Init(hesc)) {
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f7ff fec9 	bl	80032c6 <PWM_Init>
 8003534:	4603      	mov	r3, r0
 8003536:	f083 0301 	eor.w	r3, r3, #1
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d004      	beq.n	800354a <ESC_Init+0x62>
        LOG((uint8_t *)"ESCs  couldn't be initialized.\r\n\n", LOG_ERROR);
#endif

/* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f00c fb65 	bl	800fc10 <vPortFree>
#else
        free(hesc);
#endif

        return NULL;
 8003546:	2300      	movs	r3, #0
 8003548:	e00e      	b.n	8003568 <ESC_Init+0x80>
    }

    /* Calibrate ESC */
    if (false == ESC_AutoCalibrate(hesc)) {
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f7ff ff7e 	bl	800344c <ESC_AutoCalibrate>
 8003550:	4603      	mov	r3, r0
 8003552:	f083 0301 	eor.w	r3, r3, #1
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	d004      	beq.n	8003566 <ESC_Init+0x7e>
        LOG((uint8_t *)"ESCs couldn't be calibrated.\r\n\n", LOG_ERROR);
#endif

/* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f00c fb57 	bl	800fc10 <vPortFree>
#else
        free(hesc);
#endif

        return NULL;
 8003562:	2300      	movs	r3, #0
 8003564:	e000      	b.n	8003568 <ESC_Init+0x80>

#ifdef ESC_USE_LOGGING
    LOG((uint8_t *)"ESCs initialized.\r\n\n", LOG_INFORMATION);
#endif

    return hesc;
 8003566:	68fb      	ldr	r3, [r7, #12]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <ESC_SetSpeed>:
#endif

    return true;
}

bool_t ESC_SetSpeed(ESC_HandleTypeDef_t * hesc, uint8_t channel, float speed) {
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	460b      	mov	r3, r1
 800357a:	ed87 0a01 	vstr	s0, [r7, #4]
 800357e:	72fb      	strb	r3, [r7, #11]

    uint32_t pwmValue;

    /* Check parameters */
    if (NULL == hesc->htim) {
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <ESC_SetSpeed+0x1c>
        return false;
 8003588:	2300      	movs	r3, #0
 800358a:	e03d      	b.n	8003608 <ESC_SetSpeed+0x98>
    }
    if (PWM_CHANNEL_1 != channel && PWM_CHANNEL_2 != channel && PWM_CHANNEL_3 != channel && PWM_CHANNEL_4 != channel) {
 800358c:	7afb      	ldrb	r3, [r7, #11]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d00a      	beq.n	80035a8 <ESC_SetSpeed+0x38>
 8003592:	7afb      	ldrb	r3, [r7, #11]
 8003594:	2b02      	cmp	r3, #2
 8003596:	d007      	beq.n	80035a8 <ESC_SetSpeed+0x38>
 8003598:	7afb      	ldrb	r3, [r7, #11]
 800359a:	2b03      	cmp	r3, #3
 800359c:	d004      	beq.n	80035a8 <ESC_SetSpeed+0x38>
 800359e:	7afb      	ldrb	r3, [r7, #11]
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	d001      	beq.n	80035a8 <ESC_SetSpeed+0x38>
        return false;
 80035a4:	2300      	movs	r3, #0
 80035a6:	e02f      	b.n	8003608 <ESC_SetSpeed+0x98>
    }
    if (speed < 0 || speed > 100) {
 80035a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80035ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b4:	d408      	bmi.n	80035c8 <ESC_SetSpeed+0x58>
 80035b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80035ba:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8003610 <ESC_SetSpeed+0xa0>
 80035be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c6:	dd01      	ble.n	80035cc <ESC_SetSpeed+0x5c>
        return false;
 80035c8:	2300      	movs	r3, #0
 80035ca:	e01d      	b.n	8003608 <ESC_SetSpeed+0x98>
    }

    /* Calculate PWM duty cycle */
    if (false == ESC_CalculatePWMDutyCycle(speed, &pwmValue)) {
 80035cc:	f107 0314 	add.w	r3, r7, #20
 80035d0:	4618      	mov	r0, r3
 80035d2:	ed97 0a01 	vldr	s0, [r7, #4]
 80035d6:	f7ff fef3 	bl	80033c0 <ESC_CalculatePWMDutyCycle>
 80035da:	4603      	mov	r3, r0
 80035dc:	f083 0301 	eor.w	r3, r3, #1
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <ESC_SetSpeed+0x7a>
        return false;
 80035e6:	2300      	movs	r3, #0
 80035e8:	e00e      	b.n	8003608 <ESC_SetSpeed+0x98>
    }

    /* Set PWM duty cycle */
    if (false == PWM_SetDutyCycle(hesc, channel, pwmValue)) {
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	7afb      	ldrb	r3, [r7, #11]
 80035ee:	4619      	mov	r1, r3
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f7ff fea3 	bl	800333c <PWM_SetDutyCycle>
 80035f6:	4603      	mov	r3, r0
 80035f8:	f083 0301 	eor.w	r3, r3, #1
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <ESC_SetSpeed+0x96>
        return false;
 8003602:	2300      	movs	r3, #0
 8003604:	e000      	b.n	8003608 <ESC_SetSpeed+0x98>
    };

    return true;
 8003606:	2301      	movs	r3, #1
}
 8003608:	4618      	mov	r0, r3
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	42c80000 	.word	0x42c80000

08003614 <IBUS_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t IBUS_Init(IBUS_HandleTypeDef_t * hibus) {
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hibus) {
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <IBUS_Init+0x12>
        return false;
 8003622:	2300      	movs	r3, #0
 8003624:	e00e      	b.n	8003644 <IBUS_Init+0x30>
    }

    /* Initialize DMA reception */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_UART_Receive_DMA(hibus->huart, hibus->buffer, hibus->bufferSize)) {
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6818      	ldr	r0, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6859      	ldr	r1, [r3, #4]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	7a1b      	ldrb	r3, [r3, #8]
 8003632:	461a      	mov	r2, r3
 8003634:	f005 fdaf 	bl	8009196 <HAL_UART_Receive_DMA>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <IBUS_Init+0x2e>
        /* END MODIFY 1 */

        /* DMA initialization was unsuccessful */
        return false;
 800363e:	2300      	movs	r3, #0
 8003640:	e000      	b.n	8003644 <IBUS_Init+0x30>
    }

    /* iBus initialization was successful */
    return true;
 8003642:	2301      	movs	r3, #1
}
 8003644:	4618      	mov	r0, r3
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <FSA8S_CheckFirstBytes>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t FSA8S_CheckFirstBytes(IBUS_HandleTypeDef_t * hibus) {
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hibus) {
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <FSA8S_CheckFirstBytes+0x12>
        return false;
 800365a:	2300      	movs	r3, #0
 800365c:	e00d      	b.n	800367a <FSA8S_CheckFirstBytes+0x2e>
    }

    /* Check first bytes*/
    if (IBUS_BUFFER_LENGTH == hibus->buffer[0] && IBUS_COMMAND == hibus->buffer[1]) {
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b20      	cmp	r3, #32
 8003666:	d107      	bne.n	8003678 <FSA8S_CheckFirstBytes+0x2c>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	3301      	adds	r3, #1
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b40      	cmp	r3, #64	@ 0x40
 8003672:	d101      	bne.n	8003678 <FSA8S_CheckFirstBytes+0x2c>
        /* First two bytes are correct */
        return true;
 8003674:	2301      	movs	r3, #1
 8003676:	e000      	b.n	800367a <FSA8S_CheckFirstBytes+0x2e>
    } else {
        /* First two bytes are not correct */
        return false;
 8003678:	2300      	movs	r3, #0
    }
}
 800367a:	4618      	mov	r0, r3
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <FSA8S_Checksum>:

static bool_t FSA8S_Checksum(IBUS_HandleTypeDef_t * hibus) {
 8003686:	b480      	push	{r7}
 8003688:	b085      	sub	sp, #20
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]

    /* Declare variable for checksum value in data received */
    uint16_t sentChecksum;

    /* Define variable for checksum to calculate using the data received */
    uint16_t receivedChecksum = 0xFFFF;
 800368e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003692:	81fb      	strh	r3, [r7, #14]

    /* Check parameter */
    if (NULL == hibus) {
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <FSA8S_Checksum+0x18>
        return false;
 800369a:	2300      	movs	r3, #0
 800369c:	e02c      	b.n	80036f8 <FSA8S_Checksum+0x72>
    }

    /* Get received checksum value */
    sentChecksum = (hibus->buffer[hibus->bufferSize - 1] << 8) | (hibus->buffer[hibus->bufferSize - 2]);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	7a1b      	ldrb	r3, [r3, #8]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	4413      	add	r3, r2
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	021b      	lsls	r3, r3, #8
 80036ae:	b21a      	sxth	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6859      	ldr	r1, [r3, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	7a1b      	ldrb	r3, [r3, #8]
 80036b8:	3b02      	subs	r3, #2
 80036ba:	440b      	add	r3, r1
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	b21b      	sxth	r3, r3
 80036c0:	4313      	orrs	r3, r2
 80036c2:	b21b      	sxth	r3, r3
 80036c4:	817b      	strh	r3, [r7, #10]

    /* Calculate checksum */
    for (uint8_t i = 0; i < 30; i++) {
 80036c6:	2300      	movs	r3, #0
 80036c8:	737b      	strb	r3, [r7, #13]
 80036ca:	e00b      	b.n	80036e4 <FSA8S_Checksum+0x5e>
        receivedChecksum -= hibus->buffer[i];
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	7b7b      	ldrb	r3, [r7, #13]
 80036d2:	4413      	add	r3, r2
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	461a      	mov	r2, r3
 80036d8:	89fb      	ldrh	r3, [r7, #14]
 80036da:	1a9b      	subs	r3, r3, r2
 80036dc:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < 30; i++) {
 80036de:	7b7b      	ldrb	r3, [r7, #13]
 80036e0:	3301      	adds	r3, #1
 80036e2:	737b      	strb	r3, [r7, #13]
 80036e4:	7b7b      	ldrb	r3, [r7, #13]
 80036e6:	2b1d      	cmp	r3, #29
 80036e8:	d9f0      	bls.n	80036cc <FSA8S_Checksum+0x46>
    }

    /* Compare received checksum value with calculated one */
    if (sentChecksum == receivedChecksum) {
 80036ea:	897a      	ldrh	r2, [r7, #10]
 80036ec:	89fb      	ldrh	r3, [r7, #14]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d101      	bne.n	80036f6 <FSA8S_Checksum+0x70>
        /* Received data is correct */
        return true;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e000      	b.n	80036f8 <FSA8S_Checksum+0x72>
    } else {
        /* Received data is corrupted */
        return false;
 80036f6:	2300      	movs	r3, #0
    }
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <FSA8S_AmendData>:

static void FSA8S_AmendData(IBUS_HandleTypeDef_t * hibus) {
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]

    /* Declare variable for channel value */
    uint16_t channelValue;

    /* Check parameter */
    if (NULL != hibus) {
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d061      	beq.n	80037d6 <FSA8S_AmendData+0xd2>

        /* Amend data */
        for (uint8_t i = 2; i < (hibus->bufferSize - 2); i += 2) {
 8003712:	2302      	movs	r3, #2
 8003714:	737b      	strb	r3, [r7, #13]
 8003716:	e058      	b.n	80037ca <FSA8S_AmendData+0xc6>

            channelValue = IBUS_CHANNEL_VALUE_NULL;
 8003718:	2300      	movs	r3, #0
 800371a:	81fb      	strh	r3, [r7, #14]

            /* Swap channel bytes */
            channelValue = ((hibus->buffer[i + 1] << 8) | (hibus->buffer[i])) - calibrationValues[(i - 2) / 2];
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	7b7b      	ldrb	r3, [r7, #13]
 8003722:	3301      	adds	r3, #1
 8003724:	4413      	add	r3, r2
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	021b      	lsls	r3, r3, #8
 800372a:	b21a      	sxth	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6859      	ldr	r1, [r3, #4]
 8003730:	7b7b      	ldrb	r3, [r7, #13]
 8003732:	440b      	add	r3, r1
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	b21b      	sxth	r3, r3
 8003738:	4313      	orrs	r3, r2
 800373a:	b21b      	sxth	r3, r3
 800373c:	b29a      	uxth	r2, r3
 800373e:	7b7b      	ldrb	r3, [r7, #13]
 8003740:	3b02      	subs	r3, #2
 8003742:	0fd9      	lsrs	r1, r3, #31
 8003744:	440b      	add	r3, r1
 8003746:	105b      	asrs	r3, r3, #1
 8003748:	4619      	mov	r1, r3
 800374a:	4b26      	ldr	r3, [pc, #152]	@ (80037e4 <FSA8S_AmendData+0xe0>)
 800374c:	5c5b      	ldrb	r3, [r3, r1]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	81fb      	strh	r3, [r7, #14]

            /* Map channel value from 0 to IBUS_CHANNEL_MAX_VALUE */
            if ((IBUS_CHANNEL_MIN_RAW_VALUE <= channelValue) && (IBUS_CHANNEL_MAX_RAW_VALUE >= channelValue)) {
 8003752:	89fb      	ldrh	r3, [r7, #14]
 8003754:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003758:	d308      	bcc.n	800376c <FSA8S_AmendData+0x68>
 800375a:	89fb      	ldrh	r3, [r7, #14]
 800375c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003760:	d804      	bhi.n	800376c <FSA8S_AmendData+0x68>
                channelValue -= IBUS_CHANNEL_MIN_RAW_VALUE;
 8003762:	89fb      	ldrh	r3, [r7, #14]
 8003764:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8003768:	81fb      	strh	r3, [r7, #14]
 800376a:	e001      	b.n	8003770 <FSA8S_AmendData+0x6c>
            } else {
                channelValue = IBUS_CHANNEL_VALUE_NULL;
 800376c:	2300      	movs	r3, #0
 800376e:	81fb      	strh	r3, [r7, #14]
            }

            /* Map channel value between minimum and maximum values and store it */
            hibus->data[(i - 2) / 2] = channelValue * ((float)(IBUS_CHANNEL_MAX_VALUE + (calibrationValues[(i - 2) / 2] * ((float)IBUS_CHANNEL_MAX_VALUE / IBUS_CHANNEL_MIN_RAW_VALUE))) / IBUS_CHANNEL_MIN_RAW_VALUE);
 8003770:	89fb      	ldrh	r3, [r7, #14]
 8003772:	ee07 3a90 	vmov	s15, r3
 8003776:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800377a:	7b7b      	ldrb	r3, [r7, #13]
 800377c:	3b02      	subs	r3, #2
 800377e:	0fda      	lsrs	r2, r3, #31
 8003780:	4413      	add	r3, r2
 8003782:	105b      	asrs	r3, r3, #1
 8003784:	461a      	mov	r2, r3
 8003786:	4b17      	ldr	r3, [pc, #92]	@ (80037e4 <FSA8S_AmendData+0xe0>)
 8003788:	5c9b      	ldrb	r3, [r3, r2]
 800378a:	ee07 3a90 	vmov	s15, r3
 800378e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003792:	eddf 6a15 	vldr	s13, [pc, #84]	@ 80037e8 <FSA8S_AmendData+0xe4>
 8003796:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800379a:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80037e8 <FSA8S_AmendData+0xe4>
 800379e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80037a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68da      	ldr	r2, [r3, #12]
 80037aa:	7b7b      	ldrb	r3, [r7, #13]
 80037ac:	3b02      	subs	r3, #2
 80037ae:	0fd9      	lsrs	r1, r3, #31
 80037b0:	440b      	add	r3, r1
 80037b2:	105b      	asrs	r3, r3, #1
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	4413      	add	r3, r2
 80037b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037bc:	ee17 2a90 	vmov	r2, s15
 80037c0:	b292      	uxth	r2, r2
 80037c2:	801a      	strh	r2, [r3, #0]
        for (uint8_t i = 2; i < (hibus->bufferSize - 2); i += 2) {
 80037c4:	7b7b      	ldrb	r3, [r7, #13]
 80037c6:	3302      	adds	r3, #2
 80037c8:	737b      	strb	r3, [r7, #13]
 80037ca:	7b7a      	ldrb	r2, [r7, #13]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	7a1b      	ldrb	r3, [r3, #8]
 80037d0:	3b02      	subs	r3, #2
 80037d2:	429a      	cmp	r2, r3
 80037d4:	dba0      	blt.n	8003718 <FSA8S_AmendData+0x14>
        }
    }
}
 80037d6:	bf00      	nop
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	20000040 	.word	0x20000040
 80037e8:	447a0000 	.word	0x447a0000

080037ec <FSA8S_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
IBUS_HandleTypeDef_t * FSA8S_Init(UART_HandleTypeDef * huart) {
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]

    /* Define variable to track number of initializations */
    static uint8_t alreadyInitialized = false;

    /* Check parameter */
    if (NULL == huart) {
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <FSA8S_Init+0x12>
        return NULL;
 80037fa:	2300      	movs	r3, #0
 80037fc:	e04a      	b.n	8003894 <FSA8S_Init+0xa8>
    }

    /* Check if driver was already initialized */
    if (alreadyInitialized) {
 80037fe:	4b27      	ldr	r3, [pc, #156]	@ (800389c <FSA8S_Init+0xb0>)
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <FSA8S_Init+0x1e>
        return NULL;
 8003806:	2300      	movs	r3, #0
 8003808:	e044      	b.n	8003894 <FSA8S_Init+0xa8>
    }

    /* Allocate dynamic memory for the IBUS_HandleTypeDef_t structure and for the buffer to receive
     * data */
#ifdef USE_FREERTOS
    IBUS_HandleTypeDef_t * hibus = (IBUS_HandleTypeDef_t *)pvPortMalloc(sizeof(IBUS_HandleTypeDef_t));
 800380a:	2014      	movs	r0, #20
 800380c:	f00c f9ee 	bl	800fbec <pvPortMalloc>
 8003810:	6178      	str	r0, [r7, #20]
    uint8_t * buffer = (uint8_t *)pvPortMalloc(sizeof(uint8_t) * IBUS_BUFFER_LENGTH);
 8003812:	2020      	movs	r0, #32
 8003814:	f00c f9ea 	bl	800fbec <pvPortMalloc>
 8003818:	6138      	str	r0, [r7, #16]
    uint16_t * data = (uint16_t *)pvPortMalloc(sizeof(uint16_t) * IBUS_CHANNELS);
 800381a:	201c      	movs	r0, #28
 800381c:	f00c f9e6 	bl	800fbec <pvPortMalloc>
 8003820:	60f8      	str	r0, [r7, #12]
    uint8_t * buffer = (uint8_t *)malloc(sizeof(uint8_t) * IBUS_BUFFER_LENGTH);
    uint16_t * data = (uint16_t *)malloc(sizeof(uint16_t) * IBUS_CHANNELS);
#endif

    /* Initialize iBus_HandleTypeDef structure */
    if (hibus) {
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00f      	beq.n	8003848 <FSA8S_Init+0x5c>
        hibus->huart = huart;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	601a      	str	r2, [r3, #0]
        hibus->buffer = buffer;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	605a      	str	r2, [r3, #4]
        hibus->bufferSize = IBUS_BUFFER_LENGTH;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	2220      	movs	r2, #32
 8003838:	721a      	strb	r2, [r3, #8]
        hibus->data = data;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	60da      	str	r2, [r3, #12]
        hibus->channels = IBUS_CHANNELS;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	220e      	movs	r2, #14
 8003844:	741a      	strb	r2, [r3, #16]
 8003846:	e00c      	b.n	8003862 <FSA8S_Init+0x76>
    } else {
        /* Dynamic memory allocation was not successful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	4618      	mov	r0, r3
 800384e:	f00c f9df 	bl	800fc10 <vPortFree>
        vPortFree(hibus->data);
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	4618      	mov	r0, r3
 8003858:	f00c f9da 	bl	800fc10 <vPortFree>
        vPortFree(hibus);
 800385c:	6978      	ldr	r0, [r7, #20]
 800385e:	f00c f9d7 	bl	800fc10 <vPortFree>
        free(hibus);
#endif
    }

    /* Initialize iBus communication */
    if (IBUS_Init(hibus)) {
 8003862:	6978      	ldr	r0, [r7, #20]
 8003864:	f7ff fed6 	bl	8003614 <IBUS_Init>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d004      	beq.n	8003878 <FSA8S_Init+0x8c>
        /* Initialization was successful */
        alreadyInitialized = true;
 800386e:	4b0b      	ldr	r3, [pc, #44]	@ (800389c <FSA8S_Init+0xb0>)
 8003870:	2201      	movs	r2, #1
 8003872:	701a      	strb	r2, [r3, #0]
        return hibus;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	e00d      	b.n	8003894 <FSA8S_Init+0xa8>
    } else {
        /* Initialization was unsuccessful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	4618      	mov	r0, r3
 800387e:	f00c f9c7 	bl	800fc10 <vPortFree>
        vPortFree(hibus->data);
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	4618      	mov	r0, r3
 8003888:	f00c f9c2 	bl	800fc10 <vPortFree>
        vPortFree(hibus);
 800388c:	6978      	ldr	r0, [r7, #20]
 800388e:	f00c f9bf 	bl	800fc10 <vPortFree>
#else
        /* Free up dynamic allocated memory */
        free(hibus->buffer);
        free(hibus);
#endif
        return NULL;
 8003892:	2300      	movs	r3, #0
    }
}
 8003894:	4618      	mov	r0, r3
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	20000d24 	.word	0x20000d24

080038a0 <FSA8S_ReadChannel>:

uint16_t FSA8S_ReadChannel(IBUS_HandleTypeDef_t * hibus, FSA8S_CHANNEL_t channel) {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	70fb      	strb	r3, [r7, #3]

    /* Check parameter */
    if (NULL == hibus) {
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <FSA8S_ReadChannel+0x16>
        return IBUS_CHANNEL_VALUE_NULL;
 80038b2:	2300      	movs	r3, #0
 80038b4:	e029      	b.n	800390a <FSA8S_ReadChannel+0x6a>
    }

    /* Check parameter */
    if (!(channel > 0 && channel <= IBUS_CHANNELS)) {
 80038b6:	78fb      	ldrb	r3, [r7, #3]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <FSA8S_ReadChannel+0x22>
 80038bc:	78fb      	ldrb	r3, [r7, #3]
 80038be:	2b0e      	cmp	r3, #14
 80038c0:	d901      	bls.n	80038c6 <FSA8S_ReadChannel+0x26>

#ifdef FSA8S_USE_LOGGING
        LOG((uint8_t *)"FSA8S invalid channel to read.\r\n\n", LOG_ERROR);
#endif

        return IBUS_CHANNEL_VALUE_NULL;
 80038c2:	2300      	movs	r3, #0
 80038c4:	e021      	b.n	800390a <FSA8S_ReadChannel+0x6a>
    }

    /* Check if first two bytes are IBUS_LENGTH and IBUS_COMMAND */
    while (1) {
        while (!FSA8S_CheckFirstBytes(hibus)) {
 80038c6:	bf00      	nop
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff febf 	bl	800364c <FSA8S_CheckFirstBytes>
 80038ce:	4603      	mov	r3, r0
 80038d0:	f083 0301 	eor.w	r3, r3, #1
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f6      	bne.n	80038c8 <FSA8S_ReadChannel+0x28>
            /* Wait until a data frame with the right format is received */
        }

        /* Perform a checksum */
        if (!FSA8S_Checksum(hibus)) {
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7ff fed3 	bl	8003686 <FSA8S_Checksum>
 80038e0:	4603      	mov	r3, r0
 80038e2:	f083 0301 	eor.w	r3, r3, #1
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <FSA8S_ReadChannel+0x50>
            /* Received data is corrupted */
            /* Wait another transaction and check first to bytes */
            continue;
 80038ec:	bf00      	nop
        while (!FSA8S_CheckFirstBytes(hibus)) {
 80038ee:	e7ea      	b.n	80038c6 <FSA8S_ReadChannel+0x26>
        } else {
            /* Received data is correct */
            /* Quit outer while loop */
            break;
 80038f0:	bf00      	nop
        }
    }

    /* Get channels data in little-endian */
    FSA8S_AmendData(hibus);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7ff ff06 	bl	8003704 <FSA8S_AmendData>

    /* Return channel value */
    return hibus->data[channel - IBUS_CHANNEL_NUM_OFFSET];
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	78fb      	ldrb	r3, [r7, #3]
 80038fe:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8003902:	3b01      	subs	r3, #1
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	4413      	add	r3, r2
 8003908:	881b      	ldrh	r3, [r3, #0]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <I2C_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t I2C_Init(GY87_HandleTypeDef_t * hgy87) {
 8003912:	b580      	push	{r7, lr}
 8003914:	b086      	sub	sp, #24
 8003916:	af02      	add	r7, sp, #8
 8003918:	6078      	str	r0, [r7, #4]

    uint8_t who_am_I_value;

    /* Check parameter */
    if (NULL == hgy87) {
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <I2C_Init+0x12>
        return false;
 8003920:	2300      	movs	r3, #0
 8003922:	e010      	b.n	8003946 <I2C_Init+0x34>
    }

    /* Read IMU device ID */
    I2C_Read(hgy87->hi2c, hgy87->address, MPU_6050_REG_WHO_AM_I, &who_am_I_value, 1);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6858      	ldr	r0, [r3, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	7a19      	ldrb	r1, [r3, #8]
 800392c:	f107 030f 	add.w	r3, r7, #15
 8003930:	2201      	movs	r2, #1
 8003932:	9200      	str	r2, [sp, #0]
 8003934:	2275      	movs	r2, #117	@ 0x75
 8003936:	f000 f80a 	bl	800394e <I2C_Read>

    /* Check IMU device ID */
    if (who_am_I_value == MPU_6050_BIT_WHO_AM_I) {
 800393a:	7bfb      	ldrb	r3, [r7, #15]
 800393c:	2b68      	cmp	r3, #104	@ 0x68
 800393e:	d101      	bne.n	8003944 <I2C_Init+0x32>
        /* Right IMU device ID */
        return true;
 8003940:	2301      	movs	r3, #1
 8003942:	e000      	b.n	8003946 <I2C_Init+0x34>
    } else {
        /* Wrong IMU device ID */
        return false;
 8003944:	2300      	movs	r3, #0
    }
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <I2C_Read>:

bool_t I2C_Read(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 800394e:	b580      	push	{r7, lr}
 8003950:	b088      	sub	sp, #32
 8003952:	af04      	add	r7, sp, #16
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	607b      	str	r3, [r7, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	72fb      	strb	r3, [r7, #11]
 800395c:	4613      	mov	r3, r2
 800395e:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <I2C_Read+0x1c>
        return false;
 8003966:	2300      	movs	r3, #0
 8003968:	e019      	b.n	800399e <I2C_Read+0x50>
    }
    if (NULL == data) {
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <I2C_Read+0x26>
        return false;
 8003970:	2300      	movs	r3, #0
 8003972:	e014      	b.n	800399e <I2C_Read+0x50>
    }

    /* Read I2C device data by passing a data register */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_I2C_Mem_Read(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, dataSize, MPU_6050_I2C_READ_TIMEOUT)) {
 8003974:	7afb      	ldrb	r3, [r7, #11]
 8003976:	b299      	uxth	r1, r3
 8003978:	7abb      	ldrb	r3, [r7, #10]
 800397a:	b29a      	uxth	r2, r3
 800397c:	7e3b      	ldrb	r3, [r7, #24]
 800397e:	b29b      	uxth	r3, r3
 8003980:	2064      	movs	r0, #100	@ 0x64
 8003982:	9002      	str	r0, [sp, #8]
 8003984:	9301      	str	r3, [sp, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	2301      	movs	r3, #1
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f002 fafd 	bl	8005f8c <HAL_I2C_Mem_Read>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <I2C_Read+0x4e>
        /* END MODIFY 1 */
        /* Data couldn't be read */
        return false;
 8003998:	2300      	movs	r3, #0
 800399a:	e000      	b.n	800399e <I2C_Read+0x50>
    } else {
        /* Data read successfully */
        return true;
 800399c:	2301      	movs	r3, #1
    }
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <I2C_Write>:

bool_t I2C_Write(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data) {
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b088      	sub	sp, #32
 80039aa:	af04      	add	r7, sp, #16
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	607b      	str	r3, [r7, #4]
 80039b0:	460b      	mov	r3, r1
 80039b2:	72fb      	strb	r3, [r7, #11]
 80039b4:	4613      	mov	r3, r2
 80039b6:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <I2C_Write+0x1c>
        return false;
 80039be:	2300      	movs	r3, #0
 80039c0:	e018      	b.n	80039f4 <I2C_Write+0x4e>
    }
    if (NULL == data) {
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <I2C_Write+0x26>
        return false;
 80039c8:	2300      	movs	r3, #0
 80039ca:	e013      	b.n	80039f4 <I2C_Write+0x4e>
    }

    /* Write to I2C device register */
    /* BEGIN MODIFY 2 */
    if (HAL_OK != HAL_I2C_Mem_Write(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, sizeof(*data), MPU_6050_I2C_WRITE_TIMEOUT)) {
 80039cc:	7afb      	ldrb	r3, [r7, #11]
 80039ce:	b299      	uxth	r1, r3
 80039d0:	7abb      	ldrb	r3, [r7, #10]
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	2364      	movs	r3, #100	@ 0x64
 80039d6:	9302      	str	r3, [sp, #8]
 80039d8:	2301      	movs	r3, #1
 80039da:	9301      	str	r3, [sp, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	2301      	movs	r3, #1
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f002 f9d8 	bl	8005d98 <HAL_I2C_Mem_Write>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <I2C_Write+0x4c>
        /* END MODIFY 2 */
        /* Data couldn't be written */
        return false;
 80039ee:	2300      	movs	r3, #0
 80039f0:	e000      	b.n	80039f4 <I2C_Write+0x4e>
    } else {

        /* Data written successfully */
        return true;
 80039f2:	2301      	movs	r3, #1
    }
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <GY87_InstanceInit>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static GY87_HandleTypeDef_t * GY87_InstanceInit(I2C_HandleTypeDef * hi2c) {
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]

#ifdef USE_FREERTOS
    /* Allocate dynamic memory for the GY87_HandleTypeDef_t structure */
    GY87_HandleTypeDef_t * hgy87 = pvPortMalloc(sizeof(GY87_HandleTypeDef_t));
 8003a04:	2014      	movs	r0, #20
 8003a06:	f00c f8f1 	bl	800fbec <pvPortMalloc>
 8003a0a:	60f8      	str	r0, [r7, #12]

    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = pvPortMalloc(sizeof(1));
 8003a0c:	2004      	movs	r0, #4
 8003a0e:	f00c f8ed 	bl	800fbec <pvPortMalloc>
 8003a12:	60b8      	str	r0, [r7, #8]
    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = malloc(sizeof(1));
#endif

    /* Check if dynamic memory allocation was successful */
    if (NULL == hgy87 || NULL == buffer) {
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d002      	beq.n	8003a20 <GY87_InstanceInit+0x24>
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d109      	bne.n	8003a34 <GY87_InstanceInit+0x38>
        /* Dynamic memory allocation was not successful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hgy87->buffer);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f00c f8f3 	bl	800fc10 <vPortFree>
        vPortFree(hgy87);
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f00c f8f0 	bl	800fc10 <vPortFree>
        /* Free up dynamic allocated memory */
        hgy87->buffer = 0;
        free(hgy87->buffer);
        free(hgy87);
#endif
        return NULL;
 8003a30:	2300      	movs	r3, #0
 8003a32:	e01b      	b.n	8003a6c <GY87_InstanceInit+0x70>
    } else {
        /* Dynamic memory allocation was successful */

        /* Initialize GY87_HandleTypeDef_t structure */
        if (instancesNumber == 0) {
 8003a34:	4b0f      	ldr	r3, [pc, #60]	@ (8003a74 <GY87_InstanceInit+0x78>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d106      	bne.n	8003a4a <GY87_InstanceInit+0x4e>
            hgy87->instance = 1;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	701a      	strb	r2, [r3, #0]
            hgy87->address = MPU6050_AUX_VAL_I2C_ADDR1;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	22d0      	movs	r2, #208	@ 0xd0
 8003a46:	721a      	strb	r2, [r3, #8]
 8003a48:	e009      	b.n	8003a5e <GY87_InstanceInit+0x62>
        } else if (instancesNumber == 1) {
 8003a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a74 <GY87_InstanceInit+0x78>)
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d105      	bne.n	8003a5e <GY87_InstanceInit+0x62>
            hgy87->instance = 2;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2202      	movs	r2, #2
 8003a56:	701a      	strb	r2, [r3, #0]
            hgy87->address = MPU6050_AUX_VAL_I2C_ADDR2;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	22d1      	movs	r2, #209	@ 0xd1
 8003a5c:	721a      	strb	r2, [r3, #8]
        }
        hgy87->hi2c = hi2c;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	605a      	str	r2, [r3, #4]
        hgy87->buffer = buffer;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	60da      	str	r2, [r3, #12]
    }

    /* Return created instance */
    return hgy87;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	20000d25 	.word	0x20000d25

08003a78 <MPU6050_WakeUpDevice>:

static void MPU6050_WakeUpDevice(GY87_HandleTypeDef_t * hgy87) {
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af02      	add	r7, sp, #8
 8003a7e:	6078      	str	r0, [r7, #4]

    /* Wake up device */
    uint8_t regData;

    regData = MPU_6050_BIT_PWR_MGMT_1_SLEEP;
 8003a80:	2340      	movs	r3, #64	@ 0x40
 8003a82:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_CLEAR_BIT);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6858      	ldr	r0, [r3, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	7a19      	ldrb	r1, [r3, #8]
 8003a8c:	f107 030f 	add.w	r3, r7, #15
 8003a90:	2200      	movs	r2, #0
 8003a92:	9200      	str	r2, [sp, #0]
 8003a94:	226b      	movs	r2, #107	@ 0x6b
 8003a96:	f000 fad3 	bl	8004040 <MPU6050_WriteRegisterBitmasked>
}
 8003a9a:	bf00      	nop
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <MPU6050_SetClockSource>:

static void MPU6050_SetClockSource(GY87_HandleTypeDef_t * hgy87) {
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b086      	sub	sp, #24
 8003aa6:	af02      	add	r7, sp, #8
 8003aa8:	6078      	str	r0, [r7, #4]

    /* Set clock source */
    uint8_t regData;

    regData = MPU_6050_BIT_PWR_MGMT_1_CLKSEL_1;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_SET_BIT);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6858      	ldr	r0, [r3, #4]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	7a19      	ldrb	r1, [r3, #8]
 8003ab6:	f107 030f 	add.w	r3, r7, #15
 8003aba:	2201      	movs	r2, #1
 8003abc:	9200      	str	r2, [sp, #0]
 8003abe:	226b      	movs	r2, #107	@ 0x6b
 8003ac0:	f000 fabe 	bl	8004040 <MPU6050_WriteRegisterBitmasked>
}
 8003ac4:	bf00      	nop
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <MPU6050_SetSampleDivider>:

static void MPU6050_SetSampleDivider(GY87_HandleTypeDef_t * hgy87) {
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	6078      	str	r0, [r7, #4]

    /* Set sample rate divider */
    uint8_t regData;

    regData = MPU_6050_BIT_SMPLRT_DIV;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_SMPLRT_DIV, &regData, MPU6050_SET_BIT);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6858      	ldr	r0, [r3, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	7a19      	ldrb	r1, [r3, #8]
 8003ae0:	f107 030f 	add.w	r3, r7, #15
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	9200      	str	r2, [sp, #0]
 8003ae8:	2219      	movs	r2, #25
 8003aea:	f000 faa9 	bl	8004040 <MPU6050_WriteRegisterBitmasked>
}
 8003aee:	bf00      	nop
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <MPU6050_EnableDLPF>:

static void MPU6050_EnableDLPF(GY87_HandleTypeDef_t * hgy87) {
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b086      	sub	sp, #24
 8003afa:	af02      	add	r7, sp, #8
 8003afc:	6078      	str	r0, [r7, #4]

    /* Enable digital low pass filter */
    uint8_t regData;

    regData = MPU_6050_BIT_CONFIG_DLPF_CFG_5;
 8003afe:	2305      	movs	r3, #5
 8003b00:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_CONFIG, &regData, MPU6050_SET_BIT);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6858      	ldr	r0, [r3, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	7a19      	ldrb	r1, [r3, #8]
 8003b0a:	f107 030f 	add.w	r3, r7, #15
 8003b0e:	2201      	movs	r2, #1
 8003b10:	9200      	str	r2, [sp, #0]
 8003b12:	221a      	movs	r2, #26
 8003b14:	f000 fa94 	bl	8004040 <MPU6050_WriteRegisterBitmasked>
}
 8003b18:	bf00      	nop
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <MPU6050_SetGyroscopeRange>:

static void MPU6050_SetGyroscopeRange(GY87_HandleTypeDef_t * hgy87) {
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af02      	add	r7, sp, #8
 8003b26:	6078      	str	r0, [r7, #4]

    /* Set gyroscope range */
    uint8_t regData;

    regData = MPU_6050_BIT_GYRO_CONFIG_FS_SEL_1; // Full range
 8003b28:	2308      	movs	r3, #8
 8003b2a:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_CONFIG, &regData, MPU6050_SET_BIT);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6858      	ldr	r0, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	7a19      	ldrb	r1, [r3, #8]
 8003b34:	f107 030f 	add.w	r3, r7, #15
 8003b38:	2201      	movs	r2, #1
 8003b3a:	9200      	str	r2, [sp, #0]
 8003b3c:	221b      	movs	r2, #27
 8003b3e:	f000 fa7f 	bl	8004040 <MPU6050_WriteRegisterBitmasked>
}
 8003b42:	bf00      	nop
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <MPU6050_SetAccelerometerRange>:

static void MPU6050_SetAccelerometerRange(GY87_HandleTypeDef_t * hgy87) {
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b086      	sub	sp, #24
 8003b4e:	af02      	add	r7, sp, #8
 8003b50:	6078      	str	r0, [r7, #4]

    /* Set accelerometer range */
    uint8_t regData;

    regData = MPU_6050_BIT_ACCEL_CONFIG_FS_SEL_2; // Full range
 8003b52:	2310      	movs	r3, #16
 8003b54:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_CONFIG, &regData, MPU6050_SET_BIT);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6858      	ldr	r0, [r3, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	7a19      	ldrb	r1, [r3, #8]
 8003b5e:	f107 030f 	add.w	r3, r7, #15
 8003b62:	2201      	movs	r2, #1
 8003b64:	9200      	str	r2, [sp, #0]
 8003b66:	221c      	movs	r2, #28
 8003b68:	f000 fa6a 	bl	8004040 <MPU6050_WriteRegisterBitmasked>
}
 8003b6c:	bf00      	nop
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <MPU6050_EnableI2CMasterMode>:

static void MPU6050_EnableI2CMasterMode(GY87_HandleTypeDef_t * hgy87) {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af02      	add	r7, sp, #8
 8003b7a:	6078      	str	r0, [r7, #4]

    /* Enable I2C Master mode */
    uint8_t regData;

    regData = MPU_6050_BIT_USER_CTRL_MST_EN;
 8003b7c:	2320      	movs	r3, #32
 8003b7e:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_USER_CTRL, &regData, MPU6050_SET_BIT);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6858      	ldr	r0, [r3, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	7a19      	ldrb	r1, [r3, #8]
 8003b88:	f107 030f 	add.w	r3, r7, #15
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	9200      	str	r2, [sp, #0]
 8003b90:	226a      	movs	r2, #106	@ 0x6a
 8003b92:	f000 fa55 	bl	8004040 <MPU6050_WriteRegisterBitmasked>
}
 8003b96:	bf00      	nop
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <MPU6050_DisableI2CMasterMode>:

static void MPU6050_DisableI2CMasterMode(GY87_HandleTypeDef_t * hgy87) {
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b086      	sub	sp, #24
 8003ba2:	af02      	add	r7, sp, #8
 8003ba4:	6078      	str	r0, [r7, #4]

    /* Disable I2C Master mode */
    uint8_t regData;

    regData = MPU_6050_BIT_USER_CTRL_MST_EN;
 8003ba6:	2320      	movs	r3, #32
 8003ba8:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_USER_CTRL, &regData, MPU6050_CLEAR_BIT);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6858      	ldr	r0, [r3, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	7a19      	ldrb	r1, [r3, #8]
 8003bb2:	f107 030f 	add.w	r3, r7, #15
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	9200      	str	r2, [sp, #0]
 8003bba:	226a      	movs	r2, #106	@ 0x6a
 8003bbc:	f000 fa40 	bl	8004040 <MPU6050_WriteRegisterBitmasked>
}
 8003bc0:	bf00      	nop
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <MPU6050_EnableBypassMode>:

static void MPU6050_EnableBypassMode(GY87_HandleTypeDef_t * hgy87) {
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af02      	add	r7, sp, #8
 8003bce:	6078      	str	r0, [r7, #4]

    /* Enable Bypass mode */
    uint8_t regData;

    regData = MPU_6050_BIT_INT_PIN_CFG_I2C_BP_EN;
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_INT_PIN_CFG, &regData, MPU6050_SET_BIT);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6858      	ldr	r0, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	7a19      	ldrb	r1, [r3, #8]
 8003bdc:	f107 030f 	add.w	r3, r7, #15
 8003be0:	2201      	movs	r2, #1
 8003be2:	9200      	str	r2, [sp, #0]
 8003be4:	2237      	movs	r2, #55	@ 0x37
 8003be6:	f000 fa2b 	bl	8004040 <MPU6050_WriteRegisterBitmasked>
}
 8003bea:	bf00      	nop
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <MPU6050_DisableBypassMode>:

static void MPU6050_DisableBypassMode(GY87_HandleTypeDef_t * hgy87) {
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b086      	sub	sp, #24
 8003bf6:	af02      	add	r7, sp, #8
 8003bf8:	6078      	str	r0, [r7, #4]

    /* Disable Bypass mode */
    uint8_t regData;

    regData = MPU_6050_BIT_INT_PIN_CFG_I2C_BP_EN;
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_INT_PIN_CFG, &regData, MPU6050_SET_BIT);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6858      	ldr	r0, [r3, #4]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	7a19      	ldrb	r1, [r3, #8]
 8003c06:	f107 030f 	add.w	r3, r7, #15
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	9200      	str	r2, [sp, #0]
 8003c0e:	2237      	movs	r2, #55	@ 0x37
 8003c10:	f000 fa16 	bl	8004040 <MPU6050_WriteRegisterBitmasked>
}
 8003c14:	bf00      	nop
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <MPU6050_SetMasterClock>:

static void MPU6050_SetMasterClock(GY87_HandleTypeDef_t * hgy87) {
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af02      	add	r7, sp, #8
 8003c22:	6078      	str	r0, [r7, #4]

    /* Set Master Clock */
    uint8_t regData;

    regData = MPU_6050_BIT_I2C_MST_CTRL_CLK_13;
 8003c24:	230d      	movs	r3, #13
 8003c26:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_MST_CTRL, &regData, MPU6050_SET_BIT);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6858      	ldr	r0, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	7a19      	ldrb	r1, [r3, #8]
 8003c30:	f107 030f 	add.w	r3, r7, #15
 8003c34:	2201      	movs	r2, #1
 8003c36:	9200      	str	r2, [sp, #0]
 8003c38:	2224      	movs	r2, #36	@ 0x24
 8003c3a:	f000 fa01 	bl	8004040 <MPU6050_WriteRegisterBitmasked>
}
 8003c3e:	bf00      	nop
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <MPU6050_Configure_QMC5883l>:

static void MPU6050_Configure_QMC5883l(GY87_HandleTypeDef_t * hgy87) {
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b086      	sub	sp, #24
 8003c4a:	af02      	add	r7, sp, #8
 8003c4c:	6078      	str	r0, [r7, #4]

    /* Configure slave QMC5883L magnetometer in MPU6050 */
    uint8_t regData;

    /* Set slave QMC5883L magnetometer device address */
    regData = 0x80 | QMC5883L_AUX_VAL_I2C_ADDR;
 8003c4e:	238d      	movs	r3, #141	@ 0x8d
 8003c50:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV0_ADDR, &regData, MPU6050_SET_BIT);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6858      	ldr	r0, [r3, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	7a19      	ldrb	r1, [r3, #8]
 8003c5a:	f107 030f 	add.w	r3, r7, #15
 8003c5e:	2201      	movs	r2, #1
 8003c60:	9200      	str	r2, [sp, #0]
 8003c62:	2225      	movs	r2, #37	@ 0x25
 8003c64:	f000 f9ec 	bl	8004040 <MPU6050_WriteRegisterBitmasked>

    /* Set slave QMC5883L magnetometer registers addresses to read */
    regData = QMC5883L_REG_X_LSB;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV0_REG, &regData, MPU6050_SET_BIT);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6858      	ldr	r0, [r3, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	7a19      	ldrb	r1, [r3, #8]
 8003c74:	f107 030f 	add.w	r3, r7, #15
 8003c78:	2201      	movs	r2, #1
 8003c7a:	9200      	str	r2, [sp, #0]
 8003c7c:	2226      	movs	r2, #38	@ 0x26
 8003c7e:	f000 f9df 	bl	8004040 <MPU6050_WriteRegisterBitmasked>

    /* Set slave QMC5883L magnetometer number of registers to read*/
    regData = 0x80 | 0x06;
 8003c82:	2386      	movs	r3, #134	@ 0x86
 8003c84:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV0_CTRL, &regData, MPU6050_SET_BIT);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6858      	ldr	r0, [r3, #4]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	7a19      	ldrb	r1, [r3, #8]
 8003c8e:	f107 030f 	add.w	r3, r7, #15
 8003c92:	2201      	movs	r2, #1
 8003c94:	9200      	str	r2, [sp, #0]
 8003c96:	2227      	movs	r2, #39	@ 0x27
 8003c98:	f000 f9d2 	bl	8004040 <MPU6050_WriteRegisterBitmasked>
}
 8003c9c:	bf00      	nop
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <MPU6050_Configure_BMP180>:

static void MPU6050_Configure_BMP180(GY87_HandleTypeDef_t * hgy87) {
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]

    /* Configure slave BMP180 barometer in MPU6050 */
    uint8_t regData;

    /* Set slave BMP180 barometer device address (SLAVE 1: Registers 0xF6 to 0xF8) */
    regData = 0x80 | BMP180_AUX_VAL_I2C_ADDR;
 8003cac:	23f7      	movs	r3, #247	@ 0xf7
 8003cae:	73fb      	strb	r3, [r7, #15]
    // MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV1_ADDR, &regData, MPU6050_SET_BIT);
    MPU6050_WriteRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV1_ADDR, &regData);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6858      	ldr	r0, [r3, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	7a19      	ldrb	r1, [r3, #8]
 8003cb8:	f107 030f 	add.w	r3, r7, #15
 8003cbc:	2228      	movs	r2, #40	@ 0x28
 8003cbe:	f000 f9ac 	bl	800401a <MPU6050_WriteRegister>

    /* Set slave BMP180 barometer registers addresses to read (SLAVE 1: Registers 0xF6 to 0xF8) */
    regData = 0xF6;
 8003cc2:	23f6      	movs	r3, #246	@ 0xf6
 8003cc4:	73fb      	strb	r3, [r7, #15]
    // MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV1_REG, &regData, MPU6050_SET_BIT);
    MPU6050_WriteRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV1_REG, &regData);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6858      	ldr	r0, [r3, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	7a19      	ldrb	r1, [r3, #8]
 8003cce:	f107 030f 	add.w	r3, r7, #15
 8003cd2:	2229      	movs	r2, #41	@ 0x29
 8003cd4:	f000 f9a1 	bl	800401a <MPU6050_WriteRegister>

    /* Set slave BMP180 barometer number of registers to read (SLAVE 1: Registers 0xF6 to 0xF8) */
    regData = 0x80 | 0x03;
 8003cd8:	2383      	movs	r3, #131	@ 0x83
 8003cda:	73fb      	strb	r3, [r7, #15]
    // MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV1_CTRL, &regData, MPU6050_SET_BIT);
    MPU6050_WriteRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV1_CTRL, &regData);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6858      	ldr	r0, [r3, #4]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	7a19      	ldrb	r1, [r3, #8]
 8003ce4:	f107 030f 	add.w	r3, r7, #15
 8003ce8:	222a      	movs	r2, #42	@ 0x2a
 8003cea:	f000 f996 	bl	800401a <MPU6050_WriteRegister>
}
 8003cee:	bf00      	nop
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
	...

08003cf8 <GY87_Configure>:

static bool_t GY87_Configure(GY87_HandleTypeDef_t * hgy87) {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]

    /* Configure MPU6050 device */

    /* Wake up device */
    MPU6050_WakeUpDevice(hgy87);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7ff feb9 	bl	8003a78 <MPU6050_WakeUpDevice>

    /* Set clock source */
    MPU6050_SetClockSource(hgy87);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7ff fecb 	bl	8003aa2 <MPU6050_SetClockSource>

    /* Set sample rate divider */
    MPU6050_SetSampleDivider(hgy87);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7ff fedd 	bl	8003acc <MPU6050_SetSampleDivider>

    /* Enable digital low pass filter */
    MPU6050_EnableDLPF(hgy87);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7ff feef 	bl	8003af6 <MPU6050_EnableDLPF>

    /* Set gyroscope range */
    MPU6050_SetGyroscopeRange(hgy87);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7ff ff01 	bl	8003b20 <MPU6050_SetGyroscopeRange>

    /* Set accelerometer range */
    MPU6050_SetAccelerometerRange(hgy87);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7ff ff13 	bl	8003b4a <MPU6050_SetAccelerometerRange>

    /* Disable I2C Master mode */
    MPU6050_DisableI2CMasterMode(hgy87);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7ff ff3a 	bl	8003b9e <MPU6050_DisableI2CMasterMode>

    /* Enable Bypass mode */
    MPU6050_EnableBypassMode(hgy87);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7ff ff4c 	bl	8003bc8 <MPU6050_EnableBypassMode>

    /* Test QMC5883L magnetometer connection */
    if (!QMC5883L_TestConnection(hgy87)) {
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f845 	bl	8003dc0 <QMC5883L_TestConnection>
 8003d36:	4603      	mov	r3, r0
 8003d38:	f083 0301 	eor.w	r3, r3, #1
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d005      	beq.n	8003d4e <GY87_Configure+0x56>
#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"QMC5883L magnetometer not detected.\r\n\n", LOG_ERROR);
 8003d42:	2103      	movs	r1, #3
 8003d44:	481a      	ldr	r0, [pc, #104]	@ (8003db0 <GY87_Configure+0xb8>)
 8003d46:	f000 fd4f 	bl	80047e8 <LOG>
#endif
        return false;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	e02c      	b.n	8003da8 <GY87_Configure+0xb0>
    } else {
#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"QMC5883L magnetometer detected.\r\n\n", LOG_INFORMATION);
 8003d4e:	2100      	movs	r1, #0
 8003d50:	4818      	ldr	r0, [pc, #96]	@ (8003db4 <GY87_Configure+0xbc>)
 8003d52:	f000 fd49 	bl	80047e8 <LOG>
#endif
    }

    /* Configure QMC5883L magnetometer */
    QMC5883L_Configure(hgy87);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f862 	bl	8003e20 <QMC5883L_Configure>

    /* Test BMP180 barometer connection */
    if (!BMP180_TestConnection(hgy87)) {
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f847 	bl	8003df0 <BMP180_TestConnection>
 8003d62:	4603      	mov	r3, r0
 8003d64:	f083 0301 	eor.w	r3, r3, #1
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d005      	beq.n	8003d7a <GY87_Configure+0x82>
#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"BMP180 barometer not detected.\r\n\n", LOG_ERROR);
 8003d6e:	2103      	movs	r1, #3
 8003d70:	4811      	ldr	r0, [pc, #68]	@ (8003db8 <GY87_Configure+0xc0>)
 8003d72:	f000 fd39 	bl	80047e8 <LOG>
#endif
        return false;
 8003d76:	2300      	movs	r3, #0
 8003d78:	e016      	b.n	8003da8 <GY87_Configure+0xb0>
    } else {
#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"BMP180 barometer detected.\r\n\n", LOG_INFORMATION);
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	480f      	ldr	r0, [pc, #60]	@ (8003dbc <GY87_Configure+0xc4>)
 8003d7e:	f000 fd33 	bl	80047e8 <LOG>
#endif
    }

    /* Configure BMP180 barometer */
    BMP180_Configure(hgy87);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f878 	bl	8003e78 <BMP180_Configure>

    /* Disable Bypass */
    MPU6050_DisableBypassMode(hgy87);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7ff ff32 	bl	8003bf2 <MPU6050_DisableBypassMode>

    /* Enable I2C Master mode */
    MPU6050_EnableI2CMasterMode(hgy87);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7ff fef0 	bl	8003b74 <MPU6050_EnableI2CMasterMode>

    /* Set Master clock */
    MPU6050_SetMasterClock(hgy87);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7ff ff41 	bl	8003c1c <MPU6050_SetMasterClock>

    /* Configure slave QMC5883L magnetometer in MPU6050 */
    MPU6050_Configure_QMC5883l(hgy87);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7ff ff53 	bl	8003c46 <MPU6050_Configure_QMC5883l>

    /* Configure slave BMP180 barometer in MPU6050 */
    MPU6050_Configure_BMP180(hgy87);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7ff ff7f 	bl	8003ca4 <MPU6050_Configure_BMP180>

    return true;
 8003da6:	2301      	movs	r3, #1
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	08013a30 	.word	0x08013a30
 8003db4:	08013a58 	.word	0x08013a58
 8003db8:	08013a7c 	.word	0x08013a7c
 8003dbc:	08013aa0 	.word	0x08013aa0

08003dc0 <QMC5883L_TestConnection>:

static bool_t QMC5883L_TestConnection(GY87_HandleTypeDef_t * hgy87) {
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af02      	add	r7, sp, #8
 8003dc6:	6078      	str	r0, [r7, #4]

    /* Test QMC5883L magnetometer connection */
    uint8_t regData;

    MPU6050_ReadRegister(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CHIP_ID, &regData, sizeof(regData));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6858      	ldr	r0, [r3, #4]
 8003dcc:	f107 030f 	add.w	r3, r7, #15
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	9200      	str	r2, [sp, #0]
 8003dd4:	220d      	movs	r2, #13
 8003dd6:	211a      	movs	r1, #26
 8003dd8:	f000 f90a 	bl	8003ff0 <MPU6050_ReadRegister>

    if (QMC5883L_BIT_CHIP_ID != regData) {
 8003ddc:	7bfb      	ldrb	r3, [r7, #15]
 8003dde:	2bff      	cmp	r3, #255	@ 0xff
 8003de0:	d001      	beq.n	8003de6 <QMC5883L_TestConnection+0x26>
        return false;
 8003de2:	2300      	movs	r3, #0
 8003de4:	e000      	b.n	8003de8 <QMC5883L_TestConnection+0x28>
    } else {
        return true;
 8003de6:	2301      	movs	r3, #1
    }
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <BMP180_TestConnection>:

static bool_t BMP180_TestConnection(GY87_HandleTypeDef_t * hgy87) {
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af02      	add	r7, sp, #8
 8003df6:	6078      	str	r0, [r7, #4]

    /* Test BMP180 barometer connection */
    uint8_t regData;

    MPU6050_ReadRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, BMP180_REG_ID, &regData, sizeof(regData));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6858      	ldr	r0, [r3, #4]
 8003dfc:	f107 030f 	add.w	r3, r7, #15
 8003e00:	2201      	movs	r2, #1
 8003e02:	9200      	str	r2, [sp, #0]
 8003e04:	22d0      	movs	r2, #208	@ 0xd0
 8003e06:	21ee      	movs	r1, #238	@ 0xee
 8003e08:	f000 f8f2 	bl	8003ff0 <MPU6050_ReadRegister>

    if (BMP180_AUX_VAL_ID != regData) {
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
 8003e0e:	2b55      	cmp	r3, #85	@ 0x55
 8003e10:	d001      	beq.n	8003e16 <BMP180_TestConnection+0x26>
        return false;
 8003e12:	2300      	movs	r3, #0
 8003e14:	e000      	b.n	8003e18 <BMP180_TestConnection+0x28>
    } else {
        return true;
 8003e16:	2301      	movs	r3, #1
    }
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <QMC5883L_Configure>:

static void QMC5883L_Configure(GY87_HandleTypeDef_t * hgy87) {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af02      	add	r7, sp, #8
 8003e26:	6078      	str	r0, [r7, #4]

    /* Configure QMC5883L magnetometer */
    uint8_t regData;

    /* Reset QMC5883L magnetometer */
    regData = 0b00000001;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_RESET, &regData, QMC5883L_SET_BIT);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6858      	ldr	r0, [r3, #4]
 8003e30:	f107 030f 	add.w	r3, r7, #15
 8003e34:	2201      	movs	r2, #1
 8003e36:	9200      	str	r2, [sp, #0]
 8003e38:	220b      	movs	r2, #11
 8003e3a:	211a      	movs	r1, #26
 8003e3c:	f000 f900 	bl	8004040 <MPU6050_WriteRegisterBitmasked>

    /* Configure QMC5883L magnetometer: Control Register 1 */
    regData = 0b00011101;
 8003e40:	231d      	movs	r3, #29
 8003e42:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CONFIG1, &regData, QMC5883L_SET_BIT);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6858      	ldr	r0, [r3, #4]
 8003e48:	f107 030f 	add.w	r3, r7, #15
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	9200      	str	r2, [sp, #0]
 8003e50:	2209      	movs	r2, #9
 8003e52:	211a      	movs	r1, #26
 8003e54:	f000 f8f4 	bl	8004040 <MPU6050_WriteRegisterBitmasked>

    /* Configure QMC5883L magnetometer: Control Register 2 */
    regData = 0b00000000;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CONFIG2, &regData, QMC5883L_SET_BIT);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6858      	ldr	r0, [r3, #4]
 8003e60:	f107 030f 	add.w	r3, r7, #15
 8003e64:	2201      	movs	r2, #1
 8003e66:	9200      	str	r2, [sp, #0]
 8003e68:	220a      	movs	r2, #10
 8003e6a:	211a      	movs	r1, #26
 8003e6c:	f000 f8e8 	bl	8004040 <MPU6050_WriteRegisterBitmasked>
}
 8003e70:	bf00      	nop
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <BMP180_Configure>:

static void BMP180_Configure(GY87_HandleTypeDef_t * hgy87) {
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	6078      	str	r0, [r7, #4]

    /* Configure BMP180 barometer */
    uint8_t regData;
    uint8_t temperatureRawData[2] = {0};
 8003e80:	2300      	movs	r3, #0
 8003e82:	81bb      	strh	r3, [r7, #12]

    /* Read calibration data */
    BMP180_ReadCalibrationData(hgy87);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f82b 	bl	8003ee0 <BMP180_ReadCalibrationData>

    /* Read uncompensated temperature */
    regData = 0x2E;
 8003e8a:	232e      	movs	r3, #46	@ 0x2e
 8003e8c:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, 0xF4, &regData);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6858      	ldr	r0, [r3, #4]
 8003e92:	f107 030f 	add.w	r3, r7, #15
 8003e96:	22f4      	movs	r2, #244	@ 0xf4
 8003e98:	21ee      	movs	r1, #238	@ 0xee
 8003e9a:	f000 f8be 	bl	800401a <MPU6050_WriteRegister>
    // vTaskDelay(pdMS_TO_TICKS(5));
    // HAL_Delay(5);
#else
    // HAL_Delay(5);
#endif
    MPU6050_ReadRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, 0xF6, temperatureRawData, 2 * sizeof(uint8_t));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6858      	ldr	r0, [r3, #4]
 8003ea2:	f107 030c 	add.w	r3, r7, #12
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	9200      	str	r2, [sp, #0]
 8003eaa:	22f6      	movs	r2, #246	@ 0xf6
 8003eac:	21ee      	movs	r1, #238	@ 0xee
 8003eae:	f000 f89f 	bl	8003ff0 <MPU6050_ReadRegister>
    BMP180_CalibrationData.UT = (temperatureRawData[0] << 8) | temperatureRawData[1];
 8003eb2:	7b3b      	ldrb	r3, [r7, #12]
 8003eb4:	021b      	lsls	r3, r3, #8
 8003eb6:	7b7a      	ldrb	r2, [r7, #13]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	4a08      	ldr	r2, [pc, #32]	@ (8003edc <BMP180_Configure+0x64>)
 8003ebc:	61d3      	str	r3, [r2, #28]

    /* Write register to read uncompensated pressure in the future */
    regData = 0x34 | (BMP180_OVERSAMPLING << 6);
 8003ebe:	23b4      	movs	r3, #180	@ 0xb4
 8003ec0:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, 0xF4, &regData);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6858      	ldr	r0, [r3, #4]
 8003ec6:	f107 030f 	add.w	r3, r7, #15
 8003eca:	22f4      	movs	r2, #244	@ 0xf4
 8003ecc:	21ee      	movs	r1, #238	@ 0xee
 8003ece:	f000 f8a4 	bl	800401a <MPU6050_WriteRegister>
    //    LOG(loggingStr, LOG_DEBUGGING);
    //
    //    sprintf((char *)loggingStr, (const char *)"BMP180_Configure(): UP = %d P\r\n", uncompensatedPressure);
    //    LOG(loggingStr, LOG_DEBUGGING);
    /* DEBUGGING DELETE */
}
 8003ed2:	bf00      	nop
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	20000d28 	.word	0x20000d28

08003ee0 <BMP180_ReadCalibrationData>:

static void BMP180_ReadCalibrationData(GY87_HandleTypeDef_t * hgy87) {
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b08a      	sub	sp, #40	@ 0x28
 8003ee4:	af02      	add	r7, sp, #8
 8003ee6:	6078      	str	r0, [r7, #4]

    uint8_t callibrationData[22] = {0};
 8003ee8:	2300      	movs	r3, #0
 8003eea:	60bb      	str	r3, [r7, #8]
 8003eec:	f107 030c 	add.w	r3, r7, #12
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	605a      	str	r2, [r3, #4]
 8003ef6:	609a      	str	r2, [r3, #8]
 8003ef8:	60da      	str	r2, [r3, #12]
 8003efa:	821a      	strh	r2, [r3, #16]
    uint16_t startRegisterAddress = 0xAA;
 8003efc:	23aa      	movs	r3, #170	@ 0xaa
 8003efe:	83fb      	strh	r3, [r7, #30]

    /* Read calibration data */
    MPU6050_ReadRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, startRegisterAddress, callibrationData, sizeof(callibrationData));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6858      	ldr	r0, [r3, #4]
 8003f04:	8bfb      	ldrh	r3, [r7, #30]
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	f107 0308 	add.w	r3, r7, #8
 8003f0c:	2116      	movs	r1, #22
 8003f0e:	9100      	str	r1, [sp, #0]
 8003f10:	21ee      	movs	r1, #238	@ 0xee
 8003f12:	f000 f86d 	bl	8003ff0 <MPU6050_ReadRegister>

    BMP180_CalibrationData.AC1 = ((callibrationData[0] << 8) | callibrationData[1]);
 8003f16:	7a3b      	ldrb	r3, [r7, #8]
 8003f18:	021b      	lsls	r3, r3, #8
 8003f1a:	b21a      	sxth	r2, r3
 8003f1c:	7a7b      	ldrb	r3, [r7, #9]
 8003f1e:	b21b      	sxth	r3, r3
 8003f20:	4313      	orrs	r3, r2
 8003f22:	b21a      	sxth	r2, r3
 8003f24:	4b31      	ldr	r3, [pc, #196]	@ (8003fec <BMP180_ReadCalibrationData+0x10c>)
 8003f26:	801a      	strh	r2, [r3, #0]
    BMP180_CalibrationData.AC2 = ((callibrationData[2] << 8) | callibrationData[3]);
 8003f28:	7abb      	ldrb	r3, [r7, #10]
 8003f2a:	021b      	lsls	r3, r3, #8
 8003f2c:	b21a      	sxth	r2, r3
 8003f2e:	7afb      	ldrb	r3, [r7, #11]
 8003f30:	b21b      	sxth	r3, r3
 8003f32:	4313      	orrs	r3, r2
 8003f34:	b21a      	sxth	r2, r3
 8003f36:	4b2d      	ldr	r3, [pc, #180]	@ (8003fec <BMP180_ReadCalibrationData+0x10c>)
 8003f38:	805a      	strh	r2, [r3, #2]
    BMP180_CalibrationData.AC3 = ((callibrationData[4] << 8) | callibrationData[5]);
 8003f3a:	7b3b      	ldrb	r3, [r7, #12]
 8003f3c:	021b      	lsls	r3, r3, #8
 8003f3e:	b21a      	sxth	r2, r3
 8003f40:	7b7b      	ldrb	r3, [r7, #13]
 8003f42:	b21b      	sxth	r3, r3
 8003f44:	4313      	orrs	r3, r2
 8003f46:	b21a      	sxth	r2, r3
 8003f48:	4b28      	ldr	r3, [pc, #160]	@ (8003fec <BMP180_ReadCalibrationData+0x10c>)
 8003f4a:	809a      	strh	r2, [r3, #4]
    BMP180_CalibrationData.AC4 = ((callibrationData[6] << 8) | callibrationData[7]);
 8003f4c:	7bbb      	ldrb	r3, [r7, #14]
 8003f4e:	021b      	lsls	r3, r3, #8
 8003f50:	b21a      	sxth	r2, r3
 8003f52:	7bfb      	ldrb	r3, [r7, #15]
 8003f54:	b21b      	sxth	r3, r3
 8003f56:	4313      	orrs	r3, r2
 8003f58:	b21b      	sxth	r3, r3
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	4b23      	ldr	r3, [pc, #140]	@ (8003fec <BMP180_ReadCalibrationData+0x10c>)
 8003f5e:	80da      	strh	r2, [r3, #6]
    BMP180_CalibrationData.AC5 = ((callibrationData[8] << 8) | callibrationData[9]);
 8003f60:	7c3b      	ldrb	r3, [r7, #16]
 8003f62:	021b      	lsls	r3, r3, #8
 8003f64:	b21a      	sxth	r2, r3
 8003f66:	7c7b      	ldrb	r3, [r7, #17]
 8003f68:	b21b      	sxth	r3, r3
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	b21b      	sxth	r3, r3
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	4b1e      	ldr	r3, [pc, #120]	@ (8003fec <BMP180_ReadCalibrationData+0x10c>)
 8003f72:	811a      	strh	r2, [r3, #8]
    BMP180_CalibrationData.AC6 = ((callibrationData[10] << 8) | callibrationData[11]);
 8003f74:	7cbb      	ldrb	r3, [r7, #18]
 8003f76:	021b      	lsls	r3, r3, #8
 8003f78:	b21a      	sxth	r2, r3
 8003f7a:	7cfb      	ldrb	r3, [r7, #19]
 8003f7c:	b21b      	sxth	r3, r3
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	b21b      	sxth	r3, r3
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	4b19      	ldr	r3, [pc, #100]	@ (8003fec <BMP180_ReadCalibrationData+0x10c>)
 8003f86:	815a      	strh	r2, [r3, #10]
    BMP180_CalibrationData.B1 = ((callibrationData[12] << 8) | callibrationData[13]);
 8003f88:	7d3b      	ldrb	r3, [r7, #20]
 8003f8a:	021b      	lsls	r3, r3, #8
 8003f8c:	b21a      	sxth	r2, r3
 8003f8e:	7d7b      	ldrb	r3, [r7, #21]
 8003f90:	b21b      	sxth	r3, r3
 8003f92:	4313      	orrs	r3, r2
 8003f94:	b21a      	sxth	r2, r3
 8003f96:	4b15      	ldr	r3, [pc, #84]	@ (8003fec <BMP180_ReadCalibrationData+0x10c>)
 8003f98:	819a      	strh	r2, [r3, #12]
    BMP180_CalibrationData.B2 = ((callibrationData[14] << 8) | callibrationData[15]);
 8003f9a:	7dbb      	ldrb	r3, [r7, #22]
 8003f9c:	021b      	lsls	r3, r3, #8
 8003f9e:	b21a      	sxth	r2, r3
 8003fa0:	7dfb      	ldrb	r3, [r7, #23]
 8003fa2:	b21b      	sxth	r3, r3
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	b21a      	sxth	r2, r3
 8003fa8:	4b10      	ldr	r3, [pc, #64]	@ (8003fec <BMP180_ReadCalibrationData+0x10c>)
 8003faa:	81da      	strh	r2, [r3, #14]
    BMP180_CalibrationData.MB = ((callibrationData[16] << 8) | callibrationData[17]);
 8003fac:	7e3b      	ldrb	r3, [r7, #24]
 8003fae:	021b      	lsls	r3, r3, #8
 8003fb0:	b21a      	sxth	r2, r3
 8003fb2:	7e7b      	ldrb	r3, [r7, #25]
 8003fb4:	b21b      	sxth	r3, r3
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	b21a      	sxth	r2, r3
 8003fba:	4b0c      	ldr	r3, [pc, #48]	@ (8003fec <BMP180_ReadCalibrationData+0x10c>)
 8003fbc:	829a      	strh	r2, [r3, #20]
    BMP180_CalibrationData.MC = ((callibrationData[18] << 8) | callibrationData[19]);
 8003fbe:	7ebb      	ldrb	r3, [r7, #26]
 8003fc0:	021b      	lsls	r3, r3, #8
 8003fc2:	b21a      	sxth	r2, r3
 8003fc4:	7efb      	ldrb	r3, [r7, #27]
 8003fc6:	b21b      	sxth	r3, r3
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	b21a      	sxth	r2, r3
 8003fcc:	4b07      	ldr	r3, [pc, #28]	@ (8003fec <BMP180_ReadCalibrationData+0x10c>)
 8003fce:	82da      	strh	r2, [r3, #22]
    BMP180_CalibrationData.MD = ((callibrationData[20] << 8) | callibrationData[21]);
 8003fd0:	7f3b      	ldrb	r3, [r7, #28]
 8003fd2:	021b      	lsls	r3, r3, #8
 8003fd4:	b21a      	sxth	r2, r3
 8003fd6:	7f7b      	ldrb	r3, [r7, #29]
 8003fd8:	b21b      	sxth	r3, r3
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	b21a      	sxth	r2, r3
 8003fde:	4b03      	ldr	r3, [pc, #12]	@ (8003fec <BMP180_ReadCalibrationData+0x10c>)
 8003fe0:	831a      	strh	r2, [r3, #24]
}
 8003fe2:	bf00      	nop
 8003fe4:	3720      	adds	r7, #32
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	20000d28 	.word	0x20000d28

08003ff0 <MPU6050_ReadRegister>:
    /* DEBUGGING DELETE */

    return uncompensatedPressure;
}

static void MPU6050_ReadRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af02      	add	r7, sp, #8
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	607b      	str	r3, [r7, #4]
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	72fb      	strb	r3, [r7, #11]
 8003ffe:	4613      	mov	r3, r2
 8004000:	72bb      	strb	r3, [r7, #10]

    /* Read register */
    I2C_Read(hi2c, address, reg, data, dataSize);
 8004002:	7aba      	ldrb	r2, [r7, #10]
 8004004:	7af9      	ldrb	r1, [r7, #11]
 8004006:	7e3b      	ldrb	r3, [r7, #24]
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f7ff fc9e 	bl	800394e <I2C_Read>
}
 8004012:	bf00      	nop
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <MPU6050_WriteRegister>:

static void MPU6050_WriteRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data) {
 800401a:	b580      	push	{r7, lr}
 800401c:	b084      	sub	sp, #16
 800401e:	af00      	add	r7, sp, #0
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	607b      	str	r3, [r7, #4]
 8004024:	460b      	mov	r3, r1
 8004026:	72fb      	strb	r3, [r7, #11]
 8004028:	4613      	mov	r3, r2
 800402a:	72bb      	strb	r3, [r7, #10]

    /* Write register - ¡Destructive operation! */
    I2C_Write(hi2c, address, reg, data);
 800402c:	7aba      	ldrb	r2, [r7, #10]
 800402e:	7af9      	ldrb	r1, [r7, #11]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f7ff fcb7 	bl	80039a6 <I2C_Write>
}
 8004038:	bf00      	nop
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <MPU6050_WriteRegisterBitmasked>:

static void MPU6050_WriteRegisterBitmasked(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t set) {
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af02      	add	r7, sp, #8
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	607b      	str	r3, [r7, #4]
 800404a:	460b      	mov	r3, r1
 800404c:	72fb      	strb	r3, [r7, #11]
 800404e:	4613      	mov	r3, r2
 8004050:	72bb      	strb	r3, [r7, #10]
    uint8_t originalData;

    /* Declare variable for new data to write into register */
    uint8_t newData;

    MPU6050_ReadRegister(hi2c, address, reg, &originalData, sizeof(originalData));
 8004052:	f107 0317 	add.w	r3, r7, #23
 8004056:	7aba      	ldrb	r2, [r7, #10]
 8004058:	7af9      	ldrb	r1, [r7, #11]
 800405a:	2001      	movs	r0, #1
 800405c:	9000      	str	r0, [sp, #0]
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f7ff ffc6 	bl	8003ff0 <MPU6050_ReadRegister>

    /* Apply mask to data to write */
    if (set) {
 8004064:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d006      	beq.n	800407a <MPU6050_WriteRegisterBitmasked+0x3a>

        newData = originalData | *data;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	781a      	ldrb	r2, [r3, #0]
 8004070:	7dfb      	ldrb	r3, [r7, #23]
 8004072:	4313      	orrs	r3, r2
 8004074:	b2db      	uxtb	r3, r3
 8004076:	75bb      	strb	r3, [r7, #22]
 8004078:	e00a      	b.n	8004090 <MPU6050_WriteRegisterBitmasked+0x50>
    } else {

        newData = originalData & (~*data);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	b25b      	sxtb	r3, r3
 8004080:	43db      	mvns	r3, r3
 8004082:	b25a      	sxtb	r2, r3
 8004084:	7dfb      	ldrb	r3, [r7, #23]
 8004086:	b25b      	sxtb	r3, r3
 8004088:	4013      	ands	r3, r2
 800408a:	b25b      	sxtb	r3, r3
 800408c:	b2db      	uxtb	r3, r3
 800408e:	75bb      	strb	r3, [r7, #22]
    }

    MPU6050_WriteRegister(hi2c, address, reg, &newData);
 8004090:	f107 0316 	add.w	r3, r7, #22
 8004094:	7aba      	ldrb	r2, [r7, #10]
 8004096:	7af9      	ldrb	r1, [r7, #11]
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f7ff ffbe 	bl	800401a <MPU6050_WriteRegister>
}
 800409e:	bf00      	nop
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
	...

080040a8 <GY87_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
GY87_HandleTypeDef_t * GY87_Init(I2C_HandleTypeDef * hi2c) {
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hi2c) {
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <GY87_Init+0x12>
        return NULL;
 80040b6:	2300      	movs	r3, #0
 80040b8:	e034      	b.n	8004124 <GY87_Init+0x7c>
    }

    /* Check if driver was already once or twice initialized */
    if (GY87_MAX_NUMBER_INSTANCES == instancesNumber) {
 80040ba:	4b1c      	ldr	r3, [pc, #112]	@ (800412c <GY87_Init+0x84>)
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d101      	bne.n	80040c6 <GY87_Init+0x1e>
        return NULL;
 80040c2:	2300      	movs	r3, #0
 80040c4:	e02e      	b.n	8004124 <GY87_Init+0x7c>
    }

    /* Create an instance of the MPU6050_IMU device */
    GY87_HandleTypeDef_t * hgy87 = GY87_InstanceInit(hi2c);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7ff fc98 	bl	80039fc <GY87_InstanceInit>
 80040cc:	60f8      	str	r0, [r7, #12]

    /* Check if instance was successfully created */
    if (NULL != hgy87) {
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d022      	beq.n	800411a <GY87_Init+0x72>
        /* Instance was successfully created */

        /* Initialize I2C communication */
        if (I2C_Init(hgy87)) {
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f7ff fc1c 	bl	8003912 <I2C_Init>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00e      	beq.n	80040fe <GY87_Init+0x56>

            /* Initialization was successful */
#ifdef GY87_USE_LOGGING
            LOG((uint8_t *)"MPU6050 IMU detected.\r\n\n", LOG_INFORMATION);
 80040e0:	2100      	movs	r1, #0
 80040e2:	4813      	ldr	r0, [pc, #76]	@ (8004130 <GY87_Init+0x88>)
 80040e4:	f000 fb80 	bl	80047e8 <LOG>
#endif

            /* Configure device */
            GY87_Configure(hgy87);
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f7ff fe05 	bl	8003cf8 <GY87_Configure>

            instancesNumber++;
 80040ee:	4b0f      	ldr	r3, [pc, #60]	@ (800412c <GY87_Init+0x84>)
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	3301      	adds	r3, #1
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	4b0d      	ldr	r3, [pc, #52]	@ (800412c <GY87_Init+0x84>)
 80040f8:	701a      	strb	r2, [r3, #0]

            return hgy87;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	e012      	b.n	8004124 <GY87_Init+0x7c>
        } else {

            /* Initialization was unsuccessful */
#ifdef USE_FREERTOS
            /* Free up dynamic allocated memory */
            vPortFree(hgy87->buffer);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	4618      	mov	r0, r3
 8004104:	f00b fd84 	bl	800fc10 <vPortFree>
            vPortFree(hgy87);
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f00b fd81 	bl	800fc10 <vPortFree>
            free(hgy87->buffer);
            free(hgy87);
#endif

#ifdef GY87_USE_LOGGING
            LOG((uint8_t *)"GY87 IMU not detected.\r\n\n", LOG_ERROR);
 800410e:	2103      	movs	r1, #3
 8004110:	4808      	ldr	r0, [pc, #32]	@ (8004134 <GY87_Init+0x8c>)
 8004112:	f000 fb69 	bl	80047e8 <LOG>
#endif
            return NULL;
 8004116:	2300      	movs	r3, #0
 8004118:	e004      	b.n	8004124 <GY87_Init+0x7c>
        }
    } else {

        /* Instance couldn't be created */
#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"GY87 IMU couldn't be initialized.\r\n\n", LOG_ERROR);
 800411a:	2103      	movs	r1, #3
 800411c:	4806      	ldr	r0, [pc, #24]	@ (8004138 <GY87_Init+0x90>)
 800411e:	f000 fb63 	bl	80047e8 <LOG>
#endif
        return NULL;
 8004122:	2300      	movs	r3, #0
    }
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	20000d25 	.word	0x20000d25
 8004130:	08013ac4 	.word	0x08013ac4
 8004134:	08013ae0 	.word	0x08013ae0
 8004138:	08013afc 	.word	0x08013afc

0800413c <GY87_CalibrateGyroscope>:
        /* Reset device */
        MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_SET_BIT);
    }
}

bool_t GY87_CalibrateGyroscope(GY87_HandleTypeDef_t * hgy87) {
 800413c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004140:	b0ae      	sub	sp, #184	@ 0xb8
 8004142:	af04      	add	r7, sp, #16
 8004144:	6078      	str	r0, [r7, #4]

    /* Declare structure to read the gyroscope values */
    GY87_gyroscopeValues_t gyroscopeValues;

    /* Declare variables to accumulate measurements */
    float ratesRoll = 0;
 8004146:	f04f 0300 	mov.w	r3, #0
 800414a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    float ratesPitch = 0;
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    float ratesYaw = 0;
 8004156:	f04f 0300 	mov.w	r3, #0
 800415a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    /* Check parameter and calculate calibration value */
    if (NULL != hgy87) {
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d07b      	beq.n	800425c <GY87_CalibrateGyroscope+0x120>

        /* Calibrate gyroscope measurements */
        for (int i = 0; i < GY87_CALIBRATION_ITERATIONS; i++) {
 8004164:	2300      	movs	r3, #0
 8004166:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800416a:	e022      	b.n	80041b2 <GY87_CalibrateGyroscope+0x76>

            /* Read gyroscope values */
            GY87_ReadGyroscope(hgy87, &gyroscopeValues);
 800416c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8004170:	4619      	mov	r1, r3
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f888 	bl	8004288 <GY87_ReadGyroscope>

            /* Accumulate measurements */
            ratesRoll += gyroscopeValues.rotationRateRoll;
 8004178:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800417c:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8004180:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004184:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
            ratesPitch += gyroscopeValues.rotationRatePitch;
 8004188:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800418c:	ed97 7a28 	vldr	s14, [r7, #160]	@ 0xa0
 8004190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004194:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
            ratesYaw += gyroscopeValues.rotationRateYaw;
 8004198:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 800419c:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 80041a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041a4:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
        for (int i = 0; i < GY87_CALIBRATION_ITERATIONS; i++) {
 80041a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041ac:	3301      	adds	r3, #1
 80041ae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80041b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041b6:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80041ba:	4293      	cmp	r3, r2
 80041bc:	ddd6      	ble.n	800416c <GY87_CalibrateGyroscope+0x30>
        }

        gyroscopeCalibrationRoll = ratesRoll / GY87_CALIBRATION_ITERATIONS;
 80041be:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 80041c2:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8004270 <GY87_CalibrateGyroscope+0x134>
 80041c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041ca:	4b2a      	ldr	r3, [pc, #168]	@ (8004274 <GY87_CalibrateGyroscope+0x138>)
 80041cc:	edc3 7a00 	vstr	s15, [r3]
        gyroscopeCalibrationPitch = ratesPitch / GY87_CALIBRATION_ITERATIONS;
 80041d0:	ed97 7a28 	vldr	s14, [r7, #160]	@ 0xa0
 80041d4:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004270 <GY87_CalibrateGyroscope+0x134>
 80041d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041dc:	4b26      	ldr	r3, [pc, #152]	@ (8004278 <GY87_CalibrateGyroscope+0x13c>)
 80041de:	edc3 7a00 	vstr	s15, [r3]
        gyroscopeCalibrationYaw = ratesYaw / GY87_CALIBRATION_ITERATIONS;
 80041e2:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 80041e6:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8004270 <GY87_CalibrateGyroscope+0x134>
 80041ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041ee:	4b23      	ldr	r3, [pc, #140]	@ (800427c <GY87_CalibrateGyroscope+0x140>)
 80041f0:	edc3 7a00 	vstr	s15, [r3]

#ifdef GY87_USE_LOGGING
        uint8_t loggingStr[120] = {0};
 80041f4:	2300      	movs	r3, #0
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	f107 0310 	add.w	r3, r7, #16
 80041fc:	2274      	movs	r2, #116	@ 0x74
 80041fe:	2100      	movs	r1, #0
 8004200:	4618      	mov	r0, r3
 8004202:	f00d f862 	bl	80112ca <memset>
        sprintf((char *)loggingStr, (const char *)"Gyroscope calibration done. CALVAL_ROLL = %.2f, CALVAL_PITCH = %.2f, CALVAL_YAW = %.2f\r\n\n", gyroscopeCalibrationRoll, gyroscopeCalibrationPitch, gyroscopeCalibrationYaw);
 8004206:	4b1b      	ldr	r3, [pc, #108]	@ (8004274 <GY87_CalibrateGyroscope+0x138>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f7fc f9a4 	bl	8000558 <__aeabi_f2d>
 8004210:	4680      	mov	r8, r0
 8004212:	4689      	mov	r9, r1
 8004214:	4b18      	ldr	r3, [pc, #96]	@ (8004278 <GY87_CalibrateGyroscope+0x13c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4618      	mov	r0, r3
 800421a:	f7fc f99d 	bl	8000558 <__aeabi_f2d>
 800421e:	4604      	mov	r4, r0
 8004220:	460d      	mov	r5, r1
 8004222:	4b16      	ldr	r3, [pc, #88]	@ (800427c <GY87_CalibrateGyroscope+0x140>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f7fc f996 	bl	8000558 <__aeabi_f2d>
 800422c:	4602      	mov	r2, r0
 800422e:	460b      	mov	r3, r1
 8004230:	f107 000c 	add.w	r0, r7, #12
 8004234:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004238:	e9cd 4500 	strd	r4, r5, [sp]
 800423c:	4642      	mov	r2, r8
 800423e:	464b      	mov	r3, r9
 8004240:	490f      	ldr	r1, [pc, #60]	@ (8004280 <GY87_CalibrateGyroscope+0x144>)
 8004242:	f00c ffdf 	bl	8011204 <siprintf>
        LOG(loggingStr, LOG_INFORMATION);
 8004246:	f107 030c 	add.w	r3, r7, #12
 800424a:	2100      	movs	r1, #0
 800424c:	4618      	mov	r0, r3
 800424e:	f000 facb 	bl	80047e8 <LOG>
#endif

        gyroscopeCalibrationIsDone = true;
 8004252:	4b0c      	ldr	r3, [pc, #48]	@ (8004284 <GY87_CalibrateGyroscope+0x148>)
 8004254:	2201      	movs	r2, #1
 8004256:	701a      	strb	r2, [r3, #0]

        return true;
 8004258:	2301      	movs	r3, #1
 800425a:	e003      	b.n	8004264 <GY87_CalibrateGyroscope+0x128>

    } else {

    	gyroscopeCalibrationIsDone = false;
 800425c:	4b09      	ldr	r3, [pc, #36]	@ (8004284 <GY87_CalibrateGyroscope+0x148>)
 800425e:	2200      	movs	r2, #0
 8004260:	701a      	strb	r2, [r3, #0]

        return false;
 8004262:	2300      	movs	r3, #0
    }
}
 8004264:	4618      	mov	r0, r3
 8004266:	37a8      	adds	r7, #168	@ 0xa8
 8004268:	46bd      	mov	sp, r7
 800426a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800426e:	bf00      	nop
 8004270:	453b8000 	.word	0x453b8000
 8004274:	20000d4c 	.word	0x20000d4c
 8004278:	20000d50 	.word	0x20000d50
 800427c:	20000d54 	.word	0x20000d54
 8004280:	08013b24 	.word	0x08013b24
 8004284:	20000d58 	.word	0x20000d58

08004288 <GY87_ReadGyroscope>:

void GY87_ReadGyroscope(GY87_HandleTypeDef_t * hgy87, GY87_gyroscopeValues_t * gyroscopeValues) {
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af02      	add	r7, sp, #8
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t gyroscopeRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_GYRO_SF_0500;
 8004292:	2341      	movs	r3, #65	@ 0x41
 8004294:	81fb      	strh	r3, [r7, #14]

    /* Check parameters */
    if (NULL != hgy87 && NULL != gyroscopeValues) {
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 808a 	beq.w	80043b2 <GY87_ReadGyroscope+0x12a>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 8086 	beq.w	80043b2 <GY87_ReadGyroscope+0x12a>

        /* Read gyroscope raw value for X axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_XOUT_H, gyroscopeRawData, sizeof(uint16_t));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6858      	ldr	r0, [r3, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	7a19      	ldrb	r1, [r3, #8]
 80042ae:	f107 030c 	add.w	r3, r7, #12
 80042b2:	2202      	movs	r2, #2
 80042b4:	9200      	str	r2, [sp, #0]
 80042b6:	2243      	movs	r2, #67	@ 0x43
 80042b8:	f7ff fe9a 	bl	8003ff0 <MPU6050_ReadRegister>
        gyroscopeValues->rawValueX = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]);
 80042bc:	7b3b      	ldrb	r3, [r7, #12]
 80042be:	021b      	lsls	r3, r3, #8
 80042c0:	b21a      	sxth	r2, r3
 80042c2:	7b7b      	ldrb	r3, [r7, #13]
 80042c4:	b21b      	sxth	r3, r3
 80042c6:	4313      	orrs	r3, r2
 80042c8:	b21a      	sxth	r2, r3
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	801a      	strh	r2, [r3, #0]
        /* Calculate gyroscope rotation rate along X axis (roll) */
        gyroscopeValues->rotationRateRoll = -((float)gyroscopeValues->rawValueX / scaleFactor) - gyroscopeCalibrationRoll;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042d4:	ee07 3a90 	vmov	s15, r3
 80042d8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80042dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80042e0:	ee07 3a90 	vmov	s15, r3
 80042e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042ec:	eeb1 7a67 	vneg.f32	s14, s15
 80042f0:	4b3d      	ldr	r3, [pc, #244]	@ (80043e8 <GY87_ReadGyroscope+0x160>)
 80042f2:	edd3 7a00 	vldr	s15, [r3]
 80042f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	edc3 7a02 	vstr	s15, [r3, #8]

        /* Read gyroscope raw value for Y axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_YOUT_H, gyroscopeRawData, sizeof(uint16_t));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6858      	ldr	r0, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	7a19      	ldrb	r1, [r3, #8]
 8004308:	f107 030c 	add.w	r3, r7, #12
 800430c:	2202      	movs	r2, #2
 800430e:	9200      	str	r2, [sp, #0]
 8004310:	2245      	movs	r2, #69	@ 0x45
 8004312:	f7ff fe6d 	bl	8003ff0 <MPU6050_ReadRegister>
        gyroscopeValues->rawValueY = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]);
 8004316:	7b3b      	ldrb	r3, [r7, #12]
 8004318:	021b      	lsls	r3, r3, #8
 800431a:	b21a      	sxth	r2, r3
 800431c:	7b7b      	ldrb	r3, [r7, #13]
 800431e:	b21b      	sxth	r3, r3
 8004320:	4313      	orrs	r3, r2
 8004322:	b21a      	sxth	r2, r3
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	805a      	strh	r2, [r3, #2]
        /* Calculate gyroscope rotation rate along Y axis (pitch) */
        gyroscopeValues->rotationRatePitch = -((float)gyroscopeValues->rawValueY / scaleFactor) - gyroscopeCalibrationPitch;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800432e:	ee07 3a90 	vmov	s15, r3
 8004332:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004336:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800433a:	ee07 3a90 	vmov	s15, r3
 800433e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004346:	eeb1 7a67 	vneg.f32	s14, s15
 800434a:	4b28      	ldr	r3, [pc, #160]	@ (80043ec <GY87_ReadGyroscope+0x164>)
 800434c:	edd3 7a00 	vldr	s15, [r3]
 8004350:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	edc3 7a03 	vstr	s15, [r3, #12]

        /* Read gyroscope raw value for Z axis  */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_ZOUT_H, gyroscopeRawData, sizeof(uint16_t));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6858      	ldr	r0, [r3, #4]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	7a19      	ldrb	r1, [r3, #8]
 8004362:	f107 030c 	add.w	r3, r7, #12
 8004366:	2202      	movs	r2, #2
 8004368:	9200      	str	r2, [sp, #0]
 800436a:	2247      	movs	r2, #71	@ 0x47
 800436c:	f7ff fe40 	bl	8003ff0 <MPU6050_ReadRegister>
        gyroscopeValues->rawValueZ = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]);
 8004370:	7b3b      	ldrb	r3, [r7, #12]
 8004372:	021b      	lsls	r3, r3, #8
 8004374:	b21a      	sxth	r2, r3
 8004376:	7b7b      	ldrb	r3, [r7, #13]
 8004378:	b21b      	sxth	r3, r3
 800437a:	4313      	orrs	r3, r2
 800437c:	b21a      	sxth	r2, r3
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	809a      	strh	r2, [r3, #4]
        /* Calculate gyroscope rotation rate along Z axis (yaw)  */
        gyroscopeValues->rotationRateYaw = ((float)gyroscopeValues->rawValueZ / scaleFactor) - gyroscopeCalibrationYaw;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004388:	ee07 3a90 	vmov	s15, r3
 800438c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004390:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004394:	ee07 3a90 	vmov	s15, r3
 8004398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800439c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043a0:	4b13      	ldr	r3, [pc, #76]	@ (80043f0 <GY87_ReadGyroscope+0x168>)
 80043a2:	edd3 7a00 	vldr	s15, [r3]
 80043a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	edc3 7a04 	vstr	s15, [r3, #16]
 80043b0:	e015      	b.n	80043de <GY87_ReadGyroscope+0x156>

    } else {

        /* Wrong parameters */
        gyroscopeValues->rawValueX = 0;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2200      	movs	r2, #0
 80043b6:	801a      	strh	r2, [r3, #0]
        gyroscopeValues->rawValueY = 0;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	2200      	movs	r2, #0
 80043bc:	805a      	strh	r2, [r3, #2]
        gyroscopeValues->rawValueZ = 0;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2200      	movs	r2, #0
 80043c2:	809a      	strh	r2, [r3, #4]
        gyroscopeValues->rotationRateRoll = 0;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	f04f 0200 	mov.w	r2, #0
 80043ca:	609a      	str	r2, [r3, #8]
        gyroscopeValues->rotationRatePitch = 0;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	f04f 0200 	mov.w	r2, #0
 80043d2:	60da      	str	r2, [r3, #12]
        gyroscopeValues->rotationRateYaw = 0;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	611a      	str	r2, [r3, #16]
    }
}
 80043dc:	bf00      	nop
 80043de:	bf00      	nop
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	20000d4c 	.word	0x20000d4c
 80043ec:	20000d50 	.word	0x20000d50
 80043f0:	20000d54 	.word	0x20000d54

080043f4 <GY87_CalibrateAccelerometer>:

bool_t GY87_CalibrateAccelerometer(GY87_HandleTypeDef_t * hgy87) {
 80043f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80043f8:	b0b0      	sub	sp, #192	@ 0xc0
 80043fa:	af04      	add	r7, sp, #16
 80043fc:	6078      	str	r0, [r7, #4]

    /* Declare structure to read the accelerometer values */
    GY87_accelerometerValues_t accelerometerValues;

    /* Declare variables to accumulate measurements */
    float linearAccelerationsX = 0;
 80043fe:	f04f 0300 	mov.w	r3, #0
 8004402:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    float linearAccelerationsY = 0;
 8004406:	f04f 0300 	mov.w	r3, #0
 800440a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    float linearAccelerationsZ = 0;
 800440e:	f04f 0300 	mov.w	r3, #0
 8004412:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    /* Check parameter and calculate calibration value */
    if (NULL != hgy87) {
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d07f      	beq.n	800451c <GY87_CalibrateAccelerometer+0x128>

        /* Calibrate gyroscope measurements */
        for (int i = 0; i < GY87_CALIBRATION_ITERATIONS; i++) {
 800441c:	2300      	movs	r3, #0
 800441e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004422:	e026      	b.n	8004472 <GY87_CalibrateAccelerometer+0x7e>

            /* Read gyroscope values */
            GY87_ReadAccelerometer(hgy87, &accelerometerValues);
 8004424:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8004428:	4619      	mov	r1, r3
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f88c 	bl	8004548 <GY87_ReadAccelerometer>

            /* Accumulate measurements */
            linearAccelerationsX += accelerometerValues.linearAccelerationX;
 8004430:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8004434:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8004438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800443c:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            linearAccelerationsY += accelerometerValues.linearAccelerationY;
 8004440:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8004444:	ed97 7a2a 	vldr	s14, [r7, #168]	@ 0xa8
 8004448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800444c:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
            linearAccelerationsZ += (accelerometerValues.linearAccelerationZ - 1);
 8004450:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8004454:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004458:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800445c:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8004460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004464:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
        for (int i = 0; i < GY87_CALIBRATION_ITERATIONS; i++) {
 8004468:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800446c:	3301      	adds	r3, #1
 800446e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004476:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800447a:	4293      	cmp	r3, r2
 800447c:	ddd2      	ble.n	8004424 <GY87_CalibrateAccelerometer+0x30>
        }

        accelerometerCalibrationX = linearAccelerationsX / GY87_CALIBRATION_ITERATIONS;
 800447e:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8004482:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8004530 <GY87_CalibrateAccelerometer+0x13c>
 8004486:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800448a:	4b2a      	ldr	r3, [pc, #168]	@ (8004534 <GY87_CalibrateAccelerometer+0x140>)
 800448c:	edc3 7a00 	vstr	s15, [r3]
        accelerometerCalibrationY = linearAccelerationsY / GY87_CALIBRATION_ITERATIONS;
 8004490:	ed97 7a2a 	vldr	s14, [r7, #168]	@ 0xa8
 8004494:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004530 <GY87_CalibrateAccelerometer+0x13c>
 8004498:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800449c:	4b26      	ldr	r3, [pc, #152]	@ (8004538 <GY87_CalibrateAccelerometer+0x144>)
 800449e:	edc3 7a00 	vstr	s15, [r3]
        accelerometerCalibrationZ = linearAccelerationsZ / GY87_CALIBRATION_ITERATIONS;
 80044a2:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 80044a6:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8004530 <GY87_CalibrateAccelerometer+0x13c>
 80044aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044ae:	4b23      	ldr	r3, [pc, #140]	@ (800453c <GY87_CalibrateAccelerometer+0x148>)
 80044b0:	edc3 7a00 	vstr	s15, [r3]

#ifdef GY87_USE_LOGGING
        uint8_t loggingStr[120] = {0};
 80044b4:	2300      	movs	r3, #0
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	f107 0310 	add.w	r3, r7, #16
 80044bc:	2274      	movs	r2, #116	@ 0x74
 80044be:	2100      	movs	r1, #0
 80044c0:	4618      	mov	r0, r3
 80044c2:	f00c ff02 	bl	80112ca <memset>
        sprintf((char *)loggingStr, (const char *)"Accelerometer calibration done. CALVAL_X = %.2f, CALVAL_Y = %.2f, CALVAL_Z = %.2f\r\n\n", accelerometerCalibrationX, accelerometerCalibrationY, accelerometerCalibrationZ);
 80044c6:	4b1b      	ldr	r3, [pc, #108]	@ (8004534 <GY87_CalibrateAccelerometer+0x140>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fc f844 	bl	8000558 <__aeabi_f2d>
 80044d0:	4680      	mov	r8, r0
 80044d2:	4689      	mov	r9, r1
 80044d4:	4b18      	ldr	r3, [pc, #96]	@ (8004538 <GY87_CalibrateAccelerometer+0x144>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4618      	mov	r0, r3
 80044da:	f7fc f83d 	bl	8000558 <__aeabi_f2d>
 80044de:	4604      	mov	r4, r0
 80044e0:	460d      	mov	r5, r1
 80044e2:	4b16      	ldr	r3, [pc, #88]	@ (800453c <GY87_CalibrateAccelerometer+0x148>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fc f836 	bl	8000558 <__aeabi_f2d>
 80044ec:	4602      	mov	r2, r0
 80044ee:	460b      	mov	r3, r1
 80044f0:	f107 000c 	add.w	r0, r7, #12
 80044f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80044f8:	e9cd 4500 	strd	r4, r5, [sp]
 80044fc:	4642      	mov	r2, r8
 80044fe:	464b      	mov	r3, r9
 8004500:	490f      	ldr	r1, [pc, #60]	@ (8004540 <GY87_CalibrateAccelerometer+0x14c>)
 8004502:	f00c fe7f 	bl	8011204 <siprintf>
        LOG((uint8_t *)loggingStr, LOG_INFORMATION);
 8004506:	f107 030c 	add.w	r3, r7, #12
 800450a:	2100      	movs	r1, #0
 800450c:	4618      	mov	r0, r3
 800450e:	f000 f96b 	bl	80047e8 <LOG>
#endif

        accelerometerCalibrationIsDone = true;
 8004512:	4b0c      	ldr	r3, [pc, #48]	@ (8004544 <GY87_CalibrateAccelerometer+0x150>)
 8004514:	2201      	movs	r2, #1
 8004516:	701a      	strb	r2, [r3, #0]

        return true;
 8004518:	2301      	movs	r3, #1
 800451a:	e003      	b.n	8004524 <GY87_CalibrateAccelerometer+0x130>

    } else {

    	accelerometerCalibrationIsDone = false;
 800451c:	4b09      	ldr	r3, [pc, #36]	@ (8004544 <GY87_CalibrateAccelerometer+0x150>)
 800451e:	2200      	movs	r2, #0
 8004520:	701a      	strb	r2, [r3, #0]

        return false;
 8004522:	2300      	movs	r3, #0
    }
}
 8004524:	4618      	mov	r0, r3
 8004526:	37b0      	adds	r7, #176	@ 0xb0
 8004528:	46bd      	mov	sp, r7
 800452a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800452e:	bf00      	nop
 8004530:	453b8000 	.word	0x453b8000
 8004534:	20000d5c 	.word	0x20000d5c
 8004538:	20000d60 	.word	0x20000d60
 800453c:	20000d64 	.word	0x20000d64
 8004540:	08013b80 	.word	0x08013b80
 8004544:	20000d68 	.word	0x20000d68

08004548 <GY87_ReadAccelerometer>:

void GY87_ReadAccelerometer(GY87_HandleTypeDef_t * hgy87, GY87_accelerometerValues_t * accelerometerValues) {
 8004548:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800454c:	b08a      	sub	sp, #40	@ 0x28
 800454e:	af02      	add	r7, sp, #8
 8004550:	6078      	str	r0, [r7, #4]
 8004552:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t accelerometerRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_ACCEL_FS_08;
 8004554:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004558:	83fb      	strh	r3, [r7, #30]

    float accX, accY, accZ;

    /* Check parameters */
    if (NULL != hgy87 && NULL != accelerometerValues) {
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 810a 	beq.w	8004776 <GY87_ReadAccelerometer+0x22e>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 8106 	beq.w	8004776 <GY87_ReadAccelerometer+0x22e>

        /* Read accelerometer raw value for X axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_XOUT_H, accelerometerRawData, sizeof(uint16_t));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6858      	ldr	r0, [r3, #4]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	7a19      	ldrb	r1, [r3, #8]
 8004572:	f107 030c 	add.w	r3, r7, #12
 8004576:	2202      	movs	r2, #2
 8004578:	9200      	str	r2, [sp, #0]
 800457a:	223b      	movs	r2, #59	@ 0x3b
 800457c:	f7ff fd38 	bl	8003ff0 <MPU6050_ReadRegister>
        accelerometerValues->rawValueX = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]);
 8004580:	7b3b      	ldrb	r3, [r7, #12]
 8004582:	021b      	lsls	r3, r3, #8
 8004584:	b21a      	sxth	r2, r3
 8004586:	7b7b      	ldrb	r3, [r7, #13]
 8004588:	b21b      	sxth	r3, r3
 800458a:	4313      	orrs	r3, r2
 800458c:	b21a      	sxth	r2, r3
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	801a      	strh	r2, [r3, #0]
        /* Calculate accelerometer linear acceleration along X axis */
        accX = accelerometerValues->linearAccelerationX = -((float)accelerometerValues->rawValueX / scaleFactor) - accelerometerCalibrationX;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004598:	ee07 3a90 	vmov	s15, r3
 800459c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80045a0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80045a4:	ee07 3a90 	vmov	s15, r3
 80045a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045b0:	eeb1 7a67 	vneg.f32	s14, s15
 80045b4:	4b80      	ldr	r3, [pc, #512]	@ (80047b8 <GY87_ReadAccelerometer+0x270>)
 80045b6:	edd3 7a00 	vldr	s15, [r3]
 80045ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	edc3 7a02 	vstr	s15, [r3, #8]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	61bb      	str	r3, [r7, #24]

        /* Read accelerometer raw value for Y axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_YOUT_H, accelerometerRawData, sizeof(uint16_t));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6858      	ldr	r0, [r3, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	7a19      	ldrb	r1, [r3, #8]
 80045d2:	f107 030c 	add.w	r3, r7, #12
 80045d6:	2202      	movs	r2, #2
 80045d8:	9200      	str	r2, [sp, #0]
 80045da:	223d      	movs	r2, #61	@ 0x3d
 80045dc:	f7ff fd08 	bl	8003ff0 <MPU6050_ReadRegister>
        accelerometerValues->rawValueY = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]);
 80045e0:	7b3b      	ldrb	r3, [r7, #12]
 80045e2:	021b      	lsls	r3, r3, #8
 80045e4:	b21a      	sxth	r2, r3
 80045e6:	7b7b      	ldrb	r3, [r7, #13]
 80045e8:	b21b      	sxth	r3, r3
 80045ea:	4313      	orrs	r3, r2
 80045ec:	b21a      	sxth	r2, r3
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	805a      	strh	r2, [r3, #2]
        /* Calculate accelerometer linear acceleration along Y axis */
        accY = accelerometerValues->linearAccelerationY = -((float)accelerometerValues->rawValueY / scaleFactor) - accelerometerCalibrationY;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80045f8:	ee07 3a90 	vmov	s15, r3
 80045fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004600:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004604:	ee07 3a90 	vmov	s15, r3
 8004608:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800460c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004610:	eeb1 7a67 	vneg.f32	s14, s15
 8004614:	4b69      	ldr	r3, [pc, #420]	@ (80047bc <GY87_ReadAccelerometer+0x274>)
 8004616:	edd3 7a00 	vldr	s15, [r3]
 800461a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	edc3 7a03 	vstr	s15, [r3, #12]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	617b      	str	r3, [r7, #20]

        /* Read accelerometer raw value for Z axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_ZOUT_H, accelerometerRawData, sizeof(uint16_t));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6858      	ldr	r0, [r3, #4]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	7a19      	ldrb	r1, [r3, #8]
 8004632:	f107 030c 	add.w	r3, r7, #12
 8004636:	2202      	movs	r2, #2
 8004638:	9200      	str	r2, [sp, #0]
 800463a:	223f      	movs	r2, #63	@ 0x3f
 800463c:	f7ff fcd8 	bl	8003ff0 <MPU6050_ReadRegister>
        accelerometerValues->rawValueZ = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]);
 8004640:	7b3b      	ldrb	r3, [r7, #12]
 8004642:	021b      	lsls	r3, r3, #8
 8004644:	b21a      	sxth	r2, r3
 8004646:	7b7b      	ldrb	r3, [r7, #13]
 8004648:	b21b      	sxth	r3, r3
 800464a:	4313      	orrs	r3, r2
 800464c:	b21a      	sxth	r2, r3
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	809a      	strh	r2, [r3, #4]
        /* Calculate accelerometer linear acceleration along Z axis */
        accZ = accelerometerValues->linearAccelerationZ = ((float)accelerometerValues->rawValueZ / scaleFactor) - accelerometerCalibrationZ;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004658:	ee07 3a90 	vmov	s15, r3
 800465c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004660:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004664:	ee07 3a90 	vmov	s15, r3
 8004668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800466c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004670:	4b53      	ldr	r3, [pc, #332]	@ (80047c0 <GY87_ReadAccelerometer+0x278>)
 8004672:	edd3 7a00 	vldr	s15, [r3]
 8004676:	ee77 7a67 	vsub.f32	s15, s14, s15
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	edc3 7a04 	vstr	s15, [r3, #16]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	613b      	str	r3, [r7, #16]

        /* Calculate roll and pitch angles using an approximation with linear accelerations */
        accelerometerValues->angleRoll = atan(accY / sqrt(accX * accX + accZ * accZ)) * RADIANS_TO_DEGREES_CONST;
 8004686:	6978      	ldr	r0, [r7, #20]
 8004688:	f7fb ff66 	bl	8000558 <__aeabi_f2d>
 800468c:	4680      	mov	r8, r0
 800468e:	4689      	mov	r9, r1
 8004690:	edd7 7a06 	vldr	s15, [r7, #24]
 8004694:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004698:	edd7 7a04 	vldr	s15, [r7, #16]
 800469c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80046a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046a4:	ee17 0a90 	vmov	r0, s15
 80046a8:	f7fb ff56 	bl	8000558 <__aeabi_f2d>
 80046ac:	4602      	mov	r2, r0
 80046ae:	460b      	mov	r3, r1
 80046b0:	ec43 2b10 	vmov	d0, r2, r3
 80046b4:	f00e fe2c 	bl	8013310 <sqrt>
 80046b8:	ec53 2b10 	vmov	r2, r3, d0
 80046bc:	4640      	mov	r0, r8
 80046be:	4649      	mov	r1, r9
 80046c0:	f7fc f8cc 	bl	800085c <__aeabi_ddiv>
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	ec43 2b17 	vmov	d7, r2, r3
 80046cc:	eeb0 0a47 	vmov.f32	s0, s14
 80046d0:	eef0 0a67 	vmov.f32	s1, s15
 80046d4:	f00e fe48 	bl	8013368 <atan>
 80046d8:	ec51 0b10 	vmov	r0, r1, d0
 80046dc:	a334      	add	r3, pc, #208	@ (adr r3, 80047b0 <GY87_ReadAccelerometer+0x268>)
 80046de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e2:	f7fb ff91 	bl	8000608 <__aeabi_dmul>
 80046e6:	4602      	mov	r2, r0
 80046e8:	460b      	mov	r3, r1
 80046ea:	4610      	mov	r0, r2
 80046ec:	4619      	mov	r1, r3
 80046ee:	f7fc fa83 	bl	8000bf8 <__aeabi_d2f>
 80046f2:	4602      	mov	r2, r0
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	615a      	str	r2, [r3, #20]
        accelerometerValues->anglePitch = -atan(accX / sqrt(accY * accY + accZ * accZ)) * RADIANS_TO_DEGREES_CONST;
 80046f8:	69b8      	ldr	r0, [r7, #24]
 80046fa:	f7fb ff2d 	bl	8000558 <__aeabi_f2d>
 80046fe:	4680      	mov	r8, r0
 8004700:	4689      	mov	r9, r1
 8004702:	edd7 7a05 	vldr	s15, [r7, #20]
 8004706:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800470a:	edd7 7a04 	vldr	s15, [r7, #16]
 800470e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004712:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004716:	ee17 0a90 	vmov	r0, s15
 800471a:	f7fb ff1d 	bl	8000558 <__aeabi_f2d>
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	ec43 2b10 	vmov	d0, r2, r3
 8004726:	f00e fdf3 	bl	8013310 <sqrt>
 800472a:	ec53 2b10 	vmov	r2, r3, d0
 800472e:	4640      	mov	r0, r8
 8004730:	4649      	mov	r1, r9
 8004732:	f7fc f893 	bl	800085c <__aeabi_ddiv>
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
 800473a:	ec43 2b17 	vmov	d7, r2, r3
 800473e:	eeb0 0a47 	vmov.f32	s0, s14
 8004742:	eef0 0a67 	vmov.f32	s1, s15
 8004746:	f00e fe0f 	bl	8013368 <atan>
 800474a:	ec53 2b10 	vmov	r2, r3, d0
 800474e:	4614      	mov	r4, r2
 8004750:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8004754:	a316      	add	r3, pc, #88	@ (adr r3, 80047b0 <GY87_ReadAccelerometer+0x268>)
 8004756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475a:	4620      	mov	r0, r4
 800475c:	4629      	mov	r1, r5
 800475e:	f7fb ff53 	bl	8000608 <__aeabi_dmul>
 8004762:	4602      	mov	r2, r0
 8004764:	460b      	mov	r3, r1
 8004766:	4610      	mov	r0, r2
 8004768:	4619      	mov	r1, r3
 800476a:	f7fc fa45 	bl	8000bf8 <__aeabi_d2f>
 800476e:	4602      	mov	r2, r0
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	619a      	str	r2, [r3, #24]
 8004774:	e015      	b.n	80047a2 <GY87_ReadAccelerometer+0x25a>

    } else {
        /* Wrong parameters */
        accelerometerValues->rawValueX = 0;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2200      	movs	r2, #0
 800477a:	801a      	strh	r2, [r3, #0]
        accelerometerValues->rawValueY = 0;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	2200      	movs	r2, #0
 8004780:	805a      	strh	r2, [r3, #2]
        accelerometerValues->rawValueZ = 0;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2200      	movs	r2, #0
 8004786:	809a      	strh	r2, [r3, #4]
        accelerometerValues->linearAccelerationX = 0;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	f04f 0200 	mov.w	r2, #0
 800478e:	609a      	str	r2, [r3, #8]
        accelerometerValues->linearAccelerationY = 0;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	60da      	str	r2, [r3, #12]
        accelerometerValues->linearAccelerationZ = 0;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	f04f 0200 	mov.w	r2, #0
 800479e:	611a      	str	r2, [r3, #16]
    }
}
 80047a0:	bf00      	nop
 80047a2:	bf00      	nop
 80047a4:	3720      	adds	r7, #32
 80047a6:	46bd      	mov	sp, r7
 80047a8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80047ac:	f3af 8000 	nop.w
 80047b0:	1a63c1f8 	.word	0x1a63c1f8
 80047b4:	404ca5dc 	.word	0x404ca5dc
 80047b8:	20000d5c 	.word	0x20000d5c
 80047bc:	20000d60 	.word	0x20000d60
 80047c0:	20000d64 	.word	0x20000d64

080047c4 <USB_Write>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
void USB_Write(uint8_t * string) {
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]

    /* BEGIN MODIFY 1 */
    CDC_Transmit_FS(string, strlen((const char *)string));
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f7fb fd57 	bl	8000280 <strlen>
 80047d2:	4603      	mov	r3, r0
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	4619      	mov	r1, r3
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f00b fae9 	bl	800fdb0 <CDC_Transmit_FS>
    /* END MODIFY 1 */
}
 80047de:	bf00      	nop
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
	...

080047e8 <LOG>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t LOG(uint8_t * message, LOGGING_TYPE_t logType) {
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b0c2      	sub	sp, #264	@ 0x108
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80047f6:	6018      	str	r0, [r3, #0]
 80047f8:	460a      	mov	r2, r1
 80047fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047fe:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8004802:	701a      	strb	r2, [r3, #0]

    /* Check parameters */
    if (NULL == message) {
 8004804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004808:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <LOG+0x2e>
        return false;
 8004812:	2300      	movs	r3, #0
 8004814:	e063      	b.n	80048de <LOG+0xf6>
    }

    if (LOG_INFORMATION < 0 || logType > LOG_ERROR) {
 8004816:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800481a:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	2b03      	cmp	r3, #3
 8004822:	d901      	bls.n	8004828 <LOG+0x40>
        return false;
 8004824:	2300      	movs	r3, #0
 8004826:	e05a      	b.n	80048de <LOG+0xf6>
    }

    /* Build log message */
    uint8_t logMessage[LOG_MESSAGE_MAX_LENGTH] = {0};
 8004828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800482c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004830:	2200      	movs	r2, #0
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	3304      	adds	r3, #4
 8004836:	22fc      	movs	r2, #252	@ 0xfc
 8004838:	2100      	movs	r1, #0
 800483a:	4618      	mov	r0, r3
 800483c:	f00c fd45 	bl	80112ca <memset>

    if (LOG_INFORMATION == logType) {
 8004840:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004844:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d108      	bne.n	8004860 <LOG+0x78>

        strcat((char *)logMessage, (char *)informationTypeLabel);
 800484e:	4b26      	ldr	r3, [pc, #152]	@ (80048e8 <LOG+0x100>)
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	f107 0308 	add.w	r3, r7, #8
 8004856:	4611      	mov	r1, r2
 8004858:	4618      	mov	r0, r3
 800485a:	f00c fd3e 	bl	80112da <strcat>
 800485e:	e02e      	b.n	80048be <LOG+0xd6>
    } else if (LOG_DEBUGGING == logType) {
 8004860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004864:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d108      	bne.n	8004880 <LOG+0x98>

        strcat((char *)logMessage, (char *)debuggingTypeLabel);
 800486e:	4b1f      	ldr	r3, [pc, #124]	@ (80048ec <LOG+0x104>)
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	f107 0308 	add.w	r3, r7, #8
 8004876:	4611      	mov	r1, r2
 8004878:	4618      	mov	r0, r3
 800487a:	f00c fd2e 	bl	80112da <strcat>
 800487e:	e01e      	b.n	80048be <LOG+0xd6>
    } else if (LOG_WARNING == logType) {
 8004880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004884:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	2b02      	cmp	r3, #2
 800488c:	d108      	bne.n	80048a0 <LOG+0xb8>

        strcat((char *)logMessage, (char *)warningTypeLabel);
 800488e:	4b18      	ldr	r3, [pc, #96]	@ (80048f0 <LOG+0x108>)
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	f107 0308 	add.w	r3, r7, #8
 8004896:	4611      	mov	r1, r2
 8004898:	4618      	mov	r0, r3
 800489a:	f00c fd1e 	bl	80112da <strcat>
 800489e:	e00e      	b.n	80048be <LOG+0xd6>
    } else if (LOG_ERROR == logType) {
 80048a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048a4:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	2b03      	cmp	r3, #3
 80048ac:	d107      	bne.n	80048be <LOG+0xd6>

        strcat((char *)logMessage, (char *)errorTypeLabel);
 80048ae:	4b11      	ldr	r3, [pc, #68]	@ (80048f4 <LOG+0x10c>)
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	f107 0308 	add.w	r3, r7, #8
 80048b6:	4611      	mov	r1, r2
 80048b8:	4618      	mov	r0, r3
 80048ba:	f00c fd0e 	bl	80112da <strcat>
    }

    strcat((char *)logMessage, (char *)message);
 80048be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80048c6:	f107 0208 	add.w	r2, r7, #8
 80048ca:	6819      	ldr	r1, [r3, #0]
 80048cc:	4610      	mov	r0, r2
 80048ce:	f00c fd04 	bl	80112da <strcat>

    /* Send message through USB port */
    USB_Write(logMessage);
 80048d2:	f107 0308 	add.w	r3, r7, #8
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7ff ff74 	bl	80047c4 <USB_Write>

    return true;
 80048dc:	2301      	movs	r3, #1
}
 80048de:	4618      	mov	r0, r3
 80048e0:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	20000050 	.word	0x20000050
 80048ec:	20000054 	.word	0x20000054
 80048f0:	20000058 	.word	0x20000058
 80048f4:	2000005c 	.word	0x2000005c

080048f8 <HAL_Init>:
 * @note   SysTick is used as time base for the HAL_Delay() function, the application
 *         need to ensure that the SysTick time base is always set to 1 millisecond
 *         to have correct HAL operation.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void) {
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
    /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80048fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004938 <HAL_Init+0x40>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a0d      	ldr	r2, [pc, #52]	@ (8004938 <HAL_Init+0x40>)
 8004902:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004906:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004908:	4b0b      	ldr	r3, [pc, #44]	@ (8004938 <HAL_Init+0x40>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a0a      	ldr	r2, [pc, #40]	@ (8004938 <HAL_Init+0x40>)
 800490e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004912:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004914:	4b08      	ldr	r3, [pc, #32]	@ (8004938 <HAL_Init+0x40>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a07      	ldr	r2, [pc, #28]	@ (8004938 <HAL_Init+0x40>)
 800491a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800491e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

    /* Set Interrupt Group Priority */
    HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004920:	2003      	movs	r0, #3
 8004922:	f000 fd13 	bl	800534c <HAL_NVIC_SetPriorityGrouping>

    /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
    HAL_InitTick(TICK_INT_PRIORITY);
 8004926:	200f      	movs	r0, #15
 8004928:	f000 f808 	bl	800493c <HAL_InitTick>

    /* Init the low level hardware */
    HAL_MspInit();
 800492c:	f7fe f9ec 	bl	8002d08 <HAL_MspInit>

    /* Return function status */
    return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	40023c00 	.word	0x40023c00

0800493c <HAL_InitTick>:
 *       The function is declared as __weak  to be overwritten  in case of other
 *       implementation  in user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U) {
 8004944:	4b12      	ldr	r3, [pc, #72]	@ (8004990 <HAL_InitTick+0x54>)
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	4b12      	ldr	r3, [pc, #72]	@ (8004994 <HAL_InitTick+0x58>)
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	4619      	mov	r1, r3
 800494e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004952:	fbb3 f3f1 	udiv	r3, r3, r1
 8004956:	fbb2 f3f3 	udiv	r3, r2, r3
 800495a:	4618      	mov	r0, r3
 800495c:	f000 fd2f 	bl	80053be <HAL_SYSTICK_Config>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <HAL_InitTick+0x2e>
        return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e00e      	b.n	8004988 <HAL_InitTick+0x4c>
    }

    /* Configure the SysTick IRQ priority */
    if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b0f      	cmp	r3, #15
 800496e:	d80a      	bhi.n	8004986 <HAL_InitTick+0x4a>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004970:	2200      	movs	r2, #0
 8004972:	6879      	ldr	r1, [r7, #4]
 8004974:	f04f 30ff 	mov.w	r0, #4294967295
 8004978:	f000 fcf3 	bl	8005362 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800497c:	4a06      	ldr	r2, [pc, #24]	@ (8004998 <HAL_InitTick+0x5c>)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6013      	str	r3, [r2, #0]
    } else {
        return HAL_ERROR;
    }

    /* Return function status */
    return HAL_OK;
 8004982:	2300      	movs	r3, #0
 8004984:	e000      	b.n	8004988 <HAL_InitTick+0x4c>
        return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
}
 8004988:	4618      	mov	r0, r3
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	2000003c 	.word	0x2000003c
 8004994:	20000064 	.word	0x20000064
 8004998:	20000060 	.word	0x20000060

0800499c <HAL_IncTick>:
 *       in SysTick ISR.
 * @note This function is declared as __weak to be overwritten in case of other
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
 800499c:	b480      	push	{r7}
 800499e:	af00      	add	r7, sp, #0
    uwTick += uwTickFreq;
 80049a0:	4b06      	ldr	r3, [pc, #24]	@ (80049bc <HAL_IncTick+0x20>)
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	461a      	mov	r2, r3
 80049a6:	4b06      	ldr	r3, [pc, #24]	@ (80049c0 <HAL_IncTick+0x24>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4413      	add	r3, r2
 80049ac:	4a04      	ldr	r2, [pc, #16]	@ (80049c0 <HAL_IncTick+0x24>)
 80049ae:	6013      	str	r3, [r2, #0]
}
 80049b0:	bf00      	nop
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	20000064 	.word	0x20000064
 80049c0:	20000d6c 	.word	0x20000d6c

080049c4 <HAL_GetTick>:
 * @brief Provides a tick value in millisecond.
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
 80049c4:	b480      	push	{r7}
 80049c6:	af00      	add	r7, sp, #0
    return uwTick;
 80049c8:	4b03      	ldr	r3, [pc, #12]	@ (80049d8 <HAL_GetTick+0x14>)
 80049ca:	681b      	ldr	r3, [r3, #0]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	20000d6c 	.word	0x20000d6c

080049dc <HAL_Delay>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @param Delay specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay) {
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 80049e4:	f7ff ffee 	bl	80049c4 <HAL_GetTick>
 80049e8:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	60fb      	str	r3, [r7, #12]

    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY) {
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f4:	d005      	beq.n	8004a02 <HAL_Delay+0x26>
        wait += (uint32_t)(uwTickFreq);
 80049f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004a20 <HAL_Delay+0x44>)
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	461a      	mov	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4413      	add	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]
    }

    while ((HAL_GetTick() - tickstart) < wait) {
 8004a02:	bf00      	nop
 8004a04:	f7ff ffde 	bl	80049c4 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d8f7      	bhi.n	8004a04 <HAL_Delay+0x28>
    }
}
 8004a14:	bf00      	nop
 8004a16:	bf00      	nop
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	20000064 	.word	0x20000064

08004a24 <HAL_ADC_Init>:
 *
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef * hadc) {
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	73fb      	strb	r3, [r7, #15]

    /* Check ADC handle */
    if (hadc == NULL) {
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_ADC_Init+0x16>
        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e033      	b.n	8004aa2 <HAL_ADC_Init+0x7e>

    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START) {
        assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
    }

    if (hadc->State == HAL_ADC_STATE_RESET) {
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d109      	bne.n	8004a56 <HAL_ADC_Init+0x32>

        /* Init the low level hardware */
        hadc->MspInitCallback(hadc);
#else
        /* Init the low level hardware */
        HAL_ADC_MspInit(hadc);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f7fe f98c 	bl	8002d60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

        /* Initialize ADC error code */
        ADC_CLEAR_ERRORCODE(hadc);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Allocate lock resource and initialize it */
        hadc->Lock = HAL_UNLOCKED;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    /* Configuration of ADC parameters if previous preliminary actions are      */
    /* correctly completed.                                                     */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL)) {
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5a:	f003 0310 	and.w	r3, r3, #16
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d118      	bne.n	8004a94 <HAL_ADC_Init+0x70>
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY, HAL_ADC_STATE_BUSY_INTERNAL);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a66:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004a6a:	f023 0302 	bic.w	r3, r3, #2
 8004a6e:	f043 0202 	orr.w	r2, r3, #2
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set ADC parameters */
        ADC_Init(hadc);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 fa86 	bl	8004f88 <ADC_Init>

        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a86:	f023 0303 	bic.w	r3, r3, #3
 8004a8a:	f043 0201 	orr.w	r2, r3, #1
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	641a      	str	r2, [r3, #64]	@ 0x40
 8004a92:	e001      	b.n	8004a98 <HAL_ADC_Init+0x74>
    } else {
        tmp_hal_status = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	73fb      	strb	r3, [r7, #15]
    }

    /* Release Lock */
    __HAL_UNLOCK(hadc);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return function status */
    return tmp_hal_status;
 8004aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
	...

08004aac <HAL_ADC_Start>:
 * @brief  Enables ADC and starts conversion of the regular channels.
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef * hadc) {
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
    __IO uint32_t counter = 0U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	60bb      	str	r3, [r7, #8]
    /* Check the parameters */
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

    /* Process locked */
    __HAL_LOCK(hadc);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d101      	bne.n	8004ac6 <HAL_ADC_Start+0x1a>
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	e097      	b.n	8004bf6 <HAL_ADC_Start+0x14a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the ADC peripheral */
    /* Check if ADC peripheral is disabled in order to enable it and wait during
    Tstab time the ADC's stabilization */
    if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d018      	beq.n	8004b0e <HAL_ADC_Start+0x62>
        /* Enable the Peripheral */
        __HAL_ADC_ENABLE(hadc);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0201 	orr.w	r2, r2, #1
 8004aea:	609a      	str	r2, [r3, #8]

        /* Delay for ADC stabilization time */
        /* Compute number of CPU cycles to wait for */
        counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004aec:	4b45      	ldr	r3, [pc, #276]	@ (8004c04 <HAL_ADC_Start+0x158>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a45      	ldr	r2, [pc, #276]	@ (8004c08 <HAL_ADC_Start+0x15c>)
 8004af2:	fba2 2303 	umull	r2, r3, r2, r3
 8004af6:	0c9a      	lsrs	r2, r3, #18
 8004af8:	4613      	mov	r3, r2
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	4413      	add	r3, r2
 8004afe:	60bb      	str	r3, [r7, #8]
        while (counter != 0U) {
 8004b00:	e002      	b.n	8004b08 <HAL_ADC_Start+0x5c>
            counter--;
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	3b01      	subs	r3, #1
 8004b06:	60bb      	str	r3, [r7, #8]
        while (counter != 0U) {
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1f9      	bne.n	8004b02 <HAL_ADC_Start+0x56>
        }
    }

    /* Start conversion if ADC is effectively enabled */
    if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON)) {
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d15f      	bne.n	8004bdc <HAL_ADC_Start+0x130>
        /* Set ADC state                                                          */
        /* - Clear state bitfield related to regular group conversion results     */
        /* - Set state bitfield related to regular group operation                */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR, HAL_ADC_STATE_REG_BUSY);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b20:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004b24:	f023 0301 	bic.w	r3, r3, #1
 8004b28:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* If conversions on group regular are also triggering group injected,    */
        /* update ADC state.                                                      */
        if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET) {
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d007      	beq.n	8004b4e <HAL_ADC_Start+0xa2>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b42:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004b46:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	641a      	str	r2, [r3, #64]	@ 0x40
        }

        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b5a:	d106      	bne.n	8004b6a <HAL_ADC_Start+0xbe>
            /* Reset ADC error code fields related to conversions on group regular */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b60:	f023 0206 	bic.w	r2, r3, #6
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	645a      	str	r2, [r3, #68]	@ 0x44
 8004b68:	e002      	b.n	8004b70 <HAL_ADC_Start+0xc4>
        } else {
            /* Reset ADC all error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential           */
        /* interruption, to let the process to ADC IRQ Handler.                   */
        __HAL_UNLOCK(hadc);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Pointer to the common control register to which is belonging hadc    */
        /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
        /* control register)                                                    */
        tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b78:	4b24      	ldr	r3, [pc, #144]	@ (8004c0c <HAL_ADC_Start+0x160>)
 8004b7a:	60fb      	str	r3, [r7, #12]

        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC operations) */
        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004b84:	601a      	str	r2, [r3, #0]

        /* Check if Multimode enabled */
        if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI)) {
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f003 031f 	and.w	r3, r3, #31
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10f      	bne.n	8004bb2 <HAL_ADC_Start+0x106>
#if defined(ADC2) && defined(ADC3)
            if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4))) {
#endif /* ADC2 || ADC3 */
                /* if no external trigger present enable software conversion of regular channels */
                if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) {
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d129      	bne.n	8004bf4 <HAL_ADC_Start+0x148>
                    /* Enable the selected ADC software conversion for regular group */
                    hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689a      	ldr	r2, [r3, #8]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004bae:	609a      	str	r2, [r3, #8]
 8004bb0:	e020      	b.n	8004bf4 <HAL_ADC_Start+0x148>
#if defined(ADC2) && defined(ADC3)
            }
#endif /* ADC2 || ADC3 */
        } else {
            /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
            if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)) {
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a16      	ldr	r2, [pc, #88]	@ (8004c10 <HAL_ADC_Start+0x164>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d11b      	bne.n	8004bf4 <HAL_ADC_Start+0x148>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d114      	bne.n	8004bf4 <HAL_ADC_Start+0x148>
                /* Enable the selected ADC software conversion for regular group */
                hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004bd8:	609a      	str	r2, [r3, #8]
 8004bda:	e00b      	b.n	8004bf4 <HAL_ADC_Start+0x148>
            }
        }
    } else {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be0:	f043 0210 	orr.w	r2, r3, #16
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bec:	f043 0201 	orr.w	r2, r3, #1
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Return function status */
    return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	2000003c 	.word	0x2000003c
 8004c08:	431bde83 	.word	0x431bde83
 8004c0c:	40012300 	.word	0x40012300
 8004c10:	40012000 	.word	0x40012000

08004c14 <HAL_ADC_PollForConversion>:
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @param  Timeout Timeout value in millisecond.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef * hadc, uint32_t Timeout) {
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
    uint32_t tickstart = 0U;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60fb      	str	r3, [r7, #12]
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and polling for end of each conversion.     */
    if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) && HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)) {
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c30:	d113      	bne.n	8004c5a <HAL_ADC_PollForConversion+0x46>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c40:	d10b      	bne.n	8004c5a <HAL_ADC_PollForConversion+0x46>
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c46:	f043 0220 	orr.w	r2, r3, #32
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e063      	b.n	8004d22 <HAL_ADC_PollForConversion+0x10e>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c5a:	f7ff feb3 	bl	80049c4 <HAL_GetTick>
 8004c5e:	60f8      	str	r0, [r7, #12]

    /* Check End of conversion flag */
    while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC))) {
 8004c60:	e021      	b.n	8004ca6 <HAL_ADC_PollForConversion+0x92>
        /* Check if timeout is disabled (set to infinite wait) */
        if (Timeout != HAL_MAX_DELAY) {
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c68:	d01d      	beq.n	8004ca6 <HAL_ADC_PollForConversion+0x92>
            if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout)) {
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d007      	beq.n	8004c80 <HAL_ADC_PollForConversion+0x6c>
 8004c70:	f7ff fea8 	bl	80049c4 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d212      	bcs.n	8004ca6 <HAL_ADC_PollForConversion+0x92>
                /* New check to avoid false timeout detection in case of preemption */
                if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC))) {
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d00b      	beq.n	8004ca6 <HAL_ADC_PollForConversion+0x92>
                    /* Update ADC state machine to timeout */
                    SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c92:	f043 0204 	orr.w	r2, r3, #4
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	641a      	str	r2, [r3, #64]	@ 0x40

                    /* Process unlocked */
                    __HAL_UNLOCK(hadc);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

                    return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e03d      	b.n	8004d22 <HAL_ADC_PollForConversion+0x10e>
    while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC))) {
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d1d6      	bne.n	8004c62 <HAL_ADC_PollForConversion+0x4e>
            }
        }
    }

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f06f 0212 	mvn.w	r2, #18
 8004cbc:	601a      	str	r2, [r3, #0]

    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.          */
    /* Note: On STM32F4, there is no independent flag of end of sequence.       */
    /*       The test of scan sequence on going is done either with scan        */
    /*       sequence disabled or with end of conversion flag set to            */
    /*       of end of sequence.                                                */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc) && (hadc->Init.ContinuousConvMode == DISABLE) && (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS))) {
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d123      	bne.n	8004d20 <HAL_ADC_PollForConversion+0x10c>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	7e1b      	ldrb	r3, [r3, #24]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d11f      	bne.n	8004d20 <HAL_ADC_PollForConversion+0x10c>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d006      	beq.n	8004cfc <HAL_ADC_PollForConversion+0xe8>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d111      	bne.n	8004d20 <HAL_ADC_PollForConversion+0x10c>
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	641a      	str	r2, [r3, #64]	@ 0x40

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d105      	bne.n	8004d20 <HAL_ADC_PollForConversion+0x10c>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d18:	f043 0201 	orr.w	r2, r3, #1
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	641a      	str	r2, [r3, #64]	@ 0x40
        }
    }

    /* Return ADC state */
    return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <HAL_ADC_GetValue>:
 * @brief  Gets the converted value from data register of regular channel.
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @retval Converted value
 */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef * hadc) {
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
    /* Return the selected ADC converted value */
    return hadc->Instance->DR;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_ADC_ConfigChannel>:
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @param  sConfig ADC configuration structure.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef * hadc, ADC_ChannelConfTypeDef * sConfig) {
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
    __IO uint32_t counter = 0U;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

    /* Process locked */
    __HAL_LOCK(hadc);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d101      	bne.n	8004d60 <HAL_ADC_ConfigChannel+0x1c>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	e105      	b.n	8004f6c <HAL_ADC_ConfigChannel+0x228>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
    if (sConfig->Channel > ADC_CHANNEL_9) {
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2b09      	cmp	r3, #9
 8004d6e:	d925      	bls.n	8004dbc <HAL_ADC_ConfigChannel+0x78>
        /* Clear the old sample time */
        hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68d9      	ldr	r1, [r3, #12]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	4613      	mov	r3, r2
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	4413      	add	r3, r2
 8004d84:	3b1e      	subs	r3, #30
 8004d86:	2207      	movs	r2, #7
 8004d88:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8c:	43da      	mvns	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	400a      	ands	r2, r1
 8004d94:	60da      	str	r2, [r3, #12]

        /* Set the new sample time */
        hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68d9      	ldr	r1, [r3, #12]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	4618      	mov	r0, r3
 8004da8:	4603      	mov	r3, r0
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	4403      	add	r3, r0
 8004dae:	3b1e      	subs	r3, #30
 8004db0:	409a      	lsls	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	60da      	str	r2, [r3, #12]
 8004dba:	e022      	b.n	8004e02 <HAL_ADC_ConfigChannel+0xbe>
    } else /* ADC_Channel include in ADC_Channel_[0..9] */
    {
        /* Clear the old sample time */
        hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6919      	ldr	r1, [r3, #16]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	461a      	mov	r2, r3
 8004dca:	4613      	mov	r3, r2
 8004dcc:	005b      	lsls	r3, r3, #1
 8004dce:	4413      	add	r3, r2
 8004dd0:	2207      	movs	r2, #7
 8004dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd6:	43da      	mvns	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	400a      	ands	r2, r1
 8004dde:	611a      	str	r2, [r3, #16]

        /* Set the new sample time */
        hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6919      	ldr	r1, [r3, #16]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	689a      	ldr	r2, [r3, #8]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	4618      	mov	r0, r3
 8004df2:	4603      	mov	r3, r0
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	4403      	add	r3, r0
 8004df8:	409a      	lsls	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	611a      	str	r2, [r3, #16]
    }

    /* For Rank 1 to 6 */
    if (sConfig->Rank < 7U) {
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2b06      	cmp	r3, #6
 8004e08:	d824      	bhi.n	8004e54 <HAL_ADC_ConfigChannel+0x110>
        /* Clear the old SQx bits for the selected rank */
        hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	4613      	mov	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	3b05      	subs	r3, #5
 8004e1c:	221f      	movs	r2, #31
 8004e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e22:	43da      	mvns	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	400a      	ands	r2, r1
 8004e2a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the SQx bits for the selected rank */
        hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	4618      	mov	r0, r3
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	3b05      	subs	r3, #5
 8004e46:	fa00 f203 	lsl.w	r2, r0, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	635a      	str	r2, [r3, #52]	@ 0x34
 8004e52:	e04c      	b.n	8004eee <HAL_ADC_ConfigChannel+0x1aa>
    }
    /* For Rank 7 to 12 */
    else if (sConfig->Rank < 13U) {
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2b0c      	cmp	r3, #12
 8004e5a:	d824      	bhi.n	8004ea6 <HAL_ADC_ConfigChannel+0x162>
        /* Clear the old SQx bits for the selected rank */
        hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	4613      	mov	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4413      	add	r3, r2
 8004e6c:	3b23      	subs	r3, #35	@ 0x23
 8004e6e:	221f      	movs	r2, #31
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	43da      	mvns	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	400a      	ands	r2, r1
 8004e7c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the SQx bits for the selected rank */
        hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	4613      	mov	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	3b23      	subs	r3, #35	@ 0x23
 8004e98:	fa00 f203 	lsl.w	r2, r0, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ea4:	e023      	b.n	8004eee <HAL_ADC_ConfigChannel+0x1aa>
    }
    /* For Rank 13 to 16 */
    else {
        /* Clear the old SQx bits for the selected rank */
        hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4413      	add	r3, r2
 8004eb6:	3b41      	subs	r3, #65	@ 0x41
 8004eb8:	221f      	movs	r2, #31
 8004eba:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebe:	43da      	mvns	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	400a      	ands	r2, r1
 8004ec6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the SQx bits for the selected rank */
        hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	3b41      	subs	r3, #65	@ 0x41
 8004ee2:	fa00 f203 	lsl.w	r2, r0, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004eee:	4b22      	ldr	r3, [pc, #136]	@ (8004f78 <HAL_ADC_ConfigChannel+0x234>)
 8004ef0:	60fb      	str	r3, [r7, #12]

    /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
    if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT)) {
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a21      	ldr	r2, [pc, #132]	@ (8004f7c <HAL_ADC_ConfigChannel+0x238>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d109      	bne.n	8004f10 <HAL_ADC_ConfigChannel+0x1cc>
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b12      	cmp	r3, #18
 8004f02:	d105      	bne.n	8004f10 <HAL_ADC_ConfigChannel+0x1cc>
        /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
        if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT) {
            tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
        }
        /* Enable the VBAT channel*/
        tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	605a      	str	r2, [r3, #4]
    }

    /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
       Channel_17 is selected for VREFINT enable TSVREFE */
    if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT))) {
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a19      	ldr	r2, [pc, #100]	@ (8004f7c <HAL_ADC_ConfigChannel+0x238>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d123      	bne.n	8004f62 <HAL_ADC_ConfigChannel+0x21e>
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2b10      	cmp	r3, #16
 8004f20:	d003      	beq.n	8004f2a <HAL_ADC_ConfigChannel+0x1e6>
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2b11      	cmp	r3, #17
 8004f28:	d11b      	bne.n	8004f62 <HAL_ADC_ConfigChannel+0x21e>
        /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
        if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT) {
            tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
        }
        /* Enable the Temperature sensor and VREFINT channel*/
        tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	605a      	str	r2, [r3, #4]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) {
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b10      	cmp	r3, #16
 8004f3c:	d111      	bne.n	8004f62 <HAL_ADC_ConfigChannel+0x21e>
            /* Delay for temperature sensor stabilization time */
            /* Compute number of CPU cycles to wait for */
            counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004f3e:	4b10      	ldr	r3, [pc, #64]	@ (8004f80 <HAL_ADC_ConfigChannel+0x23c>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a10      	ldr	r2, [pc, #64]	@ (8004f84 <HAL_ADC_ConfigChannel+0x240>)
 8004f44:	fba2 2303 	umull	r2, r3, r2, r3
 8004f48:	0c9a      	lsrs	r2, r3, #18
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4413      	add	r3, r2
 8004f50:	005b      	lsls	r3, r3, #1
 8004f52:	60bb      	str	r3, [r7, #8]
            while (counter != 0U) {
 8004f54:	e002      	b.n	8004f5c <HAL_ADC_ConfigChannel+0x218>
                counter--;
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	60bb      	str	r3, [r7, #8]
            while (counter != 0U) {
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1f9      	bne.n	8004f56 <HAL_ADC_ConfigChannel+0x212>
            }
        }
    }

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return function status */
    return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr
 8004f78:	40012300 	.word	0x40012300
 8004f7c:	40012000 	.word	0x40012000
 8004f80:	2000003c 	.word	0x2000003c
 8004f84:	431bde83 	.word	0x431bde83

08004f88 <ADC_Init>:
 *         in the ADC_InitStruct without initializing the ADC MSP.
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @retval None
 */
static void ADC_Init(ADC_HandleTypeDef * hadc) {
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]

    /* Set ADC parameters */
    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f90:	4b79      	ldr	r3, [pc, #484]	@ (8005178 <ADC_Init+0x1f0>)
 8004f92:	60fb      	str	r3, [r7, #12]

    /* Set the ADC clock prescaler */
    tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= hadc->Init.ClockPrescaler;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	605a      	str	r2, [r3, #4]

    /* Set ADC scan mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fbc:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |= ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6859      	ldr	r1, [r3, #4]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	021a      	lsls	r2, r3, #8
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	605a      	str	r2, [r3, #4]

    /* Set ADC resolution */
    hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004fe0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |= hadc->Init.Resolution;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6859      	ldr	r1, [r3, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	605a      	str	r2, [r3, #4]

    /* Set ADC data alignment */
    hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005002:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6899      	ldr	r1, [r3, #8]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68da      	ldr	r2, [r3, #12]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	609a      	str	r2, [r3, #8]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START) {
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800501a:	4a58      	ldr	r2, [pc, #352]	@ (800517c <ADC_Init+0x1f4>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d022      	beq.n	8005066 <ADC_Init+0xde>
        /* Select external trigger to start conversion */
        hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689a      	ldr	r2, [r3, #8]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800502e:	609a      	str	r2, [r3, #8]
        hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6899      	ldr	r1, [r3, #8]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	609a      	str	r2, [r3, #8]

        /* Select external trigger polarity */
        hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005050:	609a      	str	r2, [r3, #8]
        hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	6899      	ldr	r1, [r3, #8]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	609a      	str	r2, [r3, #8]
 8005064:	e00f      	b.n	8005086 <ADC_Init+0xfe>
    } else {
        /* Reset the external trigger */
        hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005074:	609a      	str	r2, [r3, #8]
        hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689a      	ldr	r2, [r3, #8]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005084:	609a      	str	r2, [r3, #8]
    }

    /* Enable or disable ADC continuous conversion mode */
    hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 0202 	bic.w	r2, r2, #2
 8005094:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6899      	ldr	r1, [r3, #8]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	7e1b      	ldrb	r3, [r3, #24]
 80050a0:	005a      	lsls	r2, r3, #1
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	609a      	str	r2, [r3, #8]

    if (hadc->Init.DiscontinuousConvMode != DISABLE) {
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d01b      	beq.n	80050ec <ADC_Init+0x164>
        assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

        /* Enable the selected ADC regular discontinuous mode */
        hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050c2:	605a      	str	r2, [r3, #4]

        /* Set the number of channels to be converted in discontinuous mode */
        hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80050d2:	605a      	str	r2, [r3, #4]
        hadc->Instance->CR1 |= ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6859      	ldr	r1, [r3, #4]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050de:	3b01      	subs	r3, #1
 80050e0:	035a      	lsls	r2, r3, #13
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	605a      	str	r2, [r3, #4]
 80050ea:	e007      	b.n	80050fc <ADC_Init+0x174>
    } else {
        /* Disable the selected ADC regular discontinuous mode */
        hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050fa:	605a      	str	r2, [r3, #4]
    }

    /* Set ADC number of conversion */
    hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800510a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1(hadc->Init.NbrOfConversion);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	3b01      	subs	r3, #1
 8005118:	051a      	lsls	r2, r3, #20
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable or disable ADC DMA continuous request */
    hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005130:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6899      	ldr	r1, [r3, #8]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800513e:	025a      	lsls	r2, r3, #9
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	609a      	str	r2, [r3, #8]

    /* Enable or disable ADC end of conversion selection */
    hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689a      	ldr	r2, [r3, #8]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005156:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6899      	ldr	r1, [r3, #8]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	029a      	lsls	r2, r3, #10
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	609a      	str	r2, [r3, #8]
}
 800516c:	bf00      	nop
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr
 8005178:	40012300 	.word	0x40012300
 800517c:	0f000001 	.word	0x0f000001

08005180 <__NVIC_SetPriorityGrouping>:
           Only values from 0..7 are used.
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
    uint32_t reg_value;
    uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL); /* only values 0..7 are used          */
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f003 0307 	and.w	r3, r3, #7
 800518e:	60fb      	str	r3, [r7, #12]

    reg_value = SCB->AIRCR;                                                                                                /* read old register configuration    */
 8005190:	4b0c      	ldr	r3, [pc, #48]	@ (80051c4 <__NVIC_SetPriorityGrouping+0x44>)
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	60bb      	str	r3, [r7, #8]
    reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));                                            /* clear bits to change               */
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800519c:	4013      	ands	r3, r2
 800519e:	60bb      	str	r3, [r7, #8]
    reg_value = (reg_value | ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) | (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)); /* Insert write key and priority group */
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	021a      	lsls	r2, r3, #8
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80051ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051b0:	60bb      	str	r3, [r7, #8]
    SCB->AIRCR = reg_value;
 80051b2:	4a04      	ldr	r2, [pc, #16]	@ (80051c4 <__NVIC_SetPriorityGrouping+0x44>)
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	60d3      	str	r3, [r2, #12]
}
 80051b8:	bf00      	nop
 80051ba:	3714      	adds	r7, #20
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	e000ed00 	.word	0xe000ed00

080051c8 <__NVIC_GetPriorityGrouping>:
/**
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void) {
 80051c8:	b480      	push	{r7}
 80051ca:	af00      	add	r7, sp, #0
    return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051cc:	4b04      	ldr	r3, [pc, #16]	@ (80051e0 <__NVIC_GetPriorityGrouping+0x18>)
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	0a1b      	lsrs	r3, r3, #8
 80051d2:	f003 0307 	and.w	r3, r3, #7
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr
 80051e0:	e000ed00 	.word	0xe000ed00

080051e4 <__NVIC_EnableIRQ>:
  \brief   Enable Interrupt
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn) {
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	4603      	mov	r3, r0
 80051ec:	71fb      	strb	r3, [r7, #7]
    if ((int32_t)(IRQn) >= 0) {
 80051ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	db0b      	blt.n	800520e <__NVIC_EnableIRQ+0x2a>
        NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051f6:	79fb      	ldrb	r3, [r7, #7]
 80051f8:	f003 021f 	and.w	r2, r3, #31
 80051fc:	4907      	ldr	r1, [pc, #28]	@ (800521c <__NVIC_EnableIRQ+0x38>)
 80051fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005202:	095b      	lsrs	r3, r3, #5
 8005204:	2001      	movs	r0, #1
 8005206:	fa00 f202 	lsl.w	r2, r0, r2
 800520a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
}
 800520e:	bf00      	nop
 8005210:	370c      	adds	r7, #12
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	e000e100 	.word	0xe000e100

08005220 <__NVIC_SetPriority>:
           or negative to specify a processor exception.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority) {
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	4603      	mov	r3, r0
 8005228:	6039      	str	r1, [r7, #0]
 800522a:	71fb      	strb	r3, [r7, #7]
    if ((int32_t)(IRQn) >= 0) {
 800522c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005230:	2b00      	cmp	r3, #0
 8005232:	db0a      	blt.n	800524a <__NVIC_SetPriority+0x2a>
        NVIC->IP[((uint32_t)IRQn)] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	b2da      	uxtb	r2, r3
 8005238:	490c      	ldr	r1, [pc, #48]	@ (800526c <__NVIC_SetPriority+0x4c>)
 800523a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800523e:	0112      	lsls	r2, r2, #4
 8005240:	b2d2      	uxtb	r2, r2
 8005242:	440b      	add	r3, r1
 8005244:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
    } else {
        SCB->SHP[(((uint32_t)IRQn) & 0xFUL) - 4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    }
}
 8005248:	e00a      	b.n	8005260 <__NVIC_SetPriority+0x40>
        SCB->SHP[(((uint32_t)IRQn) & 0xFUL) - 4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	b2da      	uxtb	r2, r3
 800524e:	4908      	ldr	r1, [pc, #32]	@ (8005270 <__NVIC_SetPriority+0x50>)
 8005250:	79fb      	ldrb	r3, [r7, #7]
 8005252:	f003 030f 	and.w	r3, r3, #15
 8005256:	3b04      	subs	r3, #4
 8005258:	0112      	lsls	r2, r2, #4
 800525a:	b2d2      	uxtb	r2, r2
 800525c:	440b      	add	r3, r1
 800525e:	761a      	strb	r2, [r3, #24]
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	e000e100 	.word	0xe000e100
 8005270:	e000ed00 	.word	0xe000ed00

08005274 <NVIC_EncodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority(uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority) {
 8005274:	b480      	push	{r7}
 8005276:	b089      	sub	sp, #36	@ 0x24
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
    uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL); /* only values 0..7 are used          */
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f003 0307 	and.w	r3, r3, #7
 8005286:	61fb      	str	r3, [r7, #28]
    uint32_t PreemptPriorityBits;
    uint32_t SubPriorityBits;

    PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	f1c3 0307 	rsb	r3, r3, #7
 800528e:	2b04      	cmp	r3, #4
 8005290:	bf28      	it	cs
 8005292:	2304      	movcs	r3, #4
 8005294:	61bb      	str	r3, [r7, #24]
    SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	3304      	adds	r3, #4
 800529a:	2b06      	cmp	r3, #6
 800529c:	d902      	bls.n	80052a4 <NVIC_EncodePriority+0x30>
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	3b03      	subs	r3, #3
 80052a2:	e000      	b.n	80052a6 <NVIC_EncodePriority+0x32>
 80052a4:	2300      	movs	r3, #0
 80052a6:	617b      	str	r3, [r7, #20]

    return (((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) | ((SubPriority & (uint32_t)((1UL << (SubPriorityBits)) - 1UL))));
 80052a8:	f04f 32ff 	mov.w	r2, #4294967295
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	fa02 f303 	lsl.w	r3, r2, r3
 80052b2:	43da      	mvns	r2, r3
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	401a      	ands	r2, r3
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	409a      	lsls	r2, r3
 80052bc:	f04f 31ff 	mov.w	r1, #4294967295
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	fa01 f303 	lsl.w	r3, r1, r3
 80052c6:	43d9      	mvns	r1, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	400b      	ands	r3, r1
 80052cc:	4313      	orrs	r3, r2
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3724      	adds	r7, #36	@ 0x24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
	...

080052dc <__NVIC_SystemReset>:

/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void) {
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
  \brief   Data Synchronization Barrier
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void) {
    __ASM volatile("dsb 0xF" ::: "memory");
 80052e0:	f3bf 8f4f 	dsb	sy
}
 80052e4:	bf00      	nop
    __DSB();                                                                                                                         /* Ensure all outstanding memory accesses included
                                                                                                                                        buffered write are completed before reset */
    SCB->AIRCR = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) | (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) | SCB_AIRCR_SYSRESETREQ_Msk); /* Keep priority group unchanged */
 80052e6:	4b06      	ldr	r3, [pc, #24]	@ (8005300 <__NVIC_SystemReset+0x24>)
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80052ee:	4904      	ldr	r1, [pc, #16]	@ (8005300 <__NVIC_SystemReset+0x24>)
 80052f0:	4b04      	ldr	r3, [pc, #16]	@ (8005304 <__NVIC_SystemReset+0x28>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	60cb      	str	r3, [r1, #12]
    __ASM volatile("dsb 0xF" ::: "memory");
 80052f6:	f3bf 8f4f 	dsb	sy
}
 80052fa:	bf00      	nop
    __DSB();                                                                                                                         /* Ensure completion of memory access */

    for (;;) /* wait until reset */
    {
        __NOP();
 80052fc:	bf00      	nop
 80052fe:	e7fd      	b.n	80052fc <__NVIC_SystemReset+0x20>
 8005300:	e000ed00 	.word	0xe000ed00
 8005304:	05fa0004 	.word	0x05fa0004

08005308 <SysTick_Config>:
  \return          1  Function failed.
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks) {
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
    if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) {
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	3b01      	subs	r3, #1
 8005314:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005318:	d301      	bcc.n	800531e <SysTick_Config+0x16>
        return (1UL); /* Reload value impossible */
 800531a:	2301      	movs	r3, #1
 800531c:	e00f      	b.n	800533e <SysTick_Config+0x36>
    }

    SysTick->LOAD = (uint32_t)(ticks - 1UL);                                                         /* set reload register */
 800531e:	4a0a      	ldr	r2, [pc, #40]	@ (8005348 <SysTick_Config+0x40>)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	3b01      	subs	r3, #1
 8005324:	6053      	str	r3, [r2, #4]
    NVIC_SetPriority(SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL);                                 /* set Priority for Systick Interrupt */
 8005326:	210f      	movs	r1, #15
 8005328:	f04f 30ff 	mov.w	r0, #4294967295
 800532c:	f7ff ff78 	bl	8005220 <__NVIC_SetPriority>
    SysTick->VAL = 0UL;                                                                              /* Load the SysTick Counter Value */
 8005330:	4b05      	ldr	r3, [pc, #20]	@ (8005348 <SysTick_Config+0x40>)
 8005332:	2200      	movs	r2, #0
 8005334:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk; /* Enable SysTick IRQ and SysTick Timer */
 8005336:	4b04      	ldr	r3, [pc, #16]	@ (8005348 <SysTick_Config+0x40>)
 8005338:	2207      	movs	r2, #7
 800533a:	601a      	str	r2, [r3, #0]
    return (0UL);                                                                                    /* Function successful */
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	e000e010 	.word	0xe000e010

0800534c <HAL_NVIC_SetPriorityGrouping>:
 *                                    0 bits for subpriority
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
 *         The pending IRQ priority will be managed only by the subpriority.
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
    /* Check the parameters */
    assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

    /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
    NVIC_SetPriorityGrouping(PriorityGroup);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f7ff ff13 	bl	8005180 <__NVIC_SetPriorityGrouping>
}
 800535a:	bf00      	nop
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <HAL_NVIC_SetPriority>:
 * @param  SubPriority the subpriority level for the IRQ channel.
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority) {
 8005362:	b580      	push	{r7, lr}
 8005364:	b086      	sub	sp, #24
 8005366:	af00      	add	r7, sp, #0
 8005368:	4603      	mov	r3, r0
 800536a:	60b9      	str	r1, [r7, #8]
 800536c:	607a      	str	r2, [r7, #4]
 800536e:	73fb      	strb	r3, [r7, #15]
    uint32_t prioritygroup = 0x00U;
 8005370:	2300      	movs	r3, #0
 8005372:	617b      	str	r3, [r7, #20]

    /* Check the parameters */
    assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
    assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

    prioritygroup = NVIC_GetPriorityGrouping();
 8005374:	f7ff ff28 	bl	80051c8 <__NVIC_GetPriorityGrouping>
 8005378:	6178      	str	r0, [r7, #20]

    NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	68b9      	ldr	r1, [r7, #8]
 800537e:	6978      	ldr	r0, [r7, #20]
 8005380:	f7ff ff78 	bl	8005274 <NVIC_EncodePriority>
 8005384:	4602      	mov	r2, r0
 8005386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800538a:	4611      	mov	r1, r2
 800538c:	4618      	mov	r0, r3
 800538e:	f7ff ff47 	bl	8005220 <__NVIC_SetPriority>
}
 8005392:	bf00      	nop
 8005394:	3718      	adds	r7, #24
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <HAL_NVIC_EnableIRQ>:
 * @param  IRQn External interrupt number.
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
 * @retval None
 */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn) {
 800539a:	b580      	push	{r7, lr}
 800539c:	b082      	sub	sp, #8
 800539e:	af00      	add	r7, sp, #0
 80053a0:	4603      	mov	r3, r0
 80053a2:	71fb      	strb	r3, [r7, #7]
    /* Check the parameters */
    assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

    /* Enable interrupt */
    NVIC_EnableIRQ(IRQn);
 80053a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7ff ff1b 	bl	80051e4 <__NVIC_EnableIRQ>
}
 80053ae:	bf00      	nop
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <HAL_NVIC_SystemReset>:

/**
 * @brief  Initiates a system reset request to reset the MCU.
 * @retval None
 */
void HAL_NVIC_SystemReset(void) {
 80053b6:	b580      	push	{r7, lr}
 80053b8:	af00      	add	r7, sp, #0
    /* System Reset */
    NVIC_SystemReset();
 80053ba:	f7ff ff8f 	bl	80052dc <__NVIC_SystemReset>

080053be <HAL_SYSTICK_Config>:
 *         Counter is in free running mode to generate periodic interrupts.
 * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb) {
 80053be:	b580      	push	{r7, lr}
 80053c0:	b082      	sub	sp, #8
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
    return SysTick_Config(TicksNumb);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f7ff ff9e 	bl	8005308 <SysTick_Config>
 80053cc:	4603      	mov	r3, r0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
	...

080053d8 <HAL_DMA_Init>:
 *         parameters in the DMA_InitTypeDef and create the associated handle.
 * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA Stream.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef * hdma) {
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
    uint32_t tmp = 0U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	617b      	str	r3, [r7, #20]
    uint32_t tickstart = HAL_GetTick();
 80053e4:	f7ff faee 	bl	80049c4 <HAL_GetTick>
 80053e8:	6138      	str	r0, [r7, #16]
    DMA_Base_Registers * regs;

    /* Check the DMA peripheral state */
    if (hdma == NULL) {
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d101      	bne.n	80053f4 <HAL_DMA_Init+0x1c>
        return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e099      	b.n	8005528 <HAL_DMA_Init+0x150>
        assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
        assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2202      	movs	r2, #2
 80053f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f022 0201 	bic.w	r2, r2, #1
 8005412:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while ((hdma->Instance->CR & DMA_SxCR_EN) != RESET) {
 8005414:	e00f      	b.n	8005436 <HAL_DMA_Init+0x5e>
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT) {
 8005416:	f7ff fad5 	bl	80049c4 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b05      	cmp	r3, #5
 8005422:	d908      	bls.n	8005436 <HAL_DMA_Init+0x5e>
            /* Update error code */
            hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2220      	movs	r2, #32
 8005428:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_TIMEOUT;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2203      	movs	r2, #3
 800542e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e078      	b.n	8005528 <HAL_DMA_Init+0x150>
    while ((hdma->Instance->CR & DMA_SxCR_EN) != RESET) {
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1e8      	bne.n	8005416 <HAL_DMA_Init+0x3e>
        }
    }

    /* Get the CR register value */
    tmp = hdma->Instance->CR;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    tmp &= ((uint32_t) ~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | DMA_SxCR_MINC | DMA_SxCR_PINC | DMA_SxCR_CIRC | DMA_SxCR_DIR | DMA_SxCR_CT | DMA_SxCR_DBM));
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	4b38      	ldr	r3, [pc, #224]	@ (8005530 <HAL_DMA_Init+0x158>)
 8005450:	4013      	ands	r3, r2
 8005452:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream configuration */
    tmp |= hdma->Init.Channel | hdma->Init.Direction | hdma->Init.PeriphInc | hdma->Init.MemInc | hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment | hdma->Init.Mode | hdma->Init.Priority;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	431a      	orrs	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	431a      	orrs	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	431a      	orrs	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	431a      	orrs	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	431a      	orrs	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	4313      	orrs	r3, r2
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	4313      	orrs	r3, r2
 8005486:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE) {
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800548c:	2b04      	cmp	r3, #4
 800548e:	d107      	bne.n	80054a0 <HAL_DMA_Init+0xc8>
        /* Get memory burst and peripheral burst */
        tmp |= hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005498:	4313      	orrs	r3, r2
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	4313      	orrs	r3, r2
 800549e:	617b      	str	r3, [r7, #20]
    }

    /* Write to DMA Stream CR register */
    hdma->Instance->CR = tmp;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    tmp = hdma->Instance->FCR;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    tmp &= (uint32_t) ~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f023 0307 	bic.w	r3, r3, #7
 80054b6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    tmp |= hdma->Init.FIFOMode;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	4313      	orrs	r3, r2
 80054c0:	617b      	str	r3, [r7, #20]

    /* The FIFO threshold is not used when the FIFO mode is disabled */
    if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE) {
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c6:	2b04      	cmp	r3, #4
 80054c8:	d117      	bne.n	80054fa <HAL_DMA_Init+0x122>
        /* Get the FIFO threshold */
        tmp |= hdma->Init.FIFOThreshold;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	617b      	str	r3, [r7, #20]

        /* Check compatibility between FIFO threshold level and size of the memory burst */
        /* for INCR4, INCR8, INCR16 bursts */
        if (hdma->Init.MemBurst != DMA_MBURST_SINGLE) {
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00e      	beq.n	80054fa <HAL_DMA_Init+0x122>
            if (DMA_CheckFifoParam(hdma) != HAL_OK) {
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 f8e5 	bl	80056ac <DMA_CheckFifoParam>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d008      	beq.n	80054fa <HAL_DMA_Init+0x122>
                /* Update error code */
                hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2240      	movs	r2, #64	@ 0x40
 80054ec:	655a      	str	r2, [r3, #84]	@ 0x54

                /* Change the DMA state */
                hdma->State = HAL_DMA_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

                return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e016      	b.n	8005528 <HAL_DMA_Init+0x150>
            }
        }
    }

    /* Write to DMA Stream FCR */
    hdma->Instance->FCR = tmp;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f89c 	bl	8005640 <DMA_CalcBaseAndBitshift>
 8005508:	4603      	mov	r3, r0
 800550a:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005510:	223f      	movs	r2, #63	@ 0x3f
 8005512:	409a      	lsls	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	609a      	str	r2, [r3, #8]

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Initialize the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3718      	adds	r7, #24
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	f010803f 	.word	0xf010803f

08005534 <HAL_DMA_Start_IT>:
 * @param  SrcAddress The source memory Buffer address
 * @param  DstAddress The destination memory Buffer address
 * @param  DataLength The length of data to be transferred from source to destination
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef * hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength) {
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
 8005540:	603b      	str	r3, [r7, #0]
    HAL_StatusTypeDef status = HAL_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	75fb      	strb	r3, [r7, #23]

    /* calculate DMA base and stream number */
    DMA_Base_Registers * regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800554a:	613b      	str	r3, [r7, #16]

    /* Check the parameters */
    assert_param(IS_DMA_BUFFER_SIZE(DataLength));

    /* Process locked */
    __HAL_LOCK(hdma);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005552:	2b01      	cmp	r3, #1
 8005554:	d101      	bne.n	800555a <HAL_DMA_Start_IT+0x26>
 8005556:	2302      	movs	r3, #2
 8005558:	e040      	b.n	80055dc <HAL_DMA_Start_IT+0xa8>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    if (HAL_DMA_STATE_READY == hdma->State) {
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b01      	cmp	r3, #1
 800556c:	d12f      	bne.n	80055ce <HAL_DMA_Start_IT+0x9a>
        /* Change DMA peripheral state */
        hdma->State = HAL_DMA_STATE_BUSY;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2202      	movs	r2, #2
 8005572:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Initialize the error code */
        hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Configure the source, destination address and the data length */
        DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	68b9      	ldr	r1, [r7, #8]
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 f82e 	bl	80055e4 <DMA_SetConfig>

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800558c:	223f      	movs	r2, #63	@ 0x3f
 800558e:	409a      	lsls	r2, r3
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	609a      	str	r2, [r3, #8]

        /* Enable Common interrupts*/
        hdma->Instance->CR |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f042 0216 	orr.w	r2, r2, #22
 80055a2:	601a      	str	r2, [r3, #0]

        if (hdma->XferHalfCpltCallback != NULL) {
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d007      	beq.n	80055bc <HAL_DMA_Start_IT+0x88>
            hdma->Instance->CR |= DMA_IT_HT;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f042 0208 	orr.w	r2, r2, #8
 80055ba:	601a      	str	r2, [r3, #0]
        }

        /* Enable the Peripheral */
        __HAL_DMA_ENABLE(hdma);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f042 0201 	orr.w	r2, r2, #1
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	e005      	b.n	80055da <HAL_DMA_Start_IT+0xa6>
    } else {
        /* Process unlocked */
        __HAL_UNLOCK(hdma);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Return error status */
        status = HAL_BUSY;
 80055d6:	2302      	movs	r3, #2
 80055d8:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 80055da:	7dfb      	ldrb	r3, [r7, #23]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3718      	adds	r7, #24
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <DMA_SetConfig>:
 * @param  SrcAddress The source memory Buffer address
 * @param  DstAddress The destination memory Buffer address
 * @param  DataLength The length of data to be transferred from source to destination
 * @retval HAL status
 */
static void DMA_SetConfig(DMA_HandleTypeDef * hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength) {
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
 80055f0:	603b      	str	r3, [r7, #0]
    /* Clear DBM bit */
    hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005600:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    hdma->Instance->NDTR = DataLength;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	605a      	str	r2, [r3, #4]

    /* Memory to Peripheral */
    if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH) {
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	2b40      	cmp	r3, #64	@ 0x40
 8005610:	d108      	bne.n	8005624 <DMA_SetConfig+0x40>
        /* Configure DMA Stream destination address */
        hdma->Instance->PAR = DstAddress;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	609a      	str	r2, [r3, #8]

        /* Configure DMA Stream source address */
        hdma->Instance->M0AR = SrcAddress;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	60da      	str	r2, [r3, #12]
        hdma->Instance->PAR = SrcAddress;

        /* Configure DMA Stream destination address */
        hdma->Instance->M0AR = DstAddress;
    }
}
 8005622:	e007      	b.n	8005634 <DMA_SetConfig+0x50>
        hdma->Instance->PAR = SrcAddress;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	609a      	str	r2, [r3, #8]
        hdma->Instance->M0AR = DstAddress;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	60da      	str	r2, [r3, #12]
}
 8005634:	bf00      	nop
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <DMA_CalcBaseAndBitshift>:
 * @brief  Returns the DMA Stream base address depending on stream number
 * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
 *                     the configuration information for the specified DMA Stream.
 * @retval Stream base address
 */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef * hdma) {
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
    uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	b2db      	uxtb	r3, r3
 800564e:	3b10      	subs	r3, #16
 8005650:	4a14      	ldr	r2, [pc, #80]	@ (80056a4 <DMA_CalcBaseAndBitshift+0x64>)
 8005652:	fba2 2303 	umull	r2, r3, r2, r3
 8005656:	091b      	lsrs	r3, r3, #4
 8005658:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800565a:	4a13      	ldr	r2, [pc, #76]	@ (80056a8 <DMA_CalcBaseAndBitshift+0x68>)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4413      	add	r3, r2
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	461a      	mov	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U) {
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2b03      	cmp	r3, #3
 800566c:	d909      	bls.n	8005682 <DMA_CalcBaseAndBitshift+0x42>
        /* return pointer to HISR and HIFCR */
        hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005676:	f023 0303 	bic.w	r3, r3, #3
 800567a:	1d1a      	adds	r2, r3, #4
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	659a      	str	r2, [r3, #88]	@ 0x58
 8005680:	e007      	b.n	8005692 <DMA_CalcBaseAndBitshift+0x52>
    } else {
        /* return pointer to LISR and LIFCR */
        hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800568a:	f023 0303 	bic.w	r3, r3, #3
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	6593      	str	r3, [r2, #88]	@ 0x58
    }

    return hdma->StreamBaseAddress;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005696:	4618      	mov	r0, r3
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	aaaaaaab 	.word	0xaaaaaaab
 80056a8:	08013c90 	.word	0x08013c90

080056ac <DMA_CheckFifoParam>:
 * @brief  Check compatibility between FIFO threshold level and size of the memory burst
 * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
 *                     the configuration information for the specified DMA Stream.
 * @retval HAL status
 */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef * hdma) {
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 80056b4:	2300      	movs	r3, #0
 80056b6:	73fb      	strb	r3, [r7, #15]
    uint32_t tmp = hdma->Init.FIFOThreshold;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056bc:	60bb      	str	r3, [r7, #8]

    /* Memory Data size equal to Byte */
    if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE) {
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d11f      	bne.n	8005706 <DMA_CheckFifoParam+0x5a>
        switch (tmp) {
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2b03      	cmp	r3, #3
 80056ca:	d856      	bhi.n	800577a <DMA_CheckFifoParam+0xce>
 80056cc:	a201      	add	r2, pc, #4	@ (adr r2, 80056d4 <DMA_CheckFifoParam+0x28>)
 80056ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d2:	bf00      	nop
 80056d4:	080056e5 	.word	0x080056e5
 80056d8:	080056f7 	.word	0x080056f7
 80056dc:	080056e5 	.word	0x080056e5
 80056e0:	0800577b 	.word	0x0800577b
        case DMA_FIFO_THRESHOLD_1QUARTERFULL:
        case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
            if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1) {
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d046      	beq.n	800577e <DMA_CheckFifoParam+0xd2>
                status = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80056f4:	e043      	b.n	800577e <DMA_CheckFifoParam+0xd2>
        case DMA_FIFO_THRESHOLD_HALFFULL:
            if (hdma->Init.MemBurst == DMA_MBURST_INC16) {
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056fa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80056fe:	d140      	bne.n	8005782 <DMA_CheckFifoParam+0xd6>
                status = HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8005704:	e03d      	b.n	8005782 <DMA_CheckFifoParam+0xd6>
            break;
        }
    }

    /* Memory Data size equal to Half-Word */
    else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD) {
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800570e:	d121      	bne.n	8005754 <DMA_CheckFifoParam+0xa8>
        switch (tmp) {
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	2b03      	cmp	r3, #3
 8005714:	d837      	bhi.n	8005786 <DMA_CheckFifoParam+0xda>
 8005716:	a201      	add	r2, pc, #4	@ (adr r2, 800571c <DMA_CheckFifoParam+0x70>)
 8005718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571c:	0800572d 	.word	0x0800572d
 8005720:	08005733 	.word	0x08005733
 8005724:	0800572d 	.word	0x0800572d
 8005728:	08005745 	.word	0x08005745
        case DMA_FIFO_THRESHOLD_1QUARTERFULL:
        case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
            status = HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	73fb      	strb	r3, [r7, #15]
            break;
 8005730:	e030      	b.n	8005794 <DMA_CheckFifoParam+0xe8>
        case DMA_FIFO_THRESHOLD_HALFFULL:
            if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1) {
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005736:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d025      	beq.n	800578a <DMA_CheckFifoParam+0xde>
                status = HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8005742:	e022      	b.n	800578a <DMA_CheckFifoParam+0xde>
        case DMA_FIFO_THRESHOLD_FULL:
            if (hdma->Init.MemBurst == DMA_MBURST_INC16) {
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005748:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800574c:	d11f      	bne.n	800578e <DMA_CheckFifoParam+0xe2>
                status = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8005752:	e01c      	b.n	800578e <DMA_CheckFifoParam+0xe2>
        }
    }

    /* Memory Data size equal to Word */
    else {
        switch (tmp) {
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2b02      	cmp	r3, #2
 8005758:	d903      	bls.n	8005762 <DMA_CheckFifoParam+0xb6>
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	2b03      	cmp	r3, #3
 800575e:	d003      	beq.n	8005768 <DMA_CheckFifoParam+0xbc>
            if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1) {
                status = HAL_ERROR;
            }
            break;
        default:
            break;
 8005760:	e018      	b.n	8005794 <DMA_CheckFifoParam+0xe8>
            status = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	73fb      	strb	r3, [r7, #15]
            break;
 8005766:	e015      	b.n	8005794 <DMA_CheckFifoParam+0xe8>
            if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1) {
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00e      	beq.n	8005792 <DMA_CheckFifoParam+0xe6>
                status = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	73fb      	strb	r3, [r7, #15]
            break;
 8005778:	e00b      	b.n	8005792 <DMA_CheckFifoParam+0xe6>
            break;
 800577a:	bf00      	nop
 800577c:	e00a      	b.n	8005794 <DMA_CheckFifoParam+0xe8>
            break;
 800577e:	bf00      	nop
 8005780:	e008      	b.n	8005794 <DMA_CheckFifoParam+0xe8>
            break;
 8005782:	bf00      	nop
 8005784:	e006      	b.n	8005794 <DMA_CheckFifoParam+0xe8>
            break;
 8005786:	bf00      	nop
 8005788:	e004      	b.n	8005794 <DMA_CheckFifoParam+0xe8>
            break;
 800578a:	bf00      	nop
 800578c:	e002      	b.n	8005794 <DMA_CheckFifoParam+0xe8>
            break;
 800578e:	bf00      	nop
 8005790:	e000      	b.n	8005794 <DMA_CheckFifoParam+0xe8>
            break;
 8005792:	bf00      	nop
        }
    }

    return status;
 8005794:	7bfb      	ldrb	r3, [r7, #15]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop

080057a4 <HAL_GPIO_Init>:
 *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
 * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef * GPIOx, GPIO_InitTypeDef * GPIO_Init) {
 80057a4:	b480      	push	{r7}
 80057a6:	b089      	sub	sp, #36	@ 0x24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
    uint32_t position;
    uint32_t ioposition = 0x00U;
 80057ae:	2300      	movs	r3, #0
 80057b0:	617b      	str	r3, [r7, #20]
    uint32_t iocurrent = 0x00U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	613b      	str	r3, [r7, #16]
    uint32_t temp = 0x00U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	61bb      	str	r3, [r7, #24]
    assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
    assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
    assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

    /* Configure the port pins */
    for (position = 0U; position < GPIO_NUMBER; position++) {
 80057ba:	2300      	movs	r3, #0
 80057bc:	61fb      	str	r3, [r7, #28]
 80057be:	e159      	b.n	8005a74 <HAL_GPIO_Init+0x2d0>
        /* Get the IO position */
        ioposition = 0x01U << position;
 80057c0:	2201      	movs	r2, #1
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	fa02 f303 	lsl.w	r3, r2, r3
 80057c8:	617b      	str	r3, [r7, #20]
        /* Get the current IO position */
        iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	4013      	ands	r3, r2
 80057d2:	613b      	str	r3, [r7, #16]

        if (iocurrent == ioposition) {
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	429a      	cmp	r2, r3
 80057da:	f040 8148 	bne.w	8005a6e <HAL_GPIO_Init+0x2ca>
            /*--------------------- GPIO Mode Configuration ------------------------*/
            /* In case of Output or Alternate function mode selection */
            if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || (GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f003 0303 	and.w	r3, r3, #3
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d005      	beq.n	80057f6 <HAL_GPIO_Init+0x52>
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f003 0303 	and.w	r3, r3, #3
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d130      	bne.n	8005858 <HAL_GPIO_Init+0xb4>
                /* Check the Speed parameter */
                assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
                /* Configure the IO Speed */
                temp = GPIOx->OSPEEDR;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	61bb      	str	r3, [r7, #24]
                temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	005b      	lsls	r3, r3, #1
 8005800:	2203      	movs	r2, #3
 8005802:	fa02 f303 	lsl.w	r3, r2, r3
 8005806:	43db      	mvns	r3, r3
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	4013      	ands	r3, r2
 800580c:	61bb      	str	r3, [r7, #24]
                temp |= (GPIO_Init->Speed << (position * 2U));
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	68da      	ldr	r2, [r3, #12]
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	005b      	lsls	r3, r3, #1
 8005816:	fa02 f303 	lsl.w	r3, r2, r3
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	4313      	orrs	r3, r2
 800581e:	61bb      	str	r3, [r7, #24]
                GPIOx->OSPEEDR = temp;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	69ba      	ldr	r2, [r7, #24]
 8005824:	609a      	str	r2, [r3, #8]

                /* Configure the IO Output Type */
                temp = GPIOx->OTYPER;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	61bb      	str	r3, [r7, #24]
                temp &= ~(GPIO_OTYPER_OT_0 << position);
 800582c:	2201      	movs	r2, #1
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	fa02 f303 	lsl.w	r3, r2, r3
 8005834:	43db      	mvns	r3, r3
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	4013      	ands	r3, r2
 800583a:	61bb      	str	r3, [r7, #24]
                temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	091b      	lsrs	r3, r3, #4
 8005842:	f003 0201 	and.w	r2, r3, #1
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	fa02 f303 	lsl.w	r3, r2, r3
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	4313      	orrs	r3, r2
 8005850:	61bb      	str	r3, [r7, #24]
                GPIOx->OTYPER = temp;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	605a      	str	r2, [r3, #4]
            }

            if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f003 0303 	and.w	r3, r3, #3
 8005860:	2b03      	cmp	r3, #3
 8005862:	d017      	beq.n	8005894 <HAL_GPIO_Init+0xf0>
                /* Check the parameters */
                assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

                /* Activate the Pull-up or Pull down resistor for the current IO */
                temp = GPIOx->PUPDR;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	61bb      	str	r3, [r7, #24]
                temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	005b      	lsls	r3, r3, #1
 800586e:	2203      	movs	r2, #3
 8005870:	fa02 f303 	lsl.w	r3, r2, r3
 8005874:	43db      	mvns	r3, r3
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	4013      	ands	r3, r2
 800587a:	61bb      	str	r3, [r7, #24]
                temp |= ((GPIO_Init->Pull) << (position * 2U));
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	689a      	ldr	r2, [r3, #8]
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	005b      	lsls	r3, r3, #1
 8005884:	fa02 f303 	lsl.w	r3, r2, r3
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	4313      	orrs	r3, r2
 800588c:	61bb      	str	r3, [r7, #24]
                GPIOx->PUPDR = temp;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	60da      	str	r2, [r3, #12]
            }

            /* In case of Alternate function mode selection */
            if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f003 0303 	and.w	r3, r3, #3
 800589c:	2b02      	cmp	r3, #2
 800589e:	d123      	bne.n	80058e8 <HAL_GPIO_Init+0x144>
                /* Check the Alternate function parameter */
                assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
                /* Configure Alternate function mapped with the current IO */
                temp = GPIOx->AFR[position >> 3U];
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	08da      	lsrs	r2, r3, #3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	3208      	adds	r2, #8
 80058a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058ac:	61bb      	str	r3, [r7, #24]
                temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U));
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	f003 0307 	and.w	r3, r3, #7
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	220f      	movs	r2, #15
 80058b8:	fa02 f303 	lsl.w	r3, r2, r3
 80058bc:	43db      	mvns	r3, r3
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	4013      	ands	r3, r2
 80058c2:	61bb      	str	r3, [r7, #24]
                temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	691a      	ldr	r2, [r3, #16]
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	f003 0307 	and.w	r3, r3, #7
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	fa02 f303 	lsl.w	r3, r2, r3
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	61bb      	str	r3, [r7, #24]
                GPIOx->AFR[position >> 3U] = temp;
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	08da      	lsrs	r2, r3, #3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	3208      	adds	r2, #8
 80058e2:	69b9      	ldr	r1, [r7, #24]
 80058e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            }

            /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
            temp = GPIOx->MODER;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	61bb      	str	r3, [r7, #24]
            temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	005b      	lsls	r3, r3, #1
 80058f2:	2203      	movs	r2, #3
 80058f4:	fa02 f303 	lsl.w	r3, r2, r3
 80058f8:	43db      	mvns	r3, r3
 80058fa:	69ba      	ldr	r2, [r7, #24]
 80058fc:	4013      	ands	r3, r2
 80058fe:	61bb      	str	r3, [r7, #24]
            temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f003 0203 	and.w	r2, r3, #3
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	005b      	lsls	r3, r3, #1
 800590c:	fa02 f303 	lsl.w	r3, r2, r3
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	4313      	orrs	r3, r2
 8005914:	61bb      	str	r3, [r7, #24]
            GPIOx->MODER = temp;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	601a      	str	r2, [r3, #0]

            /*--------------------- EXTI Mode Configuration ------------------------*/
            /* Configure the External Interrupt or event for the current IO */
            if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U) {
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005924:	2b00      	cmp	r3, #0
 8005926:	f000 80a2 	beq.w	8005a6e <HAL_GPIO_Init+0x2ca>
                /* Enable SYSCFG Clock */
                __HAL_RCC_SYSCFG_CLK_ENABLE();
 800592a:	2300      	movs	r3, #0
 800592c:	60fb      	str	r3, [r7, #12]
 800592e:	4b57      	ldr	r3, [pc, #348]	@ (8005a8c <HAL_GPIO_Init+0x2e8>)
 8005930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005932:	4a56      	ldr	r2, [pc, #344]	@ (8005a8c <HAL_GPIO_Init+0x2e8>)
 8005934:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005938:	6453      	str	r3, [r2, #68]	@ 0x44
 800593a:	4b54      	ldr	r3, [pc, #336]	@ (8005a8c <HAL_GPIO_Init+0x2e8>)
 800593c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800593e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005942:	60fb      	str	r3, [r7, #12]
 8005944:	68fb      	ldr	r3, [r7, #12]

                temp = SYSCFG->EXTICR[position >> 2U];
 8005946:	4a52      	ldr	r2, [pc, #328]	@ (8005a90 <HAL_GPIO_Init+0x2ec>)
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	089b      	lsrs	r3, r3, #2
 800594c:	3302      	adds	r3, #2
 800594e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005952:	61bb      	str	r3, [r7, #24]
                temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	f003 0303 	and.w	r3, r3, #3
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	220f      	movs	r2, #15
 800595e:	fa02 f303 	lsl.w	r3, r2, r3
 8005962:	43db      	mvns	r3, r3
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	4013      	ands	r3, r2
 8005968:	61bb      	str	r3, [r7, #24]
                temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a49      	ldr	r2, [pc, #292]	@ (8005a94 <HAL_GPIO_Init+0x2f0>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d019      	beq.n	80059a6 <HAL_GPIO_Init+0x202>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a48      	ldr	r2, [pc, #288]	@ (8005a98 <HAL_GPIO_Init+0x2f4>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d013      	beq.n	80059a2 <HAL_GPIO_Init+0x1fe>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a47      	ldr	r2, [pc, #284]	@ (8005a9c <HAL_GPIO_Init+0x2f8>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d00d      	beq.n	800599e <HAL_GPIO_Init+0x1fa>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a46      	ldr	r2, [pc, #280]	@ (8005aa0 <HAL_GPIO_Init+0x2fc>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d007      	beq.n	800599a <HAL_GPIO_Init+0x1f6>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a45      	ldr	r2, [pc, #276]	@ (8005aa4 <HAL_GPIO_Init+0x300>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d101      	bne.n	8005996 <HAL_GPIO_Init+0x1f2>
 8005992:	2304      	movs	r3, #4
 8005994:	e008      	b.n	80059a8 <HAL_GPIO_Init+0x204>
 8005996:	2307      	movs	r3, #7
 8005998:	e006      	b.n	80059a8 <HAL_GPIO_Init+0x204>
 800599a:	2303      	movs	r3, #3
 800599c:	e004      	b.n	80059a8 <HAL_GPIO_Init+0x204>
 800599e:	2302      	movs	r3, #2
 80059a0:	e002      	b.n	80059a8 <HAL_GPIO_Init+0x204>
 80059a2:	2301      	movs	r3, #1
 80059a4:	e000      	b.n	80059a8 <HAL_GPIO_Init+0x204>
 80059a6:	2300      	movs	r3, #0
 80059a8:	69fa      	ldr	r2, [r7, #28]
 80059aa:	f002 0203 	and.w	r2, r2, #3
 80059ae:	0092      	lsls	r2, r2, #2
 80059b0:	4093      	lsls	r3, r2
 80059b2:	69ba      	ldr	r2, [r7, #24]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	61bb      	str	r3, [r7, #24]
                SYSCFG->EXTICR[position >> 2U] = temp;
 80059b8:	4935      	ldr	r1, [pc, #212]	@ (8005a90 <HAL_GPIO_Init+0x2ec>)
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	089b      	lsrs	r3, r3, #2
 80059be:	3302      	adds	r3, #2
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                /* Clear Rising Falling edge configuration */
                temp = EXTI->RTSR;
 80059c6:	4b38      	ldr	r3, [pc, #224]	@ (8005aa8 <HAL_GPIO_Init+0x304>)
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	61bb      	str	r3, [r7, #24]
                temp &= ~((uint32_t)iocurrent);
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	43db      	mvns	r3, r3
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	4013      	ands	r3, r2
 80059d4:	61bb      	str	r3, [r7, #24]
                if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U) {
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <HAL_GPIO_Init+0x246>
                    temp |= iocurrent;
 80059e2:	69ba      	ldr	r2, [r7, #24]
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	61bb      	str	r3, [r7, #24]
                }
                EXTI->RTSR = temp;
 80059ea:	4a2f      	ldr	r2, [pc, #188]	@ (8005aa8 <HAL_GPIO_Init+0x304>)
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	6093      	str	r3, [r2, #8]

                temp = EXTI->FTSR;
 80059f0:	4b2d      	ldr	r3, [pc, #180]	@ (8005aa8 <HAL_GPIO_Init+0x304>)
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	61bb      	str	r3, [r7, #24]
                temp &= ~((uint32_t)iocurrent);
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	43db      	mvns	r3, r3
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	4013      	ands	r3, r2
 80059fe:	61bb      	str	r3, [r7, #24]
                if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U) {
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d003      	beq.n	8005a14 <HAL_GPIO_Init+0x270>
                    temp |= iocurrent;
 8005a0c:	69ba      	ldr	r2, [r7, #24]
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	61bb      	str	r3, [r7, #24]
                }
                EXTI->FTSR = temp;
 8005a14:	4a24      	ldr	r2, [pc, #144]	@ (8005aa8 <HAL_GPIO_Init+0x304>)
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	60d3      	str	r3, [r2, #12]

                temp = EXTI->EMR;
 8005a1a:	4b23      	ldr	r3, [pc, #140]	@ (8005aa8 <HAL_GPIO_Init+0x304>)
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	61bb      	str	r3, [r7, #24]
                temp &= ~((uint32_t)iocurrent);
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	43db      	mvns	r3, r3
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	4013      	ands	r3, r2
 8005a28:	61bb      	str	r3, [r7, #24]
                if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U) {
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d003      	beq.n	8005a3e <HAL_GPIO_Init+0x29a>
                    temp |= iocurrent;
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	61bb      	str	r3, [r7, #24]
                }
                EXTI->EMR = temp;
 8005a3e:	4a1a      	ldr	r2, [pc, #104]	@ (8005aa8 <HAL_GPIO_Init+0x304>)
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	6053      	str	r3, [r2, #4]

                /* Clear EXTI line configuration */
                temp = EXTI->IMR;
 8005a44:	4b18      	ldr	r3, [pc, #96]	@ (8005aa8 <HAL_GPIO_Init+0x304>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	61bb      	str	r3, [r7, #24]
                temp &= ~((uint32_t)iocurrent);
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	43db      	mvns	r3, r3
 8005a4e:	69ba      	ldr	r2, [r7, #24]
 8005a50:	4013      	ands	r3, r2
 8005a52:	61bb      	str	r3, [r7, #24]
                if ((GPIO_Init->Mode & EXTI_IT) != 0x00U) {
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d003      	beq.n	8005a68 <HAL_GPIO_Init+0x2c4>
                    temp |= iocurrent;
 8005a60:	69ba      	ldr	r2, [r7, #24]
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	61bb      	str	r3, [r7, #24]
                }
                EXTI->IMR = temp;
 8005a68:	4a0f      	ldr	r2, [pc, #60]	@ (8005aa8 <HAL_GPIO_Init+0x304>)
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	6013      	str	r3, [r2, #0]
    for (position = 0U; position < GPIO_NUMBER; position++) {
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	3301      	adds	r3, #1
 8005a72:	61fb      	str	r3, [r7, #28]
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	2b0f      	cmp	r3, #15
 8005a78:	f67f aea2 	bls.w	80057c0 <HAL_GPIO_Init+0x1c>
            }
        }
    }
}
 8005a7c:	bf00      	nop
 8005a7e:	bf00      	nop
 8005a80:	3724      	adds	r7, #36	@ 0x24
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	40023800 	.word	0x40023800
 8005a90:	40013800 	.word	0x40013800
 8005a94:	40020000 	.word	0x40020000
 8005a98:	40020400 	.word	0x40020400
 8005a9c:	40020800 	.word	0x40020800
 8005aa0:	40020c00 	.word	0x40020c00
 8005aa4:	40021000 	.word	0x40021000
 8005aa8:	40013c00 	.word	0x40013c00

08005aac <HAL_GPIO_ReadPin>:
 *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
 * @param  GPIO_Pin specifies the port bit to read.
 *         This parameter can be GPIO_PIN_x where x can be (0..15).
 * @retval The input port pin value.
 */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin) {
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	807b      	strh	r3, [r7, #2]
    GPIO_PinState bitstatus;

    /* Check the parameters */
    assert_param(IS_GPIO_PIN(GPIO_Pin));

    if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET) {
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691a      	ldr	r2, [r3, #16]
 8005abc:	887b      	ldrh	r3, [r7, #2]
 8005abe:	4013      	ands	r3, r2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d002      	beq.n	8005aca <HAL_GPIO_ReadPin+0x1e>
        bitstatus = GPIO_PIN_SET;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	73fb      	strb	r3, [r7, #15]
 8005ac8:	e001      	b.n	8005ace <HAL_GPIO_ReadPin+0x22>
    } else {
        bitstatus = GPIO_PIN_RESET;
 8005aca:	2300      	movs	r3, #0
 8005acc:	73fb      	strb	r3, [r7, #15]
    }
    return bitstatus;
 8005ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <HAL_GPIO_WritePin>:
 *          This parameter can be one of the GPIO_PinState enum values:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState) {
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	807b      	strh	r3, [r7, #2]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	707b      	strb	r3, [r7, #1]
    /* Check the parameters */
    assert_param(IS_GPIO_PIN(GPIO_Pin));
    assert_param(IS_GPIO_PIN_ACTION(PinState));

    if (PinState != GPIO_PIN_RESET) {
 8005aec:	787b      	ldrb	r3, [r7, #1]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <HAL_GPIO_WritePin+0x1e>
        GPIOx->BSRR = GPIO_Pin;
 8005af2:	887a      	ldrh	r2, [r7, #2]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	619a      	str	r2, [r3, #24]
    } else {
        GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
    }
}
 8005af8:	e003      	b.n	8005b02 <HAL_GPIO_WritePin+0x26>
        GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005afa:	887b      	ldrh	r3, [r7, #2]
 8005afc:	041a      	lsls	r2, r3, #16
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	619a      	str	r2, [r3, #24]
}
 8005b02:	bf00      	nop
 8005b04:	370c      	adds	r7, #12
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
	...

08005b10 <HAL_I2C_Init>:
 *         in the I2C_InitTypeDef and initialize the associated handle.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef * hi2c) {
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
    uint32_t freqrange;
    uint32_t pclk1;

    /* Check the I2C handle allocation */
    if (hi2c == NULL) {
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_I2C_Init+0x12>
        return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e12b      	b.n	8005d7a <HAL_I2C_Init+0x26a>
    assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
    assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
    assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
    assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

    if (hi2c->State == HAL_I2C_STATE_RESET) {
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d106      	bne.n	8005b3c <HAL_I2C_Init+0x2c>
        /* Allocate lock resource and initialize it */
        hi2c->Lock = HAL_UNLOCKED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        hi2c->MspInitCallback(hi2c);
#else
        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        HAL_I2C_MspInit(hi2c);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7fd f956 	bl	8002de8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2224      	movs	r2, #36	@ 0x24
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 0201 	bic.w	r2, r2, #1
 8005b52:	601a      	str	r2, [r3, #0]

    /*Reset I2C*/
    hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b62:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b72:	601a      	str	r2, [r3, #0]

    /* Get PCLK1 frequency */
    pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b74:	f002 fe38 	bl	80087e8 <HAL_RCC_GetPCLK1Freq>
 8005b78:	60f8      	str	r0, [r7, #12]

    /* Check the minimum allowed PCLK1 frequency */
    if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U) {
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	4a81      	ldr	r2, [pc, #516]	@ (8005d84 <HAL_I2C_Init+0x274>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d807      	bhi.n	8005b94 <HAL_I2C_Init+0x84>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4a80      	ldr	r2, [pc, #512]	@ (8005d88 <HAL_I2C_Init+0x278>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	bf94      	ite	ls
 8005b8c:	2301      	movls	r3, #1
 8005b8e:	2300      	movhi	r3, #0
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	e006      	b.n	8005ba2 <HAL_I2C_Init+0x92>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4a7d      	ldr	r2, [pc, #500]	@ (8005d8c <HAL_I2C_Init+0x27c>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	bf94      	ite	ls
 8005b9c:	2301      	movls	r3, #1
 8005b9e:	2300      	movhi	r3, #0
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <HAL_I2C_Init+0x9a>
        return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e0e7      	b.n	8005d7a <HAL_I2C_Init+0x26a>
    }

    /* Calculate frequency range */
    freqrange = I2C_FREQRANGE(pclk1);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	4a78      	ldr	r2, [pc, #480]	@ (8005d90 <HAL_I2C_Init+0x280>)
 8005bae:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb2:	0c9b      	lsrs	r3, r3, #18
 8005bb4:	60bb      	str	r3, [r7, #8]

    /*---------------------------- I2Cx CR2 Configuration ----------------------*/
    /* Configure I2Cx: Frequency range */
    MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	605a      	str	r2, [r3, #4]

    /*---------------------------- I2Cx TRISE Configuration --------------------*/
    /* Configure I2Cx: Rise Time */
    MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6a1b      	ldr	r3, [r3, #32]
 8005bd0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	4a6a      	ldr	r2, [pc, #424]	@ (8005d84 <HAL_I2C_Init+0x274>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d802      	bhi.n	8005be4 <HAL_I2C_Init+0xd4>
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	3301      	adds	r3, #1
 8005be2:	e009      	b.n	8005bf8 <HAL_I2C_Init+0xe8>
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005bea:	fb02 f303 	mul.w	r3, r2, r3
 8005bee:	4a69      	ldr	r2, [pc, #420]	@ (8005d94 <HAL_I2C_Init+0x284>)
 8005bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf4:	099b      	lsrs	r3, r3, #6
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	6812      	ldr	r2, [r2, #0]
 8005bfc:	430b      	orrs	r3, r1
 8005bfe:	6213      	str	r3, [r2, #32]

    /*---------------------------- I2Cx CCR Configuration ----------------------*/
    /* Configure I2Cx: Speed */
    MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005c0a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	495c      	ldr	r1, [pc, #368]	@ (8005d84 <HAL_I2C_Init+0x274>)
 8005c14:	428b      	cmp	r3, r1
 8005c16:	d819      	bhi.n	8005c4c <HAL_I2C_Init+0x13c>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	1e59      	subs	r1, r3, #1
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c26:	1c59      	adds	r1, r3, #1
 8005c28:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005c2c:	400b      	ands	r3, r1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00a      	beq.n	8005c48 <HAL_I2C_Init+0x138>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	1e59      	subs	r1, r3, #1
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	005b      	lsls	r3, r3, #1
 8005c3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c40:	3301      	adds	r3, #1
 8005c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c46:	e051      	b.n	8005cec <HAL_I2C_Init+0x1dc>
 8005c48:	2304      	movs	r3, #4
 8005c4a:	e04f      	b.n	8005cec <HAL_I2C_Init+0x1dc>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d111      	bne.n	8005c78 <HAL_I2C_Init+0x168>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	1e58      	subs	r0, r3, #1
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6859      	ldr	r1, [r3, #4]
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	005b      	lsls	r3, r3, #1
 8005c60:	440b      	add	r3, r1
 8005c62:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c66:	3301      	adds	r3, #1
 8005c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	bf0c      	ite	eq
 8005c70:	2301      	moveq	r3, #1
 8005c72:	2300      	movne	r3, #0
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	e012      	b.n	8005c9e <HAL_I2C_Init+0x18e>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	1e58      	subs	r0, r3, #1
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6859      	ldr	r1, [r3, #4]
 8005c80:	460b      	mov	r3, r1
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	440b      	add	r3, r1
 8005c86:	0099      	lsls	r1, r3, #2
 8005c88:	440b      	add	r3, r1
 8005c8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c8e:	3301      	adds	r3, #1
 8005c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	bf0c      	ite	eq
 8005c98:	2301      	moveq	r3, #1
 8005c9a:	2300      	movne	r3, #0
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <HAL_I2C_Init+0x196>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e022      	b.n	8005cec <HAL_I2C_Init+0x1dc>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10e      	bne.n	8005ccc <HAL_I2C_Init+0x1bc>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	1e58      	subs	r0, r3, #1
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6859      	ldr	r1, [r3, #4]
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	005b      	lsls	r3, r3, #1
 8005cba:	440b      	add	r3, r1
 8005cbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cca:	e00f      	b.n	8005cec <HAL_I2C_Init+0x1dc>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	1e58      	subs	r0, r3, #1
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6859      	ldr	r1, [r3, #4]
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	440b      	add	r3, r1
 8005cda:	0099      	lsls	r1, r3, #2
 8005cdc:	440b      	add	r3, r1
 8005cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ce8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005cec:	6879      	ldr	r1, [r7, #4]
 8005cee:	6809      	ldr	r1, [r1, #0]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	61cb      	str	r3, [r1, #28]

    /*---------------------------- I2Cx CR1 Configuration ----------------------*/
    /* Configure I2Cx: Generalcall and NoStretch mode */
    MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	69da      	ldr	r2, [r3, #28]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	431a      	orrs	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	601a      	str	r2, [r3, #0]

    /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
    /* Configure I2Cx: Own Address1 and addressing mode */
    MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005d1a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	6911      	ldr	r1, [r2, #16]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	68d2      	ldr	r2, [r2, #12]
 8005d26:	4311      	orrs	r1, r2
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	6812      	ldr	r2, [r2, #0]
 8005d2c:	430b      	orrs	r3, r1
 8005d2e:	6093      	str	r3, [r2, #8]

    /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
    /* Configure I2Cx: Dual mode and Own Address2 */
    MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	695a      	ldr	r2, [r3, #20]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	431a      	orrs	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	60da      	str	r2, [r3, #12]

    /* Enable the selected I2C peripheral */
    __HAL_I2C_ENABLE(hi2c);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f042 0201 	orr.w	r2, r2, #1
 8005d5a:	601a      	str	r2, [r3, #0]

    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2220      	movs	r2, #32
 8005d66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	000186a0 	.word	0x000186a0
 8005d88:	001e847f 	.word	0x001e847f
 8005d8c:	003d08ff 	.word	0x003d08ff
 8005d90:	431bde83 	.word	0x431bde83
 8005d94:	10624dd3 	.word	0x10624dd3

08005d98 <HAL_I2C_Mem_Write>:
 * @param  pData Pointer to data buffer
 * @param  Size Amount of data to be sent
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData, uint16_t Size, uint32_t Timeout) {
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b088      	sub	sp, #32
 8005d9c:	af02      	add	r7, sp, #8
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	4608      	mov	r0, r1
 8005da2:	4611      	mov	r1, r2
 8005da4:	461a      	mov	r2, r3
 8005da6:	4603      	mov	r3, r0
 8005da8:	817b      	strh	r3, [r7, #10]
 8005daa:	460b      	mov	r3, r1
 8005dac:	813b      	strh	r3, [r7, #8]
 8005dae:	4613      	mov	r3, r2
 8005db0:	80fb      	strh	r3, [r7, #6]
    /* Init tickstart for timeout management*/
    uint32_t tickstart = HAL_GetTick();
 8005db2:	f7fe fe07 	bl	80049c4 <HAL_GetTick>
 8005db6:	6178      	str	r0, [r7, #20]

    /* Check the parameters */
    assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

    if (hi2c->State == HAL_I2C_STATE_READY) {
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b20      	cmp	r3, #32
 8005dc2:	f040 80d9 	bne.w	8005f78 <HAL_I2C_Mem_Write+0x1e0>
        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK) {
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	2319      	movs	r3, #25
 8005dcc:	2201      	movs	r2, #1
 8005dce:	496d      	ldr	r1, [pc, #436]	@ (8005f84 <HAL_I2C_Mem_Write+0x1ec>)
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f000 fc7f 	bl	80066d4 <I2C_WaitOnFlagUntilTimeout>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d001      	beq.n	8005de0 <HAL_I2C_Mem_Write+0x48>
            return HAL_BUSY;
 8005ddc:	2302      	movs	r3, #2
 8005dde:	e0cc      	b.n	8005f7a <HAL_I2C_Mem_Write+0x1e2>
        }

        /* Process Locked */
        __HAL_LOCK(hi2c);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d101      	bne.n	8005dee <HAL_I2C_Mem_Write+0x56>
 8005dea:	2302      	movs	r3, #2
 8005dec:	e0c5      	b.n	8005f7a <HAL_I2C_Mem_Write+0x1e2>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Check if the I2C is already enabled */
        if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d007      	beq.n	8005e14 <HAL_I2C_Mem_Write+0x7c>
            /* Enable I2C peripheral */
            __HAL_I2C_ENABLE(hi2c);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f042 0201 	orr.w	r2, r2, #1
 8005e12:	601a      	str	r2, [r3, #0]
        }

        /* Disable Pos */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e22:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_BUSY_TX;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2221      	movs	r2, #33	@ 0x21
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_MEM;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2240      	movs	r2, #64	@ 0x40
 8005e30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Prepare transfer parameters */
        hi2c->pBuffPtr = pData;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6a3a      	ldr	r2, [r7, #32]
 8005e3e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount = Size;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005e44:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize = hi2c->XferCount;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4a4d      	ldr	r2, [pc, #308]	@ (8005f88 <HAL_I2C_Mem_Write+0x1f0>)
 8005e54:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK) {
 8005e56:	88f8      	ldrh	r0, [r7, #6]
 8005e58:	893a      	ldrh	r2, [r7, #8]
 8005e5a:	8979      	ldrh	r1, [r7, #10]
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	9301      	str	r3, [sp, #4]
 8005e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	4603      	mov	r3, r0
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 fab6 	bl	80063d8 <I2C_RequestMemoryWrite>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d052      	beq.n	8005f18 <HAL_I2C_Mem_Write+0x180>
            return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e081      	b.n	8005f7a <HAL_I2C_Mem_Write+0x1e2>
        }

        while (hi2c->XferSize > 0U) {
            /* Wait until TXE flag is set */
            if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f000 fd00 	bl	8006880 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00d      	beq.n	8005ea2 <HAL_I2C_Mem_Write+0x10a>
                if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	d107      	bne.n	8005e9e <HAL_I2C_Mem_Write+0x106>
                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e9c:	601a      	str	r2, [r3, #0]
                }
                return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e06b      	b.n	8005f7a <HAL_I2C_Mem_Write+0x1e2>
            }

            /* Write data to DR */
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea6:	781a      	ldrb	r2, [r3, #0]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	611a      	str	r2, [r3, #16]

            /* Increment Buffer pointer */
            hi2c->pBuffPtr++;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	625a      	str	r2, [r3, #36]	@ 0x24

            /* Update counter */
            hi2c->XferSize--;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	851a      	strh	r2, [r3, #40]	@ 0x28
            hi2c->XferCount--;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	855a      	strh	r2, [r3, #42]	@ 0x2a

            if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U)) {
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	695b      	ldr	r3, [r3, #20]
 8005ed8:	f003 0304 	and.w	r3, r3, #4
 8005edc:	2b04      	cmp	r3, #4
 8005ede:	d11b      	bne.n	8005f18 <HAL_I2C_Mem_Write+0x180>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d017      	beq.n	8005f18 <HAL_I2C_Mem_Write+0x180>
                /* Write data to DR */
                hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eec:	781a      	ldrb	r2, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	611a      	str	r2, [r3, #16]

                /* Increment Buffer pointer */
                hi2c->pBuffPtr++;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef8:	1c5a      	adds	r2, r3, #1
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	625a      	str	r2, [r3, #36]	@ 0x24

                /* Update counter */
                hi2c->XferSize--;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f02:	3b01      	subs	r3, #1
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	851a      	strh	r2, [r3, #40]	@ 0x28
                hi2c->XferCount--;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	3b01      	subs	r3, #1
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	855a      	strh	r2, [r3, #42]	@ 0x2a
        while (hi2c->XferSize > 0U) {
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1aa      	bne.n	8005e76 <HAL_I2C_Mem_Write+0xde>
            }
        }

        /* Wait until BTF flag is set */
        if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f000 fcec 	bl	8006902 <I2C_WaitOnBTFFlagUntilTimeout>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00d      	beq.n	8005f4c <HAL_I2C_Mem_Write+0x1b4>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f34:	2b04      	cmp	r3, #4
 8005f36:	d107      	bne.n	8005f48 <HAL_I2C_Mem_Write+0x1b0>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f46:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e016      	b.n	8005f7a <HAL_I2C_Mem_Write+0x1e2>
        }

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f5a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8005f74:	2300      	movs	r3, #0
 8005f76:	e000      	b.n	8005f7a <HAL_I2C_Mem_Write+0x1e2>
    } else {
        return HAL_BUSY;
 8005f78:	2302      	movs	r3, #2
    }
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3718      	adds	r7, #24
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	00100002 	.word	0x00100002
 8005f88:	ffff0000 	.word	0xffff0000

08005f8c <HAL_I2C_Mem_Read>:
 * @param  pData Pointer to data buffer
 * @param  Size Amount of data to be sent
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData, uint16_t Size, uint32_t Timeout) {
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b08c      	sub	sp, #48	@ 0x30
 8005f90:	af02      	add	r7, sp, #8
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	4608      	mov	r0, r1
 8005f96:	4611      	mov	r1, r2
 8005f98:	461a      	mov	r2, r3
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	817b      	strh	r3, [r7, #10]
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	813b      	strh	r3, [r7, #8]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	80fb      	strh	r3, [r7, #6]
    /* Init tickstart for timeout management*/
    uint32_t tickstart = HAL_GetTick();
 8005fa6:	f7fe fd0d 	bl	80049c4 <HAL_GetTick>
 8005faa:	6278      	str	r0, [r7, #36]	@ 0x24

    /* Check the parameters */
    assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

    if (hi2c->State == HAL_I2C_STATE_READY) {
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b20      	cmp	r3, #32
 8005fb6:	f040 8208 	bne.w	80063ca <HAL_I2C_Mem_Read+0x43e>
        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK) {
 8005fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	2319      	movs	r3, #25
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	497b      	ldr	r1, [pc, #492]	@ (80061b0 <HAL_I2C_Mem_Read+0x224>)
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f000 fb85 	bl	80066d4 <I2C_WaitOnFlagUntilTimeout>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d001      	beq.n	8005fd4 <HAL_I2C_Mem_Read+0x48>
            return HAL_BUSY;
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	e1fb      	b.n	80063cc <HAL_I2C_Mem_Read+0x440>
        }

        /* Process Locked */
        __HAL_LOCK(hi2c);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d101      	bne.n	8005fe2 <HAL_I2C_Mem_Read+0x56>
 8005fde:	2302      	movs	r3, #2
 8005fe0:	e1f4      	b.n	80063cc <HAL_I2C_Mem_Read+0x440>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Check if the I2C is already enabled */
        if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0301 	and.w	r3, r3, #1
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d007      	beq.n	8006008 <HAL_I2C_Mem_Read+0x7c>
            /* Enable I2C peripheral */
            __HAL_I2C_ENABLE(hi2c);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f042 0201 	orr.w	r2, r2, #1
 8006006:	601a      	str	r2, [r3, #0]
        }

        /* Disable Pos */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006016:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_BUSY_RX;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2222      	movs	r2, #34	@ 0x22
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_MEM;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2240      	movs	r2, #64	@ 0x40
 8006024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Prepare transfer parameters */
        hi2c->pBuffPtr = pData;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006032:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount = Size;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006038:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize = hi2c->XferCount;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800603e:	b29a      	uxth	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4a5b      	ldr	r2, [pc, #364]	@ (80061b4 <HAL_I2C_Mem_Read+0x228>)
 8006048:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK) {
 800604a:	88f8      	ldrh	r0, [r7, #6]
 800604c:	893a      	ldrh	r2, [r7, #8]
 800604e:	8979      	ldrh	r1, [r7, #10]
 8006050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006052:	9301      	str	r3, [sp, #4]
 8006054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006056:	9300      	str	r3, [sp, #0]
 8006058:	4603      	mov	r3, r0
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f000 fa52 	bl	8006504 <I2C_RequestMemoryRead>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <HAL_I2C_Mem_Read+0xde>
            return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e1b0      	b.n	80063cc <HAL_I2C_Mem_Read+0x440>
        }

        if (hi2c->XferSize == 0U) {
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800606e:	2b00      	cmp	r3, #0
 8006070:	d113      	bne.n	800609a <HAL_I2C_Mem_Read+0x10e>
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006072:	2300      	movs	r3, #0
 8006074:	623b      	str	r3, [r7, #32]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	695b      	ldr	r3, [r3, #20]
 800607c:	623b      	str	r3, [r7, #32]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	623b      	str	r3, [r7, #32]
 8006086:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006096:	601a      	str	r2, [r3, #0]
 8006098:	e184      	b.n	80063a4 <HAL_I2C_Mem_Read+0x418>
        } else if (hi2c->XferSize == 1U) {
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d11b      	bne.n	80060da <HAL_I2C_Mem_Read+0x14e>
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060b0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060b2:	2300      	movs	r3, #0
 80060b4:	61fb      	str	r3, [r7, #28]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	695b      	ldr	r3, [r3, #20]
 80060bc:	61fb      	str	r3, [r7, #28]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	61fb      	str	r3, [r7, #28]
 80060c6:	69fb      	ldr	r3, [r7, #28]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060d6:	601a      	str	r2, [r3, #0]
 80060d8:	e164      	b.n	80063a4 <HAL_I2C_Mem_Read+0x418>
        } else if (hi2c->XferSize == 2U) {
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d11b      	bne.n	800611a <HAL_I2C_Mem_Read+0x18e>
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060f0:	601a      	str	r2, [r3, #0]

            /* Enable Pos */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006100:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006102:	2300      	movs	r3, #0
 8006104:	61bb      	str	r3, [r7, #24]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	61bb      	str	r3, [r7, #24]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	61bb      	str	r3, [r7, #24]
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	e144      	b.n	80063a4 <HAL_I2C_Mem_Read+0x418>
        } else {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800611a:	2300      	movs	r3, #0
 800611c:	617b      	str	r3, [r7, #20]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	617b      	str	r3, [r7, #20]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	617b      	str	r3, [r7, #20]
 800612e:	697b      	ldr	r3, [r7, #20]
        }

        while (hi2c->XferSize > 0U) {
 8006130:	e138      	b.n	80063a4 <HAL_I2C_Mem_Read+0x418>
            if (hi2c->XferSize <= 3U) {
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006136:	2b03      	cmp	r3, #3
 8006138:	f200 80f1 	bhi.w	800631e <HAL_I2C_Mem_Read+0x392>
                /* One byte */
                if (hi2c->XferSize == 1U) {
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006140:	2b01      	cmp	r3, #1
 8006142:	d123      	bne.n	800618c <HAL_I2C_Mem_Read+0x200>
                    /* Wait until RXNE flag is set */
                    if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8006144:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006146:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f000 fc1b 	bl	8006984 <I2C_WaitOnRXNEFlagUntilTimeout>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d001      	beq.n	8006158 <HAL_I2C_Mem_Read+0x1cc>
                        return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e139      	b.n	80063cc <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	691a      	ldr	r2, [r3, #16]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006162:	b2d2      	uxtb	r2, r2
 8006164:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006174:	3b01      	subs	r3, #1
 8006176:	b29a      	uxth	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	851a      	strh	r2, [r3, #40]	@ 0x28
                    hi2c->XferCount--;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006180:	b29b      	uxth	r3, r3
 8006182:	3b01      	subs	r3, #1
 8006184:	b29a      	uxth	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800618a:	e10b      	b.n	80063a4 <HAL_I2C_Mem_Read+0x418>
                }
                /* Two bytes */
                else if (hi2c->XferSize == 2U) {
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006190:	2b02      	cmp	r3, #2
 8006192:	d14e      	bne.n	8006232 <HAL_I2C_Mem_Read+0x2a6>
                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 8006194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800619a:	2200      	movs	r2, #0
 800619c:	4906      	ldr	r1, [pc, #24]	@ (80061b8 <HAL_I2C_Mem_Read+0x22c>)
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f000 fa98 	bl	80066d4 <I2C_WaitOnFlagUntilTimeout>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d008      	beq.n	80061bc <HAL_I2C_Mem_Read+0x230>
                        return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e10e      	b.n	80063cc <HAL_I2C_Mem_Read+0x440>
 80061ae:	bf00      	nop
 80061b0:	00100002 	.word	0x00100002
 80061b4:	ffff0000 	.word	0xffff0000
 80061b8:	00010004 	.word	0x00010004
                    }

                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061ca:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	691a      	ldr	r2, [r3, #16]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d6:	b2d2      	uxtb	r2, r2
 80061d8:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061e8:	3b01      	subs	r3, #1
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	851a      	strh	r2, [r3, #40]	@ 0x28
                    hi2c->XferCount--;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	3b01      	subs	r3, #1
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	691a      	ldr	r2, [r3, #16]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006208:	b2d2      	uxtb	r2, r2
 800620a:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006210:	1c5a      	adds	r2, r3, #1
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800621a:	3b01      	subs	r3, #1
 800621c:	b29a      	uxth	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	851a      	strh	r2, [r3, #40]	@ 0x28
                    hi2c->XferCount--;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006226:	b29b      	uxth	r3, r3
 8006228:	3b01      	subs	r3, #1
 800622a:	b29a      	uxth	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006230:	e0b8      	b.n	80063a4 <HAL_I2C_Mem_Read+0x418>
                }
                /* 3 Last bytes */
                else {
                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 8006232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006238:	2200      	movs	r2, #0
 800623a:	4966      	ldr	r1, [pc, #408]	@ (80063d4 <HAL_I2C_Mem_Read+0x448>)
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 fa49 	bl	80066d4 <I2C_WaitOnFlagUntilTimeout>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <HAL_I2C_Mem_Read+0x2c0>
                        return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e0bf      	b.n	80063cc <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Disable Acknowledge */
                    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800625a:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	691a      	ldr	r2, [r3, #16]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006266:	b2d2      	uxtb	r2, r2
 8006268:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800626e:	1c5a      	adds	r2, r3, #1
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006278:	3b01      	subs	r3, #1
 800627a:	b29a      	uxth	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	851a      	strh	r2, [r3, #40]	@ 0x28
                    hi2c->XferCount--;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006284:	b29b      	uxth	r3, r3
 8006286:	3b01      	subs	r3, #1
 8006288:	b29a      	uxth	r2, r3
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	855a      	strh	r2, [r3, #42]	@ 0x2a

                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 800628e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006294:	2200      	movs	r2, #0
 8006296:	494f      	ldr	r1, [pc, #316]	@ (80063d4 <HAL_I2C_Mem_Read+0x448>)
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 fa1b 	bl	80066d4 <I2C_WaitOnFlagUntilTimeout>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <HAL_I2C_Mem_Read+0x31c>
                        return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e091      	b.n	80063cc <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062b6:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	691a      	ldr	r2, [r3, #16]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c2:	b2d2      	uxtb	r2, r2
 80062c4:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ca:	1c5a      	adds	r2, r3, #1
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062d4:	3b01      	subs	r3, #1
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	851a      	strh	r2, [r3, #40]	@ 0x28
                    hi2c->XferCount--;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	3b01      	subs	r3, #1
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	691a      	ldr	r2, [r3, #16]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f4:	b2d2      	uxtb	r2, r2
 80062f6:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fc:	1c5a      	adds	r2, r3, #1
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006306:	3b01      	subs	r3, #1
 8006308:	b29a      	uxth	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	851a      	strh	r2, [r3, #40]	@ 0x28
                    hi2c->XferCount--;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006312:	b29b      	uxth	r3, r3
 8006314:	3b01      	subs	r3, #1
 8006316:	b29a      	uxth	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800631c:	e042      	b.n	80063a4 <HAL_I2C_Mem_Read+0x418>
                }
            } else {
                /* Wait until RXNE flag is set */
                if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 800631e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006320:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f000 fb2e 	bl	8006984 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <HAL_I2C_Mem_Read+0x3a6>
                    return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e04c      	b.n	80063cc <HAL_I2C_Mem_Read+0x440>
                }

                /* Read data from DR */
                *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	691a      	ldr	r2, [r3, #16]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800633c:	b2d2      	uxtb	r2, r2
 800633e:	701a      	strb	r2, [r3, #0]

                /* Increment Buffer pointer */
                hi2c->pBuffPtr++;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006344:	1c5a      	adds	r2, r3, #1
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	625a      	str	r2, [r3, #36]	@ 0x24

                /* Update counter */
                hi2c->XferSize--;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800634e:	3b01      	subs	r3, #1
 8006350:	b29a      	uxth	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	851a      	strh	r2, [r3, #40]	@ 0x28
                hi2c->XferCount--;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800635a:	b29b      	uxth	r3, r3
 800635c:	3b01      	subs	r3, #1
 800635e:	b29a      	uxth	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	855a      	strh	r2, [r3, #42]	@ 0x2a

                if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) {
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	f003 0304 	and.w	r3, r3, #4
 800636e:	2b04      	cmp	r3, #4
 8006370:	d118      	bne.n	80063a4 <HAL_I2C_Mem_Read+0x418>
                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	691a      	ldr	r2, [r3, #16]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800637c:	b2d2      	uxtb	r2, r2
 800637e:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006384:	1c5a      	adds	r2, r3, #1
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800638e:	3b01      	subs	r3, #1
 8006390:	b29a      	uxth	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	851a      	strh	r2, [r3, #40]	@ 0x28
                    hi2c->XferCount--;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800639a:	b29b      	uxth	r3, r3
 800639c:	3b01      	subs	r3, #1
 800639e:	b29a      	uxth	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        while (hi2c->XferSize > 0U) {
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f47f aec2 	bne.w	8006132 <HAL_I2C_Mem_Read+0x1a6>
                }
            }
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2220      	movs	r2, #32
 80063b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80063c6:	2300      	movs	r3, #0
 80063c8:	e000      	b.n	80063cc <HAL_I2C_Mem_Read+0x440>
    } else {
        return HAL_BUSY;
 80063ca:	2302      	movs	r3, #2
    }
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3728      	adds	r7, #40	@ 0x28
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	00010004 	.word	0x00010004

080063d8 <I2C_RequestMemoryWrite>:
 * @param  MemAddSize Size of internal memory address
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart) {
 80063d8:	b580      	push	{r7, lr}
 80063da:	b088      	sub	sp, #32
 80063dc:	af02      	add	r7, sp, #8
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	4608      	mov	r0, r1
 80063e2:	4611      	mov	r1, r2
 80063e4:	461a      	mov	r2, r3
 80063e6:	4603      	mov	r3, r0
 80063e8:	817b      	strh	r3, [r7, #10]
 80063ea:	460b      	mov	r3, r1
 80063ec:	813b      	strh	r3, [r7, #8]
 80063ee:	4613      	mov	r3, r2
 80063f0:	80fb      	strh	r3, [r7, #6]
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006400:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 8006402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	6a3b      	ldr	r3, [r7, #32]
 8006408:	2200      	movs	r2, #0
 800640a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 f960 	bl	80066d4 <I2C_WaitOnFlagUntilTimeout>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00d      	beq.n	8006436 <I2C_RequestMemoryWrite+0x5e>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006424:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006428:	d103      	bne.n	8006432 <I2C_RequestMemoryWrite+0x5a>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006430:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e05f      	b.n	80064f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006436:	897b      	ldrh	r3, [r7, #10]
 8006438:	b2db      	uxtb	r3, r3
 800643a:	461a      	mov	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006444:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 8006446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006448:	6a3a      	ldr	r2, [r7, #32]
 800644a:	492d      	ldr	r1, [pc, #180]	@ (8006500 <I2C_RequestMemoryWrite+0x128>)
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f000 f998 	bl	8006782 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d001      	beq.n	800645c <I2C_RequestMemoryWrite+0x84>
        return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e04c      	b.n	80064f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800645c:	2300      	movs	r3, #0
 800645e:	617b      	str	r3, [r7, #20]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	617b      	str	r3, [r7, #20]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	617b      	str	r3, [r7, #20]
 8006470:	697b      	ldr	r3, [r7, #20]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8006472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006474:	6a39      	ldr	r1, [r7, #32]
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 fa02 	bl	8006880 <I2C_WaitOnTXEFlagUntilTimeout>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00d      	beq.n	800649e <I2C_RequestMemoryWrite+0xc6>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006486:	2b04      	cmp	r3, #4
 8006488:	d107      	bne.n	800649a <I2C_RequestMemoryWrite+0xc2>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006498:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e02b      	b.n	80064f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 800649e:	88fb      	ldrh	r3, [r7, #6]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d105      	bne.n	80064b0 <I2C_RequestMemoryWrite+0xd8>
        /* Send Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064a4:	893b      	ldrh	r3, [r7, #8]
 80064a6:	b2da      	uxtb	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	611a      	str	r2, [r3, #16]
 80064ae:	e021      	b.n	80064f4 <I2C_RequestMemoryWrite+0x11c>
    }
    /* If Memory address size is 16Bit */
    else {
        /* Send MSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80064b0:	893b      	ldrh	r3, [r7, #8]
 80064b2:	0a1b      	lsrs	r3, r3, #8
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	b2da      	uxtb	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	611a      	str	r2, [r3, #16]

        /* Wait until TXE flag is set */
        if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 80064be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064c0:	6a39      	ldr	r1, [r7, #32]
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f000 f9dc 	bl	8006880 <I2C_WaitOnTXEFlagUntilTimeout>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00d      	beq.n	80064ea <I2C_RequestMemoryWrite+0x112>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d2:	2b04      	cmp	r3, #4
 80064d4:	d107      	bne.n	80064e6 <I2C_RequestMemoryWrite+0x10e>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064e4:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e005      	b.n	80064f6 <I2C_RequestMemoryWrite+0x11e>
        }

        /* Send LSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064ea:	893b      	ldrh	r3, [r7, #8]
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	611a      	str	r2, [r3, #16]
    }

    return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3718      	adds	r7, #24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	00010002 	.word	0x00010002

08006504 <I2C_RequestMemoryRead>:
 * @param  MemAddSize Size of internal memory address
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart) {
 8006504:	b580      	push	{r7, lr}
 8006506:	b088      	sub	sp, #32
 8006508:	af02      	add	r7, sp, #8
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	4608      	mov	r0, r1
 800650e:	4611      	mov	r1, r2
 8006510:	461a      	mov	r2, r3
 8006512:	4603      	mov	r3, r0
 8006514:	817b      	strh	r3, [r7, #10]
 8006516:	460b      	mov	r3, r1
 8006518:	813b      	strh	r3, [r7, #8]
 800651a:	4613      	mov	r3, r2
 800651c:	80fb      	strh	r3, [r7, #6]
    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800652c:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800653c:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 800653e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	2200      	movs	r2, #0
 8006546:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f000 f8c2 	bl	80066d4 <I2C_WaitOnFlagUntilTimeout>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00d      	beq.n	8006572 <I2C_RequestMemoryRead+0x6e>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006560:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006564:	d103      	bne.n	800656e <I2C_RequestMemoryRead+0x6a>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800656c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e0aa      	b.n	80066c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006572:	897b      	ldrh	r3, [r7, #10]
 8006574:	b2db      	uxtb	r3, r3
 8006576:	461a      	mov	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006580:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 8006582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006584:	6a3a      	ldr	r2, [r7, #32]
 8006586:	4952      	ldr	r1, [pc, #328]	@ (80066d0 <I2C_RequestMemoryRead+0x1cc>)
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f000 f8fa 	bl	8006782 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d001      	beq.n	8006598 <I2C_RequestMemoryRead+0x94>
        return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e097      	b.n	80066c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006598:	2300      	movs	r3, #0
 800659a:	617b      	str	r3, [r7, #20]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	617b      	str	r3, [r7, #20]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	617b      	str	r3, [r7, #20]
 80065ac:	697b      	ldr	r3, [r7, #20]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 80065ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065b0:	6a39      	ldr	r1, [r7, #32]
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f000 f964 	bl	8006880 <I2C_WaitOnTXEFlagUntilTimeout>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00d      	beq.n	80065da <I2C_RequestMemoryRead+0xd6>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c2:	2b04      	cmp	r3, #4
 80065c4:	d107      	bne.n	80065d6 <I2C_RequestMemoryRead+0xd2>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e076      	b.n	80066c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 80065da:	88fb      	ldrh	r3, [r7, #6]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d105      	bne.n	80065ec <I2C_RequestMemoryRead+0xe8>
        /* Send Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065e0:	893b      	ldrh	r3, [r7, #8]
 80065e2:	b2da      	uxtb	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	611a      	str	r2, [r3, #16]
 80065ea:	e021      	b.n	8006630 <I2C_RequestMemoryRead+0x12c>
    }
    /* If Memory address size is 16Bit */
    else {
        /* Send MSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80065ec:	893b      	ldrh	r3, [r7, #8]
 80065ee:	0a1b      	lsrs	r3, r3, #8
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	b2da      	uxtb	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	611a      	str	r2, [r3, #16]

        /* Wait until TXE flag is set */
        if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 80065fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065fc:	6a39      	ldr	r1, [r7, #32]
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f000 f93e 	bl	8006880 <I2C_WaitOnTXEFlagUntilTimeout>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00d      	beq.n	8006626 <I2C_RequestMemoryRead+0x122>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800660e:	2b04      	cmp	r3, #4
 8006610:	d107      	bne.n	8006622 <I2C_RequestMemoryRead+0x11e>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006620:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e050      	b.n	80066c8 <I2C_RequestMemoryRead+0x1c4>
        }

        /* Send LSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006626:	893b      	ldrh	r3, [r7, #8]
 8006628:	b2da      	uxtb	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	611a      	str	r2, [r3, #16]
    }

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8006630:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006632:	6a39      	ldr	r1, [r7, #32]
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f000 f923 	bl	8006880 <I2C_WaitOnTXEFlagUntilTimeout>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00d      	beq.n	800665c <I2C_RequestMemoryRead+0x158>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006644:	2b04      	cmp	r3, #4
 8006646:	d107      	bne.n	8006658 <I2C_RequestMemoryRead+0x154>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006656:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e035      	b.n	80066c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800666a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 800666c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	6a3b      	ldr	r3, [r7, #32]
 8006672:	2200      	movs	r2, #0
 8006674:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f000 f82b 	bl	80066d4 <I2C_WaitOnFlagUntilTimeout>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00d      	beq.n	80066a0 <I2C_RequestMemoryRead+0x19c>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800668e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006692:	d103      	bne.n	800669c <I2C_RequestMemoryRead+0x198>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800669a:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e013      	b.n	80066c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80066a0:	897b      	ldrh	r3, [r7, #10]
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	f043 0301 	orr.w	r3, r3, #1
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 80066b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b2:	6a3a      	ldr	r2, [r7, #32]
 80066b4:	4906      	ldr	r1, [pc, #24]	@ (80066d0 <I2C_RequestMemoryRead+0x1cc>)
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f000 f863 	bl	8006782 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <I2C_RequestMemoryRead+0x1c2>
        return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e000      	b.n	80066c8 <I2C_RequestMemoryRead+0x1c4>
    }

    return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3718      	adds	r7, #24
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	00010002 	.word	0x00010002

080066d4 <I2C_WaitOnFlagUntilTimeout>:
 * @param  Status The new Flag status (SET or RESET).
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart) {
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	603b      	str	r3, [r7, #0]
 80066e0:	4613      	mov	r3, r2
 80066e2:	71fb      	strb	r3, [r7, #7]
    /* Wait until flag is set */
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 80066e4:	e025      	b.n	8006732 <I2C_WaitOnFlagUntilTimeout+0x5e>
        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ec:	d021      	beq.n	8006732 <I2C_WaitOnFlagUntilTimeout+0x5e>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 80066ee:	f7fe f969 	bl	80049c4 <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d302      	bcc.n	8006704 <I2C_WaitOnFlagUntilTimeout+0x30>
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d116      	bne.n	8006732 <I2C_WaitOnFlagUntilTimeout+0x5e>
                hi2c->PreviousState = I2C_STATE_NONE;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	631a      	str	r2, [r3, #48]	@ 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2220      	movs	r2, #32
 800670e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800671e:	f043 0220 	orr.w	r2, r3, #32
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	641a      	str	r2, [r3, #64]	@ 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

                return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e023      	b.n	800677a <I2C_WaitOnFlagUntilTimeout+0xa6>
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	0c1b      	lsrs	r3, r3, #16
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b01      	cmp	r3, #1
 800673a:	d10d      	bne.n	8006758 <I2C_WaitOnFlagUntilTimeout+0x84>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	43da      	mvns	r2, r3
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	4013      	ands	r3, r2
 8006748:	b29b      	uxth	r3, r3
 800674a:	2b00      	cmp	r3, #0
 800674c:	bf0c      	ite	eq
 800674e:	2301      	moveq	r3, #1
 8006750:	2300      	movne	r3, #0
 8006752:	b2db      	uxtb	r3, r3
 8006754:	461a      	mov	r2, r3
 8006756:	e00c      	b.n	8006772 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	43da      	mvns	r2, r3
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	4013      	ands	r3, r2
 8006764:	b29b      	uxth	r3, r3
 8006766:	2b00      	cmp	r3, #0
 8006768:	bf0c      	ite	eq
 800676a:	2301      	moveq	r3, #1
 800676c:	2300      	movne	r3, #0
 800676e:	b2db      	uxtb	r3, r3
 8006770:	461a      	mov	r2, r3
 8006772:	79fb      	ldrb	r3, [r7, #7]
 8006774:	429a      	cmp	r2, r3
 8006776:	d0b6      	beq.n	80066e6 <I2C_WaitOnFlagUntilTimeout+0x12>
            }
        }
    }
    return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 * @param  Flag specifies the I2C flag to check.
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart) {
 8006782:	b580      	push	{r7, lr}
 8006784:	b084      	sub	sp, #16
 8006786:	af00      	add	r7, sp, #0
 8006788:	60f8      	str	r0, [r7, #12]
 800678a:	60b9      	str	r1, [r7, #8]
 800678c:	607a      	str	r2, [r7, #4]
 800678e:	603b      	str	r3, [r7, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 8006790:	e051      	b.n	8006836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800679c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067a0:	d123      	bne.n	80067ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067b0:	601a      	str	r2, [r3, #0]

            /* Clear AF Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80067ba:	615a      	str	r2, [r3, #20]

            hi2c->PreviousState = I2C_STATE_NONE;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	631a      	str	r2, [r3, #48]	@ 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2220      	movs	r2, #32
 80067c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d6:	f043 0204 	orr.w	r2, r3, #4
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e046      	b.n	8006878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f0:	d021      	beq.n	8006836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 80067f2:	f7fe f8e7 	bl	80049c4 <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d302      	bcc.n	8006808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d116      	bne.n	8006836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
                hi2c->PreviousState = I2C_STATE_NONE;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	631a      	str	r2, [r3, #48]	@ 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2220      	movs	r2, #32
 8006812:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006822:	f043 0220 	orr.w	r2, r3, #32
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	641a      	str	r2, [r3, #64]	@ 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

                return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e020      	b.n	8006878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	0c1b      	lsrs	r3, r3, #16
 800683a:	b2db      	uxtb	r3, r3
 800683c:	2b01      	cmp	r3, #1
 800683e:	d10c      	bne.n	800685a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	43da      	mvns	r2, r3
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	4013      	ands	r3, r2
 800684c:	b29b      	uxth	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	bf14      	ite	ne
 8006852:	2301      	movne	r3, #1
 8006854:	2300      	moveq	r3, #0
 8006856:	b2db      	uxtb	r3, r3
 8006858:	e00b      	b.n	8006872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	43da      	mvns	r2, r3
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	4013      	ands	r3, r2
 8006866:	b29b      	uxth	r3, r3
 8006868:	2b00      	cmp	r3, #0
 800686a:	bf14      	ite	ne
 800686c:	2301      	movne	r3, #1
 800686e:	2300      	moveq	r3, #0
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d18d      	bne.n	8006792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
            }
        }
    }
    return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <I2C_WaitOnTXEFlagUntilTimeout>:
 *                the configuration information for the specified I2C.
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout, uint32_t Tickstart) {
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 800688c:	e02d      	b.n	80068ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
        /* Check if a NACK is detected */
        if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f000 f8ce 	bl	8006a30 <I2C_IsAcknowledgeFailed>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d001      	beq.n	800689e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
            return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e02d      	b.n	80068fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a4:	d021      	beq.n	80068ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 80068a6:	f7fe f88d 	bl	80049c4 <HAL_GetTick>
 80068aa:	4602      	mov	r2, r0
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d302      	bcc.n	80068bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d116      	bne.n	80068ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
                hi2c->PreviousState = I2C_STATE_NONE;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	631a      	str	r2, [r3, #48]	@ 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2220      	movs	r2, #32
 80068c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d6:	f043 0220 	orr.w	r2, r3, #32
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	641a      	str	r2, [r3, #64]	@ 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

                return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e007      	b.n	80068fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068f4:	2b80      	cmp	r3, #128	@ 0x80
 80068f6:	d1ca      	bne.n	800688e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
            }
        }
    }
    return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <I2C_WaitOnBTFFlagUntilTimeout>:
 *                the configuration information for the specified I2C.
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout, uint32_t Tickstart) {
 8006902:	b580      	push	{r7, lr}
 8006904:	b084      	sub	sp, #16
 8006906:	af00      	add	r7, sp, #0
 8006908:	60f8      	str	r0, [r7, #12]
 800690a:	60b9      	str	r1, [r7, #8]
 800690c:	607a      	str	r2, [r7, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET) {
 800690e:	e02d      	b.n	800696c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
        /* Check if a NACK is detected */
        if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f000 f88d 	bl	8006a30 <I2C_IsAcknowledgeFailed>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d001      	beq.n	8006920 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
            return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e02d      	b.n	800697c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006926:	d021      	beq.n	800696c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8006928:	f7fe f84c 	bl	80049c4 <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	68ba      	ldr	r2, [r7, #8]
 8006934:	429a      	cmp	r2, r3
 8006936:	d302      	bcc.n	800693e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d116      	bne.n	800696c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
                hi2c->PreviousState = I2C_STATE_NONE;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	631a      	str	r2, [r3, #48]	@ 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2220      	movs	r2, #32
 8006948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006958:	f043 0220 	orr.w	r2, r3, #32
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	641a      	str	r2, [r3, #64]	@ 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

                return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e007      	b.n	800697c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET) {
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	f003 0304 	and.w	r3, r3, #4
 8006976:	2b04      	cmp	r3, #4
 8006978:	d1ca      	bne.n	8006910 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
            }
        }
    }
    return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <I2C_WaitOnRXNEFlagUntilTimeout>:
 *                the configuration information for the specified I2C.
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout, uint32_t Tickstart) {
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]

    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 8006990:	e042      	b.n	8006a18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
        /* Check if a STOPF is detected */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) {
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	695b      	ldr	r3, [r3, #20]
 8006998:	f003 0310 	and.w	r3, r3, #16
 800699c:	2b10      	cmp	r3, #16
 800699e:	d119      	bne.n	80069d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f06f 0210 	mvn.w	r2, #16
 80069a8:	615a      	str	r2, [r3, #20]

            hi2c->PreviousState = I2C_STATE_NONE;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	631a      	str	r2, [r3, #48]	@ 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2220      	movs	r2, #32
 80069b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_NONE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e029      	b.n	8006a28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
        }

        /* Check for the Timeout */
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 80069d4:	f7fd fff6 	bl	80049c4 <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d302      	bcc.n	80069ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d116      	bne.n	8006a18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
            hi2c->PreviousState = I2C_STATE_NONE;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	631a      	str	r2, [r3, #48]	@ 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2220      	movs	r2, #32
 80069f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a04:	f043 0220 	orr.w	r2, r3, #32
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e007      	b.n	8006a28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a22:	2b40      	cmp	r3, #64	@ 0x40
 8006a24:	d1b5      	bne.n	8006992 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
        }
    }
    return HAL_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <I2C_IsAcknowledgeFailed>:
 * @brief  This function handles Acknowledge failed detection during an I2C Communication.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef * hi2c) {
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	695b      	ldr	r3, [r3, #20]
 8006a3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a46:	d11b      	bne.n	8006a80 <I2C_IsAcknowledgeFailed+0x50>
        /* Clear NACKF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006a50:	615a      	str	r2, [r3, #20]

        hi2c->PreviousState = I2C_STATE_NONE;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2220      	movs	r2, #32
 8006a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a6c:	f043 0204 	orr.w	r2, r3, #4
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e000      	b.n	8006a82 <I2C_IsAcknowledgeFailed+0x52>
    }
    return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	370c      	adds	r7, #12
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr

08006a8e <HAL_PCD_Init>:
 * @brief  Initializes the PCD according to the specified
 *         parameters in the PCD_InitTypeDef and initialize the associated handle.
 * @param  hpcd PCD handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef * hpcd) {
 8006a8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a90:	b08f      	sub	sp, #60	@ 0x3c
 8006a92:	af0a      	add	r7, sp, #40	@ 0x28
 8006a94:	6078      	str	r0, [r7, #4]
    USB_OTG_GlobalTypeDef * USBx;
    uint8_t i;

    /* Check the PCD handle allocation */
    if (hpcd == NULL) {
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d101      	bne.n	8006aa0 <HAL_PCD_Init+0x12>
        return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e10f      	b.n	8006cc0 <HAL_PCD_Init+0x232>
    }

    /* Check the parameters */
    assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

    USBx = hpcd->Instance;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	60bb      	str	r3, [r7, #8]

    if (hpcd->State == HAL_PCD_STATE_RESET) {
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d106      	bne.n	8006ac0 <HAL_PCD_Init+0x32>
        /* Allocate lock resource and initialize it */
        hpcd->Lock = HAL_UNLOCKED;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

        /* Init the low level hardware */
        hpcd->MspInitCallback(hpcd);
#else
        /* Init the low level hardware : GPIO, CLOCK, NVIC... */
        HAL_PCD_MspInit(hpcd);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f009 fac0 	bl	8010040 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
    }

    hpcd->State = HAL_PCD_STATE_BUSY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2203      	movs	r2, #3
 8006ac4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

    /* Disable DMA mode for FS instance */
    if ((USBx->CID & (0x1U << 8)) == 0U) {
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d102      	bne.n	8006ada <HAL_PCD_Init+0x4c>
        hpcd->Init.dma_enable = 0U;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	611a      	str	r2, [r3, #16]
    }

    /* Disable the Interrupts */
    __HAL_PCD_DISABLE(hpcd);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f003 f95f 	bl	8009da2 <USB_DisableGlobalInt>

    /*Init the Core (common init.) */
    if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK) {
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	603b      	str	r3, [r7, #0]
 8006aea:	687e      	ldr	r6, [r7, #4]
 8006aec:	466d      	mov	r5, sp
 8006aee:	f106 0410 	add.w	r4, r6, #16
 8006af2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006af4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006af6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006af8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006afa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006afe:	e885 0003 	stmia.w	r5, {r0, r1}
 8006b02:	1d33      	adds	r3, r6, #4
 8006b04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b06:	6838      	ldr	r0, [r7, #0]
 8006b08:	f003 f836 	bl	8009b78 <USB_CoreInit>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d005      	beq.n	8006b1e <HAL_PCD_Init+0x90>
        hpcd->State = HAL_PCD_STATE_ERROR;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2202      	movs	r2, #2
 8006b16:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
        return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e0d0      	b.n	8006cc0 <HAL_PCD_Init+0x232>
    }

    /* Force Device Mode*/
    (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2100      	movs	r1, #0
 8006b24:	4618      	mov	r0, r3
 8006b26:	f003 f94d 	bl	8009dc4 <USB_SetCurrentMode>

    /* Init endpoints structures */
    for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	73fb      	strb	r3, [r7, #15]
 8006b2e:	e04a      	b.n	8006bc6 <HAL_PCD_Init+0x138>
        /* Init ep structure */
        hpcd->IN_ep[i].is_in = 1U;
 8006b30:	7bfa      	ldrb	r2, [r7, #15]
 8006b32:	6879      	ldr	r1, [r7, #4]
 8006b34:	4613      	mov	r3, r2
 8006b36:	00db      	lsls	r3, r3, #3
 8006b38:	4413      	add	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	440b      	add	r3, r1
 8006b3e:	333d      	adds	r3, #61	@ 0x3d
 8006b40:	2201      	movs	r2, #1
 8006b42:	701a      	strb	r2, [r3, #0]
        hpcd->IN_ep[i].num = i;
 8006b44:	7bfa      	ldrb	r2, [r7, #15]
 8006b46:	6879      	ldr	r1, [r7, #4]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	00db      	lsls	r3, r3, #3
 8006b4c:	4413      	add	r3, r2
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	440b      	add	r3, r1
 8006b52:	333c      	adds	r3, #60	@ 0x3c
 8006b54:	7bfa      	ldrb	r2, [r7, #15]
 8006b56:	701a      	strb	r2, [r3, #0]
        hpcd->IN_ep[i].tx_fifo_num = i;
 8006b58:	7bfa      	ldrb	r2, [r7, #15]
 8006b5a:	7bfb      	ldrb	r3, [r7, #15]
 8006b5c:	b298      	uxth	r0, r3
 8006b5e:	6879      	ldr	r1, [r7, #4]
 8006b60:	4613      	mov	r3, r2
 8006b62:	00db      	lsls	r3, r3, #3
 8006b64:	4413      	add	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	440b      	add	r3, r1
 8006b6a:	3344      	adds	r3, #68	@ 0x44
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	801a      	strh	r2, [r3, #0]
        /* Control until ep is activated */
        hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006b70:	7bfa      	ldrb	r2, [r7, #15]
 8006b72:	6879      	ldr	r1, [r7, #4]
 8006b74:	4613      	mov	r3, r2
 8006b76:	00db      	lsls	r3, r3, #3
 8006b78:	4413      	add	r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	440b      	add	r3, r1
 8006b7e:	3340      	adds	r3, #64	@ 0x40
 8006b80:	2200      	movs	r2, #0
 8006b82:	701a      	strb	r2, [r3, #0]
        hpcd->IN_ep[i].maxpacket = 0U;
 8006b84:	7bfa      	ldrb	r2, [r7, #15]
 8006b86:	6879      	ldr	r1, [r7, #4]
 8006b88:	4613      	mov	r3, r2
 8006b8a:	00db      	lsls	r3, r3, #3
 8006b8c:	4413      	add	r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	440b      	add	r3, r1
 8006b92:	3348      	adds	r3, #72	@ 0x48
 8006b94:	2200      	movs	r2, #0
 8006b96:	601a      	str	r2, [r3, #0]
        hpcd->IN_ep[i].xfer_buff = 0U;
 8006b98:	7bfa      	ldrb	r2, [r7, #15]
 8006b9a:	6879      	ldr	r1, [r7, #4]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	00db      	lsls	r3, r3, #3
 8006ba0:	4413      	add	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	440b      	add	r3, r1
 8006ba6:	334c      	adds	r3, #76	@ 0x4c
 8006ba8:	2200      	movs	r2, #0
 8006baa:	601a      	str	r2, [r3, #0]
        hpcd->IN_ep[i].xfer_len = 0U;
 8006bac:	7bfa      	ldrb	r2, [r7, #15]
 8006bae:	6879      	ldr	r1, [r7, #4]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	00db      	lsls	r3, r3, #3
 8006bb4:	4413      	add	r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	440b      	add	r3, r1
 8006bba:	3354      	adds	r3, #84	@ 0x54
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	601a      	str	r2, [r3, #0]
    for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 8006bc0:	7bfb      	ldrb	r3, [r7, #15]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	73fb      	strb	r3, [r7, #15]
 8006bc6:	7bfa      	ldrb	r2, [r7, #15]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d3af      	bcc.n	8006b30 <HAL_PCD_Init+0xa2>
    }

    for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	73fb      	strb	r3, [r7, #15]
 8006bd4:	e044      	b.n	8006c60 <HAL_PCD_Init+0x1d2>
        hpcd->OUT_ep[i].is_in = 0U;
 8006bd6:	7bfa      	ldrb	r2, [r7, #15]
 8006bd8:	6879      	ldr	r1, [r7, #4]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	00db      	lsls	r3, r3, #3
 8006bde:	4413      	add	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	440b      	add	r3, r1
 8006be4:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8006be8:	2200      	movs	r2, #0
 8006bea:	701a      	strb	r2, [r3, #0]
        hpcd->OUT_ep[i].num = i;
 8006bec:	7bfa      	ldrb	r2, [r7, #15]
 8006bee:	6879      	ldr	r1, [r7, #4]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	00db      	lsls	r3, r3, #3
 8006bf4:	4413      	add	r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	440b      	add	r3, r1
 8006bfa:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8006bfe:	7bfa      	ldrb	r2, [r7, #15]
 8006c00:	701a      	strb	r2, [r3, #0]
        /* Control until ep is activated */
        hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006c02:	7bfa      	ldrb	r2, [r7, #15]
 8006c04:	6879      	ldr	r1, [r7, #4]
 8006c06:	4613      	mov	r3, r2
 8006c08:	00db      	lsls	r3, r3, #3
 8006c0a:	4413      	add	r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	440b      	add	r3, r1
 8006c10:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8006c14:	2200      	movs	r2, #0
 8006c16:	701a      	strb	r2, [r3, #0]
        hpcd->OUT_ep[i].maxpacket = 0U;
 8006c18:	7bfa      	ldrb	r2, [r7, #15]
 8006c1a:	6879      	ldr	r1, [r7, #4]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	00db      	lsls	r3, r3, #3
 8006c20:	4413      	add	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	440b      	add	r3, r1
 8006c26:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	601a      	str	r2, [r3, #0]
        hpcd->OUT_ep[i].xfer_buff = 0U;
 8006c2e:	7bfa      	ldrb	r2, [r7, #15]
 8006c30:	6879      	ldr	r1, [r7, #4]
 8006c32:	4613      	mov	r3, r2
 8006c34:	00db      	lsls	r3, r3, #3
 8006c36:	4413      	add	r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	440b      	add	r3, r1
 8006c3c:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8006c40:	2200      	movs	r2, #0
 8006c42:	601a      	str	r2, [r3, #0]
        hpcd->OUT_ep[i].xfer_len = 0U;
 8006c44:	7bfa      	ldrb	r2, [r7, #15]
 8006c46:	6879      	ldr	r1, [r7, #4]
 8006c48:	4613      	mov	r3, r2
 8006c4a:	00db      	lsls	r3, r3, #3
 8006c4c:	4413      	add	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	440b      	add	r3, r1
 8006c52:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8006c56:	2200      	movs	r2, #0
 8006c58:	601a      	str	r2, [r3, #0]
    for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	73fb      	strb	r3, [r7, #15]
 8006c60:	7bfa      	ldrb	r2, [r7, #15]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d3b5      	bcc.n	8006bd6 <HAL_PCD_Init+0x148>
    }

    /* Init Device */
    if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK) {
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	603b      	str	r3, [r7, #0]
 8006c70:	687e      	ldr	r6, [r7, #4]
 8006c72:	466d      	mov	r5, sp
 8006c74:	f106 0410 	add.w	r4, r6, #16
 8006c78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006c7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006c80:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006c84:	e885 0003 	stmia.w	r5, {r0, r1}
 8006c88:	1d33      	adds	r3, r6, #4
 8006c8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c8c:	6838      	ldr	r0, [r7, #0]
 8006c8e:	f003 f8e5 	bl	8009e5c <USB_DevInit>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d005      	beq.n	8006ca4 <HAL_PCD_Init+0x216>
        hpcd->State = HAL_PCD_STATE_ERROR;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
        return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e00d      	b.n	8006cc0 <HAL_PCD_Init+0x232>
    }

    hpcd->USB_Address = 0U;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    hpcd->State = HAL_PCD_STATE_READY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    /* Activate LPM */
    if (hpcd->Init.lpm_enable == 1U) {
        (void)HAL_PCDEx_ActivateLPM(hpcd);
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    (void)USB_DevDisconnect(hpcd->Instance);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f004 fa34 	bl	800b126 <USB_DevDisconnect>

    return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3714      	adds	r7, #20
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006cc8 <HAL_PCD_Start>:
/**
 * @brief  Start the USB device
 * @param  hpcd PCD handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef * hpcd) {
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
    USB_OTG_GlobalTypeDef * USBx = hpcd->Instance;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	60fb      	str	r3, [r7, #12]

    __HAL_LOCK(hpcd);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d101      	bne.n	8006ce4 <HAL_PCD_Start+0x1c>
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	e020      	b.n	8006d26 <HAL_PCD_Start+0x5e>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    if ((hpcd->Init.battery_charging_enable == 1U) && (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY)) {
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d109      	bne.n	8006d08 <HAL_PCD_Start+0x40>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d005      	beq.n	8006d08 <HAL_PCD_Start+0x40>
        /* Enable USB Transceiver */
        USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d00:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    __HAL_PCD_ENABLE(hpcd);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f003 f837 	bl	8009d80 <USB_EnableGlobalInt>
    (void)USB_DevConnect(hpcd->Instance);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4618      	mov	r0, r3
 8006d18:	f004 f9e4 	bl	800b0e4 <USB_DevConnect>
    __HAL_UNLOCK(hpcd);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <HAL_PCD_IRQHandler>:
/**
 * @brief  Handles PCD interrupt request.
 * @param  hpcd PCD handle
 * @retval HAL status
 */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef * hpcd) {
 8006d2e:	b590      	push	{r4, r7, lr}
 8006d30:	b08d      	sub	sp, #52	@ 0x34
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
    USB_OTG_GlobalTypeDef * USBx = hpcd->Instance;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	623b      	str	r3, [r7, #32]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8006d3c:	6a3b      	ldr	r3, [r7, #32]
 8006d3e:	61fb      	str	r3, [r7, #28]
    uint32_t epnum;
    uint32_t fifoemptymsk;
    uint32_t RegVal;

    /* ensure that we are in device mode */
    if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE) {
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4618      	mov	r0, r3
 8006d46:	f004 faa2 	bl	800b28e <USB_GetMode>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f040 848a 	bne.w	8007666 <HAL_PCD_IRQHandler+0x938>
        /* avoid spurious interrupt */
        if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) {
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f004 fa06 	bl	800b168 <USB_ReadInterrupts>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f000 8480 	beq.w	8007664 <HAL_PCD_IRQHandler+0x936>
            return;
        }

        /* store current frame number */
        hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	0a1b      	lsrs	r3, r3, #8
 8006d6e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS)) {
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f004 f9f3 	bl	800b168 <USB_ReadInterrupts>
 8006d82:	4603      	mov	r3, r0
 8006d84:	f003 0302 	and.w	r3, r3, #2
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d107      	bne.n	8006d9c <HAL_PCD_IRQHandler+0x6e>
            /* incorrect mode, acknowledge the interrupt */
            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	695a      	ldr	r2, [r3, #20]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f002 0202 	and.w	r2, r2, #2
 8006d9a:	615a      	str	r2, [r3, #20]
        }

        /* Handle RxQLevel Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL)) {
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4618      	mov	r0, r3
 8006da2:	f004 f9e1 	bl	800b168 <USB_ReadInterrupts>
 8006da6:	4603      	mov	r3, r0
 8006da8:	f003 0310 	and.w	r3, r3, #16
 8006dac:	2b10      	cmp	r3, #16
 8006dae:	d161      	bne.n	8006e74 <HAL_PCD_IRQHandler+0x146>
            USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	699a      	ldr	r2, [r3, #24]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f022 0210 	bic.w	r2, r2, #16
 8006dbe:	619a      	str	r2, [r3, #24]

            RegVal = USBx->GRXSTSP;
 8006dc0:	6a3b      	ldr	r3, [r7, #32]
 8006dc2:	6a1b      	ldr	r3, [r3, #32]
 8006dc4:	61bb      	str	r3, [r7, #24]

            ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	f003 020f 	and.w	r2, r3, #15
 8006dcc:	4613      	mov	r3, r2
 8006dce:	00db      	lsls	r3, r3, #3
 8006dd0:	4413      	add	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	4413      	add	r3, r2
 8006ddc:	3304      	adds	r3, #4
 8006dde:	617b      	str	r3, [r7, #20]

            if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_DATA_UPDT) {
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	0c5b      	lsrs	r3, r3, #17
 8006de4:	f003 030f 	and.w	r3, r3, #15
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d124      	bne.n	8006e36 <HAL_PCD_IRQHandler+0x108>
                if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U) {
 8006dec:	69ba      	ldr	r2, [r7, #24]
 8006dee:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006df2:	4013      	ands	r3, r2
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d035      	beq.n	8006e64 <HAL_PCD_IRQHandler+0x136>
                    (void)USB_ReadPacket(USBx, ep->xfer_buff, (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	6919      	ldr	r1, [r3, #16]
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	091b      	lsrs	r3, r3, #4
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	461a      	mov	r2, r3
 8006e0a:	6a38      	ldr	r0, [r7, #32]
 8006e0c:	f004 f818 	bl	800ae40 <USB_ReadPacket>

                    ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	691a      	ldr	r2, [r3, #16]
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	091b      	lsrs	r3, r3, #4
 8006e18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e1c:	441a      	add	r2, r3
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	611a      	str	r2, [r3, #16]
                    ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	6a1a      	ldr	r2, [r3, #32]
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	091b      	lsrs	r3, r3, #4
 8006e2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e2e:	441a      	add	r2, r3
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	621a      	str	r2, [r3, #32]
 8006e34:	e016      	b.n	8006e64 <HAL_PCD_IRQHandler+0x136>
                }
            } else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT) {
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	0c5b      	lsrs	r3, r3, #17
 8006e3a:	f003 030f 	and.w	r3, r3, #15
 8006e3e:	2b06      	cmp	r3, #6
 8006e40:	d110      	bne.n	8006e64 <HAL_PCD_IRQHandler+0x136>
                (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8006e48:	2208      	movs	r2, #8
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6a38      	ldr	r0, [r7, #32]
 8006e4e:	f003 fff7 	bl	800ae40 <USB_ReadPacket>
                ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	6a1a      	ldr	r2, [r3, #32]
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	091b      	lsrs	r3, r3, #4
 8006e5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e5e:	441a      	add	r2, r3
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	621a      	str	r2, [r3, #32]
            } else {
                /* ... */
            }

            USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	699a      	ldr	r2, [r3, #24]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f042 0210 	orr.w	r2, r2, #16
 8006e72:	619a      	str	r2, [r3, #24]
        }

        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT)) {
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f004 f975 	bl	800b168 <USB_ReadInterrupts>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006e84:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006e88:	f040 80a7 	bne.w	8006fda <HAL_PCD_IRQHandler+0x2ac>
            epnum = 0U;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Read in the device interrupt bits */
            ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4618      	mov	r0, r3
 8006e96:	f004 f97a 	bl	800b18e <USB_ReadDevAllOutEpInterrupt>
 8006e9a:	62b8      	str	r0, [r7, #40]	@ 0x28

            while (ep_intr != 0U) {
 8006e9c:	e099      	b.n	8006fd2 <HAL_PCD_IRQHandler+0x2a4>
                if ((ep_intr & 0x1U) != 0U) {
 8006e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f000 808e 	beq.w	8006fc6 <HAL_PCD_IRQHandler+0x298>
                    epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006eb0:	b2d2      	uxtb	r2, r2
 8006eb2:	4611      	mov	r1, r2
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f004 f99e 	bl	800b1f6 <USB_ReadDevOutEPInterrupt>
 8006eba:	6138      	str	r0, [r7, #16]

                    if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC) {
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	f003 0301 	and.w	r3, r3, #1
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00c      	beq.n	8006ee0 <HAL_PCD_IRQHandler+0x1b2>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec8:	015a      	lsls	r2, r3, #5
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	4413      	add	r3, r2
 8006ece:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	6093      	str	r3, [r2, #8]
                        (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006ed8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fec2 	bl	8007c64 <PCD_EP_OutXfrComplete_int>
                    }

                    if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) {
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	f003 0308 	and.w	r3, r3, #8
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00c      	beq.n	8006f04 <HAL_PCD_IRQHandler+0x1d6>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eec:	015a      	lsls	r2, r3, #5
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	2308      	movs	r3, #8
 8006efa:	6093      	str	r3, [r2, #8]
                        /* Class B setup phase done for previous decoded setup */
                        (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006efc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 ff98 	bl	8007e34 <PCD_EP_OutSetupPacket_int>
                    }

                    if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS) {
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	f003 0310 	and.w	r3, r3, #16
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d008      	beq.n	8006f20 <HAL_PCD_IRQHandler+0x1f2>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f10:	015a      	lsls	r2, r3, #5
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	4413      	add	r3, r2
 8006f16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	2310      	movs	r3, #16
 8006f1e:	6093      	str	r3, [r2, #8]
                    }

                    /* Clear OUT Endpoint disable interrupt */
                    if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD) {
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	f003 0302 	and.w	r3, r3, #2
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d030      	beq.n	8006f8c <HAL_PCD_IRQHandler+0x25e>
                        if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF) {
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f32:	2b80      	cmp	r3, #128	@ 0x80
 8006f34:	d109      	bne.n	8006f4a <HAL_PCD_IRQHandler+0x21c>
                            USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	69fa      	ldr	r2, [r7, #28]
 8006f40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f44:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006f48:	6053      	str	r3, [r2, #4]
                        }

                        ep = &hpcd->OUT_ep[epnum];
 8006f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	00db      	lsls	r3, r3, #3
 8006f50:	4413      	add	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	3304      	adds	r3, #4
 8006f5e:	617b      	str	r3, [r7, #20]

                        if (ep->is_iso_incomplete == 1U) {
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	78db      	ldrb	r3, [r3, #3]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d108      	bne.n	8006f7a <HAL_PCD_IRQHandler+0x24c>
                            ep->is_iso_incomplete = 0U;
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                            hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
                            HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	4619      	mov	r1, r3
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f009 f95f 	bl	8010238 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
                        }

                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7c:	015a      	lsls	r2, r3, #5
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	4413      	add	r3, r2
 8006f82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f86:	461a      	mov	r2, r3
 8006f88:	2302      	movs	r3, #2
 8006f8a:	6093      	str	r3, [r2, #8]
                    }

                    /* Clear Status Phase Received interrupt */
                    if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) {
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	f003 0320 	and.w	r3, r3, #32
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d008      	beq.n	8006fa8 <HAL_PCD_IRQHandler+0x27a>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f98:	015a      	lsls	r2, r3, #5
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	2320      	movs	r3, #32
 8006fa6:	6093      	str	r3, [r2, #8]
                    }

                    /* Clear OUT NAK interrupt */
                    if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK) {
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d009      	beq.n	8006fc6 <HAL_PCD_IRQHandler+0x298>
                        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb4:	015a      	lsls	r2, r3, #5
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006fc4:	6093      	str	r3, [r2, #8]
                    }
                }
                epnum++;
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc8:	3301      	adds	r3, #1
 8006fca:	627b      	str	r3, [r7, #36]	@ 0x24
                ep_intr >>= 1U;
 8006fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fce:	085b      	lsrs	r3, r3, #1
 8006fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
            while (ep_intr != 0U) {
 8006fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f47f af62 	bne.w	8006e9e <HAL_PCD_IRQHandler+0x170>
            }
        }

        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT)) {
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f004 f8c2 	bl	800b168 <USB_ReadInterrupts>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006fea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006fee:	f040 80db 	bne.w	80071a8 <HAL_PCD_IRQHandler+0x47a>
            /* Read in the device interrupt bits */
            ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f004 f8e3 	bl	800b1c2 <USB_ReadDevAllInEpInterrupt>
 8006ffc:	62b8      	str	r0, [r7, #40]	@ 0x28

            epnum = 0U;
 8006ffe:	2300      	movs	r3, #0
 8007000:	627b      	str	r3, [r7, #36]	@ 0x24

            while (ep_intr != 0U) {
 8007002:	e0cd      	b.n	80071a0 <HAL_PCD_IRQHandler+0x472>
                if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007006:	f003 0301 	and.w	r3, r3, #1
 800700a:	2b00      	cmp	r3, #0
 800700c:	f000 80c2 	beq.w	8007194 <HAL_PCD_IRQHandler+0x466>
                {
                    epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007016:	b2d2      	uxtb	r2, r2
 8007018:	4611      	mov	r1, r2
 800701a:	4618      	mov	r0, r3
 800701c:	f004 f909 	bl	800b232 <USB_ReadDevInEPInterrupt>
 8007020:	6138      	str	r0, [r7, #16]

                    if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC) {
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	f003 0301 	and.w	r3, r3, #1
 8007028:	2b00      	cmp	r3, #0
 800702a:	d057      	beq.n	80070dc <HAL_PCD_IRQHandler+0x3ae>
                        fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800702c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702e:	f003 030f 	and.w	r3, r3, #15
 8007032:	2201      	movs	r2, #1
 8007034:	fa02 f303 	lsl.w	r3, r2, r3
 8007038:	60fb      	str	r3, [r7, #12]
                        USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007040:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	43db      	mvns	r3, r3
 8007046:	69f9      	ldr	r1, [r7, #28]
 8007048:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800704c:	4013      	ands	r3, r2
 800704e:	634b      	str	r3, [r1, #52]	@ 0x34

                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	4413      	add	r3, r2
 8007058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800705c:	461a      	mov	r2, r3
 800705e:	2301      	movs	r3, #1
 8007060:	6093      	str	r3, [r2, #8]

                        if (hpcd->Init.dma_enable == 1U) {
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d132      	bne.n	80070d0 <HAL_PCD_IRQHandler+0x3a2>
                            hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800706a:	6879      	ldr	r1, [r7, #4]
 800706c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800706e:	4613      	mov	r3, r2
 8007070:	00db      	lsls	r3, r3, #3
 8007072:	4413      	add	r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	440b      	add	r3, r1
 8007078:	334c      	adds	r3, #76	@ 0x4c
 800707a:	6819      	ldr	r1, [r3, #0]
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007080:	4613      	mov	r3, r2
 8007082:	00db      	lsls	r3, r3, #3
 8007084:	4413      	add	r3, r2
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4403      	add	r3, r0
 800708a:	3348      	adds	r3, #72	@ 0x48
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4419      	add	r1, r3
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007094:	4613      	mov	r3, r2
 8007096:	00db      	lsls	r3, r3, #3
 8007098:	4413      	add	r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	4403      	add	r3, r0
 800709e:	334c      	adds	r3, #76	@ 0x4c
 80070a0:	6019      	str	r1, [r3, #0]

                            /* this is ZLP, so prepare EP0 for next setup */
                            if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U)) {
 80070a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d113      	bne.n	80070d0 <HAL_PCD_IRQHandler+0x3a2>
 80070a8:	6879      	ldr	r1, [r7, #4]
 80070aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070ac:	4613      	mov	r3, r2
 80070ae:	00db      	lsls	r3, r3, #3
 80070b0:	4413      	add	r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	440b      	add	r3, r1
 80070b6:	3354      	adds	r3, #84	@ 0x54
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d108      	bne.n	80070d0 <HAL_PCD_IRQHandler+0x3a2>
                                /* prepare to rx more setup packets */
                                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6818      	ldr	r0, [r3, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80070c8:	461a      	mov	r2, r3
 80070ca:	2101      	movs	r1, #1
 80070cc:	f004 f910 	bl	800b2f0 <USB_EP0_OutStart>
                        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                        hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
                        HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80070d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	4619      	mov	r1, r3
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f009 f833 	bl	8010142 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
                    }
                    if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC) {
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	f003 0308 	and.w	r3, r3, #8
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d008      	beq.n	80070f8 <HAL_PCD_IRQHandler+0x3ca>
                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80070e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e8:	015a      	lsls	r2, r3, #5
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	4413      	add	r3, r2
 80070ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070f2:	461a      	mov	r2, r3
 80070f4:	2308      	movs	r3, #8
 80070f6:	6093      	str	r3, [r2, #8]
                    }
                    if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE) {
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	f003 0310 	and.w	r3, r3, #16
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d008      	beq.n	8007114 <HAL_PCD_IRQHandler+0x3e6>
                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007104:	015a      	lsls	r2, r3, #5
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	4413      	add	r3, r2
 800710a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800710e:	461a      	mov	r2, r3
 8007110:	2310      	movs	r3, #16
 8007112:	6093      	str	r3, [r2, #8]
                    }
                    if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE) {
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800711a:	2b00      	cmp	r3, #0
 800711c:	d008      	beq.n	8007130 <HAL_PCD_IRQHandler+0x402>
                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800711e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007120:	015a      	lsls	r2, r3, #5
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	4413      	add	r3, r2
 8007126:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800712a:	461a      	mov	r2, r3
 800712c:	2340      	movs	r3, #64	@ 0x40
 800712e:	6093      	str	r3, [r2, #8]
                    }
                    if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD) {
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	f003 0302 	and.w	r3, r3, #2
 8007136:	2b00      	cmp	r3, #0
 8007138:	d023      	beq.n	8007182 <HAL_PCD_IRQHandler+0x454>
                        (void)USB_FlushTxFifo(USBx, epnum);
 800713a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800713c:	6a38      	ldr	r0, [r7, #32]
 800713e:	f002 fff1 	bl	800a124 <USB_FlushTxFifo>

                        ep = &hpcd->IN_ep[epnum];
 8007142:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007144:	4613      	mov	r3, r2
 8007146:	00db      	lsls	r3, r3, #3
 8007148:	4413      	add	r3, r2
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	3338      	adds	r3, #56	@ 0x38
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	4413      	add	r3, r2
 8007152:	3304      	adds	r3, #4
 8007154:	617b      	str	r3, [r7, #20]

                        if (ep->is_iso_incomplete == 1U) {
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	78db      	ldrb	r3, [r3, #3]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d108      	bne.n	8007170 <HAL_PCD_IRQHandler+0x442>
                            ep->is_iso_incomplete = 0U;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2200      	movs	r2, #0
 8007162:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                            hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
                            HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007166:	b2db      	uxtb	r3, r3
 8007168:	4619      	mov	r1, r3
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f009 f876 	bl	801025c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
                        }

                        CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007172:	015a      	lsls	r2, r3, #5
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	4413      	add	r3, r2
 8007178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800717c:	461a      	mov	r2, r3
 800717e:	2302      	movs	r3, #2
 8007180:	6093      	str	r3, [r2, #8]
                    }
                    if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE) {
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007188:	2b00      	cmp	r3, #0
 800718a:	d003      	beq.n	8007194 <HAL_PCD_IRQHandler+0x466>
                        (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800718c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 fcdb 	bl	8007b4a <PCD_WriteEmptyTxFifo>
                    }
                }
                epnum++;
 8007194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007196:	3301      	adds	r3, #1
 8007198:	627b      	str	r3, [r7, #36]	@ 0x24
                ep_intr >>= 1U;
 800719a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800719c:	085b      	lsrs	r3, r3, #1
 800719e:	62bb      	str	r3, [r7, #40]	@ 0x28
            while (ep_intr != 0U) {
 80071a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	f47f af2e 	bne.w	8007004 <HAL_PCD_IRQHandler+0x2d6>
            }
        }

        /* Handle Resume Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT)) {
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4618      	mov	r0, r3
 80071ae:	f003 ffdb 	bl	800b168 <USB_ReadInterrupts>
 80071b2:	4603      	mov	r3, r0
 80071b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071bc:	d122      	bne.n	8007204 <HAL_PCD_IRQHandler+0x4d6>
            /* Clear the Remote Wake-up Signaling */
            USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	69fa      	ldr	r2, [r7, #28]
 80071c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071cc:	f023 0301 	bic.w	r3, r3, #1
 80071d0:	6053      	str	r3, [r2, #4]

            if (hpcd->LPM_State == LPM_L1) {
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d108      	bne.n	80071ee <HAL_PCD_IRQHandler+0x4c0>
                hpcd->LPM_State = LPM_L0;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
                HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80071e4:	2100      	movs	r1, #0
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fec2 	bl	8007f70 <HAL_PCDEx_LPM_Callback>
 80071ec:	e002      	b.n	80071f4 <HAL_PCD_IRQHandler+0x4c6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            } else {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                hpcd->ResumeCallback(hpcd);
#else
                HAL_PCD_ResumeCallback(hpcd);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f009 f814 	bl	801021c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	695a      	ldr	r2, [r3, #20]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007202:	615a      	str	r2, [r3, #20]
        }

        /* Handle Suspend Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP)) {
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4618      	mov	r0, r3
 800720a:	f003 ffad 	bl	800b168 <USB_ReadInterrupts>
 800720e:	4603      	mov	r3, r0
 8007210:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007214:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007218:	d112      	bne.n	8007240 <HAL_PCD_IRQHandler+0x512>
            if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS) {
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f003 0301 	and.w	r3, r3, #1
 8007226:	2b01      	cmp	r3, #1
 8007228:	d102      	bne.n	8007230 <HAL_PCD_IRQHandler+0x502>
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                hpcd->SuspendCallback(hpcd);
#else
                HAL_PCD_SuspendCallback(hpcd);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f008 ffd0 	bl	80101d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	695a      	ldr	r2, [r3, #20]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800723e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
        }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
        /* Handle Reset Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST)) {
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4618      	mov	r0, r3
 8007246:	f003 ff8f 	bl	800b168 <USB_ReadInterrupts>
 800724a:	4603      	mov	r3, r0
 800724c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007250:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007254:	f040 80b7 	bne.w	80073c6 <HAL_PCD_IRQHandler+0x698>
            USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	69fa      	ldr	r2, [r7, #28]
 8007262:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007266:	f023 0301 	bic.w	r3, r3, #1
 800726a:	6053      	str	r3, [r2, #4]
            (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2110      	movs	r1, #16
 8007272:	4618      	mov	r0, r3
 8007274:	f002 ff56 	bl	800a124 <USB_FlushTxFifo>

            for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 8007278:	2300      	movs	r3, #0
 800727a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800727c:	e046      	b.n	800730c <HAL_PCD_IRQHandler+0x5de>
                USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800727e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007280:	015a      	lsls	r2, r3, #5
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	4413      	add	r3, r2
 8007286:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800728a:	461a      	mov	r2, r3
 800728c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007290:	6093      	str	r3, [r2, #8]
                USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007294:	015a      	lsls	r2, r3, #5
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	4413      	add	r3, r2
 800729a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072a2:	0151      	lsls	r1, r2, #5
 80072a4:	69fa      	ldr	r2, [r7, #28]
 80072a6:	440a      	add	r2, r1
 80072a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072ac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80072b0:	6013      	str	r3, [r2, #0]
                USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80072b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072b4:	015a      	lsls	r2, r3, #5
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	4413      	add	r3, r2
 80072ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072be:	461a      	mov	r2, r3
 80072c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80072c4:	6093      	str	r3, [r2, #8]
                USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80072c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072c8:	015a      	lsls	r2, r3, #5
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	4413      	add	r3, r2
 80072ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072d6:	0151      	lsls	r1, r2, #5
 80072d8:	69fa      	ldr	r2, [r7, #28]
 80072da:	440a      	add	r2, r1
 80072dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072e0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80072e4:	6013      	str	r3, [r2, #0]
                USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80072e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e8:	015a      	lsls	r2, r3, #5
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	4413      	add	r3, r2
 80072ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072f6:	0151      	lsls	r1, r2, #5
 80072f8:	69fa      	ldr	r2, [r7, #28]
 80072fa:	440a      	add	r2, r1
 80072fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007300:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007304:	6013      	str	r3, [r2, #0]
            for (i = 0U; i < hpcd->Init.dev_endpoints; i++) {
 8007306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007308:	3301      	adds	r3, #1
 800730a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007312:	429a      	cmp	r2, r3
 8007314:	d3b3      	bcc.n	800727e <HAL_PCD_IRQHandler+0x550>
            }
            USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	69fa      	ldr	r2, [r7, #28]
 8007320:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007324:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007328:	61d3      	str	r3, [r2, #28]

            if (hpcd->Init.use_dedicated_ep1 != 0U) {
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800732e:	2b00      	cmp	r3, #0
 8007330:	d016      	beq.n	8007360 <HAL_PCD_IRQHandler+0x632>
                USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM;
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007338:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800733c:	69fa      	ldr	r2, [r7, #28]
 800733e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007342:	f043 030b 	orr.w	r3, r3, #11
 8007346:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

                USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM;
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007352:	69fa      	ldr	r2, [r7, #28]
 8007354:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007358:	f043 030b 	orr.w	r3, r3, #11
 800735c:	6453      	str	r3, [r2, #68]	@ 0x44
 800735e:	e015      	b.n	800738c <HAL_PCD_IRQHandler+0x65e>
            } else {
                USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM | USB_OTG_DOEPMSK_NAKM;
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	69fa      	ldr	r2, [r7, #28]
 800736a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800736e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007372:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8007376:	6153      	str	r3, [r2, #20]

                USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM;
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	69fa      	ldr	r2, [r7, #28]
 8007382:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007386:	f043 030b 	orr.w	r3, r3, #11
 800738a:	6113      	str	r3, [r2, #16]
            }

            /* Set Default Address to 0 */
            USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	69fa      	ldr	r2, [r7, #28]
 8007396:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800739a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800739e:	6013      	str	r3, [r2, #0]

            /* setup EP0 to receive SETUP packets */
            (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6818      	ldr	r0, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	b2d9      	uxtb	r1, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80073b0:	461a      	mov	r2, r3
 80073b2:	f003 ff9d 	bl	800b2f0 <USB_EP0_OutStart>

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	695a      	ldr	r2, [r3, #20]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80073c4:	615a      	str	r2, [r3, #20]
        }

        /* Handle Enumeration done Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE)) {
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4618      	mov	r0, r3
 80073cc:	f003 fecc 	bl	800b168 <USB_ReadInterrupts>
 80073d0:	4603      	mov	r3, r0
 80073d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80073d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073da:	d124      	bne.n	8007426 <HAL_PCD_IRQHandler+0x6f8>
            (void)USB_ActivateSetup(hpcd->Instance);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4618      	mov	r0, r3
 80073e2:	f003 ff62 	bl	800b2aa <USB_ActivateSetup>
            hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4618      	mov	r0, r3
 80073ec:	f002 ff17 	bl	800a21e <USB_GetDevSpeed>
 80073f0:	4603      	mov	r3, r0
 80073f2:	461a      	mov	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	60da      	str	r2, [r3, #12]

            /* Set USB Turnaround time */
            (void)USB_SetTurnaroundTime(hpcd->Instance, HAL_RCC_GetHCLKFreq(), (uint8_t)hpcd->Init.speed);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681c      	ldr	r4, [r3, #0]
 80073fc:	f001 f9e8 	bl	80087d0 <HAL_RCC_GetHCLKFreq>
 8007400:	4601      	mov	r1, r0
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	b2db      	uxtb	r3, r3
 8007408:	461a      	mov	r2, r3
 800740a:	4620      	mov	r0, r4
 800740c:	f002 fc16 	bl	8009c3c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->ResetCallback(hpcd);
#else
            HAL_PCD_ResetCallback(hpcd);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f008 febe 	bl	8010192 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	695a      	ldr	r2, [r3, #20]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007424:	615a      	str	r2, [r3, #20]
        }

        /* Handle SOF Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF)) {
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4618      	mov	r0, r3
 800742c:	f003 fe9c 	bl	800b168 <USB_ReadInterrupts>
 8007430:	4603      	mov	r3, r0
 8007432:	f003 0308 	and.w	r3, r3, #8
 8007436:	2b08      	cmp	r3, #8
 8007438:	d10a      	bne.n	8007450 <HAL_PCD_IRQHandler+0x722>
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->SOFCallback(hpcd);
#else
            HAL_PCD_SOFCallback(hpcd);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f008 fe9b 	bl	8010176 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	695a      	ldr	r2, [r3, #20]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f002 0208 	and.w	r2, r2, #8
 800744e:	615a      	str	r2, [r3, #20]
        }

        /* Handle Global OUT NAK effective Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF)) {
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4618      	mov	r0, r3
 8007456:	f003 fe87 	bl	800b168 <USB_ReadInterrupts>
 800745a:	4603      	mov	r3, r0
 800745c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007460:	2b80      	cmp	r3, #128	@ 0x80
 8007462:	d122      	bne.n	80074aa <HAL_PCD_IRQHandler+0x77c>
            USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007464:	6a3b      	ldr	r3, [r7, #32]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	619a      	str	r2, [r3, #24]

            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 8007470:	2301      	movs	r3, #1
 8007472:	627b      	str	r3, [r7, #36]	@ 0x24
 8007474:	e014      	b.n	80074a0 <HAL_PCD_IRQHandler+0x772>
                if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U) {
 8007476:	6879      	ldr	r1, [r7, #4]
 8007478:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800747a:	4613      	mov	r3, r2
 800747c:	00db      	lsls	r3, r3, #3
 800747e:	4413      	add	r3, r2
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	440b      	add	r3, r1
 8007484:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d105      	bne.n	800749a <HAL_PCD_IRQHandler+0x76c>
                    /* Abort current transaction and disable the EP */
                    (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800748e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007490:	b2db      	uxtb	r3, r3
 8007492:	4619      	mov	r1, r3
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 fb27 	bl	8007ae8 <HAL_PCD_EP_Abort>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 800749a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800749c:	3301      	adds	r3, #1
 800749e:	627b      	str	r3, [r7, #36]	@ 0x24
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d3e5      	bcc.n	8007476 <HAL_PCD_IRQHandler+0x748>
                }
            }
        }

        /* Handle Incomplete ISO IN Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR)) {
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f003 fe5a 	bl	800b168 <USB_ReadInterrupts>
 80074b4:	4603      	mov	r3, r0
 80074b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80074ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074be:	d13b      	bne.n	8007538 <HAL_PCD_IRQHandler+0x80a>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 80074c0:	2301      	movs	r3, #1
 80074c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80074c4:	e02b      	b.n	800751e <HAL_PCD_IRQHandler+0x7f0>
                RegVal = USBx_INEP(epnum)->DIEPCTL;
 80074c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c8:	015a      	lsls	r2, r3, #5
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	4413      	add	r3, r2
 80074ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	61bb      	str	r3, [r7, #24]

                if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) && ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)) {
 80074d6:	6879      	ldr	r1, [r7, #4]
 80074d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074da:	4613      	mov	r3, r2
 80074dc:	00db      	lsls	r3, r3, #3
 80074de:	4413      	add	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	440b      	add	r3, r1
 80074e4:	3340      	adds	r3, #64	@ 0x40
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d115      	bne.n	8007518 <HAL_PCD_IRQHandler+0x7ea>
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	da12      	bge.n	8007518 <HAL_PCD_IRQHandler+0x7ea>
                    hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80074f2:	6879      	ldr	r1, [r7, #4]
 80074f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074f6:	4613      	mov	r3, r2
 80074f8:	00db      	lsls	r3, r3, #3
 80074fa:	4413      	add	r3, r2
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	440b      	add	r3, r1
 8007500:	333f      	adds	r3, #63	@ 0x3f
 8007502:	2201      	movs	r2, #1
 8007504:	701a      	strb	r2, [r3, #0]

                    /* Abort current transaction and disable the EP */
                    (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007508:	b2db      	uxtb	r3, r3
 800750a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800750e:	b2db      	uxtb	r3, r3
 8007510:	4619      	mov	r1, r3
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fae8 	bl	8007ae8 <HAL_PCD_EP_Abort>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 8007518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751a:	3301      	adds	r3, #1
 800751c:	627b      	str	r3, [r7, #36]	@ 0x24
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007524:	429a      	cmp	r2, r3
 8007526:	d3ce      	bcc.n	80074c6 <HAL_PCD_IRQHandler+0x798>
                }
            }

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	695a      	ldr	r2, [r3, #20]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007536:	615a      	str	r2, [r3, #20]
        }

        /* Handle Incomplete ISO OUT Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT)) {
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4618      	mov	r0, r3
 800753e:	f003 fe13 	bl	800b168 <USB_ReadInterrupts>
 8007542:	4603      	mov	r3, r0
 8007544:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007548:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800754c:	d155      	bne.n	80075fa <HAL_PCD_IRQHandler+0x8cc>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 800754e:	2301      	movs	r3, #1
 8007550:	627b      	str	r3, [r7, #36]	@ 0x24
 8007552:	e045      	b.n	80075e0 <HAL_PCD_IRQHandler+0x8b2>
                RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007556:	015a      	lsls	r2, r3, #5
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	4413      	add	r3, r2
 800755c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	61bb      	str	r3, [r7, #24]

                if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) && ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) && ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U))) {
 8007564:	6879      	ldr	r1, [r7, #4]
 8007566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007568:	4613      	mov	r3, r2
 800756a:	00db      	lsls	r3, r3, #3
 800756c:	4413      	add	r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	440b      	add	r3, r1
 8007572:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d12e      	bne.n	80075da <HAL_PCD_IRQHandler+0x8ac>
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	2b00      	cmp	r3, #0
 8007580:	da2b      	bge.n	80075da <HAL_PCD_IRQHandler+0x8ac>
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 800758e:	f003 0301 	and.w	r3, r3, #1
 8007592:	429a      	cmp	r2, r3
 8007594:	d121      	bne.n	80075da <HAL_PCD_IRQHandler+0x8ac>
                    hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007596:	6879      	ldr	r1, [r7, #4]
 8007598:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800759a:	4613      	mov	r3, r2
 800759c:	00db      	lsls	r3, r3, #3
 800759e:	4413      	add	r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	440b      	add	r3, r1
 80075a4:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80075a8:	2201      	movs	r2, #1
 80075aa:	701a      	strb	r2, [r3, #0]

                    USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80075ac:	6a3b      	ldr	r3, [r7, #32]
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80075b4:	6a3b      	ldr	r3, [r7, #32]
 80075b6:	619a      	str	r2, [r3, #24]

                    if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U) {
 80075b8:	6a3b      	ldr	r3, [r7, #32]
 80075ba:	695b      	ldr	r3, [r3, #20]
 80075bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10a      	bne.n	80075da <HAL_PCD_IRQHandler+0x8ac>
                        USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	69fa      	ldr	r2, [r7, #28]
 80075ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80075d6:	6053      	str	r3, [r2, #4]
                        break;
 80075d8:	e007      	b.n	80075ea <HAL_PCD_IRQHandler+0x8bc>
            for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++) {
 80075da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075dc:	3301      	adds	r3, #1
 80075de:	627b      	str	r3, [r7, #36]	@ 0x24
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d3b4      	bcc.n	8007554 <HAL_PCD_IRQHandler+0x826>
                    }
                }
            }

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	695a      	ldr	r2, [r3, #20]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80075f8:	615a      	str	r2, [r3, #20]
        }

        /* Handle Connection event Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT)) {
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4618      	mov	r0, r3
 8007600:	f003 fdb2 	bl	800b168 <USB_ReadInterrupts>
 8007604:	4603      	mov	r3, r0
 8007606:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800760a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800760e:	d10a      	bne.n	8007626 <HAL_PCD_IRQHandler+0x8f8>
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->ConnectCallback(hpcd);
#else
            HAL_PCD_ConnectCallback(hpcd);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f008 fe35 	bl	8010280 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	695a      	ldr	r2, [r3, #20]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007624:	615a      	str	r2, [r3, #20]
        }

        /* Handle Disconnection event Interrupt */
        if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT)) {
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4618      	mov	r0, r3
 800762c:	f003 fd9c 	bl	800b168 <USB_ReadInterrupts>
 8007630:	4603      	mov	r3, r0
 8007632:	f003 0304 	and.w	r3, r3, #4
 8007636:	2b04      	cmp	r3, #4
 8007638:	d115      	bne.n	8007666 <HAL_PCD_IRQHandler+0x938>
            RegVal = hpcd->Instance->GOTGINT;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	61bb      	str	r3, [r7, #24]

            if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET) {
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	f003 0304 	and.w	r3, r3, #4
 8007648:	2b00      	cmp	r3, #0
 800764a:	d002      	beq.n	8007652 <HAL_PCD_IRQHandler+0x924>
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                hpcd->DisconnectCallback(hpcd);
#else
                HAL_PCD_DisconnectCallback(hpcd);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f008 fe25 	bl	801029c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            hpcd->Instance->GOTGINT |= RegVal;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	6859      	ldr	r1, [r3, #4]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	69ba      	ldr	r2, [r7, #24]
 800765e:	430a      	orrs	r2, r1
 8007660:	605a      	str	r2, [r3, #4]
 8007662:	e000      	b.n	8007666 <HAL_PCD_IRQHandler+0x938>
            return;
 8007664:	bf00      	nop
        }
    }
}
 8007666:	3734      	adds	r7, #52	@ 0x34
 8007668:	46bd      	mov	sp, r7
 800766a:	bd90      	pop	{r4, r7, pc}

0800766c <HAL_PCD_SetAddress>:
 * @brief  Set the USB Device address.
 * @param  hpcd PCD handle
 * @param  address new device address
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef * hpcd, uint8_t address) {
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	460b      	mov	r3, r1
 8007676:	70fb      	strb	r3, [r7, #3]
    __HAL_LOCK(hpcd);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800767e:	2b01      	cmp	r3, #1
 8007680:	d101      	bne.n	8007686 <HAL_PCD_SetAddress+0x1a>
 8007682:	2302      	movs	r3, #2
 8007684:	e013      	b.n	80076ae <HAL_PCD_SetAddress+0x42>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    hpcd->USB_Address = address;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	78fa      	ldrb	r2, [r7, #3]
 8007692:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    (void)USB_SetDevAddress(hpcd->Instance, address);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	78fa      	ldrb	r2, [r7, #3]
 800769c:	4611      	mov	r1, r2
 800769e:	4618      	mov	r0, r3
 80076a0:	f003 fcfa 	bl	800b098 <USB_SetDevAddress>
    __HAL_UNLOCK(hpcd);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3708      	adds	r7, #8
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <HAL_PCD_EP_Open>:
 * @param  ep_addr endpoint address
 * @param  ep_mps endpoint max packet size
 * @param  ep_type endpoint type
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef * hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type) {
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b084      	sub	sp, #16
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	4608      	mov	r0, r1
 80076c0:	4611      	mov	r1, r2
 80076c2:	461a      	mov	r2, r3
 80076c4:	4603      	mov	r3, r0
 80076c6:	70fb      	strb	r3, [r7, #3]
 80076c8:	460b      	mov	r3, r1
 80076ca:	803b      	strh	r3, [r7, #0]
 80076cc:	4613      	mov	r3, r2
 80076ce:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef ret = HAL_OK;
 80076d0:	2300      	movs	r3, #0
 80076d2:	72fb      	strb	r3, [r7, #11]
    PCD_EPTypeDef * ep;

    if ((ep_addr & 0x80U) == 0x80U) {
 80076d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	da0f      	bge.n	80076fc <HAL_PCD_EP_Open+0x46>
        ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076dc:	78fb      	ldrb	r3, [r7, #3]
 80076de:	f003 020f 	and.w	r2, r3, #15
 80076e2:	4613      	mov	r3, r2
 80076e4:	00db      	lsls	r3, r3, #3
 80076e6:	4413      	add	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	3338      	adds	r3, #56	@ 0x38
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	4413      	add	r3, r2
 80076f0:	3304      	adds	r3, #4
 80076f2:	60fb      	str	r3, [r7, #12]
        ep->is_in = 1U;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2201      	movs	r2, #1
 80076f8:	705a      	strb	r2, [r3, #1]
 80076fa:	e00f      	b.n	800771c <HAL_PCD_EP_Open+0x66>
    } else {
        ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80076fc:	78fb      	ldrb	r3, [r7, #3]
 80076fe:	f003 020f 	and.w	r2, r3, #15
 8007702:	4613      	mov	r3, r2
 8007704:	00db      	lsls	r3, r3, #3
 8007706:	4413      	add	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	4413      	add	r3, r2
 8007712:	3304      	adds	r3, #4
 8007714:	60fb      	str	r3, [r7, #12]
        ep->is_in = 0U;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	705a      	strb	r2, [r3, #1]
    }

    ep->num = ep_addr & EP_ADDR_MSK;
 800771c:	78fb      	ldrb	r3, [r7, #3]
 800771e:	f003 030f 	and.w	r3, r3, #15
 8007722:	b2da      	uxtb	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	701a      	strb	r2, [r3, #0]
    ep->maxpacket = ep_mps;
 8007728:	883a      	ldrh	r2, [r7, #0]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	60da      	str	r2, [r3, #12]
    ep->type = ep_type;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	78ba      	ldrb	r2, [r7, #2]
 8007732:	711a      	strb	r2, [r3, #4]

    if (ep->is_in != 0U) {
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	785b      	ldrb	r3, [r3, #1]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d004      	beq.n	8007746 <HAL_PCD_EP_Open+0x90>
        /* Assign a Tx FIFO */
        ep->tx_fifo_num = ep->num;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	461a      	mov	r2, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	811a      	strh	r2, [r3, #8]
    }
    /* Set initial data PID. */
    if (ep_type == EP_TYPE_BULK) {
 8007746:	78bb      	ldrb	r3, [r7, #2]
 8007748:	2b02      	cmp	r3, #2
 800774a:	d102      	bne.n	8007752 <HAL_PCD_EP_Open+0x9c>
        ep->data_pid_start = 0U;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	715a      	strb	r2, [r3, #5]
    }

    __HAL_LOCK(hpcd);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007758:	2b01      	cmp	r3, #1
 800775a:	d101      	bne.n	8007760 <HAL_PCD_EP_Open+0xaa>
 800775c:	2302      	movs	r3, #2
 800775e:	e00e      	b.n	800777e <HAL_PCD_EP_Open+0xc8>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68f9      	ldr	r1, [r7, #12]
 800776e:	4618      	mov	r0, r3
 8007770:	f002 fd7a 	bl	800a268 <USB_ActivateEndpoint>
    __HAL_UNLOCK(hpcd);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    return ret;
 800777c:	7afb      	ldrb	r3, [r7, #11]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <HAL_PCD_EP_Close>:
 * @brief  Deactivate an endpoint.
 * @param  hpcd PCD handle
 * @param  ep_addr endpoint address
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef * hpcd, uint8_t ep_addr) {
 8007786:	b580      	push	{r7, lr}
 8007788:	b084      	sub	sp, #16
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	460b      	mov	r3, r1
 8007790:	70fb      	strb	r3, [r7, #3]
    PCD_EPTypeDef * ep;

    if ((ep_addr & 0x80U) == 0x80U) {
 8007792:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007796:	2b00      	cmp	r3, #0
 8007798:	da0f      	bge.n	80077ba <HAL_PCD_EP_Close+0x34>
        ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800779a:	78fb      	ldrb	r3, [r7, #3]
 800779c:	f003 020f 	and.w	r2, r3, #15
 80077a0:	4613      	mov	r3, r2
 80077a2:	00db      	lsls	r3, r3, #3
 80077a4:	4413      	add	r3, r2
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	3338      	adds	r3, #56	@ 0x38
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	4413      	add	r3, r2
 80077ae:	3304      	adds	r3, #4
 80077b0:	60fb      	str	r3, [r7, #12]
        ep->is_in = 1U;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2201      	movs	r2, #1
 80077b6:	705a      	strb	r2, [r3, #1]
 80077b8:	e00f      	b.n	80077da <HAL_PCD_EP_Close+0x54>
    } else {
        ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80077ba:	78fb      	ldrb	r3, [r7, #3]
 80077bc:	f003 020f 	and.w	r2, r3, #15
 80077c0:	4613      	mov	r3, r2
 80077c2:	00db      	lsls	r3, r3, #3
 80077c4:	4413      	add	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	4413      	add	r3, r2
 80077d0:	3304      	adds	r3, #4
 80077d2:	60fb      	str	r3, [r7, #12]
        ep->is_in = 0U;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2200      	movs	r2, #0
 80077d8:	705a      	strb	r2, [r3, #1]
    }
    ep->num = ep_addr & EP_ADDR_MSK;
 80077da:	78fb      	ldrb	r3, [r7, #3]
 80077dc:	f003 030f 	and.w	r3, r3, #15
 80077e0:	b2da      	uxtb	r2, r3
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	701a      	strb	r2, [r3, #0]

    __HAL_LOCK(hpcd);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d101      	bne.n	80077f4 <HAL_PCD_EP_Close+0x6e>
 80077f0:	2302      	movs	r3, #2
 80077f2:	e00e      	b.n	8007812 <HAL_PCD_EP_Close+0x8c>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68f9      	ldr	r1, [r7, #12]
 8007802:	4618      	mov	r0, r3
 8007804:	f002 fdb8 	bl	800a378 <USB_DeactivateEndpoint>
    __HAL_UNLOCK(hpcd);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    return HAL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <HAL_PCD_EP_Receive>:
 * @param  ep_addr endpoint address
 * @param  pBuf pointer to the reception buffer
 * @param  len amount of data to be received
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef * hpcd, uint8_t ep_addr, uint8_t * pBuf, uint32_t len) {
 800781a:	b580      	push	{r7, lr}
 800781c:	b086      	sub	sp, #24
 800781e:	af00      	add	r7, sp, #0
 8007820:	60f8      	str	r0, [r7, #12]
 8007822:	607a      	str	r2, [r7, #4]
 8007824:	603b      	str	r3, [r7, #0]
 8007826:	460b      	mov	r3, r1
 8007828:	72fb      	strb	r3, [r7, #11]
    PCD_EPTypeDef * ep;

    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800782a:	7afb      	ldrb	r3, [r7, #11]
 800782c:	f003 020f 	and.w	r2, r3, #15
 8007830:	4613      	mov	r3, r2
 8007832:	00db      	lsls	r3, r3, #3
 8007834:	4413      	add	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	4413      	add	r3, r2
 8007840:	3304      	adds	r3, #4
 8007842:	617b      	str	r3, [r7, #20]

    /*setup and start the Xfer */
    ep->xfer_buff = pBuf;
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	611a      	str	r2, [r3, #16]
    ep->xfer_len = len;
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	683a      	ldr	r2, [r7, #0]
 800784e:	619a      	str	r2, [r3, #24]
    ep->xfer_count = 0U;
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	2200      	movs	r2, #0
 8007854:	621a      	str	r2, [r3, #32]
    ep->is_in = 0U;
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	2200      	movs	r2, #0
 800785a:	705a      	strb	r2, [r3, #1]
    ep->num = ep_addr & EP_ADDR_MSK;
 800785c:	7afb      	ldrb	r3, [r7, #11]
 800785e:	f003 030f 	and.w	r3, r3, #15
 8007862:	b2da      	uxtb	r2, r3
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	701a      	strb	r2, [r3, #0]

    if (hpcd->Init.dma_enable == 1U) {
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d102      	bne.n	8007876 <HAL_PCD_EP_Receive+0x5c>
        ep->dma_addr = (uint32_t)pBuf;
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	615a      	str	r2, [r3, #20]
    }

    if ((ep_addr & EP_ADDR_MSK) == 0U) {
 8007876:	7afb      	ldrb	r3, [r7, #11]
 8007878:	f003 030f 	and.w	r3, r3, #15
 800787c:	2b00      	cmp	r3, #0
 800787e:	d109      	bne.n	8007894 <HAL_PCD_EP_Receive+0x7a>
        (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6818      	ldr	r0, [r3, #0]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	b2db      	uxtb	r3, r3
 800788a:	461a      	mov	r2, r3
 800788c:	6979      	ldr	r1, [r7, #20]
 800788e:	f003 f897 	bl	800a9c0 <USB_EP0StartXfer>
 8007892:	e008      	b.n	80078a6 <HAL_PCD_EP_Receive+0x8c>
    } else {
        (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6818      	ldr	r0, [r3, #0]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	b2db      	uxtb	r3, r3
 800789e:	461a      	mov	r2, r3
 80078a0:	6979      	ldr	r1, [r7, #20]
 80078a2:	f002 fe45 	bl	800a530 <USB_EPStartXfer>
    }

    return HAL_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3718      	adds	r7, #24
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <HAL_PCD_EP_GetRxCount>:
 * @brief  Get Received Data Size
 * @param  hpcd PCD handle
 * @param  ep_addr endpoint address
 * @retval Data Size
 */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef * hpcd, uint8_t ep_addr) {
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	460b      	mov	r3, r1
 80078ba:	70fb      	strb	r3, [r7, #3]
    return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80078bc:	78fb      	ldrb	r3, [r7, #3]
 80078be:	f003 020f 	and.w	r2, r3, #15
 80078c2:	6879      	ldr	r1, [r7, #4]
 80078c4:	4613      	mov	r3, r2
 80078c6:	00db      	lsls	r3, r3, #3
 80078c8:	4413      	add	r3, r2
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	440b      	add	r3, r1
 80078ce:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 80078d2:	681b      	ldr	r3, [r3, #0]
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <HAL_PCD_EP_Transmit>:
 * @param  ep_addr endpoint address
 * @param  pBuf pointer to the transmission buffer
 * @param  len amount of data to be sent
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef * hpcd, uint8_t ep_addr, uint8_t * pBuf, uint32_t len) {
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	607a      	str	r2, [r7, #4]
 80078ea:	603b      	str	r3, [r7, #0]
 80078ec:	460b      	mov	r3, r1
 80078ee:	72fb      	strb	r3, [r7, #11]
    PCD_EPTypeDef * ep;

    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80078f0:	7afb      	ldrb	r3, [r7, #11]
 80078f2:	f003 020f 	and.w	r2, r3, #15
 80078f6:	4613      	mov	r3, r2
 80078f8:	00db      	lsls	r3, r3, #3
 80078fa:	4413      	add	r3, r2
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	3338      	adds	r3, #56	@ 0x38
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	4413      	add	r3, r2
 8007904:	3304      	adds	r3, #4
 8007906:	617b      	str	r3, [r7, #20]

    /*setup and start the Xfer */
    ep->xfer_buff = pBuf;
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	611a      	str	r2, [r3, #16]
    ep->xfer_len = len;
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	683a      	ldr	r2, [r7, #0]
 8007912:	619a      	str	r2, [r3, #24]
    ep->xfer_count = 0U;
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	2200      	movs	r2, #0
 8007918:	621a      	str	r2, [r3, #32]
    ep->is_in = 1U;
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	2201      	movs	r2, #1
 800791e:	705a      	strb	r2, [r3, #1]
    ep->num = ep_addr & EP_ADDR_MSK;
 8007920:	7afb      	ldrb	r3, [r7, #11]
 8007922:	f003 030f 	and.w	r3, r3, #15
 8007926:	b2da      	uxtb	r2, r3
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	701a      	strb	r2, [r3, #0]

    if (hpcd->Init.dma_enable == 1U) {
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d102      	bne.n	800793a <HAL_PCD_EP_Transmit+0x5a>
        ep->dma_addr = (uint32_t)pBuf;
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	615a      	str	r2, [r3, #20]
    }

    if ((ep_addr & EP_ADDR_MSK) == 0U) {
 800793a:	7afb      	ldrb	r3, [r7, #11]
 800793c:	f003 030f 	and.w	r3, r3, #15
 8007940:	2b00      	cmp	r3, #0
 8007942:	d109      	bne.n	8007958 <HAL_PCD_EP_Transmit+0x78>
        (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6818      	ldr	r0, [r3, #0]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	b2db      	uxtb	r3, r3
 800794e:	461a      	mov	r2, r3
 8007950:	6979      	ldr	r1, [r7, #20]
 8007952:	f003 f835 	bl	800a9c0 <USB_EP0StartXfer>
 8007956:	e008      	b.n	800796a <HAL_PCD_EP_Transmit+0x8a>
    } else {
        (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6818      	ldr	r0, [r3, #0]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	b2db      	uxtb	r3, r3
 8007962:	461a      	mov	r2, r3
 8007964:	6979      	ldr	r1, [r7, #20]
 8007966:	f002 fde3 	bl	800a530 <USB_EPStartXfer>
    }

    return HAL_OK;
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	3718      	adds	r7, #24
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <HAL_PCD_EP_SetStall>:
 * @brief  Set a STALL condition over an endpoint
 * @param  hpcd PCD handle
 * @param  ep_addr endpoint address
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef * hpcd, uint8_t ep_addr) {
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	460b      	mov	r3, r1
 800797e:	70fb      	strb	r3, [r7, #3]
    PCD_EPTypeDef * ep;

    if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints) {
 8007980:	78fb      	ldrb	r3, [r7, #3]
 8007982:	f003 020f 	and.w	r2, r3, #15
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	429a      	cmp	r2, r3
 800798c:	d901      	bls.n	8007992 <HAL_PCD_EP_SetStall+0x1e>
        return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e050      	b.n	8007a34 <HAL_PCD_EP_SetStall+0xc0>
    }

    if ((0x80U & ep_addr) == 0x80U) {
 8007992:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007996:	2b00      	cmp	r3, #0
 8007998:	da0f      	bge.n	80079ba <HAL_PCD_EP_SetStall+0x46>
        ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800799a:	78fb      	ldrb	r3, [r7, #3]
 800799c:	f003 020f 	and.w	r2, r3, #15
 80079a0:	4613      	mov	r3, r2
 80079a2:	00db      	lsls	r3, r3, #3
 80079a4:	4413      	add	r3, r2
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	3338      	adds	r3, #56	@ 0x38
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	4413      	add	r3, r2
 80079ae:	3304      	adds	r3, #4
 80079b0:	60fb      	str	r3, [r7, #12]
        ep->is_in = 1U;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2201      	movs	r2, #1
 80079b6:	705a      	strb	r2, [r3, #1]
 80079b8:	e00d      	b.n	80079d6 <HAL_PCD_EP_SetStall+0x62>
    } else {
        ep = &hpcd->OUT_ep[ep_addr];
 80079ba:	78fa      	ldrb	r2, [r7, #3]
 80079bc:	4613      	mov	r3, r2
 80079be:	00db      	lsls	r3, r3, #3
 80079c0:	4413      	add	r3, r2
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	4413      	add	r3, r2
 80079cc:	3304      	adds	r3, #4
 80079ce:	60fb      	str	r3, [r7, #12]
        ep->is_in = 0U;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2200      	movs	r2, #0
 80079d4:	705a      	strb	r2, [r3, #1]
    }

    ep->is_stall = 1U;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2201      	movs	r2, #1
 80079da:	709a      	strb	r2, [r3, #2]
    ep->num = ep_addr & EP_ADDR_MSK;
 80079dc:	78fb      	ldrb	r3, [r7, #3]
 80079de:	f003 030f 	and.w	r3, r3, #15
 80079e2:	b2da      	uxtb	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	701a      	strb	r2, [r3, #0]

    __HAL_LOCK(hpcd);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d101      	bne.n	80079f6 <HAL_PCD_EP_SetStall+0x82>
 80079f2:	2302      	movs	r3, #2
 80079f4:	e01e      	b.n	8007a34 <HAL_PCD_EP_SetStall+0xc0>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    (void)USB_EPSetStall(hpcd->Instance, ep);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68f9      	ldr	r1, [r7, #12]
 8007a04:	4618      	mov	r0, r3
 8007a06:	f003 fa73 	bl	800aef0 <USB_EPSetStall>

    if ((ep_addr & EP_ADDR_MSK) == 0U) {
 8007a0a:	78fb      	ldrb	r3, [r7, #3]
 8007a0c:	f003 030f 	and.w	r3, r3, #15
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d10a      	bne.n	8007a2a <HAL_PCD_EP_SetStall+0xb6>
        (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6818      	ldr	r0, [r3, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	b2d9      	uxtb	r1, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007a24:	461a      	mov	r2, r3
 8007a26:	f003 fc63 	bl	800b2f0 <USB_EP0_OutStart>
    }

    __HAL_UNLOCK(hpcd);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    return HAL_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3710      	adds	r7, #16
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <HAL_PCD_EP_ClrStall>:
 * @brief  Clear a STALL condition over in an endpoint
 * @param  hpcd PCD handle
 * @param  ep_addr endpoint address
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef * hpcd, uint8_t ep_addr) {
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	460b      	mov	r3, r1
 8007a46:	70fb      	strb	r3, [r7, #3]
    PCD_EPTypeDef * ep;

    if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints) {
 8007a48:	78fb      	ldrb	r3, [r7, #3]
 8007a4a:	f003 020f 	and.w	r2, r3, #15
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d901      	bls.n	8007a5a <HAL_PCD_EP_ClrStall+0x1e>
        return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e042      	b.n	8007ae0 <HAL_PCD_EP_ClrStall+0xa4>
    }

    if ((0x80U & ep_addr) == 0x80U) {
 8007a5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	da0f      	bge.n	8007a82 <HAL_PCD_EP_ClrStall+0x46>
        ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a62:	78fb      	ldrb	r3, [r7, #3]
 8007a64:	f003 020f 	and.w	r2, r3, #15
 8007a68:	4613      	mov	r3, r2
 8007a6a:	00db      	lsls	r3, r3, #3
 8007a6c:	4413      	add	r3, r2
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	3338      	adds	r3, #56	@ 0x38
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	4413      	add	r3, r2
 8007a76:	3304      	adds	r3, #4
 8007a78:	60fb      	str	r3, [r7, #12]
        ep->is_in = 1U;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	705a      	strb	r2, [r3, #1]
 8007a80:	e00f      	b.n	8007aa2 <HAL_PCD_EP_ClrStall+0x66>
    } else {
        ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a82:	78fb      	ldrb	r3, [r7, #3]
 8007a84:	f003 020f 	and.w	r2, r3, #15
 8007a88:	4613      	mov	r3, r2
 8007a8a:	00db      	lsls	r3, r3, #3
 8007a8c:	4413      	add	r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	4413      	add	r3, r2
 8007a98:	3304      	adds	r3, #4
 8007a9a:	60fb      	str	r3, [r7, #12]
        ep->is_in = 0U;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	705a      	strb	r2, [r3, #1]
    }

    ep->is_stall = 0U;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	709a      	strb	r2, [r3, #2]
    ep->num = ep_addr & EP_ADDR_MSK;
 8007aa8:	78fb      	ldrb	r3, [r7, #3]
 8007aaa:	f003 030f 	and.w	r3, r3, #15
 8007aae:	b2da      	uxtb	r2, r3
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	701a      	strb	r2, [r3, #0]

    __HAL_LOCK(hpcd);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d101      	bne.n	8007ac2 <HAL_PCD_EP_ClrStall+0x86>
 8007abe:	2302      	movs	r3, #2
 8007ac0:	e00e      	b.n	8007ae0 <HAL_PCD_EP_ClrStall+0xa4>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    (void)USB_EPClearStall(hpcd->Instance, ep);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68f9      	ldr	r1, [r7, #12]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f003 fa7b 	bl	800afcc <USB_EPClearStall>
    __HAL_UNLOCK(hpcd);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    return HAL_OK;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3710      	adds	r7, #16
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <HAL_PCD_EP_Abort>:
 * @brief  Abort an USB EP transaction.
 * @param  hpcd PCD handle
 * @param  ep_addr endpoint address
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef * hpcd, uint8_t ep_addr) {
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	460b      	mov	r3, r1
 8007af2:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef ret;
    PCD_EPTypeDef * ep;

    if ((0x80U & ep_addr) == 0x80U) {
 8007af4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	da0c      	bge.n	8007b16 <HAL_PCD_EP_Abort+0x2e>
        ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007afc:	78fb      	ldrb	r3, [r7, #3]
 8007afe:	f003 020f 	and.w	r2, r3, #15
 8007b02:	4613      	mov	r3, r2
 8007b04:	00db      	lsls	r3, r3, #3
 8007b06:	4413      	add	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	3338      	adds	r3, #56	@ 0x38
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	4413      	add	r3, r2
 8007b10:	3304      	adds	r3, #4
 8007b12:	60fb      	str	r3, [r7, #12]
 8007b14:	e00c      	b.n	8007b30 <HAL_PCD_EP_Abort+0x48>
    } else {
        ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b16:	78fb      	ldrb	r3, [r7, #3]
 8007b18:	f003 020f 	and.w	r2, r3, #15
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	00db      	lsls	r3, r3, #3
 8007b20:	4413      	add	r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	3304      	adds	r3, #4
 8007b2e:	60fb      	str	r3, [r7, #12]
    }

    /* Stop Xfer */
    ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68f9      	ldr	r1, [r7, #12]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f003 f89a 	bl	800ac70 <USB_EPStopXfer>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	72fb      	strb	r3, [r7, #11]

    return ret;
 8007b40:	7afb      	ldrb	r3, [r7, #11]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <PCD_WriteEmptyTxFifo>:
 * @brief  Check FIFO for the next packet to be loaded.
 * @param  hpcd PCD handle
 * @param  epnum endpoint number
 * @retval HAL status
 */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef * hpcd, uint32_t epnum) {
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b08a      	sub	sp, #40	@ 0x28
 8007b4e:	af02      	add	r7, sp, #8
 8007b50:	6078      	str	r0, [r7, #4]
 8007b52:	6039      	str	r1, [r7, #0]
    USB_OTG_GlobalTypeDef * USBx = hpcd->Instance;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	617b      	str	r3, [r7, #20]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	613b      	str	r3, [r7, #16]
    USB_OTG_EPTypeDef * ep;
    uint32_t len;
    uint32_t len32b;
    uint32_t fifoemptymsk;

    ep = &hpcd->IN_ep[epnum];
 8007b5e:	683a      	ldr	r2, [r7, #0]
 8007b60:	4613      	mov	r3, r2
 8007b62:	00db      	lsls	r3, r3, #3
 8007b64:	4413      	add	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	3338      	adds	r3, #56	@ 0x38
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	3304      	adds	r3, #4
 8007b70:	60fb      	str	r3, [r7, #12]

    if (ep->xfer_count > ep->xfer_len) {
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6a1a      	ldr	r2, [r3, #32]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	699b      	ldr	r3, [r3, #24]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d901      	bls.n	8007b82 <PCD_WriteEmptyTxFifo+0x38>
        return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e06c      	b.n	8007c5c <PCD_WriteEmptyTxFifo+0x112>
    }

    len = ep->xfer_len - ep->xfer_count;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	699a      	ldr	r2, [r3, #24]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	1ad3      	subs	r3, r2, r3
 8007b8c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket) {
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	69fa      	ldr	r2, [r7, #28]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d902      	bls.n	8007b9e <PCD_WriteEmptyTxFifo+0x54>
        len = ep->maxpacket;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	61fb      	str	r3, [r7, #28]
    }

    len32b = (len + 3U) / 4U;
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	3303      	adds	r3, #3
 8007ba2:	089b      	lsrs	r3, r3, #2
 8007ba4:	61bb      	str	r3, [r7, #24]

    while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) && (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U)) {
 8007ba6:	e02b      	b.n	8007c00 <PCD_WriteEmptyTxFifo+0xb6>
        /* Write the FIFO */
        len = ep->xfer_len - ep->xfer_count;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	699a      	ldr	r2, [r3, #24]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6a1b      	ldr	r3, [r3, #32]
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	61fb      	str	r3, [r7, #28]

        if (len > ep->maxpacket) {
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	69fa      	ldr	r2, [r7, #28]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d902      	bls.n	8007bc4 <PCD_WriteEmptyTxFifo+0x7a>
            len = ep->maxpacket;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	61fb      	str	r3, [r7, #28]
        }
        len32b = (len + 3U) / 4U;
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	3303      	adds	r3, #3
 8007bc8:	089b      	lsrs	r3, r3, #2
 8007bca:	61bb      	str	r3, [r7, #24]

        (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len, (uint8_t)hpcd->Init.dma_enable);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6919      	ldr	r1, [r3, #16]
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	b2da      	uxtb	r2, r3
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	b298      	uxth	r0, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	4603      	mov	r3, r0
 8007be2:	6978      	ldr	r0, [r7, #20]
 8007be4:	f003 f8ee 	bl	800adc4 <USB_WritePacket>

        ep->xfer_buff += len;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	691a      	ldr	r2, [r3, #16]
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	441a      	add	r2, r3
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	611a      	str	r2, [r3, #16]
        ep->xfer_count += len;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6a1a      	ldr	r2, [r3, #32]
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	441a      	add	r2, r3
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	621a      	str	r2, [r3, #32]
    while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) && (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U)) {
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	015a      	lsls	r2, r3, #5
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	4413      	add	r3, r2
 8007c08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	69ba      	ldr	r2, [r7, #24]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d809      	bhi.n	8007c2a <PCD_WriteEmptyTxFifo+0xe0>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6a1a      	ldr	r2, [r3, #32]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	699b      	ldr	r3, [r3, #24]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d203      	bcs.n	8007c2a <PCD_WriteEmptyTxFifo+0xe0>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1be      	bne.n	8007ba8 <PCD_WriteEmptyTxFifo+0x5e>
    }

    if (ep->xfer_len <= ep->xfer_count) {
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	699a      	ldr	r2, [r3, #24]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d811      	bhi.n	8007c5a <PCD_WriteEmptyTxFifo+0x110>
        fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	f003 030f 	and.w	r3, r3, #15
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c42:	60bb      	str	r3, [r7, #8]
        USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	43db      	mvns	r3, r3
 8007c50:	6939      	ldr	r1, [r7, #16]
 8007c52:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c56:	4013      	ands	r3, r2
 8007c58:	634b      	str	r3, [r1, #52]	@ 0x34
    }

    return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3720      	adds	r7, #32
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <PCD_EP_OutXfrComplete_int>:
 * @brief  process EP OUT transfer complete interrupt.
 * @param  hpcd PCD handle
 * @param  epnum endpoint number
 * @retval HAL status
 */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef * hpcd, uint32_t epnum) {
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b088      	sub	sp, #32
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
    USB_OTG_EPTypeDef * ep;
    USB_OTG_GlobalTypeDef * USBx = hpcd->Instance;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	61fb      	str	r3, [r7, #28]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	61bb      	str	r3, [r7, #24]
    uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	333c      	adds	r3, #60	@ 0x3c
 8007c7c:	3304      	adds	r3, #4
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	617b      	str	r3, [r7, #20]
    uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	015a      	lsls	r2, r3, #5
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	4413      	add	r3, r2
 8007c8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	613b      	str	r3, [r7, #16]

    if (hpcd->Init.dma_enable == 1U) {
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d17b      	bne.n	8007d92 <PCD_EP_OutXfrComplete_int+0x12e>
        if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	f003 0308 	and.w	r3, r3, #8
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d015      	beq.n	8007cd0 <PCD_EP_OutXfrComplete_int+0x6c>
        {
            /* StupPktRcvd = 1 this is a setup packet */
            if ((gSNPSiD > USB_OTG_CORE_ID_300A) && ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)) {
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	4a61      	ldr	r2, [pc, #388]	@ (8007e2c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	f240 80b9 	bls.w	8007e20 <PCD_EP_OutXfrComplete_int+0x1bc>
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f000 80b3 	beq.w	8007e20 <PCD_EP_OutXfrComplete_int+0x1bc>
                CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	015a      	lsls	r2, r3, #5
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ccc:	6093      	str	r3, [r2, #8]
 8007cce:	e0a7      	b.n	8007e20 <PCD_EP_OutXfrComplete_int+0x1bc>
            }
        } else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	f003 0320 	and.w	r3, r3, #32
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d009      	beq.n	8007cee <PCD_EP_OutXfrComplete_int+0x8a>
        {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	015a      	lsls	r2, r3, #5
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	2320      	movs	r3, #32
 8007cea:	6093      	str	r3, [r2, #8]
 8007cec:	e098      	b.n	8007e20 <PCD_EP_OutXfrComplete_int+0x1bc>
        } else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U) {
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f040 8093 	bne.w	8007e20 <PCD_EP_OutXfrComplete_int+0x1bc>
            /* StupPktRcvd = 1 this is a setup packet */
            if ((gSNPSiD > USB_OTG_CORE_ID_300A) && ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)) {
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	4a4b      	ldr	r2, [pc, #300]	@ (8007e2c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d90f      	bls.n	8007d22 <PCD_EP_OutXfrComplete_int+0xbe>
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00a      	beq.n	8007d22 <PCD_EP_OutXfrComplete_int+0xbe>
                CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	015a      	lsls	r2, r3, #5
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	4413      	add	r3, r2
 8007d14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d18:	461a      	mov	r2, r3
 8007d1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d1e:	6093      	str	r3, [r2, #8]
 8007d20:	e07e      	b.n	8007e20 <PCD_EP_OutXfrComplete_int+0x1bc>
            } else {
                ep = &hpcd->OUT_ep[epnum];
 8007d22:	683a      	ldr	r2, [r7, #0]
 8007d24:	4613      	mov	r3, r2
 8007d26:	00db      	lsls	r3, r3, #3
 8007d28:	4413      	add	r3, r2
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	4413      	add	r3, r2
 8007d34:	3304      	adds	r3, #4
 8007d36:	60fb      	str	r3, [r7, #12]

                /* out data packet received over EP */
                ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	69da      	ldr	r2, [r3, #28]
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	0159      	lsls	r1, r3, #5
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	440b      	add	r3, r1
 8007d44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d4e:	1ad2      	subs	r2, r2, r3
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	621a      	str	r2, [r3, #32]

                if (epnum == 0U) {
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d114      	bne.n	8007d84 <PCD_EP_OutXfrComplete_int+0x120>
                    if (ep->xfer_len == 0U) {
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	699b      	ldr	r3, [r3, #24]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d109      	bne.n	8007d76 <PCD_EP_OutXfrComplete_int+0x112>
                        /* this is ZLP, so prepare EP0 for next setup */
                        (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6818      	ldr	r0, [r3, #0]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	2101      	movs	r1, #1
 8007d70:	f003 fabe 	bl	800b2f0 <USB_EP0_OutStart>
 8007d74:	e006      	b.n	8007d84 <PCD_EP_OutXfrComplete_int+0x120>
                    } else {
                        ep->xfer_buff += ep->xfer_count;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	691a      	ldr	r2, [r3, #16]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	441a      	add	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	611a      	str	r2, [r3, #16]
                }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
                HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	4619      	mov	r1, r3
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f008 f9be 	bl	801010c <HAL_PCD_DataOutStageCallback>
 8007d90:	e046      	b.n	8007e20 <PCD_EP_OutXfrComplete_int+0x1bc>
            }
        } else {
            /* ... */
        }
    } else {
        if (gSNPSiD == USB_OTG_CORE_ID_310A) {
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	4a26      	ldr	r2, [pc, #152]	@ (8007e30 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d124      	bne.n	8007de4 <PCD_EP_OutXfrComplete_int+0x180>
            /* StupPktRcvd = 1 this is a setup packet */
            if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX) {
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00a      	beq.n	8007dba <PCD_EP_OutXfrComplete_int+0x156>
                CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	015a      	lsls	r2, r3, #5
 8007da8:	69bb      	ldr	r3, [r7, #24]
 8007daa:	4413      	add	r3, r2
 8007dac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007db0:	461a      	mov	r2, r3
 8007db2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007db6:	6093      	str	r3, [r2, #8]
 8007db8:	e032      	b.n	8007e20 <PCD_EP_OutXfrComplete_int+0x1bc>
            } else {
                if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) {
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	f003 0320 	and.w	r3, r3, #32
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d008      	beq.n	8007dd6 <PCD_EP_OutXfrComplete_int+0x172>
                    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	015a      	lsls	r2, r3, #5
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	4413      	add	r3, r2
 8007dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	2320      	movs	r3, #32
 8007dd4:	6093      	str	r3, [r2, #8]
                }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
                hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
                HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	4619      	mov	r1, r3
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f008 f995 	bl	801010c <HAL_PCD_DataOutStageCallback>
 8007de2:	e01d      	b.n	8007e20 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
        } else {
            if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U)) {
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d114      	bne.n	8007e14 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007dea:	6879      	ldr	r1, [r7, #4]
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	4613      	mov	r3, r2
 8007df0:	00db      	lsls	r3, r3, #3
 8007df2:	4413      	add	r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	440b      	add	r3, r1
 8007df8:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d108      	bne.n	8007e14 <PCD_EP_OutXfrComplete_int+0x1b0>
                /* this is ZLP, so prepare EP0 for next setup */
                (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6818      	ldr	r0, [r3, #0]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	2100      	movs	r1, #0
 8007e10:	f003 fa6e 	bl	800b2f0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	4619      	mov	r1, r3
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f008 f976 	bl	801010c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
    }

    return HAL_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3720      	adds	r7, #32
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	4f54300a 	.word	0x4f54300a
 8007e30:	4f54310a 	.word	0x4f54310a

08007e34 <PCD_EP_OutSetupPacket_int>:
 * @brief  process EP OUT setup packet received interrupt.
 * @param  hpcd PCD handle
 * @param  epnum endpoint number
 * @retval HAL status
 */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef * hpcd, uint32_t epnum) {
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b086      	sub	sp, #24
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
    USB_OTG_GlobalTypeDef * USBx = hpcd->Instance;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	617b      	str	r3, [r7, #20]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	613b      	str	r3, [r7, #16]
    uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	333c      	adds	r3, #60	@ 0x3c
 8007e4c:	3304      	adds	r3, #4
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	60fb      	str	r3, [r7, #12]
    uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	015a      	lsls	r2, r3, #5
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	4413      	add	r3, r2
 8007e5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	60bb      	str	r3, [r7, #8]

    if ((gSNPSiD > USB_OTG_CORE_ID_300A) && ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)) {
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	4a15      	ldr	r2, [pc, #84]	@ (8007ebc <PCD_EP_OutSetupPacket_int+0x88>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d90e      	bls.n	8007e88 <PCD_EP_OutSetupPacket_int+0x54>
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d009      	beq.n	8007e88 <PCD_EP_OutSetupPacket_int+0x54>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	015a      	lsls	r2, r3, #5
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e80:	461a      	mov	r2, r3
 8007e82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e86:	6093      	str	r3, [r2, #8]

    /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SetupStageCallback(hpcd);
#else
    HAL_PCD_SetupStageCallback(hpcd);
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f008 f92d 	bl	80100e8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U)) {
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	4a0a      	ldr	r2, [pc, #40]	@ (8007ebc <PCD_EP_OutSetupPacket_int+0x88>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d90c      	bls.n	8007eb0 <PCD_EP_OutSetupPacket_int+0x7c>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d108      	bne.n	8007eb0 <PCD_EP_OutSetupPacket_int+0x7c>
        (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6818      	ldr	r0, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	2101      	movs	r1, #1
 8007eac:	f003 fa20 	bl	800b2f0 <USB_EP0_OutStart>
    }

    return HAL_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3718      	adds	r7, #24
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	4f54300a 	.word	0x4f54300a

08007ec0 <HAL_PCDEx_SetTxFiFo>:
 * @param  hpcd PCD handle
 * @param  fifo The number of Tx fifo
 * @param  size Fifo size
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef * hpcd, uint8_t fifo, uint16_t size) {
 8007ec0:	b480      	push	{r7}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	70fb      	strb	r3, [r7, #3]
 8007ecc:	4613      	mov	r3, r2
 8007ece:	803b      	strh	r3, [r7, #0]
           --> Txn should be configured with the minimum space of 16 words
       The FIFO is used optimally when used TxFIFOs are allocated in the top
           of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
       When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

    Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed6:	60bb      	str	r3, [r7, #8]

    if (fifo == 0U) {
 8007ed8:	78fb      	ldrb	r3, [r7, #3]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d107      	bne.n	8007eee <HAL_PCDEx_SetTxFiFo+0x2e>
        hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007ede:	883b      	ldrh	r3, [r7, #0]
 8007ee0:	0419      	lsls	r1, r3, #16
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68ba      	ldr	r2, [r7, #8]
 8007ee8:	430a      	orrs	r2, r1
 8007eea:	629a      	str	r2, [r3, #40]	@ 0x28
 8007eec:	e028      	b.n	8007f40 <HAL_PCDEx_SetTxFiFo+0x80>
    } else {
        Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ef4:	0c1b      	lsrs	r3, r3, #16
 8007ef6:	68ba      	ldr	r2, [r7, #8]
 8007ef8:	4413      	add	r3, r2
 8007efa:	60bb      	str	r3, [r7, #8]
        for (i = 0U; i < (fifo - 1U); i++) {
 8007efc:	2300      	movs	r3, #0
 8007efe:	73fb      	strb	r3, [r7, #15]
 8007f00:	e00d      	b.n	8007f1e <HAL_PCDEx_SetTxFiFo+0x5e>
            Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	7bfb      	ldrb	r3, [r7, #15]
 8007f08:	3340      	adds	r3, #64	@ 0x40
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	4413      	add	r3, r2
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	0c1b      	lsrs	r3, r3, #16
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	4413      	add	r3, r2
 8007f16:	60bb      	str	r3, [r7, #8]
        for (i = 0U; i < (fifo - 1U); i++) {
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	73fb      	strb	r3, [r7, #15]
 8007f1e:	7bfa      	ldrb	r2, [r7, #15]
 8007f20:	78fb      	ldrb	r3, [r7, #3]
 8007f22:	3b01      	subs	r3, #1
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d3ec      	bcc.n	8007f02 <HAL_PCDEx_SetTxFiFo+0x42>
        }

        /* Multiply Tx_Size by 2 to get higher performance */
        hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007f28:	883b      	ldrh	r3, [r7, #0]
 8007f2a:	0418      	lsls	r0, r3, #16
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6819      	ldr	r1, [r3, #0]
 8007f30:	78fb      	ldrb	r3, [r7, #3]
 8007f32:	3b01      	subs	r3, #1
 8007f34:	68ba      	ldr	r2, [r7, #8]
 8007f36:	4302      	orrs	r2, r0
 8007f38:	3340      	adds	r3, #64	@ 0x40
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	440b      	add	r3, r1
 8007f3e:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3714      	adds	r7, #20
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr

08007f4e <HAL_PCDEx_SetRxFiFo>:
 * @brief  Set Rx FIFO
 * @param  hpcd PCD handle
 * @param  size Size of Rx fifo
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef * hpcd, uint16_t size) {
 8007f4e:	b480      	push	{r7}
 8007f50:	b083      	sub	sp, #12
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	460b      	mov	r3, r1
 8007f58:	807b      	strh	r3, [r7, #2]
    hpcd->Instance->GRXFSIZ = size;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	887a      	ldrh	r2, [r7, #2]
 8007f60:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <HAL_PCDEx_LPM_Callback>:
 * @brief  Send LPM message to user layer callback.
 * @param  hpcd PCD handle
 * @param  msg LPM message
 * @retval HAL status
 */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef * hpcd, PCD_LPM_MsgTypeDef msg) {
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	460b      	mov	r3, r1
 8007f7a:	70fb      	strb	r3, [r7, #3]
    UNUSED(msg);

    /* NOTE : This function should not be modified, when the callback is needed,
              the HAL_PCDEx_LPM_Callback could be implemented in the user file
     */
}
 8007f7c:	bf00      	nop
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <HAL_RCC_OscConfig>:
 * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 *         supported by this API. User should request a transition to HSE Off
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef * RCC_OscInitStruct) {
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b086      	sub	sp, #24
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
    uint32_t tickstart, pll_config;

    /* Check Null pointer */
    if (RCC_OscInitStruct == NULL) {
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d101      	bne.n	8007f9a <HAL_RCC_OscConfig+0x12>
        return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e267      	b.n	800846a <HAL_RCC_OscConfig+0x4e2>
    }

    /* Check the parameters */
    assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
    /*------------------------------- HSE Configuration ------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE) {
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 0301 	and.w	r3, r3, #1
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d075      	beq.n	8008092 <HAL_RCC_OscConfig+0x10a>
        /* Check the parameters */
        assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
        if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE))) {
 8007fa6:	4b88      	ldr	r3, [pc, #544]	@ (80081c8 <HAL_RCC_OscConfig+0x240>)
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	f003 030c 	and.w	r3, r3, #12
 8007fae:	2b04      	cmp	r3, #4
 8007fb0:	d00c      	beq.n	8007fcc <HAL_RCC_OscConfig+0x44>
 8007fb2:	4b85      	ldr	r3, [pc, #532]	@ (80081c8 <HAL_RCC_OscConfig+0x240>)
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	f003 030c 	and.w	r3, r3, #12
 8007fba:	2b08      	cmp	r3, #8
 8007fbc:	d112      	bne.n	8007fe4 <HAL_RCC_OscConfig+0x5c>
 8007fbe:	4b82      	ldr	r3, [pc, #520]	@ (80081c8 <HAL_RCC_OscConfig+0x240>)
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007fc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007fca:	d10b      	bne.n	8007fe4 <HAL_RCC_OscConfig+0x5c>
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8007fcc:	4b7e      	ldr	r3, [pc, #504]	@ (80081c8 <HAL_RCC_OscConfig+0x240>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d05b      	beq.n	8008090 <HAL_RCC_OscConfig+0x108>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d157      	bne.n	8008090 <HAL_RCC_OscConfig+0x108>
                return HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e242      	b.n	800846a <HAL_RCC_OscConfig+0x4e2>
            }
        } else {
            /* Set the new HSE configuration ---------------------------------------*/
            __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fec:	d106      	bne.n	8007ffc <HAL_RCC_OscConfig+0x74>
 8007fee:	4b76      	ldr	r3, [pc, #472]	@ (80081c8 <HAL_RCC_OscConfig+0x240>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a75      	ldr	r2, [pc, #468]	@ (80081c8 <HAL_RCC_OscConfig+0x240>)
 8007ff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ff8:	6013      	str	r3, [r2, #0]
 8007ffa:	e01d      	b.n	8008038 <HAL_RCC_OscConfig+0xb0>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008004:	d10c      	bne.n	8008020 <HAL_RCC_OscConfig+0x98>
 8008006:	4b70      	ldr	r3, [pc, #448]	@ (80081c8 <HAL_RCC_OscConfig+0x240>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a6f      	ldr	r2, [pc, #444]	@ (80081c8 <HAL_RCC_OscConfig+0x240>)
 800800c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008010:	6013      	str	r3, [r2, #0]
 8008012:	4b6d      	ldr	r3, [pc, #436]	@ (80081c8 <HAL_RCC_OscConfig+0x240>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a6c      	ldr	r2, [pc, #432]	@ (80081c8 <HAL_RCC_OscConfig+0x240>)
 8008018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800801c:	6013      	str	r3, [r2, #0]
 800801e:	e00b      	b.n	8008038 <HAL_RCC_OscConfig+0xb0>
 8008020:	4b69      	ldr	r3, [pc, #420]	@ (80081c8 <HAL_RCC_OscConfig+0x240>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a68      	ldr	r2, [pc, #416]	@ (80081c8 <HAL_RCC_OscConfig+0x240>)
 8008026:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800802a:	6013      	str	r3, [r2, #0]
 800802c:	4b66      	ldr	r3, [pc, #408]	@ (80081c8 <HAL_RCC_OscConfig+0x240>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a65      	ldr	r2, [pc, #404]	@ (80081c8 <HAL_RCC_OscConfig+0x240>)
 8008032:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008036:	6013      	str	r3, [r2, #0]

            /* Check the HSE State */
            if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF) {
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d013      	beq.n	8008068 <HAL_RCC_OscConfig+0xe0>
                /* Get Start Tick */
                tickstart = HAL_GetTick();
 8008040:	f7fc fcc0 	bl	80049c4 <HAL_GetTick>
 8008044:	6138      	str	r0, [r7, #16]

                /* Wait till HSE is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8008046:	e008      	b.n	800805a <HAL_RCC_OscConfig+0xd2>
                    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8008048:	f7fc fcbc 	bl	80049c4 <HAL_GetTick>
 800804c:	4602      	mov	r2, r0
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	1ad3      	subs	r3, r2, r3
 8008052:	2b64      	cmp	r3, #100	@ 0x64
 8008054:	d901      	bls.n	800805a <HAL_RCC_OscConfig+0xd2>
                        return HAL_TIMEOUT;
 8008056:	2303      	movs	r3, #3
 8008058:	e207      	b.n	800846a <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 800805a:	4b5b      	ldr	r3, [pc, #364]	@ (80081c8 <HAL_RCC_OscConfig+0x240>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008062:	2b00      	cmp	r3, #0
 8008064:	d0f0      	beq.n	8008048 <HAL_RCC_OscConfig+0xc0>
 8008066:	e014      	b.n	8008092 <HAL_RCC_OscConfig+0x10a>
                    }
                }
            } else {
                /* Get Start Tick */
                tickstart = HAL_GetTick();
 8008068:	f7fc fcac 	bl	80049c4 <HAL_GetTick>
 800806c:	6138      	str	r0, [r7, #16]

                /* Wait till HSE is bypassed or disabled */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 800806e:	e008      	b.n	8008082 <HAL_RCC_OscConfig+0xfa>
                    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8008070:	f7fc fca8 	bl	80049c4 <HAL_GetTick>
 8008074:	4602      	mov	r2, r0
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	1ad3      	subs	r3, r2, r3
 800807a:	2b64      	cmp	r3, #100	@ 0x64
 800807c:	d901      	bls.n	8008082 <HAL_RCC_OscConfig+0xfa>
                        return HAL_TIMEOUT;
 800807e:	2303      	movs	r3, #3
 8008080:	e1f3      	b.n	800846a <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8008082:	4b51      	ldr	r3, [pc, #324]	@ (80081c8 <HAL_RCC_OscConfig+0x240>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1f0      	bne.n	8008070 <HAL_RCC_OscConfig+0xe8>
 800808e:	e000      	b.n	8008092 <HAL_RCC_OscConfig+0x10a>
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8008090:	bf00      	nop
                }
            }
        }
    }
    /*----------------------------- HSI Configuration --------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI) {
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 0302 	and.w	r3, r3, #2
 800809a:	2b00      	cmp	r3, #0
 800809c:	d063      	beq.n	8008166 <HAL_RCC_OscConfig+0x1de>
        /* Check the parameters */
        assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
        assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

        /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
        if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI))) {
 800809e:	4b4a      	ldr	r3, [pc, #296]	@ (80081c8 <HAL_RCC_OscConfig+0x240>)
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f003 030c 	and.w	r3, r3, #12
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00b      	beq.n	80080c2 <HAL_RCC_OscConfig+0x13a>
 80080aa:	4b47      	ldr	r3, [pc, #284]	@ (80081c8 <HAL_RCC_OscConfig+0x240>)
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	f003 030c 	and.w	r3, r3, #12
 80080b2:	2b08      	cmp	r3, #8
 80080b4:	d11c      	bne.n	80080f0 <HAL_RCC_OscConfig+0x168>
 80080b6:	4b44      	ldr	r3, [pc, #272]	@ (80081c8 <HAL_RCC_OscConfig+0x240>)
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d116      	bne.n	80080f0 <HAL_RCC_OscConfig+0x168>
            /* When HSI is used as system clock it will not disabled */
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 80080c2:	4b41      	ldr	r3, [pc, #260]	@ (80081c8 <HAL_RCC_OscConfig+0x240>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 0302 	and.w	r3, r3, #2
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d005      	beq.n	80080da <HAL_RCC_OscConfig+0x152>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d001      	beq.n	80080da <HAL_RCC_OscConfig+0x152>
                return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	e1c7      	b.n	800846a <HAL_RCC_OscConfig+0x4e2>
            }
            /* Otherwise, just the calibration is allowed */
            else {
                /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
                __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080da:	4b3b      	ldr	r3, [pc, #236]	@ (80081c8 <HAL_RCC_OscConfig+0x240>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	00db      	lsls	r3, r3, #3
 80080e8:	4937      	ldr	r1, [pc, #220]	@ (80081c8 <HAL_RCC_OscConfig+0x240>)
 80080ea:	4313      	orrs	r3, r2
 80080ec:	600b      	str	r3, [r1, #0]
            if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 80080ee:	e03a      	b.n	8008166 <HAL_RCC_OscConfig+0x1de>
            }
        } else {
            /* Check the HSI State */
            if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d020      	beq.n	800813a <HAL_RCC_OscConfig+0x1b2>
                /* Enable the Internal High Speed oscillator (HSI). */
                __HAL_RCC_HSI_ENABLE();
 80080f8:	4b34      	ldr	r3, [pc, #208]	@ (80081cc <HAL_RCC_OscConfig+0x244>)
 80080fa:	2201      	movs	r2, #1
 80080fc:	601a      	str	r2, [r3, #0]

                /* Get Start Tick*/
                tickstart = HAL_GetTick();
 80080fe:	f7fc fc61 	bl	80049c4 <HAL_GetTick>
 8008102:	6138      	str	r0, [r7, #16]

                /* Wait till HSI is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8008104:	e008      	b.n	8008118 <HAL_RCC_OscConfig+0x190>
                    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8008106:	f7fc fc5d 	bl	80049c4 <HAL_GetTick>
 800810a:	4602      	mov	r2, r0
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	1ad3      	subs	r3, r2, r3
 8008110:	2b02      	cmp	r3, #2
 8008112:	d901      	bls.n	8008118 <HAL_RCC_OscConfig+0x190>
                        return HAL_TIMEOUT;
 8008114:	2303      	movs	r3, #3
 8008116:	e1a8      	b.n	800846a <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8008118:	4b2b      	ldr	r3, [pc, #172]	@ (80081c8 <HAL_RCC_OscConfig+0x240>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f003 0302 	and.w	r3, r3, #2
 8008120:	2b00      	cmp	r3, #0
 8008122:	d0f0      	beq.n	8008106 <HAL_RCC_OscConfig+0x17e>
                    }
                }

                /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
                __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008124:	4b28      	ldr	r3, [pc, #160]	@ (80081c8 <HAL_RCC_OscConfig+0x240>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	00db      	lsls	r3, r3, #3
 8008132:	4925      	ldr	r1, [pc, #148]	@ (80081c8 <HAL_RCC_OscConfig+0x240>)
 8008134:	4313      	orrs	r3, r2
 8008136:	600b      	str	r3, [r1, #0]
 8008138:	e015      	b.n	8008166 <HAL_RCC_OscConfig+0x1de>
            } else {
                /* Disable the Internal High Speed oscillator (HSI). */
                __HAL_RCC_HSI_DISABLE();
 800813a:	4b24      	ldr	r3, [pc, #144]	@ (80081cc <HAL_RCC_OscConfig+0x244>)
 800813c:	2200      	movs	r2, #0
 800813e:	601a      	str	r2, [r3, #0]

                /* Get Start Tick*/
                tickstart = HAL_GetTick();
 8008140:	f7fc fc40 	bl	80049c4 <HAL_GetTick>
 8008144:	6138      	str	r0, [r7, #16]

                /* Wait till HSI is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8008146:	e008      	b.n	800815a <HAL_RCC_OscConfig+0x1d2>
                    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8008148:	f7fc fc3c 	bl	80049c4 <HAL_GetTick>
 800814c:	4602      	mov	r2, r0
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	1ad3      	subs	r3, r2, r3
 8008152:	2b02      	cmp	r3, #2
 8008154:	d901      	bls.n	800815a <HAL_RCC_OscConfig+0x1d2>
                        return HAL_TIMEOUT;
 8008156:	2303      	movs	r3, #3
 8008158:	e187      	b.n	800846a <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 800815a:	4b1b      	ldr	r3, [pc, #108]	@ (80081c8 <HAL_RCC_OscConfig+0x240>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f003 0302 	and.w	r3, r3, #2
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1f0      	bne.n	8008148 <HAL_RCC_OscConfig+0x1c0>
                }
            }
        }
    }
    /*------------------------------ LSI Configuration -------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI) {
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 0308 	and.w	r3, r3, #8
 800816e:	2b00      	cmp	r3, #0
 8008170:	d036      	beq.n	80081e0 <HAL_RCC_OscConfig+0x258>
        /* Check the parameters */
        assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

        /* Check the LSI State */
        if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	695b      	ldr	r3, [r3, #20]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d016      	beq.n	80081a8 <HAL_RCC_OscConfig+0x220>
            /* Enable the Internal Low Speed oscillator (LSI). */
            __HAL_RCC_LSI_ENABLE();
 800817a:	4b15      	ldr	r3, [pc, #84]	@ (80081d0 <HAL_RCC_OscConfig+0x248>)
 800817c:	2201      	movs	r2, #1
 800817e:	601a      	str	r2, [r3, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008180:	f7fc fc20 	bl	80049c4 <HAL_GetTick>
 8008184:	6138      	str	r0, [r7, #16]

            /* Wait till LSI is ready */
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8008186:	e008      	b.n	800819a <HAL_RCC_OscConfig+0x212>
                if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8008188:	f7fc fc1c 	bl	80049c4 <HAL_GetTick>
 800818c:	4602      	mov	r2, r0
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	2b02      	cmp	r3, #2
 8008194:	d901      	bls.n	800819a <HAL_RCC_OscConfig+0x212>
                    return HAL_TIMEOUT;
 8008196:	2303      	movs	r3, #3
 8008198:	e167      	b.n	800846a <HAL_RCC_OscConfig+0x4e2>
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 800819a:	4b0b      	ldr	r3, [pc, #44]	@ (80081c8 <HAL_RCC_OscConfig+0x240>)
 800819c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800819e:	f003 0302 	and.w	r3, r3, #2
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d0f0      	beq.n	8008188 <HAL_RCC_OscConfig+0x200>
 80081a6:	e01b      	b.n	80081e0 <HAL_RCC_OscConfig+0x258>
                }
            }
        } else {
            /* Disable the Internal Low Speed oscillator (LSI). */
            __HAL_RCC_LSI_DISABLE();
 80081a8:	4b09      	ldr	r3, [pc, #36]	@ (80081d0 <HAL_RCC_OscConfig+0x248>)
 80081aa:	2200      	movs	r2, #0
 80081ac:	601a      	str	r2, [r3, #0]

            /* Get Start Tick */
            tickstart = HAL_GetTick();
 80081ae:	f7fc fc09 	bl	80049c4 <HAL_GetTick>
 80081b2:	6138      	str	r0, [r7, #16]

            /* Wait till LSI is ready */
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 80081b4:	e00e      	b.n	80081d4 <HAL_RCC_OscConfig+0x24c>
                if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 80081b6:	f7fc fc05 	bl	80049c4 <HAL_GetTick>
 80081ba:	4602      	mov	r2, r0
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	d907      	bls.n	80081d4 <HAL_RCC_OscConfig+0x24c>
                    return HAL_TIMEOUT;
 80081c4:	2303      	movs	r3, #3
 80081c6:	e150      	b.n	800846a <HAL_RCC_OscConfig+0x4e2>
 80081c8:	40023800 	.word	0x40023800
 80081cc:	42470000 	.word	0x42470000
 80081d0:	42470e80 	.word	0x42470e80
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 80081d4:	4b88      	ldr	r3, [pc, #544]	@ (80083f8 <HAL_RCC_OscConfig+0x470>)
 80081d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081d8:	f003 0302 	and.w	r3, r3, #2
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d1ea      	bne.n	80081b6 <HAL_RCC_OscConfig+0x22e>
                }
            }
        }
    }
    /*------------------------------ LSE Configuration -------------------------*/
    if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE) {
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0304 	and.w	r3, r3, #4
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f000 8097 	beq.w	800831c <HAL_RCC_OscConfig+0x394>
        FlagStatus pwrclkchanged = RESET;
 80081ee:	2300      	movs	r3, #0
 80081f0:	75fb      	strb	r3, [r7, #23]
        /* Check the parameters */
        assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

        /* Update LSE configuration in Backup Domain control register    */
        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 80081f2:	4b81      	ldr	r3, [pc, #516]	@ (80083f8 <HAL_RCC_OscConfig+0x470>)
 80081f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d10f      	bne.n	800821e <HAL_RCC_OscConfig+0x296>
            __HAL_RCC_PWR_CLK_ENABLE();
 80081fe:	2300      	movs	r3, #0
 8008200:	60bb      	str	r3, [r7, #8]
 8008202:	4b7d      	ldr	r3, [pc, #500]	@ (80083f8 <HAL_RCC_OscConfig+0x470>)
 8008204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008206:	4a7c      	ldr	r2, [pc, #496]	@ (80083f8 <HAL_RCC_OscConfig+0x470>)
 8008208:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800820c:	6413      	str	r3, [r2, #64]	@ 0x40
 800820e:	4b7a      	ldr	r3, [pc, #488]	@ (80083f8 <HAL_RCC_OscConfig+0x470>)
 8008210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008216:	60bb      	str	r3, [r7, #8]
 8008218:	68bb      	ldr	r3, [r7, #8]
            pwrclkchanged = SET;
 800821a:	2301      	movs	r3, #1
 800821c:	75fb      	strb	r3, [r7, #23]
        }

        if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 800821e:	4b77      	ldr	r3, [pc, #476]	@ (80083fc <HAL_RCC_OscConfig+0x474>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008226:	2b00      	cmp	r3, #0
 8008228:	d118      	bne.n	800825c <HAL_RCC_OscConfig+0x2d4>
            /* Enable write access to Backup domain */
            SET_BIT(PWR->CR, PWR_CR_DBP);
 800822a:	4b74      	ldr	r3, [pc, #464]	@ (80083fc <HAL_RCC_OscConfig+0x474>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a73      	ldr	r2, [pc, #460]	@ (80083fc <HAL_RCC_OscConfig+0x474>)
 8008230:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008234:	6013      	str	r3, [r2, #0]

            /* Wait for Backup domain Write protection disable */
            tickstart = HAL_GetTick();
 8008236:	f7fc fbc5 	bl	80049c4 <HAL_GetTick>
 800823a:	6138      	str	r0, [r7, #16]

            while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 800823c:	e008      	b.n	8008250 <HAL_RCC_OscConfig+0x2c8>
                if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 800823e:	f7fc fbc1 	bl	80049c4 <HAL_GetTick>
 8008242:	4602      	mov	r2, r0
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	1ad3      	subs	r3, r2, r3
 8008248:	2b02      	cmp	r3, #2
 800824a:	d901      	bls.n	8008250 <HAL_RCC_OscConfig+0x2c8>
                    return HAL_TIMEOUT;
 800824c:	2303      	movs	r3, #3
 800824e:	e10c      	b.n	800846a <HAL_RCC_OscConfig+0x4e2>
            while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8008250:	4b6a      	ldr	r3, [pc, #424]	@ (80083fc <HAL_RCC_OscConfig+0x474>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008258:	2b00      	cmp	r3, #0
 800825a:	d0f0      	beq.n	800823e <HAL_RCC_OscConfig+0x2b6>
                }
            }
        }

        /* Set the new LSE configuration -----------------------------------------*/
        __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d106      	bne.n	8008272 <HAL_RCC_OscConfig+0x2ea>
 8008264:	4b64      	ldr	r3, [pc, #400]	@ (80083f8 <HAL_RCC_OscConfig+0x470>)
 8008266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008268:	4a63      	ldr	r2, [pc, #396]	@ (80083f8 <HAL_RCC_OscConfig+0x470>)
 800826a:	f043 0301 	orr.w	r3, r3, #1
 800826e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008270:	e01c      	b.n	80082ac <HAL_RCC_OscConfig+0x324>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	2b05      	cmp	r3, #5
 8008278:	d10c      	bne.n	8008294 <HAL_RCC_OscConfig+0x30c>
 800827a:	4b5f      	ldr	r3, [pc, #380]	@ (80083f8 <HAL_RCC_OscConfig+0x470>)
 800827c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800827e:	4a5e      	ldr	r2, [pc, #376]	@ (80083f8 <HAL_RCC_OscConfig+0x470>)
 8008280:	f043 0304 	orr.w	r3, r3, #4
 8008284:	6713      	str	r3, [r2, #112]	@ 0x70
 8008286:	4b5c      	ldr	r3, [pc, #368]	@ (80083f8 <HAL_RCC_OscConfig+0x470>)
 8008288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800828a:	4a5b      	ldr	r2, [pc, #364]	@ (80083f8 <HAL_RCC_OscConfig+0x470>)
 800828c:	f043 0301 	orr.w	r3, r3, #1
 8008290:	6713      	str	r3, [r2, #112]	@ 0x70
 8008292:	e00b      	b.n	80082ac <HAL_RCC_OscConfig+0x324>
 8008294:	4b58      	ldr	r3, [pc, #352]	@ (80083f8 <HAL_RCC_OscConfig+0x470>)
 8008296:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008298:	4a57      	ldr	r2, [pc, #348]	@ (80083f8 <HAL_RCC_OscConfig+0x470>)
 800829a:	f023 0301 	bic.w	r3, r3, #1
 800829e:	6713      	str	r3, [r2, #112]	@ 0x70
 80082a0:	4b55      	ldr	r3, [pc, #340]	@ (80083f8 <HAL_RCC_OscConfig+0x470>)
 80082a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082a4:	4a54      	ldr	r2, [pc, #336]	@ (80083f8 <HAL_RCC_OscConfig+0x470>)
 80082a6:	f023 0304 	bic.w	r3, r3, #4
 80082aa:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Check the LSE State */
        if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d015      	beq.n	80082e0 <HAL_RCC_OscConfig+0x358>
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80082b4:	f7fc fb86 	bl	80049c4 <HAL_GetTick>
 80082b8:	6138      	str	r0, [r7, #16]

            /* Wait till LSE is ready */
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 80082ba:	e00a      	b.n	80082d2 <HAL_RCC_OscConfig+0x34a>
                if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80082bc:	f7fc fb82 	bl	80049c4 <HAL_GetTick>
 80082c0:	4602      	mov	r2, r0
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d901      	bls.n	80082d2 <HAL_RCC_OscConfig+0x34a>
                    return HAL_TIMEOUT;
 80082ce:	2303      	movs	r3, #3
 80082d0:	e0cb      	b.n	800846a <HAL_RCC_OscConfig+0x4e2>
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 80082d2:	4b49      	ldr	r3, [pc, #292]	@ (80083f8 <HAL_RCC_OscConfig+0x470>)
 80082d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082d6:	f003 0302 	and.w	r3, r3, #2
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d0ee      	beq.n	80082bc <HAL_RCC_OscConfig+0x334>
 80082de:	e014      	b.n	800830a <HAL_RCC_OscConfig+0x382>
                }
            }
        } else {
            /* Get Start Tick */
            tickstart = HAL_GetTick();
 80082e0:	f7fc fb70 	bl	80049c4 <HAL_GetTick>
 80082e4:	6138      	str	r0, [r7, #16]

            /* Wait till LSE is ready */
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 80082e6:	e00a      	b.n	80082fe <HAL_RCC_OscConfig+0x376>
                if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80082e8:	f7fc fb6c 	bl	80049c4 <HAL_GetTick>
 80082ec:	4602      	mov	r2, r0
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d901      	bls.n	80082fe <HAL_RCC_OscConfig+0x376>
                    return HAL_TIMEOUT;
 80082fa:	2303      	movs	r3, #3
 80082fc:	e0b5      	b.n	800846a <HAL_RCC_OscConfig+0x4e2>
            while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 80082fe:	4b3e      	ldr	r3, [pc, #248]	@ (80083f8 <HAL_RCC_OscConfig+0x470>)
 8008300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008302:	f003 0302 	and.w	r3, r3, #2
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1ee      	bne.n	80082e8 <HAL_RCC_OscConfig+0x360>
                }
            }
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET) {
 800830a:	7dfb      	ldrb	r3, [r7, #23]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d105      	bne.n	800831c <HAL_RCC_OscConfig+0x394>
            __HAL_RCC_PWR_CLK_DISABLE();
 8008310:	4b39      	ldr	r3, [pc, #228]	@ (80083f8 <HAL_RCC_OscConfig+0x470>)
 8008312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008314:	4a38      	ldr	r2, [pc, #224]	@ (80083f8 <HAL_RCC_OscConfig+0x470>)
 8008316:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800831a:	6413      	str	r3, [r2, #64]	@ 0x40
        }
    }
    /*-------------------------------- PLL Configuration -----------------------*/
    /* Check the parameters */
    assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
    if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	2b00      	cmp	r3, #0
 8008322:	f000 80a1 	beq.w	8008468 <HAL_RCC_OscConfig+0x4e0>
        /* Check if the PLL is used as system clock or not */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL) {
 8008326:	4b34      	ldr	r3, [pc, #208]	@ (80083f8 <HAL_RCC_OscConfig+0x470>)
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	f003 030c 	and.w	r3, r3, #12
 800832e:	2b08      	cmp	r3, #8
 8008330:	d05c      	beq.n	80083ec <HAL_RCC_OscConfig+0x464>
            if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	699b      	ldr	r3, [r3, #24]
 8008336:	2b02      	cmp	r3, #2
 8008338:	d141      	bne.n	80083be <HAL_RCC_OscConfig+0x436>
                assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
                assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
                assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

                /* Disable the main PLL. */
                __HAL_RCC_PLL_DISABLE();
 800833a:	4b31      	ldr	r3, [pc, #196]	@ (8008400 <HAL_RCC_OscConfig+0x478>)
 800833c:	2200      	movs	r2, #0
 800833e:	601a      	str	r2, [r3, #0]

                /* Get Start Tick */
                tickstart = HAL_GetTick();
 8008340:	f7fc fb40 	bl	80049c4 <HAL_GetTick>
 8008344:	6138      	str	r0, [r7, #16]

                /* Wait till PLL is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8008346:	e008      	b.n	800835a <HAL_RCC_OscConfig+0x3d2>
                    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8008348:	f7fc fb3c 	bl	80049c4 <HAL_GetTick>
 800834c:	4602      	mov	r2, r0
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	2b02      	cmp	r3, #2
 8008354:	d901      	bls.n	800835a <HAL_RCC_OscConfig+0x3d2>
                        return HAL_TIMEOUT;
 8008356:	2303      	movs	r3, #3
 8008358:	e087      	b.n	800846a <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 800835a:	4b27      	ldr	r3, [pc, #156]	@ (80083f8 <HAL_RCC_OscConfig+0x470>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008362:	2b00      	cmp	r3, #0
 8008364:	d1f0      	bne.n	8008348 <HAL_RCC_OscConfig+0x3c0>
                    }
                }

                /* Configure the main PLL clock source, multiplication and division factors. */
                WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource | RCC_OscInitStruct->PLL.PLLM | (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos) | (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	69da      	ldr	r2, [r3, #28]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a1b      	ldr	r3, [r3, #32]
 800836e:	431a      	orrs	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008374:	019b      	lsls	r3, r3, #6
 8008376:	431a      	orrs	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800837c:	085b      	lsrs	r3, r3, #1
 800837e:	3b01      	subs	r3, #1
 8008380:	041b      	lsls	r3, r3, #16
 8008382:	431a      	orrs	r2, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008388:	061b      	lsls	r3, r3, #24
 800838a:	491b      	ldr	r1, [pc, #108]	@ (80083f8 <HAL_RCC_OscConfig+0x470>)
 800838c:	4313      	orrs	r3, r2
 800838e:	604b      	str	r3, [r1, #4]
                                         (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
                /* Enable the main PLL. */
                __HAL_RCC_PLL_ENABLE();
 8008390:	4b1b      	ldr	r3, [pc, #108]	@ (8008400 <HAL_RCC_OscConfig+0x478>)
 8008392:	2201      	movs	r2, #1
 8008394:	601a      	str	r2, [r3, #0]

                /* Get Start Tick */
                tickstart = HAL_GetTick();
 8008396:	f7fc fb15 	bl	80049c4 <HAL_GetTick>
 800839a:	6138      	str	r0, [r7, #16]

                /* Wait till PLL is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 800839c:	e008      	b.n	80083b0 <HAL_RCC_OscConfig+0x428>
                    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 800839e:	f7fc fb11 	bl	80049c4 <HAL_GetTick>
 80083a2:	4602      	mov	r2, r0
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	2b02      	cmp	r3, #2
 80083aa:	d901      	bls.n	80083b0 <HAL_RCC_OscConfig+0x428>
                        return HAL_TIMEOUT;
 80083ac:	2303      	movs	r3, #3
 80083ae:	e05c      	b.n	800846a <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 80083b0:	4b11      	ldr	r3, [pc, #68]	@ (80083f8 <HAL_RCC_OscConfig+0x470>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d0f0      	beq.n	800839e <HAL_RCC_OscConfig+0x416>
 80083bc:	e054      	b.n	8008468 <HAL_RCC_OscConfig+0x4e0>
                    }
                }
            } else {
                /* Disable the main PLL. */
                __HAL_RCC_PLL_DISABLE();
 80083be:	4b10      	ldr	r3, [pc, #64]	@ (8008400 <HAL_RCC_OscConfig+0x478>)
 80083c0:	2200      	movs	r2, #0
 80083c2:	601a      	str	r2, [r3, #0]

                /* Get Start Tick */
                tickstart = HAL_GetTick();
 80083c4:	f7fc fafe 	bl	80049c4 <HAL_GetTick>
 80083c8:	6138      	str	r0, [r7, #16]

                /* Wait till PLL is ready */
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 80083ca:	e008      	b.n	80083de <HAL_RCC_OscConfig+0x456>
                    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 80083cc:	f7fc fafa 	bl	80049c4 <HAL_GetTick>
 80083d0:	4602      	mov	r2, r0
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	1ad3      	subs	r3, r2, r3
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d901      	bls.n	80083de <HAL_RCC_OscConfig+0x456>
                        return HAL_TIMEOUT;
 80083da:	2303      	movs	r3, #3
 80083dc:	e045      	b.n	800846a <HAL_RCC_OscConfig+0x4e2>
                while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 80083de:	4b06      	ldr	r3, [pc, #24]	@ (80083f8 <HAL_RCC_OscConfig+0x470>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1f0      	bne.n	80083cc <HAL_RCC_OscConfig+0x444>
 80083ea:	e03d      	b.n	8008468 <HAL_RCC_OscConfig+0x4e0>
                    }
                }
            }
        } else {
            /* Check if there is a request to disable the PLL used as System clock source */
            if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) {
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	699b      	ldr	r3, [r3, #24]
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d107      	bne.n	8008404 <HAL_RCC_OscConfig+0x47c>
                return HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	e038      	b.n	800846a <HAL_RCC_OscConfig+0x4e2>
 80083f8:	40023800 	.word	0x40023800
 80083fc:	40007000 	.word	0x40007000
 8008400:	42470060 	.word	0x42470060
            } else {
                /* Do not return HAL_ERROR if request repeats the current configuration */
                pll_config = RCC->PLLCFGR;
 8008404:	4b1b      	ldr	r3, [pc, #108]	@ (8008474 <HAL_RCC_OscConfig+0x4ec>)
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	60fb      	str	r3, [r7, #12]
                if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
                if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	699b      	ldr	r3, [r3, #24]
 800840e:	2b01      	cmp	r3, #1
 8008410:	d028      	beq.n	8008464 <HAL_RCC_OscConfig+0x4dc>
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	69db      	ldr	r3, [r3, #28]
 800841c:	429a      	cmp	r2, r3
 800841e:	d121      	bne.n	8008464 <HAL_RCC_OscConfig+0x4dc>
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a1b      	ldr	r3, [r3, #32]
                if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800842a:	429a      	cmp	r2, r3
 800842c:	d11a      	bne.n	8008464 <HAL_RCC_OscConfig+0x4dc>
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008434:	4013      	ands	r3, r2
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800843a:	0192      	lsls	r2, r2, #6
 800843c:	4293      	cmp	r3, r2
 800843e:	d111      	bne.n	8008464 <HAL_RCC_OscConfig+0x4dc>
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800844a:	085b      	lsrs	r3, r3, #1
 800844c:	3b01      	subs	r3, #1
 800844e:	041b      	lsls	r3, r3, #16
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008450:	429a      	cmp	r2, r3
 8008452:	d107      	bne.n	8008464 <HAL_RCC_OscConfig+0x4dc>
                    (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) || (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800845e:	061b      	lsls	r3, r3, #24
 8008460:	429a      	cmp	r2, r3
 8008462:	d001      	beq.n	8008468 <HAL_RCC_OscConfig+0x4e0>
#endif
                {
                    return HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	e000      	b.n	800846a <HAL_RCC_OscConfig+0x4e2>
                }
            }
        }
    }
    return HAL_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3718      	adds	r7, #24
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	40023800 	.word	0x40023800

08008478 <HAL_RCC_ClockConfig>:
 * @note   Depending on the device voltage range, the software has to set correctly
 *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 *         (for more details refer to section above "Initialization/de-initialization functions")
 * @retval None
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef * RCC_ClkInitStruct, uint32_t FLatency) {
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
    uint32_t tickstart;

    /* Check Null pointer */
    if (RCC_ClkInitStruct == NULL) {
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d101      	bne.n	800848c <HAL_RCC_ClockConfig+0x14>
        return HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	e0cc      	b.n	8008626 <HAL_RCC_ClockConfig+0x1ae>
    /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
      must be correctly programmed according to the frequency of the CPU clock
      (HCLK) and the supply voltage of the device. */

    /* Increasing the number of wait states because of higher CPU frequency */
    if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 800848c:	4b68      	ldr	r3, [pc, #416]	@ (8008630 <HAL_RCC_ClockConfig+0x1b8>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 0307 	and.w	r3, r3, #7
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	429a      	cmp	r2, r3
 8008498:	d90c      	bls.n	80084b4 <HAL_RCC_ClockConfig+0x3c>
        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
        __HAL_FLASH_SET_LATENCY(FLatency);
 800849a:	4b65      	ldr	r3, [pc, #404]	@ (8008630 <HAL_RCC_ClockConfig+0x1b8>)
 800849c:	683a      	ldr	r2, [r7, #0]
 800849e:	b2d2      	uxtb	r2, r2
 80084a0:	701a      	strb	r2, [r3, #0]

        /* Check that the new number of wait states is taken into account to access the Flash
        memory by reading the FLASH_ACR register */
        if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 80084a2:	4b63      	ldr	r3, [pc, #396]	@ (8008630 <HAL_RCC_ClockConfig+0x1b8>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f003 0307 	and.w	r3, r3, #7
 80084aa:	683a      	ldr	r2, [r7, #0]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d001      	beq.n	80084b4 <HAL_RCC_ClockConfig+0x3c>
            return HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	e0b8      	b.n	8008626 <HAL_RCC_ClockConfig+0x1ae>
        }
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) {
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 0302 	and.w	r3, r3, #2
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d020      	beq.n	8008502 <HAL_RCC_ClockConfig+0x8a>
        /* Set the highest APBx dividers in order to ensure that we do not go through
           a non-spec phase whatever we decrease or increase HCLK. */
        if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) {
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f003 0304 	and.w	r3, r3, #4
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d005      	beq.n	80084d8 <HAL_RCC_ClockConfig+0x60>
            MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80084cc:	4b59      	ldr	r3, [pc, #356]	@ (8008634 <HAL_RCC_ClockConfig+0x1bc>)
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	4a58      	ldr	r2, [pc, #352]	@ (8008634 <HAL_RCC_ClockConfig+0x1bc>)
 80084d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80084d6:	6093      	str	r3, [r2, #8]
        }

        if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2) {
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 0308 	and.w	r3, r3, #8
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d005      	beq.n	80084f0 <HAL_RCC_ClockConfig+0x78>
            MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80084e4:	4b53      	ldr	r3, [pc, #332]	@ (8008634 <HAL_RCC_ClockConfig+0x1bc>)
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	4a52      	ldr	r2, [pc, #328]	@ (8008634 <HAL_RCC_ClockConfig+0x1bc>)
 80084ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80084ee:	6093      	str	r3, [r2, #8]
        }

        assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084f0:	4b50      	ldr	r3, [pc, #320]	@ (8008634 <HAL_RCC_ClockConfig+0x1bc>)
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	494d      	ldr	r1, [pc, #308]	@ (8008634 <HAL_RCC_ClockConfig+0x1bc>)
 80084fe:	4313      	orrs	r3, r2
 8008500:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK) {
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 0301 	and.w	r3, r3, #1
 800850a:	2b00      	cmp	r3, #0
 800850c:	d044      	beq.n	8008598 <HAL_RCC_ClockConfig+0x120>
        assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

        /* HSE is selected as System Clock Source */
        if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	2b01      	cmp	r3, #1
 8008514:	d107      	bne.n	8008526 <HAL_RCC_ClockConfig+0xae>
            /* Check the HSE ready flag */
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8008516:	4b47      	ldr	r3, [pc, #284]	@ (8008634 <HAL_RCC_ClockConfig+0x1bc>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800851e:	2b00      	cmp	r3, #0
 8008520:	d119      	bne.n	8008556 <HAL_RCC_ClockConfig+0xde>
                return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e07f      	b.n	8008626 <HAL_RCC_ClockConfig+0x1ae>
            }
        }
        /* PLL is selected as System Clock Source */
        else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) || (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)) {
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	2b02      	cmp	r3, #2
 800852c:	d003      	beq.n	8008536 <HAL_RCC_ClockConfig+0xbe>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	2b03      	cmp	r3, #3
 8008534:	d107      	bne.n	8008546 <HAL_RCC_ClockConfig+0xce>
            /* Check the PLL ready flag */
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8008536:	4b3f      	ldr	r3, [pc, #252]	@ (8008634 <HAL_RCC_ClockConfig+0x1bc>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800853e:	2b00      	cmp	r3, #0
 8008540:	d109      	bne.n	8008556 <HAL_RCC_ClockConfig+0xde>
                return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e06f      	b.n	8008626 <HAL_RCC_ClockConfig+0x1ae>
            }
        }
        /* HSI is selected as System Clock Source */
        else {
            /* Check the HSI ready flag */
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8008546:	4b3b      	ldr	r3, [pc, #236]	@ (8008634 <HAL_RCC_ClockConfig+0x1bc>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 0302 	and.w	r3, r3, #2
 800854e:	2b00      	cmp	r3, #0
 8008550:	d101      	bne.n	8008556 <HAL_RCC_ClockConfig+0xde>
                return HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	e067      	b.n	8008626 <HAL_RCC_ClockConfig+0x1ae>
            }
        }

        __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008556:	4b37      	ldr	r3, [pc, #220]	@ (8008634 <HAL_RCC_ClockConfig+0x1bc>)
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	f023 0203 	bic.w	r2, r3, #3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	4934      	ldr	r1, [pc, #208]	@ (8008634 <HAL_RCC_ClockConfig+0x1bc>)
 8008564:	4313      	orrs	r3, r2
 8008566:	608b      	str	r3, [r1, #8]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008568:	f7fc fa2c 	bl	80049c4 <HAL_GetTick>
 800856c:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 800856e:	e00a      	b.n	8008586 <HAL_RCC_ClockConfig+0x10e>
            if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8008570:	f7fc fa28 	bl	80049c4 <HAL_GetTick>
 8008574:	4602      	mov	r2, r0
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	1ad3      	subs	r3, r2, r3
 800857a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800857e:	4293      	cmp	r3, r2
 8008580:	d901      	bls.n	8008586 <HAL_RCC_ClockConfig+0x10e>
                return HAL_TIMEOUT;
 8008582:	2303      	movs	r3, #3
 8008584:	e04f      	b.n	8008626 <HAL_RCC_ClockConfig+0x1ae>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 8008586:	4b2b      	ldr	r3, [pc, #172]	@ (8008634 <HAL_RCC_ClockConfig+0x1bc>)
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	f003 020c 	and.w	r2, r3, #12
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	429a      	cmp	r2, r3
 8008596:	d1eb      	bne.n	8008570 <HAL_RCC_ClockConfig+0xf8>
            }
        }
    }

    /* Decreasing the number of wait states because of lower CPU frequency */
    if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 8008598:	4b25      	ldr	r3, [pc, #148]	@ (8008630 <HAL_RCC_ClockConfig+0x1b8>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f003 0307 	and.w	r3, r3, #7
 80085a0:	683a      	ldr	r2, [r7, #0]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d20c      	bcs.n	80085c0 <HAL_RCC_ClockConfig+0x148>
        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
        __HAL_FLASH_SET_LATENCY(FLatency);
 80085a6:	4b22      	ldr	r3, [pc, #136]	@ (8008630 <HAL_RCC_ClockConfig+0x1b8>)
 80085a8:	683a      	ldr	r2, [r7, #0]
 80085aa:	b2d2      	uxtb	r2, r2
 80085ac:	701a      	strb	r2, [r3, #0]

        /* Check that the new number of wait states is taken into account to access the Flash
        memory by reading the FLASH_ACR register */
        if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 80085ae:	4b20      	ldr	r3, [pc, #128]	@ (8008630 <HAL_RCC_ClockConfig+0x1b8>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 0307 	and.w	r3, r3, #7
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d001      	beq.n	80085c0 <HAL_RCC_ClockConfig+0x148>
            return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e032      	b.n	8008626 <HAL_RCC_ClockConfig+0x1ae>
        }
    }

    /*-------------------------- PCLK1 Configuration ---------------------------*/
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) {
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f003 0304 	and.w	r3, r3, #4
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d008      	beq.n	80085de <HAL_RCC_ClockConfig+0x166>
        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80085cc:	4b19      	ldr	r3, [pc, #100]	@ (8008634 <HAL_RCC_ClockConfig+0x1bc>)
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	4916      	ldr	r1, [pc, #88]	@ (8008634 <HAL_RCC_ClockConfig+0x1bc>)
 80085da:	4313      	orrs	r3, r2
 80085dc:	608b      	str	r3, [r1, #8]
    }

    /*-------------------------- PCLK2 Configuration ---------------------------*/
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2) {
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f003 0308 	and.w	r3, r3, #8
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d009      	beq.n	80085fe <HAL_RCC_ClockConfig+0x186>
        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80085ea:	4b12      	ldr	r3, [pc, #72]	@ (8008634 <HAL_RCC_ClockConfig+0x1bc>)
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	00db      	lsls	r3, r3, #3
 80085f8:	490e      	ldr	r1, [pc, #56]	@ (8008634 <HAL_RCC_ClockConfig+0x1bc>)
 80085fa:	4313      	orrs	r3, r2
 80085fc:	608b      	str	r3, [r1, #8]
    }

    /* Update the SystemCoreClock global variable */
    SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80085fe:	f000 f821 	bl	8008644 <HAL_RCC_GetSysClockFreq>
 8008602:	4602      	mov	r2, r0
 8008604:	4b0b      	ldr	r3, [pc, #44]	@ (8008634 <HAL_RCC_ClockConfig+0x1bc>)
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	091b      	lsrs	r3, r3, #4
 800860a:	f003 030f 	and.w	r3, r3, #15
 800860e:	490a      	ldr	r1, [pc, #40]	@ (8008638 <HAL_RCC_ClockConfig+0x1c0>)
 8008610:	5ccb      	ldrb	r3, [r1, r3]
 8008612:	fa22 f303 	lsr.w	r3, r2, r3
 8008616:	4a09      	ldr	r2, [pc, #36]	@ (800863c <HAL_RCC_ClockConfig+0x1c4>)
 8008618:	6013      	str	r3, [r2, #0]

    /* Configure the source of time base considering new system clocks settings */
    HAL_InitTick(uwTickPrio);
 800861a:	4b09      	ldr	r3, [pc, #36]	@ (8008640 <HAL_RCC_ClockConfig+0x1c8>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4618      	mov	r0, r3
 8008620:	f7fc f98c 	bl	800493c <HAL_InitTick>

    return HAL_OK;
 8008624:	2300      	movs	r3, #0
}
 8008626:	4618      	mov	r0, r3
 8008628:	3710      	adds	r7, #16
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	40023c00 	.word	0x40023c00
 8008634:	40023800 	.word	0x40023800
 8008638:	08013c78 	.word	0x08013c78
 800863c:	2000003c 	.word	0x2000003c
 8008640:	20000060 	.word	0x20000060

08008644 <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
__weak uint32_t HAL_RCC_GetSysClockFreq(void) {
 8008644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008648:	b090      	sub	sp, #64	@ 0x40
 800864a:	af00      	add	r7, sp, #0
    uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800864c:	2300      	movs	r3, #0
 800864e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008650:	2300      	movs	r3, #0
 8008652:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008654:	2300      	movs	r3, #0
 8008656:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t sysclockfreq = 0U;
 8008658:	2300      	movs	r3, #0
 800865a:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Get SYSCLK source -------------------------------------------------------*/
    switch (RCC->CFGR & RCC_CFGR_SWS) {
 800865c:	4b59      	ldr	r3, [pc, #356]	@ (80087c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	f003 030c 	and.w	r3, r3, #12
 8008664:	2b08      	cmp	r3, #8
 8008666:	d00d      	beq.n	8008684 <HAL_RCC_GetSysClockFreq+0x40>
 8008668:	2b08      	cmp	r3, #8
 800866a:	f200 80a1 	bhi.w	80087b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800866e:	2b00      	cmp	r3, #0
 8008670:	d002      	beq.n	8008678 <HAL_RCC_GetSysClockFreq+0x34>
 8008672:	2b04      	cmp	r3, #4
 8008674:	d003      	beq.n	800867e <HAL_RCC_GetSysClockFreq+0x3a>
 8008676:	e09b      	b.n	80087b0 <HAL_RCC_GetSysClockFreq+0x16c>
    case RCC_CFGR_SWS_HSI: /* HSI used as system clock source */
    {
        sysclockfreq = HSI_VALUE;
 8008678:	4b53      	ldr	r3, [pc, #332]	@ (80087c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800867a:	63bb      	str	r3, [r7, #56]	@ 0x38
        break;
 800867c:	e09b      	b.n	80087b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE: /* HSE used as system clock  source */
    {
        sysclockfreq = HSE_VALUE;
 800867e:	4b53      	ldr	r3, [pc, #332]	@ (80087cc <HAL_RCC_GetSysClockFreq+0x188>)
 8008680:	63bb      	str	r3, [r7, #56]	@ 0x38
        break;
 8008682:	e098      	b.n	80087b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL: /* PLL used as system clock  source */
    {
        /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
        SYSCLK = PLL_VCO / PLLP */
        pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008684:	4b4f      	ldr	r3, [pc, #316]	@ (80087c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800868c:	637b      	str	r3, [r7, #52]	@ 0x34
        if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI) {
 800868e:	4b4d      	ldr	r3, [pc, #308]	@ (80087c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008696:	2b00      	cmp	r3, #0
 8008698:	d028      	beq.n	80086ec <HAL_RCC_GetSysClockFreq+0xa8>
            /* HSE used as PLL clock source */
            pllvco = (uint32_t)((((uint64_t)HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800869a:	4b4a      	ldr	r3, [pc, #296]	@ (80087c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	099b      	lsrs	r3, r3, #6
 80086a0:	2200      	movs	r2, #0
 80086a2:	623b      	str	r3, [r7, #32]
 80086a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80086a6:	6a3b      	ldr	r3, [r7, #32]
 80086a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80086ac:	2100      	movs	r1, #0
 80086ae:	4b47      	ldr	r3, [pc, #284]	@ (80087cc <HAL_RCC_GetSysClockFreq+0x188>)
 80086b0:	fb03 f201 	mul.w	r2, r3, r1
 80086b4:	2300      	movs	r3, #0
 80086b6:	fb00 f303 	mul.w	r3, r0, r3
 80086ba:	4413      	add	r3, r2
 80086bc:	4a43      	ldr	r2, [pc, #268]	@ (80087cc <HAL_RCC_GetSysClockFreq+0x188>)
 80086be:	fba0 1202 	umull	r1, r2, r0, r2
 80086c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80086c4:	460a      	mov	r2, r1
 80086c6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80086c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086ca:	4413      	add	r3, r2
 80086cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086d0:	2200      	movs	r2, #0
 80086d2:	61bb      	str	r3, [r7, #24]
 80086d4:	61fa      	str	r2, [r7, #28]
 80086d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80086de:	f7f8 fadb 	bl	8000c98 <__aeabi_uldivmod>
 80086e2:	4602      	mov	r2, r0
 80086e4:	460b      	mov	r3, r1
 80086e6:	4613      	mov	r3, r2
 80086e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086ea:	e053      	b.n	8008794 <HAL_RCC_GetSysClockFreq+0x150>
        } else {
            /* HSI used as PLL clock source */
            pllvco = (uint32_t)((((uint64_t)HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086ec:	4b35      	ldr	r3, [pc, #212]	@ (80087c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	099b      	lsrs	r3, r3, #6
 80086f2:	2200      	movs	r2, #0
 80086f4:	613b      	str	r3, [r7, #16]
 80086f6:	617a      	str	r2, [r7, #20]
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80086fe:	f04f 0b00 	mov.w	fp, #0
 8008702:	4652      	mov	r2, sl
 8008704:	465b      	mov	r3, fp
 8008706:	f04f 0000 	mov.w	r0, #0
 800870a:	f04f 0100 	mov.w	r1, #0
 800870e:	0159      	lsls	r1, r3, #5
 8008710:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008714:	0150      	lsls	r0, r2, #5
 8008716:	4602      	mov	r2, r0
 8008718:	460b      	mov	r3, r1
 800871a:	ebb2 080a 	subs.w	r8, r2, sl
 800871e:	eb63 090b 	sbc.w	r9, r3, fp
 8008722:	f04f 0200 	mov.w	r2, #0
 8008726:	f04f 0300 	mov.w	r3, #0
 800872a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800872e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008732:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008736:	ebb2 0408 	subs.w	r4, r2, r8
 800873a:	eb63 0509 	sbc.w	r5, r3, r9
 800873e:	f04f 0200 	mov.w	r2, #0
 8008742:	f04f 0300 	mov.w	r3, #0
 8008746:	00eb      	lsls	r3, r5, #3
 8008748:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800874c:	00e2      	lsls	r2, r4, #3
 800874e:	4614      	mov	r4, r2
 8008750:	461d      	mov	r5, r3
 8008752:	eb14 030a 	adds.w	r3, r4, sl
 8008756:	603b      	str	r3, [r7, #0]
 8008758:	eb45 030b 	adc.w	r3, r5, fp
 800875c:	607b      	str	r3, [r7, #4]
 800875e:	f04f 0200 	mov.w	r2, #0
 8008762:	f04f 0300 	mov.w	r3, #0
 8008766:	e9d7 4500 	ldrd	r4, r5, [r7]
 800876a:	4629      	mov	r1, r5
 800876c:	028b      	lsls	r3, r1, #10
 800876e:	4621      	mov	r1, r4
 8008770:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008774:	4621      	mov	r1, r4
 8008776:	028a      	lsls	r2, r1, #10
 8008778:	4610      	mov	r0, r2
 800877a:	4619      	mov	r1, r3
 800877c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800877e:	2200      	movs	r2, #0
 8008780:	60bb      	str	r3, [r7, #8]
 8008782:	60fa      	str	r2, [r7, #12]
 8008784:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008788:	f7f8 fa86 	bl	8000c98 <__aeabi_uldivmod>
 800878c:	4602      	mov	r2, r0
 800878e:	460b      	mov	r3, r1
 8008790:	4613      	mov	r3, r2
 8008792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008794:	4b0b      	ldr	r3, [pc, #44]	@ (80087c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	0c1b      	lsrs	r3, r3, #16
 800879a:	f003 0303 	and.w	r3, r3, #3
 800879e:	3301      	adds	r3, #1
 80087a0:	005b      	lsls	r3, r3, #1
 80087a2:	633b      	str	r3, [r7, #48]	@ 0x30

        sysclockfreq = pllvco / pllp;
 80087a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80087a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ac:	63bb      	str	r3, [r7, #56]	@ 0x38
        break;
 80087ae:	e002      	b.n	80087b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default: {
        sysclockfreq = HSI_VALUE;
 80087b0:	4b05      	ldr	r3, [pc, #20]	@ (80087c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80087b2:	63bb      	str	r3, [r7, #56]	@ 0x38
        break;
 80087b4:	bf00      	nop
    }
    }
    return sysclockfreq;
 80087b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3740      	adds	r7, #64	@ 0x40
 80087bc:	46bd      	mov	sp, r7
 80087be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087c2:	bf00      	nop
 80087c4:	40023800 	.word	0x40023800
 80087c8:	00f42400 	.word	0x00f42400
 80087cc:	017d7840 	.word	0x017d7840

080087d0 <HAL_RCC_GetHCLKFreq>:
 *
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
 *         and updated within this function
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
 80087d0:	b480      	push	{r7}
 80087d2:	af00      	add	r7, sp, #0
    return SystemCoreClock;
 80087d4:	4b03      	ldr	r3, [pc, #12]	@ (80087e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80087d6:	681b      	ldr	r3, [r3, #0]
}
 80087d8:	4618      	mov	r0, r3
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr
 80087e2:	bf00      	nop
 80087e4:	2000003c 	.word	0x2000003c

080087e8 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Returns the PCLK1 frequency
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 80087e8:	b580      	push	{r7, lr}
 80087ea:	af00      	add	r7, sp, #0
    /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
    return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80087ec:	f7ff fff0 	bl	80087d0 <HAL_RCC_GetHCLKFreq>
 80087f0:	4602      	mov	r2, r0
 80087f2:	4b05      	ldr	r3, [pc, #20]	@ (8008808 <HAL_RCC_GetPCLK1Freq+0x20>)
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	0a9b      	lsrs	r3, r3, #10
 80087f8:	f003 0307 	and.w	r3, r3, #7
 80087fc:	4903      	ldr	r1, [pc, #12]	@ (800880c <HAL_RCC_GetPCLK1Freq+0x24>)
 80087fe:	5ccb      	ldrb	r3, [r1, r3]
 8008800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008804:	4618      	mov	r0, r3
 8008806:	bd80      	pop	{r7, pc}
 8008808:	40023800 	.word	0x40023800
 800880c:	08013c88 	.word	0x08013c88

08008810 <HAL_RCC_GetPCLK2Freq>:
 * @brief  Returns the PCLK2 frequency
 * @note   Each time PCLK2 changes, this function must be called to update the
 *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK2 frequency
 */
uint32_t HAL_RCC_GetPCLK2Freq(void) {
 8008810:	b580      	push	{r7, lr}
 8008812:	af00      	add	r7, sp, #0
    /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
    return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008814:	f7ff ffdc 	bl	80087d0 <HAL_RCC_GetHCLKFreq>
 8008818:	4602      	mov	r2, r0
 800881a:	4b05      	ldr	r3, [pc, #20]	@ (8008830 <HAL_RCC_GetPCLK2Freq+0x20>)
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	0b5b      	lsrs	r3, r3, #13
 8008820:	f003 0307 	and.w	r3, r3, #7
 8008824:	4903      	ldr	r1, [pc, #12]	@ (8008834 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008826:	5ccb      	ldrb	r3, [r1, r3]
 8008828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800882c:	4618      	mov	r0, r3
 800882e:	bd80      	pop	{r7, pc}
 8008830:	40023800 	.word	0x40023800
 8008834:	08013c88 	.word	0x08013c88

08008838 <HAL_TIM_PWM_Init>:
 *         due to DIR bit readonly in center aligned mode.
 *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
 * @param  htim TIM PWM handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef * htim) {
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
    /* Check the TIM handle allocation */
    if (htim == NULL) {
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d101      	bne.n	800884a <HAL_TIM_PWM_Init+0x12>
        return HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	e041      	b.n	80088ce <HAL_TIM_PWM_Init+0x96>
    assert_param(IS_TIM_INSTANCE(htim->Instance));
    assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
    assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
    assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

    if (htim->State == HAL_TIM_STATE_RESET) {
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008850:	b2db      	uxtb	r3, r3
 8008852:	2b00      	cmp	r3, #0
 8008854:	d106      	bne.n	8008864 <HAL_TIM_PWM_Init+0x2c>
        /* Allocate lock resource and initialize it */
        htim->Lock = HAL_UNLOCKED;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        }
        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        htim->PWM_MspInitCallback(htim);
#else
        /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
        HAL_TIM_PWM_MspInit(htim);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f7fa fb0a 	bl	8002e78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }

    /* Set the TIM state */
    htim->State = HAL_TIM_STATE_BUSY;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2202      	movs	r2, #2
 8008868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init the base time for the PWM */
    TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	3304      	adds	r3, #4
 8008874:	4619      	mov	r1, r3
 8008876:	4610      	mov	r0, r2
 8008878:	f000 f9a0 	bl	8008bbc <TIM_Base_SetConfig>

    /* Initialize the DMA burst operation state */
    htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

    /* Initialize the TIM channels state */
    TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    /* Initialize the TIM state*/
    htim->State = HAL_TIM_STATE_READY;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
	...

080088d8 <HAL_TIM_PWM_Start>:
 *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
 *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
 *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef * htim, uint32_t Channel) {
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]

    /* Check the parameters */
    assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

    /* Check the TIM channel state */
    if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY) {
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d109      	bne.n	80088fc <HAL_TIM_PWM_Start+0x24>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	bf14      	ite	ne
 80088f4:	2301      	movne	r3, #1
 80088f6:	2300      	moveq	r3, #0
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	e022      	b.n	8008942 <HAL_TIM_PWM_Start+0x6a>
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	2b04      	cmp	r3, #4
 8008900:	d109      	bne.n	8008916 <HAL_TIM_PWM_Start+0x3e>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008908:	b2db      	uxtb	r3, r3
 800890a:	2b01      	cmp	r3, #1
 800890c:	bf14      	ite	ne
 800890e:	2301      	movne	r3, #1
 8008910:	2300      	moveq	r3, #0
 8008912:	b2db      	uxtb	r3, r3
 8008914:	e015      	b.n	8008942 <HAL_TIM_PWM_Start+0x6a>
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	2b08      	cmp	r3, #8
 800891a:	d109      	bne.n	8008930 <HAL_TIM_PWM_Start+0x58>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008922:	b2db      	uxtb	r3, r3
 8008924:	2b01      	cmp	r3, #1
 8008926:	bf14      	ite	ne
 8008928:	2301      	movne	r3, #1
 800892a:	2300      	moveq	r3, #0
 800892c:	b2db      	uxtb	r3, r3
 800892e:	e008      	b.n	8008942 <HAL_TIM_PWM_Start+0x6a>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008936:	b2db      	uxtb	r3, r3
 8008938:	2b01      	cmp	r3, #1
 800893a:	bf14      	ite	ne
 800893c:	2301      	movne	r3, #1
 800893e:	2300      	moveq	r3, #0
 8008940:	b2db      	uxtb	r3, r3
 8008942:	2b00      	cmp	r3, #0
 8008944:	d001      	beq.n	800894a <HAL_TIM_PWM_Start+0x72>
        return HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	e068      	b.n	8008a1c <HAL_TIM_PWM_Start+0x144>
    }

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d104      	bne.n	800895a <HAL_TIM_PWM_Start+0x82>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2202      	movs	r2, #2
 8008954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008958:	e013      	b.n	8008982 <HAL_TIM_PWM_Start+0xaa>
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	2b04      	cmp	r3, #4
 800895e:	d104      	bne.n	800896a <HAL_TIM_PWM_Start+0x92>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2202      	movs	r2, #2
 8008964:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008968:	e00b      	b.n	8008982 <HAL_TIM_PWM_Start+0xaa>
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	2b08      	cmp	r3, #8
 800896e:	d104      	bne.n	800897a <HAL_TIM_PWM_Start+0xa2>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2202      	movs	r2, #2
 8008974:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008978:	e003      	b.n	8008982 <HAL_TIM_PWM_Start+0xaa>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2202      	movs	r2, #2
 800897e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2201      	movs	r2, #1
 8008988:	6839      	ldr	r1, [r7, #0]
 800898a:	4618      	mov	r0, r3
 800898c:	f000 fb22 	bl	8008fd4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a23      	ldr	r2, [pc, #140]	@ (8008a24 <HAL_TIM_PWM_Start+0x14c>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d107      	bne.n	80089aa <HAL_TIM_PWM_Start+0xd2>
        /* Enable the main output */
        __HAL_TIM_MOE_ENABLE(htim);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80089a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance)) {
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a1d      	ldr	r2, [pc, #116]	@ (8008a24 <HAL_TIM_PWM_Start+0x14c>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d018      	beq.n	80089e6 <HAL_TIM_PWM_Start+0x10e>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089bc:	d013      	beq.n	80089e6 <HAL_TIM_PWM_Start+0x10e>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a19      	ldr	r2, [pc, #100]	@ (8008a28 <HAL_TIM_PWM_Start+0x150>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d00e      	beq.n	80089e6 <HAL_TIM_PWM_Start+0x10e>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a17      	ldr	r2, [pc, #92]	@ (8008a2c <HAL_TIM_PWM_Start+0x154>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d009      	beq.n	80089e6 <HAL_TIM_PWM_Start+0x10e>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a16      	ldr	r2, [pc, #88]	@ (8008a30 <HAL_TIM_PWM_Start+0x158>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d004      	beq.n	80089e6 <HAL_TIM_PWM_Start+0x10e>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a14      	ldr	r2, [pc, #80]	@ (8008a34 <HAL_TIM_PWM_Start+0x15c>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d111      	bne.n	8008a0a <HAL_TIM_PWM_Start+0x132>
        tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	f003 0307 	and.w	r3, r3, #7
 80089f0:	60fb      	str	r3, [r7, #12]
        if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr)) {
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2b06      	cmp	r3, #6
 80089f6:	d010      	beq.n	8008a1a <HAL_TIM_PWM_Start+0x142>
            __HAL_TIM_ENABLE(htim);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f042 0201 	orr.w	r2, r2, #1
 8008a06:	601a      	str	r2, [r3, #0]
        if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr)) {
 8008a08:	e007      	b.n	8008a1a <HAL_TIM_PWM_Start+0x142>
        }
    } else {
        __HAL_TIM_ENABLE(htim);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f042 0201 	orr.w	r2, r2, #1
 8008a18:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	40010000 	.word	0x40010000
 8008a28:	40000400 	.word	0x40000400
 8008a2c:	40000800 	.word	0x40000800
 8008a30:	40000c00 	.word	0x40000c00
 8008a34:	40014000 	.word	0x40014000

08008a38 <HAL_TIM_PWM_ConfigChannel>:
 *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
 *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
 *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef * htim, TIM_OC_InitTypeDef * sConfig, uint32_t Channel) {
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b086      	sub	sp, #24
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 8008a44:	2300      	movs	r3, #0
 8008a46:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
    assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
    assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

    /* Process Locked */
    __HAL_LOCK(htim);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d101      	bne.n	8008a56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008a52:	2302      	movs	r3, #2
 8008a54:	e0ae      	b.n	8008bb4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    switch (Channel) {
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2b0c      	cmp	r3, #12
 8008a62:	f200 809f 	bhi.w	8008ba4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008a66:	a201      	add	r2, pc, #4	@ (adr r2, 8008a6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6c:	08008aa1 	.word	0x08008aa1
 8008a70:	08008ba5 	.word	0x08008ba5
 8008a74:	08008ba5 	.word	0x08008ba5
 8008a78:	08008ba5 	.word	0x08008ba5
 8008a7c:	08008ae1 	.word	0x08008ae1
 8008a80:	08008ba5 	.word	0x08008ba5
 8008a84:	08008ba5 	.word	0x08008ba5
 8008a88:	08008ba5 	.word	0x08008ba5
 8008a8c:	08008b23 	.word	0x08008b23
 8008a90:	08008ba5 	.word	0x08008ba5
 8008a94:	08008ba5 	.word	0x08008ba5
 8008a98:	08008ba5 	.word	0x08008ba5
 8008a9c:	08008b63 	.word	0x08008b63
    case TIM_CHANNEL_1: {
        /* Check the parameters */
        assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

        /* Configure the Channel 1 in PWM mode */
        TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	68b9      	ldr	r1, [r7, #8]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f000 f908 	bl	8008cbc <TIM_OC1_SetConfig>

        /* Set the Preload enable bit for channel1 */
        htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	699a      	ldr	r2, [r3, #24]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f042 0208 	orr.w	r2, r2, #8
 8008aba:	619a      	str	r2, [r3, #24]

        /* Configure the Output Fast mode */
        htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	699a      	ldr	r2, [r3, #24]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f022 0204 	bic.w	r2, r2, #4
 8008aca:	619a      	str	r2, [r3, #24]
        htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	6999      	ldr	r1, [r3, #24]
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	691a      	ldr	r2, [r3, #16]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	430a      	orrs	r2, r1
 8008adc:	619a      	str	r2, [r3, #24]
        break;
 8008ade:	e064      	b.n	8008baa <HAL_TIM_PWM_ConfigChannel+0x172>
    case TIM_CHANNEL_2: {
        /* Check the parameters */
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

        /* Configure the Channel 2 in PWM mode */
        TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68b9      	ldr	r1, [r7, #8]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f000 f94e 	bl	8008d88 <TIM_OC2_SetConfig>

        /* Set the Preload enable bit for channel2 */
        htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	699a      	ldr	r2, [r3, #24]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008afa:	619a      	str	r2, [r3, #24]

        /* Configure the Output Fast mode */
        htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	699a      	ldr	r2, [r3, #24]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b0a:	619a      	str	r2, [r3, #24]
        htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	6999      	ldr	r1, [r3, #24]
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	021a      	lsls	r2, r3, #8
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	430a      	orrs	r2, r1
 8008b1e:	619a      	str	r2, [r3, #24]
        break;
 8008b20:	e043      	b.n	8008baa <HAL_TIM_PWM_ConfigChannel+0x172>
    case TIM_CHANNEL_3: {
        /* Check the parameters */
        assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

        /* Configure the Channel 3 in PWM mode */
        TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	68b9      	ldr	r1, [r7, #8]
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f000 f999 	bl	8008e60 <TIM_OC3_SetConfig>

        /* Set the Preload enable bit for channel3 */
        htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	69da      	ldr	r2, [r3, #28]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f042 0208 	orr.w	r2, r2, #8
 8008b3c:	61da      	str	r2, [r3, #28]

        /* Configure the Output Fast mode */
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	69da      	ldr	r2, [r3, #28]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f022 0204 	bic.w	r2, r2, #4
 8008b4c:	61da      	str	r2, [r3, #28]
        htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	69d9      	ldr	r1, [r3, #28]
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	691a      	ldr	r2, [r3, #16]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	430a      	orrs	r2, r1
 8008b5e:	61da      	str	r2, [r3, #28]
        break;
 8008b60:	e023      	b.n	8008baa <HAL_TIM_PWM_ConfigChannel+0x172>
    case TIM_CHANNEL_4: {
        /* Check the parameters */
        assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

        /* Configure the Channel 4 in PWM mode */
        TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	68b9      	ldr	r1, [r7, #8]
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f000 f9e3 	bl	8008f34 <TIM_OC4_SetConfig>

        /* Set the Preload enable bit for channel4 */
        htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	69da      	ldr	r2, [r3, #28]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b7c:	61da      	str	r2, [r3, #28]

        /* Configure the Output Fast mode */
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	69da      	ldr	r2, [r3, #28]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b8c:	61da      	str	r2, [r3, #28]
        htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	69d9      	ldr	r1, [r3, #28]
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	021a      	lsls	r2, r3, #8
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	430a      	orrs	r2, r1
 8008ba0:	61da      	str	r2, [r3, #28]
        break;
 8008ba2:	e002      	b.n	8008baa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
        status = HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	75fb      	strb	r3, [r7, #23]
        break;
 8008ba8:	bf00      	nop
    }

    __HAL_UNLOCK(htim);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return status;
 8008bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3718      	adds	r7, #24
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <TIM_Base_SetConfig>:
 * @brief  Time Base configuration
 * @param  TIMx TIM peripheral
 * @param  Structure TIM Base configuration structure
 * @retval None
 */
void TIM_Base_SetConfig(TIM_TypeDef * TIMx, TIM_Base_InitTypeDef * Structure) {
 8008bbc:	b480      	push	{r7}
 8008bbe:	b085      	sub	sp, #20
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
    uint32_t tmpcr1;
    tmpcr1 = TIMx->CR1;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	60fb      	str	r3, [r7, #12]

    /* Set TIM Time Base Unit parameters ---------------------------------------*/
    if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx)) {
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	4a34      	ldr	r2, [pc, #208]	@ (8008ca0 <TIM_Base_SetConfig+0xe4>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d00f      	beq.n	8008bf4 <TIM_Base_SetConfig+0x38>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bda:	d00b      	beq.n	8008bf4 <TIM_Base_SetConfig+0x38>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4a31      	ldr	r2, [pc, #196]	@ (8008ca4 <TIM_Base_SetConfig+0xe8>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d007      	beq.n	8008bf4 <TIM_Base_SetConfig+0x38>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	4a30      	ldr	r2, [pc, #192]	@ (8008ca8 <TIM_Base_SetConfig+0xec>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d003      	beq.n	8008bf4 <TIM_Base_SetConfig+0x38>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4a2f      	ldr	r2, [pc, #188]	@ (8008cac <TIM_Base_SetConfig+0xf0>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d108      	bne.n	8008c06 <TIM_Base_SetConfig+0x4a>
        /* Select the Counter Mode */
        tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bfa:	60fb      	str	r3, [r7, #12]
        tmpcr1 |= Structure->CounterMode;
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	68fa      	ldr	r2, [r7, #12]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	60fb      	str	r3, [r7, #12]
    }

    if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx)) {
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a25      	ldr	r2, [pc, #148]	@ (8008ca0 <TIM_Base_SetConfig+0xe4>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d01b      	beq.n	8008c46 <TIM_Base_SetConfig+0x8a>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c14:	d017      	beq.n	8008c46 <TIM_Base_SetConfig+0x8a>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a22      	ldr	r2, [pc, #136]	@ (8008ca4 <TIM_Base_SetConfig+0xe8>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d013      	beq.n	8008c46 <TIM_Base_SetConfig+0x8a>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a21      	ldr	r2, [pc, #132]	@ (8008ca8 <TIM_Base_SetConfig+0xec>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d00f      	beq.n	8008c46 <TIM_Base_SetConfig+0x8a>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a20      	ldr	r2, [pc, #128]	@ (8008cac <TIM_Base_SetConfig+0xf0>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d00b      	beq.n	8008c46 <TIM_Base_SetConfig+0x8a>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a1f      	ldr	r2, [pc, #124]	@ (8008cb0 <TIM_Base_SetConfig+0xf4>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d007      	beq.n	8008c46 <TIM_Base_SetConfig+0x8a>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a1e      	ldr	r2, [pc, #120]	@ (8008cb4 <TIM_Base_SetConfig+0xf8>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d003      	beq.n	8008c46 <TIM_Base_SetConfig+0x8a>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a1d      	ldr	r2, [pc, #116]	@ (8008cb8 <TIM_Base_SetConfig+0xfc>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d108      	bne.n	8008c58 <TIM_Base_SetConfig+0x9c>
        /* Set the clock division */
        tmpcr1 &= ~TIM_CR1_CKD;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c4c:	60fb      	str	r3, [r7, #12]
        tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	68fa      	ldr	r2, [r7, #12]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	60fb      	str	r3, [r7, #12]
    }

    /* Set the auto-reload preload */
    MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	695b      	ldr	r3, [r3, #20]
 8008c62:	4313      	orrs	r3, r2
 8008c64:	60fb      	str	r3, [r7, #12]

    TIMx->CR1 = tmpcr1;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	601a      	str	r2, [r3, #0]

    /* Set the Autoreload value */
    TIMx->ARR = (uint32_t)Structure->Period;
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	689a      	ldr	r2, [r3, #8]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the Prescaler value */
    TIMx->PSC = Structure->Prescaler;
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx)) {
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4a08      	ldr	r2, [pc, #32]	@ (8008ca0 <TIM_Base_SetConfig+0xe4>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d103      	bne.n	8008c8c <TIM_Base_SetConfig+0xd0>
        /* Set the Repetition Counter value */
        TIMx->RCR = Structure->RepetitionCounter;
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	691a      	ldr	r2, [r3, #16]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Generate an update event to reload the Prescaler
       and the repetition counter (only for advanced timer) value immediately */
    TIMx->EGR = TIM_EGR_UG;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	615a      	str	r2, [r3, #20]
}
 8008c92:	bf00      	nop
 8008c94:	3714      	adds	r7, #20
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	40010000 	.word	0x40010000
 8008ca4:	40000400 	.word	0x40000400
 8008ca8:	40000800 	.word	0x40000800
 8008cac:	40000c00 	.word	0x40000c00
 8008cb0:	40014000 	.word	0x40014000
 8008cb4:	40014400 	.word	0x40014400
 8008cb8:	40014800 	.word	0x40014800

08008cbc <TIM_OC1_SetConfig>:
 * @brief  Timer Output Compare 1 configuration
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config The output configuration structure
 * @retval None
 */
static void TIM_OC1_SetConfig(TIM_TypeDef * TIMx, TIM_OC_InitTypeDef * OC_Config) {
 8008cbc:	b480      	push	{r7}
 8008cbe:	b087      	sub	sp, #28
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
    uint32_t tmpccmrx;
    uint32_t tmpccer;
    uint32_t tmpcr2;

    /* Disable the Channel 1: Reset the CC1E Bit */
    TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a1b      	ldr	r3, [r3, #32]
 8008cca:	f023 0201 	bic.w	r2, r3, #1
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	621a      	str	r2, [r3, #32]

    /* Get the TIMx CCER register value */
    tmpccer = TIMx->CCER;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a1b      	ldr	r3, [r3, #32]
 8008cd6:	617b      	str	r3, [r7, #20]
    /* Get the TIMx CR2 register value */
    tmpcr2 = TIMx->CR2;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	613b      	str	r3, [r7, #16]

    /* Get the TIMx CCMR1 register value */
    tmpccmrx = TIMx->CCMR1;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	699b      	ldr	r3, [r3, #24]
 8008ce2:	60fb      	str	r3, [r7, #12]

    /* Reset the Output Compare Mode Bits */
    tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cea:	60fb      	str	r3, [r7, #12]
    tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f023 0303 	bic.w	r3, r3, #3
 8008cf2:	60fb      	str	r3, [r7, #12]
    /* Select the Output Compare Mode */
    tmpccmrx |= OC_Config->OCMode;
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	60fb      	str	r3, [r7, #12]

    /* Reset the Output Polarity level */
    tmpccer &= ~TIM_CCER_CC1P;
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	f023 0302 	bic.w	r3, r3, #2
 8008d04:	617b      	str	r3, [r7, #20]
    /* Set the Output Compare Polarity */
    tmpccer |= OC_Config->OCPolarity;
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	697a      	ldr	r2, [r7, #20]
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	617b      	str	r3, [r7, #20]

    if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1)) {
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	4a1c      	ldr	r2, [pc, #112]	@ (8008d84 <TIM_OC1_SetConfig+0xc8>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d10c      	bne.n	8008d32 <TIM_OC1_SetConfig+0x76>
        /* Check parameters */
        assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

        /* Reset the Output N Polarity level */
        tmpccer &= ~TIM_CCER_CC1NP;
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	f023 0308 	bic.w	r3, r3, #8
 8008d1e:	617b      	str	r3, [r7, #20]
        /* Set the Output N Polarity */
        tmpccer |= OC_Config->OCNPolarity;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	697a      	ldr	r2, [r7, #20]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	617b      	str	r3, [r7, #20]
        /* Reset the Output N State */
        tmpccer &= ~TIM_CCER_CC1NE;
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	f023 0304 	bic.w	r3, r3, #4
 8008d30:	617b      	str	r3, [r7, #20]
    }

    if (IS_TIM_BREAK_INSTANCE(TIMx)) {
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a13      	ldr	r2, [pc, #76]	@ (8008d84 <TIM_OC1_SetConfig+0xc8>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d111      	bne.n	8008d5e <TIM_OC1_SetConfig+0xa2>
        /* Check parameters */
        assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
        assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

        /* Reset the Output Compare and Output Compare N IDLE State */
        tmpcr2 &= ~TIM_CR2_OIS1;
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d40:	613b      	str	r3, [r7, #16]
        tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008d48:	613b      	str	r3, [r7, #16]
        /* Set the Output Idle state */
        tmpcr2 |= OC_Config->OCIdleState;
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	695b      	ldr	r3, [r3, #20]
 8008d4e:	693a      	ldr	r2, [r7, #16]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	613b      	str	r3, [r7, #16]
        /* Set the Output N Idle state */
        tmpcr2 |= OC_Config->OCNIdleState;
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	699b      	ldr	r3, [r3, #24]
 8008d58:	693a      	ldr	r2, [r7, #16]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	613b      	str	r3, [r7, #16]
    }

    /* Write to TIMx CR2 */
    TIMx->CR2 = tmpcr2;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	693a      	ldr	r2, [r7, #16]
 8008d62:	605a      	str	r2, [r3, #4]

    /* Write to TIMx CCMR1 */
    TIMx->CCMR1 = tmpccmrx;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	619a      	str	r2, [r3, #24]

    /* Set the Capture Compare Register value */
    TIMx->CCR1 = OC_Config->Pulse;
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	685a      	ldr	r2, [r3, #4]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Write to TIMx CCER */
    TIMx->CCER = tmpccer;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	697a      	ldr	r2, [r7, #20]
 8008d76:	621a      	str	r2, [r3, #32]
}
 8008d78:	bf00      	nop
 8008d7a:	371c      	adds	r7, #28
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr
 8008d84:	40010000 	.word	0x40010000

08008d88 <TIM_OC2_SetConfig>:
 * @brief  Timer Output Compare 2 configuration
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config The output configuration structure
 * @retval None
 */
void TIM_OC2_SetConfig(TIM_TypeDef * TIMx, TIM_OC_InitTypeDef * OC_Config) {
 8008d88:	b480      	push	{r7}
 8008d8a:	b087      	sub	sp, #28
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
    uint32_t tmpccmrx;
    uint32_t tmpccer;
    uint32_t tmpcr2;

    /* Disable the Channel 2: Reset the CC2E Bit */
    TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a1b      	ldr	r3, [r3, #32]
 8008d96:	f023 0210 	bic.w	r2, r3, #16
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	621a      	str	r2, [r3, #32]

    /* Get the TIMx CCER register value */
    tmpccer = TIMx->CCER;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6a1b      	ldr	r3, [r3, #32]
 8008da2:	617b      	str	r3, [r7, #20]
    /* Get the TIMx CR2 register value */
    tmpcr2 = TIMx->CR2;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	613b      	str	r3, [r7, #16]

    /* Get the TIMx CCMR1 register value */
    tmpccmrx = TIMx->CCMR1;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	60fb      	str	r3, [r7, #12]

    /* Reset the Output Compare mode and Capture/Compare selection Bits */
    tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008db6:	60fb      	str	r3, [r7, #12]
    tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008dbe:	60fb      	str	r3, [r7, #12]

    /* Select the Output Compare Mode */
    tmpccmrx |= (OC_Config->OCMode << 8U);
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	021b      	lsls	r3, r3, #8
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	60fb      	str	r3, [r7, #12]

    /* Reset the Output Polarity level */
    tmpccer &= ~TIM_CCER_CC2P;
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	f023 0320 	bic.w	r3, r3, #32
 8008dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output Compare Polarity */
    tmpccer |= (OC_Config->OCPolarity << 4U);
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	011b      	lsls	r3, r3, #4
 8008dda:	697a      	ldr	r2, [r7, #20]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	617b      	str	r3, [r7, #20]

    if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2)) {
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a1e      	ldr	r2, [pc, #120]	@ (8008e5c <TIM_OC2_SetConfig+0xd4>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d10d      	bne.n	8008e04 <TIM_OC2_SetConfig+0x7c>
        assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

        /* Reset the Output N Polarity level */
        tmpccer &= ~TIM_CCER_CC2NP;
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008dee:	617b      	str	r3, [r7, #20]
        /* Set the Output N Polarity */
        tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	011b      	lsls	r3, r3, #4
 8008df6:	697a      	ldr	r2, [r7, #20]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	617b      	str	r3, [r7, #20]
        /* Reset the Output N State */
        tmpccer &= ~TIM_CCER_CC2NE;
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e02:	617b      	str	r3, [r7, #20]
    }

    if (IS_TIM_BREAK_INSTANCE(TIMx)) {
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4a15      	ldr	r2, [pc, #84]	@ (8008e5c <TIM_OC2_SetConfig+0xd4>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d113      	bne.n	8008e34 <TIM_OC2_SetConfig+0xac>
        /* Check parameters */
        assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
        assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

        /* Reset the Output Compare and Output Compare N IDLE State */
        tmpcr2 &= ~TIM_CR2_OIS2;
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008e12:	613b      	str	r3, [r7, #16]
        tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008e1a:	613b      	str	r3, [r7, #16]
        /* Set the Output Idle state */
        tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	695b      	ldr	r3, [r3, #20]
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	693a      	ldr	r2, [r7, #16]
 8008e24:	4313      	orrs	r3, r2
 8008e26:	613b      	str	r3, [r7, #16]
        /* Set the Output N Idle state */
        tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	699b      	ldr	r3, [r3, #24]
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	693a      	ldr	r2, [r7, #16]
 8008e30:	4313      	orrs	r3, r2
 8008e32:	613b      	str	r3, [r7, #16]
    }

    /* Write to TIMx CR2 */
    TIMx->CR2 = tmpcr2;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	693a      	ldr	r2, [r7, #16]
 8008e38:	605a      	str	r2, [r3, #4]

    /* Write to TIMx CCMR1 */
    TIMx->CCMR1 = tmpccmrx;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	68fa      	ldr	r2, [r7, #12]
 8008e3e:	619a      	str	r2, [r3, #24]

    /* Set the Capture Compare Register value */
    TIMx->CCR2 = OC_Config->Pulse;
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	685a      	ldr	r2, [r3, #4]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Write to TIMx CCER */
    TIMx->CCER = tmpccer;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	697a      	ldr	r2, [r7, #20]
 8008e4c:	621a      	str	r2, [r3, #32]
}
 8008e4e:	bf00      	nop
 8008e50:	371c      	adds	r7, #28
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr
 8008e5a:	bf00      	nop
 8008e5c:	40010000 	.word	0x40010000

08008e60 <TIM_OC3_SetConfig>:
 * @brief  Timer Output Compare 3 configuration
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config The output configuration structure
 * @retval None
 */
static void TIM_OC3_SetConfig(TIM_TypeDef * TIMx, TIM_OC_InitTypeDef * OC_Config) {
 8008e60:	b480      	push	{r7}
 8008e62:	b087      	sub	sp, #28
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
    uint32_t tmpccmrx;
    uint32_t tmpccer;
    uint32_t tmpcr2;

    /* Disable the Channel 3: Reset the CC2E Bit */
    TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a1b      	ldr	r3, [r3, #32]
 8008e6e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	621a      	str	r2, [r3, #32]

    /* Get the TIMx CCER register value */
    tmpccer = TIMx->CCER;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6a1b      	ldr	r3, [r3, #32]
 8008e7a:	617b      	str	r3, [r7, #20]
    /* Get the TIMx CR2 register value */
    tmpcr2 = TIMx->CR2;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	613b      	str	r3, [r7, #16]

    /* Get the TIMx CCMR2 register value */
    tmpccmrx = TIMx->CCMR2;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	69db      	ldr	r3, [r3, #28]
 8008e86:	60fb      	str	r3, [r7, #12]

    /* Reset the Output Compare mode and Capture/Compare selection Bits */
    tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e8e:	60fb      	str	r3, [r7, #12]
    tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f023 0303 	bic.w	r3, r3, #3
 8008e96:	60fb      	str	r3, [r7, #12]
    /* Select the Output Compare Mode */
    tmpccmrx |= OC_Config->OCMode;
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	60fb      	str	r3, [r7, #12]

    /* Reset the Output Polarity level */
    tmpccer &= ~TIM_CCER_CC3P;
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008ea8:	617b      	str	r3, [r7, #20]
    /* Set the Output Compare Polarity */
    tmpccer |= (OC_Config->OCPolarity << 8U);
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	021b      	lsls	r3, r3, #8
 8008eb0:	697a      	ldr	r2, [r7, #20]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	617b      	str	r3, [r7, #20]

    if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3)) {
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8008f30 <TIM_OC3_SetConfig+0xd0>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d10d      	bne.n	8008eda <TIM_OC3_SetConfig+0x7a>
        assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

        /* Reset the Output N Polarity level */
        tmpccer &= ~TIM_CCER_CC3NP;
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008ec4:	617b      	str	r3, [r7, #20]
        /* Set the Output N Polarity */
        tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	021b      	lsls	r3, r3, #8
 8008ecc:	697a      	ldr	r2, [r7, #20]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	617b      	str	r3, [r7, #20]
        /* Reset the Output N State */
        tmpccer &= ~TIM_CCER_CC3NE;
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ed8:	617b      	str	r3, [r7, #20]
    }

    if (IS_TIM_BREAK_INSTANCE(TIMx)) {
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4a14      	ldr	r2, [pc, #80]	@ (8008f30 <TIM_OC3_SetConfig+0xd0>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d113      	bne.n	8008f0a <TIM_OC3_SetConfig+0xaa>
        /* Check parameters */
        assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
        assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

        /* Reset the Output Compare and Output Compare N IDLE State */
        tmpcr2 &= ~TIM_CR2_OIS3;
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ee8:	613b      	str	r3, [r7, #16]
        tmpcr2 &= ~TIM_CR2_OIS3N;
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008ef0:	613b      	str	r3, [r7, #16]
        /* Set the Output Idle state */
        tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	695b      	ldr	r3, [r3, #20]
 8008ef6:	011b      	lsls	r3, r3, #4
 8008ef8:	693a      	ldr	r2, [r7, #16]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	613b      	str	r3, [r7, #16]
        /* Set the Output N Idle state */
        tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	699b      	ldr	r3, [r3, #24]
 8008f02:	011b      	lsls	r3, r3, #4
 8008f04:	693a      	ldr	r2, [r7, #16]
 8008f06:	4313      	orrs	r3, r2
 8008f08:	613b      	str	r3, [r7, #16]
    }

    /* Write to TIMx CR2 */
    TIMx->CR2 = tmpcr2;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	693a      	ldr	r2, [r7, #16]
 8008f0e:	605a      	str	r2, [r3, #4]

    /* Write to TIMx CCMR2 */
    TIMx->CCMR2 = tmpccmrx;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	68fa      	ldr	r2, [r7, #12]
 8008f14:	61da      	str	r2, [r3, #28]

    /* Set the Capture Compare Register value */
    TIMx->CCR3 = OC_Config->Pulse;
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	685a      	ldr	r2, [r3, #4]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Write to TIMx CCER */
    TIMx->CCER = tmpccer;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	697a      	ldr	r2, [r7, #20]
 8008f22:	621a      	str	r2, [r3, #32]
}
 8008f24:	bf00      	nop
 8008f26:	371c      	adds	r7, #28
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr
 8008f30:	40010000 	.word	0x40010000

08008f34 <TIM_OC4_SetConfig>:
 * @brief  Timer Output Compare 4 configuration
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config The output configuration structure
 * @retval None
 */
static void TIM_OC4_SetConfig(TIM_TypeDef * TIMx, TIM_OC_InitTypeDef * OC_Config) {
 8008f34:	b480      	push	{r7}
 8008f36:	b087      	sub	sp, #28
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
    uint32_t tmpccmrx;
    uint32_t tmpccer;
    uint32_t tmpcr2;

    /* Disable the Channel 4: Reset the CC4E Bit */
    TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a1b      	ldr	r3, [r3, #32]
 8008f42:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	621a      	str	r2, [r3, #32]

    /* Get the TIMx CCER register value */
    tmpccer = TIMx->CCER;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6a1b      	ldr	r3, [r3, #32]
 8008f4e:	613b      	str	r3, [r7, #16]
    /* Get the TIMx CR2 register value */
    tmpcr2 = TIMx->CR2;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	617b      	str	r3, [r7, #20]

    /* Get the TIMx CCMR2 register value */
    tmpccmrx = TIMx->CCMR2;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	69db      	ldr	r3, [r3, #28]
 8008f5a:	60fb      	str	r3, [r7, #12]

    /* Reset the Output Compare mode and Capture/Compare selection Bits */
    tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f62:	60fb      	str	r3, [r7, #12]
    tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f6a:	60fb      	str	r3, [r7, #12]

    /* Select the Output Compare Mode */
    tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	021b      	lsls	r3, r3, #8
 8008f72:	68fa      	ldr	r2, [r7, #12]
 8008f74:	4313      	orrs	r3, r2
 8008f76:	60fb      	str	r3, [r7, #12]

    /* Reset the Output Polarity level */
    tmpccer &= ~TIM_CCER_CC4P;
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Compare Polarity */
    tmpccer |= (OC_Config->OCPolarity << 12U);
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	031b      	lsls	r3, r3, #12
 8008f86:	693a      	ldr	r2, [r7, #16]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	613b      	str	r3, [r7, #16]

    if (IS_TIM_BREAK_INSTANCE(TIMx)) {
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	4a10      	ldr	r2, [pc, #64]	@ (8008fd0 <TIM_OC4_SetConfig+0x9c>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d109      	bne.n	8008fa8 <TIM_OC4_SetConfig+0x74>
        /* Check parameters */
        assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

        /* Reset the Output Compare IDLE State */
        tmpcr2 &= ~TIM_CR2_OIS4;
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f9a:	617b      	str	r3, [r7, #20]

        /* Set the Output Idle state */
        tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	695b      	ldr	r3, [r3, #20]
 8008fa0:	019b      	lsls	r3, r3, #6
 8008fa2:	697a      	ldr	r2, [r7, #20]
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	617b      	str	r3, [r7, #20]
    }

    /* Write to TIMx CR2 */
    TIMx->CR2 = tmpcr2;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	697a      	ldr	r2, [r7, #20]
 8008fac:	605a      	str	r2, [r3, #4]

    /* Write to TIMx CCMR2 */
    TIMx->CCMR2 = tmpccmrx;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	61da      	str	r2, [r3, #28]

    /* Set the Capture Compare Register value */
    TIMx->CCR4 = OC_Config->Pulse;
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	685a      	ldr	r2, [r3, #4]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Write to TIMx CCER */
    TIMx->CCER = tmpccer;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	693a      	ldr	r2, [r7, #16]
 8008fc0:	621a      	str	r2, [r3, #32]
}
 8008fc2:	bf00      	nop
 8008fc4:	371c      	adds	r7, #28
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr
 8008fce:	bf00      	nop
 8008fd0:	40010000 	.word	0x40010000

08008fd4 <TIM_CCxChannelCmd>:
 *            @arg TIM_CHANNEL_4: TIM Channel 4
 * @param  ChannelState specifies the TIM Channel CCxE bit new state.
 *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
 * @retval None
 */
void TIM_CCxChannelCmd(TIM_TypeDef * TIMx, uint32_t Channel, uint32_t ChannelState) {
 8008fd4:	b480      	push	{r7}
 8008fd6:	b087      	sub	sp, #28
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	60f8      	str	r0, [r7, #12]
 8008fdc:	60b9      	str	r1, [r7, #8]
 8008fde:	607a      	str	r2, [r7, #4]

    /* Check the parameters */
    assert_param(IS_TIM_CC1_INSTANCE(TIMx));
    assert_param(IS_TIM_CHANNELS(Channel));

    tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	f003 031f 	and.w	r3, r3, #31
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8008fec:	617b      	str	r3, [r7, #20]

    /* Reset the CCxE Bit */
    TIMx->CCER &= ~tmp;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	6a1a      	ldr	r2, [r3, #32]
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	43db      	mvns	r3, r3
 8008ff6:	401a      	ands	r2, r3
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	621a      	str	r2, [r3, #32]

    /* Set or reset the CCxE Bit */
    TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6a1a      	ldr	r2, [r3, #32]
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	f003 031f 	and.w	r3, r3, #31
 8009006:	6879      	ldr	r1, [r7, #4]
 8009008:	fa01 f303 	lsl.w	r3, r1, r3
 800900c:	431a      	orrs	r2, r3
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	621a      	str	r2, [r3, #32]
}
 8009012:	bf00      	nop
 8009014:	371c      	adds	r7, #28
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr
	...

08009020 <HAL_TIMEx_MasterConfigSynchronization>:
 * @param  sMasterConfig pointer to a TIM_MasterConfigTypeDef structure that
 *         contains the selected trigger output (TRGO) and the Master/Slave
 *         mode.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef * htim, TIM_MasterConfigTypeDef * sMasterConfig) {
 8009020:	b480      	push	{r7}
 8009022:	b085      	sub	sp, #20
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]
    assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
    assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
    assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

    /* Check input state */
    __HAL_LOCK(htim);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009030:	2b01      	cmp	r3, #1
 8009032:	d101      	bne.n	8009038 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009034:	2302      	movs	r3, #2
 8009036:	e050      	b.n	80090da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2201      	movs	r2, #1
 800903c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Change the handler state */
    htim->State = HAL_TIM_STATE_BUSY;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2202      	movs	r2, #2
 8009044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Get the TIMx CR2 register value */
    tmpcr2 = htim->Instance->CR2;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	60fb      	str	r3, [r7, #12]

    /* Get the TIMx SMCR register value */
    tmpsmcr = htim->Instance->SMCR;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	60bb      	str	r3, [r7, #8]

    /* Reset the MMS Bits */
    tmpcr2 &= ~TIM_CR2_MMS;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800905e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO source */
    tmpcr2 |= sMasterConfig->MasterOutputTrigger;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	4313      	orrs	r3, r2
 8009068:	60fb      	str	r3, [r7, #12]

    /* Update TIMx CR2 */
    htim->Instance->CR2 = tmpcr2;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	68fa      	ldr	r2, [r7, #12]
 8009070:	605a      	str	r2, [r3, #4]

    if (IS_TIM_SLAVE_INSTANCE(htim->Instance)) {
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a1c      	ldr	r2, [pc, #112]	@ (80090e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d018      	beq.n	80090ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009084:	d013      	beq.n	80090ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a18      	ldr	r2, [pc, #96]	@ (80090ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d00e      	beq.n	80090ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a16      	ldr	r2, [pc, #88]	@ (80090f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d009      	beq.n	80090ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a15      	ldr	r2, [pc, #84]	@ (80090f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d004      	beq.n	80090ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a13      	ldr	r2, [pc, #76]	@ (80090f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d10c      	bne.n	80090c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
        /* Reset the MSM Bit */
        tmpsmcr &= ~TIM_SMCR_MSM;
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090b4:	60bb      	str	r3, [r7, #8]
        /* Set master mode */
        tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	68ba      	ldr	r2, [r7, #8]
 80090bc:	4313      	orrs	r3, r2
 80090be:	60bb      	str	r3, [r7, #8]

        /* Update TIMx SMCR */
        htim->Instance->SMCR = tmpsmcr;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	68ba      	ldr	r2, [r7, #8]
 80090c6:	609a      	str	r2, [r3, #8]
    }

    /* Change the htim state */
    htim->State = HAL_TIM_STATE_READY;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2201      	movs	r2, #1
 80090cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    __HAL_UNLOCK(htim);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3714      	adds	r7, #20
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	40010000 	.word	0x40010000
 80090ec:	40000400 	.word	0x40000400
 80090f0:	40000800 	.word	0x40000800
 80090f4:	40000c00 	.word	0x40000c00
 80090f8:	40014000 	.word	0x40014000

080090fc <HAL_UART_Init>:
 *         the UART_InitTypeDef and create the associated handle.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef * huart) {
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
    /* Check the UART handle allocation */
    if (huart == NULL) {
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d101      	bne.n	800910e <HAL_UART_Init+0x12>
        return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e03f      	b.n	800918e <HAL_UART_Init+0x92>
        assert_param(IS_UART_INSTANCE(huart->Instance));
    }
    assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
    assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

    if (huart->gState == HAL_UART_STATE_RESET) {
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009114:	b2db      	uxtb	r3, r3
 8009116:	2b00      	cmp	r3, #0
 8009118:	d106      	bne.n	8009128 <HAL_UART_Init+0x2c>
        /* Allocate lock resource and initialize it */
        huart->Lock = HAL_UNLOCKED;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Init the low level hardware */
        huart->MspInitCallback(huart);
#else
        /* Init the low level hardware : GPIO, CLOCK */
        HAL_UART_MspInit(huart);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f7f9 ff24 	bl	8002f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
    }

    huart->gState = HAL_UART_STATE_BUSY;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2224      	movs	r2, #36	@ 0x24
 800912c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the peripheral */
    __HAL_UART_DISABLE(huart);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	68da      	ldr	r2, [r3, #12]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800913e:	60da      	str	r2, [r3, #12]

    /* Set the UART Communication parameters */
    UART_SetConfig(huart);
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 faa5 	bl	8009690 <UART_SetConfig>

    /* In asynchronous mode, the following bits must be kept cleared:
       - LINEN and CLKEN bits in the USART_CR2 register,
       - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
    CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	691a      	ldr	r2, [r3, #16]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009154:	611a      	str	r2, [r3, #16]
    CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	695a      	ldr	r2, [r3, #20]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009164:	615a      	str	r2, [r3, #20]

    /* Enable the peripheral */
    __HAL_UART_ENABLE(huart);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	68da      	ldr	r2, [r3, #12]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009174:	60da      	str	r2, [r3, #12]

    /* Initialize the UART state */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_READY;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2220      	movs	r2, #32
 8009180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2220      	movs	r2, #32
 8009188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    return HAL_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3708      	adds	r7, #8
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <HAL_UART_Receive_DMA>:
 * @param  pData Pointer to data buffer (u8 or u16 data elements).
 * @param  Size  Amount of data elements (u8 or u16) to be received.
 * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef * huart, uint8_t * pData, uint16_t Size) {
 8009196:	b580      	push	{r7, lr}
 8009198:	b084      	sub	sp, #16
 800919a:	af00      	add	r7, sp, #0
 800919c:	60f8      	str	r0, [r7, #12]
 800919e:	60b9      	str	r1, [r7, #8]
 80091a0:	4613      	mov	r3, r2
 80091a2:	80fb      	strh	r3, [r7, #6]
    /* Check that a Rx process is not already ongoing */
    if (huart->RxState == HAL_UART_STATE_READY) {
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	2b20      	cmp	r3, #32
 80091ae:	d11d      	bne.n	80091ec <HAL_UART_Receive_DMA+0x56>
        if ((pData == NULL) || (Size == 0U)) {
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d002      	beq.n	80091bc <HAL_UART_Receive_DMA+0x26>
 80091b6:	88fb      	ldrh	r3, [r7, #6]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d101      	bne.n	80091c0 <HAL_UART_Receive_DMA+0x2a>
            return HAL_ERROR;
 80091bc:	2301      	movs	r3, #1
 80091be:	e016      	b.n	80091ee <HAL_UART_Receive_DMA+0x58>
        }

        /* Process Locked */
        __HAL_LOCK(huart);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d101      	bne.n	80091ce <HAL_UART_Receive_DMA+0x38>
 80091ca:	2302      	movs	r3, #2
 80091cc:	e00f      	b.n	80091ee <HAL_UART_Receive_DMA+0x58>
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2201      	movs	r2, #1
 80091d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Set Reception type to Standard reception */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2200      	movs	r2, #0
 80091da:	631a      	str	r2, [r3, #48]	@ 0x30

        return (UART_Start_Receive_DMA(huart, pData, Size));
 80091dc:	88fb      	ldrh	r3, [r7, #6]
 80091de:	461a      	mov	r2, r3
 80091e0:	68b9      	ldr	r1, [r7, #8]
 80091e2:	68f8      	ldr	r0, [r7, #12]
 80091e4:	f000 f92a 	bl	800943c <UART_Start_Receive_DMA>
 80091e8:	4603      	mov	r3, r0
 80091ea:	e000      	b.n	80091ee <HAL_UART_Receive_DMA+0x58>
    } else {
        return HAL_BUSY;
 80091ec:	2302      	movs	r3, #2
    }
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <HAL_UART_RxCpltCallback>:
 * @brief  Rx Transfer completed callbacks.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart) {
 80091f6:	b480      	push	{r7}
 80091f8:	b083      	sub	sp, #12
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(huart);
    /* NOTE: This function should not be modified, when the callback is needed,
             the HAL_UART_RxCpltCallback could be implemented in the user file
     */
}
 80091fe:	bf00      	nop
 8009200:	370c      	adds	r7, #12
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr

0800920a <HAL_UART_RxHalfCpltCallback>:
 * @brief  Rx Half Transfer completed callbacks.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef * huart) {
 800920a:	b480      	push	{r7}
 800920c:	b083      	sub	sp, #12
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(huart);
    /* NOTE: This function should not be modified, when the callback is needed,
             the HAL_UART_RxHalfCpltCallback could be implemented in the user file
     */
}
 8009212:	bf00      	nop
 8009214:	370c      	adds	r7, #12
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr

0800921e <HAL_UART_ErrorCallback>:
 * @brief  UART error callbacks.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef * huart) {
 800921e:	b480      	push	{r7}
 8009220:	b083      	sub	sp, #12
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(huart);
    /* NOTE: This function should not be modified, when the callback is needed,
             the HAL_UART_ErrorCallback could be implemented in the user file
     */
}
 8009226:	bf00      	nop
 8009228:	370c      	adds	r7, #12
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr

08009232 <HAL_UARTEx_RxEventCallback>:
 * @param  huart UART handle
 * @param  Size  Number of data available in application reception buffer (indicates a position in
 *               reception buffer until which, data are available)
 * @retval None
 */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef * huart, uint16_t Size) {
 8009232:	b480      	push	{r7}
 8009234:	b083      	sub	sp, #12
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	460b      	mov	r3, r1
 800923c:	807b      	strh	r3, [r7, #2]
    UNUSED(Size);

    /* NOTE : This function should not be modified, when the callback is needed,
              the HAL_UARTEx_RxEventCallback can be implemented in the user file.
     */
}
 800923e:	bf00      	nop
 8009240:	370c      	adds	r7, #12
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr

0800924a <UART_DMAReceiveCplt>:
 * @brief  DMA UART receive process complete callback.
 * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA module.
 * @retval None
 */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef * hdma) {
 800924a:	b580      	push	{r7, lr}
 800924c:	b09c      	sub	sp, #112	@ 0x70
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009256:	66fb      	str	r3, [r7, #108]	@ 0x6c
    /* DMA Normal mode*/
    if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U) {
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009262:	2b00      	cmp	r3, #0
 8009264:	d172      	bne.n	800934c <UART_DMAReceiveCplt+0x102>
        huart->RxXferCount = 0U;
 8009266:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009268:	2200      	movs	r2, #0
 800926a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800926c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	330c      	adds	r3, #12
 8009272:	64fb      	str	r3, [r7, #76]	@ 0x4c
  \return        value of type uint32_t at (*ptr)
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t * addr) {
    uint32_t result;

    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 8009274:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009276:	e853 3f00 	ldrex	r3, [r3]
 800927a:	64bb      	str	r3, [r7, #72]	@ 0x48
    return (result);
 800927c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800927e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009282:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009284:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	330c      	adds	r3, #12
 800928a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800928c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800928e:	657b      	str	r3, [r7, #84]	@ 0x54
  \return          1  Function failed
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t * addr) {
    uint32_t result;

    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 8009290:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009292:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009294:	e841 2300 	strex	r3, r2, [r1]
 8009298:	653b      	str	r3, [r7, #80]	@ 0x50
    return (result);
 800929a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800929c:	2b00      	cmp	r3, #0
 800929e:	d1e5      	bne.n	800926c <UART_DMAReceiveCplt+0x22>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	3314      	adds	r3, #20
 80092a6:	63bb      	str	r3, [r7, #56]	@ 0x38
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 80092a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092aa:	e853 3f00 	ldrex	r3, [r3]
 80092ae:	637b      	str	r3, [r7, #52]	@ 0x34
    return (result);
 80092b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092b2:	f023 0301 	bic.w	r3, r3, #1
 80092b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80092b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	3314      	adds	r3, #20
 80092be:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80092c0:	647a      	str	r2, [r7, #68]	@ 0x44
 80092c2:	643b      	str	r3, [r7, #64]	@ 0x40
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 80092c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80092c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092c8:	e841 2300 	strex	r3, r2, [r1]
 80092cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return (result);
 80092ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d1e5      	bne.n	80092a0 <UART_DMAReceiveCplt+0x56>

        /* Disable the DMA transfer for the receiver request by setting the DMAR bit
           in the UART CR3 register */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	3314      	adds	r3, #20
 80092da:	627b      	str	r3, [r7, #36]	@ 0x24
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 80092dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092de:	e853 3f00 	ldrex	r3, [r3]
 80092e2:	623b      	str	r3, [r7, #32]
    return (result);
 80092e4:	6a3b      	ldr	r3, [r7, #32]
 80092e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80092ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	3314      	adds	r3, #20
 80092f2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80092f4:	633a      	str	r2, [r7, #48]	@ 0x30
 80092f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 80092f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092fc:	e841 2300 	strex	r3, r2, [r1]
 8009300:	62bb      	str	r3, [r7, #40]	@ 0x28
    return (result);
 8009302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009304:	2b00      	cmp	r3, #0
 8009306:	d1e5      	bne.n	80092d4 <UART_DMAReceiveCplt+0x8a>

        /* At end of Rx process, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009308:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800930a:	2220      	movs	r2, #32
 800930c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 8009310:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009314:	2b01      	cmp	r3, #1
 8009316:	d119      	bne.n	800934c <UART_DMAReceiveCplt+0x102>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009318:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	330c      	adds	r3, #12
 800931e:	613b      	str	r3, [r7, #16]
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	e853 3f00 	ldrex	r3, [r3]
 8009326:	60fb      	str	r3, [r7, #12]
    return (result);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f023 0310 	bic.w	r3, r3, #16
 800932e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009330:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	330c      	adds	r3, #12
 8009336:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009338:	61fa      	str	r2, [r7, #28]
 800933a:	61bb      	str	r3, [r7, #24]
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 800933c:	69b9      	ldr	r1, [r7, #24]
 800933e:	69fa      	ldr	r2, [r7, #28]
 8009340:	e841 2300 	strex	r3, r2, [r1]
 8009344:	617b      	str	r3, [r7, #20]
    return (result);
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d1e5      	bne.n	8009318 <UART_DMAReceiveCplt+0xce>
        }
    }

    /* Check current reception Mode :
       If Reception till IDLE event has been selected : use Rx Event callback */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 800934c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800934e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009350:	2b01      	cmp	r3, #1
 8009352:	d106      	bne.n	8009362 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009354:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009356:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009358:	4619      	mov	r1, r3
 800935a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800935c:	f7ff ff69 	bl	8009232 <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    }
}
 8009360:	e002      	b.n	8009368 <UART_DMAReceiveCplt+0x11e>
        HAL_UART_RxCpltCallback(huart);
 8009362:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009364:	f7ff ff47 	bl	80091f6 <HAL_UART_RxCpltCallback>
}
 8009368:	bf00      	nop
 800936a:	3770      	adds	r7, #112	@ 0x70
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <UART_DMARxHalfCplt>:
 * @brief DMA UART receive process half complete callback
 * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA module.
 * @retval None
 */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef * hdma) {
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800937c:	60fb      	str	r3, [r7, #12]

    /* Check current reception Mode :
       If Reception till IDLE event has been selected : use Rx Event callback */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009382:	2b01      	cmp	r3, #1
 8009384:	d108      	bne.n	8009398 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800938a:	085b      	lsrs	r3, r3, #1
 800938c:	b29b      	uxth	r3, r3
 800938e:	4619      	mov	r1, r3
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	f7ff ff4e 	bl	8009232 <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx Half complete callback*/
        HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    }
}
 8009396:	e002      	b.n	800939e <UART_DMARxHalfCplt+0x2e>
        HAL_UART_RxHalfCpltCallback(huart);
 8009398:	68f8      	ldr	r0, [r7, #12]
 800939a:	f7ff ff36 	bl	800920a <HAL_UART_RxHalfCpltCallback>
}
 800939e:	bf00      	nop
 80093a0:	3710      	adds	r7, #16
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <UART_DMAError>:
 * @brief  DMA UART communication error callback.
 * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA module.
 * @retval None
 */
static void UART_DMAError(DMA_HandleTypeDef * hdma) {
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b084      	sub	sp, #16
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
    uint32_t dmarequest = 0x00U;
 80093ae:	2300      	movs	r3, #0
 80093b0:	60fb      	str	r3, [r7, #12]
    UART_HandleTypeDef * huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093b6:	60bb      	str	r3, [r7, #8]

    /* Stop UART DMA Tx request if ongoing */
    dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	695b      	ldr	r3, [r3, #20]
 80093be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093c2:	2b80      	cmp	r3, #128	@ 0x80
 80093c4:	bf0c      	ite	eq
 80093c6:	2301      	moveq	r3, #1
 80093c8:	2300      	movne	r3, #0
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	60fb      	str	r3, [r7, #12]
    if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest) {
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	2b21      	cmp	r3, #33	@ 0x21
 80093d8:	d108      	bne.n	80093ec <UART_DMAError+0x46>
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d005      	beq.n	80093ec <UART_DMAError+0x46>
        huart->TxXferCount = 0x00U;
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	2200      	movs	r2, #0
 80093e4:	84da      	strh	r2, [r3, #38]	@ 0x26
        UART_EndTxTransfer(huart);
 80093e6:	68b8      	ldr	r0, [r7, #8]
 80093e8:	f000 f8c6 	bl	8009578 <UART_EndTxTransfer>
    }

    /* Stop UART DMA Rx request if ongoing */
    dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	695b      	ldr	r3, [r3, #20]
 80093f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093f6:	2b40      	cmp	r3, #64	@ 0x40
 80093f8:	bf0c      	ite	eq
 80093fa:	2301      	moveq	r3, #1
 80093fc:	2300      	movne	r3, #0
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	60fb      	str	r3, [r7, #12]
    if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest) {
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009408:	b2db      	uxtb	r3, r3
 800940a:	2b22      	cmp	r3, #34	@ 0x22
 800940c:	d108      	bne.n	8009420 <UART_DMAError+0x7a>
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d005      	beq.n	8009420 <UART_DMAError+0x7a>
        huart->RxXferCount = 0x00U;
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	2200      	movs	r2, #0
 8009418:	85da      	strh	r2, [r3, #46]	@ 0x2e
        UART_EndRxTransfer(huart);
 800941a:	68b8      	ldr	r0, [r7, #8]
 800941c:	f000 f8d4 	bl	80095c8 <UART_EndRxTransfer>
    }

    huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009424:	f043 0210 	orr.w	r2, r3, #16
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    huart->ErrorCallback(huart);
#else
    /*Call legacy weak error callback*/
    HAL_UART_ErrorCallback(huart);
 800942c:	68b8      	ldr	r0, [r7, #8]
 800942e:	f7ff fef6 	bl	800921e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009432:	bf00      	nop
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
	...

0800943c <UART_Start_Receive_DMA>:
 * @param  huart UART handle.
 * @param  pData Pointer to data buffer (u8 or u16 data elements).
 * @param  Size  Amount of data elements (u8 or u16) to be received.
 * @retval HAL status
 */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef * huart, uint8_t * pData, uint16_t Size) {
 800943c:	b580      	push	{r7, lr}
 800943e:	b098      	sub	sp, #96	@ 0x60
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	4613      	mov	r3, r2
 8009448:	80fb      	strh	r3, [r7, #6]
    uint32_t * tmp;

    huart->pRxBuffPtr = pData;
 800944a:	68ba      	ldr	r2, [r7, #8]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	629a      	str	r2, [r3, #40]	@ 0x28
    huart->RxXferSize = Size;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	88fa      	ldrh	r2, [r7, #6]
 8009454:	859a      	strh	r2, [r3, #44]	@ 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2200      	movs	r2, #0
 800945a:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2222      	movs	r2, #34	@ 0x22
 8009460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009468:	4a40      	ldr	r2, [pc, #256]	@ (800956c <UART_Start_Receive_DMA+0x130>)
 800946a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009470:	4a3f      	ldr	r2, [pc, #252]	@ (8009570 <UART_Start_Receive_DMA+0x134>)
 8009472:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009478:	4a3e      	ldr	r2, [pc, #248]	@ (8009574 <UART_Start_Receive_DMA+0x138>)
 800947a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009480:	2200      	movs	r2, #0
 8009482:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8009484:	f107 0308 	add.w	r3, r7, #8
 8009488:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	3304      	adds	r3, #4
 8009494:	4619      	mov	r1, r3
 8009496:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	88fb      	ldrh	r3, [r7, #6]
 800949c:	f7fc f84a 	bl	8005534 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80094a0:	2300      	movs	r3, #0
 80094a2:	613b      	str	r3, [r7, #16]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	613b      	str	r3, [r7, #16]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	613b      	str	r3, [r7, #16]
 80094b4:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2200      	movs	r2, #0
 80094ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if (huart->Init.Parity != UART_PARITY_NONE) {
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d019      	beq.n	80094fa <UART_Start_Receive_DMA+0xbe>
        /* Enable the UART Parity Error Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	330c      	adds	r3, #12
 80094cc:	643b      	str	r3, [r7, #64]	@ 0x40
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 80094ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094d0:	e853 3f00 	ldrex	r3, [r3]
 80094d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return (result);
 80094d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80094dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	330c      	adds	r3, #12
 80094e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80094e6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80094e8:	64bb      	str	r3, [r7, #72]	@ 0x48
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 80094ea:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80094ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80094ee:	e841 2300 	strex	r3, r2, [r1]
 80094f2:	647b      	str	r3, [r7, #68]	@ 0x44
    return (result);
 80094f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d1e5      	bne.n	80094c6 <UART_Start_Receive_DMA+0x8a>
    }

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	3314      	adds	r3, #20
 8009500:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 8009502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009504:	e853 3f00 	ldrex	r3, [r3]
 8009508:	62bb      	str	r3, [r7, #40]	@ 0x28
    return (result);
 800950a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800950c:	f043 0301 	orr.w	r3, r3, #1
 8009510:	657b      	str	r3, [r7, #84]	@ 0x54
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	3314      	adds	r3, #20
 8009518:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800951a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800951c:	637b      	str	r3, [r7, #52]	@ 0x34
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 800951e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009520:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009522:	e841 2300 	strex	r3, r2, [r1]
 8009526:	633b      	str	r3, [r7, #48]	@ 0x30
    return (result);
 8009528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800952a:	2b00      	cmp	r3, #0
 800952c:	d1e5      	bne.n	80094fa <UART_Start_Receive_DMA+0xbe>

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	3314      	adds	r3, #20
 8009534:	61bb      	str	r3, [r7, #24]
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	e853 3f00 	ldrex	r3, [r3]
 800953c:	617b      	str	r3, [r7, #20]
    return (result);
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009544:	653b      	str	r3, [r7, #80]	@ 0x50
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	3314      	adds	r3, #20
 800954c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800954e:	627a      	str	r2, [r7, #36]	@ 0x24
 8009550:	623b      	str	r3, [r7, #32]
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 8009552:	6a39      	ldr	r1, [r7, #32]
 8009554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009556:	e841 2300 	strex	r3, r2, [r1]
 800955a:	61fb      	str	r3, [r7, #28]
    return (result);
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d1e5      	bne.n	800952e <UART_Start_Receive_DMA+0xf2>

    return HAL_OK;
 8009562:	2300      	movs	r3, #0
}
 8009564:	4618      	mov	r0, r3
 8009566:	3760      	adds	r7, #96	@ 0x60
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}
 800956c:	0800924b 	.word	0x0800924b
 8009570:	08009371 	.word	0x08009371
 8009574:	080093a7 	.word	0x080093a7

08009578 <UART_EndTxTransfer>:
/**
 * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
 * @param  huart UART handle.
 * @retval None
 */
static void UART_EndTxTransfer(UART_HandleTypeDef * huart) {
 8009578:	b480      	push	{r7}
 800957a:	b089      	sub	sp, #36	@ 0x24
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
    /* Disable TXEIE and TCIE interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	330c      	adds	r3, #12
 8009586:	60fb      	str	r3, [r7, #12]
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	e853 3f00 	ldrex	r3, [r3]
 800958e:	60bb      	str	r3, [r7, #8]
    return (result);
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009596:	61fb      	str	r3, [r7, #28]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	330c      	adds	r3, #12
 800959e:	69fa      	ldr	r2, [r7, #28]
 80095a0:	61ba      	str	r2, [r7, #24]
 80095a2:	617b      	str	r3, [r7, #20]
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 80095a4:	6979      	ldr	r1, [r7, #20]
 80095a6:	69ba      	ldr	r2, [r7, #24]
 80095a8:	e841 2300 	strex	r3, r2, [r1]
 80095ac:	613b      	str	r3, [r7, #16]
    return (result);
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d1e5      	bne.n	8009580 <UART_EndTxTransfer+0x8>

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2220      	movs	r2, #32
 80095b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 80095bc:	bf00      	nop
 80095be:	3724      	adds	r7, #36	@ 0x24
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <UART_EndRxTransfer>:
/**
 * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
 * @param  huart UART handle.
 * @retval None
 */
static void UART_EndRxTransfer(UART_HandleTypeDef * huart) {
 80095c8:	b480      	push	{r7}
 80095ca:	b095      	sub	sp, #84	@ 0x54
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	330c      	adds	r3, #12
 80095d6:	637b      	str	r3, [r7, #52]	@ 0x34
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 80095d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095da:	e853 3f00 	ldrex	r3, [r3]
 80095de:	633b      	str	r3, [r7, #48]	@ 0x30
    return (result);
 80095e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	330c      	adds	r3, #12
 80095ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80095f0:	643a      	str	r2, [r7, #64]	@ 0x40
 80095f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 80095f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80095f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80095f8:	e841 2300 	strex	r3, r2, [r1]
 80095fc:	63bb      	str	r3, [r7, #56]	@ 0x38
    return (result);
 80095fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009600:	2b00      	cmp	r3, #0
 8009602:	d1e5      	bne.n	80095d0 <UART_EndRxTransfer+0x8>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	3314      	adds	r3, #20
 800960a:	623b      	str	r3, [r7, #32]
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 800960c:	6a3b      	ldr	r3, [r7, #32]
 800960e:	e853 3f00 	ldrex	r3, [r3]
 8009612:	61fb      	str	r3, [r7, #28]
    return (result);
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	f023 0301 	bic.w	r3, r3, #1
 800961a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	3314      	adds	r3, #20
 8009622:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009624:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009626:	62bb      	str	r3, [r7, #40]	@ 0x28
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 8009628:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800962a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800962c:	e841 2300 	strex	r3, r2, [r1]
 8009630:	627b      	str	r3, [r7, #36]	@ 0x24
    return (result);
 8009632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009634:	2b00      	cmp	r3, #0
 8009636:	d1e5      	bne.n	8009604 <UART_EndRxTransfer+0x3c>

    /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800963c:	2b01      	cmp	r3, #1
 800963e:	d119      	bne.n	8009674 <UART_EndRxTransfer+0xac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	330c      	adds	r3, #12
 8009646:	60fb      	str	r3, [r7, #12]
    __ASM volatile("ldrex %0, %1" : "=r"(result) : "Q"(*addr));
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	e853 3f00 	ldrex	r3, [r3]
 800964e:	60bb      	str	r3, [r7, #8]
    return (result);
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	f023 0310 	bic.w	r3, r3, #16
 8009656:	647b      	str	r3, [r7, #68]	@ 0x44
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	330c      	adds	r3, #12
 800965e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009660:	61ba      	str	r2, [r7, #24]
 8009662:	617b      	str	r3, [r7, #20]
    __ASM volatile("strex %0, %2, %1" : "=&r"(result), "=Q"(*addr) : "r"(value));
 8009664:	6979      	ldr	r1, [r7, #20]
 8009666:	69ba      	ldr	r2, [r7, #24]
 8009668:	e841 2300 	strex	r3, r2, [r1]
 800966c:	613b      	str	r3, [r7, #16]
    return (result);
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d1e5      	bne.n	8009640 <UART_EndRxTransfer+0x78>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2220      	movs	r2, #32
 8009678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009682:	bf00      	nop
 8009684:	3754      	adds	r7, #84	@ 0x54
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr
	...

08009690 <UART_SetConfig>:
 * @brief  Configures the UART peripheral.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
static void UART_SetConfig(UART_HandleTypeDef * huart) {
 8009690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009694:	b0c0      	sub	sp, #256	@ 0x100
 8009696:	af00      	add	r7, sp, #0
 8009698:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
    assert_param(IS_UART_MODE(huart->Init.Mode));

    /*-------------------------- USART CR2 Configuration -----------------------*/
    /* Configure the UART Stop Bits: Set STOP[13:12] bits
       according to huart->Init.StopBits value */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800969c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80096a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096ac:	68d9      	ldr	r1, [r3, #12]
 80096ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	ea40 0301 	orr.w	r3, r0, r1
 80096b8:	6113      	str	r3, [r2, #16]
       Set the M bits according to huart->Init.WordLength value
       Set PCE and PS bits according to huart->Init.Parity value
       Set TE and RE bits according to huart->Init.Mode value
       Set OVER8 bit according to huart->Init.OverSampling value */

    tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80096ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096be:	689a      	ldr	r2, [r3, #8]
 80096c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	431a      	orrs	r2, r3
 80096c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096cc:	695b      	ldr	r3, [r3, #20]
 80096ce:	431a      	orrs	r2, r3
 80096d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096d4:	69db      	ldr	r3, [r3, #28]
 80096d6:	4313      	orrs	r3, r2
 80096d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    MODIFY_REG(huart->Instance->CR1, (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), tmpreg);
 80096dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80096e8:	f021 010c 	bic.w	r1, r1, #12
 80096ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80096f6:	430b      	orrs	r3, r1
 80096f8:	60d3      	str	r3, [r2, #12]

    /*-------------------------- USART CR3 Configuration -----------------------*/
    /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
    MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80096fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	695b      	ldr	r3, [r3, #20]
 8009702:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800970a:	6999      	ldr	r1, [r3, #24]
 800970c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	ea40 0301 	orr.w	r3, r0, r1
 8009716:	6153      	str	r3, [r2, #20]
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10)) {
        pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6)) {
 8009718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	4b8f      	ldr	r3, [pc, #572]	@ (800995c <UART_SetConfig+0x2cc>)
 8009720:	429a      	cmp	r2, r3
 8009722:	d005      	beq.n	8009730 <UART_SetConfig+0xa0>
 8009724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	4b8d      	ldr	r3, [pc, #564]	@ (8009960 <UART_SetConfig+0x2d0>)
 800972c:	429a      	cmp	r2, r3
 800972e:	d104      	bne.n	800973a <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetPCLK2Freq();
 8009730:	f7ff f86e 	bl	8008810 <HAL_RCC_GetPCLK2Freq>
 8009734:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009738:	e003      	b.n	8009742 <UART_SetConfig+0xb2>
    if (huart->Instance == USART1) {
        pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else {
        pclk = HAL_RCC_GetPCLK1Freq();
 800973a:	f7ff f855 	bl	80087e8 <HAL_RCC_GetPCLK1Freq>
 800973e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
    /*-------------------------- USART BRR Configuration ---------------------*/
    if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 8009742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009746:	69db      	ldr	r3, [r3, #28]
 8009748:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800974c:	f040 810c 	bne.w	8009968 <UART_SetConfig+0x2d8>
        huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009750:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009754:	2200      	movs	r2, #0
 8009756:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800975a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800975e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009762:	4622      	mov	r2, r4
 8009764:	462b      	mov	r3, r5
 8009766:	1891      	adds	r1, r2, r2
 8009768:	65b9      	str	r1, [r7, #88]	@ 0x58
 800976a:	415b      	adcs	r3, r3
 800976c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800976e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009772:	4621      	mov	r1, r4
 8009774:	eb12 0801 	adds.w	r8, r2, r1
 8009778:	4629      	mov	r1, r5
 800977a:	eb43 0901 	adc.w	r9, r3, r1
 800977e:	f04f 0200 	mov.w	r2, #0
 8009782:	f04f 0300 	mov.w	r3, #0
 8009786:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800978a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800978e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009792:	4690      	mov	r8, r2
 8009794:	4699      	mov	r9, r3
 8009796:	4623      	mov	r3, r4
 8009798:	eb18 0303 	adds.w	r3, r8, r3
 800979c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80097a0:	462b      	mov	r3, r5
 80097a2:	eb49 0303 	adc.w	r3, r9, r3
 80097a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80097aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80097b6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80097ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80097be:	460b      	mov	r3, r1
 80097c0:	18db      	adds	r3, r3, r3
 80097c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80097c4:	4613      	mov	r3, r2
 80097c6:	eb42 0303 	adc.w	r3, r2, r3
 80097ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80097cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80097d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80097d4:	f7f7 fa60 	bl	8000c98 <__aeabi_uldivmod>
 80097d8:	4602      	mov	r2, r0
 80097da:	460b      	mov	r3, r1
 80097dc:	4b61      	ldr	r3, [pc, #388]	@ (8009964 <UART_SetConfig+0x2d4>)
 80097de:	fba3 2302 	umull	r2, r3, r3, r2
 80097e2:	095b      	lsrs	r3, r3, #5
 80097e4:	011c      	lsls	r4, r3, #4
 80097e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097ea:	2200      	movs	r2, #0
 80097ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80097f0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80097f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80097f8:	4642      	mov	r2, r8
 80097fa:	464b      	mov	r3, r9
 80097fc:	1891      	adds	r1, r2, r2
 80097fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009800:	415b      	adcs	r3, r3
 8009802:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009804:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009808:	4641      	mov	r1, r8
 800980a:	eb12 0a01 	adds.w	sl, r2, r1
 800980e:	4649      	mov	r1, r9
 8009810:	eb43 0b01 	adc.w	fp, r3, r1
 8009814:	f04f 0200 	mov.w	r2, #0
 8009818:	f04f 0300 	mov.w	r3, #0
 800981c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009820:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009824:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009828:	4692      	mov	sl, r2
 800982a:	469b      	mov	fp, r3
 800982c:	4643      	mov	r3, r8
 800982e:	eb1a 0303 	adds.w	r3, sl, r3
 8009832:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009836:	464b      	mov	r3, r9
 8009838:	eb4b 0303 	adc.w	r3, fp, r3
 800983c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800984c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009850:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009854:	460b      	mov	r3, r1
 8009856:	18db      	adds	r3, r3, r3
 8009858:	643b      	str	r3, [r7, #64]	@ 0x40
 800985a:	4613      	mov	r3, r2
 800985c:	eb42 0303 	adc.w	r3, r2, r3
 8009860:	647b      	str	r3, [r7, #68]	@ 0x44
 8009862:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009866:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800986a:	f7f7 fa15 	bl	8000c98 <__aeabi_uldivmod>
 800986e:	4602      	mov	r2, r0
 8009870:	460b      	mov	r3, r1
 8009872:	4611      	mov	r1, r2
 8009874:	4b3b      	ldr	r3, [pc, #236]	@ (8009964 <UART_SetConfig+0x2d4>)
 8009876:	fba3 2301 	umull	r2, r3, r3, r1
 800987a:	095b      	lsrs	r3, r3, #5
 800987c:	2264      	movs	r2, #100	@ 0x64
 800987e:	fb02 f303 	mul.w	r3, r2, r3
 8009882:	1acb      	subs	r3, r1, r3
 8009884:	00db      	lsls	r3, r3, #3
 8009886:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800988a:	4b36      	ldr	r3, [pc, #216]	@ (8009964 <UART_SetConfig+0x2d4>)
 800988c:	fba3 2302 	umull	r2, r3, r3, r2
 8009890:	095b      	lsrs	r3, r3, #5
 8009892:	005b      	lsls	r3, r3, #1
 8009894:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009898:	441c      	add	r4, r3
 800989a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800989e:	2200      	movs	r2, #0
 80098a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80098a4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80098a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80098ac:	4642      	mov	r2, r8
 80098ae:	464b      	mov	r3, r9
 80098b0:	1891      	adds	r1, r2, r2
 80098b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80098b4:	415b      	adcs	r3, r3
 80098b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80098bc:	4641      	mov	r1, r8
 80098be:	1851      	adds	r1, r2, r1
 80098c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80098c2:	4649      	mov	r1, r9
 80098c4:	414b      	adcs	r3, r1
 80098c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80098c8:	f04f 0200 	mov.w	r2, #0
 80098cc:	f04f 0300 	mov.w	r3, #0
 80098d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80098d4:	4659      	mov	r1, fp
 80098d6:	00cb      	lsls	r3, r1, #3
 80098d8:	4651      	mov	r1, sl
 80098da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098de:	4651      	mov	r1, sl
 80098e0:	00ca      	lsls	r2, r1, #3
 80098e2:	4610      	mov	r0, r2
 80098e4:	4619      	mov	r1, r3
 80098e6:	4603      	mov	r3, r0
 80098e8:	4642      	mov	r2, r8
 80098ea:	189b      	adds	r3, r3, r2
 80098ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80098f0:	464b      	mov	r3, r9
 80098f2:	460a      	mov	r2, r1
 80098f4:	eb42 0303 	adc.w	r3, r2, r3
 80098f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80098fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	2200      	movs	r2, #0
 8009904:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009908:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800990c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009910:	460b      	mov	r3, r1
 8009912:	18db      	adds	r3, r3, r3
 8009914:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009916:	4613      	mov	r3, r2
 8009918:	eb42 0303 	adc.w	r3, r2, r3
 800991c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800991e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009922:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009926:	f7f7 f9b7 	bl	8000c98 <__aeabi_uldivmod>
 800992a:	4602      	mov	r2, r0
 800992c:	460b      	mov	r3, r1
 800992e:	4b0d      	ldr	r3, [pc, #52]	@ (8009964 <UART_SetConfig+0x2d4>)
 8009930:	fba3 1302 	umull	r1, r3, r3, r2
 8009934:	095b      	lsrs	r3, r3, #5
 8009936:	2164      	movs	r1, #100	@ 0x64
 8009938:	fb01 f303 	mul.w	r3, r1, r3
 800993c:	1ad3      	subs	r3, r2, r3
 800993e:	00db      	lsls	r3, r3, #3
 8009940:	3332      	adds	r3, #50	@ 0x32
 8009942:	4a08      	ldr	r2, [pc, #32]	@ (8009964 <UART_SetConfig+0x2d4>)
 8009944:	fba2 2303 	umull	r2, r3, r2, r3
 8009948:	095b      	lsrs	r3, r3, #5
 800994a:	f003 0207 	and.w	r2, r3, #7
 800994e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4422      	add	r2, r4
 8009956:	609a      	str	r2, [r3, #8]
    } else {
        huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
}
 8009958:	e106      	b.n	8009b68 <UART_SetConfig+0x4d8>
 800995a:	bf00      	nop
 800995c:	40011000 	.word	0x40011000
 8009960:	40011400 	.word	0x40011400
 8009964:	51eb851f 	.word	0x51eb851f
        huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009968:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800996c:	2200      	movs	r2, #0
 800996e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009972:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009976:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800997a:	4642      	mov	r2, r8
 800997c:	464b      	mov	r3, r9
 800997e:	1891      	adds	r1, r2, r2
 8009980:	6239      	str	r1, [r7, #32]
 8009982:	415b      	adcs	r3, r3
 8009984:	627b      	str	r3, [r7, #36]	@ 0x24
 8009986:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800998a:	4641      	mov	r1, r8
 800998c:	1854      	adds	r4, r2, r1
 800998e:	4649      	mov	r1, r9
 8009990:	eb43 0501 	adc.w	r5, r3, r1
 8009994:	f04f 0200 	mov.w	r2, #0
 8009998:	f04f 0300 	mov.w	r3, #0
 800999c:	00eb      	lsls	r3, r5, #3
 800999e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80099a2:	00e2      	lsls	r2, r4, #3
 80099a4:	4614      	mov	r4, r2
 80099a6:	461d      	mov	r5, r3
 80099a8:	4643      	mov	r3, r8
 80099aa:	18e3      	adds	r3, r4, r3
 80099ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80099b0:	464b      	mov	r3, r9
 80099b2:	eb45 0303 	adc.w	r3, r5, r3
 80099b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80099ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80099c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80099ca:	f04f 0200 	mov.w	r2, #0
 80099ce:	f04f 0300 	mov.w	r3, #0
 80099d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80099d6:	4629      	mov	r1, r5
 80099d8:	008b      	lsls	r3, r1, #2
 80099da:	4621      	mov	r1, r4
 80099dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099e0:	4621      	mov	r1, r4
 80099e2:	008a      	lsls	r2, r1, #2
 80099e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80099e8:	f7f7 f956 	bl	8000c98 <__aeabi_uldivmod>
 80099ec:	4602      	mov	r2, r0
 80099ee:	460b      	mov	r3, r1
 80099f0:	4b60      	ldr	r3, [pc, #384]	@ (8009b74 <UART_SetConfig+0x4e4>)
 80099f2:	fba3 2302 	umull	r2, r3, r3, r2
 80099f6:	095b      	lsrs	r3, r3, #5
 80099f8:	011c      	lsls	r4, r3, #4
 80099fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80099fe:	2200      	movs	r2, #0
 8009a00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009a04:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009a08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009a0c:	4642      	mov	r2, r8
 8009a0e:	464b      	mov	r3, r9
 8009a10:	1891      	adds	r1, r2, r2
 8009a12:	61b9      	str	r1, [r7, #24]
 8009a14:	415b      	adcs	r3, r3
 8009a16:	61fb      	str	r3, [r7, #28]
 8009a18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009a1c:	4641      	mov	r1, r8
 8009a1e:	1851      	adds	r1, r2, r1
 8009a20:	6139      	str	r1, [r7, #16]
 8009a22:	4649      	mov	r1, r9
 8009a24:	414b      	adcs	r3, r1
 8009a26:	617b      	str	r3, [r7, #20]
 8009a28:	f04f 0200 	mov.w	r2, #0
 8009a2c:	f04f 0300 	mov.w	r3, #0
 8009a30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009a34:	4659      	mov	r1, fp
 8009a36:	00cb      	lsls	r3, r1, #3
 8009a38:	4651      	mov	r1, sl
 8009a3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a3e:	4651      	mov	r1, sl
 8009a40:	00ca      	lsls	r2, r1, #3
 8009a42:	4610      	mov	r0, r2
 8009a44:	4619      	mov	r1, r3
 8009a46:	4603      	mov	r3, r0
 8009a48:	4642      	mov	r2, r8
 8009a4a:	189b      	adds	r3, r3, r2
 8009a4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009a50:	464b      	mov	r3, r9
 8009a52:	460a      	mov	r2, r1
 8009a54:	eb42 0303 	adc.w	r3, r2, r3
 8009a58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009a66:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009a68:	f04f 0200 	mov.w	r2, #0
 8009a6c:	f04f 0300 	mov.w	r3, #0
 8009a70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009a74:	4649      	mov	r1, r9
 8009a76:	008b      	lsls	r3, r1, #2
 8009a78:	4641      	mov	r1, r8
 8009a7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a7e:	4641      	mov	r1, r8
 8009a80:	008a      	lsls	r2, r1, #2
 8009a82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009a86:	f7f7 f907 	bl	8000c98 <__aeabi_uldivmod>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	4611      	mov	r1, r2
 8009a90:	4b38      	ldr	r3, [pc, #224]	@ (8009b74 <UART_SetConfig+0x4e4>)
 8009a92:	fba3 2301 	umull	r2, r3, r3, r1
 8009a96:	095b      	lsrs	r3, r3, #5
 8009a98:	2264      	movs	r2, #100	@ 0x64
 8009a9a:	fb02 f303 	mul.w	r3, r2, r3
 8009a9e:	1acb      	subs	r3, r1, r3
 8009aa0:	011b      	lsls	r3, r3, #4
 8009aa2:	3332      	adds	r3, #50	@ 0x32
 8009aa4:	4a33      	ldr	r2, [pc, #204]	@ (8009b74 <UART_SetConfig+0x4e4>)
 8009aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8009aaa:	095b      	lsrs	r3, r3, #5
 8009aac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009ab0:	441c      	add	r4, r3
 8009ab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	673b      	str	r3, [r7, #112]	@ 0x70
 8009aba:	677a      	str	r2, [r7, #116]	@ 0x74
 8009abc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009ac0:	4642      	mov	r2, r8
 8009ac2:	464b      	mov	r3, r9
 8009ac4:	1891      	adds	r1, r2, r2
 8009ac6:	60b9      	str	r1, [r7, #8]
 8009ac8:	415b      	adcs	r3, r3
 8009aca:	60fb      	str	r3, [r7, #12]
 8009acc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009ad0:	4641      	mov	r1, r8
 8009ad2:	1851      	adds	r1, r2, r1
 8009ad4:	6039      	str	r1, [r7, #0]
 8009ad6:	4649      	mov	r1, r9
 8009ad8:	414b      	adcs	r3, r1
 8009ada:	607b      	str	r3, [r7, #4]
 8009adc:	f04f 0200 	mov.w	r2, #0
 8009ae0:	f04f 0300 	mov.w	r3, #0
 8009ae4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009ae8:	4659      	mov	r1, fp
 8009aea:	00cb      	lsls	r3, r1, #3
 8009aec:	4651      	mov	r1, sl
 8009aee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009af2:	4651      	mov	r1, sl
 8009af4:	00ca      	lsls	r2, r1, #3
 8009af6:	4610      	mov	r0, r2
 8009af8:	4619      	mov	r1, r3
 8009afa:	4603      	mov	r3, r0
 8009afc:	4642      	mov	r2, r8
 8009afe:	189b      	adds	r3, r3, r2
 8009b00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009b02:	464b      	mov	r3, r9
 8009b04:	460a      	mov	r2, r1
 8009b06:	eb42 0303 	adc.w	r3, r2, r3
 8009b0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	663b      	str	r3, [r7, #96]	@ 0x60
 8009b16:	667a      	str	r2, [r7, #100]	@ 0x64
 8009b18:	f04f 0200 	mov.w	r2, #0
 8009b1c:	f04f 0300 	mov.w	r3, #0
 8009b20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009b24:	4649      	mov	r1, r9
 8009b26:	008b      	lsls	r3, r1, #2
 8009b28:	4641      	mov	r1, r8
 8009b2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b2e:	4641      	mov	r1, r8
 8009b30:	008a      	lsls	r2, r1, #2
 8009b32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009b36:	f7f7 f8af 	bl	8000c98 <__aeabi_uldivmod>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8009b74 <UART_SetConfig+0x4e4>)
 8009b40:	fba3 1302 	umull	r1, r3, r3, r2
 8009b44:	095b      	lsrs	r3, r3, #5
 8009b46:	2164      	movs	r1, #100	@ 0x64
 8009b48:	fb01 f303 	mul.w	r3, r1, r3
 8009b4c:	1ad3      	subs	r3, r2, r3
 8009b4e:	011b      	lsls	r3, r3, #4
 8009b50:	3332      	adds	r3, #50	@ 0x32
 8009b52:	4a08      	ldr	r2, [pc, #32]	@ (8009b74 <UART_SetConfig+0x4e4>)
 8009b54:	fba2 2303 	umull	r2, r3, r2, r3
 8009b58:	095b      	lsrs	r3, r3, #5
 8009b5a:	f003 020f 	and.w	r2, r3, #15
 8009b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4422      	add	r2, r4
 8009b66:	609a      	str	r2, [r3, #8]
}
 8009b68:	bf00      	nop
 8009b6a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b74:	51eb851f 	.word	0x51eb851f

08009b78 <USB_CoreInit>:
 * @param  USBx USB Instance
 * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
 *         the configuration information for the specified USBx peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef * USBx, USB_OTG_CfgTypeDef cfg) {
 8009b78:	b084      	sub	sp, #16
 8009b7a:	b580      	push	{r7, lr}
 8009b7c:	b084      	sub	sp, #16
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
 8009b82:	f107 001c 	add.w	r0, r7, #28
 8009b86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    HAL_StatusTypeDef ret;
    if (cfg.phy_itface == USB_OTG_ULPI_PHY) {
 8009b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d122      	bne.n	8009bd6 <USB_CoreInit+0x5e>
        USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b94:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Init The ULPI Interface */
        USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009ba4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	60d3      	str	r3, [r2, #12]

        /* Select vbus source */
        USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	60da      	str	r2, [r3, #12]
        if (cfg.use_external_vbus == 1U) {
 8009bb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d105      	bne.n	8009bca <USB_CoreInit+0x52>
            USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	68db      	ldr	r3, [r3, #12]
 8009bc2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	60da      	str	r2, [r3, #12]
        }

        /* Reset after a PHY select */
        ret = USB_CoreReset(USBx);
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f001 fbee 	bl	800b3ac <USB_CoreReset>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	73fb      	strb	r3, [r7, #15]
 8009bd4:	e01a      	b.n	8009c0c <USB_CoreInit+0x94>
    } else /* FS interface (embedded Phy) */
    {
        /* Select FS Embedded PHY */
        USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	60da      	str	r2, [r3, #12]

        /* Reset after a PHY select */
        ret = USB_CoreReset(USBx);
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f001 fbe2 	bl	800b3ac <USB_CoreReset>
 8009be8:	4603      	mov	r3, r0
 8009bea:	73fb      	strb	r3, [r7, #15]

        if (cfg.battery_charging_enable == 0U) {
 8009bec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d106      	bne.n	8009c00 <USB_CoreInit+0x88>
            /* Activate the USB Transceiver */
            USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bf6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	639a      	str	r2, [r3, #56]	@ 0x38
 8009bfe:	e005      	b.n	8009c0c <USB_CoreInit+0x94>
        } else {
            /* Deactivate the USB Transceiver */
            USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c04:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	639a      	str	r2, [r3, #56]	@ 0x38
        }
    }

    if (cfg.dma_enable == 1U) {
 8009c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d10b      	bne.n	8009c2a <USB_CoreInit+0xb2>
        USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	f043 0206 	orr.w	r2, r3, #6
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	609a      	str	r2, [r3, #8]
        USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	689b      	ldr	r3, [r3, #8]
 8009c22:	f043 0220 	orr.w	r2, r3, #32
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	609a      	str	r2, [r3, #8]
    }

    return ret;
 8009c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3710      	adds	r7, #16
 8009c30:	46bd      	mov	sp, r7
 8009c32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009c36:	b004      	add	sp, #16
 8009c38:	4770      	bx	lr
	...

08009c3c <USB_SetTurnaroundTime>:
 * @brief  Set the USB turnaround time
 * @param  USBx USB Instance
 * @param  hclk: AHB clock frequency
 * @retval USB turnaround time In PHY Clocks number
 */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef * USBx, uint32_t hclk, uint8_t speed) {
 8009c3c:	b480      	push	{r7}
 8009c3e:	b087      	sub	sp, #28
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	4613      	mov	r3, r2
 8009c48:	71fb      	strb	r3, [r7, #7]

    /* The USBTRD is configured according to the tables below, depending on AHB frequency
    used by application. In the low AHB frequency range it is used to stretch enough the USB response
    time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
    latency to the Data FIFO */
    if (speed == USBD_FS_SPEED) {
 8009c4a:	79fb      	ldrb	r3, [r7, #7]
 8009c4c:	2b02      	cmp	r3, #2
 8009c4e:	d165      	bne.n	8009d1c <USB_SetTurnaroundTime+0xe0>
        if ((hclk >= 14200000U) && (hclk < 15000000U)) {
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	4a41      	ldr	r2, [pc, #260]	@ (8009d58 <USB_SetTurnaroundTime+0x11c>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d906      	bls.n	8009c66 <USB_SetTurnaroundTime+0x2a>
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	4a40      	ldr	r2, [pc, #256]	@ (8009d5c <USB_SetTurnaroundTime+0x120>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d202      	bcs.n	8009c66 <USB_SetTurnaroundTime+0x2a>
            /* hclk Clock Range between 14.2-15 MHz */
            UsbTrd = 0xFU;
 8009c60:	230f      	movs	r3, #15
 8009c62:	617b      	str	r3, [r7, #20]
 8009c64:	e062      	b.n	8009d2c <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 15000000U) && (hclk < 16000000U)) {
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	4a3c      	ldr	r2, [pc, #240]	@ (8009d5c <USB_SetTurnaroundTime+0x120>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d306      	bcc.n	8009c7c <USB_SetTurnaroundTime+0x40>
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	4a3b      	ldr	r2, [pc, #236]	@ (8009d60 <USB_SetTurnaroundTime+0x124>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d202      	bcs.n	8009c7c <USB_SetTurnaroundTime+0x40>
            /* hclk Clock Range between 15-16 MHz */
            UsbTrd = 0xEU;
 8009c76:	230e      	movs	r3, #14
 8009c78:	617b      	str	r3, [r7, #20]
 8009c7a:	e057      	b.n	8009d2c <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 16000000U) && (hclk < 17200000U)) {
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	4a38      	ldr	r2, [pc, #224]	@ (8009d60 <USB_SetTurnaroundTime+0x124>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d306      	bcc.n	8009c92 <USB_SetTurnaroundTime+0x56>
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	4a37      	ldr	r2, [pc, #220]	@ (8009d64 <USB_SetTurnaroundTime+0x128>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d202      	bcs.n	8009c92 <USB_SetTurnaroundTime+0x56>
            /* hclk Clock Range between 16-17.2 MHz */
            UsbTrd = 0xDU;
 8009c8c:	230d      	movs	r3, #13
 8009c8e:	617b      	str	r3, [r7, #20]
 8009c90:	e04c      	b.n	8009d2c <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 17200000U) && (hclk < 18500000U)) {
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	4a33      	ldr	r2, [pc, #204]	@ (8009d64 <USB_SetTurnaroundTime+0x128>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d306      	bcc.n	8009ca8 <USB_SetTurnaroundTime+0x6c>
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	4a32      	ldr	r2, [pc, #200]	@ (8009d68 <USB_SetTurnaroundTime+0x12c>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d802      	bhi.n	8009ca8 <USB_SetTurnaroundTime+0x6c>
            /* hclk Clock Range between 17.2-18.5 MHz */
            UsbTrd = 0xCU;
 8009ca2:	230c      	movs	r3, #12
 8009ca4:	617b      	str	r3, [r7, #20]
 8009ca6:	e041      	b.n	8009d2c <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 18500000U) && (hclk < 20000000U)) {
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	4a2f      	ldr	r2, [pc, #188]	@ (8009d68 <USB_SetTurnaroundTime+0x12c>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d906      	bls.n	8009cbe <USB_SetTurnaroundTime+0x82>
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	4a2e      	ldr	r2, [pc, #184]	@ (8009d6c <USB_SetTurnaroundTime+0x130>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d802      	bhi.n	8009cbe <USB_SetTurnaroundTime+0x82>
            /* hclk Clock Range between 18.5-20 MHz */
            UsbTrd = 0xBU;
 8009cb8:	230b      	movs	r3, #11
 8009cba:	617b      	str	r3, [r7, #20]
 8009cbc:	e036      	b.n	8009d2c <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 20000000U) && (hclk < 21800000U)) {
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	4a2a      	ldr	r2, [pc, #168]	@ (8009d6c <USB_SetTurnaroundTime+0x130>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d906      	bls.n	8009cd4 <USB_SetTurnaroundTime+0x98>
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	4a29      	ldr	r2, [pc, #164]	@ (8009d70 <USB_SetTurnaroundTime+0x134>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d802      	bhi.n	8009cd4 <USB_SetTurnaroundTime+0x98>
            /* hclk Clock Range between 20-21.8 MHz */
            UsbTrd = 0xAU;
 8009cce:	230a      	movs	r3, #10
 8009cd0:	617b      	str	r3, [r7, #20]
 8009cd2:	e02b      	b.n	8009d2c <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 21800000U) && (hclk < 24000000U)) {
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	4a26      	ldr	r2, [pc, #152]	@ (8009d70 <USB_SetTurnaroundTime+0x134>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d906      	bls.n	8009cea <USB_SetTurnaroundTime+0xae>
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	4a25      	ldr	r2, [pc, #148]	@ (8009d74 <USB_SetTurnaroundTime+0x138>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d202      	bcs.n	8009cea <USB_SetTurnaroundTime+0xae>
            /* hclk Clock Range between 21.8-24 MHz */
            UsbTrd = 0x9U;
 8009ce4:	2309      	movs	r3, #9
 8009ce6:	617b      	str	r3, [r7, #20]
 8009ce8:	e020      	b.n	8009d2c <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 24000000U) && (hclk < 27700000U)) {
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	4a21      	ldr	r2, [pc, #132]	@ (8009d74 <USB_SetTurnaroundTime+0x138>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d306      	bcc.n	8009d00 <USB_SetTurnaroundTime+0xc4>
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	4a20      	ldr	r2, [pc, #128]	@ (8009d78 <USB_SetTurnaroundTime+0x13c>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d802      	bhi.n	8009d00 <USB_SetTurnaroundTime+0xc4>
            /* hclk Clock Range between 24-27.7 MHz */
            UsbTrd = 0x8U;
 8009cfa:	2308      	movs	r3, #8
 8009cfc:	617b      	str	r3, [r7, #20]
 8009cfe:	e015      	b.n	8009d2c <USB_SetTurnaroundTime+0xf0>
        } else if ((hclk >= 27700000U) && (hclk < 32000000U)) {
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	4a1d      	ldr	r2, [pc, #116]	@ (8009d78 <USB_SetTurnaroundTime+0x13c>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d906      	bls.n	8009d16 <USB_SetTurnaroundTime+0xda>
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	4a1c      	ldr	r2, [pc, #112]	@ (8009d7c <USB_SetTurnaroundTime+0x140>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d202      	bcs.n	8009d16 <USB_SetTurnaroundTime+0xda>
            /* hclk Clock Range between 27.7-32 MHz */
            UsbTrd = 0x7U;
 8009d10:	2307      	movs	r3, #7
 8009d12:	617b      	str	r3, [r7, #20]
 8009d14:	e00a      	b.n	8009d2c <USB_SetTurnaroundTime+0xf0>
        } else /* if(hclk >= 32000000) */
        {
            /* hclk Clock Range between 32-200 MHz */
            UsbTrd = 0x6U;
 8009d16:	2306      	movs	r3, #6
 8009d18:	617b      	str	r3, [r7, #20]
 8009d1a:	e007      	b.n	8009d2c <USB_SetTurnaroundTime+0xf0>
        }
    } else if (speed == USBD_HS_SPEED) {
 8009d1c:	79fb      	ldrb	r3, [r7, #7]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d102      	bne.n	8009d28 <USB_SetTurnaroundTime+0xec>
        UsbTrd = USBD_HS_TRDT_VALUE;
 8009d22:	2309      	movs	r3, #9
 8009d24:	617b      	str	r3, [r7, #20]
 8009d26:	e001      	b.n	8009d2c <USB_SetTurnaroundTime+0xf0>
    } else {
        UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009d28:	2309      	movs	r3, #9
 8009d2a:	617b      	str	r3, [r7, #20]
    }

    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	68db      	ldr	r3, [r3, #12]
 8009d30:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	60da      	str	r2, [r3, #12]
    USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	68da      	ldr	r2, [r3, #12]
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	029b      	lsls	r3, r3, #10
 8009d40:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009d44:	431a      	orrs	r2, r3
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8009d4a:	2300      	movs	r3, #0
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	371c      	adds	r7, #28
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr
 8009d58:	00d8acbf 	.word	0x00d8acbf
 8009d5c:	00e4e1c0 	.word	0x00e4e1c0
 8009d60:	00f42400 	.word	0x00f42400
 8009d64:	01067380 	.word	0x01067380
 8009d68:	011a499f 	.word	0x011a499f
 8009d6c:	01312cff 	.word	0x01312cff
 8009d70:	014ca43f 	.word	0x014ca43f
 8009d74:	016e3600 	.word	0x016e3600
 8009d78:	01a6ab1f 	.word	0x01a6ab1f
 8009d7c:	01e84800 	.word	0x01e84800

08009d80 <USB_EnableGlobalInt>:
 * @brief  USB_EnableGlobalInt
 *         Enables the controller's Global Int in the AHB Config reg
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef * USBx) {
 8009d80:	b480      	push	{r7}
 8009d82:	b083      	sub	sp, #12
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	f043 0201 	orr.w	r2, r3, #1
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	370c      	adds	r7, #12
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr

08009da2 <USB_DisableGlobalInt>:
 * @brief  USB_DisableGlobalInt
 *         Disable the controller's Global Int in the AHB Config reg
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef * USBx) {
 8009da2:	b480      	push	{r7}
 8009da4:	b083      	sub	sp, #12
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
    USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	689b      	ldr	r3, [r3, #8]
 8009dae:	f023 0201 	bic.w	r2, r3, #1
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8009db6:	2300      	movs	r3, #0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <USB_SetCurrentMode>:
 *          This parameter can be one of these values:
 *            @arg USB_DEVICE_MODE Peripheral mode
 *            @arg USB_HOST_MODE Host mode
 * @retval HAL status
 */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef * USBx, USB_OTG_ModeTypeDef mode) {
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b084      	sub	sp, #16
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	460b      	mov	r3, r1
 8009dce:	70fb      	strb	r3, [r7, #3]
    uint32_t ms = 0U;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	60fb      	str	r3, [r7, #12]

    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	60da      	str	r2, [r3, #12]

    if (mode == USB_HOST_MODE) {
 8009de0:	78fb      	ldrb	r3, [r7, #3]
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d115      	bne.n	8009e12 <USB_SetCurrentMode+0x4e>
        USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	68db      	ldr	r3, [r3, #12]
 8009dea:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	60da      	str	r2, [r3, #12]

        do {
            HAL_Delay(1U);
 8009df2:	2001      	movs	r0, #1
 8009df4:	f7fa fdf2 	bl	80049dc <HAL_Delay>
            ms++;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	60fb      	str	r3, [r7, #12]
        } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f001 fa45 	bl	800b28e <USB_GetMode>
 8009e04:	4603      	mov	r3, r0
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d01e      	beq.n	8009e48 <USB_SetCurrentMode+0x84>
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2b31      	cmp	r3, #49	@ 0x31
 8009e0e:	d9f0      	bls.n	8009df2 <USB_SetCurrentMode+0x2e>
 8009e10:	e01a      	b.n	8009e48 <USB_SetCurrentMode+0x84>
    } else if (mode == USB_DEVICE_MODE) {
 8009e12:	78fb      	ldrb	r3, [r7, #3]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d115      	bne.n	8009e44 <USB_SetCurrentMode+0x80>
        USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	60da      	str	r2, [r3, #12]

        do {
            HAL_Delay(1U);
 8009e24:	2001      	movs	r0, #1
 8009e26:	f7fa fdd9 	bl	80049dc <HAL_Delay>
            ms++;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	60fb      	str	r3, [r7, #12]
        } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f001 fa2c 	bl	800b28e <USB_GetMode>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d005      	beq.n	8009e48 <USB_SetCurrentMode+0x84>
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2b31      	cmp	r3, #49	@ 0x31
 8009e40:	d9f0      	bls.n	8009e24 <USB_SetCurrentMode+0x60>
 8009e42:	e001      	b.n	8009e48 <USB_SetCurrentMode+0x84>
    } else {
        return HAL_ERROR;
 8009e44:	2301      	movs	r3, #1
 8009e46:	e005      	b.n	8009e54 <USB_SetCurrentMode+0x90>
    }

    if (ms == 50U) {
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2b32      	cmp	r3, #50	@ 0x32
 8009e4c:	d101      	bne.n	8009e52 <USB_SetCurrentMode+0x8e>
        return HAL_ERROR;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e000      	b.n	8009e54 <USB_SetCurrentMode+0x90>
    }

    return HAL_OK;
 8009e52:	2300      	movs	r3, #0
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3710      	adds	r7, #16
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <USB_DevInit>:
 * @param  USBx  Selected device
 * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
 *         the configuration information for the specified USBx peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef * USBx, USB_OTG_CfgTypeDef cfg) {
 8009e5c:	b084      	sub	sp, #16
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b086      	sub	sp, #24
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
 8009e66:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009e6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    HAL_StatusTypeDef ret = HAL_OK;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	75fb      	strb	r3, [r7, #23]
    uint32_t USBx_BASE = (uint32_t)USBx;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	60fb      	str	r3, [r7, #12]
    uint32_t i;

    for (i = 0U; i < 15U; i++) {
 8009e76:	2300      	movs	r3, #0
 8009e78:	613b      	str	r3, [r7, #16]
 8009e7a:	e009      	b.n	8009e90 <USB_DevInit+0x34>
        USBx->DIEPTXF[i] = 0U;
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	3340      	adds	r3, #64	@ 0x40
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	4413      	add	r3, r2
 8009e86:	2200      	movs	r2, #0
 8009e88:	605a      	str	r2, [r3, #4]
    for (i = 0U; i < 15U; i++) {
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	613b      	str	r3, [r7, #16]
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	2b0e      	cmp	r3, #14
 8009e94:	d9f2      	bls.n	8009e7c <USB_DevInit+0x20>
        /* Enable HW VBUS sensing */
        USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
    }
#else
    /* VBUS Sensing setup */
    if (cfg.vbus_sensing_enable == 0U) {
 8009e96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d11c      	bne.n	8009ed6 <USB_DevInit+0x7a>
        /*
         * Disable HW VBUS sensing. VBUS is internally considered to be always
         * at VBUS-Valid level (5V).
         */
        USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	68fa      	ldr	r2, [r7, #12]
 8009ea6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009eaa:	f043 0302 	orr.w	r3, r3, #2
 8009eae:	6053      	str	r3, [r2, #4]
        USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eb4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	639a      	str	r2, [r3, #56]	@ 0x38
        USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ec0:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	639a      	str	r2, [r3, #56]	@ 0x38
        USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ecc:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	639a      	str	r2, [r3, #56]	@ 0x38
 8009ed4:	e00b      	b.n	8009eee <USB_DevInit+0x92>
    } else {
        /* Enable HW VBUS sensing */
        USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eda:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	639a      	str	r2, [r3, #56]	@ 0x38
        USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ee6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	639a      	str	r2, [r3, #56]	@ 0x38
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

    /* Restart the Phy Clock */
    USBx_PCGCCTL = 0U;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	6013      	str	r3, [r2, #0]

    /* Device mode configuration */
    USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f00:	4619      	mov	r1, r3
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f08:	461a      	mov	r2, r3
 8009f0a:	680b      	ldr	r3, [r1, #0]
 8009f0c:	6013      	str	r3, [r2, #0]

    if (cfg.phy_itface == USB_OTG_ULPI_PHY) {
 8009f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d10c      	bne.n	8009f2e <USB_DevInit+0xd2>
        if (cfg.speed == USBD_HS_SPEED) {
 8009f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d104      	bne.n	8009f24 <USB_DevInit+0xc8>
            /* Set Core speed to High speed mode */
            (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009f1a:	2100      	movs	r1, #0
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 f965 	bl	800a1ec <USB_SetDevSpeed>
 8009f22:	e008      	b.n	8009f36 <USB_DevInit+0xda>
        } else {
            /* Set Core speed to Full speed mode */
            (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009f24:	2101      	movs	r1, #1
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 f960 	bl	800a1ec <USB_SetDevSpeed>
 8009f2c:	e003      	b.n	8009f36 <USB_DevInit+0xda>
        }
    } else {
        /* Set Core speed to Full speed mode */
        (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009f2e:	2103      	movs	r1, #3
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 f95b 	bl	800a1ec <USB_SetDevSpeed>
    }

    /* Flush the FIFOs */
    if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009f36:	2110      	movs	r1, #16
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 f8f3 	bl	800a124 <USB_FlushTxFifo>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d001      	beq.n	8009f48 <USB_DevInit+0xec>
    {
        ret = HAL_ERROR;
 8009f44:	2301      	movs	r3, #1
 8009f46:	75fb      	strb	r3, [r7, #23]
    }

    if (USB_FlushRxFifo(USBx) != HAL_OK) {
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 f91f 	bl	800a18c <USB_FlushRxFifo>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d001      	beq.n	8009f58 <USB_DevInit+0xfc>
        ret = HAL_ERROR;
 8009f54:	2301      	movs	r3, #1
 8009f56:	75fb      	strb	r3, [r7, #23]
    }

    /* Clear all pending Device Interrupts */
    USBx_DEVICE->DIEPMSK = 0U;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f5e:	461a      	mov	r2, r3
 8009f60:	2300      	movs	r3, #0
 8009f62:	6113      	str	r3, [r2, #16]
    USBx_DEVICE->DOEPMSK = 0U;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	6153      	str	r3, [r2, #20]
    USBx_DEVICE->DAINTMSK = 0U;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f76:	461a      	mov	r2, r3
 8009f78:	2300      	movs	r3, #0
 8009f7a:	61d3      	str	r3, [r2, #28]

    for (i = 0U; i < cfg.dev_endpoints; i++) {
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	613b      	str	r3, [r7, #16]
 8009f80:	e043      	b.n	800a00a <USB_DevInit+0x1ae>
        if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA) {
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	015a      	lsls	r2, r3, #5
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	4413      	add	r3, r2
 8009f8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f98:	d118      	bne.n	8009fcc <USB_DevInit+0x170>
            if (i == 0U) {
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d10a      	bne.n	8009fb6 <USB_DevInit+0x15a>
                USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	015a      	lsls	r2, r3, #5
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	4413      	add	r3, r2
 8009fa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fac:	461a      	mov	r2, r3
 8009fae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009fb2:	6013      	str	r3, [r2, #0]
 8009fb4:	e013      	b.n	8009fde <USB_DevInit+0x182>
            } else {
                USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	015a      	lsls	r2, r3, #5
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	4413      	add	r3, r2
 8009fbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009fc8:	6013      	str	r3, [r2, #0]
 8009fca:	e008      	b.n	8009fde <USB_DevInit+0x182>
            }
        } else {
            USBx_INEP(i)->DIEPCTL = 0U;
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	015a      	lsls	r2, r3, #5
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fd8:	461a      	mov	r2, r3
 8009fda:	2300      	movs	r3, #0
 8009fdc:	6013      	str	r3, [r2, #0]
        }

        USBx_INEP(i)->DIEPTSIZ = 0U;
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	015a      	lsls	r2, r3, #5
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fea:	461a      	mov	r2, r3
 8009fec:	2300      	movs	r3, #0
 8009fee:	6113      	str	r3, [r2, #16]
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	015a      	lsls	r2, r3, #5
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	4413      	add	r3, r2
 8009ff8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a002:	6093      	str	r3, [r2, #8]
    for (i = 0U; i < cfg.dev_endpoints; i++) {
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	3301      	adds	r3, #1
 800a008:	613b      	str	r3, [r7, #16]
 800a00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a00c:	693a      	ldr	r2, [r7, #16]
 800a00e:	429a      	cmp	r2, r3
 800a010:	d3b7      	bcc.n	8009f82 <USB_DevInit+0x126>
    }

    for (i = 0U; i < cfg.dev_endpoints; i++) {
 800a012:	2300      	movs	r3, #0
 800a014:	613b      	str	r3, [r7, #16]
 800a016:	e043      	b.n	800a0a0 <USB_DevInit+0x244>
        if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) {
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	015a      	lsls	r2, r3, #5
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	4413      	add	r3, r2
 800a020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a02a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a02e:	d118      	bne.n	800a062 <USB_DevInit+0x206>
            if (i == 0U) {
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d10a      	bne.n	800a04c <USB_DevInit+0x1f0>
                USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	015a      	lsls	r2, r3, #5
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	4413      	add	r3, r2
 800a03e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a042:	461a      	mov	r2, r3
 800a044:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a048:	6013      	str	r3, [r2, #0]
 800a04a:	e013      	b.n	800a074 <USB_DevInit+0x218>
            } else {
                USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	015a      	lsls	r2, r3, #5
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	4413      	add	r3, r2
 800a054:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a058:	461a      	mov	r2, r3
 800a05a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a05e:	6013      	str	r3, [r2, #0]
 800a060:	e008      	b.n	800a074 <USB_DevInit+0x218>
            }
        } else {
            USBx_OUTEP(i)->DOEPCTL = 0U;
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	015a      	lsls	r2, r3, #5
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	4413      	add	r3, r2
 800a06a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a06e:	461a      	mov	r2, r3
 800a070:	2300      	movs	r3, #0
 800a072:	6013      	str	r3, [r2, #0]
        }

        USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	015a      	lsls	r2, r3, #5
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	4413      	add	r3, r2
 800a07c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a080:	461a      	mov	r2, r3
 800a082:	2300      	movs	r3, #0
 800a084:	6113      	str	r3, [r2, #16]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	015a      	lsls	r2, r3, #5
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	4413      	add	r3, r2
 800a08e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a092:	461a      	mov	r2, r3
 800a094:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a098:	6093      	str	r3, [r2, #8]
    for (i = 0U; i < cfg.dev_endpoints; i++) {
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	3301      	adds	r3, #1
 800a09e:	613b      	str	r3, [r7, #16]
 800a0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a2:	693a      	ldr	r2, [r7, #16]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d3b7      	bcc.n	800a018 <USB_DevInit+0x1bc>
    }

    USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0ae:	691b      	ldr	r3, [r3, #16]
 800a0b0:	68fa      	ldr	r2, [r7, #12]
 800a0b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a0b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a0ba:	6113      	str	r3, [r2, #16]

    /* Disable all interrupts. */
    USBx->GINTMSK = 0U;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	619a      	str	r2, [r3, #24]

    /* Clear any pending interrupts */
    USBx->GINTSTS = 0xBFFFFFFFU;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a0c8:	615a      	str	r2, [r3, #20]

    /* Enable the common interrupts */
    if (cfg.dma_enable == 0U) {
 800a0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d105      	bne.n	800a0dc <USB_DevInit+0x280>
        USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	699b      	ldr	r3, [r3, #24]
 800a0d4:	f043 0210 	orr.w	r2, r3, #16
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	619a      	str	r2, [r3, #24]
    }

    /* Enable interrupts matching to the Device mode ONLY */
    USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST | USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT | USB_OTG_GINTMSK_OEPINT | USB_OTG_GINTMSK_IISOIXFRM | USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	699a      	ldr	r2, [r3, #24]
 800a0e0:	4b0f      	ldr	r3, [pc, #60]	@ (800a120 <USB_DevInit+0x2c4>)
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	6193      	str	r3, [r2, #24]

    if (cfg.Sof_enable != 0U) {
 800a0e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d005      	beq.n	800a0fa <USB_DevInit+0x29e>
        USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	699b      	ldr	r3, [r3, #24]
 800a0f2:	f043 0208 	orr.w	r2, r3, #8
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	619a      	str	r2, [r3, #24]
    }

    if (cfg.vbus_sensing_enable == 1U) {
 800a0fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d107      	bne.n	800a110 <USB_DevInit+0x2b4>
        USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	699b      	ldr	r3, [r3, #24]
 800a104:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a108:	f043 0304 	orr.w	r3, r3, #4
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	6193      	str	r3, [r2, #24]
    }

    return ret;
 800a110:	7dfb      	ldrb	r3, [r7, #23]
}
 800a112:	4618      	mov	r0, r3
 800a114:	3718      	adds	r7, #24
 800a116:	46bd      	mov	sp, r7
 800a118:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a11c:	b004      	add	sp, #16
 800a11e:	4770      	bx	lr
 800a120:	803c3800 	.word	0x803c3800

0800a124 <USB_FlushTxFifo>:
  * @param  num  FIFO number
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef * USBx, uint32_t num) {
 800a124:	b480      	push	{r7}
 800a126:	b085      	sub	sp, #20
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
    __IO uint32_t count = 0U;
 800a12e:	2300      	movs	r3, #0
 800a130:	60fb      	str	r3, [r7, #12]

    /* Wait for AHB master IDLE state. */
    do {
        count++;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	3301      	adds	r3, #1
 800a136:	60fb      	str	r3, [r7, #12]

        if (count > 200000U) {
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	4a13      	ldr	r2, [pc, #76]	@ (800a188 <USB_FlushTxFifo+0x64>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d901      	bls.n	800a144 <USB_FlushTxFifo+0x20>
            return HAL_TIMEOUT;
 800a140:	2303      	movs	r3, #3
 800a142:	e01b      	b.n	800a17c <USB_FlushTxFifo+0x58>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	691b      	ldr	r3, [r3, #16]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	daf2      	bge.n	800a132 <USB_FlushTxFifo+0xe>

    /* Flush TX Fifo */
    count = 0U;
 800a14c:	2300      	movs	r3, #0
 800a14e:	60fb      	str	r3, [r7, #12]
    USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	019b      	lsls	r3, r3, #6
 800a154:	f043 0220 	orr.w	r2, r3, #32
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	611a      	str	r2, [r3, #16]

    do {
        count++;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	3301      	adds	r3, #1
 800a160:	60fb      	str	r3, [r7, #12]

        if (count > 200000U) {
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	4a08      	ldr	r2, [pc, #32]	@ (800a188 <USB_FlushTxFifo+0x64>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d901      	bls.n	800a16e <USB_FlushTxFifo+0x4a>
            return HAL_TIMEOUT;
 800a16a:	2303      	movs	r3, #3
 800a16c:	e006      	b.n	800a17c <USB_FlushTxFifo+0x58>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	691b      	ldr	r3, [r3, #16]
 800a172:	f003 0320 	and.w	r3, r3, #32
 800a176:	2b20      	cmp	r3, #32
 800a178:	d0f0      	beq.n	800a15c <USB_FlushTxFifo+0x38>

    return HAL_OK;
 800a17a:	2300      	movs	r3, #0
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3714      	adds	r7, #20
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr
 800a188:	00030d40 	.word	0x00030d40

0800a18c <USB_FlushRxFifo>:
/**
 * @brief  USB_FlushRxFifo  Flush Rx FIFO
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef * USBx) {
 800a18c:	b480      	push	{r7}
 800a18e:	b085      	sub	sp, #20
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
    __IO uint32_t count = 0U;
 800a194:	2300      	movs	r3, #0
 800a196:	60fb      	str	r3, [r7, #12]

    /* Wait for AHB master IDLE state. */
    do {
        count++;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	3301      	adds	r3, #1
 800a19c:	60fb      	str	r3, [r7, #12]

        if (count > 200000U) {
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	4a11      	ldr	r2, [pc, #68]	@ (800a1e8 <USB_FlushRxFifo+0x5c>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d901      	bls.n	800a1aa <USB_FlushRxFifo+0x1e>
            return HAL_TIMEOUT;
 800a1a6:	2303      	movs	r3, #3
 800a1a8:	e018      	b.n	800a1dc <USB_FlushRxFifo+0x50>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	daf2      	bge.n	800a198 <USB_FlushRxFifo+0xc>

    /* Flush RX Fifo */
    count = 0U;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	60fb      	str	r3, [r7, #12]
    USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2210      	movs	r2, #16
 800a1ba:	611a      	str	r2, [r3, #16]

    do {
        count++;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	3301      	adds	r3, #1
 800a1c0:	60fb      	str	r3, [r7, #12]

        if (count > 200000U) {
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	4a08      	ldr	r2, [pc, #32]	@ (800a1e8 <USB_FlushRxFifo+0x5c>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d901      	bls.n	800a1ce <USB_FlushRxFifo+0x42>
            return HAL_TIMEOUT;
 800a1ca:	2303      	movs	r3, #3
 800a1cc:	e006      	b.n	800a1dc <USB_FlushRxFifo+0x50>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	691b      	ldr	r3, [r3, #16]
 800a1d2:	f003 0310 	and.w	r3, r3, #16
 800a1d6:	2b10      	cmp	r3, #16
 800a1d8:	d0f0      	beq.n	800a1bc <USB_FlushRxFifo+0x30>

    return HAL_OK;
 800a1da:	2300      	movs	r3, #0
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3714      	adds	r7, #20
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr
 800a1e8:	00030d40 	.word	0x00030d40

0800a1ec <USB_SetDevSpeed>:
 *            @arg USB_OTG_SPEED_HIGH: High speed mode
 *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
 *            @arg USB_OTG_SPEED_FULL: Full speed mode
 * @retval  Hal status
 */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef * USBx, uint8_t speed) {
 800a1ec:	b480      	push	{r7}
 800a1ee:	b085      	sub	sp, #20
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	70fb      	strb	r3, [r7, #3]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	60fb      	str	r3, [r7, #12]

    USBx_DEVICE->DCFG |= speed;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	78fb      	ldrb	r3, [r7, #3]
 800a206:	68f9      	ldr	r1, [r7, #12]
 800a208:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a20c:	4313      	orrs	r3, r2
 800a20e:	600b      	str	r3, [r1, #0]
    return HAL_OK;
 800a210:	2300      	movs	r3, #0
}
 800a212:	4618      	mov	r0, r3
 800a214:	3714      	adds	r7, #20
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr

0800a21e <USB_GetDevSpeed>:
 * @retval speed  device speed
 *          This parameter can be one of these values:
 *            @arg USBD_HS_SPEED: High speed mode
 *            @arg USBD_FS_SPEED: Full speed mode
 */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef * USBx) {
 800a21e:	b480      	push	{r7}
 800a220:	b087      	sub	sp, #28
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	613b      	str	r3, [r7, #16]
    uint8_t speed;
    uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a230:	689b      	ldr	r3, [r3, #8]
 800a232:	f003 0306 	and.w	r3, r3, #6
 800a236:	60fb      	str	r3, [r7, #12]

    if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ) {
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d102      	bne.n	800a244 <USB_GetDevSpeed+0x26>
        speed = USBD_HS_SPEED;
 800a23e:	2300      	movs	r3, #0
 800a240:	75fb      	strb	r3, [r7, #23]
 800a242:	e00a      	b.n	800a25a <USB_GetDevSpeed+0x3c>
    } else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) || (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ)) {
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2b02      	cmp	r3, #2
 800a248:	d002      	beq.n	800a250 <USB_GetDevSpeed+0x32>
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2b06      	cmp	r3, #6
 800a24e:	d102      	bne.n	800a256 <USB_GetDevSpeed+0x38>
        speed = USBD_FS_SPEED;
 800a250:	2302      	movs	r3, #2
 800a252:	75fb      	strb	r3, [r7, #23]
 800a254:	e001      	b.n	800a25a <USB_GetDevSpeed+0x3c>
    } else {
        speed = 0xFU;
 800a256:	230f      	movs	r3, #15
 800a258:	75fb      	strb	r3, [r7, #23]
    }

    return speed;
 800a25a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	371c      	adds	r7, #28
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <USB_ActivateEndpoint>:
 * @brief  Activate and configure an endpoint
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep) {
 800a268:	b480      	push	{r7}
 800a26a:	b085      	sub	sp, #20
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	60fb      	str	r3, [r7, #12]
    uint32_t epnum = (uint32_t)ep->num;
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	60bb      	str	r3, [r7, #8]

    if (ep->is_in == 1U) {
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	785b      	ldrb	r3, [r3, #1]
 800a280:	2b01      	cmp	r3, #1
 800a282:	d13a      	bne.n	800a2fa <USB_ActivateEndpoint+0x92>
        USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a28a:	69da      	ldr	r2, [r3, #28]
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	f003 030f 	and.w	r3, r3, #15
 800a294:	2101      	movs	r1, #1
 800a296:	fa01 f303 	lsl.w	r3, r1, r3
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	68f9      	ldr	r1, [r7, #12]
 800a29e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	61cb      	str	r3, [r1, #28]

        if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U) {
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	015a      	lsls	r2, r3, #5
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d155      	bne.n	800a368 <USB_ActivateEndpoint+0x100>
            USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) | ((uint32_t)ep->type << 18) | (epnum << 22) | USB_OTG_DIEPCTL_SD0PID_SEVNFRM | USB_OTG_DIEPCTL_USBAEP;
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	015a      	lsls	r2, r3, #5
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	4413      	add	r3, r2
 800a2c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	68db      	ldr	r3, [r3, #12]
 800a2ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	791b      	ldrb	r3, [r3, #4]
 800a2d6:	049b      	lsls	r3, r3, #18
 800a2d8:	4319      	orrs	r1, r3
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	059b      	lsls	r3, r3, #22
 800a2de:	430b      	orrs	r3, r1
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	68ba      	ldr	r2, [r7, #8]
 800a2e4:	0151      	lsls	r1, r2, #5
 800a2e6:	68fa      	ldr	r2, [r7, #12]
 800a2e8:	440a      	add	r2, r1
 800a2ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a2f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2f6:	6013      	str	r3, [r2, #0]
 800a2f8:	e036      	b.n	800a368 <USB_ActivateEndpoint+0x100>
        }
    } else {
        USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a300:	69da      	ldr	r2, [r3, #28]
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	f003 030f 	and.w	r3, r3, #15
 800a30a:	2101      	movs	r1, #1
 800a30c:	fa01 f303 	lsl.w	r3, r1, r3
 800a310:	041b      	lsls	r3, r3, #16
 800a312:	68f9      	ldr	r1, [r7, #12]
 800a314:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a318:	4313      	orrs	r3, r2
 800a31a:	61cb      	str	r3, [r1, #28]

        if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U) {
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	015a      	lsls	r2, r3, #5
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	4413      	add	r3, r2
 800a324:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d11a      	bne.n	800a368 <USB_ActivateEndpoint+0x100>
            USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) | ((uint32_t)ep->type << 18) | USB_OTG_DIEPCTL_SD0PID_SEVNFRM | USB_OTG_DOEPCTL_USBAEP;
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	015a      	lsls	r2, r3, #5
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	4413      	add	r3, r2
 800a33a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	f3c3 010a 	ubfx	r1, r3, #0, #11
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	791b      	ldrb	r3, [r3, #4]
 800a34c:	049b      	lsls	r3, r3, #18
 800a34e:	430b      	orrs	r3, r1
 800a350:	4313      	orrs	r3, r2
 800a352:	68ba      	ldr	r2, [r7, #8]
 800a354:	0151      	lsls	r1, r2, #5
 800a356:	68fa      	ldr	r2, [r7, #12]
 800a358:	440a      	add	r2, r1
 800a35a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a35e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a362:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a366:	6013      	str	r3, [r2, #0]
        }
    }
    return HAL_OK;
 800a368:	2300      	movs	r3, #0
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3714      	adds	r7, #20
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr
	...

0800a378 <USB_DeactivateEndpoint>:
 * @brief  De-activate and de-initialize an endpoint
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep) {
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	60fb      	str	r3, [r7, #12]
    uint32_t epnum = (uint32_t)ep->num;
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	60bb      	str	r3, [r7, #8]

    /* Read DEPCTLn register */
    if (ep->is_in == 1U) {
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	785b      	ldrb	r3, [r3, #1]
 800a390:	2b01      	cmp	r3, #1
 800a392:	d161      	bne.n	800a458 <USB_DeactivateEndpoint+0xe0>
        if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA) {
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	015a      	lsls	r2, r3, #5
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	4413      	add	r3, r2
 800a39c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a3a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a3aa:	d11f      	bne.n	800a3ec <USB_DeactivateEndpoint+0x74>
            USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	015a      	lsls	r2, r3, #5
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	4413      	add	r3, r2
 800a3b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	68ba      	ldr	r2, [r7, #8]
 800a3bc:	0151      	lsls	r1, r2, #5
 800a3be:	68fa      	ldr	r2, [r7, #12]
 800a3c0:	440a      	add	r2, r1
 800a3c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a3ca:	6013      	str	r3, [r2, #0]
            USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	015a      	lsls	r2, r3, #5
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	4413      	add	r3, r2
 800a3d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	68ba      	ldr	r2, [r7, #8]
 800a3dc:	0151      	lsls	r1, r2, #5
 800a3de:	68fa      	ldr	r2, [r7, #12]
 800a3e0:	440a      	add	r2, r1
 800a3e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a3ea:	6013      	str	r3, [r2, #0]
        }

        USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	f003 030f 	and.w	r3, r3, #15
 800a3fc:	2101      	movs	r1, #1
 800a3fe:	fa01 f303 	lsl.w	r3, r1, r3
 800a402:	b29b      	uxth	r3, r3
 800a404:	43db      	mvns	r3, r3
 800a406:	68f9      	ldr	r1, [r7, #12]
 800a408:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a40c:	4013      	ands	r3, r2
 800a40e:	63cb      	str	r3, [r1, #60]	@ 0x3c
        USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a416:	69da      	ldr	r2, [r3, #28]
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	f003 030f 	and.w	r3, r3, #15
 800a420:	2101      	movs	r1, #1
 800a422:	fa01 f303 	lsl.w	r3, r1, r3
 800a426:	b29b      	uxth	r3, r3
 800a428:	43db      	mvns	r3, r3
 800a42a:	68f9      	ldr	r1, [r7, #12]
 800a42c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a430:	4013      	ands	r3, r2
 800a432:	61cb      	str	r3, [r1, #28]
        USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP | USB_OTG_DIEPCTL_MPSIZ | USB_OTG_DIEPCTL_TXFNUM | USB_OTG_DIEPCTL_SD0PID_SEVNFRM | USB_OTG_DIEPCTL_EPTYP);
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	015a      	lsls	r2, r3, #5
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	4413      	add	r3, r2
 800a43c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	0159      	lsls	r1, r3, #5
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	440b      	add	r3, r1
 800a44a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a44e:	4619      	mov	r1, r3
 800a450:	4b35      	ldr	r3, [pc, #212]	@ (800a528 <USB_DeactivateEndpoint+0x1b0>)
 800a452:	4013      	ands	r3, r2
 800a454:	600b      	str	r3, [r1, #0]
 800a456:	e060      	b.n	800a51a <USB_DeactivateEndpoint+0x1a2>
    } else {
        if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) {
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	015a      	lsls	r2, r3, #5
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	4413      	add	r3, r2
 800a460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a46a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a46e:	d11f      	bne.n	800a4b0 <USB_DeactivateEndpoint+0x138>
            USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	015a      	lsls	r2, r3, #5
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	4413      	add	r3, r2
 800a478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	68ba      	ldr	r2, [r7, #8]
 800a480:	0151      	lsls	r1, r2, #5
 800a482:	68fa      	ldr	r2, [r7, #12]
 800a484:	440a      	add	r2, r1
 800a486:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a48a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a48e:	6013      	str	r3, [r2, #0]
            USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	015a      	lsls	r2, r3, #5
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	4413      	add	r3, r2
 800a498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	68ba      	ldr	r2, [r7, #8]
 800a4a0:	0151      	lsls	r1, r2, #5
 800a4a2:	68fa      	ldr	r2, [r7, #12]
 800a4a4:	440a      	add	r2, r1
 800a4a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a4ae:	6013      	str	r3, [r2, #0]
        }

        USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	f003 030f 	and.w	r3, r3, #15
 800a4c0:	2101      	movs	r1, #1
 800a4c2:	fa01 f303 	lsl.w	r3, r1, r3
 800a4c6:	041b      	lsls	r3, r3, #16
 800a4c8:	43db      	mvns	r3, r3
 800a4ca:	68f9      	ldr	r1, [r7, #12]
 800a4cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a4d0:	4013      	ands	r3, r2
 800a4d2:	63cb      	str	r3, [r1, #60]	@ 0x3c
        USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4da:	69da      	ldr	r2, [r3, #28]
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	f003 030f 	and.w	r3, r3, #15
 800a4e4:	2101      	movs	r1, #1
 800a4e6:	fa01 f303 	lsl.w	r3, r1, r3
 800a4ea:	041b      	lsls	r3, r3, #16
 800a4ec:	43db      	mvns	r3, r3
 800a4ee:	68f9      	ldr	r1, [r7, #12]
 800a4f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a4f4:	4013      	ands	r3, r2
 800a4f6:	61cb      	str	r3, [r1, #28]
        USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP | USB_OTG_DOEPCTL_MPSIZ | USB_OTG_DOEPCTL_SD0PID_SEVNFRM | USB_OTG_DOEPCTL_EPTYP);
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	015a      	lsls	r2, r3, #5
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	4413      	add	r3, r2
 800a500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	0159      	lsls	r1, r3, #5
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	440b      	add	r3, r1
 800a50e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a512:	4619      	mov	r1, r3
 800a514:	4b05      	ldr	r3, [pc, #20]	@ (800a52c <USB_DeactivateEndpoint+0x1b4>)
 800a516:	4013      	ands	r3, r2
 800a518:	600b      	str	r3, [r1, #0]
    }

    return HAL_OK;
 800a51a:	2300      	movs	r3, #0
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3714      	adds	r7, #20
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr
 800a528:	ec337800 	.word	0xec337800
 800a52c:	eff37800 	.word	0xeff37800

0800a530 <USB_EPStartXfer>:
 *          This parameter can be one of these values:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep, uint8_t dma) {
 800a530:	b580      	push	{r7, lr}
 800a532:	b08a      	sub	sp, #40	@ 0x28
 800a534:	af02      	add	r7, sp, #8
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	60b9      	str	r1, [r7, #8]
 800a53a:	4613      	mov	r3, r2
 800a53c:	71fb      	strb	r3, [r7, #7]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	61fb      	str	r3, [r7, #28]
    uint32_t epnum = (uint32_t)ep->num;
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	61bb      	str	r3, [r7, #24]
    uint16_t pktcnt;

    /* IN endpoint */
    if (ep->is_in == 1U) {
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	785b      	ldrb	r3, [r3, #1]
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	f040 815c 	bne.w	800a80a <USB_EPStartXfer+0x2da>
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U) {
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	699b      	ldr	r3, [r3, #24]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d132      	bne.n	800a5c0 <USB_EPStartXfer+0x90>
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	015a      	lsls	r2, r3, #5
 800a55e:	69fb      	ldr	r3, [r7, #28]
 800a560:	4413      	add	r3, r2
 800a562:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a566:	691b      	ldr	r3, [r3, #16]
 800a568:	69ba      	ldr	r2, [r7, #24]
 800a56a:	0151      	lsls	r1, r2, #5
 800a56c:	69fa      	ldr	r2, [r7, #28]
 800a56e:	440a      	add	r2, r1
 800a570:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a574:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a578:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a57c:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a57e:	69bb      	ldr	r3, [r7, #24]
 800a580:	015a      	lsls	r2, r3, #5
 800a582:	69fb      	ldr	r3, [r7, #28]
 800a584:	4413      	add	r3, r2
 800a586:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a58a:	691b      	ldr	r3, [r3, #16]
 800a58c:	69ba      	ldr	r2, [r7, #24]
 800a58e:	0151      	lsls	r1, r2, #5
 800a590:	69fa      	ldr	r2, [r7, #28]
 800a592:	440a      	add	r2, r1
 800a594:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a598:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a59c:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a59e:	69bb      	ldr	r3, [r7, #24]
 800a5a0:	015a      	lsls	r2, r3, #5
 800a5a2:	69fb      	ldr	r3, [r7, #28]
 800a5a4:	4413      	add	r3, r2
 800a5a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5aa:	691b      	ldr	r3, [r3, #16]
 800a5ac:	69ba      	ldr	r2, [r7, #24]
 800a5ae:	0151      	lsls	r1, r2, #5
 800a5b0:	69fa      	ldr	r2, [r7, #28]
 800a5b2:	440a      	add	r2, r1
 800a5b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5b8:	0cdb      	lsrs	r3, r3, #19
 800a5ba:	04db      	lsls	r3, r3, #19
 800a5bc:	6113      	str	r3, [r2, #16]
 800a5be:	e074      	b.n	800a6aa <USB_EPStartXfer+0x17a>
            /* Program the transfer size and packet count
             * as follows: xfersize = N * maxpacket +
             * short_packet pktcnt = N + (short_packet
             * exist ? 1 : 0)
             */
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	015a      	lsls	r2, r3, #5
 800a5c4:	69fb      	ldr	r3, [r7, #28]
 800a5c6:	4413      	add	r3, r2
 800a5c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5cc:	691b      	ldr	r3, [r3, #16]
 800a5ce:	69ba      	ldr	r2, [r7, #24]
 800a5d0:	0151      	lsls	r1, r2, #5
 800a5d2:	69fa      	ldr	r2, [r7, #28]
 800a5d4:	440a      	add	r2, r1
 800a5d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5da:	0cdb      	lsrs	r3, r3, #19
 800a5dc:	04db      	lsls	r3, r3, #19
 800a5de:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a5e0:	69bb      	ldr	r3, [r7, #24]
 800a5e2:	015a      	lsls	r2, r3, #5
 800a5e4:	69fb      	ldr	r3, [r7, #28]
 800a5e6:	4413      	add	r3, r2
 800a5e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5ec:	691b      	ldr	r3, [r3, #16]
 800a5ee:	69ba      	ldr	r2, [r7, #24]
 800a5f0:	0151      	lsls	r1, r2, #5
 800a5f2:	69fa      	ldr	r2, [r7, #28]
 800a5f4:	440a      	add	r2, r1
 800a5f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5fa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a5fe:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a602:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a604:	69bb      	ldr	r3, [r7, #24]
 800a606:	015a      	lsls	r2, r3, #5
 800a608:	69fb      	ldr	r3, [r7, #28]
 800a60a:	4413      	add	r3, r2
 800a60c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a610:	691a      	ldr	r2, [r3, #16]
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	6999      	ldr	r1, [r3, #24]
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	440b      	add	r3, r1
 800a61c:	1e59      	subs	r1, r3, #1
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	68db      	ldr	r3, [r3, #12]
 800a622:	fbb1 f3f3 	udiv	r3, r1, r3
 800a626:	04d9      	lsls	r1, r3, #19
 800a628:	4b9d      	ldr	r3, [pc, #628]	@ (800a8a0 <USB_EPStartXfer+0x370>)
 800a62a:	400b      	ands	r3, r1
 800a62c:	69b9      	ldr	r1, [r7, #24]
 800a62e:	0148      	lsls	r0, r1, #5
 800a630:	69f9      	ldr	r1, [r7, #28]
 800a632:	4401      	add	r1, r0
 800a634:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a638:	4313      	orrs	r3, r2
 800a63a:	610b      	str	r3, [r1, #16]

            USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a63c:	69bb      	ldr	r3, [r7, #24]
 800a63e:	015a      	lsls	r2, r3, #5
 800a640:	69fb      	ldr	r3, [r7, #28]
 800a642:	4413      	add	r3, r2
 800a644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a648:	691a      	ldr	r2, [r3, #16]
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	699b      	ldr	r3, [r3, #24]
 800a64e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a652:	69b9      	ldr	r1, [r7, #24]
 800a654:	0148      	lsls	r0, r1, #5
 800a656:	69f9      	ldr	r1, [r7, #28]
 800a658:	4401      	add	r1, r0
 800a65a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a65e:	4313      	orrs	r3, r2
 800a660:	610b      	str	r3, [r1, #16]

            if (ep->type == EP_TYPE_ISOC) {
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	791b      	ldrb	r3, [r3, #4]
 800a666:	2b01      	cmp	r3, #1
 800a668:	d11f      	bne.n	800a6aa <USB_EPStartXfer+0x17a>
                USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	015a      	lsls	r2, r3, #5
 800a66e:	69fb      	ldr	r3, [r7, #28]
 800a670:	4413      	add	r3, r2
 800a672:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a676:	691b      	ldr	r3, [r3, #16]
 800a678:	69ba      	ldr	r2, [r7, #24]
 800a67a:	0151      	lsls	r1, r2, #5
 800a67c:	69fa      	ldr	r2, [r7, #28]
 800a67e:	440a      	add	r2, r1
 800a680:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a684:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a688:	6113      	str	r3, [r2, #16]
                USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	015a      	lsls	r2, r3, #5
 800a68e:	69fb      	ldr	r3, [r7, #28]
 800a690:	4413      	add	r3, r2
 800a692:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a696:	691b      	ldr	r3, [r3, #16]
 800a698:	69ba      	ldr	r2, [r7, #24]
 800a69a:	0151      	lsls	r1, r2, #5
 800a69c:	69fa      	ldr	r2, [r7, #28]
 800a69e:	440a      	add	r2, r1
 800a6a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a6a8:	6113      	str	r3, [r2, #16]
            }
        }

        if (dma == 1U) {
 800a6aa:	79fb      	ldrb	r3, [r7, #7]
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	d14b      	bne.n	800a748 <USB_EPStartXfer+0x218>
            if ((uint32_t)ep->dma_addr != 0U) {
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	695b      	ldr	r3, [r3, #20]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d009      	beq.n	800a6cc <USB_EPStartXfer+0x19c>
                USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a6b8:	69bb      	ldr	r3, [r7, #24]
 800a6ba:	015a      	lsls	r2, r3, #5
 800a6bc:	69fb      	ldr	r3, [r7, #28]
 800a6be:	4413      	add	r3, r2
 800a6c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	695b      	ldr	r3, [r3, #20]
 800a6ca:	6153      	str	r3, [r2, #20]
            }

            if (ep->type == EP_TYPE_ISOC) {
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	791b      	ldrb	r3, [r3, #4]
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d128      	bne.n	800a726 <USB_EPStartXfer+0x1f6>
                if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U) {
 800a6d4:	69fb      	ldr	r3, [r7, #28]
 800a6d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d110      	bne.n	800a706 <USB_EPStartXfer+0x1d6>
                    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a6e4:	69bb      	ldr	r3, [r7, #24]
 800a6e6:	015a      	lsls	r2, r3, #5
 800a6e8:	69fb      	ldr	r3, [r7, #28]
 800a6ea:	4413      	add	r3, r2
 800a6ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	69ba      	ldr	r2, [r7, #24]
 800a6f4:	0151      	lsls	r1, r2, #5
 800a6f6:	69fa      	ldr	r2, [r7, #28]
 800a6f8:	440a      	add	r2, r1
 800a6fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6fe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a702:	6013      	str	r3, [r2, #0]
 800a704:	e00f      	b.n	800a726 <USB_EPStartXfer+0x1f6>
                } else {
                    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a706:	69bb      	ldr	r3, [r7, #24]
 800a708:	015a      	lsls	r2, r3, #5
 800a70a:	69fb      	ldr	r3, [r7, #28]
 800a70c:	4413      	add	r3, r2
 800a70e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	69ba      	ldr	r2, [r7, #24]
 800a716:	0151      	lsls	r1, r2, #5
 800a718:	69fa      	ldr	r2, [r7, #28]
 800a71a:	440a      	add	r2, r1
 800a71c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a724:	6013      	str	r3, [r2, #0]
                }
            }

            /* EP enable, IN data in FIFO */
            USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a726:	69bb      	ldr	r3, [r7, #24]
 800a728:	015a      	lsls	r2, r3, #5
 800a72a:	69fb      	ldr	r3, [r7, #28]
 800a72c:	4413      	add	r3, r2
 800a72e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	69ba      	ldr	r2, [r7, #24]
 800a736:	0151      	lsls	r1, r2, #5
 800a738:	69fa      	ldr	r2, [r7, #28]
 800a73a:	440a      	add	r2, r1
 800a73c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a740:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a744:	6013      	str	r3, [r2, #0]
 800a746:	e133      	b.n	800a9b0 <USB_EPStartXfer+0x480>
        } else {
            /* EP enable, IN data in FIFO */
            USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a748:	69bb      	ldr	r3, [r7, #24]
 800a74a:	015a      	lsls	r2, r3, #5
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	4413      	add	r3, r2
 800a750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	69ba      	ldr	r2, [r7, #24]
 800a758:	0151      	lsls	r1, r2, #5
 800a75a:	69fa      	ldr	r2, [r7, #28]
 800a75c:	440a      	add	r2, r1
 800a75e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a762:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a766:	6013      	str	r3, [r2, #0]

            if (ep->type != EP_TYPE_ISOC) {
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	791b      	ldrb	r3, [r3, #4]
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d015      	beq.n	800a79c <USB_EPStartXfer+0x26c>
                /* Enable the Tx FIFO Empty Interrupt for this EP */
                if (ep->xfer_len > 0U) {
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	699b      	ldr	r3, [r3, #24]
 800a774:	2b00      	cmp	r3, #0
 800a776:	f000 811b 	beq.w	800a9b0 <USB_EPStartXfer+0x480>
                    USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a77a:	69fb      	ldr	r3, [r7, #28]
 800a77c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a780:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	f003 030f 	and.w	r3, r3, #15
 800a78a:	2101      	movs	r1, #1
 800a78c:	fa01 f303 	lsl.w	r3, r1, r3
 800a790:	69f9      	ldr	r1, [r7, #28]
 800a792:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a796:	4313      	orrs	r3, r2
 800a798:	634b      	str	r3, [r1, #52]	@ 0x34
 800a79a:	e109      	b.n	800a9b0 <USB_EPStartXfer+0x480>
                }
            } else {
                if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U) {
 800a79c:	69fb      	ldr	r3, [r7, #28]
 800a79e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d110      	bne.n	800a7ce <USB_EPStartXfer+0x29e>
                    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a7ac:	69bb      	ldr	r3, [r7, #24]
 800a7ae:	015a      	lsls	r2, r3, #5
 800a7b0:	69fb      	ldr	r3, [r7, #28]
 800a7b2:	4413      	add	r3, r2
 800a7b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	69ba      	ldr	r2, [r7, #24]
 800a7bc:	0151      	lsls	r1, r2, #5
 800a7be:	69fa      	ldr	r2, [r7, #28]
 800a7c0:	440a      	add	r2, r1
 800a7c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7c6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a7ca:	6013      	str	r3, [r2, #0]
 800a7cc:	e00f      	b.n	800a7ee <USB_EPStartXfer+0x2be>
                } else {
                    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	015a      	lsls	r2, r3, #5
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	4413      	add	r3, r2
 800a7d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	69ba      	ldr	r2, [r7, #24]
 800a7de:	0151      	lsls	r1, r2, #5
 800a7e0:	69fa      	ldr	r2, [r7, #28]
 800a7e2:	440a      	add	r2, r1
 800a7e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a7ec:	6013      	str	r3, [r2, #0]
                }

                (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	6919      	ldr	r1, [r3, #16]
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	781a      	ldrb	r2, [r3, #0]
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	699b      	ldr	r3, [r3, #24]
 800a7fa:	b298      	uxth	r0, r3
 800a7fc:	79fb      	ldrb	r3, [r7, #7]
 800a7fe:	9300      	str	r3, [sp, #0]
 800a800:	4603      	mov	r3, r0
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f000 fade 	bl	800adc4 <USB_WritePacket>
 800a808:	e0d2      	b.n	800a9b0 <USB_EPStartXfer+0x480>
    {
        /* Program the transfer size and packet count as follows:
         * pktcnt = N
         * xfersize = N * maxpacket
         */
        USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a80a:	69bb      	ldr	r3, [r7, #24]
 800a80c:	015a      	lsls	r2, r3, #5
 800a80e:	69fb      	ldr	r3, [r7, #28]
 800a810:	4413      	add	r3, r2
 800a812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a816:	691b      	ldr	r3, [r3, #16]
 800a818:	69ba      	ldr	r2, [r7, #24]
 800a81a:	0151      	lsls	r1, r2, #5
 800a81c:	69fa      	ldr	r2, [r7, #28]
 800a81e:	440a      	add	r2, r1
 800a820:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a824:	0cdb      	lsrs	r3, r3, #19
 800a826:	04db      	lsls	r3, r3, #19
 800a828:	6113      	str	r3, [r2, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a82a:	69bb      	ldr	r3, [r7, #24]
 800a82c:	015a      	lsls	r2, r3, #5
 800a82e:	69fb      	ldr	r3, [r7, #28]
 800a830:	4413      	add	r3, r2
 800a832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a836:	691b      	ldr	r3, [r3, #16]
 800a838:	69ba      	ldr	r2, [r7, #24]
 800a83a:	0151      	lsls	r1, r2, #5
 800a83c:	69fa      	ldr	r2, [r7, #28]
 800a83e:	440a      	add	r2, r1
 800a840:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a844:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a848:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a84c:	6113      	str	r3, [r2, #16]

        if (ep->xfer_len == 0U) {
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	699b      	ldr	r3, [r3, #24]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d126      	bne.n	800a8a4 <USB_EPStartXfer+0x374>
            USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a856:	69bb      	ldr	r3, [r7, #24]
 800a858:	015a      	lsls	r2, r3, #5
 800a85a:	69fb      	ldr	r3, [r7, #28]
 800a85c:	4413      	add	r3, r2
 800a85e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a862:	691a      	ldr	r2, [r3, #16]
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a86c:	69b9      	ldr	r1, [r7, #24]
 800a86e:	0148      	lsls	r0, r1, #5
 800a870:	69f9      	ldr	r1, [r7, #28]
 800a872:	4401      	add	r1, r0
 800a874:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a878:	4313      	orrs	r3, r2
 800a87a:	610b      	str	r3, [r1, #16]
            USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a87c:	69bb      	ldr	r3, [r7, #24]
 800a87e:	015a      	lsls	r2, r3, #5
 800a880:	69fb      	ldr	r3, [r7, #28]
 800a882:	4413      	add	r3, r2
 800a884:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	69ba      	ldr	r2, [r7, #24]
 800a88c:	0151      	lsls	r1, r2, #5
 800a88e:	69fa      	ldr	r2, [r7, #28]
 800a890:	440a      	add	r2, r1
 800a892:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a896:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a89a:	6113      	str	r3, [r2, #16]
 800a89c:	e03a      	b.n	800a914 <USB_EPStartXfer+0x3e4>
 800a89e:	bf00      	nop
 800a8a0:	1ff80000 	.word	0x1ff80000
        } else {
            pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	699a      	ldr	r2, [r3, #24]
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	1e5a      	subs	r2, r3, #1
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8b8:	82fb      	strh	r3, [r7, #22]
            ep->xfer_size = ep->maxpacket * pktcnt;
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	68db      	ldr	r3, [r3, #12]
 800a8be:	8afa      	ldrh	r2, [r7, #22]
 800a8c0:	fb03 f202 	mul.w	r2, r3, r2
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	61da      	str	r2, [r3, #28]

            USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a8c8:	69bb      	ldr	r3, [r7, #24]
 800a8ca:	015a      	lsls	r2, r3, #5
 800a8cc:	69fb      	ldr	r3, [r7, #28]
 800a8ce:	4413      	add	r3, r2
 800a8d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8d4:	691a      	ldr	r2, [r3, #16]
 800a8d6:	8afb      	ldrh	r3, [r7, #22]
 800a8d8:	04d9      	lsls	r1, r3, #19
 800a8da:	4b38      	ldr	r3, [pc, #224]	@ (800a9bc <USB_EPStartXfer+0x48c>)
 800a8dc:	400b      	ands	r3, r1
 800a8de:	69b9      	ldr	r1, [r7, #24]
 800a8e0:	0148      	lsls	r0, r1, #5
 800a8e2:	69f9      	ldr	r1, [r7, #28]
 800a8e4:	4401      	add	r1, r0
 800a8e6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	610b      	str	r3, [r1, #16]
            USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	015a      	lsls	r2, r3, #5
 800a8f2:	69fb      	ldr	r3, [r7, #28]
 800a8f4:	4413      	add	r3, r2
 800a8f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8fa:	691a      	ldr	r2, [r3, #16]
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	69db      	ldr	r3, [r3, #28]
 800a900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a904:	69b9      	ldr	r1, [r7, #24]
 800a906:	0148      	lsls	r0, r1, #5
 800a908:	69f9      	ldr	r1, [r7, #28]
 800a90a:	4401      	add	r1, r0
 800a90c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a910:	4313      	orrs	r3, r2
 800a912:	610b      	str	r3, [r1, #16]
        }

        if (dma == 1U) {
 800a914:	79fb      	ldrb	r3, [r7, #7]
 800a916:	2b01      	cmp	r3, #1
 800a918:	d10d      	bne.n	800a936 <USB_EPStartXfer+0x406>
            if ((uint32_t)ep->xfer_buff != 0U) {
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	691b      	ldr	r3, [r3, #16]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d009      	beq.n	800a936 <USB_EPStartXfer+0x406>
                USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	6919      	ldr	r1, [r3, #16]
 800a926:	69bb      	ldr	r3, [r7, #24]
 800a928:	015a      	lsls	r2, r3, #5
 800a92a:	69fb      	ldr	r3, [r7, #28]
 800a92c:	4413      	add	r3, r2
 800a92e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a932:	460a      	mov	r2, r1
 800a934:	615a      	str	r2, [r3, #20]
            }
        }

        if (ep->type == EP_TYPE_ISOC) {
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	791b      	ldrb	r3, [r3, #4]
 800a93a:	2b01      	cmp	r3, #1
 800a93c:	d128      	bne.n	800a990 <USB_EPStartXfer+0x460>
            if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U) {
 800a93e:	69fb      	ldr	r3, [r7, #28]
 800a940:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a944:	689b      	ldr	r3, [r3, #8]
 800a946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d110      	bne.n	800a970 <USB_EPStartXfer+0x440>
                USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	015a      	lsls	r2, r3, #5
 800a952:	69fb      	ldr	r3, [r7, #28]
 800a954:	4413      	add	r3, r2
 800a956:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	69ba      	ldr	r2, [r7, #24]
 800a95e:	0151      	lsls	r1, r2, #5
 800a960:	69fa      	ldr	r2, [r7, #28]
 800a962:	440a      	add	r2, r1
 800a964:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a968:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a96c:	6013      	str	r3, [r2, #0]
 800a96e:	e00f      	b.n	800a990 <USB_EPStartXfer+0x460>
            } else {
                USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a970:	69bb      	ldr	r3, [r7, #24]
 800a972:	015a      	lsls	r2, r3, #5
 800a974:	69fb      	ldr	r3, [r7, #28]
 800a976:	4413      	add	r3, r2
 800a978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	69ba      	ldr	r2, [r7, #24]
 800a980:	0151      	lsls	r1, r2, #5
 800a982:	69fa      	ldr	r2, [r7, #28]
 800a984:	440a      	add	r2, r1
 800a986:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a98a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a98e:	6013      	str	r3, [r2, #0]
            }
        }
        /* EP enable */
        USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a990:	69bb      	ldr	r3, [r7, #24]
 800a992:	015a      	lsls	r2, r3, #5
 800a994:	69fb      	ldr	r3, [r7, #28]
 800a996:	4413      	add	r3, r2
 800a998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	69ba      	ldr	r2, [r7, #24]
 800a9a0:	0151      	lsls	r1, r2, #5
 800a9a2:	69fa      	ldr	r2, [r7, #28]
 800a9a4:	440a      	add	r2, r1
 800a9a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9aa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a9ae:	6013      	str	r3, [r2, #0]
    }

    return HAL_OK;
 800a9b0:	2300      	movs	r3, #0
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3720      	adds	r7, #32
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	1ff80000 	.word	0x1ff80000

0800a9c0 <USB_EP0StartXfer>:
 *          This parameter can be one of these values:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep, uint8_t dma) {
 800a9c0:	b480      	push	{r7}
 800a9c2:	b087      	sub	sp, #28
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	71fb      	strb	r3, [r7, #7]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	617b      	str	r3, [r7, #20]
    uint32_t epnum = (uint32_t)ep->num;
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	781b      	ldrb	r3, [r3, #0]
 800a9d6:	613b      	str	r3, [r7, #16]

    /* IN endpoint */
    if (ep->is_in == 1U) {
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	785b      	ldrb	r3, [r3, #1]
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	f040 80ce 	bne.w	800ab7e <USB_EP0StartXfer+0x1be>
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U) {
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	699b      	ldr	r3, [r3, #24]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d132      	bne.n	800aa50 <USB_EP0StartXfer+0x90>
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	015a      	lsls	r2, r3, #5
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9f6:	691b      	ldr	r3, [r3, #16]
 800a9f8:	693a      	ldr	r2, [r7, #16]
 800a9fa:	0151      	lsls	r1, r2, #5
 800a9fc:	697a      	ldr	r2, [r7, #20]
 800a9fe:	440a      	add	r2, r1
 800aa00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa04:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800aa08:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800aa0c:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	015a      	lsls	r2, r3, #5
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	4413      	add	r3, r2
 800aa16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa1a:	691b      	ldr	r3, [r3, #16]
 800aa1c:	693a      	ldr	r2, [r7, #16]
 800aa1e:	0151      	lsls	r1, r2, #5
 800aa20:	697a      	ldr	r2, [r7, #20]
 800aa22:	440a      	add	r2, r1
 800aa24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa28:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aa2c:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	015a      	lsls	r2, r3, #5
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	4413      	add	r3, r2
 800aa36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa3a:	691b      	ldr	r3, [r3, #16]
 800aa3c:	693a      	ldr	r2, [r7, #16]
 800aa3e:	0151      	lsls	r1, r2, #5
 800aa40:	697a      	ldr	r2, [r7, #20]
 800aa42:	440a      	add	r2, r1
 800aa44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa48:	0cdb      	lsrs	r3, r3, #19
 800aa4a:	04db      	lsls	r3, r3, #19
 800aa4c:	6113      	str	r3, [r2, #16]
 800aa4e:	e04e      	b.n	800aaee <USB_EP0StartXfer+0x12e>
            /* Program the transfer size and packet count
             * as follows: xfersize = N * maxpacket +
             * short_packet pktcnt = N + (short_packet
             * exist ? 1 : 0)
             */
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	015a      	lsls	r2, r3, #5
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	4413      	add	r3, r2
 800aa58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa5c:	691b      	ldr	r3, [r3, #16]
 800aa5e:	693a      	ldr	r2, [r7, #16]
 800aa60:	0151      	lsls	r1, r2, #5
 800aa62:	697a      	ldr	r2, [r7, #20]
 800aa64:	440a      	add	r2, r1
 800aa66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa6a:	0cdb      	lsrs	r3, r3, #19
 800aa6c:	04db      	lsls	r3, r3, #19
 800aa6e:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	015a      	lsls	r2, r3, #5
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	4413      	add	r3, r2
 800aa78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa7c:	691b      	ldr	r3, [r3, #16]
 800aa7e:	693a      	ldr	r2, [r7, #16]
 800aa80:	0151      	lsls	r1, r2, #5
 800aa82:	697a      	ldr	r2, [r7, #20]
 800aa84:	440a      	add	r2, r1
 800aa86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa8a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800aa8e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800aa92:	6113      	str	r3, [r2, #16]

            if (ep->xfer_len > ep->maxpacket) {
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	699a      	ldr	r2, [r3, #24]
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d903      	bls.n	800aaa8 <USB_EP0StartXfer+0xe8>
                ep->xfer_len = ep->maxpacket;
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	68da      	ldr	r2, [r3, #12]
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	619a      	str	r2, [r3, #24]
            }
            USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	015a      	lsls	r2, r3, #5
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	4413      	add	r3, r2
 800aab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aab4:	691b      	ldr	r3, [r3, #16]
 800aab6:	693a      	ldr	r2, [r7, #16]
 800aab8:	0151      	lsls	r1, r2, #5
 800aaba:	697a      	ldr	r2, [r7, #20]
 800aabc:	440a      	add	r2, r1
 800aabe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aac2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aac6:	6113      	str	r3, [r2, #16]
            USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	015a      	lsls	r2, r3, #5
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	4413      	add	r3, r2
 800aad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aad4:	691a      	ldr	r2, [r3, #16]
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	699b      	ldr	r3, [r3, #24]
 800aada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aade:	6939      	ldr	r1, [r7, #16]
 800aae0:	0148      	lsls	r0, r1, #5
 800aae2:	6979      	ldr	r1, [r7, #20]
 800aae4:	4401      	add	r1, r0
 800aae6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800aaea:	4313      	orrs	r3, r2
 800aaec:	610b      	str	r3, [r1, #16]
        }

        if (dma == 1U) {
 800aaee:	79fb      	ldrb	r3, [r7, #7]
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d11e      	bne.n	800ab32 <USB_EP0StartXfer+0x172>
            if ((uint32_t)ep->dma_addr != 0U) {
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	695b      	ldr	r3, [r3, #20]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d009      	beq.n	800ab10 <USB_EP0StartXfer+0x150>
                USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	015a      	lsls	r2, r3, #5
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	4413      	add	r3, r2
 800ab04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab08:	461a      	mov	r2, r3
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	695b      	ldr	r3, [r3, #20]
 800ab0e:	6153      	str	r3, [r2, #20]
            }

            /* EP enable, IN data in FIFO */
            USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	015a      	lsls	r2, r3, #5
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	4413      	add	r3, r2
 800ab18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	693a      	ldr	r2, [r7, #16]
 800ab20:	0151      	lsls	r1, r2, #5
 800ab22:	697a      	ldr	r2, [r7, #20]
 800ab24:	440a      	add	r2, r1
 800ab26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab2a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ab2e:	6013      	str	r3, [r2, #0]
 800ab30:	e097      	b.n	800ac62 <USB_EP0StartXfer+0x2a2>
        } else {
            /* EP enable, IN data in FIFO */
            USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	015a      	lsls	r2, r3, #5
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	4413      	add	r3, r2
 800ab3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	693a      	ldr	r2, [r7, #16]
 800ab42:	0151      	lsls	r1, r2, #5
 800ab44:	697a      	ldr	r2, [r7, #20]
 800ab46:	440a      	add	r2, r1
 800ab48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab4c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ab50:	6013      	str	r3, [r2, #0]

            /* Enable the Tx FIFO Empty Interrupt for this EP */
            if (ep->xfer_len > 0U) {
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	699b      	ldr	r3, [r3, #24]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	f000 8083 	beq.w	800ac62 <USB_EP0StartXfer+0x2a2>
                USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	f003 030f 	and.w	r3, r3, #15
 800ab6c:	2101      	movs	r1, #1
 800ab6e:	fa01 f303 	lsl.w	r3, r1, r3
 800ab72:	6979      	ldr	r1, [r7, #20]
 800ab74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	634b      	str	r3, [r1, #52]	@ 0x34
 800ab7c:	e071      	b.n	800ac62 <USB_EP0StartXfer+0x2a2>
    {
        /* Program the transfer size and packet count as follows:
         * pktcnt = N
         * xfersize = N * maxpacket
         */
        USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	015a      	lsls	r2, r3, #5
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	4413      	add	r3, r2
 800ab86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab8a:	691b      	ldr	r3, [r3, #16]
 800ab8c:	693a      	ldr	r2, [r7, #16]
 800ab8e:	0151      	lsls	r1, r2, #5
 800ab90:	697a      	ldr	r2, [r7, #20]
 800ab92:	440a      	add	r2, r1
 800ab94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab98:	0cdb      	lsrs	r3, r3, #19
 800ab9a:	04db      	lsls	r3, r3, #19
 800ab9c:	6113      	str	r3, [r2, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	015a      	lsls	r2, r3, #5
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	4413      	add	r3, r2
 800aba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abaa:	691b      	ldr	r3, [r3, #16]
 800abac:	693a      	ldr	r2, [r7, #16]
 800abae:	0151      	lsls	r1, r2, #5
 800abb0:	697a      	ldr	r2, [r7, #20]
 800abb2:	440a      	add	r2, r1
 800abb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800abb8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800abbc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800abc0:	6113      	str	r3, [r2, #16]

        if (ep->xfer_len > 0U) {
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	699b      	ldr	r3, [r3, #24]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d003      	beq.n	800abd2 <USB_EP0StartXfer+0x212>
            ep->xfer_len = ep->maxpacket;
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	68da      	ldr	r2, [r3, #12]
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	619a      	str	r2, [r3, #24]
        }

        /* Store transfer size, for EP0 this is equal to endpoint max packet size */
        ep->xfer_size = ep->maxpacket;
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	68da      	ldr	r2, [r3, #12]
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	61da      	str	r2, [r3, #28]

        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	015a      	lsls	r2, r3, #5
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	4413      	add	r3, r2
 800abe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abe6:	691b      	ldr	r3, [r3, #16]
 800abe8:	693a      	ldr	r2, [r7, #16]
 800abea:	0151      	lsls	r1, r2, #5
 800abec:	697a      	ldr	r2, [r7, #20]
 800abee:	440a      	add	r2, r1
 800abf0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800abf4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800abf8:	6113      	str	r3, [r2, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	015a      	lsls	r2, r3, #5
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	4413      	add	r3, r2
 800ac02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac06:	691a      	ldr	r2, [r3, #16]
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	69db      	ldr	r3, [r3, #28]
 800ac0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac10:	6939      	ldr	r1, [r7, #16]
 800ac12:	0148      	lsls	r0, r1, #5
 800ac14:	6979      	ldr	r1, [r7, #20]
 800ac16:	4401      	add	r1, r0
 800ac18:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ac1c:	4313      	orrs	r3, r2
 800ac1e:	610b      	str	r3, [r1, #16]

        if (dma == 1U) {
 800ac20:	79fb      	ldrb	r3, [r7, #7]
 800ac22:	2b01      	cmp	r3, #1
 800ac24:	d10d      	bne.n	800ac42 <USB_EP0StartXfer+0x282>
            if ((uint32_t)ep->xfer_buff != 0U) {
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	691b      	ldr	r3, [r3, #16]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d009      	beq.n	800ac42 <USB_EP0StartXfer+0x282>
                USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	6919      	ldr	r1, [r3, #16]
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	015a      	lsls	r2, r3, #5
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	4413      	add	r3, r2
 800ac3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac3e:	460a      	mov	r2, r1
 800ac40:	615a      	str	r2, [r3, #20]
            }
        }

        /* EP enable */
        USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	015a      	lsls	r2, r3, #5
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	4413      	add	r3, r2
 800ac4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	693a      	ldr	r2, [r7, #16]
 800ac52:	0151      	lsls	r1, r2, #5
 800ac54:	697a      	ldr	r2, [r7, #20]
 800ac56:	440a      	add	r2, r1
 800ac58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac5c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ac60:	6013      	str	r3, [r2, #0]
    }

    return HAL_OK;
 800ac62:	2300      	movs	r3, #0
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	371c      	adds	r7, #28
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr

0800ac70 <USB_EPStopXfer>:
 * @brief  USB_EPStoptXfer  Stop transfer on an EP
 * @param  USBx  usb device instance
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep) {
 800ac70:	b480      	push	{r7}
 800ac72:	b087      	sub	sp, #28
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	6039      	str	r1, [r7, #0]
    __IO uint32_t count = 0U;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	60fb      	str	r3, [r7, #12]
    HAL_StatusTypeDef ret = HAL_OK;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	75fb      	strb	r3, [r7, #23]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	613b      	str	r3, [r7, #16]

    /* IN endpoint */
    if (ep->is_in == 1U) {
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	785b      	ldrb	r3, [r3, #1]
 800ac8a:	2b01      	cmp	r3, #1
 800ac8c:	d14a      	bne.n	800ad24 <USB_EPStopXfer+0xb4>
        /* EP enable, IN data in FIFO */
        if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA) {
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	015a      	lsls	r2, r3, #5
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	4413      	add	r3, r2
 800ac98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aca2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aca6:	f040 8086 	bne.w	800adb6 <USB_EPStopXfer+0x146>
            USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	781b      	ldrb	r3, [r3, #0]
 800acae:	015a      	lsls	r2, r3, #5
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	4413      	add	r3, r2
 800acb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	683a      	ldr	r2, [r7, #0]
 800acbc:	7812      	ldrb	r2, [r2, #0]
 800acbe:	0151      	lsls	r1, r2, #5
 800acc0:	693a      	ldr	r2, [r7, #16]
 800acc2:	440a      	add	r2, r1
 800acc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800acc8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800accc:	6013      	str	r3, [r2, #0]
            USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	015a      	lsls	r2, r3, #5
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	4413      	add	r3, r2
 800acd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	683a      	ldr	r2, [r7, #0]
 800ace0:	7812      	ldrb	r2, [r2, #0]
 800ace2:	0151      	lsls	r1, r2, #5
 800ace4:	693a      	ldr	r2, [r7, #16]
 800ace6:	440a      	add	r2, r1
 800ace8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800acec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800acf0:	6013      	str	r3, [r2, #0]

            do {
                count++;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	3301      	adds	r3, #1
 800acf6:	60fb      	str	r3, [r7, #12]

                if (count > 10000U) {
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f242 7210 	movw	r2, #10000	@ 0x2710
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d902      	bls.n	800ad08 <USB_EPStopXfer+0x98>
                    ret = HAL_ERROR;
 800ad02:	2301      	movs	r3, #1
 800ad04:	75fb      	strb	r3, [r7, #23]
                    break;
 800ad06:	e056      	b.n	800adb6 <USB_EPStopXfer+0x146>
                }
            } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA);
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	015a      	lsls	r2, r3, #5
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	4413      	add	r3, r2
 800ad12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ad1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad20:	d0e7      	beq.n	800acf2 <USB_EPStopXfer+0x82>
 800ad22:	e048      	b.n	800adb6 <USB_EPStopXfer+0x146>
        }
    } else /* OUT endpoint */
    {
        if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) {
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	015a      	lsls	r2, r3, #5
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	4413      	add	r3, r2
 800ad2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ad38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad3c:	d13b      	bne.n	800adb6 <USB_EPStopXfer+0x146>
            USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	015a      	lsls	r2, r3, #5
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	4413      	add	r3, r2
 800ad48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	683a      	ldr	r2, [r7, #0]
 800ad50:	7812      	ldrb	r2, [r2, #0]
 800ad52:	0151      	lsls	r1, r2, #5
 800ad54:	693a      	ldr	r2, [r7, #16]
 800ad56:	440a      	add	r2, r1
 800ad58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad5c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ad60:	6013      	str	r3, [r2, #0]
            USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	015a      	lsls	r2, r3, #5
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	4413      	add	r3, r2
 800ad6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	683a      	ldr	r2, [r7, #0]
 800ad74:	7812      	ldrb	r2, [r2, #0]
 800ad76:	0151      	lsls	r1, r2, #5
 800ad78:	693a      	ldr	r2, [r7, #16]
 800ad7a:	440a      	add	r2, r1
 800ad7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad80:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ad84:	6013      	str	r3, [r2, #0]

            do {
                count++;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	3301      	adds	r3, #1
 800ad8a:	60fb      	str	r3, [r7, #12]

                if (count > 10000U) {
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d902      	bls.n	800ad9c <USB_EPStopXfer+0x12c>
                    ret = HAL_ERROR;
 800ad96:	2301      	movs	r3, #1
 800ad98:	75fb      	strb	r3, [r7, #23]
                    break;
 800ad9a:	e00c      	b.n	800adb6 <USB_EPStopXfer+0x146>
                }
            } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA);
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	015a      	lsls	r2, r3, #5
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	4413      	add	r3, r2
 800ada6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800adb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800adb4:	d0e7      	beq.n	800ad86 <USB_EPStopXfer+0x116>
        }
    }

    return ret;
 800adb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800adb8:	4618      	mov	r0, r3
 800adba:	371c      	adds	r7, #28
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr

0800adc4 <USB_WritePacket>:
 *          This parameter can be one of these values:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @retval HAL status
 */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef * USBx, uint8_t * src, uint8_t ch_ep_num, uint16_t len, uint8_t dma) {
 800adc4:	b480      	push	{r7}
 800adc6:	b089      	sub	sp, #36	@ 0x24
 800adc8:	af00      	add	r7, sp, #0
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	60b9      	str	r1, [r7, #8]
 800adce:	4611      	mov	r1, r2
 800add0:	461a      	mov	r2, r3
 800add2:	460b      	mov	r3, r1
 800add4:	71fb      	strb	r3, [r7, #7]
 800add6:	4613      	mov	r3, r2
 800add8:	80bb      	strh	r3, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	617b      	str	r3, [r7, #20]
    uint8_t * pSrc = src;
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	61fb      	str	r3, [r7, #28]
    uint32_t count32b;
    uint32_t i;

    if (dma == 0U) {
 800ade2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d123      	bne.n	800ae32 <USB_WritePacket+0x6e>
        count32b = ((uint32_t)len + 3U) / 4U;
 800adea:	88bb      	ldrh	r3, [r7, #4]
 800adec:	3303      	adds	r3, #3
 800adee:	089b      	lsrs	r3, r3, #2
 800adf0:	613b      	str	r3, [r7, #16]
        for (i = 0U; i < count32b; i++) {
 800adf2:	2300      	movs	r3, #0
 800adf4:	61bb      	str	r3, [r7, #24]
 800adf6:	e018      	b.n	800ae2a <USB_WritePacket+0x66>
            USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800adf8:	79fb      	ldrb	r3, [r7, #7]
 800adfa:	031a      	lsls	r2, r3, #12
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	4413      	add	r3, r2
 800ae00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae04:	461a      	mov	r2, r3
 800ae06:	69fb      	ldr	r3, [r7, #28]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	6013      	str	r3, [r2, #0]
            pSrc++;
 800ae0c:	69fb      	ldr	r3, [r7, #28]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	61fb      	str	r3, [r7, #28]
            pSrc++;
 800ae12:	69fb      	ldr	r3, [r7, #28]
 800ae14:	3301      	adds	r3, #1
 800ae16:	61fb      	str	r3, [r7, #28]
            pSrc++;
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	61fb      	str	r3, [r7, #28]
            pSrc++;
 800ae1e:	69fb      	ldr	r3, [r7, #28]
 800ae20:	3301      	adds	r3, #1
 800ae22:	61fb      	str	r3, [r7, #28]
        for (i = 0U; i < count32b; i++) {
 800ae24:	69bb      	ldr	r3, [r7, #24]
 800ae26:	3301      	adds	r3, #1
 800ae28:	61bb      	str	r3, [r7, #24]
 800ae2a:	69ba      	ldr	r2, [r7, #24]
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	d3e2      	bcc.n	800adf8 <USB_WritePacket+0x34>
        }
    }

    return HAL_OK;
 800ae32:	2300      	movs	r3, #0
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3724      	adds	r7, #36	@ 0x24
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr

0800ae40 <USB_ReadPacket>:
 * @param  USBx  Selected device
 * @param  dest  source pointer
 * @param  len  Number of bytes to read
 * @retval pointer to destination buffer
 */
void * USB_ReadPacket(USB_OTG_GlobalTypeDef * USBx, uint8_t * dest, uint16_t len) {
 800ae40:	b480      	push	{r7}
 800ae42:	b08b      	sub	sp, #44	@ 0x2c
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	60f8      	str	r0, [r7, #12]
 800ae48:	60b9      	str	r1, [r7, #8]
 800ae4a:	4613      	mov	r3, r2
 800ae4c:	80fb      	strh	r3, [r7, #6]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	61bb      	str	r3, [r7, #24]
    uint8_t * pDest = dest;
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t pData;
    uint32_t i;
    uint32_t count32b = (uint32_t)len >> 2U;
 800ae56:	88fb      	ldrh	r3, [r7, #6]
 800ae58:	089b      	lsrs	r3, r3, #2
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	617b      	str	r3, [r7, #20]
    uint16_t remaining_bytes = len % 4U;
 800ae5e:	88fb      	ldrh	r3, [r7, #6]
 800ae60:	f003 0303 	and.w	r3, r3, #3
 800ae64:	83fb      	strh	r3, [r7, #30]

    for (i = 0U; i < count32b; i++) {
 800ae66:	2300      	movs	r3, #0
 800ae68:	623b      	str	r3, [r7, #32]
 800ae6a:	e014      	b.n	800ae96 <USB_ReadPacket+0x56>
        __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ae6c:	69bb      	ldr	r3, [r7, #24]
 800ae6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae72:	681a      	ldr	r2, [r3, #0]
 800ae74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae76:	601a      	str	r2, [r3, #0]
        pDest++;
 800ae78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	627b      	str	r3, [r7, #36]	@ 0x24
        pDest++;
 800ae7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae80:	3301      	adds	r3, #1
 800ae82:	627b      	str	r3, [r7, #36]	@ 0x24
        pDest++;
 800ae84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae86:	3301      	adds	r3, #1
 800ae88:	627b      	str	r3, [r7, #36]	@ 0x24
        pDest++;
 800ae8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae8c:	3301      	adds	r3, #1
 800ae8e:	627b      	str	r3, [r7, #36]	@ 0x24
    for (i = 0U; i < count32b; i++) {
 800ae90:	6a3b      	ldr	r3, [r7, #32]
 800ae92:	3301      	adds	r3, #1
 800ae94:	623b      	str	r3, [r7, #32]
 800ae96:	6a3a      	ldr	r2, [r7, #32]
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d3e6      	bcc.n	800ae6c <USB_ReadPacket+0x2c>
    }

    /* When Number of data is not word aligned, read the remaining byte */
    if (remaining_bytes != 0U) {
 800ae9e:	8bfb      	ldrh	r3, [r7, #30]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d01e      	beq.n	800aee2 <USB_ReadPacket+0xa2>
        i = 0U;
 800aea4:	2300      	movs	r3, #0
 800aea6:	623b      	str	r3, [r7, #32]
        __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800aea8:	69bb      	ldr	r3, [r7, #24]
 800aeaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aeae:	461a      	mov	r2, r3
 800aeb0:	f107 0310 	add.w	r3, r7, #16
 800aeb4:	6812      	ldr	r2, [r2, #0]
 800aeb6:	601a      	str	r2, [r3, #0]

        do {
            *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800aeb8:	693a      	ldr	r2, [r7, #16]
 800aeba:	6a3b      	ldr	r3, [r7, #32]
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	00db      	lsls	r3, r3, #3
 800aec0:	fa22 f303 	lsr.w	r3, r2, r3
 800aec4:	b2da      	uxtb	r2, r3
 800aec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aec8:	701a      	strb	r2, [r3, #0]
            i++;
 800aeca:	6a3b      	ldr	r3, [r7, #32]
 800aecc:	3301      	adds	r3, #1
 800aece:	623b      	str	r3, [r7, #32]
            pDest++;
 800aed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aed2:	3301      	adds	r3, #1
 800aed4:	627b      	str	r3, [r7, #36]	@ 0x24
            remaining_bytes--;
 800aed6:	8bfb      	ldrh	r3, [r7, #30]
 800aed8:	3b01      	subs	r3, #1
 800aeda:	83fb      	strh	r3, [r7, #30]
        } while (remaining_bytes != 0U);
 800aedc:	8bfb      	ldrh	r3, [r7, #30]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d1ea      	bne.n	800aeb8 <USB_ReadPacket+0x78>
    }

    return ((void *)pDest);
 800aee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	372c      	adds	r7, #44	@ 0x2c
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr

0800aef0 <USB_EPSetStall>:
 * @brief  USB_EPSetStall : set a stall condition over an EP
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep) {
 800aef0:	b480      	push	{r7}
 800aef2:	b085      	sub	sp, #20
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	6039      	str	r1, [r7, #0]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	60fb      	str	r3, [r7, #12]
    uint32_t epnum = (uint32_t)ep->num;
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	60bb      	str	r3, [r7, #8]

    if (ep->is_in == 1U) {
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	785b      	ldrb	r3, [r3, #1]
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d12c      	bne.n	800af66 <USB_EPSetStall+0x76>
        if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U)) {
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	015a      	lsls	r2, r3, #5
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	4413      	add	r3, r2
 800af14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	db12      	blt.n	800af44 <USB_EPSetStall+0x54>
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d00f      	beq.n	800af44 <USB_EPSetStall+0x54>
            USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	015a      	lsls	r2, r3, #5
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	4413      	add	r3, r2
 800af2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	68ba      	ldr	r2, [r7, #8]
 800af34:	0151      	lsls	r1, r2, #5
 800af36:	68fa      	ldr	r2, [r7, #12]
 800af38:	440a      	add	r2, r1
 800af3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af3e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800af42:	6013      	str	r3, [r2, #0]
        }
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	015a      	lsls	r2, r3, #5
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	4413      	add	r3, r2
 800af4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	68ba      	ldr	r2, [r7, #8]
 800af54:	0151      	lsls	r1, r2, #5
 800af56:	68fa      	ldr	r2, [r7, #12]
 800af58:	440a      	add	r2, r1
 800af5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800af62:	6013      	str	r3, [r2, #0]
 800af64:	e02b      	b.n	800afbe <USB_EPSetStall+0xce>
    } else {
        if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U)) {
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	015a      	lsls	r2, r3, #5
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	4413      	add	r3, r2
 800af6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	2b00      	cmp	r3, #0
 800af76:	db12      	blt.n	800af9e <USB_EPSetStall+0xae>
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d00f      	beq.n	800af9e <USB_EPSetStall+0xae>
            USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	015a      	lsls	r2, r3, #5
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	4413      	add	r3, r2
 800af86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	68ba      	ldr	r2, [r7, #8]
 800af8e:	0151      	lsls	r1, r2, #5
 800af90:	68fa      	ldr	r2, [r7, #12]
 800af92:	440a      	add	r2, r1
 800af94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af98:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800af9c:	6013      	str	r3, [r2, #0]
        }
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	015a      	lsls	r2, r3, #5
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	4413      	add	r3, r2
 800afa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	68ba      	ldr	r2, [r7, #8]
 800afae:	0151      	lsls	r1, r2, #5
 800afb0:	68fa      	ldr	r2, [r7, #12]
 800afb2:	440a      	add	r2, r1
 800afb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800afb8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800afbc:	6013      	str	r3, [r2, #0]
    }

    return HAL_OK;
 800afbe:	2300      	movs	r3, #0
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3714      	adds	r7, #20
 800afc4:	46bd      	mov	sp, r7
 800afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afca:	4770      	bx	lr

0800afcc <USB_EPClearStall>:
 * @brief  USB_EPClearStall : Clear a stall condition over an EP
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef * USBx, USB_OTG_EPTypeDef * ep) {
 800afcc:	b480      	push	{r7}
 800afce:	b085      	sub	sp, #20
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	60fb      	str	r3, [r7, #12]
    uint32_t epnum = (uint32_t)ep->num;
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	781b      	ldrb	r3, [r3, #0]
 800afde:	60bb      	str	r3, [r7, #8]

    if (ep->is_in == 1U) {
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	785b      	ldrb	r3, [r3, #1]
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d128      	bne.n	800b03a <USB_EPClearStall+0x6e>
        USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	015a      	lsls	r2, r3, #5
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	4413      	add	r3, r2
 800aff0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	68ba      	ldr	r2, [r7, #8]
 800aff8:	0151      	lsls	r1, r2, #5
 800affa:	68fa      	ldr	r2, [r7, #12]
 800affc:	440a      	add	r2, r1
 800affe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b002:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b006:	6013      	str	r3, [r2, #0]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK)) {
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	791b      	ldrb	r3, [r3, #4]
 800b00c:	2b03      	cmp	r3, #3
 800b00e:	d003      	beq.n	800b018 <USB_EPClearStall+0x4c>
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	791b      	ldrb	r3, [r3, #4]
 800b014:	2b02      	cmp	r3, #2
 800b016:	d138      	bne.n	800b08a <USB_EPClearStall+0xbe>
            USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	015a      	lsls	r2, r3, #5
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	4413      	add	r3, r2
 800b020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	68ba      	ldr	r2, [r7, #8]
 800b028:	0151      	lsls	r1, r2, #5
 800b02a:	68fa      	ldr	r2, [r7, #12]
 800b02c:	440a      	add	r2, r1
 800b02e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b032:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b036:	6013      	str	r3, [r2, #0]
 800b038:	e027      	b.n	800b08a <USB_EPClearStall+0xbe>
        }
    } else {
        USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	015a      	lsls	r2, r3, #5
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	4413      	add	r3, r2
 800b042:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	68ba      	ldr	r2, [r7, #8]
 800b04a:	0151      	lsls	r1, r2, #5
 800b04c:	68fa      	ldr	r2, [r7, #12]
 800b04e:	440a      	add	r2, r1
 800b050:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b054:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b058:	6013      	str	r3, [r2, #0]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK)) {
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	791b      	ldrb	r3, [r3, #4]
 800b05e:	2b03      	cmp	r3, #3
 800b060:	d003      	beq.n	800b06a <USB_EPClearStall+0x9e>
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	791b      	ldrb	r3, [r3, #4]
 800b066:	2b02      	cmp	r3, #2
 800b068:	d10f      	bne.n	800b08a <USB_EPClearStall+0xbe>
            USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	015a      	lsls	r2, r3, #5
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	4413      	add	r3, r2
 800b072:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	68ba      	ldr	r2, [r7, #8]
 800b07a:	0151      	lsls	r1, r2, #5
 800b07c:	68fa      	ldr	r2, [r7, #12]
 800b07e:	440a      	add	r2, r1
 800b080:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b088:	6013      	str	r3, [r2, #0]
        }
    }
    return HAL_OK;
 800b08a:	2300      	movs	r3, #0
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3714      	adds	r7, #20
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <USB_SetDevAddress>:
 * @param  USBx  Selected device
 * @param  address  new device address to be assigned
 *          This parameter can be a value from 0 to 255
 * @retval HAL status
 */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef * USBx, uint8_t address) {
 800b098:	b480      	push	{r7}
 800b09a:	b085      	sub	sp, #20
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	460b      	mov	r3, r1
 800b0a2:	70fb      	strb	r3, [r7, #3]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	60fb      	str	r3, [r7, #12]

    USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	68fa      	ldr	r2, [r7, #12]
 800b0b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b0b6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b0ba:	6013      	str	r3, [r2, #0]
    USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0c2:	681a      	ldr	r2, [r3, #0]
 800b0c4:	78fb      	ldrb	r3, [r7, #3]
 800b0c6:	011b      	lsls	r3, r3, #4
 800b0c8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b0cc:	68f9      	ldr	r1, [r7, #12]
 800b0ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	600b      	str	r3, [r1, #0]

    return HAL_OK;
 800b0d6:	2300      	movs	r3, #0
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3714      	adds	r7, #20
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr

0800b0e4 <USB_DevConnect>:
/**
 * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef * USBx) {
 800b0e4:	b480      	push	{r7}
 800b0e6:	b085      	sub	sp, #20
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	60fb      	str	r3, [r7, #12]

    /* In case phy is stopped, ensure to ungate and restore the phy CLK */
    USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	68fa      	ldr	r2, [r7, #12]
 800b0fa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b0fe:	f023 0303 	bic.w	r3, r3, #3
 800b102:	6013      	str	r3, [r2, #0]

    USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b10a:	685b      	ldr	r3, [r3, #4]
 800b10c:	68fa      	ldr	r2, [r7, #12]
 800b10e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b112:	f023 0302 	bic.w	r3, r3, #2
 800b116:	6053      	str	r3, [r2, #4]

    return HAL_OK;
 800b118:	2300      	movs	r3, #0
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3714      	adds	r7, #20
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr

0800b126 <USB_DevDisconnect>:
/**
 * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef * USBx) {
 800b126:	b480      	push	{r7}
 800b128:	b085      	sub	sp, #20
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	60fb      	str	r3, [r7, #12]

    /* In case phy is stopped, ensure to ungate and restore the phy CLK */
    USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	68fa      	ldr	r2, [r7, #12]
 800b13c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b140:	f023 0303 	bic.w	r3, r3, #3
 800b144:	6013      	str	r3, [r2, #0]

    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	68fa      	ldr	r2, [r7, #12]
 800b150:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b154:	f043 0302 	orr.w	r3, r3, #2
 800b158:	6053      	str	r3, [r2, #4]

    return HAL_OK;
 800b15a:	2300      	movs	r3, #0
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3714      	adds	r7, #20
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr

0800b168 <USB_ReadInterrupts>:
/**
 * @brief  USB_ReadInterrupts: return the global USB interrupt status
 * @param  USBx  Selected device
 * @retval HAL status
 */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef * USBx) {
 800b168:	b480      	push	{r7}
 800b16a:	b085      	sub	sp, #20
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
    uint32_t tmpreg;

    tmpreg = USBx->GINTSTS;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	695b      	ldr	r3, [r3, #20]
 800b174:	60fb      	str	r3, [r7, #12]
    tmpreg &= USBx->GINTMSK;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	699b      	ldr	r3, [r3, #24]
 800b17a:	68fa      	ldr	r2, [r7, #12]
 800b17c:	4013      	ands	r3, r2
 800b17e:	60fb      	str	r3, [r7, #12]

    return tmpreg;
 800b180:	68fb      	ldr	r3, [r7, #12]
}
 800b182:	4618      	mov	r0, r3
 800b184:	3714      	adds	r7, #20
 800b186:	46bd      	mov	sp, r7
 800b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18c:	4770      	bx	lr

0800b18e <USB_ReadDevAllOutEpInterrupt>:
/**
 * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
 * @param  USBx  Selected device
 * @retval HAL status
 */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef * USBx) {
 800b18e:	b480      	push	{r7}
 800b190:	b085      	sub	sp, #20
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	60fb      	str	r3, [r7, #12]
    uint32_t tmpreg;

    tmpreg = USBx_DEVICE->DAINT;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1a0:	699b      	ldr	r3, [r3, #24]
 800b1a2:	60bb      	str	r3, [r7, #8]
    tmpreg &= USBx_DEVICE->DAINTMSK;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1aa:	69db      	ldr	r3, [r3, #28]
 800b1ac:	68ba      	ldr	r2, [r7, #8]
 800b1ae:	4013      	ands	r3, r2
 800b1b0:	60bb      	str	r3, [r7, #8]

    return ((tmpreg & 0xffff0000U) >> 16);
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	0c1b      	lsrs	r3, r3, #16
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3714      	adds	r7, #20
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c0:	4770      	bx	lr

0800b1c2 <USB_ReadDevAllInEpInterrupt>:
/**
 * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
 * @param  USBx  Selected device
 * @retval HAL status
 */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef * USBx) {
 800b1c2:	b480      	push	{r7}
 800b1c4:	b085      	sub	sp, #20
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	60fb      	str	r3, [r7, #12]
    uint32_t tmpreg;

    tmpreg = USBx_DEVICE->DAINT;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1d4:	699b      	ldr	r3, [r3, #24]
 800b1d6:	60bb      	str	r3, [r7, #8]
    tmpreg &= USBx_DEVICE->DAINTMSK;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1de:	69db      	ldr	r3, [r3, #28]
 800b1e0:	68ba      	ldr	r2, [r7, #8]
 800b1e2:	4013      	ands	r3, r2
 800b1e4:	60bb      	str	r3, [r7, #8]

    return ((tmpreg & 0xFFFFU));
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	b29b      	uxth	r3, r3
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3714      	adds	r7, #20
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr

0800b1f6 <USB_ReadDevOutEPInterrupt>:
 * @param  USBx  Selected device
 * @param  epnum  endpoint number
 *          This parameter can be a value from 0 to 15
 * @retval Device OUT EP Interrupt register
 */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef * USBx, uint8_t epnum) {
 800b1f6:	b480      	push	{r7}
 800b1f8:	b085      	sub	sp, #20
 800b1fa:	af00      	add	r7, sp, #0
 800b1fc:	6078      	str	r0, [r7, #4]
 800b1fe:	460b      	mov	r3, r1
 800b200:	70fb      	strb	r3, [r7, #3]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	60fb      	str	r3, [r7, #12]
    uint32_t tmpreg;

    tmpreg = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b206:	78fb      	ldrb	r3, [r7, #3]
 800b208:	015a      	lsls	r2, r3, #5
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	4413      	add	r3, r2
 800b20e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	60bb      	str	r3, [r7, #8]
    tmpreg &= USBx_DEVICE->DOEPMSK;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b21c:	695b      	ldr	r3, [r3, #20]
 800b21e:	68ba      	ldr	r2, [r7, #8]
 800b220:	4013      	ands	r3, r2
 800b222:	60bb      	str	r3, [r7, #8]

    return tmpreg;
 800b224:	68bb      	ldr	r3, [r7, #8]
}
 800b226:	4618      	mov	r0, r3
 800b228:	3714      	adds	r7, #20
 800b22a:	46bd      	mov	sp, r7
 800b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b230:	4770      	bx	lr

0800b232 <USB_ReadDevInEPInterrupt>:
 * @param  USBx  Selected device
 * @param  epnum  endpoint number
 *          This parameter can be a value from 0 to 15
 * @retval Device IN EP Interrupt register
 */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef * USBx, uint8_t epnum) {
 800b232:	b480      	push	{r7}
 800b234:	b087      	sub	sp, #28
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
 800b23a:	460b      	mov	r3, r1
 800b23c:	70fb      	strb	r3, [r7, #3]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	617b      	str	r3, [r7, #20]
    uint32_t tmpreg;
    uint32_t msk;
    uint32_t emp;

    msk = USBx_DEVICE->DIEPMSK;
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b248:	691b      	ldr	r3, [r3, #16]
 800b24a:	613b      	str	r3, [r7, #16]
    emp = USBx_DEVICE->DIEPEMPMSK;
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b252:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b254:	60fb      	str	r3, [r7, #12]
    msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b256:	78fb      	ldrb	r3, [r7, #3]
 800b258:	f003 030f 	and.w	r3, r3, #15
 800b25c:	68fa      	ldr	r2, [r7, #12]
 800b25e:	fa22 f303 	lsr.w	r3, r2, r3
 800b262:	01db      	lsls	r3, r3, #7
 800b264:	b2db      	uxtb	r3, r3
 800b266:	693a      	ldr	r2, [r7, #16]
 800b268:	4313      	orrs	r3, r2
 800b26a:	613b      	str	r3, [r7, #16]
    tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b26c:	78fb      	ldrb	r3, [r7, #3]
 800b26e:	015a      	lsls	r2, r3, #5
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	4413      	add	r3, r2
 800b274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b278:	689b      	ldr	r3, [r3, #8]
 800b27a:	693a      	ldr	r2, [r7, #16]
 800b27c:	4013      	ands	r3, r2
 800b27e:	60bb      	str	r3, [r7, #8]

    return tmpreg;
 800b280:	68bb      	ldr	r3, [r7, #8]
}
 800b282:	4618      	mov	r0, r3
 800b284:	371c      	adds	r7, #28
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr

0800b28e <USB_GetMode>:
 * @retval return core mode : Host or Device
 *          This parameter can be one of these values:
 *           0 : Host
 *           1 : Device
 */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef * USBx) {
 800b28e:	b480      	push	{r7}
 800b290:	b083      	sub	sp, #12
 800b292:	af00      	add	r7, sp, #0
 800b294:	6078      	str	r0, [r7, #4]
    return ((USBx->GINTSTS) & 0x1U);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	695b      	ldr	r3, [r3, #20]
 800b29a:	f003 0301 	and.w	r3, r3, #1
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	370c      	adds	r7, #12
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr

0800b2aa <USB_ActivateSetup>:
/**
 * @brief  Activate EP0 for Setup transactions
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef * USBx) {
 800b2aa:	b480      	push	{r7}
 800b2ac:	b085      	sub	sp, #20
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	6078      	str	r0, [r7, #4]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	60fb      	str	r3, [r7, #12]

    /* Set the MPS of the IN EP0 to 64 bytes */
    USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	68fa      	ldr	r2, [r7, #12]
 800b2c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b2c4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b2c8:	f023 0307 	bic.w	r3, r3, #7
 800b2cc:	6013      	str	r3, [r2, #0]

    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	68fa      	ldr	r2, [r7, #12]
 800b2d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b2dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b2e0:	6053      	str	r3, [r2, #4]

    return HAL_OK;
 800b2e2:	2300      	movs	r3, #0
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3714      	adds	r7, #20
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr

0800b2f0 <USB_EP0_OutStart>:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @param  psetup  pointer to setup packet
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef * USBx, uint8_t dma, uint8_t * psetup) {
 800b2f0:	b480      	push	{r7}
 800b2f2:	b087      	sub	sp, #28
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	460b      	mov	r3, r1
 800b2fa:	607a      	str	r2, [r7, #4]
 800b2fc:	72fb      	strb	r3, [r7, #11]
    uint32_t USBx_BASE = (uint32_t)USBx;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	617b      	str	r3, [r7, #20]
    uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	333c      	adds	r3, #60	@ 0x3c
 800b306:	3304      	adds	r3, #4
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	613b      	str	r3, [r7, #16]

    if (gSNPSiD > USB_OTG_CORE_ID_300A) {
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	4a26      	ldr	r2, [pc, #152]	@ (800b3a8 <USB_EP0_OutStart+0xb8>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d90a      	bls.n	800b32a <USB_EP0_OutStart+0x3a>
        if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) {
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b320:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b324:	d101      	bne.n	800b32a <USB_EP0_OutStart+0x3a>
            return HAL_OK;
 800b326:	2300      	movs	r3, #0
 800b328:	e037      	b.n	800b39a <USB_EP0_OutStart+0xaa>
        }
    }

    USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b330:	461a      	mov	r2, r3
 800b332:	2300      	movs	r3, #0
 800b334:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b33c:	691b      	ldr	r3, [r3, #16]
 800b33e:	697a      	ldr	r2, [r7, #20]
 800b340:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b344:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b348:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b350:	691b      	ldr	r3, [r3, #16]
 800b352:	697a      	ldr	r2, [r7, #20]
 800b354:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b358:	f043 0318 	orr.w	r3, r3, #24
 800b35c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(0U)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_STUPCNT;
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b364:	691b      	ldr	r3, [r3, #16]
 800b366:	697a      	ldr	r2, [r7, #20]
 800b368:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b36c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b370:	6113      	str	r3, [r2, #16]

    if (dma == 1U) {
 800b372:	7afb      	ldrb	r3, [r7, #11]
 800b374:	2b01      	cmp	r3, #1
 800b376:	d10f      	bne.n	800b398 <USB_EP0_OutStart+0xa8>
        USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b37e:	461a      	mov	r2, r3
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6153      	str	r3, [r2, #20]
        /* EP enable */
        USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	697a      	ldr	r2, [r7, #20]
 800b38e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b392:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b396:	6013      	str	r3, [r2, #0]
    }

    return HAL_OK;
 800b398:	2300      	movs	r3, #0
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	371c      	adds	r7, #28
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a4:	4770      	bx	lr
 800b3a6:	bf00      	nop
 800b3a8:	4f54300a 	.word	0x4f54300a

0800b3ac <USB_CoreReset>:
/**
 * @brief  Reset the USB Core (needed after USB clock settings change)
 * @param  USBx  Selected device
 * @retval HAL status
 */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef * USBx) {
 800b3ac:	b480      	push	{r7}
 800b3ae:	b085      	sub	sp, #20
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
    __IO uint32_t count = 0U;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	60fb      	str	r3, [r7, #12]

    /* Wait for AHB master IDLE state. */
    do {
        count++;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	60fb      	str	r3, [r7, #12]

        if (count > 200000U) {
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	4a13      	ldr	r2, [pc, #76]	@ (800b410 <USB_CoreReset+0x64>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d901      	bls.n	800b3ca <USB_CoreReset+0x1e>
            return HAL_TIMEOUT;
 800b3c6:	2303      	movs	r3, #3
 800b3c8:	e01b      	b.n	800b402 <USB_CoreReset+0x56>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	691b      	ldr	r3, [r3, #16]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	daf2      	bge.n	800b3b8 <USB_CoreReset+0xc>

    /* Core Soft Reset */
    count = 0U;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	60fb      	str	r3, [r7, #12]
    USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	691b      	ldr	r3, [r3, #16]
 800b3da:	f043 0201 	orr.w	r2, r3, #1
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	611a      	str	r2, [r3, #16]

    do {
        count++;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	60fb      	str	r3, [r7, #12]

        if (count > 200000U) {
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	4a09      	ldr	r2, [pc, #36]	@ (800b410 <USB_CoreReset+0x64>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d901      	bls.n	800b3f4 <USB_CoreReset+0x48>
            return HAL_TIMEOUT;
 800b3f0:	2303      	movs	r3, #3
 800b3f2:	e006      	b.n	800b402 <USB_CoreReset+0x56>
        }
    } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	691b      	ldr	r3, [r3, #16]
 800b3f8:	f003 0301 	and.w	r3, r3, #1
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d0f0      	beq.n	800b3e2 <USB_CoreReset+0x36>

    return HAL_OK;
 800b400:	2300      	movs	r3, #0
}
 800b402:	4618      	mov	r0, r3
 800b404:	3714      	adds	r7, #20
 800b406:	46bd      	mov	sp, r7
 800b408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40c:	4770      	bx	lr
 800b40e:	bf00      	nop
 800b410:	00030d40 	.word	0x00030d40

0800b414 <USBD_CDC_Init>:
 *         Initialize the CDC interface
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef * pdev, uint8_t cfgidx) {
 800b414:	b580      	push	{r7, lr}
 800b416:	b084      	sub	sp, #16
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	460b      	mov	r3, r1
 800b41e:	70fb      	strb	r3, [r7, #3]
    UNUSED(cfgidx);
    USBD_CDC_HandleTypeDef * hcdc;

    hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b420:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b424:	f005 f8d2 	bl	80105cc <USBD_static_malloc>
 800b428:	60f8      	str	r0, [r7, #12]

    if (hcdc == NULL) {
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d109      	bne.n	800b444 <USBD_CDC_Init+0x30>
        pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	32b0      	adds	r2, #176	@ 0xb0
 800b43a:	2100      	movs	r1, #0
 800b43c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        return (uint8_t)USBD_EMEM;
 800b440:	2302      	movs	r3, #2
 800b442:	e0d4      	b.n	800b5ee <USBD_CDC_Init+0x1da>
    }

    (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b444:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b448:	2100      	movs	r1, #0
 800b44a:	68f8      	ldr	r0, [r7, #12]
 800b44c:	f005 ff3d 	bl	80112ca <memset>

    pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	32b0      	adds	r2, #176	@ 0xb0
 800b45a:	68f9      	ldr	r1, [r7, #12]
 800b45c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	32b0      	adds	r2, #176	@ 0xb0
 800b46a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    CDCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
    CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
    CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

    if (pdev->dev_speed == USBD_SPEED_HIGH) {
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	7c1b      	ldrb	r3, [r3, #16]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d138      	bne.n	800b4ee <USBD_CDC_Init+0xda>
        /* Open EP IN */
        (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK, CDC_DATA_HS_IN_PACKET_SIZE);
 800b47c:	4b5e      	ldr	r3, [pc, #376]	@ (800b5f8 <USBD_CDC_Init+0x1e4>)
 800b47e:	7819      	ldrb	r1, [r3, #0]
 800b480:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b484:	2202      	movs	r2, #2
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f004 ff7d 	bl	8010386 <USBD_LL_OpenEP>

        pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b48c:	4b5a      	ldr	r3, [pc, #360]	@ (800b5f8 <USBD_CDC_Init+0x1e4>)
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	f003 020f 	and.w	r2, r3, #15
 800b494:	6879      	ldr	r1, [r7, #4]
 800b496:	4613      	mov	r3, r2
 800b498:	009b      	lsls	r3, r3, #2
 800b49a:	4413      	add	r3, r2
 800b49c:	009b      	lsls	r3, r3, #2
 800b49e:	440b      	add	r3, r1
 800b4a0:	3324      	adds	r3, #36	@ 0x24
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	801a      	strh	r2, [r3, #0]

        /* Open EP OUT */
        (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK, CDC_DATA_HS_OUT_PACKET_SIZE);
 800b4a6:	4b55      	ldr	r3, [pc, #340]	@ (800b5fc <USBD_CDC_Init+0x1e8>)
 800b4a8:	7819      	ldrb	r1, [r3, #0]
 800b4aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b4ae:	2202      	movs	r2, #2
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f004 ff68 	bl	8010386 <USBD_LL_OpenEP>

        pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b4b6:	4b51      	ldr	r3, [pc, #324]	@ (800b5fc <USBD_CDC_Init+0x1e8>)
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	f003 020f 	and.w	r2, r3, #15
 800b4be:	6879      	ldr	r1, [r7, #4]
 800b4c0:	4613      	mov	r3, r2
 800b4c2:	009b      	lsls	r3, r3, #2
 800b4c4:	4413      	add	r3, r2
 800b4c6:	009b      	lsls	r3, r3, #2
 800b4c8:	440b      	add	r3, r1
 800b4ca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	801a      	strh	r2, [r3, #0]

        /* Set bInterval for CDC CMD Endpoint */
        pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b4d2:	4b4b      	ldr	r3, [pc, #300]	@ (800b600 <USBD_CDC_Init+0x1ec>)
 800b4d4:	781b      	ldrb	r3, [r3, #0]
 800b4d6:	f003 020f 	and.w	r2, r3, #15
 800b4da:	6879      	ldr	r1, [r7, #4]
 800b4dc:	4613      	mov	r3, r2
 800b4de:	009b      	lsls	r3, r3, #2
 800b4e0:	4413      	add	r3, r2
 800b4e2:	009b      	lsls	r3, r3, #2
 800b4e4:	440b      	add	r3, r1
 800b4e6:	3326      	adds	r3, #38	@ 0x26
 800b4e8:	2210      	movs	r2, #16
 800b4ea:	801a      	strh	r2, [r3, #0]
 800b4ec:	e035      	b.n	800b55a <USBD_CDC_Init+0x146>
    } else {
        /* Open EP IN */
        (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK, CDC_DATA_FS_IN_PACKET_SIZE);
 800b4ee:	4b42      	ldr	r3, [pc, #264]	@ (800b5f8 <USBD_CDC_Init+0x1e4>)
 800b4f0:	7819      	ldrb	r1, [r3, #0]
 800b4f2:	2340      	movs	r3, #64	@ 0x40
 800b4f4:	2202      	movs	r2, #2
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f004 ff45 	bl	8010386 <USBD_LL_OpenEP>

        pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b4fc:	4b3e      	ldr	r3, [pc, #248]	@ (800b5f8 <USBD_CDC_Init+0x1e4>)
 800b4fe:	781b      	ldrb	r3, [r3, #0]
 800b500:	f003 020f 	and.w	r2, r3, #15
 800b504:	6879      	ldr	r1, [r7, #4]
 800b506:	4613      	mov	r3, r2
 800b508:	009b      	lsls	r3, r3, #2
 800b50a:	4413      	add	r3, r2
 800b50c:	009b      	lsls	r3, r3, #2
 800b50e:	440b      	add	r3, r1
 800b510:	3324      	adds	r3, #36	@ 0x24
 800b512:	2201      	movs	r2, #1
 800b514:	801a      	strh	r2, [r3, #0]

        /* Open EP OUT */
        (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK, CDC_DATA_FS_OUT_PACKET_SIZE);
 800b516:	4b39      	ldr	r3, [pc, #228]	@ (800b5fc <USBD_CDC_Init+0x1e8>)
 800b518:	7819      	ldrb	r1, [r3, #0]
 800b51a:	2340      	movs	r3, #64	@ 0x40
 800b51c:	2202      	movs	r2, #2
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f004 ff31 	bl	8010386 <USBD_LL_OpenEP>

        pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b524:	4b35      	ldr	r3, [pc, #212]	@ (800b5fc <USBD_CDC_Init+0x1e8>)
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	f003 020f 	and.w	r2, r3, #15
 800b52c:	6879      	ldr	r1, [r7, #4]
 800b52e:	4613      	mov	r3, r2
 800b530:	009b      	lsls	r3, r3, #2
 800b532:	4413      	add	r3, r2
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	440b      	add	r3, r1
 800b538:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b53c:	2201      	movs	r2, #1
 800b53e:	801a      	strh	r2, [r3, #0]

        /* Set bInterval for CMD Endpoint */
        pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b540:	4b2f      	ldr	r3, [pc, #188]	@ (800b600 <USBD_CDC_Init+0x1ec>)
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	f003 020f 	and.w	r2, r3, #15
 800b548:	6879      	ldr	r1, [r7, #4]
 800b54a:	4613      	mov	r3, r2
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	4413      	add	r3, r2
 800b550:	009b      	lsls	r3, r3, #2
 800b552:	440b      	add	r3, r1
 800b554:	3326      	adds	r3, #38	@ 0x26
 800b556:	2210      	movs	r2, #16
 800b558:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b55a:	4b29      	ldr	r3, [pc, #164]	@ (800b600 <USBD_CDC_Init+0x1ec>)
 800b55c:	7819      	ldrb	r1, [r3, #0]
 800b55e:	2308      	movs	r3, #8
 800b560:	2203      	movs	r2, #3
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f004 ff0f 	bl	8010386 <USBD_LL_OpenEP>
    pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b568:	4b25      	ldr	r3, [pc, #148]	@ (800b600 <USBD_CDC_Init+0x1ec>)
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	f003 020f 	and.w	r2, r3, #15
 800b570:	6879      	ldr	r1, [r7, #4]
 800b572:	4613      	mov	r3, r2
 800b574:	009b      	lsls	r3, r3, #2
 800b576:	4413      	add	r3, r2
 800b578:	009b      	lsls	r3, r3, #2
 800b57a:	440b      	add	r3, r1
 800b57c:	3324      	adds	r3, #36	@ 0x24
 800b57e:	2201      	movs	r2, #1
 800b580:	801a      	strh	r2, [r3, #0]

    hcdc->RxBuffer = NULL;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2200      	movs	r2, #0
 800b586:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b590:	687a      	ldr	r2, [r7, #4]
 800b592:	33b0      	adds	r3, #176	@ 0xb0
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	4413      	add	r3, r2
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (hcdc->RxBuffer == NULL) {
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d101      	bne.n	800b5bc <USBD_CDC_Init+0x1a8>
        return (uint8_t)USBD_EMEM;
 800b5b8:	2302      	movs	r3, #2
 800b5ba:	e018      	b.n	800b5ee <USBD_CDC_Init+0x1da>
    }

    if (pdev->dev_speed == USBD_SPEED_HIGH) {
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	7c1b      	ldrb	r3, [r3, #16]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d10a      	bne.n	800b5da <USBD_CDC_Init+0x1c6>
        /* Prepare Out endpoint to receive next packet */
        (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer, CDC_DATA_HS_OUT_PACKET_SIZE);
 800b5c4:	4b0d      	ldr	r3, [pc, #52]	@ (800b5fc <USBD_CDC_Init+0x1e8>)
 800b5c6:	7819      	ldrb	r1, [r3, #0]
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b5ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f004 ffc6 	bl	8010564 <USBD_LL_PrepareReceive>
 800b5d8:	e008      	b.n	800b5ec <USBD_CDC_Init+0x1d8>
    } else {
        /* Prepare Out endpoint to receive next packet */
        (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer, CDC_DATA_FS_OUT_PACKET_SIZE);
 800b5da:	4b08      	ldr	r3, [pc, #32]	@ (800b5fc <USBD_CDC_Init+0x1e8>)
 800b5dc:	7819      	ldrb	r1, [r3, #0]
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b5e4:	2340      	movs	r3, #64	@ 0x40
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f004 ffbc 	bl	8010564 <USBD_LL_PrepareReceive>
    }

    return (uint8_t)USBD_OK;
 800b5ec:	2300      	movs	r3, #0
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3710      	adds	r7, #16
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	200000ef 	.word	0x200000ef
 800b5fc:	200000f0 	.word	0x200000f0
 800b600:	200000f1 	.word	0x200000f1

0800b604 <USBD_CDC_DeInit>:
 *         DeInitialize the CDC layer
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef * pdev, uint8_t cfgidx) {
 800b604:	b580      	push	{r7, lr}
 800b606:	b082      	sub	sp, #8
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	460b      	mov	r3, r1
 800b60e:	70fb      	strb	r3, [r7, #3]
    CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
    CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b610:	4b3a      	ldr	r3, [pc, #232]	@ (800b6fc <USBD_CDC_DeInit+0xf8>)
 800b612:	781b      	ldrb	r3, [r3, #0]
 800b614:	4619      	mov	r1, r3
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f004 fedb 	bl	80103d2 <USBD_LL_CloseEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b61c:	4b37      	ldr	r3, [pc, #220]	@ (800b6fc <USBD_CDC_DeInit+0xf8>)
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	f003 020f 	and.w	r2, r3, #15
 800b624:	6879      	ldr	r1, [r7, #4]
 800b626:	4613      	mov	r3, r2
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	4413      	add	r3, r2
 800b62c:	009b      	lsls	r3, r3, #2
 800b62e:	440b      	add	r3, r1
 800b630:	3324      	adds	r3, #36	@ 0x24
 800b632:	2200      	movs	r2, #0
 800b634:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b636:	4b32      	ldr	r3, [pc, #200]	@ (800b700 <USBD_CDC_DeInit+0xfc>)
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	4619      	mov	r1, r3
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f004 fec8 	bl	80103d2 <USBD_LL_CloseEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b642:	4b2f      	ldr	r3, [pc, #188]	@ (800b700 <USBD_CDC_DeInit+0xfc>)
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	f003 020f 	and.w	r2, r3, #15
 800b64a:	6879      	ldr	r1, [r7, #4]
 800b64c:	4613      	mov	r3, r2
 800b64e:	009b      	lsls	r3, r3, #2
 800b650:	4413      	add	r3, r2
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	440b      	add	r3, r1
 800b656:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b65a:	2200      	movs	r2, #0
 800b65c:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b65e:	4b29      	ldr	r3, [pc, #164]	@ (800b704 <USBD_CDC_DeInit+0x100>)
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	4619      	mov	r1, r3
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f004 feb4 	bl	80103d2 <USBD_LL_CloseEP>
    pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b66a:	4b26      	ldr	r3, [pc, #152]	@ (800b704 <USBD_CDC_DeInit+0x100>)
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	f003 020f 	and.w	r2, r3, #15
 800b672:	6879      	ldr	r1, [r7, #4]
 800b674:	4613      	mov	r3, r2
 800b676:	009b      	lsls	r3, r3, #2
 800b678:	4413      	add	r3, r2
 800b67a:	009b      	lsls	r3, r3, #2
 800b67c:	440b      	add	r3, r1
 800b67e:	3324      	adds	r3, #36	@ 0x24
 800b680:	2200      	movs	r2, #0
 800b682:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b684:	4b1f      	ldr	r3, [pc, #124]	@ (800b704 <USBD_CDC_DeInit+0x100>)
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	f003 020f 	and.w	r2, r3, #15
 800b68c:	6879      	ldr	r1, [r7, #4]
 800b68e:	4613      	mov	r3, r2
 800b690:	009b      	lsls	r3, r3, #2
 800b692:	4413      	add	r3, r2
 800b694:	009b      	lsls	r3, r3, #2
 800b696:	440b      	add	r3, r1
 800b698:	3326      	adds	r3, #38	@ 0x26
 800b69a:	2200      	movs	r2, #0
 800b69c:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    if (pdev->pClassDataCmsit[pdev->classId] != NULL) {
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	32b0      	adds	r2, #176	@ 0xb0
 800b6a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d01f      	beq.n	800b6f0 <USBD_CDC_DeInit+0xec>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b6b6:	687a      	ldr	r2, [r7, #4]
 800b6b8:	33b0      	adds	r3, #176	@ 0xb0
 800b6ba:	009b      	lsls	r3, r3, #2
 800b6bc:	4413      	add	r3, r2
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	4798      	blx	r3
        (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	32b0      	adds	r2, #176	@ 0xb0
 800b6ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f004 ff88 	bl	80105e8 <USBD_static_free>
        pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	32b0      	adds	r2, #176	@ 0xb0
 800b6e2:	2100      	movs	r1, #0
 800b6e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pdev->pClassData = NULL;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    }

    return (uint8_t)USBD_OK;
 800b6f0:	2300      	movs	r3, #0
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3708      	adds	r7, #8
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
 800b6fa:	bf00      	nop
 800b6fc:	200000ef 	.word	0x200000ef
 800b700:	200000f0 	.word	0x200000f0
 800b704:	200000f1 	.word	0x200000f1

0800b708 <USBD_CDC_Setup>:
 *         Handle the CDC specific requests
 * @param  pdev: instance
 * @param  req: usb requests
 * @retval status
 */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800b708:	b580      	push	{r7, lr}
 800b70a:	b086      	sub	sp, #24
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	32b0      	adds	r2, #176	@ 0xb0
 800b71c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b720:	613b      	str	r3, [r7, #16]
    uint16_t len;
    uint8_t ifalt = 0U;
 800b722:	2300      	movs	r3, #0
 800b724:	737b      	strb	r3, [r7, #13]
    uint16_t status_info = 0U;
 800b726:	2300      	movs	r3, #0
 800b728:	817b      	strh	r3, [r7, #10]
    USBD_StatusTypeDef ret = USBD_OK;
 800b72a:	2300      	movs	r3, #0
 800b72c:	75fb      	strb	r3, [r7, #23]

    if (hcdc == NULL) {
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d101      	bne.n	800b738 <USBD_CDC_Setup+0x30>
        return (uint8_t)USBD_FAIL;
 800b734:	2303      	movs	r3, #3
 800b736:	e0bf      	b.n	800b8b8 <USBD_CDC_Setup+0x1b0>
    }

    switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	781b      	ldrb	r3, [r3, #0]
 800b73c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b740:	2b00      	cmp	r3, #0
 800b742:	d050      	beq.n	800b7e6 <USBD_CDC_Setup+0xde>
 800b744:	2b20      	cmp	r3, #32
 800b746:	f040 80af 	bne.w	800b8a8 <USBD_CDC_Setup+0x1a0>
    case USB_REQ_TYPE_CLASS:
        if (req->wLength != 0U) {
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	88db      	ldrh	r3, [r3, #6]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d03a      	beq.n	800b7c8 <USBD_CDC_Setup+0xc0>
            if ((req->bmRequest & 0x80U) != 0U) {
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	781b      	ldrb	r3, [r3, #0]
 800b756:	b25b      	sxtb	r3, r3
 800b758:	2b00      	cmp	r3, #0
 800b75a:	da1b      	bge.n	800b794 <USBD_CDC_Setup+0x8c>
                ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest, (uint8_t *)hcdc->data, req->wLength);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b762:	687a      	ldr	r2, [r7, #4]
 800b764:	33b0      	adds	r3, #176	@ 0xb0
 800b766:	009b      	lsls	r3, r3, #2
 800b768:	4413      	add	r3, r2
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	689b      	ldr	r3, [r3, #8]
 800b76e:	683a      	ldr	r2, [r7, #0]
 800b770:	7850      	ldrb	r0, [r2, #1]
 800b772:	6939      	ldr	r1, [r7, #16]
 800b774:	683a      	ldr	r2, [r7, #0]
 800b776:	88d2      	ldrh	r2, [r2, #6]
 800b778:	4798      	blx	r3

                len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	88db      	ldrh	r3, [r3, #6]
 800b77e:	2b07      	cmp	r3, #7
 800b780:	bf28      	it	cs
 800b782:	2307      	movcs	r3, #7
 800b784:	81fb      	strh	r3, [r7, #14]
                (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	89fa      	ldrh	r2, [r7, #14]
 800b78a:	4619      	mov	r1, r3
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f001 fd87 	bl	800d2a0 <USBD_CtlSendData>
                (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
            }
        } else {
            ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest, (uint8_t *)req, 0U);
        }
        break;
 800b792:	e090      	b.n	800b8b6 <USBD_CDC_Setup+0x1ae>
                hcdc->CmdOpCode = req->bRequest;
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	785a      	ldrb	r2, [r3, #1]
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
                hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	88db      	ldrh	r3, [r3, #6]
 800b7a2:	2b3f      	cmp	r3, #63	@ 0x3f
 800b7a4:	d803      	bhi.n	800b7ae <USBD_CDC_Setup+0xa6>
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	88db      	ldrh	r3, [r3, #6]
 800b7aa:	b2da      	uxtb	r2, r3
 800b7ac:	e000      	b.n	800b7b0 <USBD_CDC_Setup+0xa8>
 800b7ae:	2240      	movs	r2, #64	@ 0x40
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
                (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b7b6:	6939      	ldr	r1, [r7, #16]
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b7be:	461a      	mov	r2, r3
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f001 fd99 	bl	800d2f8 <USBD_CtlPrepareRx>
        break;
 800b7c6:	e076      	b.n	800b8b6 <USBD_CDC_Setup+0x1ae>
            ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest, (uint8_t *)req, 0U);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	33b0      	adds	r3, #176	@ 0xb0
 800b7d2:	009b      	lsls	r3, r3, #2
 800b7d4:	4413      	add	r3, r2
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	689b      	ldr	r3, [r3, #8]
 800b7da:	683a      	ldr	r2, [r7, #0]
 800b7dc:	7850      	ldrb	r0, [r2, #1]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	6839      	ldr	r1, [r7, #0]
 800b7e2:	4798      	blx	r3
        break;
 800b7e4:	e067      	b.n	800b8b6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
        switch (req->bRequest) {
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	785b      	ldrb	r3, [r3, #1]
 800b7ea:	2b0b      	cmp	r3, #11
 800b7ec:	d851      	bhi.n	800b892 <USBD_CDC_Setup+0x18a>
 800b7ee:	a201      	add	r2, pc, #4	@ (adr r2, 800b7f4 <USBD_CDC_Setup+0xec>)
 800b7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7f4:	0800b825 	.word	0x0800b825
 800b7f8:	0800b8a1 	.word	0x0800b8a1
 800b7fc:	0800b893 	.word	0x0800b893
 800b800:	0800b893 	.word	0x0800b893
 800b804:	0800b893 	.word	0x0800b893
 800b808:	0800b893 	.word	0x0800b893
 800b80c:	0800b893 	.word	0x0800b893
 800b810:	0800b893 	.word	0x0800b893
 800b814:	0800b893 	.word	0x0800b893
 800b818:	0800b893 	.word	0x0800b893
 800b81c:	0800b84f 	.word	0x0800b84f
 800b820:	0800b879 	.word	0x0800b879
        case USB_REQ_GET_STATUS:
            if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	2b03      	cmp	r3, #3
 800b82e:	d107      	bne.n	800b840 <USBD_CDC_Setup+0x138>
                (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b830:	f107 030a 	add.w	r3, r7, #10
 800b834:	2202      	movs	r2, #2
 800b836:	4619      	mov	r1, r3
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f001 fd31 	bl	800d2a0 <USBD_CtlSendData>
            } else {
                USBD_CtlError(pdev, req);
                ret = USBD_FAIL;
            }
            break;
 800b83e:	e032      	b.n	800b8a6 <USBD_CDC_Setup+0x19e>
                USBD_CtlError(pdev, req);
 800b840:	6839      	ldr	r1, [r7, #0]
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f001 fcbb 	bl	800d1be <USBD_CtlError>
                ret = USBD_FAIL;
 800b848:	2303      	movs	r3, #3
 800b84a:	75fb      	strb	r3, [r7, #23]
            break;
 800b84c:	e02b      	b.n	800b8a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
            if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b854:	b2db      	uxtb	r3, r3
 800b856:	2b03      	cmp	r3, #3
 800b858:	d107      	bne.n	800b86a <USBD_CDC_Setup+0x162>
                (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b85a:	f107 030d 	add.w	r3, r7, #13
 800b85e:	2201      	movs	r2, #1
 800b860:	4619      	mov	r1, r3
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f001 fd1c 	bl	800d2a0 <USBD_CtlSendData>
            } else {
                USBD_CtlError(pdev, req);
                ret = USBD_FAIL;
            }
            break;
 800b868:	e01d      	b.n	800b8a6 <USBD_CDC_Setup+0x19e>
                USBD_CtlError(pdev, req);
 800b86a:	6839      	ldr	r1, [r7, #0]
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f001 fca6 	bl	800d1be <USBD_CtlError>
                ret = USBD_FAIL;
 800b872:	2303      	movs	r3, #3
 800b874:	75fb      	strb	r3, [r7, #23]
            break;
 800b876:	e016      	b.n	800b8a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
            if (pdev->dev_state != USBD_STATE_CONFIGURED) {
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	2b03      	cmp	r3, #3
 800b882:	d00f      	beq.n	800b8a4 <USBD_CDC_Setup+0x19c>
                USBD_CtlError(pdev, req);
 800b884:	6839      	ldr	r1, [r7, #0]
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f001 fc99 	bl	800d1be <USBD_CtlError>
                ret = USBD_FAIL;
 800b88c:	2303      	movs	r3, #3
 800b88e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800b890:	e008      	b.n	800b8a4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
            break;

        default:
            USBD_CtlError(pdev, req);
 800b892:	6839      	ldr	r1, [r7, #0]
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f001 fc92 	bl	800d1be <USBD_CtlError>
            ret = USBD_FAIL;
 800b89a:	2303      	movs	r3, #3
 800b89c:	75fb      	strb	r3, [r7, #23]
            break;
 800b89e:	e002      	b.n	800b8a6 <USBD_CDC_Setup+0x19e>
            break;
 800b8a0:	bf00      	nop
 800b8a2:	e008      	b.n	800b8b6 <USBD_CDC_Setup+0x1ae>
            break;
 800b8a4:	bf00      	nop
        }
        break;
 800b8a6:	e006      	b.n	800b8b6 <USBD_CDC_Setup+0x1ae>

    default:
        USBD_CtlError(pdev, req);
 800b8a8:	6839      	ldr	r1, [r7, #0]
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f001 fc87 	bl	800d1be <USBD_CtlError>
        ret = USBD_FAIL;
 800b8b0:	2303      	movs	r3, #3
 800b8b2:	75fb      	strb	r3, [r7, #23]
        break;
 800b8b4:	bf00      	nop
    }

    return (uint8_t)ret;
 800b8b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3718      	adds	r7, #24
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <USBD_CDC_DataIn>:
 *         Data sent on non-control IN endpoint
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef * pdev, uint8_t epnum) {
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	460b      	mov	r3, r1
 800b8ca:	70fb      	strb	r3, [r7, #3]
    USBD_CDC_HandleTypeDef * hcdc;
    PCD_HandleTypeDef * hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b8d2:	60fb      	str	r3, [r7, #12]

    if (pdev->pClassDataCmsit[pdev->classId] == NULL) {
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	32b0      	adds	r2, #176	@ 0xb0
 800b8de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d101      	bne.n	800b8ea <USBD_CDC_DataIn+0x2a>
        return (uint8_t)USBD_FAIL;
 800b8e6:	2303      	movs	r3, #3
 800b8e8:	e065      	b.n	800b9b6 <USBD_CDC_DataIn+0xf6>
    }

    hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	32b0      	adds	r2, #176	@ 0xb0
 800b8f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8f8:	60bb      	str	r3, [r7, #8]

    if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) && ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U)) {
 800b8fa:	78fb      	ldrb	r3, [r7, #3]
 800b8fc:	f003 020f 	and.w	r2, r3, #15
 800b900:	6879      	ldr	r1, [r7, #4]
 800b902:	4613      	mov	r3, r2
 800b904:	009b      	lsls	r3, r3, #2
 800b906:	4413      	add	r3, r2
 800b908:	009b      	lsls	r3, r3, #2
 800b90a:	440b      	add	r3, r1
 800b90c:	3318      	adds	r3, #24
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d02f      	beq.n	800b974 <USBD_CDC_DataIn+0xb4>
 800b914:	78fb      	ldrb	r3, [r7, #3]
 800b916:	f003 020f 	and.w	r2, r3, #15
 800b91a:	6879      	ldr	r1, [r7, #4]
 800b91c:	4613      	mov	r3, r2
 800b91e:	009b      	lsls	r3, r3, #2
 800b920:	4413      	add	r3, r2
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	440b      	add	r3, r1
 800b926:	3318      	adds	r3, #24
 800b928:	681a      	ldr	r2, [r3, #0]
 800b92a:	78fb      	ldrb	r3, [r7, #3]
 800b92c:	f003 010f 	and.w	r1, r3, #15
 800b930:	68f8      	ldr	r0, [r7, #12]
 800b932:	460b      	mov	r3, r1
 800b934:	00db      	lsls	r3, r3, #3
 800b936:	440b      	add	r3, r1
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	4403      	add	r3, r0
 800b93c:	3348      	adds	r3, #72	@ 0x48
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	fbb2 f1f3 	udiv	r1, r2, r3
 800b944:	fb01 f303 	mul.w	r3, r1, r3
 800b948:	1ad3      	subs	r3, r2, r3
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d112      	bne.n	800b974 <USBD_CDC_DataIn+0xb4>
        /* Update the packet total length */
        pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b94e:	78fb      	ldrb	r3, [r7, #3]
 800b950:	f003 020f 	and.w	r2, r3, #15
 800b954:	6879      	ldr	r1, [r7, #4]
 800b956:	4613      	mov	r3, r2
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	4413      	add	r3, r2
 800b95c:	009b      	lsls	r3, r3, #2
 800b95e:	440b      	add	r3, r1
 800b960:	3318      	adds	r3, #24
 800b962:	2200      	movs	r2, #0
 800b964:	601a      	str	r2, [r3, #0]

        /* Send ZLP */
        (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b966:	78f9      	ldrb	r1, [r7, #3]
 800b968:	2300      	movs	r3, #0
 800b96a:	2200      	movs	r2, #0
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f004 fdd8 	bl	8010522 <USBD_LL_Transmit>
 800b972:	e01f      	b.n	800b9b4 <USBD_CDC_DataIn+0xf4>
    } else {
        hcdc->TxState = 0U;
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	2200      	movs	r2, #0
 800b978:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

        if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL) {
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b982:	687a      	ldr	r2, [r7, #4]
 800b984:	33b0      	adds	r3, #176	@ 0xb0
 800b986:	009b      	lsls	r3, r3, #2
 800b988:	4413      	add	r3, r2
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	691b      	ldr	r3, [r3, #16]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d010      	beq.n	800b9b4 <USBD_CDC_DataIn+0xf4>
            ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	33b0      	adds	r3, #176	@ 0xb0
 800b99c:	009b      	lsls	r3, r3, #2
 800b99e:	4413      	add	r3, r2
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	691b      	ldr	r3, [r3, #16]
 800b9a4:	68ba      	ldr	r2, [r7, #8]
 800b9a6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b9aa:	68ba      	ldr	r2, [r7, #8]
 800b9ac:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b9b0:	78fa      	ldrb	r2, [r7, #3]
 800b9b2:	4798      	blx	r3
        }
    }

    return (uint8_t)USBD_OK;
 800b9b4:	2300      	movs	r3, #0
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3710      	adds	r7, #16
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}

0800b9be <USBD_CDC_DataOut>:
 *         Data received on non-control Out endpoint
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef * pdev, uint8_t epnum) {
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b084      	sub	sp, #16
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
 800b9c6:	460b      	mov	r3, r1
 800b9c8:	70fb      	strb	r3, [r7, #3]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	32b0      	adds	r2, #176	@ 0xb0
 800b9d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9d8:	60fb      	str	r3, [r7, #12]

    if (pdev->pClassDataCmsit[pdev->classId] == NULL) {
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	32b0      	adds	r2, #176	@ 0xb0
 800b9e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d101      	bne.n	800b9f0 <USBD_CDC_DataOut+0x32>
        return (uint8_t)USBD_FAIL;
 800b9ec:	2303      	movs	r3, #3
 800b9ee:	e01a      	b.n	800ba26 <USBD_CDC_DataOut+0x68>
    }

    /* Get the received data length */
    hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b9f0:	78fb      	ldrb	r3, [r7, #3]
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f004 fdd6 	bl	80105a6 <USBD_LL_GetRxDataSize>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

    /* USB data will be immediately processed, this allow next USB traffic being
    NAKed till the end of the application Xfer */

    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba08:	687a      	ldr	r2, [r7, #4]
 800ba0a:	33b0      	adds	r3, #176	@ 0xb0
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	4413      	add	r3, r2
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	68db      	ldr	r3, [r3, #12]
 800ba14:	68fa      	ldr	r2, [r7, #12]
 800ba16:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ba1a:	68fa      	ldr	r2, [r7, #12]
 800ba1c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ba20:	4611      	mov	r1, r2
 800ba22:	4798      	blx	r3

    return (uint8_t)USBD_OK;
 800ba24:	2300      	movs	r3, #0
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3710      	adds	r7, #16
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}

0800ba2e <USBD_CDC_EP0_RxReady>:
 * @brief  USBD_CDC_EP0_RxReady
 *         Handle EP0 Rx Ready event
 * @param  pdev: device instance
 * @retval status
 */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef * pdev) {
 800ba2e:	b580      	push	{r7, lr}
 800ba30:	b084      	sub	sp, #16
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	32b0      	adds	r2, #176	@ 0xb0
 800ba40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba44:	60fb      	str	r3, [r7, #12]

    if (hcdc == NULL) {
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d101      	bne.n	800ba50 <USBD_CDC_EP0_RxReady+0x22>
        return (uint8_t)USBD_FAIL;
 800ba4c:	2303      	movs	r3, #3
 800ba4e:	e024      	b.n	800ba9a <USBD_CDC_EP0_RxReady+0x6c>
    }

    if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU)) {
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	33b0      	adds	r3, #176	@ 0xb0
 800ba5a:	009b      	lsls	r3, r3, #2
 800ba5c:	4413      	add	r3, r2
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d019      	beq.n	800ba98 <USBD_CDC_EP0_RxReady+0x6a>
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ba6a:	2bff      	cmp	r3, #255	@ 0xff
 800ba6c:	d014      	beq.n	800ba98 <USBD_CDC_EP0_RxReady+0x6a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode, (uint8_t *)hcdc->data, (uint16_t)hcdc->CmdLength);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba74:	687a      	ldr	r2, [r7, #4]
 800ba76:	33b0      	adds	r3, #176	@ 0xb0
 800ba78:	009b      	lsls	r3, r3, #2
 800ba7a:	4413      	add	r3, r2
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	68fa      	ldr	r2, [r7, #12]
 800ba82:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
 800ba86:	68f9      	ldr	r1, [r7, #12]
 800ba88:	68fa      	ldr	r2, [r7, #12]
 800ba8a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
 800ba8e:	4798      	blx	r3
        hcdc->CmdOpCode = 0xFFU;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	22ff      	movs	r2, #255	@ 0xff
 800ba94:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
    }

    return (uint8_t)USBD_OK;
 800ba98:	2300      	movs	r3, #0
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3710      	adds	r7, #16
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}
	...

0800baa4 <USBD_CDC_GetFSCfgDesc>:
 * @brief  USBD_CDC_GetFSCfgDesc
 *         Return configuration descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t * USBD_CDC_GetFSCfgDesc(uint16_t * length) {
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b086      	sub	sp, #24
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
    USBD_EpDescTypeDef * pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800baac:	2182      	movs	r1, #130	@ 0x82
 800baae:	4818      	ldr	r0, [pc, #96]	@ (800bb10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bab0:	f000 fd4f 	bl	800c552 <USBD_GetEpDesc>
 800bab4:	6178      	str	r0, [r7, #20]
    USBD_EpDescTypeDef * pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bab6:	2101      	movs	r1, #1
 800bab8:	4815      	ldr	r0, [pc, #84]	@ (800bb10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800baba:	f000 fd4a 	bl	800c552 <USBD_GetEpDesc>
 800babe:	6138      	str	r0, [r7, #16]
    USBD_EpDescTypeDef * pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bac0:	2181      	movs	r1, #129	@ 0x81
 800bac2:	4813      	ldr	r0, [pc, #76]	@ (800bb10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bac4:	f000 fd45 	bl	800c552 <USBD_GetEpDesc>
 800bac8:	60f8      	str	r0, [r7, #12]

    if (pEpCmdDesc != NULL) {
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d002      	beq.n	800bad6 <USBD_CDC_GetFSCfgDesc+0x32>
        pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	2210      	movs	r2, #16
 800bad4:	719a      	strb	r2, [r3, #6]
    }

    if (pEpOutDesc != NULL) {
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d006      	beq.n	800baea <USBD_CDC_GetFSCfgDesc+0x46>
        pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	2200      	movs	r2, #0
 800bae0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bae4:	711a      	strb	r2, [r3, #4]
 800bae6:	2200      	movs	r2, #0
 800bae8:	715a      	strb	r2, [r3, #5]
    }

    if (pEpInDesc != NULL) {
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d006      	beq.n	800bafe <USBD_CDC_GetFSCfgDesc+0x5a>
        pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2200      	movs	r2, #0
 800baf4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800baf8:	711a      	strb	r2, [r3, #4]
 800bafa:	2200      	movs	r2, #0
 800bafc:	715a      	strb	r2, [r3, #5]
    }

    *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2243      	movs	r2, #67	@ 0x43
 800bb02:	801a      	strh	r2, [r3, #0]
    return USBD_CDC_CfgDesc;
 800bb04:	4b02      	ldr	r3, [pc, #8]	@ (800bb10 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3718      	adds	r7, #24
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	200000ac 	.word	0x200000ac

0800bb14 <USBD_CDC_GetHSCfgDesc>:
 * @brief  USBD_CDC_GetHSCfgDesc
 *         Return configuration descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t * USBD_CDC_GetHSCfgDesc(uint16_t * length) {
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b086      	sub	sp, #24
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
    USBD_EpDescTypeDef * pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bb1c:	2182      	movs	r1, #130	@ 0x82
 800bb1e:	4818      	ldr	r0, [pc, #96]	@ (800bb80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bb20:	f000 fd17 	bl	800c552 <USBD_GetEpDesc>
 800bb24:	6178      	str	r0, [r7, #20]
    USBD_EpDescTypeDef * pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bb26:	2101      	movs	r1, #1
 800bb28:	4815      	ldr	r0, [pc, #84]	@ (800bb80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bb2a:	f000 fd12 	bl	800c552 <USBD_GetEpDesc>
 800bb2e:	6138      	str	r0, [r7, #16]
    USBD_EpDescTypeDef * pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bb30:	2181      	movs	r1, #129	@ 0x81
 800bb32:	4813      	ldr	r0, [pc, #76]	@ (800bb80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bb34:	f000 fd0d 	bl	800c552 <USBD_GetEpDesc>
 800bb38:	60f8      	str	r0, [r7, #12]

    if (pEpCmdDesc != NULL) {
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d002      	beq.n	800bb46 <USBD_CDC_GetHSCfgDesc+0x32>
        pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	2210      	movs	r2, #16
 800bb44:	719a      	strb	r2, [r3, #6]
    }

    if (pEpOutDesc != NULL) {
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d006      	beq.n	800bb5a <USBD_CDC_GetHSCfgDesc+0x46>
        pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	711a      	strb	r2, [r3, #4]
 800bb52:	2200      	movs	r2, #0
 800bb54:	f042 0202 	orr.w	r2, r2, #2
 800bb58:	715a      	strb	r2, [r3, #5]
    }

    if (pEpInDesc != NULL) {
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d006      	beq.n	800bb6e <USBD_CDC_GetHSCfgDesc+0x5a>
        pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2200      	movs	r2, #0
 800bb64:	711a      	strb	r2, [r3, #4]
 800bb66:	2200      	movs	r2, #0
 800bb68:	f042 0202 	orr.w	r2, r2, #2
 800bb6c:	715a      	strb	r2, [r3, #5]
    }

    *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2243      	movs	r2, #67	@ 0x43
 800bb72:	801a      	strh	r2, [r3, #0]
    return USBD_CDC_CfgDesc;
 800bb74:	4b02      	ldr	r3, [pc, #8]	@ (800bb80 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3718      	adds	r7, #24
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	200000ac 	.word	0x200000ac

0800bb84 <USBD_CDC_GetOtherSpeedCfgDesc>:
 * @brief  USBD_CDC_GetOtherSpeedCfgDesc
 *         Return configuration descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t * USBD_CDC_GetOtherSpeedCfgDesc(uint16_t * length) {
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b086      	sub	sp, #24
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
    USBD_EpDescTypeDef * pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bb8c:	2182      	movs	r1, #130	@ 0x82
 800bb8e:	4818      	ldr	r0, [pc, #96]	@ (800bbf0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bb90:	f000 fcdf 	bl	800c552 <USBD_GetEpDesc>
 800bb94:	6178      	str	r0, [r7, #20]
    USBD_EpDescTypeDef * pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bb96:	2101      	movs	r1, #1
 800bb98:	4815      	ldr	r0, [pc, #84]	@ (800bbf0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bb9a:	f000 fcda 	bl	800c552 <USBD_GetEpDesc>
 800bb9e:	6138      	str	r0, [r7, #16]
    USBD_EpDescTypeDef * pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bba0:	2181      	movs	r1, #129	@ 0x81
 800bba2:	4813      	ldr	r0, [pc, #76]	@ (800bbf0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bba4:	f000 fcd5 	bl	800c552 <USBD_GetEpDesc>
 800bba8:	60f8      	str	r0, [r7, #12]

    if (pEpCmdDesc != NULL) {
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d002      	beq.n	800bbb6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
        pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	2210      	movs	r2, #16
 800bbb4:	719a      	strb	r2, [r3, #6]
    }

    if (pEpOutDesc != NULL) {
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d006      	beq.n	800bbca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
        pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bbc4:	711a      	strb	r2, [r3, #4]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	715a      	strb	r2, [r3, #5]
    }

    if (pEpInDesc != NULL) {
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d006      	beq.n	800bbde <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
        pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bbd8:	711a      	strb	r2, [r3, #4]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	715a      	strb	r2, [r3, #5]
    }

    *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2243      	movs	r2, #67	@ 0x43
 800bbe2:	801a      	strh	r2, [r3, #0]
    return USBD_CDC_CfgDesc;
 800bbe4:	4b02      	ldr	r3, [pc, #8]	@ (800bbf0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3718      	adds	r7, #24
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	200000ac 	.word	0x200000ac

0800bbf4 <USBD_CDC_GetDeviceQualifierDescriptor>:
 * @brief  USBD_CDC_GetDeviceQualifierDescriptor
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
uint8_t * USBD_CDC_GetDeviceQualifierDescriptor(uint16_t * length) {
 800bbf4:	b480      	push	{r7}
 800bbf6:	b083      	sub	sp, #12
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
    *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	220a      	movs	r2, #10
 800bc00:	801a      	strh	r2, [r3, #0]

    return USBD_CDC_DeviceQualifierDesc;
 800bc02:	4b03      	ldr	r3, [pc, #12]	@ (800bc10 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	370c      	adds	r7, #12
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr
 800bc10:	20000068 	.word	0x20000068

0800bc14 <USBD_CDC_RegisterInterface>:
 * @brief  USBD_CDC_RegisterInterface
 * @param  pdev: device instance
 * @param  fops: CD  Interface callback
 * @retval status
 */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef * pdev, USBD_CDC_ItfTypeDef * fops) {
 800bc14:	b480      	push	{r7}
 800bc16:	b083      	sub	sp, #12
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
    if (fops == NULL) {
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d101      	bne.n	800bc28 <USBD_CDC_RegisterInterface+0x14>
        return (uint8_t)USBD_FAIL;
 800bc24:	2303      	movs	r3, #3
 800bc26:	e009      	b.n	800bc3c <USBD_CDC_RegisterInterface+0x28>
    }

    pdev->pUserData[pdev->classId] = fops;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bc2e:	687a      	ldr	r2, [r7, #4]
 800bc30:	33b0      	adds	r3, #176	@ 0xb0
 800bc32:	009b      	lsls	r3, r3, #2
 800bc34:	4413      	add	r3, r2
 800bc36:	683a      	ldr	r2, [r7, #0]
 800bc38:	605a      	str	r2, [r3, #4]

    return (uint8_t)USBD_OK;
 800bc3a:	2300      	movs	r3, #0
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	370c      	adds	r7, #12
 800bc40:	46bd      	mov	sp, r7
 800bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc46:	4770      	bx	lr

0800bc48 <USBD_CDC_SetTxBuffer>:
 * @param  pdev: device instance
 * @param  pbuff: Tx Buffer
 * @param  length: Tx Buffer length
 * @retval status
 */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef * pdev, uint8_t * pbuff, uint32_t length) {
 800bc48:	b480      	push	{r7}
 800bc4a:	b087      	sub	sp, #28
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	60f8      	str	r0, [r7, #12]
 800bc50:	60b9      	str	r1, [r7, #8]
 800bc52:	607a      	str	r2, [r7, #4]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	32b0      	adds	r2, #176	@ 0xb0
 800bc5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc62:	617b      	str	r3, [r7, #20]

    if (hcdc == NULL) {
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d101      	bne.n	800bc6e <USBD_CDC_SetTxBuffer+0x26>
        return (uint8_t)USBD_FAIL;
 800bc6a:	2303      	movs	r3, #3
 800bc6c:	e008      	b.n	800bc80 <USBD_CDC_SetTxBuffer+0x38>
    }

    hcdc->TxBuffer = pbuff;
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	68ba      	ldr	r2, [r7, #8]
 800bc72:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
    hcdc->TxLength = length;
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

    return (uint8_t)USBD_OK;
 800bc7e:	2300      	movs	r3, #0
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	371c      	adds	r7, #28
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr

0800bc8c <USBD_CDC_SetRxBuffer>:
 * @brief  USBD_CDC_SetRxBuffer
 * @param  pdev: device instance
 * @param  pbuff: Rx Buffer
 * @retval status
 */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef * pdev, uint8_t * pbuff) {
 800bc8c:	b480      	push	{r7}
 800bc8e:	b085      	sub	sp, #20
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	32b0      	adds	r2, #176	@ 0xb0
 800bca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bca4:	60fb      	str	r3, [r7, #12]

    if (hcdc == NULL) {
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d101      	bne.n	800bcb0 <USBD_CDC_SetRxBuffer+0x24>
        return (uint8_t)USBD_FAIL;
 800bcac:	2303      	movs	r3, #3
 800bcae:	e004      	b.n	800bcba <USBD_CDC_SetRxBuffer+0x2e>
    }

    hcdc->RxBuffer = pbuff;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	683a      	ldr	r2, [r7, #0]
 800bcb4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

    return (uint8_t)USBD_OK;
 800bcb8:	2300      	movs	r3, #0
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3714      	adds	r7, #20
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr
	...

0800bcc8 <USBD_CDC_TransmitPacket>:
 * @brief  USBD_CDC_TransmitPacket
 *         Transmit packet on IN endpoint
 * @param  pdev: device instance
 * @retval status
 */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef * pdev) {
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	32b0      	adds	r2, #176	@ 0xb0
 800bcda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcde:	60bb      	str	r3, [r7, #8]
    USBD_StatusTypeDef ret = USBD_BUSY;
 800bce0:	2301      	movs	r3, #1
 800bce2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
    /* Get the Endpoints addresses allocated for this class instance */
    CDCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
    if (pdev->pClassDataCmsit[pdev->classId] == NULL) {
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	32b0      	adds	r2, #176	@ 0xb0
 800bcee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d101      	bne.n	800bcfa <USBD_CDC_TransmitPacket+0x32>
        return (uint8_t)USBD_FAIL;
 800bcf6:	2303      	movs	r3, #3
 800bcf8:	e025      	b.n	800bd46 <USBD_CDC_TransmitPacket+0x7e>
    }

    if (hcdc->TxState == 0U) {
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d11f      	bne.n	800bd44 <USBD_CDC_TransmitPacket+0x7c>
        /* Tx Transfer in progress */
        hcdc->TxState = 1U;
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	2201      	movs	r2, #1
 800bd08:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

        /* Update the packet total length */
        pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800bd0c:	4b10      	ldr	r3, [pc, #64]	@ (800bd50 <USBD_CDC_TransmitPacket+0x88>)
 800bd0e:	781b      	ldrb	r3, [r3, #0]
 800bd10:	f003 020f 	and.w	r2, r3, #15
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	4613      	mov	r3, r2
 800bd1e:	009b      	lsls	r3, r3, #2
 800bd20:	4413      	add	r3, r2
 800bd22:	009b      	lsls	r3, r3, #2
 800bd24:	4403      	add	r3, r0
 800bd26:	3318      	adds	r3, #24
 800bd28:	6019      	str	r1, [r3, #0]

        /* Transmit next packet */
        (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800bd2a:	4b09      	ldr	r3, [pc, #36]	@ (800bd50 <USBD_CDC_TransmitPacket+0x88>)
 800bd2c:	7819      	ldrb	r1, [r3, #0]
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f004 fbf1 	bl	8010522 <USBD_LL_Transmit>

        ret = USBD_OK;
 800bd40:	2300      	movs	r3, #0
 800bd42:	73fb      	strb	r3, [r7, #15]
    }

    return (uint8_t)ret;
 800bd44:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3710      	adds	r7, #16
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
 800bd4e:	bf00      	nop
 800bd50:	200000ef 	.word	0x200000ef

0800bd54 <USBD_CDC_ReceivePacket>:
 * @brief  USBD_CDC_ReceivePacket
 *         prepare OUT Endpoint for reception
 * @param  pdev: device instance
 * @retval status
 */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef * pdev) {
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b084      	sub	sp, #16
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	32b0      	adds	r2, #176	@ 0xb0
 800bd66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd6a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
    /* Get the Endpoints addresses allocated for this class instance */
    CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

    if (pdev->pClassDataCmsit[pdev->classId] == NULL) {
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	32b0      	adds	r2, #176	@ 0xb0
 800bd76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d101      	bne.n	800bd82 <USBD_CDC_ReceivePacket+0x2e>
        return (uint8_t)USBD_FAIL;
 800bd7e:	2303      	movs	r3, #3
 800bd80:	e018      	b.n	800bdb4 <USBD_CDC_ReceivePacket+0x60>
    }

    if (pdev->dev_speed == USBD_SPEED_HIGH) {
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	7c1b      	ldrb	r3, [r3, #16]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d10a      	bne.n	800bda0 <USBD_CDC_ReceivePacket+0x4c>
        /* Prepare Out endpoint to receive next packet */
        (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer, CDC_DATA_HS_OUT_PACKET_SIZE);
 800bd8a:	4b0c      	ldr	r3, [pc, #48]	@ (800bdbc <USBD_CDC_ReceivePacket+0x68>)
 800bd8c:	7819      	ldrb	r1, [r3, #0]
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bd94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f004 fbe3 	bl	8010564 <USBD_LL_PrepareReceive>
 800bd9e:	e008      	b.n	800bdb2 <USBD_CDC_ReceivePacket+0x5e>
    } else {
        /* Prepare Out endpoint to receive next packet */
        (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer, CDC_DATA_FS_OUT_PACKET_SIZE);
 800bda0:	4b06      	ldr	r3, [pc, #24]	@ (800bdbc <USBD_CDC_ReceivePacket+0x68>)
 800bda2:	7819      	ldrb	r1, [r3, #0]
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bdaa:	2340      	movs	r3, #64	@ 0x40
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f004 fbd9 	bl	8010564 <USBD_LL_PrepareReceive>
    }

    return (uint8_t)USBD_OK;
 800bdb2:	2300      	movs	r3, #0
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3710      	adds	r7, #16
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}
 800bdbc:	200000f0 	.word	0x200000f0

0800bdc0 <USBD_Init>:
 * @param  pdev: device instance
 * @param  pdesc: Descriptor structure address
 * @param  id: Low level core index
 * @retval None
 */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef * pdev, USBD_DescriptorsTypeDef * pdesc, uint8_t id) {
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b086      	sub	sp, #24
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	60f8      	str	r0, [r7, #12]
 800bdc8:	60b9      	str	r1, [r7, #8]
 800bdca:	4613      	mov	r3, r2
 800bdcc:	71fb      	strb	r3, [r7, #7]
    USBD_StatusTypeDef ret;

    /* Check whether the USB Host handle is valid */
    if (pdev == NULL) {
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d101      	bne.n	800bdd8 <USBD_Init+0x18>
#if (USBD_DEBUG_LEVEL > 1U)
        USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
        return USBD_FAIL;
 800bdd4:	2303      	movs	r3, #3
 800bdd6:	e01f      	b.n	800be18 <USBD_Init+0x58>
        pdev->NumClasses = 0;
        pdev->classId = 0;
    }
#else
    /* Unlink previous class*/
    pdev->pClass[0] = NULL;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2200      	movs	r2, #0
 800bddc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
    pdev->pUserData[0] = NULL;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2200      	movs	r2, #0
 800bde4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

    pdev->pConfDesc = NULL;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	2200      	movs	r2, #0
 800bdec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

    /* Assign USBD Descriptors */
    if (pdesc != NULL) {
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d003      	beq.n	800bdfe <USBD_Init+0x3e>
        pdev->pDesc = pdesc;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	68ba      	ldr	r2, [r7, #8]
 800bdfa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    }

    /* Set Device initial State */
    pdev->dev_state = USBD_STATE_DEFAULT;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	2201      	movs	r2, #1
 800be02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    pdev->id = id;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	79fa      	ldrb	r2, [r7, #7]
 800be0a:	701a      	strb	r2, [r3, #0]

    /* Initialize low level driver */
    ret = USBD_LL_Init(pdev);
 800be0c:	68f8      	ldr	r0, [r7, #12]
 800be0e:	f004 fa53 	bl	80102b8 <USBD_LL_Init>
 800be12:	4603      	mov	r3, r0
 800be14:	75fb      	strb	r3, [r7, #23]

    return ret;
 800be16:	7dfb      	ldrb	r3, [r7, #23]
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3718      	adds	r7, #24
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <USBD_RegisterClass>:
 *         Link class driver to Device Core.
 * @param  pDevice : Device Handle
 * @param  pclass: Class handle
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef * pdev, USBD_ClassTypeDef * pclass) {
 800be20:	b580      	push	{r7, lr}
 800be22:	b084      	sub	sp, #16
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6039      	str	r1, [r7, #0]
    uint16_t len = 0U;
 800be2a:	2300      	movs	r3, #0
 800be2c:	81fb      	strh	r3, [r7, #14]

    if (pclass == NULL) {
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d101      	bne.n	800be38 <USBD_RegisterClass+0x18>
#if (USBD_DEBUG_LEVEL > 1U)
        USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
        return USBD_FAIL;
 800be34:	2303      	movs	r3, #3
 800be36:	e025      	b.n	800be84 <USBD_RegisterClass+0x64>
    }

    /* link the class to the USB Device handle */
    pdev->pClass[0] = pclass;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	683a      	ldr	r2, [r7, #0]
 800be3c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
#ifdef USE_USB_HS
    if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL) {
        pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
    }
#else  /* Default USE_USB_FS */
    if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL) {
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	32ae      	adds	r2, #174	@ 0xae
 800be4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be50:	2b00      	cmp	r3, #0
 800be52:	d00f      	beq.n	800be74 <USBD_RegisterClass+0x54>
        pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	32ae      	adds	r2, #174	@ 0xae
 800be5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be64:	f107 020e 	add.w	r2, r7, #14
 800be68:	4610      	mov	r0, r2
 800be6a:	4798      	blx	r3
 800be6c:	4602      	mov	r2, r0
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
    }
#endif /* USE_USB_FS */

    /* Increment the NumClasses */
    pdev->NumClasses++;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800be7a:	1c5a      	adds	r2, r3, #1
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

    return USBD_OK;
 800be82:	2300      	movs	r3, #0
}
 800be84:	4618      	mov	r0, r3
 800be86:	3710      	adds	r7, #16
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}

0800be8c <USBD_Start>:
 * @brief  USBD_Start
 *         Start the USB Device Core.
 * @param  pdev: Device Handle
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef * pdev) {
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
    pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

    /* Start the low level driver  */
    return USBD_LL_Start(pdev);
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f004 fa5b 	bl	8010350 <USBD_LL_Start>
 800be9a:	4603      	mov	r3, r0
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3708      	adds	r7, #8
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}

0800bea4 <USBD_RunTestMode>:
 * @brief  USBD_RunTestMode
 *         Launch test mode process
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef * pdev) {
 800bea4:	b480      	push	{r7}
 800bea6:	b083      	sub	sp, #12
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
    return ret;
#else
    /* Prevent unused argument compilation warning */
    UNUSED(pdev);

    return USBD_OK;
 800beac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800beae:	4618      	mov	r0, r3
 800beb0:	370c      	adds	r7, #12
 800beb2:	46bd      	mov	sp, r7
 800beb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb8:	4770      	bx	lr

0800beba <USBD_SetClassConfig>:
 * @param  pdev: device instance
 * @param  cfgidx: configuration index
 * @retval status
 */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef * pdev, uint8_t cfgidx) {
 800beba:	b580      	push	{r7, lr}
 800bebc:	b084      	sub	sp, #16
 800bebe:	af00      	add	r7, sp, #0
 800bec0:	6078      	str	r0, [r7, #4]
 800bec2:	460b      	mov	r3, r1
 800bec4:	70fb      	strb	r3, [r7, #3]
    USBD_StatusTypeDef ret = USBD_OK;
 800bec6:	2300      	movs	r3, #0
 800bec8:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }
#else
    if (pdev->pClass[0] != NULL) {
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d009      	beq.n	800bee8 <USBD_SetClassConfig+0x2e>
        /* Set configuration and Start the Class */
        ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	78fa      	ldrb	r2, [r7, #3]
 800bede:	4611      	mov	r1, r2
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	4798      	blx	r3
 800bee4:	4603      	mov	r3, r0
 800bee6:	73fb      	strb	r3, [r7, #15]
    }
#endif /* USE_USBD_COMPOSITE */

    return ret;
 800bee8:	7bfb      	ldrb	r3, [r7, #15]
}
 800beea:	4618      	mov	r0, r3
 800beec:	3710      	adds	r7, #16
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}

0800bef2 <USBD_ClrClassConfig>:
 *         Clear current configuration
 * @param  pdev: device instance
 * @param  cfgidx: configuration index
 * @retval status: USBD_StatusTypeDef
 */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef * pdev, uint8_t cfgidx) {
 800bef2:	b580      	push	{r7, lr}
 800bef4:	b084      	sub	sp, #16
 800bef6:	af00      	add	r7, sp, #0
 800bef8:	6078      	str	r0, [r7, #4]
 800befa:	460b      	mov	r3, r1
 800befc:	70fb      	strb	r3, [r7, #3]
    USBD_StatusTypeDef ret = USBD_OK;
 800befe:	2300      	movs	r3, #0
 800bf00:	73fb      	strb	r3, [r7, #15]
            }
        }
    }
#else
    /* Clear configuration  and De-initialize the Class process */
    if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U) {
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	78fa      	ldrb	r2, [r7, #3]
 800bf0c:	4611      	mov	r1, r2
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	4798      	blx	r3
 800bf12:	4603      	mov	r3, r0
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d001      	beq.n	800bf1c <USBD_ClrClassConfig+0x2a>
        ret = USBD_FAIL;
 800bf18:	2303      	movs	r3, #3
 800bf1a:	73fb      	strb	r3, [r7, #15]
    }
#endif /* USE_USBD_COMPOSITE */

    return ret;
 800bf1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3710      	adds	r7, #16
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}

0800bf26 <USBD_LL_SetupStage>:
 * @brief  USBD_LL_SetupStage
 *         Handle the setup stage
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef * pdev, uint8_t * psetup) {
 800bf26:	b580      	push	{r7, lr}
 800bf28:	b084      	sub	sp, #16
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	6078      	str	r0, [r7, #4]
 800bf2e:	6039      	str	r1, [r7, #0]
    USBD_StatusTypeDef ret;

    USBD_ParseSetupRequest(&pdev->request, psetup);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bf36:	6839      	ldr	r1, [r7, #0]
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f001 f906 	bl	800d14a <USBD_ParseSetupRequest>

    pdev->ep0_state = USBD_EP0_SETUP;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2201      	movs	r2, #1
 800bf42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

    pdev->ep0_data_len = pdev->request.wLength;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800bf4c:	461a      	mov	r2, r3
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

    switch (pdev->request.bmRequest & 0x1FU) {
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bf5a:	f003 031f 	and.w	r3, r3, #31
 800bf5e:	2b02      	cmp	r3, #2
 800bf60:	d01a      	beq.n	800bf98 <USBD_LL_SetupStage+0x72>
 800bf62:	2b02      	cmp	r3, #2
 800bf64:	d822      	bhi.n	800bfac <USBD_LL_SetupStage+0x86>
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d002      	beq.n	800bf70 <USBD_LL_SetupStage+0x4a>
 800bf6a:	2b01      	cmp	r3, #1
 800bf6c:	d00a      	beq.n	800bf84 <USBD_LL_SetupStage+0x5e>
 800bf6e:	e01d      	b.n	800bfac <USBD_LL_SetupStage+0x86>
    case USB_REQ_RECIPIENT_DEVICE:
        ret = USBD_StdDevReq(pdev, &pdev->request);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bf76:	4619      	mov	r1, r3
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 fb5d 	bl	800c638 <USBD_StdDevReq>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	73fb      	strb	r3, [r7, #15]
        break;
 800bf82:	e020      	b.n	800bfc6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
        ret = USBD_StdItfReq(pdev, &pdev->request);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f000 fbc5 	bl	800c71c <USBD_StdItfReq>
 800bf92:	4603      	mov	r3, r0
 800bf94:	73fb      	strb	r3, [r7, #15]
        break;
 800bf96:	e016      	b.n	800bfc6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
        ret = USBD_StdEPReq(pdev, &pdev->request);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bf9e:	4619      	mov	r1, r3
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f000 fc27 	bl	800c7f4 <USBD_StdEPReq>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	73fb      	strb	r3, [r7, #15]
        break;
 800bfaa:	e00c      	b.n	800bfc6 <USBD_LL_SetupStage+0xa0>

    default:
        ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bfb2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bfb6:	b2db      	uxtb	r3, r3
 800bfb8:	4619      	mov	r1, r3
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f004 fa28 	bl	8010410 <USBD_LL_StallEP>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	73fb      	strb	r3, [r7, #15]
        break;
 800bfc4:	bf00      	nop
    }

    return ret;
 800bfc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3710      	adds	r7, #16
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <USBD_LL_DataOutStage>:
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @param  pdata: data pointer
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef * pdev, uint8_t epnum, uint8_t * pdata) {
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b086      	sub	sp, #24
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	60f8      	str	r0, [r7, #12]
 800bfd8:	460b      	mov	r3, r1
 800bfda:	607a      	str	r2, [r7, #4]
 800bfdc:	72fb      	strb	r3, [r7, #11]
    USBD_EndpointTypeDef * pep;
    USBD_StatusTypeDef ret = USBD_OK;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	75fb      	strb	r3, [r7, #23]
    uint8_t idx;

    if (epnum == 0U) {
 800bfe2:	7afb      	ldrb	r3, [r7, #11]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d16e      	bne.n	800c0c6 <USBD_LL_DataOutStage+0xf6>
        pep = &pdev->ep_out[0];
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800bfee:	613b      	str	r3, [r7, #16]

        if (pdev->ep0_state == USBD_EP0_DATA_OUT) {
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bff6:	2b03      	cmp	r3, #3
 800bff8:	f040 8098 	bne.w	800c12c <USBD_LL_DataOutStage+0x15c>
            if (pep->rem_length > pep->maxpacket) {
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	689a      	ldr	r2, [r3, #8]
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	68db      	ldr	r3, [r3, #12]
 800c004:	429a      	cmp	r2, r3
 800c006:	d913      	bls.n	800c030 <USBD_LL_DataOutStage+0x60>
                pep->rem_length -= pep->maxpacket;
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	689a      	ldr	r2, [r3, #8]
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	68db      	ldr	r3, [r3, #12]
 800c010:	1ad2      	subs	r2, r2, r3
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	609a      	str	r2, [r3, #8]

                (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	68da      	ldr	r2, [r3, #12]
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	689b      	ldr	r3, [r3, #8]
 800c01e:	4293      	cmp	r3, r2
 800c020:	bf28      	it	cs
 800c022:	4613      	movcs	r3, r2
 800c024:	461a      	mov	r2, r3
 800c026:	6879      	ldr	r1, [r7, #4]
 800c028:	68f8      	ldr	r0, [r7, #12]
 800c02a:	f001 f982 	bl	800d332 <USBD_CtlContinueRx>
 800c02e:	e07d      	b.n	800c12c <USBD_LL_DataOutStage+0x15c>
            } else {
                /* Find the class ID relative to the current request */
                switch (pdev->request.bmRequest & 0x1FU) {
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c036:	f003 031f 	and.w	r3, r3, #31
 800c03a:	2b02      	cmp	r3, #2
 800c03c:	d014      	beq.n	800c068 <USBD_LL_DataOutStage+0x98>
 800c03e:	2b02      	cmp	r3, #2
 800c040:	d81d      	bhi.n	800c07e <USBD_LL_DataOutStage+0xae>
 800c042:	2b00      	cmp	r3, #0
 800c044:	d002      	beq.n	800c04c <USBD_LL_DataOutStage+0x7c>
 800c046:	2b01      	cmp	r3, #1
 800c048:	d003      	beq.n	800c052 <USBD_LL_DataOutStage+0x82>
 800c04a:	e018      	b.n	800c07e <USBD_LL_DataOutStage+0xae>
                case USB_REQ_RECIPIENT_DEVICE:
                    /* Device requests must be managed by the first instantiated class
                       (or duplicated by all classes for simplicity) */
                    idx = 0U;
 800c04c:	2300      	movs	r3, #0
 800c04e:	75bb      	strb	r3, [r7, #22]
                    break;
 800c050:	e018      	b.n	800c084 <USBD_LL_DataOutStage+0xb4>

                case USB_REQ_RECIPIENT_INTERFACE:
                    idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c058:	b2db      	uxtb	r3, r3
 800c05a:	4619      	mov	r1, r3
 800c05c:	68f8      	ldr	r0, [r7, #12]
 800c05e:	f000 fa5e 	bl	800c51e <USBD_CoreFindIF>
 800c062:	4603      	mov	r3, r0
 800c064:	75bb      	strb	r3, [r7, #22]
                    break;
 800c066:	e00d      	b.n	800c084 <USBD_LL_DataOutStage+0xb4>

                case USB_REQ_RECIPIENT_ENDPOINT:
                    idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c06e:	b2db      	uxtb	r3, r3
 800c070:	4619      	mov	r1, r3
 800c072:	68f8      	ldr	r0, [r7, #12]
 800c074:	f000 fa60 	bl	800c538 <USBD_CoreFindEP>
 800c078:	4603      	mov	r3, r0
 800c07a:	75bb      	strb	r3, [r7, #22]
                    break;
 800c07c:	e002      	b.n	800c084 <USBD_LL_DataOutStage+0xb4>

                default:
                    /* Back to the first class in case of doubt */
                    idx = 0U;
 800c07e:	2300      	movs	r3, #0
 800c080:	75bb      	strb	r3, [r7, #22]
                    break;
 800c082:	bf00      	nop
                }

                if (idx < USBD_MAX_SUPPORTED_CLASS) {
 800c084:	7dbb      	ldrb	r3, [r7, #22]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d119      	bne.n	800c0be <USBD_LL_DataOutStage+0xee>
                    /* Setup the class ID and route the request to the relative class function */
                    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c090:	b2db      	uxtb	r3, r3
 800c092:	2b03      	cmp	r3, #3
 800c094:	d113      	bne.n	800c0be <USBD_LL_DataOutStage+0xee>
                        if (pdev->pClass[idx]->EP0_RxReady != NULL) {
 800c096:	7dba      	ldrb	r2, [r7, #22]
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	32ae      	adds	r2, #174	@ 0xae
 800c09c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0a0:	691b      	ldr	r3, [r3, #16]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d00b      	beq.n	800c0be <USBD_LL_DataOutStage+0xee>
                            pdev->classId = idx;
 800c0a6:	7dba      	ldrb	r2, [r7, #22]
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                            pdev->pClass[idx]->EP0_RxReady(pdev);
 800c0ae:	7dba      	ldrb	r2, [r7, #22]
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	32ae      	adds	r2, #174	@ 0xae
 800c0b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0b8:	691b      	ldr	r3, [r3, #16]
 800c0ba:	68f8      	ldr	r0, [r7, #12]
 800c0bc:	4798      	blx	r3
                        }
                    }
                }

                (void)USBD_CtlSendStatus(pdev);
 800c0be:	68f8      	ldr	r0, [r7, #12]
 800c0c0:	f001 f948 	bl	800d354 <USBD_CtlSendStatus>
 800c0c4:	e032      	b.n	800c12c <USBD_LL_DataOutStage+0x15c>
      }
#endif
        }
    } else {
        /* Get the class index relative to this interface */
        idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c0c6:	7afb      	ldrb	r3, [r7, #11]
 800c0c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0cc:	b2db      	uxtb	r3, r3
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	68f8      	ldr	r0, [r7, #12]
 800c0d2:	f000 fa31 	bl	800c538 <USBD_CoreFindEP>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	75bb      	strb	r3, [r7, #22]

        if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 800c0da:	7dbb      	ldrb	r3, [r7, #22]
 800c0dc:	2bff      	cmp	r3, #255	@ 0xff
 800c0de:	d025      	beq.n	800c12c <USBD_LL_DataOutStage+0x15c>
 800c0e0:	7dbb      	ldrb	r3, [r7, #22]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d122      	bne.n	800c12c <USBD_LL_DataOutStage+0x15c>
            /* Call the class data out function to manage the request */
            if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0ec:	b2db      	uxtb	r3, r3
 800c0ee:	2b03      	cmp	r3, #3
 800c0f0:	d117      	bne.n	800c122 <USBD_LL_DataOutStage+0x152>
                if (pdev->pClass[idx]->DataOut != NULL) {
 800c0f2:	7dba      	ldrb	r2, [r7, #22]
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	32ae      	adds	r2, #174	@ 0xae
 800c0f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0fc:	699b      	ldr	r3, [r3, #24]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d00f      	beq.n	800c122 <USBD_LL_DataOutStage+0x152>
                    pdev->classId = idx;
 800c102:	7dba      	ldrb	r2, [r7, #22]
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                    ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c10a:	7dba      	ldrb	r2, [r7, #22]
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	32ae      	adds	r2, #174	@ 0xae
 800c110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c114:	699b      	ldr	r3, [r3, #24]
 800c116:	7afa      	ldrb	r2, [r7, #11]
 800c118:	4611      	mov	r1, r2
 800c11a:	68f8      	ldr	r0, [r7, #12]
 800c11c:	4798      	blx	r3
 800c11e:	4603      	mov	r3, r0
 800c120:	75fb      	strb	r3, [r7, #23]
                }
            }
            if (ret != USBD_OK) {
 800c122:	7dfb      	ldrb	r3, [r7, #23]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d001      	beq.n	800c12c <USBD_LL_DataOutStage+0x15c>
                return ret;
 800c128:	7dfb      	ldrb	r3, [r7, #23]
 800c12a:	e000      	b.n	800c12e <USBD_LL_DataOutStage+0x15e>
            }
        }
    }

    return USBD_OK;
 800c12c:	2300      	movs	r3, #0
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3718      	adds	r7, #24
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}

0800c136 <USBD_LL_DataInStage>:
 *         Handle data in stage
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef * pdev, uint8_t epnum, uint8_t * pdata) {
 800c136:	b580      	push	{r7, lr}
 800c138:	b086      	sub	sp, #24
 800c13a:	af00      	add	r7, sp, #0
 800c13c:	60f8      	str	r0, [r7, #12]
 800c13e:	460b      	mov	r3, r1
 800c140:	607a      	str	r2, [r7, #4]
 800c142:	72fb      	strb	r3, [r7, #11]
    USBD_EndpointTypeDef * pep;
    USBD_StatusTypeDef ret;
    uint8_t idx;

    if (epnum == 0U) {
 800c144:	7afb      	ldrb	r3, [r7, #11]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d16f      	bne.n	800c22a <USBD_LL_DataInStage+0xf4>
        pep = &pdev->ep_in[0];
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	3314      	adds	r3, #20
 800c14e:	613b      	str	r3, [r7, #16]

        if (pdev->ep0_state == USBD_EP0_DATA_IN) {
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c156:	2b02      	cmp	r3, #2
 800c158:	d15a      	bne.n	800c210 <USBD_LL_DataInStage+0xda>
            if (pep->rem_length > pep->maxpacket) {
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	689a      	ldr	r2, [r3, #8]
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	68db      	ldr	r3, [r3, #12]
 800c162:	429a      	cmp	r2, r3
 800c164:	d914      	bls.n	800c190 <USBD_LL_DataInStage+0x5a>
                pep->rem_length -= pep->maxpacket;
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	689a      	ldr	r2, [r3, #8]
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	68db      	ldr	r3, [r3, #12]
 800c16e:	1ad2      	subs	r2, r2, r3
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	609a      	str	r2, [r3, #8]

                (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	689b      	ldr	r3, [r3, #8]
 800c178:	461a      	mov	r2, r3
 800c17a:	6879      	ldr	r1, [r7, #4]
 800c17c:	68f8      	ldr	r0, [r7, #12]
 800c17e:	f001 f8aa 	bl	800d2d6 <USBD_CtlContinueSendData>

                /* Prepare endpoint for premature end of transfer */
                (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c182:	2300      	movs	r3, #0
 800c184:	2200      	movs	r2, #0
 800c186:	2100      	movs	r1, #0
 800c188:	68f8      	ldr	r0, [r7, #12]
 800c18a:	f004 f9eb 	bl	8010564 <USBD_LL_PrepareReceive>
 800c18e:	e03f      	b.n	800c210 <USBD_LL_DataInStage+0xda>
            } else {
                /* last packet is MPS multiple, so send ZLP packet */
                if ((pep->maxpacket == pep->rem_length) && (pep->total_length >= pep->maxpacket) && (pep->total_length < pdev->ep0_data_len)) {
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	68da      	ldr	r2, [r3, #12]
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	689b      	ldr	r3, [r3, #8]
 800c198:	429a      	cmp	r2, r3
 800c19a:	d11c      	bne.n	800c1d6 <USBD_LL_DataInStage+0xa0>
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	685a      	ldr	r2, [r3, #4]
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	68db      	ldr	r3, [r3, #12]
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d316      	bcc.n	800c1d6 <USBD_LL_DataInStage+0xa0>
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	685a      	ldr	r2, [r3, #4]
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d20f      	bcs.n	800c1d6 <USBD_LL_DataInStage+0xa0>
                    (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	2100      	movs	r1, #0
 800c1ba:	68f8      	ldr	r0, [r7, #12]
 800c1bc:	f001 f88b 	bl	800d2d6 <USBD_CtlContinueSendData>
                    pdev->ep0_data_len = 0U;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

                    /* Prepare endpoint for premature end of transfer */
                    (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	2100      	movs	r1, #0
 800c1ce:	68f8      	ldr	r0, [r7, #12]
 800c1d0:	f004 f9c8 	bl	8010564 <USBD_LL_PrepareReceive>
 800c1d4:	e01c      	b.n	800c210 <USBD_LL_DataInStage+0xda>
                } else {
                    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1dc:	b2db      	uxtb	r3, r3
 800c1de:	2b03      	cmp	r3, #3
 800c1e0:	d10f      	bne.n	800c202 <USBD_LL_DataInStage+0xcc>
                        if (pdev->pClass[0]->EP0_TxSent != NULL) {
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1e8:	68db      	ldr	r3, [r3, #12]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d009      	beq.n	800c202 <USBD_LL_DataInStage+0xcc>
                            pdev->classId = 0U;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                            pdev->pClass[0]->EP0_TxSent(pdev);
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1fc:	68db      	ldr	r3, [r3, #12]
 800c1fe:	68f8      	ldr	r0, [r7, #12]
 800c200:	4798      	blx	r3
                        }
                    }
                    (void)USBD_LL_StallEP(pdev, 0x80U);
 800c202:	2180      	movs	r1, #128	@ 0x80
 800c204:	68f8      	ldr	r0, [r7, #12]
 800c206:	f004 f903 	bl	8010410 <USBD_LL_StallEP>
                    (void)USBD_CtlReceiveStatus(pdev);
 800c20a:	68f8      	ldr	r0, [r7, #12]
 800c20c:	f001 f8b5 	bl	800d37a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
        }

        if (pdev->dev_test_mode != 0U) {
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c216:	2b00      	cmp	r3, #0
 800c218:	d03a      	beq.n	800c290 <USBD_LL_DataInStage+0x15a>
            (void)USBD_RunTestMode(pdev);
 800c21a:	68f8      	ldr	r0, [r7, #12]
 800c21c:	f7ff fe42 	bl	800bea4 <USBD_RunTestMode>
            pdev->dev_test_mode = 0U;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	2200      	movs	r2, #0
 800c224:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c228:	e032      	b.n	800c290 <USBD_LL_DataInStage+0x15a>
        }
    } else {
        /* Get the class index relative to this interface */
        idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c22a:	7afb      	ldrb	r3, [r7, #11]
 800c22c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c230:	b2db      	uxtb	r3, r3
 800c232:	4619      	mov	r1, r3
 800c234:	68f8      	ldr	r0, [r7, #12]
 800c236:	f000 f97f 	bl	800c538 <USBD_CoreFindEP>
 800c23a:	4603      	mov	r3, r0
 800c23c:	75fb      	strb	r3, [r7, #23]

        if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 800c23e:	7dfb      	ldrb	r3, [r7, #23]
 800c240:	2bff      	cmp	r3, #255	@ 0xff
 800c242:	d025      	beq.n	800c290 <USBD_LL_DataInStage+0x15a>
 800c244:	7dfb      	ldrb	r3, [r7, #23]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d122      	bne.n	800c290 <USBD_LL_DataInStage+0x15a>
            /* Call the class data out function to manage the request */
            if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c250:	b2db      	uxtb	r3, r3
 800c252:	2b03      	cmp	r3, #3
 800c254:	d11c      	bne.n	800c290 <USBD_LL_DataInStage+0x15a>
                if (pdev->pClass[idx]->DataIn != NULL) {
 800c256:	7dfa      	ldrb	r2, [r7, #23]
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	32ae      	adds	r2, #174	@ 0xae
 800c25c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c260:	695b      	ldr	r3, [r3, #20]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d014      	beq.n	800c290 <USBD_LL_DataInStage+0x15a>
                    pdev->classId = idx;
 800c266:	7dfa      	ldrb	r2, [r7, #23]
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                    ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c26e:	7dfa      	ldrb	r2, [r7, #23]
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	32ae      	adds	r2, #174	@ 0xae
 800c274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c278:	695b      	ldr	r3, [r3, #20]
 800c27a:	7afa      	ldrb	r2, [r7, #11]
 800c27c:	4611      	mov	r1, r2
 800c27e:	68f8      	ldr	r0, [r7, #12]
 800c280:	4798      	blx	r3
 800c282:	4603      	mov	r3, r0
 800c284:	75bb      	strb	r3, [r7, #22]

                    if (ret != USBD_OK) {
 800c286:	7dbb      	ldrb	r3, [r7, #22]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d001      	beq.n	800c290 <USBD_LL_DataInStage+0x15a>
                        return ret;
 800c28c:	7dbb      	ldrb	r3, [r7, #22]
 800c28e:	e000      	b.n	800c292 <USBD_LL_DataInStage+0x15c>
                }
            }
        }
    }

    return USBD_OK;
 800c290:	2300      	movs	r3, #0
}
 800c292:	4618      	mov	r0, r3
 800c294:	3718      	adds	r7, #24
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}

0800c29a <USBD_LL_Reset>:
 *         Handle Reset event
 * @param  pdev: device instance
 * @retval status
 */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef * pdev) {
 800c29a:	b580      	push	{r7, lr}
 800c29c:	b084      	sub	sp, #16
 800c29e:	af00      	add	r7, sp, #0
 800c2a0:	6078      	str	r0, [r7, #4]
    USBD_StatusTypeDef ret = USBD_OK;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	73fb      	strb	r3, [r7, #15]

    /* Upon Reset call user call back */
    pdev->dev_state = USBD_STATE_DEFAULT;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2201      	movs	r2, #1
 800c2aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    pdev->ep0_state = USBD_EP0_IDLE;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
    pdev->dev_config = 0U;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	605a      	str	r2, [r3, #4]
    pdev->dev_remote_wakeup = 0U;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    pdev->dev_test_mode = 0U;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
            }
        }
    }
#else

    if (pdev->pClass[0] != NULL) {
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d014      	beq.n	800c300 <USBD_LL_Reset+0x66>
        if (pdev->pClass[0]->DeInit != NULL) {
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d00e      	beq.n	800c300 <USBD_LL_Reset+0x66>
            if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK) {
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	687a      	ldr	r2, [r7, #4]
 800c2ec:	6852      	ldr	r2, [r2, #4]
 800c2ee:	b2d2      	uxtb	r2, r2
 800c2f0:	4611      	mov	r1, r2
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	4798      	blx	r3
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d001      	beq.n	800c300 <USBD_LL_Reset+0x66>
                ret = USBD_FAIL;
 800c2fc:	2303      	movs	r3, #3
 800c2fe:	73fb      	strb	r3, [r7, #15]
        }
    }
#endif /* USE_USBD_COMPOSITE */

    /* Open EP0 OUT */
    (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c300:	2340      	movs	r3, #64	@ 0x40
 800c302:	2200      	movs	r2, #0
 800c304:	2100      	movs	r1, #0
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f004 f83d 	bl	8010386 <USBD_LL_OpenEP>
    pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2201      	movs	r2, #1
 800c310:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

    pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2240      	movs	r2, #64	@ 0x40
 800c318:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

    /* Open EP0 IN */
    (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c31c:	2340      	movs	r3, #64	@ 0x40
 800c31e:	2200      	movs	r2, #0
 800c320:	2180      	movs	r1, #128	@ 0x80
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f004 f82f 	bl	8010386 <USBD_LL_OpenEP>
    pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2201      	movs	r2, #1
 800c32c:	849a      	strh	r2, [r3, #36]	@ 0x24

    pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2240      	movs	r2, #64	@ 0x40
 800c332:	621a      	str	r2, [r3, #32]

    return ret;
 800c334:	7bfb      	ldrb	r3, [r7, #15]
}
 800c336:	4618      	mov	r0, r3
 800c338:	3710      	adds	r7, #16
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}

0800c33e <USBD_LL_SetSpeed>:
 * @brief  USBD_LL_SetSpeed
 *         Handle Reset event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef * pdev, USBD_SpeedTypeDef speed) {
 800c33e:	b480      	push	{r7}
 800c340:	b083      	sub	sp, #12
 800c342:	af00      	add	r7, sp, #0
 800c344:	6078      	str	r0, [r7, #4]
 800c346:	460b      	mov	r3, r1
 800c348:	70fb      	strb	r3, [r7, #3]
    pdev->dev_speed = speed;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	78fa      	ldrb	r2, [r7, #3]
 800c34e:	741a      	strb	r2, [r3, #16]

    return USBD_OK;
 800c350:	2300      	movs	r3, #0
}
 800c352:	4618      	mov	r0, r3
 800c354:	370c      	adds	r7, #12
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr

0800c35e <USBD_LL_Suspend>:
 *         Handle Suspend event
 * @param  pdev: device instance
 * @retval status
 */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef * pdev) {
 800c35e:	b480      	push	{r7}
 800c360:	b083      	sub	sp, #12
 800c362:	af00      	add	r7, sp, #0
 800c364:	6078      	str	r0, [r7, #4]
    pdev->dev_old_state = pdev->dev_state;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c36c:	b2da      	uxtb	r2, r3
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
    pdev->dev_state = USBD_STATE_SUSPENDED;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2204      	movs	r2, #4
 800c378:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

    return USBD_OK;
 800c37c:	2300      	movs	r3, #0
}
 800c37e:	4618      	mov	r0, r3
 800c380:	370c      	adds	r7, #12
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr

0800c38a <USBD_LL_Resume>:
 *         Handle Resume event
 * @param  pdev: device instance
 * @retval status
 */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef * pdev) {
 800c38a:	b480      	push	{r7}
 800c38c:	b083      	sub	sp, #12
 800c38e:	af00      	add	r7, sp, #0
 800c390:	6078      	str	r0, [r7, #4]
    if (pdev->dev_state == USBD_STATE_SUSPENDED) {
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c398:	b2db      	uxtb	r3, r3
 800c39a:	2b04      	cmp	r3, #4
 800c39c:	d106      	bne.n	800c3ac <USBD_LL_Resume+0x22>
        pdev->dev_state = pdev->dev_old_state;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c3a4:	b2da      	uxtb	r2, r3
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    }

    return USBD_OK;
 800c3ac:	2300      	movs	r3, #0
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	370c      	adds	r7, #12
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b8:	4770      	bx	lr

0800c3ba <USBD_LL_SOF>:
 *         Handle SOF event
 * @param  pdev: device instance
 * @retval status
 */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef * pdev) {
 800c3ba:	b580      	push	{r7, lr}
 800c3bc:	b082      	sub	sp, #8
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
    /* The SOF event can be distributed for all classes that support it */
    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3c8:	b2db      	uxtb	r3, r3
 800c3ca:	2b03      	cmp	r3, #3
 800c3cc:	d110      	bne.n	800c3f0 <USBD_LL_SOF+0x36>
                    }
                }
            }
        }
#else
        if (pdev->pClass[0] != NULL) {
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d00b      	beq.n	800c3f0 <USBD_LL_SOF+0x36>
            if (pdev->pClass[0]->SOF != NULL) {
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3de:	69db      	ldr	r3, [r3, #28]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d005      	beq.n	800c3f0 <USBD_LL_SOF+0x36>
                (void)pdev->pClass[0]->SOF(pdev);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3ea:	69db      	ldr	r3, [r3, #28]
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	4798      	blx	r3
            }
        }
#endif /* USE_USBD_COMPOSITE */
    }

    return USBD_OK;
 800c3f0:	2300      	movs	r3, #0
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	3708      	adds	r7, #8
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}

0800c3fa <USBD_LL_IsoINIncomplete>:
 * @brief  USBD_LL_IsoINIncomplete
 *         Handle iso in incomplete event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef * pdev, uint8_t epnum) {
 800c3fa:	b580      	push	{r7, lr}
 800c3fc:	b082      	sub	sp, #8
 800c3fe:	af00      	add	r7, sp, #0
 800c400:	6078      	str	r0, [r7, #4]
 800c402:	460b      	mov	r3, r1
 800c404:	70fb      	strb	r3, [r7, #3]
    if (pdev->pClass[pdev->classId] == NULL) {
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	32ae      	adds	r2, #174	@ 0xae
 800c410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d101      	bne.n	800c41c <USBD_LL_IsoINIncomplete+0x22>
        return USBD_FAIL;
 800c418:	2303      	movs	r3, #3
 800c41a:	e01c      	b.n	800c456 <USBD_LL_IsoINIncomplete+0x5c>
    }

    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c422:	b2db      	uxtb	r3, r3
 800c424:	2b03      	cmp	r3, #3
 800c426:	d115      	bne.n	800c454 <USBD_LL_IsoINIncomplete+0x5a>
        if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL) {
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	32ae      	adds	r2, #174	@ 0xae
 800c432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c436:	6a1b      	ldr	r3, [r3, #32]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d00b      	beq.n	800c454 <USBD_LL_IsoINIncomplete+0x5a>
            (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	32ae      	adds	r2, #174	@ 0xae
 800c446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c44a:	6a1b      	ldr	r3, [r3, #32]
 800c44c:	78fa      	ldrb	r2, [r7, #3]
 800c44e:	4611      	mov	r1, r2
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	4798      	blx	r3
        }
    }

    return USBD_OK;
 800c454:	2300      	movs	r3, #0
}
 800c456:	4618      	mov	r0, r3
 800c458:	3708      	adds	r7, #8
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}

0800c45e <USBD_LL_IsoOUTIncomplete>:
 * @brief  USBD_LL_IsoOUTIncomplete
 *         Handle iso out incomplete event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef * pdev, uint8_t epnum) {
 800c45e:	b580      	push	{r7, lr}
 800c460:	b082      	sub	sp, #8
 800c462:	af00      	add	r7, sp, #0
 800c464:	6078      	str	r0, [r7, #4]
 800c466:	460b      	mov	r3, r1
 800c468:	70fb      	strb	r3, [r7, #3]
    if (pdev->pClass[pdev->classId] == NULL) {
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	32ae      	adds	r2, #174	@ 0xae
 800c474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d101      	bne.n	800c480 <USBD_LL_IsoOUTIncomplete+0x22>
        return USBD_FAIL;
 800c47c:	2303      	movs	r3, #3
 800c47e:	e01c      	b.n	800c4ba <USBD_LL_IsoOUTIncomplete+0x5c>
    }

    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c486:	b2db      	uxtb	r3, r3
 800c488:	2b03      	cmp	r3, #3
 800c48a:	d115      	bne.n	800c4b8 <USBD_LL_IsoOUTIncomplete+0x5a>
        if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL) {
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	32ae      	adds	r2, #174	@ 0xae
 800c496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c49a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d00b      	beq.n	800c4b8 <USBD_LL_IsoOUTIncomplete+0x5a>
            (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	32ae      	adds	r2, #174	@ 0xae
 800c4aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4b0:	78fa      	ldrb	r2, [r7, #3]
 800c4b2:	4611      	mov	r1, r2
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	4798      	blx	r3
        }
    }

    return USBD_OK;
 800c4b8:	2300      	movs	r3, #0
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	3708      	adds	r7, #8
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}

0800c4c2 <USBD_LL_DevConnected>:
 * @brief  USBD_LL_DevConnected
 *         Handle device connection event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef * pdev) {
 800c4c2:	b480      	push	{r7}
 800c4c4:	b083      	sub	sp, #12
 800c4c6:	af00      	add	r7, sp, #0
 800c4c8:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument compilation warning */
    UNUSED(pdev);

    return USBD_OK;
 800c4ca:	2300      	movs	r3, #0
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	370c      	adds	r7, #12
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr

0800c4d8 <USBD_LL_DevDisconnected>:
 * @brief  USBD_LL_DevDisconnected
 *         Handle device disconnection event
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef * pdev) {
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b084      	sub	sp, #16
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
    USBD_StatusTypeDef ret = USBD_OK;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	73fb      	strb	r3, [r7, #15]

    /* Free Class Resources */
    pdev->dev_state = USBD_STATE_DEFAULT;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
                }
            }
        }
    }
#else
    if (pdev->pClass[0] != NULL) {
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d00e      	beq.n	800c514 <USBD_LL_DevDisconnected+0x3c>
        if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U) {
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	687a      	ldr	r2, [r7, #4]
 800c500:	6852      	ldr	r2, [r2, #4]
 800c502:	b2d2      	uxtb	r2, r2
 800c504:	4611      	mov	r1, r2
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	4798      	blx	r3
 800c50a:	4603      	mov	r3, r0
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d001      	beq.n	800c514 <USBD_LL_DevDisconnected+0x3c>
            ret = USBD_FAIL;
 800c510:	2303      	movs	r3, #3
 800c512:	73fb      	strb	r3, [r7, #15]
        }
    }
#endif /* USE_USBD_COMPOSITE */

    return ret;
 800c514:	7bfb      	ldrb	r3, [r7, #15]
}
 800c516:	4618      	mov	r0, r3
 800c518:	3710      	adds	r7, #16
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}

0800c51e <USBD_CoreFindIF>:
 *         return the class index relative to the selected interface
 * @param  pdev: device instance
 * @param  index : selected interface number
 * @retval index of the class using the selected interface number. OxFF if no class found.
 */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef * pdev, uint8_t index) {
 800c51e:	b480      	push	{r7}
 800c520:	b083      	sub	sp, #12
 800c522:	af00      	add	r7, sp, #0
 800c524:	6078      	str	r0, [r7, #4]
 800c526:	460b      	mov	r3, r1
 800c528:	70fb      	strb	r3, [r7, #3]
    return 0xFFU;
#else
    UNUSED(pdev);
    UNUSED(index);

    return 0x00U;
 800c52a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	370c      	adds	r7, #12
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr

0800c538 <USBD_CoreFindEP>:
 *         return the class index relative to the selected endpoint
 * @param  pdev: device instance
 * @param  index : selected endpoint number
 * @retval index of the class using the selected endpoint number. 0xFF if no class found.
 */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef * pdev, uint8_t index) {
 800c538:	b480      	push	{r7}
 800c53a:	b083      	sub	sp, #12
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	460b      	mov	r3, r1
 800c542:	70fb      	strb	r3, [r7, #3]
    return 0xFFU;
#else
    UNUSED(pdev);
    UNUSED(index);

    return 0x00U;
 800c544:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c546:	4618      	mov	r0, r3
 800c548:	370c      	adds	r7, #12
 800c54a:	46bd      	mov	sp, r7
 800c54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c550:	4770      	bx	lr

0800c552 <USBD_GetEpDesc>:
 * @param  pdev: device instance
 * @param  pConfDesc:  pointer to Bos descriptor
 * @param  EpAddr:  endpoint address
 * @retval pointer to video endpoint descriptor
 */
void * USBD_GetEpDesc(uint8_t * pConfDesc, uint8_t EpAddr) {
 800c552:	b580      	push	{r7, lr}
 800c554:	b086      	sub	sp, #24
 800c556:	af00      	add	r7, sp, #0
 800c558:	6078      	str	r0, [r7, #4]
 800c55a:	460b      	mov	r3, r1
 800c55c:	70fb      	strb	r3, [r7, #3]
    USBD_DescHeaderTypeDef * pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	617b      	str	r3, [r7, #20]
    USBD_ConfigDescTypeDef * desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	60fb      	str	r3, [r7, #12]
    USBD_EpDescTypeDef * pEpDesc = NULL;
 800c566:	2300      	movs	r3, #0
 800c568:	613b      	str	r3, [r7, #16]
    uint16_t ptr;

    if (desc->wTotalLength > desc->bLength) {
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	885b      	ldrh	r3, [r3, #2]
 800c56e:	b29b      	uxth	r3, r3
 800c570:	68fa      	ldr	r2, [r7, #12]
 800c572:	7812      	ldrb	r2, [r2, #0]
 800c574:	4293      	cmp	r3, r2
 800c576:	d91f      	bls.n	800c5b8 <USBD_GetEpDesc+0x66>
        ptr = desc->bLength;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	781b      	ldrb	r3, [r3, #0]
 800c57c:	817b      	strh	r3, [r7, #10]

        while (ptr < desc->wTotalLength) {
 800c57e:	e013      	b.n	800c5a8 <USBD_GetEpDesc+0x56>
            pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c580:	f107 030a 	add.w	r3, r7, #10
 800c584:	4619      	mov	r1, r3
 800c586:	6978      	ldr	r0, [r7, #20]
 800c588:	f000 f81b 	bl	800c5c2 <USBD_GetNextDesc>
 800c58c:	6178      	str	r0, [r7, #20]

            if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT) {
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	785b      	ldrb	r3, [r3, #1]
 800c592:	2b05      	cmp	r3, #5
 800c594:	d108      	bne.n	800c5a8 <USBD_GetEpDesc+0x56>
                pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	613b      	str	r3, [r7, #16]

                if (pEpDesc->bEndpointAddress == EpAddr) {
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	789b      	ldrb	r3, [r3, #2]
 800c59e:	78fa      	ldrb	r2, [r7, #3]
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d008      	beq.n	800c5b6 <USBD_GetEpDesc+0x64>
                    break;
                } else {
                    pEpDesc = NULL;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	613b      	str	r3, [r7, #16]
        while (ptr < desc->wTotalLength) {
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	885b      	ldrh	r3, [r3, #2]
 800c5ac:	b29a      	uxth	r2, r3
 800c5ae:	897b      	ldrh	r3, [r7, #10]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d8e5      	bhi.n	800c580 <USBD_GetEpDesc+0x2e>
 800c5b4:	e000      	b.n	800c5b8 <USBD_GetEpDesc+0x66>
                    break;
 800c5b6:	bf00      	nop
                }
            }
        }
    }

    return (void *)pEpDesc;
 800c5b8:	693b      	ldr	r3, [r7, #16]
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3718      	adds	r7, #24
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}

0800c5c2 <USBD_GetNextDesc>:
 *         This function return the next descriptor header
 * @param  buf: Buffer where the descriptor is available
 * @param  ptr: data pointer inside the descriptor
 * @retval next header
 */
USBD_DescHeaderTypeDef * USBD_GetNextDesc(uint8_t * pbuf, uint16_t * ptr) {
 800c5c2:	b480      	push	{r7}
 800c5c4:	b085      	sub	sp, #20
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	6078      	str	r0, [r7, #4]
 800c5ca:	6039      	str	r1, [r7, #0]
    USBD_DescHeaderTypeDef * pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	60fb      	str	r3, [r7, #12]

    *ptr += pnext->bLength;
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	881b      	ldrh	r3, [r3, #0]
 800c5d4:	68fa      	ldr	r2, [r7, #12]
 800c5d6:	7812      	ldrb	r2, [r2, #0]
 800c5d8:	4413      	add	r3, r2
 800c5da:	b29a      	uxth	r2, r3
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	801a      	strh	r2, [r3, #0]
    pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	4413      	add	r3, r2
 800c5ea:	60fb      	str	r3, [r7, #12]

    return (pnext);
 800c5ec:	68fb      	ldr	r3, [r7, #12]
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3714      	adds	r7, #20
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f8:	4770      	bx	lr

0800c5fa <SWAPBYTE>:
 */

/** @defgroup USBD_DEF_Exported_Macros
 * @{
 */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t * addr) {
 800c5fa:	b480      	push	{r7}
 800c5fc:	b087      	sub	sp, #28
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	6078      	str	r0, [r7, #4]
    uint16_t _SwapVal, _Byte1, _Byte2;
    uint8_t * _pbuff = addr;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	617b      	str	r3, [r7, #20]

    _Byte1 = *(uint8_t *)_pbuff;
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	781b      	ldrb	r3, [r3, #0]
 800c60a:	827b      	strh	r3, [r7, #18]
    _pbuff++;
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	3301      	adds	r3, #1
 800c610:	617b      	str	r3, [r7, #20]
    _Byte2 = *(uint8_t *)_pbuff;
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	781b      	ldrb	r3, [r3, #0]
 800c616:	823b      	strh	r3, [r7, #16]

    _SwapVal = (_Byte2 << 8) | _Byte1;
 800c618:	8a3b      	ldrh	r3, [r7, #16]
 800c61a:	021b      	lsls	r3, r3, #8
 800c61c:	b21a      	sxth	r2, r3
 800c61e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c622:	4313      	orrs	r3, r2
 800c624:	b21b      	sxth	r3, r3
 800c626:	81fb      	strh	r3, [r7, #14]

    return _SwapVal;
 800c628:	89fb      	ldrh	r3, [r7, #14]
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	371c      	adds	r7, #28
 800c62e:	46bd      	mov	sp, r7
 800c630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c634:	4770      	bx	lr
	...

0800c638 <USBD_StdDevReq>:
 *         Handle standard usb device requests
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800c638:	b580      	push	{r7, lr}
 800c63a:	b084      	sub	sp, #16
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6039      	str	r1, [r7, #0]
    USBD_StatusTypeDef ret = USBD_OK;
 800c642:	2300      	movs	r3, #0
 800c644:	73fb      	strb	r3, [r7, #15]

    switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	781b      	ldrb	r3, [r3, #0]
 800c64a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c64e:	2b40      	cmp	r3, #64	@ 0x40
 800c650:	d005      	beq.n	800c65e <USBD_StdDevReq+0x26>
 800c652:	2b40      	cmp	r3, #64	@ 0x40
 800c654:	d857      	bhi.n	800c706 <USBD_StdDevReq+0xce>
 800c656:	2b00      	cmp	r3, #0
 800c658:	d00f      	beq.n	800c67a <USBD_StdDevReq+0x42>
 800c65a:	2b20      	cmp	r3, #32
 800c65c:	d153      	bne.n	800c706 <USBD_StdDevReq+0xce>
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
        ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	32ae      	adds	r2, #174	@ 0xae
 800c668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c66c:	689b      	ldr	r3, [r3, #8]
 800c66e:	6839      	ldr	r1, [r7, #0]
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	4798      	blx	r3
 800c674:	4603      	mov	r3, r0
 800c676:	73fb      	strb	r3, [r7, #15]
        break;
 800c678:	e04a      	b.n	800c710 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
        switch (req->bRequest) {
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	785b      	ldrb	r3, [r3, #1]
 800c67e:	2b09      	cmp	r3, #9
 800c680:	d83b      	bhi.n	800c6fa <USBD_StdDevReq+0xc2>
 800c682:	a201      	add	r2, pc, #4	@ (adr r2, 800c688 <USBD_StdDevReq+0x50>)
 800c684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c688:	0800c6dd 	.word	0x0800c6dd
 800c68c:	0800c6f1 	.word	0x0800c6f1
 800c690:	0800c6fb 	.word	0x0800c6fb
 800c694:	0800c6e7 	.word	0x0800c6e7
 800c698:	0800c6fb 	.word	0x0800c6fb
 800c69c:	0800c6bb 	.word	0x0800c6bb
 800c6a0:	0800c6b1 	.word	0x0800c6b1
 800c6a4:	0800c6fb 	.word	0x0800c6fb
 800c6a8:	0800c6d3 	.word	0x0800c6d3
 800c6ac:	0800c6c5 	.word	0x0800c6c5
        case USB_REQ_GET_DESCRIPTOR:
            USBD_GetDescriptor(pdev, req);
 800c6b0:	6839      	ldr	r1, [r7, #0]
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f000 fa3c 	bl	800cb30 <USBD_GetDescriptor>
            break;
 800c6b8:	e024      	b.n	800c704 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
            USBD_SetAddress(pdev, req);
 800c6ba:	6839      	ldr	r1, [r7, #0]
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f000 fba1 	bl	800ce04 <USBD_SetAddress>
            break;
 800c6c2:	e01f      	b.n	800c704 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
            ret = USBD_SetConfig(pdev, req);
 800c6c4:	6839      	ldr	r1, [r7, #0]
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f000 fbe0 	bl	800ce8c <USBD_SetConfig>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	73fb      	strb	r3, [r7, #15]
            break;
 800c6d0:	e018      	b.n	800c704 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
            USBD_GetConfig(pdev, req);
 800c6d2:	6839      	ldr	r1, [r7, #0]
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f000 fc83 	bl	800cfe0 <USBD_GetConfig>
            break;
 800c6da:	e013      	b.n	800c704 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
            USBD_GetStatus(pdev, req);
 800c6dc:	6839      	ldr	r1, [r7, #0]
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f000 fcb4 	bl	800d04c <USBD_GetStatus>
            break;
 800c6e4:	e00e      	b.n	800c704 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
            USBD_SetFeature(pdev, req);
 800c6e6:	6839      	ldr	r1, [r7, #0]
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f000 fce3 	bl	800d0b4 <USBD_SetFeature>
            break;
 800c6ee:	e009      	b.n	800c704 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
            USBD_ClrFeature(pdev, req);
 800c6f0:	6839      	ldr	r1, [r7, #0]
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f000 fd07 	bl	800d106 <USBD_ClrFeature>
            break;
 800c6f8:	e004      	b.n	800c704 <USBD_StdDevReq+0xcc>

        default:
            USBD_CtlError(pdev, req);
 800c6fa:	6839      	ldr	r1, [r7, #0]
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f000 fd5e 	bl	800d1be <USBD_CtlError>
            break;
 800c702:	bf00      	nop
        }
        break;
 800c704:	e004      	b.n	800c710 <USBD_StdDevReq+0xd8>

    default:
        USBD_CtlError(pdev, req);
 800c706:	6839      	ldr	r1, [r7, #0]
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f000 fd58 	bl	800d1be <USBD_CtlError>
        break;
 800c70e:	bf00      	nop
    }

    return ret;
 800c710:	7bfb      	ldrb	r3, [r7, #15]
}
 800c712:	4618      	mov	r0, r3
 800c714:	3710      	adds	r7, #16
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop

0800c71c <USBD_StdItfReq>:
 *         Handle standard usb interface requests
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b084      	sub	sp, #16
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	6039      	str	r1, [r7, #0]
    USBD_StatusTypeDef ret = USBD_OK;
 800c726:	2300      	movs	r3, #0
 800c728:	73fb      	strb	r3, [r7, #15]
    uint8_t idx;

    switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	781b      	ldrb	r3, [r3, #0]
 800c72e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c732:	2b40      	cmp	r3, #64	@ 0x40
 800c734:	d005      	beq.n	800c742 <USBD_StdItfReq+0x26>
 800c736:	2b40      	cmp	r3, #64	@ 0x40
 800c738:	d852      	bhi.n	800c7e0 <USBD_StdItfReq+0xc4>
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d001      	beq.n	800c742 <USBD_StdItfReq+0x26>
 800c73e:	2b20      	cmp	r3, #32
 800c740:	d14e      	bne.n	800c7e0 <USBD_StdItfReq+0xc4>
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
        switch (pdev->dev_state) {
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c748:	b2db      	uxtb	r3, r3
 800c74a:	3b01      	subs	r3, #1
 800c74c:	2b02      	cmp	r3, #2
 800c74e:	d840      	bhi.n	800c7d2 <USBD_StdItfReq+0xb6>
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

            if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) {
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	889b      	ldrh	r3, [r3, #4]
 800c754:	b2db      	uxtb	r3, r3
 800c756:	2b01      	cmp	r3, #1
 800c758:	d836      	bhi.n	800c7c8 <USBD_StdItfReq+0xac>
                /* Get the class index relative to this interface */
                idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	889b      	ldrh	r3, [r3, #4]
 800c75e:	b2db      	uxtb	r3, r3
 800c760:	4619      	mov	r1, r3
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f7ff fedb 	bl	800c51e <USBD_CoreFindIF>
 800c768:	4603      	mov	r3, r0
 800c76a:	73bb      	strb	r3, [r7, #14]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 800c76c:	7bbb      	ldrb	r3, [r7, #14]
 800c76e:	2bff      	cmp	r3, #255	@ 0xff
 800c770:	d01d      	beq.n	800c7ae <USBD_StdItfReq+0x92>
 800c772:	7bbb      	ldrb	r3, [r7, #14]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d11a      	bne.n	800c7ae <USBD_StdItfReq+0x92>
                    /* Call the class data out function to manage the request */
                    if (pdev->pClass[idx]->Setup != NULL) {
 800c778:	7bba      	ldrb	r2, [r7, #14]
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	32ae      	adds	r2, #174	@ 0xae
 800c77e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c782:	689b      	ldr	r3, [r3, #8]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d00f      	beq.n	800c7a8 <USBD_StdItfReq+0x8c>
                        pdev->classId = idx;
 800c788:	7bba      	ldrb	r2, [r7, #14]
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                        ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c790:	7bba      	ldrb	r2, [r7, #14]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	32ae      	adds	r2, #174	@ 0xae
 800c796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c79a:	689b      	ldr	r3, [r3, #8]
 800c79c:	6839      	ldr	r1, [r7, #0]
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	4798      	blx	r3
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	73fb      	strb	r3, [r7, #15]
                    if (pdev->pClass[idx]->Setup != NULL) {
 800c7a6:	e004      	b.n	800c7b2 <USBD_StdItfReq+0x96>
                    } else {
                        /* should never reach this condition */
                        ret = USBD_FAIL;
 800c7a8:	2303      	movs	r3, #3
 800c7aa:	73fb      	strb	r3, [r7, #15]
                    if (pdev->pClass[idx]->Setup != NULL) {
 800c7ac:	e001      	b.n	800c7b2 <USBD_StdItfReq+0x96>
                    }
                } else {
                    /* No relative interface found */
                    ret = USBD_FAIL;
 800c7ae:	2303      	movs	r3, #3
 800c7b0:	73fb      	strb	r3, [r7, #15]
                }

                if ((req->wLength == 0U) && (ret == USBD_OK)) {
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	88db      	ldrh	r3, [r3, #6]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d110      	bne.n	800c7dc <USBD_StdItfReq+0xc0>
 800c7ba:	7bfb      	ldrb	r3, [r7, #15]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d10d      	bne.n	800c7dc <USBD_StdItfReq+0xc0>
                    (void)USBD_CtlSendStatus(pdev);
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f000 fdc7 	bl	800d354 <USBD_CtlSendStatus>
                }
            } else {
                USBD_CtlError(pdev, req);
            }
            break;
 800c7c6:	e009      	b.n	800c7dc <USBD_StdItfReq+0xc0>
                USBD_CtlError(pdev, req);
 800c7c8:	6839      	ldr	r1, [r7, #0]
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f000 fcf7 	bl	800d1be <USBD_CtlError>
            break;
 800c7d0:	e004      	b.n	800c7dc <USBD_StdItfReq+0xc0>

        default:
            USBD_CtlError(pdev, req);
 800c7d2:	6839      	ldr	r1, [r7, #0]
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f000 fcf2 	bl	800d1be <USBD_CtlError>
            break;
 800c7da:	e000      	b.n	800c7de <USBD_StdItfReq+0xc2>
            break;
 800c7dc:	bf00      	nop
        }
        break;
 800c7de:	e004      	b.n	800c7ea <USBD_StdItfReq+0xce>

    default:
        USBD_CtlError(pdev, req);
 800c7e0:	6839      	ldr	r1, [r7, #0]
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f000 fceb 	bl	800d1be <USBD_CtlError>
        break;
 800c7e8:	bf00      	nop
    }

    return ret;
 800c7ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3710      	adds	r7, #16
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}

0800c7f4 <USBD_StdEPReq>:
 *         Handle standard usb endpoint requests
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b084      	sub	sp, #16
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	6039      	str	r1, [r7, #0]
    USBD_EndpointTypeDef * pep;
    uint8_t ep_addr;
    uint8_t idx;
    USBD_StatusTypeDef ret = USBD_OK;
 800c7fe:	2300      	movs	r3, #0
 800c800:	73fb      	strb	r3, [r7, #15]

    ep_addr = LOBYTE(req->wIndex);
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	889b      	ldrh	r3, [r3, #4]
 800c806:	73bb      	strb	r3, [r7, #14]

    switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c810:	2b40      	cmp	r3, #64	@ 0x40
 800c812:	d007      	beq.n	800c824 <USBD_StdEPReq+0x30>
 800c814:	2b40      	cmp	r3, #64	@ 0x40
 800c816:	f200 817f 	bhi.w	800cb18 <USBD_StdEPReq+0x324>
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d02a      	beq.n	800c874 <USBD_StdEPReq+0x80>
 800c81e:	2b20      	cmp	r3, #32
 800c820:	f040 817a 	bne.w	800cb18 <USBD_StdEPReq+0x324>
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
        /* Get the class index relative to this endpoint */
        idx = USBD_CoreFindEP(pdev, ep_addr);
 800c824:	7bbb      	ldrb	r3, [r7, #14]
 800c826:	4619      	mov	r1, r3
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f7ff fe85 	bl	800c538 <USBD_CoreFindEP>
 800c82e:	4603      	mov	r3, r0
 800c830:	737b      	strb	r3, [r7, #13]
        if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 800c832:	7b7b      	ldrb	r3, [r7, #13]
 800c834:	2bff      	cmp	r3, #255	@ 0xff
 800c836:	f000 8174 	beq.w	800cb22 <USBD_StdEPReq+0x32e>
 800c83a:	7b7b      	ldrb	r3, [r7, #13]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	f040 8170 	bne.w	800cb22 <USBD_StdEPReq+0x32e>
            pdev->classId = idx;
 800c842:	7b7a      	ldrb	r2, [r7, #13]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
            /* Call the class data out function to manage the request */
            if (pdev->pClass[idx]->Setup != NULL) {
 800c84a:	7b7a      	ldrb	r2, [r7, #13]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	32ae      	adds	r2, #174	@ 0xae
 800c850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c854:	689b      	ldr	r3, [r3, #8]
 800c856:	2b00      	cmp	r3, #0
 800c858:	f000 8163 	beq.w	800cb22 <USBD_StdEPReq+0x32e>
                ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c85c:	7b7a      	ldrb	r2, [r7, #13]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	32ae      	adds	r2, #174	@ 0xae
 800c862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c866:	689b      	ldr	r3, [r3, #8]
 800c868:	6839      	ldr	r1, [r7, #0]
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	4798      	blx	r3
 800c86e:	4603      	mov	r3, r0
 800c870:	73fb      	strb	r3, [r7, #15]
            }
        }
        break;
 800c872:	e156      	b.n	800cb22 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
        switch (req->bRequest) {
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	785b      	ldrb	r3, [r3, #1]
 800c878:	2b03      	cmp	r3, #3
 800c87a:	d008      	beq.n	800c88e <USBD_StdEPReq+0x9a>
 800c87c:	2b03      	cmp	r3, #3
 800c87e:	f300 8145 	bgt.w	800cb0c <USBD_StdEPReq+0x318>
 800c882:	2b00      	cmp	r3, #0
 800c884:	f000 809b 	beq.w	800c9be <USBD_StdEPReq+0x1ca>
 800c888:	2b01      	cmp	r3, #1
 800c88a:	d03c      	beq.n	800c906 <USBD_StdEPReq+0x112>
 800c88c:	e13e      	b.n	800cb0c <USBD_StdEPReq+0x318>
        case USB_REQ_SET_FEATURE:
            switch (pdev->dev_state) {
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c894:	b2db      	uxtb	r3, r3
 800c896:	2b02      	cmp	r3, #2
 800c898:	d002      	beq.n	800c8a0 <USBD_StdEPReq+0xac>
 800c89a:	2b03      	cmp	r3, #3
 800c89c:	d016      	beq.n	800c8cc <USBD_StdEPReq+0xd8>
 800c89e:	e02c      	b.n	800c8fa <USBD_StdEPReq+0x106>
            case USBD_STATE_ADDRESSED:
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U)) {
 800c8a0:	7bbb      	ldrb	r3, [r7, #14]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d00d      	beq.n	800c8c2 <USBD_StdEPReq+0xce>
 800c8a6:	7bbb      	ldrb	r3, [r7, #14]
 800c8a8:	2b80      	cmp	r3, #128	@ 0x80
 800c8aa:	d00a      	beq.n	800c8c2 <USBD_StdEPReq+0xce>
                    (void)USBD_LL_StallEP(pdev, ep_addr);
 800c8ac:	7bbb      	ldrb	r3, [r7, #14]
 800c8ae:	4619      	mov	r1, r3
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f003 fdad 	bl	8010410 <USBD_LL_StallEP>
                    (void)USBD_LL_StallEP(pdev, 0x80U);
 800c8b6:	2180      	movs	r1, #128	@ 0x80
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f003 fda9 	bl	8010410 <USBD_LL_StallEP>
 800c8be:	bf00      	nop
                } else {
                    USBD_CtlError(pdev, req);
                }
                break;
 800c8c0:	e020      	b.n	800c904 <USBD_StdEPReq+0x110>
                    USBD_CtlError(pdev, req);
 800c8c2:	6839      	ldr	r1, [r7, #0]
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f000 fc7a 	bl	800d1be <USBD_CtlError>
                break;
 800c8ca:	e01b      	b.n	800c904 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
                if (req->wValue == USB_FEATURE_EP_HALT) {
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	885b      	ldrh	r3, [r3, #2]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d10e      	bne.n	800c8f2 <USBD_StdEPReq+0xfe>
                    if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U)) {
 800c8d4:	7bbb      	ldrb	r3, [r7, #14]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d00b      	beq.n	800c8f2 <USBD_StdEPReq+0xfe>
 800c8da:	7bbb      	ldrb	r3, [r7, #14]
 800c8dc:	2b80      	cmp	r3, #128	@ 0x80
 800c8de:	d008      	beq.n	800c8f2 <USBD_StdEPReq+0xfe>
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	88db      	ldrh	r3, [r3, #6]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d104      	bne.n	800c8f2 <USBD_StdEPReq+0xfe>
                        (void)USBD_LL_StallEP(pdev, ep_addr);
 800c8e8:	7bbb      	ldrb	r3, [r7, #14]
 800c8ea:	4619      	mov	r1, r3
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f003 fd8f 	bl	8010410 <USBD_LL_StallEP>
                    }
                }
                (void)USBD_CtlSendStatus(pdev);
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f000 fd2e 	bl	800d354 <USBD_CtlSendStatus>

                break;
 800c8f8:	e004      	b.n	800c904 <USBD_StdEPReq+0x110>

            default:
                USBD_CtlError(pdev, req);
 800c8fa:	6839      	ldr	r1, [r7, #0]
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f000 fc5e 	bl	800d1be <USBD_CtlError>
                break;
 800c902:	bf00      	nop
            }
            break;
 800c904:	e107      	b.n	800cb16 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

            switch (pdev->dev_state) {
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c90c:	b2db      	uxtb	r3, r3
 800c90e:	2b02      	cmp	r3, #2
 800c910:	d002      	beq.n	800c918 <USBD_StdEPReq+0x124>
 800c912:	2b03      	cmp	r3, #3
 800c914:	d016      	beq.n	800c944 <USBD_StdEPReq+0x150>
 800c916:	e04b      	b.n	800c9b0 <USBD_StdEPReq+0x1bc>
            case USBD_STATE_ADDRESSED:
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U)) {
 800c918:	7bbb      	ldrb	r3, [r7, #14]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d00d      	beq.n	800c93a <USBD_StdEPReq+0x146>
 800c91e:	7bbb      	ldrb	r3, [r7, #14]
 800c920:	2b80      	cmp	r3, #128	@ 0x80
 800c922:	d00a      	beq.n	800c93a <USBD_StdEPReq+0x146>
                    (void)USBD_LL_StallEP(pdev, ep_addr);
 800c924:	7bbb      	ldrb	r3, [r7, #14]
 800c926:	4619      	mov	r1, r3
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f003 fd71 	bl	8010410 <USBD_LL_StallEP>
                    (void)USBD_LL_StallEP(pdev, 0x80U);
 800c92e:	2180      	movs	r1, #128	@ 0x80
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f003 fd6d 	bl	8010410 <USBD_LL_StallEP>
 800c936:	bf00      	nop
                } else {
                    USBD_CtlError(pdev, req);
                }
                break;
 800c938:	e040      	b.n	800c9bc <USBD_StdEPReq+0x1c8>
                    USBD_CtlError(pdev, req);
 800c93a:	6839      	ldr	r1, [r7, #0]
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f000 fc3e 	bl	800d1be <USBD_CtlError>
                break;
 800c942:	e03b      	b.n	800c9bc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
                if (req->wValue == USB_FEATURE_EP_HALT) {
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	885b      	ldrh	r3, [r3, #2]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d136      	bne.n	800c9ba <USBD_StdEPReq+0x1c6>
                    if ((ep_addr & 0x7FU) != 0x00U) {
 800c94c:	7bbb      	ldrb	r3, [r7, #14]
 800c94e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c952:	2b00      	cmp	r3, #0
 800c954:	d004      	beq.n	800c960 <USBD_StdEPReq+0x16c>
                        (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c956:	7bbb      	ldrb	r3, [r7, #14]
 800c958:	4619      	mov	r1, r3
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f003 fd77 	bl	801044e <USBD_LL_ClearStallEP>
                    }
                    (void)USBD_CtlSendStatus(pdev);
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f000 fcf7 	bl	800d354 <USBD_CtlSendStatus>

                    /* Get the class index relative to this interface */
                    idx = USBD_CoreFindEP(pdev, ep_addr);
 800c966:	7bbb      	ldrb	r3, [r7, #14]
 800c968:	4619      	mov	r1, r3
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f7ff fde4 	bl	800c538 <USBD_CoreFindEP>
 800c970:	4603      	mov	r3, r0
 800c972:	737b      	strb	r3, [r7, #13]
                    if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS)) {
 800c974:	7b7b      	ldrb	r3, [r7, #13]
 800c976:	2bff      	cmp	r3, #255	@ 0xff
 800c978:	d01f      	beq.n	800c9ba <USBD_StdEPReq+0x1c6>
 800c97a:	7b7b      	ldrb	r3, [r7, #13]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d11c      	bne.n	800c9ba <USBD_StdEPReq+0x1c6>
                        pdev->classId = idx;
 800c980:	7b7a      	ldrb	r2, [r7, #13]
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                        /* Call the class data out function to manage the request */
                        if (pdev->pClass[idx]->Setup != NULL) {
 800c988:	7b7a      	ldrb	r2, [r7, #13]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	32ae      	adds	r2, #174	@ 0xae
 800c98e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c992:	689b      	ldr	r3, [r3, #8]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d010      	beq.n	800c9ba <USBD_StdEPReq+0x1c6>
                            ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c998:	7b7a      	ldrb	r2, [r7, #13]
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	32ae      	adds	r2, #174	@ 0xae
 800c99e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9a2:	689b      	ldr	r3, [r3, #8]
 800c9a4:	6839      	ldr	r1, [r7, #0]
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	4798      	blx	r3
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	73fb      	strb	r3, [r7, #15]
                        }
                    }
                }
                break;
 800c9ae:	e004      	b.n	800c9ba <USBD_StdEPReq+0x1c6>

            default:
                USBD_CtlError(pdev, req);
 800c9b0:	6839      	ldr	r1, [r7, #0]
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f000 fc03 	bl	800d1be <USBD_CtlError>
                break;
 800c9b8:	e000      	b.n	800c9bc <USBD_StdEPReq+0x1c8>
                break;
 800c9ba:	bf00      	nop
            }
            break;
 800c9bc:	e0ab      	b.n	800cb16 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
            switch (pdev->dev_state) {
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9c4:	b2db      	uxtb	r3, r3
 800c9c6:	2b02      	cmp	r3, #2
 800c9c8:	d002      	beq.n	800c9d0 <USBD_StdEPReq+0x1dc>
 800c9ca:	2b03      	cmp	r3, #3
 800c9cc:	d032      	beq.n	800ca34 <USBD_StdEPReq+0x240>
 800c9ce:	e097      	b.n	800cb00 <USBD_StdEPReq+0x30c>
            case USBD_STATE_ADDRESSED:
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U)) {
 800c9d0:	7bbb      	ldrb	r3, [r7, #14]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d007      	beq.n	800c9e6 <USBD_StdEPReq+0x1f2>
 800c9d6:	7bbb      	ldrb	r3, [r7, #14]
 800c9d8:	2b80      	cmp	r3, #128	@ 0x80
 800c9da:	d004      	beq.n	800c9e6 <USBD_StdEPReq+0x1f2>
                    USBD_CtlError(pdev, req);
 800c9dc:	6839      	ldr	r1, [r7, #0]
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f000 fbed 	bl	800d1be <USBD_CtlError>
                    break;
 800c9e4:	e091      	b.n	800cb0a <USBD_StdEPReq+0x316>
                }
                pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : &pdev->ep_out[ep_addr & 0x7FU];
 800c9e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	da0b      	bge.n	800ca06 <USBD_StdEPReq+0x212>
 800c9ee:	7bbb      	ldrb	r3, [r7, #14]
 800c9f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c9f4:	4613      	mov	r3, r2
 800c9f6:	009b      	lsls	r3, r3, #2
 800c9f8:	4413      	add	r3, r2
 800c9fa:	009b      	lsls	r3, r3, #2
 800c9fc:	3310      	adds	r3, #16
 800c9fe:	687a      	ldr	r2, [r7, #4]
 800ca00:	4413      	add	r3, r2
 800ca02:	3304      	adds	r3, #4
 800ca04:	e00b      	b.n	800ca1e <USBD_StdEPReq+0x22a>
 800ca06:	7bbb      	ldrb	r3, [r7, #14]
 800ca08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ca0c:	4613      	mov	r3, r2
 800ca0e:	009b      	lsls	r3, r3, #2
 800ca10:	4413      	add	r3, r2
 800ca12:	009b      	lsls	r3, r3, #2
 800ca14:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ca18:	687a      	ldr	r2, [r7, #4]
 800ca1a:	4413      	add	r3, r2
 800ca1c:	3304      	adds	r3, #4
 800ca1e:	60bb      	str	r3, [r7, #8]

                pep->status = 0x0000U;
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	2200      	movs	r2, #0
 800ca24:	601a      	str	r2, [r3, #0]

                (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	2202      	movs	r2, #2
 800ca2a:	4619      	mov	r1, r3
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f000 fc37 	bl	800d2a0 <USBD_CtlSendData>
                break;
 800ca32:	e06a      	b.n	800cb0a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
                if ((ep_addr & 0x80U) == 0x80U) {
 800ca34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	da11      	bge.n	800ca60 <USBD_StdEPReq+0x26c>
                    if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U) {
 800ca3c:	7bbb      	ldrb	r3, [r7, #14]
 800ca3e:	f003 020f 	and.w	r2, r3, #15
 800ca42:	6879      	ldr	r1, [r7, #4]
 800ca44:	4613      	mov	r3, r2
 800ca46:	009b      	lsls	r3, r3, #2
 800ca48:	4413      	add	r3, r2
 800ca4a:	009b      	lsls	r3, r3, #2
 800ca4c:	440b      	add	r3, r1
 800ca4e:	3324      	adds	r3, #36	@ 0x24
 800ca50:	881b      	ldrh	r3, [r3, #0]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d117      	bne.n	800ca86 <USBD_StdEPReq+0x292>
                        USBD_CtlError(pdev, req);
 800ca56:	6839      	ldr	r1, [r7, #0]
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f000 fbb0 	bl	800d1be <USBD_CtlError>
                        break;
 800ca5e:	e054      	b.n	800cb0a <USBD_StdEPReq+0x316>
                    }
                } else {
                    if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U) {
 800ca60:	7bbb      	ldrb	r3, [r7, #14]
 800ca62:	f003 020f 	and.w	r2, r3, #15
 800ca66:	6879      	ldr	r1, [r7, #4]
 800ca68:	4613      	mov	r3, r2
 800ca6a:	009b      	lsls	r3, r3, #2
 800ca6c:	4413      	add	r3, r2
 800ca6e:	009b      	lsls	r3, r3, #2
 800ca70:	440b      	add	r3, r1
 800ca72:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ca76:	881b      	ldrh	r3, [r3, #0]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d104      	bne.n	800ca86 <USBD_StdEPReq+0x292>
                        USBD_CtlError(pdev, req);
 800ca7c:	6839      	ldr	r1, [r7, #0]
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f000 fb9d 	bl	800d1be <USBD_CtlError>
                        break;
 800ca84:	e041      	b.n	800cb0a <USBD_StdEPReq+0x316>
                    }
                }

                pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : &pdev->ep_out[ep_addr & 0x7FU];
 800ca86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	da0b      	bge.n	800caa6 <USBD_StdEPReq+0x2b2>
 800ca8e:	7bbb      	ldrb	r3, [r7, #14]
 800ca90:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ca94:	4613      	mov	r3, r2
 800ca96:	009b      	lsls	r3, r3, #2
 800ca98:	4413      	add	r3, r2
 800ca9a:	009b      	lsls	r3, r3, #2
 800ca9c:	3310      	adds	r3, #16
 800ca9e:	687a      	ldr	r2, [r7, #4]
 800caa0:	4413      	add	r3, r2
 800caa2:	3304      	adds	r3, #4
 800caa4:	e00b      	b.n	800cabe <USBD_StdEPReq+0x2ca>
 800caa6:	7bbb      	ldrb	r3, [r7, #14]
 800caa8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800caac:	4613      	mov	r3, r2
 800caae:	009b      	lsls	r3, r3, #2
 800cab0:	4413      	add	r3, r2
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cab8:	687a      	ldr	r2, [r7, #4]
 800caba:	4413      	add	r3, r2
 800cabc:	3304      	adds	r3, #4
 800cabe:	60bb      	str	r3, [r7, #8]

                if ((ep_addr == 0x00U) || (ep_addr == 0x80U)) {
 800cac0:	7bbb      	ldrb	r3, [r7, #14]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d002      	beq.n	800cacc <USBD_StdEPReq+0x2d8>
 800cac6:	7bbb      	ldrb	r3, [r7, #14]
 800cac8:	2b80      	cmp	r3, #128	@ 0x80
 800caca:	d103      	bne.n	800cad4 <USBD_StdEPReq+0x2e0>
                    pep->status = 0x0000U;
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	2200      	movs	r2, #0
 800cad0:	601a      	str	r2, [r3, #0]
 800cad2:	e00e      	b.n	800caf2 <USBD_StdEPReq+0x2fe>
                } else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U) {
 800cad4:	7bbb      	ldrb	r3, [r7, #14]
 800cad6:	4619      	mov	r1, r3
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f003 fcd7 	bl	801048c <USBD_LL_IsStallEP>
 800cade:	4603      	mov	r3, r0
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d003      	beq.n	800caec <USBD_StdEPReq+0x2f8>
                    pep->status = 0x0001U;
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	2201      	movs	r2, #1
 800cae8:	601a      	str	r2, [r3, #0]
 800caea:	e002      	b.n	800caf2 <USBD_StdEPReq+0x2fe>
                } else {
                    pep->status = 0x0000U;
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	2200      	movs	r2, #0
 800caf0:	601a      	str	r2, [r3, #0]
                }

                (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	2202      	movs	r2, #2
 800caf6:	4619      	mov	r1, r3
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f000 fbd1 	bl	800d2a0 <USBD_CtlSendData>
                break;
 800cafe:	e004      	b.n	800cb0a <USBD_StdEPReq+0x316>

            default:
                USBD_CtlError(pdev, req);
 800cb00:	6839      	ldr	r1, [r7, #0]
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f000 fb5b 	bl	800d1be <USBD_CtlError>
                break;
 800cb08:	bf00      	nop
            }
            break;
 800cb0a:	e004      	b.n	800cb16 <USBD_StdEPReq+0x322>

        default:
            USBD_CtlError(pdev, req);
 800cb0c:	6839      	ldr	r1, [r7, #0]
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f000 fb55 	bl	800d1be <USBD_CtlError>
            break;
 800cb14:	bf00      	nop
        }
        break;
 800cb16:	e005      	b.n	800cb24 <USBD_StdEPReq+0x330>

    default:
        USBD_CtlError(pdev, req);
 800cb18:	6839      	ldr	r1, [r7, #0]
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f000 fb4f 	bl	800d1be <USBD_CtlError>
        break;
 800cb20:	e000      	b.n	800cb24 <USBD_StdEPReq+0x330>
        break;
 800cb22:	bf00      	nop
    }

    return ret;
 800cb24:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3710      	adds	r7, #16
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}
	...

0800cb30 <USBD_GetDescriptor>:
 *         Handle Get Descriptor requests
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_GetDescriptor(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b084      	sub	sp, #16
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
 800cb38:	6039      	str	r1, [r7, #0]
    uint16_t len = 0U;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	813b      	strh	r3, [r7, #8]
    uint8_t * pbuf = NULL;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	60fb      	str	r3, [r7, #12]
    uint8_t err = 0U;
 800cb42:	2300      	movs	r3, #0
 800cb44:	72fb      	strb	r3, [r7, #11]

    switch (req->wValue >> 8) {
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	885b      	ldrh	r3, [r3, #2]
 800cb4a:	0a1b      	lsrs	r3, r3, #8
 800cb4c:	b29b      	uxth	r3, r3
 800cb4e:	3b01      	subs	r3, #1
 800cb50:	2b06      	cmp	r3, #6
 800cb52:	f200 8128 	bhi.w	800cda6 <USBD_GetDescriptor+0x276>
 800cb56:	a201      	add	r2, pc, #4	@ (adr r2, 800cb5c <USBD_GetDescriptor+0x2c>)
 800cb58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb5c:	0800cb79 	.word	0x0800cb79
 800cb60:	0800cb91 	.word	0x0800cb91
 800cb64:	0800cbd1 	.word	0x0800cbd1
 800cb68:	0800cda7 	.word	0x0800cda7
 800cb6c:	0800cda7 	.word	0x0800cda7
 800cb70:	0800cd47 	.word	0x0800cd47
 800cb74:	0800cd73 	.word	0x0800cd73
            err++;
        }
        break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
        pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	687a      	ldr	r2, [r7, #4]
 800cb82:	7c12      	ldrb	r2, [r2, #16]
 800cb84:	f107 0108 	add.w	r1, r7, #8
 800cb88:	4610      	mov	r0, r2
 800cb8a:	4798      	blx	r3
 800cb8c:	60f8      	str	r0, [r7, #12]
        break;
 800cb8e:	e112      	b.n	800cdb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
        if (pdev->dev_speed == USBD_SPEED_HIGH) {
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	7c1b      	ldrb	r3, [r3, #16]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d10d      	bne.n	800cbb4 <USBD_GetDescriptor+0x84>
            if ((uint8_t)(pdev->NumClasses) > 0U) {
                pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
            } else
#endif /* USE_USBD_COMPOSITE */
            {
                pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cba0:	f107 0208 	add.w	r2, r7, #8
 800cba4:	4610      	mov	r0, r2
 800cba6:	4798      	blx	r3
 800cba8:	60f8      	str	r0, [r7, #12]
            }
            pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	3301      	adds	r3, #1
 800cbae:	2202      	movs	r2, #2
 800cbb0:	701a      	strb	r2, [r3, #0]
            {
                pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
            }
            pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
        }
        break;
 800cbb2:	e100      	b.n	800cdb6 <USBD_GetDescriptor+0x286>
                pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbbc:	f107 0208 	add.w	r2, r7, #8
 800cbc0:	4610      	mov	r0, r2
 800cbc2:	4798      	blx	r3
 800cbc4:	60f8      	str	r0, [r7, #12]
            pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	3301      	adds	r3, #1
 800cbca:	2202      	movs	r2, #2
 800cbcc:	701a      	strb	r2, [r3, #0]
        break;
 800cbce:	e0f2      	b.n	800cdb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
        switch ((uint8_t)(req->wValue)) {
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	885b      	ldrh	r3, [r3, #2]
 800cbd4:	b2db      	uxtb	r3, r3
 800cbd6:	2b05      	cmp	r3, #5
 800cbd8:	f200 80ac 	bhi.w	800cd34 <USBD_GetDescriptor+0x204>
 800cbdc:	a201      	add	r2, pc, #4	@ (adr r2, 800cbe4 <USBD_GetDescriptor+0xb4>)
 800cbde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbe2:	bf00      	nop
 800cbe4:	0800cbfd 	.word	0x0800cbfd
 800cbe8:	0800cc31 	.word	0x0800cc31
 800cbec:	0800cc65 	.word	0x0800cc65
 800cbf0:	0800cc99 	.word	0x0800cc99
 800cbf4:	0800cccd 	.word	0x0800cccd
 800cbf8:	0800cd01 	.word	0x0800cd01
        case USBD_IDX_LANGID_STR:
            if (pdev->pDesc->GetLangIDStrDescriptor != NULL) {
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc02:	685b      	ldr	r3, [r3, #4]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d00b      	beq.n	800cc20 <USBD_GetDescriptor+0xf0>
                pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc0e:	685b      	ldr	r3, [r3, #4]
 800cc10:	687a      	ldr	r2, [r7, #4]
 800cc12:	7c12      	ldrb	r2, [r2, #16]
 800cc14:	f107 0108 	add.w	r1, r7, #8
 800cc18:	4610      	mov	r0, r2
 800cc1a:	4798      	blx	r3
 800cc1c:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 800cc1e:	e091      	b.n	800cd44 <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 800cc20:	6839      	ldr	r1, [r7, #0]
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f000 facb 	bl	800d1be <USBD_CtlError>
                err++;
 800cc28:	7afb      	ldrb	r3, [r7, #11]
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	72fb      	strb	r3, [r7, #11]
            break;
 800cc2e:	e089      	b.n	800cd44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
            if (pdev->pDesc->GetManufacturerStrDescriptor != NULL) {
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc36:	689b      	ldr	r3, [r3, #8]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d00b      	beq.n	800cc54 <USBD_GetDescriptor+0x124>
                pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc42:	689b      	ldr	r3, [r3, #8]
 800cc44:	687a      	ldr	r2, [r7, #4]
 800cc46:	7c12      	ldrb	r2, [r2, #16]
 800cc48:	f107 0108 	add.w	r1, r7, #8
 800cc4c:	4610      	mov	r0, r2
 800cc4e:	4798      	blx	r3
 800cc50:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 800cc52:	e077      	b.n	800cd44 <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 800cc54:	6839      	ldr	r1, [r7, #0]
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f000 fab1 	bl	800d1be <USBD_CtlError>
                err++;
 800cc5c:	7afb      	ldrb	r3, [r7, #11]
 800cc5e:	3301      	adds	r3, #1
 800cc60:	72fb      	strb	r3, [r7, #11]
            break;
 800cc62:	e06f      	b.n	800cd44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
            if (pdev->pDesc->GetProductStrDescriptor != NULL) {
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc6a:	68db      	ldr	r3, [r3, #12]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d00b      	beq.n	800cc88 <USBD_GetDescriptor+0x158>
                pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc76:	68db      	ldr	r3, [r3, #12]
 800cc78:	687a      	ldr	r2, [r7, #4]
 800cc7a:	7c12      	ldrb	r2, [r2, #16]
 800cc7c:	f107 0108 	add.w	r1, r7, #8
 800cc80:	4610      	mov	r0, r2
 800cc82:	4798      	blx	r3
 800cc84:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 800cc86:	e05d      	b.n	800cd44 <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 800cc88:	6839      	ldr	r1, [r7, #0]
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f000 fa97 	bl	800d1be <USBD_CtlError>
                err++;
 800cc90:	7afb      	ldrb	r3, [r7, #11]
 800cc92:	3301      	adds	r3, #1
 800cc94:	72fb      	strb	r3, [r7, #11]
            break;
 800cc96:	e055      	b.n	800cd44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
            if (pdev->pDesc->GetSerialStrDescriptor != NULL) {
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc9e:	691b      	ldr	r3, [r3, #16]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d00b      	beq.n	800ccbc <USBD_GetDescriptor+0x18c>
                pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ccaa:	691b      	ldr	r3, [r3, #16]
 800ccac:	687a      	ldr	r2, [r7, #4]
 800ccae:	7c12      	ldrb	r2, [r2, #16]
 800ccb0:	f107 0108 	add.w	r1, r7, #8
 800ccb4:	4610      	mov	r0, r2
 800ccb6:	4798      	blx	r3
 800ccb8:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 800ccba:	e043      	b.n	800cd44 <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 800ccbc:	6839      	ldr	r1, [r7, #0]
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f000 fa7d 	bl	800d1be <USBD_CtlError>
                err++;
 800ccc4:	7afb      	ldrb	r3, [r7, #11]
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	72fb      	strb	r3, [r7, #11]
            break;
 800ccca:	e03b      	b.n	800cd44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
            if (pdev->pDesc->GetConfigurationStrDescriptor != NULL) {
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ccd2:	695b      	ldr	r3, [r3, #20]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d00b      	beq.n	800ccf0 <USBD_GetDescriptor+0x1c0>
                pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ccde:	695b      	ldr	r3, [r3, #20]
 800cce0:	687a      	ldr	r2, [r7, #4]
 800cce2:	7c12      	ldrb	r2, [r2, #16]
 800cce4:	f107 0108 	add.w	r1, r7, #8
 800cce8:	4610      	mov	r0, r2
 800ccea:	4798      	blx	r3
 800ccec:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 800ccee:	e029      	b.n	800cd44 <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 800ccf0:	6839      	ldr	r1, [r7, #0]
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f000 fa63 	bl	800d1be <USBD_CtlError>
                err++;
 800ccf8:	7afb      	ldrb	r3, [r7, #11]
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	72fb      	strb	r3, [r7, #11]
            break;
 800ccfe:	e021      	b.n	800cd44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
            if (pdev->pDesc->GetInterfaceStrDescriptor != NULL) {
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd06:	699b      	ldr	r3, [r3, #24]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d00b      	beq.n	800cd24 <USBD_GetDescriptor+0x1f4>
                pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd12:	699b      	ldr	r3, [r3, #24]
 800cd14:	687a      	ldr	r2, [r7, #4]
 800cd16:	7c12      	ldrb	r2, [r2, #16]
 800cd18:	f107 0108 	add.w	r1, r7, #8
 800cd1c:	4610      	mov	r0, r2
 800cd1e:	4798      	blx	r3
 800cd20:	60f8      	str	r0, [r7, #12]
            } else {
                USBD_CtlError(pdev, req);
                err++;
            }
            break;
 800cd22:	e00f      	b.n	800cd44 <USBD_GetDescriptor+0x214>
                USBD_CtlError(pdev, req);
 800cd24:	6839      	ldr	r1, [r7, #0]
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	f000 fa49 	bl	800d1be <USBD_CtlError>
                err++;
 800cd2c:	7afb      	ldrb	r3, [r7, #11]
 800cd2e:	3301      	adds	r3, #1
 800cd30:	72fb      	strb	r3, [r7, #11]
            break;
 800cd32:	e007      	b.n	800cd44 <USBD_GetDescriptor+0x214>
                err++;
            }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
            USBD_CtlError(pdev, req);
 800cd34:	6839      	ldr	r1, [r7, #0]
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f000 fa41 	bl	800d1be <USBD_CtlError>
            err++;
 800cd3c:	7afb      	ldrb	r3, [r7, #11]
 800cd3e:	3301      	adds	r3, #1
 800cd40:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
            break;
 800cd42:	bf00      	nop
        }
        break;
 800cd44:	e037      	b.n	800cdb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
        if (pdev->dev_speed == USBD_SPEED_HIGH) {
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	7c1b      	ldrb	r3, [r3, #16]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d109      	bne.n	800cd62 <USBD_GetDescriptor+0x232>
            if ((uint8_t)(pdev->NumClasses) > 0U) {
                pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
            } else
#endif /* USE_USBD_COMPOSITE */
            {
                pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd56:	f107 0208 	add.w	r2, r7, #8
 800cd5a:	4610      	mov	r0, r2
 800cd5c:	4798      	blx	r3
 800cd5e:	60f8      	str	r0, [r7, #12]
            }
        } else {
            USBD_CtlError(pdev, req);
            err++;
        }
        break;
 800cd60:	e029      	b.n	800cdb6 <USBD_GetDescriptor+0x286>
            USBD_CtlError(pdev, req);
 800cd62:	6839      	ldr	r1, [r7, #0]
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f000 fa2a 	bl	800d1be <USBD_CtlError>
            err++;
 800cd6a:	7afb      	ldrb	r3, [r7, #11]
 800cd6c:	3301      	adds	r3, #1
 800cd6e:	72fb      	strb	r3, [r7, #11]
        break;
 800cd70:	e021      	b.n	800cdb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
        if (pdev->dev_speed == USBD_SPEED_HIGH) {
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	7c1b      	ldrb	r3, [r3, #16]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d10d      	bne.n	800cd96 <USBD_GetDescriptor+0x266>
            if ((uint8_t)(pdev->NumClasses) > 0U) {
                pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
            } else
#endif /* USE_USBD_COMPOSITE */
            {
                pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd82:	f107 0208 	add.w	r2, r7, #8
 800cd86:	4610      	mov	r0, r2
 800cd88:	4798      	blx	r3
 800cd8a:	60f8      	str	r0, [r7, #12]
            }
            pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	3301      	adds	r3, #1
 800cd90:	2207      	movs	r2, #7
 800cd92:	701a      	strb	r2, [r3, #0]
        } else {
            USBD_CtlError(pdev, req);
            err++;
        }
        break;
 800cd94:	e00f      	b.n	800cdb6 <USBD_GetDescriptor+0x286>
            USBD_CtlError(pdev, req);
 800cd96:	6839      	ldr	r1, [r7, #0]
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f000 fa10 	bl	800d1be <USBD_CtlError>
            err++;
 800cd9e:	7afb      	ldrb	r3, [r7, #11]
 800cda0:	3301      	adds	r3, #1
 800cda2:	72fb      	strb	r3, [r7, #11]
        break;
 800cda4:	e007      	b.n	800cdb6 <USBD_GetDescriptor+0x286>

    default:
        USBD_CtlError(pdev, req);
 800cda6:	6839      	ldr	r1, [r7, #0]
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f000 fa08 	bl	800d1be <USBD_CtlError>
        err++;
 800cdae:	7afb      	ldrb	r3, [r7, #11]
 800cdb0:	3301      	adds	r3, #1
 800cdb2:	72fb      	strb	r3, [r7, #11]
        break;
 800cdb4:	bf00      	nop
    }

    if (err != 0U) {
 800cdb6:	7afb      	ldrb	r3, [r7, #11]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d11e      	bne.n	800cdfa <USBD_GetDescriptor+0x2ca>
        return;
    }

    if (req->wLength != 0U) {
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	88db      	ldrh	r3, [r3, #6]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d016      	beq.n	800cdf2 <USBD_GetDescriptor+0x2c2>
        if (len != 0U) {
 800cdc4:	893b      	ldrh	r3, [r7, #8]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d00e      	beq.n	800cde8 <USBD_GetDescriptor+0x2b8>
            len = MIN(len, req->wLength);
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	88da      	ldrh	r2, [r3, #6]
 800cdce:	893b      	ldrh	r3, [r7, #8]
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	bf28      	it	cs
 800cdd4:	4613      	movcs	r3, r2
 800cdd6:	b29b      	uxth	r3, r3
 800cdd8:	813b      	strh	r3, [r7, #8]
            (void)USBD_CtlSendData(pdev, pbuf, len);
 800cdda:	893b      	ldrh	r3, [r7, #8]
 800cddc:	461a      	mov	r2, r3
 800cdde:	68f9      	ldr	r1, [r7, #12]
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f000 fa5d 	bl	800d2a0 <USBD_CtlSendData>
 800cde6:	e009      	b.n	800cdfc <USBD_GetDescriptor+0x2cc>
        } else {
            USBD_CtlError(pdev, req);
 800cde8:	6839      	ldr	r1, [r7, #0]
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f000 f9e7 	bl	800d1be <USBD_CtlError>
 800cdf0:	e004      	b.n	800cdfc <USBD_GetDescriptor+0x2cc>
        }
    } else {
        (void)USBD_CtlSendStatus(pdev);
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f000 faae 	bl	800d354 <USBD_CtlSendStatus>
 800cdf8:	e000      	b.n	800cdfc <USBD_GetDescriptor+0x2cc>
        return;
 800cdfa:	bf00      	nop
    }
}
 800cdfc:	3710      	adds	r7, #16
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
 800ce02:	bf00      	nop

0800ce04 <USBD_SetAddress>:
 *         Set device address
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_SetAddress(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b084      	sub	sp, #16
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	6039      	str	r1, [r7, #0]
    uint8_t dev_addr;

    if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U)) {
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	889b      	ldrh	r3, [r3, #4]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d131      	bne.n	800ce7a <USBD_SetAddress+0x76>
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	88db      	ldrh	r3, [r3, #6]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d12d      	bne.n	800ce7a <USBD_SetAddress+0x76>
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	885b      	ldrh	r3, [r3, #2]
 800ce22:	2b7f      	cmp	r3, #127	@ 0x7f
 800ce24:	d829      	bhi.n	800ce7a <USBD_SetAddress+0x76>
        dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	885b      	ldrh	r3, [r3, #2]
 800ce2a:	b2db      	uxtb	r3, r3
 800ce2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce30:	73fb      	strb	r3, [r7, #15]

        if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce38:	b2db      	uxtb	r3, r3
 800ce3a:	2b03      	cmp	r3, #3
 800ce3c:	d104      	bne.n	800ce48 <USBD_SetAddress+0x44>
            USBD_CtlError(pdev, req);
 800ce3e:	6839      	ldr	r1, [r7, #0]
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f000 f9bc 	bl	800d1be <USBD_CtlError>
        if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800ce46:	e01d      	b.n	800ce84 <USBD_SetAddress+0x80>
        } else {
            pdev->dev_address = dev_addr;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	7bfa      	ldrb	r2, [r7, #15]
 800ce4c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
            (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ce50:	7bfb      	ldrb	r3, [r7, #15]
 800ce52:	4619      	mov	r1, r3
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f003 fb45 	bl	80104e4 <USBD_LL_SetUSBAddress>
            (void)USBD_CtlSendStatus(pdev);
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f000 fa7a 	bl	800d354 <USBD_CtlSendStatus>

            if (dev_addr != 0U) {
 800ce60:	7bfb      	ldrb	r3, [r7, #15]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d004      	beq.n	800ce70 <USBD_SetAddress+0x6c>
                pdev->dev_state = USBD_STATE_ADDRESSED;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2202      	movs	r2, #2
 800ce6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800ce6e:	e009      	b.n	800ce84 <USBD_SetAddress+0x80>
            } else {
                pdev->dev_state = USBD_STATE_DEFAULT;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2201      	movs	r2, #1
 800ce74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800ce78:	e004      	b.n	800ce84 <USBD_SetAddress+0x80>
            }
        }
    } else {
        USBD_CtlError(pdev, req);
 800ce7a:	6839      	ldr	r1, [r7, #0]
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f000 f99e 	bl	800d1be <USBD_CtlError>
    }
}
 800ce82:	bf00      	nop
 800ce84:	bf00      	nop
 800ce86:	3710      	adds	r7, #16
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}

0800ce8c <USBD_SetConfig>:
 *         Handle Set device configuration request
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	6039      	str	r1, [r7, #0]
    USBD_StatusTypeDef ret = USBD_OK;
 800ce96:	2300      	movs	r3, #0
 800ce98:	73fb      	strb	r3, [r7, #15]
    static uint8_t cfgidx;

    cfgidx = (uint8_t)(req->wValue);
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	885b      	ldrh	r3, [r3, #2]
 800ce9e:	b2da      	uxtb	r2, r3
 800cea0:	4b4e      	ldr	r3, [pc, #312]	@ (800cfdc <USBD_SetConfig+0x150>)
 800cea2:	701a      	strb	r2, [r3, #0]

    if (cfgidx > USBD_MAX_NUM_CONFIGURATION) {
 800cea4:	4b4d      	ldr	r3, [pc, #308]	@ (800cfdc <USBD_SetConfig+0x150>)
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	2b01      	cmp	r3, #1
 800ceaa:	d905      	bls.n	800ceb8 <USBD_SetConfig+0x2c>
        USBD_CtlError(pdev, req);
 800ceac:	6839      	ldr	r1, [r7, #0]
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f000 f985 	bl	800d1be <USBD_CtlError>
        return USBD_FAIL;
 800ceb4:	2303      	movs	r3, #3
 800ceb6:	e08c      	b.n	800cfd2 <USBD_SetConfig+0x146>
    }

    switch (pdev->dev_state) {
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cebe:	b2db      	uxtb	r3, r3
 800cec0:	2b02      	cmp	r3, #2
 800cec2:	d002      	beq.n	800ceca <USBD_SetConfig+0x3e>
 800cec4:	2b03      	cmp	r3, #3
 800cec6:	d029      	beq.n	800cf1c <USBD_SetConfig+0x90>
 800cec8:	e075      	b.n	800cfb6 <USBD_SetConfig+0x12a>
    case USBD_STATE_ADDRESSED:
        if (cfgidx != 0U) {
 800ceca:	4b44      	ldr	r3, [pc, #272]	@ (800cfdc <USBD_SetConfig+0x150>)
 800cecc:	781b      	ldrb	r3, [r3, #0]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d020      	beq.n	800cf14 <USBD_SetConfig+0x88>
            pdev->dev_config = cfgidx;
 800ced2:	4b42      	ldr	r3, [pc, #264]	@ (800cfdc <USBD_SetConfig+0x150>)
 800ced4:	781b      	ldrb	r3, [r3, #0]
 800ced6:	461a      	mov	r2, r3
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	605a      	str	r2, [r3, #4]

            ret = USBD_SetClassConfig(pdev, cfgidx);
 800cedc:	4b3f      	ldr	r3, [pc, #252]	@ (800cfdc <USBD_SetConfig+0x150>)
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	4619      	mov	r1, r3
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f7fe ffe9 	bl	800beba <USBD_SetClassConfig>
 800cee8:	4603      	mov	r3, r0
 800ceea:	73fb      	strb	r3, [r7, #15]

            if (ret != USBD_OK) {
 800ceec:	7bfb      	ldrb	r3, [r7, #15]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d008      	beq.n	800cf04 <USBD_SetConfig+0x78>
                USBD_CtlError(pdev, req);
 800cef2:	6839      	ldr	r1, [r7, #0]
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f000 f962 	bl	800d1be <USBD_CtlError>
                pdev->dev_state = USBD_STATE_ADDRESSED;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2202      	movs	r2, #2
 800cefe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
                pdev->dev_state = USBD_STATE_CONFIGURED;
            }
        } else {
            (void)USBD_CtlSendStatus(pdev);
        }
        break;
 800cf02:	e065      	b.n	800cfd0 <USBD_SetConfig+0x144>
                (void)USBD_CtlSendStatus(pdev);
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f000 fa25 	bl	800d354 <USBD_CtlSendStatus>
                pdev->dev_state = USBD_STATE_CONFIGURED;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2203      	movs	r2, #3
 800cf0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        break;
 800cf12:	e05d      	b.n	800cfd0 <USBD_SetConfig+0x144>
            (void)USBD_CtlSendStatus(pdev);
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f000 fa1d 	bl	800d354 <USBD_CtlSendStatus>
        break;
 800cf1a:	e059      	b.n	800cfd0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U) {
 800cf1c:	4b2f      	ldr	r3, [pc, #188]	@ (800cfdc <USBD_SetConfig+0x150>)
 800cf1e:	781b      	ldrb	r3, [r3, #0]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d112      	bne.n	800cf4a <USBD_SetConfig+0xbe>
            pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2202      	movs	r2, #2
 800cf28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
            pdev->dev_config = cfgidx;
 800cf2c:	4b2b      	ldr	r3, [pc, #172]	@ (800cfdc <USBD_SetConfig+0x150>)
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	461a      	mov	r2, r3
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	605a      	str	r2, [r3, #4]
            (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cf36:	4b29      	ldr	r3, [pc, #164]	@ (800cfdc <USBD_SetConfig+0x150>)
 800cf38:	781b      	ldrb	r3, [r3, #0]
 800cf3a:	4619      	mov	r1, r3
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f7fe ffd8 	bl	800bef2 <USBD_ClrClassConfig>
            (void)USBD_CtlSendStatus(pdev);
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f000 fa06 	bl	800d354 <USBD_CtlSendStatus>
                (void)USBD_CtlSendStatus(pdev);
            }
        } else {
            (void)USBD_CtlSendStatus(pdev);
        }
        break;
 800cf48:	e042      	b.n	800cfd0 <USBD_SetConfig+0x144>
        } else if (cfgidx != pdev->dev_config) {
 800cf4a:	4b24      	ldr	r3, [pc, #144]	@ (800cfdc <USBD_SetConfig+0x150>)
 800cf4c:	781b      	ldrb	r3, [r3, #0]
 800cf4e:	461a      	mov	r2, r3
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	685b      	ldr	r3, [r3, #4]
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d02a      	beq.n	800cfae <USBD_SetConfig+0x122>
            (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	b2db      	uxtb	r3, r3
 800cf5e:	4619      	mov	r1, r3
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f7fe ffc6 	bl	800bef2 <USBD_ClrClassConfig>
            pdev->dev_config = cfgidx;
 800cf66:	4b1d      	ldr	r3, [pc, #116]	@ (800cfdc <USBD_SetConfig+0x150>)
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	461a      	mov	r2, r3
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	605a      	str	r2, [r3, #4]
            ret = USBD_SetClassConfig(pdev, cfgidx);
 800cf70:	4b1a      	ldr	r3, [pc, #104]	@ (800cfdc <USBD_SetConfig+0x150>)
 800cf72:	781b      	ldrb	r3, [r3, #0]
 800cf74:	4619      	mov	r1, r3
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f7fe ff9f 	bl	800beba <USBD_SetClassConfig>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	73fb      	strb	r3, [r7, #15]
            if (ret != USBD_OK) {
 800cf80:	7bfb      	ldrb	r3, [r7, #15]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d00f      	beq.n	800cfa6 <USBD_SetConfig+0x11a>
                USBD_CtlError(pdev, req);
 800cf86:	6839      	ldr	r1, [r7, #0]
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f000 f918 	bl	800d1be <USBD_CtlError>
                (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	685b      	ldr	r3, [r3, #4]
 800cf92:	b2db      	uxtb	r3, r3
 800cf94:	4619      	mov	r1, r3
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f7fe ffab 	bl	800bef2 <USBD_ClrClassConfig>
                pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2202      	movs	r2, #2
 800cfa0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        break;
 800cfa4:	e014      	b.n	800cfd0 <USBD_SetConfig+0x144>
                (void)USBD_CtlSendStatus(pdev);
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f000 f9d4 	bl	800d354 <USBD_CtlSendStatus>
        break;
 800cfac:	e010      	b.n	800cfd0 <USBD_SetConfig+0x144>
            (void)USBD_CtlSendStatus(pdev);
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f000 f9d0 	bl	800d354 <USBD_CtlSendStatus>
        break;
 800cfb4:	e00c      	b.n	800cfd0 <USBD_SetConfig+0x144>

    default:
        USBD_CtlError(pdev, req);
 800cfb6:	6839      	ldr	r1, [r7, #0]
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f000 f900 	bl	800d1be <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cfbe:	4b07      	ldr	r3, [pc, #28]	@ (800cfdc <USBD_SetConfig+0x150>)
 800cfc0:	781b      	ldrb	r3, [r3, #0]
 800cfc2:	4619      	mov	r1, r3
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f7fe ff94 	bl	800bef2 <USBD_ClrClassConfig>
        ret = USBD_FAIL;
 800cfca:	2303      	movs	r3, #3
 800cfcc:	73fb      	strb	r3, [r7, #15]
        break;
 800cfce:	bf00      	nop
    }

    return ret;
 800cfd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3710      	adds	r7, #16
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}
 800cfda:	bf00      	nop
 800cfdc:	20000d70 	.word	0x20000d70

0800cfe0 <USBD_GetConfig>:
 *         Handle Get device configuration request
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_GetConfig(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b082      	sub	sp, #8
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	6039      	str	r1, [r7, #0]
    if (req->wLength != 1U) {
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	88db      	ldrh	r3, [r3, #6]
 800cfee:	2b01      	cmp	r3, #1
 800cff0:	d004      	beq.n	800cffc <USBD_GetConfig+0x1c>
        USBD_CtlError(pdev, req);
 800cff2:	6839      	ldr	r1, [r7, #0]
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f000 f8e2 	bl	800d1be <USBD_CtlError>
        default:
            USBD_CtlError(pdev, req);
            break;
        }
    }
}
 800cffa:	e023      	b.n	800d044 <USBD_GetConfig+0x64>
        switch (pdev->dev_state) {
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d002:	b2db      	uxtb	r3, r3
 800d004:	2b02      	cmp	r3, #2
 800d006:	dc02      	bgt.n	800d00e <USBD_GetConfig+0x2e>
 800d008:	2b00      	cmp	r3, #0
 800d00a:	dc03      	bgt.n	800d014 <USBD_GetConfig+0x34>
 800d00c:	e015      	b.n	800d03a <USBD_GetConfig+0x5a>
 800d00e:	2b03      	cmp	r3, #3
 800d010:	d00b      	beq.n	800d02a <USBD_GetConfig+0x4a>
 800d012:	e012      	b.n	800d03a <USBD_GetConfig+0x5a>
            pdev->dev_default_config = 0U;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2200      	movs	r2, #0
 800d018:	609a      	str	r2, [r3, #8]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	3308      	adds	r3, #8
 800d01e:	2201      	movs	r2, #1
 800d020:	4619      	mov	r1, r3
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f000 f93c 	bl	800d2a0 <USBD_CtlSendData>
            break;
 800d028:	e00c      	b.n	800d044 <USBD_GetConfig+0x64>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	3304      	adds	r3, #4
 800d02e:	2201      	movs	r2, #1
 800d030:	4619      	mov	r1, r3
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f000 f934 	bl	800d2a0 <USBD_CtlSendData>
            break;
 800d038:	e004      	b.n	800d044 <USBD_GetConfig+0x64>
            USBD_CtlError(pdev, req);
 800d03a:	6839      	ldr	r1, [r7, #0]
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f000 f8be 	bl	800d1be <USBD_CtlError>
            break;
 800d042:	bf00      	nop
}
 800d044:	bf00      	nop
 800d046:	3708      	adds	r7, #8
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}

0800d04c <USBD_GetStatus>:
 *         Handle Get Status request
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_GetStatus(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b082      	sub	sp, #8
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
 800d054:	6039      	str	r1, [r7, #0]
    switch (pdev->dev_state) {
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d05c:	b2db      	uxtb	r3, r3
 800d05e:	3b01      	subs	r3, #1
 800d060:	2b02      	cmp	r3, #2
 800d062:	d81e      	bhi.n	800d0a2 <USBD_GetStatus+0x56>
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
        if (req->wLength != 0x2U) {
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	88db      	ldrh	r3, [r3, #6]
 800d068:	2b02      	cmp	r3, #2
 800d06a:	d004      	beq.n	800d076 <USBD_GetStatus+0x2a>
            USBD_CtlError(pdev, req);
 800d06c:	6839      	ldr	r1, [r7, #0]
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f000 f8a5 	bl	800d1be <USBD_CtlError>
            break;
 800d074:	e01a      	b.n	800d0ac <USBD_GetStatus+0x60>
        }

#if (USBD_SELF_POWERED == 1U)
        pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2201      	movs	r2, #1
 800d07a:	60da      	str	r2, [r3, #12]
#else
        pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

        if (pdev->dev_remote_wakeup != 0U) {
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d082:	2b00      	cmp	r3, #0
 800d084:	d005      	beq.n	800d092 <USBD_GetStatus+0x46>
            pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	68db      	ldr	r3, [r3, #12]
 800d08a:	f043 0202 	orr.w	r2, r3, #2
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	60da      	str	r2, [r3, #12]
        }

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	330c      	adds	r3, #12
 800d096:	2202      	movs	r2, #2
 800d098:	4619      	mov	r1, r3
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f000 f900 	bl	800d2a0 <USBD_CtlSendData>
        break;
 800d0a0:	e004      	b.n	800d0ac <USBD_GetStatus+0x60>

    default:
        USBD_CtlError(pdev, req);
 800d0a2:	6839      	ldr	r1, [r7, #0]
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f000 f88a 	bl	800d1be <USBD_CtlError>
        break;
 800d0aa:	bf00      	nop
    }
}
 800d0ac:	bf00      	nop
 800d0ae:	3708      	adds	r7, #8
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}

0800d0b4 <USBD_SetFeature>:
 *         Handle Set device feature request
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_SetFeature(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b082      	sub	sp, #8
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	6039      	str	r1, [r7, #0]
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) {
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	885b      	ldrh	r3, [r3, #2]
 800d0c2:	2b01      	cmp	r3, #1
 800d0c4:	d107      	bne.n	800d0d6 <USBD_SetFeature+0x22>
        pdev->dev_remote_wakeup = 1U;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2201      	movs	r2, #1
 800d0ca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f000 f940 	bl	800d354 <USBD_CtlSendStatus>
        pdev->dev_test_mode = req->wIndex >> 8;
        (void)USBD_CtlSendStatus(pdev);
    } else {
        USBD_CtlError(pdev, req);
    }
}
 800d0d4:	e013      	b.n	800d0fe <USBD_SetFeature+0x4a>
    } else if (req->wValue == USB_FEATURE_TEST_MODE) {
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	885b      	ldrh	r3, [r3, #2]
 800d0da:	2b02      	cmp	r3, #2
 800d0dc:	d10b      	bne.n	800d0f6 <USBD_SetFeature+0x42>
        pdev->dev_test_mode = req->wIndex >> 8;
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	889b      	ldrh	r3, [r3, #4]
 800d0e2:	0a1b      	lsrs	r3, r3, #8
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	b2da      	uxtb	r2, r3
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
        (void)USBD_CtlSendStatus(pdev);
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f000 f930 	bl	800d354 <USBD_CtlSendStatus>
}
 800d0f4:	e003      	b.n	800d0fe <USBD_SetFeature+0x4a>
        USBD_CtlError(pdev, req);
 800d0f6:	6839      	ldr	r1, [r7, #0]
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f000 f860 	bl	800d1be <USBD_CtlError>
}
 800d0fe:	bf00      	nop
 800d100:	3708      	adds	r7, #8
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}

0800d106 <USBD_ClrFeature>:
 *         Handle clear device feature request
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_ClrFeature(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800d106:	b580      	push	{r7, lr}
 800d108:	b082      	sub	sp, #8
 800d10a:	af00      	add	r7, sp, #0
 800d10c:	6078      	str	r0, [r7, #4]
 800d10e:	6039      	str	r1, [r7, #0]
    switch (pdev->dev_state) {
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d116:	b2db      	uxtb	r3, r3
 800d118:	3b01      	subs	r3, #1
 800d11a:	2b02      	cmp	r3, #2
 800d11c:	d80b      	bhi.n	800d136 <USBD_ClrFeature+0x30>
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) {
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	885b      	ldrh	r3, [r3, #2]
 800d122:	2b01      	cmp	r3, #1
 800d124:	d10c      	bne.n	800d140 <USBD_ClrFeature+0x3a>
            pdev->dev_remote_wakeup = 0U;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2200      	movs	r2, #0
 800d12a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
            (void)USBD_CtlSendStatus(pdev);
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f000 f910 	bl	800d354 <USBD_CtlSendStatus>
        }
        break;
 800d134:	e004      	b.n	800d140 <USBD_ClrFeature+0x3a>

    default:
        USBD_CtlError(pdev, req);
 800d136:	6839      	ldr	r1, [r7, #0]
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f000 f840 	bl	800d1be <USBD_CtlError>
        break;
 800d13e:	e000      	b.n	800d142 <USBD_ClrFeature+0x3c>
        break;
 800d140:	bf00      	nop
    }
}
 800d142:	bf00      	nop
 800d144:	3708      	adds	r7, #8
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}

0800d14a <USBD_ParseSetupRequest>:
 *         Copy buffer into setup structure
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval None
 */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef * req, uint8_t * pdata) {
 800d14a:	b580      	push	{r7, lr}
 800d14c:	b084      	sub	sp, #16
 800d14e:	af00      	add	r7, sp, #0
 800d150:	6078      	str	r0, [r7, #4]
 800d152:	6039      	str	r1, [r7, #0]
    uint8_t * pbuff = pdata;
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	60fb      	str	r3, [r7, #12]

    req->bmRequest = *(uint8_t *)(pbuff);
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	781a      	ldrb	r2, [r3, #0]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	701a      	strb	r2, [r3, #0]

    pbuff++;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	3301      	adds	r3, #1
 800d164:	60fb      	str	r3, [r7, #12]
    req->bRequest = *(uint8_t *)(pbuff);
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	781a      	ldrb	r2, [r3, #0]
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	705a      	strb	r2, [r3, #1]

    pbuff++;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	3301      	adds	r3, #1
 800d172:	60fb      	str	r3, [r7, #12]
    req->wValue = SWAPBYTE(pbuff);
 800d174:	68f8      	ldr	r0, [r7, #12]
 800d176:	f7ff fa40 	bl	800c5fa <SWAPBYTE>
 800d17a:	4603      	mov	r3, r0
 800d17c:	461a      	mov	r2, r3
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	805a      	strh	r2, [r3, #2]

    pbuff++;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	3301      	adds	r3, #1
 800d186:	60fb      	str	r3, [r7, #12]
    pbuff++;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	3301      	adds	r3, #1
 800d18c:	60fb      	str	r3, [r7, #12]
    req->wIndex = SWAPBYTE(pbuff);
 800d18e:	68f8      	ldr	r0, [r7, #12]
 800d190:	f7ff fa33 	bl	800c5fa <SWAPBYTE>
 800d194:	4603      	mov	r3, r0
 800d196:	461a      	mov	r2, r3
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	809a      	strh	r2, [r3, #4]

    pbuff++;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	3301      	adds	r3, #1
 800d1a0:	60fb      	str	r3, [r7, #12]
    pbuff++;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	3301      	adds	r3, #1
 800d1a6:	60fb      	str	r3, [r7, #12]
    req->wLength = SWAPBYTE(pbuff);
 800d1a8:	68f8      	ldr	r0, [r7, #12]
 800d1aa:	f7ff fa26 	bl	800c5fa <SWAPBYTE>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	461a      	mov	r2, r3
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	80da      	strh	r2, [r3, #6]
}
 800d1b6:	bf00      	nop
 800d1b8:	3710      	adds	r7, #16
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}

0800d1be <USBD_CtlError>:
 *         Handle USB low level Error
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval None
 */
void USBD_CtlError(USBD_HandleTypeDef * pdev, USBD_SetupReqTypedef * req) {
 800d1be:	b580      	push	{r7, lr}
 800d1c0:	b082      	sub	sp, #8
 800d1c2:	af00      	add	r7, sp, #0
 800d1c4:	6078      	str	r0, [r7, #4]
 800d1c6:	6039      	str	r1, [r7, #0]
    UNUSED(req);

    (void)USBD_LL_StallEP(pdev, 0x80U);
 800d1c8:	2180      	movs	r1, #128	@ 0x80
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f003 f920 	bl	8010410 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, 0U);
 800d1d0:	2100      	movs	r1, #0
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f003 f91c 	bl	8010410 <USBD_LL_StallEP>
}
 800d1d8:	bf00      	nop
 800d1da:	3708      	adds	r7, #8
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}

0800d1e0 <USBD_GetString>:
 * @param  desc : descriptor buffer
 * @param  unicode : Formatted string buffer (unicode)
 * @param  len : descriptor length
 * @retval None
 */
void USBD_GetString(uint8_t * desc, uint8_t * unicode, uint16_t * len) {
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b086      	sub	sp, #24
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	60f8      	str	r0, [r7, #12]
 800d1e8:	60b9      	str	r1, [r7, #8]
 800d1ea:	607a      	str	r2, [r7, #4]
    uint8_t idx = 0U;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	75fb      	strb	r3, [r7, #23]
    uint8_t * pdesc;

    if (desc == NULL) {
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d036      	beq.n	800d264 <USBD_GetString+0x84>
        return;
    }

    pdesc = desc;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	613b      	str	r3, [r7, #16]
    *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d1fa:	6938      	ldr	r0, [r7, #16]
 800d1fc:	f000 f836 	bl	800d26c <USBD_GetLen>
 800d200:	4603      	mov	r3, r0
 800d202:	3301      	adds	r3, #1
 800d204:	b29b      	uxth	r3, r3
 800d206:	005b      	lsls	r3, r3, #1
 800d208:	b29a      	uxth	r2, r3
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	801a      	strh	r2, [r3, #0]

    unicode[idx] = *(uint8_t *)len;
 800d20e:	7dfb      	ldrb	r3, [r7, #23]
 800d210:	68ba      	ldr	r2, [r7, #8]
 800d212:	4413      	add	r3, r2
 800d214:	687a      	ldr	r2, [r7, #4]
 800d216:	7812      	ldrb	r2, [r2, #0]
 800d218:	701a      	strb	r2, [r3, #0]
    idx++;
 800d21a:	7dfb      	ldrb	r3, [r7, #23]
 800d21c:	3301      	adds	r3, #1
 800d21e:	75fb      	strb	r3, [r7, #23]
    unicode[idx] = USB_DESC_TYPE_STRING;
 800d220:	7dfb      	ldrb	r3, [r7, #23]
 800d222:	68ba      	ldr	r2, [r7, #8]
 800d224:	4413      	add	r3, r2
 800d226:	2203      	movs	r2, #3
 800d228:	701a      	strb	r2, [r3, #0]
    idx++;
 800d22a:	7dfb      	ldrb	r3, [r7, #23]
 800d22c:	3301      	adds	r3, #1
 800d22e:	75fb      	strb	r3, [r7, #23]

    while (*pdesc != (uint8_t)'\0') {
 800d230:	e013      	b.n	800d25a <USBD_GetString+0x7a>
        unicode[idx] = *pdesc;
 800d232:	7dfb      	ldrb	r3, [r7, #23]
 800d234:	68ba      	ldr	r2, [r7, #8]
 800d236:	4413      	add	r3, r2
 800d238:	693a      	ldr	r2, [r7, #16]
 800d23a:	7812      	ldrb	r2, [r2, #0]
 800d23c:	701a      	strb	r2, [r3, #0]
        pdesc++;
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	3301      	adds	r3, #1
 800d242:	613b      	str	r3, [r7, #16]
        idx++;
 800d244:	7dfb      	ldrb	r3, [r7, #23]
 800d246:	3301      	adds	r3, #1
 800d248:	75fb      	strb	r3, [r7, #23]

        unicode[idx] = 0U;
 800d24a:	7dfb      	ldrb	r3, [r7, #23]
 800d24c:	68ba      	ldr	r2, [r7, #8]
 800d24e:	4413      	add	r3, r2
 800d250:	2200      	movs	r2, #0
 800d252:	701a      	strb	r2, [r3, #0]
        idx++;
 800d254:	7dfb      	ldrb	r3, [r7, #23]
 800d256:	3301      	adds	r3, #1
 800d258:	75fb      	strb	r3, [r7, #23]
    while (*pdesc != (uint8_t)'\0') {
 800d25a:	693b      	ldr	r3, [r7, #16]
 800d25c:	781b      	ldrb	r3, [r3, #0]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d1e7      	bne.n	800d232 <USBD_GetString+0x52>
 800d262:	e000      	b.n	800d266 <USBD_GetString+0x86>
        return;
 800d264:	bf00      	nop
    }
}
 800d266:	3718      	adds	r7, #24
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}

0800d26c <USBD_GetLen>:
 * @brief  USBD_GetLen
 *         return the string length
 * @param  buf : pointer to the ascii string buffer
 * @retval string length
 */
static uint8_t USBD_GetLen(uint8_t * buf) {
 800d26c:	b480      	push	{r7}
 800d26e:	b085      	sub	sp, #20
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
    uint8_t len = 0U;
 800d274:	2300      	movs	r3, #0
 800d276:	73fb      	strb	r3, [r7, #15]
    uint8_t * pbuff = buf;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	60bb      	str	r3, [r7, #8]

    while (*pbuff != (uint8_t)'\0') {
 800d27c:	e005      	b.n	800d28a <USBD_GetLen+0x1e>
        len++;
 800d27e:	7bfb      	ldrb	r3, [r7, #15]
 800d280:	3301      	adds	r3, #1
 800d282:	73fb      	strb	r3, [r7, #15]
        pbuff++;
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	3301      	adds	r3, #1
 800d288:	60bb      	str	r3, [r7, #8]
    while (*pbuff != (uint8_t)'\0') {
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	781b      	ldrb	r3, [r3, #0]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d1f5      	bne.n	800d27e <USBD_GetLen+0x12>
    }

    return len;
 800d292:	7bfb      	ldrb	r3, [r7, #15]
}
 800d294:	4618      	mov	r0, r3
 800d296:	3714      	adds	r7, #20
 800d298:	46bd      	mov	sp, r7
 800d29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29e:	4770      	bx	lr

0800d2a0 <USBD_CtlSendData>:
 * @param  pdev: device instance
 * @param  buff: pointer to data buffer
 * @param  len: length of data to be sent
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef * pdev, uint8_t * pbuf, uint32_t len) {
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b084      	sub	sp, #16
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	60f8      	str	r0, [r7, #12]
 800d2a8:	60b9      	str	r1, [r7, #8]
 800d2aa:	607a      	str	r2, [r7, #4]
    /* Set EP0 State */
    pdev->ep0_state = USBD_EP0_DATA_IN;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	2202      	movs	r2, #2
 800d2b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
    pdev->ep_in[0].total_length = len;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	687a      	ldr	r2, [r7, #4]
 800d2b8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
    pdev->ep_in[0].rem_length = 0U;
#else
    pdev->ep_in[0].rem_length = len;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	687a      	ldr	r2, [r7, #4]
 800d2be:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

    /* Start the transfer */
    (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	68ba      	ldr	r2, [r7, #8]
 800d2c4:	2100      	movs	r1, #0
 800d2c6:	68f8      	ldr	r0, [r7, #12]
 800d2c8:	f003 f92b 	bl	8010522 <USBD_LL_Transmit>

    return USBD_OK;
 800d2cc:	2300      	movs	r3, #0
}
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	3710      	adds	r7, #16
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd80      	pop	{r7, pc}

0800d2d6 <USBD_CtlContinueSendData>:
 * @param  pdev: device instance
 * @param  buff: pointer to data buffer
 * @param  len: length of data to be sent
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef * pdev, uint8_t * pbuf, uint32_t len) {
 800d2d6:	b580      	push	{r7, lr}
 800d2d8:	b084      	sub	sp, #16
 800d2da:	af00      	add	r7, sp, #0
 800d2dc:	60f8      	str	r0, [r7, #12]
 800d2de:	60b9      	str	r1, [r7, #8]
 800d2e0:	607a      	str	r2, [r7, #4]
    /* Start the next transfer */
    (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	68ba      	ldr	r2, [r7, #8]
 800d2e6:	2100      	movs	r1, #0
 800d2e8:	68f8      	ldr	r0, [r7, #12]
 800d2ea:	f003 f91a 	bl	8010522 <USBD_LL_Transmit>

    return USBD_OK;
 800d2ee:	2300      	movs	r3, #0
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3710      	adds	r7, #16
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}

0800d2f8 <USBD_CtlPrepareRx>:
 * @param  pdev: device instance
 * @param  buff: pointer to data buffer
 * @param  len: length of data to be received
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef * pdev, uint8_t * pbuf, uint32_t len) {
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b084      	sub	sp, #16
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	60f8      	str	r0, [r7, #12]
 800d300:	60b9      	str	r1, [r7, #8]
 800d302:	607a      	str	r2, [r7, #4]
    /* Set EP0 State */
    pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	2203      	movs	r2, #3
 800d308:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
    pdev->ep_out[0].total_length = len;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	687a      	ldr	r2, [r7, #4]
 800d310:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
    pdev->ep_out[0].rem_length = 0U;
#else
    pdev->ep_out[0].rem_length = len;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	687a      	ldr	r2, [r7, #4]
 800d318:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

    /* Start the transfer */
    (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	68ba      	ldr	r2, [r7, #8]
 800d320:	2100      	movs	r1, #0
 800d322:	68f8      	ldr	r0, [r7, #12]
 800d324:	f003 f91e 	bl	8010564 <USBD_LL_PrepareReceive>

    return USBD_OK;
 800d328:	2300      	movs	r3, #0
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3710      	adds	r7, #16
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}

0800d332 <USBD_CtlContinueRx>:
 * @param  pdev: device instance
 * @param  buff: pointer to data buffer
 * @param  len: length of data to be received
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef * pdev, uint8_t * pbuf, uint32_t len) {
 800d332:	b580      	push	{r7, lr}
 800d334:	b084      	sub	sp, #16
 800d336:	af00      	add	r7, sp, #0
 800d338:	60f8      	str	r0, [r7, #12]
 800d33a:	60b9      	str	r1, [r7, #8]
 800d33c:	607a      	str	r2, [r7, #4]
    (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	68ba      	ldr	r2, [r7, #8]
 800d342:	2100      	movs	r1, #0
 800d344:	68f8      	ldr	r0, [r7, #12]
 800d346:	f003 f90d 	bl	8010564 <USBD_LL_PrepareReceive>

    return USBD_OK;
 800d34a:	2300      	movs	r3, #0
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3710      	adds	r7, #16
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}

0800d354 <USBD_CtlSendStatus>:
 * @brief  USBD_CtlSendStatus
 *         send zero lzngth packet on the ctl pipe
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef * pdev) {
 800d354:	b580      	push	{r7, lr}
 800d356:	b082      	sub	sp, #8
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
    /* Set EP0 State */
    pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2204      	movs	r2, #4
 800d360:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

    /* Start the transfer */
    (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d364:	2300      	movs	r3, #0
 800d366:	2200      	movs	r2, #0
 800d368:	2100      	movs	r1, #0
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f003 f8d9 	bl	8010522 <USBD_LL_Transmit>

    return USBD_OK;
 800d370:	2300      	movs	r3, #0
}
 800d372:	4618      	mov	r0, r3
 800d374:	3708      	adds	r7, #8
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}

0800d37a <USBD_CtlReceiveStatus>:
 * @brief  USBD_CtlReceiveStatus
 *         receive zero lzngth packet on the ctl pipe
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef * pdev) {
 800d37a:	b580      	push	{r7, lr}
 800d37c:	b082      	sub	sp, #8
 800d37e:	af00      	add	r7, sp, #0
 800d380:	6078      	str	r0, [r7, #4]
    /* Set EP0 State */
    pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2205      	movs	r2, #5
 800d386:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

    /* Start the transfer */
    (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d38a:	2300      	movs	r3, #0
 800d38c:	2200      	movs	r2, #0
 800d38e:	2100      	movs	r1, #0
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f003 f8e7 	bl	8010564 <USBD_LL_PrepareReceive>

    return USBD_OK;
 800d396:	2300      	movs	r3, #0
}
 800d398:	4618      	mov	r0, r3
 800d39a:	3708      	adds	r7, #8
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}

0800d3a0 <makeFreeRtosPriority>:
#endif

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority(osPriority priority) {
 800d3a0:	b480      	push	{r7}
 800d3a2:	b085      	sub	sp, #20
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	80fb      	strh	r3, [r7, #6]
    unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	60fb      	str	r3, [r7, #12]

    if (priority != osPriorityError) {
 800d3ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d3b2:	2b84      	cmp	r3, #132	@ 0x84
 800d3b4:	d005      	beq.n	800d3c2 <makeFreeRtosPriority+0x22>
        fpriority += (priority - osPriorityIdle);
 800d3b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	4413      	add	r3, r2
 800d3be:	3303      	adds	r3, #3
 800d3c0:	60fb      	str	r3, [r7, #12]
    }

    return fpriority;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3714      	adds	r7, #20
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ce:	4770      	bx	lr

0800d3d0 <osKernelStart>:
 * @param  thread_def    thread definition referenced with \ref osThread.
 * @param  argument      pointer that is passed to the thread function as start argument.
 * @retval status code that indicates the execution status of the function
 * @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
 */
osStatus osKernelStart(void) {
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	af00      	add	r7, sp, #0
    vTaskStartScheduler();
 800d3d4:	f001 f8ee 	bl	800e5b4 <vTaskStartScheduler>

    return osOK;
 800d3d8:	2300      	movs	r3, #0
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	bd80      	pop	{r7, pc}

0800d3de <osThreadCreate>:
 * @param  thread_def    thread definition referenced with \ref osThread.
 * @param  argument      pointer that is passed to the thread function as start argument.
 * @retval thread ID for reference by other functions or NULL in case of error.
 * @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
 */
osThreadId osThreadCreate(const osThreadDef_t * thread_def, void * argument) {
 800d3de:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3e0:	b089      	sub	sp, #36	@ 0x24
 800d3e2:	af04      	add	r7, sp, #16
 800d3e4:	6078      	str	r0, [r7, #4]
 800d3e6:	6039      	str	r1, [r7, #0]
    TaskHandle_t handle;

#if (configSUPPORT_STATIC_ALLOCATION == 1) && (configSUPPORT_DYNAMIC_ALLOCATION == 1)
    if ((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	695b      	ldr	r3, [r3, #20]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d020      	beq.n	800d432 <osThreadCreate+0x54>
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	699b      	ldr	r3, [r3, #24]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d01c      	beq.n	800d432 <osThreadCreate+0x54>
        handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread, (const portCHAR *)thread_def->name, thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority), thread_def->buffer, thread_def->controlblock);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	685c      	ldr	r4, [r3, #4]
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681d      	ldr	r5, [r3, #0]
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	691e      	ldr	r6, [r3, #16]
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d40a:	4618      	mov	r0, r3
 800d40c:	f7ff ffc8 	bl	800d3a0 <makeFreeRtosPriority>
 800d410:	4601      	mov	r1, r0
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	695b      	ldr	r3, [r3, #20]
 800d416:	687a      	ldr	r2, [r7, #4]
 800d418:	6992      	ldr	r2, [r2, #24]
 800d41a:	9202      	str	r2, [sp, #8]
 800d41c:	9301      	str	r3, [sp, #4]
 800d41e:	9100      	str	r1, [sp, #0]
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	4632      	mov	r2, r6
 800d424:	4629      	mov	r1, r5
 800d426:	4620      	mov	r0, r4
 800d428:	f000 fdd8 	bl	800dfdc <xTaskCreateStatic>
 800d42c:	4603      	mov	r3, r0
 800d42e:	60fb      	str	r3, [r7, #12]
 800d430:	e01c      	b.n	800d46c <osThreadCreate+0x8e>
    } else {
        if (xTaskCreate((TaskFunction_t)thread_def->pthread, (const portCHAR *)thread_def->name, thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority), &handle) != pdPASS) {
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	685c      	ldr	r4, [r3, #4]
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681d      	ldr	r5, [r3, #0]
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	691b      	ldr	r3, [r3, #16]
 800d43e:	b29e      	uxth	r6, r3
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d446:	4618      	mov	r0, r3
 800d448:	f7ff ffaa 	bl	800d3a0 <makeFreeRtosPriority>
 800d44c:	4602      	mov	r2, r0
 800d44e:	f107 030c 	add.w	r3, r7, #12
 800d452:	9301      	str	r3, [sp, #4]
 800d454:	9200      	str	r2, [sp, #0]
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	4632      	mov	r2, r6
 800d45a:	4629      	mov	r1, r5
 800d45c:	4620      	mov	r0, r4
 800d45e:	f000 fe1d 	bl	800e09c <xTaskCreate>
 800d462:	4603      	mov	r3, r0
 800d464:	2b01      	cmp	r3, #1
 800d466:	d001      	beq.n	800d46c <osThreadCreate+0x8e>
            return NULL;
 800d468:	2300      	movs	r3, #0
 800d46a:	e000      	b.n	800d46e <osThreadCreate+0x90>
    if (xTaskCreate((TaskFunction_t)thread_def->pthread, (const portCHAR *)thread_def->name, thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority), &handle) != pdPASS) {
        return NULL;
    }
#endif

    return handle;
 800d46c:	68fb      	ldr	r3, [r7, #12]
}
 800d46e:	4618      	mov	r0, r3
 800d470:	3714      	adds	r7, #20
 800d472:	46bd      	mov	sp, r7
 800d474:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d476 <osDelay>:
/**
 * @brief   Wait for Timeout (Time Delay)
 * @param   millisec      time delay value
 * @retval  status code that indicates the execution status of the function.
 */
osStatus osDelay(uint32_t millisec) {
 800d476:	b580      	push	{r7, lr}
 800d478:	b084      	sub	sp, #16
 800d47a:	af00      	add	r7, sp, #0
 800d47c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
    TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2200      	movs	r2, #0
 800d482:	fbb3 f3f2 	udiv	r3, r3, r2
 800d486:	60fb      	str	r3, [r7, #12]

    vTaskDelay(ticks ? ticks : 1); /* Minimum delay = 1 tick */
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d001      	beq.n	800d492 <osDelay+0x1c>
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	e000      	b.n	800d494 <osDelay+0x1e>
 800d492:	2301      	movs	r3, #1
 800d494:	4618      	mov	r0, r3
 800d496:	f000 ffc3 	bl	800e420 <vTaskDelay>

    return osOK;
 800d49a:	2300      	movs	r3, #0
#else
    (void)millisec;

    return osErrorResource;
#endif
}
 800d49c:	4618      	mov	r0, r3
 800d49e:	3710      	adds	r7, #16
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}

0800d4a4 <vListInitialise>:

/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise(List_t * const pxList) {
 800d4a4:	b480      	push	{r7}
 800d4a6:	b083      	sub	sp, #12
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f103 0208 	add.w	r2, r3, #8
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f04f 32ff 	mov.w	r2, #4294967295
 800d4bc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = (ListItem_t *)&(pxList->xListEnd);     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	f103 0208 	add.w	r2, r3, #8
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f103 0208 	add.w	r2, r3, #8
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = (UBaseType_t)0U;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
    configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE(pxList);
    listSET_LIST_INTEGRITY_CHECK_2_VALUE(pxList);
}
 800d4d8:	bf00      	nop
 800d4da:	370c      	adds	r7, #12
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e2:	4770      	bx	lr

0800d4e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem(ListItem_t * const pxItem) {
 800d4e4:	b480      	push	{r7}
 800d4e6:	b083      	sub	sp, #12
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
    configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE(pxItem);
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE(pxItem);
}
 800d4f2:	bf00      	nop
 800d4f4:	370c      	adds	r7, #12
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fc:	4770      	bx	lr

0800d4fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t * const pxList, ListItem_t * const pxNewListItem) {
 800d4fe:	b480      	push	{r7}
 800d500:	b085      	sub	sp, #20
 800d502:	af00      	add	r7, sp, #0
 800d504:	6078      	str	r0, [r7, #4]
 800d506:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	685b      	ldr	r3, [r3, #4]
 800d50c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	68fa      	ldr	r2, [r7, #12]
 800d512:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	689a      	ldr	r2, [r3, #8]
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	689b      	ldr	r3, [r3, #8]
 800d520:	683a      	ldr	r2, [r7, #0]
 800d522:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	683a      	ldr	r2, [r7, #0]
 800d528:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	687a      	ldr	r2, [r7, #4]
 800d52e:	611a      	str	r2, [r3, #16]

    (pxList->uxNumberOfItems)++;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	1c5a      	adds	r2, r3, #1
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	601a      	str	r2, [r3, #0]
}
 800d53a:	bf00      	nop
 800d53c:	3714      	adds	r7, #20
 800d53e:	46bd      	mov	sp, r7
 800d540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d544:	4770      	bx	lr

0800d546 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert(List_t * const pxList, ListItem_t * const pxNewListItem) {
 800d546:	b480      	push	{r7}
 800d548:	b085      	sub	sp, #20
 800d54a:	af00      	add	r7, sp, #0
 800d54c:	6078      	str	r0, [r7, #4]
 800d54e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	60bb      	str	r3, [r7, #8]
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if (xValueOfInsertion == portMAX_DELAY) {
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d55c:	d103      	bne.n	800d566 <vListInsert+0x20>
        pxIterator = pxList->xListEnd.pxPrevious;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	691b      	ldr	r3, [r3, #16]
 800d562:	60fb      	str	r3, [r7, #12]
 800d564:	e00c      	b.n	800d580 <vListInsert+0x3a>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	3308      	adds	r3, #8
 800d56a:	60fb      	str	r3, [r7, #12]
 800d56c:	e002      	b.n	800d574 <vListInsert+0x2e>
             pxIterator = pxIterator->pxNext) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */ /*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	685b      	ldr	r3, [r3, #4]
 800d572:	60fb      	str	r3, [r7, #12]
        for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	685b      	ldr	r3, [r3, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	68ba      	ldr	r2, [r7, #8]
 800d57c:	429a      	cmp	r2, r3
 800d57e:	d2f6      	bcs.n	800d56e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	685a      	ldr	r2, [r3, #4]
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	685b      	ldr	r3, [r3, #4]
 800d58c:	683a      	ldr	r2, [r7, #0]
 800d58e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	68fa      	ldr	r2, [r7, #12]
 800d594:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	683a      	ldr	r2, [r7, #0]
 800d59a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	687a      	ldr	r2, [r7, #4]
 800d5a0:	611a      	str	r2, [r3, #16]

    (pxList->uxNumberOfItems)++;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	1c5a      	adds	r2, r3, #1
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	601a      	str	r2, [r3, #0]
}
 800d5ac:	bf00      	nop
 800d5ae:	3714      	adds	r7, #20
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b6:	4770      	bx	lr

0800d5b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove(ListItem_t * const pxItemToRemove) {
 800d5b8:	b480      	push	{r7}
 800d5ba:	b085      	sub	sp, #20
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
    item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	691b      	ldr	r3, [r3, #16]
 800d5c4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	685b      	ldr	r3, [r3, #4]
 800d5ca:	687a      	ldr	r2, [r7, #4]
 800d5cc:	6892      	ldr	r2, [r2, #8]
 800d5ce:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	689b      	ldr	r3, [r3, #8]
 800d5d4:	687a      	ldr	r2, [r7, #4]
 800d5d6:	6852      	ldr	r2, [r2, #4]
 800d5d8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if (pxList->pxIndex == pxItemToRemove) {
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	685b      	ldr	r3, [r3, #4]
 800d5de:	687a      	ldr	r2, [r7, #4]
 800d5e0:	429a      	cmp	r2, r3
 800d5e2:	d103      	bne.n	800d5ec <uxListRemove+0x34>
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	689a      	ldr	r2, [r3, #8]
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	605a      	str	r2, [r3, #4]
    } else {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	611a      	str	r2, [r3, #16]
    (pxList->uxNumberOfItems)--;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	1e5a      	subs	r2, r3, #1
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	681b      	ldr	r3, [r3, #0]
}
 800d600:	4618      	mov	r0, r3
 800d602:	3714      	adds	r7, #20
 800d604:	46bd      	mov	sp, r7
 800d606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60a:	4770      	bx	lr

0800d60c <xQueueGenericReset>:
        }                                                                                                                                                                                                                                                \
    }                                                                                                                                                                                                                                                    \
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset(QueueHandle_t xQueue, BaseType_t xNewQueue) {
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b084      	sub	sp, #16
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	60fb      	str	r3, [r7, #12]

    configASSERT(pxQueue);
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d10b      	bne.n	800d638 <xQueueGenericReset+0x2c>
    __asm volatile("	mov %0, %1												\n"
 800d620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d624:	f383 8811 	msr	BASEPRI, r3
 800d628:	f3bf 8f6f 	isb	sy
 800d62c:	f3bf 8f4f 	dsb	sy
 800d630:	60bb      	str	r3, [r7, #8]
}
 800d632:	bf00      	nop
 800d634:	bf00      	nop
 800d636:	e7fd      	b.n	800d634 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800d638:	f002 f9b6 	bl	800f9a8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + (pxQueue->uxLength * pxQueue->uxItemSize); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	681a      	ldr	r2, [r3, #0]
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d644:	68f9      	ldr	r1, [r7, #12]
 800d646:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d648:	fb01 f303 	mul.w	r3, r1, r3
 800d64c:	441a      	add	r2, r3
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = (UBaseType_t)0U;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	2200      	movs	r2, #0
 800d656:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	681a      	ldr	r2, [r3, #0]
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ((pxQueue->uxLength - 1U) * pxQueue->uxItemSize); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	681a      	ldr	r2, [r3, #0]
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d668:	3b01      	subs	r3, #1
 800d66a:	68f9      	ldr	r1, [r7, #12]
 800d66c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d66e:	fb01 f303 	mul.w	r3, r1, r3
 800d672:	441a      	add	r2, r3
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	22ff      	movs	r2, #255	@ 0xff
 800d67c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	22ff      	movs	r2, #255	@ 0xff
 800d684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if (xNewQueue == pdFALSE) {
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d114      	bne.n	800d6b8 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
            the tasks will remain blocked as after this function exits the queue
            will still be empty.  If there are tasks blocked waiting to write to
            the queue, then one should be unblocked as after this function exits
            it will be possible to write to it. */
            if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	691b      	ldr	r3, [r3, #16]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d01a      	beq.n	800d6cc <xQueueGenericReset+0xc0>
                if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	3310      	adds	r3, #16
 800d69a:	4618      	mov	r0, r3
 800d69c:	f001 fa16 	bl	800eacc <xTaskRemoveFromEventList>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d012      	beq.n	800d6cc <xQueueGenericReset+0xc0>
                    queueYIELD_IF_USING_PREEMPTION();
 800d6a6:	4b0d      	ldr	r3, [pc, #52]	@ (800d6dc <xQueueGenericReset+0xd0>)
 800d6a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6ac:	601a      	str	r2, [r3, #0]
 800d6ae:	f3bf 8f4f 	dsb	sy
 800d6b2:	f3bf 8f6f 	isb	sy
 800d6b6:	e009      	b.n	800d6cc <xQueueGenericReset+0xc0>
            } else {
                mtCOVERAGE_TEST_MARKER();
            }
        } else {
            /* Ensure the event queues start in the correct state. */
            vListInitialise(&(pxQueue->xTasksWaitingToSend));
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	3310      	adds	r3, #16
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f7ff fef1 	bl	800d4a4 <vListInitialise>
            vListInitialise(&(pxQueue->xTasksWaitingToReceive));
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	3324      	adds	r3, #36	@ 0x24
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f7ff feec 	bl	800d4a4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800d6cc:	f002 f99e 	bl	800fa0c <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
    versions. */
    return pdPASS;
 800d6d0:	2301      	movs	r3, #1
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3710      	adds	r7, #16
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}
 800d6da:	bf00      	nop
 800d6dc:	e000ed04 	.word	0xe000ed04

0800d6e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if (configSUPPORT_STATIC_ALLOCATION == 1)

QueueHandle_t xQueueGenericCreateStatic(const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t * pucQueueStorage, StaticQueue_t * pxStaticQueue, const uint8_t ucQueueType) {
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b08e      	sub	sp, #56	@ 0x38
 800d6e4:	af02      	add	r7, sp, #8
 800d6e6:	60f8      	str	r0, [r7, #12]
 800d6e8:	60b9      	str	r1, [r7, #8]
 800d6ea:	607a      	str	r2, [r7, #4]
 800d6ec:	603b      	str	r3, [r7, #0]
    Queue_t * pxNewQueue;

    configASSERT(uxQueueLength > (UBaseType_t)0);
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d10b      	bne.n	800d70c <xQueueGenericCreateStatic+0x2c>
    __asm volatile("	mov %0, %1												\n"
 800d6f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6f8:	f383 8811 	msr	BASEPRI, r3
 800d6fc:	f3bf 8f6f 	isb	sy
 800d700:	f3bf 8f4f 	dsb	sy
 800d704:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d706:	bf00      	nop
 800d708:	bf00      	nop
 800d70a:	e7fd      	b.n	800d708 <xQueueGenericCreateStatic+0x28>

    /* The StaticQueue_t structure and the queue storage area must be
    supplied. */
    configASSERT(pxStaticQueue != NULL);
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d10b      	bne.n	800d72a <xQueueGenericCreateStatic+0x4a>
    __asm volatile("	mov %0, %1												\n"
 800d712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d716:	f383 8811 	msr	BASEPRI, r3
 800d71a:	f3bf 8f6f 	isb	sy
 800d71e:	f3bf 8f4f 	dsb	sy
 800d722:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d724:	bf00      	nop
 800d726:	bf00      	nop
 800d728:	e7fd      	b.n	800d726 <xQueueGenericCreateStatic+0x46>

    /* A queue storage area should be provided if the item size is not 0, and
    should not be provided if the item size is 0. */
    configASSERT(!((pucQueueStorage != NULL) && (uxItemSize == 0)));
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d002      	beq.n	800d736 <xQueueGenericCreateStatic+0x56>
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d001      	beq.n	800d73a <xQueueGenericCreateStatic+0x5a>
 800d736:	2301      	movs	r3, #1
 800d738:	e000      	b.n	800d73c <xQueueGenericCreateStatic+0x5c>
 800d73a:	2300      	movs	r3, #0
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d10b      	bne.n	800d758 <xQueueGenericCreateStatic+0x78>
    __asm volatile("	mov %0, %1												\n"
 800d740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d744:	f383 8811 	msr	BASEPRI, r3
 800d748:	f3bf 8f6f 	isb	sy
 800d74c:	f3bf 8f4f 	dsb	sy
 800d750:	623b      	str	r3, [r7, #32]
}
 800d752:	bf00      	nop
 800d754:	bf00      	nop
 800d756:	e7fd      	b.n	800d754 <xQueueGenericCreateStatic+0x74>
    configASSERT(!((pucQueueStorage == NULL) && (uxItemSize != 0)));
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d102      	bne.n	800d764 <xQueueGenericCreateStatic+0x84>
 800d75e:	68bb      	ldr	r3, [r7, #8]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d101      	bne.n	800d768 <xQueueGenericCreateStatic+0x88>
 800d764:	2301      	movs	r3, #1
 800d766:	e000      	b.n	800d76a <xQueueGenericCreateStatic+0x8a>
 800d768:	2300      	movs	r3, #0
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d10b      	bne.n	800d786 <xQueueGenericCreateStatic+0xa6>
    __asm volatile("	mov %0, %1												\n"
 800d76e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d772:	f383 8811 	msr	BASEPRI, r3
 800d776:	f3bf 8f6f 	isb	sy
 800d77a:	f3bf 8f4f 	dsb	sy
 800d77e:	61fb      	str	r3, [r7, #28]
}
 800d780:	bf00      	nop
 800d782:	bf00      	nop
 800d784:	e7fd      	b.n	800d782 <xQueueGenericCreateStatic+0xa2>
#if (configASSERT_DEFINED == 1)
    {
        /* Sanity check that the size of the structure used to declare a
        variable of type StaticQueue_t or StaticSemaphore_t equals the size of
        the real queue and semaphore structures. */
        volatile size_t xSize = sizeof(StaticQueue_t);
 800d786:	2348      	movs	r3, #72	@ 0x48
 800d788:	617b      	str	r3, [r7, #20]
        configASSERT(xSize == sizeof(Queue_t));
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	2b48      	cmp	r3, #72	@ 0x48
 800d78e:	d00b      	beq.n	800d7a8 <xQueueGenericCreateStatic+0xc8>
    __asm volatile("	mov %0, %1												\n"
 800d790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d794:	f383 8811 	msr	BASEPRI, r3
 800d798:	f3bf 8f6f 	isb	sy
 800d79c:	f3bf 8f4f 	dsb	sy
 800d7a0:	61bb      	str	r3, [r7, #24]
}
 800d7a2:	bf00      	nop
 800d7a4:	bf00      	nop
 800d7a6:	e7fd      	b.n	800d7a4 <xQueueGenericCreateStatic+0xc4>
        (void)xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d7a8:	697b      	ldr	r3, [r7, #20]
#endif /* configASSERT_DEFINED */

    /* The address of a statically allocated queue was passed in, use it.
    The address of a statically allocated storage area was also passed in
    but is already set. */
    pxNewQueue = (Queue_t *)pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (pxNewQueue != NULL) {
 800d7ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d00d      	beq.n	800d7d0 <xQueueGenericCreateStatic+0xf0>
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
        {
            /* Queues can be allocated wither statically or dynamically, so
            note this queue was allocated statically in case the queue is
            later deleted. */
            pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d7b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7b6:	2201      	movs	r2, #1
 800d7b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
        }
#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

        prvInitialiseNewQueue(uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue);
 800d7bc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d7c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7c2:	9300      	str	r3, [sp, #0]
 800d7c4:	4613      	mov	r3, r2
 800d7c6:	687a      	ldr	r2, [r7, #4]
 800d7c8:	68b9      	ldr	r1, [r7, #8]
 800d7ca:	68f8      	ldr	r0, [r7, #12]
 800d7cc:	f000 f805 	bl	800d7da <prvInitialiseNewQueue>
    } else {
        traceQUEUE_CREATE_FAILED(ucQueueType);
        mtCOVERAGE_TEST_MARKER();
    }

    return pxNewQueue;
 800d7d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	3730      	adds	r7, #48	@ 0x30
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}

0800d7da <prvInitialiseNewQueue>:
}

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue(const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t * pucQueueStorage, const uint8_t ucQueueType, Queue_t * pxNewQueue) {
 800d7da:	b580      	push	{r7, lr}
 800d7dc:	b084      	sub	sp, #16
 800d7de:	af00      	add	r7, sp, #0
 800d7e0:	60f8      	str	r0, [r7, #12]
 800d7e2:	60b9      	str	r1, [r7, #8]
 800d7e4:	607a      	str	r2, [r7, #4]
 800d7e6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
    configUSE_TRACE_FACILITY not be set to 1. */
    (void)ucQueueType;

    if (uxItemSize == (UBaseType_t)0) {
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d103      	bne.n	800d7f6 <prvInitialiseNewQueue+0x1c>
        /* No RAM was allocated for the queue storage area, but PC head cannot
        be set to NULL because NULL is used as a key to say the queue is used as
        a mutex.  Therefore just set pcHead to point to the queue as a benign
        value that is known to be within the memory map. */
        pxNewQueue->pcHead = (int8_t *)pxNewQueue;
 800d7ee:	69bb      	ldr	r3, [r7, #24]
 800d7f0:	69ba      	ldr	r2, [r7, #24]
 800d7f2:	601a      	str	r2, [r3, #0]
 800d7f4:	e002      	b.n	800d7fc <prvInitialiseNewQueue+0x22>
    } else {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = (int8_t *)pucQueueStorage;
 800d7f6:	69bb      	ldr	r3, [r7, #24]
 800d7f8:	687a      	ldr	r2, [r7, #4]
 800d7fa:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
    defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800d7fc:	69bb      	ldr	r3, [r7, #24]
 800d7fe:	68fa      	ldr	r2, [r7, #12]
 800d800:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800d802:	69bb      	ldr	r3, [r7, #24]
 800d804:	68ba      	ldr	r2, [r7, #8]
 800d806:	641a      	str	r2, [r3, #64]	@ 0x40
    (void)xQueueGenericReset(pxNewQueue, pdTRUE);
 800d808:	2101      	movs	r1, #1
 800d80a:	69b8      	ldr	r0, [r7, #24]
 800d80c:	f7ff fefe 	bl	800d60c <xQueueGenericReset>
#if (configUSE_QUEUE_SETS == 1)
    { pxNewQueue->pxQueueSetContainer = NULL; }
#endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE(pxNewQueue);
}
 800d810:	bf00      	nop
 800d812:	3710      	adds	r7, #16
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}

0800d818 <xQueueGenericSend>:
}

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend(QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition) {
 800d818:	b580      	push	{r7, lr}
 800d81a:	b08e      	sub	sp, #56	@ 0x38
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	60f8      	str	r0, [r7, #12]
 800d820:	60b9      	str	r1, [r7, #8]
 800d822:	607a      	str	r2, [r7, #4]
 800d824:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d826:	2300      	movs	r3, #0
 800d828:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT(pxQueue);
 800d82e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d830:	2b00      	cmp	r3, #0
 800d832:	d10b      	bne.n	800d84c <xQueueGenericSend+0x34>
    __asm volatile("	mov %0, %1												\n"
 800d834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d838:	f383 8811 	msr	BASEPRI, r3
 800d83c:	f3bf 8f6f 	isb	sy
 800d840:	f3bf 8f4f 	dsb	sy
 800d844:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d846:	bf00      	nop
 800d848:	bf00      	nop
 800d84a:	e7fd      	b.n	800d848 <xQueueGenericSend+0x30>
    configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d103      	bne.n	800d85a <xQueueGenericSend+0x42>
 800d852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d856:	2b00      	cmp	r3, #0
 800d858:	d101      	bne.n	800d85e <xQueueGenericSend+0x46>
 800d85a:	2301      	movs	r3, #1
 800d85c:	e000      	b.n	800d860 <xQueueGenericSend+0x48>
 800d85e:	2300      	movs	r3, #0
 800d860:	2b00      	cmp	r3, #0
 800d862:	d10b      	bne.n	800d87c <xQueueGenericSend+0x64>
    __asm volatile("	mov %0, %1												\n"
 800d864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d868:	f383 8811 	msr	BASEPRI, r3
 800d86c:	f3bf 8f6f 	isb	sy
 800d870:	f3bf 8f4f 	dsb	sy
 800d874:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d876:	bf00      	nop
 800d878:	bf00      	nop
 800d87a:	e7fd      	b.n	800d878 <xQueueGenericSend+0x60>
    configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	2b02      	cmp	r3, #2
 800d880:	d103      	bne.n	800d88a <xQueueGenericSend+0x72>
 800d882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d886:	2b01      	cmp	r3, #1
 800d888:	d101      	bne.n	800d88e <xQueueGenericSend+0x76>
 800d88a:	2301      	movs	r3, #1
 800d88c:	e000      	b.n	800d890 <xQueueGenericSend+0x78>
 800d88e:	2300      	movs	r3, #0
 800d890:	2b00      	cmp	r3, #0
 800d892:	d10b      	bne.n	800d8ac <xQueueGenericSend+0x94>
    __asm volatile("	mov %0, %1												\n"
 800d894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d898:	f383 8811 	msr	BASEPRI, r3
 800d89c:	f3bf 8f6f 	isb	sy
 800d8a0:	f3bf 8f4f 	dsb	sy
 800d8a4:	623b      	str	r3, [r7, #32]
}
 800d8a6:	bf00      	nop
 800d8a8:	bf00      	nop
 800d8aa:	e7fd      	b.n	800d8a8 <xQueueGenericSend+0x90>
#if ((INCLUDE_xTaskGetSchedulerState == 1) || (configUSE_TIMERS == 1))
    { configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0))); }
 800d8ac:	f001 face 	bl	800ee4c <xTaskGetSchedulerState>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d102      	bne.n	800d8bc <xQueueGenericSend+0xa4>
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d101      	bne.n	800d8c0 <xQueueGenericSend+0xa8>
 800d8bc:	2301      	movs	r3, #1
 800d8be:	e000      	b.n	800d8c2 <xQueueGenericSend+0xaa>
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d10b      	bne.n	800d8de <xQueueGenericSend+0xc6>
    __asm volatile("	mov %0, %1												\n"
 800d8c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8ca:	f383 8811 	msr	BASEPRI, r3
 800d8ce:	f3bf 8f6f 	isb	sy
 800d8d2:	f3bf 8f4f 	dsb	sy
 800d8d6:	61fb      	str	r3, [r7, #28]
}
 800d8d8:	bf00      	nop
 800d8da:	bf00      	nop
 800d8dc:	e7fd      	b.n	800d8da <xQueueGenericSend+0xc2>

    /*lint -save -e904 This function relaxes the coding standard somewhat to
    allow return statements within the function itself.  This is done in the
    interest of execution time efficiency. */
    for (;;) {
        taskENTER_CRITICAL();
 800d8de:	f002 f863 	bl	800f9a8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
            highest priority task wanting to access the queue.  If the head item
            in the queue is to be overwritten then it does not matter if the
            queue is full. */
            if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
 800d8e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d8e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d8ea:	429a      	cmp	r2, r3
 800d8ec:	d302      	bcc.n	800d8f4 <xQueueGenericSend+0xdc>
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	2b02      	cmp	r3, #2
 800d8f2:	d129      	bne.n	800d948 <xQueueGenericSend+0x130>
                        }
                    }
                }
#else  /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
 800d8f4:	683a      	ldr	r2, [r7, #0]
 800d8f6:	68b9      	ldr	r1, [r7, #8]
 800d8f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d8fa:	f000 fa0f 	bl	800dd1c <prvCopyDataToQueue>
 800d8fe:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                    queue then unblock it now. */
                    if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
 800d900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d904:	2b00      	cmp	r3, #0
 800d906:	d010      	beq.n	800d92a <xQueueGenericSend+0x112>
                        if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
 800d908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d90a:	3324      	adds	r3, #36	@ 0x24
 800d90c:	4618      	mov	r0, r3
 800d90e:	f001 f8dd 	bl	800eacc <xTaskRemoveFromEventList>
 800d912:	4603      	mov	r3, r0
 800d914:	2b00      	cmp	r3, #0
 800d916:	d013      	beq.n	800d940 <xQueueGenericSend+0x128>
                            /* The unblocked task has a priority higher than
                            our own so yield immediately.  Yes it is ok to do
                            this from within the critical section - the kernel
                            takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800d918:	4b3f      	ldr	r3, [pc, #252]	@ (800da18 <xQueueGenericSend+0x200>)
 800d91a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d91e:	601a      	str	r2, [r3, #0]
 800d920:	f3bf 8f4f 	dsb	sy
 800d924:	f3bf 8f6f 	isb	sy
 800d928:	e00a      	b.n	800d940 <xQueueGenericSend+0x128>
                        } else {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    } else if (xYieldRequired != pdFALSE) {
 800d92a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d007      	beq.n	800d940 <xQueueGenericSend+0x128>
                        /* This path is a special case that will only get
                        executed if the task was holding multiple mutexes and
                        the mutexes were given back in an order that is
                        different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800d930:	4b39      	ldr	r3, [pc, #228]	@ (800da18 <xQueueGenericSend+0x200>)
 800d932:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d936:	601a      	str	r2, [r3, #0]
 800d938:	f3bf 8f4f 	dsb	sy
 800d93c:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
#endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800d940:	f002 f864 	bl	800fa0c <vPortExitCritical>
                return pdPASS;
 800d944:	2301      	movs	r3, #1
 800d946:	e063      	b.n	800da10 <xQueueGenericSend+0x1f8>
            } else {
                if (xTicksToWait == (TickType_t)0) {
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d103      	bne.n	800d956 <xQueueGenericSend+0x13e>
                    /* The queue was full and no block time is specified (or
                    the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800d94e:	f002 f85d 	bl	800fa0c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                    the function. */
                    traceQUEUE_SEND_FAILED(pxQueue);
                    return errQUEUE_FULL;
 800d952:	2300      	movs	r3, #0
 800d954:	e05c      	b.n	800da10 <xQueueGenericSend+0x1f8>
                } else if (xEntryTimeSet == pdFALSE) {
 800d956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d106      	bne.n	800d96a <xQueueGenericSend+0x152>
                    /* The queue was full and a block time was specified so
                    configure the timeout structure. */
                    vTaskInternalSetTimeOutState(&xTimeOut);
 800d95c:	f107 0314 	add.w	r3, r7, #20
 800d960:	4618      	mov	r0, r3
 800d962:	f001 f917 	bl	800eb94 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800d966:	2301      	movs	r3, #1
 800d968:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800d96a:	f002 f84f 	bl	800fa0c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
        now the critical section has been exited. */

        vTaskSuspendAll();
 800d96e:	f000 fe89 	bl	800e684 <vTaskSuspendAll>
        prvLockQueue(pxQueue);
 800d972:	f002 f819 	bl	800f9a8 <vPortEnterCritical>
 800d976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d978:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d97c:	b25b      	sxtb	r3, r3
 800d97e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d982:	d103      	bne.n	800d98c <xQueueGenericSend+0x174>
 800d984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d986:	2200      	movs	r2, #0
 800d988:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d98c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d98e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d992:	b25b      	sxtb	r3, r3
 800d994:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d998:	d103      	bne.n	800d9a2 <xQueueGenericSend+0x18a>
 800d99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d99c:	2200      	movs	r2, #0
 800d99e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d9a2:	f002 f833 	bl	800fa0c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
 800d9a6:	1d3a      	adds	r2, r7, #4
 800d9a8:	f107 0314 	add.w	r3, r7, #20
 800d9ac:	4611      	mov	r1, r2
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f001 f906 	bl	800ebc0 <xTaskCheckForTimeOut>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d124      	bne.n	800da04 <xQueueGenericSend+0x1ec>
            if (prvIsQueueFull(pxQueue) != pdFALSE) {
 800d9ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d9bc:	f000 fa98 	bl	800def0 <prvIsQueueFull>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d018      	beq.n	800d9f8 <xQueueGenericSend+0x1e0>
                traceBLOCKING_ON_QUEUE_SEND(pxQueue);
                vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend), xTicksToWait);
 800d9c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9c8:	3310      	adds	r3, #16
 800d9ca:	687a      	ldr	r2, [r7, #4]
 800d9cc:	4611      	mov	r1, r2
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f001 f82a 	bl	800ea28 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                event list.  It is possible that interrupts occurring now
                remove this task from the event list again - but as the
                scheduler is suspended the task will go onto the pending
                ready last instead of the actual ready list. */
                prvUnlockQueue(pxQueue);
 800d9d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d9d6:	f000 fa23 	bl	800de20 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                ready list into the ready list - so it is feasible that this
                task is already in a ready list before it yields - in which
                case the yield will not cause a context switch unless there
                is also a higher priority task in the pending ready list. */
                if (xTaskResumeAll() == pdFALSE) {
 800d9da:	f000 fe61 	bl	800e6a0 <xTaskResumeAll>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	f47f af7c 	bne.w	800d8de <xQueueGenericSend+0xc6>
                    portYIELD_WITHIN_API();
 800d9e6:	4b0c      	ldr	r3, [pc, #48]	@ (800da18 <xQueueGenericSend+0x200>)
 800d9e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9ec:	601a      	str	r2, [r3, #0]
 800d9ee:	f3bf 8f4f 	dsb	sy
 800d9f2:	f3bf 8f6f 	isb	sy
 800d9f6:	e772      	b.n	800d8de <xQueueGenericSend+0xc6>
                }
            } else {
                /* Try again. */
                prvUnlockQueue(pxQueue);
 800d9f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d9fa:	f000 fa11 	bl	800de20 <prvUnlockQueue>
                (void)xTaskResumeAll();
 800d9fe:	f000 fe4f 	bl	800e6a0 <xTaskResumeAll>
 800da02:	e76c      	b.n	800d8de <xQueueGenericSend+0xc6>
            }
        } else {
            /* The timeout has expired. */
            prvUnlockQueue(pxQueue);
 800da04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da06:	f000 fa0b 	bl	800de20 <prvUnlockQueue>
            (void)xTaskResumeAll();
 800da0a:	f000 fe49 	bl	800e6a0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED(pxQueue);
            return errQUEUE_FULL;
 800da0e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800da10:	4618      	mov	r0, r3
 800da12:	3738      	adds	r7, #56	@ 0x38
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}
 800da18:	e000ed04 	.word	0xe000ed04

0800da1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR(QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition) {
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b090      	sub	sp, #64	@ 0x40
 800da20:	af00      	add	r7, sp, #0
 800da22:	60f8      	str	r0, [r7, #12]
 800da24:	60b9      	str	r1, [r7, #8]
 800da26:	607a      	str	r2, [r7, #4]
 800da28:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT(pxQueue);
 800da2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da30:	2b00      	cmp	r3, #0
 800da32:	d10b      	bne.n	800da4c <xQueueGenericSendFromISR+0x30>
    __asm volatile("	mov %0, %1												\n"
 800da34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da38:	f383 8811 	msr	BASEPRI, r3
 800da3c:	f3bf 8f6f 	isb	sy
 800da40:	f3bf 8f4f 	dsb	sy
 800da44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800da46:	bf00      	nop
 800da48:	bf00      	nop
 800da4a:	e7fd      	b.n	800da48 <xQueueGenericSendFromISR+0x2c>
    configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d103      	bne.n	800da5a <xQueueGenericSendFromISR+0x3e>
 800da52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da56:	2b00      	cmp	r3, #0
 800da58:	d101      	bne.n	800da5e <xQueueGenericSendFromISR+0x42>
 800da5a:	2301      	movs	r3, #1
 800da5c:	e000      	b.n	800da60 <xQueueGenericSendFromISR+0x44>
 800da5e:	2300      	movs	r3, #0
 800da60:	2b00      	cmp	r3, #0
 800da62:	d10b      	bne.n	800da7c <xQueueGenericSendFromISR+0x60>
    __asm volatile("	mov %0, %1												\n"
 800da64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da68:	f383 8811 	msr	BASEPRI, r3
 800da6c:	f3bf 8f6f 	isb	sy
 800da70:	f3bf 8f4f 	dsb	sy
 800da74:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800da76:	bf00      	nop
 800da78:	bf00      	nop
 800da7a:	e7fd      	b.n	800da78 <xQueueGenericSendFromISR+0x5c>
    configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	2b02      	cmp	r3, #2
 800da80:	d103      	bne.n	800da8a <xQueueGenericSendFromISR+0x6e>
 800da82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da86:	2b01      	cmp	r3, #1
 800da88:	d101      	bne.n	800da8e <xQueueGenericSendFromISR+0x72>
 800da8a:	2301      	movs	r3, #1
 800da8c:	e000      	b.n	800da90 <xQueueGenericSendFromISR+0x74>
 800da8e:	2300      	movs	r3, #0
 800da90:	2b00      	cmp	r3, #0
 800da92:	d10b      	bne.n	800daac <xQueueGenericSendFromISR+0x90>
    __asm volatile("	mov %0, %1												\n"
 800da94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da98:	f383 8811 	msr	BASEPRI, r3
 800da9c:	f3bf 8f6f 	isb	sy
 800daa0:	f3bf 8f4f 	dsb	sy
 800daa4:	623b      	str	r3, [r7, #32]
}
 800daa6:	bf00      	nop
 800daa8:	bf00      	nop
 800daaa:	e7fd      	b.n	800daa8 <xQueueGenericSendFromISR+0x8c>
    that have been assigned a priority at or (logically) below the maximum
    system call	interrupt priority.  FreeRTOS maintains a separate interrupt
    safe API to ensure interrupt entry is as fast and as simple as possible.
    More information (albeit Cortex-M specific) is provided on the following
    link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800daac:	f002 f85c 	bl	800fb68 <vPortValidateInterruptPriority>
/*-----------------------------------------------------------*/

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI(void) {
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile("	mrs %0, basepri											\n"
 800dab0:	f3ef 8211 	mrs	r2, BASEPRI
 800dab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dab8:	f383 8811 	msr	BASEPRI, r3
 800dabc:	f3bf 8f6f 	isb	sy
 800dac0:	f3bf 8f4f 	dsb	sy
 800dac4:	61fa      	str	r2, [r7, #28]
 800dac6:	61bb      	str	r3, [r7, #24]
                   : "i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
                   : "memory");

    /* This return will not be reached but is necessary to prevent compiler
    warnings. */
    return ulOriginalBASEPRI;
 800dac8:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
    in the queue.  Also don't directly wake a task that was blocked on a queue
    read, instead return a flag to say whether a context switch is required or
    not (i.e. has a task with a higher priority than us been woken by this
    post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800daca:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
 800dacc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dace:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dad4:	429a      	cmp	r2, r3
 800dad6:	d302      	bcc.n	800dade <xQueueGenericSendFromISR+0xc2>
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	2b02      	cmp	r3, #2
 800dadc:	d12f      	bne.n	800db3e <xQueueGenericSendFromISR+0x122>
            const int8_t cTxLock = pxQueue->cTxLock;
 800dade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dae0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dae4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daec:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
            semaphore or mutex.  That means prvCopyDataToQueue() cannot result
            in a task disinheriting a priority and prvCopyDataToQueue() can be
            called here even though the disinherit function does not check if
            the scheduler is suspended before accessing the ready lists. */
            (void)prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
 800daee:	683a      	ldr	r2, [r7, #0]
 800daf0:	68b9      	ldr	r1, [r7, #8]
 800daf2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800daf4:	f000 f912 	bl	800dd1c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
            be done when the queue is unlocked later. */
            if (cTxLock == queueUNLOCKED) {
 800daf8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800dafc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db00:	d112      	bne.n	800db28 <xQueueGenericSendFromISR+0x10c>
                        }
                    }
                }
#else  /* configUSE_QUEUE_SETS */
                {
                    if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
 800db02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db06:	2b00      	cmp	r3, #0
 800db08:	d016      	beq.n	800db38 <xQueueGenericSendFromISR+0x11c>
                        if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
 800db0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db0c:	3324      	adds	r3, #36	@ 0x24
 800db0e:	4618      	mov	r0, r3
 800db10:	f000 ffdc 	bl	800eacc <xTaskRemoveFromEventList>
 800db14:	4603      	mov	r3, r0
 800db16:	2b00      	cmp	r3, #0
 800db18:	d00e      	beq.n	800db38 <xQueueGenericSendFromISR+0x11c>
                            /* The task waiting has a higher priority so record that a
                            context	switch is required. */
                            if (pxHigherPriorityTaskWoken != NULL) {
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d00b      	beq.n	800db38 <xQueueGenericSendFromISR+0x11c>
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2201      	movs	r2, #1
 800db24:	601a      	str	r2, [r3, #0]
 800db26:	e007      	b.n	800db38 <xQueueGenericSendFromISR+0x11c>
                }
#endif /* configUSE_QUEUE_SETS */
            } else {
                /* Increment the lock count so the task that unlocks the queue
                knows that data was posted while it was locked. */
                pxQueue->cTxLock = (int8_t)(cTxLock + 1);
 800db28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800db2c:	3301      	adds	r3, #1
 800db2e:	b2db      	uxtb	r3, r3
 800db30:	b25a      	sxtb	r2, r3
 800db32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 800db38:	2301      	movs	r3, #1
 800db3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
 800db3c:	e001      	b.n	800db42 <xQueueGenericSendFromISR+0x126>
        } else {
            traceQUEUE_SEND_FROM_ISR_FAILED(pxQueue);
            xReturn = errQUEUE_FULL;
 800db3e:	2300      	movs	r3, #0
 800db40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800db42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db44:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue) {
    __asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	f383 8811 	msr	BASEPRI, r3
}
 800db4c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);

    return xReturn;
 800db4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800db50:	4618      	mov	r0, r3
 800db52:	3740      	adds	r7, #64	@ 0x40
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}

0800db58 <xQueueReceive>:

    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive(QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait) {
 800db58:	b580      	push	{r7, lr}
 800db5a:	b08c      	sub	sp, #48	@ 0x30
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	60f8      	str	r0, [r7, #12]
 800db60:	60b9      	str	r1, [r7, #8]
 800db62:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800db64:	2300      	movs	r3, #0
 800db66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT((pxQueue));
 800db6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d10b      	bne.n	800db8a <xQueueReceive+0x32>
    __asm volatile("	mov %0, %1												\n"
 800db72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db76:	f383 8811 	msr	BASEPRI, r3
 800db7a:	f3bf 8f6f 	isb	sy
 800db7e:	f3bf 8f4f 	dsb	sy
 800db82:	623b      	str	r3, [r7, #32]
}
 800db84:	bf00      	nop
 800db86:	bf00      	nop
 800db88:	e7fd      	b.n	800db86 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
    is zero (so no data is copied into the buffer. */
    configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d103      	bne.n	800db98 <xQueueReceive+0x40>
 800db90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db94:	2b00      	cmp	r3, #0
 800db96:	d101      	bne.n	800db9c <xQueueReceive+0x44>
 800db98:	2301      	movs	r3, #1
 800db9a:	e000      	b.n	800db9e <xQueueReceive+0x46>
 800db9c:	2300      	movs	r3, #0
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d10b      	bne.n	800dbba <xQueueReceive+0x62>
    __asm volatile("	mov %0, %1												\n"
 800dba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dba6:	f383 8811 	msr	BASEPRI, r3
 800dbaa:	f3bf 8f6f 	isb	sy
 800dbae:	f3bf 8f4f 	dsb	sy
 800dbb2:	61fb      	str	r3, [r7, #28]
}
 800dbb4:	bf00      	nop
 800dbb6:	bf00      	nop
 800dbb8:	e7fd      	b.n	800dbb6 <xQueueReceive+0x5e>

/* Cannot block if the scheduler is suspended. */
#if ((INCLUDE_xTaskGetSchedulerState == 1) || (configUSE_TIMERS == 1))
    { configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0))); }
 800dbba:	f001 f947 	bl	800ee4c <xTaskGetSchedulerState>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d102      	bne.n	800dbca <xQueueReceive+0x72>
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d101      	bne.n	800dbce <xQueueReceive+0x76>
 800dbca:	2301      	movs	r3, #1
 800dbcc:	e000      	b.n	800dbd0 <xQueueReceive+0x78>
 800dbce:	2300      	movs	r3, #0
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d10b      	bne.n	800dbec <xQueueReceive+0x94>
    __asm volatile("	mov %0, %1												\n"
 800dbd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbd8:	f383 8811 	msr	BASEPRI, r3
 800dbdc:	f3bf 8f6f 	isb	sy
 800dbe0:	f3bf 8f4f 	dsb	sy
 800dbe4:	61bb      	str	r3, [r7, #24]
}
 800dbe6:	bf00      	nop
 800dbe8:	bf00      	nop
 800dbea:	e7fd      	b.n	800dbe8 <xQueueReceive+0x90>

    /*lint -save -e904  This function relaxes the coding standard somewhat to
    allow return statements within the function itself.  This is done in the
    interest of execution time efficiency. */
    for (;;) {
        taskENTER_CRITICAL();
 800dbec:	f001 fedc 	bl	800f9a8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dbf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbf4:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
            must be the highest priority task wanting to access the queue. */
            if (uxMessagesWaiting > (UBaseType_t)0) {
 800dbf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d01f      	beq.n	800dc3c <xQueueReceive+0xe4>
                /* Data available, remove one item. */
                prvCopyDataFromQueue(pxQueue, pvBuffer);
 800dbfc:	68b9      	ldr	r1, [r7, #8]
 800dbfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dc00:	f000 f8e8 	bl	800ddd4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE(pxQueue);
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - (UBaseType_t)1;
 800dc04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc06:	1e5a      	subs	r2, r3, #1
 800dc08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc0a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                post to the queue?  If so, unblock the highest priority waiting
                task. */
                if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
 800dc0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc0e:	691b      	ldr	r3, [r3, #16]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d00f      	beq.n	800dc34 <xQueueReceive+0xdc>
                    if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
 800dc14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc16:	3310      	adds	r3, #16
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f000 ff57 	bl	800eacc <xTaskRemoveFromEventList>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d007      	beq.n	800dc34 <xQueueReceive+0xdc>
                        queueYIELD_IF_USING_PREEMPTION();
 800dc24:	4b3c      	ldr	r3, [pc, #240]	@ (800dd18 <xQueueReceive+0x1c0>)
 800dc26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc2a:	601a      	str	r2, [r3, #0]
 800dc2c:	f3bf 8f4f 	dsb	sy
 800dc30:	f3bf 8f6f 	isb	sy
                    }
                } else {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800dc34:	f001 feea 	bl	800fa0c <vPortExitCritical>
                return pdPASS;
 800dc38:	2301      	movs	r3, #1
 800dc3a:	e069      	b.n	800dd10 <xQueueReceive+0x1b8>
            } else {
                if (xTicksToWait == (TickType_t)0) {
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d103      	bne.n	800dc4a <xQueueReceive+0xf2>
                    /* The queue was empty and no block time is specified (or
                    the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800dc42:	f001 fee3 	bl	800fa0c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED(pxQueue);
                    return errQUEUE_EMPTY;
 800dc46:	2300      	movs	r3, #0
 800dc48:	e062      	b.n	800dd10 <xQueueReceive+0x1b8>
                } else if (xEntryTimeSet == pdFALSE) {
 800dc4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d106      	bne.n	800dc5e <xQueueReceive+0x106>
                    /* The queue was empty and a block time was specified so
                    configure the timeout structure. */
                    vTaskInternalSetTimeOutState(&xTimeOut);
 800dc50:	f107 0310 	add.w	r3, r7, #16
 800dc54:	4618      	mov	r0, r3
 800dc56:	f000 ff9d 	bl	800eb94 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800dc5a:	2301      	movs	r3, #1
 800dc5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800dc5e:	f001 fed5 	bl	800fa0c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
        now the critical section has been exited. */

        vTaskSuspendAll();
 800dc62:	f000 fd0f 	bl	800e684 <vTaskSuspendAll>
        prvLockQueue(pxQueue);
 800dc66:	f001 fe9f 	bl	800f9a8 <vPortEnterCritical>
 800dc6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dc70:	b25b      	sxtb	r3, r3
 800dc72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc76:	d103      	bne.n	800dc80 <xQueueReceive+0x128>
 800dc78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dc80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dc86:	b25b      	sxtb	r3, r3
 800dc88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc8c:	d103      	bne.n	800dc96 <xQueueReceive+0x13e>
 800dc8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc90:	2200      	movs	r2, #0
 800dc92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dc96:	f001 feb9 	bl	800fa0c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
 800dc9a:	1d3a      	adds	r2, r7, #4
 800dc9c:	f107 0310 	add.w	r3, r7, #16
 800dca0:	4611      	mov	r1, r2
 800dca2:	4618      	mov	r0, r3
 800dca4:	f000 ff8c 	bl	800ebc0 <xTaskCheckForTimeOut>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d123      	bne.n	800dcf6 <xQueueReceive+0x19e>
            /* The timeout has not expired.  If the queue is still empty place
            the task on the list of tasks waiting to receive from the queue. */
            if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
 800dcae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dcb0:	f000 f908 	bl	800dec4 <prvIsQueueEmpty>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d017      	beq.n	800dcea <xQueueReceive+0x192>
                traceBLOCKING_ON_QUEUE_RECEIVE(pxQueue);
                vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
 800dcba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcbc:	3324      	adds	r3, #36	@ 0x24
 800dcbe:	687a      	ldr	r2, [r7, #4]
 800dcc0:	4611      	mov	r1, r2
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f000 feb0 	bl	800ea28 <vTaskPlaceOnEventList>
                prvUnlockQueue(pxQueue);
 800dcc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dcca:	f000 f8a9 	bl	800de20 <prvUnlockQueue>
                if (xTaskResumeAll() == pdFALSE) {
 800dcce:	f000 fce7 	bl	800e6a0 <xTaskResumeAll>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d189      	bne.n	800dbec <xQueueReceive+0x94>
                    portYIELD_WITHIN_API();
 800dcd8:	4b0f      	ldr	r3, [pc, #60]	@ (800dd18 <xQueueReceive+0x1c0>)
 800dcda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dcde:	601a      	str	r2, [r3, #0]
 800dce0:	f3bf 8f4f 	dsb	sy
 800dce4:	f3bf 8f6f 	isb	sy
 800dce8:	e780      	b.n	800dbec <xQueueReceive+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } else {
                /* The queue contains data again.  Loop back to try and read the
                data. */
                prvUnlockQueue(pxQueue);
 800dcea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dcec:	f000 f898 	bl	800de20 <prvUnlockQueue>
                (void)xTaskResumeAll();
 800dcf0:	f000 fcd6 	bl	800e6a0 <xTaskResumeAll>
 800dcf4:	e77a      	b.n	800dbec <xQueueReceive+0x94>
            }
        } else {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
            back and attempt to read the data. */
            prvUnlockQueue(pxQueue);
 800dcf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dcf8:	f000 f892 	bl	800de20 <prvUnlockQueue>
            (void)xTaskResumeAll();
 800dcfc:	f000 fcd0 	bl	800e6a0 <xTaskResumeAll>

            if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
 800dd00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd02:	f000 f8df 	bl	800dec4 <prvIsQueueEmpty>
 800dd06:	4603      	mov	r3, r0
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	f43f af6f 	beq.w	800dbec <xQueueReceive+0x94>
                traceQUEUE_RECEIVE_FAILED(pxQueue);
                return errQUEUE_EMPTY;
 800dd0e:	2300      	movs	r3, #0
            } else {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800dd10:	4618      	mov	r0, r3
 800dd12:	3730      	adds	r7, #48	@ 0x30
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}
 800dd18:	e000ed04 	.word	0xe000ed04

0800dd1c <prvCopyDataToQueue>:
}

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue(Queue_t * const pxQueue, const void * pvItemToQueue, const BaseType_t xPosition) {
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b086      	sub	sp, #24
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	60f8      	str	r0, [r7, #12]
 800dd24:	60b9      	str	r1, [r7, #8]
 800dd26:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800dd28:	2300      	movs	r3, #0
 800dd2a:	613b      	str	r3, [r7, #16]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd30:	617b      	str	r3, [r7, #20]

    if (pxQueue->uxItemSize == (UBaseType_t)0) {
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d043      	beq.n	800ddc2 <prvCopyDataToQueue+0xa6>
            } else {
                mtCOVERAGE_TEST_MARKER();
            }
        }
#endif /* configUSE_MUTEXES */
    } else if (xPosition == queueSEND_TO_BACK) {
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d119      	bne.n	800dd74 <prvCopyDataToQueue+0x58>
        (void)memcpy((void *)pxQueue->pcWriteTo, pvItemToQueue, (size_t)pxQueue->uxItemSize); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	6858      	ldr	r0, [r3, #4]
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd48:	461a      	mov	r2, r3
 800dd4a:	68b9      	ldr	r1, [r7, #8]
 800dd4c:	f003 fb5b 	bl	8011406 <memcpy>
                                                                                                 memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                            /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	685a      	ldr	r2, [r3, #4]
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd58:	441a      	add	r2, r3
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	605a      	str	r2, [r3, #4]
        if (pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail)                                   /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	685a      	ldr	r2, [r3, #4]
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	689b      	ldr	r3, [r3, #8]
 800dd66:	429a      	cmp	r2, r3
 800dd68:	d32b      	bcc.n	800ddc2 <prvCopyDataToQueue+0xa6>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	681a      	ldr	r2, [r3, #0]
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	605a      	str	r2, [r3, #4]
 800dd72:	e026      	b.n	800ddc2 <prvCopyDataToQueue+0xa6>
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    } else {
        (void)memcpy((void *)pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, (size_t)pxQueue->uxItemSize); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	68d8      	ldr	r0, [r3, #12]
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd7c:	461a      	mov	r2, r3
 800dd7e:	68b9      	ldr	r1, [r7, #8]
 800dd80:	f003 fb41 	bl	8011406 <memcpy>
                                                                                                           no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	68da      	ldr	r2, [r3, #12]
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd8c:	425b      	negs	r3, r3
 800dd8e:	441a      	add	r2, r3
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	60da      	str	r2, [r3, #12]
        if (pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	68da      	ldr	r2, [r3, #12]
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d207      	bcs.n	800ddb0 <prvCopyDataToQueue+0x94>
        {
            pxQueue->u.xQueue.pcReadFrom = (pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize);
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	689a      	ldr	r2, [r3, #8]
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dda8:	425b      	negs	r3, r3
 800ddaa:	441a      	add	r2, r3
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	60da      	str	r2, [r3, #12]
        } else {
            mtCOVERAGE_TEST_MARKER();
        }

        if (xPosition == queueOVERWRITE) {
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2b02      	cmp	r3, #2
 800ddb4:	d105      	bne.n	800ddc2 <prvCopyDataToQueue+0xa6>
            if (uxMessagesWaiting > (UBaseType_t)0) {
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d002      	beq.n	800ddc2 <prvCopyDataToQueue+0xa6>
                /* An item is not being added but overwritten, so subtract
                one from the recorded number of items in the queue so when
                one is added again below the number of recorded items remains
                correct. */
                --uxMessagesWaiting;
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	3b01      	subs	r3, #1
 800ddc0:	617b      	str	r3, [r7, #20]
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t)1;
 800ddc2:	697b      	ldr	r3, [r7, #20]
 800ddc4:	1c5a      	adds	r2, r3, #1
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800ddca:	693b      	ldr	r3, [r7, #16]
}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	3718      	adds	r7, #24
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}

0800ddd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue(Queue_t * const pxQueue, void * const pvBuffer) {
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b082      	sub	sp, #8
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
 800dddc:	6039      	str	r1, [r7, #0]
    if (pxQueue->uxItemSize != (UBaseType_t)0) {
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d018      	beq.n	800de18 <prvCopyDataFromQueue+0x44>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;          /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	68da      	ldr	r2, [r3, #12]
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddee:	441a      	add	r2, r3
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	60da      	str	r2, [r3, #12]
        if (pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	68da      	ldr	r2, [r3, #12]
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	689b      	ldr	r3, [r3, #8]
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	d303      	bcc.n	800de08 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681a      	ldr	r2, [r3, #0]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	60da      	str	r2, [r3, #12]
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
        (void)memcpy((void *)pvBuffer, (void *)pxQueue->u.xQueue.pcReadFrom,
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	68d9      	ldr	r1, [r3, #12]
                     (size_t)pxQueue->uxItemSize); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        (void)memcpy((void *)pvBuffer, (void *)pxQueue->u.xQueue.pcReadFrom,
 800de10:	461a      	mov	r2, r3
 800de12:	6838      	ldr	r0, [r7, #0]
 800de14:	f003 faf7 	bl	8011406 <memcpy>
                                                      required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    }
}
 800de18:	bf00      	nop
 800de1a:	3708      	adds	r7, #8
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}

0800de20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue(Queue_t * const pxQueue) {
 800de20:	b580      	push	{r7, lr}
 800de22:	b084      	sub	sp, #16
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
    removed from the queue while the queue was locked.  When a queue is
    locked items can be added or removed, but the event lists cannot be
    updated. */
    taskENTER_CRITICAL();
 800de28:	f001 fdbe 	bl	800f9a8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800de32:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while (cTxLock > queueLOCKED_UNMODIFIED) {
 800de34:	e011      	b.n	800de5a <prvUnlockQueue+0x3a>
            }
#else  /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                the pending ready list as the scheduler is still suspended. */
                if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d012      	beq.n	800de64 <prvUnlockQueue+0x44>
                    if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	3324      	adds	r3, #36	@ 0x24
 800de42:	4618      	mov	r0, r3
 800de44:	f000 fe42 	bl	800eacc <xTaskRemoveFromEventList>
 800de48:	4603      	mov	r3, r0
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d001      	beq.n	800de52 <prvUnlockQueue+0x32>
                        /* The task waiting has a higher priority so record that
                        a context switch is required. */
                        vTaskMissedYield();
 800de4e:	f000 ff1b 	bl	800ec88 <vTaskMissedYield>
                    break;
                }
            }
#endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800de52:	7bfb      	ldrb	r3, [r7, #15]
 800de54:	3b01      	subs	r3, #1
 800de56:	b2db      	uxtb	r3, r3
 800de58:	73fb      	strb	r3, [r7, #15]
        while (cTxLock > queueLOCKED_UNMODIFIED) {
 800de5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	dce9      	bgt.n	800de36 <prvUnlockQueue+0x16>
 800de62:	e000      	b.n	800de66 <prvUnlockQueue+0x46>
                    break;
 800de64:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	22ff      	movs	r2, #255	@ 0xff
 800de6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800de6e:	f001 fdcd 	bl	800fa0c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800de72:	f001 fd99 	bl	800f9a8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800de7c:	73bb      	strb	r3, [r7, #14]

        while (cRxLock > queueLOCKED_UNMODIFIED) {
 800de7e:	e011      	b.n	800dea4 <prvUnlockQueue+0x84>
            if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	691b      	ldr	r3, [r3, #16]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d012      	beq.n	800deae <prvUnlockQueue+0x8e>
                if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	3310      	adds	r3, #16
 800de8c:	4618      	mov	r0, r3
 800de8e:	f000 fe1d 	bl	800eacc <xTaskRemoveFromEventList>
 800de92:	4603      	mov	r3, r0
 800de94:	2b00      	cmp	r3, #0
 800de96:	d001      	beq.n	800de9c <prvUnlockQueue+0x7c>
                    vTaskMissedYield();
 800de98:	f000 fef6 	bl	800ec88 <vTaskMissedYield>
                } else {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800de9c:	7bbb      	ldrb	r3, [r7, #14]
 800de9e:	3b01      	subs	r3, #1
 800dea0:	b2db      	uxtb	r3, r3
 800dea2:	73bb      	strb	r3, [r7, #14]
        while (cRxLock > queueLOCKED_UNMODIFIED) {
 800dea4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	dce9      	bgt.n	800de80 <prvUnlockQueue+0x60>
 800deac:	e000      	b.n	800deb0 <prvUnlockQueue+0x90>
            } else {
                break;
 800deae:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	22ff      	movs	r2, #255	@ 0xff
 800deb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800deb8:	f001 fda8 	bl	800fa0c <vPortExitCritical>
}
 800debc:	bf00      	nop
 800debe:	3710      	adds	r7, #16
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}

0800dec4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty(const Queue_t * pxQueue) {
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b084      	sub	sp, #16
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800decc:	f001 fd6c 	bl	800f9a8 <vPortEnterCritical>
    {
        if (pxQueue->uxMessagesWaiting == (UBaseType_t)0) {
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d102      	bne.n	800dede <prvIsQueueEmpty+0x1a>
            xReturn = pdTRUE;
 800ded8:	2301      	movs	r3, #1
 800deda:	60fb      	str	r3, [r7, #12]
 800dedc:	e001      	b.n	800dee2 <prvIsQueueEmpty+0x1e>
        } else {
            xReturn = pdFALSE;
 800dede:	2300      	movs	r3, #0
 800dee0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800dee2:	f001 fd93 	bl	800fa0c <vPortExitCritical>

    return xReturn;
 800dee6:	68fb      	ldr	r3, [r7, #12]
}
 800dee8:	4618      	mov	r0, r3
 800deea:	3710      	adds	r7, #16
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}

0800def0 <prvIsQueueFull>:

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull(const Queue_t * pxQueue) {
 800def0:	b580      	push	{r7, lr}
 800def2:	b084      	sub	sp, #16
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800def8:	f001 fd56 	bl	800f9a8 <vPortEnterCritical>
    {
        if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df04:	429a      	cmp	r2, r3
 800df06:	d102      	bne.n	800df0e <prvIsQueueFull+0x1e>
            xReturn = pdTRUE;
 800df08:	2301      	movs	r3, #1
 800df0a:	60fb      	str	r3, [r7, #12]
 800df0c:	e001      	b.n	800df12 <prvIsQueueFull+0x22>
        } else {
            xReturn = pdFALSE;
 800df0e:	2300      	movs	r3, #0
 800df10:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800df12:	f001 fd7b 	bl	800fa0c <vPortExitCritical>

    return xReturn;
 800df16:	68fb      	ldr	r3, [r7, #12]
}
 800df18:	4618      	mov	r0, r3
 800df1a:	3710      	adds	r7, #16
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}

0800df20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if (configQUEUE_REGISTRY_SIZE > 0)

void vQueueAddToRegistry(QueueHandle_t xQueue, const char * pcQueueName) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800df20:	b480      	push	{r7}
 800df22:	b085      	sub	sp, #20
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
 800df28:	6039      	str	r1, [r7, #0]
    UBaseType_t ux;

    /* See if there is an empty space in the registry.  A NULL name denotes
    a free slot. */
    for (ux = (UBaseType_t)0U; ux < (UBaseType_t)configQUEUE_REGISTRY_SIZE; ux++) {
 800df2a:	2300      	movs	r3, #0
 800df2c:	60fb      	str	r3, [r7, #12]
 800df2e:	e014      	b.n	800df5a <vQueueAddToRegistry+0x3a>
        if (xQueueRegistry[ux].pcQueueName == NULL) {
 800df30:	4a0f      	ldr	r2, [pc, #60]	@ (800df70 <vQueueAddToRegistry+0x50>)
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d10b      	bne.n	800df54 <vQueueAddToRegistry+0x34>
            /* Store the information on this queue. */
            xQueueRegistry[ux].pcQueueName = pcQueueName;
 800df3c:	490c      	ldr	r1, [pc, #48]	@ (800df70 <vQueueAddToRegistry+0x50>)
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	683a      	ldr	r2, [r7, #0]
 800df42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
            xQueueRegistry[ux].xHandle = xQueue;
 800df46:	4a0a      	ldr	r2, [pc, #40]	@ (800df70 <vQueueAddToRegistry+0x50>)
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	00db      	lsls	r3, r3, #3
 800df4c:	4413      	add	r3, r2
 800df4e:	687a      	ldr	r2, [r7, #4]
 800df50:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD(xQueue, pcQueueName);
            break;
 800df52:	e006      	b.n	800df62 <vQueueAddToRegistry+0x42>
    for (ux = (UBaseType_t)0U; ux < (UBaseType_t)configQUEUE_REGISTRY_SIZE; ux++) {
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	3301      	adds	r3, #1
 800df58:	60fb      	str	r3, [r7, #12]
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	2b07      	cmp	r3, #7
 800df5e:	d9e7      	bls.n	800df30 <vQueueAddToRegistry+0x10>
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800df60:	bf00      	nop
 800df62:	bf00      	nop
 800df64:	3714      	adds	r7, #20
 800df66:	46bd      	mov	sp, r7
 800df68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6c:	4770      	bx	lr
 800df6e:	bf00      	nop
 800df70:	20000d74 	.word	0x20000d74

0800df74 <vQueueWaitForMessageRestricted>:
#endif /* configQUEUE_REGISTRY_SIZE */
/*-----------------------------------------------------------*/

#if (configUSE_TIMERS == 1)

void vQueueWaitForMessageRestricted(QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely) {
 800df74:	b580      	push	{r7, lr}
 800df76:	b086      	sub	sp, #24
 800df78:	af00      	add	r7, sp, #0
 800df7a:	60f8      	str	r0, [r7, #12]
 800df7c:	60b9      	str	r1, [r7, #8]
 800df7e:	607a      	str	r2, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	617b      	str	r3, [r7, #20]
    will not actually cause the task to block, just place it on a blocked
    list.  It will not block until the scheduler is unlocked - at which
    time a yield will be performed.  If an item is added to the queue while
    the queue is locked, and the calling task blocks on the queue, then the
    calling task will be immediately unblocked when the queue is unlocked. */
    prvLockQueue(pxQueue);
 800df84:	f001 fd10 	bl	800f9a8 <vPortEnterCritical>
 800df88:	697b      	ldr	r3, [r7, #20]
 800df8a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800df8e:	b25b      	sxtb	r3, r3
 800df90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df94:	d103      	bne.n	800df9e <vQueueWaitForMessageRestricted+0x2a>
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	2200      	movs	r2, #0
 800df9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dfa4:	b25b      	sxtb	r3, r3
 800dfa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfaa:	d103      	bne.n	800dfb4 <vQueueWaitForMessageRestricted+0x40>
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	2200      	movs	r2, #0
 800dfb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dfb4:	f001 fd2a 	bl	800fa0c <vPortExitCritical>
    if (pxQueue->uxMessagesWaiting == (UBaseType_t)0U) {
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d106      	bne.n	800dfce <vQueueWaitForMessageRestricted+0x5a>
        /* There is nothing in the queue, block for the specified period. */
        vTaskPlaceOnEventListRestricted(&(pxQueue->xTasksWaitingToReceive), xTicksToWait, xWaitIndefinitely);
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	3324      	adds	r3, #36	@ 0x24
 800dfc4:	687a      	ldr	r2, [r7, #4]
 800dfc6:	68b9      	ldr	r1, [r7, #8]
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f000 fd53 	bl	800ea74 <vTaskPlaceOnEventListRestricted>
    } else {
        mtCOVERAGE_TEST_MARKER();
    }
    prvUnlockQueue(pxQueue);
 800dfce:	6978      	ldr	r0, [r7, #20]
 800dfd0:	f7ff ff26 	bl	800de20 <prvUnlockQueue>
}
 800dfd4:	bf00      	nop
 800dfd6:	3718      	adds	r7, #24
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}

0800dfdc <xTaskCreateStatic>:
/*-----------------------------------------------------------*/

#if (configSUPPORT_STATIC_ALLOCATION == 1)

TaskHandle_t xTaskCreateStatic(TaskFunction_t pxTaskCode, const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                               const uint32_t ulStackDepth, void * const pvParameters, UBaseType_t uxPriority, StackType_t * const puxStackBuffer, StaticTask_t * const pxTaskBuffer) {
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b08e      	sub	sp, #56	@ 0x38
 800dfe0:	af04      	add	r7, sp, #16
 800dfe2:	60f8      	str	r0, [r7, #12]
 800dfe4:	60b9      	str	r1, [r7, #8]
 800dfe6:	607a      	str	r2, [r7, #4]
 800dfe8:	603b      	str	r3, [r7, #0]
    TCB_t * pxNewTCB;
    TaskHandle_t xReturn;

    configASSERT(puxStackBuffer != NULL);
 800dfea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d10b      	bne.n	800e008 <xTaskCreateStatic+0x2c>
    __asm volatile("	mov %0, %1												\n"
 800dff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dff4:	f383 8811 	msr	BASEPRI, r3
 800dff8:	f3bf 8f6f 	isb	sy
 800dffc:	f3bf 8f4f 	dsb	sy
 800e000:	623b      	str	r3, [r7, #32]
}
 800e002:	bf00      	nop
 800e004:	bf00      	nop
 800e006:	e7fd      	b.n	800e004 <xTaskCreateStatic+0x28>
    configASSERT(pxTaskBuffer != NULL);
 800e008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d10b      	bne.n	800e026 <xTaskCreateStatic+0x4a>
    __asm volatile("	mov %0, %1												\n"
 800e00e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e012:	f383 8811 	msr	BASEPRI, r3
 800e016:	f3bf 8f6f 	isb	sy
 800e01a:	f3bf 8f4f 	dsb	sy
 800e01e:	61fb      	str	r3, [r7, #28]
}
 800e020:	bf00      	nop
 800e022:	bf00      	nop
 800e024:	e7fd      	b.n	800e022 <xTaskCreateStatic+0x46>
#if (configASSERT_DEFINED == 1)
    {
        /* Sanity check that the size of the structure used to declare a
        variable of type StaticTask_t equals the size of the real task
        structure. */
        volatile size_t xSize = sizeof(StaticTask_t);
 800e026:	237c      	movs	r3, #124	@ 0x7c
 800e028:	613b      	str	r3, [r7, #16]
        configASSERT(xSize == sizeof(TCB_t));
 800e02a:	693b      	ldr	r3, [r7, #16]
 800e02c:	2b7c      	cmp	r3, #124	@ 0x7c
 800e02e:	d00b      	beq.n	800e048 <xTaskCreateStatic+0x6c>
    __asm volatile("	mov %0, %1												\n"
 800e030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e034:	f383 8811 	msr	BASEPRI, r3
 800e038:	f3bf 8f6f 	isb	sy
 800e03c:	f3bf 8f4f 	dsb	sy
 800e040:	61bb      	str	r3, [r7, #24]
}
 800e042:	bf00      	nop
 800e044:	bf00      	nop
 800e046:	e7fd      	b.n	800e044 <xTaskCreateStatic+0x68>
        (void)xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e048:	693b      	ldr	r3, [r7, #16]
    }
#endif /* configASSERT_DEFINED */

    if ((pxTaskBuffer != NULL) && (puxStackBuffer != NULL)) {
 800e04a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d01e      	beq.n	800e08e <xTaskCreateStatic+0xb2>
 800e050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e052:	2b00      	cmp	r3, #0
 800e054:	d01b      	beq.n	800e08e <xTaskCreateStatic+0xb2>
        /* The memory used for the task's TCB and stack are passed into this
        function - use them. */
        pxNewTCB = (TCB_t *)pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e058:	627b      	str	r3, [r7, #36]	@ 0x24
        pxNewTCB->pxStack = (StackType_t *)puxStackBuffer;
 800e05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e05c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e05e:	631a      	str	r2, [r3, #48]	@ 0x30

#if (tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* Tasks can be created statically or dynamically, so note this
            task was created statically in case the task is later deleted. */
            pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e062:	2202      	movs	r2, #2
 800e064:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
        }
#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

        prvInitialiseNewTask(pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL);
 800e068:	2300      	movs	r3, #0
 800e06a:	9303      	str	r3, [sp, #12]
 800e06c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e06e:	9302      	str	r3, [sp, #8]
 800e070:	f107 0314 	add.w	r3, r7, #20
 800e074:	9301      	str	r3, [sp, #4]
 800e076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e078:	9300      	str	r3, [sp, #0]
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	687a      	ldr	r2, [r7, #4]
 800e07e:	68b9      	ldr	r1, [r7, #8]
 800e080:	68f8      	ldr	r0, [r7, #12]
 800e082:	f000 f850 	bl	800e126 <prvInitialiseNewTask>
        prvAddNewTaskToReadyList(pxNewTCB);
 800e086:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e088:	f000 f8d0 	bl	800e22c <prvAddNewTaskToReadyList>
 800e08c:	e001      	b.n	800e092 <xTaskCreateStatic+0xb6>
    } else {
        xReturn = NULL;
 800e08e:	2300      	movs	r3, #0
 800e090:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800e092:	697b      	ldr	r3, [r7, #20]
}
 800e094:	4618      	mov	r0, r3
 800e096:	3728      	adds	r7, #40	@ 0x28
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}

0800e09c <xTaskCreate>:
/*-----------------------------------------------------------*/

#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)

BaseType_t xTaskCreate(TaskFunction_t pxTaskCode, const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                       const configSTACK_DEPTH_TYPE usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask) {
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b08c      	sub	sp, #48	@ 0x30
 800e0a0:	af04      	add	r7, sp, #16
 800e0a2:	60f8      	str	r0, [r7, #12]
 800e0a4:	60b9      	str	r1, [r7, #8]
 800e0a6:	603b      	str	r3, [r7, #0]
 800e0a8:	4613      	mov	r3, r2
 800e0aa:	80fb      	strh	r3, [r7, #6]
#else  /* portSTACK_GROWTH */
    {
        StackType_t * pxStack;

        /* Allocate space for the stack used by the task being created. */
        pxStack = pvPortMalloc((((size_t)usStackDepth) * sizeof(StackType_t))); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e0ac:	88fb      	ldrh	r3, [r7, #6]
 800e0ae:	009b      	lsls	r3, r3, #2
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f001 fd9b 	bl	800fbec <pvPortMalloc>
 800e0b6:	6178      	str	r0, [r7, #20]

        if (pxStack != NULL) {
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d00e      	beq.n	800e0dc <xTaskCreate+0x40>
            /* Allocate space for the TCB. */
            pxNewTCB = (TCB_t *)pvPortMalloc(sizeof(TCB_t)); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e0be:	207c      	movs	r0, #124	@ 0x7c
 800e0c0:	f001 fd94 	bl	800fbec <pvPortMalloc>
 800e0c4:	61f8      	str	r0, [r7, #28]

            if (pxNewTCB != NULL) {
 800e0c6:	69fb      	ldr	r3, [r7, #28]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d003      	beq.n	800e0d4 <xTaskCreate+0x38>
                /* Store the stack location in the TCB. */
                pxNewTCB->pxStack = pxStack;
 800e0cc:	69fb      	ldr	r3, [r7, #28]
 800e0ce:	697a      	ldr	r2, [r7, #20]
 800e0d0:	631a      	str	r2, [r3, #48]	@ 0x30
 800e0d2:	e005      	b.n	800e0e0 <xTaskCreate+0x44>
            } else {
                /* The stack cannot be used as the TCB was not created.  Free
                it again. */
                vPortFree(pxStack);
 800e0d4:	6978      	ldr	r0, [r7, #20]
 800e0d6:	f001 fd9b 	bl	800fc10 <vPortFree>
 800e0da:	e001      	b.n	800e0e0 <xTaskCreate+0x44>
            }
        } else {
            pxNewTCB = NULL;
 800e0dc:	2300      	movs	r3, #0
 800e0de:	61fb      	str	r3, [r7, #28]
        }
    }
#endif /* portSTACK_GROWTH */

    if (pxNewTCB != NULL) {
 800e0e0:	69fb      	ldr	r3, [r7, #28]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d017      	beq.n	800e116 <xTaskCreate+0x7a>
#if (tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
        {
            /* Tasks can be created statically or dynamically, so note this
            task was created dynamically in case it is later deleted. */
            pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e0e6:	69fb      	ldr	r3, [r7, #28]
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
        }
#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

        prvInitialiseNewTask(pxTaskCode, pcName, (uint32_t)usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL);
 800e0ee:	88fa      	ldrh	r2, [r7, #6]
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	9303      	str	r3, [sp, #12]
 800e0f4:	69fb      	ldr	r3, [r7, #28]
 800e0f6:	9302      	str	r3, [sp, #8]
 800e0f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0fa:	9301      	str	r3, [sp, #4]
 800e0fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0fe:	9300      	str	r3, [sp, #0]
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	68b9      	ldr	r1, [r7, #8]
 800e104:	68f8      	ldr	r0, [r7, #12]
 800e106:	f000 f80e 	bl	800e126 <prvInitialiseNewTask>
        prvAddNewTaskToReadyList(pxNewTCB);
 800e10a:	69f8      	ldr	r0, [r7, #28]
 800e10c:	f000 f88e 	bl	800e22c <prvAddNewTaskToReadyList>
        xReturn = pdPASS;
 800e110:	2301      	movs	r3, #1
 800e112:	61bb      	str	r3, [r7, #24]
 800e114:	e002      	b.n	800e11c <xTaskCreate+0x80>
    } else {
        xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e116:	f04f 33ff 	mov.w	r3, #4294967295
 800e11a:	61bb      	str	r3, [r7, #24]
    }

    return xReturn;
 800e11c:	69bb      	ldr	r3, [r7, #24]
}
 800e11e:	4618      	mov	r0, r3
 800e120:	3720      	adds	r7, #32
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}

0800e126 <prvInitialiseNewTask>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewTask(TaskFunction_t pxTaskCode, const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                 const uint32_t ulStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, TCB_t * pxNewTCB, const MemoryRegion_t * const xRegions) {
 800e126:	b580      	push	{r7, lr}
 800e128:	b088      	sub	sp, #32
 800e12a:	af00      	add	r7, sp, #0
 800e12c:	60f8      	str	r0, [r7, #12]
 800e12e:	60b9      	str	r1, [r7, #8]
 800e130:	607a      	str	r2, [r7, #4]
 800e132:	603b      	str	r3, [r7, #0]
grows from high memory to low (as per the 80x86) or vice versa.
portSTACK_GROWTH is used to make the result positive or negative as required
by the port. */
#if (portSTACK_GROWTH < 0)
    {
        pxTopOfStack = &(pxNewTCB->pxStack[ulStackDepth - (uint32_t)1]);
 800e134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e136:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e13e:	3b01      	subs	r3, #1
 800e140:	009b      	lsls	r3, r3, #2
 800e142:	4413      	add	r3, r2
 800e144:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = (StackType_t *)(((portPOINTER_SIZE_TYPE)pxTopOfStack) & (~((portPOINTER_SIZE_TYPE)portBYTE_ALIGNMENT_MASK))); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size
 800e146:	69bb      	ldr	r3, [r7, #24]
 800e148:	f023 0307 	bic.w	r3, r3, #7
 800e14c:	61bb      	str	r3, [r7, #24]
                                                                                                                                        differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT((((portPOINTER_SIZE_TYPE)pxTopOfStack & (portPOINTER_SIZE_TYPE)portBYTE_ALIGNMENT_MASK) == 0UL));
 800e14e:	69bb      	ldr	r3, [r7, #24]
 800e150:	f003 0307 	and.w	r3, r3, #7
 800e154:	2b00      	cmp	r3, #0
 800e156:	d00b      	beq.n	800e170 <prvInitialiseNewTask+0x4a>
    __asm volatile("	mov %0, %1												\n"
 800e158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e15c:	f383 8811 	msr	BASEPRI, r3
 800e160:	f3bf 8f6f 	isb	sy
 800e164:	f3bf 8f4f 	dsb	sy
 800e168:	617b      	str	r3, [r7, #20]
}
 800e16a:	bf00      	nop
 800e16c:	bf00      	nop
 800e16e:	e7fd      	b.n	800e16c <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + (ulStackDepth - (uint32_t)1);
    }
#endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if (pcName != NULL) {
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d01f      	beq.n	800e1b6 <prvInitialiseNewTask+0x90>
        for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
 800e176:	2300      	movs	r3, #0
 800e178:	61fb      	str	r3, [r7, #28]
 800e17a:	e012      	b.n	800e1a2 <prvInitialiseNewTask+0x7c>
            pxNewTCB->pcTaskName[x] = pcName[x];
 800e17c:	68ba      	ldr	r2, [r7, #8]
 800e17e:	69fb      	ldr	r3, [r7, #28]
 800e180:	4413      	add	r3, r2
 800e182:	7819      	ldrb	r1, [r3, #0]
 800e184:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e186:	69fb      	ldr	r3, [r7, #28]
 800e188:	4413      	add	r3, r2
 800e18a:	3334      	adds	r3, #52	@ 0x34
 800e18c:	460a      	mov	r2, r1
 800e18e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
            configMAX_TASK_NAME_LEN characters just in case the memory after the
            string is not accessible (extremely unlikely). */
            if (pcName[x] == (char)0x00) {
 800e190:	68ba      	ldr	r2, [r7, #8]
 800e192:	69fb      	ldr	r3, [r7, #28]
 800e194:	4413      	add	r3, r2
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d006      	beq.n	800e1aa <prvInitialiseNewTask+0x84>
        for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
 800e19c:	69fb      	ldr	r3, [r7, #28]
 800e19e:	3301      	adds	r3, #1
 800e1a0:	61fb      	str	r3, [r7, #28]
 800e1a2:	69fb      	ldr	r3, [r7, #28]
 800e1a4:	2b3f      	cmp	r3, #63	@ 0x3f
 800e1a6:	d9e9      	bls.n	800e17c <prvInitialiseNewTask+0x56>
 800e1a8:	e000      	b.n	800e1ac <prvInitialiseNewTask+0x86>
                break;
 800e1aa:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
        was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[configMAX_TASK_NAME_LEN - 1] = '\0';
 800e1ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
 800e1b4:	e003      	b.n	800e1be <prvInitialiseNewTask+0x98>
    } else {
        /* The task has not been given a name, so just ensure there is a NULL
        terminator when it is read out. */
        pxNewTCB->pcTaskName[0] = 0x00;
 800e1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
    remove the privilege bit if one is present. */
    if (uxPriority >= (UBaseType_t)configMAX_PRIORITIES) {
 800e1be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1c0:	2b06      	cmp	r3, #6
 800e1c2:	d901      	bls.n	800e1c8 <prvInitialiseNewTask+0xa2>
        uxPriority = (UBaseType_t)configMAX_PRIORITIES - (UBaseType_t)1U;
 800e1c4:	2306      	movs	r3, #6
 800e1c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    } else {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800e1c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e1cc:	62da      	str	r2, [r3, #44]	@ 0x2c
        pxNewTCB->uxBasePriority = uxPriority;
        pxNewTCB->uxMutexesHeld = 0;
    }
#endif /* configUSE_MUTEXES */

    vListInitialiseItem(&(pxNewTCB->xStateListItem));
 800e1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1d0:	3304      	adds	r3, #4
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f7ff f986 	bl	800d4e4 <vListInitialiseItem>
    vListInitialiseItem(&(pxNewTCB->xEventListItem));
 800e1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1da:	3318      	adds	r3, #24
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f7ff f981 	bl	800d4e4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
    back to	the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER(&(pxNewTCB->xStateListItem), pxNewTCB);
 800e1e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e1e6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE(&(pxNewTCB->xEventListItem), (TickType_t)configMAX_PRIORITIES - (TickType_t)uxPriority); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1ea:	f1c3 0207 	rsb	r2, r3, #7
 800e1ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1f0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER(&(pxNewTCB->xEventListItem), pxNewTCB);
 800e1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e1f6:	625a      	str	r2, [r3, #36]	@ 0x24
    }
#endif

#if (configUSE_TASK_NOTIFICATIONS == 1)
    {
        pxNewTCB->ulNotifiedValue = 0;
 800e1f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	675a      	str	r2, [r3, #116]	@ 0x74
        pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e1fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e200:	2200      	movs	r2, #0
 800e202:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
            }
#endif /* portSTACK_GROWTH */
        }
#else  /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters);
 800e206:	683a      	ldr	r2, [r7, #0]
 800e208:	68f9      	ldr	r1, [r7, #12]
 800e20a:	69b8      	ldr	r0, [r7, #24]
 800e20c:	f001 fa9e 	bl	800f74c <pxPortInitialiseStack>
 800e210:	4602      	mov	r2, r0
 800e212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e214:	601a      	str	r2, [r3, #0]
        }
#endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
#endif /* portUSING_MPU_WRAPPERS */

    if (pxCreatedTask != NULL) {
 800e216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d002      	beq.n	800e222 <prvInitialiseNewTask+0xfc>
        /* Pass the handle out in an anonymous way.  The handle can be used to
        change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = (TaskHandle_t)pxNewTCB;
 800e21c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e21e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e220:	601a      	str	r2, [r3, #0]
    } else {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800e222:	bf00      	nop
 800e224:	3720      	adds	r7, #32
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}
	...

0800e22c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList(TCB_t * pxNewTCB) {
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b082      	sub	sp, #8
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
    updated. */
    taskENTER_CRITICAL();
 800e234:	f001 fbb8 	bl	800f9a8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800e238:	4b2a      	ldr	r3, [pc, #168]	@ (800e2e4 <prvAddNewTaskToReadyList+0xb8>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	3301      	adds	r3, #1
 800e23e:	4a29      	ldr	r2, [pc, #164]	@ (800e2e4 <prvAddNewTaskToReadyList+0xb8>)
 800e240:	6013      	str	r3, [r2, #0]
        if (pxCurrentTCB == NULL) {
 800e242:	4b29      	ldr	r3, [pc, #164]	@ (800e2e8 <prvAddNewTaskToReadyList+0xbc>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d109      	bne.n	800e25e <prvAddNewTaskToReadyList+0x32>
            /* There are no other tasks, or all the other tasks are in
            the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800e24a:	4a27      	ldr	r2, [pc, #156]	@ (800e2e8 <prvAddNewTaskToReadyList+0xbc>)
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6013      	str	r3, [r2, #0]

            if (uxCurrentNumberOfTasks == (UBaseType_t)1) {
 800e250:	4b24      	ldr	r3, [pc, #144]	@ (800e2e4 <prvAddNewTaskToReadyList+0xb8>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	2b01      	cmp	r3, #1
 800e256:	d110      	bne.n	800e27a <prvAddNewTaskToReadyList+0x4e>
                /* This is the first task to be created so do the preliminary
                initialisation required.  We will not recover if this call
                fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800e258:	f000 fd3a 	bl	800ecd0 <prvInitialiseTaskLists>
 800e25c:	e00d      	b.n	800e27a <prvAddNewTaskToReadyList+0x4e>
            }
        } else {
            /* If the scheduler is not already running, make this task the
            current task if it is the highest priority task to be created
            so far. */
            if (xSchedulerRunning == pdFALSE) {
 800e25e:	4b23      	ldr	r3, [pc, #140]	@ (800e2ec <prvAddNewTaskToReadyList+0xc0>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d109      	bne.n	800e27a <prvAddNewTaskToReadyList+0x4e>
                if (pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority) {
 800e266:	4b20      	ldr	r3, [pc, #128]	@ (800e2e8 <prvAddNewTaskToReadyList+0xbc>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e270:	429a      	cmp	r2, r3
 800e272:	d802      	bhi.n	800e27a <prvAddNewTaskToReadyList+0x4e>
                    pxCurrentTCB = pxNewTCB;
 800e274:	4a1c      	ldr	r2, [pc, #112]	@ (800e2e8 <prvAddNewTaskToReadyList+0xbc>)
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	6013      	str	r3, [r2, #0]
            } else {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800e27a:	4b1d      	ldr	r3, [pc, #116]	@ (800e2f0 <prvAddNewTaskToReadyList+0xc4>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	3301      	adds	r3, #1
 800e280:	4a1b      	ldr	r2, [pc, #108]	@ (800e2f0 <prvAddNewTaskToReadyList+0xc4>)
 800e282:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
#endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE(pxNewTCB);

        prvAddTaskToReadyList(pxNewTCB);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e288:	2201      	movs	r2, #1
 800e28a:	409a      	lsls	r2, r3
 800e28c:	4b19      	ldr	r3, [pc, #100]	@ (800e2f4 <prvAddNewTaskToReadyList+0xc8>)
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	4313      	orrs	r3, r2
 800e292:	4a18      	ldr	r2, [pc, #96]	@ (800e2f4 <prvAddNewTaskToReadyList+0xc8>)
 800e294:	6013      	str	r3, [r2, #0]
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e29a:	4613      	mov	r3, r2
 800e29c:	009b      	lsls	r3, r3, #2
 800e29e:	4413      	add	r3, r2
 800e2a0:	009b      	lsls	r3, r3, #2
 800e2a2:	4a15      	ldr	r2, [pc, #84]	@ (800e2f8 <prvAddNewTaskToReadyList+0xcc>)
 800e2a4:	441a      	add	r2, r3
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	3304      	adds	r3, #4
 800e2aa:	4619      	mov	r1, r3
 800e2ac:	4610      	mov	r0, r2
 800e2ae:	f7ff f926 	bl	800d4fe <vListInsertEnd>

        portSETUP_TCB(pxNewTCB);
    }
    taskEXIT_CRITICAL();
 800e2b2:	f001 fbab 	bl	800fa0c <vPortExitCritical>

    if (xSchedulerRunning != pdFALSE) {
 800e2b6:	4b0d      	ldr	r3, [pc, #52]	@ (800e2ec <prvAddNewTaskToReadyList+0xc0>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d00e      	beq.n	800e2dc <prvAddNewTaskToReadyList+0xb0>
        /* If the created task is of a higher priority than the current task
        then it should run now. */
        if (pxCurrentTCB->uxPriority < pxNewTCB->uxPriority) {
 800e2be:	4b0a      	ldr	r3, [pc, #40]	@ (800e2e8 <prvAddNewTaskToReadyList+0xbc>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d207      	bcs.n	800e2dc <prvAddNewTaskToReadyList+0xb0>
            taskYIELD_IF_USING_PREEMPTION();
 800e2cc:	4b0b      	ldr	r3, [pc, #44]	@ (800e2fc <prvAddNewTaskToReadyList+0xd0>)
 800e2ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e2d2:	601a      	str	r2, [r3, #0]
 800e2d4:	f3bf 8f4f 	dsb	sy
 800e2d8:	f3bf 8f6f 	isb	sy
            mtCOVERAGE_TEST_MARKER();
        }
    } else {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800e2dc:	bf00      	nop
 800e2de:	3708      	adds	r7, #8
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	bd80      	pop	{r7, pc}
 800e2e4:	20000eb4 	.word	0x20000eb4
 800e2e8:	20000db4 	.word	0x20000db4
 800e2ec:	20000ec0 	.word	0x20000ec0
 800e2f0:	20000ed0 	.word	0x20000ed0
 800e2f4:	20000ebc 	.word	0x20000ebc
 800e2f8:	20000db8 	.word	0x20000db8
 800e2fc:	e000ed04 	.word	0xe000ed04

0800e300 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if (INCLUDE_vTaskDelete == 1)

void vTaskDelete(TaskHandle_t xTaskToDelete) {
 800e300:	b580      	push	{r7, lr}
 800e302:	b084      	sub	sp, #16
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
    TCB_t * pxTCB;

    taskENTER_CRITICAL();
 800e308:	f001 fb4e 	bl	800f9a8 <vPortEnterCritical>
    {
        /* If null is passed in here then it is the calling task that is
        being deleted. */
        pxTCB = prvGetTCBFromHandle(xTaskToDelete);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d102      	bne.n	800e318 <vTaskDelete+0x18>
 800e312:	4b39      	ldr	r3, [pc, #228]	@ (800e3f8 <vTaskDelete+0xf8>)
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	e000      	b.n	800e31a <vTaskDelete+0x1a>
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	60fb      	str	r3, [r7, #12]

        /* Remove task from the ready/delayed list. */
        if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	3304      	adds	r3, #4
 800e320:	4618      	mov	r0, r3
 800e322:	f7ff f949 	bl	800d5b8 <uxListRemove>
 800e326:	4603      	mov	r3, r0
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d115      	bne.n	800e358 <vTaskDelete+0x58>
            taskRESET_READY_PRIORITY(pxTCB->uxPriority);
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e330:	4932      	ldr	r1, [pc, #200]	@ (800e3fc <vTaskDelete+0xfc>)
 800e332:	4613      	mov	r3, r2
 800e334:	009b      	lsls	r3, r3, #2
 800e336:	4413      	add	r3, r2
 800e338:	009b      	lsls	r3, r3, #2
 800e33a:	440b      	add	r3, r1
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d10a      	bne.n	800e358 <vTaskDelete+0x58>
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e346:	2201      	movs	r2, #1
 800e348:	fa02 f303 	lsl.w	r3, r2, r3
 800e34c:	43da      	mvns	r2, r3
 800e34e:	4b2c      	ldr	r3, [pc, #176]	@ (800e400 <vTaskDelete+0x100>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	4013      	ands	r3, r2
 800e354:	4a2a      	ldr	r2, [pc, #168]	@ (800e400 <vTaskDelete+0x100>)
 800e356:	6013      	str	r3, [r2, #0]
        } else {
            mtCOVERAGE_TEST_MARKER();
        }

        /* Is the task waiting on an event also? */
        if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d004      	beq.n	800e36a <vTaskDelete+0x6a>
            (void)uxListRemove(&(pxTCB->xEventListItem));
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	3318      	adds	r3, #24
 800e364:	4618      	mov	r0, r3
 800e366:	f7ff f927 	bl	800d5b8 <uxListRemove>

        /* Increment the uxTaskNumber also so kernel aware debuggers can
        detect that the task lists need re-generating.  This is done before
        portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
        not return. */
        uxTaskNumber++;
 800e36a:	4b26      	ldr	r3, [pc, #152]	@ (800e404 <vTaskDelete+0x104>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	3301      	adds	r3, #1
 800e370:	4a24      	ldr	r2, [pc, #144]	@ (800e404 <vTaskDelete+0x104>)
 800e372:	6013      	str	r3, [r2, #0]

        if (pxTCB == pxCurrentTCB) {
 800e374:	4b20      	ldr	r3, [pc, #128]	@ (800e3f8 <vTaskDelete+0xf8>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	68fa      	ldr	r2, [r7, #12]
 800e37a:	429a      	cmp	r2, r3
 800e37c:	d10b      	bne.n	800e396 <vTaskDelete+0x96>
            /* A task is deleting itself.  This cannot complete within the
            task itself, as a context switch to another task is required.
            Place the task in the termination list.  The idle task will
            check the termination list and free up any memory allocated by
            the scheduler for the TCB and stack of the deleted task. */
            vListInsertEnd(&xTasksWaitingTermination, &(pxTCB->xStateListItem));
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	3304      	adds	r3, #4
 800e382:	4619      	mov	r1, r3
 800e384:	4820      	ldr	r0, [pc, #128]	@ (800e408 <vTaskDelete+0x108>)
 800e386:	f7ff f8ba 	bl	800d4fe <vListInsertEnd>

            /* Increment the ucTasksDeleted variable so the idle task knows
            there is a task that has been deleted and that it should therefore
            check the xTasksWaitingTermination list. */
            ++uxDeletedTasksWaitingCleanUp;
 800e38a:	4b20      	ldr	r3, [pc, #128]	@ (800e40c <vTaskDelete+0x10c>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	3301      	adds	r3, #1
 800e390:	4a1e      	ldr	r2, [pc, #120]	@ (800e40c <vTaskDelete+0x10c>)
 800e392:	6013      	str	r3, [r2, #0]
 800e394:	e009      	b.n	800e3aa <vTaskDelete+0xaa>
            after which it is not possible to yield away from this task -
            hence xYieldPending is used to latch that a context switch is
            required. */
            portPRE_TASK_DELETE_HOOK(pxTCB, &xYieldPending);
        } else {
            --uxCurrentNumberOfTasks;
 800e396:	4b1e      	ldr	r3, [pc, #120]	@ (800e410 <vTaskDelete+0x110>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	3b01      	subs	r3, #1
 800e39c:	4a1c      	ldr	r2, [pc, #112]	@ (800e410 <vTaskDelete+0x110>)
 800e39e:	6013      	str	r3, [r2, #0]
            traceTASK_DELETE(pxTCB);
            prvDeleteTCB(pxTCB);
 800e3a0:	68f8      	ldr	r0, [r7, #12]
 800e3a2:	f000 fd03 	bl	800edac <prvDeleteTCB>

            /* Reset the next expected unblock time in case it referred to
            the task that has just been deleted. */
            prvResetNextTaskUnblockTime();
 800e3a6:	f000 fd31 	bl	800ee0c <prvResetNextTaskUnblockTime>
        }
    }
    taskEXIT_CRITICAL();
 800e3aa:	f001 fb2f 	bl	800fa0c <vPortExitCritical>

    /* Force a reschedule if it is the currently running task that has just
    been deleted. */
    if (xSchedulerRunning != pdFALSE) {
 800e3ae:	4b19      	ldr	r3, [pc, #100]	@ (800e414 <vTaskDelete+0x114>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d01c      	beq.n	800e3f0 <vTaskDelete+0xf0>
        if (pxTCB == pxCurrentTCB) {
 800e3b6:	4b10      	ldr	r3, [pc, #64]	@ (800e3f8 <vTaskDelete+0xf8>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	68fa      	ldr	r2, [r7, #12]
 800e3bc:	429a      	cmp	r2, r3
 800e3be:	d117      	bne.n	800e3f0 <vTaskDelete+0xf0>
            configASSERT(uxSchedulerSuspended == 0);
 800e3c0:	4b15      	ldr	r3, [pc, #84]	@ (800e418 <vTaskDelete+0x118>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d00b      	beq.n	800e3e0 <vTaskDelete+0xe0>
    __asm volatile("	mov %0, %1												\n"
 800e3c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3cc:	f383 8811 	msr	BASEPRI, r3
 800e3d0:	f3bf 8f6f 	isb	sy
 800e3d4:	f3bf 8f4f 	dsb	sy
 800e3d8:	60bb      	str	r3, [r7, #8]
}
 800e3da:	bf00      	nop
 800e3dc:	bf00      	nop
 800e3de:	e7fd      	b.n	800e3dc <vTaskDelete+0xdc>
            portYIELD_WITHIN_API();
 800e3e0:	4b0e      	ldr	r3, [pc, #56]	@ (800e41c <vTaskDelete+0x11c>)
 800e3e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e3e6:	601a      	str	r2, [r3, #0]
 800e3e8:	f3bf 8f4f 	dsb	sy
 800e3ec:	f3bf 8f6f 	isb	sy
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800e3f0:	bf00      	nop
 800e3f2:	3710      	adds	r7, #16
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}
 800e3f8:	20000db4 	.word	0x20000db4
 800e3fc:	20000db8 	.word	0x20000db8
 800e400:	20000ebc 	.word	0x20000ebc
 800e404:	20000ed0 	.word	0x20000ed0
 800e408:	20000e88 	.word	0x20000e88
 800e40c:	20000e9c 	.word	0x20000e9c
 800e410:	20000eb4 	.word	0x20000eb4
 800e414:	20000ec0 	.word	0x20000ec0
 800e418:	20000edc 	.word	0x20000edc
 800e41c:	e000ed04 	.word	0xe000ed04

0800e420 <vTaskDelay>:
#endif /* INCLUDE_vTaskDelayUntil */
/*-----------------------------------------------------------*/

#if (INCLUDE_vTaskDelay == 1)

void vTaskDelay(const TickType_t xTicksToDelay) {
 800e420:	b580      	push	{r7, lr}
 800e422:	b084      	sub	sp, #16
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
    BaseType_t xAlreadyYielded = pdFALSE;
 800e428:	2300      	movs	r3, #0
 800e42a:	60fb      	str	r3, [r7, #12]

    /* A delay time of zero just forces a reschedule. */
    if (xTicksToDelay > (TickType_t)0U) {
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d018      	beq.n	800e464 <vTaskDelay+0x44>
        configASSERT(uxSchedulerSuspended == 0);
 800e432:	4b14      	ldr	r3, [pc, #80]	@ (800e484 <vTaskDelay+0x64>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d00b      	beq.n	800e452 <vTaskDelay+0x32>
    __asm volatile("	mov %0, %1												\n"
 800e43a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e43e:	f383 8811 	msr	BASEPRI, r3
 800e442:	f3bf 8f6f 	isb	sy
 800e446:	f3bf 8f4f 	dsb	sy
 800e44a:	60bb      	str	r3, [r7, #8]
}
 800e44c:	bf00      	nop
 800e44e:	bf00      	nop
 800e450:	e7fd      	b.n	800e44e <vTaskDelay+0x2e>
        vTaskSuspendAll();
 800e452:	f000 f917 	bl	800e684 <vTaskSuspendAll>
            list or removed from the blocked list until the scheduler
            is resumed.

            This task cannot be in an event list as it is the currently
            executing task. */
            prvAddCurrentTaskToDelayedList(xTicksToDelay, pdFALSE);
 800e456:	2100      	movs	r1, #0
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f000 fd15 	bl	800ee88 <prvAddCurrentTaskToDelayedList>
        }
        xAlreadyYielded = xTaskResumeAll();
 800e45e:	f000 f91f 	bl	800e6a0 <xTaskResumeAll>
 800e462:	60f8      	str	r0, [r7, #12]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Force a reschedule if xTaskResumeAll has not already done so, we may
    have put ourselves to sleep. */
    if (xAlreadyYielded == pdFALSE) {
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d107      	bne.n	800e47a <vTaskDelay+0x5a>
        portYIELD_WITHIN_API();
 800e46a:	4b07      	ldr	r3, [pc, #28]	@ (800e488 <vTaskDelay+0x68>)
 800e46c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e470:	601a      	str	r2, [r3, #0]
 800e472:	f3bf 8f4f 	dsb	sy
 800e476:	f3bf 8f6f 	isb	sy
    } else {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800e47a:	bf00      	nop
 800e47c:	3710      	adds	r7, #16
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}
 800e482:	bf00      	nop
 800e484:	20000edc 	.word	0x20000edc
 800e488:	e000ed04 	.word	0xe000ed04

0800e48c <vTaskSuspend>:
#endif /* INCLUDE_vTaskPrioritySet */
/*-----------------------------------------------------------*/

#if (INCLUDE_vTaskSuspend == 1)

void vTaskSuspend(TaskHandle_t xTaskToSuspend) {
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b084      	sub	sp, #16
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
    TCB_t * pxTCB;

    taskENTER_CRITICAL();
 800e494:	f001 fa88 	bl	800f9a8 <vPortEnterCritical>
    {
        /* If null is passed in here then it is the running task that is
        being suspended. */
        pxTCB = prvGetTCBFromHandle(xTaskToSuspend);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d102      	bne.n	800e4a4 <vTaskSuspend+0x18>
 800e49e:	4b3d      	ldr	r3, [pc, #244]	@ (800e594 <vTaskSuspend+0x108>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	e000      	b.n	800e4a6 <vTaskSuspend+0x1a>
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	60fb      	str	r3, [r7, #12]

        traceTASK_SUSPEND(pxTCB);

        /* Remove task from the ready/delayed list and place in the
        suspended list. */
        if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	3304      	adds	r3, #4
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f7ff f883 	bl	800d5b8 <uxListRemove>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d115      	bne.n	800e4e4 <vTaskSuspend+0x58>
            taskRESET_READY_PRIORITY(pxTCB->uxPriority);
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4bc:	4936      	ldr	r1, [pc, #216]	@ (800e598 <vTaskSuspend+0x10c>)
 800e4be:	4613      	mov	r3, r2
 800e4c0:	009b      	lsls	r3, r3, #2
 800e4c2:	4413      	add	r3, r2
 800e4c4:	009b      	lsls	r3, r3, #2
 800e4c6:	440b      	add	r3, r1
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d10a      	bne.n	800e4e4 <vTaskSuspend+0x58>
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4d2:	2201      	movs	r2, #1
 800e4d4:	fa02 f303 	lsl.w	r3, r2, r3
 800e4d8:	43da      	mvns	r2, r3
 800e4da:	4b30      	ldr	r3, [pc, #192]	@ (800e59c <vTaskSuspend+0x110>)
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	4013      	ands	r3, r2
 800e4e0:	4a2e      	ldr	r2, [pc, #184]	@ (800e59c <vTaskSuspend+0x110>)
 800e4e2:	6013      	str	r3, [r2, #0]
        } else {
            mtCOVERAGE_TEST_MARKER();
        }

        /* Is the task waiting on an event also? */
        if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d004      	beq.n	800e4f6 <vTaskSuspend+0x6a>
            (void)uxListRemove(&(pxTCB->xEventListItem));
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	3318      	adds	r3, #24
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f7ff f861 	bl	800d5b8 <uxListRemove>
        } else {
            mtCOVERAGE_TEST_MARKER();
        }

        vListInsertEnd(&xSuspendedTaskList, &(pxTCB->xStateListItem));
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	3304      	adds	r3, #4
 800e4fa:	4619      	mov	r1, r3
 800e4fc:	4828      	ldr	r0, [pc, #160]	@ (800e5a0 <vTaskSuspend+0x114>)
 800e4fe:	f7fe fffe 	bl	800d4fe <vListInsertEnd>

#if (configUSE_TASK_NOTIFICATIONS == 1)
        {
            if (pxTCB->ucNotifyState == taskWAITING_NOTIFICATION) {
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 800e508:	b2db      	uxtb	r3, r3
 800e50a:	2b01      	cmp	r3, #1
 800e50c:	d103      	bne.n	800e516 <vTaskSuspend+0x8a>
                /* The task was blocked to wait for a notification, but is
                now suspended, so no notification was received. */
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	2200      	movs	r2, #0
 800e512:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
            }
        }
#endif
    }
    taskEXIT_CRITICAL();
 800e516:	f001 fa79 	bl	800fa0c <vPortExitCritical>

    if (xSchedulerRunning != pdFALSE) {
 800e51a:	4b22      	ldr	r3, [pc, #136]	@ (800e5a4 <vTaskSuspend+0x118>)
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d005      	beq.n	800e52e <vTaskSuspend+0xa2>
        /* Reset the next expected unblock time in case it referred to the
        task that is now in the Suspended state. */
        taskENTER_CRITICAL();
 800e522:	f001 fa41 	bl	800f9a8 <vPortEnterCritical>
        { prvResetNextTaskUnblockTime(); }
 800e526:	f000 fc71 	bl	800ee0c <prvResetNextTaskUnblockTime>
        taskEXIT_CRITICAL();
 800e52a:	f001 fa6f 	bl	800fa0c <vPortExitCritical>
    } else {
        mtCOVERAGE_TEST_MARKER();
    }

    if (pxTCB == pxCurrentTCB) {
 800e52e:	4b19      	ldr	r3, [pc, #100]	@ (800e594 <vTaskSuspend+0x108>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	68fa      	ldr	r2, [r7, #12]
 800e534:	429a      	cmp	r2, r3
 800e536:	d128      	bne.n	800e58a <vTaskSuspend+0xfe>
        if (xSchedulerRunning != pdFALSE) {
 800e538:	4b1a      	ldr	r3, [pc, #104]	@ (800e5a4 <vTaskSuspend+0x118>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d018      	beq.n	800e572 <vTaskSuspend+0xe6>
            /* The current task has just been suspended. */
            configASSERT(uxSchedulerSuspended == 0);
 800e540:	4b19      	ldr	r3, [pc, #100]	@ (800e5a8 <vTaskSuspend+0x11c>)
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d00b      	beq.n	800e560 <vTaskSuspend+0xd4>
    __asm volatile("	mov %0, %1												\n"
 800e548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e54c:	f383 8811 	msr	BASEPRI, r3
 800e550:	f3bf 8f6f 	isb	sy
 800e554:	f3bf 8f4f 	dsb	sy
 800e558:	60bb      	str	r3, [r7, #8]
}
 800e55a:	bf00      	nop
 800e55c:	bf00      	nop
 800e55e:	e7fd      	b.n	800e55c <vTaskSuspend+0xd0>
            portYIELD_WITHIN_API();
 800e560:	4b12      	ldr	r3, [pc, #72]	@ (800e5ac <vTaskSuspend+0x120>)
 800e562:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e566:	601a      	str	r2, [r3, #0]
 800e568:	f3bf 8f4f 	dsb	sy
 800e56c:	f3bf 8f6f 	isb	sy
            }
        }
    } else {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800e570:	e00b      	b.n	800e58a <vTaskSuspend+0xfe>
            if (listCURRENT_LIST_LENGTH(&xSuspendedTaskList) == uxCurrentNumberOfTasks) /*lint !e931 Right has no side effect, just volatile. */
 800e572:	4b0b      	ldr	r3, [pc, #44]	@ (800e5a0 <vTaskSuspend+0x114>)
 800e574:	681a      	ldr	r2, [r3, #0]
 800e576:	4b0e      	ldr	r3, [pc, #56]	@ (800e5b0 <vTaskSuspend+0x124>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	429a      	cmp	r2, r3
 800e57c:	d103      	bne.n	800e586 <vTaskSuspend+0xfa>
                pxCurrentTCB = NULL;
 800e57e:	4b05      	ldr	r3, [pc, #20]	@ (800e594 <vTaskSuspend+0x108>)
 800e580:	2200      	movs	r2, #0
 800e582:	601a      	str	r2, [r3, #0]
}
 800e584:	e001      	b.n	800e58a <vTaskSuspend+0xfe>
                vTaskSwitchContext();
 800e586:	f000 f9f3 	bl	800e970 <vTaskSwitchContext>
}
 800e58a:	bf00      	nop
 800e58c:	3710      	adds	r7, #16
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}
 800e592:	bf00      	nop
 800e594:	20000db4 	.word	0x20000db4
 800e598:	20000db8 	.word	0x20000db8
 800e59c:	20000ebc 	.word	0x20000ebc
 800e5a0:	20000ea0 	.word	0x20000ea0
 800e5a4:	20000ec0 	.word	0x20000ec0
 800e5a8:	20000edc 	.word	0x20000edc
 800e5ac:	e000ed04 	.word	0xe000ed04
 800e5b0:	20000eb4 	.word	0x20000eb4

0800e5b4 <vTaskStartScheduler>:
}

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler(void) {
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b08a      	sub	sp, #40	@ 0x28
 800e5b8:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

/* Add the idle task at the lowest priority. */
#if (configSUPPORT_STATIC_ALLOCATION == 1)
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
        address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory(&pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize);
 800e5c2:	463a      	mov	r2, r7
 800e5c4:	1d39      	adds	r1, r7, #4
 800e5c6:	f107 0308 	add.w	r3, r7, #8
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f7f4 f8e6 	bl	800279c <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic(prvIdleTask, configIDLE_TASK_NAME, ulIdleTaskStackSize, (void *)NULL, /*lint !e961.  The cast is not redundant for all compilers. */
 800e5d0:	6839      	ldr	r1, [r7, #0]
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	68ba      	ldr	r2, [r7, #8]
 800e5d6:	9202      	str	r2, [sp, #8]
 800e5d8:	9301      	str	r3, [sp, #4]
 800e5da:	2300      	movs	r3, #0
 800e5dc:	9300      	str	r3, [sp, #0]
 800e5de:	2300      	movs	r3, #0
 800e5e0:	460a      	mov	r2, r1
 800e5e2:	4922      	ldr	r1, [pc, #136]	@ (800e66c <vTaskStartScheduler+0xb8>)
 800e5e4:	4822      	ldr	r0, [pc, #136]	@ (800e670 <vTaskStartScheduler+0xbc>)
 800e5e6:	f7ff fcf9 	bl	800dfdc <xTaskCreateStatic>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	4a21      	ldr	r2, [pc, #132]	@ (800e674 <vTaskStartScheduler+0xc0>)
 800e5ee:	6013      	str	r3, [r2, #0]
                                            portPRIVILEGE_BIT,                                                    /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                            pxIdleTaskStackBuffer, pxIdleTaskTCBBuffer);                          /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if (xIdleTaskHandle != NULL) {
 800e5f0:	4b20      	ldr	r3, [pc, #128]	@ (800e674 <vTaskStartScheduler+0xc0>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d002      	beq.n	800e5fe <vTaskStartScheduler+0x4a>
            xReturn = pdPASS;
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	617b      	str	r3, [r7, #20]
 800e5fc:	e001      	b.n	800e602 <vTaskStartScheduler+0x4e>
        } else {
            xReturn = pdFAIL;
 800e5fe:	2300      	movs	r3, #0
 800e600:	617b      	str	r3, [r7, #20]
    }
#endif /* configSUPPORT_STATIC_ALLOCATION */

#if (configUSE_TIMERS == 1)
    {
        if (xReturn == pdPASS) {
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	2b01      	cmp	r3, #1
 800e606:	d102      	bne.n	800e60e <vTaskStartScheduler+0x5a>
            xReturn = xTimerCreateTimerTask();
 800e608:	f000 fca4 	bl	800ef54 <xTimerCreateTimerTask>
 800e60c:	6178      	str	r0, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }
    }
#endif /* configUSE_TIMERS */

    if (xReturn == pdPASS) {
 800e60e:	697b      	ldr	r3, [r7, #20]
 800e610:	2b01      	cmp	r3, #1
 800e612:	d116      	bne.n	800e642 <vTaskStartScheduler+0x8e>
    __asm volatile("	mov %0, %1												\n"
 800e614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e618:	f383 8811 	msr	BASEPRI, r3
 800e61c:	f3bf 8f6f 	isb	sy
 800e620:	f3bf 8f4f 	dsb	sy
 800e624:	613b      	str	r3, [r7, #16]
}
 800e626:	bf00      	nop
            for additional information. */
            _impure_ptr = &(pxCurrentTCB->xNewLib_reent);
        }
#endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800e628:	4b13      	ldr	r3, [pc, #76]	@ (800e678 <vTaskStartScheduler+0xc4>)
 800e62a:	f04f 32ff 	mov.w	r2, #4294967295
 800e62e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800e630:	4b12      	ldr	r3, [pc, #72]	@ (800e67c <vTaskStartScheduler+0xc8>)
 800e632:	2201      	movs	r2, #1
 800e634:	601a      	str	r2, [r3, #0]
        xTickCount = (TickType_t)configINITIAL_TICK_COUNT;
 800e636:	4b12      	ldr	r3, [pc, #72]	@ (800e680 <vTaskStartScheduler+0xcc>)
 800e638:	2200      	movs	r2, #0
 800e63a:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
        portable interface. */
        if (xPortStartScheduler() != pdFALSE) {
 800e63c:	f001 f910 	bl	800f860 <xPortStartScheduler>
    }

    /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
    meaning xIdleTaskHandle is not used anywhere else. */
    (void)xIdleTaskHandle;
}
 800e640:	e00f      	b.n	800e662 <vTaskStartScheduler+0xae>
        configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e648:	d10b      	bne.n	800e662 <vTaskStartScheduler+0xae>
    __asm volatile("	mov %0, %1												\n"
 800e64a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e64e:	f383 8811 	msr	BASEPRI, r3
 800e652:	f3bf 8f6f 	isb	sy
 800e656:	f3bf 8f4f 	dsb	sy
 800e65a:	60fb      	str	r3, [r7, #12]
}
 800e65c:	bf00      	nop
 800e65e:	bf00      	nop
 800e660:	e7fd      	b.n	800e65e <vTaskStartScheduler+0xaa>
}
 800e662:	bf00      	nop
 800e664:	3718      	adds	r7, #24
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}
 800e66a:	bf00      	nop
 800e66c:	08013c18 	.word	0x08013c18
 800e670:	0800eca1 	.word	0x0800eca1
 800e674:	20000ed8 	.word	0x20000ed8
 800e678:	20000ed4 	.word	0x20000ed4
 800e67c:	20000ec0 	.word	0x20000ec0
 800e680:	20000eb8 	.word	0x20000eb8

0800e684 <vTaskSuspendAll>:
    xSchedulerRunning = pdFALSE;
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll(void) {
 800e684:	b480      	push	{r7}
 800e686:	af00      	add	r7, sp, #0
    do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
    is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800e688:	4b04      	ldr	r3, [pc, #16]	@ (800e69c <vTaskSuspendAll+0x18>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	3301      	adds	r3, #1
 800e68e:	4a03      	ldr	r2, [pc, #12]	@ (800e69c <vTaskSuspendAll+0x18>)
 800e690:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
    the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800e692:	bf00      	nop
 800e694:	46bd      	mov	sp, r7
 800e696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69a:	4770      	bx	lr
 800e69c:	20000edc 	.word	0x20000edc

0800e6a0 <xTaskResumeAll>:
}

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll(void) {
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b084      	sub	sp, #16
 800e6a4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
    previous call to vTaskSuspendAll(). */
    configASSERT(uxSchedulerSuspended);
 800e6ae:	4b42      	ldr	r3, [pc, #264]	@ (800e7b8 <xTaskResumeAll+0x118>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d10b      	bne.n	800e6ce <xTaskResumeAll+0x2e>
    __asm volatile("	mov %0, %1												\n"
 800e6b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6ba:	f383 8811 	msr	BASEPRI, r3
 800e6be:	f3bf 8f6f 	isb	sy
 800e6c2:	f3bf 8f4f 	dsb	sy
 800e6c6:	603b      	str	r3, [r7, #0]
}
 800e6c8:	bf00      	nop
 800e6ca:	bf00      	nop
 800e6cc:	e7fd      	b.n	800e6ca <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
    list while the scheduler was suspended.  If this was the case then the
    removed task will have been added to the xPendingReadyList.  Once the
    scheduler has been resumed it is safe to move all the pending ready
    tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800e6ce:	f001 f96b 	bl	800f9a8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800e6d2:	4b39      	ldr	r3, [pc, #228]	@ (800e7b8 <xTaskResumeAll+0x118>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	3b01      	subs	r3, #1
 800e6d8:	4a37      	ldr	r2, [pc, #220]	@ (800e7b8 <xTaskResumeAll+0x118>)
 800e6da:	6013      	str	r3, [r2, #0]

        if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
 800e6dc:	4b36      	ldr	r3, [pc, #216]	@ (800e7b8 <xTaskResumeAll+0x118>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d161      	bne.n	800e7a8 <xTaskResumeAll+0x108>
            if (uxCurrentNumberOfTasks > (UBaseType_t)0U) {
 800e6e4:	4b35      	ldr	r3, [pc, #212]	@ (800e7bc <xTaskResumeAll+0x11c>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d05d      	beq.n	800e7a8 <xTaskResumeAll+0x108>
                /* Move any readied tasks from the pending list into the
                appropriate ready list. */
                while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
 800e6ec:	e02e      	b.n	800e74c <xTaskResumeAll+0xac>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY(
 800e6ee:	4b34      	ldr	r3, [pc, #208]	@ (800e7c0 <xTaskResumeAll+0x120>)
 800e6f0:	68db      	ldr	r3, [r3, #12]
 800e6f2:	68db      	ldr	r3, [r3, #12]
 800e6f4:	60fb      	str	r3, [r7, #12]
                        (&xPendingReadyList)); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
                    (void)uxListRemove(&(pxTCB->xEventListItem));
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	3318      	adds	r3, #24
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f7fe ff5c 	bl	800d5b8 <uxListRemove>
                    (void)uxListRemove(&(pxTCB->xStateListItem));
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	3304      	adds	r3, #4
 800e704:	4618      	mov	r0, r3
 800e706:	f7fe ff57 	bl	800d5b8 <uxListRemove>
                    prvAddTaskToReadyList(pxTCB);
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e70e:	2201      	movs	r2, #1
 800e710:	409a      	lsls	r2, r3
 800e712:	4b2c      	ldr	r3, [pc, #176]	@ (800e7c4 <xTaskResumeAll+0x124>)
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	4313      	orrs	r3, r2
 800e718:	4a2a      	ldr	r2, [pc, #168]	@ (800e7c4 <xTaskResumeAll+0x124>)
 800e71a:	6013      	str	r3, [r2, #0]
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e720:	4613      	mov	r3, r2
 800e722:	009b      	lsls	r3, r3, #2
 800e724:	4413      	add	r3, r2
 800e726:	009b      	lsls	r3, r3, #2
 800e728:	4a27      	ldr	r2, [pc, #156]	@ (800e7c8 <xTaskResumeAll+0x128>)
 800e72a:	441a      	add	r2, r3
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	3304      	adds	r3, #4
 800e730:	4619      	mov	r1, r3
 800e732:	4610      	mov	r0, r2
 800e734:	f7fe fee3 	bl	800d4fe <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                    task then a yield must be performed. */
                    if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e73c:	4b23      	ldr	r3, [pc, #140]	@ (800e7cc <xTaskResumeAll+0x12c>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e742:	429a      	cmp	r2, r3
 800e744:	d302      	bcc.n	800e74c <xTaskResumeAll+0xac>
                        xYieldPending = pdTRUE;
 800e746:	4b22      	ldr	r3, [pc, #136]	@ (800e7d0 <xTaskResumeAll+0x130>)
 800e748:	2201      	movs	r2, #1
 800e74a:	601a      	str	r2, [r3, #0]
                while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
 800e74c:	4b1c      	ldr	r3, [pc, #112]	@ (800e7c0 <xTaskResumeAll+0x120>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d1cc      	bne.n	800e6ee <xTaskResumeAll+0x4e>
                    } else {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if (pxTCB != NULL) {
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d001      	beq.n	800e75e <xTaskResumeAll+0xbe>
                    which may have prevented the next unblock time from being
                    re-calculated, in which case re-calculate it now.  Mainly
                    important for low power tickless implementations, where
                    this can prevent an unnecessary exit from low power
                    state. */
                    prvResetNextTaskUnblockTime();
 800e75a:	f000 fb57 	bl	800ee0c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                they should be processed now.  This ensures the tick count does
                not	slip, and that any delayed tasks are resumed at the correct
                time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e75e:	4b1d      	ldr	r3, [pc, #116]	@ (800e7d4 <xTaskResumeAll+0x134>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	607b      	str	r3, [r7, #4]

                    if (xPendedCounts > (TickType_t)0U) {
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d010      	beq.n	800e78c <xTaskResumeAll+0xec>
                        do {
                            if (xTaskIncrementTick() != pdFALSE) {
 800e76a:	f000 f847 	bl	800e7fc <xTaskIncrementTick>
 800e76e:	4603      	mov	r3, r0
 800e770:	2b00      	cmp	r3, #0
 800e772:	d002      	beq.n	800e77a <xTaskResumeAll+0xda>
                                xYieldPending = pdTRUE;
 800e774:	4b16      	ldr	r3, [pc, #88]	@ (800e7d0 <xTaskResumeAll+0x130>)
 800e776:	2201      	movs	r2, #1
 800e778:	601a      	str	r2, [r3, #0]
                            } else {
                                mtCOVERAGE_TEST_MARKER();
                            }
                            --xPendedCounts;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	3b01      	subs	r3, #1
 800e77e:	607b      	str	r3, [r7, #4]
                        } while (xPendedCounts > (TickType_t)0U);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d1f1      	bne.n	800e76a <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 800e786:	4b13      	ldr	r3, [pc, #76]	@ (800e7d4 <xTaskResumeAll+0x134>)
 800e788:	2200      	movs	r2, #0
 800e78a:	601a      	str	r2, [r3, #0]
                    } else {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if (xYieldPending != pdFALSE) {
 800e78c:	4b10      	ldr	r3, [pc, #64]	@ (800e7d0 <xTaskResumeAll+0x130>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d009      	beq.n	800e7a8 <xTaskResumeAll+0x108>
#if (configUSE_PREEMPTION != 0)
                    { xAlreadyYielded = pdTRUE; }
 800e794:	2301      	movs	r3, #1
 800e796:	60bb      	str	r3, [r7, #8]
#endif
                    taskYIELD_IF_USING_PREEMPTION();
 800e798:	4b0f      	ldr	r3, [pc, #60]	@ (800e7d8 <xTaskResumeAll+0x138>)
 800e79a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e79e:	601a      	str	r2, [r3, #0]
 800e7a0:	f3bf 8f4f 	dsb	sy
 800e7a4:	f3bf 8f6f 	isb	sy
            }
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800e7a8:	f001 f930 	bl	800fa0c <vPortExitCritical>

    return xAlreadyYielded;
 800e7ac:	68bb      	ldr	r3, [r7, #8]
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	3710      	adds	r7, #16
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}
 800e7b6:	bf00      	nop
 800e7b8:	20000edc 	.word	0x20000edc
 800e7bc:	20000eb4 	.word	0x20000eb4
 800e7c0:	20000e74 	.word	0x20000e74
 800e7c4:	20000ebc 	.word	0x20000ebc
 800e7c8:	20000db8 	.word	0x20000db8
 800e7cc:	20000db4 	.word	0x20000db4
 800e7d0:	20000ec8 	.word	0x20000ec8
 800e7d4:	20000ec4 	.word	0x20000ec4
 800e7d8:	e000ed04 	.word	0xe000ed04

0800e7dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount(void) {
 800e7dc:	b480      	push	{r7}
 800e7de:	b083      	sub	sp, #12
 800e7e0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    { xTicks = xTickCount; }
 800e7e2:	4b05      	ldr	r3, [pc, #20]	@ (800e7f8 <xTaskGetTickCount+0x1c>)
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	607b      	str	r3, [r7, #4]
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800e7e8:	687b      	ldr	r3, [r7, #4]
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	370c      	adds	r7, #12
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f4:	4770      	bx	lr
 800e7f6:	bf00      	nop
 800e7f8:	20000eb8 	.word	0x20000eb8

0800e7fc <xTaskIncrementTick>:
}

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick(void) {
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b086      	sub	sp, #24
 800e800:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800e802:	2300      	movs	r3, #0
 800e804:	617b      	str	r3, [r7, #20]

    /* Called by the portable layer each time a tick interrupt occurs.
    Increments the tick then checks to see if the new tick value will cause any
    tasks to be unblocked. */
    traceTASK_INCREMENT_TICK(xTickCount);
    if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
 800e806:	4b4f      	ldr	r3, [pc, #316]	@ (800e944 <xTaskIncrementTick+0x148>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	f040 808f 	bne.w	800e92e <xTaskIncrementTick+0x132>
        /* Minor optimisation.  The tick count cannot change in this
        block. */
        const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
 800e810:	4b4d      	ldr	r3, [pc, #308]	@ (800e948 <xTaskIncrementTick+0x14c>)
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	3301      	adds	r3, #1
 800e816:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
        delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800e818:	4a4b      	ldr	r2, [pc, #300]	@ (800e948 <xTaskIncrementTick+0x14c>)
 800e81a:	693b      	ldr	r3, [r7, #16]
 800e81c:	6013      	str	r3, [r2, #0]

        if (xConstTickCount == (TickType_t)0U) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e81e:	693b      	ldr	r3, [r7, #16]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d121      	bne.n	800e868 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800e824:	4b49      	ldr	r3, [pc, #292]	@ (800e94c <xTaskIncrementTick+0x150>)
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d00b      	beq.n	800e846 <xTaskIncrementTick+0x4a>
    __asm volatile("	mov %0, %1												\n"
 800e82e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e832:	f383 8811 	msr	BASEPRI, r3
 800e836:	f3bf 8f6f 	isb	sy
 800e83a:	f3bf 8f4f 	dsb	sy
 800e83e:	603b      	str	r3, [r7, #0]
}
 800e840:	bf00      	nop
 800e842:	bf00      	nop
 800e844:	e7fd      	b.n	800e842 <xTaskIncrementTick+0x46>
 800e846:	4b41      	ldr	r3, [pc, #260]	@ (800e94c <xTaskIncrementTick+0x150>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	60fb      	str	r3, [r7, #12]
 800e84c:	4b40      	ldr	r3, [pc, #256]	@ (800e950 <xTaskIncrementTick+0x154>)
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	4a3e      	ldr	r2, [pc, #248]	@ (800e94c <xTaskIncrementTick+0x150>)
 800e852:	6013      	str	r3, [r2, #0]
 800e854:	4a3e      	ldr	r2, [pc, #248]	@ (800e950 <xTaskIncrementTick+0x154>)
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	6013      	str	r3, [r2, #0]
 800e85a:	4b3e      	ldr	r3, [pc, #248]	@ (800e954 <xTaskIncrementTick+0x158>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	3301      	adds	r3, #1
 800e860:	4a3c      	ldr	r2, [pc, #240]	@ (800e954 <xTaskIncrementTick+0x158>)
 800e862:	6013      	str	r3, [r2, #0]
 800e864:	f000 fad2 	bl	800ee0c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
        the	queue in the order of their wake time - meaning once one task
        has been found whose block time has not expired there is no need to
        look any further down the list. */
        if (xConstTickCount >= xNextTaskUnblockTime) {
 800e868:	4b3b      	ldr	r3, [pc, #236]	@ (800e958 <xTaskIncrementTick+0x15c>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	693a      	ldr	r2, [r7, #16]
 800e86e:	429a      	cmp	r2, r3
 800e870:	d348      	bcc.n	800e904 <xTaskIncrementTick+0x108>
            for (;;) {
                if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
 800e872:	4b36      	ldr	r3, [pc, #216]	@ (800e94c <xTaskIncrementTick+0x150>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d104      	bne.n	800e886 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                    to the maximum possible value so it is extremely
                    unlikely that the
                    if( xTickCount >= xNextTaskUnblockTime ) test will pass
                    next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e87c:	4b36      	ldr	r3, [pc, #216]	@ (800e958 <xTaskIncrementTick+0x15c>)
 800e87e:	f04f 32ff 	mov.w	r2, #4294967295
 800e882:	601a      	str	r2, [r3, #0]
                    break;
 800e884:	e03e      	b.n	800e904 <xTaskIncrementTick+0x108>
                    /* The delayed list is not empty, get the value of the
                    item at the head of the delayed list.  This is the time
                    at which the task at the head of the delayed list must
                    be removed from the Blocked state. */
                    pxTCB =
                        listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e886:	4b31      	ldr	r3, [pc, #196]	@ (800e94c <xTaskIncrementTick+0x150>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	68db      	ldr	r3, [r3, #12]
                    pxTCB =
 800e88c:	68db      	ldr	r3, [r3, #12]
 800e88e:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	685b      	ldr	r3, [r3, #4]
 800e894:	607b      	str	r3, [r7, #4]

                    if (xConstTickCount < xItemValue) {
 800e896:	693a      	ldr	r2, [r7, #16]
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	429a      	cmp	r2, r3
 800e89c:	d203      	bcs.n	800e8a6 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                        item value is the time at which the task at the head
                        of the blocked list must be removed from the Blocked
                        state -	so record the item value in
                        xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800e89e:	4a2e      	ldr	r2, [pc, #184]	@ (800e958 <xTaskIncrementTick+0x15c>)
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e8a4:	e02e      	b.n	800e904 <xTaskIncrementTick+0x108>
                    } else {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    (void)uxListRemove(&(pxTCB->xStateListItem));
 800e8a6:	68bb      	ldr	r3, [r7, #8]
 800e8a8:	3304      	adds	r3, #4
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f7fe fe84 	bl	800d5b8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                    it from the event list. */
                    if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
 800e8b0:	68bb      	ldr	r3, [r7, #8]
 800e8b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d004      	beq.n	800e8c2 <xTaskIncrementTick+0xc6>
                        (void)uxListRemove(&(pxTCB->xEventListItem));
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	3318      	adds	r3, #24
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f7fe fe7b 	bl	800d5b8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                    list. */
                    prvAddTaskToReadyList(pxTCB);
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8c6:	2201      	movs	r2, #1
 800e8c8:	409a      	lsls	r2, r3
 800e8ca:	4b24      	ldr	r3, [pc, #144]	@ (800e95c <xTaskIncrementTick+0x160>)
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	4313      	orrs	r3, r2
 800e8d0:	4a22      	ldr	r2, [pc, #136]	@ (800e95c <xTaskIncrementTick+0x160>)
 800e8d2:	6013      	str	r3, [r2, #0]
 800e8d4:	68bb      	ldr	r3, [r7, #8]
 800e8d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8d8:	4613      	mov	r3, r2
 800e8da:	009b      	lsls	r3, r3, #2
 800e8dc:	4413      	add	r3, r2
 800e8de:	009b      	lsls	r3, r3, #2
 800e8e0:	4a1f      	ldr	r2, [pc, #124]	@ (800e960 <xTaskIncrementTick+0x164>)
 800e8e2:	441a      	add	r2, r3
 800e8e4:	68bb      	ldr	r3, [r7, #8]
 800e8e6:	3304      	adds	r3, #4
 800e8e8:	4619      	mov	r1, r3
 800e8ea:	4610      	mov	r0, r2
 800e8ec:	f7fe fe07 	bl	800d4fe <vListInsertEnd>
                    {
                        /* Preemption is on, but a context switch should
                        only be performed if the unblocked task has a
                        priority that is equal to or higher than the
                        currently executing task. */
                        if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
 800e8f0:	68bb      	ldr	r3, [r7, #8]
 800e8f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8f4:	4b1b      	ldr	r3, [pc, #108]	@ (800e964 <xTaskIncrementTick+0x168>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8fa:	429a      	cmp	r2, r3
 800e8fc:	d3b9      	bcc.n	800e872 <xTaskIncrementTick+0x76>
                            xSwitchRequired = pdTRUE;
 800e8fe:	2301      	movs	r3, #1
 800e900:	617b      	str	r3, [r7, #20]
                if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
 800e902:	e7b6      	b.n	800e872 <xTaskIncrementTick+0x76>
/* Tasks of equal priority to the currently running task will share
processing time (time slice) if preemption is on, and the application
writer has not explicitly turned time slicing off. */
#if ((configUSE_PREEMPTION == 1) && (configUSE_TIME_SLICING == 1))
        {
            if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
 800e904:	4b17      	ldr	r3, [pc, #92]	@ (800e964 <xTaskIncrementTick+0x168>)
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e90a:	4915      	ldr	r1, [pc, #84]	@ (800e960 <xTaskIncrementTick+0x164>)
 800e90c:	4613      	mov	r3, r2
 800e90e:	009b      	lsls	r3, r3, #2
 800e910:	4413      	add	r3, r2
 800e912:	009b      	lsls	r3, r3, #2
 800e914:	440b      	add	r3, r1
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	2b01      	cmp	r3, #1
 800e91a:	d901      	bls.n	800e920 <xTaskIncrementTick+0x124>
                xSwitchRequired = pdTRUE;
 800e91c:	2301      	movs	r3, #1
 800e91e:	617b      	str	r3, [r7, #20]
        }
#endif /* configUSE_TICK_HOOK */

#if (configUSE_PREEMPTION == 1)
        {
            if (xYieldPending != pdFALSE) {
 800e920:	4b11      	ldr	r3, [pc, #68]	@ (800e968 <xTaskIncrementTick+0x16c>)
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d007      	beq.n	800e938 <xTaskIncrementTick+0x13c>
                xSwitchRequired = pdTRUE;
 800e928:	2301      	movs	r3, #1
 800e92a:	617b      	str	r3, [r7, #20]
 800e92c:	e004      	b.n	800e938 <xTaskIncrementTick+0x13c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
#endif /* configUSE_PREEMPTION */
    } else {
        ++xPendedTicks;
 800e92e:	4b0f      	ldr	r3, [pc, #60]	@ (800e96c <xTaskIncrementTick+0x170>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	3301      	adds	r3, #1
 800e934:	4a0d      	ldr	r2, [pc, #52]	@ (800e96c <xTaskIncrementTick+0x170>)
 800e936:	6013      	str	r3, [r2, #0]
#if (configUSE_TICK_HOOK == 1)
        { vApplicationTickHook(); }
#endif
    }

    return xSwitchRequired;
 800e938:	697b      	ldr	r3, [r7, #20]
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3718      	adds	r7, #24
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}
 800e942:	bf00      	nop
 800e944:	20000edc 	.word	0x20000edc
 800e948:	20000eb8 	.word	0x20000eb8
 800e94c:	20000e6c 	.word	0x20000e6c
 800e950:	20000e70 	.word	0x20000e70
 800e954:	20000ecc 	.word	0x20000ecc
 800e958:	20000ed4 	.word	0x20000ed4
 800e95c:	20000ebc 	.word	0x20000ebc
 800e960:	20000db8 	.word	0x20000db8
 800e964:	20000db4 	.word	0x20000db4
 800e968:	20000ec8 	.word	0x20000ec8
 800e96c:	20000ec4 	.word	0x20000ec4

0800e970 <vTaskSwitchContext>:
}

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext(void) {
 800e970:	b480      	push	{r7}
 800e972:	b087      	sub	sp, #28
 800e974:	af00      	add	r7, sp, #0
    if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
 800e976:	4b27      	ldr	r3, [pc, #156]	@ (800ea14 <vTaskSwitchContext+0xa4>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d003      	beq.n	800e986 <vTaskSwitchContext+0x16>
        /* The scheduler is currently suspended - do not allow a context
        switch. */
        xYieldPending = pdTRUE;
 800e97e:	4b26      	ldr	r3, [pc, #152]	@ (800ea18 <vTaskSwitchContext+0xa8>)
 800e980:	2201      	movs	r2, #1
 800e982:	601a      	str	r2, [r3, #0]
            for additional information. */
            _impure_ptr = &(pxCurrentTCB->xNewLib_reent);
        }
#endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800e984:	e040      	b.n	800ea08 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 800e986:	4b24      	ldr	r3, [pc, #144]	@ (800ea18 <vTaskSwitchContext+0xa8>)
 800e988:	2200      	movs	r2, #0
 800e98a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e98c:	4b23      	ldr	r3, [pc, #140]	@ (800ea1c <vTaskSwitchContext+0xac>)
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	60fb      	str	r3, [r7, #12]
    __asm volatile("clz %0, %1" : "=r"(ucReturn) : "r"(ulBitmap) : "memory");
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	fab3 f383 	clz	r3, r3
 800e998:	72fb      	strb	r3, [r7, #11]
    return ucReturn;
 800e99a:	7afb      	ldrb	r3, [r7, #11]
 800e99c:	f1c3 031f 	rsb	r3, r3, #31
 800e9a0:	617b      	str	r3, [r7, #20]
 800e9a2:	491f      	ldr	r1, [pc, #124]	@ (800ea20 <vTaskSwitchContext+0xb0>)
 800e9a4:	697a      	ldr	r2, [r7, #20]
 800e9a6:	4613      	mov	r3, r2
 800e9a8:	009b      	lsls	r3, r3, #2
 800e9aa:	4413      	add	r3, r2
 800e9ac:	009b      	lsls	r3, r3, #2
 800e9ae:	440b      	add	r3, r1
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d10b      	bne.n	800e9ce <vTaskSwitchContext+0x5e>
    __asm volatile("	mov %0, %1												\n"
 800e9b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9ba:	f383 8811 	msr	BASEPRI, r3
 800e9be:	f3bf 8f6f 	isb	sy
 800e9c2:	f3bf 8f4f 	dsb	sy
 800e9c6:	607b      	str	r3, [r7, #4]
}
 800e9c8:	bf00      	nop
 800e9ca:	bf00      	nop
 800e9cc:	e7fd      	b.n	800e9ca <vTaskSwitchContext+0x5a>
 800e9ce:	697a      	ldr	r2, [r7, #20]
 800e9d0:	4613      	mov	r3, r2
 800e9d2:	009b      	lsls	r3, r3, #2
 800e9d4:	4413      	add	r3, r2
 800e9d6:	009b      	lsls	r3, r3, #2
 800e9d8:	4a11      	ldr	r2, [pc, #68]	@ (800ea20 <vTaskSwitchContext+0xb0>)
 800e9da:	4413      	add	r3, r2
 800e9dc:	613b      	str	r3, [r7, #16]
 800e9de:	693b      	ldr	r3, [r7, #16]
 800e9e0:	685b      	ldr	r3, [r3, #4]
 800e9e2:	685a      	ldr	r2, [r3, #4]
 800e9e4:	693b      	ldr	r3, [r7, #16]
 800e9e6:	605a      	str	r2, [r3, #4]
 800e9e8:	693b      	ldr	r3, [r7, #16]
 800e9ea:	685a      	ldr	r2, [r3, #4]
 800e9ec:	693b      	ldr	r3, [r7, #16]
 800e9ee:	3308      	adds	r3, #8
 800e9f0:	429a      	cmp	r2, r3
 800e9f2:	d104      	bne.n	800e9fe <vTaskSwitchContext+0x8e>
 800e9f4:	693b      	ldr	r3, [r7, #16]
 800e9f6:	685b      	ldr	r3, [r3, #4]
 800e9f8:	685a      	ldr	r2, [r3, #4]
 800e9fa:	693b      	ldr	r3, [r7, #16]
 800e9fc:	605a      	str	r2, [r3, #4]
 800e9fe:	693b      	ldr	r3, [r7, #16]
 800ea00:	685b      	ldr	r3, [r3, #4]
 800ea02:	68db      	ldr	r3, [r3, #12]
 800ea04:	4a07      	ldr	r2, [pc, #28]	@ (800ea24 <vTaskSwitchContext+0xb4>)
 800ea06:	6013      	str	r3, [r2, #0]
}
 800ea08:	bf00      	nop
 800ea0a:	371c      	adds	r7, #28
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea12:	4770      	bx	lr
 800ea14:	20000edc 	.word	0x20000edc
 800ea18:	20000ec8 	.word	0x20000ec8
 800ea1c:	20000ebc 	.word	0x20000ebc
 800ea20:	20000db8 	.word	0x20000db8
 800ea24:	20000db4 	.word	0x20000db4

0800ea28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList(List_t * const pxEventList, const TickType_t xTicksToWait) {
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b084      	sub	sp, #16
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
 800ea30:	6039      	str	r1, [r7, #0]
    configASSERT(pxEventList);
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d10b      	bne.n	800ea50 <vTaskPlaceOnEventList+0x28>
    __asm volatile("	mov %0, %1												\n"
 800ea38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea3c:	f383 8811 	msr	BASEPRI, r3
 800ea40:	f3bf 8f6f 	isb	sy
 800ea44:	f3bf 8f4f 	dsb	sy
 800ea48:	60fb      	str	r3, [r7, #12]
}
 800ea4a:	bf00      	nop
 800ea4c:	bf00      	nop
 800ea4e:	e7fd      	b.n	800ea4c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
    This is placed in the list in priority order so the highest priority task
    is the first to be woken by the event.  The queue that contains the event
    list is locked, preventing simultaneous access from interrupts. */
    vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
 800ea50:	4b07      	ldr	r3, [pc, #28]	@ (800ea70 <vTaskPlaceOnEventList+0x48>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	3318      	adds	r3, #24
 800ea56:	4619      	mov	r1, r3
 800ea58:	6878      	ldr	r0, [r7, #4]
 800ea5a:	f7fe fd74 	bl	800d546 <vListInsert>

    prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
 800ea5e:	2101      	movs	r1, #1
 800ea60:	6838      	ldr	r0, [r7, #0]
 800ea62:	f000 fa11 	bl	800ee88 <prvAddCurrentTaskToDelayedList>
}
 800ea66:	bf00      	nop
 800ea68:	3710      	adds	r7, #16
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}
 800ea6e:	bf00      	nop
 800ea70:	20000db4 	.word	0x20000db4

0800ea74 <vTaskPlaceOnEventListRestricted>:
}
/*-----------------------------------------------------------*/

#if (configUSE_TIMERS == 1)

void vTaskPlaceOnEventListRestricted(List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely) {
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b086      	sub	sp, #24
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	60f8      	str	r0, [r7, #12]
 800ea7c:	60b9      	str	r1, [r7, #8]
 800ea7e:	607a      	str	r2, [r7, #4]
    configASSERT(pxEventList);
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d10b      	bne.n	800ea9e <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile("	mov %0, %1												\n"
 800ea86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea8a:	f383 8811 	msr	BASEPRI, r3
 800ea8e:	f3bf 8f6f 	isb	sy
 800ea92:	f3bf 8f4f 	dsb	sy
 800ea96:	617b      	str	r3, [r7, #20]
}
 800ea98:	bf00      	nop
 800ea9a:	bf00      	nop
 800ea9c:	e7fd      	b.n	800ea9a <vTaskPlaceOnEventListRestricted+0x26>

    /* Place the event list item of the TCB in the appropriate event list.
    In this case it is assume that this is the only task that is going to
    be waiting on this event list, so the faster vListInsertEnd() function
    can be used in place of vListInsert. */
    vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
 800ea9e:	4b0a      	ldr	r3, [pc, #40]	@ (800eac8 <vTaskPlaceOnEventListRestricted+0x54>)
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	3318      	adds	r3, #24
 800eaa4:	4619      	mov	r1, r3
 800eaa6:	68f8      	ldr	r0, [r7, #12]
 800eaa8:	f7fe fd29 	bl	800d4fe <vListInsertEnd>

    /* If the task should block indefinitely then set the block time to a
    value that will be recognised as an indefinite delay inside the
    prvAddCurrentTaskToDelayedList() function. */
    if (xWaitIndefinitely != pdFALSE) {
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d002      	beq.n	800eab8 <vTaskPlaceOnEventListRestricted+0x44>
        xTicksToWait = portMAX_DELAY;
 800eab2:	f04f 33ff 	mov.w	r3, #4294967295
 800eab6:	60bb      	str	r3, [r7, #8]
    }

    traceTASK_DELAY_UNTIL((xTickCount + xTicksToWait));
    prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
 800eab8:	6879      	ldr	r1, [r7, #4]
 800eaba:	68b8      	ldr	r0, [r7, #8]
 800eabc:	f000 f9e4 	bl	800ee88 <prvAddCurrentTaskToDelayedList>
}
 800eac0:	bf00      	nop
 800eac2:	3718      	adds	r7, #24
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}
 800eac8:	20000db4 	.word	0x20000db4

0800eacc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList(const List_t * const pxEventList) {
 800eacc:	b580      	push	{r7, lr}
 800eace:	b086      	sub	sp, #24
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
    get called - the lock count on the queue will get modified instead.  This
    means exclusive access to the event list is guaranteed here.

    This function assumes that a check has already been made to ensure that
    pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY(pxEventList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	68db      	ldr	r3, [r3, #12]
 800ead8:	68db      	ldr	r3, [r3, #12]
 800eada:	613b      	str	r3, [r7, #16]
    configASSERT(pxUnblockedTCB);
 800eadc:	693b      	ldr	r3, [r7, #16]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d10b      	bne.n	800eafa <xTaskRemoveFromEventList+0x2e>
    __asm volatile("	mov %0, %1												\n"
 800eae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eae6:	f383 8811 	msr	BASEPRI, r3
 800eaea:	f3bf 8f6f 	isb	sy
 800eaee:	f3bf 8f4f 	dsb	sy
 800eaf2:	60fb      	str	r3, [r7, #12]
}
 800eaf4:	bf00      	nop
 800eaf6:	bf00      	nop
 800eaf8:	e7fd      	b.n	800eaf6 <xTaskRemoveFromEventList+0x2a>
    (void)uxListRemove(&(pxUnblockedTCB->xEventListItem));
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	3318      	adds	r3, #24
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7fe fd5a 	bl	800d5b8 <uxListRemove>

    if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
 800eb04:	4b1d      	ldr	r3, [pc, #116]	@ (800eb7c <xTaskRemoveFromEventList+0xb0>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d11c      	bne.n	800eb46 <xTaskRemoveFromEventList+0x7a>
        (void)uxListRemove(&(pxUnblockedTCB->xStateListItem));
 800eb0c:	693b      	ldr	r3, [r7, #16]
 800eb0e:	3304      	adds	r3, #4
 800eb10:	4618      	mov	r0, r3
 800eb12:	f7fe fd51 	bl	800d5b8 <uxListRemove>
        prvAddTaskToReadyList(pxUnblockedTCB);
 800eb16:	693b      	ldr	r3, [r7, #16]
 800eb18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb1a:	2201      	movs	r2, #1
 800eb1c:	409a      	lsls	r2, r3
 800eb1e:	4b18      	ldr	r3, [pc, #96]	@ (800eb80 <xTaskRemoveFromEventList+0xb4>)
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	4313      	orrs	r3, r2
 800eb24:	4a16      	ldr	r2, [pc, #88]	@ (800eb80 <xTaskRemoveFromEventList+0xb4>)
 800eb26:	6013      	str	r3, [r2, #0]
 800eb28:	693b      	ldr	r3, [r7, #16]
 800eb2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb2c:	4613      	mov	r3, r2
 800eb2e:	009b      	lsls	r3, r3, #2
 800eb30:	4413      	add	r3, r2
 800eb32:	009b      	lsls	r3, r3, #2
 800eb34:	4a13      	ldr	r2, [pc, #76]	@ (800eb84 <xTaskRemoveFromEventList+0xb8>)
 800eb36:	441a      	add	r2, r3
 800eb38:	693b      	ldr	r3, [r7, #16]
 800eb3a:	3304      	adds	r3, #4
 800eb3c:	4619      	mov	r1, r3
 800eb3e:	4610      	mov	r0, r2
 800eb40:	f7fe fcdd 	bl	800d4fe <vListInsertEnd>
 800eb44:	e005      	b.n	800eb52 <xTaskRemoveFromEventList+0x86>
        }
#endif
    } else {
        /* The delayed and ready lists cannot be accessed, so hold this task
        pending until the scheduler is resumed. */
        vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
 800eb46:	693b      	ldr	r3, [r7, #16]
 800eb48:	3318      	adds	r3, #24
 800eb4a:	4619      	mov	r1, r3
 800eb4c:	480e      	ldr	r0, [pc, #56]	@ (800eb88 <xTaskRemoveFromEventList+0xbc>)
 800eb4e:	f7fe fcd6 	bl	800d4fe <vListInsertEnd>
    }

    if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
 800eb52:	693b      	ldr	r3, [r7, #16]
 800eb54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb56:	4b0d      	ldr	r3, [pc, #52]	@ (800eb8c <xTaskRemoveFromEventList+0xc0>)
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb5c:	429a      	cmp	r2, r3
 800eb5e:	d905      	bls.n	800eb6c <xTaskRemoveFromEventList+0xa0>
        /* Return true if the task removed from the event list has a higher
        priority than the calling task.  This allows the calling task to know if
        it should force a context switch now. */
        xReturn = pdTRUE;
 800eb60:	2301      	movs	r3, #1
 800eb62:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
        "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800eb64:	4b0a      	ldr	r3, [pc, #40]	@ (800eb90 <xTaskRemoveFromEventList+0xc4>)
 800eb66:	2201      	movs	r2, #1
 800eb68:	601a      	str	r2, [r3, #0]
 800eb6a:	e001      	b.n	800eb70 <xTaskRemoveFromEventList+0xa4>
    } else {
        xReturn = pdFALSE;
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800eb70:	697b      	ldr	r3, [r7, #20]
}
 800eb72:	4618      	mov	r0, r3
 800eb74:	3718      	adds	r7, #24
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}
 800eb7a:	bf00      	nop
 800eb7c:	20000edc 	.word	0x20000edc
 800eb80:	20000ebc 	.word	0x20000ebc
 800eb84:	20000db8 	.word	0x20000db8
 800eb88:	20000e74 	.word	0x20000e74
 800eb8c:	20000db4 	.word	0x20000db4
 800eb90:	20000ec8 	.word	0x20000ec8

0800eb94 <vTaskInternalSetTimeOutState>:
    }
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState(TimeOut_t * const pxTimeOut) {
 800eb94:	b480      	push	{r7}
 800eb96:	b083      	sub	sp, #12
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800eb9c:	4b06      	ldr	r3, [pc, #24]	@ (800ebb8 <vTaskInternalSetTimeOutState+0x24>)
 800eb9e:	681a      	ldr	r2, [r3, #0]
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800eba4:	4b05      	ldr	r3, [pc, #20]	@ (800ebbc <vTaskInternalSetTimeOutState+0x28>)
 800eba6:	681a      	ldr	r2, [r3, #0]
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	605a      	str	r2, [r3, #4]
}
 800ebac:	bf00      	nop
 800ebae:	370c      	adds	r7, #12
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb6:	4770      	bx	lr
 800ebb8:	20000ecc 	.word	0x20000ecc
 800ebbc:	20000eb8 	.word	0x20000eb8

0800ebc0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut(TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait) {
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b088      	sub	sp, #32
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
 800ebc8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT(pxTimeOut);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d10b      	bne.n	800ebe8 <xTaskCheckForTimeOut+0x28>
    __asm volatile("	mov %0, %1												\n"
 800ebd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebd4:	f383 8811 	msr	BASEPRI, r3
 800ebd8:	f3bf 8f6f 	isb	sy
 800ebdc:	f3bf 8f4f 	dsb	sy
 800ebe0:	613b      	str	r3, [r7, #16]
}
 800ebe2:	bf00      	nop
 800ebe4:	bf00      	nop
 800ebe6:	e7fd      	b.n	800ebe4 <xTaskCheckForTimeOut+0x24>
    configASSERT(pxTicksToWait);
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d10b      	bne.n	800ec06 <xTaskCheckForTimeOut+0x46>
    __asm volatile("	mov %0, %1												\n"
 800ebee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebf2:	f383 8811 	msr	BASEPRI, r3
 800ebf6:	f3bf 8f6f 	isb	sy
 800ebfa:	f3bf 8f4f 	dsb	sy
 800ebfe:	60fb      	str	r3, [r7, #12]
}
 800ec00:	bf00      	nop
 800ec02:	bf00      	nop
 800ec04:	e7fd      	b.n	800ec02 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800ec06:	f000 fecf 	bl	800f9a8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800ec0a:	4b1d      	ldr	r3, [pc, #116]	@ (800ec80 <xTaskCheckForTimeOut+0xc0>)
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	685b      	ldr	r3, [r3, #4]
 800ec14:	69ba      	ldr	r2, [r7, #24]
 800ec16:	1ad3      	subs	r3, r2, r3
 800ec18:	617b      	str	r3, [r7, #20]
            xReturn = pdTRUE;
        } else
#endif

#if (INCLUDE_vTaskSuspend == 1)
            if (*pxTicksToWait == portMAX_DELAY) {
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec22:	d102      	bne.n	800ec2a <xTaskCheckForTimeOut+0x6a>
            /* If INCLUDE_vTaskSuspend is set to 1 and the block time
            specified is the maximum block time then the task should block
            indefinitely, and therefore never time out. */
            xReturn = pdFALSE;
 800ec24:	2300      	movs	r3, #0
 800ec26:	61fb      	str	r3, [r7, #28]
 800ec28:	e023      	b.n	800ec72 <xTaskCheckForTimeOut+0xb2>
        } else
#endif

            if ((xNumOfOverflows != pxTimeOut->xOverflowCount) && (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681a      	ldr	r2, [r3, #0]
 800ec2e:	4b15      	ldr	r3, [pc, #84]	@ (800ec84 <xTaskCheckForTimeOut+0xc4>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	429a      	cmp	r2, r3
 800ec34:	d007      	beq.n	800ec46 <xTaskCheckForTimeOut+0x86>
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	685b      	ldr	r3, [r3, #4]
 800ec3a:	69ba      	ldr	r2, [r7, #24]
 800ec3c:	429a      	cmp	r2, r3
 800ec3e:	d302      	bcc.n	800ec46 <xTaskCheckForTimeOut+0x86>
            /* The tick count is greater than the time at which
            vTaskSetTimeout() was called, but has also overflowed since
            vTaskSetTimeOut() was called.  It must have wrapped all the way
            around and gone past again. This passed since vTaskSetTimeout()
            was called. */
            xReturn = pdTRUE;
 800ec40:	2301      	movs	r3, #1
 800ec42:	61fb      	str	r3, [r7, #28]
 800ec44:	e015      	b.n	800ec72 <xTaskCheckForTimeOut+0xb2>
        } else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	697a      	ldr	r2, [r7, #20]
 800ec4c:	429a      	cmp	r2, r3
 800ec4e:	d20b      	bcs.n	800ec68 <xTaskCheckForTimeOut+0xa8>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	681a      	ldr	r2, [r3, #0]
 800ec54:	697b      	ldr	r3, [r7, #20]
 800ec56:	1ad2      	subs	r2, r2, r3
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState(pxTimeOut);
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f7ff ff99 	bl	800eb94 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800ec62:	2300      	movs	r3, #0
 800ec64:	61fb      	str	r3, [r7, #28]
 800ec66:	e004      	b.n	800ec72 <xTaskCheckForTimeOut+0xb2>
        } else {
            *pxTicksToWait = 0;
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800ec6e:	2301      	movs	r3, #1
 800ec70:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800ec72:	f000 fecb 	bl	800fa0c <vPortExitCritical>

    return xReturn;
 800ec76:	69fb      	ldr	r3, [r7, #28]
}
 800ec78:	4618      	mov	r0, r3
 800ec7a:	3720      	adds	r7, #32
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}
 800ec80:	20000eb8 	.word	0x20000eb8
 800ec84:	20000ecc 	.word	0x20000ecc

0800ec88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield(void) {
 800ec88:	b480      	push	{r7}
 800ec8a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800ec8c:	4b03      	ldr	r3, [pc, #12]	@ (800ec9c <vTaskMissedYield+0x14>)
 800ec8e:	2201      	movs	r2, #1
 800ec90:	601a      	str	r2, [r3, #0]
}
 800ec92:	bf00      	nop
 800ec94:	46bd      	mov	sp, r7
 800ec96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9a:	4770      	bx	lr
 800ec9c:	20000ec8 	.word	0x20000ec8

0800eca0 <prvIdleTask>:
 * language extensions.  The equivalent prototype for this function is:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION(prvIdleTask, pvParameters) {
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b082      	sub	sp, #8
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
    portALLOCATE_SECURE_CONTEXT(configMINIMAL_SECURE_STACK_SIZE);

    for (;;) {
        /* See if any tasks have deleted themselves - if so then the idle task
        is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800eca8:	f000 f852 	bl	800ed50 <prvCheckTasksWaitingTermination>

            A critical region is not required here as we are just reading from
            the list, and an occasional incorrect value will not matter.  If
            the ready list at the idle priority contains more than one task
            then a task other than the idle task is ready to execute. */
            if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
 800ecac:	4b06      	ldr	r3, [pc, #24]	@ (800ecc8 <prvIdleTask+0x28>)
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	2b01      	cmp	r3, #1
 800ecb2:	d9f9      	bls.n	800eca8 <prvIdleTask+0x8>
                taskYIELD();
 800ecb4:	4b05      	ldr	r3, [pc, #20]	@ (800eccc <prvIdleTask+0x2c>)
 800ecb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ecba:	601a      	str	r2, [r3, #0]
 800ecbc:	f3bf 8f4f 	dsb	sy
 800ecc0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800ecc4:	e7f0      	b.n	800eca8 <prvIdleTask+0x8>
 800ecc6:	bf00      	nop
 800ecc8:	20000db8 	.word	0x20000db8
 800eccc:	e000ed04 	.word	0xe000ed04

0800ecd0 <prvInitialiseTaskLists>:
}

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists(void) {
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b082      	sub	sp, #8
 800ecd4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for (uxPriority = (UBaseType_t)0U; uxPriority < (UBaseType_t)configMAX_PRIORITIES; uxPriority++) {
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	607b      	str	r3, [r7, #4]
 800ecda:	e00c      	b.n	800ecf6 <prvInitialiseTaskLists+0x26>
        vListInitialise(&(pxReadyTasksLists[uxPriority]));
 800ecdc:	687a      	ldr	r2, [r7, #4]
 800ecde:	4613      	mov	r3, r2
 800ece0:	009b      	lsls	r3, r3, #2
 800ece2:	4413      	add	r3, r2
 800ece4:	009b      	lsls	r3, r3, #2
 800ece6:	4a12      	ldr	r2, [pc, #72]	@ (800ed30 <prvInitialiseTaskLists+0x60>)
 800ece8:	4413      	add	r3, r2
 800ecea:	4618      	mov	r0, r3
 800ecec:	f7fe fbda 	bl	800d4a4 <vListInitialise>
    for (uxPriority = (UBaseType_t)0U; uxPriority < (UBaseType_t)configMAX_PRIORITIES; uxPriority++) {
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	3301      	adds	r3, #1
 800ecf4:	607b      	str	r3, [r7, #4]
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2b06      	cmp	r3, #6
 800ecfa:	d9ef      	bls.n	800ecdc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise(&xDelayedTaskList1);
 800ecfc:	480d      	ldr	r0, [pc, #52]	@ (800ed34 <prvInitialiseTaskLists+0x64>)
 800ecfe:	f7fe fbd1 	bl	800d4a4 <vListInitialise>
    vListInitialise(&xDelayedTaskList2);
 800ed02:	480d      	ldr	r0, [pc, #52]	@ (800ed38 <prvInitialiseTaskLists+0x68>)
 800ed04:	f7fe fbce 	bl	800d4a4 <vListInitialise>
    vListInitialise(&xPendingReadyList);
 800ed08:	480c      	ldr	r0, [pc, #48]	@ (800ed3c <prvInitialiseTaskLists+0x6c>)
 800ed0a:	f7fe fbcb 	bl	800d4a4 <vListInitialise>

#if (INCLUDE_vTaskDelete == 1)
    { vListInitialise(&xTasksWaitingTermination); }
 800ed0e:	480c      	ldr	r0, [pc, #48]	@ (800ed40 <prvInitialiseTaskLists+0x70>)
 800ed10:	f7fe fbc8 	bl	800d4a4 <vListInitialise>
#endif /* INCLUDE_vTaskDelete */

#if (INCLUDE_vTaskSuspend == 1)
    { vListInitialise(&xSuspendedTaskList); }
 800ed14:	480b      	ldr	r0, [pc, #44]	@ (800ed44 <prvInitialiseTaskLists+0x74>)
 800ed16:	f7fe fbc5 	bl	800d4a4 <vListInitialise>
#endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
    using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800ed1a:	4b0b      	ldr	r3, [pc, #44]	@ (800ed48 <prvInitialiseTaskLists+0x78>)
 800ed1c:	4a05      	ldr	r2, [pc, #20]	@ (800ed34 <prvInitialiseTaskLists+0x64>)
 800ed1e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ed20:	4b0a      	ldr	r3, [pc, #40]	@ (800ed4c <prvInitialiseTaskLists+0x7c>)
 800ed22:	4a05      	ldr	r2, [pc, #20]	@ (800ed38 <prvInitialiseTaskLists+0x68>)
 800ed24:	601a      	str	r2, [r3, #0]
}
 800ed26:	bf00      	nop
 800ed28:	3708      	adds	r7, #8
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}
 800ed2e:	bf00      	nop
 800ed30:	20000db8 	.word	0x20000db8
 800ed34:	20000e44 	.word	0x20000e44
 800ed38:	20000e58 	.word	0x20000e58
 800ed3c:	20000e74 	.word	0x20000e74
 800ed40:	20000e88 	.word	0x20000e88
 800ed44:	20000ea0 	.word	0x20000ea0
 800ed48:	20000e6c 	.word	0x20000e6c
 800ed4c:	20000e70 	.word	0x20000e70

0800ed50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination(void) {
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b082      	sub	sp, #8
 800ed54:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
        being called too often in the idle task. */
        while (uxDeletedTasksWaitingCleanUp > (UBaseType_t)0U) {
 800ed56:	e019      	b.n	800ed8c <prvCheckTasksWaitingTermination+0x3c>
            taskENTER_CRITICAL();
 800ed58:	f000 fe26 	bl	800f9a8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY(
 800ed5c:	4b10      	ldr	r3, [pc, #64]	@ (800eda0 <prvCheckTasksWaitingTermination+0x50>)
 800ed5e:	68db      	ldr	r3, [r3, #12]
 800ed60:	68db      	ldr	r3, [r3, #12]
 800ed62:	607b      	str	r3, [r7, #4]
                    (&xTasksWaitingTermination)); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
                (void)uxListRemove(&(pxTCB->xStateListItem));
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	3304      	adds	r3, #4
 800ed68:	4618      	mov	r0, r3
 800ed6a:	f7fe fc25 	bl	800d5b8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800ed6e:	4b0d      	ldr	r3, [pc, #52]	@ (800eda4 <prvCheckTasksWaitingTermination+0x54>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	3b01      	subs	r3, #1
 800ed74:	4a0b      	ldr	r2, [pc, #44]	@ (800eda4 <prvCheckTasksWaitingTermination+0x54>)
 800ed76:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800ed78:	4b0b      	ldr	r3, [pc, #44]	@ (800eda8 <prvCheckTasksWaitingTermination+0x58>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	3b01      	subs	r3, #1
 800ed7e:	4a0a      	ldr	r2, [pc, #40]	@ (800eda8 <prvCheckTasksWaitingTermination+0x58>)
 800ed80:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800ed82:	f000 fe43 	bl	800fa0c <vPortExitCritical>

            prvDeleteTCB(pxTCB);
 800ed86:	6878      	ldr	r0, [r7, #4]
 800ed88:	f000 f810 	bl	800edac <prvDeleteTCB>
        while (uxDeletedTasksWaitingCleanUp > (UBaseType_t)0U) {
 800ed8c:	4b06      	ldr	r3, [pc, #24]	@ (800eda8 <prvCheckTasksWaitingTermination+0x58>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d1e1      	bne.n	800ed58 <prvCheckTasksWaitingTermination+0x8>
        }
    }
#endif /* INCLUDE_vTaskDelete */
}
 800ed94:	bf00      	nop
 800ed96:	bf00      	nop
 800ed98:	3708      	adds	r7, #8
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}
 800ed9e:	bf00      	nop
 800eda0:	20000e88 	.word	0x20000e88
 800eda4:	20000eb4 	.word	0x20000eb4
 800eda8:	20000e9c 	.word	0x20000e9c

0800edac <prvDeleteTCB>:
#endif /* INCLUDE_uxTaskGetStackHighWaterMark */
/*-----------------------------------------------------------*/

#if (INCLUDE_vTaskDelete == 1)

static void prvDeleteTCB(TCB_t * pxTCB) {
 800edac:	b580      	push	{r7, lr}
 800edae:	b084      	sub	sp, #16
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
#elif (tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
    {
        /* The task could have been allocated statically or dynamically, so
        check what was statically allocated before trying to free the
        memory. */
        if (pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB) {
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d108      	bne.n	800edd0 <prvDeleteTCB+0x24>
            /* Both the stack and TCB were allocated dynamically, so both
            must be freed. */
            vPortFree(pxTCB->pxStack);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800edc2:	4618      	mov	r0, r3
 800edc4:	f000 ff24 	bl	800fc10 <vPortFree>
            vPortFree(pxTCB);
 800edc8:	6878      	ldr	r0, [r7, #4]
 800edca:	f000 ff21 	bl	800fc10 <vPortFree>
            configASSERT(pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB);
            mtCOVERAGE_TEST_MARKER();
        }
    }
#endif                                                 /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800edce:	e019      	b.n	800ee04 <prvDeleteTCB+0x58>
        } else if (pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY) {
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800edd6:	2b01      	cmp	r3, #1
 800edd8:	d103      	bne.n	800ede2 <prvDeleteTCB+0x36>
            vPortFree(pxTCB);
 800edda:	6878      	ldr	r0, [r7, #4]
 800eddc:	f000 ff18 	bl	800fc10 <vPortFree>
}
 800ede0:	e010      	b.n	800ee04 <prvDeleteTCB+0x58>
            configASSERT(pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800ede8:	2b02      	cmp	r3, #2
 800edea:	d00b      	beq.n	800ee04 <prvDeleteTCB+0x58>
    __asm volatile("	mov %0, %1												\n"
 800edec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edf0:	f383 8811 	msr	BASEPRI, r3
 800edf4:	f3bf 8f6f 	isb	sy
 800edf8:	f3bf 8f4f 	dsb	sy
 800edfc:	60fb      	str	r3, [r7, #12]
}
 800edfe:	bf00      	nop
 800ee00:	bf00      	nop
 800ee02:	e7fd      	b.n	800ee00 <prvDeleteTCB+0x54>
}
 800ee04:	bf00      	nop
 800ee06:	3710      	adds	r7, #16
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}

0800ee0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime(void) {
 800ee0c:	b480      	push	{r7}
 800ee0e:	b083      	sub	sp, #12
 800ee10:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;

    if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
 800ee12:	4b0c      	ldr	r3, [pc, #48]	@ (800ee44 <prvResetNextTaskUnblockTime+0x38>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d104      	bne.n	800ee26 <prvResetNextTaskUnblockTime+0x1a>
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
        the maximum possible value so it is	extremely unlikely that the
        if( xTickCount >= xNextTaskUnblockTime ) test will pass until
        there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800ee1c:	4b0a      	ldr	r3, [pc, #40]	@ (800ee48 <prvResetNextTaskUnblockTime+0x3c>)
 800ee1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ee22:	601a      	str	r2, [r3, #0]
        which the task at the head of the delayed list should be removed
        from the Blocked state. */
        (pxTCB) = listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
        xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    }
}
 800ee24:	e008      	b.n	800ee38 <prvResetNextTaskUnblockTime+0x2c>
        (pxTCB) = listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee26:	4b07      	ldr	r3, [pc, #28]	@ (800ee44 <prvResetNextTaskUnblockTime+0x38>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	68db      	ldr	r3, [r3, #12]
 800ee2c:	68db      	ldr	r3, [r3, #12]
 800ee2e:	607b      	str	r3, [r7, #4]
        xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	685b      	ldr	r3, [r3, #4]
 800ee34:	4a04      	ldr	r2, [pc, #16]	@ (800ee48 <prvResetNextTaskUnblockTime+0x3c>)
 800ee36:	6013      	str	r3, [r2, #0]
}
 800ee38:	bf00      	nop
 800ee3a:	370c      	adds	r7, #12
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee42:	4770      	bx	lr
 800ee44:	20000e6c 	.word	0x20000e6c
 800ee48:	20000ed4 	.word	0x20000ed4

0800ee4c <xTaskGetSchedulerState>:
#endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
/*-----------------------------------------------------------*/

#if ((INCLUDE_xTaskGetSchedulerState == 1) || (configUSE_TIMERS == 1))

BaseType_t xTaskGetSchedulerState(void) {
 800ee4c:	b480      	push	{r7}
 800ee4e:	b083      	sub	sp, #12
 800ee50:	af00      	add	r7, sp, #0
    BaseType_t xReturn;

    if (xSchedulerRunning == pdFALSE) {
 800ee52:	4b0b      	ldr	r3, [pc, #44]	@ (800ee80 <xTaskGetSchedulerState+0x34>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d102      	bne.n	800ee60 <xTaskGetSchedulerState+0x14>
        xReturn = taskSCHEDULER_NOT_STARTED;
 800ee5a:	2301      	movs	r3, #1
 800ee5c:	607b      	str	r3, [r7, #4]
 800ee5e:	e008      	b.n	800ee72 <xTaskGetSchedulerState+0x26>
    } else {
        if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
 800ee60:	4b08      	ldr	r3, [pc, #32]	@ (800ee84 <xTaskGetSchedulerState+0x38>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d102      	bne.n	800ee6e <xTaskGetSchedulerState+0x22>
            xReturn = taskSCHEDULER_RUNNING;
 800ee68:	2302      	movs	r3, #2
 800ee6a:	607b      	str	r3, [r7, #4]
 800ee6c:	e001      	b.n	800ee72 <xTaskGetSchedulerState+0x26>
        } else {
            xReturn = taskSCHEDULER_SUSPENDED;
 800ee6e:	2300      	movs	r3, #0
 800ee70:	607b      	str	r3, [r7, #4]
        }
    }

    return xReturn;
 800ee72:	687b      	ldr	r3, [r7, #4]
}
 800ee74:	4618      	mov	r0, r3
 800ee76:	370c      	adds	r7, #12
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7e:	4770      	bx	lr
 800ee80:	20000ec0 	.word	0x20000ec0
 800ee84:	20000edc 	.word	0x20000edc

0800ee88 <prvAddCurrentTaskToDelayedList>:
}

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely) {
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b084      	sub	sp, #16
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
 800ee90:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800ee92:	4b29      	ldr	r3, [pc, #164]	@ (800ef38 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	60fb      	str	r3, [r7, #12]
    }
#endif

    /* Remove the task from the ready list before adding it to the blocked list
    as the same list item is used for both lists. */
    if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t)0) {
 800ee98:	4b28      	ldr	r3, [pc, #160]	@ (800ef3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	3304      	adds	r3, #4
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f7fe fb8a 	bl	800d5b8 <uxListRemove>
 800eea4:	4603      	mov	r3, r0
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d10b      	bne.n	800eec2 <prvAddCurrentTaskToDelayedList+0x3a>
        /* The current task must be in a ready list, so there is no need to
        check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY(pxCurrentTCB->uxPriority,
 800eeaa:	4b24      	ldr	r3, [pc, #144]	@ (800ef3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eeb0:	2201      	movs	r2, #1
 800eeb2:	fa02 f303 	lsl.w	r3, r2, r3
 800eeb6:	43da      	mvns	r2, r3
 800eeb8:	4b21      	ldr	r3, [pc, #132]	@ (800ef40 <prvAddCurrentTaskToDelayedList+0xb8>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	4013      	ands	r3, r2
 800eebe:	4a20      	ldr	r2, [pc, #128]	@ (800ef40 <prvAddCurrentTaskToDelayedList+0xb8>)
 800eec0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

#if (INCLUDE_vTaskSuspend == 1)
    {
        if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eec8:	d10a      	bne.n	800eee0 <prvAddCurrentTaskToDelayedList+0x58>
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d007      	beq.n	800eee0 <prvAddCurrentTaskToDelayedList+0x58>
            /* Add the task to the suspended task list instead of a delayed task
            list to ensure it is not woken by a timing event.  It will block
            indefinitely. */
            vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
 800eed0:	4b1a      	ldr	r3, [pc, #104]	@ (800ef3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	3304      	adds	r3, #4
 800eed6:	4619      	mov	r1, r3
 800eed8:	481a      	ldr	r0, [pc, #104]	@ (800ef44 <prvAddCurrentTaskToDelayedList+0xbc>)
 800eeda:	f7fe fb10 	bl	800d4fe <vListInsertEnd>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        (void)xCanBlockIndefinitely;
    }
#endif /* INCLUDE_vTaskSuspend */
}
 800eede:	e026      	b.n	800ef2e <prvAddCurrentTaskToDelayedList+0xa6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800eee0:	68fa      	ldr	r2, [r7, #12]
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	4413      	add	r3, r2
 800eee6:	60bb      	str	r3, [r7, #8]
            listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem), xTimeToWake);
 800eee8:	4b14      	ldr	r3, [pc, #80]	@ (800ef3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	68ba      	ldr	r2, [r7, #8]
 800eeee:	605a      	str	r2, [r3, #4]
            if (xTimeToWake < xConstTickCount) {
 800eef0:	68ba      	ldr	r2, [r7, #8]
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	429a      	cmp	r2, r3
 800eef6:	d209      	bcs.n	800ef0c <prvAddCurrentTaskToDelayedList+0x84>
                vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
 800eef8:	4b13      	ldr	r3, [pc, #76]	@ (800ef48 <prvAddCurrentTaskToDelayedList+0xc0>)
 800eefa:	681a      	ldr	r2, [r3, #0]
 800eefc:	4b0f      	ldr	r3, [pc, #60]	@ (800ef3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	3304      	adds	r3, #4
 800ef02:	4619      	mov	r1, r3
 800ef04:	4610      	mov	r0, r2
 800ef06:	f7fe fb1e 	bl	800d546 <vListInsert>
}
 800ef0a:	e010      	b.n	800ef2e <prvAddCurrentTaskToDelayedList+0xa6>
                vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
 800ef0c:	4b0f      	ldr	r3, [pc, #60]	@ (800ef4c <prvAddCurrentTaskToDelayedList+0xc4>)
 800ef0e:	681a      	ldr	r2, [r3, #0]
 800ef10:	4b0a      	ldr	r3, [pc, #40]	@ (800ef3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	3304      	adds	r3, #4
 800ef16:	4619      	mov	r1, r3
 800ef18:	4610      	mov	r0, r2
 800ef1a:	f7fe fb14 	bl	800d546 <vListInsert>
                if (xTimeToWake < xNextTaskUnblockTime) {
 800ef1e:	4b0c      	ldr	r3, [pc, #48]	@ (800ef50 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	68ba      	ldr	r2, [r7, #8]
 800ef24:	429a      	cmp	r2, r3
 800ef26:	d202      	bcs.n	800ef2e <prvAddCurrentTaskToDelayedList+0xa6>
                    xNextTaskUnblockTime = xTimeToWake;
 800ef28:	4a09      	ldr	r2, [pc, #36]	@ (800ef50 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ef2a:	68bb      	ldr	r3, [r7, #8]
 800ef2c:	6013      	str	r3, [r2, #0]
}
 800ef2e:	bf00      	nop
 800ef30:	3710      	adds	r7, #16
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}
 800ef36:	bf00      	nop
 800ef38:	20000eb8 	.word	0x20000eb8
 800ef3c:	20000db4 	.word	0x20000db4
 800ef40:	20000ebc 	.word	0x20000ebc
 800ef44:	20000ea0 	.word	0x20000ea0
 800ef48:	20000e70 	.word	0x20000e70
 800ef4c:	20000e6c 	.word	0x20000e6c
 800ef50:	20000ed4 	.word	0x20000ed4

0800ef54 <xTimerCreateTimerTask>:
 */
static void prvInitialiseNewTimer(const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                  const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction, Timer_t * pxNewTimer) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask(void) {
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b08a      	sub	sp, #40	@ 0x28
 800ef58:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdFAIL;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	617b      	str	r3, [r7, #20]

    /* This function is called when the scheduler is started if
    configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
    timer service task has been created/initialised.  If timers have already
    been created then the initialisation will already have been performed. */
    prvCheckForValidListAndQueue();
 800ef5e:	f000 fb73 	bl	800f648 <prvCheckForValidListAndQueue>

    if (xTimerQueue != NULL) {
 800ef62:	4b1d      	ldr	r3, [pc, #116]	@ (800efd8 <xTimerCreateTimerTask+0x84>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d021      	beq.n	800efae <xTimerCreateTimerTask+0x5a>
#if (configSUPPORT_STATIC_ALLOCATION == 1)
        {
            StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	60fb      	str	r3, [r7, #12]
            StackType_t * pxTimerTaskStackBuffer = NULL;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	60bb      	str	r3, [r7, #8]
            uint32_t ulTimerTaskStackSize;

            vApplicationGetTimerTaskMemory(&pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize);
 800ef72:	1d3a      	adds	r2, r7, #4
 800ef74:	f107 0108 	add.w	r1, r7, #8
 800ef78:	f107 030c 	add.w	r3, r7, #12
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f7f3 fc27 	bl	80027d0 <vApplicationGetTimerTaskMemory>
            xTimerTaskHandle = xTaskCreateStatic(prvTimerTask, configTIMER_SERVICE_TASK_NAME, ulTimerTaskStackSize, NULL, ((UBaseType_t)configTIMER_TASK_PRIORITY) | portPRIVILEGE_BIT, pxTimerTaskStackBuffer, pxTimerTaskTCBBuffer);
 800ef82:	6879      	ldr	r1, [r7, #4]
 800ef84:	68bb      	ldr	r3, [r7, #8]
 800ef86:	68fa      	ldr	r2, [r7, #12]
 800ef88:	9202      	str	r2, [sp, #8]
 800ef8a:	9301      	str	r3, [sp, #4]
 800ef8c:	2303      	movs	r3, #3
 800ef8e:	9300      	str	r3, [sp, #0]
 800ef90:	2300      	movs	r3, #0
 800ef92:	460a      	mov	r2, r1
 800ef94:	4911      	ldr	r1, [pc, #68]	@ (800efdc <xTimerCreateTimerTask+0x88>)
 800ef96:	4812      	ldr	r0, [pc, #72]	@ (800efe0 <xTimerCreateTimerTask+0x8c>)
 800ef98:	f7ff f820 	bl	800dfdc <xTaskCreateStatic>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	4a11      	ldr	r2, [pc, #68]	@ (800efe4 <xTimerCreateTimerTask+0x90>)
 800efa0:	6013      	str	r3, [r2, #0]

            if (xTimerTaskHandle != NULL) {
 800efa2:	4b10      	ldr	r3, [pc, #64]	@ (800efe4 <xTimerCreateTimerTask+0x90>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d001      	beq.n	800efae <xTimerCreateTimerTask+0x5a>
                xReturn = pdPASS;
 800efaa:	2301      	movs	r3, #1
 800efac:	617b      	str	r3, [r7, #20]
#endif /* configSUPPORT_STATIC_ALLOCATION */
    } else {
        mtCOVERAGE_TEST_MARKER();
    }

    configASSERT(xReturn);
 800efae:	697b      	ldr	r3, [r7, #20]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d10b      	bne.n	800efcc <xTimerCreateTimerTask+0x78>
    __asm volatile("	mov %0, %1												\n"
 800efb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efb8:	f383 8811 	msr	BASEPRI, r3
 800efbc:	f3bf 8f6f 	isb	sy
 800efc0:	f3bf 8f4f 	dsb	sy
 800efc4:	613b      	str	r3, [r7, #16]
}
 800efc6:	bf00      	nop
 800efc8:	bf00      	nop
 800efca:	e7fd      	b.n	800efc8 <xTimerCreateTimerTask+0x74>
    return xReturn;
 800efcc:	697b      	ldr	r3, [r7, #20]
}
 800efce:	4618      	mov	r0, r3
 800efd0:	3718      	adds	r7, #24
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bd80      	pop	{r7, pc}
 800efd6:	bf00      	nop
 800efd8:	20000f10 	.word	0x20000f10
 800efdc:	08013c20 	.word	0x08013c20
 800efe0:	0800f219 	.word	0x0800f219
 800efe4:	20000f14 	.word	0x20000f14

0800efe8 <xTimerCreate>:
/*-----------------------------------------------------------*/

#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)

TimerHandle_t xTimerCreate(const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                           const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction) {
 800efe8:	b580      	push	{r7, lr}
 800efea:	b088      	sub	sp, #32
 800efec:	af02      	add	r7, sp, #8
 800efee:	60f8      	str	r0, [r7, #12]
 800eff0:	60b9      	str	r1, [r7, #8]
 800eff2:	607a      	str	r2, [r7, #4]
 800eff4:	603b      	str	r3, [r7, #0]
    Timer_t * pxNewTimer;

    pxNewTimer = (Timer_t *)pvPortMalloc(sizeof(Timer_t)); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800eff6:	2028      	movs	r0, #40	@ 0x28
 800eff8:	f000 fdf8 	bl	800fbec <pvPortMalloc>
 800effc:	6178      	str	r0, [r7, #20]

    if (pxNewTimer != NULL) {
 800effe:	697b      	ldr	r3, [r7, #20]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d00d      	beq.n	800f020 <xTimerCreate+0x38>
        /* Status is thus far zero as the timer is not created statically
        and has not been started.  The auto-reload bit may get set in
        prvInitialiseNewTimer. */
        pxNewTimer->ucStatus = 0x00;
 800f004:	697b      	ldr	r3, [r7, #20]
 800f006:	2200      	movs	r2, #0
 800f008:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        prvInitialiseNewTimer(pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer);
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	9301      	str	r3, [sp, #4]
 800f010:	6a3b      	ldr	r3, [r7, #32]
 800f012:	9300      	str	r3, [sp, #0]
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	687a      	ldr	r2, [r7, #4]
 800f018:	68b9      	ldr	r1, [r7, #8]
 800f01a:	68f8      	ldr	r0, [r7, #12]
 800f01c:	f000 f805 	bl	800f02a <prvInitialiseNewTimer>
    }

    return pxNewTimer;
 800f020:	697b      	ldr	r3, [r7, #20]
}
 800f022:	4618      	mov	r0, r3
 800f024:	3718      	adds	r7, #24
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}

0800f02a <prvInitialiseNewTimer>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewTimer(const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                  const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction, Timer_t * pxNewTimer) {
 800f02a:	b580      	push	{r7, lr}
 800f02c:	b086      	sub	sp, #24
 800f02e:	af00      	add	r7, sp, #0
 800f030:	60f8      	str	r0, [r7, #12]
 800f032:	60b9      	str	r1, [r7, #8]
 800f034:	607a      	str	r2, [r7, #4]
 800f036:	603b      	str	r3, [r7, #0]
    /* 0 is not a valid value for xTimerPeriodInTicks. */
    configASSERT((xTimerPeriodInTicks > 0));
 800f038:	68bb      	ldr	r3, [r7, #8]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d10b      	bne.n	800f056 <prvInitialiseNewTimer+0x2c>
    __asm volatile("	mov %0, %1												\n"
 800f03e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f042:	f383 8811 	msr	BASEPRI, r3
 800f046:	f3bf 8f6f 	isb	sy
 800f04a:	f3bf 8f4f 	dsb	sy
 800f04e:	617b      	str	r3, [r7, #20]
}
 800f050:	bf00      	nop
 800f052:	bf00      	nop
 800f054:	e7fd      	b.n	800f052 <prvInitialiseNewTimer+0x28>

    if (pxNewTimer != NULL) {
 800f056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d01e      	beq.n	800f09a <prvInitialiseNewTimer+0x70>
        /* Ensure the infrastructure used by the timer service task has been
        created/initialised. */
        prvCheckForValidListAndQueue();
 800f05c:	f000 faf4 	bl	800f648 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
        parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 800f060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f062:	68fa      	ldr	r2, [r7, #12]
 800f064:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f068:	68ba      	ldr	r2, [r7, #8]
 800f06a:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 800f06c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f06e:	683a      	ldr	r2, [r7, #0]
 800f070:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f074:	6a3a      	ldr	r2, [r7, #32]
 800f076:	621a      	str	r2, [r3, #32]
        vListInitialiseItem(&(pxNewTimer->xTimerListItem));
 800f078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f07a:	3304      	adds	r3, #4
 800f07c:	4618      	mov	r0, r3
 800f07e:	f7fe fa31 	bl	800d4e4 <vListInitialiseItem>
        if (uxAutoReload != pdFALSE) {
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d008      	beq.n	800f09a <prvInitialiseNewTimer+0x70>
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800f088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f08a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f08e:	f043 0304 	orr.w	r3, r3, #4
 800f092:	b2da      	uxtb	r2, r3
 800f094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f096:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }
        traceTIMER_CREATE(pxNewTimer);
    }
}
 800f09a:	bf00      	nop
 800f09c:	3718      	adds	r7, #24
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd80      	pop	{r7, pc}
	...

0800f0a4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand(TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait) {
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b08a      	sub	sp, #40	@ 0x28
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	60f8      	str	r0, [r7, #12]
 800f0ac:	60b9      	str	r1, [r7, #8]
 800f0ae:	607a      	str	r2, [r7, #4]
 800f0b0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdFAIL;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	627b      	str	r3, [r7, #36]	@ 0x24
    DaemonTaskMessage_t xMessage;

    configASSERT(xTimer);
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d10b      	bne.n	800f0d4 <xTimerGenericCommand+0x30>
    __asm volatile("	mov %0, %1												\n"
 800f0bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0c0:	f383 8811 	msr	BASEPRI, r3
 800f0c4:	f3bf 8f6f 	isb	sy
 800f0c8:	f3bf 8f4f 	dsb	sy
 800f0cc:	623b      	str	r3, [r7, #32]
}
 800f0ce:	bf00      	nop
 800f0d0:	bf00      	nop
 800f0d2:	e7fd      	b.n	800f0d0 <xTimerGenericCommand+0x2c>

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if (xTimerQueue != NULL) {
 800f0d4:	4b19      	ldr	r3, [pc, #100]	@ (800f13c <xTimerGenericCommand+0x98>)
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d02a      	beq.n	800f132 <xTimerGenericCommand+0x8e>
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	617b      	str	r3, [r7, #20]
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	61bb      	str	r3, [r7, #24]
        xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	61fb      	str	r3, [r7, #28]

        if (xCommandID < tmrFIRST_FROM_ISR_COMMAND) {
 800f0e8:	68bb      	ldr	r3, [r7, #8]
 800f0ea:	2b05      	cmp	r3, #5
 800f0ec:	dc18      	bgt.n	800f120 <xTimerGenericCommand+0x7c>
            if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
 800f0ee:	f7ff fead 	bl	800ee4c <xTaskGetSchedulerState>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	2b02      	cmp	r3, #2
 800f0f6:	d109      	bne.n	800f10c <xTimerGenericCommand+0x68>
                xReturn = xQueueSendToBack(xTimerQueue, &xMessage, xTicksToWait);
 800f0f8:	4b10      	ldr	r3, [pc, #64]	@ (800f13c <xTimerGenericCommand+0x98>)
 800f0fa:	6818      	ldr	r0, [r3, #0]
 800f0fc:	f107 0114 	add.w	r1, r7, #20
 800f100:	2300      	movs	r3, #0
 800f102:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f104:	f7fe fb88 	bl	800d818 <xQueueGenericSend>
 800f108:	6278      	str	r0, [r7, #36]	@ 0x24
 800f10a:	e012      	b.n	800f132 <xTimerGenericCommand+0x8e>
            } else {
                xReturn = xQueueSendToBack(xTimerQueue, &xMessage, tmrNO_DELAY);
 800f10c:	4b0b      	ldr	r3, [pc, #44]	@ (800f13c <xTimerGenericCommand+0x98>)
 800f10e:	6818      	ldr	r0, [r3, #0]
 800f110:	f107 0114 	add.w	r1, r7, #20
 800f114:	2300      	movs	r3, #0
 800f116:	2200      	movs	r2, #0
 800f118:	f7fe fb7e 	bl	800d818 <xQueueGenericSend>
 800f11c:	6278      	str	r0, [r7, #36]	@ 0x24
 800f11e:	e008      	b.n	800f132 <xTimerGenericCommand+0x8e>
            }
        } else {
            xReturn = xQueueSendToBackFromISR(xTimerQueue, &xMessage, pxHigherPriorityTaskWoken);
 800f120:	4b06      	ldr	r3, [pc, #24]	@ (800f13c <xTimerGenericCommand+0x98>)
 800f122:	6818      	ldr	r0, [r3, #0]
 800f124:	f107 0114 	add.w	r1, r7, #20
 800f128:	2300      	movs	r3, #0
 800f12a:	683a      	ldr	r2, [r7, #0]
 800f12c:	f7fe fc76 	bl	800da1c <xQueueGenericSendFromISR>
 800f130:	6278      	str	r0, [r7, #36]	@ 0x24
        traceTIMER_COMMAND_SEND(xTimer, xCommandID, xOptionalValue, xReturn);
    } else {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
 800f132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f134:	4618      	mov	r0, r3
 800f136:	3728      	adds	r7, #40	@ 0x28
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}
 800f13c:	20000f10 	.word	0x20000f10

0800f140 <xTimerGetPeriod>:
    configASSERT((xTimerTaskHandle != NULL));
    return xTimerTaskHandle;
}
/*-----------------------------------------------------------*/

TickType_t xTimerGetPeriod(TimerHandle_t xTimer) {
 800f140:	b480      	push	{r7}
 800f142:	b085      	sub	sp, #20
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
    Timer_t * pxTimer = xTimer;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	60fb      	str	r3, [r7, #12]

    configASSERT(xTimer);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d10b      	bne.n	800f16a <xTimerGetPeriod+0x2a>
    __asm volatile("	mov %0, %1												\n"
 800f152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f156:	f383 8811 	msr	BASEPRI, r3
 800f15a:	f3bf 8f6f 	isb	sy
 800f15e:	f3bf 8f4f 	dsb	sy
 800f162:	60bb      	str	r3, [r7, #8]
}
 800f164:	bf00      	nop
 800f166:	bf00      	nop
 800f168:	e7fd      	b.n	800f166 <xTimerGetPeriod+0x26>
    return pxTimer->xTimerPeriodInTicks;
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	699b      	ldr	r3, [r3, #24]
}
 800f16e:	4618      	mov	r0, r3
 800f170:	3714      	adds	r7, #20
 800f172:	46bd      	mov	sp, r7
 800f174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f178:	4770      	bx	lr
	...

0800f17c <prvProcessExpiredTimer>:
    configASSERT(xTimer);
    return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer(const TickType_t xNextExpireTime, const TickType_t xTimeNow) {
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b088      	sub	sp, #32
 800f180:	af02      	add	r7, sp, #8
 800f182:	6078      	str	r0, [r7, #4]
 800f184:	6039      	str	r1, [r7, #0]
    BaseType_t xResult;
    Timer_t * const pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(
 800f186:	4b23      	ldr	r3, [pc, #140]	@ (800f214 <prvProcessExpiredTimer+0x98>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	68db      	ldr	r3, [r3, #12]
 800f18c:	68db      	ldr	r3, [r3, #12]
 800f18e:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    (void)uxListRemove(&(pxTimer->xTimerListItem));
 800f190:	697b      	ldr	r3, [r7, #20]
 800f192:	3304      	adds	r3, #4
 800f194:	4618      	mov	r0, r3
 800f196:	f7fe fa0f 	bl	800d5b8 <uxListRemove>
    traceTIMER_EXPIRED(pxTimer);

    /* If the timer is an auto-reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if ((pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD) != 0) {
 800f19a:	697b      	ldr	r3, [r7, #20]
 800f19c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f1a0:	f003 0304 	and.w	r3, r3, #4
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d023      	beq.n	800f1f0 <prvProcessExpiredTimer+0x74>
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if (prvInsertTimerInActiveList(pxTimer, (xNextExpireTime + pxTimer->xTimerPeriodInTicks), xTimeNow, xNextExpireTime) != pdFALSE) {
 800f1a8:	697b      	ldr	r3, [r7, #20]
 800f1aa:	699a      	ldr	r2, [r3, #24]
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	18d1      	adds	r1, r2, r3
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	683a      	ldr	r2, [r7, #0]
 800f1b4:	6978      	ldr	r0, [r7, #20]
 800f1b6:	f000 f8d5 	bl	800f364 <prvInsertTimerInActiveList>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d020      	beq.n	800f202 <prvProcessExpiredTimer+0x86>
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	9300      	str	r3, [sp, #0]
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	687a      	ldr	r2, [r7, #4]
 800f1c8:	2100      	movs	r1, #0
 800f1ca:	6978      	ldr	r0, [r7, #20]
 800f1cc:	f7ff ff6a 	bl	800f0a4 <xTimerGenericCommand>
 800f1d0:	6138      	str	r0, [r7, #16]
            configASSERT(xResult);
 800f1d2:	693b      	ldr	r3, [r7, #16]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d114      	bne.n	800f202 <prvProcessExpiredTimer+0x86>
    __asm volatile("	mov %0, %1												\n"
 800f1d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1dc:	f383 8811 	msr	BASEPRI, r3
 800f1e0:	f3bf 8f6f 	isb	sy
 800f1e4:	f3bf 8f4f 	dsb	sy
 800f1e8:	60fb      	str	r3, [r7, #12]
}
 800f1ea:	bf00      	nop
 800f1ec:	bf00      	nop
 800f1ee:	e7fd      	b.n	800f1ec <prvProcessExpiredTimer+0x70>
            (void)xResult;
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    } else {
        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f1f0:	697b      	ldr	r3, [r7, #20]
 800f1f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f1f6:	f023 0301 	bic.w	r3, r3, #1
 800f1fa:	b2da      	uxtb	r2, r3
 800f1fc:	697b      	ldr	r3, [r7, #20]
 800f1fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
 800f202:	697b      	ldr	r3, [r7, #20]
 800f204:	6a1b      	ldr	r3, [r3, #32]
 800f206:	6978      	ldr	r0, [r7, #20]
 800f208:	4798      	blx	r3
}
 800f20a:	bf00      	nop
 800f20c:	3718      	adds	r7, #24
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}
 800f212:	bf00      	nop
 800f214:	20000f08 	.word	0x20000f08

0800f218 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION(prvTimerTask, pvParameters) {
 800f218:	b580      	push	{r7, lr}
 800f21a:	b084      	sub	sp, #16
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
#endif /* configUSE_DAEMON_TASK_STARTUP_HOOK */

    for (;;) {
        /* Query the timers list to see if it contains any timers, and if so,
        obtain the time at which the next timer will expire. */
        xNextExpireTime = prvGetNextExpireTime(&xListWasEmpty);
 800f220:	f107 0308 	add.w	r3, r7, #8
 800f224:	4618      	mov	r0, r3
 800f226:	f000 f859 	bl	800f2dc <prvGetNextExpireTime>
 800f22a:	60f8      	str	r0, [r7, #12]

        /* If a timer has expired, process it.  Otherwise, block this task
        until either a timer does expire, or a command is received. */
        prvProcessTimerOrBlockTask(xNextExpireTime, xListWasEmpty);
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	4619      	mov	r1, r3
 800f230:	68f8      	ldr	r0, [r7, #12]
 800f232:	f000 f805 	bl	800f240 <prvProcessTimerOrBlockTask>

        /* Empty the command queue. */
        prvProcessReceivedCommands();
 800f236:	f000 f8d7 	bl	800f3e8 <prvProcessReceivedCommands>
        xNextExpireTime = prvGetNextExpireTime(&xListWasEmpty);
 800f23a:	bf00      	nop
 800f23c:	e7f0      	b.n	800f220 <prvTimerTask+0x8>
	...

0800f240 <prvProcessTimerOrBlockTask>:
    }
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask(const TickType_t xNextExpireTime, BaseType_t xListWasEmpty) {
 800f240:	b580      	push	{r7, lr}
 800f242:	b084      	sub	sp, #16
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
 800f248:	6039      	str	r1, [r7, #0]
    TickType_t xTimeNow;
    BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
 800f24a:	f7ff fa1b 	bl	800e684 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
 800f24e:	f107 0308 	add.w	r3, r7, #8
 800f252:	4618      	mov	r0, r3
 800f254:	f000 f866 	bl	800f324 <prvSampleTimeNow>
 800f258:	60f8      	str	r0, [r7, #12]
        if (xTimerListsWereSwitched == pdFALSE) {
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d130      	bne.n	800f2c2 <prvProcessTimerOrBlockTask+0x82>
            /* The tick count has not overflowed, has the timer expired? */
            if ((xListWasEmpty == pdFALSE) && (xNextExpireTime <= xTimeNow)) {
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d10a      	bne.n	800f27c <prvProcessTimerOrBlockTask+0x3c>
 800f266:	687a      	ldr	r2, [r7, #4]
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	429a      	cmp	r2, r3
 800f26c:	d806      	bhi.n	800f27c <prvProcessTimerOrBlockTask+0x3c>
                (void)xTaskResumeAll();
 800f26e:	f7ff fa17 	bl	800e6a0 <xTaskResumeAll>
                prvProcessExpiredTimer(xNextExpireTime, xTimeNow);
 800f272:	68f9      	ldr	r1, [r7, #12]
 800f274:	6878      	ldr	r0, [r7, #4]
 800f276:	f7ff ff81 	bl	800f17c <prvProcessExpiredTimer>
            }
        } else {
            (void)xTaskResumeAll();
        }
    }
}
 800f27a:	e024      	b.n	800f2c6 <prvProcessTimerOrBlockTask+0x86>
                if (xListWasEmpty != pdFALSE) {
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d008      	beq.n	800f294 <prvProcessTimerOrBlockTask+0x54>
                    xListWasEmpty = listLIST_IS_EMPTY(pxOverflowTimerList);
 800f282:	4b13      	ldr	r3, [pc, #76]	@ (800f2d0 <prvProcessTimerOrBlockTask+0x90>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d101      	bne.n	800f290 <prvProcessTimerOrBlockTask+0x50>
 800f28c:	2301      	movs	r3, #1
 800f28e:	e000      	b.n	800f292 <prvProcessTimerOrBlockTask+0x52>
 800f290:	2300      	movs	r3, #0
 800f292:	603b      	str	r3, [r7, #0]
                vQueueWaitForMessageRestricted(xTimerQueue, (xNextExpireTime - xTimeNow), xListWasEmpty);
 800f294:	4b0f      	ldr	r3, [pc, #60]	@ (800f2d4 <prvProcessTimerOrBlockTask+0x94>)
 800f296:	6818      	ldr	r0, [r3, #0]
 800f298:	687a      	ldr	r2, [r7, #4]
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	1ad3      	subs	r3, r2, r3
 800f29e:	683a      	ldr	r2, [r7, #0]
 800f2a0:	4619      	mov	r1, r3
 800f2a2:	f7fe fe67 	bl	800df74 <vQueueWaitForMessageRestricted>
                if (xTaskResumeAll() == pdFALSE) {
 800f2a6:	f7ff f9fb 	bl	800e6a0 <xTaskResumeAll>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d10a      	bne.n	800f2c6 <prvProcessTimerOrBlockTask+0x86>
                    portYIELD_WITHIN_API();
 800f2b0:	4b09      	ldr	r3, [pc, #36]	@ (800f2d8 <prvProcessTimerOrBlockTask+0x98>)
 800f2b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f2b6:	601a      	str	r2, [r3, #0]
 800f2b8:	f3bf 8f4f 	dsb	sy
 800f2bc:	f3bf 8f6f 	isb	sy
}
 800f2c0:	e001      	b.n	800f2c6 <prvProcessTimerOrBlockTask+0x86>
            (void)xTaskResumeAll();
 800f2c2:	f7ff f9ed 	bl	800e6a0 <xTaskResumeAll>
}
 800f2c6:	bf00      	nop
 800f2c8:	3710      	adds	r7, #16
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd80      	pop	{r7, pc}
 800f2ce:	bf00      	nop
 800f2d0:	20000f0c 	.word	0x20000f0c
 800f2d4:	20000f10 	.word	0x20000f10
 800f2d8:	e000ed04 	.word	0xe000ed04

0800f2dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime(BaseType_t * const pxListWasEmpty) {
 800f2dc:	b480      	push	{r7}
 800f2de:	b085      	sub	sp, #20
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
 800f2e4:	4b0e      	ldr	r3, [pc, #56]	@ (800f320 <prvGetNextExpireTime+0x44>)
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d101      	bne.n	800f2f2 <prvGetNextExpireTime+0x16>
 800f2ee:	2201      	movs	r2, #1
 800f2f0:	e000      	b.n	800f2f4 <prvGetNextExpireTime+0x18>
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	601a      	str	r2, [r3, #0]
    if (*pxListWasEmpty == pdFALSE) {
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d105      	bne.n	800f30c <prvGetNextExpireTime+0x30>
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
 800f300:	4b07      	ldr	r3, [pc, #28]	@ (800f320 <prvGetNextExpireTime+0x44>)
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	68db      	ldr	r3, [r3, #12]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	60fb      	str	r3, [r7, #12]
 800f30a:	e001      	b.n	800f310 <prvGetNextExpireTime+0x34>
    } else {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = (TickType_t)0U;
 800f30c:	2300      	movs	r3, #0
 800f30e:	60fb      	str	r3, [r7, #12]
    }

    return xNextExpireTime;
 800f310:	68fb      	ldr	r3, [r7, #12]
}
 800f312:	4618      	mov	r0, r3
 800f314:	3714      	adds	r7, #20
 800f316:	46bd      	mov	sp, r7
 800f318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31c:	4770      	bx	lr
 800f31e:	bf00      	nop
 800f320:	20000f08 	.word	0x20000f08

0800f324 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow(BaseType_t * const pxTimerListsWereSwitched) {
 800f324:	b580      	push	{r7, lr}
 800f326:	b084      	sub	sp, #16
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
    TickType_t xTimeNow;
    PRIVILEGED_DATA static TickType_t xLastTime = (TickType_t)0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
 800f32c:	f7ff fa56 	bl	800e7dc <xTaskGetTickCount>
 800f330:	60f8      	str	r0, [r7, #12]

    if (xTimeNow < xLastTime) {
 800f332:	4b0b      	ldr	r3, [pc, #44]	@ (800f360 <prvSampleTimeNow+0x3c>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	68fa      	ldr	r2, [r7, #12]
 800f338:	429a      	cmp	r2, r3
 800f33a:	d205      	bcs.n	800f348 <prvSampleTimeNow+0x24>
        prvSwitchTimerLists();
 800f33c:	f000 f91e 	bl	800f57c <prvSwitchTimerLists>
        *pxTimerListsWereSwitched = pdTRUE;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	2201      	movs	r2, #1
 800f344:	601a      	str	r2, [r3, #0]
 800f346:	e002      	b.n	800f34e <prvSampleTimeNow+0x2a>
    } else {
        *pxTimerListsWereSwitched = pdFALSE;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2200      	movs	r2, #0
 800f34c:	601a      	str	r2, [r3, #0]
    }

    xLastTime = xTimeNow;
 800f34e:	4a04      	ldr	r2, [pc, #16]	@ (800f360 <prvSampleTimeNow+0x3c>)
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	6013      	str	r3, [r2, #0]

    return xTimeNow;
 800f354:	68fb      	ldr	r3, [r7, #12]
}
 800f356:	4618      	mov	r0, r3
 800f358:	3710      	adds	r7, #16
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}
 800f35e:	bf00      	nop
 800f360:	20000f18 	.word	0x20000f18

0800f364 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList(Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime) {
 800f364:	b580      	push	{r7, lr}
 800f366:	b086      	sub	sp, #24
 800f368:	af00      	add	r7, sp, #0
 800f36a:	60f8      	str	r0, [r7, #12]
 800f36c:	60b9      	str	r1, [r7, #8]
 800f36e:	607a      	str	r2, [r7, #4]
 800f370:	603b      	str	r3, [r7, #0]
    BaseType_t xProcessTimerNow = pdFALSE;
 800f372:	2300      	movs	r3, #0
 800f374:	617b      	str	r3, [r7, #20]

    listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xNextExpiryTime);
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	68ba      	ldr	r2, [r7, #8]
 800f37a:	605a      	str	r2, [r3, #4]
    listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	68fa      	ldr	r2, [r7, #12]
 800f380:	611a      	str	r2, [r3, #16]

    if (xNextExpiryTime <= xTimeNow) {
 800f382:	68ba      	ldr	r2, [r7, #8]
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	429a      	cmp	r2, r3
 800f388:	d812      	bhi.n	800f3b0 <prvInsertTimerInActiveList+0x4c>
        /* Has the expiry time elapsed between the command to start/reset a
        timer was issued, and the time the command was processed? */
        if (((TickType_t)(xTimeNow - xCommandTime)) >= pxTimer->xTimerPeriodInTicks) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f38a:	687a      	ldr	r2, [r7, #4]
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	1ad2      	subs	r2, r2, r3
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	699b      	ldr	r3, [r3, #24]
 800f394:	429a      	cmp	r2, r3
 800f396:	d302      	bcc.n	800f39e <prvInsertTimerInActiveList+0x3a>
        {
            /* The time between a command being issued and the command being
            processed actually exceeds the timers period.  */
            xProcessTimerNow = pdTRUE;
 800f398:	2301      	movs	r3, #1
 800f39a:	617b      	str	r3, [r7, #20]
 800f39c:	e01b      	b.n	800f3d6 <prvInsertTimerInActiveList+0x72>
        } else {
            vListInsert(pxOverflowTimerList, &(pxTimer->xTimerListItem));
 800f39e:	4b10      	ldr	r3, [pc, #64]	@ (800f3e0 <prvInsertTimerInActiveList+0x7c>)
 800f3a0:	681a      	ldr	r2, [r3, #0]
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	3304      	adds	r3, #4
 800f3a6:	4619      	mov	r1, r3
 800f3a8:	4610      	mov	r0, r2
 800f3aa:	f7fe f8cc 	bl	800d546 <vListInsert>
 800f3ae:	e012      	b.n	800f3d6 <prvInsertTimerInActiveList+0x72>
        }
    } else {
        if ((xTimeNow < xCommandTime) && (xNextExpiryTime >= xCommandTime)) {
 800f3b0:	687a      	ldr	r2, [r7, #4]
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	429a      	cmp	r2, r3
 800f3b6:	d206      	bcs.n	800f3c6 <prvInsertTimerInActiveList+0x62>
 800f3b8:	68ba      	ldr	r2, [r7, #8]
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	429a      	cmp	r2, r3
 800f3be:	d302      	bcc.n	800f3c6 <prvInsertTimerInActiveList+0x62>
            /* If, since the command was issued, the tick count has overflowed
            but the expiry time has not, then the timer must have already passed
            its expiry time and should be processed immediately. */
            xProcessTimerNow = pdTRUE;
 800f3c0:	2301      	movs	r3, #1
 800f3c2:	617b      	str	r3, [r7, #20]
 800f3c4:	e007      	b.n	800f3d6 <prvInsertTimerInActiveList+0x72>
        } else {
            vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
 800f3c6:	4b07      	ldr	r3, [pc, #28]	@ (800f3e4 <prvInsertTimerInActiveList+0x80>)
 800f3c8:	681a      	ldr	r2, [r3, #0]
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	3304      	adds	r3, #4
 800f3ce:	4619      	mov	r1, r3
 800f3d0:	4610      	mov	r0, r2
 800f3d2:	f7fe f8b8 	bl	800d546 <vListInsert>
        }
    }

    return xProcessTimerNow;
 800f3d6:	697b      	ldr	r3, [r7, #20]
}
 800f3d8:	4618      	mov	r0, r3
 800f3da:	3718      	adds	r7, #24
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bd80      	pop	{r7, pc}
 800f3e0:	20000f0c 	.word	0x20000f0c
 800f3e4:	20000f08 	.word	0x20000f08

0800f3e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void prvProcessReceivedCommands(void) {
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b08c      	sub	sp, #48	@ 0x30
 800f3ec:	af02      	add	r7, sp, #8
    DaemonTaskMessage_t xMessage;
    Timer_t * pxTimer;
    BaseType_t xTimerListsWereSwitched, xResult;
    TickType_t xTimeNow;

    while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY) != pdFAIL) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f3ee:	e0b2      	b.n	800f556 <prvProcessReceivedCommands+0x16e>
        }
#endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if (xMessage.xMessageID >= (BaseType_t)0) {
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	f2c0 80af 	blt.w	800f556 <prvProcessReceivedCommands+0x16e>
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f3f8:	693b      	ldr	r3, [r7, #16]
 800f3fa:	627b      	str	r3, [r7, #36]	@ 0x24

            if (listIS_CONTAINED_WITHIN(NULL, &(pxTimer->xTimerListItem)) == pdFALSE) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f3fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3fe:	695b      	ldr	r3, [r3, #20]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d004      	beq.n	800f40e <prvProcessReceivedCommands+0x26>
            {
                /* The timer is in a list, remove it. */
                (void)uxListRemove(&(pxTimer->xTimerListItem));
 800f404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f406:	3304      	adds	r3, #4
 800f408:	4618      	mov	r0, r3
 800f40a:	f7fe f8d5 	bl	800d5b8 <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
 800f40e:	1d3b      	adds	r3, r7, #4
 800f410:	4618      	mov	r0, r3
 800f412:	f7ff ff87 	bl	800f324 <prvSampleTimeNow>
 800f416:	6238      	str	r0, [r7, #32]

            switch (xMessage.xMessageID) {
 800f418:	68bb      	ldr	r3, [r7, #8]
 800f41a:	2b09      	cmp	r3, #9
 800f41c:	f200 8098 	bhi.w	800f550 <prvProcessReceivedCommands+0x168>
 800f420:	a201      	add	r2, pc, #4	@ (adr r2, 800f428 <prvProcessReceivedCommands+0x40>)
 800f422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f426:	bf00      	nop
 800f428:	0800f451 	.word	0x0800f451
 800f42c:	0800f451 	.word	0x0800f451
 800f430:	0800f451 	.word	0x0800f451
 800f434:	0800f4c7 	.word	0x0800f4c7
 800f438:	0800f4db 	.word	0x0800f4db
 800f43c:	0800f527 	.word	0x0800f527
 800f440:	0800f451 	.word	0x0800f451
 800f444:	0800f451 	.word	0x0800f451
 800f448:	0800f4c7 	.word	0x0800f4c7
 800f44c:	0800f4db 	.word	0x0800f4db
            case tmrCOMMAND_START_FROM_ISR:
            case tmrCOMMAND_RESET:
            case tmrCOMMAND_RESET_FROM_ISR:
            case tmrCOMMAND_START_DONT_TRACE:
                /* Start or restart a timer. */
                pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f452:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f456:	f043 0301 	orr.w	r3, r3, #1
 800f45a:	b2da      	uxtb	r2, r3
 800f45c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f45e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                if (prvInsertTimerInActiveList(pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue) != pdFALSE) {
 800f462:	68fa      	ldr	r2, [r7, #12]
 800f464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f466:	699b      	ldr	r3, [r3, #24]
 800f468:	18d1      	adds	r1, r2, r3
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	6a3a      	ldr	r2, [r7, #32]
 800f46e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f470:	f7ff ff78 	bl	800f364 <prvInsertTimerInActiveList>
 800f474:	4603      	mov	r3, r0
 800f476:	2b00      	cmp	r3, #0
 800f478:	d06c      	beq.n	800f554 <prvProcessReceivedCommands+0x16c>
                    /* The timer expired before it was added to the active
                    timer list.  Process it now. */
                    pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
 800f47a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f47c:	6a1b      	ldr	r3, [r3, #32]
 800f47e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f480:	4798      	blx	r3
                    traceTIMER_EXPIRED(pxTimer);

                    if ((pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD) != 0) {
 800f482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f484:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f488:	f003 0304 	and.w	r3, r3, #4
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d061      	beq.n	800f554 <prvProcessReceivedCommands+0x16c>
                        xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY);
 800f490:	68fa      	ldr	r2, [r7, #12]
 800f492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f494:	699b      	ldr	r3, [r3, #24]
 800f496:	441a      	add	r2, r3
 800f498:	2300      	movs	r3, #0
 800f49a:	9300      	str	r3, [sp, #0]
 800f49c:	2300      	movs	r3, #0
 800f49e:	2100      	movs	r1, #0
 800f4a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f4a2:	f7ff fdff 	bl	800f0a4 <xTimerGenericCommand>
 800f4a6:	61f8      	str	r0, [r7, #28]
                        configASSERT(xResult);
 800f4a8:	69fb      	ldr	r3, [r7, #28]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d152      	bne.n	800f554 <prvProcessReceivedCommands+0x16c>
    __asm volatile("	mov %0, %1												\n"
 800f4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4b2:	f383 8811 	msr	BASEPRI, r3
 800f4b6:	f3bf 8f6f 	isb	sy
 800f4ba:	f3bf 8f4f 	dsb	sy
 800f4be:	61bb      	str	r3, [r7, #24]
}
 800f4c0:	bf00      	nop
 800f4c2:	bf00      	nop
 800f4c4:	e7fd      	b.n	800f4c2 <prvProcessReceivedCommands+0xda>
                break;

            case tmrCOMMAND_STOP:
            case tmrCOMMAND_STOP_FROM_ISR:
                /* The timer has already been removed from the active list. */
                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f4cc:	f023 0301 	bic.w	r3, r3, #1
 800f4d0:	b2da      	uxtb	r2, r3
 800f4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                break;
 800f4d8:	e03d      	b.n	800f556 <prvProcessReceivedCommands+0x16e>

            case tmrCOMMAND_CHANGE_PERIOD:
            case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f4e0:	f043 0301 	orr.w	r3, r3, #1
 800f4e4:	b2da      	uxtb	r2, r3
 800f4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f4ec:	68fa      	ldr	r2, [r7, #12]
 800f4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4f0:	619a      	str	r2, [r3, #24]
                configASSERT((pxTimer->xTimerPeriodInTicks > 0));
 800f4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4f4:	699b      	ldr	r3, [r3, #24]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d10b      	bne.n	800f512 <prvProcessReceivedCommands+0x12a>
    __asm volatile("	mov %0, %1												\n"
 800f4fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4fe:	f383 8811 	msr	BASEPRI, r3
 800f502:	f3bf 8f6f 	isb	sy
 800f506:	f3bf 8f4f 	dsb	sy
 800f50a:	617b      	str	r3, [r7, #20]
}
 800f50c:	bf00      	nop
 800f50e:	bf00      	nop
 800f510:	e7fd      	b.n	800f50e <prvProcessReceivedCommands+0x126>
                be longer or shorter than the old one.  The command time is
                therefore set to the current time, and as the period cannot
                be zero the next expiry time can only be in the future,
                meaning (unlike for the xTimerStart() case above) there is
                no fail case that needs to be handled here. */
                (void)prvInsertTimerInActiveList(pxTimer, (xTimeNow + pxTimer->xTimerPeriodInTicks), xTimeNow, xTimeNow);
 800f512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f514:	699a      	ldr	r2, [r3, #24]
 800f516:	6a3b      	ldr	r3, [r7, #32]
 800f518:	18d1      	adds	r1, r2, r3
 800f51a:	6a3b      	ldr	r3, [r7, #32]
 800f51c:	6a3a      	ldr	r2, [r7, #32]
 800f51e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f520:	f7ff ff20 	bl	800f364 <prvInsertTimerInActiveList>
                break;
 800f524:	e017      	b.n	800f556 <prvProcessReceivedCommands+0x16e>
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            {
                /* The timer has already been removed from the active list,
                just free up the memory if the memory was dynamically
                allocated. */
                if ((pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED) == (uint8_t)0) {
 800f526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f528:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f52c:	f003 0302 	and.w	r3, r3, #2
 800f530:	2b00      	cmp	r3, #0
 800f532:	d103      	bne.n	800f53c <prvProcessReceivedCommands+0x154>
                    vPortFree(pxTimer);
 800f534:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f536:	f000 fb6b 	bl	800fc10 <vPortFree>
                no need to free the memory - just mark the timer as
                "not active". */
                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
            }
#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
            break;
 800f53a:	e00c      	b.n	800f556 <prvProcessReceivedCommands+0x16e>
                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f53c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f53e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f542:	f023 0301 	bic.w	r3, r3, #1
 800f546:	b2da      	uxtb	r2, r3
 800f548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f54a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            break;
 800f54e:	e002      	b.n	800f556 <prvProcessReceivedCommands+0x16e>

            default:
                /* Don't expect to get here. */
                break;
 800f550:	bf00      	nop
 800f552:	e000      	b.n	800f556 <prvProcessReceivedCommands+0x16e>
                break;
 800f554:	bf00      	nop
    while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY) != pdFAIL) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f556:	4b08      	ldr	r3, [pc, #32]	@ (800f578 <prvProcessReceivedCommands+0x190>)
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	f107 0108 	add.w	r1, r7, #8
 800f55e:	2200      	movs	r2, #0
 800f560:	4618      	mov	r0, r3
 800f562:	f7fe faf9 	bl	800db58 <xQueueReceive>
 800f566:	4603      	mov	r3, r0
 800f568:	2b00      	cmp	r3, #0
 800f56a:	f47f af41 	bne.w	800f3f0 <prvProcessReceivedCommands+0x8>
            }
        }
    }
}
 800f56e:	bf00      	nop
 800f570:	bf00      	nop
 800f572:	3728      	adds	r7, #40	@ 0x28
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}
 800f578:	20000f10 	.word	0x20000f10

0800f57c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists(void) {
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b088      	sub	sp, #32
 800f580:	af02      	add	r7, sp, #8

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
 800f582:	e049      	b.n	800f618 <prvSwitchTimerLists+0x9c>
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
 800f584:	4b2e      	ldr	r3, [pc, #184]	@ (800f640 <prvSwitchTimerLists+0xc4>)
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	68db      	ldr	r3, [r3, #12]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	613b      	str	r3, [r7, #16]

        /* Remove the timer from the list. */
        pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(
 800f58e:	4b2c      	ldr	r3, [pc, #176]	@ (800f640 <prvSwitchTimerLists+0xc4>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	68db      	ldr	r3, [r3, #12]
 800f594:	68db      	ldr	r3, [r3, #12]
 800f596:	60fb      	str	r3, [r7, #12]
            pxCurrentTimerList); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
        (void)uxListRemove(&(pxTimer->xTimerListItem));
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	3304      	adds	r3, #4
 800f59c:	4618      	mov	r0, r3
 800f59e:	f7fe f80b 	bl	800d5b8 <uxListRemove>
        traceTIMER_EXPIRED(pxTimer);

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	6a1b      	ldr	r3, [r3, #32]
 800f5a6:	68f8      	ldr	r0, [r7, #12]
 800f5a8:	4798      	blx	r3

        if ((pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD) != 0) {
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f5b0:	f003 0304 	and.w	r3, r3, #4
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d02f      	beq.n	800f618 <prvSwitchTimerLists+0x9c>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = (xNextExpireTime + pxTimer->xTimerPeriodInTicks);
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	699b      	ldr	r3, [r3, #24]
 800f5bc:	693a      	ldr	r2, [r7, #16]
 800f5be:	4413      	add	r3, r2
 800f5c0:	60bb      	str	r3, [r7, #8]
            if (xReloadTime > xNextExpireTime) {
 800f5c2:	68ba      	ldr	r2, [r7, #8]
 800f5c4:	693b      	ldr	r3, [r7, #16]
 800f5c6:	429a      	cmp	r2, r3
 800f5c8:	d90e      	bls.n	800f5e8 <prvSwitchTimerLists+0x6c>
                listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xReloadTime);
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	68ba      	ldr	r2, [r7, #8]
 800f5ce:	605a      	str	r2, [r3, #4]
                listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	68fa      	ldr	r2, [r7, #12]
 800f5d4:	611a      	str	r2, [r3, #16]
                vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
 800f5d6:	4b1a      	ldr	r3, [pc, #104]	@ (800f640 <prvSwitchTimerLists+0xc4>)
 800f5d8:	681a      	ldr	r2, [r3, #0]
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	3304      	adds	r3, #4
 800f5de:	4619      	mov	r1, r3
 800f5e0:	4610      	mov	r0, r2
 800f5e2:	f7fd ffb0 	bl	800d546 <vListInsert>
 800f5e6:	e017      	b.n	800f618 <prvSwitchTimerLists+0x9c>
            } else {
                xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	9300      	str	r3, [sp, #0]
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	693a      	ldr	r2, [r7, #16]
 800f5f0:	2100      	movs	r1, #0
 800f5f2:	68f8      	ldr	r0, [r7, #12]
 800f5f4:	f7ff fd56 	bl	800f0a4 <xTimerGenericCommand>
 800f5f8:	6078      	str	r0, [r7, #4]
                configASSERT(xResult);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d10b      	bne.n	800f618 <prvSwitchTimerLists+0x9c>
    __asm volatile("	mov %0, %1												\n"
 800f600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f604:	f383 8811 	msr	BASEPRI, r3
 800f608:	f3bf 8f6f 	isb	sy
 800f60c:	f3bf 8f4f 	dsb	sy
 800f610:	603b      	str	r3, [r7, #0]
}
 800f612:	bf00      	nop
 800f614:	bf00      	nop
 800f616:	e7fd      	b.n	800f614 <prvSwitchTimerLists+0x98>
    while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
 800f618:	4b09      	ldr	r3, [pc, #36]	@ (800f640 <prvSwitchTimerLists+0xc4>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d1b0      	bne.n	800f584 <prvSwitchTimerLists+0x8>
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
 800f622:	4b07      	ldr	r3, [pc, #28]	@ (800f640 <prvSwitchTimerLists+0xc4>)
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	617b      	str	r3, [r7, #20]
    pxCurrentTimerList = pxOverflowTimerList;
 800f628:	4b06      	ldr	r3, [pc, #24]	@ (800f644 <prvSwitchTimerLists+0xc8>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	4a04      	ldr	r2, [pc, #16]	@ (800f640 <prvSwitchTimerLists+0xc4>)
 800f62e:	6013      	str	r3, [r2, #0]
    pxOverflowTimerList = pxTemp;
 800f630:	4a04      	ldr	r2, [pc, #16]	@ (800f644 <prvSwitchTimerLists+0xc8>)
 800f632:	697b      	ldr	r3, [r7, #20]
 800f634:	6013      	str	r3, [r2, #0]
}
 800f636:	bf00      	nop
 800f638:	3718      	adds	r7, #24
 800f63a:	46bd      	mov	sp, r7
 800f63c:	bd80      	pop	{r7, pc}
 800f63e:	bf00      	nop
 800f640:	20000f08 	.word	0x20000f08
 800f644:	20000f0c 	.word	0x20000f0c

0800f648 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue(void) {
 800f648:	b580      	push	{r7, lr}
 800f64a:	b082      	sub	sp, #8
 800f64c:	af02      	add	r7, sp, #8
    /* Check that the list from which active timers are referenced, and the
    queue used to communicate with the timer service, have been
    initialised. */
    taskENTER_CRITICAL();
 800f64e:	f000 f9ab 	bl	800f9a8 <vPortEnterCritical>
    {
        if (xTimerQueue == NULL) {
 800f652:	4b15      	ldr	r3, [pc, #84]	@ (800f6a8 <prvCheckForValidListAndQueue+0x60>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d120      	bne.n	800f69c <prvCheckForValidListAndQueue+0x54>
            vListInitialise(&xActiveTimerList1);
 800f65a:	4814      	ldr	r0, [pc, #80]	@ (800f6ac <prvCheckForValidListAndQueue+0x64>)
 800f65c:	f7fd ff22 	bl	800d4a4 <vListInitialise>
            vListInitialise(&xActiveTimerList2);
 800f660:	4813      	ldr	r0, [pc, #76]	@ (800f6b0 <prvCheckForValidListAndQueue+0x68>)
 800f662:	f7fd ff1f 	bl	800d4a4 <vListInitialise>
            pxCurrentTimerList = &xActiveTimerList1;
 800f666:	4b13      	ldr	r3, [pc, #76]	@ (800f6b4 <prvCheckForValidListAndQueue+0x6c>)
 800f668:	4a10      	ldr	r2, [pc, #64]	@ (800f6ac <prvCheckForValidListAndQueue+0x64>)
 800f66a:	601a      	str	r2, [r3, #0]
            pxOverflowTimerList = &xActiveTimerList2;
 800f66c:	4b12      	ldr	r3, [pc, #72]	@ (800f6b8 <prvCheckForValidListAndQueue+0x70>)
 800f66e:	4a10      	ldr	r2, [pc, #64]	@ (800f6b0 <prvCheckForValidListAndQueue+0x68>)
 800f670:	601a      	str	r2, [r3, #0]
                /* The timer queue is allocated statically in case
                configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                static StaticQueue_t xStaticTimerQueue;                                                                   /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                static uint8_t ucStaticTimerQueueStorage[(size_t)configTIMER_QUEUE_LENGTH * sizeof(DaemonTaskMessage_t)]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                xTimerQueue = xQueueCreateStatic((UBaseType_t)configTIMER_QUEUE_LENGTH, (UBaseType_t)sizeof(DaemonTaskMessage_t), &(ucStaticTimerQueueStorage[0]), &xStaticTimerQueue);
 800f672:	2300      	movs	r3, #0
 800f674:	9300      	str	r3, [sp, #0]
 800f676:	4b11      	ldr	r3, [pc, #68]	@ (800f6bc <prvCheckForValidListAndQueue+0x74>)
 800f678:	4a11      	ldr	r2, [pc, #68]	@ (800f6c0 <prvCheckForValidListAndQueue+0x78>)
 800f67a:	210c      	movs	r1, #12
 800f67c:	200a      	movs	r0, #10
 800f67e:	f7fe f82f 	bl	800d6e0 <xQueueGenericCreateStatic>
 800f682:	4603      	mov	r3, r0
 800f684:	4a08      	ldr	r2, [pc, #32]	@ (800f6a8 <prvCheckForValidListAndQueue+0x60>)
 800f686:	6013      	str	r3, [r2, #0]
            }
#endif

#if (configQUEUE_REGISTRY_SIZE > 0)
            {
                if (xTimerQueue != NULL) {
 800f688:	4b07      	ldr	r3, [pc, #28]	@ (800f6a8 <prvCheckForValidListAndQueue+0x60>)
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d005      	beq.n	800f69c <prvCheckForValidListAndQueue+0x54>
                    vQueueAddToRegistry(xTimerQueue, "TmrQ");
 800f690:	4b05      	ldr	r3, [pc, #20]	@ (800f6a8 <prvCheckForValidListAndQueue+0x60>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	490b      	ldr	r1, [pc, #44]	@ (800f6c4 <prvCheckForValidListAndQueue+0x7c>)
 800f696:	4618      	mov	r0, r3
 800f698:	f7fe fc42 	bl	800df20 <vQueueAddToRegistry>
#endif /* configQUEUE_REGISTRY_SIZE */
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800f69c:	f000 f9b6 	bl	800fa0c <vPortExitCritical>
}
 800f6a0:	bf00      	nop
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	bd80      	pop	{r7, pc}
 800f6a6:	bf00      	nop
 800f6a8:	20000f10 	.word	0x20000f10
 800f6ac:	20000ee0 	.word	0x20000ee0
 800f6b0:	20000ef4 	.word	0x20000ef4
 800f6b4:	20000f08 	.word	0x20000f08
 800f6b8:	20000f0c 	.word	0x20000f0c
 800f6bc:	20000f94 	.word	0x20000f94
 800f6c0:	20000f1c 	.word	0x20000f1c
 800f6c4:	08013c28 	.word	0x08013c28

0800f6c8 <pvTimerGetTimerID>:

    return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void * pvTimerGetTimerID(const TimerHandle_t xTimer) {
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b086      	sub	sp, #24
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
    Timer_t * const pxTimer = xTimer;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	617b      	str	r3, [r7, #20]
    void * pvReturn;

    configASSERT(xTimer);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d10b      	bne.n	800f6f2 <pvTimerGetTimerID+0x2a>
    __asm volatile("	mov %0, %1												\n"
 800f6da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6de:	f383 8811 	msr	BASEPRI, r3
 800f6e2:	f3bf 8f6f 	isb	sy
 800f6e6:	f3bf 8f4f 	dsb	sy
 800f6ea:	60fb      	str	r3, [r7, #12]
}
 800f6ec:	bf00      	nop
 800f6ee:	bf00      	nop
 800f6f0:	e7fd      	b.n	800f6ee <pvTimerGetTimerID+0x26>

    taskENTER_CRITICAL();
 800f6f2:	f000 f959 	bl	800f9a8 <vPortEnterCritical>
    { pvReturn = pxTimer->pvTimerID; }
 800f6f6:	697b      	ldr	r3, [r7, #20]
 800f6f8:	69db      	ldr	r3, [r3, #28]
 800f6fa:	613b      	str	r3, [r7, #16]
    taskEXIT_CRITICAL();
 800f6fc:	f000 f986 	bl	800fa0c <vPortExitCritical>

    return pvReturn;
 800f700:	693b      	ldr	r3, [r7, #16]
}
 800f702:	4618      	mov	r0, r3
 800f704:	3718      	adds	r7, #24
 800f706:	46bd      	mov	sp, r7
 800f708:	bd80      	pop	{r7, pc}

0800f70a <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID(TimerHandle_t xTimer, void * pvNewID) {
 800f70a:	b580      	push	{r7, lr}
 800f70c:	b084      	sub	sp, #16
 800f70e:	af00      	add	r7, sp, #0
 800f710:	6078      	str	r0, [r7, #4]
 800f712:	6039      	str	r1, [r7, #0]
    Timer_t * const pxTimer = xTimer;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	60fb      	str	r3, [r7, #12]

    configASSERT(xTimer);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d10b      	bne.n	800f736 <vTimerSetTimerID+0x2c>
    __asm volatile("	mov %0, %1												\n"
 800f71e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f722:	f383 8811 	msr	BASEPRI, r3
 800f726:	f3bf 8f6f 	isb	sy
 800f72a:	f3bf 8f4f 	dsb	sy
 800f72e:	60bb      	str	r3, [r7, #8]
}
 800f730:	bf00      	nop
 800f732:	bf00      	nop
 800f734:	e7fd      	b.n	800f732 <vTimerSetTimerID+0x28>

    taskENTER_CRITICAL();
 800f736:	f000 f937 	bl	800f9a8 <vPortEnterCritical>
    { pxTimer->pvTimerID = pvNewID; }
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	683a      	ldr	r2, [r7, #0]
 800f73e:	61da      	str	r2, [r3, #28]
    taskEXIT_CRITICAL();
 800f740:	f000 f964 	bl	800fa0c <vPortExitCritical>
}
 800f744:	bf00      	nop
 800f746:	3710      	adds	r7, #16
 800f748:	46bd      	mov	sp, r7
 800f74a:	bd80      	pop	{r7, pc}

0800f74c <pxPortInitialiseStack>:
/*-----------------------------------------------------------*/

/*
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack(StackType_t * pxTopOfStack, TaskFunction_t pxCode, void * pvParameters) {
 800f74c:	b480      	push	{r7}
 800f74e:	b085      	sub	sp, #20
 800f750:	af00      	add	r7, sp, #0
 800f752:	60f8      	str	r0, [r7, #12]
 800f754:	60b9      	str	r1, [r7, #8]
 800f756:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
    interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
    of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	3b04      	subs	r3, #4
 800f75c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR; /* xPSR */
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f764:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	3b04      	subs	r3, #4
 800f76a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ((StackType_t)pxCode) & portSTART_ADDRESS_MASK; /* PC */
 800f76c:	68bb      	ldr	r3, [r7, #8]
 800f76e:	f023 0201 	bic.w	r2, r3, #1
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	3b04      	subs	r3, #4
 800f77a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = (StackType_t)portTASK_RETURN_ADDRESS; /* LR */
 800f77c:	4a0c      	ldr	r2, [pc, #48]	@ (800f7b0 <pxPortInitialiseStack+0x64>)
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                         /* R12, R3, R2 and R1. */
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	3b14      	subs	r3, #20
 800f786:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = (StackType_t)pvParameters; /* R0 */
 800f788:	687a      	ldr	r2, [r7, #4]
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
    own exec return value. */
    pxTopOfStack--;
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	3b04      	subs	r3, #4
 800f792:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	f06f 0202 	mvn.w	r2, #2
 800f79a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	3b20      	subs	r3, #32
 800f7a0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800f7a2:	68fb      	ldr	r3, [r7, #12]
}
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	3714      	adds	r7, #20
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ae:	4770      	bx	lr
 800f7b0:	0800f7b5 	.word	0x0800f7b5

0800f7b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError(void) {
 800f7b4:	b480      	push	{r7}
 800f7b6:	b085      	sub	sp, #20
 800f7b8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	607b      	str	r3, [r7, #4]
    its caller as there is nothing to return to.  If a task wants to exit it
    should instead call vTaskDelete( NULL ).

    Artificially force an assert() to be triggered if configASSERT() is
    defined, then stop here so application writers can catch the error. */
    configASSERT(uxCriticalNesting == ~0UL);
 800f7be:	4b13      	ldr	r3, [pc, #76]	@ (800f80c <prvTaskExitError+0x58>)
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7c6:	d00b      	beq.n	800f7e0 <prvTaskExitError+0x2c>
    __asm volatile("	mov %0, %1												\n"
 800f7c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7cc:	f383 8811 	msr	BASEPRI, r3
 800f7d0:	f3bf 8f6f 	isb	sy
 800f7d4:	f3bf 8f4f 	dsb	sy
 800f7d8:	60fb      	str	r3, [r7, #12]
}
 800f7da:	bf00      	nop
 800f7dc:	bf00      	nop
 800f7de:	e7fd      	b.n	800f7dc <prvTaskExitError+0x28>
    __asm volatile("	mov %0, %1												\n"
 800f7e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7e4:	f383 8811 	msr	BASEPRI, r3
 800f7e8:	f3bf 8f6f 	isb	sy
 800f7ec:	f3bf 8f4f 	dsb	sy
 800f7f0:	60bb      	str	r3, [r7, #8]
}
 800f7f2:	bf00      	nop
    portDISABLE_INTERRUPTS();
    while (ulDummy == 0) {
 800f7f4:	bf00      	nop
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d0fc      	beq.n	800f7f6 <prvTaskExitError+0x42>
        about code appearing after this function is called - making ulDummy
        volatile makes the compiler think the function could return and
        therefore not output an 'unreachable code' warning for code that appears
        after it. */
    }
}
 800f7fc:	bf00      	nop
 800f7fe:	bf00      	nop
 800f800:	3714      	adds	r7, #20
 800f802:	46bd      	mov	sp, r7
 800f804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f808:	4770      	bx	lr
 800f80a:	bf00      	nop
 800f80c:	200000f4 	.word	0x200000f4

0800f810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler(void) {
    __asm volatile("	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 800f810:	4b07      	ldr	r3, [pc, #28]	@ (800f830 <pxCurrentTCBConst2>)
 800f812:	6819      	ldr	r1, [r3, #0]
 800f814:	6808      	ldr	r0, [r1, #0]
 800f816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f81a:	f380 8809 	msr	PSP, r0
 800f81e:	f3bf 8f6f 	isb	sy
 800f822:	f04f 0000 	mov.w	r0, #0
 800f826:	f380 8811 	msr	BASEPRI, r0
 800f82a:	4770      	bx	lr
 800f82c:	f3af 8000 	nop.w

0800f830 <pxCurrentTCBConst2>:
 800f830:	20000db4 	.word	0x20000db4
                   "	msr	basepri, r0					\n"
                   "	bx r14							\n"
                   "									\n"
                   "	.align 4						\n"
                   "pxCurrentTCBConst2: .word pxCurrentTCB				\n");
}
 800f834:	bf00      	nop
 800f836:	bf00      	nop

0800f838 <prvPortStartFirstTask>:
static void prvPortStartFirstTask(void) {
    /* Start the first task.  This also clears the bit that indicates the FPU is
    in use in case the FPU was used before the scheduler was started - which
    would otherwise result in the unnecessary leaving of space in the SVC stack
    for lazy saving of FPU registers. */
    __asm volatile(" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 800f838:	4808      	ldr	r0, [pc, #32]	@ (800f85c <prvPortStartFirstTask+0x24>)
 800f83a:	6800      	ldr	r0, [r0, #0]
 800f83c:	6800      	ldr	r0, [r0, #0]
 800f83e:	f380 8808 	msr	MSP, r0
 800f842:	f04f 0000 	mov.w	r0, #0
 800f846:	f380 8814 	msr	CONTROL, r0
 800f84a:	b662      	cpsie	i
 800f84c:	b661      	cpsie	f
 800f84e:	f3bf 8f4f 	dsb	sy
 800f852:	f3bf 8f6f 	isb	sy
 800f856:	df00      	svc	0
 800f858:	bf00      	nop
                   " cpsie f				\n"
                   " dsb					\n"
                   " isb					\n"
                   " svc 0					\n" /* System call to start first task. */
                   " nop					\n");
}
 800f85a:	bf00      	nop
 800f85c:	e000ed08 	.word	0xe000ed08

0800f860 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler(void) {
 800f860:	b580      	push	{r7, lr}
 800f862:	b086      	sub	sp, #24
 800f864:	af00      	add	r7, sp, #0
    configASSERT(configMAX_SYSCALL_INTERRUPT_PRIORITY);

    /* This port can be used on all revisions of the Cortex-M7 core other than
    the r0p1 parts.  r0p1 parts should use the port from the
    /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
 800f866:	4b47      	ldr	r3, [pc, #284]	@ (800f984 <xPortStartScheduler+0x124>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	4a47      	ldr	r2, [pc, #284]	@ (800f988 <xPortStartScheduler+0x128>)
 800f86c:	4293      	cmp	r3, r2
 800f86e:	d10b      	bne.n	800f888 <xPortStartScheduler+0x28>
    __asm volatile("	mov %0, %1												\n"
 800f870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f874:	f383 8811 	msr	BASEPRI, r3
 800f878:	f3bf 8f6f 	isb	sy
 800f87c:	f3bf 8f4f 	dsb	sy
 800f880:	613b      	str	r3, [r7, #16]
}
 800f882:	bf00      	nop
 800f884:	bf00      	nop
 800f886:	e7fd      	b.n	800f884 <xPortStartScheduler+0x24>
    configASSERT(portCPUID != portCORTEX_M7_r0p0_ID);
 800f888:	4b3e      	ldr	r3, [pc, #248]	@ (800f984 <xPortStartScheduler+0x124>)
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	4a3f      	ldr	r2, [pc, #252]	@ (800f98c <xPortStartScheduler+0x12c>)
 800f88e:	4293      	cmp	r3, r2
 800f890:	d10b      	bne.n	800f8aa <xPortStartScheduler+0x4a>
    __asm volatile("	mov %0, %1												\n"
 800f892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f896:	f383 8811 	msr	BASEPRI, r3
 800f89a:	f3bf 8f6f 	isb	sy
 800f89e:	f3bf 8f4f 	dsb	sy
 800f8a2:	60fb      	str	r3, [r7, #12]
}
 800f8a4:	bf00      	nop
 800f8a6:	bf00      	nop
 800f8a8:	e7fd      	b.n	800f8a6 <xPortStartScheduler+0x46>

#if (configASSERT_DEFINED == 1)
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = (volatile uint8_t * const)(portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER);
 800f8aa:	4b39      	ldr	r3, [pc, #228]	@ (800f990 <xPortStartScheduler+0x130>)
 800f8ac:	617b      	str	r3, [r7, #20]
        functions can be called.  ISR safe functions are those that end in
        "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
        ensure interrupt entry is as fast and simple as possible.

        Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f8ae:	697b      	ldr	r3, [r7, #20]
 800f8b0:	781b      	ldrb	r3, [r3, #0]
 800f8b2:	b2db      	uxtb	r3, r3
 800f8b4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
        possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f8b6:	697b      	ldr	r3, [r7, #20]
 800f8b8:	22ff      	movs	r2, #255	@ 0xff
 800f8ba:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	781b      	ldrb	r3, [r3, #0]
 800f8c0:	b2db      	uxtb	r3, r3
 800f8c2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f8c4:	78fb      	ldrb	r3, [r7, #3]
 800f8c6:	b2db      	uxtb	r3, r3
 800f8c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f8cc:	b2da      	uxtb	r2, r3
 800f8ce:	4b31      	ldr	r3, [pc, #196]	@ (800f994 <xPortStartScheduler+0x134>)
 800f8d0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
        of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f8d2:	4b31      	ldr	r3, [pc, #196]	@ (800f998 <xPortStartScheduler+0x138>)
 800f8d4:	2207      	movs	r2, #7
 800f8d6:	601a      	str	r2, [r3, #0]
        while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 800f8d8:	e009      	b.n	800f8ee <xPortStartScheduler+0x8e>
            ulMaxPRIGROUPValue--;
 800f8da:	4b2f      	ldr	r3, [pc, #188]	@ (800f998 <xPortStartScheduler+0x138>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	3b01      	subs	r3, #1
 800f8e0:	4a2d      	ldr	r2, [pc, #180]	@ (800f998 <xPortStartScheduler+0x138>)
 800f8e2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= (uint8_t)0x01;
 800f8e4:	78fb      	ldrb	r3, [r7, #3]
 800f8e6:	b2db      	uxtb	r3, r3
 800f8e8:	005b      	lsls	r3, r3, #1
 800f8ea:	b2db      	uxtb	r3, r3
 800f8ec:	70fb      	strb	r3, [r7, #3]
        while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 800f8ee:	78fb      	ldrb	r3, [r7, #3]
 800f8f0:	b2db      	uxtb	r3, r3
 800f8f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f8f6:	2b80      	cmp	r3, #128	@ 0x80
 800f8f8:	d0ef      	beq.n	800f8da <xPortStartScheduler+0x7a>
#ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
            priority bits matches the number of priority bits actually queried
            from the hardware. */
            configASSERT((portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue) == configPRIO_BITS);
 800f8fa:	4b27      	ldr	r3, [pc, #156]	@ (800f998 <xPortStartScheduler+0x138>)
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	f1c3 0307 	rsb	r3, r3, #7
 800f902:	2b04      	cmp	r3, #4
 800f904:	d00b      	beq.n	800f91e <xPortStartScheduler+0xbe>
    __asm volatile("	mov %0, %1												\n"
 800f906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f90a:	f383 8811 	msr	BASEPRI, r3
 800f90e:	f3bf 8f6f 	isb	sy
 800f912:	f3bf 8f4f 	dsb	sy
 800f916:	60bb      	str	r3, [r7, #8]
}
 800f918:	bf00      	nop
 800f91a:	bf00      	nop
 800f91c:	e7fd      	b.n	800f91a <xPortStartScheduler+0xba>
        }
#endif

        /* Shift the priority group value back to its position within the AIRCR
        register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f91e:	4b1e      	ldr	r3, [pc, #120]	@ (800f998 <xPortStartScheduler+0x138>)
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	021b      	lsls	r3, r3, #8
 800f924:	4a1c      	ldr	r2, [pc, #112]	@ (800f998 <xPortStartScheduler+0x138>)
 800f926:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f928:	4b1b      	ldr	r3, [pc, #108]	@ (800f998 <xPortStartScheduler+0x138>)
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f930:	4a19      	ldr	r2, [pc, #100]	@ (800f998 <xPortStartScheduler+0x138>)
 800f932:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
        value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	b2da      	uxtb	r2, r3
 800f938:	697b      	ldr	r3, [r7, #20]
 800f93a:	701a      	strb	r2, [r3, #0]
    }
#endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f93c:	4b17      	ldr	r3, [pc, #92]	@ (800f99c <xPortStartScheduler+0x13c>)
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	4a16      	ldr	r2, [pc, #88]	@ (800f99c <xPortStartScheduler+0x13c>)
 800f942:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f946:	6013      	str	r3, [r2, #0]
    portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f948:	4b14      	ldr	r3, [pc, #80]	@ (800f99c <xPortStartScheduler+0x13c>)
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	4a13      	ldr	r2, [pc, #76]	@ (800f99c <xPortStartScheduler+0x13c>)
 800f94e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f952:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
    here already. */
    vPortSetupTimerInterrupt();
 800f954:	f000 f8da 	bl	800fb0c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800f958:	4b11      	ldr	r3, [pc, #68]	@ (800f9a0 <xPortStartScheduler+0x140>)
 800f95a:	2200      	movs	r2, #0
 800f95c:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800f95e:	f000 f8f9 	bl	800fb54 <vPortEnableVFP>

    /* Lazy save always. */
    *(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
 800f962:	4b10      	ldr	r3, [pc, #64]	@ (800f9a4 <xPortStartScheduler+0x144>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	4a0f      	ldr	r2, [pc, #60]	@ (800f9a4 <xPortStartScheduler+0x144>)
 800f968:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f96c:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800f96e:	f7ff ff63 	bl	800f838 <prvPortStartFirstTask>
    exit error function to prevent compiler warnings about a static function
    not being called in the case that the application writer overrides this
    functionality by defining configTASK_RETURN_ADDRESS.  Call
    vTaskSwitchContext() so link time optimisation does not remove the
    symbol. */
    vTaskSwitchContext();
 800f972:	f7fe fffd 	bl	800e970 <vTaskSwitchContext>
    prvTaskExitError();
 800f976:	f7ff ff1d 	bl	800f7b4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800f97a:	2300      	movs	r3, #0
}
 800f97c:	4618      	mov	r0, r3
 800f97e:	3718      	adds	r7, #24
 800f980:	46bd      	mov	sp, r7
 800f982:	bd80      	pop	{r7, pc}
 800f984:	e000ed00 	.word	0xe000ed00
 800f988:	410fc271 	.word	0x410fc271
 800f98c:	410fc270 	.word	0x410fc270
 800f990:	e000e400 	.word	0xe000e400
 800f994:	20000fdc 	.word	0x20000fdc
 800f998:	20000fe0 	.word	0x20000fe0
 800f99c:	e000ed20 	.word	0xe000ed20
 800f9a0:	200000f4 	.word	0x200000f4
 800f9a4:	e000ef34 	.word	0xe000ef34

0800f9a8 <vPortEnterCritical>:
    Artificially force an assert. */
    configASSERT(uxCriticalNesting == 1000UL);
}
/*-----------------------------------------------------------*/

void vPortEnterCritical(void) {
 800f9a8:	b480      	push	{r7}
 800f9aa:	b083      	sub	sp, #12
 800f9ac:	af00      	add	r7, sp, #0
    __asm volatile("	mov %0, %1												\n"
 800f9ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9b2:	f383 8811 	msr	BASEPRI, r3
 800f9b6:	f3bf 8f6f 	isb	sy
 800f9ba:	f3bf 8f4f 	dsb	sy
 800f9be:	607b      	str	r3, [r7, #4]
}
 800f9c0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800f9c2:	4b10      	ldr	r3, [pc, #64]	@ (800fa04 <vPortEnterCritical+0x5c>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	3301      	adds	r3, #1
 800f9c8:	4a0e      	ldr	r2, [pc, #56]	@ (800fa04 <vPortEnterCritical+0x5c>)
 800f9ca:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
    assert() if it is being called from an interrupt context.  Only API
    functions that end in "FromISR" can be used in an interrupt.  Only assert if
    the critical nesting count is 1 to protect against recursive calls if the
    assert function also uses a critical section. */
    if (uxCriticalNesting == 1) {
 800f9cc:	4b0d      	ldr	r3, [pc, #52]	@ (800fa04 <vPortEnterCritical+0x5c>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	2b01      	cmp	r3, #1
 800f9d2:	d110      	bne.n	800f9f6 <vPortEnterCritical+0x4e>
        configASSERT((portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK) == 0);
 800f9d4:	4b0c      	ldr	r3, [pc, #48]	@ (800fa08 <vPortEnterCritical+0x60>)
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	b2db      	uxtb	r3, r3
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d00b      	beq.n	800f9f6 <vPortEnterCritical+0x4e>
    __asm volatile("	mov %0, %1												\n"
 800f9de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9e2:	f383 8811 	msr	BASEPRI, r3
 800f9e6:	f3bf 8f6f 	isb	sy
 800f9ea:	f3bf 8f4f 	dsb	sy
 800f9ee:	603b      	str	r3, [r7, #0]
}
 800f9f0:	bf00      	nop
 800f9f2:	bf00      	nop
 800f9f4:	e7fd      	b.n	800f9f2 <vPortEnterCritical+0x4a>
    }
}
 800f9f6:	bf00      	nop
 800f9f8:	370c      	adds	r7, #12
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa00:	4770      	bx	lr
 800fa02:	bf00      	nop
 800fa04:	200000f4 	.word	0x200000f4
 800fa08:	e000ed04 	.word	0xe000ed04

0800fa0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical(void) {
 800fa0c:	b480      	push	{r7}
 800fa0e:	b083      	sub	sp, #12
 800fa10:	af00      	add	r7, sp, #0
    configASSERT(uxCriticalNesting);
 800fa12:	4b12      	ldr	r3, [pc, #72]	@ (800fa5c <vPortExitCritical+0x50>)
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d10b      	bne.n	800fa32 <vPortExitCritical+0x26>
    __asm volatile("	mov %0, %1												\n"
 800fa1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa1e:	f383 8811 	msr	BASEPRI, r3
 800fa22:	f3bf 8f6f 	isb	sy
 800fa26:	f3bf 8f4f 	dsb	sy
 800fa2a:	607b      	str	r3, [r7, #4]
}
 800fa2c:	bf00      	nop
 800fa2e:	bf00      	nop
 800fa30:	e7fd      	b.n	800fa2e <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800fa32:	4b0a      	ldr	r3, [pc, #40]	@ (800fa5c <vPortExitCritical+0x50>)
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	3b01      	subs	r3, #1
 800fa38:	4a08      	ldr	r2, [pc, #32]	@ (800fa5c <vPortExitCritical+0x50>)
 800fa3a:	6013      	str	r3, [r2, #0]
    if (uxCriticalNesting == 0) {
 800fa3c:	4b07      	ldr	r3, [pc, #28]	@ (800fa5c <vPortExitCritical+0x50>)
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d105      	bne.n	800fa50 <vPortExitCritical+0x44>
 800fa44:	2300      	movs	r3, #0
 800fa46:	603b      	str	r3, [r7, #0]
    __asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
 800fa48:	683b      	ldr	r3, [r7, #0]
 800fa4a:	f383 8811 	msr	BASEPRI, r3
}
 800fa4e:	bf00      	nop
        portENABLE_INTERRUPTS();
    }
}
 800fa50:	bf00      	nop
 800fa52:	370c      	adds	r7, #12
 800fa54:	46bd      	mov	sp, r7
 800fa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5a:	4770      	bx	lr
 800fa5c:	200000f4 	.word	0x200000f4

0800fa60 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void xPortPendSVHandler(void) {
    /* This is a naked function. */

    __asm volatile("	mrs r0, psp							\n"
 800fa60:	f3ef 8009 	mrs	r0, PSP
 800fa64:	f3bf 8f6f 	isb	sy
 800fa68:	4b15      	ldr	r3, [pc, #84]	@ (800fac0 <pxCurrentTCBConst>)
 800fa6a:	681a      	ldr	r2, [r3, #0]
 800fa6c:	f01e 0f10 	tst.w	lr, #16
 800fa70:	bf08      	it	eq
 800fa72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fa76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa7a:	6010      	str	r0, [r2, #0]
 800fa7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fa80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fa84:	f380 8811 	msr	BASEPRI, r0
 800fa88:	f3bf 8f4f 	dsb	sy
 800fa8c:	f3bf 8f6f 	isb	sy
 800fa90:	f7fe ff6e 	bl	800e970 <vTaskSwitchContext>
 800fa94:	f04f 0000 	mov.w	r0, #0
 800fa98:	f380 8811 	msr	BASEPRI, r0
 800fa9c:	bc09      	pop	{r0, r3}
 800fa9e:	6819      	ldr	r1, [r3, #0]
 800faa0:	6808      	ldr	r0, [r1, #0]
 800faa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faa6:	f01e 0f10 	tst.w	lr, #16
 800faaa:	bf08      	it	eq
 800faac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fab0:	f380 8809 	msr	PSP, r0
 800fab4:	f3bf 8f6f 	isb	sy
 800fab8:	4770      	bx	lr
 800faba:	bf00      	nop
 800fabc:	f3af 8000 	nop.w

0800fac0 <pxCurrentTCBConst>:
 800fac0:	20000db4 	.word	0x20000db4
                   "										\n"
                   "	bx r14								\n"
                   "										\n"
                   "	.align 4							\n"
                   "pxCurrentTCBConst: .word pxCurrentTCB	\n" ::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY));
}
 800fac4:	bf00      	nop
 800fac6:	bf00      	nop

0800fac8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler(void) {
 800fac8:	b580      	push	{r7, lr}
 800faca:	b082      	sub	sp, #8
 800facc:	af00      	add	r7, sp, #0
    __asm volatile("	mov %0, %1												\n"
 800face:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fad2:	f383 8811 	msr	BASEPRI, r3
 800fad6:	f3bf 8f6f 	isb	sy
 800fada:	f3bf 8f4f 	dsb	sy
 800fade:	607b      	str	r3, [r7, #4]
}
 800fae0:	bf00      	nop
    save and then restore the interrupt mask value as its value is already
    known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if (xTaskIncrementTick() != pdFALSE) {
 800fae2:	f7fe fe8b 	bl	800e7fc <xTaskIncrementTick>
 800fae6:	4603      	mov	r3, r0
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d003      	beq.n	800faf4 <xPortSysTickHandler+0x2c>
            /* A context switch is required.  Context switching is performed in
            the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800faec:	4b06      	ldr	r3, [pc, #24]	@ (800fb08 <xPortSysTickHandler+0x40>)
 800faee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800faf2:	601a      	str	r2, [r3, #0]
 800faf4:	2300      	movs	r3, #0
 800faf6:	603b      	str	r3, [r7, #0]
    __asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	f383 8811 	msr	BASEPRI, r3
}
 800fafe:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800fb00:	bf00      	nop
 800fb02:	3708      	adds	r7, #8
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bd80      	pop	{r7, pc}
 800fb08:	e000ed04 	.word	0xe000ed04

0800fb0c <vPortSetupTimerInterrupt>:

/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__((weak)) void vPortSetupTimerInterrupt(void) {
 800fb0c:	b480      	push	{r7}
 800fb0e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / (configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ);
    }
#endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fb10:	4b0b      	ldr	r3, [pc, #44]	@ (800fb40 <vPortSetupTimerInterrupt+0x34>)
 800fb12:	2200      	movs	r2, #0
 800fb14:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fb16:	4b0b      	ldr	r3, [pc, #44]	@ (800fb44 <vPortSetupTimerInterrupt+0x38>)
 800fb18:	2200      	movs	r2, #0
 800fb1a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 800fb1c:	4b0a      	ldr	r3, [pc, #40]	@ (800fb48 <vPortSetupTimerInterrupt+0x3c>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	4a0a      	ldr	r2, [pc, #40]	@ (800fb4c <vPortSetupTimerInterrupt+0x40>)
 800fb22:	fba2 2303 	umull	r2, r3, r2, r3
 800fb26:	0b5b      	lsrs	r3, r3, #13
 800fb28:	4a09      	ldr	r2, [pc, #36]	@ (800fb50 <vPortSetupTimerInterrupt+0x44>)
 800fb2a:	3b01      	subs	r3, #1
 800fb2c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = (portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT);
 800fb2e:	4b04      	ldr	r3, [pc, #16]	@ (800fb40 <vPortSetupTimerInterrupt+0x34>)
 800fb30:	2207      	movs	r2, #7
 800fb32:	601a      	str	r2, [r3, #0]
}
 800fb34:	bf00      	nop
 800fb36:	46bd      	mov	sp, r7
 800fb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3c:	4770      	bx	lr
 800fb3e:	bf00      	nop
 800fb40:	e000e010 	.word	0xe000e010
 800fb44:	e000e018 	.word	0xe000e018
 800fb48:	2000003c 	.word	0x2000003c
 800fb4c:	d1b71759 	.word	0xd1b71759
 800fb50:	e000e014 	.word	0xe000e014

0800fb54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP(void) {
    __asm volatile("	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
 800fb54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fb64 <vPortEnableVFP+0x10>
 800fb58:	6801      	ldr	r1, [r0, #0]
 800fb5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800fb5e:	6001      	str	r1, [r0, #0]
 800fb60:	4770      	bx	lr
                   "	ldr r1, [r0]				\n"
                   "								\n"
                   "	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
                   "	str r1, [r0]				\n"
                   "	bx r14						");
}
 800fb62:	bf00      	nop
 800fb64:	e000ed88 	.word	0xe000ed88

0800fb68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if (configASSERT_DEFINED == 1)

void vPortValidateInterruptPriority(void) {
 800fb68:	b480      	push	{r7}
 800fb6a:	b085      	sub	sp, #20
 800fb6c:	af00      	add	r7, sp, #0
    uint32_t ulCurrentInterrupt;
    uint8_t ucCurrentPriority;

    /* Obtain the number of the currently executing interrupt. */
    __asm volatile("mrs %0, ipsr" : "=r"(ulCurrentInterrupt)::"memory");
 800fb6e:	f3ef 8305 	mrs	r3, IPSR
 800fb72:	60fb      	str	r3, [r7, #12]

    /* Is the interrupt number a user defined interrupt? */
    if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	2b0f      	cmp	r3, #15
 800fb78:	d915      	bls.n	800fba6 <vPortValidateInterruptPriority+0x3e>
        /* Look up the interrupt's priority. */
        ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
 800fb7a:	4a18      	ldr	r2, [pc, #96]	@ (800fbdc <vPortValidateInterruptPriority+0x74>)
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	4413      	add	r3, r2
 800fb80:	781b      	ldrb	r3, [r3, #0]
 800fb82:	72fb      	strb	r3, [r7, #11]
        interrupt entry is as fast and simple as possible.

        The following links provide detailed information:
        http://www.freertos.org/RTOS-Cortex-M3-M4.html
        http://www.freertos.org/FAQHelp.html */
        configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
 800fb84:	4b16      	ldr	r3, [pc, #88]	@ (800fbe0 <vPortValidateInterruptPriority+0x78>)
 800fb86:	781b      	ldrb	r3, [r3, #0]
 800fb88:	7afa      	ldrb	r2, [r7, #11]
 800fb8a:	429a      	cmp	r2, r3
 800fb8c:	d20b      	bcs.n	800fba6 <vPortValidateInterruptPriority+0x3e>
    __asm volatile("	mov %0, %1												\n"
 800fb8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb92:	f383 8811 	msr	BASEPRI, r3
 800fb96:	f3bf 8f6f 	isb	sy
 800fb9a:	f3bf 8f4f 	dsb	sy
 800fb9e:	607b      	str	r3, [r7, #4]
}
 800fba0:	bf00      	nop
 800fba2:	bf00      	nop
 800fba4:	e7fd      	b.n	800fba2 <vPortValidateInterruptPriority+0x3a>
    configuration then the correct setting can be achieved on all Cortex-M
    devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
    scheduler.  Note however that some vendor specific peripheral libraries
    assume a non-zero priority group setting, in which cases using a value
    of zero will result in unpredictable behaviour. */
    configASSERT((portAIRCR_REG & portPRIORITY_GROUP_MASK) <= ulMaxPRIGROUPValue);
 800fba6:	4b0f      	ldr	r3, [pc, #60]	@ (800fbe4 <vPortValidateInterruptPriority+0x7c>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800fbae:	4b0e      	ldr	r3, [pc, #56]	@ (800fbe8 <vPortValidateInterruptPriority+0x80>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	d90b      	bls.n	800fbce <vPortValidateInterruptPriority+0x66>
    __asm volatile("	mov %0, %1												\n"
 800fbb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbba:	f383 8811 	msr	BASEPRI, r3
 800fbbe:	f3bf 8f6f 	isb	sy
 800fbc2:	f3bf 8f4f 	dsb	sy
 800fbc6:	603b      	str	r3, [r7, #0]
}
 800fbc8:	bf00      	nop
 800fbca:	bf00      	nop
 800fbcc:	e7fd      	b.n	800fbca <vPortValidateInterruptPriority+0x62>
}
 800fbce:	bf00      	nop
 800fbd0:	3714      	adds	r7, #20
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd8:	4770      	bx	lr
 800fbda:	bf00      	nop
 800fbdc:	e000e3f0 	.word	0xe000e3f0
 800fbe0:	20000fdc 	.word	0x20000fdc
 800fbe4:	e000ed0c 	.word	0xe000ed0c
 800fbe8:	20000fe0 	.word	0x20000fe0

0800fbec <pvPortMalloc>:
#error This file must not be used if configSUPPORT_DYNAMIC_ALLOCATION is 0
#endif

/*-----------------------------------------------------------*/

void * pvPortMalloc(size_t xWantedSize) {
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b084      	sub	sp, #16
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
    void * pvReturn;

    vTaskSuspendAll();
 800fbf4:	f7fe fd46 	bl	800e684 <vTaskSuspendAll>
    {
        pvReturn = malloc(xWantedSize);
 800fbf8:	6878      	ldr	r0, [r7, #4]
 800fbfa:	f000 fd2b 	bl	8010654 <malloc>
 800fbfe:	4603      	mov	r3, r0
 800fc00:	60fb      	str	r3, [r7, #12]
        traceMALLOC(pvReturn, xWantedSize);
    }
    (void)xTaskResumeAll();
 800fc02:	f7fe fd4d 	bl	800e6a0 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
#endif

    return pvReturn;
 800fc06:	68fb      	ldr	r3, [r7, #12]
}
 800fc08:	4618      	mov	r0, r3
 800fc0a:	3710      	adds	r7, #16
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}

0800fc10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree(void * pv) {
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b082      	sub	sp, #8
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
    if (pv) {
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d006      	beq.n	800fc2c <vPortFree+0x1c>
        vTaskSuspendAll();
 800fc1e:	f7fe fd31 	bl	800e684 <vTaskSuspendAll>
        {
            free(pv);
 800fc22:	6878      	ldr	r0, [r7, #4]
 800fc24:	f000 fd1e 	bl	8010664 <free>
            traceFREE(pv, 0);
        }
        (void)xTaskResumeAll();
 800fc28:	f7fe fd3a 	bl	800e6a0 <xTaskResumeAll>
    }
}
 800fc2c:	bf00      	nop
 800fc2e:	3708      	adds	r7, #8
 800fc30:	46bd      	mov	sp, r7
 800fc32:	bd80      	pop	{r7, pc}

0800fc34 <MX_USB_DEVICE_Init>:

/**
 * Init USB device Library, add supported class and start the library
 * @retval None
 */
void MX_USB_DEVICE_Init(void) {
 800fc34:	b580      	push	{r7, lr}
 800fc36:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

    /* USER CODE END USB_DEVICE_Init_PreTreatment */

    /* Init Device Library, add supported class and start the library. */
    if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 800fc38:	2200      	movs	r2, #0
 800fc3a:	4912      	ldr	r1, [pc, #72]	@ (800fc84 <MX_USB_DEVICE_Init+0x50>)
 800fc3c:	4812      	ldr	r0, [pc, #72]	@ (800fc88 <MX_USB_DEVICE_Init+0x54>)
 800fc3e:	f7fc f8bf 	bl	800bdc0 <USBD_Init>
 800fc42:	4603      	mov	r3, r0
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d001      	beq.n	800fc4c <MX_USB_DEVICE_Init+0x18>
        Error_Handler();
 800fc48:	f7f3 f857 	bl	8002cfa <Error_Handler>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800fc4c:	490f      	ldr	r1, [pc, #60]	@ (800fc8c <MX_USB_DEVICE_Init+0x58>)
 800fc4e:	480e      	ldr	r0, [pc, #56]	@ (800fc88 <MX_USB_DEVICE_Init+0x54>)
 800fc50:	f7fc f8e6 	bl	800be20 <USBD_RegisterClass>
 800fc54:	4603      	mov	r3, r0
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d001      	beq.n	800fc5e <MX_USB_DEVICE_Init+0x2a>
        Error_Handler();
 800fc5a:	f7f3 f84e 	bl	8002cfa <Error_Handler>
    }
    if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800fc5e:	490c      	ldr	r1, [pc, #48]	@ (800fc90 <MX_USB_DEVICE_Init+0x5c>)
 800fc60:	4809      	ldr	r0, [pc, #36]	@ (800fc88 <MX_USB_DEVICE_Init+0x54>)
 800fc62:	f7fb ffd7 	bl	800bc14 <USBD_CDC_RegisterInterface>
 800fc66:	4603      	mov	r3, r0
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d001      	beq.n	800fc70 <MX_USB_DEVICE_Init+0x3c>
        Error_Handler();
 800fc6c:	f7f3 f845 	bl	8002cfa <Error_Handler>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800fc70:	4805      	ldr	r0, [pc, #20]	@ (800fc88 <MX_USB_DEVICE_Init+0x54>)
 800fc72:	f7fc f90b 	bl	800be8c <USBD_Start>
 800fc76:	4603      	mov	r3, r0
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d001      	beq.n	800fc80 <MX_USB_DEVICE_Init+0x4c>
        Error_Handler();
 800fc7c:	f7f3 f83d 	bl	8002cfa <Error_Handler>
    }

    /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

    /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fc80:	bf00      	nop
 800fc82:	bd80      	pop	{r7, pc}
 800fc84:	2000010c 	.word	0x2000010c
 800fc88:	20000fe4 	.word	0x20000fe4
 800fc8c:	20000074 	.word	0x20000074
 800fc90:	200000f8 	.word	0x200000f8

0800fc94 <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 800fc94:	b580      	push	{r7, lr}
 800fc96:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fc98:	2200      	movs	r2, #0
 800fc9a:	4905      	ldr	r1, [pc, #20]	@ (800fcb0 <CDC_Init_FS+0x1c>)
 800fc9c:	4805      	ldr	r0, [pc, #20]	@ (800fcb4 <CDC_Init_FS+0x20>)
 800fc9e:	f7fb ffd3 	bl	800bc48 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fca2:	4905      	ldr	r1, [pc, #20]	@ (800fcb8 <CDC_Init_FS+0x24>)
 800fca4:	4803      	ldr	r0, [pc, #12]	@ (800fcb4 <CDC_Init_FS+0x20>)
 800fca6:	f7fb fff1 	bl	800bc8c <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 800fcaa:	2300      	movs	r3, #0
    /* USER CODE END 3 */
}
 800fcac:	4618      	mov	r0, r3
 800fcae:	bd80      	pop	{r7, pc}
 800fcb0:	200013c0 	.word	0x200013c0
 800fcb4:	20000fe4 	.word	0x20000fe4
 800fcb8:	200012c0 	.word	0x200012c0

0800fcbc <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 800fcbc:	b480      	push	{r7}
 800fcbe:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 4 */
    return (USBD_OK);
 800fcc0:	2300      	movs	r3, #0
    /* USER CODE END 4 */
}
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcca:	4770      	bx	lr

0800fccc <CDC_Control_FS>:
 * @param  cmd: Command code
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t * pbuf, uint16_t length) {
 800fccc:	b480      	push	{r7}
 800fcce:	b083      	sub	sp, #12
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	6039      	str	r1, [r7, #0]
 800fcd6:	71fb      	strb	r3, [r7, #7]
 800fcd8:	4613      	mov	r3, r2
 800fcda:	80bb      	strh	r3, [r7, #4]
    /* USER CODE BEGIN 5 */
    switch (cmd) {
 800fcdc:	79fb      	ldrb	r3, [r7, #7]
 800fcde:	2b23      	cmp	r3, #35	@ 0x23
 800fce0:	d84a      	bhi.n	800fd78 <CDC_Control_FS+0xac>
 800fce2:	a201      	add	r2, pc, #4	@ (adr r2, 800fce8 <CDC_Control_FS+0x1c>)
 800fce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fce8:	0800fd79 	.word	0x0800fd79
 800fcec:	0800fd79 	.word	0x0800fd79
 800fcf0:	0800fd79 	.word	0x0800fd79
 800fcf4:	0800fd79 	.word	0x0800fd79
 800fcf8:	0800fd79 	.word	0x0800fd79
 800fcfc:	0800fd79 	.word	0x0800fd79
 800fd00:	0800fd79 	.word	0x0800fd79
 800fd04:	0800fd79 	.word	0x0800fd79
 800fd08:	0800fd79 	.word	0x0800fd79
 800fd0c:	0800fd79 	.word	0x0800fd79
 800fd10:	0800fd79 	.word	0x0800fd79
 800fd14:	0800fd79 	.word	0x0800fd79
 800fd18:	0800fd79 	.word	0x0800fd79
 800fd1c:	0800fd79 	.word	0x0800fd79
 800fd20:	0800fd79 	.word	0x0800fd79
 800fd24:	0800fd79 	.word	0x0800fd79
 800fd28:	0800fd79 	.word	0x0800fd79
 800fd2c:	0800fd79 	.word	0x0800fd79
 800fd30:	0800fd79 	.word	0x0800fd79
 800fd34:	0800fd79 	.word	0x0800fd79
 800fd38:	0800fd79 	.word	0x0800fd79
 800fd3c:	0800fd79 	.word	0x0800fd79
 800fd40:	0800fd79 	.word	0x0800fd79
 800fd44:	0800fd79 	.word	0x0800fd79
 800fd48:	0800fd79 	.word	0x0800fd79
 800fd4c:	0800fd79 	.word	0x0800fd79
 800fd50:	0800fd79 	.word	0x0800fd79
 800fd54:	0800fd79 	.word	0x0800fd79
 800fd58:	0800fd79 	.word	0x0800fd79
 800fd5c:	0800fd79 	.word	0x0800fd79
 800fd60:	0800fd79 	.word	0x0800fd79
 800fd64:	0800fd79 	.word	0x0800fd79
 800fd68:	0800fd79 	.word	0x0800fd79
 800fd6c:	0800fd79 	.word	0x0800fd79
 800fd70:	0800fd79 	.word	0x0800fd79
 800fd74:	0800fd79 	.word	0x0800fd79
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 800fd78:	bf00      	nop
    }

    return (USBD_OK);
 800fd7a:	2300      	movs	r3, #0
    /* USER CODE END 5 */
}
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	370c      	adds	r7, #12
 800fd80:	46bd      	mov	sp, r7
 800fd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd86:	4770      	bx	lr

0800fd88 <CDC_Receive_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t * Buf, uint32_t * Len) {
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b082      	sub	sp, #8
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
 800fd90:	6039      	str	r1, [r7, #0]
    /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fd92:	6879      	ldr	r1, [r7, #4]
 800fd94:	4805      	ldr	r0, [pc, #20]	@ (800fdac <CDC_Receive_FS+0x24>)
 800fd96:	f7fb ff79 	bl	800bc8c <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fd9a:	4804      	ldr	r0, [pc, #16]	@ (800fdac <CDC_Receive_FS+0x24>)
 800fd9c:	f7fb ffda 	bl	800bd54 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 800fda0:	2300      	movs	r3, #0
    /* USER CODE END 6 */
}
 800fda2:	4618      	mov	r0, r3
 800fda4:	3708      	adds	r7, #8
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}
 800fdaa:	bf00      	nop
 800fdac:	20000fe4 	.word	0x20000fe4

0800fdb0 <CDC_Transmit_FS>:
 *
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t * Buf, uint16_t Len) {
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b084      	sub	sp, #16
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
 800fdb8:	460b      	mov	r3, r1
 800fdba:	807b      	strh	r3, [r7, #2]
    uint8_t result = USBD_OK;
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	73fb      	strb	r3, [r7, #15]
    /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800fdc0:	4b0d      	ldr	r3, [pc, #52]	@ (800fdf8 <CDC_Transmit_FS+0x48>)
 800fdc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fdc6:	60bb      	str	r3, [r7, #8]
    if (hcdc->TxState != 0) {
 800fdc8:	68bb      	ldr	r3, [r7, #8]
 800fdca:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d001      	beq.n	800fdd6 <CDC_Transmit_FS+0x26>
        return USBD_BUSY;
 800fdd2:	2301      	movs	r3, #1
 800fdd4:	e00b      	b.n	800fdee <CDC_Transmit_FS+0x3e>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800fdd6:	887b      	ldrh	r3, [r7, #2]
 800fdd8:	461a      	mov	r2, r3
 800fdda:	6879      	ldr	r1, [r7, #4]
 800fddc:	4806      	ldr	r0, [pc, #24]	@ (800fdf8 <CDC_Transmit_FS+0x48>)
 800fdde:	f7fb ff33 	bl	800bc48 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800fde2:	4805      	ldr	r0, [pc, #20]	@ (800fdf8 <CDC_Transmit_FS+0x48>)
 800fde4:	f7fb ff70 	bl	800bcc8 <USBD_CDC_TransmitPacket>
 800fde8:	4603      	mov	r3, r0
 800fdea:	73fb      	strb	r3, [r7, #15]
    /* USER CODE END 7 */
    return result;
 800fdec:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdee:	4618      	mov	r0, r3
 800fdf0:	3710      	adds	r7, #16
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	bd80      	pop	{r7, pc}
 800fdf6:	bf00      	nop
 800fdf8:	20000fe4 	.word	0x20000fe4

0800fdfc <CDC_TransmitCplt_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t * Buf, uint32_t * Len, uint8_t epnum) {
 800fdfc:	b480      	push	{r7}
 800fdfe:	b087      	sub	sp, #28
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	60f8      	str	r0, [r7, #12]
 800fe04:	60b9      	str	r1, [r7, #8]
 800fe06:	4613      	mov	r3, r2
 800fe08:	71fb      	strb	r3, [r7, #7]
    uint8_t result = USBD_OK;
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	75fb      	strb	r3, [r7, #23]
    /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
    /* USER CODE END 13 */
    return result;
 800fe0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fe12:	4618      	mov	r0, r3
 800fe14:	371c      	adds	r7, #28
 800fe16:	46bd      	mov	sp, r7
 800fe18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1c:	4770      	bx	lr
	...

0800fe20 <USBD_FS_DeviceDescriptor>:
 * @brief  Return the device descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800fe20:	b480      	push	{r7}
 800fe22:	b083      	sub	sp, #12
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	4603      	mov	r3, r0
 800fe28:	6039      	str	r1, [r7, #0]
 800fe2a:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    *length = sizeof(USBD_FS_DeviceDesc);
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	2212      	movs	r2, #18
 800fe30:	801a      	strh	r2, [r3, #0]
    return USBD_FS_DeviceDesc;
 800fe32:	4b03      	ldr	r3, [pc, #12]	@ (800fe40 <USBD_FS_DeviceDescriptor+0x20>)
}
 800fe34:	4618      	mov	r0, r3
 800fe36:	370c      	adds	r7, #12
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3e:	4770      	bx	lr
 800fe40:	20000128 	.word	0x20000128

0800fe44 <USBD_FS_LangIDStrDescriptor>:
 * @brief  Return the LangID string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800fe44:	b480      	push	{r7}
 800fe46:	b083      	sub	sp, #12
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	6039      	str	r1, [r7, #0]
 800fe4e:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    *length = sizeof(USBD_LangIDDesc);
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	2204      	movs	r2, #4
 800fe54:	801a      	strh	r2, [r3, #0]
    return USBD_LangIDDesc;
 800fe56:	4b03      	ldr	r3, [pc, #12]	@ (800fe64 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fe58:	4618      	mov	r0, r3
 800fe5a:	370c      	adds	r7, #12
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe62:	4770      	bx	lr
 800fe64:	2000013c 	.word	0x2000013c

0800fe68 <USBD_FS_ProductStrDescriptor>:
 * @brief  Return the product string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b082      	sub	sp, #8
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	4603      	mov	r3, r0
 800fe70:	6039      	str	r1, [r7, #0]
 800fe72:	71fb      	strb	r3, [r7, #7]
    if (speed == 0) {
 800fe74:	79fb      	ldrb	r3, [r7, #7]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d105      	bne.n	800fe86 <USBD_FS_ProductStrDescriptor+0x1e>
        USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fe7a:	683a      	ldr	r2, [r7, #0]
 800fe7c:	4907      	ldr	r1, [pc, #28]	@ (800fe9c <USBD_FS_ProductStrDescriptor+0x34>)
 800fe7e:	4808      	ldr	r0, [pc, #32]	@ (800fea0 <USBD_FS_ProductStrDescriptor+0x38>)
 800fe80:	f7fd f9ae 	bl	800d1e0 <USBD_GetString>
 800fe84:	e004      	b.n	800fe90 <USBD_FS_ProductStrDescriptor+0x28>
    } else {
        USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fe86:	683a      	ldr	r2, [r7, #0]
 800fe88:	4904      	ldr	r1, [pc, #16]	@ (800fe9c <USBD_FS_ProductStrDescriptor+0x34>)
 800fe8a:	4805      	ldr	r0, [pc, #20]	@ (800fea0 <USBD_FS_ProductStrDescriptor+0x38>)
 800fe8c:	f7fd f9a8 	bl	800d1e0 <USBD_GetString>
    }
    return USBD_StrDesc;
 800fe90:	4b02      	ldr	r3, [pc, #8]	@ (800fe9c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fe92:	4618      	mov	r0, r3
 800fe94:	3708      	adds	r7, #8
 800fe96:	46bd      	mov	sp, r7
 800fe98:	bd80      	pop	{r7, pc}
 800fe9a:	bf00      	nop
 800fe9c:	200014c0 	.word	0x200014c0
 800fea0:	08013c30 	.word	0x08013c30

0800fea4 <USBD_FS_ManufacturerStrDescriptor>:
 * @brief  Return the manufacturer string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b082      	sub	sp, #8
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	4603      	mov	r3, r0
 800feac:	6039      	str	r1, [r7, #0]
 800feae:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800feb0:	683a      	ldr	r2, [r7, #0]
 800feb2:	4904      	ldr	r1, [pc, #16]	@ (800fec4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800feb4:	4804      	ldr	r0, [pc, #16]	@ (800fec8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800feb6:	f7fd f993 	bl	800d1e0 <USBD_GetString>
    return USBD_StrDesc;
 800feba:	4b02      	ldr	r3, [pc, #8]	@ (800fec4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800febc:	4618      	mov	r0, r3
 800febe:	3708      	adds	r7, #8
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}
 800fec4:	200014c0 	.word	0x200014c0
 800fec8:	08013c48 	.word	0x08013c48

0800fecc <USBD_FS_SerialStrDescriptor>:
 * @brief  Return the serial number string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800fecc:	b580      	push	{r7, lr}
 800fece:	b082      	sub	sp, #8
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	4603      	mov	r3, r0
 800fed4:	6039      	str	r1, [r7, #0]
 800fed6:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    *length = USB_SIZ_STRING_SERIAL;
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	221a      	movs	r2, #26
 800fedc:	801a      	strh	r2, [r3, #0]

    /* Update the serial number string descriptor with the data from the unique
     * ID */
    Get_SerialNum();
 800fede:	f000 f843 	bl	800ff68 <Get_SerialNum>
    /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

    /* USER CODE END USBD_FS_SerialStrDescriptor */
    return (uint8_t *)USBD_StringSerial;
 800fee2:	4b02      	ldr	r3, [pc, #8]	@ (800feec <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fee4:	4618      	mov	r0, r3
 800fee6:	3708      	adds	r7, #8
 800fee8:	46bd      	mov	sp, r7
 800feea:	bd80      	pop	{r7, pc}
 800feec:	20000140 	.word	0x20000140

0800fef0 <USBD_FS_ConfigStrDescriptor>:
 * @brief  Return the configuration string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b082      	sub	sp, #8
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	4603      	mov	r3, r0
 800fef8:	6039      	str	r1, [r7, #0]
 800fefa:	71fb      	strb	r3, [r7, #7]
    if (speed == USBD_SPEED_HIGH) {
 800fefc:	79fb      	ldrb	r3, [r7, #7]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d105      	bne.n	800ff0e <USBD_FS_ConfigStrDescriptor+0x1e>
        USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ff02:	683a      	ldr	r2, [r7, #0]
 800ff04:	4907      	ldr	r1, [pc, #28]	@ (800ff24 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ff06:	4808      	ldr	r0, [pc, #32]	@ (800ff28 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ff08:	f7fd f96a 	bl	800d1e0 <USBD_GetString>
 800ff0c:	e004      	b.n	800ff18 <USBD_FS_ConfigStrDescriptor+0x28>
    } else {
        USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ff0e:	683a      	ldr	r2, [r7, #0]
 800ff10:	4904      	ldr	r1, [pc, #16]	@ (800ff24 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ff12:	4805      	ldr	r0, [pc, #20]	@ (800ff28 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ff14:	f7fd f964 	bl	800d1e0 <USBD_GetString>
    }
    return USBD_StrDesc;
 800ff18:	4b02      	ldr	r3, [pc, #8]	@ (800ff24 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	3708      	adds	r7, #8
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	bd80      	pop	{r7, pc}
 800ff22:	bf00      	nop
 800ff24:	200014c0 	.word	0x200014c0
 800ff28:	08013c5c 	.word	0x08013c5c

0800ff2c <USBD_FS_InterfaceStrDescriptor>:
 * @brief  Return the interface string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b082      	sub	sp, #8
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	4603      	mov	r3, r0
 800ff34:	6039      	str	r1, [r7, #0]
 800ff36:	71fb      	strb	r3, [r7, #7]
    if (speed == 0) {
 800ff38:	79fb      	ldrb	r3, [r7, #7]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d105      	bne.n	800ff4a <USBD_FS_InterfaceStrDescriptor+0x1e>
        USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ff3e:	683a      	ldr	r2, [r7, #0]
 800ff40:	4907      	ldr	r1, [pc, #28]	@ (800ff60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ff42:	4808      	ldr	r0, [pc, #32]	@ (800ff64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ff44:	f7fd f94c 	bl	800d1e0 <USBD_GetString>
 800ff48:	e004      	b.n	800ff54 <USBD_FS_InterfaceStrDescriptor+0x28>
    } else {
        USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ff4a:	683a      	ldr	r2, [r7, #0]
 800ff4c:	4904      	ldr	r1, [pc, #16]	@ (800ff60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ff4e:	4805      	ldr	r0, [pc, #20]	@ (800ff64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ff50:	f7fd f946 	bl	800d1e0 <USBD_GetString>
    }
    return USBD_StrDesc;
 800ff54:	4b02      	ldr	r3, [pc, #8]	@ (800ff60 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	3708      	adds	r7, #8
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd80      	pop	{r7, pc}
 800ff5e:	bf00      	nop
 800ff60:	200014c0 	.word	0x200014c0
 800ff64:	08013c68 	.word	0x08013c68

0800ff68 <Get_SerialNum>:
/**
 * @brief  Create the serial number string descriptor
 * @param  None
 * @retval None
 */
static void Get_SerialNum(void) {
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b084      	sub	sp, #16
 800ff6c:	af00      	add	r7, sp, #0
    uint32_t deviceserial0;
    uint32_t deviceserial1;
    uint32_t deviceserial2;

    deviceserial0 = *(uint32_t *)DEVICE_ID1;
 800ff6e:	4b0f      	ldr	r3, [pc, #60]	@ (800ffac <Get_SerialNum+0x44>)
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	60fb      	str	r3, [r7, #12]
    deviceserial1 = *(uint32_t *)DEVICE_ID2;
 800ff74:	4b0e      	ldr	r3, [pc, #56]	@ (800ffb0 <Get_SerialNum+0x48>)
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	60bb      	str	r3, [r7, #8]
    deviceserial2 = *(uint32_t *)DEVICE_ID3;
 800ff7a:	4b0e      	ldr	r3, [pc, #56]	@ (800ffb4 <Get_SerialNum+0x4c>)
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	607b      	str	r3, [r7, #4]

    deviceserial0 += deviceserial2;
 800ff80:	68fa      	ldr	r2, [r7, #12]
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	4413      	add	r3, r2
 800ff86:	60fb      	str	r3, [r7, #12]

    if (deviceserial0 != 0) {
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d009      	beq.n	800ffa2 <Get_SerialNum+0x3a>
        IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ff8e:	2208      	movs	r2, #8
 800ff90:	4909      	ldr	r1, [pc, #36]	@ (800ffb8 <Get_SerialNum+0x50>)
 800ff92:	68f8      	ldr	r0, [r7, #12]
 800ff94:	f000 f814 	bl	800ffc0 <IntToUnicode>
        IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ff98:	2204      	movs	r2, #4
 800ff9a:	4908      	ldr	r1, [pc, #32]	@ (800ffbc <Get_SerialNum+0x54>)
 800ff9c:	68b8      	ldr	r0, [r7, #8]
 800ff9e:	f000 f80f 	bl	800ffc0 <IntToUnicode>
    }
}
 800ffa2:	bf00      	nop
 800ffa4:	3710      	adds	r7, #16
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	bd80      	pop	{r7, pc}
 800ffaa:	bf00      	nop
 800ffac:	1fff7a10 	.word	0x1fff7a10
 800ffb0:	1fff7a14 	.word	0x1fff7a14
 800ffb4:	1fff7a18 	.word	0x1fff7a18
 800ffb8:	20000142 	.word	0x20000142
 800ffbc:	20000152 	.word	0x20000152

0800ffc0 <IntToUnicode>:
 * @param  value: value to convert
 * @param  pbuf: pointer to the buffer
 * @param  len: buffer length
 * @retval None
 */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len) {
 800ffc0:	b480      	push	{r7}
 800ffc2:	b087      	sub	sp, #28
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	60f8      	str	r0, [r7, #12]
 800ffc8:	60b9      	str	r1, [r7, #8]
 800ffca:	4613      	mov	r3, r2
 800ffcc:	71fb      	strb	r3, [r7, #7]
    uint8_t idx = 0;
 800ffce:	2300      	movs	r3, #0
 800ffd0:	75fb      	strb	r3, [r7, #23]

    for (idx = 0; idx < len; idx++) {
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	75fb      	strb	r3, [r7, #23]
 800ffd6:	e027      	b.n	8010028 <IntToUnicode+0x68>
        if (((value >> 28)) < 0xA) {
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	0f1b      	lsrs	r3, r3, #28
 800ffdc:	2b09      	cmp	r3, #9
 800ffde:	d80b      	bhi.n	800fff8 <IntToUnicode+0x38>
            pbuf[2 * idx] = (value >> 28) + '0';
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	0f1b      	lsrs	r3, r3, #28
 800ffe4:	b2da      	uxtb	r2, r3
 800ffe6:	7dfb      	ldrb	r3, [r7, #23]
 800ffe8:	005b      	lsls	r3, r3, #1
 800ffea:	4619      	mov	r1, r3
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	440b      	add	r3, r1
 800fff0:	3230      	adds	r2, #48	@ 0x30
 800fff2:	b2d2      	uxtb	r2, r2
 800fff4:	701a      	strb	r2, [r3, #0]
 800fff6:	e00a      	b.n	801000e <IntToUnicode+0x4e>
        } else {
            pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	0f1b      	lsrs	r3, r3, #28
 800fffc:	b2da      	uxtb	r2, r3
 800fffe:	7dfb      	ldrb	r3, [r7, #23]
 8010000:	005b      	lsls	r3, r3, #1
 8010002:	4619      	mov	r1, r3
 8010004:	68bb      	ldr	r3, [r7, #8]
 8010006:	440b      	add	r3, r1
 8010008:	3237      	adds	r2, #55	@ 0x37
 801000a:	b2d2      	uxtb	r2, r2
 801000c:	701a      	strb	r2, [r3, #0]
        }

        value = value << 4;
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	011b      	lsls	r3, r3, #4
 8010012:	60fb      	str	r3, [r7, #12]

        pbuf[2 * idx + 1] = 0;
 8010014:	7dfb      	ldrb	r3, [r7, #23]
 8010016:	005b      	lsls	r3, r3, #1
 8010018:	3301      	adds	r3, #1
 801001a:	68ba      	ldr	r2, [r7, #8]
 801001c:	4413      	add	r3, r2
 801001e:	2200      	movs	r2, #0
 8010020:	701a      	strb	r2, [r3, #0]
    for (idx = 0; idx < len; idx++) {
 8010022:	7dfb      	ldrb	r3, [r7, #23]
 8010024:	3301      	adds	r3, #1
 8010026:	75fb      	strb	r3, [r7, #23]
 8010028:	7dfa      	ldrb	r2, [r7, #23]
 801002a:	79fb      	ldrb	r3, [r7, #7]
 801002c:	429a      	cmp	r2, r3
 801002e:	d3d3      	bcc.n	800ffd8 <IntToUnicode+0x18>
    }
}
 8010030:	bf00      	nop
 8010032:	bf00      	nop
 8010034:	371c      	adds	r7, #28
 8010036:	46bd      	mov	sp, r7
 8010038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003c:	4770      	bx	lr
	...

08010040 <HAL_PCD_MspInit>:
/*******************************************************************************
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef * pcdHandle) {
 8010040:	b580      	push	{r7, lr}
 8010042:	b08a      	sub	sp, #40	@ 0x28
 8010044:	af00      	add	r7, sp, #0
 8010046:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010048:	f107 0314 	add.w	r3, r7, #20
 801004c:	2200      	movs	r2, #0
 801004e:	601a      	str	r2, [r3, #0]
 8010050:	605a      	str	r2, [r3, #4]
 8010052:	609a      	str	r2, [r3, #8]
 8010054:	60da      	str	r2, [r3, #12]
 8010056:	611a      	str	r2, [r3, #16]
    if (pcdHandle->Instance == USB_OTG_FS) {
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010060:	d13a      	bne.n	80100d8 <HAL_PCD_MspInit+0x98>
        /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

        /* USER CODE END USB_OTG_FS_MspInit 0 */

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8010062:	2300      	movs	r3, #0
 8010064:	613b      	str	r3, [r7, #16]
 8010066:	4b1e      	ldr	r3, [pc, #120]	@ (80100e0 <HAL_PCD_MspInit+0xa0>)
 8010068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801006a:	4a1d      	ldr	r2, [pc, #116]	@ (80100e0 <HAL_PCD_MspInit+0xa0>)
 801006c:	f043 0301 	orr.w	r3, r3, #1
 8010070:	6313      	str	r3, [r2, #48]	@ 0x30
 8010072:	4b1b      	ldr	r3, [pc, #108]	@ (80100e0 <HAL_PCD_MspInit+0xa0>)
 8010074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010076:	f003 0301 	and.w	r3, r3, #1
 801007a:	613b      	str	r3, [r7, #16]
 801007c:	693b      	ldr	r3, [r7, #16]
        /**USB_OTG_FS GPIO Configuration
        PA11     ------> USB_OTG_FS_DM
        PA12     ------> USB_OTG_FS_DP
        */
        GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 801007e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8010082:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010084:	2302      	movs	r3, #2
 8010086:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010088:	2300      	movs	r3, #0
 801008a:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801008c:	2303      	movs	r3, #3
 801008e:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010090:	230a      	movs	r3, #10
 8010092:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010094:	f107 0314 	add.w	r3, r7, #20
 8010098:	4619      	mov	r1, r3
 801009a:	4812      	ldr	r0, [pc, #72]	@ (80100e4 <HAL_PCD_MspInit+0xa4>)
 801009c:	f7f5 fb82 	bl	80057a4 <HAL_GPIO_Init>

        /* Peripheral clock enable */
        __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80100a0:	4b0f      	ldr	r3, [pc, #60]	@ (80100e0 <HAL_PCD_MspInit+0xa0>)
 80100a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80100a4:	4a0e      	ldr	r2, [pc, #56]	@ (80100e0 <HAL_PCD_MspInit+0xa0>)
 80100a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80100aa:	6353      	str	r3, [r2, #52]	@ 0x34
 80100ac:	2300      	movs	r3, #0
 80100ae:	60fb      	str	r3, [r7, #12]
 80100b0:	4b0b      	ldr	r3, [pc, #44]	@ (80100e0 <HAL_PCD_MspInit+0xa0>)
 80100b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80100b4:	4a0a      	ldr	r2, [pc, #40]	@ (80100e0 <HAL_PCD_MspInit+0xa0>)
 80100b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80100ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80100bc:	4b08      	ldr	r3, [pc, #32]	@ (80100e0 <HAL_PCD_MspInit+0xa0>)
 80100be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80100c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80100c4:	60fb      	str	r3, [r7, #12]
 80100c6:	68fb      	ldr	r3, [r7, #12]

        /* Peripheral interrupt init */
        HAL_NVIC_SetPriority(OTG_FS_IRQn, 2, 0);
 80100c8:	2200      	movs	r2, #0
 80100ca:	2102      	movs	r1, #2
 80100cc:	2043      	movs	r0, #67	@ 0x43
 80100ce:	f7f5 f948 	bl	8005362 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80100d2:	2043      	movs	r0, #67	@ 0x43
 80100d4:	f7f5 f961 	bl	800539a <HAL_NVIC_EnableIRQ>
        /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

        /* USER CODE END USB_OTG_FS_MspInit 1 */
    }
}
 80100d8:	bf00      	nop
 80100da:	3728      	adds	r7, #40	@ 0x28
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}
 80100e0:	40023800 	.word	0x40023800
 80100e4:	40020000 	.word	0x40020000

080100e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b082      	sub	sp, #8
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
    USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80100fc:	4619      	mov	r1, r3
 80100fe:	4610      	mov	r0, r2
 8010100:	f7fb ff11 	bl	800bf26 <USBD_LL_SetupStage>
}
 8010104:	bf00      	nop
 8010106:	3708      	adds	r7, #8
 8010108:	46bd      	mov	sp, r7
 801010a:	bd80      	pop	{r7, pc}

0801010c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b082      	sub	sp, #8
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
 8010114:	460b      	mov	r3, r1
 8010116:	70fb      	strb	r3, [r7, #3]
    USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 801011e:	78fa      	ldrb	r2, [r7, #3]
 8010120:	6879      	ldr	r1, [r7, #4]
 8010122:	4613      	mov	r3, r2
 8010124:	00db      	lsls	r3, r3, #3
 8010126:	4413      	add	r3, r2
 8010128:	009b      	lsls	r3, r3, #2
 801012a:	440b      	add	r3, r1
 801012c:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8010130:	681a      	ldr	r2, [r3, #0]
 8010132:	78fb      	ldrb	r3, [r7, #3]
 8010134:	4619      	mov	r1, r3
 8010136:	f7fb ff4b 	bl	800bfd0 <USBD_LL_DataOutStage>
}
 801013a:	bf00      	nop
 801013c:	3708      	adds	r7, #8
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}

08010142 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010142:	b580      	push	{r7, lr}
 8010144:	b082      	sub	sp, #8
 8010146:	af00      	add	r7, sp, #0
 8010148:	6078      	str	r0, [r7, #4]
 801014a:	460b      	mov	r3, r1
 801014c:	70fb      	strb	r3, [r7, #3]
    USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8010154:	78fa      	ldrb	r2, [r7, #3]
 8010156:	6879      	ldr	r1, [r7, #4]
 8010158:	4613      	mov	r3, r2
 801015a:	00db      	lsls	r3, r3, #3
 801015c:	4413      	add	r3, r2
 801015e:	009b      	lsls	r3, r3, #2
 8010160:	440b      	add	r3, r1
 8010162:	334c      	adds	r3, #76	@ 0x4c
 8010164:	681a      	ldr	r2, [r3, #0]
 8010166:	78fb      	ldrb	r3, [r7, #3]
 8010168:	4619      	mov	r1, r3
 801016a:	f7fb ffe4 	bl	800c136 <USBD_LL_DataInStage>
}
 801016e:	bf00      	nop
 8010170:	3708      	adds	r7, #8
 8010172:	46bd      	mov	sp, r7
 8010174:	bd80      	pop	{r7, pc}

08010176 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010176:	b580      	push	{r7, lr}
 8010178:	b082      	sub	sp, #8
 801017a:	af00      	add	r7, sp, #0
 801017c:	6078      	str	r0, [r7, #4]
    USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8010184:	4618      	mov	r0, r3
 8010186:	f7fc f918 	bl	800c3ba <USBD_LL_SOF>
}
 801018a:	bf00      	nop
 801018c:	3708      	adds	r7, #8
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}

08010192 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010192:	b580      	push	{r7, lr}
 8010194:	b084      	sub	sp, #16
 8010196:	af00      	add	r7, sp, #0
 8010198:	6078      	str	r0, [r7, #4]
    USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801019a:	2301      	movs	r3, #1
 801019c:	73fb      	strb	r3, [r7, #15]

    if (hpcd->Init.speed != PCD_SPEED_FULL) {
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	68db      	ldr	r3, [r3, #12]
 80101a2:	2b02      	cmp	r3, #2
 80101a4:	d001      	beq.n	80101aa <HAL_PCD_ResetCallback+0x18>
        Error_Handler();
 80101a6:	f7f2 fda8 	bl	8002cfa <Error_Handler>
    }
    /* Set Speed. */
    USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80101b0:	7bfa      	ldrb	r2, [r7, #15]
 80101b2:	4611      	mov	r1, r2
 80101b4:	4618      	mov	r0, r3
 80101b6:	f7fc f8c2 	bl	800c33e <USBD_LL_SetSpeed>

    /* Reset Device. */
    USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80101c0:	4618      	mov	r0, r3
 80101c2:	f7fc f86a 	bl	800c29a <USBD_LL_Reset>
}
 80101c6:	bf00      	nop
 80101c8:	3710      	adds	r7, #16
 80101ca:	46bd      	mov	sp, r7
 80101cc:	bd80      	pop	{r7, pc}
	...

080101d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b082      	sub	sp, #8
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
    /* Inform USB library that core enters in suspend Mode. */
    USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80101de:	4618      	mov	r0, r3
 80101e0:	f7fc f8bd 	bl	800c35e <USBD_LL_Suspend>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	687a      	ldr	r2, [r7, #4]
 80101f0:	6812      	ldr	r2, [r2, #0]
 80101f2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80101f6:	f043 0301 	orr.w	r3, r3, #1
 80101fa:	6013      	str	r3, [r2, #0]
    /* Enter in STOP mode. */
    /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	6a1b      	ldr	r3, [r3, #32]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d005      	beq.n	8010210 <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010204:	4b04      	ldr	r3, [pc, #16]	@ (8010218 <HAL_PCD_SuspendCallback+0x48>)
 8010206:	691b      	ldr	r3, [r3, #16]
 8010208:	4a03      	ldr	r2, [pc, #12]	@ (8010218 <HAL_PCD_SuspendCallback+0x48>)
 801020a:	f043 0306 	orr.w	r3, r3, #6
 801020e:	6113      	str	r3, [r2, #16]
    }
    /* USER CODE END 2 */
}
 8010210:	bf00      	nop
 8010212:	3708      	adds	r7, #8
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}
 8010218:	e000ed00 	.word	0xe000ed00

0801021c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b082      	sub	sp, #8
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN 3 */

    /* USER CODE END 3 */
    USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801022a:	4618      	mov	r0, r3
 801022c:	f7fc f8ad 	bl	800c38a <USBD_LL_Resume>
}
 8010230:	bf00      	nop
 8010232:	3708      	adds	r7, #8
 8010234:	46bd      	mov	sp, r7
 8010236:	bd80      	pop	{r7, pc}

08010238 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b082      	sub	sp, #8
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
 8010240:	460b      	mov	r3, r1
 8010242:	70fb      	strb	r3, [r7, #3]
    USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801024a:	78fa      	ldrb	r2, [r7, #3]
 801024c:	4611      	mov	r1, r2
 801024e:	4618      	mov	r0, r3
 8010250:	f7fc f905 	bl	800c45e <USBD_LL_IsoOUTIncomplete>
}
 8010254:	bf00      	nop
 8010256:	3708      	adds	r7, #8
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}

0801025c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801025c:	b580      	push	{r7, lr}
 801025e:	b082      	sub	sp, #8
 8010260:	af00      	add	r7, sp, #0
 8010262:	6078      	str	r0, [r7, #4]
 8010264:	460b      	mov	r3, r1
 8010266:	70fb      	strb	r3, [r7, #3]
    USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801026e:	78fa      	ldrb	r2, [r7, #3]
 8010270:	4611      	mov	r1, r2
 8010272:	4618      	mov	r0, r3
 8010274:	f7fc f8c1 	bl	800c3fa <USBD_LL_IsoINIncomplete>
}
 8010278:	bf00      	nop
 801027a:	3708      	adds	r7, #8
 801027c:	46bd      	mov	sp, r7
 801027e:	bd80      	pop	{r7, pc}

08010280 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010280:	b580      	push	{r7, lr}
 8010282:	b082      	sub	sp, #8
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
    USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801028e:	4618      	mov	r0, r3
 8010290:	f7fc f917 	bl	800c4c2 <USBD_LL_DevConnected>
}
 8010294:	bf00      	nop
 8010296:	3708      	adds	r7, #8
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}

0801029c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b082      	sub	sp, #8
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
    USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80102aa:	4618      	mov	r0, r3
 80102ac:	f7fc f914 	bl	800c4d8 <USBD_LL_DevDisconnected>
}
 80102b0:	bf00      	nop
 80102b2:	3708      	adds	r7, #8
 80102b4:	46bd      	mov	sp, r7
 80102b6:	bd80      	pop	{r7, pc}

080102b8 <USBD_LL_Init>:
/**
 * @brief  Initializes the low level portion of the device driver.
 * @param  pdev: Device handle
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef * pdev) {
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b082      	sub	sp, #8
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
    /* Init USB Ip. */
    if (pdev->id == DEVICE_FS) {
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	781b      	ldrb	r3, [r3, #0]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d13c      	bne.n	8010342 <USBD_LL_Init+0x8a>
        /* Link the driver to the stack. */
        hpcd_USB_OTG_FS.pData = pdev;
 80102c8:	4a20      	ldr	r2, [pc, #128]	@ (801034c <USBD_LL_Init+0x94>)
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
        pdev->pData = &hpcd_USB_OTG_FS;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	4a1e      	ldr	r2, [pc, #120]	@ (801034c <USBD_LL_Init+0x94>)
 80102d4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

        hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80102d8:	4b1c      	ldr	r3, [pc, #112]	@ (801034c <USBD_LL_Init+0x94>)
 80102da:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80102de:	601a      	str	r2, [r3, #0]
        hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80102e0:	4b1a      	ldr	r3, [pc, #104]	@ (801034c <USBD_LL_Init+0x94>)
 80102e2:	2204      	movs	r2, #4
 80102e4:	605a      	str	r2, [r3, #4]
        hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80102e6:	4b19      	ldr	r3, [pc, #100]	@ (801034c <USBD_LL_Init+0x94>)
 80102e8:	2202      	movs	r2, #2
 80102ea:	60da      	str	r2, [r3, #12]
        hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80102ec:	4b17      	ldr	r3, [pc, #92]	@ (801034c <USBD_LL_Init+0x94>)
 80102ee:	2200      	movs	r2, #0
 80102f0:	611a      	str	r2, [r3, #16]
        hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80102f2:	4b16      	ldr	r3, [pc, #88]	@ (801034c <USBD_LL_Init+0x94>)
 80102f4:	2202      	movs	r2, #2
 80102f6:	619a      	str	r2, [r3, #24]
        hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80102f8:	4b14      	ldr	r3, [pc, #80]	@ (801034c <USBD_LL_Init+0x94>)
 80102fa:	2200      	movs	r2, #0
 80102fc:	61da      	str	r2, [r3, #28]
        hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80102fe:	4b13      	ldr	r3, [pc, #76]	@ (801034c <USBD_LL_Init+0x94>)
 8010300:	2200      	movs	r2, #0
 8010302:	621a      	str	r2, [r3, #32]
        hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010304:	4b11      	ldr	r3, [pc, #68]	@ (801034c <USBD_LL_Init+0x94>)
 8010306:	2200      	movs	r2, #0
 8010308:	625a      	str	r2, [r3, #36]	@ 0x24
        hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801030a:	4b10      	ldr	r3, [pc, #64]	@ (801034c <USBD_LL_Init+0x94>)
 801030c:	2200      	movs	r2, #0
 801030e:	62da      	str	r2, [r3, #44]	@ 0x2c
        hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010310:	4b0e      	ldr	r3, [pc, #56]	@ (801034c <USBD_LL_Init+0x94>)
 8010312:	2200      	movs	r2, #0
 8010314:	631a      	str	r2, [r3, #48]	@ 0x30
        if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8010316:	480d      	ldr	r0, [pc, #52]	@ (801034c <USBD_LL_Init+0x94>)
 8010318:	f7f6 fbb9 	bl	8006a8e <HAL_PCD_Init>
 801031c:	4603      	mov	r3, r0
 801031e:	2b00      	cmp	r3, #0
 8010320:	d001      	beq.n	8010326 <USBD_LL_Init+0x6e>
            Error_Handler();
 8010322:	f7f2 fcea 	bl	8002cfa <Error_Handler>
        HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
        HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
        HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
        HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010326:	2180      	movs	r1, #128	@ 0x80
 8010328:	4808      	ldr	r0, [pc, #32]	@ (801034c <USBD_LL_Init+0x94>)
 801032a:	f7f7 fe10 	bl	8007f4e <HAL_PCDEx_SetRxFiFo>
        HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801032e:	2240      	movs	r2, #64	@ 0x40
 8010330:	2100      	movs	r1, #0
 8010332:	4806      	ldr	r0, [pc, #24]	@ (801034c <USBD_LL_Init+0x94>)
 8010334:	f7f7 fdc4 	bl	8007ec0 <HAL_PCDEx_SetTxFiFo>
        HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010338:	2280      	movs	r2, #128	@ 0x80
 801033a:	2101      	movs	r1, #1
 801033c:	4803      	ldr	r0, [pc, #12]	@ (801034c <USBD_LL_Init+0x94>)
 801033e:	f7f7 fdbf 	bl	8007ec0 <HAL_PCDEx_SetTxFiFo>
    }
    return USBD_OK;
 8010342:	2300      	movs	r3, #0
}
 8010344:	4618      	mov	r0, r3
 8010346:	3708      	adds	r7, #8
 8010348:	46bd      	mov	sp, r7
 801034a:	bd80      	pop	{r7, pc}
 801034c:	200016c0 	.word	0x200016c0

08010350 <USBD_LL_Start>:
/**
 * @brief  Starts the low level portion of the device driver.
 * @param  pdev: Device handle
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef * pdev) {
 8010350:	b580      	push	{r7, lr}
 8010352:	b084      	sub	sp, #16
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8010358:	2300      	movs	r3, #0
 801035a:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 801035c:	2300      	movs	r3, #0
 801035e:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_Start(pdev->pData);
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010366:	4618      	mov	r0, r3
 8010368:	f7f6 fcae 	bl	8006cc8 <HAL_PCD_Start>
 801036c:	4603      	mov	r3, r0
 801036e:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 8010370:	7bfb      	ldrb	r3, [r7, #15]
 8010372:	4618      	mov	r0, r3
 8010374:	f000 f942 	bl	80105fc <USBD_Get_USB_Status>
 8010378:	4603      	mov	r3, r0
 801037a:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 801037c:	7bbb      	ldrb	r3, [r7, #14]
}
 801037e:	4618      	mov	r0, r3
 8010380:	3710      	adds	r7, #16
 8010382:	46bd      	mov	sp, r7
 8010384:	bd80      	pop	{r7, pc}

08010386 <USBD_LL_OpenEP>:
 * @param  ep_addr: Endpoint number
 * @param  ep_type: Endpoint type
 * @param  ep_mps: Endpoint max packet size
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps) {
 8010386:	b580      	push	{r7, lr}
 8010388:	b084      	sub	sp, #16
 801038a:	af00      	add	r7, sp, #0
 801038c:	6078      	str	r0, [r7, #4]
 801038e:	4608      	mov	r0, r1
 8010390:	4611      	mov	r1, r2
 8010392:	461a      	mov	r2, r3
 8010394:	4603      	mov	r3, r0
 8010396:	70fb      	strb	r3, [r7, #3]
 8010398:	460b      	mov	r3, r1
 801039a:	70bb      	strb	r3, [r7, #2]
 801039c:	4613      	mov	r3, r2
 801039e:	803b      	strh	r3, [r7, #0]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80103a0:	2300      	movs	r3, #0
 80103a2:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 80103a4:	2300      	movs	r3, #0
 80103a6:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80103ae:	78bb      	ldrb	r3, [r7, #2]
 80103b0:	883a      	ldrh	r2, [r7, #0]
 80103b2:	78f9      	ldrb	r1, [r7, #3]
 80103b4:	f7f7 f97f 	bl	80076b6 <HAL_PCD_EP_Open>
 80103b8:	4603      	mov	r3, r0
 80103ba:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 80103bc:	7bfb      	ldrb	r3, [r7, #15]
 80103be:	4618      	mov	r0, r3
 80103c0:	f000 f91c 	bl	80105fc <USBD_Get_USB_Status>
 80103c4:	4603      	mov	r3, r0
 80103c6:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 80103c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80103ca:	4618      	mov	r0, r3
 80103cc:	3710      	adds	r7, #16
 80103ce:	46bd      	mov	sp, r7
 80103d0:	bd80      	pop	{r7, pc}

080103d2 <USBD_LL_CloseEP>:
 * @brief  Closes an endpoint of the low level driver.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 80103d2:	b580      	push	{r7, lr}
 80103d4:	b084      	sub	sp, #16
 80103d6:	af00      	add	r7, sp, #0
 80103d8:	6078      	str	r0, [r7, #4]
 80103da:	460b      	mov	r3, r1
 80103dc:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80103de:	2300      	movs	r3, #0
 80103e0:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 80103e2:	2300      	movs	r3, #0
 80103e4:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80103ec:	78fa      	ldrb	r2, [r7, #3]
 80103ee:	4611      	mov	r1, r2
 80103f0:	4618      	mov	r0, r3
 80103f2:	f7f7 f9c8 	bl	8007786 <HAL_PCD_EP_Close>
 80103f6:	4603      	mov	r3, r0
 80103f8:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 80103fa:	7bfb      	ldrb	r3, [r7, #15]
 80103fc:	4618      	mov	r0, r3
 80103fe:	f000 f8fd 	bl	80105fc <USBD_Get_USB_Status>
 8010402:	4603      	mov	r3, r0
 8010404:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 8010406:	7bbb      	ldrb	r3, [r7, #14]
}
 8010408:	4618      	mov	r0, r3
 801040a:	3710      	adds	r7, #16
 801040c:	46bd      	mov	sp, r7
 801040e:	bd80      	pop	{r7, pc}

08010410 <USBD_LL_StallEP>:
 * @brief  Sets a Stall condition on an endpoint of the Low Level Driver.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 8010410:	b580      	push	{r7, lr}
 8010412:	b084      	sub	sp, #16
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
 8010418:	460b      	mov	r3, r1
 801041a:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 801041c:	2300      	movs	r3, #0
 801041e:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 8010420:	2300      	movs	r3, #0
 8010422:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801042a:	78fa      	ldrb	r2, [r7, #3]
 801042c:	4611      	mov	r1, r2
 801042e:	4618      	mov	r0, r3
 8010430:	f7f7 faa0 	bl	8007974 <HAL_PCD_EP_SetStall>
 8010434:	4603      	mov	r3, r0
 8010436:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 8010438:	7bfb      	ldrb	r3, [r7, #15]
 801043a:	4618      	mov	r0, r3
 801043c:	f000 f8de 	bl	80105fc <USBD_Get_USB_Status>
 8010440:	4603      	mov	r3, r0
 8010442:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 8010444:	7bbb      	ldrb	r3, [r7, #14]
}
 8010446:	4618      	mov	r0, r3
 8010448:	3710      	adds	r7, #16
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}

0801044e <USBD_LL_ClearStallEP>:
 * @brief  Clears a Stall condition on an endpoint of the Low Level Driver.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 801044e:	b580      	push	{r7, lr}
 8010450:	b084      	sub	sp, #16
 8010452:	af00      	add	r7, sp, #0
 8010454:	6078      	str	r0, [r7, #4]
 8010456:	460b      	mov	r3, r1
 8010458:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 801045a:	2300      	movs	r3, #0
 801045c:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 801045e:	2300      	movs	r3, #0
 8010460:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010468:	78fa      	ldrb	r2, [r7, #3]
 801046a:	4611      	mov	r1, r2
 801046c:	4618      	mov	r0, r3
 801046e:	f7f7 fae5 	bl	8007a3c <HAL_PCD_EP_ClrStall>
 8010472:	4603      	mov	r3, r0
 8010474:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 8010476:	7bfb      	ldrb	r3, [r7, #15]
 8010478:	4618      	mov	r0, r3
 801047a:	f000 f8bf 	bl	80105fc <USBD_Get_USB_Status>
 801047e:	4603      	mov	r3, r0
 8010480:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 8010482:	7bbb      	ldrb	r3, [r7, #14]
}
 8010484:	4618      	mov	r0, r3
 8010486:	3710      	adds	r7, #16
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}

0801048c <USBD_LL_IsStallEP>:
 * @brief  Returns Stall condition.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval Stall (1: Yes, 0: No)
 */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 801048c:	b480      	push	{r7}
 801048e:	b085      	sub	sp, #20
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
 8010494:	460b      	mov	r3, r1
 8010496:	70fb      	strb	r3, [r7, #3]
    PCD_HandleTypeDef * hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801049e:	60fb      	str	r3, [r7, #12]

    if ((ep_addr & 0x80) == 0x80) {
 80104a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	da0b      	bge.n	80104c0 <USBD_LL_IsStallEP+0x34>
        return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80104a8:	78fb      	ldrb	r3, [r7, #3]
 80104aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80104ae:	68f9      	ldr	r1, [r7, #12]
 80104b0:	4613      	mov	r3, r2
 80104b2:	00db      	lsls	r3, r3, #3
 80104b4:	4413      	add	r3, r2
 80104b6:	009b      	lsls	r3, r3, #2
 80104b8:	440b      	add	r3, r1
 80104ba:	333e      	adds	r3, #62	@ 0x3e
 80104bc:	781b      	ldrb	r3, [r3, #0]
 80104be:	e00b      	b.n	80104d8 <USBD_LL_IsStallEP+0x4c>
    } else {
        return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80104c0:	78fb      	ldrb	r3, [r7, #3]
 80104c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80104c6:	68f9      	ldr	r1, [r7, #12]
 80104c8:	4613      	mov	r3, r2
 80104ca:	00db      	lsls	r3, r3, #3
 80104cc:	4413      	add	r3, r2
 80104ce:	009b      	lsls	r3, r3, #2
 80104d0:	440b      	add	r3, r1
 80104d2:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 80104d6:	781b      	ldrb	r3, [r3, #0]
    }
}
 80104d8:	4618      	mov	r0, r3
 80104da:	3714      	adds	r7, #20
 80104dc:	46bd      	mov	sp, r7
 80104de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e2:	4770      	bx	lr

080104e4 <USBD_LL_SetUSBAddress>:
 * @brief  Assigns a USB address to the device.
 * @param  pdev: Device handle
 * @param  dev_addr: Device address
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef * pdev, uint8_t dev_addr) {
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b084      	sub	sp, #16
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
 80104ec:	460b      	mov	r3, r1
 80104ee:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80104f0:	2300      	movs	r3, #0
 80104f2:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 80104f4:	2300      	movs	r3, #0
 80104f6:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80104fe:	78fa      	ldrb	r2, [r7, #3]
 8010500:	4611      	mov	r1, r2
 8010502:	4618      	mov	r0, r3
 8010504:	f7f7 f8b2 	bl	800766c <HAL_PCD_SetAddress>
 8010508:	4603      	mov	r3, r0
 801050a:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 801050c:	7bfb      	ldrb	r3, [r7, #15]
 801050e:	4618      	mov	r0, r3
 8010510:	f000 f874 	bl	80105fc <USBD_Get_USB_Status>
 8010514:	4603      	mov	r3, r0
 8010516:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 8010518:	7bbb      	ldrb	r3, [r7, #14]
}
 801051a:	4618      	mov	r0, r3
 801051c:	3710      	adds	r7, #16
 801051e:	46bd      	mov	sp, r7
 8010520:	bd80      	pop	{r7, pc}

08010522 <USBD_LL_Transmit>:
 * @param  ep_addr: Endpoint number
 * @param  pbuf: Pointer to data to be sent
 * @param  size: Data size
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef * pdev, uint8_t ep_addr, uint8_t * pbuf, uint32_t size) {
 8010522:	b580      	push	{r7, lr}
 8010524:	b086      	sub	sp, #24
 8010526:	af00      	add	r7, sp, #0
 8010528:	60f8      	str	r0, [r7, #12]
 801052a:	607a      	str	r2, [r7, #4]
 801052c:	603b      	str	r3, [r7, #0]
 801052e:	460b      	mov	r3, r1
 8010530:	72fb      	strb	r3, [r7, #11]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8010532:	2300      	movs	r3, #0
 8010534:	75fb      	strb	r3, [r7, #23]
    USBD_StatusTypeDef usb_status = USBD_OK;
 8010536:	2300      	movs	r3, #0
 8010538:	75bb      	strb	r3, [r7, #22]

    hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010540:	7af9      	ldrb	r1, [r7, #11]
 8010542:	683b      	ldr	r3, [r7, #0]
 8010544:	687a      	ldr	r2, [r7, #4]
 8010546:	f7f7 f9cb 	bl	80078e0 <HAL_PCD_EP_Transmit>
 801054a:	4603      	mov	r3, r0
 801054c:	75fb      	strb	r3, [r7, #23]

    usb_status = USBD_Get_USB_Status(hal_status);
 801054e:	7dfb      	ldrb	r3, [r7, #23]
 8010550:	4618      	mov	r0, r3
 8010552:	f000 f853 	bl	80105fc <USBD_Get_USB_Status>
 8010556:	4603      	mov	r3, r0
 8010558:	75bb      	strb	r3, [r7, #22]

    return usb_status;
 801055a:	7dbb      	ldrb	r3, [r7, #22]
}
 801055c:	4618      	mov	r0, r3
 801055e:	3718      	adds	r7, #24
 8010560:	46bd      	mov	sp, r7
 8010562:	bd80      	pop	{r7, pc}

08010564 <USBD_LL_PrepareReceive>:
 * @param  ep_addr: Endpoint number
 * @param  pbuf: Pointer to data to be received
 * @param  size: Data size
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef * pdev, uint8_t ep_addr, uint8_t * pbuf, uint32_t size) {
 8010564:	b580      	push	{r7, lr}
 8010566:	b086      	sub	sp, #24
 8010568:	af00      	add	r7, sp, #0
 801056a:	60f8      	str	r0, [r7, #12]
 801056c:	607a      	str	r2, [r7, #4]
 801056e:	603b      	str	r3, [r7, #0]
 8010570:	460b      	mov	r3, r1
 8010572:	72fb      	strb	r3, [r7, #11]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8010574:	2300      	movs	r3, #0
 8010576:	75fb      	strb	r3, [r7, #23]
    USBD_StatusTypeDef usb_status = USBD_OK;
 8010578:	2300      	movs	r3, #0
 801057a:	75bb      	strb	r3, [r7, #22]

    hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010582:	7af9      	ldrb	r1, [r7, #11]
 8010584:	683b      	ldr	r3, [r7, #0]
 8010586:	687a      	ldr	r2, [r7, #4]
 8010588:	f7f7 f947 	bl	800781a <HAL_PCD_EP_Receive>
 801058c:	4603      	mov	r3, r0
 801058e:	75fb      	strb	r3, [r7, #23]

    usb_status = USBD_Get_USB_Status(hal_status);
 8010590:	7dfb      	ldrb	r3, [r7, #23]
 8010592:	4618      	mov	r0, r3
 8010594:	f000 f832 	bl	80105fc <USBD_Get_USB_Status>
 8010598:	4603      	mov	r3, r0
 801059a:	75bb      	strb	r3, [r7, #22]

    return usb_status;
 801059c:	7dbb      	ldrb	r3, [r7, #22]
}
 801059e:	4618      	mov	r0, r3
 80105a0:	3718      	adds	r7, #24
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bd80      	pop	{r7, pc}

080105a6 <USBD_LL_GetRxDataSize>:
 * @brief  Returns the last transferred packet size.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval Received Data Size
 */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 80105a6:	b580      	push	{r7, lr}
 80105a8:	b082      	sub	sp, #8
 80105aa:	af00      	add	r7, sp, #0
 80105ac:	6078      	str	r0, [r7, #4]
 80105ae:	460b      	mov	r3, r1
 80105b0:	70fb      	strb	r3, [r7, #3]
    return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80105b8:	78fa      	ldrb	r2, [r7, #3]
 80105ba:	4611      	mov	r1, r2
 80105bc:	4618      	mov	r0, r3
 80105be:	f7f7 f977 	bl	80078b0 <HAL_PCD_EP_GetRxCount>
 80105c2:	4603      	mov	r3, r0
}
 80105c4:	4618      	mov	r0, r3
 80105c6:	3708      	adds	r7, #8
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bd80      	pop	{r7, pc}

080105cc <USBD_static_malloc>:
/**
 * @brief  Static single allocation.
 * @param  size: Size of allocated memory
 * @retval None
 */
void * USBD_static_malloc(uint32_t size) {
 80105cc:	b480      	push	{r7}
 80105ce:	b083      	sub	sp, #12
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
    static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
    return mem;
 80105d4:	4b03      	ldr	r3, [pc, #12]	@ (80105e4 <USBD_static_malloc+0x18>)
}
 80105d6:	4618      	mov	r0, r3
 80105d8:	370c      	adds	r7, #12
 80105da:	46bd      	mov	sp, r7
 80105dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e0:	4770      	bx	lr
 80105e2:	bf00      	nop
 80105e4:	20001bcc 	.word	0x20001bcc

080105e8 <USBD_static_free>:
/**
 * @brief  Dummy memory free
 * @param  p: Pointer to allocated  memory address
 * @retval None
 */
void USBD_static_free(void * p) {
 80105e8:	b480      	push	{r7}
 80105ea:	b083      	sub	sp, #12
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
}
 80105f0:	bf00      	nop
 80105f2:	370c      	adds	r7, #12
 80105f4:	46bd      	mov	sp, r7
 80105f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fa:	4770      	bx	lr

080105fc <USBD_Get_USB_Status>:
/**
 * @brief  Returns the USB status depending on the HAL status:
 * @param  hal_status: HAL status
 * @retval USB status
 */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status) {
 80105fc:	b480      	push	{r7}
 80105fe:	b085      	sub	sp, #20
 8010600:	af00      	add	r7, sp, #0
 8010602:	4603      	mov	r3, r0
 8010604:	71fb      	strb	r3, [r7, #7]
    USBD_StatusTypeDef usb_status = USBD_OK;
 8010606:	2300      	movs	r3, #0
 8010608:	73fb      	strb	r3, [r7, #15]

    switch (hal_status) {
 801060a:	79fb      	ldrb	r3, [r7, #7]
 801060c:	2b03      	cmp	r3, #3
 801060e:	d817      	bhi.n	8010640 <USBD_Get_USB_Status+0x44>
 8010610:	a201      	add	r2, pc, #4	@ (adr r2, 8010618 <USBD_Get_USB_Status+0x1c>)
 8010612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010616:	bf00      	nop
 8010618:	08010629 	.word	0x08010629
 801061c:	0801062f 	.word	0x0801062f
 8010620:	08010635 	.word	0x08010635
 8010624:	0801063b 	.word	0x0801063b
    case HAL_OK:
        usb_status = USBD_OK;
 8010628:	2300      	movs	r3, #0
 801062a:	73fb      	strb	r3, [r7, #15]
        break;
 801062c:	e00b      	b.n	8010646 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR:
        usb_status = USBD_FAIL;
 801062e:	2303      	movs	r3, #3
 8010630:	73fb      	strb	r3, [r7, #15]
        break;
 8010632:	e008      	b.n	8010646 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY:
        usb_status = USBD_BUSY;
 8010634:	2301      	movs	r3, #1
 8010636:	73fb      	strb	r3, [r7, #15]
        break;
 8010638:	e005      	b.n	8010646 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT:
        usb_status = USBD_FAIL;
 801063a:	2303      	movs	r3, #3
 801063c:	73fb      	strb	r3, [r7, #15]
        break;
 801063e:	e002      	b.n	8010646 <USBD_Get_USB_Status+0x4a>
    default:
        usb_status = USBD_FAIL;
 8010640:	2303      	movs	r3, #3
 8010642:	73fb      	strb	r3, [r7, #15]
        break;
 8010644:	bf00      	nop
    }
    return usb_status;
 8010646:	7bfb      	ldrb	r3, [r7, #15]
}
 8010648:	4618      	mov	r0, r3
 801064a:	3714      	adds	r7, #20
 801064c:	46bd      	mov	sp, r7
 801064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010652:	4770      	bx	lr

08010654 <malloc>:
 8010654:	4b02      	ldr	r3, [pc, #8]	@ (8010660 <malloc+0xc>)
 8010656:	4601      	mov	r1, r0
 8010658:	6818      	ldr	r0, [r3, #0]
 801065a:	f000 b82d 	b.w	80106b8 <_malloc_r>
 801065e:	bf00      	nop
 8010660:	20000168 	.word	0x20000168

08010664 <free>:
 8010664:	4b02      	ldr	r3, [pc, #8]	@ (8010670 <free+0xc>)
 8010666:	4601      	mov	r1, r0
 8010668:	6818      	ldr	r0, [r3, #0]
 801066a:	f001 bd29 	b.w	80120c0 <_free_r>
 801066e:	bf00      	nop
 8010670:	20000168 	.word	0x20000168

08010674 <sbrk_aligned>:
 8010674:	b570      	push	{r4, r5, r6, lr}
 8010676:	4e0f      	ldr	r6, [pc, #60]	@ (80106b4 <sbrk_aligned+0x40>)
 8010678:	460c      	mov	r4, r1
 801067a:	6831      	ldr	r1, [r6, #0]
 801067c:	4605      	mov	r5, r0
 801067e:	b911      	cbnz	r1, 8010686 <sbrk_aligned+0x12>
 8010680:	f000 fe72 	bl	8011368 <_sbrk_r>
 8010684:	6030      	str	r0, [r6, #0]
 8010686:	4621      	mov	r1, r4
 8010688:	4628      	mov	r0, r5
 801068a:	f000 fe6d 	bl	8011368 <_sbrk_r>
 801068e:	1c43      	adds	r3, r0, #1
 8010690:	d103      	bne.n	801069a <sbrk_aligned+0x26>
 8010692:	f04f 34ff 	mov.w	r4, #4294967295
 8010696:	4620      	mov	r0, r4
 8010698:	bd70      	pop	{r4, r5, r6, pc}
 801069a:	1cc4      	adds	r4, r0, #3
 801069c:	f024 0403 	bic.w	r4, r4, #3
 80106a0:	42a0      	cmp	r0, r4
 80106a2:	d0f8      	beq.n	8010696 <sbrk_aligned+0x22>
 80106a4:	1a21      	subs	r1, r4, r0
 80106a6:	4628      	mov	r0, r5
 80106a8:	f000 fe5e 	bl	8011368 <_sbrk_r>
 80106ac:	3001      	adds	r0, #1
 80106ae:	d1f2      	bne.n	8010696 <sbrk_aligned+0x22>
 80106b0:	e7ef      	b.n	8010692 <sbrk_aligned+0x1e>
 80106b2:	bf00      	nop
 80106b4:	20001dec 	.word	0x20001dec

080106b8 <_malloc_r>:
 80106b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106bc:	1ccd      	adds	r5, r1, #3
 80106be:	f025 0503 	bic.w	r5, r5, #3
 80106c2:	3508      	adds	r5, #8
 80106c4:	2d0c      	cmp	r5, #12
 80106c6:	bf38      	it	cc
 80106c8:	250c      	movcc	r5, #12
 80106ca:	2d00      	cmp	r5, #0
 80106cc:	4606      	mov	r6, r0
 80106ce:	db01      	blt.n	80106d4 <_malloc_r+0x1c>
 80106d0:	42a9      	cmp	r1, r5
 80106d2:	d904      	bls.n	80106de <_malloc_r+0x26>
 80106d4:	230c      	movs	r3, #12
 80106d6:	6033      	str	r3, [r6, #0]
 80106d8:	2000      	movs	r0, #0
 80106da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80107b4 <_malloc_r+0xfc>
 80106e2:	f000 f869 	bl	80107b8 <__malloc_lock>
 80106e6:	f8d8 3000 	ldr.w	r3, [r8]
 80106ea:	461c      	mov	r4, r3
 80106ec:	bb44      	cbnz	r4, 8010740 <_malloc_r+0x88>
 80106ee:	4629      	mov	r1, r5
 80106f0:	4630      	mov	r0, r6
 80106f2:	f7ff ffbf 	bl	8010674 <sbrk_aligned>
 80106f6:	1c43      	adds	r3, r0, #1
 80106f8:	4604      	mov	r4, r0
 80106fa:	d158      	bne.n	80107ae <_malloc_r+0xf6>
 80106fc:	f8d8 4000 	ldr.w	r4, [r8]
 8010700:	4627      	mov	r7, r4
 8010702:	2f00      	cmp	r7, #0
 8010704:	d143      	bne.n	801078e <_malloc_r+0xd6>
 8010706:	2c00      	cmp	r4, #0
 8010708:	d04b      	beq.n	80107a2 <_malloc_r+0xea>
 801070a:	6823      	ldr	r3, [r4, #0]
 801070c:	4639      	mov	r1, r7
 801070e:	4630      	mov	r0, r6
 8010710:	eb04 0903 	add.w	r9, r4, r3
 8010714:	f000 fe28 	bl	8011368 <_sbrk_r>
 8010718:	4581      	cmp	r9, r0
 801071a:	d142      	bne.n	80107a2 <_malloc_r+0xea>
 801071c:	6821      	ldr	r1, [r4, #0]
 801071e:	1a6d      	subs	r5, r5, r1
 8010720:	4629      	mov	r1, r5
 8010722:	4630      	mov	r0, r6
 8010724:	f7ff ffa6 	bl	8010674 <sbrk_aligned>
 8010728:	3001      	adds	r0, #1
 801072a:	d03a      	beq.n	80107a2 <_malloc_r+0xea>
 801072c:	6823      	ldr	r3, [r4, #0]
 801072e:	442b      	add	r3, r5
 8010730:	6023      	str	r3, [r4, #0]
 8010732:	f8d8 3000 	ldr.w	r3, [r8]
 8010736:	685a      	ldr	r2, [r3, #4]
 8010738:	bb62      	cbnz	r2, 8010794 <_malloc_r+0xdc>
 801073a:	f8c8 7000 	str.w	r7, [r8]
 801073e:	e00f      	b.n	8010760 <_malloc_r+0xa8>
 8010740:	6822      	ldr	r2, [r4, #0]
 8010742:	1b52      	subs	r2, r2, r5
 8010744:	d420      	bmi.n	8010788 <_malloc_r+0xd0>
 8010746:	2a0b      	cmp	r2, #11
 8010748:	d917      	bls.n	801077a <_malloc_r+0xc2>
 801074a:	1961      	adds	r1, r4, r5
 801074c:	42a3      	cmp	r3, r4
 801074e:	6025      	str	r5, [r4, #0]
 8010750:	bf18      	it	ne
 8010752:	6059      	strne	r1, [r3, #4]
 8010754:	6863      	ldr	r3, [r4, #4]
 8010756:	bf08      	it	eq
 8010758:	f8c8 1000 	streq.w	r1, [r8]
 801075c:	5162      	str	r2, [r4, r5]
 801075e:	604b      	str	r3, [r1, #4]
 8010760:	4630      	mov	r0, r6
 8010762:	f000 f82f 	bl	80107c4 <__malloc_unlock>
 8010766:	f104 000b 	add.w	r0, r4, #11
 801076a:	1d23      	adds	r3, r4, #4
 801076c:	f020 0007 	bic.w	r0, r0, #7
 8010770:	1ac2      	subs	r2, r0, r3
 8010772:	bf1c      	itt	ne
 8010774:	1a1b      	subne	r3, r3, r0
 8010776:	50a3      	strne	r3, [r4, r2]
 8010778:	e7af      	b.n	80106da <_malloc_r+0x22>
 801077a:	6862      	ldr	r2, [r4, #4]
 801077c:	42a3      	cmp	r3, r4
 801077e:	bf0c      	ite	eq
 8010780:	f8c8 2000 	streq.w	r2, [r8]
 8010784:	605a      	strne	r2, [r3, #4]
 8010786:	e7eb      	b.n	8010760 <_malloc_r+0xa8>
 8010788:	4623      	mov	r3, r4
 801078a:	6864      	ldr	r4, [r4, #4]
 801078c:	e7ae      	b.n	80106ec <_malloc_r+0x34>
 801078e:	463c      	mov	r4, r7
 8010790:	687f      	ldr	r7, [r7, #4]
 8010792:	e7b6      	b.n	8010702 <_malloc_r+0x4a>
 8010794:	461a      	mov	r2, r3
 8010796:	685b      	ldr	r3, [r3, #4]
 8010798:	42a3      	cmp	r3, r4
 801079a:	d1fb      	bne.n	8010794 <_malloc_r+0xdc>
 801079c:	2300      	movs	r3, #0
 801079e:	6053      	str	r3, [r2, #4]
 80107a0:	e7de      	b.n	8010760 <_malloc_r+0xa8>
 80107a2:	230c      	movs	r3, #12
 80107a4:	6033      	str	r3, [r6, #0]
 80107a6:	4630      	mov	r0, r6
 80107a8:	f000 f80c 	bl	80107c4 <__malloc_unlock>
 80107ac:	e794      	b.n	80106d8 <_malloc_r+0x20>
 80107ae:	6005      	str	r5, [r0, #0]
 80107b0:	e7d6      	b.n	8010760 <_malloc_r+0xa8>
 80107b2:	bf00      	nop
 80107b4:	20001df0 	.word	0x20001df0

080107b8 <__malloc_lock>:
 80107b8:	4801      	ldr	r0, [pc, #4]	@ (80107c0 <__malloc_lock+0x8>)
 80107ba:	f000 be22 	b.w	8011402 <__retarget_lock_acquire_recursive>
 80107be:	bf00      	nop
 80107c0:	20001f34 	.word	0x20001f34

080107c4 <__malloc_unlock>:
 80107c4:	4801      	ldr	r0, [pc, #4]	@ (80107cc <__malloc_unlock+0x8>)
 80107c6:	f000 be1d 	b.w	8011404 <__retarget_lock_release_recursive>
 80107ca:	bf00      	nop
 80107cc:	20001f34 	.word	0x20001f34

080107d0 <__cvt>:
 80107d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80107d4:	ec57 6b10 	vmov	r6, r7, d0
 80107d8:	2f00      	cmp	r7, #0
 80107da:	460c      	mov	r4, r1
 80107dc:	4619      	mov	r1, r3
 80107de:	463b      	mov	r3, r7
 80107e0:	bfbb      	ittet	lt
 80107e2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80107e6:	461f      	movlt	r7, r3
 80107e8:	2300      	movge	r3, #0
 80107ea:	232d      	movlt	r3, #45	@ 0x2d
 80107ec:	700b      	strb	r3, [r1, #0]
 80107ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80107f0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80107f4:	4691      	mov	r9, r2
 80107f6:	f023 0820 	bic.w	r8, r3, #32
 80107fa:	bfbc      	itt	lt
 80107fc:	4632      	movlt	r2, r6
 80107fe:	4616      	movlt	r6, r2
 8010800:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010804:	d005      	beq.n	8010812 <__cvt+0x42>
 8010806:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801080a:	d100      	bne.n	801080e <__cvt+0x3e>
 801080c:	3401      	adds	r4, #1
 801080e:	2102      	movs	r1, #2
 8010810:	e000      	b.n	8010814 <__cvt+0x44>
 8010812:	2103      	movs	r1, #3
 8010814:	ab03      	add	r3, sp, #12
 8010816:	9301      	str	r3, [sp, #4]
 8010818:	ab02      	add	r3, sp, #8
 801081a:	9300      	str	r3, [sp, #0]
 801081c:	ec47 6b10 	vmov	d0, r6, r7
 8010820:	4653      	mov	r3, sl
 8010822:	4622      	mov	r2, r4
 8010824:	f000 fe88 	bl	8011538 <_dtoa_r>
 8010828:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801082c:	4605      	mov	r5, r0
 801082e:	d119      	bne.n	8010864 <__cvt+0x94>
 8010830:	f019 0f01 	tst.w	r9, #1
 8010834:	d00e      	beq.n	8010854 <__cvt+0x84>
 8010836:	eb00 0904 	add.w	r9, r0, r4
 801083a:	2200      	movs	r2, #0
 801083c:	2300      	movs	r3, #0
 801083e:	4630      	mov	r0, r6
 8010840:	4639      	mov	r1, r7
 8010842:	f7f0 f949 	bl	8000ad8 <__aeabi_dcmpeq>
 8010846:	b108      	cbz	r0, 801084c <__cvt+0x7c>
 8010848:	f8cd 900c 	str.w	r9, [sp, #12]
 801084c:	2230      	movs	r2, #48	@ 0x30
 801084e:	9b03      	ldr	r3, [sp, #12]
 8010850:	454b      	cmp	r3, r9
 8010852:	d31e      	bcc.n	8010892 <__cvt+0xc2>
 8010854:	9b03      	ldr	r3, [sp, #12]
 8010856:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010858:	1b5b      	subs	r3, r3, r5
 801085a:	4628      	mov	r0, r5
 801085c:	6013      	str	r3, [r2, #0]
 801085e:	b004      	add	sp, #16
 8010860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010864:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010868:	eb00 0904 	add.w	r9, r0, r4
 801086c:	d1e5      	bne.n	801083a <__cvt+0x6a>
 801086e:	7803      	ldrb	r3, [r0, #0]
 8010870:	2b30      	cmp	r3, #48	@ 0x30
 8010872:	d10a      	bne.n	801088a <__cvt+0xba>
 8010874:	2200      	movs	r2, #0
 8010876:	2300      	movs	r3, #0
 8010878:	4630      	mov	r0, r6
 801087a:	4639      	mov	r1, r7
 801087c:	f7f0 f92c 	bl	8000ad8 <__aeabi_dcmpeq>
 8010880:	b918      	cbnz	r0, 801088a <__cvt+0xba>
 8010882:	f1c4 0401 	rsb	r4, r4, #1
 8010886:	f8ca 4000 	str.w	r4, [sl]
 801088a:	f8da 3000 	ldr.w	r3, [sl]
 801088e:	4499      	add	r9, r3
 8010890:	e7d3      	b.n	801083a <__cvt+0x6a>
 8010892:	1c59      	adds	r1, r3, #1
 8010894:	9103      	str	r1, [sp, #12]
 8010896:	701a      	strb	r2, [r3, #0]
 8010898:	e7d9      	b.n	801084e <__cvt+0x7e>

0801089a <__exponent>:
 801089a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801089c:	2900      	cmp	r1, #0
 801089e:	bfba      	itte	lt
 80108a0:	4249      	neglt	r1, r1
 80108a2:	232d      	movlt	r3, #45	@ 0x2d
 80108a4:	232b      	movge	r3, #43	@ 0x2b
 80108a6:	2909      	cmp	r1, #9
 80108a8:	7002      	strb	r2, [r0, #0]
 80108aa:	7043      	strb	r3, [r0, #1]
 80108ac:	dd29      	ble.n	8010902 <__exponent+0x68>
 80108ae:	f10d 0307 	add.w	r3, sp, #7
 80108b2:	461d      	mov	r5, r3
 80108b4:	270a      	movs	r7, #10
 80108b6:	461a      	mov	r2, r3
 80108b8:	fbb1 f6f7 	udiv	r6, r1, r7
 80108bc:	fb07 1416 	mls	r4, r7, r6, r1
 80108c0:	3430      	adds	r4, #48	@ 0x30
 80108c2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80108c6:	460c      	mov	r4, r1
 80108c8:	2c63      	cmp	r4, #99	@ 0x63
 80108ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80108ce:	4631      	mov	r1, r6
 80108d0:	dcf1      	bgt.n	80108b6 <__exponent+0x1c>
 80108d2:	3130      	adds	r1, #48	@ 0x30
 80108d4:	1e94      	subs	r4, r2, #2
 80108d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80108da:	1c41      	adds	r1, r0, #1
 80108dc:	4623      	mov	r3, r4
 80108de:	42ab      	cmp	r3, r5
 80108e0:	d30a      	bcc.n	80108f8 <__exponent+0x5e>
 80108e2:	f10d 0309 	add.w	r3, sp, #9
 80108e6:	1a9b      	subs	r3, r3, r2
 80108e8:	42ac      	cmp	r4, r5
 80108ea:	bf88      	it	hi
 80108ec:	2300      	movhi	r3, #0
 80108ee:	3302      	adds	r3, #2
 80108f0:	4403      	add	r3, r0
 80108f2:	1a18      	subs	r0, r3, r0
 80108f4:	b003      	add	sp, #12
 80108f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108f8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80108fc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010900:	e7ed      	b.n	80108de <__exponent+0x44>
 8010902:	2330      	movs	r3, #48	@ 0x30
 8010904:	3130      	adds	r1, #48	@ 0x30
 8010906:	7083      	strb	r3, [r0, #2]
 8010908:	70c1      	strb	r1, [r0, #3]
 801090a:	1d03      	adds	r3, r0, #4
 801090c:	e7f1      	b.n	80108f2 <__exponent+0x58>
	...

08010910 <_printf_float>:
 8010910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010914:	b08d      	sub	sp, #52	@ 0x34
 8010916:	460c      	mov	r4, r1
 8010918:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801091c:	4616      	mov	r6, r2
 801091e:	461f      	mov	r7, r3
 8010920:	4605      	mov	r5, r0
 8010922:	f000 fce9 	bl	80112f8 <_localeconv_r>
 8010926:	6803      	ldr	r3, [r0, #0]
 8010928:	9304      	str	r3, [sp, #16]
 801092a:	4618      	mov	r0, r3
 801092c:	f7ef fca8 	bl	8000280 <strlen>
 8010930:	2300      	movs	r3, #0
 8010932:	930a      	str	r3, [sp, #40]	@ 0x28
 8010934:	f8d8 3000 	ldr.w	r3, [r8]
 8010938:	9005      	str	r0, [sp, #20]
 801093a:	3307      	adds	r3, #7
 801093c:	f023 0307 	bic.w	r3, r3, #7
 8010940:	f103 0208 	add.w	r2, r3, #8
 8010944:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010948:	f8d4 b000 	ldr.w	fp, [r4]
 801094c:	f8c8 2000 	str.w	r2, [r8]
 8010950:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010954:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010958:	9307      	str	r3, [sp, #28]
 801095a:	f8cd 8018 	str.w	r8, [sp, #24]
 801095e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8010962:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010966:	4b9c      	ldr	r3, [pc, #624]	@ (8010bd8 <_printf_float+0x2c8>)
 8010968:	f04f 32ff 	mov.w	r2, #4294967295
 801096c:	f7f0 f8e6 	bl	8000b3c <__aeabi_dcmpun>
 8010970:	bb70      	cbnz	r0, 80109d0 <_printf_float+0xc0>
 8010972:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010976:	4b98      	ldr	r3, [pc, #608]	@ (8010bd8 <_printf_float+0x2c8>)
 8010978:	f04f 32ff 	mov.w	r2, #4294967295
 801097c:	f7f0 f8c0 	bl	8000b00 <__aeabi_dcmple>
 8010980:	bb30      	cbnz	r0, 80109d0 <_printf_float+0xc0>
 8010982:	2200      	movs	r2, #0
 8010984:	2300      	movs	r3, #0
 8010986:	4640      	mov	r0, r8
 8010988:	4649      	mov	r1, r9
 801098a:	f7f0 f8af 	bl	8000aec <__aeabi_dcmplt>
 801098e:	b110      	cbz	r0, 8010996 <_printf_float+0x86>
 8010990:	232d      	movs	r3, #45	@ 0x2d
 8010992:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010996:	4a91      	ldr	r2, [pc, #580]	@ (8010bdc <_printf_float+0x2cc>)
 8010998:	4b91      	ldr	r3, [pc, #580]	@ (8010be0 <_printf_float+0x2d0>)
 801099a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801099e:	bf94      	ite	ls
 80109a0:	4690      	movls	r8, r2
 80109a2:	4698      	movhi	r8, r3
 80109a4:	2303      	movs	r3, #3
 80109a6:	6123      	str	r3, [r4, #16]
 80109a8:	f02b 0304 	bic.w	r3, fp, #4
 80109ac:	6023      	str	r3, [r4, #0]
 80109ae:	f04f 0900 	mov.w	r9, #0
 80109b2:	9700      	str	r7, [sp, #0]
 80109b4:	4633      	mov	r3, r6
 80109b6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80109b8:	4621      	mov	r1, r4
 80109ba:	4628      	mov	r0, r5
 80109bc:	f000 f9d2 	bl	8010d64 <_printf_common>
 80109c0:	3001      	adds	r0, #1
 80109c2:	f040 808d 	bne.w	8010ae0 <_printf_float+0x1d0>
 80109c6:	f04f 30ff 	mov.w	r0, #4294967295
 80109ca:	b00d      	add	sp, #52	@ 0x34
 80109cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109d0:	4642      	mov	r2, r8
 80109d2:	464b      	mov	r3, r9
 80109d4:	4640      	mov	r0, r8
 80109d6:	4649      	mov	r1, r9
 80109d8:	f7f0 f8b0 	bl	8000b3c <__aeabi_dcmpun>
 80109dc:	b140      	cbz	r0, 80109f0 <_printf_float+0xe0>
 80109de:	464b      	mov	r3, r9
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	bfbc      	itt	lt
 80109e4:	232d      	movlt	r3, #45	@ 0x2d
 80109e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80109ea:	4a7e      	ldr	r2, [pc, #504]	@ (8010be4 <_printf_float+0x2d4>)
 80109ec:	4b7e      	ldr	r3, [pc, #504]	@ (8010be8 <_printf_float+0x2d8>)
 80109ee:	e7d4      	b.n	801099a <_printf_float+0x8a>
 80109f0:	6863      	ldr	r3, [r4, #4]
 80109f2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80109f6:	9206      	str	r2, [sp, #24]
 80109f8:	1c5a      	adds	r2, r3, #1
 80109fa:	d13b      	bne.n	8010a74 <_printf_float+0x164>
 80109fc:	2306      	movs	r3, #6
 80109fe:	6063      	str	r3, [r4, #4]
 8010a00:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8010a04:	2300      	movs	r3, #0
 8010a06:	6022      	str	r2, [r4, #0]
 8010a08:	9303      	str	r3, [sp, #12]
 8010a0a:	ab0a      	add	r3, sp, #40	@ 0x28
 8010a0c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010a10:	ab09      	add	r3, sp, #36	@ 0x24
 8010a12:	9300      	str	r3, [sp, #0]
 8010a14:	6861      	ldr	r1, [r4, #4]
 8010a16:	ec49 8b10 	vmov	d0, r8, r9
 8010a1a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010a1e:	4628      	mov	r0, r5
 8010a20:	f7ff fed6 	bl	80107d0 <__cvt>
 8010a24:	9b06      	ldr	r3, [sp, #24]
 8010a26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010a28:	2b47      	cmp	r3, #71	@ 0x47
 8010a2a:	4680      	mov	r8, r0
 8010a2c:	d129      	bne.n	8010a82 <_printf_float+0x172>
 8010a2e:	1cc8      	adds	r0, r1, #3
 8010a30:	db02      	blt.n	8010a38 <_printf_float+0x128>
 8010a32:	6863      	ldr	r3, [r4, #4]
 8010a34:	4299      	cmp	r1, r3
 8010a36:	dd41      	ble.n	8010abc <_printf_float+0x1ac>
 8010a38:	f1aa 0a02 	sub.w	sl, sl, #2
 8010a3c:	fa5f fa8a 	uxtb.w	sl, sl
 8010a40:	3901      	subs	r1, #1
 8010a42:	4652      	mov	r2, sl
 8010a44:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010a48:	9109      	str	r1, [sp, #36]	@ 0x24
 8010a4a:	f7ff ff26 	bl	801089a <__exponent>
 8010a4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010a50:	1813      	adds	r3, r2, r0
 8010a52:	2a01      	cmp	r2, #1
 8010a54:	4681      	mov	r9, r0
 8010a56:	6123      	str	r3, [r4, #16]
 8010a58:	dc02      	bgt.n	8010a60 <_printf_float+0x150>
 8010a5a:	6822      	ldr	r2, [r4, #0]
 8010a5c:	07d2      	lsls	r2, r2, #31
 8010a5e:	d501      	bpl.n	8010a64 <_printf_float+0x154>
 8010a60:	3301      	adds	r3, #1
 8010a62:	6123      	str	r3, [r4, #16]
 8010a64:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d0a2      	beq.n	80109b2 <_printf_float+0xa2>
 8010a6c:	232d      	movs	r3, #45	@ 0x2d
 8010a6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010a72:	e79e      	b.n	80109b2 <_printf_float+0xa2>
 8010a74:	9a06      	ldr	r2, [sp, #24]
 8010a76:	2a47      	cmp	r2, #71	@ 0x47
 8010a78:	d1c2      	bne.n	8010a00 <_printf_float+0xf0>
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d1c0      	bne.n	8010a00 <_printf_float+0xf0>
 8010a7e:	2301      	movs	r3, #1
 8010a80:	e7bd      	b.n	80109fe <_printf_float+0xee>
 8010a82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010a86:	d9db      	bls.n	8010a40 <_printf_float+0x130>
 8010a88:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8010a8c:	d118      	bne.n	8010ac0 <_printf_float+0x1b0>
 8010a8e:	2900      	cmp	r1, #0
 8010a90:	6863      	ldr	r3, [r4, #4]
 8010a92:	dd0b      	ble.n	8010aac <_printf_float+0x19c>
 8010a94:	6121      	str	r1, [r4, #16]
 8010a96:	b913      	cbnz	r3, 8010a9e <_printf_float+0x18e>
 8010a98:	6822      	ldr	r2, [r4, #0]
 8010a9a:	07d0      	lsls	r0, r2, #31
 8010a9c:	d502      	bpl.n	8010aa4 <_printf_float+0x194>
 8010a9e:	3301      	adds	r3, #1
 8010aa0:	440b      	add	r3, r1
 8010aa2:	6123      	str	r3, [r4, #16]
 8010aa4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010aa6:	f04f 0900 	mov.w	r9, #0
 8010aaa:	e7db      	b.n	8010a64 <_printf_float+0x154>
 8010aac:	b913      	cbnz	r3, 8010ab4 <_printf_float+0x1a4>
 8010aae:	6822      	ldr	r2, [r4, #0]
 8010ab0:	07d2      	lsls	r2, r2, #31
 8010ab2:	d501      	bpl.n	8010ab8 <_printf_float+0x1a8>
 8010ab4:	3302      	adds	r3, #2
 8010ab6:	e7f4      	b.n	8010aa2 <_printf_float+0x192>
 8010ab8:	2301      	movs	r3, #1
 8010aba:	e7f2      	b.n	8010aa2 <_printf_float+0x192>
 8010abc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8010ac0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010ac2:	4299      	cmp	r1, r3
 8010ac4:	db05      	blt.n	8010ad2 <_printf_float+0x1c2>
 8010ac6:	6823      	ldr	r3, [r4, #0]
 8010ac8:	6121      	str	r1, [r4, #16]
 8010aca:	07d8      	lsls	r0, r3, #31
 8010acc:	d5ea      	bpl.n	8010aa4 <_printf_float+0x194>
 8010ace:	1c4b      	adds	r3, r1, #1
 8010ad0:	e7e7      	b.n	8010aa2 <_printf_float+0x192>
 8010ad2:	2900      	cmp	r1, #0
 8010ad4:	bfd4      	ite	le
 8010ad6:	f1c1 0202 	rsble	r2, r1, #2
 8010ada:	2201      	movgt	r2, #1
 8010adc:	4413      	add	r3, r2
 8010ade:	e7e0      	b.n	8010aa2 <_printf_float+0x192>
 8010ae0:	6823      	ldr	r3, [r4, #0]
 8010ae2:	055a      	lsls	r2, r3, #21
 8010ae4:	d407      	bmi.n	8010af6 <_printf_float+0x1e6>
 8010ae6:	6923      	ldr	r3, [r4, #16]
 8010ae8:	4642      	mov	r2, r8
 8010aea:	4631      	mov	r1, r6
 8010aec:	4628      	mov	r0, r5
 8010aee:	47b8      	blx	r7
 8010af0:	3001      	adds	r0, #1
 8010af2:	d12b      	bne.n	8010b4c <_printf_float+0x23c>
 8010af4:	e767      	b.n	80109c6 <_printf_float+0xb6>
 8010af6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010afa:	f240 80dd 	bls.w	8010cb8 <_printf_float+0x3a8>
 8010afe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010b02:	2200      	movs	r2, #0
 8010b04:	2300      	movs	r3, #0
 8010b06:	f7ef ffe7 	bl	8000ad8 <__aeabi_dcmpeq>
 8010b0a:	2800      	cmp	r0, #0
 8010b0c:	d033      	beq.n	8010b76 <_printf_float+0x266>
 8010b0e:	4a37      	ldr	r2, [pc, #220]	@ (8010bec <_printf_float+0x2dc>)
 8010b10:	2301      	movs	r3, #1
 8010b12:	4631      	mov	r1, r6
 8010b14:	4628      	mov	r0, r5
 8010b16:	47b8      	blx	r7
 8010b18:	3001      	adds	r0, #1
 8010b1a:	f43f af54 	beq.w	80109c6 <_printf_float+0xb6>
 8010b1e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010b22:	4543      	cmp	r3, r8
 8010b24:	db02      	blt.n	8010b2c <_printf_float+0x21c>
 8010b26:	6823      	ldr	r3, [r4, #0]
 8010b28:	07d8      	lsls	r0, r3, #31
 8010b2a:	d50f      	bpl.n	8010b4c <_printf_float+0x23c>
 8010b2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b30:	4631      	mov	r1, r6
 8010b32:	4628      	mov	r0, r5
 8010b34:	47b8      	blx	r7
 8010b36:	3001      	adds	r0, #1
 8010b38:	f43f af45 	beq.w	80109c6 <_printf_float+0xb6>
 8010b3c:	f04f 0900 	mov.w	r9, #0
 8010b40:	f108 38ff 	add.w	r8, r8, #4294967295
 8010b44:	f104 0a1a 	add.w	sl, r4, #26
 8010b48:	45c8      	cmp	r8, r9
 8010b4a:	dc09      	bgt.n	8010b60 <_printf_float+0x250>
 8010b4c:	6823      	ldr	r3, [r4, #0]
 8010b4e:	079b      	lsls	r3, r3, #30
 8010b50:	f100 8103 	bmi.w	8010d5a <_printf_float+0x44a>
 8010b54:	68e0      	ldr	r0, [r4, #12]
 8010b56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b58:	4298      	cmp	r0, r3
 8010b5a:	bfb8      	it	lt
 8010b5c:	4618      	movlt	r0, r3
 8010b5e:	e734      	b.n	80109ca <_printf_float+0xba>
 8010b60:	2301      	movs	r3, #1
 8010b62:	4652      	mov	r2, sl
 8010b64:	4631      	mov	r1, r6
 8010b66:	4628      	mov	r0, r5
 8010b68:	47b8      	blx	r7
 8010b6a:	3001      	adds	r0, #1
 8010b6c:	f43f af2b 	beq.w	80109c6 <_printf_float+0xb6>
 8010b70:	f109 0901 	add.w	r9, r9, #1
 8010b74:	e7e8      	b.n	8010b48 <_printf_float+0x238>
 8010b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	dc39      	bgt.n	8010bf0 <_printf_float+0x2e0>
 8010b7c:	4a1b      	ldr	r2, [pc, #108]	@ (8010bec <_printf_float+0x2dc>)
 8010b7e:	2301      	movs	r3, #1
 8010b80:	4631      	mov	r1, r6
 8010b82:	4628      	mov	r0, r5
 8010b84:	47b8      	blx	r7
 8010b86:	3001      	adds	r0, #1
 8010b88:	f43f af1d 	beq.w	80109c6 <_printf_float+0xb6>
 8010b8c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010b90:	ea59 0303 	orrs.w	r3, r9, r3
 8010b94:	d102      	bne.n	8010b9c <_printf_float+0x28c>
 8010b96:	6823      	ldr	r3, [r4, #0]
 8010b98:	07d9      	lsls	r1, r3, #31
 8010b9a:	d5d7      	bpl.n	8010b4c <_printf_float+0x23c>
 8010b9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010ba0:	4631      	mov	r1, r6
 8010ba2:	4628      	mov	r0, r5
 8010ba4:	47b8      	blx	r7
 8010ba6:	3001      	adds	r0, #1
 8010ba8:	f43f af0d 	beq.w	80109c6 <_printf_float+0xb6>
 8010bac:	f04f 0a00 	mov.w	sl, #0
 8010bb0:	f104 0b1a 	add.w	fp, r4, #26
 8010bb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bb6:	425b      	negs	r3, r3
 8010bb8:	4553      	cmp	r3, sl
 8010bba:	dc01      	bgt.n	8010bc0 <_printf_float+0x2b0>
 8010bbc:	464b      	mov	r3, r9
 8010bbe:	e793      	b.n	8010ae8 <_printf_float+0x1d8>
 8010bc0:	2301      	movs	r3, #1
 8010bc2:	465a      	mov	r2, fp
 8010bc4:	4631      	mov	r1, r6
 8010bc6:	4628      	mov	r0, r5
 8010bc8:	47b8      	blx	r7
 8010bca:	3001      	adds	r0, #1
 8010bcc:	f43f aefb 	beq.w	80109c6 <_printf_float+0xb6>
 8010bd0:	f10a 0a01 	add.w	sl, sl, #1
 8010bd4:	e7ee      	b.n	8010bb4 <_printf_float+0x2a4>
 8010bd6:	bf00      	nop
 8010bd8:	7fefffff 	.word	0x7fefffff
 8010bdc:	08013c98 	.word	0x08013c98
 8010be0:	08013c9c 	.word	0x08013c9c
 8010be4:	08013ca0 	.word	0x08013ca0
 8010be8:	08013ca4 	.word	0x08013ca4
 8010bec:	08013ca8 	.word	0x08013ca8
 8010bf0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010bf2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010bf6:	4553      	cmp	r3, sl
 8010bf8:	bfa8      	it	ge
 8010bfa:	4653      	movge	r3, sl
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	4699      	mov	r9, r3
 8010c00:	dc36      	bgt.n	8010c70 <_printf_float+0x360>
 8010c02:	f04f 0b00 	mov.w	fp, #0
 8010c06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010c0a:	f104 021a 	add.w	r2, r4, #26
 8010c0e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010c10:	9306      	str	r3, [sp, #24]
 8010c12:	eba3 0309 	sub.w	r3, r3, r9
 8010c16:	455b      	cmp	r3, fp
 8010c18:	dc31      	bgt.n	8010c7e <_printf_float+0x36e>
 8010c1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c1c:	459a      	cmp	sl, r3
 8010c1e:	dc3a      	bgt.n	8010c96 <_printf_float+0x386>
 8010c20:	6823      	ldr	r3, [r4, #0]
 8010c22:	07da      	lsls	r2, r3, #31
 8010c24:	d437      	bmi.n	8010c96 <_printf_float+0x386>
 8010c26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c28:	ebaa 0903 	sub.w	r9, sl, r3
 8010c2c:	9b06      	ldr	r3, [sp, #24]
 8010c2e:	ebaa 0303 	sub.w	r3, sl, r3
 8010c32:	4599      	cmp	r9, r3
 8010c34:	bfa8      	it	ge
 8010c36:	4699      	movge	r9, r3
 8010c38:	f1b9 0f00 	cmp.w	r9, #0
 8010c3c:	dc33      	bgt.n	8010ca6 <_printf_float+0x396>
 8010c3e:	f04f 0800 	mov.w	r8, #0
 8010c42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010c46:	f104 0b1a 	add.w	fp, r4, #26
 8010c4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c4c:	ebaa 0303 	sub.w	r3, sl, r3
 8010c50:	eba3 0309 	sub.w	r3, r3, r9
 8010c54:	4543      	cmp	r3, r8
 8010c56:	f77f af79 	ble.w	8010b4c <_printf_float+0x23c>
 8010c5a:	2301      	movs	r3, #1
 8010c5c:	465a      	mov	r2, fp
 8010c5e:	4631      	mov	r1, r6
 8010c60:	4628      	mov	r0, r5
 8010c62:	47b8      	blx	r7
 8010c64:	3001      	adds	r0, #1
 8010c66:	f43f aeae 	beq.w	80109c6 <_printf_float+0xb6>
 8010c6a:	f108 0801 	add.w	r8, r8, #1
 8010c6e:	e7ec      	b.n	8010c4a <_printf_float+0x33a>
 8010c70:	4642      	mov	r2, r8
 8010c72:	4631      	mov	r1, r6
 8010c74:	4628      	mov	r0, r5
 8010c76:	47b8      	blx	r7
 8010c78:	3001      	adds	r0, #1
 8010c7a:	d1c2      	bne.n	8010c02 <_printf_float+0x2f2>
 8010c7c:	e6a3      	b.n	80109c6 <_printf_float+0xb6>
 8010c7e:	2301      	movs	r3, #1
 8010c80:	4631      	mov	r1, r6
 8010c82:	4628      	mov	r0, r5
 8010c84:	9206      	str	r2, [sp, #24]
 8010c86:	47b8      	blx	r7
 8010c88:	3001      	adds	r0, #1
 8010c8a:	f43f ae9c 	beq.w	80109c6 <_printf_float+0xb6>
 8010c8e:	9a06      	ldr	r2, [sp, #24]
 8010c90:	f10b 0b01 	add.w	fp, fp, #1
 8010c94:	e7bb      	b.n	8010c0e <_printf_float+0x2fe>
 8010c96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c9a:	4631      	mov	r1, r6
 8010c9c:	4628      	mov	r0, r5
 8010c9e:	47b8      	blx	r7
 8010ca0:	3001      	adds	r0, #1
 8010ca2:	d1c0      	bne.n	8010c26 <_printf_float+0x316>
 8010ca4:	e68f      	b.n	80109c6 <_printf_float+0xb6>
 8010ca6:	9a06      	ldr	r2, [sp, #24]
 8010ca8:	464b      	mov	r3, r9
 8010caa:	4442      	add	r2, r8
 8010cac:	4631      	mov	r1, r6
 8010cae:	4628      	mov	r0, r5
 8010cb0:	47b8      	blx	r7
 8010cb2:	3001      	adds	r0, #1
 8010cb4:	d1c3      	bne.n	8010c3e <_printf_float+0x32e>
 8010cb6:	e686      	b.n	80109c6 <_printf_float+0xb6>
 8010cb8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010cbc:	f1ba 0f01 	cmp.w	sl, #1
 8010cc0:	dc01      	bgt.n	8010cc6 <_printf_float+0x3b6>
 8010cc2:	07db      	lsls	r3, r3, #31
 8010cc4:	d536      	bpl.n	8010d34 <_printf_float+0x424>
 8010cc6:	2301      	movs	r3, #1
 8010cc8:	4642      	mov	r2, r8
 8010cca:	4631      	mov	r1, r6
 8010ccc:	4628      	mov	r0, r5
 8010cce:	47b8      	blx	r7
 8010cd0:	3001      	adds	r0, #1
 8010cd2:	f43f ae78 	beq.w	80109c6 <_printf_float+0xb6>
 8010cd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010cda:	4631      	mov	r1, r6
 8010cdc:	4628      	mov	r0, r5
 8010cde:	47b8      	blx	r7
 8010ce0:	3001      	adds	r0, #1
 8010ce2:	f43f ae70 	beq.w	80109c6 <_printf_float+0xb6>
 8010ce6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010cea:	2200      	movs	r2, #0
 8010cec:	2300      	movs	r3, #0
 8010cee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010cf2:	f7ef fef1 	bl	8000ad8 <__aeabi_dcmpeq>
 8010cf6:	b9c0      	cbnz	r0, 8010d2a <_printf_float+0x41a>
 8010cf8:	4653      	mov	r3, sl
 8010cfa:	f108 0201 	add.w	r2, r8, #1
 8010cfe:	4631      	mov	r1, r6
 8010d00:	4628      	mov	r0, r5
 8010d02:	47b8      	blx	r7
 8010d04:	3001      	adds	r0, #1
 8010d06:	d10c      	bne.n	8010d22 <_printf_float+0x412>
 8010d08:	e65d      	b.n	80109c6 <_printf_float+0xb6>
 8010d0a:	2301      	movs	r3, #1
 8010d0c:	465a      	mov	r2, fp
 8010d0e:	4631      	mov	r1, r6
 8010d10:	4628      	mov	r0, r5
 8010d12:	47b8      	blx	r7
 8010d14:	3001      	adds	r0, #1
 8010d16:	f43f ae56 	beq.w	80109c6 <_printf_float+0xb6>
 8010d1a:	f108 0801 	add.w	r8, r8, #1
 8010d1e:	45d0      	cmp	r8, sl
 8010d20:	dbf3      	blt.n	8010d0a <_printf_float+0x3fa>
 8010d22:	464b      	mov	r3, r9
 8010d24:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010d28:	e6df      	b.n	8010aea <_printf_float+0x1da>
 8010d2a:	f04f 0800 	mov.w	r8, #0
 8010d2e:	f104 0b1a 	add.w	fp, r4, #26
 8010d32:	e7f4      	b.n	8010d1e <_printf_float+0x40e>
 8010d34:	2301      	movs	r3, #1
 8010d36:	4642      	mov	r2, r8
 8010d38:	e7e1      	b.n	8010cfe <_printf_float+0x3ee>
 8010d3a:	2301      	movs	r3, #1
 8010d3c:	464a      	mov	r2, r9
 8010d3e:	4631      	mov	r1, r6
 8010d40:	4628      	mov	r0, r5
 8010d42:	47b8      	blx	r7
 8010d44:	3001      	adds	r0, #1
 8010d46:	f43f ae3e 	beq.w	80109c6 <_printf_float+0xb6>
 8010d4a:	f108 0801 	add.w	r8, r8, #1
 8010d4e:	68e3      	ldr	r3, [r4, #12]
 8010d50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010d52:	1a5b      	subs	r3, r3, r1
 8010d54:	4543      	cmp	r3, r8
 8010d56:	dcf0      	bgt.n	8010d3a <_printf_float+0x42a>
 8010d58:	e6fc      	b.n	8010b54 <_printf_float+0x244>
 8010d5a:	f04f 0800 	mov.w	r8, #0
 8010d5e:	f104 0919 	add.w	r9, r4, #25
 8010d62:	e7f4      	b.n	8010d4e <_printf_float+0x43e>

08010d64 <_printf_common>:
 8010d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d68:	4616      	mov	r6, r2
 8010d6a:	4698      	mov	r8, r3
 8010d6c:	688a      	ldr	r2, [r1, #8]
 8010d6e:	690b      	ldr	r3, [r1, #16]
 8010d70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010d74:	4293      	cmp	r3, r2
 8010d76:	bfb8      	it	lt
 8010d78:	4613      	movlt	r3, r2
 8010d7a:	6033      	str	r3, [r6, #0]
 8010d7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010d80:	4607      	mov	r7, r0
 8010d82:	460c      	mov	r4, r1
 8010d84:	b10a      	cbz	r2, 8010d8a <_printf_common+0x26>
 8010d86:	3301      	adds	r3, #1
 8010d88:	6033      	str	r3, [r6, #0]
 8010d8a:	6823      	ldr	r3, [r4, #0]
 8010d8c:	0699      	lsls	r1, r3, #26
 8010d8e:	bf42      	ittt	mi
 8010d90:	6833      	ldrmi	r3, [r6, #0]
 8010d92:	3302      	addmi	r3, #2
 8010d94:	6033      	strmi	r3, [r6, #0]
 8010d96:	6825      	ldr	r5, [r4, #0]
 8010d98:	f015 0506 	ands.w	r5, r5, #6
 8010d9c:	d106      	bne.n	8010dac <_printf_common+0x48>
 8010d9e:	f104 0a19 	add.w	sl, r4, #25
 8010da2:	68e3      	ldr	r3, [r4, #12]
 8010da4:	6832      	ldr	r2, [r6, #0]
 8010da6:	1a9b      	subs	r3, r3, r2
 8010da8:	42ab      	cmp	r3, r5
 8010daa:	dc26      	bgt.n	8010dfa <_printf_common+0x96>
 8010dac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010db0:	6822      	ldr	r2, [r4, #0]
 8010db2:	3b00      	subs	r3, #0
 8010db4:	bf18      	it	ne
 8010db6:	2301      	movne	r3, #1
 8010db8:	0692      	lsls	r2, r2, #26
 8010dba:	d42b      	bmi.n	8010e14 <_printf_common+0xb0>
 8010dbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010dc0:	4641      	mov	r1, r8
 8010dc2:	4638      	mov	r0, r7
 8010dc4:	47c8      	blx	r9
 8010dc6:	3001      	adds	r0, #1
 8010dc8:	d01e      	beq.n	8010e08 <_printf_common+0xa4>
 8010dca:	6823      	ldr	r3, [r4, #0]
 8010dcc:	6922      	ldr	r2, [r4, #16]
 8010dce:	f003 0306 	and.w	r3, r3, #6
 8010dd2:	2b04      	cmp	r3, #4
 8010dd4:	bf02      	ittt	eq
 8010dd6:	68e5      	ldreq	r5, [r4, #12]
 8010dd8:	6833      	ldreq	r3, [r6, #0]
 8010dda:	1aed      	subeq	r5, r5, r3
 8010ddc:	68a3      	ldr	r3, [r4, #8]
 8010dde:	bf0c      	ite	eq
 8010de0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010de4:	2500      	movne	r5, #0
 8010de6:	4293      	cmp	r3, r2
 8010de8:	bfc4      	itt	gt
 8010dea:	1a9b      	subgt	r3, r3, r2
 8010dec:	18ed      	addgt	r5, r5, r3
 8010dee:	2600      	movs	r6, #0
 8010df0:	341a      	adds	r4, #26
 8010df2:	42b5      	cmp	r5, r6
 8010df4:	d11a      	bne.n	8010e2c <_printf_common+0xc8>
 8010df6:	2000      	movs	r0, #0
 8010df8:	e008      	b.n	8010e0c <_printf_common+0xa8>
 8010dfa:	2301      	movs	r3, #1
 8010dfc:	4652      	mov	r2, sl
 8010dfe:	4641      	mov	r1, r8
 8010e00:	4638      	mov	r0, r7
 8010e02:	47c8      	blx	r9
 8010e04:	3001      	adds	r0, #1
 8010e06:	d103      	bne.n	8010e10 <_printf_common+0xac>
 8010e08:	f04f 30ff 	mov.w	r0, #4294967295
 8010e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e10:	3501      	adds	r5, #1
 8010e12:	e7c6      	b.n	8010da2 <_printf_common+0x3e>
 8010e14:	18e1      	adds	r1, r4, r3
 8010e16:	1c5a      	adds	r2, r3, #1
 8010e18:	2030      	movs	r0, #48	@ 0x30
 8010e1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010e1e:	4422      	add	r2, r4
 8010e20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010e24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010e28:	3302      	adds	r3, #2
 8010e2a:	e7c7      	b.n	8010dbc <_printf_common+0x58>
 8010e2c:	2301      	movs	r3, #1
 8010e2e:	4622      	mov	r2, r4
 8010e30:	4641      	mov	r1, r8
 8010e32:	4638      	mov	r0, r7
 8010e34:	47c8      	blx	r9
 8010e36:	3001      	adds	r0, #1
 8010e38:	d0e6      	beq.n	8010e08 <_printf_common+0xa4>
 8010e3a:	3601      	adds	r6, #1
 8010e3c:	e7d9      	b.n	8010df2 <_printf_common+0x8e>
	...

08010e40 <_printf_i>:
 8010e40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010e44:	7e0f      	ldrb	r7, [r1, #24]
 8010e46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010e48:	2f78      	cmp	r7, #120	@ 0x78
 8010e4a:	4691      	mov	r9, r2
 8010e4c:	4680      	mov	r8, r0
 8010e4e:	460c      	mov	r4, r1
 8010e50:	469a      	mov	sl, r3
 8010e52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010e56:	d807      	bhi.n	8010e68 <_printf_i+0x28>
 8010e58:	2f62      	cmp	r7, #98	@ 0x62
 8010e5a:	d80a      	bhi.n	8010e72 <_printf_i+0x32>
 8010e5c:	2f00      	cmp	r7, #0
 8010e5e:	f000 80d2 	beq.w	8011006 <_printf_i+0x1c6>
 8010e62:	2f58      	cmp	r7, #88	@ 0x58
 8010e64:	f000 80b9 	beq.w	8010fda <_printf_i+0x19a>
 8010e68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010e6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010e70:	e03a      	b.n	8010ee8 <_printf_i+0xa8>
 8010e72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010e76:	2b15      	cmp	r3, #21
 8010e78:	d8f6      	bhi.n	8010e68 <_printf_i+0x28>
 8010e7a:	a101      	add	r1, pc, #4	@ (adr r1, 8010e80 <_printf_i+0x40>)
 8010e7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010e80:	08010ed9 	.word	0x08010ed9
 8010e84:	08010eed 	.word	0x08010eed
 8010e88:	08010e69 	.word	0x08010e69
 8010e8c:	08010e69 	.word	0x08010e69
 8010e90:	08010e69 	.word	0x08010e69
 8010e94:	08010e69 	.word	0x08010e69
 8010e98:	08010eed 	.word	0x08010eed
 8010e9c:	08010e69 	.word	0x08010e69
 8010ea0:	08010e69 	.word	0x08010e69
 8010ea4:	08010e69 	.word	0x08010e69
 8010ea8:	08010e69 	.word	0x08010e69
 8010eac:	08010fed 	.word	0x08010fed
 8010eb0:	08010f17 	.word	0x08010f17
 8010eb4:	08010fa7 	.word	0x08010fa7
 8010eb8:	08010e69 	.word	0x08010e69
 8010ebc:	08010e69 	.word	0x08010e69
 8010ec0:	0801100f 	.word	0x0801100f
 8010ec4:	08010e69 	.word	0x08010e69
 8010ec8:	08010f17 	.word	0x08010f17
 8010ecc:	08010e69 	.word	0x08010e69
 8010ed0:	08010e69 	.word	0x08010e69
 8010ed4:	08010faf 	.word	0x08010faf
 8010ed8:	6833      	ldr	r3, [r6, #0]
 8010eda:	1d1a      	adds	r2, r3, #4
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	6032      	str	r2, [r6, #0]
 8010ee0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010ee4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010ee8:	2301      	movs	r3, #1
 8010eea:	e09d      	b.n	8011028 <_printf_i+0x1e8>
 8010eec:	6833      	ldr	r3, [r6, #0]
 8010eee:	6820      	ldr	r0, [r4, #0]
 8010ef0:	1d19      	adds	r1, r3, #4
 8010ef2:	6031      	str	r1, [r6, #0]
 8010ef4:	0606      	lsls	r6, r0, #24
 8010ef6:	d501      	bpl.n	8010efc <_printf_i+0xbc>
 8010ef8:	681d      	ldr	r5, [r3, #0]
 8010efa:	e003      	b.n	8010f04 <_printf_i+0xc4>
 8010efc:	0645      	lsls	r5, r0, #25
 8010efe:	d5fb      	bpl.n	8010ef8 <_printf_i+0xb8>
 8010f00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010f04:	2d00      	cmp	r5, #0
 8010f06:	da03      	bge.n	8010f10 <_printf_i+0xd0>
 8010f08:	232d      	movs	r3, #45	@ 0x2d
 8010f0a:	426d      	negs	r5, r5
 8010f0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010f10:	4859      	ldr	r0, [pc, #356]	@ (8011078 <_printf_i+0x238>)
 8010f12:	230a      	movs	r3, #10
 8010f14:	e011      	b.n	8010f3a <_printf_i+0xfa>
 8010f16:	6821      	ldr	r1, [r4, #0]
 8010f18:	6833      	ldr	r3, [r6, #0]
 8010f1a:	0608      	lsls	r0, r1, #24
 8010f1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8010f20:	d402      	bmi.n	8010f28 <_printf_i+0xe8>
 8010f22:	0649      	lsls	r1, r1, #25
 8010f24:	bf48      	it	mi
 8010f26:	b2ad      	uxthmi	r5, r5
 8010f28:	2f6f      	cmp	r7, #111	@ 0x6f
 8010f2a:	4853      	ldr	r0, [pc, #332]	@ (8011078 <_printf_i+0x238>)
 8010f2c:	6033      	str	r3, [r6, #0]
 8010f2e:	bf14      	ite	ne
 8010f30:	230a      	movne	r3, #10
 8010f32:	2308      	moveq	r3, #8
 8010f34:	2100      	movs	r1, #0
 8010f36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010f3a:	6866      	ldr	r6, [r4, #4]
 8010f3c:	60a6      	str	r6, [r4, #8]
 8010f3e:	2e00      	cmp	r6, #0
 8010f40:	bfa2      	ittt	ge
 8010f42:	6821      	ldrge	r1, [r4, #0]
 8010f44:	f021 0104 	bicge.w	r1, r1, #4
 8010f48:	6021      	strge	r1, [r4, #0]
 8010f4a:	b90d      	cbnz	r5, 8010f50 <_printf_i+0x110>
 8010f4c:	2e00      	cmp	r6, #0
 8010f4e:	d04b      	beq.n	8010fe8 <_printf_i+0x1a8>
 8010f50:	4616      	mov	r6, r2
 8010f52:	fbb5 f1f3 	udiv	r1, r5, r3
 8010f56:	fb03 5711 	mls	r7, r3, r1, r5
 8010f5a:	5dc7      	ldrb	r7, [r0, r7]
 8010f5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010f60:	462f      	mov	r7, r5
 8010f62:	42bb      	cmp	r3, r7
 8010f64:	460d      	mov	r5, r1
 8010f66:	d9f4      	bls.n	8010f52 <_printf_i+0x112>
 8010f68:	2b08      	cmp	r3, #8
 8010f6a:	d10b      	bne.n	8010f84 <_printf_i+0x144>
 8010f6c:	6823      	ldr	r3, [r4, #0]
 8010f6e:	07df      	lsls	r7, r3, #31
 8010f70:	d508      	bpl.n	8010f84 <_printf_i+0x144>
 8010f72:	6923      	ldr	r3, [r4, #16]
 8010f74:	6861      	ldr	r1, [r4, #4]
 8010f76:	4299      	cmp	r1, r3
 8010f78:	bfde      	ittt	le
 8010f7a:	2330      	movle	r3, #48	@ 0x30
 8010f7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010f80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010f84:	1b92      	subs	r2, r2, r6
 8010f86:	6122      	str	r2, [r4, #16]
 8010f88:	f8cd a000 	str.w	sl, [sp]
 8010f8c:	464b      	mov	r3, r9
 8010f8e:	aa03      	add	r2, sp, #12
 8010f90:	4621      	mov	r1, r4
 8010f92:	4640      	mov	r0, r8
 8010f94:	f7ff fee6 	bl	8010d64 <_printf_common>
 8010f98:	3001      	adds	r0, #1
 8010f9a:	d14a      	bne.n	8011032 <_printf_i+0x1f2>
 8010f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8010fa0:	b004      	add	sp, #16
 8010fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fa6:	6823      	ldr	r3, [r4, #0]
 8010fa8:	f043 0320 	orr.w	r3, r3, #32
 8010fac:	6023      	str	r3, [r4, #0]
 8010fae:	4833      	ldr	r0, [pc, #204]	@ (801107c <_printf_i+0x23c>)
 8010fb0:	2778      	movs	r7, #120	@ 0x78
 8010fb2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010fb6:	6823      	ldr	r3, [r4, #0]
 8010fb8:	6831      	ldr	r1, [r6, #0]
 8010fba:	061f      	lsls	r7, r3, #24
 8010fbc:	f851 5b04 	ldr.w	r5, [r1], #4
 8010fc0:	d402      	bmi.n	8010fc8 <_printf_i+0x188>
 8010fc2:	065f      	lsls	r7, r3, #25
 8010fc4:	bf48      	it	mi
 8010fc6:	b2ad      	uxthmi	r5, r5
 8010fc8:	6031      	str	r1, [r6, #0]
 8010fca:	07d9      	lsls	r1, r3, #31
 8010fcc:	bf44      	itt	mi
 8010fce:	f043 0320 	orrmi.w	r3, r3, #32
 8010fd2:	6023      	strmi	r3, [r4, #0]
 8010fd4:	b11d      	cbz	r5, 8010fde <_printf_i+0x19e>
 8010fd6:	2310      	movs	r3, #16
 8010fd8:	e7ac      	b.n	8010f34 <_printf_i+0xf4>
 8010fda:	4827      	ldr	r0, [pc, #156]	@ (8011078 <_printf_i+0x238>)
 8010fdc:	e7e9      	b.n	8010fb2 <_printf_i+0x172>
 8010fde:	6823      	ldr	r3, [r4, #0]
 8010fe0:	f023 0320 	bic.w	r3, r3, #32
 8010fe4:	6023      	str	r3, [r4, #0]
 8010fe6:	e7f6      	b.n	8010fd6 <_printf_i+0x196>
 8010fe8:	4616      	mov	r6, r2
 8010fea:	e7bd      	b.n	8010f68 <_printf_i+0x128>
 8010fec:	6833      	ldr	r3, [r6, #0]
 8010fee:	6825      	ldr	r5, [r4, #0]
 8010ff0:	6961      	ldr	r1, [r4, #20]
 8010ff2:	1d18      	adds	r0, r3, #4
 8010ff4:	6030      	str	r0, [r6, #0]
 8010ff6:	062e      	lsls	r6, r5, #24
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	d501      	bpl.n	8011000 <_printf_i+0x1c0>
 8010ffc:	6019      	str	r1, [r3, #0]
 8010ffe:	e002      	b.n	8011006 <_printf_i+0x1c6>
 8011000:	0668      	lsls	r0, r5, #25
 8011002:	d5fb      	bpl.n	8010ffc <_printf_i+0x1bc>
 8011004:	8019      	strh	r1, [r3, #0]
 8011006:	2300      	movs	r3, #0
 8011008:	6123      	str	r3, [r4, #16]
 801100a:	4616      	mov	r6, r2
 801100c:	e7bc      	b.n	8010f88 <_printf_i+0x148>
 801100e:	6833      	ldr	r3, [r6, #0]
 8011010:	1d1a      	adds	r2, r3, #4
 8011012:	6032      	str	r2, [r6, #0]
 8011014:	681e      	ldr	r6, [r3, #0]
 8011016:	6862      	ldr	r2, [r4, #4]
 8011018:	2100      	movs	r1, #0
 801101a:	4630      	mov	r0, r6
 801101c:	f7ef f8e0 	bl	80001e0 <memchr>
 8011020:	b108      	cbz	r0, 8011026 <_printf_i+0x1e6>
 8011022:	1b80      	subs	r0, r0, r6
 8011024:	6060      	str	r0, [r4, #4]
 8011026:	6863      	ldr	r3, [r4, #4]
 8011028:	6123      	str	r3, [r4, #16]
 801102a:	2300      	movs	r3, #0
 801102c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011030:	e7aa      	b.n	8010f88 <_printf_i+0x148>
 8011032:	6923      	ldr	r3, [r4, #16]
 8011034:	4632      	mov	r2, r6
 8011036:	4649      	mov	r1, r9
 8011038:	4640      	mov	r0, r8
 801103a:	47d0      	blx	sl
 801103c:	3001      	adds	r0, #1
 801103e:	d0ad      	beq.n	8010f9c <_printf_i+0x15c>
 8011040:	6823      	ldr	r3, [r4, #0]
 8011042:	079b      	lsls	r3, r3, #30
 8011044:	d413      	bmi.n	801106e <_printf_i+0x22e>
 8011046:	68e0      	ldr	r0, [r4, #12]
 8011048:	9b03      	ldr	r3, [sp, #12]
 801104a:	4298      	cmp	r0, r3
 801104c:	bfb8      	it	lt
 801104e:	4618      	movlt	r0, r3
 8011050:	e7a6      	b.n	8010fa0 <_printf_i+0x160>
 8011052:	2301      	movs	r3, #1
 8011054:	4632      	mov	r2, r6
 8011056:	4649      	mov	r1, r9
 8011058:	4640      	mov	r0, r8
 801105a:	47d0      	blx	sl
 801105c:	3001      	adds	r0, #1
 801105e:	d09d      	beq.n	8010f9c <_printf_i+0x15c>
 8011060:	3501      	adds	r5, #1
 8011062:	68e3      	ldr	r3, [r4, #12]
 8011064:	9903      	ldr	r1, [sp, #12]
 8011066:	1a5b      	subs	r3, r3, r1
 8011068:	42ab      	cmp	r3, r5
 801106a:	dcf2      	bgt.n	8011052 <_printf_i+0x212>
 801106c:	e7eb      	b.n	8011046 <_printf_i+0x206>
 801106e:	2500      	movs	r5, #0
 8011070:	f104 0619 	add.w	r6, r4, #25
 8011074:	e7f5      	b.n	8011062 <_printf_i+0x222>
 8011076:	bf00      	nop
 8011078:	08013caa 	.word	0x08013caa
 801107c:	08013cbb 	.word	0x08013cbb

08011080 <std>:
 8011080:	2300      	movs	r3, #0
 8011082:	b510      	push	{r4, lr}
 8011084:	4604      	mov	r4, r0
 8011086:	e9c0 3300 	strd	r3, r3, [r0]
 801108a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801108e:	6083      	str	r3, [r0, #8]
 8011090:	8181      	strh	r1, [r0, #12]
 8011092:	6643      	str	r3, [r0, #100]	@ 0x64
 8011094:	81c2      	strh	r2, [r0, #14]
 8011096:	6183      	str	r3, [r0, #24]
 8011098:	4619      	mov	r1, r3
 801109a:	2208      	movs	r2, #8
 801109c:	305c      	adds	r0, #92	@ 0x5c
 801109e:	f000 f914 	bl	80112ca <memset>
 80110a2:	4b0d      	ldr	r3, [pc, #52]	@ (80110d8 <std+0x58>)
 80110a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80110a6:	4b0d      	ldr	r3, [pc, #52]	@ (80110dc <std+0x5c>)
 80110a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80110aa:	4b0d      	ldr	r3, [pc, #52]	@ (80110e0 <std+0x60>)
 80110ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80110ae:	4b0d      	ldr	r3, [pc, #52]	@ (80110e4 <std+0x64>)
 80110b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80110b2:	4b0d      	ldr	r3, [pc, #52]	@ (80110e8 <std+0x68>)
 80110b4:	6224      	str	r4, [r4, #32]
 80110b6:	429c      	cmp	r4, r3
 80110b8:	d006      	beq.n	80110c8 <std+0x48>
 80110ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80110be:	4294      	cmp	r4, r2
 80110c0:	d002      	beq.n	80110c8 <std+0x48>
 80110c2:	33d0      	adds	r3, #208	@ 0xd0
 80110c4:	429c      	cmp	r4, r3
 80110c6:	d105      	bne.n	80110d4 <std+0x54>
 80110c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80110cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110d0:	f000 b996 	b.w	8011400 <__retarget_lock_init_recursive>
 80110d4:	bd10      	pop	{r4, pc}
 80110d6:	bf00      	nop
 80110d8:	08011245 	.word	0x08011245
 80110dc:	08011267 	.word	0x08011267
 80110e0:	0801129f 	.word	0x0801129f
 80110e4:	080112c3 	.word	0x080112c3
 80110e8:	20001df4 	.word	0x20001df4

080110ec <stdio_exit_handler>:
 80110ec:	4a02      	ldr	r2, [pc, #8]	@ (80110f8 <stdio_exit_handler+0xc>)
 80110ee:	4903      	ldr	r1, [pc, #12]	@ (80110fc <stdio_exit_handler+0x10>)
 80110f0:	4803      	ldr	r0, [pc, #12]	@ (8011100 <stdio_exit_handler+0x14>)
 80110f2:	f000 b869 	b.w	80111c8 <_fwalk_sglue>
 80110f6:	bf00      	nop
 80110f8:	2000015c 	.word	0x2000015c
 80110fc:	08012c11 	.word	0x08012c11
 8011100:	2000016c 	.word	0x2000016c

08011104 <cleanup_stdio>:
 8011104:	6841      	ldr	r1, [r0, #4]
 8011106:	4b0c      	ldr	r3, [pc, #48]	@ (8011138 <cleanup_stdio+0x34>)
 8011108:	4299      	cmp	r1, r3
 801110a:	b510      	push	{r4, lr}
 801110c:	4604      	mov	r4, r0
 801110e:	d001      	beq.n	8011114 <cleanup_stdio+0x10>
 8011110:	f001 fd7e 	bl	8012c10 <_fflush_r>
 8011114:	68a1      	ldr	r1, [r4, #8]
 8011116:	4b09      	ldr	r3, [pc, #36]	@ (801113c <cleanup_stdio+0x38>)
 8011118:	4299      	cmp	r1, r3
 801111a:	d002      	beq.n	8011122 <cleanup_stdio+0x1e>
 801111c:	4620      	mov	r0, r4
 801111e:	f001 fd77 	bl	8012c10 <_fflush_r>
 8011122:	68e1      	ldr	r1, [r4, #12]
 8011124:	4b06      	ldr	r3, [pc, #24]	@ (8011140 <cleanup_stdio+0x3c>)
 8011126:	4299      	cmp	r1, r3
 8011128:	d004      	beq.n	8011134 <cleanup_stdio+0x30>
 801112a:	4620      	mov	r0, r4
 801112c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011130:	f001 bd6e 	b.w	8012c10 <_fflush_r>
 8011134:	bd10      	pop	{r4, pc}
 8011136:	bf00      	nop
 8011138:	20001df4 	.word	0x20001df4
 801113c:	20001e5c 	.word	0x20001e5c
 8011140:	20001ec4 	.word	0x20001ec4

08011144 <global_stdio_init.part.0>:
 8011144:	b510      	push	{r4, lr}
 8011146:	4b0b      	ldr	r3, [pc, #44]	@ (8011174 <global_stdio_init.part.0+0x30>)
 8011148:	4c0b      	ldr	r4, [pc, #44]	@ (8011178 <global_stdio_init.part.0+0x34>)
 801114a:	4a0c      	ldr	r2, [pc, #48]	@ (801117c <global_stdio_init.part.0+0x38>)
 801114c:	601a      	str	r2, [r3, #0]
 801114e:	4620      	mov	r0, r4
 8011150:	2200      	movs	r2, #0
 8011152:	2104      	movs	r1, #4
 8011154:	f7ff ff94 	bl	8011080 <std>
 8011158:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801115c:	2201      	movs	r2, #1
 801115e:	2109      	movs	r1, #9
 8011160:	f7ff ff8e 	bl	8011080 <std>
 8011164:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011168:	2202      	movs	r2, #2
 801116a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801116e:	2112      	movs	r1, #18
 8011170:	f7ff bf86 	b.w	8011080 <std>
 8011174:	20001f2c 	.word	0x20001f2c
 8011178:	20001df4 	.word	0x20001df4
 801117c:	080110ed 	.word	0x080110ed

08011180 <__sfp_lock_acquire>:
 8011180:	4801      	ldr	r0, [pc, #4]	@ (8011188 <__sfp_lock_acquire+0x8>)
 8011182:	f000 b93e 	b.w	8011402 <__retarget_lock_acquire_recursive>
 8011186:	bf00      	nop
 8011188:	20001f35 	.word	0x20001f35

0801118c <__sfp_lock_release>:
 801118c:	4801      	ldr	r0, [pc, #4]	@ (8011194 <__sfp_lock_release+0x8>)
 801118e:	f000 b939 	b.w	8011404 <__retarget_lock_release_recursive>
 8011192:	bf00      	nop
 8011194:	20001f35 	.word	0x20001f35

08011198 <__sinit>:
 8011198:	b510      	push	{r4, lr}
 801119a:	4604      	mov	r4, r0
 801119c:	f7ff fff0 	bl	8011180 <__sfp_lock_acquire>
 80111a0:	6a23      	ldr	r3, [r4, #32]
 80111a2:	b11b      	cbz	r3, 80111ac <__sinit+0x14>
 80111a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80111a8:	f7ff bff0 	b.w	801118c <__sfp_lock_release>
 80111ac:	4b04      	ldr	r3, [pc, #16]	@ (80111c0 <__sinit+0x28>)
 80111ae:	6223      	str	r3, [r4, #32]
 80111b0:	4b04      	ldr	r3, [pc, #16]	@ (80111c4 <__sinit+0x2c>)
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d1f5      	bne.n	80111a4 <__sinit+0xc>
 80111b8:	f7ff ffc4 	bl	8011144 <global_stdio_init.part.0>
 80111bc:	e7f2      	b.n	80111a4 <__sinit+0xc>
 80111be:	bf00      	nop
 80111c0:	08011105 	.word	0x08011105
 80111c4:	20001f2c 	.word	0x20001f2c

080111c8 <_fwalk_sglue>:
 80111c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111cc:	4607      	mov	r7, r0
 80111ce:	4688      	mov	r8, r1
 80111d0:	4614      	mov	r4, r2
 80111d2:	2600      	movs	r6, #0
 80111d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80111d8:	f1b9 0901 	subs.w	r9, r9, #1
 80111dc:	d505      	bpl.n	80111ea <_fwalk_sglue+0x22>
 80111de:	6824      	ldr	r4, [r4, #0]
 80111e0:	2c00      	cmp	r4, #0
 80111e2:	d1f7      	bne.n	80111d4 <_fwalk_sglue+0xc>
 80111e4:	4630      	mov	r0, r6
 80111e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111ea:	89ab      	ldrh	r3, [r5, #12]
 80111ec:	2b01      	cmp	r3, #1
 80111ee:	d907      	bls.n	8011200 <_fwalk_sglue+0x38>
 80111f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80111f4:	3301      	adds	r3, #1
 80111f6:	d003      	beq.n	8011200 <_fwalk_sglue+0x38>
 80111f8:	4629      	mov	r1, r5
 80111fa:	4638      	mov	r0, r7
 80111fc:	47c0      	blx	r8
 80111fe:	4306      	orrs	r6, r0
 8011200:	3568      	adds	r5, #104	@ 0x68
 8011202:	e7e9      	b.n	80111d8 <_fwalk_sglue+0x10>

08011204 <siprintf>:
 8011204:	b40e      	push	{r1, r2, r3}
 8011206:	b500      	push	{lr}
 8011208:	b09c      	sub	sp, #112	@ 0x70
 801120a:	ab1d      	add	r3, sp, #116	@ 0x74
 801120c:	9002      	str	r0, [sp, #8]
 801120e:	9006      	str	r0, [sp, #24]
 8011210:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011214:	4809      	ldr	r0, [pc, #36]	@ (801123c <siprintf+0x38>)
 8011216:	9107      	str	r1, [sp, #28]
 8011218:	9104      	str	r1, [sp, #16]
 801121a:	4909      	ldr	r1, [pc, #36]	@ (8011240 <siprintf+0x3c>)
 801121c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011220:	9105      	str	r1, [sp, #20]
 8011222:	6800      	ldr	r0, [r0, #0]
 8011224:	9301      	str	r3, [sp, #4]
 8011226:	a902      	add	r1, sp, #8
 8011228:	f001 fb72 	bl	8012910 <_svfiprintf_r>
 801122c:	9b02      	ldr	r3, [sp, #8]
 801122e:	2200      	movs	r2, #0
 8011230:	701a      	strb	r2, [r3, #0]
 8011232:	b01c      	add	sp, #112	@ 0x70
 8011234:	f85d eb04 	ldr.w	lr, [sp], #4
 8011238:	b003      	add	sp, #12
 801123a:	4770      	bx	lr
 801123c:	20000168 	.word	0x20000168
 8011240:	ffff0208 	.word	0xffff0208

08011244 <__sread>:
 8011244:	b510      	push	{r4, lr}
 8011246:	460c      	mov	r4, r1
 8011248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801124c:	f000 f87a 	bl	8011344 <_read_r>
 8011250:	2800      	cmp	r0, #0
 8011252:	bfab      	itete	ge
 8011254:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011256:	89a3      	ldrhlt	r3, [r4, #12]
 8011258:	181b      	addge	r3, r3, r0
 801125a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801125e:	bfac      	ite	ge
 8011260:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011262:	81a3      	strhlt	r3, [r4, #12]
 8011264:	bd10      	pop	{r4, pc}

08011266 <__swrite>:
 8011266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801126a:	461f      	mov	r7, r3
 801126c:	898b      	ldrh	r3, [r1, #12]
 801126e:	05db      	lsls	r3, r3, #23
 8011270:	4605      	mov	r5, r0
 8011272:	460c      	mov	r4, r1
 8011274:	4616      	mov	r6, r2
 8011276:	d505      	bpl.n	8011284 <__swrite+0x1e>
 8011278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801127c:	2302      	movs	r3, #2
 801127e:	2200      	movs	r2, #0
 8011280:	f000 f84e 	bl	8011320 <_lseek_r>
 8011284:	89a3      	ldrh	r3, [r4, #12]
 8011286:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801128a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801128e:	81a3      	strh	r3, [r4, #12]
 8011290:	4632      	mov	r2, r6
 8011292:	463b      	mov	r3, r7
 8011294:	4628      	mov	r0, r5
 8011296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801129a:	f000 b875 	b.w	8011388 <_write_r>

0801129e <__sseek>:
 801129e:	b510      	push	{r4, lr}
 80112a0:	460c      	mov	r4, r1
 80112a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112a6:	f000 f83b 	bl	8011320 <_lseek_r>
 80112aa:	1c43      	adds	r3, r0, #1
 80112ac:	89a3      	ldrh	r3, [r4, #12]
 80112ae:	bf15      	itete	ne
 80112b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80112b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80112b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80112ba:	81a3      	strheq	r3, [r4, #12]
 80112bc:	bf18      	it	ne
 80112be:	81a3      	strhne	r3, [r4, #12]
 80112c0:	bd10      	pop	{r4, pc}

080112c2 <__sclose>:
 80112c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112c6:	f000 b81b 	b.w	8011300 <_close_r>

080112ca <memset>:
 80112ca:	4402      	add	r2, r0
 80112cc:	4603      	mov	r3, r0
 80112ce:	4293      	cmp	r3, r2
 80112d0:	d100      	bne.n	80112d4 <memset+0xa>
 80112d2:	4770      	bx	lr
 80112d4:	f803 1b01 	strb.w	r1, [r3], #1
 80112d8:	e7f9      	b.n	80112ce <memset+0x4>

080112da <strcat>:
 80112da:	b510      	push	{r4, lr}
 80112dc:	4602      	mov	r2, r0
 80112de:	7814      	ldrb	r4, [r2, #0]
 80112e0:	4613      	mov	r3, r2
 80112e2:	3201      	adds	r2, #1
 80112e4:	2c00      	cmp	r4, #0
 80112e6:	d1fa      	bne.n	80112de <strcat+0x4>
 80112e8:	3b01      	subs	r3, #1
 80112ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80112ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80112f2:	2a00      	cmp	r2, #0
 80112f4:	d1f9      	bne.n	80112ea <strcat+0x10>
 80112f6:	bd10      	pop	{r4, pc}

080112f8 <_localeconv_r>:
 80112f8:	4800      	ldr	r0, [pc, #0]	@ (80112fc <_localeconv_r+0x4>)
 80112fa:	4770      	bx	lr
 80112fc:	200002a8 	.word	0x200002a8

08011300 <_close_r>:
 8011300:	b538      	push	{r3, r4, r5, lr}
 8011302:	4d06      	ldr	r5, [pc, #24]	@ (801131c <_close_r+0x1c>)
 8011304:	2300      	movs	r3, #0
 8011306:	4604      	mov	r4, r0
 8011308:	4608      	mov	r0, r1
 801130a:	602b      	str	r3, [r5, #0]
 801130c:	f7f1 ff36 	bl	800317c <_close>
 8011310:	1c43      	adds	r3, r0, #1
 8011312:	d102      	bne.n	801131a <_close_r+0x1a>
 8011314:	682b      	ldr	r3, [r5, #0]
 8011316:	b103      	cbz	r3, 801131a <_close_r+0x1a>
 8011318:	6023      	str	r3, [r4, #0]
 801131a:	bd38      	pop	{r3, r4, r5, pc}
 801131c:	20001f30 	.word	0x20001f30

08011320 <_lseek_r>:
 8011320:	b538      	push	{r3, r4, r5, lr}
 8011322:	4d07      	ldr	r5, [pc, #28]	@ (8011340 <_lseek_r+0x20>)
 8011324:	4604      	mov	r4, r0
 8011326:	4608      	mov	r0, r1
 8011328:	4611      	mov	r1, r2
 801132a:	2200      	movs	r2, #0
 801132c:	602a      	str	r2, [r5, #0]
 801132e:	461a      	mov	r2, r3
 8011330:	f7f1 ff4b 	bl	80031ca <_lseek>
 8011334:	1c43      	adds	r3, r0, #1
 8011336:	d102      	bne.n	801133e <_lseek_r+0x1e>
 8011338:	682b      	ldr	r3, [r5, #0]
 801133a:	b103      	cbz	r3, 801133e <_lseek_r+0x1e>
 801133c:	6023      	str	r3, [r4, #0]
 801133e:	bd38      	pop	{r3, r4, r5, pc}
 8011340:	20001f30 	.word	0x20001f30

08011344 <_read_r>:
 8011344:	b538      	push	{r3, r4, r5, lr}
 8011346:	4d07      	ldr	r5, [pc, #28]	@ (8011364 <_read_r+0x20>)
 8011348:	4604      	mov	r4, r0
 801134a:	4608      	mov	r0, r1
 801134c:	4611      	mov	r1, r2
 801134e:	2200      	movs	r2, #0
 8011350:	602a      	str	r2, [r5, #0]
 8011352:	461a      	mov	r2, r3
 8011354:	f7f1 fed9 	bl	800310a <_read>
 8011358:	1c43      	adds	r3, r0, #1
 801135a:	d102      	bne.n	8011362 <_read_r+0x1e>
 801135c:	682b      	ldr	r3, [r5, #0]
 801135e:	b103      	cbz	r3, 8011362 <_read_r+0x1e>
 8011360:	6023      	str	r3, [r4, #0]
 8011362:	bd38      	pop	{r3, r4, r5, pc}
 8011364:	20001f30 	.word	0x20001f30

08011368 <_sbrk_r>:
 8011368:	b538      	push	{r3, r4, r5, lr}
 801136a:	4d06      	ldr	r5, [pc, #24]	@ (8011384 <_sbrk_r+0x1c>)
 801136c:	2300      	movs	r3, #0
 801136e:	4604      	mov	r4, r0
 8011370:	4608      	mov	r0, r1
 8011372:	602b      	str	r3, [r5, #0]
 8011374:	f7f1 ff36 	bl	80031e4 <_sbrk>
 8011378:	1c43      	adds	r3, r0, #1
 801137a:	d102      	bne.n	8011382 <_sbrk_r+0x1a>
 801137c:	682b      	ldr	r3, [r5, #0]
 801137e:	b103      	cbz	r3, 8011382 <_sbrk_r+0x1a>
 8011380:	6023      	str	r3, [r4, #0]
 8011382:	bd38      	pop	{r3, r4, r5, pc}
 8011384:	20001f30 	.word	0x20001f30

08011388 <_write_r>:
 8011388:	b538      	push	{r3, r4, r5, lr}
 801138a:	4d07      	ldr	r5, [pc, #28]	@ (80113a8 <_write_r+0x20>)
 801138c:	4604      	mov	r4, r0
 801138e:	4608      	mov	r0, r1
 8011390:	4611      	mov	r1, r2
 8011392:	2200      	movs	r2, #0
 8011394:	602a      	str	r2, [r5, #0]
 8011396:	461a      	mov	r2, r3
 8011398:	f7f1 fed4 	bl	8003144 <_write>
 801139c:	1c43      	adds	r3, r0, #1
 801139e:	d102      	bne.n	80113a6 <_write_r+0x1e>
 80113a0:	682b      	ldr	r3, [r5, #0]
 80113a2:	b103      	cbz	r3, 80113a6 <_write_r+0x1e>
 80113a4:	6023      	str	r3, [r4, #0]
 80113a6:	bd38      	pop	{r3, r4, r5, pc}
 80113a8:	20001f30 	.word	0x20001f30

080113ac <__errno>:
 80113ac:	4b01      	ldr	r3, [pc, #4]	@ (80113b4 <__errno+0x8>)
 80113ae:	6818      	ldr	r0, [r3, #0]
 80113b0:	4770      	bx	lr
 80113b2:	bf00      	nop
 80113b4:	20000168 	.word	0x20000168

080113b8 <__libc_init_array>:
 80113b8:	b570      	push	{r4, r5, r6, lr}
 80113ba:	4d0d      	ldr	r5, [pc, #52]	@ (80113f0 <__libc_init_array+0x38>)
 80113bc:	4c0d      	ldr	r4, [pc, #52]	@ (80113f4 <__libc_init_array+0x3c>)
 80113be:	1b64      	subs	r4, r4, r5
 80113c0:	10a4      	asrs	r4, r4, #2
 80113c2:	2600      	movs	r6, #0
 80113c4:	42a6      	cmp	r6, r4
 80113c6:	d109      	bne.n	80113dc <__libc_init_array+0x24>
 80113c8:	4d0b      	ldr	r5, [pc, #44]	@ (80113f8 <__libc_init_array+0x40>)
 80113ca:	4c0c      	ldr	r4, [pc, #48]	@ (80113fc <__libc_init_array+0x44>)
 80113cc:	f002 fa46 	bl	801385c <_init>
 80113d0:	1b64      	subs	r4, r4, r5
 80113d2:	10a4      	asrs	r4, r4, #2
 80113d4:	2600      	movs	r6, #0
 80113d6:	42a6      	cmp	r6, r4
 80113d8:	d105      	bne.n	80113e6 <__libc_init_array+0x2e>
 80113da:	bd70      	pop	{r4, r5, r6, pc}
 80113dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80113e0:	4798      	blx	r3
 80113e2:	3601      	adds	r6, #1
 80113e4:	e7ee      	b.n	80113c4 <__libc_init_array+0xc>
 80113e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80113ea:	4798      	blx	r3
 80113ec:	3601      	adds	r6, #1
 80113ee:	e7f2      	b.n	80113d6 <__libc_init_array+0x1e>
 80113f0:	08014050 	.word	0x08014050
 80113f4:	08014050 	.word	0x08014050
 80113f8:	08014050 	.word	0x08014050
 80113fc:	08014054 	.word	0x08014054

08011400 <__retarget_lock_init_recursive>:
 8011400:	4770      	bx	lr

08011402 <__retarget_lock_acquire_recursive>:
 8011402:	4770      	bx	lr

08011404 <__retarget_lock_release_recursive>:
 8011404:	4770      	bx	lr

08011406 <memcpy>:
 8011406:	440a      	add	r2, r1
 8011408:	4291      	cmp	r1, r2
 801140a:	f100 33ff 	add.w	r3, r0, #4294967295
 801140e:	d100      	bne.n	8011412 <memcpy+0xc>
 8011410:	4770      	bx	lr
 8011412:	b510      	push	{r4, lr}
 8011414:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011418:	f803 4f01 	strb.w	r4, [r3, #1]!
 801141c:	4291      	cmp	r1, r2
 801141e:	d1f9      	bne.n	8011414 <memcpy+0xe>
 8011420:	bd10      	pop	{r4, pc}

08011422 <quorem>:
 8011422:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011426:	6903      	ldr	r3, [r0, #16]
 8011428:	690c      	ldr	r4, [r1, #16]
 801142a:	42a3      	cmp	r3, r4
 801142c:	4607      	mov	r7, r0
 801142e:	db7e      	blt.n	801152e <quorem+0x10c>
 8011430:	3c01      	subs	r4, #1
 8011432:	f101 0814 	add.w	r8, r1, #20
 8011436:	00a3      	lsls	r3, r4, #2
 8011438:	f100 0514 	add.w	r5, r0, #20
 801143c:	9300      	str	r3, [sp, #0]
 801143e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011442:	9301      	str	r3, [sp, #4]
 8011444:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011448:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801144c:	3301      	adds	r3, #1
 801144e:	429a      	cmp	r2, r3
 8011450:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011454:	fbb2 f6f3 	udiv	r6, r2, r3
 8011458:	d32e      	bcc.n	80114b8 <quorem+0x96>
 801145a:	f04f 0a00 	mov.w	sl, #0
 801145e:	46c4      	mov	ip, r8
 8011460:	46ae      	mov	lr, r5
 8011462:	46d3      	mov	fp, sl
 8011464:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011468:	b298      	uxth	r0, r3
 801146a:	fb06 a000 	mla	r0, r6, r0, sl
 801146e:	0c02      	lsrs	r2, r0, #16
 8011470:	0c1b      	lsrs	r3, r3, #16
 8011472:	fb06 2303 	mla	r3, r6, r3, r2
 8011476:	f8de 2000 	ldr.w	r2, [lr]
 801147a:	b280      	uxth	r0, r0
 801147c:	b292      	uxth	r2, r2
 801147e:	1a12      	subs	r2, r2, r0
 8011480:	445a      	add	r2, fp
 8011482:	f8de 0000 	ldr.w	r0, [lr]
 8011486:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801148a:	b29b      	uxth	r3, r3
 801148c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011490:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011494:	b292      	uxth	r2, r2
 8011496:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801149a:	45e1      	cmp	r9, ip
 801149c:	f84e 2b04 	str.w	r2, [lr], #4
 80114a0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80114a4:	d2de      	bcs.n	8011464 <quorem+0x42>
 80114a6:	9b00      	ldr	r3, [sp, #0]
 80114a8:	58eb      	ldr	r3, [r5, r3]
 80114aa:	b92b      	cbnz	r3, 80114b8 <quorem+0x96>
 80114ac:	9b01      	ldr	r3, [sp, #4]
 80114ae:	3b04      	subs	r3, #4
 80114b0:	429d      	cmp	r5, r3
 80114b2:	461a      	mov	r2, r3
 80114b4:	d32f      	bcc.n	8011516 <quorem+0xf4>
 80114b6:	613c      	str	r4, [r7, #16]
 80114b8:	4638      	mov	r0, r7
 80114ba:	f001 f8c5 	bl	8012648 <__mcmp>
 80114be:	2800      	cmp	r0, #0
 80114c0:	db25      	blt.n	801150e <quorem+0xec>
 80114c2:	4629      	mov	r1, r5
 80114c4:	2000      	movs	r0, #0
 80114c6:	f858 2b04 	ldr.w	r2, [r8], #4
 80114ca:	f8d1 c000 	ldr.w	ip, [r1]
 80114ce:	fa1f fe82 	uxth.w	lr, r2
 80114d2:	fa1f f38c 	uxth.w	r3, ip
 80114d6:	eba3 030e 	sub.w	r3, r3, lr
 80114da:	4403      	add	r3, r0
 80114dc:	0c12      	lsrs	r2, r2, #16
 80114de:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80114e2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80114e6:	b29b      	uxth	r3, r3
 80114e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80114ec:	45c1      	cmp	r9, r8
 80114ee:	f841 3b04 	str.w	r3, [r1], #4
 80114f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80114f6:	d2e6      	bcs.n	80114c6 <quorem+0xa4>
 80114f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80114fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011500:	b922      	cbnz	r2, 801150c <quorem+0xea>
 8011502:	3b04      	subs	r3, #4
 8011504:	429d      	cmp	r5, r3
 8011506:	461a      	mov	r2, r3
 8011508:	d30b      	bcc.n	8011522 <quorem+0x100>
 801150a:	613c      	str	r4, [r7, #16]
 801150c:	3601      	adds	r6, #1
 801150e:	4630      	mov	r0, r6
 8011510:	b003      	add	sp, #12
 8011512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011516:	6812      	ldr	r2, [r2, #0]
 8011518:	3b04      	subs	r3, #4
 801151a:	2a00      	cmp	r2, #0
 801151c:	d1cb      	bne.n	80114b6 <quorem+0x94>
 801151e:	3c01      	subs	r4, #1
 8011520:	e7c6      	b.n	80114b0 <quorem+0x8e>
 8011522:	6812      	ldr	r2, [r2, #0]
 8011524:	3b04      	subs	r3, #4
 8011526:	2a00      	cmp	r2, #0
 8011528:	d1ef      	bne.n	801150a <quorem+0xe8>
 801152a:	3c01      	subs	r4, #1
 801152c:	e7ea      	b.n	8011504 <quorem+0xe2>
 801152e:	2000      	movs	r0, #0
 8011530:	e7ee      	b.n	8011510 <quorem+0xee>
 8011532:	0000      	movs	r0, r0
 8011534:	0000      	movs	r0, r0
	...

08011538 <_dtoa_r>:
 8011538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801153c:	69c7      	ldr	r7, [r0, #28]
 801153e:	b099      	sub	sp, #100	@ 0x64
 8011540:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011544:	ec55 4b10 	vmov	r4, r5, d0
 8011548:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801154a:	9109      	str	r1, [sp, #36]	@ 0x24
 801154c:	4683      	mov	fp, r0
 801154e:	920e      	str	r2, [sp, #56]	@ 0x38
 8011550:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011552:	b97f      	cbnz	r7, 8011574 <_dtoa_r+0x3c>
 8011554:	2010      	movs	r0, #16
 8011556:	f7ff f87d 	bl	8010654 <malloc>
 801155a:	4602      	mov	r2, r0
 801155c:	f8cb 001c 	str.w	r0, [fp, #28]
 8011560:	b920      	cbnz	r0, 801156c <_dtoa_r+0x34>
 8011562:	4ba7      	ldr	r3, [pc, #668]	@ (8011800 <_dtoa_r+0x2c8>)
 8011564:	21ef      	movs	r1, #239	@ 0xef
 8011566:	48a7      	ldr	r0, [pc, #668]	@ (8011804 <_dtoa_r+0x2cc>)
 8011568:	f001 fb94 	bl	8012c94 <__assert_func>
 801156c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011570:	6007      	str	r7, [r0, #0]
 8011572:	60c7      	str	r7, [r0, #12]
 8011574:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011578:	6819      	ldr	r1, [r3, #0]
 801157a:	b159      	cbz	r1, 8011594 <_dtoa_r+0x5c>
 801157c:	685a      	ldr	r2, [r3, #4]
 801157e:	604a      	str	r2, [r1, #4]
 8011580:	2301      	movs	r3, #1
 8011582:	4093      	lsls	r3, r2
 8011584:	608b      	str	r3, [r1, #8]
 8011586:	4658      	mov	r0, fp
 8011588:	f000 fe24 	bl	80121d4 <_Bfree>
 801158c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011590:	2200      	movs	r2, #0
 8011592:	601a      	str	r2, [r3, #0]
 8011594:	1e2b      	subs	r3, r5, #0
 8011596:	bfb9      	ittee	lt
 8011598:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801159c:	9303      	strlt	r3, [sp, #12]
 801159e:	2300      	movge	r3, #0
 80115a0:	6033      	strge	r3, [r6, #0]
 80115a2:	9f03      	ldr	r7, [sp, #12]
 80115a4:	4b98      	ldr	r3, [pc, #608]	@ (8011808 <_dtoa_r+0x2d0>)
 80115a6:	bfbc      	itt	lt
 80115a8:	2201      	movlt	r2, #1
 80115aa:	6032      	strlt	r2, [r6, #0]
 80115ac:	43bb      	bics	r3, r7
 80115ae:	d112      	bne.n	80115d6 <_dtoa_r+0x9e>
 80115b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80115b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80115b6:	6013      	str	r3, [r2, #0]
 80115b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80115bc:	4323      	orrs	r3, r4
 80115be:	f000 854d 	beq.w	801205c <_dtoa_r+0xb24>
 80115c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80115c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801181c <_dtoa_r+0x2e4>
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	f000 854f 	beq.w	801206c <_dtoa_r+0xb34>
 80115ce:	f10a 0303 	add.w	r3, sl, #3
 80115d2:	f000 bd49 	b.w	8012068 <_dtoa_r+0xb30>
 80115d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80115da:	2200      	movs	r2, #0
 80115dc:	ec51 0b17 	vmov	r0, r1, d7
 80115e0:	2300      	movs	r3, #0
 80115e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80115e6:	f7ef fa77 	bl	8000ad8 <__aeabi_dcmpeq>
 80115ea:	4680      	mov	r8, r0
 80115ec:	b158      	cbz	r0, 8011606 <_dtoa_r+0xce>
 80115ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80115f0:	2301      	movs	r3, #1
 80115f2:	6013      	str	r3, [r2, #0]
 80115f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80115f6:	b113      	cbz	r3, 80115fe <_dtoa_r+0xc6>
 80115f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80115fa:	4b84      	ldr	r3, [pc, #528]	@ (801180c <_dtoa_r+0x2d4>)
 80115fc:	6013      	str	r3, [r2, #0]
 80115fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8011820 <_dtoa_r+0x2e8>
 8011602:	f000 bd33 	b.w	801206c <_dtoa_r+0xb34>
 8011606:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801160a:	aa16      	add	r2, sp, #88	@ 0x58
 801160c:	a917      	add	r1, sp, #92	@ 0x5c
 801160e:	4658      	mov	r0, fp
 8011610:	f001 f8ca 	bl	80127a8 <__d2b>
 8011614:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011618:	4681      	mov	r9, r0
 801161a:	2e00      	cmp	r6, #0
 801161c:	d077      	beq.n	801170e <_dtoa_r+0x1d6>
 801161e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011620:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8011624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011628:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801162c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011630:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8011634:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011638:	4619      	mov	r1, r3
 801163a:	2200      	movs	r2, #0
 801163c:	4b74      	ldr	r3, [pc, #464]	@ (8011810 <_dtoa_r+0x2d8>)
 801163e:	f7ee fe2b 	bl	8000298 <__aeabi_dsub>
 8011642:	a369      	add	r3, pc, #420	@ (adr r3, 80117e8 <_dtoa_r+0x2b0>)
 8011644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011648:	f7ee ffde 	bl	8000608 <__aeabi_dmul>
 801164c:	a368      	add	r3, pc, #416	@ (adr r3, 80117f0 <_dtoa_r+0x2b8>)
 801164e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011652:	f7ee fe23 	bl	800029c <__adddf3>
 8011656:	4604      	mov	r4, r0
 8011658:	4630      	mov	r0, r6
 801165a:	460d      	mov	r5, r1
 801165c:	f7ee ff6a 	bl	8000534 <__aeabi_i2d>
 8011660:	a365      	add	r3, pc, #404	@ (adr r3, 80117f8 <_dtoa_r+0x2c0>)
 8011662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011666:	f7ee ffcf 	bl	8000608 <__aeabi_dmul>
 801166a:	4602      	mov	r2, r0
 801166c:	460b      	mov	r3, r1
 801166e:	4620      	mov	r0, r4
 8011670:	4629      	mov	r1, r5
 8011672:	f7ee fe13 	bl	800029c <__adddf3>
 8011676:	4604      	mov	r4, r0
 8011678:	460d      	mov	r5, r1
 801167a:	f7ef fa75 	bl	8000b68 <__aeabi_d2iz>
 801167e:	2200      	movs	r2, #0
 8011680:	4607      	mov	r7, r0
 8011682:	2300      	movs	r3, #0
 8011684:	4620      	mov	r0, r4
 8011686:	4629      	mov	r1, r5
 8011688:	f7ef fa30 	bl	8000aec <__aeabi_dcmplt>
 801168c:	b140      	cbz	r0, 80116a0 <_dtoa_r+0x168>
 801168e:	4638      	mov	r0, r7
 8011690:	f7ee ff50 	bl	8000534 <__aeabi_i2d>
 8011694:	4622      	mov	r2, r4
 8011696:	462b      	mov	r3, r5
 8011698:	f7ef fa1e 	bl	8000ad8 <__aeabi_dcmpeq>
 801169c:	b900      	cbnz	r0, 80116a0 <_dtoa_r+0x168>
 801169e:	3f01      	subs	r7, #1
 80116a0:	2f16      	cmp	r7, #22
 80116a2:	d851      	bhi.n	8011748 <_dtoa_r+0x210>
 80116a4:	4b5b      	ldr	r3, [pc, #364]	@ (8011814 <_dtoa_r+0x2dc>)
 80116a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80116aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80116b2:	f7ef fa1b 	bl	8000aec <__aeabi_dcmplt>
 80116b6:	2800      	cmp	r0, #0
 80116b8:	d048      	beq.n	801174c <_dtoa_r+0x214>
 80116ba:	3f01      	subs	r7, #1
 80116bc:	2300      	movs	r3, #0
 80116be:	9312      	str	r3, [sp, #72]	@ 0x48
 80116c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80116c2:	1b9b      	subs	r3, r3, r6
 80116c4:	1e5a      	subs	r2, r3, #1
 80116c6:	bf44      	itt	mi
 80116c8:	f1c3 0801 	rsbmi	r8, r3, #1
 80116cc:	2300      	movmi	r3, #0
 80116ce:	9208      	str	r2, [sp, #32]
 80116d0:	bf54      	ite	pl
 80116d2:	f04f 0800 	movpl.w	r8, #0
 80116d6:	9308      	strmi	r3, [sp, #32]
 80116d8:	2f00      	cmp	r7, #0
 80116da:	db39      	blt.n	8011750 <_dtoa_r+0x218>
 80116dc:	9b08      	ldr	r3, [sp, #32]
 80116de:	970f      	str	r7, [sp, #60]	@ 0x3c
 80116e0:	443b      	add	r3, r7
 80116e2:	9308      	str	r3, [sp, #32]
 80116e4:	2300      	movs	r3, #0
 80116e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80116e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116ea:	2b09      	cmp	r3, #9
 80116ec:	d864      	bhi.n	80117b8 <_dtoa_r+0x280>
 80116ee:	2b05      	cmp	r3, #5
 80116f0:	bfc4      	itt	gt
 80116f2:	3b04      	subgt	r3, #4
 80116f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80116f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116f8:	f1a3 0302 	sub.w	r3, r3, #2
 80116fc:	bfcc      	ite	gt
 80116fe:	2400      	movgt	r4, #0
 8011700:	2401      	movle	r4, #1
 8011702:	2b03      	cmp	r3, #3
 8011704:	d863      	bhi.n	80117ce <_dtoa_r+0x296>
 8011706:	e8df f003 	tbb	[pc, r3]
 801170a:	372a      	.short	0x372a
 801170c:	5535      	.short	0x5535
 801170e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8011712:	441e      	add	r6, r3
 8011714:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011718:	2b20      	cmp	r3, #32
 801171a:	bfc1      	itttt	gt
 801171c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011720:	409f      	lslgt	r7, r3
 8011722:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8011726:	fa24 f303 	lsrgt.w	r3, r4, r3
 801172a:	bfd6      	itet	le
 801172c:	f1c3 0320 	rsble	r3, r3, #32
 8011730:	ea47 0003 	orrgt.w	r0, r7, r3
 8011734:	fa04 f003 	lslle.w	r0, r4, r3
 8011738:	f7ee feec 	bl	8000514 <__aeabi_ui2d>
 801173c:	2201      	movs	r2, #1
 801173e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8011742:	3e01      	subs	r6, #1
 8011744:	9214      	str	r2, [sp, #80]	@ 0x50
 8011746:	e777      	b.n	8011638 <_dtoa_r+0x100>
 8011748:	2301      	movs	r3, #1
 801174a:	e7b8      	b.n	80116be <_dtoa_r+0x186>
 801174c:	9012      	str	r0, [sp, #72]	@ 0x48
 801174e:	e7b7      	b.n	80116c0 <_dtoa_r+0x188>
 8011750:	427b      	negs	r3, r7
 8011752:	930a      	str	r3, [sp, #40]	@ 0x28
 8011754:	2300      	movs	r3, #0
 8011756:	eba8 0807 	sub.w	r8, r8, r7
 801175a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801175c:	e7c4      	b.n	80116e8 <_dtoa_r+0x1b0>
 801175e:	2300      	movs	r3, #0
 8011760:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011762:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011764:	2b00      	cmp	r3, #0
 8011766:	dc35      	bgt.n	80117d4 <_dtoa_r+0x29c>
 8011768:	2301      	movs	r3, #1
 801176a:	9300      	str	r3, [sp, #0]
 801176c:	9307      	str	r3, [sp, #28]
 801176e:	461a      	mov	r2, r3
 8011770:	920e      	str	r2, [sp, #56]	@ 0x38
 8011772:	e00b      	b.n	801178c <_dtoa_r+0x254>
 8011774:	2301      	movs	r3, #1
 8011776:	e7f3      	b.n	8011760 <_dtoa_r+0x228>
 8011778:	2300      	movs	r3, #0
 801177a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801177c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801177e:	18fb      	adds	r3, r7, r3
 8011780:	9300      	str	r3, [sp, #0]
 8011782:	3301      	adds	r3, #1
 8011784:	2b01      	cmp	r3, #1
 8011786:	9307      	str	r3, [sp, #28]
 8011788:	bfb8      	it	lt
 801178a:	2301      	movlt	r3, #1
 801178c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8011790:	2100      	movs	r1, #0
 8011792:	2204      	movs	r2, #4
 8011794:	f102 0514 	add.w	r5, r2, #20
 8011798:	429d      	cmp	r5, r3
 801179a:	d91f      	bls.n	80117dc <_dtoa_r+0x2a4>
 801179c:	6041      	str	r1, [r0, #4]
 801179e:	4658      	mov	r0, fp
 80117a0:	f000 fcd8 	bl	8012154 <_Balloc>
 80117a4:	4682      	mov	sl, r0
 80117a6:	2800      	cmp	r0, #0
 80117a8:	d13c      	bne.n	8011824 <_dtoa_r+0x2ec>
 80117aa:	4b1b      	ldr	r3, [pc, #108]	@ (8011818 <_dtoa_r+0x2e0>)
 80117ac:	4602      	mov	r2, r0
 80117ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80117b2:	e6d8      	b.n	8011566 <_dtoa_r+0x2e>
 80117b4:	2301      	movs	r3, #1
 80117b6:	e7e0      	b.n	801177a <_dtoa_r+0x242>
 80117b8:	2401      	movs	r4, #1
 80117ba:	2300      	movs	r3, #0
 80117bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80117be:	940b      	str	r4, [sp, #44]	@ 0x2c
 80117c0:	f04f 33ff 	mov.w	r3, #4294967295
 80117c4:	9300      	str	r3, [sp, #0]
 80117c6:	9307      	str	r3, [sp, #28]
 80117c8:	2200      	movs	r2, #0
 80117ca:	2312      	movs	r3, #18
 80117cc:	e7d0      	b.n	8011770 <_dtoa_r+0x238>
 80117ce:	2301      	movs	r3, #1
 80117d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80117d2:	e7f5      	b.n	80117c0 <_dtoa_r+0x288>
 80117d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80117d6:	9300      	str	r3, [sp, #0]
 80117d8:	9307      	str	r3, [sp, #28]
 80117da:	e7d7      	b.n	801178c <_dtoa_r+0x254>
 80117dc:	3101      	adds	r1, #1
 80117de:	0052      	lsls	r2, r2, #1
 80117e0:	e7d8      	b.n	8011794 <_dtoa_r+0x25c>
 80117e2:	bf00      	nop
 80117e4:	f3af 8000 	nop.w
 80117e8:	636f4361 	.word	0x636f4361
 80117ec:	3fd287a7 	.word	0x3fd287a7
 80117f0:	8b60c8b3 	.word	0x8b60c8b3
 80117f4:	3fc68a28 	.word	0x3fc68a28
 80117f8:	509f79fb 	.word	0x509f79fb
 80117fc:	3fd34413 	.word	0x3fd34413
 8011800:	08013cd9 	.word	0x08013cd9
 8011804:	08013cf0 	.word	0x08013cf0
 8011808:	7ff00000 	.word	0x7ff00000
 801180c:	08013ca9 	.word	0x08013ca9
 8011810:	3ff80000 	.word	0x3ff80000
 8011814:	08013de8 	.word	0x08013de8
 8011818:	08013d48 	.word	0x08013d48
 801181c:	08013cd5 	.word	0x08013cd5
 8011820:	08013ca8 	.word	0x08013ca8
 8011824:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011828:	6018      	str	r0, [r3, #0]
 801182a:	9b07      	ldr	r3, [sp, #28]
 801182c:	2b0e      	cmp	r3, #14
 801182e:	f200 80a4 	bhi.w	801197a <_dtoa_r+0x442>
 8011832:	2c00      	cmp	r4, #0
 8011834:	f000 80a1 	beq.w	801197a <_dtoa_r+0x442>
 8011838:	2f00      	cmp	r7, #0
 801183a:	dd33      	ble.n	80118a4 <_dtoa_r+0x36c>
 801183c:	4bad      	ldr	r3, [pc, #692]	@ (8011af4 <_dtoa_r+0x5bc>)
 801183e:	f007 020f 	and.w	r2, r7, #15
 8011842:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011846:	ed93 7b00 	vldr	d7, [r3]
 801184a:	05f8      	lsls	r0, r7, #23
 801184c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011850:	ea4f 1427 	mov.w	r4, r7, asr #4
 8011854:	d516      	bpl.n	8011884 <_dtoa_r+0x34c>
 8011856:	4ba8      	ldr	r3, [pc, #672]	@ (8011af8 <_dtoa_r+0x5c0>)
 8011858:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801185c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011860:	f7ee fffc 	bl	800085c <__aeabi_ddiv>
 8011864:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011868:	f004 040f 	and.w	r4, r4, #15
 801186c:	2603      	movs	r6, #3
 801186e:	4da2      	ldr	r5, [pc, #648]	@ (8011af8 <_dtoa_r+0x5c0>)
 8011870:	b954      	cbnz	r4, 8011888 <_dtoa_r+0x350>
 8011872:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801187a:	f7ee ffef 	bl	800085c <__aeabi_ddiv>
 801187e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011882:	e028      	b.n	80118d6 <_dtoa_r+0x39e>
 8011884:	2602      	movs	r6, #2
 8011886:	e7f2      	b.n	801186e <_dtoa_r+0x336>
 8011888:	07e1      	lsls	r1, r4, #31
 801188a:	d508      	bpl.n	801189e <_dtoa_r+0x366>
 801188c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011890:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011894:	f7ee feb8 	bl	8000608 <__aeabi_dmul>
 8011898:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801189c:	3601      	adds	r6, #1
 801189e:	1064      	asrs	r4, r4, #1
 80118a0:	3508      	adds	r5, #8
 80118a2:	e7e5      	b.n	8011870 <_dtoa_r+0x338>
 80118a4:	f000 80d2 	beq.w	8011a4c <_dtoa_r+0x514>
 80118a8:	427c      	negs	r4, r7
 80118aa:	4b92      	ldr	r3, [pc, #584]	@ (8011af4 <_dtoa_r+0x5bc>)
 80118ac:	4d92      	ldr	r5, [pc, #584]	@ (8011af8 <_dtoa_r+0x5c0>)
 80118ae:	f004 020f 	and.w	r2, r4, #15
 80118b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80118b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80118be:	f7ee fea3 	bl	8000608 <__aeabi_dmul>
 80118c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80118c6:	1124      	asrs	r4, r4, #4
 80118c8:	2300      	movs	r3, #0
 80118ca:	2602      	movs	r6, #2
 80118cc:	2c00      	cmp	r4, #0
 80118ce:	f040 80b2 	bne.w	8011a36 <_dtoa_r+0x4fe>
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d1d3      	bne.n	801187e <_dtoa_r+0x346>
 80118d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80118d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	f000 80b7 	beq.w	8011a50 <_dtoa_r+0x518>
 80118e2:	4b86      	ldr	r3, [pc, #536]	@ (8011afc <_dtoa_r+0x5c4>)
 80118e4:	2200      	movs	r2, #0
 80118e6:	4620      	mov	r0, r4
 80118e8:	4629      	mov	r1, r5
 80118ea:	f7ef f8ff 	bl	8000aec <__aeabi_dcmplt>
 80118ee:	2800      	cmp	r0, #0
 80118f0:	f000 80ae 	beq.w	8011a50 <_dtoa_r+0x518>
 80118f4:	9b07      	ldr	r3, [sp, #28]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	f000 80aa 	beq.w	8011a50 <_dtoa_r+0x518>
 80118fc:	9b00      	ldr	r3, [sp, #0]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	dd37      	ble.n	8011972 <_dtoa_r+0x43a>
 8011902:	1e7b      	subs	r3, r7, #1
 8011904:	9304      	str	r3, [sp, #16]
 8011906:	4620      	mov	r0, r4
 8011908:	4b7d      	ldr	r3, [pc, #500]	@ (8011b00 <_dtoa_r+0x5c8>)
 801190a:	2200      	movs	r2, #0
 801190c:	4629      	mov	r1, r5
 801190e:	f7ee fe7b 	bl	8000608 <__aeabi_dmul>
 8011912:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011916:	9c00      	ldr	r4, [sp, #0]
 8011918:	3601      	adds	r6, #1
 801191a:	4630      	mov	r0, r6
 801191c:	f7ee fe0a 	bl	8000534 <__aeabi_i2d>
 8011920:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011924:	f7ee fe70 	bl	8000608 <__aeabi_dmul>
 8011928:	4b76      	ldr	r3, [pc, #472]	@ (8011b04 <_dtoa_r+0x5cc>)
 801192a:	2200      	movs	r2, #0
 801192c:	f7ee fcb6 	bl	800029c <__adddf3>
 8011930:	4605      	mov	r5, r0
 8011932:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011936:	2c00      	cmp	r4, #0
 8011938:	f040 808d 	bne.w	8011a56 <_dtoa_r+0x51e>
 801193c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011940:	4b71      	ldr	r3, [pc, #452]	@ (8011b08 <_dtoa_r+0x5d0>)
 8011942:	2200      	movs	r2, #0
 8011944:	f7ee fca8 	bl	8000298 <__aeabi_dsub>
 8011948:	4602      	mov	r2, r0
 801194a:	460b      	mov	r3, r1
 801194c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011950:	462a      	mov	r2, r5
 8011952:	4633      	mov	r3, r6
 8011954:	f7ef f8e8 	bl	8000b28 <__aeabi_dcmpgt>
 8011958:	2800      	cmp	r0, #0
 801195a:	f040 828b 	bne.w	8011e74 <_dtoa_r+0x93c>
 801195e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011962:	462a      	mov	r2, r5
 8011964:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011968:	f7ef f8c0 	bl	8000aec <__aeabi_dcmplt>
 801196c:	2800      	cmp	r0, #0
 801196e:	f040 8128 	bne.w	8011bc2 <_dtoa_r+0x68a>
 8011972:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8011976:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801197a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801197c:	2b00      	cmp	r3, #0
 801197e:	f2c0 815a 	blt.w	8011c36 <_dtoa_r+0x6fe>
 8011982:	2f0e      	cmp	r7, #14
 8011984:	f300 8157 	bgt.w	8011c36 <_dtoa_r+0x6fe>
 8011988:	4b5a      	ldr	r3, [pc, #360]	@ (8011af4 <_dtoa_r+0x5bc>)
 801198a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801198e:	ed93 7b00 	vldr	d7, [r3]
 8011992:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011994:	2b00      	cmp	r3, #0
 8011996:	ed8d 7b00 	vstr	d7, [sp]
 801199a:	da03      	bge.n	80119a4 <_dtoa_r+0x46c>
 801199c:	9b07      	ldr	r3, [sp, #28]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	f340 8101 	ble.w	8011ba6 <_dtoa_r+0x66e>
 80119a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80119a8:	4656      	mov	r6, sl
 80119aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80119ae:	4620      	mov	r0, r4
 80119b0:	4629      	mov	r1, r5
 80119b2:	f7ee ff53 	bl	800085c <__aeabi_ddiv>
 80119b6:	f7ef f8d7 	bl	8000b68 <__aeabi_d2iz>
 80119ba:	4680      	mov	r8, r0
 80119bc:	f7ee fdba 	bl	8000534 <__aeabi_i2d>
 80119c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80119c4:	f7ee fe20 	bl	8000608 <__aeabi_dmul>
 80119c8:	4602      	mov	r2, r0
 80119ca:	460b      	mov	r3, r1
 80119cc:	4620      	mov	r0, r4
 80119ce:	4629      	mov	r1, r5
 80119d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80119d4:	f7ee fc60 	bl	8000298 <__aeabi_dsub>
 80119d8:	f806 4b01 	strb.w	r4, [r6], #1
 80119dc:	9d07      	ldr	r5, [sp, #28]
 80119de:	eba6 040a 	sub.w	r4, r6, sl
 80119e2:	42a5      	cmp	r5, r4
 80119e4:	4602      	mov	r2, r0
 80119e6:	460b      	mov	r3, r1
 80119e8:	f040 8117 	bne.w	8011c1a <_dtoa_r+0x6e2>
 80119ec:	f7ee fc56 	bl	800029c <__adddf3>
 80119f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80119f4:	4604      	mov	r4, r0
 80119f6:	460d      	mov	r5, r1
 80119f8:	f7ef f896 	bl	8000b28 <__aeabi_dcmpgt>
 80119fc:	2800      	cmp	r0, #0
 80119fe:	f040 80f9 	bne.w	8011bf4 <_dtoa_r+0x6bc>
 8011a02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011a06:	4620      	mov	r0, r4
 8011a08:	4629      	mov	r1, r5
 8011a0a:	f7ef f865 	bl	8000ad8 <__aeabi_dcmpeq>
 8011a0e:	b118      	cbz	r0, 8011a18 <_dtoa_r+0x4e0>
 8011a10:	f018 0f01 	tst.w	r8, #1
 8011a14:	f040 80ee 	bne.w	8011bf4 <_dtoa_r+0x6bc>
 8011a18:	4649      	mov	r1, r9
 8011a1a:	4658      	mov	r0, fp
 8011a1c:	f000 fbda 	bl	80121d4 <_Bfree>
 8011a20:	2300      	movs	r3, #0
 8011a22:	7033      	strb	r3, [r6, #0]
 8011a24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011a26:	3701      	adds	r7, #1
 8011a28:	601f      	str	r7, [r3, #0]
 8011a2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	f000 831d 	beq.w	801206c <_dtoa_r+0xb34>
 8011a32:	601e      	str	r6, [r3, #0]
 8011a34:	e31a      	b.n	801206c <_dtoa_r+0xb34>
 8011a36:	07e2      	lsls	r2, r4, #31
 8011a38:	d505      	bpl.n	8011a46 <_dtoa_r+0x50e>
 8011a3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011a3e:	f7ee fde3 	bl	8000608 <__aeabi_dmul>
 8011a42:	3601      	adds	r6, #1
 8011a44:	2301      	movs	r3, #1
 8011a46:	1064      	asrs	r4, r4, #1
 8011a48:	3508      	adds	r5, #8
 8011a4a:	e73f      	b.n	80118cc <_dtoa_r+0x394>
 8011a4c:	2602      	movs	r6, #2
 8011a4e:	e742      	b.n	80118d6 <_dtoa_r+0x39e>
 8011a50:	9c07      	ldr	r4, [sp, #28]
 8011a52:	9704      	str	r7, [sp, #16]
 8011a54:	e761      	b.n	801191a <_dtoa_r+0x3e2>
 8011a56:	4b27      	ldr	r3, [pc, #156]	@ (8011af4 <_dtoa_r+0x5bc>)
 8011a58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011a5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011a5e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011a62:	4454      	add	r4, sl
 8011a64:	2900      	cmp	r1, #0
 8011a66:	d053      	beq.n	8011b10 <_dtoa_r+0x5d8>
 8011a68:	4928      	ldr	r1, [pc, #160]	@ (8011b0c <_dtoa_r+0x5d4>)
 8011a6a:	2000      	movs	r0, #0
 8011a6c:	f7ee fef6 	bl	800085c <__aeabi_ddiv>
 8011a70:	4633      	mov	r3, r6
 8011a72:	462a      	mov	r2, r5
 8011a74:	f7ee fc10 	bl	8000298 <__aeabi_dsub>
 8011a78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011a7c:	4656      	mov	r6, sl
 8011a7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a82:	f7ef f871 	bl	8000b68 <__aeabi_d2iz>
 8011a86:	4605      	mov	r5, r0
 8011a88:	f7ee fd54 	bl	8000534 <__aeabi_i2d>
 8011a8c:	4602      	mov	r2, r0
 8011a8e:	460b      	mov	r3, r1
 8011a90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a94:	f7ee fc00 	bl	8000298 <__aeabi_dsub>
 8011a98:	3530      	adds	r5, #48	@ 0x30
 8011a9a:	4602      	mov	r2, r0
 8011a9c:	460b      	mov	r3, r1
 8011a9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011aa2:	f806 5b01 	strb.w	r5, [r6], #1
 8011aa6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011aaa:	f7ef f81f 	bl	8000aec <__aeabi_dcmplt>
 8011aae:	2800      	cmp	r0, #0
 8011ab0:	d171      	bne.n	8011b96 <_dtoa_r+0x65e>
 8011ab2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011ab6:	4911      	ldr	r1, [pc, #68]	@ (8011afc <_dtoa_r+0x5c4>)
 8011ab8:	2000      	movs	r0, #0
 8011aba:	f7ee fbed 	bl	8000298 <__aeabi_dsub>
 8011abe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011ac2:	f7ef f813 	bl	8000aec <__aeabi_dcmplt>
 8011ac6:	2800      	cmp	r0, #0
 8011ac8:	f040 8095 	bne.w	8011bf6 <_dtoa_r+0x6be>
 8011acc:	42a6      	cmp	r6, r4
 8011ace:	f43f af50 	beq.w	8011972 <_dtoa_r+0x43a>
 8011ad2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8011b00 <_dtoa_r+0x5c8>)
 8011ad8:	2200      	movs	r2, #0
 8011ada:	f7ee fd95 	bl	8000608 <__aeabi_dmul>
 8011ade:	4b08      	ldr	r3, [pc, #32]	@ (8011b00 <_dtoa_r+0x5c8>)
 8011ae0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011ae4:	2200      	movs	r2, #0
 8011ae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011aea:	f7ee fd8d 	bl	8000608 <__aeabi_dmul>
 8011aee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011af2:	e7c4      	b.n	8011a7e <_dtoa_r+0x546>
 8011af4:	08013de8 	.word	0x08013de8
 8011af8:	08013dc0 	.word	0x08013dc0
 8011afc:	3ff00000 	.word	0x3ff00000
 8011b00:	40240000 	.word	0x40240000
 8011b04:	401c0000 	.word	0x401c0000
 8011b08:	40140000 	.word	0x40140000
 8011b0c:	3fe00000 	.word	0x3fe00000
 8011b10:	4631      	mov	r1, r6
 8011b12:	4628      	mov	r0, r5
 8011b14:	f7ee fd78 	bl	8000608 <__aeabi_dmul>
 8011b18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011b1c:	9415      	str	r4, [sp, #84]	@ 0x54
 8011b1e:	4656      	mov	r6, sl
 8011b20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011b24:	f7ef f820 	bl	8000b68 <__aeabi_d2iz>
 8011b28:	4605      	mov	r5, r0
 8011b2a:	f7ee fd03 	bl	8000534 <__aeabi_i2d>
 8011b2e:	4602      	mov	r2, r0
 8011b30:	460b      	mov	r3, r1
 8011b32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011b36:	f7ee fbaf 	bl	8000298 <__aeabi_dsub>
 8011b3a:	3530      	adds	r5, #48	@ 0x30
 8011b3c:	f806 5b01 	strb.w	r5, [r6], #1
 8011b40:	4602      	mov	r2, r0
 8011b42:	460b      	mov	r3, r1
 8011b44:	42a6      	cmp	r6, r4
 8011b46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011b4a:	f04f 0200 	mov.w	r2, #0
 8011b4e:	d124      	bne.n	8011b9a <_dtoa_r+0x662>
 8011b50:	4bac      	ldr	r3, [pc, #688]	@ (8011e04 <_dtoa_r+0x8cc>)
 8011b52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011b56:	f7ee fba1 	bl	800029c <__adddf3>
 8011b5a:	4602      	mov	r2, r0
 8011b5c:	460b      	mov	r3, r1
 8011b5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011b62:	f7ee ffe1 	bl	8000b28 <__aeabi_dcmpgt>
 8011b66:	2800      	cmp	r0, #0
 8011b68:	d145      	bne.n	8011bf6 <_dtoa_r+0x6be>
 8011b6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011b6e:	49a5      	ldr	r1, [pc, #660]	@ (8011e04 <_dtoa_r+0x8cc>)
 8011b70:	2000      	movs	r0, #0
 8011b72:	f7ee fb91 	bl	8000298 <__aeabi_dsub>
 8011b76:	4602      	mov	r2, r0
 8011b78:	460b      	mov	r3, r1
 8011b7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011b7e:	f7ee ffb5 	bl	8000aec <__aeabi_dcmplt>
 8011b82:	2800      	cmp	r0, #0
 8011b84:	f43f aef5 	beq.w	8011972 <_dtoa_r+0x43a>
 8011b88:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8011b8a:	1e73      	subs	r3, r6, #1
 8011b8c:	9315      	str	r3, [sp, #84]	@ 0x54
 8011b8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011b92:	2b30      	cmp	r3, #48	@ 0x30
 8011b94:	d0f8      	beq.n	8011b88 <_dtoa_r+0x650>
 8011b96:	9f04      	ldr	r7, [sp, #16]
 8011b98:	e73e      	b.n	8011a18 <_dtoa_r+0x4e0>
 8011b9a:	4b9b      	ldr	r3, [pc, #620]	@ (8011e08 <_dtoa_r+0x8d0>)
 8011b9c:	f7ee fd34 	bl	8000608 <__aeabi_dmul>
 8011ba0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011ba4:	e7bc      	b.n	8011b20 <_dtoa_r+0x5e8>
 8011ba6:	d10c      	bne.n	8011bc2 <_dtoa_r+0x68a>
 8011ba8:	4b98      	ldr	r3, [pc, #608]	@ (8011e0c <_dtoa_r+0x8d4>)
 8011baa:	2200      	movs	r2, #0
 8011bac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011bb0:	f7ee fd2a 	bl	8000608 <__aeabi_dmul>
 8011bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011bb8:	f7ee ffac 	bl	8000b14 <__aeabi_dcmpge>
 8011bbc:	2800      	cmp	r0, #0
 8011bbe:	f000 8157 	beq.w	8011e70 <_dtoa_r+0x938>
 8011bc2:	2400      	movs	r4, #0
 8011bc4:	4625      	mov	r5, r4
 8011bc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011bc8:	43db      	mvns	r3, r3
 8011bca:	9304      	str	r3, [sp, #16]
 8011bcc:	4656      	mov	r6, sl
 8011bce:	2700      	movs	r7, #0
 8011bd0:	4621      	mov	r1, r4
 8011bd2:	4658      	mov	r0, fp
 8011bd4:	f000 fafe 	bl	80121d4 <_Bfree>
 8011bd8:	2d00      	cmp	r5, #0
 8011bda:	d0dc      	beq.n	8011b96 <_dtoa_r+0x65e>
 8011bdc:	b12f      	cbz	r7, 8011bea <_dtoa_r+0x6b2>
 8011bde:	42af      	cmp	r7, r5
 8011be0:	d003      	beq.n	8011bea <_dtoa_r+0x6b2>
 8011be2:	4639      	mov	r1, r7
 8011be4:	4658      	mov	r0, fp
 8011be6:	f000 faf5 	bl	80121d4 <_Bfree>
 8011bea:	4629      	mov	r1, r5
 8011bec:	4658      	mov	r0, fp
 8011bee:	f000 faf1 	bl	80121d4 <_Bfree>
 8011bf2:	e7d0      	b.n	8011b96 <_dtoa_r+0x65e>
 8011bf4:	9704      	str	r7, [sp, #16]
 8011bf6:	4633      	mov	r3, r6
 8011bf8:	461e      	mov	r6, r3
 8011bfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011bfe:	2a39      	cmp	r2, #57	@ 0x39
 8011c00:	d107      	bne.n	8011c12 <_dtoa_r+0x6da>
 8011c02:	459a      	cmp	sl, r3
 8011c04:	d1f8      	bne.n	8011bf8 <_dtoa_r+0x6c0>
 8011c06:	9a04      	ldr	r2, [sp, #16]
 8011c08:	3201      	adds	r2, #1
 8011c0a:	9204      	str	r2, [sp, #16]
 8011c0c:	2230      	movs	r2, #48	@ 0x30
 8011c0e:	f88a 2000 	strb.w	r2, [sl]
 8011c12:	781a      	ldrb	r2, [r3, #0]
 8011c14:	3201      	adds	r2, #1
 8011c16:	701a      	strb	r2, [r3, #0]
 8011c18:	e7bd      	b.n	8011b96 <_dtoa_r+0x65e>
 8011c1a:	4b7b      	ldr	r3, [pc, #492]	@ (8011e08 <_dtoa_r+0x8d0>)
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	f7ee fcf3 	bl	8000608 <__aeabi_dmul>
 8011c22:	2200      	movs	r2, #0
 8011c24:	2300      	movs	r3, #0
 8011c26:	4604      	mov	r4, r0
 8011c28:	460d      	mov	r5, r1
 8011c2a:	f7ee ff55 	bl	8000ad8 <__aeabi_dcmpeq>
 8011c2e:	2800      	cmp	r0, #0
 8011c30:	f43f aebb 	beq.w	80119aa <_dtoa_r+0x472>
 8011c34:	e6f0      	b.n	8011a18 <_dtoa_r+0x4e0>
 8011c36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011c38:	2a00      	cmp	r2, #0
 8011c3a:	f000 80db 	beq.w	8011df4 <_dtoa_r+0x8bc>
 8011c3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011c40:	2a01      	cmp	r2, #1
 8011c42:	f300 80bf 	bgt.w	8011dc4 <_dtoa_r+0x88c>
 8011c46:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011c48:	2a00      	cmp	r2, #0
 8011c4a:	f000 80b7 	beq.w	8011dbc <_dtoa_r+0x884>
 8011c4e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011c52:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011c54:	4646      	mov	r6, r8
 8011c56:	9a08      	ldr	r2, [sp, #32]
 8011c58:	2101      	movs	r1, #1
 8011c5a:	441a      	add	r2, r3
 8011c5c:	4658      	mov	r0, fp
 8011c5e:	4498      	add	r8, r3
 8011c60:	9208      	str	r2, [sp, #32]
 8011c62:	f000 fb6b 	bl	801233c <__i2b>
 8011c66:	4605      	mov	r5, r0
 8011c68:	b15e      	cbz	r6, 8011c82 <_dtoa_r+0x74a>
 8011c6a:	9b08      	ldr	r3, [sp, #32]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	dd08      	ble.n	8011c82 <_dtoa_r+0x74a>
 8011c70:	42b3      	cmp	r3, r6
 8011c72:	9a08      	ldr	r2, [sp, #32]
 8011c74:	bfa8      	it	ge
 8011c76:	4633      	movge	r3, r6
 8011c78:	eba8 0803 	sub.w	r8, r8, r3
 8011c7c:	1af6      	subs	r6, r6, r3
 8011c7e:	1ad3      	subs	r3, r2, r3
 8011c80:	9308      	str	r3, [sp, #32]
 8011c82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011c84:	b1f3      	cbz	r3, 8011cc4 <_dtoa_r+0x78c>
 8011c86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	f000 80b7 	beq.w	8011dfc <_dtoa_r+0x8c4>
 8011c8e:	b18c      	cbz	r4, 8011cb4 <_dtoa_r+0x77c>
 8011c90:	4629      	mov	r1, r5
 8011c92:	4622      	mov	r2, r4
 8011c94:	4658      	mov	r0, fp
 8011c96:	f000 fc11 	bl	80124bc <__pow5mult>
 8011c9a:	464a      	mov	r2, r9
 8011c9c:	4601      	mov	r1, r0
 8011c9e:	4605      	mov	r5, r0
 8011ca0:	4658      	mov	r0, fp
 8011ca2:	f000 fb61 	bl	8012368 <__multiply>
 8011ca6:	4649      	mov	r1, r9
 8011ca8:	9004      	str	r0, [sp, #16]
 8011caa:	4658      	mov	r0, fp
 8011cac:	f000 fa92 	bl	80121d4 <_Bfree>
 8011cb0:	9b04      	ldr	r3, [sp, #16]
 8011cb2:	4699      	mov	r9, r3
 8011cb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011cb6:	1b1a      	subs	r2, r3, r4
 8011cb8:	d004      	beq.n	8011cc4 <_dtoa_r+0x78c>
 8011cba:	4649      	mov	r1, r9
 8011cbc:	4658      	mov	r0, fp
 8011cbe:	f000 fbfd 	bl	80124bc <__pow5mult>
 8011cc2:	4681      	mov	r9, r0
 8011cc4:	2101      	movs	r1, #1
 8011cc6:	4658      	mov	r0, fp
 8011cc8:	f000 fb38 	bl	801233c <__i2b>
 8011ccc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011cce:	4604      	mov	r4, r0
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	f000 81cf 	beq.w	8012074 <_dtoa_r+0xb3c>
 8011cd6:	461a      	mov	r2, r3
 8011cd8:	4601      	mov	r1, r0
 8011cda:	4658      	mov	r0, fp
 8011cdc:	f000 fbee 	bl	80124bc <__pow5mult>
 8011ce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ce2:	2b01      	cmp	r3, #1
 8011ce4:	4604      	mov	r4, r0
 8011ce6:	f300 8095 	bgt.w	8011e14 <_dtoa_r+0x8dc>
 8011cea:	9b02      	ldr	r3, [sp, #8]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	f040 8087 	bne.w	8011e00 <_dtoa_r+0x8c8>
 8011cf2:	9b03      	ldr	r3, [sp, #12]
 8011cf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	f040 8089 	bne.w	8011e10 <_dtoa_r+0x8d8>
 8011cfe:	9b03      	ldr	r3, [sp, #12]
 8011d00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011d04:	0d1b      	lsrs	r3, r3, #20
 8011d06:	051b      	lsls	r3, r3, #20
 8011d08:	b12b      	cbz	r3, 8011d16 <_dtoa_r+0x7de>
 8011d0a:	9b08      	ldr	r3, [sp, #32]
 8011d0c:	3301      	adds	r3, #1
 8011d0e:	9308      	str	r3, [sp, #32]
 8011d10:	f108 0801 	add.w	r8, r8, #1
 8011d14:	2301      	movs	r3, #1
 8011d16:	930a      	str	r3, [sp, #40]	@ 0x28
 8011d18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	f000 81b0 	beq.w	8012080 <_dtoa_r+0xb48>
 8011d20:	6923      	ldr	r3, [r4, #16]
 8011d22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011d26:	6918      	ldr	r0, [r3, #16]
 8011d28:	f000 fabc 	bl	80122a4 <__hi0bits>
 8011d2c:	f1c0 0020 	rsb	r0, r0, #32
 8011d30:	9b08      	ldr	r3, [sp, #32]
 8011d32:	4418      	add	r0, r3
 8011d34:	f010 001f 	ands.w	r0, r0, #31
 8011d38:	d077      	beq.n	8011e2a <_dtoa_r+0x8f2>
 8011d3a:	f1c0 0320 	rsb	r3, r0, #32
 8011d3e:	2b04      	cmp	r3, #4
 8011d40:	dd6b      	ble.n	8011e1a <_dtoa_r+0x8e2>
 8011d42:	9b08      	ldr	r3, [sp, #32]
 8011d44:	f1c0 001c 	rsb	r0, r0, #28
 8011d48:	4403      	add	r3, r0
 8011d4a:	4480      	add	r8, r0
 8011d4c:	4406      	add	r6, r0
 8011d4e:	9308      	str	r3, [sp, #32]
 8011d50:	f1b8 0f00 	cmp.w	r8, #0
 8011d54:	dd05      	ble.n	8011d62 <_dtoa_r+0x82a>
 8011d56:	4649      	mov	r1, r9
 8011d58:	4642      	mov	r2, r8
 8011d5a:	4658      	mov	r0, fp
 8011d5c:	f000 fc08 	bl	8012570 <__lshift>
 8011d60:	4681      	mov	r9, r0
 8011d62:	9b08      	ldr	r3, [sp, #32]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	dd05      	ble.n	8011d74 <_dtoa_r+0x83c>
 8011d68:	4621      	mov	r1, r4
 8011d6a:	461a      	mov	r2, r3
 8011d6c:	4658      	mov	r0, fp
 8011d6e:	f000 fbff 	bl	8012570 <__lshift>
 8011d72:	4604      	mov	r4, r0
 8011d74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d059      	beq.n	8011e2e <_dtoa_r+0x8f6>
 8011d7a:	4621      	mov	r1, r4
 8011d7c:	4648      	mov	r0, r9
 8011d7e:	f000 fc63 	bl	8012648 <__mcmp>
 8011d82:	2800      	cmp	r0, #0
 8011d84:	da53      	bge.n	8011e2e <_dtoa_r+0x8f6>
 8011d86:	1e7b      	subs	r3, r7, #1
 8011d88:	9304      	str	r3, [sp, #16]
 8011d8a:	4649      	mov	r1, r9
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	220a      	movs	r2, #10
 8011d90:	4658      	mov	r0, fp
 8011d92:	f000 fa41 	bl	8012218 <__multadd>
 8011d96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011d98:	4681      	mov	r9, r0
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	f000 8172 	beq.w	8012084 <_dtoa_r+0xb4c>
 8011da0:	2300      	movs	r3, #0
 8011da2:	4629      	mov	r1, r5
 8011da4:	220a      	movs	r2, #10
 8011da6:	4658      	mov	r0, fp
 8011da8:	f000 fa36 	bl	8012218 <__multadd>
 8011dac:	9b00      	ldr	r3, [sp, #0]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	4605      	mov	r5, r0
 8011db2:	dc67      	bgt.n	8011e84 <_dtoa_r+0x94c>
 8011db4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011db6:	2b02      	cmp	r3, #2
 8011db8:	dc41      	bgt.n	8011e3e <_dtoa_r+0x906>
 8011dba:	e063      	b.n	8011e84 <_dtoa_r+0x94c>
 8011dbc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011dbe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8011dc2:	e746      	b.n	8011c52 <_dtoa_r+0x71a>
 8011dc4:	9b07      	ldr	r3, [sp, #28]
 8011dc6:	1e5c      	subs	r4, r3, #1
 8011dc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011dca:	42a3      	cmp	r3, r4
 8011dcc:	bfbf      	itttt	lt
 8011dce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011dd0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8011dd2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8011dd4:	1ae3      	sublt	r3, r4, r3
 8011dd6:	bfb4      	ite	lt
 8011dd8:	18d2      	addlt	r2, r2, r3
 8011dda:	1b1c      	subge	r4, r3, r4
 8011ddc:	9b07      	ldr	r3, [sp, #28]
 8011dde:	bfbc      	itt	lt
 8011de0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8011de2:	2400      	movlt	r4, #0
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	bfb5      	itete	lt
 8011de8:	eba8 0603 	sublt.w	r6, r8, r3
 8011dec:	9b07      	ldrge	r3, [sp, #28]
 8011dee:	2300      	movlt	r3, #0
 8011df0:	4646      	movge	r6, r8
 8011df2:	e730      	b.n	8011c56 <_dtoa_r+0x71e>
 8011df4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011df6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8011df8:	4646      	mov	r6, r8
 8011dfa:	e735      	b.n	8011c68 <_dtoa_r+0x730>
 8011dfc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011dfe:	e75c      	b.n	8011cba <_dtoa_r+0x782>
 8011e00:	2300      	movs	r3, #0
 8011e02:	e788      	b.n	8011d16 <_dtoa_r+0x7de>
 8011e04:	3fe00000 	.word	0x3fe00000
 8011e08:	40240000 	.word	0x40240000
 8011e0c:	40140000 	.word	0x40140000
 8011e10:	9b02      	ldr	r3, [sp, #8]
 8011e12:	e780      	b.n	8011d16 <_dtoa_r+0x7de>
 8011e14:	2300      	movs	r3, #0
 8011e16:	930a      	str	r3, [sp, #40]	@ 0x28
 8011e18:	e782      	b.n	8011d20 <_dtoa_r+0x7e8>
 8011e1a:	d099      	beq.n	8011d50 <_dtoa_r+0x818>
 8011e1c:	9a08      	ldr	r2, [sp, #32]
 8011e1e:	331c      	adds	r3, #28
 8011e20:	441a      	add	r2, r3
 8011e22:	4498      	add	r8, r3
 8011e24:	441e      	add	r6, r3
 8011e26:	9208      	str	r2, [sp, #32]
 8011e28:	e792      	b.n	8011d50 <_dtoa_r+0x818>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	e7f6      	b.n	8011e1c <_dtoa_r+0x8e4>
 8011e2e:	9b07      	ldr	r3, [sp, #28]
 8011e30:	9704      	str	r7, [sp, #16]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	dc20      	bgt.n	8011e78 <_dtoa_r+0x940>
 8011e36:	9300      	str	r3, [sp, #0]
 8011e38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e3a:	2b02      	cmp	r3, #2
 8011e3c:	dd1e      	ble.n	8011e7c <_dtoa_r+0x944>
 8011e3e:	9b00      	ldr	r3, [sp, #0]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	f47f aec0 	bne.w	8011bc6 <_dtoa_r+0x68e>
 8011e46:	4621      	mov	r1, r4
 8011e48:	2205      	movs	r2, #5
 8011e4a:	4658      	mov	r0, fp
 8011e4c:	f000 f9e4 	bl	8012218 <__multadd>
 8011e50:	4601      	mov	r1, r0
 8011e52:	4604      	mov	r4, r0
 8011e54:	4648      	mov	r0, r9
 8011e56:	f000 fbf7 	bl	8012648 <__mcmp>
 8011e5a:	2800      	cmp	r0, #0
 8011e5c:	f77f aeb3 	ble.w	8011bc6 <_dtoa_r+0x68e>
 8011e60:	4656      	mov	r6, sl
 8011e62:	2331      	movs	r3, #49	@ 0x31
 8011e64:	f806 3b01 	strb.w	r3, [r6], #1
 8011e68:	9b04      	ldr	r3, [sp, #16]
 8011e6a:	3301      	adds	r3, #1
 8011e6c:	9304      	str	r3, [sp, #16]
 8011e6e:	e6ae      	b.n	8011bce <_dtoa_r+0x696>
 8011e70:	9c07      	ldr	r4, [sp, #28]
 8011e72:	9704      	str	r7, [sp, #16]
 8011e74:	4625      	mov	r5, r4
 8011e76:	e7f3      	b.n	8011e60 <_dtoa_r+0x928>
 8011e78:	9b07      	ldr	r3, [sp, #28]
 8011e7a:	9300      	str	r3, [sp, #0]
 8011e7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	f000 8104 	beq.w	801208c <_dtoa_r+0xb54>
 8011e84:	2e00      	cmp	r6, #0
 8011e86:	dd05      	ble.n	8011e94 <_dtoa_r+0x95c>
 8011e88:	4629      	mov	r1, r5
 8011e8a:	4632      	mov	r2, r6
 8011e8c:	4658      	mov	r0, fp
 8011e8e:	f000 fb6f 	bl	8012570 <__lshift>
 8011e92:	4605      	mov	r5, r0
 8011e94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d05a      	beq.n	8011f50 <_dtoa_r+0xa18>
 8011e9a:	6869      	ldr	r1, [r5, #4]
 8011e9c:	4658      	mov	r0, fp
 8011e9e:	f000 f959 	bl	8012154 <_Balloc>
 8011ea2:	4606      	mov	r6, r0
 8011ea4:	b928      	cbnz	r0, 8011eb2 <_dtoa_r+0x97a>
 8011ea6:	4b84      	ldr	r3, [pc, #528]	@ (80120b8 <_dtoa_r+0xb80>)
 8011ea8:	4602      	mov	r2, r0
 8011eaa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011eae:	f7ff bb5a 	b.w	8011566 <_dtoa_r+0x2e>
 8011eb2:	692a      	ldr	r2, [r5, #16]
 8011eb4:	3202      	adds	r2, #2
 8011eb6:	0092      	lsls	r2, r2, #2
 8011eb8:	f105 010c 	add.w	r1, r5, #12
 8011ebc:	300c      	adds	r0, #12
 8011ebe:	f7ff faa2 	bl	8011406 <memcpy>
 8011ec2:	2201      	movs	r2, #1
 8011ec4:	4631      	mov	r1, r6
 8011ec6:	4658      	mov	r0, fp
 8011ec8:	f000 fb52 	bl	8012570 <__lshift>
 8011ecc:	f10a 0301 	add.w	r3, sl, #1
 8011ed0:	9307      	str	r3, [sp, #28]
 8011ed2:	9b00      	ldr	r3, [sp, #0]
 8011ed4:	4453      	add	r3, sl
 8011ed6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011ed8:	9b02      	ldr	r3, [sp, #8]
 8011eda:	f003 0301 	and.w	r3, r3, #1
 8011ede:	462f      	mov	r7, r5
 8011ee0:	930a      	str	r3, [sp, #40]	@ 0x28
 8011ee2:	4605      	mov	r5, r0
 8011ee4:	9b07      	ldr	r3, [sp, #28]
 8011ee6:	4621      	mov	r1, r4
 8011ee8:	3b01      	subs	r3, #1
 8011eea:	4648      	mov	r0, r9
 8011eec:	9300      	str	r3, [sp, #0]
 8011eee:	f7ff fa98 	bl	8011422 <quorem>
 8011ef2:	4639      	mov	r1, r7
 8011ef4:	9002      	str	r0, [sp, #8]
 8011ef6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011efa:	4648      	mov	r0, r9
 8011efc:	f000 fba4 	bl	8012648 <__mcmp>
 8011f00:	462a      	mov	r2, r5
 8011f02:	9008      	str	r0, [sp, #32]
 8011f04:	4621      	mov	r1, r4
 8011f06:	4658      	mov	r0, fp
 8011f08:	f000 fbba 	bl	8012680 <__mdiff>
 8011f0c:	68c2      	ldr	r2, [r0, #12]
 8011f0e:	4606      	mov	r6, r0
 8011f10:	bb02      	cbnz	r2, 8011f54 <_dtoa_r+0xa1c>
 8011f12:	4601      	mov	r1, r0
 8011f14:	4648      	mov	r0, r9
 8011f16:	f000 fb97 	bl	8012648 <__mcmp>
 8011f1a:	4602      	mov	r2, r0
 8011f1c:	4631      	mov	r1, r6
 8011f1e:	4658      	mov	r0, fp
 8011f20:	920e      	str	r2, [sp, #56]	@ 0x38
 8011f22:	f000 f957 	bl	80121d4 <_Bfree>
 8011f26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011f2a:	9e07      	ldr	r6, [sp, #28]
 8011f2c:	ea43 0102 	orr.w	r1, r3, r2
 8011f30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011f32:	4319      	orrs	r1, r3
 8011f34:	d110      	bne.n	8011f58 <_dtoa_r+0xa20>
 8011f36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011f3a:	d029      	beq.n	8011f90 <_dtoa_r+0xa58>
 8011f3c:	9b08      	ldr	r3, [sp, #32]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	dd02      	ble.n	8011f48 <_dtoa_r+0xa10>
 8011f42:	9b02      	ldr	r3, [sp, #8]
 8011f44:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8011f48:	9b00      	ldr	r3, [sp, #0]
 8011f4a:	f883 8000 	strb.w	r8, [r3]
 8011f4e:	e63f      	b.n	8011bd0 <_dtoa_r+0x698>
 8011f50:	4628      	mov	r0, r5
 8011f52:	e7bb      	b.n	8011ecc <_dtoa_r+0x994>
 8011f54:	2201      	movs	r2, #1
 8011f56:	e7e1      	b.n	8011f1c <_dtoa_r+0x9e4>
 8011f58:	9b08      	ldr	r3, [sp, #32]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	db04      	blt.n	8011f68 <_dtoa_r+0xa30>
 8011f5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011f60:	430b      	orrs	r3, r1
 8011f62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011f64:	430b      	orrs	r3, r1
 8011f66:	d120      	bne.n	8011faa <_dtoa_r+0xa72>
 8011f68:	2a00      	cmp	r2, #0
 8011f6a:	dded      	ble.n	8011f48 <_dtoa_r+0xa10>
 8011f6c:	4649      	mov	r1, r9
 8011f6e:	2201      	movs	r2, #1
 8011f70:	4658      	mov	r0, fp
 8011f72:	f000 fafd 	bl	8012570 <__lshift>
 8011f76:	4621      	mov	r1, r4
 8011f78:	4681      	mov	r9, r0
 8011f7a:	f000 fb65 	bl	8012648 <__mcmp>
 8011f7e:	2800      	cmp	r0, #0
 8011f80:	dc03      	bgt.n	8011f8a <_dtoa_r+0xa52>
 8011f82:	d1e1      	bne.n	8011f48 <_dtoa_r+0xa10>
 8011f84:	f018 0f01 	tst.w	r8, #1
 8011f88:	d0de      	beq.n	8011f48 <_dtoa_r+0xa10>
 8011f8a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011f8e:	d1d8      	bne.n	8011f42 <_dtoa_r+0xa0a>
 8011f90:	9a00      	ldr	r2, [sp, #0]
 8011f92:	2339      	movs	r3, #57	@ 0x39
 8011f94:	7013      	strb	r3, [r2, #0]
 8011f96:	4633      	mov	r3, r6
 8011f98:	461e      	mov	r6, r3
 8011f9a:	3b01      	subs	r3, #1
 8011f9c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011fa0:	2a39      	cmp	r2, #57	@ 0x39
 8011fa2:	d052      	beq.n	801204a <_dtoa_r+0xb12>
 8011fa4:	3201      	adds	r2, #1
 8011fa6:	701a      	strb	r2, [r3, #0]
 8011fa8:	e612      	b.n	8011bd0 <_dtoa_r+0x698>
 8011faa:	2a00      	cmp	r2, #0
 8011fac:	dd07      	ble.n	8011fbe <_dtoa_r+0xa86>
 8011fae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011fb2:	d0ed      	beq.n	8011f90 <_dtoa_r+0xa58>
 8011fb4:	9a00      	ldr	r2, [sp, #0]
 8011fb6:	f108 0301 	add.w	r3, r8, #1
 8011fba:	7013      	strb	r3, [r2, #0]
 8011fbc:	e608      	b.n	8011bd0 <_dtoa_r+0x698>
 8011fbe:	9b07      	ldr	r3, [sp, #28]
 8011fc0:	9a07      	ldr	r2, [sp, #28]
 8011fc2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8011fc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011fc8:	4293      	cmp	r3, r2
 8011fca:	d028      	beq.n	801201e <_dtoa_r+0xae6>
 8011fcc:	4649      	mov	r1, r9
 8011fce:	2300      	movs	r3, #0
 8011fd0:	220a      	movs	r2, #10
 8011fd2:	4658      	mov	r0, fp
 8011fd4:	f000 f920 	bl	8012218 <__multadd>
 8011fd8:	42af      	cmp	r7, r5
 8011fda:	4681      	mov	r9, r0
 8011fdc:	f04f 0300 	mov.w	r3, #0
 8011fe0:	f04f 020a 	mov.w	r2, #10
 8011fe4:	4639      	mov	r1, r7
 8011fe6:	4658      	mov	r0, fp
 8011fe8:	d107      	bne.n	8011ffa <_dtoa_r+0xac2>
 8011fea:	f000 f915 	bl	8012218 <__multadd>
 8011fee:	4607      	mov	r7, r0
 8011ff0:	4605      	mov	r5, r0
 8011ff2:	9b07      	ldr	r3, [sp, #28]
 8011ff4:	3301      	adds	r3, #1
 8011ff6:	9307      	str	r3, [sp, #28]
 8011ff8:	e774      	b.n	8011ee4 <_dtoa_r+0x9ac>
 8011ffa:	f000 f90d 	bl	8012218 <__multadd>
 8011ffe:	4629      	mov	r1, r5
 8012000:	4607      	mov	r7, r0
 8012002:	2300      	movs	r3, #0
 8012004:	220a      	movs	r2, #10
 8012006:	4658      	mov	r0, fp
 8012008:	f000 f906 	bl	8012218 <__multadd>
 801200c:	4605      	mov	r5, r0
 801200e:	e7f0      	b.n	8011ff2 <_dtoa_r+0xaba>
 8012010:	9b00      	ldr	r3, [sp, #0]
 8012012:	2b00      	cmp	r3, #0
 8012014:	bfcc      	ite	gt
 8012016:	461e      	movgt	r6, r3
 8012018:	2601      	movle	r6, #1
 801201a:	4456      	add	r6, sl
 801201c:	2700      	movs	r7, #0
 801201e:	4649      	mov	r1, r9
 8012020:	2201      	movs	r2, #1
 8012022:	4658      	mov	r0, fp
 8012024:	f000 faa4 	bl	8012570 <__lshift>
 8012028:	4621      	mov	r1, r4
 801202a:	4681      	mov	r9, r0
 801202c:	f000 fb0c 	bl	8012648 <__mcmp>
 8012030:	2800      	cmp	r0, #0
 8012032:	dcb0      	bgt.n	8011f96 <_dtoa_r+0xa5e>
 8012034:	d102      	bne.n	801203c <_dtoa_r+0xb04>
 8012036:	f018 0f01 	tst.w	r8, #1
 801203a:	d1ac      	bne.n	8011f96 <_dtoa_r+0xa5e>
 801203c:	4633      	mov	r3, r6
 801203e:	461e      	mov	r6, r3
 8012040:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012044:	2a30      	cmp	r2, #48	@ 0x30
 8012046:	d0fa      	beq.n	801203e <_dtoa_r+0xb06>
 8012048:	e5c2      	b.n	8011bd0 <_dtoa_r+0x698>
 801204a:	459a      	cmp	sl, r3
 801204c:	d1a4      	bne.n	8011f98 <_dtoa_r+0xa60>
 801204e:	9b04      	ldr	r3, [sp, #16]
 8012050:	3301      	adds	r3, #1
 8012052:	9304      	str	r3, [sp, #16]
 8012054:	2331      	movs	r3, #49	@ 0x31
 8012056:	f88a 3000 	strb.w	r3, [sl]
 801205a:	e5b9      	b.n	8011bd0 <_dtoa_r+0x698>
 801205c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801205e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80120bc <_dtoa_r+0xb84>
 8012062:	b11b      	cbz	r3, 801206c <_dtoa_r+0xb34>
 8012064:	f10a 0308 	add.w	r3, sl, #8
 8012068:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801206a:	6013      	str	r3, [r2, #0]
 801206c:	4650      	mov	r0, sl
 801206e:	b019      	add	sp, #100	@ 0x64
 8012070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012076:	2b01      	cmp	r3, #1
 8012078:	f77f ae37 	ble.w	8011cea <_dtoa_r+0x7b2>
 801207c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801207e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012080:	2001      	movs	r0, #1
 8012082:	e655      	b.n	8011d30 <_dtoa_r+0x7f8>
 8012084:	9b00      	ldr	r3, [sp, #0]
 8012086:	2b00      	cmp	r3, #0
 8012088:	f77f aed6 	ble.w	8011e38 <_dtoa_r+0x900>
 801208c:	4656      	mov	r6, sl
 801208e:	4621      	mov	r1, r4
 8012090:	4648      	mov	r0, r9
 8012092:	f7ff f9c6 	bl	8011422 <quorem>
 8012096:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801209a:	f806 8b01 	strb.w	r8, [r6], #1
 801209e:	9b00      	ldr	r3, [sp, #0]
 80120a0:	eba6 020a 	sub.w	r2, r6, sl
 80120a4:	4293      	cmp	r3, r2
 80120a6:	ddb3      	ble.n	8012010 <_dtoa_r+0xad8>
 80120a8:	4649      	mov	r1, r9
 80120aa:	2300      	movs	r3, #0
 80120ac:	220a      	movs	r2, #10
 80120ae:	4658      	mov	r0, fp
 80120b0:	f000 f8b2 	bl	8012218 <__multadd>
 80120b4:	4681      	mov	r9, r0
 80120b6:	e7ea      	b.n	801208e <_dtoa_r+0xb56>
 80120b8:	08013d48 	.word	0x08013d48
 80120bc:	08013ccc 	.word	0x08013ccc

080120c0 <_free_r>:
 80120c0:	b538      	push	{r3, r4, r5, lr}
 80120c2:	4605      	mov	r5, r0
 80120c4:	2900      	cmp	r1, #0
 80120c6:	d041      	beq.n	801214c <_free_r+0x8c>
 80120c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80120cc:	1f0c      	subs	r4, r1, #4
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	bfb8      	it	lt
 80120d2:	18e4      	addlt	r4, r4, r3
 80120d4:	f7fe fb70 	bl	80107b8 <__malloc_lock>
 80120d8:	4a1d      	ldr	r2, [pc, #116]	@ (8012150 <_free_r+0x90>)
 80120da:	6813      	ldr	r3, [r2, #0]
 80120dc:	b933      	cbnz	r3, 80120ec <_free_r+0x2c>
 80120de:	6063      	str	r3, [r4, #4]
 80120e0:	6014      	str	r4, [r2, #0]
 80120e2:	4628      	mov	r0, r5
 80120e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80120e8:	f7fe bb6c 	b.w	80107c4 <__malloc_unlock>
 80120ec:	42a3      	cmp	r3, r4
 80120ee:	d908      	bls.n	8012102 <_free_r+0x42>
 80120f0:	6820      	ldr	r0, [r4, #0]
 80120f2:	1821      	adds	r1, r4, r0
 80120f4:	428b      	cmp	r3, r1
 80120f6:	bf01      	itttt	eq
 80120f8:	6819      	ldreq	r1, [r3, #0]
 80120fa:	685b      	ldreq	r3, [r3, #4]
 80120fc:	1809      	addeq	r1, r1, r0
 80120fe:	6021      	streq	r1, [r4, #0]
 8012100:	e7ed      	b.n	80120de <_free_r+0x1e>
 8012102:	461a      	mov	r2, r3
 8012104:	685b      	ldr	r3, [r3, #4]
 8012106:	b10b      	cbz	r3, 801210c <_free_r+0x4c>
 8012108:	42a3      	cmp	r3, r4
 801210a:	d9fa      	bls.n	8012102 <_free_r+0x42>
 801210c:	6811      	ldr	r1, [r2, #0]
 801210e:	1850      	adds	r0, r2, r1
 8012110:	42a0      	cmp	r0, r4
 8012112:	d10b      	bne.n	801212c <_free_r+0x6c>
 8012114:	6820      	ldr	r0, [r4, #0]
 8012116:	4401      	add	r1, r0
 8012118:	1850      	adds	r0, r2, r1
 801211a:	4283      	cmp	r3, r0
 801211c:	6011      	str	r1, [r2, #0]
 801211e:	d1e0      	bne.n	80120e2 <_free_r+0x22>
 8012120:	6818      	ldr	r0, [r3, #0]
 8012122:	685b      	ldr	r3, [r3, #4]
 8012124:	6053      	str	r3, [r2, #4]
 8012126:	4408      	add	r0, r1
 8012128:	6010      	str	r0, [r2, #0]
 801212a:	e7da      	b.n	80120e2 <_free_r+0x22>
 801212c:	d902      	bls.n	8012134 <_free_r+0x74>
 801212e:	230c      	movs	r3, #12
 8012130:	602b      	str	r3, [r5, #0]
 8012132:	e7d6      	b.n	80120e2 <_free_r+0x22>
 8012134:	6820      	ldr	r0, [r4, #0]
 8012136:	1821      	adds	r1, r4, r0
 8012138:	428b      	cmp	r3, r1
 801213a:	bf04      	itt	eq
 801213c:	6819      	ldreq	r1, [r3, #0]
 801213e:	685b      	ldreq	r3, [r3, #4]
 8012140:	6063      	str	r3, [r4, #4]
 8012142:	bf04      	itt	eq
 8012144:	1809      	addeq	r1, r1, r0
 8012146:	6021      	streq	r1, [r4, #0]
 8012148:	6054      	str	r4, [r2, #4]
 801214a:	e7ca      	b.n	80120e2 <_free_r+0x22>
 801214c:	bd38      	pop	{r3, r4, r5, pc}
 801214e:	bf00      	nop
 8012150:	20001df0 	.word	0x20001df0

08012154 <_Balloc>:
 8012154:	b570      	push	{r4, r5, r6, lr}
 8012156:	69c6      	ldr	r6, [r0, #28]
 8012158:	4604      	mov	r4, r0
 801215a:	460d      	mov	r5, r1
 801215c:	b976      	cbnz	r6, 801217c <_Balloc+0x28>
 801215e:	2010      	movs	r0, #16
 8012160:	f7fe fa78 	bl	8010654 <malloc>
 8012164:	4602      	mov	r2, r0
 8012166:	61e0      	str	r0, [r4, #28]
 8012168:	b920      	cbnz	r0, 8012174 <_Balloc+0x20>
 801216a:	4b18      	ldr	r3, [pc, #96]	@ (80121cc <_Balloc+0x78>)
 801216c:	4818      	ldr	r0, [pc, #96]	@ (80121d0 <_Balloc+0x7c>)
 801216e:	216b      	movs	r1, #107	@ 0x6b
 8012170:	f000 fd90 	bl	8012c94 <__assert_func>
 8012174:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012178:	6006      	str	r6, [r0, #0]
 801217a:	60c6      	str	r6, [r0, #12]
 801217c:	69e6      	ldr	r6, [r4, #28]
 801217e:	68f3      	ldr	r3, [r6, #12]
 8012180:	b183      	cbz	r3, 80121a4 <_Balloc+0x50>
 8012182:	69e3      	ldr	r3, [r4, #28]
 8012184:	68db      	ldr	r3, [r3, #12]
 8012186:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801218a:	b9b8      	cbnz	r0, 80121bc <_Balloc+0x68>
 801218c:	2101      	movs	r1, #1
 801218e:	fa01 f605 	lsl.w	r6, r1, r5
 8012192:	1d72      	adds	r2, r6, #5
 8012194:	0092      	lsls	r2, r2, #2
 8012196:	4620      	mov	r0, r4
 8012198:	f000 fd9a 	bl	8012cd0 <_calloc_r>
 801219c:	b160      	cbz	r0, 80121b8 <_Balloc+0x64>
 801219e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80121a2:	e00e      	b.n	80121c2 <_Balloc+0x6e>
 80121a4:	2221      	movs	r2, #33	@ 0x21
 80121a6:	2104      	movs	r1, #4
 80121a8:	4620      	mov	r0, r4
 80121aa:	f000 fd91 	bl	8012cd0 <_calloc_r>
 80121ae:	69e3      	ldr	r3, [r4, #28]
 80121b0:	60f0      	str	r0, [r6, #12]
 80121b2:	68db      	ldr	r3, [r3, #12]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d1e4      	bne.n	8012182 <_Balloc+0x2e>
 80121b8:	2000      	movs	r0, #0
 80121ba:	bd70      	pop	{r4, r5, r6, pc}
 80121bc:	6802      	ldr	r2, [r0, #0]
 80121be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80121c2:	2300      	movs	r3, #0
 80121c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80121c8:	e7f7      	b.n	80121ba <_Balloc+0x66>
 80121ca:	bf00      	nop
 80121cc:	08013cd9 	.word	0x08013cd9
 80121d0:	08013d59 	.word	0x08013d59

080121d4 <_Bfree>:
 80121d4:	b570      	push	{r4, r5, r6, lr}
 80121d6:	69c6      	ldr	r6, [r0, #28]
 80121d8:	4605      	mov	r5, r0
 80121da:	460c      	mov	r4, r1
 80121dc:	b976      	cbnz	r6, 80121fc <_Bfree+0x28>
 80121de:	2010      	movs	r0, #16
 80121e0:	f7fe fa38 	bl	8010654 <malloc>
 80121e4:	4602      	mov	r2, r0
 80121e6:	61e8      	str	r0, [r5, #28]
 80121e8:	b920      	cbnz	r0, 80121f4 <_Bfree+0x20>
 80121ea:	4b09      	ldr	r3, [pc, #36]	@ (8012210 <_Bfree+0x3c>)
 80121ec:	4809      	ldr	r0, [pc, #36]	@ (8012214 <_Bfree+0x40>)
 80121ee:	218f      	movs	r1, #143	@ 0x8f
 80121f0:	f000 fd50 	bl	8012c94 <__assert_func>
 80121f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80121f8:	6006      	str	r6, [r0, #0]
 80121fa:	60c6      	str	r6, [r0, #12]
 80121fc:	b13c      	cbz	r4, 801220e <_Bfree+0x3a>
 80121fe:	69eb      	ldr	r3, [r5, #28]
 8012200:	6862      	ldr	r2, [r4, #4]
 8012202:	68db      	ldr	r3, [r3, #12]
 8012204:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012208:	6021      	str	r1, [r4, #0]
 801220a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801220e:	bd70      	pop	{r4, r5, r6, pc}
 8012210:	08013cd9 	.word	0x08013cd9
 8012214:	08013d59 	.word	0x08013d59

08012218 <__multadd>:
 8012218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801221c:	690d      	ldr	r5, [r1, #16]
 801221e:	4607      	mov	r7, r0
 8012220:	460c      	mov	r4, r1
 8012222:	461e      	mov	r6, r3
 8012224:	f101 0c14 	add.w	ip, r1, #20
 8012228:	2000      	movs	r0, #0
 801222a:	f8dc 3000 	ldr.w	r3, [ip]
 801222e:	b299      	uxth	r1, r3
 8012230:	fb02 6101 	mla	r1, r2, r1, r6
 8012234:	0c1e      	lsrs	r6, r3, #16
 8012236:	0c0b      	lsrs	r3, r1, #16
 8012238:	fb02 3306 	mla	r3, r2, r6, r3
 801223c:	b289      	uxth	r1, r1
 801223e:	3001      	adds	r0, #1
 8012240:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012244:	4285      	cmp	r5, r0
 8012246:	f84c 1b04 	str.w	r1, [ip], #4
 801224a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801224e:	dcec      	bgt.n	801222a <__multadd+0x12>
 8012250:	b30e      	cbz	r6, 8012296 <__multadd+0x7e>
 8012252:	68a3      	ldr	r3, [r4, #8]
 8012254:	42ab      	cmp	r3, r5
 8012256:	dc19      	bgt.n	801228c <__multadd+0x74>
 8012258:	6861      	ldr	r1, [r4, #4]
 801225a:	4638      	mov	r0, r7
 801225c:	3101      	adds	r1, #1
 801225e:	f7ff ff79 	bl	8012154 <_Balloc>
 8012262:	4680      	mov	r8, r0
 8012264:	b928      	cbnz	r0, 8012272 <__multadd+0x5a>
 8012266:	4602      	mov	r2, r0
 8012268:	4b0c      	ldr	r3, [pc, #48]	@ (801229c <__multadd+0x84>)
 801226a:	480d      	ldr	r0, [pc, #52]	@ (80122a0 <__multadd+0x88>)
 801226c:	21ba      	movs	r1, #186	@ 0xba
 801226e:	f000 fd11 	bl	8012c94 <__assert_func>
 8012272:	6922      	ldr	r2, [r4, #16]
 8012274:	3202      	adds	r2, #2
 8012276:	f104 010c 	add.w	r1, r4, #12
 801227a:	0092      	lsls	r2, r2, #2
 801227c:	300c      	adds	r0, #12
 801227e:	f7ff f8c2 	bl	8011406 <memcpy>
 8012282:	4621      	mov	r1, r4
 8012284:	4638      	mov	r0, r7
 8012286:	f7ff ffa5 	bl	80121d4 <_Bfree>
 801228a:	4644      	mov	r4, r8
 801228c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012290:	3501      	adds	r5, #1
 8012292:	615e      	str	r6, [r3, #20]
 8012294:	6125      	str	r5, [r4, #16]
 8012296:	4620      	mov	r0, r4
 8012298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801229c:	08013d48 	.word	0x08013d48
 80122a0:	08013d59 	.word	0x08013d59

080122a4 <__hi0bits>:
 80122a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80122a8:	4603      	mov	r3, r0
 80122aa:	bf36      	itet	cc
 80122ac:	0403      	lslcc	r3, r0, #16
 80122ae:	2000      	movcs	r0, #0
 80122b0:	2010      	movcc	r0, #16
 80122b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80122b6:	bf3c      	itt	cc
 80122b8:	021b      	lslcc	r3, r3, #8
 80122ba:	3008      	addcc	r0, #8
 80122bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80122c0:	bf3c      	itt	cc
 80122c2:	011b      	lslcc	r3, r3, #4
 80122c4:	3004      	addcc	r0, #4
 80122c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80122ca:	bf3c      	itt	cc
 80122cc:	009b      	lslcc	r3, r3, #2
 80122ce:	3002      	addcc	r0, #2
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	db05      	blt.n	80122e0 <__hi0bits+0x3c>
 80122d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80122d8:	f100 0001 	add.w	r0, r0, #1
 80122dc:	bf08      	it	eq
 80122de:	2020      	moveq	r0, #32
 80122e0:	4770      	bx	lr

080122e2 <__lo0bits>:
 80122e2:	6803      	ldr	r3, [r0, #0]
 80122e4:	4602      	mov	r2, r0
 80122e6:	f013 0007 	ands.w	r0, r3, #7
 80122ea:	d00b      	beq.n	8012304 <__lo0bits+0x22>
 80122ec:	07d9      	lsls	r1, r3, #31
 80122ee:	d421      	bmi.n	8012334 <__lo0bits+0x52>
 80122f0:	0798      	lsls	r0, r3, #30
 80122f2:	bf49      	itett	mi
 80122f4:	085b      	lsrmi	r3, r3, #1
 80122f6:	089b      	lsrpl	r3, r3, #2
 80122f8:	2001      	movmi	r0, #1
 80122fa:	6013      	strmi	r3, [r2, #0]
 80122fc:	bf5c      	itt	pl
 80122fe:	6013      	strpl	r3, [r2, #0]
 8012300:	2002      	movpl	r0, #2
 8012302:	4770      	bx	lr
 8012304:	b299      	uxth	r1, r3
 8012306:	b909      	cbnz	r1, 801230c <__lo0bits+0x2a>
 8012308:	0c1b      	lsrs	r3, r3, #16
 801230a:	2010      	movs	r0, #16
 801230c:	b2d9      	uxtb	r1, r3
 801230e:	b909      	cbnz	r1, 8012314 <__lo0bits+0x32>
 8012310:	3008      	adds	r0, #8
 8012312:	0a1b      	lsrs	r3, r3, #8
 8012314:	0719      	lsls	r1, r3, #28
 8012316:	bf04      	itt	eq
 8012318:	091b      	lsreq	r3, r3, #4
 801231a:	3004      	addeq	r0, #4
 801231c:	0799      	lsls	r1, r3, #30
 801231e:	bf04      	itt	eq
 8012320:	089b      	lsreq	r3, r3, #2
 8012322:	3002      	addeq	r0, #2
 8012324:	07d9      	lsls	r1, r3, #31
 8012326:	d403      	bmi.n	8012330 <__lo0bits+0x4e>
 8012328:	085b      	lsrs	r3, r3, #1
 801232a:	f100 0001 	add.w	r0, r0, #1
 801232e:	d003      	beq.n	8012338 <__lo0bits+0x56>
 8012330:	6013      	str	r3, [r2, #0]
 8012332:	4770      	bx	lr
 8012334:	2000      	movs	r0, #0
 8012336:	4770      	bx	lr
 8012338:	2020      	movs	r0, #32
 801233a:	4770      	bx	lr

0801233c <__i2b>:
 801233c:	b510      	push	{r4, lr}
 801233e:	460c      	mov	r4, r1
 8012340:	2101      	movs	r1, #1
 8012342:	f7ff ff07 	bl	8012154 <_Balloc>
 8012346:	4602      	mov	r2, r0
 8012348:	b928      	cbnz	r0, 8012356 <__i2b+0x1a>
 801234a:	4b05      	ldr	r3, [pc, #20]	@ (8012360 <__i2b+0x24>)
 801234c:	4805      	ldr	r0, [pc, #20]	@ (8012364 <__i2b+0x28>)
 801234e:	f240 1145 	movw	r1, #325	@ 0x145
 8012352:	f000 fc9f 	bl	8012c94 <__assert_func>
 8012356:	2301      	movs	r3, #1
 8012358:	6144      	str	r4, [r0, #20]
 801235a:	6103      	str	r3, [r0, #16]
 801235c:	bd10      	pop	{r4, pc}
 801235e:	bf00      	nop
 8012360:	08013d48 	.word	0x08013d48
 8012364:	08013d59 	.word	0x08013d59

08012368 <__multiply>:
 8012368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801236c:	4614      	mov	r4, r2
 801236e:	690a      	ldr	r2, [r1, #16]
 8012370:	6923      	ldr	r3, [r4, #16]
 8012372:	429a      	cmp	r2, r3
 8012374:	bfa8      	it	ge
 8012376:	4623      	movge	r3, r4
 8012378:	460f      	mov	r7, r1
 801237a:	bfa4      	itt	ge
 801237c:	460c      	movge	r4, r1
 801237e:	461f      	movge	r7, r3
 8012380:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012384:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012388:	68a3      	ldr	r3, [r4, #8]
 801238a:	6861      	ldr	r1, [r4, #4]
 801238c:	eb0a 0609 	add.w	r6, sl, r9
 8012390:	42b3      	cmp	r3, r6
 8012392:	b085      	sub	sp, #20
 8012394:	bfb8      	it	lt
 8012396:	3101      	addlt	r1, #1
 8012398:	f7ff fedc 	bl	8012154 <_Balloc>
 801239c:	b930      	cbnz	r0, 80123ac <__multiply+0x44>
 801239e:	4602      	mov	r2, r0
 80123a0:	4b44      	ldr	r3, [pc, #272]	@ (80124b4 <__multiply+0x14c>)
 80123a2:	4845      	ldr	r0, [pc, #276]	@ (80124b8 <__multiply+0x150>)
 80123a4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80123a8:	f000 fc74 	bl	8012c94 <__assert_func>
 80123ac:	f100 0514 	add.w	r5, r0, #20
 80123b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80123b4:	462b      	mov	r3, r5
 80123b6:	2200      	movs	r2, #0
 80123b8:	4543      	cmp	r3, r8
 80123ba:	d321      	bcc.n	8012400 <__multiply+0x98>
 80123bc:	f107 0114 	add.w	r1, r7, #20
 80123c0:	f104 0214 	add.w	r2, r4, #20
 80123c4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80123c8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80123cc:	9302      	str	r3, [sp, #8]
 80123ce:	1b13      	subs	r3, r2, r4
 80123d0:	3b15      	subs	r3, #21
 80123d2:	f023 0303 	bic.w	r3, r3, #3
 80123d6:	3304      	adds	r3, #4
 80123d8:	f104 0715 	add.w	r7, r4, #21
 80123dc:	42ba      	cmp	r2, r7
 80123de:	bf38      	it	cc
 80123e0:	2304      	movcc	r3, #4
 80123e2:	9301      	str	r3, [sp, #4]
 80123e4:	9b02      	ldr	r3, [sp, #8]
 80123e6:	9103      	str	r1, [sp, #12]
 80123e8:	428b      	cmp	r3, r1
 80123ea:	d80c      	bhi.n	8012406 <__multiply+0x9e>
 80123ec:	2e00      	cmp	r6, #0
 80123ee:	dd03      	ble.n	80123f8 <__multiply+0x90>
 80123f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d05b      	beq.n	80124b0 <__multiply+0x148>
 80123f8:	6106      	str	r6, [r0, #16]
 80123fa:	b005      	add	sp, #20
 80123fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012400:	f843 2b04 	str.w	r2, [r3], #4
 8012404:	e7d8      	b.n	80123b8 <__multiply+0x50>
 8012406:	f8b1 a000 	ldrh.w	sl, [r1]
 801240a:	f1ba 0f00 	cmp.w	sl, #0
 801240e:	d024      	beq.n	801245a <__multiply+0xf2>
 8012410:	f104 0e14 	add.w	lr, r4, #20
 8012414:	46a9      	mov	r9, r5
 8012416:	f04f 0c00 	mov.w	ip, #0
 801241a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801241e:	f8d9 3000 	ldr.w	r3, [r9]
 8012422:	fa1f fb87 	uxth.w	fp, r7
 8012426:	b29b      	uxth	r3, r3
 8012428:	fb0a 330b 	mla	r3, sl, fp, r3
 801242c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012430:	f8d9 7000 	ldr.w	r7, [r9]
 8012434:	4463      	add	r3, ip
 8012436:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801243a:	fb0a c70b 	mla	r7, sl, fp, ip
 801243e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012442:	b29b      	uxth	r3, r3
 8012444:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012448:	4572      	cmp	r2, lr
 801244a:	f849 3b04 	str.w	r3, [r9], #4
 801244e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012452:	d8e2      	bhi.n	801241a <__multiply+0xb2>
 8012454:	9b01      	ldr	r3, [sp, #4]
 8012456:	f845 c003 	str.w	ip, [r5, r3]
 801245a:	9b03      	ldr	r3, [sp, #12]
 801245c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012460:	3104      	adds	r1, #4
 8012462:	f1b9 0f00 	cmp.w	r9, #0
 8012466:	d021      	beq.n	80124ac <__multiply+0x144>
 8012468:	682b      	ldr	r3, [r5, #0]
 801246a:	f104 0c14 	add.w	ip, r4, #20
 801246e:	46ae      	mov	lr, r5
 8012470:	f04f 0a00 	mov.w	sl, #0
 8012474:	f8bc b000 	ldrh.w	fp, [ip]
 8012478:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801247c:	fb09 770b 	mla	r7, r9, fp, r7
 8012480:	4457      	add	r7, sl
 8012482:	b29b      	uxth	r3, r3
 8012484:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012488:	f84e 3b04 	str.w	r3, [lr], #4
 801248c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012490:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012494:	f8be 3000 	ldrh.w	r3, [lr]
 8012498:	fb09 330a 	mla	r3, r9, sl, r3
 801249c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80124a0:	4562      	cmp	r2, ip
 80124a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80124a6:	d8e5      	bhi.n	8012474 <__multiply+0x10c>
 80124a8:	9f01      	ldr	r7, [sp, #4]
 80124aa:	51eb      	str	r3, [r5, r7]
 80124ac:	3504      	adds	r5, #4
 80124ae:	e799      	b.n	80123e4 <__multiply+0x7c>
 80124b0:	3e01      	subs	r6, #1
 80124b2:	e79b      	b.n	80123ec <__multiply+0x84>
 80124b4:	08013d48 	.word	0x08013d48
 80124b8:	08013d59 	.word	0x08013d59

080124bc <__pow5mult>:
 80124bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124c0:	4615      	mov	r5, r2
 80124c2:	f012 0203 	ands.w	r2, r2, #3
 80124c6:	4607      	mov	r7, r0
 80124c8:	460e      	mov	r6, r1
 80124ca:	d007      	beq.n	80124dc <__pow5mult+0x20>
 80124cc:	4c25      	ldr	r4, [pc, #148]	@ (8012564 <__pow5mult+0xa8>)
 80124ce:	3a01      	subs	r2, #1
 80124d0:	2300      	movs	r3, #0
 80124d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80124d6:	f7ff fe9f 	bl	8012218 <__multadd>
 80124da:	4606      	mov	r6, r0
 80124dc:	10ad      	asrs	r5, r5, #2
 80124de:	d03d      	beq.n	801255c <__pow5mult+0xa0>
 80124e0:	69fc      	ldr	r4, [r7, #28]
 80124e2:	b97c      	cbnz	r4, 8012504 <__pow5mult+0x48>
 80124e4:	2010      	movs	r0, #16
 80124e6:	f7fe f8b5 	bl	8010654 <malloc>
 80124ea:	4602      	mov	r2, r0
 80124ec:	61f8      	str	r0, [r7, #28]
 80124ee:	b928      	cbnz	r0, 80124fc <__pow5mult+0x40>
 80124f0:	4b1d      	ldr	r3, [pc, #116]	@ (8012568 <__pow5mult+0xac>)
 80124f2:	481e      	ldr	r0, [pc, #120]	@ (801256c <__pow5mult+0xb0>)
 80124f4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80124f8:	f000 fbcc 	bl	8012c94 <__assert_func>
 80124fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012500:	6004      	str	r4, [r0, #0]
 8012502:	60c4      	str	r4, [r0, #12]
 8012504:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012508:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801250c:	b94c      	cbnz	r4, 8012522 <__pow5mult+0x66>
 801250e:	f240 2171 	movw	r1, #625	@ 0x271
 8012512:	4638      	mov	r0, r7
 8012514:	f7ff ff12 	bl	801233c <__i2b>
 8012518:	2300      	movs	r3, #0
 801251a:	f8c8 0008 	str.w	r0, [r8, #8]
 801251e:	4604      	mov	r4, r0
 8012520:	6003      	str	r3, [r0, #0]
 8012522:	f04f 0900 	mov.w	r9, #0
 8012526:	07eb      	lsls	r3, r5, #31
 8012528:	d50a      	bpl.n	8012540 <__pow5mult+0x84>
 801252a:	4631      	mov	r1, r6
 801252c:	4622      	mov	r2, r4
 801252e:	4638      	mov	r0, r7
 8012530:	f7ff ff1a 	bl	8012368 <__multiply>
 8012534:	4631      	mov	r1, r6
 8012536:	4680      	mov	r8, r0
 8012538:	4638      	mov	r0, r7
 801253a:	f7ff fe4b 	bl	80121d4 <_Bfree>
 801253e:	4646      	mov	r6, r8
 8012540:	106d      	asrs	r5, r5, #1
 8012542:	d00b      	beq.n	801255c <__pow5mult+0xa0>
 8012544:	6820      	ldr	r0, [r4, #0]
 8012546:	b938      	cbnz	r0, 8012558 <__pow5mult+0x9c>
 8012548:	4622      	mov	r2, r4
 801254a:	4621      	mov	r1, r4
 801254c:	4638      	mov	r0, r7
 801254e:	f7ff ff0b 	bl	8012368 <__multiply>
 8012552:	6020      	str	r0, [r4, #0]
 8012554:	f8c0 9000 	str.w	r9, [r0]
 8012558:	4604      	mov	r4, r0
 801255a:	e7e4      	b.n	8012526 <__pow5mult+0x6a>
 801255c:	4630      	mov	r0, r6
 801255e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012562:	bf00      	nop
 8012564:	08013db4 	.word	0x08013db4
 8012568:	08013cd9 	.word	0x08013cd9
 801256c:	08013d59 	.word	0x08013d59

08012570 <__lshift>:
 8012570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012574:	460c      	mov	r4, r1
 8012576:	6849      	ldr	r1, [r1, #4]
 8012578:	6923      	ldr	r3, [r4, #16]
 801257a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801257e:	68a3      	ldr	r3, [r4, #8]
 8012580:	4607      	mov	r7, r0
 8012582:	4691      	mov	r9, r2
 8012584:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012588:	f108 0601 	add.w	r6, r8, #1
 801258c:	42b3      	cmp	r3, r6
 801258e:	db0b      	blt.n	80125a8 <__lshift+0x38>
 8012590:	4638      	mov	r0, r7
 8012592:	f7ff fddf 	bl	8012154 <_Balloc>
 8012596:	4605      	mov	r5, r0
 8012598:	b948      	cbnz	r0, 80125ae <__lshift+0x3e>
 801259a:	4602      	mov	r2, r0
 801259c:	4b28      	ldr	r3, [pc, #160]	@ (8012640 <__lshift+0xd0>)
 801259e:	4829      	ldr	r0, [pc, #164]	@ (8012644 <__lshift+0xd4>)
 80125a0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80125a4:	f000 fb76 	bl	8012c94 <__assert_func>
 80125a8:	3101      	adds	r1, #1
 80125aa:	005b      	lsls	r3, r3, #1
 80125ac:	e7ee      	b.n	801258c <__lshift+0x1c>
 80125ae:	2300      	movs	r3, #0
 80125b0:	f100 0114 	add.w	r1, r0, #20
 80125b4:	f100 0210 	add.w	r2, r0, #16
 80125b8:	4618      	mov	r0, r3
 80125ba:	4553      	cmp	r3, sl
 80125bc:	db33      	blt.n	8012626 <__lshift+0xb6>
 80125be:	6920      	ldr	r0, [r4, #16]
 80125c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80125c4:	f104 0314 	add.w	r3, r4, #20
 80125c8:	f019 091f 	ands.w	r9, r9, #31
 80125cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80125d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80125d4:	d02b      	beq.n	801262e <__lshift+0xbe>
 80125d6:	f1c9 0e20 	rsb	lr, r9, #32
 80125da:	468a      	mov	sl, r1
 80125dc:	2200      	movs	r2, #0
 80125de:	6818      	ldr	r0, [r3, #0]
 80125e0:	fa00 f009 	lsl.w	r0, r0, r9
 80125e4:	4310      	orrs	r0, r2
 80125e6:	f84a 0b04 	str.w	r0, [sl], #4
 80125ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80125ee:	459c      	cmp	ip, r3
 80125f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80125f4:	d8f3      	bhi.n	80125de <__lshift+0x6e>
 80125f6:	ebac 0304 	sub.w	r3, ip, r4
 80125fa:	3b15      	subs	r3, #21
 80125fc:	f023 0303 	bic.w	r3, r3, #3
 8012600:	3304      	adds	r3, #4
 8012602:	f104 0015 	add.w	r0, r4, #21
 8012606:	4584      	cmp	ip, r0
 8012608:	bf38      	it	cc
 801260a:	2304      	movcc	r3, #4
 801260c:	50ca      	str	r2, [r1, r3]
 801260e:	b10a      	cbz	r2, 8012614 <__lshift+0xa4>
 8012610:	f108 0602 	add.w	r6, r8, #2
 8012614:	3e01      	subs	r6, #1
 8012616:	4638      	mov	r0, r7
 8012618:	612e      	str	r6, [r5, #16]
 801261a:	4621      	mov	r1, r4
 801261c:	f7ff fdda 	bl	80121d4 <_Bfree>
 8012620:	4628      	mov	r0, r5
 8012622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012626:	f842 0f04 	str.w	r0, [r2, #4]!
 801262a:	3301      	adds	r3, #1
 801262c:	e7c5      	b.n	80125ba <__lshift+0x4a>
 801262e:	3904      	subs	r1, #4
 8012630:	f853 2b04 	ldr.w	r2, [r3], #4
 8012634:	f841 2f04 	str.w	r2, [r1, #4]!
 8012638:	459c      	cmp	ip, r3
 801263a:	d8f9      	bhi.n	8012630 <__lshift+0xc0>
 801263c:	e7ea      	b.n	8012614 <__lshift+0xa4>
 801263e:	bf00      	nop
 8012640:	08013d48 	.word	0x08013d48
 8012644:	08013d59 	.word	0x08013d59

08012648 <__mcmp>:
 8012648:	690a      	ldr	r2, [r1, #16]
 801264a:	4603      	mov	r3, r0
 801264c:	6900      	ldr	r0, [r0, #16]
 801264e:	1a80      	subs	r0, r0, r2
 8012650:	b530      	push	{r4, r5, lr}
 8012652:	d10e      	bne.n	8012672 <__mcmp+0x2a>
 8012654:	3314      	adds	r3, #20
 8012656:	3114      	adds	r1, #20
 8012658:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801265c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012660:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012664:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012668:	4295      	cmp	r5, r2
 801266a:	d003      	beq.n	8012674 <__mcmp+0x2c>
 801266c:	d205      	bcs.n	801267a <__mcmp+0x32>
 801266e:	f04f 30ff 	mov.w	r0, #4294967295
 8012672:	bd30      	pop	{r4, r5, pc}
 8012674:	42a3      	cmp	r3, r4
 8012676:	d3f3      	bcc.n	8012660 <__mcmp+0x18>
 8012678:	e7fb      	b.n	8012672 <__mcmp+0x2a>
 801267a:	2001      	movs	r0, #1
 801267c:	e7f9      	b.n	8012672 <__mcmp+0x2a>
	...

08012680 <__mdiff>:
 8012680:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012684:	4689      	mov	r9, r1
 8012686:	4606      	mov	r6, r0
 8012688:	4611      	mov	r1, r2
 801268a:	4648      	mov	r0, r9
 801268c:	4614      	mov	r4, r2
 801268e:	f7ff ffdb 	bl	8012648 <__mcmp>
 8012692:	1e05      	subs	r5, r0, #0
 8012694:	d112      	bne.n	80126bc <__mdiff+0x3c>
 8012696:	4629      	mov	r1, r5
 8012698:	4630      	mov	r0, r6
 801269a:	f7ff fd5b 	bl	8012154 <_Balloc>
 801269e:	4602      	mov	r2, r0
 80126a0:	b928      	cbnz	r0, 80126ae <__mdiff+0x2e>
 80126a2:	4b3f      	ldr	r3, [pc, #252]	@ (80127a0 <__mdiff+0x120>)
 80126a4:	f240 2137 	movw	r1, #567	@ 0x237
 80126a8:	483e      	ldr	r0, [pc, #248]	@ (80127a4 <__mdiff+0x124>)
 80126aa:	f000 faf3 	bl	8012c94 <__assert_func>
 80126ae:	2301      	movs	r3, #1
 80126b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80126b4:	4610      	mov	r0, r2
 80126b6:	b003      	add	sp, #12
 80126b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126bc:	bfbc      	itt	lt
 80126be:	464b      	movlt	r3, r9
 80126c0:	46a1      	movlt	r9, r4
 80126c2:	4630      	mov	r0, r6
 80126c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80126c8:	bfba      	itte	lt
 80126ca:	461c      	movlt	r4, r3
 80126cc:	2501      	movlt	r5, #1
 80126ce:	2500      	movge	r5, #0
 80126d0:	f7ff fd40 	bl	8012154 <_Balloc>
 80126d4:	4602      	mov	r2, r0
 80126d6:	b918      	cbnz	r0, 80126e0 <__mdiff+0x60>
 80126d8:	4b31      	ldr	r3, [pc, #196]	@ (80127a0 <__mdiff+0x120>)
 80126da:	f240 2145 	movw	r1, #581	@ 0x245
 80126de:	e7e3      	b.n	80126a8 <__mdiff+0x28>
 80126e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80126e4:	6926      	ldr	r6, [r4, #16]
 80126e6:	60c5      	str	r5, [r0, #12]
 80126e8:	f109 0310 	add.w	r3, r9, #16
 80126ec:	f109 0514 	add.w	r5, r9, #20
 80126f0:	f104 0e14 	add.w	lr, r4, #20
 80126f4:	f100 0b14 	add.w	fp, r0, #20
 80126f8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80126fc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012700:	9301      	str	r3, [sp, #4]
 8012702:	46d9      	mov	r9, fp
 8012704:	f04f 0c00 	mov.w	ip, #0
 8012708:	9b01      	ldr	r3, [sp, #4]
 801270a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801270e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012712:	9301      	str	r3, [sp, #4]
 8012714:	fa1f f38a 	uxth.w	r3, sl
 8012718:	4619      	mov	r1, r3
 801271a:	b283      	uxth	r3, r0
 801271c:	1acb      	subs	r3, r1, r3
 801271e:	0c00      	lsrs	r0, r0, #16
 8012720:	4463      	add	r3, ip
 8012722:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012726:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801272a:	b29b      	uxth	r3, r3
 801272c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012730:	4576      	cmp	r6, lr
 8012732:	f849 3b04 	str.w	r3, [r9], #4
 8012736:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801273a:	d8e5      	bhi.n	8012708 <__mdiff+0x88>
 801273c:	1b33      	subs	r3, r6, r4
 801273e:	3b15      	subs	r3, #21
 8012740:	f023 0303 	bic.w	r3, r3, #3
 8012744:	3415      	adds	r4, #21
 8012746:	3304      	adds	r3, #4
 8012748:	42a6      	cmp	r6, r4
 801274a:	bf38      	it	cc
 801274c:	2304      	movcc	r3, #4
 801274e:	441d      	add	r5, r3
 8012750:	445b      	add	r3, fp
 8012752:	461e      	mov	r6, r3
 8012754:	462c      	mov	r4, r5
 8012756:	4544      	cmp	r4, r8
 8012758:	d30e      	bcc.n	8012778 <__mdiff+0xf8>
 801275a:	f108 0103 	add.w	r1, r8, #3
 801275e:	1b49      	subs	r1, r1, r5
 8012760:	f021 0103 	bic.w	r1, r1, #3
 8012764:	3d03      	subs	r5, #3
 8012766:	45a8      	cmp	r8, r5
 8012768:	bf38      	it	cc
 801276a:	2100      	movcc	r1, #0
 801276c:	440b      	add	r3, r1
 801276e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012772:	b191      	cbz	r1, 801279a <__mdiff+0x11a>
 8012774:	6117      	str	r7, [r2, #16]
 8012776:	e79d      	b.n	80126b4 <__mdiff+0x34>
 8012778:	f854 1b04 	ldr.w	r1, [r4], #4
 801277c:	46e6      	mov	lr, ip
 801277e:	0c08      	lsrs	r0, r1, #16
 8012780:	fa1c fc81 	uxtah	ip, ip, r1
 8012784:	4471      	add	r1, lr
 8012786:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801278a:	b289      	uxth	r1, r1
 801278c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012790:	f846 1b04 	str.w	r1, [r6], #4
 8012794:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012798:	e7dd      	b.n	8012756 <__mdiff+0xd6>
 801279a:	3f01      	subs	r7, #1
 801279c:	e7e7      	b.n	801276e <__mdiff+0xee>
 801279e:	bf00      	nop
 80127a0:	08013d48 	.word	0x08013d48
 80127a4:	08013d59 	.word	0x08013d59

080127a8 <__d2b>:
 80127a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80127ac:	460f      	mov	r7, r1
 80127ae:	2101      	movs	r1, #1
 80127b0:	ec59 8b10 	vmov	r8, r9, d0
 80127b4:	4616      	mov	r6, r2
 80127b6:	f7ff fccd 	bl	8012154 <_Balloc>
 80127ba:	4604      	mov	r4, r0
 80127bc:	b930      	cbnz	r0, 80127cc <__d2b+0x24>
 80127be:	4602      	mov	r2, r0
 80127c0:	4b23      	ldr	r3, [pc, #140]	@ (8012850 <__d2b+0xa8>)
 80127c2:	4824      	ldr	r0, [pc, #144]	@ (8012854 <__d2b+0xac>)
 80127c4:	f240 310f 	movw	r1, #783	@ 0x30f
 80127c8:	f000 fa64 	bl	8012c94 <__assert_func>
 80127cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80127d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80127d4:	b10d      	cbz	r5, 80127da <__d2b+0x32>
 80127d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80127da:	9301      	str	r3, [sp, #4]
 80127dc:	f1b8 0300 	subs.w	r3, r8, #0
 80127e0:	d023      	beq.n	801282a <__d2b+0x82>
 80127e2:	4668      	mov	r0, sp
 80127e4:	9300      	str	r3, [sp, #0]
 80127e6:	f7ff fd7c 	bl	80122e2 <__lo0bits>
 80127ea:	e9dd 1200 	ldrd	r1, r2, [sp]
 80127ee:	b1d0      	cbz	r0, 8012826 <__d2b+0x7e>
 80127f0:	f1c0 0320 	rsb	r3, r0, #32
 80127f4:	fa02 f303 	lsl.w	r3, r2, r3
 80127f8:	430b      	orrs	r3, r1
 80127fa:	40c2      	lsrs	r2, r0
 80127fc:	6163      	str	r3, [r4, #20]
 80127fe:	9201      	str	r2, [sp, #4]
 8012800:	9b01      	ldr	r3, [sp, #4]
 8012802:	61a3      	str	r3, [r4, #24]
 8012804:	2b00      	cmp	r3, #0
 8012806:	bf0c      	ite	eq
 8012808:	2201      	moveq	r2, #1
 801280a:	2202      	movne	r2, #2
 801280c:	6122      	str	r2, [r4, #16]
 801280e:	b1a5      	cbz	r5, 801283a <__d2b+0x92>
 8012810:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012814:	4405      	add	r5, r0
 8012816:	603d      	str	r5, [r7, #0]
 8012818:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801281c:	6030      	str	r0, [r6, #0]
 801281e:	4620      	mov	r0, r4
 8012820:	b003      	add	sp, #12
 8012822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012826:	6161      	str	r1, [r4, #20]
 8012828:	e7ea      	b.n	8012800 <__d2b+0x58>
 801282a:	a801      	add	r0, sp, #4
 801282c:	f7ff fd59 	bl	80122e2 <__lo0bits>
 8012830:	9b01      	ldr	r3, [sp, #4]
 8012832:	6163      	str	r3, [r4, #20]
 8012834:	3020      	adds	r0, #32
 8012836:	2201      	movs	r2, #1
 8012838:	e7e8      	b.n	801280c <__d2b+0x64>
 801283a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801283e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012842:	6038      	str	r0, [r7, #0]
 8012844:	6918      	ldr	r0, [r3, #16]
 8012846:	f7ff fd2d 	bl	80122a4 <__hi0bits>
 801284a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801284e:	e7e5      	b.n	801281c <__d2b+0x74>
 8012850:	08013d48 	.word	0x08013d48
 8012854:	08013d59 	.word	0x08013d59

08012858 <__ssputs_r>:
 8012858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801285c:	688e      	ldr	r6, [r1, #8]
 801285e:	461f      	mov	r7, r3
 8012860:	42be      	cmp	r6, r7
 8012862:	680b      	ldr	r3, [r1, #0]
 8012864:	4682      	mov	sl, r0
 8012866:	460c      	mov	r4, r1
 8012868:	4690      	mov	r8, r2
 801286a:	d82d      	bhi.n	80128c8 <__ssputs_r+0x70>
 801286c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012870:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012874:	d026      	beq.n	80128c4 <__ssputs_r+0x6c>
 8012876:	6965      	ldr	r5, [r4, #20]
 8012878:	6909      	ldr	r1, [r1, #16]
 801287a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801287e:	eba3 0901 	sub.w	r9, r3, r1
 8012882:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012886:	1c7b      	adds	r3, r7, #1
 8012888:	444b      	add	r3, r9
 801288a:	106d      	asrs	r5, r5, #1
 801288c:	429d      	cmp	r5, r3
 801288e:	bf38      	it	cc
 8012890:	461d      	movcc	r5, r3
 8012892:	0553      	lsls	r3, r2, #21
 8012894:	d527      	bpl.n	80128e6 <__ssputs_r+0x8e>
 8012896:	4629      	mov	r1, r5
 8012898:	f7fd ff0e 	bl	80106b8 <_malloc_r>
 801289c:	4606      	mov	r6, r0
 801289e:	b360      	cbz	r0, 80128fa <__ssputs_r+0xa2>
 80128a0:	6921      	ldr	r1, [r4, #16]
 80128a2:	464a      	mov	r2, r9
 80128a4:	f7fe fdaf 	bl	8011406 <memcpy>
 80128a8:	89a3      	ldrh	r3, [r4, #12]
 80128aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80128ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80128b2:	81a3      	strh	r3, [r4, #12]
 80128b4:	6126      	str	r6, [r4, #16]
 80128b6:	6165      	str	r5, [r4, #20]
 80128b8:	444e      	add	r6, r9
 80128ba:	eba5 0509 	sub.w	r5, r5, r9
 80128be:	6026      	str	r6, [r4, #0]
 80128c0:	60a5      	str	r5, [r4, #8]
 80128c2:	463e      	mov	r6, r7
 80128c4:	42be      	cmp	r6, r7
 80128c6:	d900      	bls.n	80128ca <__ssputs_r+0x72>
 80128c8:	463e      	mov	r6, r7
 80128ca:	6820      	ldr	r0, [r4, #0]
 80128cc:	4632      	mov	r2, r6
 80128ce:	4641      	mov	r1, r8
 80128d0:	f000 f9c6 	bl	8012c60 <memmove>
 80128d4:	68a3      	ldr	r3, [r4, #8]
 80128d6:	1b9b      	subs	r3, r3, r6
 80128d8:	60a3      	str	r3, [r4, #8]
 80128da:	6823      	ldr	r3, [r4, #0]
 80128dc:	4433      	add	r3, r6
 80128de:	6023      	str	r3, [r4, #0]
 80128e0:	2000      	movs	r0, #0
 80128e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128e6:	462a      	mov	r2, r5
 80128e8:	f000 fa18 	bl	8012d1c <_realloc_r>
 80128ec:	4606      	mov	r6, r0
 80128ee:	2800      	cmp	r0, #0
 80128f0:	d1e0      	bne.n	80128b4 <__ssputs_r+0x5c>
 80128f2:	6921      	ldr	r1, [r4, #16]
 80128f4:	4650      	mov	r0, sl
 80128f6:	f7ff fbe3 	bl	80120c0 <_free_r>
 80128fa:	230c      	movs	r3, #12
 80128fc:	f8ca 3000 	str.w	r3, [sl]
 8012900:	89a3      	ldrh	r3, [r4, #12]
 8012902:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012906:	81a3      	strh	r3, [r4, #12]
 8012908:	f04f 30ff 	mov.w	r0, #4294967295
 801290c:	e7e9      	b.n	80128e2 <__ssputs_r+0x8a>
	...

08012910 <_svfiprintf_r>:
 8012910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012914:	4698      	mov	r8, r3
 8012916:	898b      	ldrh	r3, [r1, #12]
 8012918:	061b      	lsls	r3, r3, #24
 801291a:	b09d      	sub	sp, #116	@ 0x74
 801291c:	4607      	mov	r7, r0
 801291e:	460d      	mov	r5, r1
 8012920:	4614      	mov	r4, r2
 8012922:	d510      	bpl.n	8012946 <_svfiprintf_r+0x36>
 8012924:	690b      	ldr	r3, [r1, #16]
 8012926:	b973      	cbnz	r3, 8012946 <_svfiprintf_r+0x36>
 8012928:	2140      	movs	r1, #64	@ 0x40
 801292a:	f7fd fec5 	bl	80106b8 <_malloc_r>
 801292e:	6028      	str	r0, [r5, #0]
 8012930:	6128      	str	r0, [r5, #16]
 8012932:	b930      	cbnz	r0, 8012942 <_svfiprintf_r+0x32>
 8012934:	230c      	movs	r3, #12
 8012936:	603b      	str	r3, [r7, #0]
 8012938:	f04f 30ff 	mov.w	r0, #4294967295
 801293c:	b01d      	add	sp, #116	@ 0x74
 801293e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012942:	2340      	movs	r3, #64	@ 0x40
 8012944:	616b      	str	r3, [r5, #20]
 8012946:	2300      	movs	r3, #0
 8012948:	9309      	str	r3, [sp, #36]	@ 0x24
 801294a:	2320      	movs	r3, #32
 801294c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012950:	f8cd 800c 	str.w	r8, [sp, #12]
 8012954:	2330      	movs	r3, #48	@ 0x30
 8012956:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012af4 <_svfiprintf_r+0x1e4>
 801295a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801295e:	f04f 0901 	mov.w	r9, #1
 8012962:	4623      	mov	r3, r4
 8012964:	469a      	mov	sl, r3
 8012966:	f813 2b01 	ldrb.w	r2, [r3], #1
 801296a:	b10a      	cbz	r2, 8012970 <_svfiprintf_r+0x60>
 801296c:	2a25      	cmp	r2, #37	@ 0x25
 801296e:	d1f9      	bne.n	8012964 <_svfiprintf_r+0x54>
 8012970:	ebba 0b04 	subs.w	fp, sl, r4
 8012974:	d00b      	beq.n	801298e <_svfiprintf_r+0x7e>
 8012976:	465b      	mov	r3, fp
 8012978:	4622      	mov	r2, r4
 801297a:	4629      	mov	r1, r5
 801297c:	4638      	mov	r0, r7
 801297e:	f7ff ff6b 	bl	8012858 <__ssputs_r>
 8012982:	3001      	adds	r0, #1
 8012984:	f000 80a7 	beq.w	8012ad6 <_svfiprintf_r+0x1c6>
 8012988:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801298a:	445a      	add	r2, fp
 801298c:	9209      	str	r2, [sp, #36]	@ 0x24
 801298e:	f89a 3000 	ldrb.w	r3, [sl]
 8012992:	2b00      	cmp	r3, #0
 8012994:	f000 809f 	beq.w	8012ad6 <_svfiprintf_r+0x1c6>
 8012998:	2300      	movs	r3, #0
 801299a:	f04f 32ff 	mov.w	r2, #4294967295
 801299e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80129a2:	f10a 0a01 	add.w	sl, sl, #1
 80129a6:	9304      	str	r3, [sp, #16]
 80129a8:	9307      	str	r3, [sp, #28]
 80129aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80129ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80129b0:	4654      	mov	r4, sl
 80129b2:	2205      	movs	r2, #5
 80129b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129b8:	484e      	ldr	r0, [pc, #312]	@ (8012af4 <_svfiprintf_r+0x1e4>)
 80129ba:	f7ed fc11 	bl	80001e0 <memchr>
 80129be:	9a04      	ldr	r2, [sp, #16]
 80129c0:	b9d8      	cbnz	r0, 80129fa <_svfiprintf_r+0xea>
 80129c2:	06d0      	lsls	r0, r2, #27
 80129c4:	bf44      	itt	mi
 80129c6:	2320      	movmi	r3, #32
 80129c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80129cc:	0711      	lsls	r1, r2, #28
 80129ce:	bf44      	itt	mi
 80129d0:	232b      	movmi	r3, #43	@ 0x2b
 80129d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80129d6:	f89a 3000 	ldrb.w	r3, [sl]
 80129da:	2b2a      	cmp	r3, #42	@ 0x2a
 80129dc:	d015      	beq.n	8012a0a <_svfiprintf_r+0xfa>
 80129de:	9a07      	ldr	r2, [sp, #28]
 80129e0:	4654      	mov	r4, sl
 80129e2:	2000      	movs	r0, #0
 80129e4:	f04f 0c0a 	mov.w	ip, #10
 80129e8:	4621      	mov	r1, r4
 80129ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80129ee:	3b30      	subs	r3, #48	@ 0x30
 80129f0:	2b09      	cmp	r3, #9
 80129f2:	d94b      	bls.n	8012a8c <_svfiprintf_r+0x17c>
 80129f4:	b1b0      	cbz	r0, 8012a24 <_svfiprintf_r+0x114>
 80129f6:	9207      	str	r2, [sp, #28]
 80129f8:	e014      	b.n	8012a24 <_svfiprintf_r+0x114>
 80129fa:	eba0 0308 	sub.w	r3, r0, r8
 80129fe:	fa09 f303 	lsl.w	r3, r9, r3
 8012a02:	4313      	orrs	r3, r2
 8012a04:	9304      	str	r3, [sp, #16]
 8012a06:	46a2      	mov	sl, r4
 8012a08:	e7d2      	b.n	80129b0 <_svfiprintf_r+0xa0>
 8012a0a:	9b03      	ldr	r3, [sp, #12]
 8012a0c:	1d19      	adds	r1, r3, #4
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	9103      	str	r1, [sp, #12]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	bfbb      	ittet	lt
 8012a16:	425b      	neglt	r3, r3
 8012a18:	f042 0202 	orrlt.w	r2, r2, #2
 8012a1c:	9307      	strge	r3, [sp, #28]
 8012a1e:	9307      	strlt	r3, [sp, #28]
 8012a20:	bfb8      	it	lt
 8012a22:	9204      	strlt	r2, [sp, #16]
 8012a24:	7823      	ldrb	r3, [r4, #0]
 8012a26:	2b2e      	cmp	r3, #46	@ 0x2e
 8012a28:	d10a      	bne.n	8012a40 <_svfiprintf_r+0x130>
 8012a2a:	7863      	ldrb	r3, [r4, #1]
 8012a2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8012a2e:	d132      	bne.n	8012a96 <_svfiprintf_r+0x186>
 8012a30:	9b03      	ldr	r3, [sp, #12]
 8012a32:	1d1a      	adds	r2, r3, #4
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	9203      	str	r2, [sp, #12]
 8012a38:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012a3c:	3402      	adds	r4, #2
 8012a3e:	9305      	str	r3, [sp, #20]
 8012a40:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012b04 <_svfiprintf_r+0x1f4>
 8012a44:	7821      	ldrb	r1, [r4, #0]
 8012a46:	2203      	movs	r2, #3
 8012a48:	4650      	mov	r0, sl
 8012a4a:	f7ed fbc9 	bl	80001e0 <memchr>
 8012a4e:	b138      	cbz	r0, 8012a60 <_svfiprintf_r+0x150>
 8012a50:	9b04      	ldr	r3, [sp, #16]
 8012a52:	eba0 000a 	sub.w	r0, r0, sl
 8012a56:	2240      	movs	r2, #64	@ 0x40
 8012a58:	4082      	lsls	r2, r0
 8012a5a:	4313      	orrs	r3, r2
 8012a5c:	3401      	adds	r4, #1
 8012a5e:	9304      	str	r3, [sp, #16]
 8012a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a64:	4824      	ldr	r0, [pc, #144]	@ (8012af8 <_svfiprintf_r+0x1e8>)
 8012a66:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012a6a:	2206      	movs	r2, #6
 8012a6c:	f7ed fbb8 	bl	80001e0 <memchr>
 8012a70:	2800      	cmp	r0, #0
 8012a72:	d036      	beq.n	8012ae2 <_svfiprintf_r+0x1d2>
 8012a74:	4b21      	ldr	r3, [pc, #132]	@ (8012afc <_svfiprintf_r+0x1ec>)
 8012a76:	bb1b      	cbnz	r3, 8012ac0 <_svfiprintf_r+0x1b0>
 8012a78:	9b03      	ldr	r3, [sp, #12]
 8012a7a:	3307      	adds	r3, #7
 8012a7c:	f023 0307 	bic.w	r3, r3, #7
 8012a80:	3308      	adds	r3, #8
 8012a82:	9303      	str	r3, [sp, #12]
 8012a84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a86:	4433      	add	r3, r6
 8012a88:	9309      	str	r3, [sp, #36]	@ 0x24
 8012a8a:	e76a      	b.n	8012962 <_svfiprintf_r+0x52>
 8012a8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012a90:	460c      	mov	r4, r1
 8012a92:	2001      	movs	r0, #1
 8012a94:	e7a8      	b.n	80129e8 <_svfiprintf_r+0xd8>
 8012a96:	2300      	movs	r3, #0
 8012a98:	3401      	adds	r4, #1
 8012a9a:	9305      	str	r3, [sp, #20]
 8012a9c:	4619      	mov	r1, r3
 8012a9e:	f04f 0c0a 	mov.w	ip, #10
 8012aa2:	4620      	mov	r0, r4
 8012aa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012aa8:	3a30      	subs	r2, #48	@ 0x30
 8012aaa:	2a09      	cmp	r2, #9
 8012aac:	d903      	bls.n	8012ab6 <_svfiprintf_r+0x1a6>
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d0c6      	beq.n	8012a40 <_svfiprintf_r+0x130>
 8012ab2:	9105      	str	r1, [sp, #20]
 8012ab4:	e7c4      	b.n	8012a40 <_svfiprintf_r+0x130>
 8012ab6:	fb0c 2101 	mla	r1, ip, r1, r2
 8012aba:	4604      	mov	r4, r0
 8012abc:	2301      	movs	r3, #1
 8012abe:	e7f0      	b.n	8012aa2 <_svfiprintf_r+0x192>
 8012ac0:	ab03      	add	r3, sp, #12
 8012ac2:	9300      	str	r3, [sp, #0]
 8012ac4:	462a      	mov	r2, r5
 8012ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8012b00 <_svfiprintf_r+0x1f0>)
 8012ac8:	a904      	add	r1, sp, #16
 8012aca:	4638      	mov	r0, r7
 8012acc:	f7fd ff20 	bl	8010910 <_printf_float>
 8012ad0:	1c42      	adds	r2, r0, #1
 8012ad2:	4606      	mov	r6, r0
 8012ad4:	d1d6      	bne.n	8012a84 <_svfiprintf_r+0x174>
 8012ad6:	89ab      	ldrh	r3, [r5, #12]
 8012ad8:	065b      	lsls	r3, r3, #25
 8012ada:	f53f af2d 	bmi.w	8012938 <_svfiprintf_r+0x28>
 8012ade:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012ae0:	e72c      	b.n	801293c <_svfiprintf_r+0x2c>
 8012ae2:	ab03      	add	r3, sp, #12
 8012ae4:	9300      	str	r3, [sp, #0]
 8012ae6:	462a      	mov	r2, r5
 8012ae8:	4b05      	ldr	r3, [pc, #20]	@ (8012b00 <_svfiprintf_r+0x1f0>)
 8012aea:	a904      	add	r1, sp, #16
 8012aec:	4638      	mov	r0, r7
 8012aee:	f7fe f9a7 	bl	8010e40 <_printf_i>
 8012af2:	e7ed      	b.n	8012ad0 <_svfiprintf_r+0x1c0>
 8012af4:	08013eb0 	.word	0x08013eb0
 8012af8:	08013eba 	.word	0x08013eba
 8012afc:	08010911 	.word	0x08010911
 8012b00:	08012859 	.word	0x08012859
 8012b04:	08013eb6 	.word	0x08013eb6

08012b08 <__sflush_r>:
 8012b08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b10:	0716      	lsls	r6, r2, #28
 8012b12:	4605      	mov	r5, r0
 8012b14:	460c      	mov	r4, r1
 8012b16:	d454      	bmi.n	8012bc2 <__sflush_r+0xba>
 8012b18:	684b      	ldr	r3, [r1, #4]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	dc02      	bgt.n	8012b24 <__sflush_r+0x1c>
 8012b1e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	dd48      	ble.n	8012bb6 <__sflush_r+0xae>
 8012b24:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012b26:	2e00      	cmp	r6, #0
 8012b28:	d045      	beq.n	8012bb6 <__sflush_r+0xae>
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012b30:	682f      	ldr	r7, [r5, #0]
 8012b32:	6a21      	ldr	r1, [r4, #32]
 8012b34:	602b      	str	r3, [r5, #0]
 8012b36:	d030      	beq.n	8012b9a <__sflush_r+0x92>
 8012b38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012b3a:	89a3      	ldrh	r3, [r4, #12]
 8012b3c:	0759      	lsls	r1, r3, #29
 8012b3e:	d505      	bpl.n	8012b4c <__sflush_r+0x44>
 8012b40:	6863      	ldr	r3, [r4, #4]
 8012b42:	1ad2      	subs	r2, r2, r3
 8012b44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012b46:	b10b      	cbz	r3, 8012b4c <__sflush_r+0x44>
 8012b48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012b4a:	1ad2      	subs	r2, r2, r3
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012b50:	6a21      	ldr	r1, [r4, #32]
 8012b52:	4628      	mov	r0, r5
 8012b54:	47b0      	blx	r6
 8012b56:	1c43      	adds	r3, r0, #1
 8012b58:	89a3      	ldrh	r3, [r4, #12]
 8012b5a:	d106      	bne.n	8012b6a <__sflush_r+0x62>
 8012b5c:	6829      	ldr	r1, [r5, #0]
 8012b5e:	291d      	cmp	r1, #29
 8012b60:	d82b      	bhi.n	8012bba <__sflush_r+0xb2>
 8012b62:	4a2a      	ldr	r2, [pc, #168]	@ (8012c0c <__sflush_r+0x104>)
 8012b64:	410a      	asrs	r2, r1
 8012b66:	07d6      	lsls	r6, r2, #31
 8012b68:	d427      	bmi.n	8012bba <__sflush_r+0xb2>
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	6062      	str	r2, [r4, #4]
 8012b6e:	04d9      	lsls	r1, r3, #19
 8012b70:	6922      	ldr	r2, [r4, #16]
 8012b72:	6022      	str	r2, [r4, #0]
 8012b74:	d504      	bpl.n	8012b80 <__sflush_r+0x78>
 8012b76:	1c42      	adds	r2, r0, #1
 8012b78:	d101      	bne.n	8012b7e <__sflush_r+0x76>
 8012b7a:	682b      	ldr	r3, [r5, #0]
 8012b7c:	b903      	cbnz	r3, 8012b80 <__sflush_r+0x78>
 8012b7e:	6560      	str	r0, [r4, #84]	@ 0x54
 8012b80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012b82:	602f      	str	r7, [r5, #0]
 8012b84:	b1b9      	cbz	r1, 8012bb6 <__sflush_r+0xae>
 8012b86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012b8a:	4299      	cmp	r1, r3
 8012b8c:	d002      	beq.n	8012b94 <__sflush_r+0x8c>
 8012b8e:	4628      	mov	r0, r5
 8012b90:	f7ff fa96 	bl	80120c0 <_free_r>
 8012b94:	2300      	movs	r3, #0
 8012b96:	6363      	str	r3, [r4, #52]	@ 0x34
 8012b98:	e00d      	b.n	8012bb6 <__sflush_r+0xae>
 8012b9a:	2301      	movs	r3, #1
 8012b9c:	4628      	mov	r0, r5
 8012b9e:	47b0      	blx	r6
 8012ba0:	4602      	mov	r2, r0
 8012ba2:	1c50      	adds	r0, r2, #1
 8012ba4:	d1c9      	bne.n	8012b3a <__sflush_r+0x32>
 8012ba6:	682b      	ldr	r3, [r5, #0]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d0c6      	beq.n	8012b3a <__sflush_r+0x32>
 8012bac:	2b1d      	cmp	r3, #29
 8012bae:	d001      	beq.n	8012bb4 <__sflush_r+0xac>
 8012bb0:	2b16      	cmp	r3, #22
 8012bb2:	d11e      	bne.n	8012bf2 <__sflush_r+0xea>
 8012bb4:	602f      	str	r7, [r5, #0]
 8012bb6:	2000      	movs	r0, #0
 8012bb8:	e022      	b.n	8012c00 <__sflush_r+0xf8>
 8012bba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012bbe:	b21b      	sxth	r3, r3
 8012bc0:	e01b      	b.n	8012bfa <__sflush_r+0xf2>
 8012bc2:	690f      	ldr	r7, [r1, #16]
 8012bc4:	2f00      	cmp	r7, #0
 8012bc6:	d0f6      	beq.n	8012bb6 <__sflush_r+0xae>
 8012bc8:	0793      	lsls	r3, r2, #30
 8012bca:	680e      	ldr	r6, [r1, #0]
 8012bcc:	bf08      	it	eq
 8012bce:	694b      	ldreq	r3, [r1, #20]
 8012bd0:	600f      	str	r7, [r1, #0]
 8012bd2:	bf18      	it	ne
 8012bd4:	2300      	movne	r3, #0
 8012bd6:	eba6 0807 	sub.w	r8, r6, r7
 8012bda:	608b      	str	r3, [r1, #8]
 8012bdc:	f1b8 0f00 	cmp.w	r8, #0
 8012be0:	dde9      	ble.n	8012bb6 <__sflush_r+0xae>
 8012be2:	6a21      	ldr	r1, [r4, #32]
 8012be4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012be6:	4643      	mov	r3, r8
 8012be8:	463a      	mov	r2, r7
 8012bea:	4628      	mov	r0, r5
 8012bec:	47b0      	blx	r6
 8012bee:	2800      	cmp	r0, #0
 8012bf0:	dc08      	bgt.n	8012c04 <__sflush_r+0xfc>
 8012bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012bf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012bfa:	81a3      	strh	r3, [r4, #12]
 8012bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8012c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c04:	4407      	add	r7, r0
 8012c06:	eba8 0800 	sub.w	r8, r8, r0
 8012c0a:	e7e7      	b.n	8012bdc <__sflush_r+0xd4>
 8012c0c:	dfbffffe 	.word	0xdfbffffe

08012c10 <_fflush_r>:
 8012c10:	b538      	push	{r3, r4, r5, lr}
 8012c12:	690b      	ldr	r3, [r1, #16]
 8012c14:	4605      	mov	r5, r0
 8012c16:	460c      	mov	r4, r1
 8012c18:	b913      	cbnz	r3, 8012c20 <_fflush_r+0x10>
 8012c1a:	2500      	movs	r5, #0
 8012c1c:	4628      	mov	r0, r5
 8012c1e:	bd38      	pop	{r3, r4, r5, pc}
 8012c20:	b118      	cbz	r0, 8012c2a <_fflush_r+0x1a>
 8012c22:	6a03      	ldr	r3, [r0, #32]
 8012c24:	b90b      	cbnz	r3, 8012c2a <_fflush_r+0x1a>
 8012c26:	f7fe fab7 	bl	8011198 <__sinit>
 8012c2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d0f3      	beq.n	8012c1a <_fflush_r+0xa>
 8012c32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012c34:	07d0      	lsls	r0, r2, #31
 8012c36:	d404      	bmi.n	8012c42 <_fflush_r+0x32>
 8012c38:	0599      	lsls	r1, r3, #22
 8012c3a:	d402      	bmi.n	8012c42 <_fflush_r+0x32>
 8012c3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012c3e:	f7fe fbe0 	bl	8011402 <__retarget_lock_acquire_recursive>
 8012c42:	4628      	mov	r0, r5
 8012c44:	4621      	mov	r1, r4
 8012c46:	f7ff ff5f 	bl	8012b08 <__sflush_r>
 8012c4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012c4c:	07da      	lsls	r2, r3, #31
 8012c4e:	4605      	mov	r5, r0
 8012c50:	d4e4      	bmi.n	8012c1c <_fflush_r+0xc>
 8012c52:	89a3      	ldrh	r3, [r4, #12]
 8012c54:	059b      	lsls	r3, r3, #22
 8012c56:	d4e1      	bmi.n	8012c1c <_fflush_r+0xc>
 8012c58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012c5a:	f7fe fbd3 	bl	8011404 <__retarget_lock_release_recursive>
 8012c5e:	e7dd      	b.n	8012c1c <_fflush_r+0xc>

08012c60 <memmove>:
 8012c60:	4288      	cmp	r0, r1
 8012c62:	b510      	push	{r4, lr}
 8012c64:	eb01 0402 	add.w	r4, r1, r2
 8012c68:	d902      	bls.n	8012c70 <memmove+0x10>
 8012c6a:	4284      	cmp	r4, r0
 8012c6c:	4623      	mov	r3, r4
 8012c6e:	d807      	bhi.n	8012c80 <memmove+0x20>
 8012c70:	1e43      	subs	r3, r0, #1
 8012c72:	42a1      	cmp	r1, r4
 8012c74:	d008      	beq.n	8012c88 <memmove+0x28>
 8012c76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012c7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012c7e:	e7f8      	b.n	8012c72 <memmove+0x12>
 8012c80:	4402      	add	r2, r0
 8012c82:	4601      	mov	r1, r0
 8012c84:	428a      	cmp	r2, r1
 8012c86:	d100      	bne.n	8012c8a <memmove+0x2a>
 8012c88:	bd10      	pop	{r4, pc}
 8012c8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012c8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012c92:	e7f7      	b.n	8012c84 <memmove+0x24>

08012c94 <__assert_func>:
 8012c94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012c96:	4614      	mov	r4, r2
 8012c98:	461a      	mov	r2, r3
 8012c9a:	4b09      	ldr	r3, [pc, #36]	@ (8012cc0 <__assert_func+0x2c>)
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	4605      	mov	r5, r0
 8012ca0:	68d8      	ldr	r0, [r3, #12]
 8012ca2:	b954      	cbnz	r4, 8012cba <__assert_func+0x26>
 8012ca4:	4b07      	ldr	r3, [pc, #28]	@ (8012cc4 <__assert_func+0x30>)
 8012ca6:	461c      	mov	r4, r3
 8012ca8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012cac:	9100      	str	r1, [sp, #0]
 8012cae:	462b      	mov	r3, r5
 8012cb0:	4905      	ldr	r1, [pc, #20]	@ (8012cc8 <__assert_func+0x34>)
 8012cb2:	f000 f86f 	bl	8012d94 <fiprintf>
 8012cb6:	f000 f87f 	bl	8012db8 <abort>
 8012cba:	4b04      	ldr	r3, [pc, #16]	@ (8012ccc <__assert_func+0x38>)
 8012cbc:	e7f4      	b.n	8012ca8 <__assert_func+0x14>
 8012cbe:	bf00      	nop
 8012cc0:	20000168 	.word	0x20000168
 8012cc4:	08013f06 	.word	0x08013f06
 8012cc8:	08013ed8 	.word	0x08013ed8
 8012ccc:	08013ecb 	.word	0x08013ecb

08012cd0 <_calloc_r>:
 8012cd0:	b570      	push	{r4, r5, r6, lr}
 8012cd2:	fba1 5402 	umull	r5, r4, r1, r2
 8012cd6:	b93c      	cbnz	r4, 8012ce8 <_calloc_r+0x18>
 8012cd8:	4629      	mov	r1, r5
 8012cda:	f7fd fced 	bl	80106b8 <_malloc_r>
 8012cde:	4606      	mov	r6, r0
 8012ce0:	b928      	cbnz	r0, 8012cee <_calloc_r+0x1e>
 8012ce2:	2600      	movs	r6, #0
 8012ce4:	4630      	mov	r0, r6
 8012ce6:	bd70      	pop	{r4, r5, r6, pc}
 8012ce8:	220c      	movs	r2, #12
 8012cea:	6002      	str	r2, [r0, #0]
 8012cec:	e7f9      	b.n	8012ce2 <_calloc_r+0x12>
 8012cee:	462a      	mov	r2, r5
 8012cf0:	4621      	mov	r1, r4
 8012cf2:	f7fe faea 	bl	80112ca <memset>
 8012cf6:	e7f5      	b.n	8012ce4 <_calloc_r+0x14>

08012cf8 <__ascii_mbtowc>:
 8012cf8:	b082      	sub	sp, #8
 8012cfa:	b901      	cbnz	r1, 8012cfe <__ascii_mbtowc+0x6>
 8012cfc:	a901      	add	r1, sp, #4
 8012cfe:	b142      	cbz	r2, 8012d12 <__ascii_mbtowc+0x1a>
 8012d00:	b14b      	cbz	r3, 8012d16 <__ascii_mbtowc+0x1e>
 8012d02:	7813      	ldrb	r3, [r2, #0]
 8012d04:	600b      	str	r3, [r1, #0]
 8012d06:	7812      	ldrb	r2, [r2, #0]
 8012d08:	1e10      	subs	r0, r2, #0
 8012d0a:	bf18      	it	ne
 8012d0c:	2001      	movne	r0, #1
 8012d0e:	b002      	add	sp, #8
 8012d10:	4770      	bx	lr
 8012d12:	4610      	mov	r0, r2
 8012d14:	e7fb      	b.n	8012d0e <__ascii_mbtowc+0x16>
 8012d16:	f06f 0001 	mvn.w	r0, #1
 8012d1a:	e7f8      	b.n	8012d0e <__ascii_mbtowc+0x16>

08012d1c <_realloc_r>:
 8012d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d20:	4680      	mov	r8, r0
 8012d22:	4615      	mov	r5, r2
 8012d24:	460c      	mov	r4, r1
 8012d26:	b921      	cbnz	r1, 8012d32 <_realloc_r+0x16>
 8012d28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d2c:	4611      	mov	r1, r2
 8012d2e:	f7fd bcc3 	b.w	80106b8 <_malloc_r>
 8012d32:	b92a      	cbnz	r2, 8012d40 <_realloc_r+0x24>
 8012d34:	f7ff f9c4 	bl	80120c0 <_free_r>
 8012d38:	2400      	movs	r4, #0
 8012d3a:	4620      	mov	r0, r4
 8012d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d40:	f000 f841 	bl	8012dc6 <_malloc_usable_size_r>
 8012d44:	4285      	cmp	r5, r0
 8012d46:	4606      	mov	r6, r0
 8012d48:	d802      	bhi.n	8012d50 <_realloc_r+0x34>
 8012d4a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012d4e:	d8f4      	bhi.n	8012d3a <_realloc_r+0x1e>
 8012d50:	4629      	mov	r1, r5
 8012d52:	4640      	mov	r0, r8
 8012d54:	f7fd fcb0 	bl	80106b8 <_malloc_r>
 8012d58:	4607      	mov	r7, r0
 8012d5a:	2800      	cmp	r0, #0
 8012d5c:	d0ec      	beq.n	8012d38 <_realloc_r+0x1c>
 8012d5e:	42b5      	cmp	r5, r6
 8012d60:	462a      	mov	r2, r5
 8012d62:	4621      	mov	r1, r4
 8012d64:	bf28      	it	cs
 8012d66:	4632      	movcs	r2, r6
 8012d68:	f7fe fb4d 	bl	8011406 <memcpy>
 8012d6c:	4621      	mov	r1, r4
 8012d6e:	4640      	mov	r0, r8
 8012d70:	f7ff f9a6 	bl	80120c0 <_free_r>
 8012d74:	463c      	mov	r4, r7
 8012d76:	e7e0      	b.n	8012d3a <_realloc_r+0x1e>

08012d78 <__ascii_wctomb>:
 8012d78:	4603      	mov	r3, r0
 8012d7a:	4608      	mov	r0, r1
 8012d7c:	b141      	cbz	r1, 8012d90 <__ascii_wctomb+0x18>
 8012d7e:	2aff      	cmp	r2, #255	@ 0xff
 8012d80:	d904      	bls.n	8012d8c <__ascii_wctomb+0x14>
 8012d82:	228a      	movs	r2, #138	@ 0x8a
 8012d84:	601a      	str	r2, [r3, #0]
 8012d86:	f04f 30ff 	mov.w	r0, #4294967295
 8012d8a:	4770      	bx	lr
 8012d8c:	700a      	strb	r2, [r1, #0]
 8012d8e:	2001      	movs	r0, #1
 8012d90:	4770      	bx	lr
	...

08012d94 <fiprintf>:
 8012d94:	b40e      	push	{r1, r2, r3}
 8012d96:	b503      	push	{r0, r1, lr}
 8012d98:	4601      	mov	r1, r0
 8012d9a:	ab03      	add	r3, sp, #12
 8012d9c:	4805      	ldr	r0, [pc, #20]	@ (8012db4 <fiprintf+0x20>)
 8012d9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012da2:	6800      	ldr	r0, [r0, #0]
 8012da4:	9301      	str	r3, [sp, #4]
 8012da6:	f000 f83f 	bl	8012e28 <_vfiprintf_r>
 8012daa:	b002      	add	sp, #8
 8012dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8012db0:	b003      	add	sp, #12
 8012db2:	4770      	bx	lr
 8012db4:	20000168 	.word	0x20000168

08012db8 <abort>:
 8012db8:	b508      	push	{r3, lr}
 8012dba:	2006      	movs	r0, #6
 8012dbc:	f000 fa08 	bl	80131d0 <raise>
 8012dc0:	2001      	movs	r0, #1
 8012dc2:	f7f0 f997 	bl	80030f4 <_exit>

08012dc6 <_malloc_usable_size_r>:
 8012dc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012dca:	1f18      	subs	r0, r3, #4
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	bfbc      	itt	lt
 8012dd0:	580b      	ldrlt	r3, [r1, r0]
 8012dd2:	18c0      	addlt	r0, r0, r3
 8012dd4:	4770      	bx	lr

08012dd6 <__sfputc_r>:
 8012dd6:	6893      	ldr	r3, [r2, #8]
 8012dd8:	3b01      	subs	r3, #1
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	b410      	push	{r4}
 8012dde:	6093      	str	r3, [r2, #8]
 8012de0:	da08      	bge.n	8012df4 <__sfputc_r+0x1e>
 8012de2:	6994      	ldr	r4, [r2, #24]
 8012de4:	42a3      	cmp	r3, r4
 8012de6:	db01      	blt.n	8012dec <__sfputc_r+0x16>
 8012de8:	290a      	cmp	r1, #10
 8012dea:	d103      	bne.n	8012df4 <__sfputc_r+0x1e>
 8012dec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012df0:	f000 b932 	b.w	8013058 <__swbuf_r>
 8012df4:	6813      	ldr	r3, [r2, #0]
 8012df6:	1c58      	adds	r0, r3, #1
 8012df8:	6010      	str	r0, [r2, #0]
 8012dfa:	7019      	strb	r1, [r3, #0]
 8012dfc:	4608      	mov	r0, r1
 8012dfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e02:	4770      	bx	lr

08012e04 <__sfputs_r>:
 8012e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e06:	4606      	mov	r6, r0
 8012e08:	460f      	mov	r7, r1
 8012e0a:	4614      	mov	r4, r2
 8012e0c:	18d5      	adds	r5, r2, r3
 8012e0e:	42ac      	cmp	r4, r5
 8012e10:	d101      	bne.n	8012e16 <__sfputs_r+0x12>
 8012e12:	2000      	movs	r0, #0
 8012e14:	e007      	b.n	8012e26 <__sfputs_r+0x22>
 8012e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e1a:	463a      	mov	r2, r7
 8012e1c:	4630      	mov	r0, r6
 8012e1e:	f7ff ffda 	bl	8012dd6 <__sfputc_r>
 8012e22:	1c43      	adds	r3, r0, #1
 8012e24:	d1f3      	bne.n	8012e0e <__sfputs_r+0xa>
 8012e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012e28 <_vfiprintf_r>:
 8012e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e2c:	460d      	mov	r5, r1
 8012e2e:	b09d      	sub	sp, #116	@ 0x74
 8012e30:	4614      	mov	r4, r2
 8012e32:	4698      	mov	r8, r3
 8012e34:	4606      	mov	r6, r0
 8012e36:	b118      	cbz	r0, 8012e40 <_vfiprintf_r+0x18>
 8012e38:	6a03      	ldr	r3, [r0, #32]
 8012e3a:	b90b      	cbnz	r3, 8012e40 <_vfiprintf_r+0x18>
 8012e3c:	f7fe f9ac 	bl	8011198 <__sinit>
 8012e40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012e42:	07d9      	lsls	r1, r3, #31
 8012e44:	d405      	bmi.n	8012e52 <_vfiprintf_r+0x2a>
 8012e46:	89ab      	ldrh	r3, [r5, #12]
 8012e48:	059a      	lsls	r2, r3, #22
 8012e4a:	d402      	bmi.n	8012e52 <_vfiprintf_r+0x2a>
 8012e4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012e4e:	f7fe fad8 	bl	8011402 <__retarget_lock_acquire_recursive>
 8012e52:	89ab      	ldrh	r3, [r5, #12]
 8012e54:	071b      	lsls	r3, r3, #28
 8012e56:	d501      	bpl.n	8012e5c <_vfiprintf_r+0x34>
 8012e58:	692b      	ldr	r3, [r5, #16]
 8012e5a:	b99b      	cbnz	r3, 8012e84 <_vfiprintf_r+0x5c>
 8012e5c:	4629      	mov	r1, r5
 8012e5e:	4630      	mov	r0, r6
 8012e60:	f000 f938 	bl	80130d4 <__swsetup_r>
 8012e64:	b170      	cbz	r0, 8012e84 <_vfiprintf_r+0x5c>
 8012e66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012e68:	07dc      	lsls	r4, r3, #31
 8012e6a:	d504      	bpl.n	8012e76 <_vfiprintf_r+0x4e>
 8012e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8012e70:	b01d      	add	sp, #116	@ 0x74
 8012e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e76:	89ab      	ldrh	r3, [r5, #12]
 8012e78:	0598      	lsls	r0, r3, #22
 8012e7a:	d4f7      	bmi.n	8012e6c <_vfiprintf_r+0x44>
 8012e7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012e7e:	f7fe fac1 	bl	8011404 <__retarget_lock_release_recursive>
 8012e82:	e7f3      	b.n	8012e6c <_vfiprintf_r+0x44>
 8012e84:	2300      	movs	r3, #0
 8012e86:	9309      	str	r3, [sp, #36]	@ 0x24
 8012e88:	2320      	movs	r3, #32
 8012e8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012e8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012e92:	2330      	movs	r3, #48	@ 0x30
 8012e94:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013044 <_vfiprintf_r+0x21c>
 8012e98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012e9c:	f04f 0901 	mov.w	r9, #1
 8012ea0:	4623      	mov	r3, r4
 8012ea2:	469a      	mov	sl, r3
 8012ea4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ea8:	b10a      	cbz	r2, 8012eae <_vfiprintf_r+0x86>
 8012eaa:	2a25      	cmp	r2, #37	@ 0x25
 8012eac:	d1f9      	bne.n	8012ea2 <_vfiprintf_r+0x7a>
 8012eae:	ebba 0b04 	subs.w	fp, sl, r4
 8012eb2:	d00b      	beq.n	8012ecc <_vfiprintf_r+0xa4>
 8012eb4:	465b      	mov	r3, fp
 8012eb6:	4622      	mov	r2, r4
 8012eb8:	4629      	mov	r1, r5
 8012eba:	4630      	mov	r0, r6
 8012ebc:	f7ff ffa2 	bl	8012e04 <__sfputs_r>
 8012ec0:	3001      	adds	r0, #1
 8012ec2:	f000 80a7 	beq.w	8013014 <_vfiprintf_r+0x1ec>
 8012ec6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012ec8:	445a      	add	r2, fp
 8012eca:	9209      	str	r2, [sp, #36]	@ 0x24
 8012ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	f000 809f 	beq.w	8013014 <_vfiprintf_r+0x1ec>
 8012ed6:	2300      	movs	r3, #0
 8012ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8012edc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012ee0:	f10a 0a01 	add.w	sl, sl, #1
 8012ee4:	9304      	str	r3, [sp, #16]
 8012ee6:	9307      	str	r3, [sp, #28]
 8012ee8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012eec:	931a      	str	r3, [sp, #104]	@ 0x68
 8012eee:	4654      	mov	r4, sl
 8012ef0:	2205      	movs	r2, #5
 8012ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ef6:	4853      	ldr	r0, [pc, #332]	@ (8013044 <_vfiprintf_r+0x21c>)
 8012ef8:	f7ed f972 	bl	80001e0 <memchr>
 8012efc:	9a04      	ldr	r2, [sp, #16]
 8012efe:	b9d8      	cbnz	r0, 8012f38 <_vfiprintf_r+0x110>
 8012f00:	06d1      	lsls	r1, r2, #27
 8012f02:	bf44      	itt	mi
 8012f04:	2320      	movmi	r3, #32
 8012f06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012f0a:	0713      	lsls	r3, r2, #28
 8012f0c:	bf44      	itt	mi
 8012f0e:	232b      	movmi	r3, #43	@ 0x2b
 8012f10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012f14:	f89a 3000 	ldrb.w	r3, [sl]
 8012f18:	2b2a      	cmp	r3, #42	@ 0x2a
 8012f1a:	d015      	beq.n	8012f48 <_vfiprintf_r+0x120>
 8012f1c:	9a07      	ldr	r2, [sp, #28]
 8012f1e:	4654      	mov	r4, sl
 8012f20:	2000      	movs	r0, #0
 8012f22:	f04f 0c0a 	mov.w	ip, #10
 8012f26:	4621      	mov	r1, r4
 8012f28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012f2c:	3b30      	subs	r3, #48	@ 0x30
 8012f2e:	2b09      	cmp	r3, #9
 8012f30:	d94b      	bls.n	8012fca <_vfiprintf_r+0x1a2>
 8012f32:	b1b0      	cbz	r0, 8012f62 <_vfiprintf_r+0x13a>
 8012f34:	9207      	str	r2, [sp, #28]
 8012f36:	e014      	b.n	8012f62 <_vfiprintf_r+0x13a>
 8012f38:	eba0 0308 	sub.w	r3, r0, r8
 8012f3c:	fa09 f303 	lsl.w	r3, r9, r3
 8012f40:	4313      	orrs	r3, r2
 8012f42:	9304      	str	r3, [sp, #16]
 8012f44:	46a2      	mov	sl, r4
 8012f46:	e7d2      	b.n	8012eee <_vfiprintf_r+0xc6>
 8012f48:	9b03      	ldr	r3, [sp, #12]
 8012f4a:	1d19      	adds	r1, r3, #4
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	9103      	str	r1, [sp, #12]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	bfbb      	ittet	lt
 8012f54:	425b      	neglt	r3, r3
 8012f56:	f042 0202 	orrlt.w	r2, r2, #2
 8012f5a:	9307      	strge	r3, [sp, #28]
 8012f5c:	9307      	strlt	r3, [sp, #28]
 8012f5e:	bfb8      	it	lt
 8012f60:	9204      	strlt	r2, [sp, #16]
 8012f62:	7823      	ldrb	r3, [r4, #0]
 8012f64:	2b2e      	cmp	r3, #46	@ 0x2e
 8012f66:	d10a      	bne.n	8012f7e <_vfiprintf_r+0x156>
 8012f68:	7863      	ldrb	r3, [r4, #1]
 8012f6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8012f6c:	d132      	bne.n	8012fd4 <_vfiprintf_r+0x1ac>
 8012f6e:	9b03      	ldr	r3, [sp, #12]
 8012f70:	1d1a      	adds	r2, r3, #4
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	9203      	str	r2, [sp, #12]
 8012f76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012f7a:	3402      	adds	r4, #2
 8012f7c:	9305      	str	r3, [sp, #20]
 8012f7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013054 <_vfiprintf_r+0x22c>
 8012f82:	7821      	ldrb	r1, [r4, #0]
 8012f84:	2203      	movs	r2, #3
 8012f86:	4650      	mov	r0, sl
 8012f88:	f7ed f92a 	bl	80001e0 <memchr>
 8012f8c:	b138      	cbz	r0, 8012f9e <_vfiprintf_r+0x176>
 8012f8e:	9b04      	ldr	r3, [sp, #16]
 8012f90:	eba0 000a 	sub.w	r0, r0, sl
 8012f94:	2240      	movs	r2, #64	@ 0x40
 8012f96:	4082      	lsls	r2, r0
 8012f98:	4313      	orrs	r3, r2
 8012f9a:	3401      	adds	r4, #1
 8012f9c:	9304      	str	r3, [sp, #16]
 8012f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012fa2:	4829      	ldr	r0, [pc, #164]	@ (8013048 <_vfiprintf_r+0x220>)
 8012fa4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012fa8:	2206      	movs	r2, #6
 8012faa:	f7ed f919 	bl	80001e0 <memchr>
 8012fae:	2800      	cmp	r0, #0
 8012fb0:	d03f      	beq.n	8013032 <_vfiprintf_r+0x20a>
 8012fb2:	4b26      	ldr	r3, [pc, #152]	@ (801304c <_vfiprintf_r+0x224>)
 8012fb4:	bb1b      	cbnz	r3, 8012ffe <_vfiprintf_r+0x1d6>
 8012fb6:	9b03      	ldr	r3, [sp, #12]
 8012fb8:	3307      	adds	r3, #7
 8012fba:	f023 0307 	bic.w	r3, r3, #7
 8012fbe:	3308      	adds	r3, #8
 8012fc0:	9303      	str	r3, [sp, #12]
 8012fc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012fc4:	443b      	add	r3, r7
 8012fc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8012fc8:	e76a      	b.n	8012ea0 <_vfiprintf_r+0x78>
 8012fca:	fb0c 3202 	mla	r2, ip, r2, r3
 8012fce:	460c      	mov	r4, r1
 8012fd0:	2001      	movs	r0, #1
 8012fd2:	e7a8      	b.n	8012f26 <_vfiprintf_r+0xfe>
 8012fd4:	2300      	movs	r3, #0
 8012fd6:	3401      	adds	r4, #1
 8012fd8:	9305      	str	r3, [sp, #20]
 8012fda:	4619      	mov	r1, r3
 8012fdc:	f04f 0c0a 	mov.w	ip, #10
 8012fe0:	4620      	mov	r0, r4
 8012fe2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012fe6:	3a30      	subs	r2, #48	@ 0x30
 8012fe8:	2a09      	cmp	r2, #9
 8012fea:	d903      	bls.n	8012ff4 <_vfiprintf_r+0x1cc>
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d0c6      	beq.n	8012f7e <_vfiprintf_r+0x156>
 8012ff0:	9105      	str	r1, [sp, #20]
 8012ff2:	e7c4      	b.n	8012f7e <_vfiprintf_r+0x156>
 8012ff4:	fb0c 2101 	mla	r1, ip, r1, r2
 8012ff8:	4604      	mov	r4, r0
 8012ffa:	2301      	movs	r3, #1
 8012ffc:	e7f0      	b.n	8012fe0 <_vfiprintf_r+0x1b8>
 8012ffe:	ab03      	add	r3, sp, #12
 8013000:	9300      	str	r3, [sp, #0]
 8013002:	462a      	mov	r2, r5
 8013004:	4b12      	ldr	r3, [pc, #72]	@ (8013050 <_vfiprintf_r+0x228>)
 8013006:	a904      	add	r1, sp, #16
 8013008:	4630      	mov	r0, r6
 801300a:	f7fd fc81 	bl	8010910 <_printf_float>
 801300e:	4607      	mov	r7, r0
 8013010:	1c78      	adds	r0, r7, #1
 8013012:	d1d6      	bne.n	8012fc2 <_vfiprintf_r+0x19a>
 8013014:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013016:	07d9      	lsls	r1, r3, #31
 8013018:	d405      	bmi.n	8013026 <_vfiprintf_r+0x1fe>
 801301a:	89ab      	ldrh	r3, [r5, #12]
 801301c:	059a      	lsls	r2, r3, #22
 801301e:	d402      	bmi.n	8013026 <_vfiprintf_r+0x1fe>
 8013020:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013022:	f7fe f9ef 	bl	8011404 <__retarget_lock_release_recursive>
 8013026:	89ab      	ldrh	r3, [r5, #12]
 8013028:	065b      	lsls	r3, r3, #25
 801302a:	f53f af1f 	bmi.w	8012e6c <_vfiprintf_r+0x44>
 801302e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013030:	e71e      	b.n	8012e70 <_vfiprintf_r+0x48>
 8013032:	ab03      	add	r3, sp, #12
 8013034:	9300      	str	r3, [sp, #0]
 8013036:	462a      	mov	r2, r5
 8013038:	4b05      	ldr	r3, [pc, #20]	@ (8013050 <_vfiprintf_r+0x228>)
 801303a:	a904      	add	r1, sp, #16
 801303c:	4630      	mov	r0, r6
 801303e:	f7fd feff 	bl	8010e40 <_printf_i>
 8013042:	e7e4      	b.n	801300e <_vfiprintf_r+0x1e6>
 8013044:	08013eb0 	.word	0x08013eb0
 8013048:	08013eba 	.word	0x08013eba
 801304c:	08010911 	.word	0x08010911
 8013050:	08012e05 	.word	0x08012e05
 8013054:	08013eb6 	.word	0x08013eb6

08013058 <__swbuf_r>:
 8013058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801305a:	460e      	mov	r6, r1
 801305c:	4614      	mov	r4, r2
 801305e:	4605      	mov	r5, r0
 8013060:	b118      	cbz	r0, 801306a <__swbuf_r+0x12>
 8013062:	6a03      	ldr	r3, [r0, #32]
 8013064:	b90b      	cbnz	r3, 801306a <__swbuf_r+0x12>
 8013066:	f7fe f897 	bl	8011198 <__sinit>
 801306a:	69a3      	ldr	r3, [r4, #24]
 801306c:	60a3      	str	r3, [r4, #8]
 801306e:	89a3      	ldrh	r3, [r4, #12]
 8013070:	071a      	lsls	r2, r3, #28
 8013072:	d501      	bpl.n	8013078 <__swbuf_r+0x20>
 8013074:	6923      	ldr	r3, [r4, #16]
 8013076:	b943      	cbnz	r3, 801308a <__swbuf_r+0x32>
 8013078:	4621      	mov	r1, r4
 801307a:	4628      	mov	r0, r5
 801307c:	f000 f82a 	bl	80130d4 <__swsetup_r>
 8013080:	b118      	cbz	r0, 801308a <__swbuf_r+0x32>
 8013082:	f04f 37ff 	mov.w	r7, #4294967295
 8013086:	4638      	mov	r0, r7
 8013088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801308a:	6823      	ldr	r3, [r4, #0]
 801308c:	6922      	ldr	r2, [r4, #16]
 801308e:	1a98      	subs	r0, r3, r2
 8013090:	6963      	ldr	r3, [r4, #20]
 8013092:	b2f6      	uxtb	r6, r6
 8013094:	4283      	cmp	r3, r0
 8013096:	4637      	mov	r7, r6
 8013098:	dc05      	bgt.n	80130a6 <__swbuf_r+0x4e>
 801309a:	4621      	mov	r1, r4
 801309c:	4628      	mov	r0, r5
 801309e:	f7ff fdb7 	bl	8012c10 <_fflush_r>
 80130a2:	2800      	cmp	r0, #0
 80130a4:	d1ed      	bne.n	8013082 <__swbuf_r+0x2a>
 80130a6:	68a3      	ldr	r3, [r4, #8]
 80130a8:	3b01      	subs	r3, #1
 80130aa:	60a3      	str	r3, [r4, #8]
 80130ac:	6823      	ldr	r3, [r4, #0]
 80130ae:	1c5a      	adds	r2, r3, #1
 80130b0:	6022      	str	r2, [r4, #0]
 80130b2:	701e      	strb	r6, [r3, #0]
 80130b4:	6962      	ldr	r2, [r4, #20]
 80130b6:	1c43      	adds	r3, r0, #1
 80130b8:	429a      	cmp	r2, r3
 80130ba:	d004      	beq.n	80130c6 <__swbuf_r+0x6e>
 80130bc:	89a3      	ldrh	r3, [r4, #12]
 80130be:	07db      	lsls	r3, r3, #31
 80130c0:	d5e1      	bpl.n	8013086 <__swbuf_r+0x2e>
 80130c2:	2e0a      	cmp	r6, #10
 80130c4:	d1df      	bne.n	8013086 <__swbuf_r+0x2e>
 80130c6:	4621      	mov	r1, r4
 80130c8:	4628      	mov	r0, r5
 80130ca:	f7ff fda1 	bl	8012c10 <_fflush_r>
 80130ce:	2800      	cmp	r0, #0
 80130d0:	d0d9      	beq.n	8013086 <__swbuf_r+0x2e>
 80130d2:	e7d6      	b.n	8013082 <__swbuf_r+0x2a>

080130d4 <__swsetup_r>:
 80130d4:	b538      	push	{r3, r4, r5, lr}
 80130d6:	4b29      	ldr	r3, [pc, #164]	@ (801317c <__swsetup_r+0xa8>)
 80130d8:	4605      	mov	r5, r0
 80130da:	6818      	ldr	r0, [r3, #0]
 80130dc:	460c      	mov	r4, r1
 80130de:	b118      	cbz	r0, 80130e8 <__swsetup_r+0x14>
 80130e0:	6a03      	ldr	r3, [r0, #32]
 80130e2:	b90b      	cbnz	r3, 80130e8 <__swsetup_r+0x14>
 80130e4:	f7fe f858 	bl	8011198 <__sinit>
 80130e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80130ec:	0719      	lsls	r1, r3, #28
 80130ee:	d422      	bmi.n	8013136 <__swsetup_r+0x62>
 80130f0:	06da      	lsls	r2, r3, #27
 80130f2:	d407      	bmi.n	8013104 <__swsetup_r+0x30>
 80130f4:	2209      	movs	r2, #9
 80130f6:	602a      	str	r2, [r5, #0]
 80130f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80130fc:	81a3      	strh	r3, [r4, #12]
 80130fe:	f04f 30ff 	mov.w	r0, #4294967295
 8013102:	e033      	b.n	801316c <__swsetup_r+0x98>
 8013104:	0758      	lsls	r0, r3, #29
 8013106:	d512      	bpl.n	801312e <__swsetup_r+0x5a>
 8013108:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801310a:	b141      	cbz	r1, 801311e <__swsetup_r+0x4a>
 801310c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013110:	4299      	cmp	r1, r3
 8013112:	d002      	beq.n	801311a <__swsetup_r+0x46>
 8013114:	4628      	mov	r0, r5
 8013116:	f7fe ffd3 	bl	80120c0 <_free_r>
 801311a:	2300      	movs	r3, #0
 801311c:	6363      	str	r3, [r4, #52]	@ 0x34
 801311e:	89a3      	ldrh	r3, [r4, #12]
 8013120:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013124:	81a3      	strh	r3, [r4, #12]
 8013126:	2300      	movs	r3, #0
 8013128:	6063      	str	r3, [r4, #4]
 801312a:	6923      	ldr	r3, [r4, #16]
 801312c:	6023      	str	r3, [r4, #0]
 801312e:	89a3      	ldrh	r3, [r4, #12]
 8013130:	f043 0308 	orr.w	r3, r3, #8
 8013134:	81a3      	strh	r3, [r4, #12]
 8013136:	6923      	ldr	r3, [r4, #16]
 8013138:	b94b      	cbnz	r3, 801314e <__swsetup_r+0x7a>
 801313a:	89a3      	ldrh	r3, [r4, #12]
 801313c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013140:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013144:	d003      	beq.n	801314e <__swsetup_r+0x7a>
 8013146:	4621      	mov	r1, r4
 8013148:	4628      	mov	r0, r5
 801314a:	f000 f883 	bl	8013254 <__smakebuf_r>
 801314e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013152:	f013 0201 	ands.w	r2, r3, #1
 8013156:	d00a      	beq.n	801316e <__swsetup_r+0x9a>
 8013158:	2200      	movs	r2, #0
 801315a:	60a2      	str	r2, [r4, #8]
 801315c:	6962      	ldr	r2, [r4, #20]
 801315e:	4252      	negs	r2, r2
 8013160:	61a2      	str	r2, [r4, #24]
 8013162:	6922      	ldr	r2, [r4, #16]
 8013164:	b942      	cbnz	r2, 8013178 <__swsetup_r+0xa4>
 8013166:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801316a:	d1c5      	bne.n	80130f8 <__swsetup_r+0x24>
 801316c:	bd38      	pop	{r3, r4, r5, pc}
 801316e:	0799      	lsls	r1, r3, #30
 8013170:	bf58      	it	pl
 8013172:	6962      	ldrpl	r2, [r4, #20]
 8013174:	60a2      	str	r2, [r4, #8]
 8013176:	e7f4      	b.n	8013162 <__swsetup_r+0x8e>
 8013178:	2000      	movs	r0, #0
 801317a:	e7f7      	b.n	801316c <__swsetup_r+0x98>
 801317c:	20000168 	.word	0x20000168

08013180 <_raise_r>:
 8013180:	291f      	cmp	r1, #31
 8013182:	b538      	push	{r3, r4, r5, lr}
 8013184:	4605      	mov	r5, r0
 8013186:	460c      	mov	r4, r1
 8013188:	d904      	bls.n	8013194 <_raise_r+0x14>
 801318a:	2316      	movs	r3, #22
 801318c:	6003      	str	r3, [r0, #0]
 801318e:	f04f 30ff 	mov.w	r0, #4294967295
 8013192:	bd38      	pop	{r3, r4, r5, pc}
 8013194:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013196:	b112      	cbz	r2, 801319e <_raise_r+0x1e>
 8013198:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801319c:	b94b      	cbnz	r3, 80131b2 <_raise_r+0x32>
 801319e:	4628      	mov	r0, r5
 80131a0:	f000 f830 	bl	8013204 <_getpid_r>
 80131a4:	4622      	mov	r2, r4
 80131a6:	4601      	mov	r1, r0
 80131a8:	4628      	mov	r0, r5
 80131aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80131ae:	f000 b817 	b.w	80131e0 <_kill_r>
 80131b2:	2b01      	cmp	r3, #1
 80131b4:	d00a      	beq.n	80131cc <_raise_r+0x4c>
 80131b6:	1c59      	adds	r1, r3, #1
 80131b8:	d103      	bne.n	80131c2 <_raise_r+0x42>
 80131ba:	2316      	movs	r3, #22
 80131bc:	6003      	str	r3, [r0, #0]
 80131be:	2001      	movs	r0, #1
 80131c0:	e7e7      	b.n	8013192 <_raise_r+0x12>
 80131c2:	2100      	movs	r1, #0
 80131c4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80131c8:	4620      	mov	r0, r4
 80131ca:	4798      	blx	r3
 80131cc:	2000      	movs	r0, #0
 80131ce:	e7e0      	b.n	8013192 <_raise_r+0x12>

080131d0 <raise>:
 80131d0:	4b02      	ldr	r3, [pc, #8]	@ (80131dc <raise+0xc>)
 80131d2:	4601      	mov	r1, r0
 80131d4:	6818      	ldr	r0, [r3, #0]
 80131d6:	f7ff bfd3 	b.w	8013180 <_raise_r>
 80131da:	bf00      	nop
 80131dc:	20000168 	.word	0x20000168

080131e0 <_kill_r>:
 80131e0:	b538      	push	{r3, r4, r5, lr}
 80131e2:	4d07      	ldr	r5, [pc, #28]	@ (8013200 <_kill_r+0x20>)
 80131e4:	2300      	movs	r3, #0
 80131e6:	4604      	mov	r4, r0
 80131e8:	4608      	mov	r0, r1
 80131ea:	4611      	mov	r1, r2
 80131ec:	602b      	str	r3, [r5, #0]
 80131ee:	f7ef ff71 	bl	80030d4 <_kill>
 80131f2:	1c43      	adds	r3, r0, #1
 80131f4:	d102      	bne.n	80131fc <_kill_r+0x1c>
 80131f6:	682b      	ldr	r3, [r5, #0]
 80131f8:	b103      	cbz	r3, 80131fc <_kill_r+0x1c>
 80131fa:	6023      	str	r3, [r4, #0]
 80131fc:	bd38      	pop	{r3, r4, r5, pc}
 80131fe:	bf00      	nop
 8013200:	20001f30 	.word	0x20001f30

08013204 <_getpid_r>:
 8013204:	f7ef bf5e 	b.w	80030c4 <_getpid>

08013208 <__swhatbuf_r>:
 8013208:	b570      	push	{r4, r5, r6, lr}
 801320a:	460c      	mov	r4, r1
 801320c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013210:	2900      	cmp	r1, #0
 8013212:	b096      	sub	sp, #88	@ 0x58
 8013214:	4615      	mov	r5, r2
 8013216:	461e      	mov	r6, r3
 8013218:	da0d      	bge.n	8013236 <__swhatbuf_r+0x2e>
 801321a:	89a3      	ldrh	r3, [r4, #12]
 801321c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013220:	f04f 0100 	mov.w	r1, #0
 8013224:	bf14      	ite	ne
 8013226:	2340      	movne	r3, #64	@ 0x40
 8013228:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801322c:	2000      	movs	r0, #0
 801322e:	6031      	str	r1, [r6, #0]
 8013230:	602b      	str	r3, [r5, #0]
 8013232:	b016      	add	sp, #88	@ 0x58
 8013234:	bd70      	pop	{r4, r5, r6, pc}
 8013236:	466a      	mov	r2, sp
 8013238:	f000 f848 	bl	80132cc <_fstat_r>
 801323c:	2800      	cmp	r0, #0
 801323e:	dbec      	blt.n	801321a <__swhatbuf_r+0x12>
 8013240:	9901      	ldr	r1, [sp, #4]
 8013242:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013246:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801324a:	4259      	negs	r1, r3
 801324c:	4159      	adcs	r1, r3
 801324e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013252:	e7eb      	b.n	801322c <__swhatbuf_r+0x24>

08013254 <__smakebuf_r>:
 8013254:	898b      	ldrh	r3, [r1, #12]
 8013256:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013258:	079d      	lsls	r5, r3, #30
 801325a:	4606      	mov	r6, r0
 801325c:	460c      	mov	r4, r1
 801325e:	d507      	bpl.n	8013270 <__smakebuf_r+0x1c>
 8013260:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013264:	6023      	str	r3, [r4, #0]
 8013266:	6123      	str	r3, [r4, #16]
 8013268:	2301      	movs	r3, #1
 801326a:	6163      	str	r3, [r4, #20]
 801326c:	b003      	add	sp, #12
 801326e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013270:	ab01      	add	r3, sp, #4
 8013272:	466a      	mov	r2, sp
 8013274:	f7ff ffc8 	bl	8013208 <__swhatbuf_r>
 8013278:	9f00      	ldr	r7, [sp, #0]
 801327a:	4605      	mov	r5, r0
 801327c:	4639      	mov	r1, r7
 801327e:	4630      	mov	r0, r6
 8013280:	f7fd fa1a 	bl	80106b8 <_malloc_r>
 8013284:	b948      	cbnz	r0, 801329a <__smakebuf_r+0x46>
 8013286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801328a:	059a      	lsls	r2, r3, #22
 801328c:	d4ee      	bmi.n	801326c <__smakebuf_r+0x18>
 801328e:	f023 0303 	bic.w	r3, r3, #3
 8013292:	f043 0302 	orr.w	r3, r3, #2
 8013296:	81a3      	strh	r3, [r4, #12]
 8013298:	e7e2      	b.n	8013260 <__smakebuf_r+0xc>
 801329a:	89a3      	ldrh	r3, [r4, #12]
 801329c:	6020      	str	r0, [r4, #0]
 801329e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80132a2:	81a3      	strh	r3, [r4, #12]
 80132a4:	9b01      	ldr	r3, [sp, #4]
 80132a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80132aa:	b15b      	cbz	r3, 80132c4 <__smakebuf_r+0x70>
 80132ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80132b0:	4630      	mov	r0, r6
 80132b2:	f000 f81d 	bl	80132f0 <_isatty_r>
 80132b6:	b128      	cbz	r0, 80132c4 <__smakebuf_r+0x70>
 80132b8:	89a3      	ldrh	r3, [r4, #12]
 80132ba:	f023 0303 	bic.w	r3, r3, #3
 80132be:	f043 0301 	orr.w	r3, r3, #1
 80132c2:	81a3      	strh	r3, [r4, #12]
 80132c4:	89a3      	ldrh	r3, [r4, #12]
 80132c6:	431d      	orrs	r5, r3
 80132c8:	81a5      	strh	r5, [r4, #12]
 80132ca:	e7cf      	b.n	801326c <__smakebuf_r+0x18>

080132cc <_fstat_r>:
 80132cc:	b538      	push	{r3, r4, r5, lr}
 80132ce:	4d07      	ldr	r5, [pc, #28]	@ (80132ec <_fstat_r+0x20>)
 80132d0:	2300      	movs	r3, #0
 80132d2:	4604      	mov	r4, r0
 80132d4:	4608      	mov	r0, r1
 80132d6:	4611      	mov	r1, r2
 80132d8:	602b      	str	r3, [r5, #0]
 80132da:	f7ef ff5b 	bl	8003194 <_fstat>
 80132de:	1c43      	adds	r3, r0, #1
 80132e0:	d102      	bne.n	80132e8 <_fstat_r+0x1c>
 80132e2:	682b      	ldr	r3, [r5, #0]
 80132e4:	b103      	cbz	r3, 80132e8 <_fstat_r+0x1c>
 80132e6:	6023      	str	r3, [r4, #0]
 80132e8:	bd38      	pop	{r3, r4, r5, pc}
 80132ea:	bf00      	nop
 80132ec:	20001f30 	.word	0x20001f30

080132f0 <_isatty_r>:
 80132f0:	b538      	push	{r3, r4, r5, lr}
 80132f2:	4d06      	ldr	r5, [pc, #24]	@ (801330c <_isatty_r+0x1c>)
 80132f4:	2300      	movs	r3, #0
 80132f6:	4604      	mov	r4, r0
 80132f8:	4608      	mov	r0, r1
 80132fa:	602b      	str	r3, [r5, #0]
 80132fc:	f7ef ff5a 	bl	80031b4 <_isatty>
 8013300:	1c43      	adds	r3, r0, #1
 8013302:	d102      	bne.n	801330a <_isatty_r+0x1a>
 8013304:	682b      	ldr	r3, [r5, #0]
 8013306:	b103      	cbz	r3, 801330a <_isatty_r+0x1a>
 8013308:	6023      	str	r3, [r4, #0]
 801330a:	bd38      	pop	{r3, r4, r5, pc}
 801330c:	20001f30 	.word	0x20001f30

08013310 <sqrt>:
 8013310:	b538      	push	{r3, r4, r5, lr}
 8013312:	ed2d 8b02 	vpush	{d8}
 8013316:	ec55 4b10 	vmov	r4, r5, d0
 801331a:	f000 f9c5 	bl	80136a8 <__ieee754_sqrt>
 801331e:	4622      	mov	r2, r4
 8013320:	462b      	mov	r3, r5
 8013322:	4620      	mov	r0, r4
 8013324:	4629      	mov	r1, r5
 8013326:	eeb0 8a40 	vmov.f32	s16, s0
 801332a:	eef0 8a60 	vmov.f32	s17, s1
 801332e:	f7ed fc05 	bl	8000b3c <__aeabi_dcmpun>
 8013332:	b990      	cbnz	r0, 801335a <sqrt+0x4a>
 8013334:	2200      	movs	r2, #0
 8013336:	2300      	movs	r3, #0
 8013338:	4620      	mov	r0, r4
 801333a:	4629      	mov	r1, r5
 801333c:	f7ed fbd6 	bl	8000aec <__aeabi_dcmplt>
 8013340:	b158      	cbz	r0, 801335a <sqrt+0x4a>
 8013342:	f7fe f833 	bl	80113ac <__errno>
 8013346:	2321      	movs	r3, #33	@ 0x21
 8013348:	6003      	str	r3, [r0, #0]
 801334a:	2200      	movs	r2, #0
 801334c:	2300      	movs	r3, #0
 801334e:	4610      	mov	r0, r2
 8013350:	4619      	mov	r1, r3
 8013352:	f7ed fa83 	bl	800085c <__aeabi_ddiv>
 8013356:	ec41 0b18 	vmov	d8, r0, r1
 801335a:	eeb0 0a48 	vmov.f32	s0, s16
 801335e:	eef0 0a68 	vmov.f32	s1, s17
 8013362:	ecbd 8b02 	vpop	{d8}
 8013366:	bd38      	pop	{r3, r4, r5, pc}

08013368 <atan>:
 8013368:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801336c:	ec55 4b10 	vmov	r4, r5, d0
 8013370:	4bbf      	ldr	r3, [pc, #764]	@ (8013670 <atan+0x308>)
 8013372:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8013376:	429e      	cmp	r6, r3
 8013378:	46ab      	mov	fp, r5
 801337a:	d918      	bls.n	80133ae <atan+0x46>
 801337c:	4bbd      	ldr	r3, [pc, #756]	@ (8013674 <atan+0x30c>)
 801337e:	429e      	cmp	r6, r3
 8013380:	d801      	bhi.n	8013386 <atan+0x1e>
 8013382:	d109      	bne.n	8013398 <atan+0x30>
 8013384:	b144      	cbz	r4, 8013398 <atan+0x30>
 8013386:	4622      	mov	r2, r4
 8013388:	462b      	mov	r3, r5
 801338a:	4620      	mov	r0, r4
 801338c:	4629      	mov	r1, r5
 801338e:	f7ec ff85 	bl	800029c <__adddf3>
 8013392:	4604      	mov	r4, r0
 8013394:	460d      	mov	r5, r1
 8013396:	e006      	b.n	80133a6 <atan+0x3e>
 8013398:	f1bb 0f00 	cmp.w	fp, #0
 801339c:	f340 812b 	ble.w	80135f6 <atan+0x28e>
 80133a0:	a597      	add	r5, pc, #604	@ (adr r5, 8013600 <atan+0x298>)
 80133a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80133a6:	ec45 4b10 	vmov	d0, r4, r5
 80133aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133ae:	4bb2      	ldr	r3, [pc, #712]	@ (8013678 <atan+0x310>)
 80133b0:	429e      	cmp	r6, r3
 80133b2:	d813      	bhi.n	80133dc <atan+0x74>
 80133b4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80133b8:	429e      	cmp	r6, r3
 80133ba:	d80c      	bhi.n	80133d6 <atan+0x6e>
 80133bc:	a392      	add	r3, pc, #584	@ (adr r3, 8013608 <atan+0x2a0>)
 80133be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133c2:	4620      	mov	r0, r4
 80133c4:	4629      	mov	r1, r5
 80133c6:	f7ec ff69 	bl	800029c <__adddf3>
 80133ca:	4bac      	ldr	r3, [pc, #688]	@ (801367c <atan+0x314>)
 80133cc:	2200      	movs	r2, #0
 80133ce:	f7ed fbab 	bl	8000b28 <__aeabi_dcmpgt>
 80133d2:	2800      	cmp	r0, #0
 80133d4:	d1e7      	bne.n	80133a6 <atan+0x3e>
 80133d6:	f04f 3aff 	mov.w	sl, #4294967295
 80133da:	e029      	b.n	8013430 <atan+0xc8>
 80133dc:	f000 f95c 	bl	8013698 <fabs>
 80133e0:	4ba7      	ldr	r3, [pc, #668]	@ (8013680 <atan+0x318>)
 80133e2:	429e      	cmp	r6, r3
 80133e4:	ec55 4b10 	vmov	r4, r5, d0
 80133e8:	f200 80bc 	bhi.w	8013564 <atan+0x1fc>
 80133ec:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80133f0:	429e      	cmp	r6, r3
 80133f2:	f200 809e 	bhi.w	8013532 <atan+0x1ca>
 80133f6:	4622      	mov	r2, r4
 80133f8:	462b      	mov	r3, r5
 80133fa:	4620      	mov	r0, r4
 80133fc:	4629      	mov	r1, r5
 80133fe:	f7ec ff4d 	bl	800029c <__adddf3>
 8013402:	4b9e      	ldr	r3, [pc, #632]	@ (801367c <atan+0x314>)
 8013404:	2200      	movs	r2, #0
 8013406:	f7ec ff47 	bl	8000298 <__aeabi_dsub>
 801340a:	2200      	movs	r2, #0
 801340c:	4606      	mov	r6, r0
 801340e:	460f      	mov	r7, r1
 8013410:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013414:	4620      	mov	r0, r4
 8013416:	4629      	mov	r1, r5
 8013418:	f7ec ff40 	bl	800029c <__adddf3>
 801341c:	4602      	mov	r2, r0
 801341e:	460b      	mov	r3, r1
 8013420:	4630      	mov	r0, r6
 8013422:	4639      	mov	r1, r7
 8013424:	f7ed fa1a 	bl	800085c <__aeabi_ddiv>
 8013428:	f04f 0a00 	mov.w	sl, #0
 801342c:	4604      	mov	r4, r0
 801342e:	460d      	mov	r5, r1
 8013430:	4622      	mov	r2, r4
 8013432:	462b      	mov	r3, r5
 8013434:	4620      	mov	r0, r4
 8013436:	4629      	mov	r1, r5
 8013438:	f7ed f8e6 	bl	8000608 <__aeabi_dmul>
 801343c:	4602      	mov	r2, r0
 801343e:	460b      	mov	r3, r1
 8013440:	4680      	mov	r8, r0
 8013442:	4689      	mov	r9, r1
 8013444:	f7ed f8e0 	bl	8000608 <__aeabi_dmul>
 8013448:	a371      	add	r3, pc, #452	@ (adr r3, 8013610 <atan+0x2a8>)
 801344a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801344e:	4606      	mov	r6, r0
 8013450:	460f      	mov	r7, r1
 8013452:	f7ed f8d9 	bl	8000608 <__aeabi_dmul>
 8013456:	a370      	add	r3, pc, #448	@ (adr r3, 8013618 <atan+0x2b0>)
 8013458:	e9d3 2300 	ldrd	r2, r3, [r3]
 801345c:	f7ec ff1e 	bl	800029c <__adddf3>
 8013460:	4632      	mov	r2, r6
 8013462:	463b      	mov	r3, r7
 8013464:	f7ed f8d0 	bl	8000608 <__aeabi_dmul>
 8013468:	a36d      	add	r3, pc, #436	@ (adr r3, 8013620 <atan+0x2b8>)
 801346a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801346e:	f7ec ff15 	bl	800029c <__adddf3>
 8013472:	4632      	mov	r2, r6
 8013474:	463b      	mov	r3, r7
 8013476:	f7ed f8c7 	bl	8000608 <__aeabi_dmul>
 801347a:	a36b      	add	r3, pc, #428	@ (adr r3, 8013628 <atan+0x2c0>)
 801347c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013480:	f7ec ff0c 	bl	800029c <__adddf3>
 8013484:	4632      	mov	r2, r6
 8013486:	463b      	mov	r3, r7
 8013488:	f7ed f8be 	bl	8000608 <__aeabi_dmul>
 801348c:	a368      	add	r3, pc, #416	@ (adr r3, 8013630 <atan+0x2c8>)
 801348e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013492:	f7ec ff03 	bl	800029c <__adddf3>
 8013496:	4632      	mov	r2, r6
 8013498:	463b      	mov	r3, r7
 801349a:	f7ed f8b5 	bl	8000608 <__aeabi_dmul>
 801349e:	a366      	add	r3, pc, #408	@ (adr r3, 8013638 <atan+0x2d0>)
 80134a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134a4:	f7ec fefa 	bl	800029c <__adddf3>
 80134a8:	4642      	mov	r2, r8
 80134aa:	464b      	mov	r3, r9
 80134ac:	f7ed f8ac 	bl	8000608 <__aeabi_dmul>
 80134b0:	a363      	add	r3, pc, #396	@ (adr r3, 8013640 <atan+0x2d8>)
 80134b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134b6:	4680      	mov	r8, r0
 80134b8:	4689      	mov	r9, r1
 80134ba:	4630      	mov	r0, r6
 80134bc:	4639      	mov	r1, r7
 80134be:	f7ed f8a3 	bl	8000608 <__aeabi_dmul>
 80134c2:	a361      	add	r3, pc, #388	@ (adr r3, 8013648 <atan+0x2e0>)
 80134c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134c8:	f7ec fee6 	bl	8000298 <__aeabi_dsub>
 80134cc:	4632      	mov	r2, r6
 80134ce:	463b      	mov	r3, r7
 80134d0:	f7ed f89a 	bl	8000608 <__aeabi_dmul>
 80134d4:	a35e      	add	r3, pc, #376	@ (adr r3, 8013650 <atan+0x2e8>)
 80134d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134da:	f7ec fedd 	bl	8000298 <__aeabi_dsub>
 80134de:	4632      	mov	r2, r6
 80134e0:	463b      	mov	r3, r7
 80134e2:	f7ed f891 	bl	8000608 <__aeabi_dmul>
 80134e6:	a35c      	add	r3, pc, #368	@ (adr r3, 8013658 <atan+0x2f0>)
 80134e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134ec:	f7ec fed4 	bl	8000298 <__aeabi_dsub>
 80134f0:	4632      	mov	r2, r6
 80134f2:	463b      	mov	r3, r7
 80134f4:	f7ed f888 	bl	8000608 <__aeabi_dmul>
 80134f8:	a359      	add	r3, pc, #356	@ (adr r3, 8013660 <atan+0x2f8>)
 80134fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134fe:	f7ec fecb 	bl	8000298 <__aeabi_dsub>
 8013502:	4632      	mov	r2, r6
 8013504:	463b      	mov	r3, r7
 8013506:	f7ed f87f 	bl	8000608 <__aeabi_dmul>
 801350a:	4602      	mov	r2, r0
 801350c:	460b      	mov	r3, r1
 801350e:	4640      	mov	r0, r8
 8013510:	4649      	mov	r1, r9
 8013512:	f7ec fec3 	bl	800029c <__adddf3>
 8013516:	4622      	mov	r2, r4
 8013518:	462b      	mov	r3, r5
 801351a:	f7ed f875 	bl	8000608 <__aeabi_dmul>
 801351e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8013522:	4602      	mov	r2, r0
 8013524:	460b      	mov	r3, r1
 8013526:	d148      	bne.n	80135ba <atan+0x252>
 8013528:	4620      	mov	r0, r4
 801352a:	4629      	mov	r1, r5
 801352c:	f7ec feb4 	bl	8000298 <__aeabi_dsub>
 8013530:	e72f      	b.n	8013392 <atan+0x2a>
 8013532:	4b52      	ldr	r3, [pc, #328]	@ (801367c <atan+0x314>)
 8013534:	2200      	movs	r2, #0
 8013536:	4620      	mov	r0, r4
 8013538:	4629      	mov	r1, r5
 801353a:	f7ec fead 	bl	8000298 <__aeabi_dsub>
 801353e:	4b4f      	ldr	r3, [pc, #316]	@ (801367c <atan+0x314>)
 8013540:	4606      	mov	r6, r0
 8013542:	460f      	mov	r7, r1
 8013544:	2200      	movs	r2, #0
 8013546:	4620      	mov	r0, r4
 8013548:	4629      	mov	r1, r5
 801354a:	f7ec fea7 	bl	800029c <__adddf3>
 801354e:	4602      	mov	r2, r0
 8013550:	460b      	mov	r3, r1
 8013552:	4630      	mov	r0, r6
 8013554:	4639      	mov	r1, r7
 8013556:	f7ed f981 	bl	800085c <__aeabi_ddiv>
 801355a:	f04f 0a01 	mov.w	sl, #1
 801355e:	4604      	mov	r4, r0
 8013560:	460d      	mov	r5, r1
 8013562:	e765      	b.n	8013430 <atan+0xc8>
 8013564:	4b47      	ldr	r3, [pc, #284]	@ (8013684 <atan+0x31c>)
 8013566:	429e      	cmp	r6, r3
 8013568:	d21c      	bcs.n	80135a4 <atan+0x23c>
 801356a:	4b47      	ldr	r3, [pc, #284]	@ (8013688 <atan+0x320>)
 801356c:	2200      	movs	r2, #0
 801356e:	4620      	mov	r0, r4
 8013570:	4629      	mov	r1, r5
 8013572:	f7ec fe91 	bl	8000298 <__aeabi_dsub>
 8013576:	4b44      	ldr	r3, [pc, #272]	@ (8013688 <atan+0x320>)
 8013578:	4606      	mov	r6, r0
 801357a:	460f      	mov	r7, r1
 801357c:	2200      	movs	r2, #0
 801357e:	4620      	mov	r0, r4
 8013580:	4629      	mov	r1, r5
 8013582:	f7ed f841 	bl	8000608 <__aeabi_dmul>
 8013586:	4b3d      	ldr	r3, [pc, #244]	@ (801367c <atan+0x314>)
 8013588:	2200      	movs	r2, #0
 801358a:	f7ec fe87 	bl	800029c <__adddf3>
 801358e:	4602      	mov	r2, r0
 8013590:	460b      	mov	r3, r1
 8013592:	4630      	mov	r0, r6
 8013594:	4639      	mov	r1, r7
 8013596:	f7ed f961 	bl	800085c <__aeabi_ddiv>
 801359a:	f04f 0a02 	mov.w	sl, #2
 801359e:	4604      	mov	r4, r0
 80135a0:	460d      	mov	r5, r1
 80135a2:	e745      	b.n	8013430 <atan+0xc8>
 80135a4:	4622      	mov	r2, r4
 80135a6:	462b      	mov	r3, r5
 80135a8:	4938      	ldr	r1, [pc, #224]	@ (801368c <atan+0x324>)
 80135aa:	2000      	movs	r0, #0
 80135ac:	f7ed f956 	bl	800085c <__aeabi_ddiv>
 80135b0:	f04f 0a03 	mov.w	sl, #3
 80135b4:	4604      	mov	r4, r0
 80135b6:	460d      	mov	r5, r1
 80135b8:	e73a      	b.n	8013430 <atan+0xc8>
 80135ba:	4b35      	ldr	r3, [pc, #212]	@ (8013690 <atan+0x328>)
 80135bc:	4e35      	ldr	r6, [pc, #212]	@ (8013694 <atan+0x32c>)
 80135be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80135c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135c6:	f7ec fe67 	bl	8000298 <__aeabi_dsub>
 80135ca:	4622      	mov	r2, r4
 80135cc:	462b      	mov	r3, r5
 80135ce:	f7ec fe63 	bl	8000298 <__aeabi_dsub>
 80135d2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80135d6:	4602      	mov	r2, r0
 80135d8:	460b      	mov	r3, r1
 80135da:	e9d6 0100 	ldrd	r0, r1, [r6]
 80135de:	f7ec fe5b 	bl	8000298 <__aeabi_dsub>
 80135e2:	f1bb 0f00 	cmp.w	fp, #0
 80135e6:	4604      	mov	r4, r0
 80135e8:	460d      	mov	r5, r1
 80135ea:	f6bf aedc 	bge.w	80133a6 <atan+0x3e>
 80135ee:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80135f2:	461d      	mov	r5, r3
 80135f4:	e6d7      	b.n	80133a6 <atan+0x3e>
 80135f6:	a51c      	add	r5, pc, #112	@ (adr r5, 8013668 <atan+0x300>)
 80135f8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80135fc:	e6d3      	b.n	80133a6 <atan+0x3e>
 80135fe:	bf00      	nop
 8013600:	54442d18 	.word	0x54442d18
 8013604:	3ff921fb 	.word	0x3ff921fb
 8013608:	8800759c 	.word	0x8800759c
 801360c:	7e37e43c 	.word	0x7e37e43c
 8013610:	e322da11 	.word	0xe322da11
 8013614:	3f90ad3a 	.word	0x3f90ad3a
 8013618:	24760deb 	.word	0x24760deb
 801361c:	3fa97b4b 	.word	0x3fa97b4b
 8013620:	a0d03d51 	.word	0xa0d03d51
 8013624:	3fb10d66 	.word	0x3fb10d66
 8013628:	c54c206e 	.word	0xc54c206e
 801362c:	3fb745cd 	.word	0x3fb745cd
 8013630:	920083ff 	.word	0x920083ff
 8013634:	3fc24924 	.word	0x3fc24924
 8013638:	5555550d 	.word	0x5555550d
 801363c:	3fd55555 	.word	0x3fd55555
 8013640:	2c6a6c2f 	.word	0x2c6a6c2f
 8013644:	bfa2b444 	.word	0xbfa2b444
 8013648:	52defd9a 	.word	0x52defd9a
 801364c:	3fadde2d 	.word	0x3fadde2d
 8013650:	af749a6d 	.word	0xaf749a6d
 8013654:	3fb3b0f2 	.word	0x3fb3b0f2
 8013658:	fe231671 	.word	0xfe231671
 801365c:	3fbc71c6 	.word	0x3fbc71c6
 8013660:	9998ebc4 	.word	0x9998ebc4
 8013664:	3fc99999 	.word	0x3fc99999
 8013668:	54442d18 	.word	0x54442d18
 801366c:	bff921fb 	.word	0xbff921fb
 8013670:	440fffff 	.word	0x440fffff
 8013674:	7ff00000 	.word	0x7ff00000
 8013678:	3fdbffff 	.word	0x3fdbffff
 801367c:	3ff00000 	.word	0x3ff00000
 8013680:	3ff2ffff 	.word	0x3ff2ffff
 8013684:	40038000 	.word	0x40038000
 8013688:	3ff80000 	.word	0x3ff80000
 801368c:	bff00000 	.word	0xbff00000
 8013690:	08014008 	.word	0x08014008
 8013694:	08014028 	.word	0x08014028

08013698 <fabs>:
 8013698:	ec51 0b10 	vmov	r0, r1, d0
 801369c:	4602      	mov	r2, r0
 801369e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80136a2:	ec43 2b10 	vmov	d0, r2, r3
 80136a6:	4770      	bx	lr

080136a8 <__ieee754_sqrt>:
 80136a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136ac:	4a68      	ldr	r2, [pc, #416]	@ (8013850 <__ieee754_sqrt+0x1a8>)
 80136ae:	ec55 4b10 	vmov	r4, r5, d0
 80136b2:	43aa      	bics	r2, r5
 80136b4:	462b      	mov	r3, r5
 80136b6:	4621      	mov	r1, r4
 80136b8:	d110      	bne.n	80136dc <__ieee754_sqrt+0x34>
 80136ba:	4622      	mov	r2, r4
 80136bc:	4620      	mov	r0, r4
 80136be:	4629      	mov	r1, r5
 80136c0:	f7ec ffa2 	bl	8000608 <__aeabi_dmul>
 80136c4:	4602      	mov	r2, r0
 80136c6:	460b      	mov	r3, r1
 80136c8:	4620      	mov	r0, r4
 80136ca:	4629      	mov	r1, r5
 80136cc:	f7ec fde6 	bl	800029c <__adddf3>
 80136d0:	4604      	mov	r4, r0
 80136d2:	460d      	mov	r5, r1
 80136d4:	ec45 4b10 	vmov	d0, r4, r5
 80136d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136dc:	2d00      	cmp	r5, #0
 80136de:	dc0e      	bgt.n	80136fe <__ieee754_sqrt+0x56>
 80136e0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80136e4:	4322      	orrs	r2, r4
 80136e6:	d0f5      	beq.n	80136d4 <__ieee754_sqrt+0x2c>
 80136e8:	b19d      	cbz	r5, 8013712 <__ieee754_sqrt+0x6a>
 80136ea:	4622      	mov	r2, r4
 80136ec:	4620      	mov	r0, r4
 80136ee:	4629      	mov	r1, r5
 80136f0:	f7ec fdd2 	bl	8000298 <__aeabi_dsub>
 80136f4:	4602      	mov	r2, r0
 80136f6:	460b      	mov	r3, r1
 80136f8:	f7ed f8b0 	bl	800085c <__aeabi_ddiv>
 80136fc:	e7e8      	b.n	80136d0 <__ieee754_sqrt+0x28>
 80136fe:	152a      	asrs	r2, r5, #20
 8013700:	d115      	bne.n	801372e <__ieee754_sqrt+0x86>
 8013702:	2000      	movs	r0, #0
 8013704:	e009      	b.n	801371a <__ieee754_sqrt+0x72>
 8013706:	0acb      	lsrs	r3, r1, #11
 8013708:	3a15      	subs	r2, #21
 801370a:	0549      	lsls	r1, r1, #21
 801370c:	2b00      	cmp	r3, #0
 801370e:	d0fa      	beq.n	8013706 <__ieee754_sqrt+0x5e>
 8013710:	e7f7      	b.n	8013702 <__ieee754_sqrt+0x5a>
 8013712:	462a      	mov	r2, r5
 8013714:	e7fa      	b.n	801370c <__ieee754_sqrt+0x64>
 8013716:	005b      	lsls	r3, r3, #1
 8013718:	3001      	adds	r0, #1
 801371a:	02dc      	lsls	r4, r3, #11
 801371c:	d5fb      	bpl.n	8013716 <__ieee754_sqrt+0x6e>
 801371e:	1e44      	subs	r4, r0, #1
 8013720:	1b12      	subs	r2, r2, r4
 8013722:	f1c0 0420 	rsb	r4, r0, #32
 8013726:	fa21 f404 	lsr.w	r4, r1, r4
 801372a:	4323      	orrs	r3, r4
 801372c:	4081      	lsls	r1, r0
 801372e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013732:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8013736:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801373a:	07d2      	lsls	r2, r2, #31
 801373c:	bf5c      	itt	pl
 801373e:	005b      	lslpl	r3, r3, #1
 8013740:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8013744:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013748:	bf58      	it	pl
 801374a:	0049      	lslpl	r1, r1, #1
 801374c:	2600      	movs	r6, #0
 801374e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8013752:	106d      	asrs	r5, r5, #1
 8013754:	0049      	lsls	r1, r1, #1
 8013756:	2016      	movs	r0, #22
 8013758:	4632      	mov	r2, r6
 801375a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801375e:	1917      	adds	r7, r2, r4
 8013760:	429f      	cmp	r7, r3
 8013762:	bfde      	ittt	le
 8013764:	193a      	addle	r2, r7, r4
 8013766:	1bdb      	suble	r3, r3, r7
 8013768:	1936      	addle	r6, r6, r4
 801376a:	0fcf      	lsrs	r7, r1, #31
 801376c:	3801      	subs	r0, #1
 801376e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8013772:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013776:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801377a:	d1f0      	bne.n	801375e <__ieee754_sqrt+0xb6>
 801377c:	4604      	mov	r4, r0
 801377e:	2720      	movs	r7, #32
 8013780:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8013784:	429a      	cmp	r2, r3
 8013786:	eb00 0e0c 	add.w	lr, r0, ip
 801378a:	db02      	blt.n	8013792 <__ieee754_sqrt+0xea>
 801378c:	d113      	bne.n	80137b6 <__ieee754_sqrt+0x10e>
 801378e:	458e      	cmp	lr, r1
 8013790:	d811      	bhi.n	80137b6 <__ieee754_sqrt+0x10e>
 8013792:	f1be 0f00 	cmp.w	lr, #0
 8013796:	eb0e 000c 	add.w	r0, lr, ip
 801379a:	da42      	bge.n	8013822 <__ieee754_sqrt+0x17a>
 801379c:	2800      	cmp	r0, #0
 801379e:	db40      	blt.n	8013822 <__ieee754_sqrt+0x17a>
 80137a0:	f102 0801 	add.w	r8, r2, #1
 80137a4:	1a9b      	subs	r3, r3, r2
 80137a6:	458e      	cmp	lr, r1
 80137a8:	bf88      	it	hi
 80137aa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80137ae:	eba1 010e 	sub.w	r1, r1, lr
 80137b2:	4464      	add	r4, ip
 80137b4:	4642      	mov	r2, r8
 80137b6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80137ba:	3f01      	subs	r7, #1
 80137bc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80137c0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80137c4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80137c8:	d1dc      	bne.n	8013784 <__ieee754_sqrt+0xdc>
 80137ca:	4319      	orrs	r1, r3
 80137cc:	d01b      	beq.n	8013806 <__ieee754_sqrt+0x15e>
 80137ce:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8013854 <__ieee754_sqrt+0x1ac>
 80137d2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8013858 <__ieee754_sqrt+0x1b0>
 80137d6:	e9da 0100 	ldrd	r0, r1, [sl]
 80137da:	e9db 2300 	ldrd	r2, r3, [fp]
 80137de:	f7ec fd5b 	bl	8000298 <__aeabi_dsub>
 80137e2:	e9da 8900 	ldrd	r8, r9, [sl]
 80137e6:	4602      	mov	r2, r0
 80137e8:	460b      	mov	r3, r1
 80137ea:	4640      	mov	r0, r8
 80137ec:	4649      	mov	r1, r9
 80137ee:	f7ed f987 	bl	8000b00 <__aeabi_dcmple>
 80137f2:	b140      	cbz	r0, 8013806 <__ieee754_sqrt+0x15e>
 80137f4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80137f8:	e9da 0100 	ldrd	r0, r1, [sl]
 80137fc:	e9db 2300 	ldrd	r2, r3, [fp]
 8013800:	d111      	bne.n	8013826 <__ieee754_sqrt+0x17e>
 8013802:	3601      	adds	r6, #1
 8013804:	463c      	mov	r4, r7
 8013806:	1072      	asrs	r2, r6, #1
 8013808:	0863      	lsrs	r3, r4, #1
 801380a:	07f1      	lsls	r1, r6, #31
 801380c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8013810:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8013814:	bf48      	it	mi
 8013816:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801381a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801381e:	4618      	mov	r0, r3
 8013820:	e756      	b.n	80136d0 <__ieee754_sqrt+0x28>
 8013822:	4690      	mov	r8, r2
 8013824:	e7be      	b.n	80137a4 <__ieee754_sqrt+0xfc>
 8013826:	f7ec fd39 	bl	800029c <__adddf3>
 801382a:	e9da 8900 	ldrd	r8, r9, [sl]
 801382e:	4602      	mov	r2, r0
 8013830:	460b      	mov	r3, r1
 8013832:	4640      	mov	r0, r8
 8013834:	4649      	mov	r1, r9
 8013836:	f7ed f959 	bl	8000aec <__aeabi_dcmplt>
 801383a:	b120      	cbz	r0, 8013846 <__ieee754_sqrt+0x19e>
 801383c:	1ca0      	adds	r0, r4, #2
 801383e:	bf08      	it	eq
 8013840:	3601      	addeq	r6, #1
 8013842:	3402      	adds	r4, #2
 8013844:	e7df      	b.n	8013806 <__ieee754_sqrt+0x15e>
 8013846:	1c63      	adds	r3, r4, #1
 8013848:	f023 0401 	bic.w	r4, r3, #1
 801384c:	e7db      	b.n	8013806 <__ieee754_sqrt+0x15e>
 801384e:	bf00      	nop
 8013850:	7ff00000 	.word	0x7ff00000
 8013854:	20000330 	.word	0x20000330
 8013858:	20000328 	.word	0x20000328

0801385c <_init>:
 801385c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801385e:	bf00      	nop
 8013860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013862:	bc08      	pop	{r3}
 8013864:	469e      	mov	lr, r3
 8013866:	4770      	bx	lr

08013868 <_fini>:
 8013868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801386a:	bf00      	nop
 801386c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801386e:	bc08      	pop	{r3}
 8013870:	469e      	mov	lr, r3
 8013872:	4770      	bx	lr
