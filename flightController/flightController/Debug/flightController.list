
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000131fc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  080133a0  080133a0  000143a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013ac0  08013ac0  00015308  2**0
                  CONTENTS
  4 .ARM          00000008  08013ac0  08013ac0  00014ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013ac8  08013ac8  00015308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013ac8  08013ac8  00014ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013acc  08013acc  00014acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000308  20000000  08013ad0  00015000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b38  20000308  08013dd8  00015308  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e40  08013dd8  00015e40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015308  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026fea  00000000  00000000  00015338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000060b9  00000000  00000000  0003c322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002100  00000000  00000000  000423e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001970  00000000  00000000  000444e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000211dc  00000000  00000000  00045e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ee9d  00000000  00000000  0006702c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae19e  00000000  00000000  00095ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00144067  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a88  00000000  00000000  001440ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  0014db34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000308 	.word	0x20000308
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013384 	.word	0x08013384

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000030c 	.word	0x2000030c
 80001dc:	08013384 	.word	0x08013384

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <FreeRTOS_CreateStartUpTasks>:
extern ADC_HandleTypeDef hadc1;

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
void FreeRTOS_CreateStartUpTasks(void) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af02      	add	r7, sp, #8

    BaseType_t ret;

    /* Task: FlightController_Startup */
    ret = xTaskCreate(FlightController_StartUp, "FlightController_StartUp", (4 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t)TASK_FLIGHTCONTROLLER_STARTUP_PRIORITY), &FlightController_StartUp_Handle);
 8000f8e:	4b2b      	ldr	r3, [pc, #172]	@ (800103c <FreeRTOS_CreateStartUpTasks+0xb4>)
 8000f90:	9301      	str	r3, [sp, #4]
 8000f92:	2302      	movs	r3, #2
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2300      	movs	r3, #0
 8000f98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f9c:	4928      	ldr	r1, [pc, #160]	@ (8001040 <FreeRTOS_CreateStartUpTasks+0xb8>)
 8000f9e:	4829      	ldr	r0, [pc, #164]	@ (8001044 <FreeRTOS_CreateStartUpTasks+0xbc>)
 8000fa0:	f00c ff06 	bl	800ddb0 <xTaskCreate>
 8000fa4:	60f8      	str	r0, [r7, #12]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d00b      	beq.n	8000fc4 <FreeRTOS_CreateStartUpTasks+0x3c>
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortRaiseBASEPRI(void) {
    uint32_t ulNewBASEPRI;

    __asm volatile("	mov %0, %1												\n"
 8000fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fb0:	f383 8811 	msr	BASEPRI, r3
 8000fb4:	f3bf 8f6f 	isb	sy
 8000fb8:	f3bf 8f4f 	dsb	sy
 8000fbc:	60bb      	str	r3, [r7, #8]
                   "	isb														\n"
                   "	dsb														\n"
                   : "=r"(ulNewBASEPRI)
                   : "i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
                   : "memory");
}
 8000fbe:	bf00      	nop
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <FreeRTOS_CreateStartUpTasks+0x38>

    if (FlightController_StartUp_Handle == NULL) {
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800103c <FreeRTOS_CreateStartUpTasks+0xb4>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d104      	bne.n	8000fd6 <FreeRTOS_CreateStartUpTasks+0x4e>
        vTaskDelete(FlightController_StartUp_Handle);
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800103c <FreeRTOS_CreateStartUpTasks+0xb4>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f00d f81f 	bl	800e014 <vTaskDelete>
    }

    /* Task: FlightController_OnOffButton */
    ret = xTaskCreate(FlightController_OnOffButton, "FlightController_OnOffButton", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t)TASK_FLIGHTCONTROLLER_ONOFFBUTTON_PRIORITY), &FlightController_OnOffButton_Handle);
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001048 <FreeRTOS_CreateStartUpTasks+0xc0>)
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	2302      	movs	r3, #2
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fe4:	4919      	ldr	r1, [pc, #100]	@ (800104c <FreeRTOS_CreateStartUpTasks+0xc4>)
 8000fe6:	481a      	ldr	r0, [pc, #104]	@ (8001050 <FreeRTOS_CreateStartUpTasks+0xc8>)
 8000fe8:	f00c fee2 	bl	800ddb0 <xTaskCreate>
 8000fec:	60f8      	str	r0, [r7, #12]

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d00b      	beq.n	800100c <FreeRTOS_CreateStartUpTasks+0x84>
    __asm volatile("	mov %0, %1												\n"
 8000ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ff8:	f383 8811 	msr	BASEPRI, r3
 8000ffc:	f3bf 8f6f 	isb	sy
 8001000:	f3bf 8f4f 	dsb	sy
 8001004:	607b      	str	r3, [r7, #4]
}
 8001006:	bf00      	nop
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <FreeRTOS_CreateStartUpTasks+0x80>

    if (FlightController_OnOffButton_Handle == NULL) {
 800100c:	4b0e      	ldr	r3, [pc, #56]	@ (8001048 <FreeRTOS_CreateStartUpTasks+0xc0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d104      	bne.n	800101e <FreeRTOS_CreateStartUpTasks+0x96>
        vTaskDelete(FlightController_OnOffButton_Handle);
 8001014:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <FreeRTOS_CreateStartUpTasks+0xc0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f00c fffb 	bl	800e014 <vTaskDelete>
    }

    /* Timer1: OnOff_Button */
    Timer1_Handle = xTimerCreate("OnOff_Button", 100, pdTRUE, (void *)0, Timer1_Callback);
 800101e:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <FreeRTOS_CreateStartUpTasks+0xcc>)
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	2300      	movs	r3, #0
 8001024:	2201      	movs	r2, #1
 8001026:	2164      	movs	r1, #100	@ 0x64
 8001028:	480b      	ldr	r0, [pc, #44]	@ (8001058 <FreeRTOS_CreateStartUpTasks+0xd0>)
 800102a:	f00d fe67 	bl	800ecfc <xTimerCreate>
 800102e:	4603      	mov	r3, r0
 8001030:	4a0a      	ldr	r2, [pc, #40]	@ (800105c <FreeRTOS_CreateStartUpTasks+0xd4>)
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000328 	.word	0x20000328
 8001040:	080133a0 	.word	0x080133a0
 8001044:	080013e9 	.word	0x080013e9
 8001048:	2000033c 	.word	0x2000033c
 800104c:	080133bc 	.word	0x080133bc
 8001050:	08001b69 	.word	0x08001b69
 8001054:	0800208d 	.word	0x0800208d
 8001058:	080133dc 	.word	0x080133dc
 800105c:	20000350 	.word	0x20000350

08001060 <FreeRTOS_CreateTasks>:

void FreeRTOS_CreateTasks(void) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b08c      	sub	sp, #48	@ 0x30
 8001064:	af02      	add	r7, sp, #8

    BaseType_t ret;

    /* Task 1: FlightController_ControlSystem */
    ret = xTaskCreate(FlightController_ControlSystem, "FlightController_ControlSystem", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t)TASK_FLIGHTCONTROLLER_CONTROLSYSTEM_PRIORITY), &FlightController_ControlSystem_Handle);
 8001066:	4b92      	ldr	r3, [pc, #584]	@ (80012b0 <FreeRTOS_CreateTasks+0x250>)
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	2302      	movs	r3, #2
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2300      	movs	r3, #0
 8001070:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001074:	498f      	ldr	r1, [pc, #572]	@ (80012b4 <FreeRTOS_CreateTasks+0x254>)
 8001076:	4890      	ldr	r0, [pc, #576]	@ (80012b8 <FreeRTOS_CreateTasks+0x258>)
 8001078:	f00c fe9a 	bl	800ddb0 <xTaskCreate>
 800107c:	6278      	str	r0, [r7, #36]	@ 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 800107e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001080:	2b01      	cmp	r3, #1
 8001082:	d00b      	beq.n	800109c <FreeRTOS_CreateTasks+0x3c>
    __asm volatile("	mov %0, %1												\n"
 8001084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001088:	f383 8811 	msr	BASEPRI, r3
 800108c:	f3bf 8f6f 	isb	sy
 8001090:	f3bf 8f4f 	dsb	sy
 8001094:	623b      	str	r3, [r7, #32]
}
 8001096:	bf00      	nop
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <FreeRTOS_CreateTasks+0x38>

    if (FlightController_ControlSystem_Handle == NULL) {
 800109c:	4b84      	ldr	r3, [pc, #528]	@ (80012b0 <FreeRTOS_CreateTasks+0x250>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d104      	bne.n	80010ae <FreeRTOS_CreateTasks+0x4e>
        vTaskDelete(FlightController_ControlSystem_Handle);
 80010a4:	4b82      	ldr	r3, [pc, #520]	@ (80012b0 <FreeRTOS_CreateTasks+0x250>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f00c ffb3 	bl	800e014 <vTaskDelete>
    }

    /* Task 2: FlightController_Read_FSA8S */
    ret = xTaskCreate(FlightController_Read_FSA8S, "FlightController_Read_FSA8S", (4 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t)TASK_FLIGHTCONTROLLER_READ_FSA8S_PRIORITY), &FlightController_Read_FSA8S_Handle);
 80010ae:	4b83      	ldr	r3, [pc, #524]	@ (80012bc <FreeRTOS_CreateTasks+0x25c>)
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	2302      	movs	r3, #2
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2300      	movs	r3, #0
 80010b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010bc:	4980      	ldr	r1, [pc, #512]	@ (80012c0 <FreeRTOS_CreateTasks+0x260>)
 80010be:	4881      	ldr	r0, [pc, #516]	@ (80012c4 <FreeRTOS_CreateTasks+0x264>)
 80010c0:	f00c fe76 	bl	800ddb0 <xTaskCreate>
 80010c4:	6278      	str	r0, [r7, #36]	@ 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 80010c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d00b      	beq.n	80010e4 <FreeRTOS_CreateTasks+0x84>
    __asm volatile("	mov %0, %1												\n"
 80010cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010d0:	f383 8811 	msr	BASEPRI, r3
 80010d4:	f3bf 8f6f 	isb	sy
 80010d8:	f3bf 8f4f 	dsb	sy
 80010dc:	61fb      	str	r3, [r7, #28]
}
 80010de:	bf00      	nop
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <FreeRTOS_CreateTasks+0x80>

    if (FlightController_Read_FSA8S_Handle == NULL) {
 80010e4:	4b75      	ldr	r3, [pc, #468]	@ (80012bc <FreeRTOS_CreateTasks+0x25c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d104      	bne.n	80010f6 <FreeRTOS_CreateTasks+0x96>
        vTaskDelete(FlightController_Read_FSA8S_Handle);
 80010ec:	4b73      	ldr	r3, [pc, #460]	@ (80012bc <FreeRTOS_CreateTasks+0x25c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f00c ff8f 	bl	800e014 <vTaskDelete>
    }

    /* Task 3: FlightController_Read_GY87 */
    ret = xTaskCreate(FlightController_Read_GY87, "FlightController_Read_GY87", (6 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t)TASK_FLIGHTCONTROLLER_READ_GY87_PRIORITY), &FlightController_Read_GY87_Handle);
 80010f6:	4b74      	ldr	r3, [pc, #464]	@ (80012c8 <FreeRTOS_CreateTasks+0x268>)
 80010f8:	9301      	str	r3, [sp, #4]
 80010fa:	2302      	movs	r3, #2
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2300      	movs	r3, #0
 8001100:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001104:	4971      	ldr	r1, [pc, #452]	@ (80012cc <FreeRTOS_CreateTasks+0x26c>)
 8001106:	4872      	ldr	r0, [pc, #456]	@ (80012d0 <FreeRTOS_CreateTasks+0x270>)
 8001108:	f00c fe52 	bl	800ddb0 <xTaskCreate>
 800110c:	6278      	str	r0, [r7, #36]	@ 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 800110e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001110:	2b01      	cmp	r3, #1
 8001112:	d00b      	beq.n	800112c <FreeRTOS_CreateTasks+0xcc>
    __asm volatile("	mov %0, %1												\n"
 8001114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001118:	f383 8811 	msr	BASEPRI, r3
 800111c:	f3bf 8f6f 	isb	sy
 8001120:	f3bf 8f4f 	dsb	sy
 8001124:	61bb      	str	r3, [r7, #24]
}
 8001126:	bf00      	nop
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <FreeRTOS_CreateTasks+0xc8>

    if (FlightController_Read_GY87_Handle == NULL) {
 800112c:	4b66      	ldr	r3, [pc, #408]	@ (80012c8 <FreeRTOS_CreateTasks+0x268>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d104      	bne.n	800113e <FreeRTOS_CreateTasks+0xde>
        vTaskDelete(FlightController_Read_GY87_Handle);
 8001134:	4b64      	ldr	r3, [pc, #400]	@ (80012c8 <FreeRTOS_CreateTasks+0x268>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f00c ff6b 	bl	800e014 <vTaskDelete>
    }

    /* Task 4: FlightController_Write_ESCs */
    ret = xTaskCreate(FlightController_Write_ESCs, "FlightController_Write_ESCs", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t)TASK_FLIGHTCONTROLLER_WRITE_ESCS_PRIORITY), &FlightController_Write_ESCs_Handle);
 800113e:	4b65      	ldr	r3, [pc, #404]	@ (80012d4 <FreeRTOS_CreateTasks+0x274>)
 8001140:	9301      	str	r3, [sp, #4]
 8001142:	2302      	movs	r3, #2
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2300      	movs	r3, #0
 8001148:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800114c:	4962      	ldr	r1, [pc, #392]	@ (80012d8 <FreeRTOS_CreateTasks+0x278>)
 800114e:	4863      	ldr	r0, [pc, #396]	@ (80012dc <FreeRTOS_CreateTasks+0x27c>)
 8001150:	f00c fe2e 	bl	800ddb0 <xTaskCreate>
 8001154:	6278      	str	r0, [r7, #36]	@ 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001158:	2b01      	cmp	r3, #1
 800115a:	d00b      	beq.n	8001174 <FreeRTOS_CreateTasks+0x114>
    __asm volatile("	mov %0, %1												\n"
 800115c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001160:	f383 8811 	msr	BASEPRI, r3
 8001164:	f3bf 8f6f 	isb	sy
 8001168:	f3bf 8f4f 	dsb	sy
 800116c:	617b      	str	r3, [r7, #20]
}
 800116e:	bf00      	nop
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <FreeRTOS_CreateTasks+0x110>

    if (FlightController_Write_ESCs_Handle == NULL) {
 8001174:	4b57      	ldr	r3, [pc, #348]	@ (80012d4 <FreeRTOS_CreateTasks+0x274>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d104      	bne.n	8001186 <FreeRTOS_CreateTasks+0x126>
        vTaskDelete(FlightController_Write_ESCs_Handle);
 800117c:	4b55      	ldr	r3, [pc, #340]	@ (80012d4 <FreeRTOS_CreateTasks+0x274>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f00c ff47 	bl	800e014 <vTaskDelete>
    }

    /* Task 5: FlightController_BatteryLevel */
    ret = xTaskCreate(FlightController_BatteryLevel, "FlightController_BatteryLevel", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t)TASK_FLIGHTCONTROLLER_BATTERYLEVEL_PRIORITY), &FlightController_BatteryLevel_Handle);
 8001186:	4b56      	ldr	r3, [pc, #344]	@ (80012e0 <FreeRTOS_CreateTasks+0x280>)
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	2302      	movs	r3, #2
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2300      	movs	r3, #0
 8001190:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001194:	4953      	ldr	r1, [pc, #332]	@ (80012e4 <FreeRTOS_CreateTasks+0x284>)
 8001196:	4854      	ldr	r0, [pc, #336]	@ (80012e8 <FreeRTOS_CreateTasks+0x288>)
 8001198:	f00c fe0a 	bl	800ddb0 <xTaskCreate>
 800119c:	6278      	str	r0, [r7, #36]	@ 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 800119e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d00b      	beq.n	80011bc <FreeRTOS_CreateTasks+0x15c>
    __asm volatile("	mov %0, %1												\n"
 80011a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011a8:	f383 8811 	msr	BASEPRI, r3
 80011ac:	f3bf 8f6f 	isb	sy
 80011b0:	f3bf 8f4f 	dsb	sy
 80011b4:	613b      	str	r3, [r7, #16]
}
 80011b6:	bf00      	nop
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <FreeRTOS_CreateTasks+0x158>

    if (FlightController_BatteryLevel_Handle == NULL) {
 80011bc:	4b48      	ldr	r3, [pc, #288]	@ (80012e0 <FreeRTOS_CreateTasks+0x280>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d104      	bne.n	80011ce <FreeRTOS_CreateTasks+0x16e>
        vTaskDelete(FlightController_BatteryLevel_Handle);
 80011c4:	4b46      	ldr	r3, [pc, #280]	@ (80012e0 <FreeRTOS_CreateTasks+0x280>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f00c ff23 	bl	800e014 <vTaskDelete>
    }

    /* Task 6: FlightController_BatteryAlarm */
    ret = xTaskCreate(FlightController_BatteryAlarm, "FlightController_BatteryAlarm", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t)TASK_FLIGHTCONTROLLER_BATTERYALARM_PRIORITY), &FlightController_BatteryAlarm_Handle);
 80011ce:	4b47      	ldr	r3, [pc, #284]	@ (80012ec <FreeRTOS_CreateTasks+0x28c>)
 80011d0:	9301      	str	r3, [sp, #4]
 80011d2:	2302      	movs	r3, #2
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2300      	movs	r3, #0
 80011d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011dc:	4944      	ldr	r1, [pc, #272]	@ (80012f0 <FreeRTOS_CreateTasks+0x290>)
 80011de:	4845      	ldr	r0, [pc, #276]	@ (80012f4 <FreeRTOS_CreateTasks+0x294>)
 80011e0:	f00c fde6 	bl	800ddb0 <xTaskCreate>
 80011e4:	6278      	str	r0, [r7, #36]	@ 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 80011e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d00b      	beq.n	8001204 <FreeRTOS_CreateTasks+0x1a4>
    __asm volatile("	mov %0, %1												\n"
 80011ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011f0:	f383 8811 	msr	BASEPRI, r3
 80011f4:	f3bf 8f6f 	isb	sy
 80011f8:	f3bf 8f4f 	dsb	sy
 80011fc:	60fb      	str	r3, [r7, #12]
}
 80011fe:	bf00      	nop
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <FreeRTOS_CreateTasks+0x1a0>

    if (FlightController_BatteryAlarm_Handle == NULL) {
 8001204:	4b39      	ldr	r3, [pc, #228]	@ (80012ec <FreeRTOS_CreateTasks+0x28c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d104      	bne.n	8001216 <FreeRTOS_CreateTasks+0x1b6>
        vTaskDelete(FlightController_BatteryAlarm_Handle);
 800120c:	4b37      	ldr	r3, [pc, #220]	@ (80012ec <FreeRTOS_CreateTasks+0x28c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f00c feff 	bl	800e014 <vTaskDelete>
    }

    /* Task 7: FlightController_HeartbeatLight */
    ret = xTaskCreate(FlightController_HeartbeatLight, "FlightController_HeartbeatLight", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t)TASK_FLIGHTCONTROLLER_HEARTBEATLIGHT_PRIORITY), &FlightController_HeartbeatLight_Handle);
 8001216:	4b38      	ldr	r3, [pc, #224]	@ (80012f8 <FreeRTOS_CreateTasks+0x298>)
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	2302      	movs	r3, #2
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	2300      	movs	r3, #0
 8001220:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001224:	4935      	ldr	r1, [pc, #212]	@ (80012fc <FreeRTOS_CreateTasks+0x29c>)
 8001226:	4836      	ldr	r0, [pc, #216]	@ (8001300 <FreeRTOS_CreateTasks+0x2a0>)
 8001228:	f00c fdc2 	bl	800ddb0 <xTaskCreate>
 800122c:	6278      	str	r0, [r7, #36]	@ 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 800122e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001230:	2b01      	cmp	r3, #1
 8001232:	d00b      	beq.n	800124c <FreeRTOS_CreateTasks+0x1ec>
    __asm volatile("	mov %0, %1												\n"
 8001234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001238:	f383 8811 	msr	BASEPRI, r3
 800123c:	f3bf 8f6f 	isb	sy
 8001240:	f3bf 8f4f 	dsb	sy
 8001244:	60bb      	str	r3, [r7, #8]
}
 8001246:	bf00      	nop
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <FreeRTOS_CreateTasks+0x1e8>

    if (FlightController_HeartbeatLight_Handle == NULL) {
 800124c:	4b2a      	ldr	r3, [pc, #168]	@ (80012f8 <FreeRTOS_CreateTasks+0x298>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d104      	bne.n	800125e <FreeRTOS_CreateTasks+0x1fe>
        vTaskDelete(FlightController_HeartbeatLight_Handle);
 8001254:	4b28      	ldr	r3, [pc, #160]	@ (80012f8 <FreeRTOS_CreateTasks+0x298>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f00c fedb 	bl	800e014 <vTaskDelete>
    }

    /* Task 8: FlightController_FlightLights */
    ret = xTaskCreate(FlightController_FlightLights, "FlightController_FlightLights", (2 * configMINIMAL_STACK_SIZE), NULL, (tskIDLE_PRIORITY + (uint32_t)TASK_FLIGHTCONTROLLER_FLIGHTLIGHTS_PRIORITY), &FlightController_FlightLights_Handle);
 800125e:	4b29      	ldr	r3, [pc, #164]	@ (8001304 <FreeRTOS_CreateTasks+0x2a4>)
 8001260:	9301      	str	r3, [sp, #4]
 8001262:	2302      	movs	r3, #2
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	2300      	movs	r3, #0
 8001268:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800126c:	4926      	ldr	r1, [pc, #152]	@ (8001308 <FreeRTOS_CreateTasks+0x2a8>)
 800126e:	4827      	ldr	r0, [pc, #156]	@ (800130c <FreeRTOS_CreateTasks+0x2ac>)
 8001270:	f00c fd9e 	bl	800ddb0 <xTaskCreate>
 8001274:	6278      	str	r0, [r7, #36]	@ 0x24

    /* Check the task was created successfully. */
    configASSERT(ret == pdPASS);
 8001276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001278:	2b01      	cmp	r3, #1
 800127a:	d00b      	beq.n	8001294 <FreeRTOS_CreateTasks+0x234>
    __asm volatile("	mov %0, %1												\n"
 800127c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001280:	f383 8811 	msr	BASEPRI, r3
 8001284:	f3bf 8f6f 	isb	sy
 8001288:	f3bf 8f4f 	dsb	sy
 800128c:	607b      	str	r3, [r7, #4]
}
 800128e:	bf00      	nop
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <FreeRTOS_CreateTasks+0x230>

    if (FlightController_FlightLights_Handle == NULL) {
 8001294:	4b1b      	ldr	r3, [pc, #108]	@ (8001304 <FreeRTOS_CreateTasks+0x2a4>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d104      	bne.n	80012a6 <FreeRTOS_CreateTasks+0x246>
        vTaskDelete(FlightController_FlightLights_Handle);
 800129c:	4b19      	ldr	r3, [pc, #100]	@ (8001304 <FreeRTOS_CreateTasks+0x2a4>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f00c feb7 	bl	800e014 <vTaskDelete>
    }
}
 80012a6:	bf00      	nop
 80012a8:	3728      	adds	r7, #40	@ 0x28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	2000032c 	.word	0x2000032c
 80012b4:	080133ec 	.word	0x080133ec
 80012b8:	080014a1 	.word	0x080014a1
 80012bc:	20000330 	.word	0x20000330
 80012c0:	0801340c 	.word	0x0801340c
 80012c4:	08001921 	.word	0x08001921
 80012c8:	20000334 	.word	0x20000334
 80012cc:	08013428 	.word	0x08013428
 80012d0:	08001981 	.word	0x08001981
 80012d4:	20000338 	.word	0x20000338
 80012d8:	08013444 	.word	0x08013444
 80012dc:	08001ac1 	.word	0x08001ac1
 80012e0:	20000340 	.word	0x20000340
 80012e4:	08013460 	.word	0x08013460
 80012e8:	08001bc9 	.word	0x08001bc9
 80012ec:	20000344 	.word	0x20000344
 80012f0:	08013480 	.word	0x08013480
 80012f4:	08001ca5 	.word	0x08001ca5
 80012f8:	20000348 	.word	0x20000348
 80012fc:	080134a0 	.word	0x080134a0
 8001300:	08001d51 	.word	0x08001d51
 8001304:	2000034c 	.word	0x2000034c
 8001308:	080134c0 	.word	0x080134c0
 800130c:	08001d8d 	.word	0x08001d8d

08001310 <FreeRTOS_CreateTimers>:

void FreeRTOS_CreateTimers(void) {
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b083      	sub	sp, #12
 8001314:	af02      	add	r7, sp, #8

    /* Timer2: BatteryLevelAlarm */
    Timer2_Handle = xTimerCreate("BatteryLevelAlarm", pdMS_TO_TICKS(200), pdTRUE, (void *)0, Timer2_Callback);
 8001316:	4b2b      	ldr	r3, [pc, #172]	@ (80013c4 <FreeRTOS_CreateTimers+0xb4>)
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2300      	movs	r3, #0
 800131c:	2201      	movs	r2, #1
 800131e:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001322:	4829      	ldr	r0, [pc, #164]	@ (80013c8 <FreeRTOS_CreateTimers+0xb8>)
 8001324:	f00d fcea 	bl	800ecfc <xTimerCreate>
 8001328:	4603      	mov	r3, r0
 800132a:	4a28      	ldr	r2, [pc, #160]	@ (80013cc <FreeRTOS_CreateTimers+0xbc>)
 800132c:	6013      	str	r3, [r2, #0]
    if (NULL != Timer2_Handle) {
 800132e:	4b27      	ldr	r3, [pc, #156]	@ (80013cc <FreeRTOS_CreateTimers+0xbc>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d00b      	beq.n	800134e <FreeRTOS_CreateTimers+0x3e>
        /* Start timer */
        xTimerStart(Timer2_Handle, 0);
 8001336:	4b25      	ldr	r3, [pc, #148]	@ (80013cc <FreeRTOS_CreateTimers+0xbc>)
 8001338:	681c      	ldr	r4, [r3, #0]
 800133a:	f00d f8d9 	bl	800e4f0 <xTaskGetTickCount>
 800133e:	4602      	mov	r2, r0
 8001340:	2300      	movs	r3, #0
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2300      	movs	r3, #0
 8001346:	2101      	movs	r1, #1
 8001348:	4620      	mov	r0, r4
 800134a:	f00d fd35 	bl	800edb8 <xTimerGenericCommand>
    }

    /* Timer3: FlightLights */
    Timer3_Handle = xTimerCreate("FlightLights", pdMS_TO_TICKS(100), pdTRUE, (void *)0, Timer3_Callback);
 800134e:	4b20      	ldr	r3, [pc, #128]	@ (80013d0 <FreeRTOS_CreateTimers+0xc0>)
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2300      	movs	r3, #0
 8001354:	2201      	movs	r2, #1
 8001356:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800135a:	481e      	ldr	r0, [pc, #120]	@ (80013d4 <FreeRTOS_CreateTimers+0xc4>)
 800135c:	f00d fcce 	bl	800ecfc <xTimerCreate>
 8001360:	4603      	mov	r3, r0
 8001362:	4a1d      	ldr	r2, [pc, #116]	@ (80013d8 <FreeRTOS_CreateTimers+0xc8>)
 8001364:	6013      	str	r3, [r2, #0]
    if (NULL != Timer3_Handle) {
 8001366:	4b1c      	ldr	r3, [pc, #112]	@ (80013d8 <FreeRTOS_CreateTimers+0xc8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00b      	beq.n	8001386 <FreeRTOS_CreateTimers+0x76>
        /* Start timer */
        xTimerStart(Timer3_Handle, 0);
 800136e:	4b1a      	ldr	r3, [pc, #104]	@ (80013d8 <FreeRTOS_CreateTimers+0xc8>)
 8001370:	681c      	ldr	r4, [r3, #0]
 8001372:	f00d f8bd 	bl	800e4f0 <xTaskGetTickCount>
 8001376:	4602      	mov	r2, r0
 8001378:	2300      	movs	r3, #0
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	2300      	movs	r3, #0
 800137e:	2101      	movs	r1, #1
 8001380:	4620      	mov	r0, r4
 8001382:	f00d fd19 	bl	800edb8 <xTimerGenericCommand>
    }

    /* Timer4: ControlSystem */
    Timer4_Handle = xTimerCreate("ControlSystem", pdMS_TO_TICKS(1), pdTRUE, (void *)0, Timer4_Callback);
 8001386:	4b15      	ldr	r3, [pc, #84]	@ (80013dc <FreeRTOS_CreateTimers+0xcc>)
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	2300      	movs	r3, #0
 800138c:	2201      	movs	r2, #1
 800138e:	210a      	movs	r1, #10
 8001390:	4813      	ldr	r0, [pc, #76]	@ (80013e0 <FreeRTOS_CreateTimers+0xd0>)
 8001392:	f00d fcb3 	bl	800ecfc <xTimerCreate>
 8001396:	4603      	mov	r3, r0
 8001398:	4a12      	ldr	r2, [pc, #72]	@ (80013e4 <FreeRTOS_CreateTimers+0xd4>)
 800139a:	6013      	str	r3, [r2, #0]
    if (NULL != Timer4_Handle) {
 800139c:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <FreeRTOS_CreateTimers+0xd4>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00b      	beq.n	80013bc <FreeRTOS_CreateTimers+0xac>
        /* Start timer */
        xTimerStart(Timer4_Handle, 0);
 80013a4:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <FreeRTOS_CreateTimers+0xd4>)
 80013a6:	681c      	ldr	r4, [r3, #0]
 80013a8:	f00d f8a2 	bl	800e4f0 <xTaskGetTickCount>
 80013ac:	4602      	mov	r2, r0
 80013ae:	2300      	movs	r3, #0
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	2300      	movs	r3, #0
 80013b4:	2101      	movs	r1, #1
 80013b6:	4620      	mov	r0, r4
 80013b8:	f00d fcfe 	bl	800edb8 <xTimerGenericCommand>
    }
}
 80013bc:	bf00      	nop
 80013be:	3704      	adds	r7, #4
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd90      	pop	{r4, r7, pc}
 80013c4:	08002165 	.word	0x08002165
 80013c8:	080134e0 	.word	0x080134e0
 80013cc:	20000354 	.word	0x20000354
 80013d0:	080021d5 	.word	0x080021d5
 80013d4:	080134f4 	.word	0x080134f4
 80013d8:	20000358 	.word	0x20000358
 80013dc:	08002245 	.word	0x08002245
 80013e0:	08013504 	.word	0x08013504
 80013e4:	2000035c 	.word	0x2000035c

080013e8 <FlightController_StartUp>:

void FlightController_StartUp(void * ptr) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 80013f0:	23c8      	movs	r3, #200	@ 0xc8
 80013f2:	60fb      	str	r3, [r7, #12]

    while (1) {

        /* Turn on-board LED on */
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80013f4:	2200      	movs	r2, #0
 80013f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013fa:	481b      	ldr	r0, [pc, #108]	@ (8001468 <FlightController_StartUp+0x80>)
 80013fc:	f004 f9f8 	bl	80057f0 <HAL_GPIO_WritePin>

        /* Check if flight controller is already running */
        /* Create tasks and timers, and initialize drivers (only once) */
        if (FlightController_running) {
 8001400:	4b1a      	ldr	r3, [pc, #104]	@ (800146c <FlightController_StartUp+0x84>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d02a      	beq.n	800145e <FlightController_StartUp+0x76>

            /* Startup message */
            LOG((uint8_t *)"Initializing Flight Controller...\r\n\n", LOG_INFORMATION);
 8001408:	2100      	movs	r1, #0
 800140a:	4819      	ldr	r0, [pc, #100]	@ (8001470 <FlightController_StartUp+0x88>)
 800140c:	f003 f876 	bl	80044fc <LOG>

            /* Create system tasks */
            FreeRTOS_CreateTasks();
 8001410:	f7ff fe26 	bl	8001060 <FreeRTOS_CreateTasks>

            /* Create system timers */
            FreeRTOS_CreateTimers();
 8001414:	f7ff ff7c 	bl	8001310 <FreeRTOS_CreateTimers>

            /* Initialize drivers */
            rc_controller = FSA8S_Init(&huart2);
 8001418:	4816      	ldr	r0, [pc, #88]	@ (8001474 <FlightController_StartUp+0x8c>)
 800141a:	f001 ffbb 	bl	8003394 <FSA8S_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	4a15      	ldr	r2, [pc, #84]	@ (8001478 <FlightController_StartUp+0x90>)
 8001422:	6013      	str	r3, [r2, #0]
            LOG((uint8_t *)"FSA8S Radio Controller Initialized.\r\n\n", LOG_INFORMATION);
 8001424:	2100      	movs	r1, #0
 8001426:	4815      	ldr	r0, [pc, #84]	@ (800147c <FlightController_StartUp+0x94>)
 8001428:	f003 f868 	bl	80044fc <LOG>

            hgy87 = GY87_Init(&hi2c1);
 800142c:	4814      	ldr	r0, [pc, #80]	@ (8001480 <FlightController_StartUp+0x98>)
 800142e:	f002 fbf7 	bl	8003c20 <GY87_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	4a13      	ldr	r2, [pc, #76]	@ (8001484 <FlightController_StartUp+0x9c>)
 8001436:	6013      	str	r3, [r2, #0]
            LOG((uint8_t *)"GY-87 IMU Initialized.\r\n\n", LOG_INFORMATION);
 8001438:	2100      	movs	r1, #0
 800143a:	4813      	ldr	r0, [pc, #76]	@ (8001488 <FlightController_StartUp+0xa0>)
 800143c:	f003 f85e 	bl	80044fc <LOG>

            hesc = ESC_Init(&htim3);
 8001440:	4812      	ldr	r0, [pc, #72]	@ (800148c <FlightController_StartUp+0xa4>)
 8001442:	f001 fe25 	bl	8003090 <ESC_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	4a11      	ldr	r2, [pc, #68]	@ (8001490 <FlightController_StartUp+0xa8>)
 800144a:	6013      	str	r3, [r2, #0]
            LOG((uint8_t *)"ESCs Initialized.\r\n\n", LOG_INFORMATION);
 800144c:	2100      	movs	r1, #0
 800144e:	4811      	ldr	r0, [pc, #68]	@ (8001494 <FlightController_StartUp+0xac>)
 8001450:	f003 f854 	bl	80044fc <LOG>

            /* Delete this task, as initialization must happen only once */
            vTaskDelete(FlightController_StartUp_Handle);
 8001454:	4b10      	ldr	r3, [pc, #64]	@ (8001498 <FlightController_StartUp+0xb0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f00c fddb 	bl	800e014 <vTaskDelete>
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f00c fe68 	bl	800e134 <vTaskDelay>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001464:	e7c6      	b.n	80013f4 <FlightController_StartUp+0xc>
 8001466:	bf00      	nop
 8001468:	40020800 	.word	0x40020800
 800146c:	20000324 	.word	0x20000324
 8001470:	08013514 	.word	0x08013514
 8001474:	20000b88 	.word	0x20000b88
 8001478:	20000364 	.word	0x20000364
 800147c:	0801353c 	.word	0x0801353c
 8001480:	20000aec 	.word	0x20000aec
 8001484:	20000368 	.word	0x20000368
 8001488:	08013564 	.word	0x08013564
 800148c:	20000b40 	.word	0x20000b40
 8001490:	2000036c 	.word	0x2000036c
 8001494:	08013580 	.word	0x08013580
 8001498:	20000328 	.word	0x20000328
 800149c:	00000000 	.word	0x00000000

080014a0 <FlightController_ControlSystem>:
    }
}

void FlightController_ControlSystem(void * ptr) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b0a8      	sub	sp, #160	@ 0xa0
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
#ifdef MAIN_APP_USE_LOGGING_CONTROL_SYSTEM
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
#else
    const TickType_t xDelay = pdMS_TO_TICKS(2);
 80014a8:	2314      	movs	r3, #20
 80014aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    float motorSpeed4 = 0;
#endif

#if 1 == CONTROL_SYSTEM_MODE
    /* References */
    float inputValue_throttle = 0;
 80014ae:	f04f 0300 	mov.w	r3, #0
 80014b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    float inputValue_rollRate = 0;
 80014b6:	f04f 0300 	mov.w	r3, #0
 80014ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    float inputValue_pitchRate = 0;
 80014be:	f04f 0300 	mov.w	r3, #0
 80014c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    float inputValue_yawRate = 0;
 80014c4:	f04f 0300 	mov.w	r3, #0
 80014c8:	67bb      	str	r3, [r7, #120]	@ 0x78
    /* Desired references */
    float desiredValue_rollRate = 0;
 80014ca:	f04f 0300 	mov.w	r3, #0
 80014ce:	677b      	str	r3, [r7, #116]	@ 0x74
    float desiredValue_pitchRate = 0;
 80014d0:	f04f 0300 	mov.w	r3, #0
 80014d4:	673b      	str	r3, [r7, #112]	@ 0x70
    float desiredValue_yawRate = 0;
 80014d6:	f04f 0300 	mov.w	r3, #0
 80014da:	66fb      	str	r3, [r7, #108]	@ 0x6c
    /* Errors */
    float errorValue_rollRate = 0;
 80014dc:	f04f 0300 	mov.w	r3, #0
 80014e0:	66bb      	str	r3, [r7, #104]	@ 0x68
    float errorValue_pitchRate = 0;
 80014e2:	f04f 0300 	mov.w	r3, #0
 80014e6:	667b      	str	r3, [r7, #100]	@ 0x64
    float errorValue_yawRate = 0;
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Previously stored errors */
    float previousErrorValue_rollRate = 0;
 80014ee:	f04f 0300 	mov.w	r3, #0
 80014f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    float previousErrorValue_pitchRate = 0;
 80014f4:	f04f 0300 	mov.w	r3, #0
 80014f8:	65bb      	str	r3, [r7, #88]	@ 0x58
    float previousErrorValue_yawRate = 0;
 80014fa:	f04f 0300 	mov.w	r3, #0
 80014fe:	657b      	str	r3, [r7, #84]	@ 0x54
    /* Previously stored terms */
    float previousIterm_rollRate = 0;
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	653b      	str	r3, [r7, #80]	@ 0x50
    float previousIterm_pitchRate = 0;
 8001506:	f04f 0300 	mov.w	r3, #0
 800150a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    float previousIterm_yawRate = 0;
 800150c:	f04f 0300 	mov.w	r3, #0
 8001510:	64bb      	str	r3, [r7, #72]	@ 0x48
    /* PID gains */
    float kP_rollRate = 0.0;
 8001512:	f04f 0300 	mov.w	r3, #0
 8001516:	647b      	str	r3, [r7, #68]	@ 0x44
    float kP_pitchRate = 0.0;
 8001518:	f04f 0300 	mov.w	r3, #0
 800151c:	643b      	str	r3, [r7, #64]	@ 0x40
    float kP_yawRate = 0.0;
 800151e:	f04f 0300 	mov.w	r3, #0
 8001522:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float kI_rollRate = 3.50;
 8001524:	4b78      	ldr	r3, [pc, #480]	@ (8001708 <FlightController_ControlSystem+0x268>)
 8001526:	63bb      	str	r3, [r7, #56]	@ 0x38
    float kI_pitchRate = 3.50;
 8001528:	4b77      	ldr	r3, [pc, #476]	@ (8001708 <FlightController_ControlSystem+0x268>)
 800152a:	637b      	str	r3, [r7, #52]	@ 0x34
    float kI_yawRate = 12.00;
 800152c:	4b77      	ldr	r3, [pc, #476]	@ (800170c <FlightController_ControlSystem+0x26c>)
 800152e:	633b      	str	r3, [r7, #48]	@ 0x30
    float kD_rollRate = 0.03;
 8001530:	4b77      	ldr	r3, [pc, #476]	@ (8001710 <FlightController_ControlSystem+0x270>)
 8001532:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float kD_pitchRate = 0.03;
 8001534:	4b76      	ldr	r3, [pc, #472]	@ (8001710 <FlightController_ControlSystem+0x270>)
 8001536:	62bb      	str	r3, [r7, #40]	@ 0x28
    float kD_yawRate = 0.00;
 8001538:	f04f 0300 	mov.w	r3, #0
 800153c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* PID terms */
    float Pterm_rollRate = 0;
 800153e:	f04f 0300 	mov.w	r3, #0
 8001542:	623b      	str	r3, [r7, #32]
	float Pterm_pitchRate = 0;
 8001544:	f04f 0300 	mov.w	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
	float Pterm_yawRate = 0;
 800154a:	f04f 0300 	mov.w	r3, #0
 800154e:	61bb      	str	r3, [r7, #24]
    /* PID outputs */
    float pidOutputValue_rollRate = 0;
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
    float pidOutputValue_pitchRate = 0;
 8001556:	f04f 0300 	mov.w	r3, #0
 800155a:	613b      	str	r3, [r7, #16]
    float pidOutputValue_yawRate = 0;
 800155c:	f04f 0300 	mov.w	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
    /* Motors inputs */
    float motorSpeed1 = 0;
 8001562:	f04f 0300 	mov.w	r3, #0
 8001566:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    float motorSpeed2 = 0;
 800156a:	f04f 0300 	mov.w	r3, #0
 800156e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    float motorSpeed3 = 0;
 8001572:	f04f 0300 	mov.w	r3, #0
 8001576:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    float motorSpeed4 = 0;
 800157a:	f04f 0300 	mov.w	r3, #0
 800157e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    /* Throttle stick check */
    bool_t throttleStick_startedDown = false;
 8001582:	2300      	movs	r3, #0
 8001584:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
        } else if (1 == CONTROL_SYSTEM_MODE) {

#if 1 == CONTROL_SYSTEM_MODE

            /* Check if ESCs are enabled (Switch B on radio controller) */
            if (500 <= FSA8S_channelValues[5]) {
 8001588:	4b62      	ldr	r3, [pc, #392]	@ (8001714 <FlightController_ControlSystem+0x274>)
 800158a:	895b      	ldrh	r3, [r3, #10]
 800158c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001590:	d303      	bcc.n	800159a <FlightController_ControlSystem+0xfa>
                ESC_isEnabled = true;
 8001592:	4b61      	ldr	r3, [pc, #388]	@ (8001718 <FlightController_ControlSystem+0x278>)
 8001594:	2201      	movs	r2, #1
 8001596:	701a      	strb	r2, [r3, #0]
 8001598:	e01b      	b.n	80015d2 <FlightController_ControlSystem+0x132>
            } else {
                ESC_isEnabled = false;
 800159a:	4b5f      	ldr	r3, [pc, #380]	@ (8001718 <FlightController_ControlSystem+0x278>)
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
            }

            /* Avoid uncontrolled motor start */
            while(false == throttleStick_startedDown) {
 80015a0:	e017      	b.n	80015d2 <FlightController_ControlSystem+0x132>

            	/* Read throttle input from radio controller */
            	inputValue_throttle  = FSA8S_channelValues[2];
 80015a2:	4b5c      	ldr	r3, [pc, #368]	@ (8001714 <FlightController_ControlSystem+0x274>)
 80015a4:	889b      	ldrh	r3, [r3, #4]
 80015a6:	ee07 3a90 	vmov	s15, r3
 80015aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015ae:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c

            	if(50> inputValue_throttle) {
 80015b2:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80015b6:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800171c <FlightController_ControlSystem+0x27c>
 80015ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c2:	d503      	bpl.n	80015cc <FlightController_ControlSystem+0x12c>

            		throttleStick_startedDown = true;
 80015c4:	2301      	movs	r3, #1
 80015c6:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
 80015ca:	e002      	b.n	80015d2 <FlightController_ControlSystem+0x132>

            	} else {

            		throttleStick_startedDown = false;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
            while(false == throttleStick_startedDown) {
 80015d2:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80015d6:	f083 0301 	eor.w	r3, r3, #1
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1e0      	bne.n	80015a2 <FlightController_ControlSystem+0x102>

            	}
            }

            /* Turn off motors in case ESCs are disabled */
            if (false == ESC_isEnabled) {
 80015e0:	4b4d      	ldr	r3, [pc, #308]	@ (8001718 <FlightController_ControlSystem+0x278>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	f083 0301 	eor.w	r3, r3, #1
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00c      	beq.n	8001608 <FlightController_ControlSystem+0x168>

                /* Turn off motors */
                ESC_speeds[1] = 0;
 80015ee:	4b4c      	ldr	r3, [pc, #304]	@ (8001720 <FlightController_ControlSystem+0x280>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	805a      	strh	r2, [r3, #2]
                ESC_speeds[2] = 0;
 80015f4:	4b4a      	ldr	r3, [pc, #296]	@ (8001720 <FlightController_ControlSystem+0x280>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	809a      	strh	r2, [r3, #4]
                ESC_speeds[3] = 0;
 80015fa:	4b49      	ldr	r3, [pc, #292]	@ (8001720 <FlightController_ControlSystem+0x280>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	80da      	strh	r2, [r3, #6]
                ESC_speeds[4] = 0;
 8001600:	4b47      	ldr	r3, [pc, #284]	@ (8001720 <FlightController_ControlSystem+0x280>)
 8001602:	2200      	movs	r2, #0
 8001604:	811a      	strh	r2, [r3, #8]
 8001606:	e17a      	b.n	80018fe <FlightController_ControlSystem+0x45e>
                /* Check if timer has expired */
//                if (Timer4_flag) {
            	if(1){

                    /* Read inputs from radio controller */
                    inputValue_throttle  = FSA8S_channelValues[2];	// Channel 3
 8001608:	4b42      	ldr	r3, [pc, #264]	@ (8001714 <FlightController_ControlSystem+0x274>)
 800160a:	889b      	ldrh	r3, [r3, #4]
 800160c:	ee07 3a90 	vmov	s15, r3
 8001610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001614:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
                    inputValue_rollRate  = FSA8S_channelValues[0];	// Channel 1
 8001618:	4b3e      	ldr	r3, [pc, #248]	@ (8001714 <FlightController_ControlSystem+0x274>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	ee07 3a90 	vmov	s15, r3
 8001620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001624:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
                    inputValue_pitchRate = FSA8S_channelValues[1];	// Channel 2
 8001628:	4b3a      	ldr	r3, [pc, #232]	@ (8001714 <FlightController_ControlSystem+0x274>)
 800162a:	885b      	ldrh	r3, [r3, #2]
 800162c:	ee07 3a90 	vmov	s15, r3
 8001630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001634:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
                    inputValue_yawRate   = FSA8S_channelValues[3];	// Channel 4
 8001638:	4b36      	ldr	r3, [pc, #216]	@ (8001714 <FlightController_ControlSystem+0x274>)
 800163a:	88db      	ldrh	r3, [r3, #6]
 800163c:	ee07 3a90 	vmov	s15, r3
 8001640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001644:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78

                    /* Calculate desired rates by mapping radio controller values to rates */
                    desiredValue_rollRate = 0.15 * (inputValue_rollRate - 500);
 8001648:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800164c:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8001724 <FlightController_ControlSystem+0x284>
 8001650:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001654:	ee17 0a90 	vmov	r0, s15
 8001658:	f7fe ff7e 	bl	8000558 <__aeabi_f2d>
 800165c:	a328      	add	r3, pc, #160	@ (adr r3, 8001700 <FlightController_ControlSystem+0x260>)
 800165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001662:	f7fe ffd1 	bl	8000608 <__aeabi_dmul>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	f7ff fac3 	bl	8000bf8 <__aeabi_d2f>
 8001672:	4603      	mov	r3, r0
 8001674:	677b      	str	r3, [r7, #116]	@ 0x74
                    desiredValue_pitchRate = 0.15 * (inputValue_pitchRate - 500);
 8001676:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 800167a:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001724 <FlightController_ControlSystem+0x284>
 800167e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001682:	ee17 0a90 	vmov	r0, s15
 8001686:	f7fe ff67 	bl	8000558 <__aeabi_f2d>
 800168a:	a31d      	add	r3, pc, #116	@ (adr r3, 8001700 <FlightController_ControlSystem+0x260>)
 800168c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001690:	f7fe ffba 	bl	8000608 <__aeabi_dmul>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f7ff faac 	bl	8000bf8 <__aeabi_d2f>
 80016a0:	4603      	mov	r3, r0
 80016a2:	673b      	str	r3, [r7, #112]	@ 0x70
                    desiredValue_yawRate = 0.15 * (inputValue_yawRate - 500);
 80016a4:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80016a8:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001724 <FlightController_ControlSystem+0x284>
 80016ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016b0:	ee17 0a90 	vmov	r0, s15
 80016b4:	f7fe ff50 	bl	8000558 <__aeabi_f2d>
 80016b8:	a311      	add	r3, pc, #68	@ (adr r3, 8001700 <FlightController_ControlSystem+0x260>)
 80016ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016be:	f7fe ffa3 	bl	8000608 <__aeabi_dmul>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4610      	mov	r0, r2
 80016c8:	4619      	mov	r1, r3
 80016ca:	f7ff fa95 	bl	8000bf8 <__aeabi_d2f>
 80016ce:	4603      	mov	r3, r0
 80016d0:	66fb      	str	r3, [r7, #108]	@ 0x6c

                    if (50 > inputValue_throttle) {
 80016d2:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80016d6:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800171c <FlightController_ControlSystem+0x27c>
 80016da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e2:	d523      	bpl.n	800172c <FlightController_ControlSystem+0x28c>

                        /* Turn off motors */
                        ESC_speeds[1] = 0;
 80016e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <FlightController_ControlSystem+0x280>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	805a      	strh	r2, [r3, #2]
                        ESC_speeds[2] = 0;
 80016ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001720 <FlightController_ControlSystem+0x280>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	809a      	strh	r2, [r3, #4]
                        ESC_speeds[3] = 0;
 80016f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001720 <FlightController_ControlSystem+0x280>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	80da      	strh	r2, [r3, #6]
                        ESC_speeds[4] = 0;
 80016f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001720 <FlightController_ControlSystem+0x280>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	811a      	strh	r2, [r3, #8]
 80016fc:	e0fc      	b.n	80018f8 <FlightController_ControlSystem+0x458>
 80016fe:	bf00      	nop
 8001700:	33333333 	.word	0x33333333
 8001704:	3fc33333 	.word	0x3fc33333
 8001708:	40600000 	.word	0x40600000
 800170c:	41400000 	.word	0x41400000
 8001710:	3cf5c28f 	.word	0x3cf5c28f
 8001714:	20000370 	.word	0x20000370
 8001718:	2000039c 	.word	0x2000039c
 800171c:	42480000 	.word	0x42480000
 8001720:	200003a0 	.word	0x200003a0
 8001724:	43fa0000 	.word	0x43fa0000
 8001728:	44480000 	.word	0x44480000

                    } else {

                        /* Adjust and limit throttle input */
                        if (800 < inputValue_throttle) {
 800172c:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001730:	ed1f 7a03 	vldr	s14, [pc, #-12]	@ 8001728 <FlightController_ControlSystem+0x288>
 8001734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173c:	dd02      	ble.n	8001744 <FlightController_ControlSystem+0x2a4>
                            inputValue_throttle = 800;
 800173e:	4b72      	ldr	r3, [pc, #456]	@ (8001908 <FlightController_ControlSystem+0x468>)
 8001740:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                        }

                        /* Calculate rates errors */
                        errorValue_rollRate = desiredValue_rollRate - GY87_gyroscopeValues->rotationRateRoll;
 8001744:	4b71      	ldr	r3, [pc, #452]	@ (800190c <FlightController_ControlSystem+0x46c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	edd3 7a02 	vldr	s15, [r3, #8]
 800174c:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001750:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001754:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
                        errorValue_pitchRate = desiredValue_pitchRate - GY87_gyroscopeValues->rotationRatePitch;
 8001758:	4b6c      	ldr	r3, [pc, #432]	@ (800190c <FlightController_ControlSystem+0x46c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001760:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001764:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001768:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
                        errorValue_yawRate = desiredValue_yawRate - GY87_gyroscopeValues->rotationRateYaw;
 800176c:	4b67      	ldr	r3, [pc, #412]	@ (800190c <FlightController_ControlSystem+0x46c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	edd3 7a04 	vldr	s15, [r3, #16]
 8001774:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001778:	ee77 7a67 	vsub.f32	s15, s14, s15
 800177c:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

                        /* Calculate P terms */
                        Pterm_rollRate = kP_rollRate * errorValue_rollRate;
 8001780:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001784:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001788:	ee67 7a27 	vmul.f32	s15, s14, s15
 800178c:	edc7 7a08 	vstr	s15, [r7, #32]
                        Pterm_pitchRate = kP_pitchRate * errorValue_pitchRate;
 8001790:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001794:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800179c:	edc7 7a07 	vstr	s15, [r7, #28]
                        Pterm_yawRate = kP_yawRate * errorValue_yawRate;
 80017a0:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80017a4:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80017a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ac:	edc7 7a06 	vstr	s15, [r7, #24]
//                        pidOutputValue_rollRate = Pterm_rollRate;
//                        pidOutputValue_pitchRate = Pterm_pitchRate;
//                        pidOutputValue_yawRate = Pterm_yawRate;

                        /* Calculate motors speed */
                        motorSpeed1 = ((inputValue_throttle / 10) - pidOutputValue_rollRate - pidOutputValue_pitchRate - pidOutputValue_yawRate);
 80017b0:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80017b4:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80017b8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80017bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80017c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80017c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80017d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017d4:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
                        motorSpeed2 = ((inputValue_throttle / 10) + pidOutputValue_rollRate + pidOutputValue_pitchRate - pidOutputValue_yawRate);
 80017d8:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80017dc:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80017e0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80017e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80017e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80017f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80017f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017fc:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
                        motorSpeed3 = ((inputValue_throttle / 10) + pidOutputValue_rollRate - pidOutputValue_pitchRate + pidOutputValue_yawRate);
 8001800:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001804:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001808:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800180c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001810:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001814:	edd7 7a04 	vldr	s15, [r7, #16]
 8001818:	ee77 7a67 	vsub.f32	s15, s14, s15
 800181c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001820:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001824:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
                        motorSpeed4 = ((inputValue_throttle / 10) - pidOutputValue_rollRate + pidOutputValue_pitchRate + pidOutputValue_yawRate);
 8001828:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800182c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001830:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001834:	edd7 7a05 	vldr	s15, [r7, #20]
 8001838:	ee37 7a67 	vsub.f32	s14, s14, s15
 800183c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001840:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001844:	ed97 7a03 	vldr	s14, [r7, #12]
 8001848:	ee77 7a27 	vadd.f32	s15, s14, s15
 800184c:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c

                        /* Adjust and limit motors maximum speed */
                        if (ESC_MAXIMUM_SPEED < motorSpeed1)
 8001850:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8001854:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001910 <FlightController_ControlSystem+0x470>
 8001858:	eef4 7ac7 	vcmpe.f32	s15, s14
 800185c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001860:	dd02      	ble.n	8001868 <FlightController_ControlSystem+0x3c8>
                            motorSpeed1 = ESC_MAXIMUM_SPEED;
 8001862:	4b2c      	ldr	r3, [pc, #176]	@ (8001914 <FlightController_ControlSystem+0x474>)
 8001864:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
                        if (ESC_MAXIMUM_SPEED < motorSpeed2)
 8001868:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 800186c:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001910 <FlightController_ControlSystem+0x470>
 8001870:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001878:	dd02      	ble.n	8001880 <FlightController_ControlSystem+0x3e0>
                            motorSpeed2 = ESC_MAXIMUM_SPEED;
 800187a:	4b26      	ldr	r3, [pc, #152]	@ (8001914 <FlightController_ControlSystem+0x474>)
 800187c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                        if (ESC_MAXIMUM_SPEED < motorSpeed3)
 8001880:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001884:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001910 <FlightController_ControlSystem+0x470>
 8001888:	eef4 7ac7 	vcmpe.f32	s15, s14
 800188c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001890:	dd02      	ble.n	8001898 <FlightController_ControlSystem+0x3f8>
                            motorSpeed3 = ESC_MAXIMUM_SPEED;
 8001892:	4b20      	ldr	r3, [pc, #128]	@ (8001914 <FlightController_ControlSystem+0x474>)
 8001894:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                        if (ESC_MAXIMUM_SPEED < motorSpeed4)
 8001898:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800189c:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001910 <FlightController_ControlSystem+0x470>
 80018a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a8:	dd02      	ble.n	80018b0 <FlightController_ControlSystem+0x410>
                            motorSpeed4 = ESC_MAXIMUM_SPEED;
 80018aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001914 <FlightController_ControlSystem+0x474>)
 80018ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

                        /* Set motors speed */
                        ESC_speeds[1] = (uint16_t) motorSpeed1;
 80018b0:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80018b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018b8:	ee17 3a90 	vmov	r3, s15
 80018bc:	b29a      	uxth	r2, r3
 80018be:	4b16      	ldr	r3, [pc, #88]	@ (8001918 <FlightController_ControlSystem+0x478>)
 80018c0:	805a      	strh	r2, [r3, #2]
                        ESC_speeds[2] = (uint16_t) motorSpeed2;
 80018c2:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 80018c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018ca:	ee17 3a90 	vmov	r3, s15
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	4b11      	ldr	r3, [pc, #68]	@ (8001918 <FlightController_ControlSystem+0x478>)
 80018d2:	809a      	strh	r2, [r3, #4]
                        ESC_speeds[3] = (uint16_t) motorSpeed3;
 80018d4:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80018d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018dc:	ee17 3a90 	vmov	r3, s15
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001918 <FlightController_ControlSystem+0x478>)
 80018e4:	80da      	strh	r2, [r3, #6]
                        ESC_speeds[4] = (uint16_t) motorSpeed4;
 80018e6:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80018ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018ee:	ee17 3a90 	vmov	r3, s15
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <FlightController_ControlSystem+0x478>)
 80018f6:	811a      	strh	r2, [r3, #8]

                    }

                    /* Reset Timer4 flag */
                    Timer4_flag = false;
 80018f8:	4b08      	ldr	r3, [pc, #32]	@ (800191c <FlightController_ControlSystem+0x47c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
        } else if (3 == CONTROL_SYSTEM_MODE) {

        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 80018fe:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8001902:	f00c fc17 	bl	800e134 <vTaskDelay>
    	if (0 == CONTROL_SYSTEM_MODE) {
 8001906:	e63f      	b.n	8001588 <FlightController_ControlSystem+0xe8>
 8001908:	44480000 	.word	0x44480000
 800190c:	20000388 	.word	0x20000388
 8001910:	42a00000 	.word	0x42a00000
 8001914:	42a00000 	.word	0x42a00000
 8001918:	200003a0 	.word	0x200003a0
 800191c:	20000363 	.word	0x20000363

08001920 <FlightController_Read_FSA8S>:
    }
}

void FlightController_Read_FSA8S(void * ptr) {
 8001920:	b590      	push	{r4, r7, lr}
 8001922:	b089      	sub	sp, #36	@ 0x24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]

    FSA8S_CHANNEL_t channels[FSA8S_CHANNELS] = {CHANNEL_1, CHANNEL_2, CHANNEL_3, CHANNEL_4, CHANNEL_5, CHANNEL_6, CHANNEL_7, CHANNEL_8, CHANNEL_9, CHANNEL_10};
 8001928:	4a12      	ldr	r2, [pc, #72]	@ (8001974 <FlightController_Read_FSA8S+0x54>)
 800192a:	f107 030c 	add.w	r3, r7, #12
 800192e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001930:	c303      	stmia	r3!, {r0, r1}
 8001932:	801a      	strh	r2, [r3, #0]

    /* Change delay from time in [ms] to ticks */
#ifdef MAIN_APP_USE_LOGGING_FSA8S
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
#else
    const TickType_t xDelay = pdMS_TO_TICKS(1);
 8001934:	230a      	movs	r3, #10
 8001936:	61bb      	str	r3, [r7, #24]
#endif

    while (1) {

        for (uint8_t i = 0; i < FSA8S_CHANNELS; i++) {
 8001938:	2300      	movs	r3, #0
 800193a:	77fb      	strb	r3, [r7, #31]
 800193c:	e013      	b.n	8001966 <FlightController_Read_FSA8S+0x46>
            /* Read channels */
            FSA8S_channelValues[i] = FSA8S_ReadChannel(rc_controller, channels[i]);
 800193e:	4b0e      	ldr	r3, [pc, #56]	@ (8001978 <FlightController_Read_FSA8S+0x58>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	7ffb      	ldrb	r3, [r7, #31]
 8001944:	3320      	adds	r3, #32
 8001946:	443b      	add	r3, r7
 8001948:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800194c:	7ffc      	ldrb	r4, [r7, #31]
 800194e:	4619      	mov	r1, r3
 8001950:	4610      	mov	r0, r2
 8001952:	f001 fd79 	bl	8003448 <FSA8S_ReadChannel>
 8001956:	4603      	mov	r3, r0
 8001958:	461a      	mov	r2, r3
 800195a:	4b08      	ldr	r3, [pc, #32]	@ (800197c <FlightController_Read_FSA8S+0x5c>)
 800195c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
        for (uint8_t i = 0; i < FSA8S_CHANNELS; i++) {
 8001960:	7ffb      	ldrb	r3, [r7, #31]
 8001962:	3301      	adds	r3, #1
 8001964:	77fb      	strb	r3, [r7, #31]
 8001966:	7ffb      	ldrb	r3, [r7, #31]
 8001968:	2b09      	cmp	r3, #9
 800196a:	d9e8      	bls.n	800193e <FlightController_Read_FSA8S+0x1e>
            LOG(loggingStr, LOG_INFORMATION);
#endif
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 800196c:	69b8      	ldr	r0, [r7, #24]
 800196e:	f00c fbe1 	bl	800e134 <vTaskDelay>
        for (uint8_t i = 0; i < FSA8S_CHANNELS; i++) {
 8001972:	e7e1      	b.n	8001938 <FlightController_Read_FSA8S+0x18>
 8001974:	08013598 	.word	0x08013598
 8001978:	20000364 	.word	0x20000364
 800197c:	20000370 	.word	0x20000370

08001980 <FlightController_Read_GY87>:
    }
}

void FlightController_Read_GY87(void * ptr) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
#if defined MAIN_APP_USE_LOGGING_GY87_GYROSCOPE || defined MAIN_APP_USE_LOGGING_GY87_ACCELEROMETER || defined MAIN_APP_USE_LOGGING_GY87_ACCELEROMETER_ANGLES || defined MAIN_APP_USE_LOGGING_GY87_TEMPERATURE ||                                         \
    defined MAIN_APP_USE_LOGGING_GY87_MAGNETOMETER || defined MAIN_APP_USE_LOGGING_GY87_MAGNETOMETER_HEADING || defined MAIN_APP_USE_LOGGING_GY87_BAROMETER_TEMPERATURE || defined MAIN_APP_USE_LOGGING_GY87_BAROMETER_PRESSURE ||                       \
    defined MAIN_APP_USE_LOGGING_GY87_BAROMETER_ALTITUDE
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
#else
    const TickType_t xDelay = pdMS_TO_TICKS(1);
 8001988:	230a      	movs	r3, #10
 800198a:	60bb      	str	r3, [r7, #8]
#endif

    bool_t gyroscopeCalibrationIsDone = false;
 800198c:	2300      	movs	r3, #0
 800198e:	73fb      	strb	r3, [r7, #15]
    bool_t accelerometerCalibrationIsDone = false;
 8001990:	2300      	movs	r3, #0
 8001992:	73bb      	strb	r3, [r7, #14]

    /* Allocate dynamic memory for the MPU6050 gyroscope values */
    GY87_gyroscopeValues = pvPortMalloc(sizeof(GY87_gyroscopeValues));
 8001994:	2004      	movs	r0, #4
 8001996:	f00d ffb9 	bl	800f90c <pvPortMalloc>
 800199a:	4603      	mov	r3, r0
 800199c:	4a41      	ldr	r2, [pc, #260]	@ (8001aa4 <FlightController_Read_GY87+0x124>)
 800199e:	6013      	str	r3, [r2, #0]

    if (NULL == GY87_gyroscopeValues) {
 80019a0:	4b40      	ldr	r3, [pc, #256]	@ (8001aa4 <FlightController_Read_GY87+0x124>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d104      	bne.n	80019b2 <FlightController_Read_GY87+0x32>

        /* Free up dynamic allocated memory */
        vPortFree(GY87_gyroscopeValues);
 80019a8:	4b3e      	ldr	r3, [pc, #248]	@ (8001aa4 <FlightController_Read_GY87+0x124>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f00d ffbf 	bl	800f930 <vPortFree>
    }

    /* Allocate dynamic memory for the MPU6050 accelerometer values */
    GY87_accelerometerValues = pvPortMalloc(sizeof(GY87_accelerometerValues));
 80019b2:	2004      	movs	r0, #4
 80019b4:	f00d ffaa 	bl	800f90c <pvPortMalloc>
 80019b8:	4603      	mov	r3, r0
 80019ba:	4a3b      	ldr	r2, [pc, #236]	@ (8001aa8 <FlightController_Read_GY87+0x128>)
 80019bc:	6013      	str	r3, [r2, #0]

    if (NULL == GY87_accelerometerValues) {
 80019be:	4b3a      	ldr	r3, [pc, #232]	@ (8001aa8 <FlightController_Read_GY87+0x128>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d104      	bne.n	80019d0 <FlightController_Read_GY87+0x50>

        /* Free up dynamic allocated memory */
        vPortFree(GY87_accelerometerValues);
 80019c6:	4b38      	ldr	r3, [pc, #224]	@ (8001aa8 <FlightController_Read_GY87+0x128>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f00d ffb0 	bl	800f930 <vPortFree>
    }

    /* Allocate dynamic memory for the MPU6050 magnetometer values */
    GY87_magnetometerValues = pvPortMalloc(sizeof(GY87_magnetometerValues));
 80019d0:	2004      	movs	r0, #4
 80019d2:	f00d ff9b 	bl	800f90c <pvPortMalloc>
 80019d6:	4603      	mov	r3, r0
 80019d8:	4a34      	ldr	r2, [pc, #208]	@ (8001aac <FlightController_Read_GY87+0x12c>)
 80019da:	6013      	str	r3, [r2, #0]

    if (NULL == GY87_magnetometerValues) {
 80019dc:	4b33      	ldr	r3, [pc, #204]	@ (8001aac <FlightController_Read_GY87+0x12c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d104      	bne.n	80019ee <FlightController_Read_GY87+0x6e>

        /* Free up dynamic allocated memory */
        vPortFree(GY87_magnetometerValues);
 80019e4:	4b31      	ldr	r3, [pc, #196]	@ (8001aac <FlightController_Read_GY87+0x12c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f00d ffa1 	bl	800f930 <vPortFree>
    }

    while (1) {

        /* Check if gyroscope and accelerometer calibrations were done */
        if (gyroscopeCalibrationIsDone && accelerometerCalibrationIsDone) {
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d038      	beq.n	8001a66 <FlightController_Read_GY87+0xe6>
 80019f4:	7bbb      	ldrb	r3, [r7, #14]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d035      	beq.n	8001a66 <FlightController_Read_GY87+0xe6>

            /* Read GY87 gyroscope values */
            GY87_ReadGyroscope(hgy87, GY87_gyroscopeValues);
 80019fa:	4b2d      	ldr	r3, [pc, #180]	@ (8001ab0 <FlightController_Read_GY87+0x130>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a29      	ldr	r2, [pc, #164]	@ (8001aa4 <FlightController_Read_GY87+0x124>)
 8001a00:	6812      	ldr	r2, [r2, #0]
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f002 f9a5 	bl	8003d54 <GY87_ReadGyroscope>
            sprintf((char *)loggingStr, (const char *)"GY87 Gyroscope ROLL: %.2f [°/s] PITCH: %.2f [°/s] YAW: %.2f [°/s]\r\n", GY87_gyroscopeValues->rotationRateRoll, GY87_gyroscopeValues->rotationRatePitch, GY87_gyroscopeValues->rotationRateYaw);
            LOG(loggingStr, LOG_INFORMATION);
#endif

            /* Read GY87 accelerometer values */
            GY87_ReadAccelerometer(hgy87, GY87_accelerometerValues);
 8001a0a:	4b29      	ldr	r3, [pc, #164]	@ (8001ab0 <FlightController_Read_GY87+0x130>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a26      	ldr	r2, [pc, #152]	@ (8001aa8 <FlightController_Read_GY87+0x128>)
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	4611      	mov	r1, r2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f002 fab7 	bl	8003f88 <GY87_ReadAccelerometer>
            sprintf((char *)loggingStr, (const char *)"GY87 Accelerometer ROLL: %.2f [°] PITCH: %.2f [°]\r\n", GY87_accelerometerValues->angleRoll, GY87_accelerometerValues->anglePitch);
            LOG(loggingStr, LOG_INFORMATION);
#endif

            /* Read GY87 temperature value */
            GY87_temperature = GY87_ReadTemperatureSensor(hgy87);
 8001a1a:	4b25      	ldr	r3, [pc, #148]	@ (8001ab0 <FlightController_Read_GY87+0x130>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f002 fbe6 	bl	80041f0 <GY87_ReadTemperatureSensor>
 8001a24:	4603      	mov	r3, r0
 8001a26:	461a      	mov	r2, r3
 8001a28:	4b22      	ldr	r3, [pc, #136]	@ (8001ab4 <FlightController_Read_GY87+0x134>)
 8001a2a:	801a      	strh	r2, [r3, #0]
            sprintf((char *)loggingStr, (const char *)"GY87 Temperature: %d [°C]\r\n", GY87_temperature);
            LOG(loggingStr, LOG_INFORMATION);
#endif

            /* Read GY87 magnetometer values */
            GY87_ReadMagnetometer(hgy87, GY87_magnetometerValues);
 8001a2c:	4b20      	ldr	r3, [pc, #128]	@ (8001ab0 <FlightController_Read_GY87+0x130>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a1e      	ldr	r2, [pc, #120]	@ (8001aac <FlightController_Read_GY87+0x12c>)
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	4611      	mov	r1, r2
 8001a36:	4618      	mov	r0, r3
 8001a38:	f002 fc08 	bl	800424c <GY87_ReadMagnetometer>
            sprintf((char *)loggingStr, (const char *)"GY87 Magnetometer X: %.3f [G] Y: %.3f [G] Z: %.3f [G]\r\n", GY87_magnetometerValues->magneticFieldX, GY87_magnetometerValues->magneticFieldY, GY87_magnetometerValues->magneticFieldZ);
            LOG(loggingStr, LOG_INFORMATION);
#endif

            /* Read GY87 magnetometer heading */
            GY87_magnetometerHeadingValue = GY87_ReadMagnetometerHeading(hgy87);
 8001a3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab0 <FlightController_Read_GY87+0x130>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f002 fc95 	bl	8004370 <GY87_ReadMagnetometerHeading>
 8001a46:	eef0 7a40 	vmov.f32	s15, s0
 8001a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab8 <FlightController_Read_GY87+0x138>)
 8001a4c:	edc3 7a00 	vstr	s15, [r3]
            sprintf((char *)loggingStr, (const char *)"GY87 Magnetometer Heading: %.2f [°]\r\n", GY87_magnetometerHeadingValue);
            LOG(loggingStr, LOG_INFORMATION);
#endif

            /* Read GY87 barometer temperature value */
            GY87_barometerTemperatureValue = GY87_ReadBarometerTemperature(hgy87);
 8001a50:	4b17      	ldr	r3, [pc, #92]	@ (8001ab0 <FlightController_Read_GY87+0x130>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f002 fcfd 	bl	8004454 <GY87_ReadBarometerTemperature>
 8001a5a:	eef0 7a40 	vmov.f32	s15, s0
 8001a5e:	4b17      	ldr	r3, [pc, #92]	@ (8001abc <FlightController_Read_GY87+0x13c>)
 8001a60:	edc3 7a00 	vstr	s15, [r3]
 8001a64:	e019      	b.n	8001a9a <FlightController_Read_GY87+0x11a>
#endif

        } else {

            /* Calibrate gyroscope measurements */
            if (false == gyroscopeCalibrationIsDone) {
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	f083 0301 	eor.w	r3, r3, #1
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d006      	beq.n	8001a80 <FlightController_Read_GY87+0x100>

                gyroscopeCalibrationIsDone = GY87_CalibrateGyroscope(hgy87);
 8001a72:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab0 <FlightController_Read_GY87+0x130>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f002 f90a 	bl	8003c90 <GY87_CalibrateGyroscope>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	73fb      	strb	r3, [r7, #15]
            }

            /* Calibrate accelerometer measurements */
            if (false == accelerometerCalibrationIsDone) {
 8001a80:	7bbb      	ldrb	r3, [r7, #14]
 8001a82:	f083 0301 	eor.w	r3, r3, #1
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d006      	beq.n	8001a9a <FlightController_Read_GY87+0x11a>

                accelerometerCalibrationIsDone = GY87_CalibrateAccelerometer(hgy87);
 8001a8c:	4b08      	ldr	r3, [pc, #32]	@ (8001ab0 <FlightController_Read_GY87+0x130>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f002 fa15 	bl	8003ec0 <GY87_CalibrateAccelerometer>
 8001a96:	4603      	mov	r3, r0
 8001a98:	73bb      	strb	r3, [r7, #14]
            }
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001a9a:	68b8      	ldr	r0, [r7, #8]
 8001a9c:	f00c fb4a 	bl	800e134 <vTaskDelay>
        if (gyroscopeCalibrationIsDone && accelerometerCalibrationIsDone) {
 8001aa0:	e7a5      	b.n	80019ee <FlightController_Read_GY87+0x6e>
 8001aa2:	bf00      	nop
 8001aa4:	20000388 	.word	0x20000388
 8001aa8:	2000038c 	.word	0x2000038c
 8001aac:	20000390 	.word	0x20000390
 8001ab0:	20000368 	.word	0x20000368
 8001ab4:	20000384 	.word	0x20000384
 8001ab8:	20000394 	.word	0x20000394
 8001abc:	20000398 	.word	0x20000398

08001ac0 <FlightController_Write_ESCs>:
    }
}

void FlightController_Write_ESCs(void * ptr) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
#ifdef MAIN_APP_USE_LOGGING_ESC
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY * LOGGING_TASK_DELAY_MULTIPLIER);
#else
    const TickType_t xDelay = pdMS_TO_TICKS(2);
 8001ac8:	2314      	movs	r3, #20
 8001aca:	60fb      	str	r3, [r7, #12]
#endif

    while (1) {

        ESC_SetSpeed(hesc, hesc->esc1, ESC_speeds[4]);
 8001acc:	4b24      	ldr	r3, [pc, #144]	@ (8001b60 <FlightController_Write_ESCs+0xa0>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b23      	ldr	r3, [pc, #140]	@ (8001b60 <FlightController_Write_ESCs+0xa0>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	791b      	ldrb	r3, [r3, #4]
 8001ad6:	4923      	ldr	r1, [pc, #140]	@ (8001b64 <FlightController_Write_ESCs+0xa4>)
 8001ad8:	8909      	ldrh	r1, [r1, #8]
 8001ada:	ee07 1a90 	vmov	s15, r1
 8001ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4610      	mov	r0, r2
 8001aea:	f001 fb15 	bl	8003118 <ESC_SetSpeed>
        ESC_SetSpeed(hesc, hesc->esc2, ESC_speeds[2]);
 8001aee:	4b1c      	ldr	r3, [pc, #112]	@ (8001b60 <FlightController_Write_ESCs+0xa0>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b60 <FlightController_Write_ESCs+0xa0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	795b      	ldrb	r3, [r3, #5]
 8001af8:	491a      	ldr	r1, [pc, #104]	@ (8001b64 <FlightController_Write_ESCs+0xa4>)
 8001afa:	8889      	ldrh	r1, [r1, #4]
 8001afc:	ee07 1a90 	vmov	s15, r1
 8001b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b04:	eeb0 0a67 	vmov.f32	s0, s15
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	f001 fb04 	bl	8003118 <ESC_SetSpeed>
        ESC_SetSpeed(hesc, hesc->esc3, ESC_speeds[3]);
 8001b10:	4b13      	ldr	r3, [pc, #76]	@ (8001b60 <FlightController_Write_ESCs+0xa0>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b12      	ldr	r3, [pc, #72]	@ (8001b60 <FlightController_Write_ESCs+0xa0>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	799b      	ldrb	r3, [r3, #6]
 8001b1a:	4912      	ldr	r1, [pc, #72]	@ (8001b64 <FlightController_Write_ESCs+0xa4>)
 8001b1c:	88c9      	ldrh	r1, [r1, #6]
 8001b1e:	ee07 1a90 	vmov	s15, r1
 8001b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b26:	eeb0 0a67 	vmov.f32	s0, s15
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	f001 faf3 	bl	8003118 <ESC_SetSpeed>
        ESC_SetSpeed(hesc, hesc->esc4, ESC_speeds[1]);
 8001b32:	4b0b      	ldr	r3, [pc, #44]	@ (8001b60 <FlightController_Write_ESCs+0xa0>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <FlightController_Write_ESCs+0xa0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	79db      	ldrb	r3, [r3, #7]
 8001b3c:	4909      	ldr	r1, [pc, #36]	@ (8001b64 <FlightController_Write_ESCs+0xa4>)
 8001b3e:	8849      	ldrh	r1, [r1, #2]
 8001b40:	ee07 1a90 	vmov	s15, r1
 8001b44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b48:	eeb0 0a67 	vmov.f32	s0, s15
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4610      	mov	r0, r2
 8001b50:	f001 fae2 	bl	8003118 <ESC_SetSpeed>
        sprintf((char *)loggingStr, (const char *)"PWM Channel 4 Speed: %d\r\n\n", ESC_speeds[3]);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f00c faed 	bl	800e134 <vTaskDelay>
        ESC_SetSpeed(hesc, hesc->esc1, ESC_speeds[4]);
 8001b5a:	bf00      	nop
 8001b5c:	e7b6      	b.n	8001acc <FlightController_Write_ESCs+0xc>
 8001b5e:	bf00      	nop
 8001b60:	2000036c 	.word	0x2000036c
 8001b64:	200003a0 	.word	0x200003a0

08001b68 <FlightController_OnOffButton>:
    }
}

void FlightController_OnOffButton(void * ptr) {
 8001b68:	b590      	push	{r4, r7, lr}
 8001b6a:	b087      	sub	sp, #28
 8001b6c:	af02      	add	r7, sp, #8
 8001b6e:	6078      	str	r0, [r7, #4]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001b70:	23c8      	movs	r3, #200	@ 0xc8
 8001b72:	60fb      	str	r3, [r7, #12]

    while (1) {

        /* Check On/Off Button status */
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 8001b74:	2120      	movs	r1, #32
 8001b76:	4810      	ldr	r0, [pc, #64]	@ (8001bb8 <FlightController_OnOffButton+0x50>)
 8001b78:	f003 fe22 	bl	80057c0 <HAL_GPIO_ReadPin>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d115      	bne.n	8001bae <FlightController_OnOffButton+0x46>
            /* User is trying to turn it on or off */
            if (!Timer1_running) {
 8001b82:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <FlightController_OnOffButton+0x54>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	f083 0301 	eor.w	r3, r3, #1
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00e      	beq.n	8001bae <FlightController_OnOffButton+0x46>

                xTimerStart(Timer1_Handle, 0);
 8001b90:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc0 <FlightController_OnOffButton+0x58>)
 8001b92:	681c      	ldr	r4, [r3, #0]
 8001b94:	f00c fcac 	bl	800e4f0 <xTaskGetTickCount>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	4620      	mov	r0, r4
 8001ba4:	f00d f908 	bl	800edb8 <xTimerGenericCommand>
                Timer1_running = true;
 8001ba8:	4b04      	ldr	r3, [pc, #16]	@ (8001bbc <FlightController_OnOffButton+0x54>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	701a      	strb	r2, [r3, #0]
            }
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f00c fac0 	bl	800e134 <vTaskDelay>
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 8001bb4:	e7de      	b.n	8001b74 <FlightController_OnOffButton+0xc>
 8001bb6:	bf00      	nop
 8001bb8:	40020400 	.word	0x40020400
 8001bbc:	20000360 	.word	0x20000360
 8001bc0:	20000350 	.word	0x20000350
 8001bc4:	00000000 	.word	0x00000000

08001bc8 <FlightController_BatteryLevel>:
    }
}

void FlightController_BatteryLevel(void * ptr) {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
#ifdef MAIN_APP_USE_LOGGING_FLIGHT_CONTROLLER_BATTERY_LEVEL
    uint8_t loggingStr[30];
#endif

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(1000);
 8001bd0:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001bd4:	60fb      	str	r3, [r7, #12]

    while (1) {

        /* Start ADC Conversion */
        HAL_ADC_Start(&hadc1);
 8001bd6:	4830      	ldr	r0, [pc, #192]	@ (8001c98 <FlightController_BatteryLevel+0xd0>)
 8001bd8:	f002 fdf2 	bl	80047c0 <HAL_ADC_Start>

        /* Poll ADC peripheral */
        HAL_ADC_PollForConversion(&hadc1, 1);
 8001bdc:	2101      	movs	r1, #1
 8001bde:	482e      	ldr	r0, [pc, #184]	@ (8001c98 <FlightController_BatteryLevel+0xd0>)
 8001be0:	f002 fea2 	bl	8004928 <HAL_ADC_PollForConversion>

        /* Read ADC value */
        adcValue = HAL_ADC_GetValue(&hadc1);
 8001be4:	482c      	ldr	r0, [pc, #176]	@ (8001c98 <FlightController_BatteryLevel+0xd0>)
 8001be6:	f002 ff2a 	bl	8004a3e <HAL_ADC_GetValue>
 8001bea:	4603      	mov	r3, r0
 8001bec:	817b      	strh	r3, [r7, #10]

        /* Convert ADC value to real value */
        FlightController_batteryLevelValue = (adcValue * 3.3) / 4096;
 8001bee:	897b      	ldrh	r3, [r7, #10]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7fe fc9f 	bl	8000534 <__aeabi_i2d>
 8001bf6:	a322      	add	r3, pc, #136	@ (adr r3, 8001c80 <FlightController_BatteryLevel+0xb8>)
 8001bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfc:	f7fe fd04 	bl	8000608 <__aeabi_dmul>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4610      	mov	r0, r2
 8001c06:	4619      	mov	r1, r3
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	4b23      	ldr	r3, [pc, #140]	@ (8001c9c <FlightController_BatteryLevel+0xd4>)
 8001c0e:	f7fe fe25 	bl	800085c <__aeabi_ddiv>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4610      	mov	r0, r2
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f7fe ffed 	bl	8000bf8 <__aeabi_d2f>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	4a1f      	ldr	r2, [pc, #124]	@ (8001ca0 <FlightController_BatteryLevel+0xd8>)
 8001c22:	6013      	str	r3, [r2, #0]

        /* Correct real value, as when battery full, ADC input is not 3.3V */
        FlightController_batteryLevelValue = FlightController_batteryLevelValue * 1.046046;
 8001c24:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca0 <FlightController_BatteryLevel+0xd8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe fc95 	bl	8000558 <__aeabi_f2d>
 8001c2e:	a316      	add	r3, pc, #88	@ (adr r3, 8001c88 <FlightController_BatteryLevel+0xc0>)
 8001c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c34:	f7fe fce8 	bl	8000608 <__aeabi_dmul>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	4619      	mov	r1, r3
 8001c40:	f7fe ffda 	bl	8000bf8 <__aeabi_d2f>
 8001c44:	4603      	mov	r3, r0
 8001c46:	4a16      	ldr	r2, [pc, #88]	@ (8001ca0 <FlightController_BatteryLevel+0xd8>)
 8001c48:	6013      	str	r3, [r2, #0]

        /* Map real value to battery levels */
        FlightController_batteryLevelValue = FlightController_batteryLevelValue * 3.363636;
 8001c4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ca0 <FlightController_BatteryLevel+0xd8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe fc82 	bl	8000558 <__aeabi_f2d>
 8001c54:	a30e      	add	r3, pc, #56	@ (adr r3, 8001c90 <FlightController_BatteryLevel+0xc8>)
 8001c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5a:	f7fe fcd5 	bl	8000608 <__aeabi_dmul>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	4610      	mov	r0, r2
 8001c64:	4619      	mov	r1, r3
 8001c66:	f7fe ffc7 	bl	8000bf8 <__aeabi_d2f>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	4a0c      	ldr	r2, [pc, #48]	@ (8001ca0 <FlightController_BatteryLevel+0xd8>)
 8001c6e:	6013      	str	r3, [r2, #0]
        sprintf((char *)loggingStr, (const char *)"Battery Level: %.2f [V]\r\n\n", FlightController_batteryLevelValue);
        LOG(loggingStr, LOG_INFORMATION);
#endif

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f00c fa5f 	bl	800e134 <vTaskDelay>
        HAL_ADC_Start(&hadc1);
 8001c76:	bf00      	nop
 8001c78:	e7ad      	b.n	8001bd6 <FlightController_BatteryLevel+0xe>
 8001c7a:	bf00      	nop
 8001c7c:	f3af 8000 	nop.w
 8001c80:	66666666 	.word	0x66666666
 8001c84:	400a6666 	.word	0x400a6666
 8001c88:	bb01c92e 	.word	0xbb01c92e
 8001c8c:	3ff0bc9a 	.word	0x3ff0bc9a
 8001c90:	fdbd2fa1 	.word	0xfdbd2fa1
 8001c94:	400ae8b9 	.word	0x400ae8b9
 8001c98:	20000aa4 	.word	0x20000aa4
 8001c9c:	40b00000 	.word	0x40b00000
 8001ca0:	20000008 	.word	0x20000008

08001ca4 <FlightController_BatteryAlarm>:
    }
}

void FlightController_BatteryAlarm(void * ptr) {
 8001ca4:	b5b0      	push	{r4, r5, r7, lr}
 8001ca6:	b08e      	sub	sp, #56	@ 0x38
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]

    uint8_t alarmSequence[] = {1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 8001cac:	4b24      	ldr	r3, [pc, #144]	@ (8001d40 <FlightController_BatteryAlarm+0x9c>)
 8001cae:	f107 0408 	add.w	r4, r7, #8
 8001cb2:	461d      	mov	r5, r3
 8001cb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cbc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cc0:	e884 0003 	stmia.w	r4, {r0, r1}
    uint8_t alarmSequenceSize = sizeof(alarmSequence);
 8001cc4:	2328      	movs	r3, #40	@ 0x28
 8001cc6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    uint8_t alarmSequenceCursor = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001cd0:	23c8      	movs	r3, #200	@ 0xc8
 8001cd2:	633b      	str	r3, [r7, #48]	@ 0x30

    while (1) {

        if (FlightController_batteryLevelValue < BATTERY_ALARM_THRESHOLD) {
 8001cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d44 <FlightController_BatteryAlarm+0xa0>)
 8001cd6:	edd3 7a00 	vldr	s15, [r3]
 8001cda:	eeb2 7a03 	vmov.f32	s14, #35	@ 0x41180000  9.5
 8001cde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce6:	d521      	bpl.n	8001d2c <FlightController_BatteryAlarm+0x88>

            if (Timer2_flag) {
 8001ce8:	4b17      	ldr	r3, [pc, #92]	@ (8001d48 <FlightController_BatteryAlarm+0xa4>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d023      	beq.n	8001d38 <FlightController_BatteryAlarm+0x94>
                /* If timer expired */

                /* Parse alarm sequence */
                alarmSequenceCursor++;
 8001cf0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                if (alarmSequenceSize <= alarmSequenceCursor) {
 8001cfa:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8001cfe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d802      	bhi.n	8001d0c <FlightController_BatteryAlarm+0x68>
                    alarmSequenceCursor = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                }

                /* Write to buzzer */
                HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, alarmSequence[alarmSequenceCursor]);
 8001d0c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001d10:	3338      	adds	r3, #56	@ 0x38
 8001d12:	443b      	add	r3, r7
 8001d14:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d1e:	480b      	ldr	r0, [pc, #44]	@ (8001d4c <FlightController_BatteryAlarm+0xa8>)
 8001d20:	f003 fd66 	bl	80057f0 <HAL_GPIO_WritePin>

                /* Reset Timer2 flag */
                Timer2_flag = false;
 8001d24:	4b08      	ldr	r3, [pc, #32]	@ (8001d48 <FlightController_BatteryAlarm+0xa4>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	701a      	strb	r2, [r3, #0]
 8001d2a:	e005      	b.n	8001d38 <FlightController_BatteryAlarm+0x94>
            }

        } else {

            HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d32:	4806      	ldr	r0, [pc, #24]	@ (8001d4c <FlightController_BatteryAlarm+0xa8>)
 8001d34:	f003 fd5c 	bl	80057f0 <HAL_GPIO_WritePin>
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001d38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001d3a:	f00c f9fb 	bl	800e134 <vTaskDelay>
        if (FlightController_batteryLevelValue < BATTERY_ALARM_THRESHOLD) {
 8001d3e:	e7c9      	b.n	8001cd4 <FlightController_BatteryAlarm+0x30>
 8001d40:	080135a4 	.word	0x080135a4
 8001d44:	20000008 	.word	0x20000008
 8001d48:	20000361 	.word	0x20000361
 8001d4c:	40020000 	.word	0x40020000

08001d50 <FlightController_HeartbeatLight>:
    }
}

void FlightController_HeartbeatLight(void * ptr) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]

    uint8_t ledState = GPIO_PIN_RESET;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	73fb      	strb	r3, [r7, #15]

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(HEARTBEAT_PERIOD / 2);
 8001d5c:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001d60:	60bb      	str	r3, [r7, #8]

    while (1) {

        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ledState);
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	461a      	mov	r2, r3
 8001d66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d6a:	4807      	ldr	r0, [pc, #28]	@ (8001d88 <FlightController_HeartbeatLight+0x38>)
 8001d6c:	f003 fd40 	bl	80057f0 <HAL_GPIO_WritePin>

        /* Change pin state */
        if (ledState == GPIO_PIN_RESET) {
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d102      	bne.n	8001d7c <FlightController_HeartbeatLight+0x2c>

            ledState = GPIO_PIN_SET;
 8001d76:	2301      	movs	r3, #1
 8001d78:	73fb      	strb	r3, [r7, #15]
 8001d7a:	e001      	b.n	8001d80 <FlightController_HeartbeatLight+0x30>
        } else {

            ledState = GPIO_PIN_RESET;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	73fb      	strb	r3, [r7, #15]
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8001d80:	68b8      	ldr	r0, [r7, #8]
 8001d82:	f00c f9d7 	bl	800e134 <vTaskDelay>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ledState);
 8001d86:	e7ec      	b.n	8001d62 <FlightController_HeartbeatLight+0x12>
 8001d88:	40020800 	.word	0x40020800

08001d8c <FlightController_FlightLights>:
    }
}

void FlightController_FlightLights(void * ptr) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b09c      	sub	sp, #112	@ 0x70
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

    /* Define flight lights sequences */
    uint8_t flightLightsSequenceA1[] = {1, 0, 0, 0, 0, 0, 0, 0};
 8001d94:	4ab2      	ldr	r2, [pc, #712]	@ (8002060 <FlightController_FlightLights+0x2d4>)
 8001d96:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001d9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d9e:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceA3[] = {1, 0, 0, 0, 0, 0, 0, 0};
 8001da2:	4aaf      	ldr	r2, [pc, #700]	@ (8002060 <FlightController_FlightLights+0x2d4>)
 8001da4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001da8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dac:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceA2[] = {0, 0, 1, 0, 0, 0, 0, 0};
 8001db0:	4aac      	ldr	r2, [pc, #688]	@ (8002064 <FlightController_FlightLights+0x2d8>)
 8001db2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001db6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dba:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceA4[] = {0, 0, 1, 0, 0, 0, 0, 0};
 8001dbe:	4aa9      	ldr	r2, [pc, #676]	@ (8002064 <FlightController_FlightLights+0x2d8>)
 8001dc0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001dc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dc8:	e883 0003 	stmia.w	r3, {r0, r1}

    uint8_t flightLightsSequenceB1[] = {1, 0, 1, 0, 0, 0, 0, 0};
 8001dcc:	4aa6      	ldr	r2, [pc, #664]	@ (8002068 <FlightController_FlightLights+0x2dc>)
 8001dce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001dd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dd6:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceB3[] = {1, 0, 1, 0, 0, 0, 0, 0};
 8001dda:	4aa3      	ldr	r2, [pc, #652]	@ (8002068 <FlightController_FlightLights+0x2dc>)
 8001ddc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001de0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001de4:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceB2[] = {0, 0, 0, 0, 1, 0, 1, 0};
 8001de8:	4aa0      	ldr	r2, [pc, #640]	@ (800206c <FlightController_FlightLights+0x2e0>)
 8001dea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001dee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001df2:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceB4[] = {0, 0, 0, 0, 1, 0, 1, 0};
 8001df6:	4a9d      	ldr	r2, [pc, #628]	@ (800206c <FlightController_FlightLights+0x2e0>)
 8001df8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e00:	e883 0003 	stmia.w	r3, {r0, r1}

    uint8_t flightLightsSequenceC1[] = {1, 0, 1, 0, 0, 0, 0, 0};
 8001e04:	4a98      	ldr	r2, [pc, #608]	@ (8002068 <FlightController_FlightLights+0x2dc>)
 8001e06:	f107 0320 	add.w	r3, r7, #32
 8001e0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e0e:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceC3[] = {1, 0, 1, 0, 0, 0, 0, 0};
 8001e12:	4a95      	ldr	r2, [pc, #596]	@ (8002068 <FlightController_FlightLights+0x2dc>)
 8001e14:	f107 0318 	add.w	r3, r7, #24
 8001e18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e1c:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceC2[] = {0, 0, 0, 0, 1, 0, 0, 0};
 8001e20:	4a93      	ldr	r2, [pc, #588]	@ (8002070 <FlightController_FlightLights+0x2e4>)
 8001e22:	f107 0310 	add.w	r3, r7, #16
 8001e26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e2a:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t flightLightsSequenceC4[] = {0, 0, 0, 0, 1, 0, 0, 0};
 8001e2e:	4a90      	ldr	r2, [pc, #576]	@ (8002070 <FlightController_FlightLights+0x2e4>)
 8001e30:	f107 0308 	add.w	r3, r7, #8
 8001e34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e38:	e883 0003 	stmia.w	r3, {r0, r1}

    uint8_t flightLightsSequence = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    uint8_t flightLightsSequenceSize = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
    uint8_t flightLightsSequenceCursor = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d

    /* Change delay from time in [ms] to ticks */
    const TickType_t xDelay = pdMS_TO_TICKS(DEFAULT_TASK_DELAY);
 8001e4e:	23c8      	movs	r3, #200	@ 0xc8
 8001e50:	66bb      	str	r3, [r7, #104]	@ 0x68

    while (1) {

        /* Turn on/off flight lights (Switch D on radio controller) */
        if (500 <= FSA8S_channelValues[9]) {
 8001e52:	4b88      	ldr	r3, [pc, #544]	@ (8002074 <FlightController_FlightLights+0x2e8>)
 8001e54:	8a5b      	ldrh	r3, [r3, #18]
 8001e56:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001e5a:	f0c0 80e5 	bcc.w	8002028 <FlightController_FlightLights+0x29c>

            /* Set flight light sequence (Switch C on radio controller) */
            if (250 >= FSA8S_channelValues[8]) {
 8001e5e:	4b85      	ldr	r3, [pc, #532]	@ (8002074 <FlightController_FlightLights+0x2e8>)
 8001e60:	8a1b      	ldrh	r3, [r3, #16]
 8001e62:	2bfa      	cmp	r3, #250	@ 0xfa
 8001e64:	d803      	bhi.n	8001e6e <FlightController_FlightLights+0xe2>

                flightLightsSequence = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8001e6c:	e016      	b.n	8001e9c <FlightController_FlightLights+0x110>

            } else if (250 < FSA8S_channelValues[8] && 750 >= FSA8S_channelValues[8]) {
 8001e6e:	4b81      	ldr	r3, [pc, #516]	@ (8002074 <FlightController_FlightLights+0x2e8>)
 8001e70:	8a1b      	ldrh	r3, [r3, #16]
 8001e72:	2bfa      	cmp	r3, #250	@ 0xfa
 8001e74:	d909      	bls.n	8001e8a <FlightController_FlightLights+0xfe>
 8001e76:	4b7f      	ldr	r3, [pc, #508]	@ (8002074 <FlightController_FlightLights+0x2e8>)
 8001e78:	8a1b      	ldrh	r3, [r3, #16]
 8001e7a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d803      	bhi.n	8001e8a <FlightController_FlightLights+0xfe>

                flightLightsSequence = 1;
 8001e82:	2301      	movs	r3, #1
 8001e84:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8001e88:	e008      	b.n	8001e9c <FlightController_FlightLights+0x110>

            } else if (750 < FSA8S_channelValues[8]) {
 8001e8a:	4b7a      	ldr	r3, [pc, #488]	@ (8002074 <FlightController_FlightLights+0x2e8>)
 8001e8c:	8a1b      	ldrh	r3, [r3, #16]
 8001e8e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d902      	bls.n	8001e9c <FlightController_FlightLights+0x110>

                flightLightsSequence = 2;
 8001e96:	2302      	movs	r3, #2
 8001e98:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
            }

            /* Set flight light sequence speed (Potentiometer B on radio controller) */
            Timer3_AutoReloadTime = 200 + FSA8S_channelValues[7] / 5;
 8001e9c:	4b75      	ldr	r3, [pc, #468]	@ (8002074 <FlightController_FlightLights+0x2e8>)
 8001e9e:	89db      	ldrh	r3, [r3, #14]
 8001ea0:	4a75      	ldr	r2, [pc, #468]	@ (8002078 <FlightController_FlightLights+0x2ec>)
 8001ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea6:	089b      	lsrs	r3, r3, #2
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	33c8      	adds	r3, #200	@ 0xc8
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	4b73      	ldr	r3, [pc, #460]	@ (800207c <FlightController_FlightLights+0x2f0>)
 8001eb0:	801a      	strh	r2, [r3, #0]

            /* Check if timer has expired */
            if (Timer3_flag) {
 8001eb2:	4b73      	ldr	r3, [pc, #460]	@ (8002080 <FlightController_FlightLights+0x2f4>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 80cd 	beq.w	8002056 <FlightController_FlightLights+0x2ca>

                /* Parse flight lights sequences */
                flightLightsSequenceCursor++;
 8001ebc:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
                if (flightLightsSequenceSize <= flightLightsSequenceCursor) {
 8001ec6:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8001eca:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d802      	bhi.n	8001ed8 <FlightController_FlightLights+0x14c>
                    flightLightsSequenceCursor = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
                }

                /* Write to flight lights */
                if (flightLightsSequence == 0) {
 8001ed8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d132      	bne.n	8001f46 <FlightController_FlightLights+0x1ba>

                    flightLightsSequenceSize = sizeof(flightLightsSequenceA1);
 8001ee0:	2308      	movs	r3, #8
 8001ee2:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

                    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, flightLightsSequenceA1[flightLightsSequenceCursor]);
 8001ee6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001eea:	3370      	adds	r3, #112	@ 0x70
 8001eec:	443b      	add	r3, r7
 8001eee:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	2104      	movs	r1, #4
 8001ef6:	4863      	ldr	r0, [pc, #396]	@ (8002084 <FlightController_FlightLights+0x2f8>)
 8001ef8:	f003 fc7a 	bl	80057f0 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, flightLightsSequenceA2[flightLightsSequenceCursor]);
 8001efc:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001f00:	3370      	adds	r3, #112	@ 0x70
 8001f02:	443b      	add	r3, r7
 8001f04:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f0e:	485d      	ldr	r0, [pc, #372]	@ (8002084 <FlightController_FlightLights+0x2f8>)
 8001f10:	f003 fc6e 	bl	80057f0 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, flightLightsSequenceA3[flightLightsSequenceCursor]);
 8001f14:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001f18:	3370      	adds	r3, #112	@ 0x70
 8001f1a:	443b      	add	r3, r7
 8001f1c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001f20:	461a      	mov	r2, r3
 8001f22:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f26:	4857      	ldr	r0, [pc, #348]	@ (8002084 <FlightController_FlightLights+0x2f8>)
 8001f28:	f003 fc62 	bl	80057f0 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, flightLightsSequenceA4[flightLightsSequenceCursor]);
 8001f2c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001f30:	3370      	adds	r3, #112	@ 0x70
 8001f32:	443b      	add	r3, r7
 8001f34:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f3e:	4852      	ldr	r0, [pc, #328]	@ (8002088 <FlightController_FlightLights+0x2fc>)
 8001f40:	f003 fc56 	bl	80057f0 <HAL_GPIO_WritePin>
 8001f44:	e06c      	b.n	8002020 <FlightController_FlightLights+0x294>

                } else if (flightLightsSequence == 1) {
 8001f46:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d132      	bne.n	8001fb4 <FlightController_FlightLights+0x228>

                    flightLightsSequenceSize = sizeof(flightLightsSequenceB1);
 8001f4e:	2308      	movs	r3, #8
 8001f50:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

                    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, flightLightsSequenceB1[flightLightsSequenceCursor]);
 8001f54:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001f58:	3370      	adds	r3, #112	@ 0x70
 8001f5a:	443b      	add	r3, r7
 8001f5c:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001f60:	461a      	mov	r2, r3
 8001f62:	2104      	movs	r1, #4
 8001f64:	4847      	ldr	r0, [pc, #284]	@ (8002084 <FlightController_FlightLights+0x2f8>)
 8001f66:	f003 fc43 	bl	80057f0 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, flightLightsSequenceB2[flightLightsSequenceCursor]);
 8001f6a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001f6e:	3370      	adds	r3, #112	@ 0x70
 8001f70:	443b      	add	r3, r7
 8001f72:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8001f76:	461a      	mov	r2, r3
 8001f78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f7c:	4841      	ldr	r0, [pc, #260]	@ (8002084 <FlightController_FlightLights+0x2f8>)
 8001f7e:	f003 fc37 	bl	80057f0 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, flightLightsSequenceB3[flightLightsSequenceCursor]);
 8001f82:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001f86:	3370      	adds	r3, #112	@ 0x70
 8001f88:	443b      	add	r3, r7
 8001f8a:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f94:	483b      	ldr	r0, [pc, #236]	@ (8002084 <FlightController_FlightLights+0x2f8>)
 8001f96:	f003 fc2b 	bl	80057f0 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, flightLightsSequenceB4[flightLightsSequenceCursor]);
 8001f9a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001f9e:	3370      	adds	r3, #112	@ 0x70
 8001fa0:	443b      	add	r3, r7
 8001fa2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001fac:	4836      	ldr	r0, [pc, #216]	@ (8002088 <FlightController_FlightLights+0x2fc>)
 8001fae:	f003 fc1f 	bl	80057f0 <HAL_GPIO_WritePin>
 8001fb2:	e035      	b.n	8002020 <FlightController_FlightLights+0x294>

                } else if (flightLightsSequence == 2) {
 8001fb4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d131      	bne.n	8002020 <FlightController_FlightLights+0x294>

                    flightLightsSequenceSize = sizeof(flightLightsSequenceC1);
 8001fbc:	2308      	movs	r3, #8
 8001fbe:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

                    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, flightLightsSequenceC1[flightLightsSequenceCursor]);
 8001fc2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001fc6:	3370      	adds	r3, #112	@ 0x70
 8001fc8:	443b      	add	r3, r7
 8001fca:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	2104      	movs	r1, #4
 8001fd2:	482c      	ldr	r0, [pc, #176]	@ (8002084 <FlightController_FlightLights+0x2f8>)
 8001fd4:	f003 fc0c 	bl	80057f0 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, flightLightsSequenceC2[flightLightsSequenceCursor]);
 8001fd8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001fdc:	3370      	adds	r3, #112	@ 0x70
 8001fde:	443b      	add	r3, r7
 8001fe0:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fea:	4826      	ldr	r0, [pc, #152]	@ (8002084 <FlightController_FlightLights+0x2f8>)
 8001fec:	f003 fc00 	bl	80057f0 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, flightLightsSequenceC3[flightLightsSequenceCursor]);
 8001ff0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001ff4:	3370      	adds	r3, #112	@ 0x70
 8001ff6:	443b      	add	r3, r7
 8001ff8:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002002:	4820      	ldr	r0, [pc, #128]	@ (8002084 <FlightController_FlightLights+0x2f8>)
 8002004:	f003 fbf4 	bl	80057f0 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, flightLightsSequenceC4[flightLightsSequenceCursor]);
 8002008:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800200c:	3370      	adds	r3, #112	@ 0x70
 800200e:	443b      	add	r3, r7
 8002010:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8002014:	461a      	mov	r2, r3
 8002016:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800201a:	481b      	ldr	r0, [pc, #108]	@ (8002088 <FlightController_FlightLights+0x2fc>)
 800201c:	f003 fbe8 	bl	80057f0 <HAL_GPIO_WritePin>
                }

                /* Reset Timer3 flag */
                Timer3_flag = false;
 8002020:	4b17      	ldr	r3, [pc, #92]	@ (8002080 <FlightController_FlightLights+0x2f4>)
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
 8002026:	e016      	b.n	8002056 <FlightController_FlightLights+0x2ca>
            }

        } else {

            /* Turn off flight lights */
            HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8002028:	2200      	movs	r2, #0
 800202a:	2104      	movs	r1, #4
 800202c:	4815      	ldr	r0, [pc, #84]	@ (8002084 <FlightController_FlightLights+0x2f8>)
 800202e:	f003 fbdf 	bl	80057f0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8002032:	2200      	movs	r2, #0
 8002034:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002038:	4812      	ldr	r0, [pc, #72]	@ (8002084 <FlightController_FlightLights+0x2f8>)
 800203a:	f003 fbd9 	bl	80057f0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 800203e:	2200      	movs	r2, #0
 8002040:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002044:	480f      	ldr	r0, [pc, #60]	@ (8002084 <FlightController_FlightLights+0x2f8>)
 8002046:	f003 fbd3 	bl	80057f0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 800204a:	2200      	movs	r2, #0
 800204c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002050:	480d      	ldr	r0, [pc, #52]	@ (8002088 <FlightController_FlightLights+0x2fc>)
 8002052:	f003 fbcd 	bl	80057f0 <HAL_GPIO_WritePin>
        }

        /* Set task time delay */
        vTaskDelay(xDelay);
 8002056:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002058:	f00c f86c 	bl	800e134 <vTaskDelay>
        if (500 <= FSA8S_channelValues[9]) {
 800205c:	e6f9      	b.n	8001e52 <FlightController_FlightLights+0xc6>
 800205e:	bf00      	nop
 8002060:	080135cc 	.word	0x080135cc
 8002064:	080135d4 	.word	0x080135d4
 8002068:	080135dc 	.word	0x080135dc
 800206c:	080135e4 	.word	0x080135e4
 8002070:	080135ec 	.word	0x080135ec
 8002074:	20000370 	.word	0x20000370
 8002078:	cccccccd 	.word	0xcccccccd
 800207c:	20000004 	.word	0x20000004
 8002080:	20000362 	.word	0x20000362
 8002084:	40020400 	.word	0x40020400
 8002088:	40020800 	.word	0x40020800

0800208c <Timer1_Callback>:
    *previousIterm_pitchRate = 0;
    *previousIterm_yawRate = 0;
}

/* --- Private callback function implementation ------------------------------------------------ */
void Timer1_Callback(TimerHandle_t xTimer) {
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

    /* Get no. of times this timer has expired */
    uint32_t ulCount = (uint32_t)pvTimerGetTimerID(xTimer);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f00d f9a1 	bl	800f3dc <pvTimerGetTimerID>
 800209a:	4603      	mov	r3, r0
 800209c:	60fb      	str	r3, [r7, #12]

    /* Get timer period */
    uint32_t xTimerPeriod = xTimerGetPeriod(xTimer);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f00c fed8 	bl	800ee54 <xTimerGetPeriod>
 80020a4:	60b8      	str	r0, [r7, #8]

    /* Increment the count */
    ulCount++;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	3301      	adds	r3, #1
 80020aa:	60fb      	str	r3, [r7, #12]

    if (ulCount >= (pdMS_TO_TICKS(Timer1_AutoReloadTime) / xTimerPeriod)) {
 80020ac:	4b26      	ldr	r3, [pc, #152]	@ (8002148 <Timer1_Callback+0xbc>)
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	461a      	mov	r2, r3
 80020b2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80020b6:	fb02 f303 	mul.w	r3, r2, r3
 80020ba:	4a24      	ldr	r2, [pc, #144]	@ (800214c <Timer1_Callback+0xc0>)
 80020bc:	fba2 2303 	umull	r2, r3, r2, r3
 80020c0:	099a      	lsrs	r2, r3, #6
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d333      	bcc.n	8002136 <Timer1_Callback+0xaa>
        /* Check if On/Off Button is still pressed after 3 seconds */
        if (!HAL_GPIO_ReadPin(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, PW_ON_OFF_DRIVER_INPUT_Pin)) {
 80020ce:	2120      	movs	r1, #32
 80020d0:	481f      	ldr	r0, [pc, #124]	@ (8002150 <Timer1_Callback+0xc4>)
 80020d2:	f003 fb75 	bl	80057c0 <HAL_GPIO_ReadPin>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d124      	bne.n	8002126 <Timer1_Callback+0x9a>

            if (!FlightController_running) {
 80020dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002154 <Timer1_Callback+0xc8>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	f083 0301 	eor.w	r3, r3, #1
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d008      	beq.n	80020fc <Timer1_Callback+0x70>
                /* Flight controller was off */
                /* User turned it on */
                /* Turn on flight controller */
                HAL_GPIO_WritePin(PW_ON_OFF_DRIVER_OUTPUT_GPIO_Port, PW_ON_OFF_DRIVER_OUTPUT_Pin, 1);
 80020ea:	2201      	movs	r2, #1
 80020ec:	2110      	movs	r1, #16
 80020ee:	4818      	ldr	r0, [pc, #96]	@ (8002150 <Timer1_Callback+0xc4>)
 80020f0:	f003 fb7e 	bl	80057f0 <HAL_GPIO_WritePin>

                FlightController_running = true;
 80020f4:	4b17      	ldr	r3, [pc, #92]	@ (8002154 <Timer1_Callback+0xc8>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	701a      	strb	r2, [r3, #0]
 80020fa:	e014      	b.n	8002126 <Timer1_Callback+0x9a>
            } else {
                /* Flight controller was on */
                /* User turned it off */
                /* Suspend HeartbeatLight task and turn on-board LED on */
                vTaskSuspend(FlightController_HeartbeatLight_Handle);
 80020fc:	4b16      	ldr	r3, [pc, #88]	@ (8002158 <Timer1_Callback+0xcc>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f00c f84d 	bl	800e1a0 <vTaskSuspend>
                HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8002106:	2200      	movs	r2, #0
 8002108:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800210c:	4813      	ldr	r0, [pc, #76]	@ (800215c <Timer1_Callback+0xd0>)
 800210e:	f003 fb6f 	bl	80057f0 <HAL_GPIO_WritePin>

                FlightController_running = false;
 8002112:	4b10      	ldr	r3, [pc, #64]	@ (8002154 <Timer1_Callback+0xc8>)
 8002114:	2200      	movs	r2, #0
 8002116:	701a      	strb	r2, [r3, #0]

                /* Turn off flight controller */
                HAL_GPIO_WritePin(PW_ON_OFF_DRIVER_OUTPUT_GPIO_Port, PW_ON_OFF_DRIVER_OUTPUT_Pin, 0);
 8002118:	2200      	movs	r2, #0
 800211a:	2110      	movs	r1, #16
 800211c:	480c      	ldr	r0, [pc, #48]	@ (8002150 <Timer1_Callback+0xc4>)
 800211e:	f003 fb67 	bl	80057f0 <HAL_GPIO_WritePin>

                /* Next line will execute only if USB power is connected */
                /* Reset micro-controller */
                HAL_NVIC_SystemReset();
 8002122:	f002 ffd2 	bl	80050ca <HAL_NVIC_SystemReset>
            }
        }

        /* Reset timer count */
        vTimerSetTimerID(xTimer, (void *)0);
 8002126:	2100      	movs	r1, #0
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f00d f978 	bl	800f41e <vTimerSetTimerID>

        /* Reset running flag */
        Timer1_running = false;
 800212e:	4b0c      	ldr	r3, [pc, #48]	@ (8002160 <Timer1_Callback+0xd4>)
 8002130:	2200      	movs	r2, #0
 8002132:	701a      	strb	r2, [r3, #0]
    } else {
        /* Store the incremented count back into the timer's ID */
        vTimerSetTimerID(xTimer, (void *)ulCount);
    }
}
 8002134:	e004      	b.n	8002140 <Timer1_Callback+0xb4>
        vTimerSetTimerID(xTimer, (void *)ulCount);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4619      	mov	r1, r3
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f00d f96f 	bl	800f41e <vTimerSetTimerID>
}
 8002140:	bf00      	nop
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20000000 	.word	0x20000000
 800214c:	10624dd3 	.word	0x10624dd3
 8002150:	40020400 	.word	0x40020400
 8002154:	20000324 	.word	0x20000324
 8002158:	20000348 	.word	0x20000348
 800215c:	40020800 	.word	0x40020800
 8002160:	20000360 	.word	0x20000360

08002164 <Timer2_Callback>:

void Timer2_Callback(TimerHandle_t xTimer) {
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]

    /* Get no. of times this timer has expired */
    uint32_t ulCount = (uint32_t)pvTimerGetTimerID(xTimer);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f00d f935 	bl	800f3dc <pvTimerGetTimerID>
 8002172:	4603      	mov	r3, r0
 8002174:	60fb      	str	r3, [r7, #12]

    /* Get timer period */
    uint32_t xTimerPeriod = xTimerGetPeriod(xTimer);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f00c fe6c 	bl	800ee54 <xTimerGetPeriod>
 800217c:	60b8      	str	r0, [r7, #8]

    /* Increment the count */
    ulCount++;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	3301      	adds	r3, #1
 8002182:	60fb      	str	r3, [r7, #12]

    if (ulCount >= (pdMS_TO_TICKS(Timer2_AutoReloadTime) / xTimerPeriod)) {
 8002184:	4b10      	ldr	r3, [pc, #64]	@ (80021c8 <Timer2_Callback+0x64>)
 8002186:	881b      	ldrh	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800218e:	fb02 f303 	mul.w	r3, r2, r3
 8002192:	4a0e      	ldr	r2, [pc, #56]	@ (80021cc <Timer2_Callback+0x68>)
 8002194:	fba2 2303 	umull	r2, r3, r2, r3
 8002198:	099a      	lsrs	r2, r3, #6
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d307      	bcc.n	80021b6 <Timer2_Callback+0x52>

        /* Set Timer2 flag to true */
        Timer2_flag = true;
 80021a6:	4b0a      	ldr	r3, [pc, #40]	@ (80021d0 <Timer2_Callback+0x6c>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	701a      	strb	r2, [r3, #0]

        /* Reset timer count */
        vTimerSetTimerID(xTimer, (void *)0);
 80021ac:	2100      	movs	r1, #0
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f00d f935 	bl	800f41e <vTimerSetTimerID>

    } else {
        /* Store the incremented count back into the timer's ID */
        vTimerSetTimerID(xTimer, (void *)ulCount);
    }
}
 80021b4:	e004      	b.n	80021c0 <Timer2_Callback+0x5c>
        vTimerSetTimerID(xTimer, (void *)ulCount);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	4619      	mov	r1, r3
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f00d f92f 	bl	800f41e <vTimerSetTimerID>
}
 80021c0:	bf00      	nop
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20000002 	.word	0x20000002
 80021cc:	10624dd3 	.word	0x10624dd3
 80021d0:	20000361 	.word	0x20000361

080021d4 <Timer3_Callback>:

void Timer3_Callback(TimerHandle_t xTimer) {
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]

    /* Get no. of times this timer has expired */
    uint32_t ulCount = (uint32_t)pvTimerGetTimerID(xTimer);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f00d f8fd 	bl	800f3dc <pvTimerGetTimerID>
 80021e2:	4603      	mov	r3, r0
 80021e4:	60fb      	str	r3, [r7, #12]

    /* Get timer period */
    uint32_t xTimerPeriod = xTimerGetPeriod(xTimer);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f00c fe34 	bl	800ee54 <xTimerGetPeriod>
 80021ec:	60b8      	str	r0, [r7, #8]

    /* Increment the count */
    ulCount++;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	3301      	adds	r3, #1
 80021f2:	60fb      	str	r3, [r7, #12]

    if (ulCount >= (pdMS_TO_TICKS(Timer3_AutoReloadTime) / xTimerPeriod)) {
 80021f4:	4b10      	ldr	r3, [pc, #64]	@ (8002238 <Timer3_Callback+0x64>)
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	f242 7310 	movw	r3, #10000	@ 0x2710
 80021fe:	fb02 f303 	mul.w	r3, r2, r3
 8002202:	4a0e      	ldr	r2, [pc, #56]	@ (800223c <Timer3_Callback+0x68>)
 8002204:	fba2 2303 	umull	r2, r3, r2, r3
 8002208:	099a      	lsrs	r2, r3, #6
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	429a      	cmp	r2, r3
 8002214:	d307      	bcc.n	8002226 <Timer3_Callback+0x52>

        /* Set Timer3 flag to true */
        Timer3_flag = true;
 8002216:	4b0a      	ldr	r3, [pc, #40]	@ (8002240 <Timer3_Callback+0x6c>)
 8002218:	2201      	movs	r2, #1
 800221a:	701a      	strb	r2, [r3, #0]

        /* Reset timer count */
        vTimerSetTimerID(xTimer, (void *)0);
 800221c:	2100      	movs	r1, #0
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f00d f8fd 	bl	800f41e <vTimerSetTimerID>

    } else {
        /* Store the incremented count back into the timer's ID */
        vTimerSetTimerID(xTimer, (void *)ulCount);
    }
}
 8002224:	e004      	b.n	8002230 <Timer3_Callback+0x5c>
        vTimerSetTimerID(xTimer, (void *)ulCount);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	4619      	mov	r1, r3
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f00d f8f7 	bl	800f41e <vTimerSetTimerID>
}
 8002230:	bf00      	nop
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20000004 	.word	0x20000004
 800223c:	10624dd3 	.word	0x10624dd3
 8002240:	20000362 	.word	0x20000362

08002244 <Timer4_Callback>:

void Timer4_Callback(TimerHandle_t xTimer) {
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]

    /* Get no. of times this timer has expired */
    uint32_t ulCount = (uint32_t)pvTimerGetTimerID(xTimer);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f00d f8c5 	bl	800f3dc <pvTimerGetTimerID>
 8002252:	4603      	mov	r3, r0
 8002254:	60fb      	str	r3, [r7, #12]

    /* Get timer period */
    uint32_t xTimerPeriod = xTimerGetPeriod(xTimer);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f00c fdfc 	bl	800ee54 <xTimerGetPeriod>
 800225c:	60b8      	str	r0, [r7, #8]

    /* Increment the count */
    ulCount++;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	3301      	adds	r3, #1
 8002262:	60fb      	str	r3, [r7, #12]

    if (ulCount >= (pdMS_TO_TICKS(Timer4_AutoReloadTime) / xTimerPeriod)) {
 8002264:	4b10      	ldr	r3, [pc, #64]	@ (80022a8 <Timer4_Callback+0x64>)
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	461a      	mov	r2, r3
 800226a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800226e:	fb02 f303 	mul.w	r3, r2, r3
 8002272:	4a0e      	ldr	r2, [pc, #56]	@ (80022ac <Timer4_Callback+0x68>)
 8002274:	fba2 2303 	umull	r2, r3, r2, r3
 8002278:	099a      	lsrs	r2, r3, #6
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	429a      	cmp	r2, r3
 8002284:	d307      	bcc.n	8002296 <Timer4_Callback+0x52>

        /* Set Timer3 flag to true */
        Timer4_flag = true;
 8002286:	4b0a      	ldr	r3, [pc, #40]	@ (80022b0 <Timer4_Callback+0x6c>)
 8002288:	2201      	movs	r2, #1
 800228a:	701a      	strb	r2, [r3, #0]

        /* Reset timer count */
        vTimerSetTimerID(xTimer, (void *)0);
 800228c:	2100      	movs	r1, #0
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f00d f8c5 	bl	800f41e <vTimerSetTimerID>

    } else {
        /* Store the incremented count back into the timer's ID */
        vTimerSetTimerID(xTimer, (void *)ulCount);
    }
}
 8002294:	e004      	b.n	80022a0 <Timer4_Callback+0x5c>
        vTimerSetTimerID(xTimer, (void *)ulCount);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4619      	mov	r1, r3
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f00d f8bf 	bl	800f41e <vTimerSetTimerID>
}
 80022a0:	bf00      	nop
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20000006 	.word	0x20000006
 80022ac:	10624dd3 	.word	0x10624dd3
 80022b0:	20000363 	.word	0x20000363

080022b4 <FlightController_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
void FlightController_Init(void) {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0

    /* Create start-up tasks and timers */
    FreeRTOS_CreateStartUpTasks();
 80022b8:	f7fe fe66 	bl	8000f88 <FreeRTOS_CreateStartUpTasks>
}
 80022bc:	bf00      	nop
 80022be:	bd80      	pop	{r7, pc}

080022c0 <vApplicationGetIdleTaskMemory>:

/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t ** ppxIdleTaskTCBBuffer, StackType_t ** ppxIdleTaskStackBuffer, uint32_t * pulIdleTaskStackSize) {
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4a07      	ldr	r2, [pc, #28]	@ (80022ec <vApplicationGetIdleTaskMemory+0x2c>)
 80022d0:	601a      	str	r2, [r3, #0]
    *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	4a06      	ldr	r2, [pc, #24]	@ (80022f0 <vApplicationGetIdleTaskMemory+0x30>)
 80022d6:	601a      	str	r2, [r3, #0]
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2280      	movs	r2, #128	@ 0x80
 80022dc:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 80022de:	bf00      	nop
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	200003ac 	.word	0x200003ac
 80022f0:	20000428 	.word	0x20000428

080022f4 <vApplicationGetTimerTaskMemory>:

/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory(StaticTask_t ** ppxTimerTaskTCBBuffer, StackType_t ** ppxTimerTaskStackBuffer, uint32_t * pulTimerTaskStackSize) {
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4a07      	ldr	r2, [pc, #28]	@ (8002320 <vApplicationGetTimerTaskMemory+0x2c>)
 8002304:	601a      	str	r2, [r3, #0]
    *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	4a06      	ldr	r2, [pc, #24]	@ (8002324 <vApplicationGetTimerTaskMemory+0x30>)
 800230a:	601a      	str	r2, [r3, #0]
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002312:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 8002314:	bf00      	nop
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	20000628 	.word	0x20000628
 8002324:	200006a4 	.word	0x200006a4

08002328 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002328:	b5b0      	push	{r4, r5, r7, lr}
 800232a:	b088      	sub	sp, #32
 800232c:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800232e:	f002 f96d 	bl	800460c <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8002332:	f000 f827 	bl	8002384 <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8002336:	f000 f9cd 	bl	80026d4 <MX_GPIO_Init>
    MX_DMA_Init();
 800233a:	f000 f9b1 	bl	80026a0 <MX_DMA_Init>
    MX_USART2_UART_Init();
 800233e:	f000 f985 	bl	800264c <MX_USART2_UART_Init>
    MX_I2C1_Init();
 8002342:	f000 f8db 	bl	80024fc <MX_I2C1_Init>
    MX_TIM3_Init();
 8002346:	f000 f907 	bl	8002558 <MX_TIM3_Init>
    MX_ADC1_Init();
 800234a:	f000 f885 	bl	8002458 <MX_ADC1_Init>
    /* USER CODE BEGIN 2 */

    // Initialize Flight Controller
    FlightController_Init();
 800234e:	f7ff ffb1 	bl	80022b4 <FlightController_Init>
    /* add queues, ... */
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* definition and creation of defaultTask */
    osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002352:	4b0a      	ldr	r3, [pc, #40]	@ (800237c <main+0x54>)
 8002354:	1d3c      	adds	r4, r7, #4
 8002356:	461d      	mov	r5, r3
 8002358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800235a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800235c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002360:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002364:	1d3b      	adds	r3, r7, #4
 8002366:	2100      	movs	r1, #0
 8002368:	4618      	mov	r0, r3
 800236a:	f00a fec2 	bl	800d0f2 <osThreadCreate>
 800236e:	4603      	mov	r3, r0
 8002370:	4a03      	ldr	r2, [pc, #12]	@ (8002380 <main+0x58>)
 8002372:	6013      	str	r3, [r2, #0]
    /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
    /* USER CODE END RTOS_THREADS */

    /* Start scheduler */
    osKernelStart();
 8002374:	f00a feb6 	bl	800d0e4 <osKernelStart>
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    while (1) {
 8002378:	bf00      	nop
 800237a:	e7fd      	b.n	8002378 <main+0x50>
 800237c:	08013600 	.word	0x08013600
 8002380:	20000c2c 	.word	0x20000c2c

08002384 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002384:	b580      	push	{r7, lr}
 8002386:	b094      	sub	sp, #80	@ 0x50
 8002388:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800238a:	f107 0320 	add.w	r3, r7, #32
 800238e:	2230      	movs	r2, #48	@ 0x30
 8002390:	2100      	movs	r1, #0
 8002392:	4618      	mov	r0, r3
 8002394:	f00e fe09 	bl	8010faa <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002398:	f107 030c 	add.w	r3, r7, #12
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 80023a8:	2300      	movs	r3, #0
 80023aa:	60bb      	str	r3, [r7, #8]
 80023ac:	4b28      	ldr	r3, [pc, #160]	@ (8002450 <SystemClock_Config+0xcc>)
 80023ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b0:	4a27      	ldr	r2, [pc, #156]	@ (8002450 <SystemClock_Config+0xcc>)
 80023b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80023b8:	4b25      	ldr	r3, [pc, #148]	@ (8002450 <SystemClock_Config+0xcc>)
 80023ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023c0:	60bb      	str	r3, [r7, #8]
 80023c2:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80023c4:	2300      	movs	r3, #0
 80023c6:	607b      	str	r3, [r7, #4]
 80023c8:	4b22      	ldr	r3, [pc, #136]	@ (8002454 <SystemClock_Config+0xd0>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80023d0:	4a20      	ldr	r2, [pc, #128]	@ (8002454 <SystemClock_Config+0xd0>)
 80023d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023d6:	6013      	str	r3, [r2, #0]
 80023d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002454 <SystemClock_Config+0xd0>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023e0:	607b      	str	r3, [r7, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023e4:	2301      	movs	r3, #1
 80023e6:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023ec:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023ee:	2302      	movs	r3, #2
 80023f0:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80023f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 25;
 80023f8:	2319      	movs	r3, #25
 80023fa:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 144;
 80023fc:	2390      	movs	r3, #144	@ 0x90
 80023fe:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002400:	2302      	movs	r3, #2
 8002402:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 3;
 8002404:	2303      	movs	r3, #3
 8002406:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002408:	f107 0320 	add.w	r3, r7, #32
 800240c:	4618      	mov	r0, r3
 800240e:	f005 fc45 	bl	8007c9c <HAL_RCC_OscConfig>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <SystemClock_Config+0x98>
        Error_Handler();
 8002418:	f000 fa01 	bl	800281e <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800241c:	230f      	movs	r3, #15
 800241e:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002420:	2302      	movs	r3, #2
 8002422:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002428:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800242c:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002432:	f107 030c 	add.w	r3, r7, #12
 8002436:	2102      	movs	r1, #2
 8002438:	4618      	mov	r0, r3
 800243a:	f005 fea7 	bl	800818c <HAL_RCC_ClockConfig>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <SystemClock_Config+0xc4>
        Error_Handler();
 8002444:	f000 f9eb 	bl	800281e <Error_Handler>
    }
}
 8002448:	bf00      	nop
 800244a:	3750      	adds	r7, #80	@ 0x50
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40023800 	.word	0x40023800
 8002454:	40007000 	.word	0x40007000

08002458 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = {0};
 800245e:	463b      	mov	r3, r7
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]

    /* USER CODE END ADC1_Init 1 */

    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
     */
    hadc1.Instance = ADC1;
 800246a:	4b21      	ldr	r3, [pc, #132]	@ (80024f0 <MX_ADC1_Init+0x98>)
 800246c:	4a21      	ldr	r2, [pc, #132]	@ (80024f4 <MX_ADC1_Init+0x9c>)
 800246e:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002470:	4b1f      	ldr	r3, [pc, #124]	@ (80024f0 <MX_ADC1_Init+0x98>)
 8002472:	2200      	movs	r2, #0
 8002474:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002476:	4b1e      	ldr	r3, [pc, #120]	@ (80024f0 <MX_ADC1_Init+0x98>)
 8002478:	2200      	movs	r2, #0
 800247a:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = DISABLE;
 800247c:	4b1c      	ldr	r3, [pc, #112]	@ (80024f0 <MX_ADC1_Init+0x98>)
 800247e:	2200      	movs	r2, #0
 8002480:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = DISABLE;
 8002482:	4b1b      	ldr	r3, [pc, #108]	@ (80024f0 <MX_ADC1_Init+0x98>)
 8002484:	2200      	movs	r2, #0
 8002486:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002488:	4b19      	ldr	r3, [pc, #100]	@ (80024f0 <MX_ADC1_Init+0x98>)
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002490:	4b17      	ldr	r3, [pc, #92]	@ (80024f0 <MX_ADC1_Init+0x98>)
 8002492:	2200      	movs	r2, #0
 8002494:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002496:	4b16      	ldr	r3, [pc, #88]	@ (80024f0 <MX_ADC1_Init+0x98>)
 8002498:	4a17      	ldr	r2, [pc, #92]	@ (80024f8 <MX_ADC1_Init+0xa0>)
 800249a:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800249c:	4b14      	ldr	r3, [pc, #80]	@ (80024f0 <MX_ADC1_Init+0x98>)
 800249e:	2200      	movs	r2, #0
 80024a0:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 80024a2:	4b13      	ldr	r3, [pc, #76]	@ (80024f0 <MX_ADC1_Init+0x98>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 80024a8:	4b11      	ldr	r3, [pc, #68]	@ (80024f0 <MX_ADC1_Init+0x98>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80024b0:	4b0f      	ldr	r3, [pc, #60]	@ (80024f0 <MX_ADC1_Init+0x98>)
 80024b2:	2201      	movs	r2, #1
 80024b4:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80024b6:	480e      	ldr	r0, [pc, #56]	@ (80024f0 <MX_ADC1_Init+0x98>)
 80024b8:	f002 f93e 	bl	8004738 <HAL_ADC_Init>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_ADC1_Init+0x6e>
        Error_Handler();
 80024c2:	f000 f9ac 	bl	800281e <Error_Handler>
    }

    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
     */
    sConfig.Channel = ADC_CHANNEL_0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 80024ca:	2301      	movs	r3, #1
 80024cc:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80024ce:	2300      	movs	r3, #0
 80024d0:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80024d2:	463b      	mov	r3, r7
 80024d4:	4619      	mov	r1, r3
 80024d6:	4806      	ldr	r0, [pc, #24]	@ (80024f0 <MX_ADC1_Init+0x98>)
 80024d8:	f002 fabe 	bl	8004a58 <HAL_ADC_ConfigChannel>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_ADC1_Init+0x8e>
        Error_Handler();
 80024e2:	f000 f99c 	bl	800281e <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */
}
 80024e6:	bf00      	nop
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000aa4 	.word	0x20000aa4
 80024f4:	40012000 	.word	0x40012000
 80024f8:	0f000001 	.word	0x0f000001

080024fc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8002500:	4b12      	ldr	r3, [pc, #72]	@ (800254c <MX_I2C1_Init+0x50>)
 8002502:	4a13      	ldr	r2, [pc, #76]	@ (8002550 <MX_I2C1_Init+0x54>)
 8002504:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 8002506:	4b11      	ldr	r3, [pc, #68]	@ (800254c <MX_I2C1_Init+0x50>)
 8002508:	4a12      	ldr	r2, [pc, #72]	@ (8002554 <MX_I2C1_Init+0x58>)
 800250a:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800250c:	4b0f      	ldr	r3, [pc, #60]	@ (800254c <MX_I2C1_Init+0x50>)
 800250e:	2200      	movs	r2, #0
 8002510:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8002512:	4b0e      	ldr	r3, [pc, #56]	@ (800254c <MX_I2C1_Init+0x50>)
 8002514:	2200      	movs	r2, #0
 8002516:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002518:	4b0c      	ldr	r3, [pc, #48]	@ (800254c <MX_I2C1_Init+0x50>)
 800251a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800251e:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002520:	4b0a      	ldr	r3, [pc, #40]	@ (800254c <MX_I2C1_Init+0x50>)
 8002522:	2200      	movs	r2, #0
 8002524:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8002526:	4b09      	ldr	r3, [pc, #36]	@ (800254c <MX_I2C1_Init+0x50>)
 8002528:	2200      	movs	r2, #0
 800252a:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800252c:	4b07      	ldr	r3, [pc, #28]	@ (800254c <MX_I2C1_Init+0x50>)
 800252e:	2200      	movs	r2, #0
 8002530:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002532:	4b06      	ldr	r3, [pc, #24]	@ (800254c <MX_I2C1_Init+0x50>)
 8002534:	2200      	movs	r2, #0
 8002536:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002538:	4804      	ldr	r0, [pc, #16]	@ (800254c <MX_I2C1_Init+0x50>)
 800253a:	f003 f973 	bl	8005824 <HAL_I2C_Init>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_I2C1_Init+0x4c>
        Error_Handler();
 8002544:	f000 f96b 	bl	800281e <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */
}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20000aec 	.word	0x20000aec
 8002550:	40005400 	.word	0x40005400
 8002554:	000186a0 	.word	0x000186a0

08002558 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002558:	b580      	push	{r7, lr}
 800255a:	b08a      	sub	sp, #40	@ 0x28
 800255c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800255e:	f107 0320 	add.w	r3, r7, #32
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8002568:	1d3b      	adds	r3, r7, #4
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	605a      	str	r2, [r3, #4]
 8002570:	609a      	str	r2, [r3, #8]
 8002572:	60da      	str	r2, [r3, #12]
 8002574:	611a      	str	r2, [r3, #16]
 8002576:	615a      	str	r2, [r3, #20]
 8002578:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 800257a:	4b32      	ldr	r3, [pc, #200]	@ (8002644 <MX_TIM3_Init+0xec>)
 800257c:	4a32      	ldr	r2, [pc, #200]	@ (8002648 <MX_TIM3_Init+0xf0>)
 800257e:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 20;
 8002580:	4b30      	ldr	r3, [pc, #192]	@ (8002644 <MX_TIM3_Init+0xec>)
 8002582:	2214      	movs	r2, #20
 8002584:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002586:	4b2f      	ldr	r3, [pc, #188]	@ (8002644 <MX_TIM3_Init+0xec>)
 8002588:	2200      	movs	r2, #0
 800258a:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 65535;
 800258c:	4b2d      	ldr	r3, [pc, #180]	@ (8002644 <MX_TIM3_Init+0xec>)
 800258e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002592:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002594:	4b2b      	ldr	r3, [pc, #172]	@ (8002644 <MX_TIM3_Init+0xec>)
 8002596:	2200      	movs	r2, #0
 8002598:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800259a:	4b2a      	ldr	r3, [pc, #168]	@ (8002644 <MX_TIM3_Init+0xec>)
 800259c:	2200      	movs	r2, #0
 800259e:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80025a0:	4828      	ldr	r0, [pc, #160]	@ (8002644 <MX_TIM3_Init+0xec>)
 80025a2:	f005 ffd3 	bl	800854c <HAL_TIM_PWM_Init>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_TIM3_Init+0x58>
        Error_Handler();
 80025ac:	f000 f937 	bl	800281e <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025b0:	2300      	movs	r3, #0
 80025b2:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025b4:	2300      	movs	r3, #0
 80025b6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 80025b8:	f107 0320 	add.w	r3, r7, #32
 80025bc:	4619      	mov	r1, r3
 80025be:	4821      	ldr	r0, [pc, #132]	@ (8002644 <MX_TIM3_Init+0xec>)
 80025c0:	f006 fbb8 	bl	8008d34 <HAL_TIMEx_MasterConfigSynchronization>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <MX_TIM3_Init+0x76>
        Error_Handler();
 80025ca:	f000 f928 	bl	800281e <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025ce:	2360      	movs	r3, #96	@ 0x60
 80025d0:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 80025d2:	2300      	movs	r3, #0
 80025d4:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025d6:	2300      	movs	r3, #0
 80025d8:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80025de:	1d3b      	adds	r3, r7, #4
 80025e0:	2200      	movs	r2, #0
 80025e2:	4619      	mov	r1, r3
 80025e4:	4817      	ldr	r0, [pc, #92]	@ (8002644 <MX_TIM3_Init+0xec>)
 80025e6:	f006 f8b1 	bl	800874c <HAL_TIM_PWM_ConfigChannel>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <MX_TIM3_Init+0x9c>
        Error_Handler();
 80025f0:	f000 f915 	bl	800281e <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 80025f4:	1d3b      	adds	r3, r7, #4
 80025f6:	2204      	movs	r2, #4
 80025f8:	4619      	mov	r1, r3
 80025fa:	4812      	ldr	r0, [pc, #72]	@ (8002644 <MX_TIM3_Init+0xec>)
 80025fc:	f006 f8a6 	bl	800874c <HAL_TIM_PWM_ConfigChannel>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_TIM3_Init+0xb2>
        Error_Handler();
 8002606:	f000 f90a 	bl	800281e <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 800260a:	1d3b      	adds	r3, r7, #4
 800260c:	2208      	movs	r2, #8
 800260e:	4619      	mov	r1, r3
 8002610:	480c      	ldr	r0, [pc, #48]	@ (8002644 <MX_TIM3_Init+0xec>)
 8002612:	f006 f89b 	bl	800874c <HAL_TIM_PWM_ConfigChannel>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_TIM3_Init+0xc8>
        Error_Handler();
 800261c:	f000 f8ff 	bl	800281e <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 8002620:	1d3b      	adds	r3, r7, #4
 8002622:	220c      	movs	r2, #12
 8002624:	4619      	mov	r1, r3
 8002626:	4807      	ldr	r0, [pc, #28]	@ (8002644 <MX_TIM3_Init+0xec>)
 8002628:	f006 f890 	bl	800874c <HAL_TIM_PWM_ConfigChannel>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_TIM3_Init+0xde>
        Error_Handler();
 8002632:	f000 f8f4 	bl	800281e <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */
    HAL_TIM_MspPostInit(&htim3);
 8002636:	4803      	ldr	r0, [pc, #12]	@ (8002644 <MX_TIM3_Init+0xec>)
 8002638:	f000 f9d2 	bl	80029e0 <HAL_TIM_MspPostInit>
}
 800263c:	bf00      	nop
 800263e:	3728      	adds	r7, #40	@ 0x28
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20000b40 	.word	0x20000b40
 8002648:	40000400 	.word	0x40000400

0800264c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART2_Init 0 */
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */
    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8002650:	4b11      	ldr	r3, [pc, #68]	@ (8002698 <MX_USART2_UART_Init+0x4c>)
 8002652:	4a12      	ldr	r2, [pc, #72]	@ (800269c <MX_USART2_UART_Init+0x50>)
 8002654:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8002656:	4b10      	ldr	r3, [pc, #64]	@ (8002698 <MX_USART2_UART_Init+0x4c>)
 8002658:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800265c:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800265e:	4b0e      	ldr	r3, [pc, #56]	@ (8002698 <MX_USART2_UART_Init+0x4c>)
 8002660:	2200      	movs	r2, #0
 8002662:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8002664:	4b0c      	ldr	r3, [pc, #48]	@ (8002698 <MX_USART2_UART_Init+0x4c>)
 8002666:	2200      	movs	r2, #0
 8002668:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 800266a:	4b0b      	ldr	r3, [pc, #44]	@ (8002698 <MX_USART2_UART_Init+0x4c>)
 800266c:	2200      	movs	r2, #0
 800266e:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_RX;
 8002670:	4b09      	ldr	r3, [pc, #36]	@ (8002698 <MX_USART2_UART_Init+0x4c>)
 8002672:	2204      	movs	r2, #4
 8002674:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002676:	4b08      	ldr	r3, [pc, #32]	@ (8002698 <MX_USART2_UART_Init+0x4c>)
 8002678:	2200      	movs	r2, #0
 800267a:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800267c:	4b06      	ldr	r3, [pc, #24]	@ (8002698 <MX_USART2_UART_Init+0x4c>)
 800267e:	2200      	movs	r2, #0
 8002680:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002682:	4805      	ldr	r0, [pc, #20]	@ (8002698 <MX_USART2_UART_Init+0x4c>)
 8002684:	f006 fbc4 	bl	8008e10 <HAL_UART_Init>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_USART2_UART_Init+0x46>
        Error_Handler();
 800268e:	f000 f8c6 	bl	800281e <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */
    /* USER CODE END USART2_Init 2 */
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20000b88 	.word	0x20000b88
 800269c:	40004400 	.word	0x40004400

080026a0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	607b      	str	r3, [r7, #4]
 80026aa:	4b09      	ldr	r3, [pc, #36]	@ (80026d0 <MX_DMA_Init+0x30>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	4a08      	ldr	r2, [pc, #32]	@ (80026d0 <MX_DMA_Init+0x30>)
 80026b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80026b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b6:	4b06      	ldr	r3, [pc, #24]	@ (80026d0 <MX_DMA_Init+0x30>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026be:	607b      	str	r3, [r7, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800

080026d4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08a      	sub	sp, #40	@ 0x28
 80026d8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026da:	f107 0314 	add.w	r3, r7, #20
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]
 80026e4:	609a      	str	r2, [r3, #8]
 80026e6:	60da      	str	r2, [r3, #12]
 80026e8:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	4b42      	ldr	r3, [pc, #264]	@ (80027f8 <MX_GPIO_Init+0x124>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	4a41      	ldr	r2, [pc, #260]	@ (80027f8 <MX_GPIO_Init+0x124>)
 80026f4:	f043 0304 	orr.w	r3, r3, #4
 80026f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026fa:	4b3f      	ldr	r3, [pc, #252]	@ (80027f8 <MX_GPIO_Init+0x124>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fe:	f003 0304 	and.w	r3, r3, #4
 8002702:	613b      	str	r3, [r7, #16]
 8002704:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	4b3b      	ldr	r3, [pc, #236]	@ (80027f8 <MX_GPIO_Init+0x124>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270e:	4a3a      	ldr	r2, [pc, #232]	@ (80027f8 <MX_GPIO_Init+0x124>)
 8002710:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002714:	6313      	str	r3, [r2, #48]	@ 0x30
 8002716:	4b38      	ldr	r3, [pc, #224]	@ (80027f8 <MX_GPIO_Init+0x124>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	4b34      	ldr	r3, [pc, #208]	@ (80027f8 <MX_GPIO_Init+0x124>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272a:	4a33      	ldr	r2, [pc, #204]	@ (80027f8 <MX_GPIO_Init+0x124>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	6313      	str	r3, [r2, #48]	@ 0x30
 8002732:	4b31      	ldr	r3, [pc, #196]	@ (80027f8 <MX_GPIO_Init+0x124>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	60bb      	str	r3, [r7, #8]
 800273c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	607b      	str	r3, [r7, #4]
 8002742:	4b2d      	ldr	r3, [pc, #180]	@ (80027f8 <MX_GPIO_Init+0x124>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002746:	4a2c      	ldr	r2, [pc, #176]	@ (80027f8 <MX_GPIO_Init+0x124>)
 8002748:	f043 0302 	orr.w	r3, r3, #2
 800274c:	6313      	str	r3, [r2, #48]	@ 0x30
 800274e:	4b2a      	ldr	r3, [pc, #168]	@ (80027f8 <MX_GPIO_Init+0x124>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	607b      	str	r3, [r7, #4]
 8002758:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, LED_Pin | LED4_Pin, GPIO_PIN_RESET);
 800275a:	2200      	movs	r2, #0
 800275c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002760:	4826      	ldr	r0, [pc, #152]	@ (80027fc <MX_GPIO_Init+0x128>)
 8002762:	f003 f845 	bl	80057f0 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED3_Pin | PW_ON_OFF_DRIVER_OUTPUT_Pin | LED2_Pin, GPIO_PIN_RESET);
 8002766:	2200      	movs	r2, #0
 8002768:	f241 1114 	movw	r1, #4372	@ 0x1114
 800276c:	4824      	ldr	r0, [pc, #144]	@ (8002800 <MX_GPIO_Init+0x12c>)
 800276e:	f003 f83f 	bl	80057f0 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002772:	2200      	movs	r2, #0
 8002774:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002778:	4822      	ldr	r0, [pc, #136]	@ (8002804 <MX_GPIO_Init+0x130>)
 800277a:	f003 f839 	bl	80057f0 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : LED_Pin LED4_Pin */
    GPIO_InitStruct.Pin = LED_Pin | LED4_Pin;
 800277e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002784:	2301      	movs	r3, #1
 8002786:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002788:	2300      	movs	r3, #0
 800278a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278c:	2300      	movs	r3, #0
 800278e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002790:	f107 0314 	add.w	r3, r7, #20
 8002794:	4619      	mov	r1, r3
 8002796:	4819      	ldr	r0, [pc, #100]	@ (80027fc <MX_GPIO_Init+0x128>)
 8002798:	f002 fe8e 	bl	80054b8 <HAL_GPIO_Init>

    /*Configure GPIO pins : LED1_Pin LED3_Pin PW_ON_OFF_DRIVER_OUTPUT_Pin LED2_Pin */
    GPIO_InitStruct.Pin = LED1_Pin | LED3_Pin | PW_ON_OFF_DRIVER_OUTPUT_Pin | LED2_Pin;
 800279c:	f241 1314 	movw	r3, #4372	@ 0x1114
 80027a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027a2:	2301      	movs	r3, #1
 80027a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027aa:	2300      	movs	r3, #0
 80027ac:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ae:	f107 0314 	add.w	r3, r7, #20
 80027b2:	4619      	mov	r1, r3
 80027b4:	4812      	ldr	r0, [pc, #72]	@ (8002800 <MX_GPIO_Init+0x12c>)
 80027b6:	f002 fe7f 	bl	80054b8 <HAL_GPIO_Init>

    /*Configure GPIO pin : BUZZER_Pin */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 80027ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027c0:	2301      	movs	r3, #1
 80027c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c4:	2300      	movs	r3, #0
 80027c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c8:	2300      	movs	r3, #0
 80027ca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80027cc:	f107 0314 	add.w	r3, r7, #20
 80027d0:	4619      	mov	r1, r3
 80027d2:	480c      	ldr	r0, [pc, #48]	@ (8002804 <MX_GPIO_Init+0x130>)
 80027d4:	f002 fe70 	bl	80054b8 <HAL_GPIO_Init>

    /*Configure GPIO pin : PW_ON_OFF_DRIVER_INPUT_Pin */
    GPIO_InitStruct.Pin = PW_ON_OFF_DRIVER_INPUT_Pin;
 80027d8:	2320      	movs	r3, #32
 80027da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027dc:	2300      	movs	r3, #0
 80027de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PW_ON_OFF_DRIVER_INPUT_GPIO_Port, &GPIO_InitStruct);
 80027e4:	f107 0314 	add.w	r3, r7, #20
 80027e8:	4619      	mov	r1, r3
 80027ea:	4805      	ldr	r0, [pc, #20]	@ (8002800 <MX_GPIO_Init+0x12c>)
 80027ec:	f002 fe64 	bl	80054b8 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 80027f0:	bf00      	nop
 80027f2:	3728      	adds	r7, #40	@ 0x28
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40020800 	.word	0x40020800
 8002800:	40020400 	.word	0x40020400
 8002804:	40020000 	.word	0x40020000

08002808 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument) {
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
    /* init code for USB_DEVICE */
    MX_USB_DEVICE_Init();
 8002810:	f00d f8a0 	bl	800f954 <MX_USB_DEVICE_Init>
    /* USER CODE BEGIN 5 */
    /* Infinite loop */
    for (;;) {
        osDelay(1000);
 8002814:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002818:	f00a fcb7 	bl	800d18a <osDelay>
 800281c:	e7fa      	b.n	8002814 <StartDefaultTask+0xc>

0800281e <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800281e:	b480      	push	{r7}
 8002820:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* USER CODE END Error_Handler_Debug */
}
 8002822:	bf00      	nop
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_MspInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef * htim);
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	607b      	str	r3, [r7, #4]
 8002836:	4b12      	ldr	r3, [pc, #72]	@ (8002880 <HAL_MspInit+0x54>)
 8002838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283a:	4a11      	ldr	r2, [pc, #68]	@ (8002880 <HAL_MspInit+0x54>)
 800283c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002840:	6453      	str	r3, [r2, #68]	@ 0x44
 8002842:	4b0f      	ldr	r3, [pc, #60]	@ (8002880 <HAL_MspInit+0x54>)
 8002844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002846:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800284a:	607b      	str	r3, [r7, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	603b      	str	r3, [r7, #0]
 8002852:	4b0b      	ldr	r3, [pc, #44]	@ (8002880 <HAL_MspInit+0x54>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002856:	4a0a      	ldr	r2, [pc, #40]	@ (8002880 <HAL_MspInit+0x54>)
 8002858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800285c:	6413      	str	r3, [r2, #64]	@ 0x40
 800285e:	4b08      	ldr	r3, [pc, #32]	@ (8002880 <HAL_MspInit+0x54>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	683b      	ldr	r3, [r7, #0]

    /* System interrupt init*/
    /* PendSV_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800286a:	2200      	movs	r2, #0
 800286c:	210f      	movs	r1, #15
 800286e:	f06f 0001 	mvn.w	r0, #1
 8002872:	f002 fc00 	bl	8005076 <HAL_NVIC_SetPriority>

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 8002876:	bf00      	nop
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40023800 	.word	0x40023800

08002884 <HAL_ADC_MspInit>:
 * @brief ADC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hadc: ADC handle pointer
 * @retval None
 */
void HAL_ADC_MspInit(ADC_HandleTypeDef * hadc) {
 8002884:	b580      	push	{r7, lr}
 8002886:	b08a      	sub	sp, #40	@ 0x28
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800288c:	f107 0314 	add.w	r3, r7, #20
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	605a      	str	r2, [r3, #4]
 8002896:	609a      	str	r2, [r3, #8]
 8002898:	60da      	str	r2, [r3, #12]
 800289a:	611a      	str	r2, [r3, #16]
    if (hadc->Instance == ADC1) {
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a17      	ldr	r2, [pc, #92]	@ (8002900 <HAL_ADC_MspInit+0x7c>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d127      	bne.n	80028f6 <HAL_ADC_MspInit+0x72>
        /* USER CODE BEGIN ADC1_MspInit 0 */

        /* USER CODE END ADC1_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_ADC1_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	4b16      	ldr	r3, [pc, #88]	@ (8002904 <HAL_ADC_MspInit+0x80>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ae:	4a15      	ldr	r2, [pc, #84]	@ (8002904 <HAL_ADC_MspInit+0x80>)
 80028b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80028b6:	4b13      	ldr	r3, [pc, #76]	@ (8002904 <HAL_ADC_MspInit+0x80>)
 80028b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028be:	613b      	str	r3, [r7, #16]
 80028c0:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002904 <HAL_ADC_MspInit+0x80>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ca:	4a0e      	ldr	r2, [pc, #56]	@ (8002904 <HAL_ADC_MspInit+0x80>)
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002904 <HAL_ADC_MspInit+0x80>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	68fb      	ldr	r3, [r7, #12]
        /**ADC1 GPIO Configuration
        PA0-WKUP     ------> ADC1_IN0
        */
        GPIO_InitStruct.Pin = GPIO_PIN_0;
 80028de:	2301      	movs	r3, #1
 80028e0:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028e2:	2303      	movs	r3, #3
 80028e4:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ea:	f107 0314 	add.w	r3, r7, #20
 80028ee:	4619      	mov	r1, r3
 80028f0:	4805      	ldr	r0, [pc, #20]	@ (8002908 <HAL_ADC_MspInit+0x84>)
 80028f2:	f002 fde1 	bl	80054b8 <HAL_GPIO_Init>

        /* USER CODE BEGIN ADC1_MspInit 1 */

        /* USER CODE END ADC1_MspInit 1 */
    }
}
 80028f6:	bf00      	nop
 80028f8:	3728      	adds	r7, #40	@ 0x28
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40012000 	.word	0x40012000
 8002904:	40023800 	.word	0x40023800
 8002908:	40020000 	.word	0x40020000

0800290c <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef * hi2c) {
 800290c:	b580      	push	{r7, lr}
 800290e:	b08a      	sub	sp, #40	@ 0x28
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002914:	f107 0314 	add.w	r3, r7, #20
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	60da      	str	r2, [r3, #12]
 8002922:	611a      	str	r2, [r3, #16]
    if (hi2c->Instance == I2C1) {
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a19      	ldr	r2, [pc, #100]	@ (8002990 <HAL_I2C_MspInit+0x84>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d12b      	bne.n	8002986 <HAL_I2C_MspInit+0x7a>
        /* USER CODE BEGIN I2C1_MspInit 0 */

        /* USER CODE END I2C1_MspInit 0 */

        __HAL_RCC_GPIOB_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	4b18      	ldr	r3, [pc, #96]	@ (8002994 <HAL_I2C_MspInit+0x88>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002936:	4a17      	ldr	r2, [pc, #92]	@ (8002994 <HAL_I2C_MspInit+0x88>)
 8002938:	f043 0302 	orr.w	r3, r3, #2
 800293c:	6313      	str	r3, [r2, #48]	@ 0x30
 800293e:	4b15      	ldr	r3, [pc, #84]	@ (8002994 <HAL_I2C_MspInit+0x88>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	693b      	ldr	r3, [r7, #16]
        /**I2C1 GPIO Configuration
        PB6     ------> I2C1_SCL
        PB7     ------> I2C1_SDA
        */
        GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 800294a:	23c0      	movs	r3, #192	@ 0xc0
 800294c:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800294e:	2312      	movs	r3, #18
 8002950:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002956:	2303      	movs	r3, #3
 8002958:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800295a:	2304      	movs	r3, #4
 800295c:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800295e:	f107 0314 	add.w	r3, r7, #20
 8002962:	4619      	mov	r1, r3
 8002964:	480c      	ldr	r0, [pc, #48]	@ (8002998 <HAL_I2C_MspInit+0x8c>)
 8002966:	f002 fda7 	bl	80054b8 <HAL_GPIO_Init>

        /* Peripheral clock enable */
        __HAL_RCC_I2C1_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	4b09      	ldr	r3, [pc, #36]	@ (8002994 <HAL_I2C_MspInit+0x88>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002972:	4a08      	ldr	r2, [pc, #32]	@ (8002994 <HAL_I2C_MspInit+0x88>)
 8002974:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002978:	6413      	str	r3, [r2, #64]	@ 0x40
 800297a:	4b06      	ldr	r3, [pc, #24]	@ (8002994 <HAL_I2C_MspInit+0x88>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]
        /* USER CODE BEGIN I2C1_MspInit 1 */

        /* USER CODE END I2C1_MspInit 1 */
    }
}
 8002986:	bf00      	nop
 8002988:	3728      	adds	r7, #40	@ 0x28
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40005400 	.word	0x40005400
 8002994:	40023800 	.word	0x40023800
 8002998:	40020400 	.word	0x40020400

0800299c <HAL_TIM_PWM_MspInit>:
 * @brief TIM_PWM MSP Initialization
 * This function configures the hardware resources used in this example
 * @param htim_pwm: TIM_PWM handle pointer
 * @retval None
 */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef * htim_pwm) {
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
    if (htim_pwm->Instance == TIM3) {
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a0b      	ldr	r2, [pc, #44]	@ (80029d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d10d      	bne.n	80029ca <HAL_TIM_PWM_MspInit+0x2e>
        /* USER CODE BEGIN TIM3_MspInit 0 */

        /* USER CODE END TIM3_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_TIM3_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	4b0a      	ldr	r3, [pc, #40]	@ (80029dc <HAL_TIM_PWM_MspInit+0x40>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b6:	4a09      	ldr	r2, [pc, #36]	@ (80029dc <HAL_TIM_PWM_MspInit+0x40>)
 80029b8:	f043 0302 	orr.w	r3, r3, #2
 80029bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80029be:	4b07      	ldr	r3, [pc, #28]	@ (80029dc <HAL_TIM_PWM_MspInit+0x40>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]
        /* USER CODE BEGIN TIM3_MspInit 1 */

        /* USER CODE END TIM3_MspInit 1 */
    }
}
 80029ca:	bf00      	nop
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40000400 	.word	0x40000400
 80029dc:	40023800 	.word	0x40023800

080029e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef * htim) {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08a      	sub	sp, #40	@ 0x28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e8:	f107 0314 	add.w	r3, r7, #20
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	611a      	str	r2, [r3, #16]
    if (htim->Instance == TIM3) {
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a21      	ldr	r2, [pc, #132]	@ (8002a84 <HAL_TIM_MspPostInit+0xa4>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d13b      	bne.n	8002a7a <HAL_TIM_MspPostInit+0x9a>
        /* USER CODE BEGIN TIM3_MspPostInit 0 */

        /* USER CODE END TIM3_MspPostInit 0 */

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	4b20      	ldr	r3, [pc, #128]	@ (8002a88 <HAL_TIM_MspPostInit+0xa8>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0a:	4a1f      	ldr	r2, [pc, #124]	@ (8002a88 <HAL_TIM_MspPostInit+0xa8>)
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a12:	4b1d      	ldr	r3, [pc, #116]	@ (8002a88 <HAL_TIM_MspPostInit+0xa8>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	693b      	ldr	r3, [r7, #16]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	4b19      	ldr	r3, [pc, #100]	@ (8002a88 <HAL_TIM_MspPostInit+0xa8>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a26:	4a18      	ldr	r2, [pc, #96]	@ (8002a88 <HAL_TIM_MspPostInit+0xa8>)
 8002a28:	f043 0302 	orr.w	r3, r3, #2
 8002a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a2e:	4b16      	ldr	r3, [pc, #88]	@ (8002a88 <HAL_TIM_MspPostInit+0xa8>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
        PA6     ------> TIM3_CH1
        PA7     ------> TIM3_CH2
        PB0     ------> TIM3_CH3
        PB1     ------> TIM3_CH4
        */
        GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8002a3a:	23c0      	movs	r3, #192	@ 0xc0
 8002a3c:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a46:	2300      	movs	r3, #0
 8002a48:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a4e:	f107 0314 	add.w	r3, r7, #20
 8002a52:	4619      	mov	r1, r3
 8002a54:	480d      	ldr	r0, [pc, #52]	@ (8002a8c <HAL_TIM_MspPostInit+0xac>)
 8002a56:	f002 fd2f 	bl	80054b8 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a66:	2300      	movs	r3, #0
 8002a68:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a6e:	f107 0314 	add.w	r3, r7, #20
 8002a72:	4619      	mov	r1, r3
 8002a74:	4806      	ldr	r0, [pc, #24]	@ (8002a90 <HAL_TIM_MspPostInit+0xb0>)
 8002a76:	f002 fd1f 	bl	80054b8 <HAL_GPIO_Init>

        /* USER CODE BEGIN TIM3_MspPostInit 1 */

        /* USER CODE END TIM3_MspPostInit 1 */
    }
}
 8002a7a:	bf00      	nop
 8002a7c:	3728      	adds	r7, #40	@ 0x28
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40000400 	.word	0x40000400
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40020000 	.word	0x40020000
 8002a90:	40020400 	.word	0x40020400

08002a94 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef * huart) {
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08a      	sub	sp, #40	@ 0x28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a9c:	f107 0314 	add.w	r3, r7, #20
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	60da      	str	r2, [r3, #12]
 8002aaa:	611a      	str	r2, [r3, #16]
    if (huart->Instance == USART2) {
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a31      	ldr	r2, [pc, #196]	@ (8002b78 <HAL_UART_MspInit+0xe4>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d15b      	bne.n	8002b6e <HAL_UART_MspInit+0xda>
        /* USER CODE BEGIN USART2_MspInit 0 */

        /* USER CODE END USART2_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_USART2_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	613b      	str	r3, [r7, #16]
 8002aba:	4b30      	ldr	r3, [pc, #192]	@ (8002b7c <HAL_UART_MspInit+0xe8>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	4a2f      	ldr	r2, [pc, #188]	@ (8002b7c <HAL_UART_MspInit+0xe8>)
 8002ac0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ac6:	4b2d      	ldr	r3, [pc, #180]	@ (8002b7c <HAL_UART_MspInit+0xe8>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ace:	613b      	str	r3, [r7, #16]
 8002ad0:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	4b29      	ldr	r3, [pc, #164]	@ (8002b7c <HAL_UART_MspInit+0xe8>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ada:	4a28      	ldr	r2, [pc, #160]	@ (8002b7c <HAL_UART_MspInit+0xe8>)
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ae2:	4b26      	ldr	r3, [pc, #152]	@ (8002b7c <HAL_UART_MspInit+0xe8>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]
        /**USART2 GPIO Configuration
        PA2     ------> USART2_TX
        PA3     ------> USART2_RX
        */
        GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8002aee:	230c      	movs	r3, #12
 8002af0:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af2:	2302      	movs	r3, #2
 8002af4:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002afa:	2303      	movs	r3, #3
 8002afc:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002afe:	2307      	movs	r3, #7
 8002b00:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b02:	f107 0314 	add.w	r3, r7, #20
 8002b06:	4619      	mov	r1, r3
 8002b08:	481d      	ldr	r0, [pc, #116]	@ (8002b80 <HAL_UART_MspInit+0xec>)
 8002b0a:	f002 fcd5 	bl	80054b8 <HAL_GPIO_Init>

        /* USART2 DMA Init */
        /* USART2_RX Init */
        hdma_usart2_rx.Instance = DMA1_Stream5;
 8002b0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002b84 <HAL_UART_MspInit+0xf0>)
 8002b10:	4a1d      	ldr	r2, [pc, #116]	@ (8002b88 <HAL_UART_MspInit+0xf4>)
 8002b12:	601a      	str	r2, [r3, #0]
        hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002b14:	4b1b      	ldr	r3, [pc, #108]	@ (8002b84 <HAL_UART_MspInit+0xf0>)
 8002b16:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002b1a:	605a      	str	r2, [r3, #4]
        hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b1c:	4b19      	ldr	r3, [pc, #100]	@ (8002b84 <HAL_UART_MspInit+0xf0>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	609a      	str	r2, [r3, #8]
        hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b22:	4b18      	ldr	r3, [pc, #96]	@ (8002b84 <HAL_UART_MspInit+0xf0>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	60da      	str	r2, [r3, #12]
        hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b28:	4b16      	ldr	r3, [pc, #88]	@ (8002b84 <HAL_UART_MspInit+0xf0>)
 8002b2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b2e:	611a      	str	r2, [r3, #16]
        hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b30:	4b14      	ldr	r3, [pc, #80]	@ (8002b84 <HAL_UART_MspInit+0xf0>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	615a      	str	r2, [r3, #20]
        hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b36:	4b13      	ldr	r3, [pc, #76]	@ (8002b84 <HAL_UART_MspInit+0xf0>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	619a      	str	r2, [r3, #24]
        hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002b3c:	4b11      	ldr	r3, [pc, #68]	@ (8002b84 <HAL_UART_MspInit+0xf0>)
 8002b3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b42:	61da      	str	r2, [r3, #28]
        hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002b44:	4b0f      	ldr	r3, [pc, #60]	@ (8002b84 <HAL_UART_MspInit+0xf0>)
 8002b46:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002b4a:	621a      	str	r2, [r3, #32]
        hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002b84 <HAL_UART_MspInit+0xf0>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	625a      	str	r2, [r3, #36]	@ 0x24
        if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 8002b52:	480c      	ldr	r0, [pc, #48]	@ (8002b84 <HAL_UART_MspInit+0xf0>)
 8002b54:	f002 faca 	bl	80050ec <HAL_DMA_Init>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_UART_MspInit+0xce>
            Error_Handler();
 8002b5e:	f7ff fe5e 	bl	800281e <Error_Handler>
        }

        __HAL_LINKDMA(huart, hdmarx, hdma_usart2_rx);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a07      	ldr	r2, [pc, #28]	@ (8002b84 <HAL_UART_MspInit+0xf0>)
 8002b66:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b68:	4a06      	ldr	r2, [pc, #24]	@ (8002b84 <HAL_UART_MspInit+0xf0>)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* USER CODE BEGIN USART2_MspInit 1 */

        /* USER CODE END USART2_MspInit 1 */
    }
}
 8002b6e:	bf00      	nop
 8002b70:	3728      	adds	r7, #40	@ 0x28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40004400 	.word	0x40004400
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	40020000 	.word	0x40020000
 8002b84:	20000bcc 	.word	0x20000bcc
 8002b88:	40026088 	.word	0x40026088

08002b8c <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8002b90:	bf00      	nop
 8002b92:	e7fd      	b.n	8002b90 <NMI_Handler+0x4>

08002b94 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1) {
 8002b98:	bf00      	nop
 8002b9a:	e7fd      	b.n	8002b98 <HardFault_Handler+0x4>

08002b9c <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1) {
 8002ba0:	bf00      	nop
 8002ba2:	e7fd      	b.n	8002ba0 <MemManage_Handler+0x4>

08002ba4 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1) {
 8002ba8:	bf00      	nop
 8002baa:	e7fd      	b.n	8002ba8 <BusFault_Handler+0x4>

08002bac <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1) {
 8002bb0:	bf00      	nop
 8002bb2:	e7fd      	b.n	8002bb0 <UsageFault_Handler+0x4>

08002bb4 <DebugMon_Handler>:
}

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 8002bc6:	f001 fd73 	bl	80046b0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1)
    if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
#endif /* INCLUDE_xTaskGetSchedulerState */
        xPortSysTickHandler();
 8002bca:	f00c fe0d 	bl	800f7e8 <xPortSysTickHandler>
    }
#endif /* INCLUDE_xTaskGetSchedulerState */
       /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <OTG_FS_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles USB On The Go FS global interrupt.
 */
void OTG_FS_IRQHandler(void) {
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN OTG_FS_IRQn 0 */

    /* USER CODE END OTG_FS_IRQn 0 */
    HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002bd8:	4802      	ldr	r0, [pc, #8]	@ (8002be4 <OTG_FS_IRQHandler+0x10>)
 8002bda:	f003 ff32 	bl	8006a42 <HAL_PCD_IRQHandler>
    /* USER CODE BEGIN OTG_FS_IRQn 1 */

    /* USER CODE END OTG_FS_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	200015c8 	.word	0x200015c8

08002be8 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
    return 1;
 8002bec:	2301      	movs	r3, #1
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <_kill>:

int _kill(int pid, int sig) {
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
    (void)pid;
    (void)sig;
    errno = EINVAL;
 8002c02:	f00e fa43 	bl	801108c <__errno>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2216      	movs	r2, #22
 8002c0a:	601a      	str	r2, [r3, #0]
    return -1;
 8002c0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <_exit>:

void _exit(int status) {
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
    _kill(status, -1);
 8002c20:	f04f 31ff 	mov.w	r1, #4294967295
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff ffe7 	bl	8002bf8 <_kill>
    while (1) {
 8002c2a:	bf00      	nop
 8002c2c:	e7fd      	b.n	8002c2a <_exit+0x12>

08002c2e <_read>:
    } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char * ptr, int len) {
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b086      	sub	sp, #24
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	60f8      	str	r0, [r7, #12]
 8002c36:	60b9      	str	r1, [r7, #8]
 8002c38:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	e00a      	b.n	8002c56 <_read+0x28>
        *ptr++ = __io_getchar();
 8002c40:	f3af 8000 	nop.w
 8002c44:	4601      	mov	r1, r0
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	1c5a      	adds	r2, r3, #1
 8002c4a:	60ba      	str	r2, [r7, #8]
 8002c4c:	b2ca      	uxtb	r2, r1
 8002c4e:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	3301      	adds	r3, #1
 8002c54:	617b      	str	r3, [r7, #20]
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	dbf0      	blt.n	8002c40 <_read+0x12>
    }

    return len;
 8002c5e:	687b      	ldr	r3, [r7, #4]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <_write>:

__attribute__((weak)) int _write(int file, char * ptr, int len) {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	e009      	b.n	8002c8e <_write+0x26>
        __io_putchar(*ptr++);
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	60ba      	str	r2, [r7, #8]
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f3af 8000 	nop.w
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	617b      	str	r3, [r7, #20]
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	dbf1      	blt.n	8002c7a <_write+0x12>
    }
    return len;
 8002c96:	687b      	ldr	r3, [r7, #4]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <_close>:

int _close(int file) {
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
    (void)file;
    return -1;
 8002ca8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <_fstat>:

int _fstat(int file, struct stat * st) {
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
    (void)file;
    st->st_mode = S_IFCHR;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002cc8:	605a      	str	r2, [r3, #4]
    return 0;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <_isatty>:

int _isatty(int file) {
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
    (void)file;
    return 1;
 8002ce0:	2301      	movs	r3, #1
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002cee:	b480      	push	{r7}
 8002cf0:	b085      	sub	sp, #20
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	60f8      	str	r0, [r7, #12]
 8002cf6:	60b9      	str	r1, [r7, #8]
 8002cf8:	607a      	str	r2, [r7, #4]
    (void)file;
    (void)ptr;
    (void)dir;
    return 0;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d10:	4a14      	ldr	r2, [pc, #80]	@ (8002d64 <_sbrk+0x5c>)
 8002d12:	4b15      	ldr	r3, [pc, #84]	@ (8002d68 <_sbrk+0x60>)
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 8002d1c:	4b13      	ldr	r3, [pc, #76]	@ (8002d6c <_sbrk+0x64>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d102      	bne.n	8002d2a <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 8002d24:	4b11      	ldr	r3, [pc, #68]	@ (8002d6c <_sbrk+0x64>)
 8002d26:	4a12      	ldr	r2, [pc, #72]	@ (8002d70 <_sbrk+0x68>)
 8002d28:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 8002d2a:	4b10      	ldr	r3, [pc, #64]	@ (8002d6c <_sbrk+0x64>)
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4413      	add	r3, r2
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d207      	bcs.n	8002d48 <_sbrk+0x40>
        errno = ENOMEM;
 8002d38:	f00e f9a8 	bl	801108c <__errno>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	220c      	movs	r2, #12
 8002d40:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 8002d42:	f04f 33ff 	mov.w	r3, #4294967295
 8002d46:	e009      	b.n	8002d5c <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8002d48:	4b08      	ldr	r3, [pc, #32]	@ (8002d6c <_sbrk+0x64>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 8002d4e:	4b07      	ldr	r3, [pc, #28]	@ (8002d6c <_sbrk+0x64>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4413      	add	r3, r2
 8002d56:	4a05      	ldr	r2, [pc, #20]	@ (8002d6c <_sbrk+0x64>)
 8002d58:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	20010000 	.word	0x20010000
 8002d68:	00000400 	.word	0x00000400
 8002d6c:	20000c30 	.word	0x20000c30
 8002d70:	20001e40 	.word	0x20001e40

08002d74 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8002d78:	4b06      	ldr	r3, [pc, #24]	@ (8002d94 <SystemInit+0x20>)
 8002d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d7e:	4a05      	ldr	r2, [pc, #20]	@ (8002d94 <SystemInit+0x20>)
 8002d80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 8002d88:	bf00      	nop
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	e000ed00 	.word	0xe000ed00

08002d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002d98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002dd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d9c:	480d      	ldr	r0, [pc, #52]	@ (8002dd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d9e:	490e      	ldr	r1, [pc, #56]	@ (8002dd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002da0:	4a0e      	ldr	r2, [pc, #56]	@ (8002ddc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002da4:	e002      	b.n	8002dac <LoopCopyDataInit>

08002da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002daa:	3304      	adds	r3, #4

08002dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002db0:	d3f9      	bcc.n	8002da6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002db2:	4a0b      	ldr	r2, [pc, #44]	@ (8002de0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002db4:	4c0b      	ldr	r4, [pc, #44]	@ (8002de4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002db8:	e001      	b.n	8002dbe <LoopFillZerobss>

08002dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dbc:	3204      	adds	r2, #4

08002dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dc0:	d3fb      	bcc.n	8002dba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002dc2:	f7ff ffd7 	bl	8002d74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dc6:	f00e f967 	bl	8011098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dca:	f7ff faad 	bl	8002328 <main>
  bx  lr
 8002dce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002dd0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dd8:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 8002ddc:	08013ad0 	.word	0x08013ad0
  ldr r2, =_sbss
 8002de0:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 8002de4:	20001e40 	.word	0x20001e40

08002de8 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002de8:	e7fe      	b.n	8002de8 <ADC_IRQHandler>

08002dea <PWM_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t PWM_Init(ESC_HandleTypeDef_t * hesc) {
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]

    /* Check first parameter */
    if (NULL == hesc) {
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <PWM_Init+0x12>
        return false;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	e02c      	b.n	8002e56 <PWM_Init+0x6c>
    }

    /* Start PWM signal generation */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_1)) {
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2100      	movs	r1, #0
 8002e02:	4618      	mov	r0, r3
 8002e04:	f005 fbf2 	bl	80085ec <HAL_TIM_PWM_Start>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <PWM_Init+0x28>
        /* END MODIFY 1 */
        return false;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	e021      	b.n	8002e56 <PWM_Init+0x6c>
    }
    /* BEGIN MODIFY 2 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_2)) {
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2104      	movs	r1, #4
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f005 fbe7 	bl	80085ec <HAL_TIM_PWM_Start>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <PWM_Init+0x3e>
        /* END MODIFY 2 */
        return false;
 8002e24:	2300      	movs	r3, #0
 8002e26:	e016      	b.n	8002e56 <PWM_Init+0x6c>
    }
    /* BEGIN MODIFY 3 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_3)) {
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2108      	movs	r1, #8
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f005 fbdc 	bl	80085ec <HAL_TIM_PWM_Start>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <PWM_Init+0x54>
        /* END MODIFY 3 */
        return false;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	e00b      	b.n	8002e56 <PWM_Init+0x6c>
    }
    /* BEGIN MODIFY 4 */
    if (HAL_OK != HAL_TIM_PWM_Start(hesc->htim, TIM_CHANNEL_4)) {
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	210c      	movs	r1, #12
 8002e44:	4618      	mov	r0, r3
 8002e46:	f005 fbd1 	bl	80085ec <HAL_TIM_PWM_Start>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <PWM_Init+0x6a>
        /* END MODIFY 4 */
        return false;
 8002e50:	2300      	movs	r3, #0
 8002e52:	e000      	b.n	8002e56 <PWM_Init+0x6c>
    }

    return true;
 8002e54:	2301      	movs	r3, #1
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <PWM_SetDutyCycle>:
    }

    return true;
}

bool_t PWM_SetDutyCycle(ESC_HandleTypeDef_t * hesc, uint8_t channel, uint32_t dutyCycle) {
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	607a      	str	r2, [r7, #4]
 8002e6c:	72fb      	strb	r3, [r7, #11]

    /* Check parameters */
    if (NULL == hesc) {
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <PWM_SetDutyCycle+0x18>
        return false;
 8002e74:	2300      	movs	r3, #0
 8002e76:	e02d      	b.n	8002ed4 <PWM_SetDutyCycle+0x74>
    }
    if (PWM_CHANNEL_1 != channel && PWM_CHANNEL_2 != channel && PWM_CHANNEL_3 != channel && PWM_CHANNEL_4 != channel) {
 8002e78:	7afb      	ldrb	r3, [r7, #11]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d00a      	beq.n	8002e94 <PWM_SetDutyCycle+0x34>
 8002e7e:	7afb      	ldrb	r3, [r7, #11]
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d007      	beq.n	8002e94 <PWM_SetDutyCycle+0x34>
 8002e84:	7afb      	ldrb	r3, [r7, #11]
 8002e86:	2b03      	cmp	r3, #3
 8002e88:	d004      	beq.n	8002e94 <PWM_SetDutyCycle+0x34>
 8002e8a:	7afb      	ldrb	r3, [r7, #11]
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	d001      	beq.n	8002e94 <PWM_SetDutyCycle+0x34>
        return false;
 8002e90:	2300      	movs	r3, #0
 8002e92:	e01f      	b.n	8002ed4 <PWM_SetDutyCycle+0x74>
    }

    /* Set duty cycle */
    if (PWM_CHANNEL_1 == channel) {
 8002e94:	7afb      	ldrb	r3, [r7, #11]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d104      	bne.n	8002ea4 <PWM_SetDutyCycle+0x44>
        /* BEGIN MODIFY 10 */
        TIM3->CCR1 = (uint16_t)dutyCycle;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ee0 <PWM_SetDutyCycle+0x80>)
 8002ea0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ea2:	e016      	b.n	8002ed2 <PWM_SetDutyCycle+0x72>
        /* END MODIFY 10 */
    } else if (PWM_CHANNEL_2 == channel) {
 8002ea4:	7afb      	ldrb	r3, [r7, #11]
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d104      	bne.n	8002eb4 <PWM_SetDutyCycle+0x54>
        /* BEGIN MODIFY 11 */
        TIM3->CCR2 = (uint16_t)dutyCycle;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee0 <PWM_SetDutyCycle+0x80>)
 8002eb0:	639a      	str	r2, [r3, #56]	@ 0x38
 8002eb2:	e00e      	b.n	8002ed2 <PWM_SetDutyCycle+0x72>
        /* END MODIFY 11 */
    } else if (PWM_CHANNEL_3 == channel) {
 8002eb4:	7afb      	ldrb	r3, [r7, #11]
 8002eb6:	2b03      	cmp	r3, #3
 8002eb8:	d104      	bne.n	8002ec4 <PWM_SetDutyCycle+0x64>
        /* BEGIN MODIFY 12 */
        TIM3->CCR3 = (uint16_t)dutyCycle;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	4b08      	ldr	r3, [pc, #32]	@ (8002ee0 <PWM_SetDutyCycle+0x80>)
 8002ec0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002ec2:	e006      	b.n	8002ed2 <PWM_SetDutyCycle+0x72>
        /* END MODIFY 12 */
    } else if (PWM_CHANNEL_4 == channel) {
 8002ec4:	7afb      	ldrb	r3, [r7, #11]
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d103      	bne.n	8002ed2 <PWM_SetDutyCycle+0x72>
        /* BEGIN MODIFY 13 */
        TIM3->CCR4 = (uint16_t)dutyCycle;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	4b04      	ldr	r3, [pc, #16]	@ (8002ee0 <PWM_SetDutyCycle+0x80>)
 8002ed0:	641a      	str	r2, [r3, #64]	@ 0x40
        /* END MODIFY 13 */
    }

    return true;
 8002ed2:	2301      	movs	r3, #1
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3714      	adds	r7, #20
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	40000400 	.word	0x40000400
 8002ee4:	00000000 	.word	0x00000000

08002ee8 <ESC_CalculatePWMDutyCycle>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t ESC_CalculatePWMDutyCycle(float speed, uint32_t * pwmValue) {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	ed87 0a01 	vstr	s0, [r7, #4]
 8002ef2:	6038      	str	r0, [r7, #0]

    /* Check parameters */
    if (0 > speed || 100 < speed) {
 8002ef4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ef8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f00:	d408      	bmi.n	8002f14 <ESC_CalculatePWMDutyCycle+0x2c>
 8002f02:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f06:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002f70 <ESC_CalculatePWMDutyCycle+0x88>
 8002f0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f12:	dd01      	ble.n	8002f18 <ESC_CalculatePWMDutyCycle+0x30>
        return false;
 8002f14:	2300      	movs	r3, #0
 8002f16:	e021      	b.n	8002f5c <ESC_CalculatePWMDutyCycle+0x74>
    }

    /* Calculate PWM value */
    *pwmValue = (uint32_t)((MAX_ESC_SPEED - MIN_ESC_SPEED) * (float)(speed / 100) + MIN_ESC_SPEED);
 8002f18:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f1c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002f70 <ESC_CalculatePWMDutyCycle+0x88>
 8002f20:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002f24:	ee16 0a90 	vmov	r0, s13
 8002f28:	f7fd fb16 	bl	8000558 <__aeabi_f2d>
 8002f2c:	a30e      	add	r3, pc, #56	@ (adr r3, 8002f68 <ESC_CalculatePWMDutyCycle+0x80>)
 8002f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f32:	f7fd fb69 	bl	8000608 <__aeabi_dmul>
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	a30a      	add	r3, pc, #40	@ (adr r3, 8002f68 <ESC_CalculatePWMDutyCycle+0x80>)
 8002f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f44:	f7fd f9aa 	bl	800029c <__adddf3>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4610      	mov	r0, r2
 8002f4e:	4619      	mov	r1, r3
 8002f50:	f7fd fe32 	bl	8000bb8 <__aeabi_d2uiz>
 8002f54:	4602      	mov	r2, r0
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	601a      	str	r2, [r3, #0]

    return true;
 8002f5a:	2301      	movs	r3, #1
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	f3af 8000 	nop.w
 8002f68:	00000000 	.word	0x00000000
 8002f6c:	40a99980 	.word	0x40a99980
 8002f70:	42c80000 	.word	0x42c80000

08002f74 <ESC_AutoCalibrate>:

static bool_t ESC_AutoCalibrate(ESC_HandleTypeDef_t * hesc) {
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]

    /* Check parameters */
    if (NULL == hesc) {
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <ESC_AutoCalibrate+0x12>
        return false;
 8002f82:	2300      	movs	r3, #0
 8002f84:	e080      	b.n	8003088 <ESC_AutoCalibrate+0x114>
#ifdef ESC_USE_LOGGING
    LOG((uint8_t *)"Auto-calibrating ESCs...\r\n\n", LOG_INFORMATION);
#endif

    /* Set ESC to maximum throttle */
    if (false == PWM_SetDutyCycle(hesc, hesc->esc1, MAX_ESC_SPEED)) {
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	791b      	ldrb	r3, [r3, #4]
 8002f8a:	f641 1299 	movw	r2, #6553	@ 0x1999
 8002f8e:	4619      	mov	r1, r3
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff ff65 	bl	8002e60 <PWM_SetDutyCycle>
 8002f96:	4603      	mov	r3, r0
 8002f98:	f083 0301 	eor.w	r3, r3, #1
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <ESC_AutoCalibrate+0x32>
        return false;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e070      	b.n	8003088 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc2, MAX_ESC_SPEED)) {
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	795b      	ldrb	r3, [r3, #5]
 8002faa:	f641 1299 	movw	r2, #6553	@ 0x1999
 8002fae:	4619      	mov	r1, r3
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7ff ff55 	bl	8002e60 <PWM_SetDutyCycle>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	f083 0301 	eor.w	r3, r3, #1
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <ESC_AutoCalibrate+0x52>
        return false;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	e060      	b.n	8003088 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc3, MAX_ESC_SPEED)) {
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	799b      	ldrb	r3, [r3, #6]
 8002fca:	f641 1299 	movw	r2, #6553	@ 0x1999
 8002fce:	4619      	mov	r1, r3
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff ff45 	bl	8002e60 <PWM_SetDutyCycle>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f083 0301 	eor.w	r3, r3, #1
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <ESC_AutoCalibrate+0x72>
        return false;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	e050      	b.n	8003088 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc4, MAX_ESC_SPEED)) {
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	79db      	ldrb	r3, [r3, #7]
 8002fea:	f641 1299 	movw	r2, #6553	@ 0x1999
 8002fee:	4619      	mov	r1, r3
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff ff35 	bl	8002e60 <PWM_SetDutyCycle>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	f083 0301 	eor.w	r3, r3, #1
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <ESC_AutoCalibrate+0x92>
        return false;
 8003002:	2300      	movs	r3, #0
 8003004:	e040      	b.n	8003088 <ESC_AutoCalibrate+0x114>
    }

    /* Set ESC to minimum throttle */
    if (false == PWM_SetDutyCycle(hesc, hesc->esc1, MIN_ESC_SPEED)) {
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	791b      	ldrb	r3, [r3, #4]
 800300a:	f640 42cc 	movw	r2, #3276	@ 0xccc
 800300e:	4619      	mov	r1, r3
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7ff ff25 	bl	8002e60 <PWM_SetDutyCycle>
 8003016:	4603      	mov	r3, r0
 8003018:	f083 0301 	eor.w	r3, r3, #1
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <ESC_AutoCalibrate+0xb2>
        return false;
 8003022:	2300      	movs	r3, #0
 8003024:	e030      	b.n	8003088 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc2, MIN_ESC_SPEED)) {
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	795b      	ldrb	r3, [r3, #5]
 800302a:	f640 42cc 	movw	r2, #3276	@ 0xccc
 800302e:	4619      	mov	r1, r3
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff ff15 	bl	8002e60 <PWM_SetDutyCycle>
 8003036:	4603      	mov	r3, r0
 8003038:	f083 0301 	eor.w	r3, r3, #1
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <ESC_AutoCalibrate+0xd2>
        return false;
 8003042:	2300      	movs	r3, #0
 8003044:	e020      	b.n	8003088 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc3, MIN_ESC_SPEED)) {
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	799b      	ldrb	r3, [r3, #6]
 800304a:	f640 42cc 	movw	r2, #3276	@ 0xccc
 800304e:	4619      	mov	r1, r3
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7ff ff05 	bl	8002e60 <PWM_SetDutyCycle>
 8003056:	4603      	mov	r3, r0
 8003058:	f083 0301 	eor.w	r3, r3, #1
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <ESC_AutoCalibrate+0xf2>
        return false;
 8003062:	2300      	movs	r3, #0
 8003064:	e010      	b.n	8003088 <ESC_AutoCalibrate+0x114>
    }
    if (false == PWM_SetDutyCycle(hesc, hesc->esc4, MIN_ESC_SPEED)) {
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	79db      	ldrb	r3, [r3, #7]
 800306a:	f640 42cc 	movw	r2, #3276	@ 0xccc
 800306e:	4619      	mov	r1, r3
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f7ff fef5 	bl	8002e60 <PWM_SetDutyCycle>
 8003076:	4603      	mov	r3, r0
 8003078:	f083 0301 	eor.w	r3, r3, #1
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <ESC_AutoCalibrate+0x112>
        return false;
 8003082:	2300      	movs	r3, #0
 8003084:	e000      	b.n	8003088 <ESC_AutoCalibrate+0x114>

#ifdef ESC_USE_LOGGING
    LOG((uint8_t *)"ESCs auto-calibrated.\r\n\n", LOG_INFORMATION);
#endif

    return true;
 8003086:	2301      	movs	r3, #1
}
 8003088:	4618      	mov	r0, r3
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <ESC_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
ESC_HandleTypeDef_t * ESC_Init(TIM_HandleTypeDef * htim) {
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]

    /* Check parameters */
    if (NULL == htim) {
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <ESC_Init+0x12>
        return NULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	e036      	b.n	8003110 <ESC_Init+0x80>
    LOG((uint8_t *)"Initializing ESCs...\r\n\n", LOG_INFORMATION);
#endif

    /* Allocate dynamic memory for the ESC_HandleTypeDef_t structure */
#ifdef USE_FREERTOS
    ESC_HandleTypeDef_t * hesc = pvPortMalloc(sizeof(ESC_HandleTypeDef_t));
 80030a2:	2008      	movs	r0, #8
 80030a4:	f00c fc32 	bl	800f90c <pvPortMalloc>
 80030a8:	60f8      	str	r0, [r7, #12]
#else
    ESC_HandleTypeDef_t * hesc = malloc(sizeof(ESC_HandleTypeDef_t));
#endif

    /* Initialize ESC_HandleTypeDef structure */
    if (hesc) {
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00f      	beq.n	80030d0 <ESC_Init+0x40>
        hesc->htim = htim;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	601a      	str	r2, [r3, #0]
        hesc->esc1 = PWM_CHANNEL_1;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2201      	movs	r2, #1
 80030ba:	711a      	strb	r2, [r3, #4]
        hesc->esc2 = PWM_CHANNEL_2;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2202      	movs	r2, #2
 80030c0:	715a      	strb	r2, [r3, #5]
        hesc->esc3 = PWM_CHANNEL_3;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2203      	movs	r2, #3
 80030c6:	719a      	strb	r2, [r3, #6]
        hesc->esc4 = PWM_CHANNEL_4;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2204      	movs	r2, #4
 80030cc:	71da      	strb	r2, [r3, #7]
 80030ce:	e002      	b.n	80030d6 <ESC_Init+0x46>
    } else {
        /* Dynamic memory allocation was not successful */
        /* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f00c fc2d 	bl	800f930 <vPortFree>
        free(hesc);
#endif
    }

    /* Start PWM signal generation */
    if (false == PWM_Init(hesc)) {
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f7ff fe87 	bl	8002dea <PWM_Init>
 80030dc:	4603      	mov	r3, r0
 80030de:	f083 0301 	eor.w	r3, r3, #1
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d004      	beq.n	80030f2 <ESC_Init+0x62>
        LOG((uint8_t *)"ESCs  couldn't be initialized.\r\n\n", LOG_ERROR);
#endif

/* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f00c fc21 	bl	800f930 <vPortFree>
#else
        free(hesc);
#endif

        return NULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	e00e      	b.n	8003110 <ESC_Init+0x80>
    }

    /* Calibrate ESC */
    if (false == ESC_AutoCalibrate(hesc)) {
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f7ff ff3e 	bl	8002f74 <ESC_AutoCalibrate>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f083 0301 	eor.w	r3, r3, #1
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d004      	beq.n	800310e <ESC_Init+0x7e>
        LOG((uint8_t *)"ESCs couldn't be calibrated.\r\n\n", LOG_ERROR);
#endif

/* Free up dynamic allocated memory */
#ifdef USE_FREERTOS
        vPortFree(hesc);
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f00c fc13 	bl	800f930 <vPortFree>
#else
        free(hesc);
#endif

        return NULL;
 800310a:	2300      	movs	r3, #0
 800310c:	e000      	b.n	8003110 <ESC_Init+0x80>

#ifdef ESC_USE_LOGGING
    LOG((uint8_t *)"ESCs initialized.\r\n\n", LOG_INFORMATION);
#endif

    return hesc;
 800310e:	68fb      	ldr	r3, [r7, #12]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <ESC_SetSpeed>:
#endif

    return true;
}

bool_t ESC_SetSpeed(ESC_HandleTypeDef_t * hesc, uint8_t channel, float speed) {
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	460b      	mov	r3, r1
 8003122:	ed87 0a01 	vstr	s0, [r7, #4]
 8003126:	72fb      	strb	r3, [r7, #11]

    uint32_t pwmValue;

    /* Check parameters */
    if (NULL == hesc->htim) {
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <ESC_SetSpeed+0x1c>
        return false;
 8003130:	2300      	movs	r3, #0
 8003132:	e03d      	b.n	80031b0 <ESC_SetSpeed+0x98>
    }
    if (PWM_CHANNEL_1 != channel && PWM_CHANNEL_2 != channel && PWM_CHANNEL_3 != channel && PWM_CHANNEL_4 != channel) {
 8003134:	7afb      	ldrb	r3, [r7, #11]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d00a      	beq.n	8003150 <ESC_SetSpeed+0x38>
 800313a:	7afb      	ldrb	r3, [r7, #11]
 800313c:	2b02      	cmp	r3, #2
 800313e:	d007      	beq.n	8003150 <ESC_SetSpeed+0x38>
 8003140:	7afb      	ldrb	r3, [r7, #11]
 8003142:	2b03      	cmp	r3, #3
 8003144:	d004      	beq.n	8003150 <ESC_SetSpeed+0x38>
 8003146:	7afb      	ldrb	r3, [r7, #11]
 8003148:	2b04      	cmp	r3, #4
 800314a:	d001      	beq.n	8003150 <ESC_SetSpeed+0x38>
        return false;
 800314c:	2300      	movs	r3, #0
 800314e:	e02f      	b.n	80031b0 <ESC_SetSpeed+0x98>
    }
    if (speed < 0 || speed > 100) {
 8003150:	edd7 7a01 	vldr	s15, [r7, #4]
 8003154:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800315c:	d408      	bmi.n	8003170 <ESC_SetSpeed+0x58>
 800315e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003162:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80031b8 <ESC_SetSpeed+0xa0>
 8003166:	eef4 7ac7 	vcmpe.f32	s15, s14
 800316a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800316e:	dd01      	ble.n	8003174 <ESC_SetSpeed+0x5c>
        return false;
 8003170:	2300      	movs	r3, #0
 8003172:	e01d      	b.n	80031b0 <ESC_SetSpeed+0x98>
    }

    /* Calculate PWM duty cycle */
    if (false == ESC_CalculatePWMDutyCycle(speed, &pwmValue)) {
 8003174:	f107 0314 	add.w	r3, r7, #20
 8003178:	4618      	mov	r0, r3
 800317a:	ed97 0a01 	vldr	s0, [r7, #4]
 800317e:	f7ff feb3 	bl	8002ee8 <ESC_CalculatePWMDutyCycle>
 8003182:	4603      	mov	r3, r0
 8003184:	f083 0301 	eor.w	r3, r3, #1
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <ESC_SetSpeed+0x7a>
        return false;
 800318e:	2300      	movs	r3, #0
 8003190:	e00e      	b.n	80031b0 <ESC_SetSpeed+0x98>
    }

    /* Set PWM duty cycle */
    if (false == PWM_SetDutyCycle(hesc, channel, pwmValue)) {
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	7afb      	ldrb	r3, [r7, #11]
 8003196:	4619      	mov	r1, r3
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f7ff fe61 	bl	8002e60 <PWM_SetDutyCycle>
 800319e:	4603      	mov	r3, r0
 80031a0:	f083 0301 	eor.w	r3, r3, #1
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <ESC_SetSpeed+0x96>
        return false;
 80031aa:	2300      	movs	r3, #0
 80031ac:	e000      	b.n	80031b0 <ESC_SetSpeed+0x98>
    };

    return true;
 80031ae:	2301      	movs	r3, #1
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	42c80000 	.word	0x42c80000

080031bc <IBUS_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t IBUS_Init(IBUS_HandleTypeDef_t * hibus) {
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hibus) {
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <IBUS_Init+0x12>
        return false;
 80031ca:	2300      	movs	r3, #0
 80031cc:	e00e      	b.n	80031ec <IBUS_Init+0x30>
    }

    /* Initialize DMA reception */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_UART_Receive_DMA(hibus->huart, hibus->buffer, hibus->bufferSize)) {
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6818      	ldr	r0, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6859      	ldr	r1, [r3, #4]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	7a1b      	ldrb	r3, [r3, #8]
 80031da:	461a      	mov	r2, r3
 80031dc:	f005 fe65 	bl	8008eaa <HAL_UART_Receive_DMA>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <IBUS_Init+0x2e>
        /* END MODIFY 1 */

        /* DMA initialization was unsuccessful */
        return false;
 80031e6:	2300      	movs	r3, #0
 80031e8:	e000      	b.n	80031ec <IBUS_Init+0x30>
    }

    /* iBus initialization was successful */
    return true;
 80031ea:	2301      	movs	r3, #1
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <FSA8S_CheckFirstBytes>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t FSA8S_CheckFirstBytes(IBUS_HandleTypeDef_t * hibus) {
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hibus) {
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <FSA8S_CheckFirstBytes+0x12>
        return false;
 8003202:	2300      	movs	r3, #0
 8003204:	e00d      	b.n	8003222 <FSA8S_CheckFirstBytes+0x2e>
    }

    /* Check first bytes*/
    if (IBUS_BUFFER_LENGTH == hibus->buffer[0] && IBUS_COMMAND == hibus->buffer[1]) {
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b20      	cmp	r3, #32
 800320e:	d107      	bne.n	8003220 <FSA8S_CheckFirstBytes+0x2c>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	3301      	adds	r3, #1
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b40      	cmp	r3, #64	@ 0x40
 800321a:	d101      	bne.n	8003220 <FSA8S_CheckFirstBytes+0x2c>
        /* First two bytes are correct */
        return true;
 800321c:	2301      	movs	r3, #1
 800321e:	e000      	b.n	8003222 <FSA8S_CheckFirstBytes+0x2e>
    } else {
        /* First two bytes are not correct */
        return false;
 8003220:	2300      	movs	r3, #0
    }
}
 8003222:	4618      	mov	r0, r3
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <FSA8S_Checksum>:

static bool_t FSA8S_Checksum(IBUS_HandleTypeDef_t * hibus) {
 800322e:	b480      	push	{r7}
 8003230:	b085      	sub	sp, #20
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]

    /* Declare variable for checksum value in data received */
    uint16_t sentChecksum;

    /* Define variable for checksum to calculate using the data received */
    uint16_t receivedChecksum = 0xFFFF;
 8003236:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800323a:	81fb      	strh	r3, [r7, #14]

    /* Check parameter */
    if (NULL == hibus) {
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <FSA8S_Checksum+0x18>
        return false;
 8003242:	2300      	movs	r3, #0
 8003244:	e02c      	b.n	80032a0 <FSA8S_Checksum+0x72>
    }

    /* Get received checksum value */
    sentChecksum = (hibus->buffer[hibus->bufferSize - 1] << 8) | (hibus->buffer[hibus->bufferSize - 2]);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	7a1b      	ldrb	r3, [r3, #8]
 800324e:	3b01      	subs	r3, #1
 8003250:	4413      	add	r3, r2
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	021b      	lsls	r3, r3, #8
 8003256:	b21a      	sxth	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6859      	ldr	r1, [r3, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	7a1b      	ldrb	r3, [r3, #8]
 8003260:	3b02      	subs	r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	b21b      	sxth	r3, r3
 8003268:	4313      	orrs	r3, r2
 800326a:	b21b      	sxth	r3, r3
 800326c:	817b      	strh	r3, [r7, #10]

    /* Calculate checksum */
    for (uint8_t i = 0; i < 30; i++) {
 800326e:	2300      	movs	r3, #0
 8003270:	737b      	strb	r3, [r7, #13]
 8003272:	e00b      	b.n	800328c <FSA8S_Checksum+0x5e>
        receivedChecksum -= hibus->buffer[i];
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	7b7b      	ldrb	r3, [r7, #13]
 800327a:	4413      	add	r3, r2
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	89fb      	ldrh	r3, [r7, #14]
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < 30; i++) {
 8003286:	7b7b      	ldrb	r3, [r7, #13]
 8003288:	3301      	adds	r3, #1
 800328a:	737b      	strb	r3, [r7, #13]
 800328c:	7b7b      	ldrb	r3, [r7, #13]
 800328e:	2b1d      	cmp	r3, #29
 8003290:	d9f0      	bls.n	8003274 <FSA8S_Checksum+0x46>
    }

    /* Compare received checksum value with calculated one */
    if (sentChecksum == receivedChecksum) {
 8003292:	897a      	ldrh	r2, [r7, #10]
 8003294:	89fb      	ldrh	r3, [r7, #14]
 8003296:	429a      	cmp	r2, r3
 8003298:	d101      	bne.n	800329e <FSA8S_Checksum+0x70>
        /* Received data is correct */
        return true;
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <FSA8S_Checksum+0x72>
    } else {
        /* Received data is corrupted */
        return false;
 800329e:	2300      	movs	r3, #0
    }
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <FSA8S_AmendData>:

static void FSA8S_AmendData(IBUS_HandleTypeDef_t * hibus) {
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]

    /* Declare variable for channel value */
    uint16_t channelValue;

    /* Check parameter */
    if (NULL != hibus) {
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d061      	beq.n	800337e <FSA8S_AmendData+0xd2>

        /* Amend data */
        for (uint8_t i = 2; i < (hibus->bufferSize - 2); i += 2) {
 80032ba:	2302      	movs	r3, #2
 80032bc:	737b      	strb	r3, [r7, #13]
 80032be:	e058      	b.n	8003372 <FSA8S_AmendData+0xc6>

            channelValue = IBUS_CHANNEL_VALUE_NULL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	81fb      	strh	r3, [r7, #14]

            /* Swap channel bytes */
            channelValue = ((hibus->buffer[i + 1] << 8) | (hibus->buffer[i])) - calibrationValues[(i - 2) / 2];
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	7b7b      	ldrb	r3, [r7, #13]
 80032ca:	3301      	adds	r3, #1
 80032cc:	4413      	add	r3, r2
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	021b      	lsls	r3, r3, #8
 80032d2:	b21a      	sxth	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6859      	ldr	r1, [r3, #4]
 80032d8:	7b7b      	ldrb	r3, [r7, #13]
 80032da:	440b      	add	r3, r1
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	b21b      	sxth	r3, r3
 80032e0:	4313      	orrs	r3, r2
 80032e2:	b21b      	sxth	r3, r3
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	7b7b      	ldrb	r3, [r7, #13]
 80032e8:	3b02      	subs	r3, #2
 80032ea:	0fd9      	lsrs	r1, r3, #31
 80032ec:	440b      	add	r3, r1
 80032ee:	105b      	asrs	r3, r3, #1
 80032f0:	4619      	mov	r1, r3
 80032f2:	4b26      	ldr	r3, [pc, #152]	@ (800338c <FSA8S_AmendData+0xe0>)
 80032f4:	5c5b      	ldrb	r3, [r3, r1]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	81fb      	strh	r3, [r7, #14]

            /* Map channel value from 0 to IBUS_CHANNEL_MAX_VALUE */
            if ((IBUS_CHANNEL_MIN_RAW_VALUE <= channelValue) && (IBUS_CHANNEL_MAX_RAW_VALUE >= channelValue)) {
 80032fa:	89fb      	ldrh	r3, [r7, #14]
 80032fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003300:	d308      	bcc.n	8003314 <FSA8S_AmendData+0x68>
 8003302:	89fb      	ldrh	r3, [r7, #14]
 8003304:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003308:	d804      	bhi.n	8003314 <FSA8S_AmendData+0x68>
                channelValue -= IBUS_CHANNEL_MIN_RAW_VALUE;
 800330a:	89fb      	ldrh	r3, [r7, #14]
 800330c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8003310:	81fb      	strh	r3, [r7, #14]
 8003312:	e001      	b.n	8003318 <FSA8S_AmendData+0x6c>
            } else {
                channelValue = IBUS_CHANNEL_VALUE_NULL;
 8003314:	2300      	movs	r3, #0
 8003316:	81fb      	strh	r3, [r7, #14]
            }

            /* Map channel value between minimum and maximum values and store it */
            hibus->data[(i - 2) / 2] = channelValue * ((float)(IBUS_CHANNEL_MAX_VALUE + (calibrationValues[(i - 2) / 2] * ((float)IBUS_CHANNEL_MAX_VALUE / IBUS_CHANNEL_MIN_RAW_VALUE))) / IBUS_CHANNEL_MIN_RAW_VALUE);
 8003318:	89fb      	ldrh	r3, [r7, #14]
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003322:	7b7b      	ldrb	r3, [r7, #13]
 8003324:	3b02      	subs	r3, #2
 8003326:	0fda      	lsrs	r2, r3, #31
 8003328:	4413      	add	r3, r2
 800332a:	105b      	asrs	r3, r3, #1
 800332c:	461a      	mov	r2, r3
 800332e:	4b17      	ldr	r3, [pc, #92]	@ (800338c <FSA8S_AmendData+0xe0>)
 8003330:	5c9b      	ldrb	r3, [r3, r2]
 8003332:	ee07 3a90 	vmov	s15, r3
 8003336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800333a:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8003390 <FSA8S_AmendData+0xe4>
 800333e:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8003342:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8003390 <FSA8S_AmendData+0xe4>
 8003346:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800334a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	7b7b      	ldrb	r3, [r7, #13]
 8003354:	3b02      	subs	r3, #2
 8003356:	0fd9      	lsrs	r1, r3, #31
 8003358:	440b      	add	r3, r1
 800335a:	105b      	asrs	r3, r3, #1
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	4413      	add	r3, r2
 8003360:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003364:	ee17 2a90 	vmov	r2, s15
 8003368:	b292      	uxth	r2, r2
 800336a:	801a      	strh	r2, [r3, #0]
        for (uint8_t i = 2; i < (hibus->bufferSize - 2); i += 2) {
 800336c:	7b7b      	ldrb	r3, [r7, #13]
 800336e:	3302      	adds	r3, #2
 8003370:	737b      	strb	r3, [r7, #13]
 8003372:	7b7a      	ldrb	r2, [r7, #13]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	7a1b      	ldrb	r3, [r3, #8]
 8003378:	3b02      	subs	r3, #2
 800337a:	429a      	cmp	r2, r3
 800337c:	dba0      	blt.n	80032c0 <FSA8S_AmendData+0x14>
        }
    }
}
 800337e:	bf00      	nop
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	20000010 	.word	0x20000010
 8003390:	447a0000 	.word	0x447a0000

08003394 <FSA8S_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
IBUS_HandleTypeDef_t * FSA8S_Init(UART_HandleTypeDef * huart) {
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]

    /* Define variable to track number of initializations */
    static uint8_t alreadyInitialized = false;

    /* Check parameter */
    if (NULL == huart) {
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <FSA8S_Init+0x12>
        return NULL;
 80033a2:	2300      	movs	r3, #0
 80033a4:	e04a      	b.n	800343c <FSA8S_Init+0xa8>
    }

    /* Check if driver was already initialized */
    if (alreadyInitialized) {
 80033a6:	4b27      	ldr	r3, [pc, #156]	@ (8003444 <FSA8S_Init+0xb0>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <FSA8S_Init+0x1e>
        return NULL;
 80033ae:	2300      	movs	r3, #0
 80033b0:	e044      	b.n	800343c <FSA8S_Init+0xa8>
    }

    /* Allocate dynamic memory for the IBUS_HandleTypeDef_t structure and for the buffer to receive
     * data */
#ifdef USE_FREERTOS
    IBUS_HandleTypeDef_t * hibus = (IBUS_HandleTypeDef_t *)pvPortMalloc(sizeof(IBUS_HandleTypeDef_t));
 80033b2:	2014      	movs	r0, #20
 80033b4:	f00c faaa 	bl	800f90c <pvPortMalloc>
 80033b8:	6178      	str	r0, [r7, #20]
    uint8_t * buffer = (uint8_t *)pvPortMalloc(sizeof(uint8_t) * IBUS_BUFFER_LENGTH);
 80033ba:	2020      	movs	r0, #32
 80033bc:	f00c faa6 	bl	800f90c <pvPortMalloc>
 80033c0:	6138      	str	r0, [r7, #16]
    uint16_t * data = (uint16_t *)pvPortMalloc(sizeof(uint16_t) * IBUS_CHANNELS);
 80033c2:	201c      	movs	r0, #28
 80033c4:	f00c faa2 	bl	800f90c <pvPortMalloc>
 80033c8:	60f8      	str	r0, [r7, #12]
    uint8_t * buffer = (uint8_t *)malloc(sizeof(uint8_t) * IBUS_BUFFER_LENGTH);
    uint16_t * data = (uint16_t *)malloc(sizeof(uint16_t) * IBUS_CHANNELS);
#endif

    /* Initialize iBus_HandleTypeDef structure */
    if (hibus) {
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00f      	beq.n	80033f0 <FSA8S_Init+0x5c>
        hibus->huart = huart;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	601a      	str	r2, [r3, #0]
        hibus->buffer = buffer;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	605a      	str	r2, [r3, #4]
        hibus->bufferSize = IBUS_BUFFER_LENGTH;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	2220      	movs	r2, #32
 80033e0:	721a      	strb	r2, [r3, #8]
        hibus->data = data;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	60da      	str	r2, [r3, #12]
        hibus->channels = IBUS_CHANNELS;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	220e      	movs	r2, #14
 80033ec:	741a      	strb	r2, [r3, #16]
 80033ee:	e00c      	b.n	800340a <FSA8S_Init+0x76>
    } else {
        /* Dynamic memory allocation was not successful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f00c fa9b 	bl	800f930 <vPortFree>
        vPortFree(hibus->data);
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	4618      	mov	r0, r3
 8003400:	f00c fa96 	bl	800f930 <vPortFree>
        vPortFree(hibus);
 8003404:	6978      	ldr	r0, [r7, #20]
 8003406:	f00c fa93 	bl	800f930 <vPortFree>
        free(hibus);
#endif
    }

    /* Initialize iBus communication */
    if (IBUS_Init(hibus)) {
 800340a:	6978      	ldr	r0, [r7, #20]
 800340c:	f7ff fed6 	bl	80031bc <IBUS_Init>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d004      	beq.n	8003420 <FSA8S_Init+0x8c>
        /* Initialization was successful */
        alreadyInitialized = true;
 8003416:	4b0b      	ldr	r3, [pc, #44]	@ (8003444 <FSA8S_Init+0xb0>)
 8003418:	2201      	movs	r2, #1
 800341a:	701a      	strb	r2, [r3, #0]
        return hibus;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	e00d      	b.n	800343c <FSA8S_Init+0xa8>
    } else {
        /* Initialization was unsuccessful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	4618      	mov	r0, r3
 8003426:	f00c fa83 	bl	800f930 <vPortFree>
        vPortFree(hibus->data);
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	4618      	mov	r0, r3
 8003430:	f00c fa7e 	bl	800f930 <vPortFree>
        vPortFree(hibus);
 8003434:	6978      	ldr	r0, [r7, #20]
 8003436:	f00c fa7b 	bl	800f930 <vPortFree>
#else
        /* Free up dynamic allocated memory */
        free(hibus->buffer);
        free(hibus);
#endif
        return NULL;
 800343a:	2300      	movs	r3, #0
    }
}
 800343c:	4618      	mov	r0, r3
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	20000c34 	.word	0x20000c34

08003448 <FSA8S_ReadChannel>:

uint16_t FSA8S_ReadChannel(IBUS_HandleTypeDef_t * hibus, FSA8S_CHANNEL_t channel) {
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	70fb      	strb	r3, [r7, #3]

    /* Check parameter */
    if (NULL == hibus) {
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <FSA8S_ReadChannel+0x16>
        return IBUS_CHANNEL_VALUE_NULL;
 800345a:	2300      	movs	r3, #0
 800345c:	e029      	b.n	80034b2 <FSA8S_ReadChannel+0x6a>
    }

    /* Check parameter */
    if (!(channel > 0 && channel <= IBUS_CHANNELS)) {
 800345e:	78fb      	ldrb	r3, [r7, #3]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d002      	beq.n	800346a <FSA8S_ReadChannel+0x22>
 8003464:	78fb      	ldrb	r3, [r7, #3]
 8003466:	2b0e      	cmp	r3, #14
 8003468:	d901      	bls.n	800346e <FSA8S_ReadChannel+0x26>

#ifdef FSA8S_USE_LOGGING
        LOG((uint8_t *)"FSA8S invalid channel to read.\r\n\n", LOG_ERROR);
#endif

        return IBUS_CHANNEL_VALUE_NULL;
 800346a:	2300      	movs	r3, #0
 800346c:	e021      	b.n	80034b2 <FSA8S_ReadChannel+0x6a>
    }

    /* Check if first two bytes are IBUS_LENGTH and IBUS_COMMAND */
    while (1) {
        while (!FSA8S_CheckFirstBytes(hibus)) {
 800346e:	bf00      	nop
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7ff febf 	bl	80031f4 <FSA8S_CheckFirstBytes>
 8003476:	4603      	mov	r3, r0
 8003478:	f083 0301 	eor.w	r3, r3, #1
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f6      	bne.n	8003470 <FSA8S_ReadChannel+0x28>
            /* Wait until a data frame with the right format is received */
        }

        /* Perform a checksum */
        if (!FSA8S_Checksum(hibus)) {
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7ff fed3 	bl	800322e <FSA8S_Checksum>
 8003488:	4603      	mov	r3, r0
 800348a:	f083 0301 	eor.w	r3, r3, #1
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <FSA8S_ReadChannel+0x50>
            /* Received data is corrupted */
            /* Wait another transaction and check first to bytes */
            continue;
 8003494:	bf00      	nop
        while (!FSA8S_CheckFirstBytes(hibus)) {
 8003496:	e7ea      	b.n	800346e <FSA8S_ReadChannel+0x26>
        } else {
            /* Received data is correct */
            /* Quit outer while loop */
            break;
 8003498:	bf00      	nop
        }
    }

    /* Get channels data in little-endian */
    FSA8S_AmendData(hibus);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7ff ff06 	bl	80032ac <FSA8S_AmendData>

    /* Return channel value */
    return hibus->data[channel - IBUS_CHANNEL_NUM_OFFSET];
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68da      	ldr	r2, [r3, #12]
 80034a4:	78fb      	ldrb	r3, [r7, #3]
 80034a6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80034aa:	3b01      	subs	r3, #1
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	4413      	add	r3, r2
 80034b0:	881b      	ldrh	r3, [r3, #0]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <I2C_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t I2C_Init(GY87_HandleTypeDef_t * hgy87) {
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b086      	sub	sp, #24
 80034be:	af02      	add	r7, sp, #8
 80034c0:	6078      	str	r0, [r7, #4]

    uint8_t who_am_I_value;

    /* Check parameter */
    if (NULL == hgy87) {
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <I2C_Init+0x12>
        return false;
 80034c8:	2300      	movs	r3, #0
 80034ca:	e010      	b.n	80034ee <I2C_Init+0x34>
    }

    /* Read IMU device ID */
    I2C_Read(hgy87->hi2c, hgy87->address, MPU_6050_REG_WHO_AM_I, &who_am_I_value, 1);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6858      	ldr	r0, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	7a19      	ldrb	r1, [r3, #8]
 80034d4:	f107 030f 	add.w	r3, r7, #15
 80034d8:	2201      	movs	r2, #1
 80034da:	9200      	str	r2, [sp, #0]
 80034dc:	2275      	movs	r2, #117	@ 0x75
 80034de:	f000 f80a 	bl	80034f6 <I2C_Read>

    /* Check IMU device ID */
    if (who_am_I_value == MPU_6050_BIT_WHO_AM_I) {
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
 80034e4:	2b68      	cmp	r3, #104	@ 0x68
 80034e6:	d101      	bne.n	80034ec <I2C_Init+0x32>
        /* Right IMU device ID */
        return true;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e000      	b.n	80034ee <I2C_Init+0x34>
    } else {
        /* Wrong IMU device ID */
        return false;
 80034ec:	2300      	movs	r3, #0
    }
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <I2C_Read>:

bool_t I2C_Read(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b088      	sub	sp, #32
 80034fa:	af04      	add	r7, sp, #16
 80034fc:	60f8      	str	r0, [r7, #12]
 80034fe:	607b      	str	r3, [r7, #4]
 8003500:	460b      	mov	r3, r1
 8003502:	72fb      	strb	r3, [r7, #11]
 8003504:	4613      	mov	r3, r2
 8003506:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <I2C_Read+0x1c>
        return false;
 800350e:	2300      	movs	r3, #0
 8003510:	e019      	b.n	8003546 <I2C_Read+0x50>
    }
    if (NULL == data) {
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <I2C_Read+0x26>
        return false;
 8003518:	2300      	movs	r3, #0
 800351a:	e014      	b.n	8003546 <I2C_Read+0x50>
    }

    /* Read I2C device data by passing a data register */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_I2C_Mem_Read(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, dataSize, MPU_6050_I2C_READ_TIMEOUT)) {
 800351c:	7afb      	ldrb	r3, [r7, #11]
 800351e:	b299      	uxth	r1, r3
 8003520:	7abb      	ldrb	r3, [r7, #10]
 8003522:	b29a      	uxth	r2, r3
 8003524:	7e3b      	ldrb	r3, [r7, #24]
 8003526:	b29b      	uxth	r3, r3
 8003528:	2064      	movs	r0, #100	@ 0x64
 800352a:	9002      	str	r0, [sp, #8]
 800352c:	9301      	str	r3, [sp, #4]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	2301      	movs	r3, #1
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f002 fbb3 	bl	8005ca0 <HAL_I2C_Mem_Read>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <I2C_Read+0x4e>
        /* END MODIFY 1 */
        /* Data couldn't be read */
        return false;
 8003540:	2300      	movs	r3, #0
 8003542:	e000      	b.n	8003546 <I2C_Read+0x50>
    } else {
        /* Data read successfully */
        return true;
 8003544:	2301      	movs	r3, #1
    }
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <I2C_Write>:

bool_t I2C_Write(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data) {
 800354e:	b580      	push	{r7, lr}
 8003550:	b088      	sub	sp, #32
 8003552:	af04      	add	r7, sp, #16
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	607b      	str	r3, [r7, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	72fb      	strb	r3, [r7, #11]
 800355c:	4613      	mov	r3, r2
 800355e:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <I2C_Write+0x1c>
        return false;
 8003566:	2300      	movs	r3, #0
 8003568:	e018      	b.n	800359c <I2C_Write+0x4e>
    }
    if (NULL == data) {
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <I2C_Write+0x26>
        return false;
 8003570:	2300      	movs	r3, #0
 8003572:	e013      	b.n	800359c <I2C_Write+0x4e>
    }

    /* Write to I2C device register */
    /* BEGIN MODIFY 2 */
    if (HAL_OK != HAL_I2C_Mem_Write(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, sizeof(*data), MPU_6050_I2C_WRITE_TIMEOUT)) {
 8003574:	7afb      	ldrb	r3, [r7, #11]
 8003576:	b299      	uxth	r1, r3
 8003578:	7abb      	ldrb	r3, [r7, #10]
 800357a:	b29a      	uxth	r2, r3
 800357c:	2364      	movs	r3, #100	@ 0x64
 800357e:	9302      	str	r3, [sp, #8]
 8003580:	2301      	movs	r3, #1
 8003582:	9301      	str	r3, [sp, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	2301      	movs	r3, #1
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f002 fa8e 	bl	8005aac <HAL_I2C_Mem_Write>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <I2C_Write+0x4c>
        /* END MODIFY 2 */
        /* Data couldn't be written */
        return false;
 8003596:	2300      	movs	r3, #0
 8003598:	e000      	b.n	800359c <I2C_Write+0x4e>
    } else {

        /* Data written successfully */
        return true;
 800359a:	2301      	movs	r3, #1
    }
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <GY87_InstanceInit>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static GY87_HandleTypeDef_t * GY87_InstanceInit(I2C_HandleTypeDef * hi2c) {
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]

#ifdef USE_FREERTOS
    /* Allocate dynamic memory for the GY87_HandleTypeDef_t structure */
    GY87_HandleTypeDef_t * hgy87 = pvPortMalloc(sizeof(GY87_HandleTypeDef_t));
 80035ac:	2014      	movs	r0, #20
 80035ae:	f00c f9ad 	bl	800f90c <pvPortMalloc>
 80035b2:	60f8      	str	r0, [r7, #12]

    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = pvPortMalloc(sizeof(1));
 80035b4:	2004      	movs	r0, #4
 80035b6:	f00c f9a9 	bl	800f90c <pvPortMalloc>
 80035ba:	60b8      	str	r0, [r7, #8]
    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = malloc(sizeof(1));
#endif

    /* Check if dynamic memory allocation was successful */
    if (NULL == hgy87 || NULL == buffer) {
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <GY87_InstanceInit+0x24>
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d109      	bne.n	80035dc <GY87_InstanceInit+0x38>
        /* Dynamic memory allocation was not successful */
#ifdef USE_FREERTOS
        /* Free up dynamic allocated memory */
        vPortFree(hgy87->buffer);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f00c f9af 	bl	800f930 <vPortFree>
        vPortFree(hgy87);
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f00c f9ac 	bl	800f930 <vPortFree>
        /* Free up dynamic allocated memory */
        hgy87->buffer = 0;
        free(hgy87->buffer);
        free(hgy87);
#endif
        return NULL;
 80035d8:	2300      	movs	r3, #0
 80035da:	e01b      	b.n	8003614 <GY87_InstanceInit+0x70>
    } else {
        /* Dynamic memory allocation was successful */

        /* Initialize GY87_HandleTypeDef_t structure */
        if (instancesNumber == 0) {
 80035dc:	4b0f      	ldr	r3, [pc, #60]	@ (800361c <GY87_InstanceInit+0x78>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d106      	bne.n	80035f2 <GY87_InstanceInit+0x4e>
            hgy87->instance = 1;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2201      	movs	r2, #1
 80035e8:	701a      	strb	r2, [r3, #0]
            hgy87->address = MPU6050_AUX_VAL_I2C_ADDR1;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	22d0      	movs	r2, #208	@ 0xd0
 80035ee:	721a      	strb	r2, [r3, #8]
 80035f0:	e009      	b.n	8003606 <GY87_InstanceInit+0x62>
        } else if (instancesNumber == 1) {
 80035f2:	4b0a      	ldr	r3, [pc, #40]	@ (800361c <GY87_InstanceInit+0x78>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d105      	bne.n	8003606 <GY87_InstanceInit+0x62>
            hgy87->instance = 2;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2202      	movs	r2, #2
 80035fe:	701a      	strb	r2, [r3, #0]
            hgy87->address = MPU6050_AUX_VAL_I2C_ADDR2;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	22d1      	movs	r2, #209	@ 0xd1
 8003604:	721a      	strb	r2, [r3, #8]
        }
        hgy87->hi2c = hi2c;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	605a      	str	r2, [r3, #4]
        hgy87->buffer = buffer;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	60da      	str	r2, [r3, #12]
    }

    /* Return created instance */
    return hgy87;
 8003612:	68fb      	ldr	r3, [r7, #12]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	20000c35 	.word	0x20000c35

08003620 <MPU6050_WakeUpDevice>:

static void MPU6050_WakeUpDevice(GY87_HandleTypeDef_t * hgy87) {
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af02      	add	r7, sp, #8
 8003626:	6078      	str	r0, [r7, #4]

    /* Wake up device */
    uint8_t regData;

    regData = MPU_6050_BIT_PWR_MGMT_1_SLEEP;
 8003628:	2340      	movs	r3, #64	@ 0x40
 800362a:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_CLEAR_BIT);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6858      	ldr	r0, [r3, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	7a19      	ldrb	r1, [r3, #8]
 8003634:	f107 030f 	add.w	r3, r7, #15
 8003638:	2200      	movs	r2, #0
 800363a:	9200      	str	r2, [sp, #0]
 800363c:	226b      	movs	r2, #107	@ 0x6b
 800363e:	f000 fabb 	bl	8003bb8 <MPU6050_WriteRegisterBitmasked>
}
 8003642:	bf00      	nop
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <MPU6050_SetClockSource>:

static void MPU6050_SetClockSource(GY87_HandleTypeDef_t * hgy87) {
 800364a:	b580      	push	{r7, lr}
 800364c:	b086      	sub	sp, #24
 800364e:	af02      	add	r7, sp, #8
 8003650:	6078      	str	r0, [r7, #4]

    /* Set clock source */
    uint8_t regData;

    regData = MPU_6050_BIT_PWR_MGMT_1_CLKSEL_1;
 8003652:	2301      	movs	r3, #1
 8003654:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_SET_BIT);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6858      	ldr	r0, [r3, #4]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	7a19      	ldrb	r1, [r3, #8]
 800365e:	f107 030f 	add.w	r3, r7, #15
 8003662:	2201      	movs	r2, #1
 8003664:	9200      	str	r2, [sp, #0]
 8003666:	226b      	movs	r2, #107	@ 0x6b
 8003668:	f000 faa6 	bl	8003bb8 <MPU6050_WriteRegisterBitmasked>
}
 800366c:	bf00      	nop
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <MPU6050_SetSampleDivider>:

static void MPU6050_SetSampleDivider(GY87_HandleTypeDef_t * hgy87) {
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af02      	add	r7, sp, #8
 800367a:	6078      	str	r0, [r7, #4]

    /* Set sample rate divider */
    uint8_t regData;

    regData = MPU_6050_BIT_SMPLRT_DIV;
 800367c:	2301      	movs	r3, #1
 800367e:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_SMPLRT_DIV, &regData, MPU6050_SET_BIT);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6858      	ldr	r0, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	7a19      	ldrb	r1, [r3, #8]
 8003688:	f107 030f 	add.w	r3, r7, #15
 800368c:	2201      	movs	r2, #1
 800368e:	9200      	str	r2, [sp, #0]
 8003690:	2219      	movs	r2, #25
 8003692:	f000 fa91 	bl	8003bb8 <MPU6050_WriteRegisterBitmasked>
}
 8003696:	bf00      	nop
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <MPU6050_EnableDLPF>:

static void MPU6050_EnableDLPF(GY87_HandleTypeDef_t * hgy87) {
 800369e:	b580      	push	{r7, lr}
 80036a0:	b086      	sub	sp, #24
 80036a2:	af02      	add	r7, sp, #8
 80036a4:	6078      	str	r0, [r7, #4]

    /* Enable digital low pass filter */
    uint8_t regData;

    regData = MPU_6050_BIT_CONFIG_DLPF_CFG_5;
 80036a6:	2305      	movs	r3, #5
 80036a8:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_CONFIG, &regData, MPU6050_SET_BIT);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6858      	ldr	r0, [r3, #4]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	7a19      	ldrb	r1, [r3, #8]
 80036b2:	f107 030f 	add.w	r3, r7, #15
 80036b6:	2201      	movs	r2, #1
 80036b8:	9200      	str	r2, [sp, #0]
 80036ba:	221a      	movs	r2, #26
 80036bc:	f000 fa7c 	bl	8003bb8 <MPU6050_WriteRegisterBitmasked>
}
 80036c0:	bf00      	nop
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <MPU6050_SetGyroscopeRange>:

static void MPU6050_SetGyroscopeRange(GY87_HandleTypeDef_t * hgy87) {
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af02      	add	r7, sp, #8
 80036ce:	6078      	str	r0, [r7, #4]

    /* Set gyroscope range */
    uint8_t regData;

    regData = MPU_6050_BIT_GYRO_CONFIG_FS_SEL_1; // Full range
 80036d0:	2308      	movs	r3, #8
 80036d2:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_CONFIG, &regData, MPU6050_SET_BIT);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6858      	ldr	r0, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	7a19      	ldrb	r1, [r3, #8]
 80036dc:	f107 030f 	add.w	r3, r7, #15
 80036e0:	2201      	movs	r2, #1
 80036e2:	9200      	str	r2, [sp, #0]
 80036e4:	221b      	movs	r2, #27
 80036e6:	f000 fa67 	bl	8003bb8 <MPU6050_WriteRegisterBitmasked>
}
 80036ea:	bf00      	nop
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <MPU6050_SetAccelerometerRange>:

static void MPU6050_SetAccelerometerRange(GY87_HandleTypeDef_t * hgy87) {
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b086      	sub	sp, #24
 80036f6:	af02      	add	r7, sp, #8
 80036f8:	6078      	str	r0, [r7, #4]

    /* Set accelerometer range */
    uint8_t regData;

    regData = MPU_6050_BIT_ACCEL_CONFIG_FS_SEL_2; // Full range
 80036fa:	2310      	movs	r3, #16
 80036fc:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_CONFIG, &regData, MPU6050_SET_BIT);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6858      	ldr	r0, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	7a19      	ldrb	r1, [r3, #8]
 8003706:	f107 030f 	add.w	r3, r7, #15
 800370a:	2201      	movs	r2, #1
 800370c:	9200      	str	r2, [sp, #0]
 800370e:	221c      	movs	r2, #28
 8003710:	f000 fa52 	bl	8003bb8 <MPU6050_WriteRegisterBitmasked>
}
 8003714:	bf00      	nop
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <MPU6050_EnableI2CMasterMode>:

static void MPU6050_EnableI2CMasterMode(GY87_HandleTypeDef_t * hgy87) {
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af02      	add	r7, sp, #8
 8003722:	6078      	str	r0, [r7, #4]

    /* Enable I2C Master mode */
    uint8_t regData;

    regData = MPU_6050_BIT_USER_CTRL_MST_EN;
 8003724:	2320      	movs	r3, #32
 8003726:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_USER_CTRL, &regData, MPU6050_SET_BIT);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6858      	ldr	r0, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	7a19      	ldrb	r1, [r3, #8]
 8003730:	f107 030f 	add.w	r3, r7, #15
 8003734:	2201      	movs	r2, #1
 8003736:	9200      	str	r2, [sp, #0]
 8003738:	226a      	movs	r2, #106	@ 0x6a
 800373a:	f000 fa3d 	bl	8003bb8 <MPU6050_WriteRegisterBitmasked>
}
 800373e:	bf00      	nop
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <MPU6050_DisableI2CMasterMode>:

static void MPU6050_DisableI2CMasterMode(GY87_HandleTypeDef_t * hgy87) {
 8003746:	b580      	push	{r7, lr}
 8003748:	b086      	sub	sp, #24
 800374a:	af02      	add	r7, sp, #8
 800374c:	6078      	str	r0, [r7, #4]

    /* Disable I2C Master mode */
    uint8_t regData;

    regData = MPU_6050_BIT_USER_CTRL_MST_EN;
 800374e:	2320      	movs	r3, #32
 8003750:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_USER_CTRL, &regData, MPU6050_CLEAR_BIT);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6858      	ldr	r0, [r3, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	7a19      	ldrb	r1, [r3, #8]
 800375a:	f107 030f 	add.w	r3, r7, #15
 800375e:	2200      	movs	r2, #0
 8003760:	9200      	str	r2, [sp, #0]
 8003762:	226a      	movs	r2, #106	@ 0x6a
 8003764:	f000 fa28 	bl	8003bb8 <MPU6050_WriteRegisterBitmasked>
}
 8003768:	bf00      	nop
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <MPU6050_EnableBypassMode>:

static void MPU6050_EnableBypassMode(GY87_HandleTypeDef_t * hgy87) {
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af02      	add	r7, sp, #8
 8003776:	6078      	str	r0, [r7, #4]

    /* Enable Bypass mode */
    uint8_t regData;

    regData = MPU_6050_BIT_INT_PIN_CFG_I2C_BP_EN;
 8003778:	2302      	movs	r3, #2
 800377a:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_INT_PIN_CFG, &regData, MPU6050_SET_BIT);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6858      	ldr	r0, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	7a19      	ldrb	r1, [r3, #8]
 8003784:	f107 030f 	add.w	r3, r7, #15
 8003788:	2201      	movs	r2, #1
 800378a:	9200      	str	r2, [sp, #0]
 800378c:	2237      	movs	r2, #55	@ 0x37
 800378e:	f000 fa13 	bl	8003bb8 <MPU6050_WriteRegisterBitmasked>
}
 8003792:	bf00      	nop
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <MPU6050_DisableBypassMode>:

static void MPU6050_DisableBypassMode(GY87_HandleTypeDef_t * hgy87) {
 800379a:	b580      	push	{r7, lr}
 800379c:	b086      	sub	sp, #24
 800379e:	af02      	add	r7, sp, #8
 80037a0:	6078      	str	r0, [r7, #4]

    /* Disable Bypass mode */
    uint8_t regData;

    regData = MPU_6050_BIT_INT_PIN_CFG_I2C_BP_EN;
 80037a2:	2302      	movs	r3, #2
 80037a4:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_INT_PIN_CFG, &regData, MPU6050_SET_BIT);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6858      	ldr	r0, [r3, #4]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	7a19      	ldrb	r1, [r3, #8]
 80037ae:	f107 030f 	add.w	r3, r7, #15
 80037b2:	2201      	movs	r2, #1
 80037b4:	9200      	str	r2, [sp, #0]
 80037b6:	2237      	movs	r2, #55	@ 0x37
 80037b8:	f000 f9fe 	bl	8003bb8 <MPU6050_WriteRegisterBitmasked>
}
 80037bc:	bf00      	nop
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <MPU6050_SetMasterClock>:

static void MPU6050_SetMasterClock(GY87_HandleTypeDef_t * hgy87) {
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af02      	add	r7, sp, #8
 80037ca:	6078      	str	r0, [r7, #4]

    /* Set Master Clock */
    uint8_t regData;

    regData = MPU_6050_BIT_I2C_MST_CTRL_CLK_13;
 80037cc:	230d      	movs	r3, #13
 80037ce:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_MST_CTRL, &regData, MPU6050_SET_BIT);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6858      	ldr	r0, [r3, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	7a19      	ldrb	r1, [r3, #8]
 80037d8:	f107 030f 	add.w	r3, r7, #15
 80037dc:	2201      	movs	r2, #1
 80037de:	9200      	str	r2, [sp, #0]
 80037e0:	2224      	movs	r2, #36	@ 0x24
 80037e2:	f000 f9e9 	bl	8003bb8 <MPU6050_WriteRegisterBitmasked>
}
 80037e6:	bf00      	nop
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <MPU6050_Configure_QMC5883l>:

static void MPU6050_Configure_QMC5883l(GY87_HandleTypeDef_t * hgy87) {
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b086      	sub	sp, #24
 80037f2:	af02      	add	r7, sp, #8
 80037f4:	6078      	str	r0, [r7, #4]

    /* Configure slave QMC5883L magnetometer in MPU6050 */
    uint8_t regData;

    /* Set slave QMC5883L magnetometer device address */
    regData = 0x80 | QMC5883L_AUX_VAL_I2C_ADDR;
 80037f6:	238d      	movs	r3, #141	@ 0x8d
 80037f8:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV0_ADDR, &regData, MPU6050_SET_BIT);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6858      	ldr	r0, [r3, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	7a19      	ldrb	r1, [r3, #8]
 8003802:	f107 030f 	add.w	r3, r7, #15
 8003806:	2201      	movs	r2, #1
 8003808:	9200      	str	r2, [sp, #0]
 800380a:	2225      	movs	r2, #37	@ 0x25
 800380c:	f000 f9d4 	bl	8003bb8 <MPU6050_WriteRegisterBitmasked>

    /* Set slave QMC5883L magnetometer registers addresses to read */
    regData = QMC5883L_REG_X_LSB;
 8003810:	2300      	movs	r3, #0
 8003812:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV0_REG, &regData, MPU6050_SET_BIT);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6858      	ldr	r0, [r3, #4]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	7a19      	ldrb	r1, [r3, #8]
 800381c:	f107 030f 	add.w	r3, r7, #15
 8003820:	2201      	movs	r2, #1
 8003822:	9200      	str	r2, [sp, #0]
 8003824:	2226      	movs	r2, #38	@ 0x26
 8003826:	f000 f9c7 	bl	8003bb8 <MPU6050_WriteRegisterBitmasked>

    /* Set slave QMC5883L magnetometer number of registers to read*/
    regData = 0x80 | 0x06;
 800382a:	2386      	movs	r3, #134	@ 0x86
 800382c:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV0_CTRL, &regData, MPU6050_SET_BIT);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6858      	ldr	r0, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	7a19      	ldrb	r1, [r3, #8]
 8003836:	f107 030f 	add.w	r3, r7, #15
 800383a:	2201      	movs	r2, #1
 800383c:	9200      	str	r2, [sp, #0]
 800383e:	2227      	movs	r2, #39	@ 0x27
 8003840:	f000 f9ba 	bl	8003bb8 <MPU6050_WriteRegisterBitmasked>
}
 8003844:	bf00      	nop
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <MPU6050_Configure_BMP180>:

static void MPU6050_Configure_BMP180(GY87_HandleTypeDef_t * hgy87) {
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]

    /* Configure slave BMP180 barometer in MPU6050 */
    uint8_t regData;

    /* Set slave BMP180 barometer device address (SLAVE 1: Registers 0xF6 to 0xF8) */
    regData = 0x80 | BMP180_AUX_VAL_I2C_ADDR;
 8003854:	23f7      	movs	r3, #247	@ 0xf7
 8003856:	73fb      	strb	r3, [r7, #15]
    // MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV1_ADDR, &regData, MPU6050_SET_BIT);
    MPU6050_WriteRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV1_ADDR, &regData);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6858      	ldr	r0, [r3, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	7a19      	ldrb	r1, [r3, #8]
 8003860:	f107 030f 	add.w	r3, r7, #15
 8003864:	2228      	movs	r2, #40	@ 0x28
 8003866:	f000 f994 	bl	8003b92 <MPU6050_WriteRegister>

    /* Set slave BMP180 barometer registers addresses to read (SLAVE 1: Registers 0xF6 to 0xF8) */
    regData = 0xF6;
 800386a:	23f6      	movs	r3, #246	@ 0xf6
 800386c:	73fb      	strb	r3, [r7, #15]
    // MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV1_REG, &regData, MPU6050_SET_BIT);
    MPU6050_WriteRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV1_REG, &regData);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6858      	ldr	r0, [r3, #4]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	7a19      	ldrb	r1, [r3, #8]
 8003876:	f107 030f 	add.w	r3, r7, #15
 800387a:	2229      	movs	r2, #41	@ 0x29
 800387c:	f000 f989 	bl	8003b92 <MPU6050_WriteRegister>

    /* Set slave BMP180 barometer number of registers to read (SLAVE 1: Registers 0xF6 to 0xF8) */
    regData = 0x80 | 0x03;
 8003880:	2383      	movs	r3, #131	@ 0x83
 8003882:	73fb      	strb	r3, [r7, #15]
    // MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV1_CTRL, &regData, MPU6050_SET_BIT);
    MPU6050_WriteRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_I2C_SLV1_CTRL, &regData);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6858      	ldr	r0, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	7a19      	ldrb	r1, [r3, #8]
 800388c:	f107 030f 	add.w	r3, r7, #15
 8003890:	222a      	movs	r2, #42	@ 0x2a
 8003892:	f000 f97e 	bl	8003b92 <MPU6050_WriteRegister>
}
 8003896:	bf00      	nop
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <GY87_Configure>:

static bool_t GY87_Configure(GY87_HandleTypeDef_t * hgy87) {
 800389e:	b580      	push	{r7, lr}
 80038a0:	b082      	sub	sp, #8
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]

    /* Configure MPU6050 device */

    /* Wake up device */
    MPU6050_WakeUpDevice(hgy87);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff feba 	bl	8003620 <MPU6050_WakeUpDevice>

    /* Set clock source */
    MPU6050_SetClockSource(hgy87);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff fecc 	bl	800364a <MPU6050_SetClockSource>

    /* Set sample rate divider */
    MPU6050_SetSampleDivider(hgy87);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7ff fede 	bl	8003674 <MPU6050_SetSampleDivider>

    /* Enable digital low pass filter */
    MPU6050_EnableDLPF(hgy87);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff fef0 	bl	800369e <MPU6050_EnableDLPF>

    /* Set gyroscope range */
    MPU6050_SetGyroscopeRange(hgy87);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7ff ff02 	bl	80036c8 <MPU6050_SetGyroscopeRange>

    /* Set accelerometer range */
    MPU6050_SetAccelerometerRange(hgy87);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7ff ff14 	bl	80036f2 <MPU6050_SetAccelerometerRange>

    /* Disable I2C Master mode */
    MPU6050_DisableI2CMasterMode(hgy87);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7ff ff3b 	bl	8003746 <MPU6050_DisableI2CMasterMode>

    /* Enable Bypass mode */
    MPU6050_EnableBypassMode(hgy87);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7ff ff4d 	bl	8003770 <MPU6050_EnableBypassMode>

    /* Test QMC5883L magnetometer connection */
    if (!QMC5883L_TestConnection(hgy87)) {
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f82d 	bl	8003936 <QMC5883L_TestConnection>
 80038dc:	4603      	mov	r3, r0
 80038de:	f083 0301 	eor.w	r3, r3, #1
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <GY87_Configure+0x4e>
#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"QMC5883L magnetometer not detected.\r\n\n", LOG_ERROR);
#endif
        return false;
 80038e8:	2300      	movs	r3, #0
 80038ea:	e020      	b.n	800392e <GY87_Configure+0x90>
        LOG((uint8_t *)"QMC5883L magnetometer detected.\r\n\n", LOG_INFORMATION);
#endif
    }

    /* Configure QMC5883L magnetometer */
    QMC5883L_Configure(hgy87);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f852 	bl	8003996 <QMC5883L_Configure>

    /* Test BMP180 barometer connection */
    if (!BMP180_TestConnection(hgy87)) {
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f837 	bl	8003966 <BMP180_TestConnection>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f083 0301 	eor.w	r3, r3, #1
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <GY87_Configure+0x6a>
#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"BMP180 barometer not detected.\r\n\n", LOG_ERROR);
#endif
        return false;
 8003904:	2300      	movs	r3, #0
 8003906:	e012      	b.n	800392e <GY87_Configure+0x90>
        LOG((uint8_t *)"BMP180 barometer detected.\r\n\n", LOG_INFORMATION);
#endif
    }

    /* Configure BMP180 barometer */
    BMP180_Configure(hgy87);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f871 	bl	80039f0 <BMP180_Configure>

    /* Disable Bypass */
    MPU6050_DisableBypassMode(hgy87);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7ff ff43 	bl	800379a <MPU6050_DisableBypassMode>

    /* Enable I2C Master mode */
    MPU6050_EnableI2CMasterMode(hgy87);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7ff ff01 	bl	800371c <MPU6050_EnableI2CMasterMode>

    /* Set Master clock */
    MPU6050_SetMasterClock(hgy87);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff ff52 	bl	80037c4 <MPU6050_SetMasterClock>

    /* Configure slave QMC5883L magnetometer in MPU6050 */
    MPU6050_Configure_QMC5883l(hgy87);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7ff ff64 	bl	80037ee <MPU6050_Configure_QMC5883l>

    /* Configure slave BMP180 barometer in MPU6050 */
    MPU6050_Configure_BMP180(hgy87);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7ff ff90 	bl	800384c <MPU6050_Configure_BMP180>

    return true;
 800392c:	2301      	movs	r3, #1
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <QMC5883L_TestConnection>:

static bool_t QMC5883L_TestConnection(GY87_HandleTypeDef_t * hgy87) {
 8003936:	b580      	push	{r7, lr}
 8003938:	b086      	sub	sp, #24
 800393a:	af02      	add	r7, sp, #8
 800393c:	6078      	str	r0, [r7, #4]

    /* Test QMC5883L magnetometer connection */
    uint8_t regData;

    MPU6050_ReadRegister(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CHIP_ID, &regData, sizeof(regData));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6858      	ldr	r0, [r3, #4]
 8003942:	f107 030f 	add.w	r3, r7, #15
 8003946:	2201      	movs	r2, #1
 8003948:	9200      	str	r2, [sp, #0]
 800394a:	220d      	movs	r2, #13
 800394c:	211a      	movs	r1, #26
 800394e:	f000 f90b 	bl	8003b68 <MPU6050_ReadRegister>

    if (QMC5883L_BIT_CHIP_ID != regData) {
 8003952:	7bfb      	ldrb	r3, [r7, #15]
 8003954:	2bff      	cmp	r3, #255	@ 0xff
 8003956:	d001      	beq.n	800395c <QMC5883L_TestConnection+0x26>
        return false;
 8003958:	2300      	movs	r3, #0
 800395a:	e000      	b.n	800395e <QMC5883L_TestConnection+0x28>
    } else {
        return true;
 800395c:	2301      	movs	r3, #1
    }
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <BMP180_TestConnection>:

static bool_t BMP180_TestConnection(GY87_HandleTypeDef_t * hgy87) {
 8003966:	b580      	push	{r7, lr}
 8003968:	b086      	sub	sp, #24
 800396a:	af02      	add	r7, sp, #8
 800396c:	6078      	str	r0, [r7, #4]

    /* Test BMP180 barometer connection */
    uint8_t regData;

    MPU6050_ReadRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, BMP180_REG_ID, &regData, sizeof(regData));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6858      	ldr	r0, [r3, #4]
 8003972:	f107 030f 	add.w	r3, r7, #15
 8003976:	2201      	movs	r2, #1
 8003978:	9200      	str	r2, [sp, #0]
 800397a:	22d0      	movs	r2, #208	@ 0xd0
 800397c:	21ee      	movs	r1, #238	@ 0xee
 800397e:	f000 f8f3 	bl	8003b68 <MPU6050_ReadRegister>

    if (BMP180_AUX_VAL_ID != regData) {
 8003982:	7bfb      	ldrb	r3, [r7, #15]
 8003984:	2b55      	cmp	r3, #85	@ 0x55
 8003986:	d001      	beq.n	800398c <BMP180_TestConnection+0x26>
        return false;
 8003988:	2300      	movs	r3, #0
 800398a:	e000      	b.n	800398e <BMP180_TestConnection+0x28>
    } else {
        return true;
 800398c:	2301      	movs	r3, #1
    }
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <QMC5883L_Configure>:

static void QMC5883L_Configure(GY87_HandleTypeDef_t * hgy87) {
 8003996:	b580      	push	{r7, lr}
 8003998:	b086      	sub	sp, #24
 800399a:	af02      	add	r7, sp, #8
 800399c:	6078      	str	r0, [r7, #4]

    /* Configure QMC5883L magnetometer */
    uint8_t regData;

    /* Reset QMC5883L magnetometer */
    regData = 0b00000001;
 800399e:	2301      	movs	r3, #1
 80039a0:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_RESET, &regData, QMC5883L_SET_BIT);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6858      	ldr	r0, [r3, #4]
 80039a6:	f107 030f 	add.w	r3, r7, #15
 80039aa:	2201      	movs	r2, #1
 80039ac:	9200      	str	r2, [sp, #0]
 80039ae:	220b      	movs	r2, #11
 80039b0:	211a      	movs	r1, #26
 80039b2:	f000 f901 	bl	8003bb8 <MPU6050_WriteRegisterBitmasked>

    /* Configure QMC5883L magnetometer: Control Register 1 */
    regData = 0b00011101;
 80039b6:	231d      	movs	r3, #29
 80039b8:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CONFIG1, &regData, QMC5883L_SET_BIT);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6858      	ldr	r0, [r3, #4]
 80039be:	f107 030f 	add.w	r3, r7, #15
 80039c2:	2201      	movs	r2, #1
 80039c4:	9200      	str	r2, [sp, #0]
 80039c6:	2209      	movs	r2, #9
 80039c8:	211a      	movs	r1, #26
 80039ca:	f000 f8f5 	bl	8003bb8 <MPU6050_WriteRegisterBitmasked>

    /* Configure QMC5883L magnetometer: Control Register 2 */
    regData = 0b00000000;
 80039ce:	2300      	movs	r3, #0
 80039d0:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegisterBitmasked(hgy87->hi2c, QMC5883L_AUX_VAL_I2C_ADDR << 1, QMC5883L_REG_CONFIG2, &regData, QMC5883L_SET_BIT);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6858      	ldr	r0, [r3, #4]
 80039d6:	f107 030f 	add.w	r3, r7, #15
 80039da:	2201      	movs	r2, #1
 80039dc:	9200      	str	r2, [sp, #0]
 80039de:	220a      	movs	r2, #10
 80039e0:	211a      	movs	r1, #26
 80039e2:	f000 f8e9 	bl	8003bb8 <MPU6050_WriteRegisterBitmasked>
}
 80039e6:	bf00      	nop
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <BMP180_Configure>:

static void BMP180_Configure(GY87_HandleTypeDef_t * hgy87) {
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af02      	add	r7, sp, #8
 80039f6:	6078      	str	r0, [r7, #4]

    /* Configure BMP180 barometer */
    uint8_t regData;
    uint8_t temperatureRawData[2] = {0};
 80039f8:	2300      	movs	r3, #0
 80039fa:	81bb      	strh	r3, [r7, #12]

    /* Read calibration data */
    BMP180_ReadCalibrationData(hgy87);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f82b 	bl	8003a58 <BMP180_ReadCalibrationData>

    /* Read uncompensated temperature */
    regData = 0x2E;
 8003a02:	232e      	movs	r3, #46	@ 0x2e
 8003a04:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, 0xF4, &regData);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6858      	ldr	r0, [r3, #4]
 8003a0a:	f107 030f 	add.w	r3, r7, #15
 8003a0e:	22f4      	movs	r2, #244	@ 0xf4
 8003a10:	21ee      	movs	r1, #238	@ 0xee
 8003a12:	f000 f8be 	bl	8003b92 <MPU6050_WriteRegister>
    // vTaskDelay(pdMS_TO_TICKS(5));
    // HAL_Delay(5);
#else
    // HAL_Delay(5);
#endif
    MPU6050_ReadRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, 0xF6, temperatureRawData, 2 * sizeof(uint8_t));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6858      	ldr	r0, [r3, #4]
 8003a1a:	f107 030c 	add.w	r3, r7, #12
 8003a1e:	2202      	movs	r2, #2
 8003a20:	9200      	str	r2, [sp, #0]
 8003a22:	22f6      	movs	r2, #246	@ 0xf6
 8003a24:	21ee      	movs	r1, #238	@ 0xee
 8003a26:	f000 f89f 	bl	8003b68 <MPU6050_ReadRegister>
    BMP180_CalibrationData.UT = (temperatureRawData[0] << 8) | temperatureRawData[1];
 8003a2a:	7b3b      	ldrb	r3, [r7, #12]
 8003a2c:	021b      	lsls	r3, r3, #8
 8003a2e:	7b7a      	ldrb	r2, [r7, #13]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	4a08      	ldr	r2, [pc, #32]	@ (8003a54 <BMP180_Configure+0x64>)
 8003a34:	61d3      	str	r3, [r2, #28]

    /* Write register to read uncompensated pressure in the future */
    regData = 0x34 | (BMP180_OVERSAMPLING << 6);
 8003a36:	23b4      	movs	r3, #180	@ 0xb4
 8003a38:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, 0xF4, &regData);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6858      	ldr	r0, [r3, #4]
 8003a3e:	f107 030f 	add.w	r3, r7, #15
 8003a42:	22f4      	movs	r2, #244	@ 0xf4
 8003a44:	21ee      	movs	r1, #238	@ 0xee
 8003a46:	f000 f8a4 	bl	8003b92 <MPU6050_WriteRegister>
    //    LOG(loggingStr, LOG_DEBUGGING);
    //
    //    sprintf((char *)loggingStr, (const char *)"BMP180_Configure(): UP = %d P\r\n", uncompensatedPressure);
    //    LOG(loggingStr, LOG_DEBUGGING);
    /* DEBUGGING DELETE */
}
 8003a4a:	bf00      	nop
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	20000c38 	.word	0x20000c38

08003a58 <BMP180_ReadCalibrationData>:

static void BMP180_ReadCalibrationData(GY87_HandleTypeDef_t * hgy87) {
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b08a      	sub	sp, #40	@ 0x28
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	6078      	str	r0, [r7, #4]

    uint8_t callibrationData[22] = {0};
 8003a60:	2300      	movs	r3, #0
 8003a62:	60bb      	str	r3, [r7, #8]
 8003a64:	f107 030c 	add.w	r3, r7, #12
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	609a      	str	r2, [r3, #8]
 8003a70:	60da      	str	r2, [r3, #12]
 8003a72:	821a      	strh	r2, [r3, #16]
    uint16_t startRegisterAddress = 0xAA;
 8003a74:	23aa      	movs	r3, #170	@ 0xaa
 8003a76:	83fb      	strh	r3, [r7, #30]

    /* Read calibration data */
    MPU6050_ReadRegister(hgy87->hi2c, BMP180_AUX_VAL_I2C_ADDR << 1, startRegisterAddress, callibrationData, sizeof(callibrationData));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6858      	ldr	r0, [r3, #4]
 8003a7c:	8bfb      	ldrh	r3, [r7, #30]
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	f107 0308 	add.w	r3, r7, #8
 8003a84:	2116      	movs	r1, #22
 8003a86:	9100      	str	r1, [sp, #0]
 8003a88:	21ee      	movs	r1, #238	@ 0xee
 8003a8a:	f000 f86d 	bl	8003b68 <MPU6050_ReadRegister>

    BMP180_CalibrationData.AC1 = ((callibrationData[0] << 8) | callibrationData[1]);
 8003a8e:	7a3b      	ldrb	r3, [r7, #8]
 8003a90:	021b      	lsls	r3, r3, #8
 8003a92:	b21a      	sxth	r2, r3
 8003a94:	7a7b      	ldrb	r3, [r7, #9]
 8003a96:	b21b      	sxth	r3, r3
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	b21a      	sxth	r2, r3
 8003a9c:	4b31      	ldr	r3, [pc, #196]	@ (8003b64 <BMP180_ReadCalibrationData+0x10c>)
 8003a9e:	801a      	strh	r2, [r3, #0]
    BMP180_CalibrationData.AC2 = ((callibrationData[2] << 8) | callibrationData[3]);
 8003aa0:	7abb      	ldrb	r3, [r7, #10]
 8003aa2:	021b      	lsls	r3, r3, #8
 8003aa4:	b21a      	sxth	r2, r3
 8003aa6:	7afb      	ldrb	r3, [r7, #11]
 8003aa8:	b21b      	sxth	r3, r3
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	b21a      	sxth	r2, r3
 8003aae:	4b2d      	ldr	r3, [pc, #180]	@ (8003b64 <BMP180_ReadCalibrationData+0x10c>)
 8003ab0:	805a      	strh	r2, [r3, #2]
    BMP180_CalibrationData.AC3 = ((callibrationData[4] << 8) | callibrationData[5]);
 8003ab2:	7b3b      	ldrb	r3, [r7, #12]
 8003ab4:	021b      	lsls	r3, r3, #8
 8003ab6:	b21a      	sxth	r2, r3
 8003ab8:	7b7b      	ldrb	r3, [r7, #13]
 8003aba:	b21b      	sxth	r3, r3
 8003abc:	4313      	orrs	r3, r2
 8003abe:	b21a      	sxth	r2, r3
 8003ac0:	4b28      	ldr	r3, [pc, #160]	@ (8003b64 <BMP180_ReadCalibrationData+0x10c>)
 8003ac2:	809a      	strh	r2, [r3, #4]
    BMP180_CalibrationData.AC4 = ((callibrationData[6] << 8) | callibrationData[7]);
 8003ac4:	7bbb      	ldrb	r3, [r7, #14]
 8003ac6:	021b      	lsls	r3, r3, #8
 8003ac8:	b21a      	sxth	r2, r3
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
 8003acc:	b21b      	sxth	r3, r3
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	b21b      	sxth	r3, r3
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	4b23      	ldr	r3, [pc, #140]	@ (8003b64 <BMP180_ReadCalibrationData+0x10c>)
 8003ad6:	80da      	strh	r2, [r3, #6]
    BMP180_CalibrationData.AC5 = ((callibrationData[8] << 8) | callibrationData[9]);
 8003ad8:	7c3b      	ldrb	r3, [r7, #16]
 8003ada:	021b      	lsls	r3, r3, #8
 8003adc:	b21a      	sxth	r2, r3
 8003ade:	7c7b      	ldrb	r3, [r7, #17]
 8003ae0:	b21b      	sxth	r3, r3
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	b21b      	sxth	r3, r3
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8003b64 <BMP180_ReadCalibrationData+0x10c>)
 8003aea:	811a      	strh	r2, [r3, #8]
    BMP180_CalibrationData.AC6 = ((callibrationData[10] << 8) | callibrationData[11]);
 8003aec:	7cbb      	ldrb	r3, [r7, #18]
 8003aee:	021b      	lsls	r3, r3, #8
 8003af0:	b21a      	sxth	r2, r3
 8003af2:	7cfb      	ldrb	r3, [r7, #19]
 8003af4:	b21b      	sxth	r3, r3
 8003af6:	4313      	orrs	r3, r2
 8003af8:	b21b      	sxth	r3, r3
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	4b19      	ldr	r3, [pc, #100]	@ (8003b64 <BMP180_ReadCalibrationData+0x10c>)
 8003afe:	815a      	strh	r2, [r3, #10]
    BMP180_CalibrationData.B1 = ((callibrationData[12] << 8) | callibrationData[13]);
 8003b00:	7d3b      	ldrb	r3, [r7, #20]
 8003b02:	021b      	lsls	r3, r3, #8
 8003b04:	b21a      	sxth	r2, r3
 8003b06:	7d7b      	ldrb	r3, [r7, #21]
 8003b08:	b21b      	sxth	r3, r3
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	b21a      	sxth	r2, r3
 8003b0e:	4b15      	ldr	r3, [pc, #84]	@ (8003b64 <BMP180_ReadCalibrationData+0x10c>)
 8003b10:	819a      	strh	r2, [r3, #12]
    BMP180_CalibrationData.B2 = ((callibrationData[14] << 8) | callibrationData[15]);
 8003b12:	7dbb      	ldrb	r3, [r7, #22]
 8003b14:	021b      	lsls	r3, r3, #8
 8003b16:	b21a      	sxth	r2, r3
 8003b18:	7dfb      	ldrb	r3, [r7, #23]
 8003b1a:	b21b      	sxth	r3, r3
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	b21a      	sxth	r2, r3
 8003b20:	4b10      	ldr	r3, [pc, #64]	@ (8003b64 <BMP180_ReadCalibrationData+0x10c>)
 8003b22:	81da      	strh	r2, [r3, #14]
    BMP180_CalibrationData.MB = ((callibrationData[16] << 8) | callibrationData[17]);
 8003b24:	7e3b      	ldrb	r3, [r7, #24]
 8003b26:	021b      	lsls	r3, r3, #8
 8003b28:	b21a      	sxth	r2, r3
 8003b2a:	7e7b      	ldrb	r3, [r7, #25]
 8003b2c:	b21b      	sxth	r3, r3
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	b21a      	sxth	r2, r3
 8003b32:	4b0c      	ldr	r3, [pc, #48]	@ (8003b64 <BMP180_ReadCalibrationData+0x10c>)
 8003b34:	829a      	strh	r2, [r3, #20]
    BMP180_CalibrationData.MC = ((callibrationData[18] << 8) | callibrationData[19]);
 8003b36:	7ebb      	ldrb	r3, [r7, #26]
 8003b38:	021b      	lsls	r3, r3, #8
 8003b3a:	b21a      	sxth	r2, r3
 8003b3c:	7efb      	ldrb	r3, [r7, #27]
 8003b3e:	b21b      	sxth	r3, r3
 8003b40:	4313      	orrs	r3, r2
 8003b42:	b21a      	sxth	r2, r3
 8003b44:	4b07      	ldr	r3, [pc, #28]	@ (8003b64 <BMP180_ReadCalibrationData+0x10c>)
 8003b46:	82da      	strh	r2, [r3, #22]
    BMP180_CalibrationData.MD = ((callibrationData[20] << 8) | callibrationData[21]);
 8003b48:	7f3b      	ldrb	r3, [r7, #28]
 8003b4a:	021b      	lsls	r3, r3, #8
 8003b4c:	b21a      	sxth	r2, r3
 8003b4e:	7f7b      	ldrb	r3, [r7, #29]
 8003b50:	b21b      	sxth	r3, r3
 8003b52:	4313      	orrs	r3, r2
 8003b54:	b21a      	sxth	r2, r3
 8003b56:	4b03      	ldr	r3, [pc, #12]	@ (8003b64 <BMP180_ReadCalibrationData+0x10c>)
 8003b58:	831a      	strh	r2, [r3, #24]
}
 8003b5a:	bf00      	nop
 8003b5c:	3720      	adds	r7, #32
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	20000c38 	.word	0x20000c38

08003b68 <MPU6050_ReadRegister>:
    /* DEBUGGING DELETE */

    return uncompensatedPressure;
}

static void MPU6050_ReadRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	607b      	str	r3, [r7, #4]
 8003b72:	460b      	mov	r3, r1
 8003b74:	72fb      	strb	r3, [r7, #11]
 8003b76:	4613      	mov	r3, r2
 8003b78:	72bb      	strb	r3, [r7, #10]

    /* Read register */
    I2C_Read(hi2c, address, reg, data, dataSize);
 8003b7a:	7aba      	ldrb	r2, [r7, #10]
 8003b7c:	7af9      	ldrb	r1, [r7, #11]
 8003b7e:	7e3b      	ldrb	r3, [r7, #24]
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f7ff fcb6 	bl	80034f6 <I2C_Read>
}
 8003b8a:	bf00      	nop
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <MPU6050_WriteRegister>:

static void MPU6050_WriteRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data) {
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b084      	sub	sp, #16
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	60f8      	str	r0, [r7, #12]
 8003b9a:	607b      	str	r3, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	72fb      	strb	r3, [r7, #11]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	72bb      	strb	r3, [r7, #10]

    /* Write register - ¡Destructive operation! */
    I2C_Write(hi2c, address, reg, data);
 8003ba4:	7aba      	ldrb	r2, [r7, #10]
 8003ba6:	7af9      	ldrb	r1, [r7, #11]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f7ff fccf 	bl	800354e <I2C_Write>
}
 8003bb0:	bf00      	nop
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <MPU6050_WriteRegisterBitmasked>:

static void MPU6050_WriteRegisterBitmasked(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t set) {
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af02      	add	r7, sp, #8
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	607b      	str	r3, [r7, #4]
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	72fb      	strb	r3, [r7, #11]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	72bb      	strb	r3, [r7, #10]
    uint8_t originalData;

    /* Declare variable for new data to write into register */
    uint8_t newData;

    MPU6050_ReadRegister(hi2c, address, reg, &originalData, sizeof(originalData));
 8003bca:	f107 0317 	add.w	r3, r7, #23
 8003bce:	7aba      	ldrb	r2, [r7, #10]
 8003bd0:	7af9      	ldrb	r1, [r7, #11]
 8003bd2:	2001      	movs	r0, #1
 8003bd4:	9000      	str	r0, [sp, #0]
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f7ff ffc6 	bl	8003b68 <MPU6050_ReadRegister>

    /* Apply mask to data to write */
    if (set) {
 8003bdc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d006      	beq.n	8003bf2 <MPU6050_WriteRegisterBitmasked+0x3a>

        newData = originalData | *data;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	781a      	ldrb	r2, [r3, #0]
 8003be8:	7dfb      	ldrb	r3, [r7, #23]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	75bb      	strb	r3, [r7, #22]
 8003bf0:	e00a      	b.n	8003c08 <MPU6050_WriteRegisterBitmasked+0x50>
    } else {

        newData = originalData & (~*data);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	b25b      	sxtb	r3, r3
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	b25a      	sxtb	r2, r3
 8003bfc:	7dfb      	ldrb	r3, [r7, #23]
 8003bfe:	b25b      	sxtb	r3, r3
 8003c00:	4013      	ands	r3, r2
 8003c02:	b25b      	sxtb	r3, r3
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	75bb      	strb	r3, [r7, #22]
    }

    MPU6050_WriteRegister(hi2c, address, reg, &newData);
 8003c08:	f107 0316 	add.w	r3, r7, #22
 8003c0c:	7aba      	ldrb	r2, [r7, #10]
 8003c0e:	7af9      	ldrb	r1, [r7, #11]
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f7ff ffbe 	bl	8003b92 <MPU6050_WriteRegister>
}
 8003c16:	bf00      	nop
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
	...

08003c20 <GY87_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
GY87_HandleTypeDef_t * GY87_Init(I2C_HandleTypeDef * hi2c) {
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hi2c) {
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <GY87_Init+0x12>
        return NULL;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	e028      	b.n	8003c84 <GY87_Init+0x64>
    }

    /* Check if driver was already once or twice initialized */
    if (GY87_MAX_NUMBER_INSTANCES == instancesNumber) {
 8003c32:	4b16      	ldr	r3, [pc, #88]	@ (8003c8c <GY87_Init+0x6c>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d101      	bne.n	8003c3e <GY87_Init+0x1e>
        return NULL;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	e022      	b.n	8003c84 <GY87_Init+0x64>
    }

    /* Create an instance of the MPU6050_IMU device */
    GY87_HandleTypeDef_t * hgy87 = GY87_InstanceInit(hi2c);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7ff fcb0 	bl	80035a4 <GY87_InstanceInit>
 8003c44:	60f8      	str	r0, [r7, #12]

    /* Check if instance was successfully created */
    if (NULL != hgy87) {
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d01a      	beq.n	8003c82 <GY87_Init+0x62>
        /* Instance was successfully created */

        /* Initialize I2C communication */
        if (I2C_Init(hgy87)) {
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f7ff fc34 	bl	80034ba <I2C_Init>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00a      	beq.n	8003c6e <GY87_Init+0x4e>
#ifdef GY87_USE_LOGGING
            LOG((uint8_t *)"MPU6050 IMU detected.\r\n\n", LOG_INFORMATION);
#endif

            /* Configure device */
            GY87_Configure(hgy87);
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f7ff fe20 	bl	800389e <GY87_Configure>

            instancesNumber++;
 8003c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c8c <GY87_Init+0x6c>)
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	3301      	adds	r3, #1
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	4b09      	ldr	r3, [pc, #36]	@ (8003c8c <GY87_Init+0x6c>)
 8003c68:	701a      	strb	r2, [r3, #0]

            return hgy87;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	e00a      	b.n	8003c84 <GY87_Init+0x64>
        } else {

            /* Initialization was unsuccessful */
#ifdef USE_FREERTOS
            /* Free up dynamic allocated memory */
            vPortFree(hgy87->buffer);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f00b fe5c 	bl	800f930 <vPortFree>
            vPortFree(hgy87);
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f00b fe59 	bl	800f930 <vPortFree>
#endif

#ifdef GY87_USE_LOGGING
            LOG((uint8_t *)"GY87 IMU not detected.\r\n\n", LOG_ERROR);
#endif
            return NULL;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	e000      	b.n	8003c84 <GY87_Init+0x64>

        /* Instance couldn't be created */
#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"GY87 IMU couldn't be initialized.\r\n\n", LOG_ERROR);
#endif
        return NULL;
 8003c82:	2300      	movs	r3, #0
    }
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	20000c35 	.word	0x20000c35

08003c90 <GY87_CalibrateGyroscope>:
        /* Reset device */
        MPU6050_WriteRegisterBitmasked(hgy87->hi2c, hgy87->address, MPU_6050_REG_PWR_MGMT_1, &regData, MPU6050_SET_BIT);
    }
}

bool_t GY87_CalibrateGyroscope(GY87_HandleTypeDef_t * hgy87) {
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08c      	sub	sp, #48	@ 0x30
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]

    /* Declare structure to read the gyroscope values */
    GY87_gyroscopeValues_t gyroscopeValues;

    /* Declare variables to accumulate measurements */
    float ratesRoll = 0;
 8003c98:	f04f 0300 	mov.w	r3, #0
 8003c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float ratesPitch = 0;
 8003c9e:	f04f 0300 	mov.w	r3, #0
 8003ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
    float ratesYaw = 0;
 8003ca4:	f04f 0300 	mov.w	r3, #0
 8003ca8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check parameter and calculate calibration value */
    if (NULL != hgy87) {
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d044      	beq.n	8003d3a <GY87_CalibrateGyroscope+0xaa>

        /* Calibrate gyroscope measurements */
        for (int i = 0; i < GY87_CALIBRATION_ITERATIONS; i++) {
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	623b      	str	r3, [r7, #32]
 8003cb4:	e020      	b.n	8003cf8 <GY87_CalibrateGyroscope+0x68>

            /* Read gyroscope values */
            GY87_ReadGyroscope(hgy87, &gyroscopeValues);
 8003cb6:	f107 030c 	add.w	r3, r7, #12
 8003cba:	4619      	mov	r1, r3
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f849 	bl	8003d54 <GY87_ReadGyroscope>

            /* Accumulate measurements */
            ratesRoll += gyroscopeValues.rotationRateRoll;
 8003cc2:	edd7 7a05 	vldr	s15, [r7, #20]
 8003cc6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003cca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cce:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            ratesPitch += gyroscopeValues.rotationRatePitch;
 8003cd2:	edd7 7a06 	vldr	s15, [r7, #24]
 8003cd6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003cda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cde:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            ratesYaw += gyroscopeValues.rotationRateYaw;
 8003ce2:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ce6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cee:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        for (int i = 0; i < GY87_CALIBRATION_ITERATIONS; i++) {
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	623b      	str	r3, [r7, #32]
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003cfe:	dbda      	blt.n	8003cb6 <GY87_CalibrateGyroscope+0x26>
        }

        gyroscopeCalibrationRoll = ratesRoll / GY87_CALIBRATION_ITERATIONS;
 8003d00:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003d04:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8003d44 <GY87_CalibrateGyroscope+0xb4>
 8003d08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8003d48 <GY87_CalibrateGyroscope+0xb8>)
 8003d0e:	edc3 7a00 	vstr	s15, [r3]
        gyroscopeCalibrationPitch = ratesPitch / GY87_CALIBRATION_ITERATIONS;
 8003d12:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003d16:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8003d44 <GY87_CalibrateGyroscope+0xb4>
 8003d1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d4c <GY87_CalibrateGyroscope+0xbc>)
 8003d20:	edc3 7a00 	vstr	s15, [r3]
        gyroscopeCalibrationYaw = ratesYaw / GY87_CALIBRATION_ITERATIONS;
 8003d24:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003d28:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8003d44 <GY87_CalibrateGyroscope+0xb4>
 8003d2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d30:	4b07      	ldr	r3, [pc, #28]	@ (8003d50 <GY87_CalibrateGyroscope+0xc0>)
 8003d32:	edc3 7a00 	vstr	s15, [r3]

#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"Gyroscope calibration done.\r\n\n", LOG_INFORMATION);
#endif

        return true;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <GY87_CalibrateGyroscope+0xac>

    } else {

        return false;
 8003d3a:	2300      	movs	r3, #0
    }
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3730      	adds	r7, #48	@ 0x30
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	44fa0000 	.word	0x44fa0000
 8003d48:	20000c5c 	.word	0x20000c5c
 8003d4c:	20000c60 	.word	0x20000c60
 8003d50:	20000c64 	.word	0x20000c64

08003d54 <GY87_ReadGyroscope>:

void GY87_ReadGyroscope(GY87_HandleTypeDef_t * hgy87, GY87_gyroscopeValues_t * gyroscopeValues) {
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t gyroscopeRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_GYRO_SF_0500;
 8003d5e:	2341      	movs	r3, #65	@ 0x41
 8003d60:	81fb      	strh	r3, [r7, #14]

    /* Check parameters */
    if (NULL != hgy87 && NULL != gyroscopeValues) {
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 808a 	beq.w	8003e7e <GY87_ReadGyroscope+0x12a>
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 8086 	beq.w	8003e7e <GY87_ReadGyroscope+0x12a>

        /* Read gyroscope raw value for X axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_XOUT_H, gyroscopeRawData, sizeof(uint16_t));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6858      	ldr	r0, [r3, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	7a19      	ldrb	r1, [r3, #8]
 8003d7a:	f107 030c 	add.w	r3, r7, #12
 8003d7e:	2202      	movs	r2, #2
 8003d80:	9200      	str	r2, [sp, #0]
 8003d82:	2243      	movs	r2, #67	@ 0x43
 8003d84:	f7ff fef0 	bl	8003b68 <MPU6050_ReadRegister>
        gyroscopeValues->rawValueX = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]);
 8003d88:	7b3b      	ldrb	r3, [r7, #12]
 8003d8a:	021b      	lsls	r3, r3, #8
 8003d8c:	b21a      	sxth	r2, r3
 8003d8e:	7b7b      	ldrb	r3, [r7, #13]
 8003d90:	b21b      	sxth	r3, r3
 8003d92:	4313      	orrs	r3, r2
 8003d94:	b21a      	sxth	r2, r3
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	801a      	strh	r2, [r3, #0]
        /* Calculate gyroscope rotation rate along X axis (roll) */
        gyroscopeValues->rotationRateRoll = -(((float)gyroscopeValues->rawValueX / scaleFactor) - gyroscopeCalibrationRoll);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003da0:	ee07 3a90 	vmov	s15, r3
 8003da4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003da8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003dac:	ee07 3a90 	vmov	s15, r3
 8003db0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003db4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003db8:	4b3e      	ldr	r3, [pc, #248]	@ (8003eb4 <GY87_ReadGyroscope+0x160>)
 8003dba:	edd3 7a00 	vldr	s15, [r3]
 8003dbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dc2:	eef1 7a67 	vneg.f32	s15, s15
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	edc3 7a02 	vstr	s15, [r3, #8]

        /* Read gyroscope raw value for Y axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_YOUT_H, gyroscopeRawData, sizeof(uint16_t));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6858      	ldr	r0, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	7a19      	ldrb	r1, [r3, #8]
 8003dd4:	f107 030c 	add.w	r3, r7, #12
 8003dd8:	2202      	movs	r2, #2
 8003dda:	9200      	str	r2, [sp, #0]
 8003ddc:	2245      	movs	r2, #69	@ 0x45
 8003dde:	f7ff fec3 	bl	8003b68 <MPU6050_ReadRegister>
        gyroscopeValues->rawValueY = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]);
 8003de2:	7b3b      	ldrb	r3, [r7, #12]
 8003de4:	021b      	lsls	r3, r3, #8
 8003de6:	b21a      	sxth	r2, r3
 8003de8:	7b7b      	ldrb	r3, [r7, #13]
 8003dea:	b21b      	sxth	r3, r3
 8003dec:	4313      	orrs	r3, r2
 8003dee:	b21a      	sxth	r2, r3
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	805a      	strh	r2, [r3, #2]
        /* Calculate gyroscope rotation rate along Y axis (pitch) */
        gyroscopeValues->rotationRatePitch = -(((float)gyroscopeValues->rawValueY / scaleFactor) - gyroscopeCalibrationPitch);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003dfa:	ee07 3a90 	vmov	s15, r3
 8003dfe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003e02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e06:	ee07 3a90 	vmov	s15, r3
 8003e0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e12:	4b29      	ldr	r3, [pc, #164]	@ (8003eb8 <GY87_ReadGyroscope+0x164>)
 8003e14:	edd3 7a00 	vldr	s15, [r3]
 8003e18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e1c:	eef1 7a67 	vneg.f32	s15, s15
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	edc3 7a03 	vstr	s15, [r3, #12]

        /* Read gyroscope raw value for Z axis  */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_GYRO_ZOUT_H, gyroscopeRawData, sizeof(uint16_t));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6858      	ldr	r0, [r3, #4]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	7a19      	ldrb	r1, [r3, #8]
 8003e2e:	f107 030c 	add.w	r3, r7, #12
 8003e32:	2202      	movs	r2, #2
 8003e34:	9200      	str	r2, [sp, #0]
 8003e36:	2247      	movs	r2, #71	@ 0x47
 8003e38:	f7ff fe96 	bl	8003b68 <MPU6050_ReadRegister>
        gyroscopeValues->rawValueZ = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]);
 8003e3c:	7b3b      	ldrb	r3, [r7, #12]
 8003e3e:	021b      	lsls	r3, r3, #8
 8003e40:	b21a      	sxth	r2, r3
 8003e42:	7b7b      	ldrb	r3, [r7, #13]
 8003e44:	b21b      	sxth	r3, r3
 8003e46:	4313      	orrs	r3, r2
 8003e48:	b21a      	sxth	r2, r3
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	809a      	strh	r2, [r3, #4]
        /* Calculate gyroscope rotation rate along Z axis (yaw)  */
        gyroscopeValues->rotationRateYaw = ((float)gyroscopeValues->rawValueZ / scaleFactor) - gyroscopeCalibrationYaw;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003e54:	ee07 3a90 	vmov	s15, r3
 8003e58:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003e5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e60:	ee07 3a90 	vmov	s15, r3
 8003e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e6c:	4b13      	ldr	r3, [pc, #76]	@ (8003ebc <GY87_ReadGyroscope+0x168>)
 8003e6e:	edd3 7a00 	vldr	s15, [r3]
 8003e72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	edc3 7a04 	vstr	s15, [r3, #16]
 8003e7c:	e015      	b.n	8003eaa <GY87_ReadGyroscope+0x156>

    } else {

        /* Wrong parameters */
        gyroscopeValues->rawValueX = 0;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2200      	movs	r2, #0
 8003e82:	801a      	strh	r2, [r3, #0]
        gyroscopeValues->rawValueY = 0;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	2200      	movs	r2, #0
 8003e88:	805a      	strh	r2, [r3, #2]
        gyroscopeValues->rawValueZ = 0;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	809a      	strh	r2, [r3, #4]
        gyroscopeValues->rotationRateRoll = 0;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	609a      	str	r2, [r3, #8]
        gyroscopeValues->rotationRatePitch = 0;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	f04f 0200 	mov.w	r2, #0
 8003e9e:	60da      	str	r2, [r3, #12]
        gyroscopeValues->rotationRateYaw = 0;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	f04f 0200 	mov.w	r2, #0
 8003ea6:	611a      	str	r2, [r3, #16]
    }
}
 8003ea8:	bf00      	nop
 8003eaa:	bf00      	nop
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	20000c5c 	.word	0x20000c5c
 8003eb8:	20000c60 	.word	0x20000c60
 8003ebc:	20000c64 	.word	0x20000c64

08003ec0 <GY87_CalibrateAccelerometer>:

bool_t GY87_CalibrateAccelerometer(GY87_HandleTypeDef_t * hgy87) {
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b08e      	sub	sp, #56	@ 0x38
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]

    /* Declare structure to read the accelerometer values */
    GY87_accelerometerValues_t accelerometerValues;

    /* Declare variables to accumulate measurements */
    float linearAccelerationsX = 0;
 8003ec8:	f04f 0300 	mov.w	r3, #0
 8003ecc:	637b      	str	r3, [r7, #52]	@ 0x34
    float linearAccelerationsY = 0;
 8003ece:	f04f 0300 	mov.w	r3, #0
 8003ed2:	633b      	str	r3, [r7, #48]	@ 0x30
    float linearAccelerationsZ = 0;
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Check parameter and calculate calibration value */
    if (NULL != hgy87) {
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d044      	beq.n	8003f6a <GY87_CalibrateAccelerometer+0xaa>

        /* Calibrate gyroscope measurements */
        for (int i = 0; i < GY87_CALIBRATION_ITERATIONS; i++) {
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ee4:	e020      	b.n	8003f28 <GY87_CalibrateAccelerometer+0x68>

            /* Read gyroscope values */
            GY87_ReadAccelerometer(hgy87, &accelerometerValues);
 8003ee6:	f107 030c 	add.w	r3, r7, #12
 8003eea:	4619      	mov	r1, r3
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f84b 	bl	8003f88 <GY87_ReadAccelerometer>

            /* Accumulate measurements */
            linearAccelerationsX += accelerometerValues.linearAccelerationX;
 8003ef2:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ef6:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003efa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003efe:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
            linearAccelerationsY += accelerometerValues.linearAccelerationY;
 8003f02:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f06:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003f0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f0e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
            linearAccelerationsZ += accelerometerValues.linearAccelerationZ;
 8003f12:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f16:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003f1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f1e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        for (int i = 0; i < GY87_CALIBRATION_ITERATIONS; i++) {
 8003f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f24:	3301      	adds	r3, #1
 8003f26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f2a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003f2e:	dbda      	blt.n	8003ee6 <GY87_CalibrateAccelerometer+0x26>
        }

        accelerometerCalibrationX = linearAccelerationsX / GY87_CALIBRATION_ITERATIONS;
 8003f30:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003f34:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8003f74 <GY87_CalibrateAccelerometer+0xb4>
 8003f38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8003f78 <GY87_CalibrateAccelerometer+0xb8>)
 8003f3e:	edc3 7a00 	vstr	s15, [r3]
        accelerometerCalibrationY = linearAccelerationsY / GY87_CALIBRATION_ITERATIONS;
 8003f42:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003f46:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8003f74 <GY87_CalibrateAccelerometer+0xb4>
 8003f4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8003f7c <GY87_CalibrateAccelerometer+0xbc>)
 8003f50:	edc3 7a00 	vstr	s15, [r3]
        accelerometerCalibrationZ = linearAccelerationsZ / GY87_CALIBRATION_ITERATIONS;
 8003f54:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003f58:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8003f74 <GY87_CalibrateAccelerometer+0xb4>
 8003f5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f60:	4b07      	ldr	r3, [pc, #28]	@ (8003f80 <GY87_CalibrateAccelerometer+0xc0>)
 8003f62:	edc3 7a00 	vstr	s15, [r3]

#ifdef GY87_USE_LOGGING
        LOG((uint8_t *)"Accelerometer calibration done.\r\n\n", LOG_INFORMATION);
#endif

        return true;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e000      	b.n	8003f6c <GY87_CalibrateAccelerometer+0xac>

    } else {

        return false;
 8003f6a:	2300      	movs	r3, #0
    }
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3738      	adds	r7, #56	@ 0x38
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	44fa0000 	.word	0x44fa0000
 8003f78:	20000c68 	.word	0x20000c68
 8003f7c:	20000c6c 	.word	0x20000c6c
 8003f80:	20000c70 	.word	0x20000c70
 8003f84:	00000000 	.word	0x00000000

08003f88 <GY87_ReadAccelerometer>:

void GY87_ReadAccelerometer(GY87_HandleTypeDef_t * hgy87, GY87_accelerometerValues_t * accelerometerValues) {
 8003f88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003f8c:	b08a      	sub	sp, #40	@ 0x28
 8003f8e:	af02      	add	r7, sp, #8
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t accelerometerRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_ACCEL_FS_08;
 8003f94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f98:	83fb      	strh	r3, [r7, #30]

    float accX, accY, accZ;

    /* Check parameters */
    if (NULL != hgy87 && NULL != accelerometerValues) {
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 8101 	beq.w	80041a4 <GY87_ReadAccelerometer+0x21c>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 80fd 	beq.w	80041a4 <GY87_ReadAccelerometer+0x21c>

        /* Read accelerometer raw value for X axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_XOUT_H, accelerometerRawData, sizeof(uint16_t));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6858      	ldr	r0, [r3, #4]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	7a19      	ldrb	r1, [r3, #8]
 8003fb2:	f107 030c 	add.w	r3, r7, #12
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	9200      	str	r2, [sp, #0]
 8003fba:	223b      	movs	r2, #59	@ 0x3b
 8003fbc:	f7ff fdd4 	bl	8003b68 <MPU6050_ReadRegister>
        accelerometerValues->rawValueX = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]);
 8003fc0:	7b3b      	ldrb	r3, [r7, #12]
 8003fc2:	021b      	lsls	r3, r3, #8
 8003fc4:	b21a      	sxth	r2, r3
 8003fc6:	7b7b      	ldrb	r3, [r7, #13]
 8003fc8:	b21b      	sxth	r3, r3
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	b21a      	sxth	r2, r3
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	801a      	strh	r2, [r3, #0]
        /* Calculate accelerometer linear acceleration along X axis */
        accX = accelerometerValues->linearAccelerationX = ((float)accelerometerValues->rawValueX / scaleFactor) - accelerometerCalibrationX;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fd8:	ee07 3a90 	vmov	s15, r3
 8003fdc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003fe0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003fe4:	ee07 3a90 	vmov	s15, r3
 8003fe8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ff0:	4b7d      	ldr	r3, [pc, #500]	@ (80041e8 <GY87_ReadAccelerometer+0x260>)
 8003ff2:	edd3 7a00 	vldr	s15, [r3]
 8003ff6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	edc3 7a02 	vstr	s15, [r3, #8]
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	61bb      	str	r3, [r7, #24]

        /* Read accelerometer raw value for Y axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_YOUT_H, accelerometerRawData, sizeof(uint16_t));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6858      	ldr	r0, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	7a19      	ldrb	r1, [r3, #8]
 800400e:	f107 030c 	add.w	r3, r7, #12
 8004012:	2202      	movs	r2, #2
 8004014:	9200      	str	r2, [sp, #0]
 8004016:	223d      	movs	r2, #61	@ 0x3d
 8004018:	f7ff fda6 	bl	8003b68 <MPU6050_ReadRegister>
        accelerometerValues->rawValueY = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]);
 800401c:	7b3b      	ldrb	r3, [r7, #12]
 800401e:	021b      	lsls	r3, r3, #8
 8004020:	b21a      	sxth	r2, r3
 8004022:	7b7b      	ldrb	r3, [r7, #13]
 8004024:	b21b      	sxth	r3, r3
 8004026:	4313      	orrs	r3, r2
 8004028:	b21a      	sxth	r2, r3
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	805a      	strh	r2, [r3, #2]
        /* Calculate accelerometer linear acceleration along Y axis */
        accY = accelerometerValues->linearAccelerationY = ((float)accelerometerValues->rawValueY / scaleFactor) - accelerometerCalibrationY;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004034:	ee07 3a90 	vmov	s15, r3
 8004038:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800403c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004040:	ee07 3a90 	vmov	s15, r3
 8004044:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004048:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800404c:	4b67      	ldr	r3, [pc, #412]	@ (80041ec <GY87_ReadAccelerometer+0x264>)
 800404e:	edd3 7a00 	vldr	s15, [r3]
 8004052:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	edc3 7a03 	vstr	s15, [r3, #12]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	617b      	str	r3, [r7, #20]

        /* Read accelerometer raw value for Z axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_ACCEL_ZOUT_H, accelerometerRawData, sizeof(uint16_t));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6858      	ldr	r0, [r3, #4]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	7a19      	ldrb	r1, [r3, #8]
 800406a:	f107 030c 	add.w	r3, r7, #12
 800406e:	2202      	movs	r2, #2
 8004070:	9200      	str	r2, [sp, #0]
 8004072:	223f      	movs	r2, #63	@ 0x3f
 8004074:	f7ff fd78 	bl	8003b68 <MPU6050_ReadRegister>
        accelerometerValues->rawValueZ = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]);
 8004078:	7b3b      	ldrb	r3, [r7, #12]
 800407a:	021b      	lsls	r3, r3, #8
 800407c:	b21a      	sxth	r2, r3
 800407e:	7b7b      	ldrb	r3, [r7, #13]
 8004080:	b21b      	sxth	r3, r3
 8004082:	4313      	orrs	r3, r2
 8004084:	b21a      	sxth	r2, r3
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	809a      	strh	r2, [r3, #4]
        /* Calculate accelerometer linear acceleration along Z axis */
        accZ = accelerometerValues->linearAccelerationZ = ((float)accelerometerValues->rawValueZ / scaleFactor);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004090:	ee07 3a90 	vmov	s15, r3
 8004094:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004098:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800409c:	ee07 3a90 	vmov	s15, r3
 80040a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	edc3 7a04 	vstr	s15, [r3, #16]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	613b      	str	r3, [r7, #16]

        /* Calculate roll and pitch angles using an approximation with linear accelerations */
        accelerometerValues->angleRoll = atan(accY / sqrt(accX * accX + accZ * accZ)) * RADIANS_TO_DEGREES_CONST;
 80040b4:	6978      	ldr	r0, [r7, #20]
 80040b6:	f7fc fa4f 	bl	8000558 <__aeabi_f2d>
 80040ba:	4680      	mov	r8, r0
 80040bc:	4689      	mov	r9, r1
 80040be:	edd7 7a06 	vldr	s15, [r7, #24]
 80040c2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80040c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80040ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80040ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040d2:	ee17 0a90 	vmov	r0, s15
 80040d6:	f7fc fa3f 	bl	8000558 <__aeabi_f2d>
 80040da:	4602      	mov	r2, r0
 80040dc:	460b      	mov	r3, r1
 80040de:	ec43 2b10 	vmov	d0, r2, r3
 80040e2:	f00e fddf 	bl	8012ca4 <sqrt>
 80040e6:	ec53 2b10 	vmov	r2, r3, d0
 80040ea:	4640      	mov	r0, r8
 80040ec:	4649      	mov	r1, r9
 80040ee:	f7fc fbb5 	bl	800085c <__aeabi_ddiv>
 80040f2:	4602      	mov	r2, r0
 80040f4:	460b      	mov	r3, r1
 80040f6:	ec43 2b17 	vmov	d7, r2, r3
 80040fa:	eeb0 0a47 	vmov.f32	s0, s14
 80040fe:	eef0 0a67 	vmov.f32	s1, s15
 8004102:	f00e fdfd 	bl	8012d00 <atan>
 8004106:	ec51 0b10 	vmov	r0, r1, d0
 800410a:	a335      	add	r3, pc, #212	@ (adr r3, 80041e0 <GY87_ReadAccelerometer+0x258>)
 800410c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004110:	f7fc fa7a 	bl	8000608 <__aeabi_dmul>
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	4610      	mov	r0, r2
 800411a:	4619      	mov	r1, r3
 800411c:	f7fc fd6c 	bl	8000bf8 <__aeabi_d2f>
 8004120:	4602      	mov	r2, r0
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	615a      	str	r2, [r3, #20]
        accelerometerValues->anglePitch = -atan(accX / sqrt(accY * accY + accZ * accZ)) * RADIANS_TO_DEGREES_CONST;
 8004126:	69b8      	ldr	r0, [r7, #24]
 8004128:	f7fc fa16 	bl	8000558 <__aeabi_f2d>
 800412c:	4680      	mov	r8, r0
 800412e:	4689      	mov	r9, r1
 8004130:	edd7 7a05 	vldr	s15, [r7, #20]
 8004134:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004138:	edd7 7a04 	vldr	s15, [r7, #16]
 800413c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004140:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004144:	ee17 0a90 	vmov	r0, s15
 8004148:	f7fc fa06 	bl	8000558 <__aeabi_f2d>
 800414c:	4602      	mov	r2, r0
 800414e:	460b      	mov	r3, r1
 8004150:	ec43 2b10 	vmov	d0, r2, r3
 8004154:	f00e fda6 	bl	8012ca4 <sqrt>
 8004158:	ec53 2b10 	vmov	r2, r3, d0
 800415c:	4640      	mov	r0, r8
 800415e:	4649      	mov	r1, r9
 8004160:	f7fc fb7c 	bl	800085c <__aeabi_ddiv>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	ec43 2b17 	vmov	d7, r2, r3
 800416c:	eeb0 0a47 	vmov.f32	s0, s14
 8004170:	eef0 0a67 	vmov.f32	s1, s15
 8004174:	f00e fdc4 	bl	8012d00 <atan>
 8004178:	ec53 2b10 	vmov	r2, r3, d0
 800417c:	4614      	mov	r4, r2
 800417e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8004182:	a317      	add	r3, pc, #92	@ (adr r3, 80041e0 <GY87_ReadAccelerometer+0x258>)
 8004184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004188:	4620      	mov	r0, r4
 800418a:	4629      	mov	r1, r5
 800418c:	f7fc fa3c 	bl	8000608 <__aeabi_dmul>
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	4610      	mov	r0, r2
 8004196:	4619      	mov	r1, r3
 8004198:	f7fc fd2e 	bl	8000bf8 <__aeabi_d2f>
 800419c:	4602      	mov	r2, r0
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	619a      	str	r2, [r3, #24]
 80041a2:	e015      	b.n	80041d0 <GY87_ReadAccelerometer+0x248>

    } else {
        /* Wrong parameters */
        accelerometerValues->rawValueX = 0;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	2200      	movs	r2, #0
 80041a8:	801a      	strh	r2, [r3, #0]
        accelerometerValues->rawValueY = 0;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2200      	movs	r2, #0
 80041ae:	805a      	strh	r2, [r3, #2]
        accelerometerValues->rawValueZ = 0;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	2200      	movs	r2, #0
 80041b4:	809a      	strh	r2, [r3, #4]
        accelerometerValues->linearAccelerationX = 0;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	609a      	str	r2, [r3, #8]
        accelerometerValues->linearAccelerationY = 0;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	60da      	str	r2, [r3, #12]
        accelerometerValues->linearAccelerationZ = 0;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	611a      	str	r2, [r3, #16]
    }
}
 80041ce:	bf00      	nop
 80041d0:	bf00      	nop
 80041d2:	3720      	adds	r7, #32
 80041d4:	46bd      	mov	sp, r7
 80041d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80041da:	bf00      	nop
 80041dc:	f3af 8000 	nop.w
 80041e0:	1a63c1f8 	.word	0x1a63c1f8
 80041e4:	404ca5dc 	.word	0x404ca5dc
 80041e8:	20000c68 	.word	0x20000c68
 80041ec:	20000c6c 	.word	0x20000c6c

080041f0 <GY87_ReadTemperatureSensor>:

int16_t GY87_ReadTemperatureSensor(GY87_HandleTypeDef_t * hgy87) {
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af02      	add	r7, sp, #8
 80041f6:	6078      	str	r0, [r7, #4]

    /* Declare variable for raw data */
    uint8_t temperatureSensorRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = MPU_6050_AUX_VAL_TEMP_SF;
 80041f8:	f44f 73aa 	mov.w	r3, #340	@ 0x154
 80041fc:	81fb      	strh	r3, [r7, #14]

    /* Define variable to offset raw data */
    int16_t offset = MPU_6050_AUX_VAL_TEMP_OFS;
 80041fe:	2324      	movs	r3, #36	@ 0x24
 8004200:	81bb      	strh	r3, [r7, #12]

    /* Check parameter */
    if (NULL == hgy87) {
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <GY87_ReadTemperatureSensor+0x1c>
        return 0;
 8004208:	2300      	movs	r3, #0
 800420a:	e01b      	b.n	8004244 <GY87_ReadTemperatureSensor+0x54>
    }

    /* Read temperature sensor */
    MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_TEMP_OUT_H, temperatureSensorRawData, sizeof(uint16_t));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6858      	ldr	r0, [r3, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	7a19      	ldrb	r1, [r3, #8]
 8004214:	f107 0308 	add.w	r3, r7, #8
 8004218:	2202      	movs	r2, #2
 800421a:	9200      	str	r2, [sp, #0]
 800421c:	2241      	movs	r2, #65	@ 0x41
 800421e:	f7ff fca3 	bl	8003b68 <MPU6050_ReadRegister>

    return ((int16_t)(temperatureSensorRawData[0] << 8 | temperatureSensorRawData[1]) / scaleFactor) + offset;
 8004222:	7a3b      	ldrb	r3, [r7, #8]
 8004224:	021b      	lsls	r3, r3, #8
 8004226:	b21a      	sxth	r2, r3
 8004228:	7a7b      	ldrb	r3, [r7, #9]
 800422a:	b21b      	sxth	r3, r3
 800422c:	4313      	orrs	r3, r2
 800422e:	b21b      	sxth	r3, r3
 8004230:	461a      	mov	r2, r3
 8004232:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004236:	fb92 f3f3 	sdiv	r3, r2, r3
 800423a:	b29a      	uxth	r2, r3
 800423c:	89bb      	ldrh	r3, [r7, #12]
 800423e:	4413      	add	r3, r2
 8004240:	b29b      	uxth	r3, r3
 8004242:	b21b      	sxth	r3, r3
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <GY87_ReadMagnetometer>:

void GY87_ReadMagnetometer(GY87_HandleTypeDef_t * hgy87, GY87_magnetometerValues_t * magnetometerValues) {
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af02      	add	r7, sp, #8
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]

    /* Declare variable for raw data */
    uint8_t magnetometerRawData[2];

    /* Define variable for scale factoring raw data */
    int16_t scaleFactor = 4096;
 8004256:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800425a:	81fb      	strh	r3, [r7, #14]

    /* Check parameters */
    if (NULL != hgy87 && NULL != magnetometerValues) {
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d075      	beq.n	800434e <GY87_ReadMagnetometer+0x102>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d072      	beq.n	800434e <GY87_ReadMagnetometer+0x102>

        /* Read magnetometer raw value for X axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_EXT_SENS_DATA_00, magnetometerRawData, sizeof(uint16_t));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6858      	ldr	r0, [r3, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	7a19      	ldrb	r1, [r3, #8]
 8004270:	f107 030c 	add.w	r3, r7, #12
 8004274:	2202      	movs	r2, #2
 8004276:	9200      	str	r2, [sp, #0]
 8004278:	2249      	movs	r2, #73	@ 0x49
 800427a:	f7ff fc75 	bl	8003b68 <MPU6050_ReadRegister>
        magnetometerValues->rawValueX = (int16_t)(magnetometerRawData[1] << 8 | magnetometerRawData[0]);
 800427e:	7b7b      	ldrb	r3, [r7, #13]
 8004280:	021b      	lsls	r3, r3, #8
 8004282:	b21a      	sxth	r2, r3
 8004284:	7b3b      	ldrb	r3, [r7, #12]
 8004286:	b21b      	sxth	r3, r3
 8004288:	4313      	orrs	r3, r2
 800428a:	b21a      	sxth	r2, r3
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	801a      	strh	r2, [r3, #0]
        /* Calculate magnetometer magnetic field along X axis */
        magnetometerValues->magneticFieldX = ((float)magnetometerValues->rawValueX / scaleFactor);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004296:	ee07 3a90 	vmov	s15, r3
 800429a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800429e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80042a2:	ee07 3a90 	vmov	s15, r3
 80042a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	edc3 7a02 	vstr	s15, [r3, #8]

        /* Read magnetometer raw value for Y axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_EXT_SENS_DATA_02, magnetometerRawData, sizeof(uint16_t));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6858      	ldr	r0, [r3, #4]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	7a19      	ldrb	r1, [r3, #8]
 80042bc:	f107 030c 	add.w	r3, r7, #12
 80042c0:	2202      	movs	r2, #2
 80042c2:	9200      	str	r2, [sp, #0]
 80042c4:	224b      	movs	r2, #75	@ 0x4b
 80042c6:	f7ff fc4f 	bl	8003b68 <MPU6050_ReadRegister>
        magnetometerValues->rawValueY = (int16_t)(magnetometerRawData[1] << 8 | magnetometerRawData[0]);
 80042ca:	7b7b      	ldrb	r3, [r7, #13]
 80042cc:	021b      	lsls	r3, r3, #8
 80042ce:	b21a      	sxth	r2, r3
 80042d0:	7b3b      	ldrb	r3, [r7, #12]
 80042d2:	b21b      	sxth	r3, r3
 80042d4:	4313      	orrs	r3, r2
 80042d6:	b21a      	sxth	r2, r3
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	805a      	strh	r2, [r3, #2]
        /* Calculate magnetometer magnetic field along Y axis */
        magnetometerValues->magneticFieldY = ((float)magnetometerValues->rawValueY / scaleFactor);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80042e2:	ee07 3a90 	vmov	s15, r3
 80042e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80042ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80042ee:	ee07 3a90 	vmov	s15, r3
 80042f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	edc3 7a03 	vstr	s15, [r3, #12]

        /* Read magnetometer raw value for Z axis */
        MPU6050_ReadRegister(hgy87->hi2c, hgy87->address, MPU_6050_REG_EXT_SENS_DATA_04, magnetometerRawData, sizeof(uint16_t));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6858      	ldr	r0, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	7a19      	ldrb	r1, [r3, #8]
 8004308:	f107 030c 	add.w	r3, r7, #12
 800430c:	2202      	movs	r2, #2
 800430e:	9200      	str	r2, [sp, #0]
 8004310:	224d      	movs	r2, #77	@ 0x4d
 8004312:	f7ff fc29 	bl	8003b68 <MPU6050_ReadRegister>
        magnetometerValues->rawValueZ = (int16_t)(magnetometerRawData[1] << 8 | magnetometerRawData[0]);
 8004316:	7b7b      	ldrb	r3, [r7, #13]
 8004318:	021b      	lsls	r3, r3, #8
 800431a:	b21a      	sxth	r2, r3
 800431c:	7b3b      	ldrb	r3, [r7, #12]
 800431e:	b21b      	sxth	r3, r3
 8004320:	4313      	orrs	r3, r2
 8004322:	b21a      	sxth	r2, r3
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	809a      	strh	r2, [r3, #4]
        /* Calculate magnetometer magnetic field along Z axis */
        magnetometerValues->magneticFieldZ = ((float)magnetometerValues->rawValueZ / scaleFactor);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800432e:	ee07 3a90 	vmov	s15, r3
 8004332:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004336:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800433a:	ee07 3a90 	vmov	s15, r3
 800433e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	edc3 7a04 	vstr	s15, [r3, #16]
 800434c:	e00c      	b.n	8004368 <GY87_ReadMagnetometer+0x11c>

    } else {
        /* Wrong parameters */
        magnetometerValues->magneticFieldX = 0;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	609a      	str	r2, [r3, #8]
        magnetometerValues->magneticFieldY = 0;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	60da      	str	r2, [r3, #12]
        magnetometerValues->magneticFieldZ = 0;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	611a      	str	r2, [r3, #16]
    }
}
 8004366:	bf00      	nop
 8004368:	bf00      	nop
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <GY87_ReadMagnetometerHeading>:

float GY87_ReadMagnetometerHeading(GY87_HandleTypeDef_t * hgy87) {
 8004370:	b5b0      	push	{r4, r5, r7, lr}
 8004372:	b088      	sub	sp, #32
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]

    /* Declare variable for compass heading */
    float heading;

    /* Check parameter and calculate heading */
    if (NULL != hgy87) {
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d053      	beq.n	8004426 <GY87_ReadMagnetometerHeading+0xb6>

        GY87_ReadMagnetometer(hgy87, &magnetometerValues);
 800437e:	f107 0308 	add.w	r3, r7, #8
 8004382:	4619      	mov	r1, r3
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7ff ff61 	bl	800424c <GY87_ReadMagnetometer>

        /* Calculate heading */
        heading = atan2(-magnetometerValues.magneticFieldY, -magnetometerValues.magneticFieldX) * RADIANS_TO_DEGREES_CONST + QMC5883L_MAGNETIC_DECLINATION + QMC5883L_CALIBRATION_OFFSET;
 800438a:	edd7 7a05 	vldr	s15, [r7, #20]
 800438e:	eef1 7a67 	vneg.f32	s15, s15
 8004392:	ee17 3a90 	vmov	r3, s15
 8004396:	4618      	mov	r0, r3
 8004398:	f7fc f8de 	bl	8000558 <__aeabi_f2d>
 800439c:	4604      	mov	r4, r0
 800439e:	460d      	mov	r5, r1
 80043a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80043a4:	eef1 7a67 	vneg.f32	s15, s15
 80043a8:	ee17 3a90 	vmov	r3, s15
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fc f8d3 	bl	8000558 <__aeabi_f2d>
 80043b2:	4602      	mov	r2, r0
 80043b4:	460b      	mov	r3, r1
 80043b6:	ec43 2b11 	vmov	d1, r2, r3
 80043ba:	ec45 4b10 	vmov	d0, r4, r5
 80043be:	f00e fc6f 	bl	8012ca0 <atan2>
 80043c2:	ec51 0b10 	vmov	r0, r1, d0
 80043c6:	a321      	add	r3, pc, #132	@ (adr r3, 800444c <GY87_ReadMagnetometerHeading+0xdc>)
 80043c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043cc:	f7fc f91c 	bl	8000608 <__aeabi_dmul>
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4610      	mov	r0, r2
 80043d6:	4619      	mov	r1, r3
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	f7fb ff5c 	bl	800029c <__adddf3>
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	4610      	mov	r0, r2
 80043ea:	4619      	mov	r1, r3
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	4b13      	ldr	r3, [pc, #76]	@ (8004440 <GY87_ReadMagnetometerHeading+0xd0>)
 80043f2:	f7fb ff53 	bl	800029c <__adddf3>
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	4610      	mov	r0, r2
 80043fc:	4619      	mov	r1, r3
 80043fe:	f7fc fbfb 	bl	8000bf8 <__aeabi_d2f>
 8004402:	4603      	mov	r3, r0
 8004404:	61fb      	str	r3, [r7, #28]

        /* Check if heading is within 0 and 360 degrees */
        if (heading < 0) {
 8004406:	edd7 7a07 	vldr	s15, [r7, #28]
 800440a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800440e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004412:	d50a      	bpl.n	800442a <GY87_ReadMagnetometerHeading+0xba>
            heading += 360;
 8004414:	edd7 7a07 	vldr	s15, [r7, #28]
 8004418:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8004444 <GY87_ReadMagnetometerHeading+0xd4>
 800441c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004420:	edc7 7a07 	vstr	s15, [r7, #28]
 8004424:	e001      	b.n	800442a <GY87_ReadMagnetometerHeading+0xba>
        }

    } else {

        heading = -1;
 8004426:	4b08      	ldr	r3, [pc, #32]	@ (8004448 <GY87_ReadMagnetometerHeading+0xd8>)
 8004428:	61fb      	str	r3, [r7, #28]
    }

    return heading;
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	ee07 3a90 	vmov	s15, r3
}
 8004430:	eeb0 0a67 	vmov.f32	s0, s15
 8004434:	3720      	adds	r7, #32
 8004436:	46bd      	mov	sp, r7
 8004438:	bdb0      	pop	{r4, r5, r7, pc}
 800443a:	bf00      	nop
 800443c:	f3af 8000 	nop.w
 8004440:	403a0000 	.word	0x403a0000
 8004444:	43b40000 	.word	0x43b40000
 8004448:	bf800000 	.word	0xbf800000
 800444c:	1a63c1f8 	.word	0x1a63c1f8
 8004450:	404ca5dc 	.word	0x404ca5dc

08004454 <GY87_ReadBarometerTemperature>:

float GY87_ReadBarometerTemperature(GY87_HandleTypeDef_t * hgy87) {
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]

    /* Calculate compensated/true temperature */
    int32_t X1 = ((BMP180_CalibrationData.UT - BMP180_CalibrationData.AC6) * BMP180_CalibrationData.AC5) / (1 << 15);
 800445c:	4b1c      	ldr	r3, [pc, #112]	@ (80044d0 <GY87_ReadBarometerTemperature+0x7c>)
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	4a1b      	ldr	r2, [pc, #108]	@ (80044d0 <GY87_ReadBarometerTemperature+0x7c>)
 8004462:	8952      	ldrh	r2, [r2, #10]
 8004464:	1a9b      	subs	r3, r3, r2
 8004466:	4a1a      	ldr	r2, [pc, #104]	@ (80044d0 <GY87_ReadBarometerTemperature+0x7c>)
 8004468:	8912      	ldrh	r2, [r2, #8]
 800446a:	fb02 f303 	mul.w	r3, r2, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	da02      	bge.n	8004478 <GY87_ReadBarometerTemperature+0x24>
 8004472:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8004476:	337f      	adds	r3, #127	@ 0x7f
 8004478:	13db      	asrs	r3, r3, #15
 800447a:	60fb      	str	r3, [r7, #12]
    int32_t X2 = (BMP180_CalibrationData.MC * (1 << 11)) / (X1 + BMP180_CalibrationData.MD);
 800447c:	4b14      	ldr	r3, [pc, #80]	@ (80044d0 <GY87_ReadBarometerTemperature+0x7c>)
 800447e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004482:	02da      	lsls	r2, r3, #11
 8004484:	4b12      	ldr	r3, [pc, #72]	@ (80044d0 <GY87_ReadBarometerTemperature+0x7c>)
 8004486:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800448a:	4619      	mov	r1, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	440b      	add	r3, r1
 8004490:	fb92 f3f3 	sdiv	r3, r2, r3
 8004494:	60bb      	str	r3, [r7, #8]
    BMP180_CalibrationData.B5 = X1 + X2;
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	4413      	add	r3, r2
 800449c:	4a0c      	ldr	r2, [pc, #48]	@ (80044d0 <GY87_ReadBarometerTemperature+0x7c>)
 800449e:	6113      	str	r3, [r2, #16]
    BMP180_CalibrationData.CT = ((BMP180_CalibrationData.B5 + 8) / (1 << 4)) / 10;
 80044a0:	4b0b      	ldr	r3, [pc, #44]	@ (80044d0 <GY87_ReadBarometerTemperature+0x7c>)
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	3308      	adds	r3, #8
 80044a6:	4a0b      	ldr	r2, [pc, #44]	@ (80044d4 <GY87_ReadBarometerTemperature+0x80>)
 80044a8:	fb82 1203 	smull	r1, r2, r2, r3
 80044ac:	1192      	asrs	r2, r2, #6
 80044ae:	17db      	asrs	r3, r3, #31
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	4a07      	ldr	r2, [pc, #28]	@ (80044d0 <GY87_ReadBarometerTemperature+0x7c>)
 80044b4:	6213      	str	r3, [r2, #32]
    //
    //    sprintf((char *)loggingStr, (const char *)"GY87_ReadBarometerTemperature(): CT = %d°C\r\n\n", BMP180_CalibrationData.CT);
    //    LOG(loggingStr, LOG_DEBUGGING);
    /* DEBUGGING DELETE */

    return (float)BMP180_CalibrationData.CT;
 80044b6:	4b06      	ldr	r3, [pc, #24]	@ (80044d0 <GY87_ReadBarometerTemperature+0x7c>)
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	ee07 3a90 	vmov	s15, r3
 80044be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80044c2:	eeb0 0a67 	vmov.f32	s0, s15
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	20000c38 	.word	0x20000c38
 80044d4:	66666667 	.word	0x66666667

080044d8 <USB_Write>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
void USB_Write(uint8_t * string) {
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]

    /* BEGIN MODIFY 1 */
    CDC_Transmit_FS(string, strlen((const char *)string));
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7fb fecd 	bl	8000280 <strlen>
 80044e6:	4603      	mov	r3, r0
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	4619      	mov	r1, r3
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f00b faef 	bl	800fad0 <CDC_Transmit_FS>
    /* END MODIFY 1 */
}
 80044f2:	bf00      	nop
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
	...

080044fc <LOG>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t LOG(uint8_t * message, LOGGING_TYPE_t logType) {
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b0c2      	sub	sp, #264	@ 0x108
 8004500:	af00      	add	r7, sp, #0
 8004502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004506:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800450a:	6018      	str	r0, [r3, #0]
 800450c:	460a      	mov	r2, r1
 800450e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004512:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8004516:	701a      	strb	r2, [r3, #0]

    /* Check parameters */
    if (NULL == message) {
 8004518:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800451c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <LOG+0x2e>
        return false;
 8004526:	2300      	movs	r3, #0
 8004528:	e063      	b.n	80045f2 <LOG+0xf6>
    }

    if (LOG_INFORMATION < 0 || logType > LOG_ERROR) {
 800452a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800452e:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b03      	cmp	r3, #3
 8004536:	d901      	bls.n	800453c <LOG+0x40>
        return false;
 8004538:	2300      	movs	r3, #0
 800453a:	e05a      	b.n	80045f2 <LOG+0xf6>
    }

    /* Build log message */
    uint8_t logMessage[LOG_MESSAGE_MAX_LENGTH] = {0};
 800453c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004540:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	3304      	adds	r3, #4
 800454a:	22fc      	movs	r2, #252	@ 0xfc
 800454c:	2100      	movs	r1, #0
 800454e:	4618      	mov	r0, r3
 8004550:	f00c fd2b 	bl	8010faa <memset>

    if (LOG_INFORMATION == logType) {
 8004554:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004558:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d108      	bne.n	8004574 <LOG+0x78>

        strcat((char *)logMessage, (char *)informationTypeLabel);
 8004562:	4b26      	ldr	r3, [pc, #152]	@ (80045fc <LOG+0x100>)
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	f107 0308 	add.w	r3, r7, #8
 800456a:	4611      	mov	r1, r2
 800456c:	4618      	mov	r0, r3
 800456e:	f00c fd24 	bl	8010fba <strcat>
 8004572:	e02e      	b.n	80045d2 <LOG+0xd6>
    } else if (LOG_DEBUGGING == logType) {
 8004574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004578:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d108      	bne.n	8004594 <LOG+0x98>

        strcat((char *)logMessage, (char *)debuggingTypeLabel);
 8004582:	4b1f      	ldr	r3, [pc, #124]	@ (8004600 <LOG+0x104>)
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	f107 0308 	add.w	r3, r7, #8
 800458a:	4611      	mov	r1, r2
 800458c:	4618      	mov	r0, r3
 800458e:	f00c fd14 	bl	8010fba <strcat>
 8004592:	e01e      	b.n	80045d2 <LOG+0xd6>
    } else if (LOG_WARNING == logType) {
 8004594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004598:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d108      	bne.n	80045b4 <LOG+0xb8>

        strcat((char *)logMessage, (char *)warningTypeLabel);
 80045a2:	4b18      	ldr	r3, [pc, #96]	@ (8004604 <LOG+0x108>)
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	f107 0308 	add.w	r3, r7, #8
 80045aa:	4611      	mov	r1, r2
 80045ac:	4618      	mov	r0, r3
 80045ae:	f00c fd04 	bl	8010fba <strcat>
 80045b2:	e00e      	b.n	80045d2 <LOG+0xd6>
    } else if (LOG_ERROR == logType) {
 80045b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045b8:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	2b03      	cmp	r3, #3
 80045c0:	d107      	bne.n	80045d2 <LOG+0xd6>

        strcat((char *)logMessage, (char *)errorTypeLabel);
 80045c2:	4b11      	ldr	r3, [pc, #68]	@ (8004608 <LOG+0x10c>)
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	f107 0308 	add.w	r3, r7, #8
 80045ca:	4611      	mov	r1, r2
 80045cc:	4618      	mov	r0, r3
 80045ce:	f00c fcf4 	bl	8010fba <strcat>
    }

    strcat((char *)logMessage, (char *)message);
 80045d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80045da:	f107 0208 	add.w	r2, r7, #8
 80045de:	6819      	ldr	r1, [r3, #0]
 80045e0:	4610      	mov	r0, r2
 80045e2:	f00c fcea 	bl	8010fba <strcat>

    /* Send message through USB port */
    USB_Write(logMessage);
 80045e6:	f107 0308 	add.w	r3, r7, #8
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7ff ff74 	bl	80044d8 <USB_Write>

    return true;
 80045f0:	2301      	movs	r3, #1
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	20000020 	.word	0x20000020
 8004600:	20000024 	.word	0x20000024
 8004604:	20000028 	.word	0x20000028
 8004608:	2000002c 	.word	0x2000002c

0800460c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004610:	4b0e      	ldr	r3, [pc, #56]	@ (800464c <HAL_Init+0x40>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a0d      	ldr	r2, [pc, #52]	@ (800464c <HAL_Init+0x40>)
 8004616:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800461a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800461c:	4b0b      	ldr	r3, [pc, #44]	@ (800464c <HAL_Init+0x40>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a0a      	ldr	r2, [pc, #40]	@ (800464c <HAL_Init+0x40>)
 8004622:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004626:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004628:	4b08      	ldr	r3, [pc, #32]	@ (800464c <HAL_Init+0x40>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a07      	ldr	r2, [pc, #28]	@ (800464c <HAL_Init+0x40>)
 800462e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004632:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004634:	2003      	movs	r0, #3
 8004636:	f000 fd13 	bl	8005060 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800463a:	200f      	movs	r0, #15
 800463c:	f000 f808 	bl	8004650 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004640:	f7fe f8f4 	bl	800282c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	40023c00 	.word	0x40023c00

08004650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004658:	4b12      	ldr	r3, [pc, #72]	@ (80046a4 <HAL_InitTick+0x54>)
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	4b12      	ldr	r3, [pc, #72]	@ (80046a8 <HAL_InitTick+0x58>)
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	4619      	mov	r1, r3
 8004662:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004666:	fbb3 f3f1 	udiv	r3, r3, r1
 800466a:	fbb2 f3f3 	udiv	r3, r2, r3
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fd2f 	bl	80050d2 <HAL_SYSTICK_Config>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e00e      	b.n	800469c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b0f      	cmp	r3, #15
 8004682:	d80a      	bhi.n	800469a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004684:	2200      	movs	r2, #0
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	f04f 30ff 	mov.w	r0, #4294967295
 800468c:	f000 fcf3 	bl	8005076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004690:	4a06      	ldr	r2, [pc, #24]	@ (80046ac <HAL_InitTick+0x5c>)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004696:	2300      	movs	r3, #0
 8004698:	e000      	b.n	800469c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
}
 800469c:	4618      	mov	r0, r3
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	2000000c 	.word	0x2000000c
 80046a8:	20000034 	.word	0x20000034
 80046ac:	20000030 	.word	0x20000030

080046b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046b4:	4b06      	ldr	r3, [pc, #24]	@ (80046d0 <HAL_IncTick+0x20>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	461a      	mov	r2, r3
 80046ba:	4b06      	ldr	r3, [pc, #24]	@ (80046d4 <HAL_IncTick+0x24>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4413      	add	r3, r2
 80046c0:	4a04      	ldr	r2, [pc, #16]	@ (80046d4 <HAL_IncTick+0x24>)
 80046c2:	6013      	str	r3, [r2, #0]
}
 80046c4:	bf00      	nop
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	20000034 	.word	0x20000034
 80046d4:	20000c74 	.word	0x20000c74

080046d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0
  return uwTick;
 80046dc:	4b03      	ldr	r3, [pc, #12]	@ (80046ec <HAL_GetTick+0x14>)
 80046de:	681b      	ldr	r3, [r3, #0]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	20000c74 	.word	0x20000c74

080046f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046f8:	f7ff ffee 	bl	80046d8 <HAL_GetTick>
 80046fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004708:	d005      	beq.n	8004716 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800470a:	4b0a      	ldr	r3, [pc, #40]	@ (8004734 <HAL_Delay+0x44>)
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	461a      	mov	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4413      	add	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004716:	bf00      	nop
 8004718:	f7ff ffde 	bl	80046d8 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	429a      	cmp	r2, r3
 8004726:	d8f7      	bhi.n	8004718 <HAL_Delay+0x28>
  {
  }
}
 8004728:	bf00      	nop
 800472a:	bf00      	nop
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	20000034 	.word	0x20000034

08004738 <HAL_ADC_Init>:
 *
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef * hadc) {
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004740:	2300      	movs	r3, #0
 8004742:	73fb      	strb	r3, [r7, #15]

    /* Check ADC handle */
    if (hadc == NULL) {
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_ADC_Init+0x16>
        return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e033      	b.n	80047b6 <HAL_ADC_Init+0x7e>

    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START) {
        assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
    }

    if (hadc->State == HAL_ADC_STATE_RESET) {
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004752:	2b00      	cmp	r3, #0
 8004754:	d109      	bne.n	800476a <HAL_ADC_Init+0x32>

        /* Init the low level hardware */
        hadc->MspInitCallback(hadc);
#else
        /* Init the low level hardware */
        HAL_ADC_MspInit(hadc);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7fe f894 	bl	8002884 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

        /* Initialize ADC error code */
        ADC_CLEAR_ERRORCODE(hadc);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Allocate lock resource and initialize it */
        hadc->Lock = HAL_UNLOCKED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    /* Configuration of ADC parameters if previous preliminary actions are      */
    /* correctly completed.                                                     */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL)) {
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476e:	f003 0310 	and.w	r3, r3, #16
 8004772:	2b00      	cmp	r3, #0
 8004774:	d118      	bne.n	80047a8 <HAL_ADC_Init+0x70>
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY, HAL_ADC_STATE_BUSY_INTERNAL);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800477e:	f023 0302 	bic.w	r3, r3, #2
 8004782:	f043 0202 	orr.w	r2, r3, #2
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set ADC parameters */
        ADC_Init(hadc);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 fa86 	bl	8004c9c <ADC_Init>

        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479a:	f023 0303 	bic.w	r3, r3, #3
 800479e:	f043 0201 	orr.w	r2, r3, #1
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80047a6:	e001      	b.n	80047ac <HAL_ADC_Init+0x74>
    } else {
        tmp_hal_status = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	73fb      	strb	r3, [r7, #15]
    }

    /* Release Lock */
    __HAL_UNLOCK(hadc);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return function status */
    return tmp_hal_status;
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
	...

080047c0 <HAL_ADC_Start>:
 * @brief  Enables ADC and starts conversion of the regular channels.
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef * hadc) {
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
    __IO uint32_t counter = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	60bb      	str	r3, [r7, #8]
    /* Check the parameters */
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

    /* Process locked */
    __HAL_LOCK(hadc);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d101      	bne.n	80047da <HAL_ADC_Start+0x1a>
 80047d6:	2302      	movs	r3, #2
 80047d8:	e097      	b.n	800490a <HAL_ADC_Start+0x14a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the ADC peripheral */
    /* Check if ADC peripheral is disabled in order to enable it and wait during
    Tstab time the ADC's stabilization */
    if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d018      	beq.n	8004822 <HAL_ADC_Start+0x62>
        /* Enable the Peripheral */
        __HAL_ADC_ENABLE(hadc);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689a      	ldr	r2, [r3, #8]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0201 	orr.w	r2, r2, #1
 80047fe:	609a      	str	r2, [r3, #8]

        /* Delay for ADC stabilization time */
        /* Compute number of CPU cycles to wait for */
        counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004800:	4b45      	ldr	r3, [pc, #276]	@ (8004918 <HAL_ADC_Start+0x158>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a45      	ldr	r2, [pc, #276]	@ (800491c <HAL_ADC_Start+0x15c>)
 8004806:	fba2 2303 	umull	r2, r3, r2, r3
 800480a:	0c9a      	lsrs	r2, r3, #18
 800480c:	4613      	mov	r3, r2
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	4413      	add	r3, r2
 8004812:	60bb      	str	r3, [r7, #8]
        while (counter != 0U) {
 8004814:	e002      	b.n	800481c <HAL_ADC_Start+0x5c>
            counter--;
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	3b01      	subs	r3, #1
 800481a:	60bb      	str	r3, [r7, #8]
        while (counter != 0U) {
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1f9      	bne.n	8004816 <HAL_ADC_Start+0x56>
        }
    }

    /* Start conversion if ADC is effectively enabled */
    if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON)) {
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b01      	cmp	r3, #1
 800482e:	d15f      	bne.n	80048f0 <HAL_ADC_Start+0x130>
        /* Set ADC state                                                          */
        /* - Clear state bitfield related to regular group conversion results     */
        /* - Set state bitfield related to regular group operation                */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR, HAL_ADC_STATE_REG_BUSY);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004834:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004838:	f023 0301 	bic.w	r3, r3, #1
 800483c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	641a      	str	r2, [r3, #64]	@ 0x40

        /* If conversions on group regular are also triggering group injected,    */
        /* update ADC state.                                                      */
        if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET) {
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800484e:	2b00      	cmp	r3, #0
 8004850:	d007      	beq.n	8004862 <HAL_ADC_Start+0xa2>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004856:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800485a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	641a      	str	r2, [r3, #64]	@ 0x40
        }

        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004866:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800486a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800486e:	d106      	bne.n	800487e <HAL_ADC_Start+0xbe>
            /* Reset ADC error code fields related to conversions on group regular */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004874:	f023 0206 	bic.w	r2, r3, #6
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	645a      	str	r2, [r3, #68]	@ 0x44
 800487c:	e002      	b.n	8004884 <HAL_ADC_Start+0xc4>
        } else {
            /* Reset ADC all error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential           */
        /* interruption, to let the process to ADC IRQ Handler.                   */
        __HAL_UNLOCK(hadc);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Pointer to the common control register to which is belonging hadc    */
        /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
        /* control register)                                                    */
        tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800488c:	4b24      	ldr	r3, [pc, #144]	@ (8004920 <HAL_ADC_Start+0x160>)
 800488e:	60fb      	str	r3, [r7, #12]

        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC operations) */
        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004898:	601a      	str	r2, [r3, #0]

        /* Check if Multimode enabled */
        if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI)) {
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f003 031f 	and.w	r3, r3, #31
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10f      	bne.n	80048c6 <HAL_ADC_Start+0x106>
#if defined(ADC2) && defined(ADC3)
            if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4))) {
#endif /* ADC2 || ADC3 */
                /* if no external trigger present enable software conversion of regular channels */
                if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) {
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d129      	bne.n	8004908 <HAL_ADC_Start+0x148>
                    /* Enable the selected ADC software conversion for regular group */
                    hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689a      	ldr	r2, [r3, #8]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80048c2:	609a      	str	r2, [r3, #8]
 80048c4:	e020      	b.n	8004908 <HAL_ADC_Start+0x148>
#if defined(ADC2) && defined(ADC3)
            }
#endif /* ADC2 || ADC3 */
        } else {
            /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
            if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)) {
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a16      	ldr	r2, [pc, #88]	@ (8004924 <HAL_ADC_Start+0x164>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d11b      	bne.n	8004908 <HAL_ADC_Start+0x148>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d114      	bne.n	8004908 <HAL_ADC_Start+0x148>
                /* Enable the selected ADC software conversion for regular group */
                hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80048ec:	609a      	str	r2, [r3, #8]
 80048ee:	e00b      	b.n	8004908 <HAL_ADC_Start+0x148>
            }
        }
    } else {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f4:	f043 0210 	orr.w	r2, r3, #16
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004900:	f043 0201 	orr.w	r2, r3, #1
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Return function status */
    return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	2000000c 	.word	0x2000000c
 800491c:	431bde83 	.word	0x431bde83
 8004920:	40012300 	.word	0x40012300
 8004924:	40012000 	.word	0x40012000

08004928 <HAL_ADC_PollForConversion>:
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @param  Timeout Timeout value in millisecond.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef * hadc, uint32_t Timeout) {
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
    uint32_t tickstart = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	60fb      	str	r3, [r7, #12]
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and polling for end of each conversion.     */
    if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) && HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)) {
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004940:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004944:	d113      	bne.n	800496e <HAL_ADC_PollForConversion+0x46>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004950:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004954:	d10b      	bne.n	800496e <HAL_ADC_PollForConversion+0x46>
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495a:	f043 0220 	orr.w	r2, r3, #32
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e063      	b.n	8004a36 <HAL_ADC_PollForConversion+0x10e>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 800496e:	f7ff feb3 	bl	80046d8 <HAL_GetTick>
 8004972:	60f8      	str	r0, [r7, #12]

    /* Check End of conversion flag */
    while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC))) {
 8004974:	e021      	b.n	80049ba <HAL_ADC_PollForConversion+0x92>
        /* Check if timeout is disabled (set to infinite wait) */
        if (Timeout != HAL_MAX_DELAY) {
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497c:	d01d      	beq.n	80049ba <HAL_ADC_PollForConversion+0x92>
            if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout)) {
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d007      	beq.n	8004994 <HAL_ADC_PollForConversion+0x6c>
 8004984:	f7ff fea8 	bl	80046d8 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d212      	bcs.n	80049ba <HAL_ADC_PollForConversion+0x92>
                /* New check to avoid false timeout detection in case of preemption */
                if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC))) {
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d00b      	beq.n	80049ba <HAL_ADC_PollForConversion+0x92>
                    /* Update ADC state machine to timeout */
                    SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a6:	f043 0204 	orr.w	r2, r3, #4
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	641a      	str	r2, [r3, #64]	@ 0x40

                    /* Process unlocked */
                    __HAL_UNLOCK(hadc);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

                    return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e03d      	b.n	8004a36 <HAL_ADC_PollForConversion+0x10e>
    while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC))) {
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d1d6      	bne.n	8004976 <HAL_ADC_PollForConversion+0x4e>
            }
        }
    }

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f06f 0212 	mvn.w	r2, #18
 80049d0:	601a      	str	r2, [r3, #0]

    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.          */
    /* Note: On STM32F4, there is no independent flag of end of sequence.       */
    /*       The test of scan sequence on going is done either with scan        */
    /*       sequence disabled or with end of conversion flag set to            */
    /*       of end of sequence.                                                */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc) && (hadc->Init.ContinuousConvMode == DISABLE) && (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS))) {
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d123      	bne.n	8004a34 <HAL_ADC_PollForConversion+0x10c>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	7e1b      	ldrb	r3, [r3, #24]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d11f      	bne.n	8004a34 <HAL_ADC_PollForConversion+0x10c>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049fa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d006      	beq.n	8004a10 <HAL_ADC_PollForConversion+0xe8>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d111      	bne.n	8004a34 <HAL_ADC_PollForConversion+0x10c>
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	641a      	str	r2, [r3, #64]	@ 0x40

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d105      	bne.n	8004a34 <HAL_ADC_PollForConversion+0x10c>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2c:	f043 0201 	orr.w	r2, r3, #1
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	641a      	str	r2, [r3, #64]	@ 0x40
        }
    }

    /* Return ADC state */
    return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <HAL_ADC_GetValue>:
 * @brief  Gets the converted value from data register of regular channel.
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @retval Converted value
 */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef * hadc) {
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
    /* Return the selected ADC converted value */
    return hadc->Instance->DR;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_ADC_ConfigChannel>:
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @param  sConfig ADC configuration structure.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef * hadc, ADC_ChannelConfTypeDef * sConfig) {
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
    __IO uint32_t counter = 0U;
 8004a62:	2300      	movs	r3, #0
 8004a64:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

    /* Process locked */
    __HAL_LOCK(hadc);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d101      	bne.n	8004a74 <HAL_ADC_ConfigChannel+0x1c>
 8004a70:	2302      	movs	r3, #2
 8004a72:	e105      	b.n	8004c80 <HAL_ADC_ConfigChannel+0x228>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
    if (sConfig->Channel > ADC_CHANNEL_9) {
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b09      	cmp	r3, #9
 8004a82:	d925      	bls.n	8004ad0 <HAL_ADC_ConfigChannel+0x78>
        /* Clear the old sample time */
        hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68d9      	ldr	r1, [r3, #12]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	461a      	mov	r2, r3
 8004a92:	4613      	mov	r3, r2
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	4413      	add	r3, r2
 8004a98:	3b1e      	subs	r3, #30
 8004a9a:	2207      	movs	r2, #7
 8004a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa0:	43da      	mvns	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	400a      	ands	r2, r1
 8004aa8:	60da      	str	r2, [r3, #12]

        /* Set the new sample time */
        hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68d9      	ldr	r1, [r3, #12]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	4618      	mov	r0, r3
 8004abc:	4603      	mov	r3, r0
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	4403      	add	r3, r0
 8004ac2:	3b1e      	subs	r3, #30
 8004ac4:	409a      	lsls	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	60da      	str	r2, [r3, #12]
 8004ace:	e022      	b.n	8004b16 <HAL_ADC_ConfigChannel+0xbe>
    } else /* ADC_Channel include in ADC_Channel_[0..9] */
    {
        /* Clear the old sample time */
        hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6919      	ldr	r1, [r3, #16]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	461a      	mov	r2, r3
 8004ade:	4613      	mov	r3, r2
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	4413      	add	r3, r2
 8004ae4:	2207      	movs	r2, #7
 8004ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aea:	43da      	mvns	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	400a      	ands	r2, r1
 8004af2:	611a      	str	r2, [r3, #16]

        /* Set the new sample time */
        hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6919      	ldr	r1, [r3, #16]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	689a      	ldr	r2, [r3, #8]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	4618      	mov	r0, r3
 8004b06:	4603      	mov	r3, r0
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	4403      	add	r3, r0
 8004b0c:	409a      	lsls	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	611a      	str	r2, [r3, #16]
    }

    /* For Rank 1 to 6 */
    if (sConfig->Rank < 7U) {
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b06      	cmp	r3, #6
 8004b1c:	d824      	bhi.n	8004b68 <HAL_ADC_ConfigChannel+0x110>
        /* Clear the old SQx bits for the selected rank */
        hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	3b05      	subs	r3, #5
 8004b30:	221f      	movs	r2, #31
 8004b32:	fa02 f303 	lsl.w	r3, r2, r3
 8004b36:	43da      	mvns	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	400a      	ands	r2, r1
 8004b3e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the SQx bits for the selected rank */
        hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	4613      	mov	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	3b05      	subs	r3, #5
 8004b5a:	fa00 f203 	lsl.w	r2, r0, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b66:	e04c      	b.n	8004c02 <HAL_ADC_ConfigChannel+0x1aa>
    }
    /* For Rank 7 to 12 */
    else if (sConfig->Rank < 13U) {
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	2b0c      	cmp	r3, #12
 8004b6e:	d824      	bhi.n	8004bba <HAL_ADC_ConfigChannel+0x162>
        /* Clear the old SQx bits for the selected rank */
        hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	3b23      	subs	r3, #35	@ 0x23
 8004b82:	221f      	movs	r2, #31
 8004b84:	fa02 f303 	lsl.w	r3, r2, r3
 8004b88:	43da      	mvns	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	400a      	ands	r2, r1
 8004b90:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the SQx bits for the selected rank */
        hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	3b23      	subs	r3, #35	@ 0x23
 8004bac:	fa00 f203 	lsl.w	r2, r0, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	631a      	str	r2, [r3, #48]	@ 0x30
 8004bb8:	e023      	b.n	8004c02 <HAL_ADC_ConfigChannel+0x1aa>
    }
    /* For Rank 13 to 16 */
    else {
        /* Clear the old SQx bits for the selected rank */
        hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	3b41      	subs	r3, #65	@ 0x41
 8004bcc:	221f      	movs	r2, #31
 8004bce:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd2:	43da      	mvns	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	400a      	ands	r2, r1
 8004bda:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the SQx bits for the selected rank */
        hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	4618      	mov	r0, r3
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	3b41      	subs	r3, #65	@ 0x41
 8004bf6:	fa00 f203 	lsl.w	r2, r0, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c02:	4b22      	ldr	r3, [pc, #136]	@ (8004c8c <HAL_ADC_ConfigChannel+0x234>)
 8004c04:	60fb      	str	r3, [r7, #12]

    /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
    if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT)) {
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a21      	ldr	r2, [pc, #132]	@ (8004c90 <HAL_ADC_ConfigChannel+0x238>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d109      	bne.n	8004c24 <HAL_ADC_ConfigChannel+0x1cc>
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b12      	cmp	r3, #18
 8004c16:	d105      	bne.n	8004c24 <HAL_ADC_ConfigChannel+0x1cc>
        /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
        if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT) {
            tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
        }
        /* Enable the VBAT channel*/
        tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	605a      	str	r2, [r3, #4]
    }

    /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
       Channel_17 is selected for VREFINT enable TSVREFE */
    if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT))) {
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a19      	ldr	r2, [pc, #100]	@ (8004c90 <HAL_ADC_ConfigChannel+0x238>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d123      	bne.n	8004c76 <HAL_ADC_ConfigChannel+0x21e>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2b10      	cmp	r3, #16
 8004c34:	d003      	beq.n	8004c3e <HAL_ADC_ConfigChannel+0x1e6>
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2b11      	cmp	r3, #17
 8004c3c:	d11b      	bne.n	8004c76 <HAL_ADC_ConfigChannel+0x21e>
        /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
        if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT) {
            tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
        }
        /* Enable the Temperature sensor and VREFINT channel*/
        tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	605a      	str	r2, [r3, #4]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) {
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b10      	cmp	r3, #16
 8004c50:	d111      	bne.n	8004c76 <HAL_ADC_ConfigChannel+0x21e>
            /* Delay for temperature sensor stabilization time */
            /* Compute number of CPU cycles to wait for */
            counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004c52:	4b10      	ldr	r3, [pc, #64]	@ (8004c94 <HAL_ADC_ConfigChannel+0x23c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a10      	ldr	r2, [pc, #64]	@ (8004c98 <HAL_ADC_ConfigChannel+0x240>)
 8004c58:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5c:	0c9a      	lsrs	r2, r3, #18
 8004c5e:	4613      	mov	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	60bb      	str	r3, [r7, #8]
            while (counter != 0U) {
 8004c68:	e002      	b.n	8004c70 <HAL_ADC_ConfigChannel+0x218>
                counter--;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	60bb      	str	r3, [r7, #8]
            while (counter != 0U) {
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1f9      	bne.n	8004c6a <HAL_ADC_ConfigChannel+0x212>
            }
        }
    }

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return function status */
    return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	40012300 	.word	0x40012300
 8004c90:	40012000 	.word	0x40012000
 8004c94:	2000000c 	.word	0x2000000c
 8004c98:	431bde83 	.word	0x431bde83

08004c9c <ADC_Init>:
 *         in the ADC_InitStruct without initializing the ADC MSP.
 * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 *         the configuration information for the specified ADC.
 * @retval None
 */
static void ADC_Init(ADC_HandleTypeDef * hadc) {
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]

    /* Set ADC parameters */
    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ca4:	4b79      	ldr	r3, [pc, #484]	@ (8004e8c <ADC_Init+0x1f0>)
 8004ca6:	60fb      	str	r3, [r7, #12]

    /* Set the ADC clock prescaler */
    tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= hadc->Init.ClockPrescaler;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	605a      	str	r2, [r3, #4]

    /* Set ADC scan mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004cd0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |= ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6859      	ldr	r1, [r3, #4]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	021a      	lsls	r2, r3, #8
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	605a      	str	r2, [r3, #4]

    /* Set ADC resolution */
    hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004cf4:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |= hadc->Init.Resolution;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	6859      	ldr	r1, [r3, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	605a      	str	r2, [r3, #4]

    /* Set ADC data alignment */
    hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d16:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6899      	ldr	r1, [r3, #8]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68da      	ldr	r2, [r3, #12]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	609a      	str	r2, [r3, #8]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START) {
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2e:	4a58      	ldr	r2, [pc, #352]	@ (8004e90 <ADC_Init+0x1f4>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d022      	beq.n	8004d7a <ADC_Init+0xde>
        /* Select external trigger to start conversion */
        hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689a      	ldr	r2, [r3, #8]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004d42:	609a      	str	r2, [r3, #8]
        hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6899      	ldr	r1, [r3, #8]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	609a      	str	r2, [r3, #8]

        /* Select external trigger polarity */
        hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004d64:	609a      	str	r2, [r3, #8]
        hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6899      	ldr	r1, [r3, #8]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	609a      	str	r2, [r3, #8]
 8004d78:	e00f      	b.n	8004d9a <ADC_Init+0xfe>
    } else {
        /* Reset the external trigger */
        hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004d88:	609a      	str	r2, [r3, #8]
        hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004d98:	609a      	str	r2, [r3, #8]
    }

    /* Enable or disable ADC continuous conversion mode */
    hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f022 0202 	bic.w	r2, r2, #2
 8004da8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6899      	ldr	r1, [r3, #8]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	7e1b      	ldrb	r3, [r3, #24]
 8004db4:	005a      	lsls	r2, r3, #1
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	609a      	str	r2, [r3, #8]

    if (hadc->Init.DiscontinuousConvMode != DISABLE) {
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d01b      	beq.n	8004e00 <ADC_Init+0x164>
        assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

        /* Enable the selected ADC regular discontinuous mode */
        hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dd6:	605a      	str	r2, [r3, #4]

        /* Set the number of channels to be converted in discontinuous mode */
        hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004de6:	605a      	str	r2, [r3, #4]
        hadc->Instance->CR1 |= ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6859      	ldr	r1, [r3, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df2:	3b01      	subs	r3, #1
 8004df4:	035a      	lsls	r2, r3, #13
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	605a      	str	r2, [r3, #4]
 8004dfe:	e007      	b.n	8004e10 <ADC_Init+0x174>
    } else {
        /* Disable the selected ADC regular discontinuous mode */
        hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e0e:	605a      	str	r2, [r3, #4]
    }

    /* Set ADC number of conversion */
    hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004e1e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1(hadc->Init.NbrOfConversion);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	051a      	lsls	r2, r3, #20
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable or disable ADC DMA continuous request */
    hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004e44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6899      	ldr	r1, [r3, #8]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004e52:	025a      	lsls	r2, r3, #9
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	609a      	str	r2, [r3, #8]

    /* Enable or disable ADC end of conversion selection */
    hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	689a      	ldr	r2, [r3, #8]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6899      	ldr	r1, [r3, #8]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	029a      	lsls	r2, r3, #10
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	609a      	str	r2, [r3, #8]
}
 8004e80:	bf00      	nop
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	40012300 	.word	0x40012300
 8004e90:	0f000001 	.word	0x0f000001

08004e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f003 0307 	and.w	r3, r3, #7
 8004ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ebc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ec0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ec6:	4a04      	ldr	r2, [pc, #16]	@ (8004ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	60d3      	str	r3, [r2, #12]
}
 8004ecc:	bf00      	nop
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	e000ed00 	.word	0xe000ed00

08004edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ee0:	4b04      	ldr	r3, [pc, #16]	@ (8004ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	0a1b      	lsrs	r3, r3, #8
 8004ee6:	f003 0307 	and.w	r3, r3, #7
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr
 8004ef4:	e000ed00 	.word	0xe000ed00

08004ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	4603      	mov	r3, r0
 8004f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	db0b      	blt.n	8004f22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f0a:	79fb      	ldrb	r3, [r7, #7]
 8004f0c:	f003 021f 	and.w	r2, r3, #31
 8004f10:	4907      	ldr	r1, [pc, #28]	@ (8004f30 <__NVIC_EnableIRQ+0x38>)
 8004f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f16:	095b      	lsrs	r3, r3, #5
 8004f18:	2001      	movs	r0, #1
 8004f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8004f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	e000e100 	.word	0xe000e100

08004f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	6039      	str	r1, [r7, #0]
 8004f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	db0a      	blt.n	8004f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	b2da      	uxtb	r2, r3
 8004f4c:	490c      	ldr	r1, [pc, #48]	@ (8004f80 <__NVIC_SetPriority+0x4c>)
 8004f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f52:	0112      	lsls	r2, r2, #4
 8004f54:	b2d2      	uxtb	r2, r2
 8004f56:	440b      	add	r3, r1
 8004f58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f5c:	e00a      	b.n	8004f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	b2da      	uxtb	r2, r3
 8004f62:	4908      	ldr	r1, [pc, #32]	@ (8004f84 <__NVIC_SetPriority+0x50>)
 8004f64:	79fb      	ldrb	r3, [r7, #7]
 8004f66:	f003 030f 	and.w	r3, r3, #15
 8004f6a:	3b04      	subs	r3, #4
 8004f6c:	0112      	lsls	r2, r2, #4
 8004f6e:	b2d2      	uxtb	r2, r2
 8004f70:	440b      	add	r3, r1
 8004f72:	761a      	strb	r2, [r3, #24]
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	e000e100 	.word	0xe000e100
 8004f84:	e000ed00 	.word	0xe000ed00

08004f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b089      	sub	sp, #36	@ 0x24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f003 0307 	and.w	r3, r3, #7
 8004f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	f1c3 0307 	rsb	r3, r3, #7
 8004fa2:	2b04      	cmp	r3, #4
 8004fa4:	bf28      	it	cs
 8004fa6:	2304      	movcs	r3, #4
 8004fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	3304      	adds	r3, #4
 8004fae:	2b06      	cmp	r3, #6
 8004fb0:	d902      	bls.n	8004fb8 <NVIC_EncodePriority+0x30>
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	3b03      	subs	r3, #3
 8004fb6:	e000      	b.n	8004fba <NVIC_EncodePriority+0x32>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc6:	43da      	mvns	r2, r3
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	401a      	ands	r2, r3
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fda:	43d9      	mvns	r1, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fe0:	4313      	orrs	r3, r2
         );
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3724      	adds	r7, #36	@ 0x24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
	...

08004ff0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004ff4:	f3bf 8f4f 	dsb	sy
}
 8004ff8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004ffa:	4b06      	ldr	r3, [pc, #24]	@ (8005014 <__NVIC_SystemReset+0x24>)
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005002:	4904      	ldr	r1, [pc, #16]	@ (8005014 <__NVIC_SystemReset+0x24>)
 8005004:	4b04      	ldr	r3, [pc, #16]	@ (8005018 <__NVIC_SystemReset+0x28>)
 8005006:	4313      	orrs	r3, r2
 8005008:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800500a:	f3bf 8f4f 	dsb	sy
}
 800500e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005010:	bf00      	nop
 8005012:	e7fd      	b.n	8005010 <__NVIC_SystemReset+0x20>
 8005014:	e000ed00 	.word	0xe000ed00
 8005018:	05fa0004 	.word	0x05fa0004

0800501c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	3b01      	subs	r3, #1
 8005028:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800502c:	d301      	bcc.n	8005032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800502e:	2301      	movs	r3, #1
 8005030:	e00f      	b.n	8005052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005032:	4a0a      	ldr	r2, [pc, #40]	@ (800505c <SysTick_Config+0x40>)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3b01      	subs	r3, #1
 8005038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800503a:	210f      	movs	r1, #15
 800503c:	f04f 30ff 	mov.w	r0, #4294967295
 8005040:	f7ff ff78 	bl	8004f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005044:	4b05      	ldr	r3, [pc, #20]	@ (800505c <SysTick_Config+0x40>)
 8005046:	2200      	movs	r2, #0
 8005048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800504a:	4b04      	ldr	r3, [pc, #16]	@ (800505c <SysTick_Config+0x40>)
 800504c:	2207      	movs	r2, #7
 800504e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	e000e010 	.word	0xe000e010

08005060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7ff ff13 	bl	8004e94 <__NVIC_SetPriorityGrouping>
}
 800506e:	bf00      	nop
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b086      	sub	sp, #24
 800507a:	af00      	add	r7, sp, #0
 800507c:	4603      	mov	r3, r0
 800507e:	60b9      	str	r1, [r7, #8]
 8005080:	607a      	str	r2, [r7, #4]
 8005082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005084:	2300      	movs	r3, #0
 8005086:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005088:	f7ff ff28 	bl	8004edc <__NVIC_GetPriorityGrouping>
 800508c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	68b9      	ldr	r1, [r7, #8]
 8005092:	6978      	ldr	r0, [r7, #20]
 8005094:	f7ff ff78 	bl	8004f88 <NVIC_EncodePriority>
 8005098:	4602      	mov	r2, r0
 800509a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800509e:	4611      	mov	r1, r2
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7ff ff47 	bl	8004f34 <__NVIC_SetPriority>
}
 80050a6:	bf00      	nop
 80050a8:	3718      	adds	r7, #24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b082      	sub	sp, #8
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	4603      	mov	r3, r0
 80050b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050bc:	4618      	mov	r0, r3
 80050be:	f7ff ff1b 	bl	8004ef8 <__NVIC_EnableIRQ>
}
 80050c2:	bf00      	nop
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80050ce:	f7ff ff8f 	bl	8004ff0 <__NVIC_SystemReset>

080050d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b082      	sub	sp, #8
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7ff ff9e 	bl	800501c <SysTick_Config>
 80050e0:	4603      	mov	r3, r0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80050f8:	f7ff faee 	bl	80046d8 <HAL_GetTick>
 80050fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e099      	b.n	800523c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0201 	bic.w	r2, r2, #1
 8005126:	601a      	str	r2, [r3, #0]

  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005128:	e00f      	b.n	800514a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800512a:	f7ff fad5 	bl	80046d8 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b05      	cmp	r3, #5
 8005136:	d908      	bls.n	800514a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2220      	movs	r2, #32
 800513c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2203      	movs	r2, #3
 8005142:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e078      	b.n	800523c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0301 	and.w	r3, r3, #1
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1e8      	bne.n	800512a <HAL_DMA_Init+0x3e>
    }
  }

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	4b38      	ldr	r3, [pc, #224]	@ (8005244 <HAL_DMA_Init+0x158>)
 8005164:	4013      	ands	r3, r2
 8005166:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005176:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005182:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800518e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a1b      	ldr	r3, [r3, #32]
 8005194:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	4313      	orrs	r3, r2
 800519a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a0:	2b04      	cmp	r3, #4
 80051a2:	d107      	bne.n	80051b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ac:	4313      	orrs	r3, r2
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	f023 0307 	bic.w	r3, r3, #7
 80051ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051da:	2b04      	cmp	r3, #4
 80051dc:	d117      	bne.n	800520e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	617b      	str	r3, [r7, #20]

    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00e      	beq.n	800520e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f8e5 	bl	80053c0 <DMA_CheckFifoParam>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d008      	beq.n	800520e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2240      	movs	r2, #64	@ 0x40
 8005200:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e016      	b.n	800523c <HAL_DMA_Init+0x150>
      }
    }
  }

  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f89c 	bl	8005354 <DMA_CalcBaseAndBitshift>
 800521c:	4603      	mov	r3, r0
 800521e:	60fb      	str	r3, [r7, #12]

  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005224:	223f      	movs	r2, #63	@ 0x3f
 8005226:	409a      	lsls	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3718      	adds	r7, #24
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	f010803f 	.word	0xf010803f

08005248 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
 8005254:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005256:	2300      	movs	r3, #0
 8005258:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800525e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005266:	2b01      	cmp	r3, #1
 8005268:	d101      	bne.n	800526e <HAL_DMA_Start_IT+0x26>
 800526a:	2302      	movs	r3, #2
 800526c:	e040      	b.n	80052f0 <HAL_DMA_Start_IT+0xa8>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b01      	cmp	r3, #1
 8005280:	d12f      	bne.n	80052e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2202      	movs	r2, #2
 8005286:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	68b9      	ldr	r1, [r7, #8]
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f000 f82e 	bl	80052f8 <DMA_SetConfig>

    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052a0:	223f      	movs	r2, #63	@ 0x3f
 80052a2:	409a      	lsls	r2, r3
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	609a      	str	r2, [r3, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0216 	orr.w	r2, r2, #22
 80052b6:	601a      	str	r2, [r3, #0]

    if(hdma->XferHalfCpltCallback != NULL)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d007      	beq.n	80052d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 0208 	orr.w	r2, r2, #8
 80052ce:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0201 	orr.w	r2, r2, #1
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	e005      	b.n	80052ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_BUSY;
 80052ea:	2302      	movs	r3, #2
 80052ec:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80052ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3718      	adds	r7, #24
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
 8005304:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005314:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	683a      	ldr	r2, [r7, #0]
 800531c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	2b40      	cmp	r3, #64	@ 0x40
 8005324:	d108      	bne.n	8005338 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005336:	e007      	b.n	8005348 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	60da      	str	r2, [r3, #12]
}
 8005348:	bf00      	nop
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	b2db      	uxtb	r3, r3
 8005362:	3b10      	subs	r3, #16
 8005364:	4a14      	ldr	r2, [pc, #80]	@ (80053b8 <DMA_CalcBaseAndBitshift+0x64>)
 8005366:	fba2 2303 	umull	r2, r3, r2, r3
 800536a:	091b      	lsrs	r3, r3, #4
 800536c:	60fb      	str	r3, [r7, #12]

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800536e:	4a13      	ldr	r2, [pc, #76]	@ (80053bc <DMA_CalcBaseAndBitshift+0x68>)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	4413      	add	r3, r2
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	461a      	mov	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (stream_number > 3U)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2b03      	cmp	r3, #3
 8005380:	d909      	bls.n	8005396 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800538a:	f023 0303 	bic.w	r3, r3, #3
 800538e:	1d1a      	adds	r2, r3, #4
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	659a      	str	r2, [r3, #88]	@ 0x58
 8005394:	e007      	b.n	80053a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800539e:	f023 0303 	bic.w	r3, r3, #3
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	aaaaaaab 	.word	0xaaaaaaab
 80053bc:	080136d4 	.word	0x080136d4

080053c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053c8:	2300      	movs	r3, #0
 80053ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d0:	60bb      	str	r3, [r7, #8]

  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d11f      	bne.n	800541a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	2b03      	cmp	r3, #3
 80053de:	d856      	bhi.n	800548e <DMA_CheckFifoParam+0xce>
 80053e0:	a201      	add	r2, pc, #4	@ (adr r2, 80053e8 <DMA_CheckFifoParam+0x28>)
 80053e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e6:	bf00      	nop
 80053e8:	080053f9 	.word	0x080053f9
 80053ec:	0800540b 	.word	0x0800540b
 80053f0:	080053f9 	.word	0x080053f9
 80053f4:	0800548f 	.word	0x0800548f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d046      	beq.n	8005492 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005408:	e043      	b.n	8005492 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005412:	d140      	bne.n	8005496 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005418:	e03d      	b.n	8005496 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005422:	d121      	bne.n	8005468 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2b03      	cmp	r3, #3
 8005428:	d837      	bhi.n	800549a <DMA_CheckFifoParam+0xda>
 800542a:	a201      	add	r2, pc, #4	@ (adr r2, 8005430 <DMA_CheckFifoParam+0x70>)
 800542c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005430:	08005441 	.word	0x08005441
 8005434:	08005447 	.word	0x08005447
 8005438:	08005441 	.word	0x08005441
 800543c:	08005459 	.word	0x08005459
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	73fb      	strb	r3, [r7, #15]
      break;
 8005444:	e030      	b.n	80054a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800544a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d025      	beq.n	800549e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005456:	e022      	b.n	800549e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005460:	d11f      	bne.n	80054a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005466:	e01c      	b.n	80054a2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	2b02      	cmp	r3, #2
 800546c:	d903      	bls.n	8005476 <DMA_CheckFifoParam+0xb6>
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	2b03      	cmp	r3, #3
 8005472:	d003      	beq.n	800547c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005474:	e018      	b.n	80054a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	73fb      	strb	r3, [r7, #15]
      break;
 800547a:	e015      	b.n	80054a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005480:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00e      	beq.n	80054a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	73fb      	strb	r3, [r7, #15]
      break;
 800548c:	e00b      	b.n	80054a6 <DMA_CheckFifoParam+0xe6>
      break;
 800548e:	bf00      	nop
 8005490:	e00a      	b.n	80054a8 <DMA_CheckFifoParam+0xe8>
      break;
 8005492:	bf00      	nop
 8005494:	e008      	b.n	80054a8 <DMA_CheckFifoParam+0xe8>
      break;
 8005496:	bf00      	nop
 8005498:	e006      	b.n	80054a8 <DMA_CheckFifoParam+0xe8>
      break;
 800549a:	bf00      	nop
 800549c:	e004      	b.n	80054a8 <DMA_CheckFifoParam+0xe8>
      break;
 800549e:	bf00      	nop
 80054a0:	e002      	b.n	80054a8 <DMA_CheckFifoParam+0xe8>
      break;
 80054a2:	bf00      	nop
 80054a4:	e000      	b.n	80054a8 <DMA_CheckFifoParam+0xe8>
      break;
 80054a6:	bf00      	nop
    }
  }

  return status;
 80054a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop

080054b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b089      	sub	sp, #36	@ 0x24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80054c6:	2300      	movs	r3, #0
 80054c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054ce:	2300      	movs	r3, #0
 80054d0:	61fb      	str	r3, [r7, #28]
 80054d2:	e159      	b.n	8005788 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80054d4:	2201      	movs	r2, #1
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	fa02 f303 	lsl.w	r3, r2, r3
 80054dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	4013      	ands	r3, r2
 80054e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	f040 8148 	bne.w	8005782 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d005      	beq.n	800550a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005506:	2b02      	cmp	r3, #2
 8005508:	d130      	bne.n	800556c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	2203      	movs	r2, #3
 8005516:	fa02 f303 	lsl.w	r3, r2, r3
 800551a:	43db      	mvns	r3, r3
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	4013      	ands	r3, r2
 8005520:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	68da      	ldr	r2, [r3, #12]
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	fa02 f303 	lsl.w	r3, r2, r3
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	4313      	orrs	r3, r2
 8005532:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	69ba      	ldr	r2, [r7, #24]
 8005538:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005540:	2201      	movs	r2, #1
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	fa02 f303 	lsl.w	r3, r2, r3
 8005548:	43db      	mvns	r3, r3
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	4013      	ands	r3, r2
 800554e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	091b      	lsrs	r3, r3, #4
 8005556:	f003 0201 	and.w	r2, r3, #1
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	fa02 f303 	lsl.w	r3, r2, r3
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	4313      	orrs	r3, r2
 8005564:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f003 0303 	and.w	r3, r3, #3
 8005574:	2b03      	cmp	r3, #3
 8005576:	d017      	beq.n	80055a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	005b      	lsls	r3, r3, #1
 8005582:	2203      	movs	r2, #3
 8005584:	fa02 f303 	lsl.w	r3, r2, r3
 8005588:	43db      	mvns	r3, r3
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	4013      	ands	r3, r2
 800558e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	fa02 f303 	lsl.w	r3, r2, r3
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	4313      	orrs	r3, r2
 80055a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f003 0303 	and.w	r3, r3, #3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d123      	bne.n	80055fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	08da      	lsrs	r2, r3, #3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3208      	adds	r2, #8
 80055bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	220f      	movs	r2, #15
 80055cc:	fa02 f303 	lsl.w	r3, r2, r3
 80055d0:	43db      	mvns	r3, r3
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	4013      	ands	r3, r2
 80055d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	691a      	ldr	r2, [r3, #16]
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	f003 0307 	and.w	r3, r3, #7
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	fa02 f303 	lsl.w	r3, r2, r3
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	08da      	lsrs	r2, r3, #3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	3208      	adds	r2, #8
 80055f6:	69b9      	ldr	r1, [r7, #24]
 80055f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	005b      	lsls	r3, r3, #1
 8005606:	2203      	movs	r2, #3
 8005608:	fa02 f303 	lsl.w	r3, r2, r3
 800560c:	43db      	mvns	r3, r3
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	4013      	ands	r3, r2
 8005612:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f003 0203 	and.w	r2, r3, #3
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	fa02 f303 	lsl.w	r3, r2, r3
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	4313      	orrs	r3, r2
 8005628:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 80a2 	beq.w	8005782 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800563e:	2300      	movs	r3, #0
 8005640:	60fb      	str	r3, [r7, #12]
 8005642:	4b57      	ldr	r3, [pc, #348]	@ (80057a0 <HAL_GPIO_Init+0x2e8>)
 8005644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005646:	4a56      	ldr	r2, [pc, #344]	@ (80057a0 <HAL_GPIO_Init+0x2e8>)
 8005648:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800564c:	6453      	str	r3, [r2, #68]	@ 0x44
 800564e:	4b54      	ldr	r3, [pc, #336]	@ (80057a0 <HAL_GPIO_Init+0x2e8>)
 8005650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005652:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005656:	60fb      	str	r3, [r7, #12]
 8005658:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800565a:	4a52      	ldr	r2, [pc, #328]	@ (80057a4 <HAL_GPIO_Init+0x2ec>)
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	089b      	lsrs	r3, r3, #2
 8005660:	3302      	adds	r3, #2
 8005662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005666:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	f003 0303 	and.w	r3, r3, #3
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	220f      	movs	r2, #15
 8005672:	fa02 f303 	lsl.w	r3, r2, r3
 8005676:	43db      	mvns	r3, r3
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	4013      	ands	r3, r2
 800567c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a49      	ldr	r2, [pc, #292]	@ (80057a8 <HAL_GPIO_Init+0x2f0>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d019      	beq.n	80056ba <HAL_GPIO_Init+0x202>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a48      	ldr	r2, [pc, #288]	@ (80057ac <HAL_GPIO_Init+0x2f4>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d013      	beq.n	80056b6 <HAL_GPIO_Init+0x1fe>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a47      	ldr	r2, [pc, #284]	@ (80057b0 <HAL_GPIO_Init+0x2f8>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d00d      	beq.n	80056b2 <HAL_GPIO_Init+0x1fa>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a46      	ldr	r2, [pc, #280]	@ (80057b4 <HAL_GPIO_Init+0x2fc>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d007      	beq.n	80056ae <HAL_GPIO_Init+0x1f6>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a45      	ldr	r2, [pc, #276]	@ (80057b8 <HAL_GPIO_Init+0x300>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d101      	bne.n	80056aa <HAL_GPIO_Init+0x1f2>
 80056a6:	2304      	movs	r3, #4
 80056a8:	e008      	b.n	80056bc <HAL_GPIO_Init+0x204>
 80056aa:	2307      	movs	r3, #7
 80056ac:	e006      	b.n	80056bc <HAL_GPIO_Init+0x204>
 80056ae:	2303      	movs	r3, #3
 80056b0:	e004      	b.n	80056bc <HAL_GPIO_Init+0x204>
 80056b2:	2302      	movs	r3, #2
 80056b4:	e002      	b.n	80056bc <HAL_GPIO_Init+0x204>
 80056b6:	2301      	movs	r3, #1
 80056b8:	e000      	b.n	80056bc <HAL_GPIO_Init+0x204>
 80056ba:	2300      	movs	r3, #0
 80056bc:	69fa      	ldr	r2, [r7, #28]
 80056be:	f002 0203 	and.w	r2, r2, #3
 80056c2:	0092      	lsls	r2, r2, #2
 80056c4:	4093      	lsls	r3, r2
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056cc:	4935      	ldr	r1, [pc, #212]	@ (80057a4 <HAL_GPIO_Init+0x2ec>)
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	089b      	lsrs	r3, r3, #2
 80056d2:	3302      	adds	r3, #2
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056da:	4b38      	ldr	r3, [pc, #224]	@ (80057bc <HAL_GPIO_Init+0x304>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	43db      	mvns	r3, r3
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	4013      	ands	r3, r2
 80056e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d003      	beq.n	80056fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80056fe:	4a2f      	ldr	r2, [pc, #188]	@ (80057bc <HAL_GPIO_Init+0x304>)
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005704:	4b2d      	ldr	r3, [pc, #180]	@ (80057bc <HAL_GPIO_Init+0x304>)
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	43db      	mvns	r3, r3
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	4013      	ands	r3, r2
 8005712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d003      	beq.n	8005728 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	4313      	orrs	r3, r2
 8005726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005728:	4a24      	ldr	r2, [pc, #144]	@ (80057bc <HAL_GPIO_Init+0x304>)
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800572e:	4b23      	ldr	r3, [pc, #140]	@ (80057bc <HAL_GPIO_Init+0x304>)
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	43db      	mvns	r3, r3
 8005738:	69ba      	ldr	r2, [r7, #24]
 800573a:	4013      	ands	r3, r2
 800573c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d003      	beq.n	8005752 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	4313      	orrs	r3, r2
 8005750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005752:	4a1a      	ldr	r2, [pc, #104]	@ (80057bc <HAL_GPIO_Init+0x304>)
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005758:	4b18      	ldr	r3, [pc, #96]	@ (80057bc <HAL_GPIO_Init+0x304>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	43db      	mvns	r3, r3
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	4013      	ands	r3, r2
 8005766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d003      	beq.n	800577c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	4313      	orrs	r3, r2
 800577a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800577c:	4a0f      	ldr	r2, [pc, #60]	@ (80057bc <HAL_GPIO_Init+0x304>)
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	3301      	adds	r3, #1
 8005786:	61fb      	str	r3, [r7, #28]
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	2b0f      	cmp	r3, #15
 800578c:	f67f aea2 	bls.w	80054d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005790:	bf00      	nop
 8005792:	bf00      	nop
 8005794:	3724      	adds	r7, #36	@ 0x24
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	40023800 	.word	0x40023800
 80057a4:	40013800 	.word	0x40013800
 80057a8:	40020000 	.word	0x40020000
 80057ac:	40020400 	.word	0x40020400
 80057b0:	40020800 	.word	0x40020800
 80057b4:	40020c00 	.word	0x40020c00
 80057b8:	40021000 	.word	0x40021000
 80057bc:	40013c00 	.word	0x40013c00

080057c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	460b      	mov	r3, r1
 80057ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	691a      	ldr	r2, [r3, #16]
 80057d0:	887b      	ldrh	r3, [r7, #2]
 80057d2:	4013      	ands	r3, r2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d002      	beq.n	80057de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80057d8:	2301      	movs	r3, #1
 80057da:	73fb      	strb	r3, [r7, #15]
 80057dc:	e001      	b.n	80057e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80057de:	2300      	movs	r3, #0
 80057e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80057e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3714      	adds	r7, #20
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	460b      	mov	r3, r1
 80057fa:	807b      	strh	r3, [r7, #2]
 80057fc:	4613      	mov	r3, r2
 80057fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005800:	787b      	ldrb	r3, [r7, #1]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005806:	887a      	ldrh	r2, [r7, #2]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800580c:	e003      	b.n	8005816 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800580e:	887b      	ldrh	r3, [r7, #2]
 8005810:	041a      	lsls	r2, r3, #16
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	619a      	str	r2, [r3, #24]
}
 8005816:	bf00      	nop
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
	...

08005824 <HAL_I2C_Init>:
 *         in the I2C_InitTypeDef and initialize the associated handle.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef * hi2c) {
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
    uint32_t freqrange;
    uint32_t pclk1;

    /* Check the I2C handle allocation */
    if (hi2c == NULL) {
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_I2C_Init+0x12>
        return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e12b      	b.n	8005a8e <HAL_I2C_Init+0x26a>
    assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
    assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
    assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
    assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

    if (hi2c->State == HAL_I2C_STATE_RESET) {
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d106      	bne.n	8005850 <HAL_I2C_Init+0x2c>
        /* Allocate lock resource and initialize it */
        hi2c->Lock = HAL_UNLOCKED;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        hi2c->MspInitCallback(hi2c);
#else
        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        HAL_I2C_MspInit(hi2c);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f7fd f85e 	bl	800290c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2224      	movs	r2, #36	@ 0x24
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 0201 	bic.w	r2, r2, #1
 8005866:	601a      	str	r2, [r3, #0]

    /*Reset I2C*/
    hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005876:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005886:	601a      	str	r2, [r3, #0]

    /* Get PCLK1 frequency */
    pclk1 = HAL_RCC_GetPCLK1Freq();
 8005888:	f002 fe38 	bl	80084fc <HAL_RCC_GetPCLK1Freq>
 800588c:	60f8      	str	r0, [r7, #12]

    /* Check the minimum allowed PCLK1 frequency */
    if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U) {
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	4a81      	ldr	r2, [pc, #516]	@ (8005a98 <HAL_I2C_Init+0x274>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d807      	bhi.n	80058a8 <HAL_I2C_Init+0x84>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4a80      	ldr	r2, [pc, #512]	@ (8005a9c <HAL_I2C_Init+0x278>)
 800589c:	4293      	cmp	r3, r2
 800589e:	bf94      	ite	ls
 80058a0:	2301      	movls	r3, #1
 80058a2:	2300      	movhi	r3, #0
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	e006      	b.n	80058b6 <HAL_I2C_Init+0x92>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	4a7d      	ldr	r2, [pc, #500]	@ (8005aa0 <HAL_I2C_Init+0x27c>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	bf94      	ite	ls
 80058b0:	2301      	movls	r3, #1
 80058b2:	2300      	movhi	r3, #0
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <HAL_I2C_Init+0x9a>
        return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e0e7      	b.n	8005a8e <HAL_I2C_Init+0x26a>
    }

    /* Calculate frequency range */
    freqrange = I2C_FREQRANGE(pclk1);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	4a78      	ldr	r2, [pc, #480]	@ (8005aa4 <HAL_I2C_Init+0x280>)
 80058c2:	fba2 2303 	umull	r2, r3, r2, r3
 80058c6:	0c9b      	lsrs	r3, r3, #18
 80058c8:	60bb      	str	r3, [r7, #8]

    /*---------------------------- I2Cx CR2 Configuration ----------------------*/
    /* Configure I2Cx: Frequency range */
    MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	430a      	orrs	r2, r1
 80058dc:	605a      	str	r2, [r3, #4]

    /*---------------------------- I2Cx TRISE Configuration --------------------*/
    /* Configure I2Cx: Rise Time */
    MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	4a6a      	ldr	r2, [pc, #424]	@ (8005a98 <HAL_I2C_Init+0x274>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d802      	bhi.n	80058f8 <HAL_I2C_Init+0xd4>
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	3301      	adds	r3, #1
 80058f6:	e009      	b.n	800590c <HAL_I2C_Init+0xe8>
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80058fe:	fb02 f303 	mul.w	r3, r2, r3
 8005902:	4a69      	ldr	r2, [pc, #420]	@ (8005aa8 <HAL_I2C_Init+0x284>)
 8005904:	fba2 2303 	umull	r2, r3, r2, r3
 8005908:	099b      	lsrs	r3, r3, #6
 800590a:	3301      	adds	r3, #1
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	6812      	ldr	r2, [r2, #0]
 8005910:	430b      	orrs	r3, r1
 8005912:	6213      	str	r3, [r2, #32]

    /*---------------------------- I2Cx CCR Configuration ----------------------*/
    /* Configure I2Cx: Speed */
    MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800591e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	495c      	ldr	r1, [pc, #368]	@ (8005a98 <HAL_I2C_Init+0x274>)
 8005928:	428b      	cmp	r3, r1
 800592a:	d819      	bhi.n	8005960 <HAL_I2C_Init+0x13c>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	1e59      	subs	r1, r3, #1
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	fbb1 f3f3 	udiv	r3, r1, r3
 800593a:	1c59      	adds	r1, r3, #1
 800593c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005940:	400b      	ands	r3, r1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00a      	beq.n	800595c <HAL_I2C_Init+0x138>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	1e59      	subs	r1, r3, #1
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	fbb1 f3f3 	udiv	r3, r1, r3
 8005954:	3301      	adds	r3, #1
 8005956:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800595a:	e051      	b.n	8005a00 <HAL_I2C_Init+0x1dc>
 800595c:	2304      	movs	r3, #4
 800595e:	e04f      	b.n	8005a00 <HAL_I2C_Init+0x1dc>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d111      	bne.n	800598c <HAL_I2C_Init+0x168>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	1e58      	subs	r0, r3, #1
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6859      	ldr	r1, [r3, #4]
 8005970:	460b      	mov	r3, r1
 8005972:	005b      	lsls	r3, r3, #1
 8005974:	440b      	add	r3, r1
 8005976:	fbb0 f3f3 	udiv	r3, r0, r3
 800597a:	3301      	adds	r3, #1
 800597c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005980:	2b00      	cmp	r3, #0
 8005982:	bf0c      	ite	eq
 8005984:	2301      	moveq	r3, #1
 8005986:	2300      	movne	r3, #0
 8005988:	b2db      	uxtb	r3, r3
 800598a:	e012      	b.n	80059b2 <HAL_I2C_Init+0x18e>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	1e58      	subs	r0, r3, #1
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6859      	ldr	r1, [r3, #4]
 8005994:	460b      	mov	r3, r1
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	440b      	add	r3, r1
 800599a:	0099      	lsls	r1, r3, #2
 800599c:	440b      	add	r3, r1
 800599e:	fbb0 f3f3 	udiv	r3, r0, r3
 80059a2:	3301      	adds	r3, #1
 80059a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	bf0c      	ite	eq
 80059ac:	2301      	moveq	r3, #1
 80059ae:	2300      	movne	r3, #0
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <HAL_I2C_Init+0x196>
 80059b6:	2301      	movs	r3, #1
 80059b8:	e022      	b.n	8005a00 <HAL_I2C_Init+0x1dc>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10e      	bne.n	80059e0 <HAL_I2C_Init+0x1bc>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	1e58      	subs	r0, r3, #1
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6859      	ldr	r1, [r3, #4]
 80059ca:	460b      	mov	r3, r1
 80059cc:	005b      	lsls	r3, r3, #1
 80059ce:	440b      	add	r3, r1
 80059d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80059d4:	3301      	adds	r3, #1
 80059d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059de:	e00f      	b.n	8005a00 <HAL_I2C_Init+0x1dc>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	1e58      	subs	r0, r3, #1
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6859      	ldr	r1, [r3, #4]
 80059e8:	460b      	mov	r3, r1
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	440b      	add	r3, r1
 80059ee:	0099      	lsls	r1, r3, #2
 80059f0:	440b      	add	r3, r1
 80059f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80059f6:	3301      	adds	r3, #1
 80059f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a00:	6879      	ldr	r1, [r7, #4]
 8005a02:	6809      	ldr	r1, [r1, #0]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	61cb      	str	r3, [r1, #28]

    /*---------------------------- I2Cx CR1 Configuration ----------------------*/
    /* Configure I2Cx: Generalcall and NoStretch mode */
    MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	69da      	ldr	r2, [r3, #28]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	601a      	str	r2, [r3, #0]

    /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
    /* Configure I2Cx: Own Address1 and addressing mode */
    MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005a2e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	6911      	ldr	r1, [r2, #16]
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	68d2      	ldr	r2, [r2, #12]
 8005a3a:	4311      	orrs	r1, r2
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	6812      	ldr	r2, [r2, #0]
 8005a40:	430b      	orrs	r3, r1
 8005a42:	6093      	str	r3, [r2, #8]

    /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
    /* Configure I2Cx: Dual mode and Own Address2 */
    MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	695a      	ldr	r2, [r3, #20]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	431a      	orrs	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	60da      	str	r2, [r3, #12]

    /* Enable the selected I2C peripheral */
    __HAL_I2C_ENABLE(hi2c);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f042 0201 	orr.w	r2, r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]

    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2220      	movs	r2, #32
 8005a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	000186a0 	.word	0x000186a0
 8005a9c:	001e847f 	.word	0x001e847f
 8005aa0:	003d08ff 	.word	0x003d08ff
 8005aa4:	431bde83 	.word	0x431bde83
 8005aa8:	10624dd3 	.word	0x10624dd3

08005aac <HAL_I2C_Mem_Write>:
 * @param  pData Pointer to data buffer
 * @param  Size Amount of data to be sent
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData, uint16_t Size, uint32_t Timeout) {
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b088      	sub	sp, #32
 8005ab0:	af02      	add	r7, sp, #8
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	4608      	mov	r0, r1
 8005ab6:	4611      	mov	r1, r2
 8005ab8:	461a      	mov	r2, r3
 8005aba:	4603      	mov	r3, r0
 8005abc:	817b      	strh	r3, [r7, #10]
 8005abe:	460b      	mov	r3, r1
 8005ac0:	813b      	strh	r3, [r7, #8]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	80fb      	strh	r3, [r7, #6]
    /* Init tickstart for timeout management*/
    uint32_t tickstart = HAL_GetTick();
 8005ac6:	f7fe fe07 	bl	80046d8 <HAL_GetTick>
 8005aca:	6178      	str	r0, [r7, #20]

    /* Check the parameters */
    assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

    if (hi2c->State == HAL_I2C_STATE_READY) {
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b20      	cmp	r3, #32
 8005ad6:	f040 80d9 	bne.w	8005c8c <HAL_I2C_Mem_Write+0x1e0>
        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK) {
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	9300      	str	r3, [sp, #0]
 8005ade:	2319      	movs	r3, #25
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	496d      	ldr	r1, [pc, #436]	@ (8005c98 <HAL_I2C_Mem_Write+0x1ec>)
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f000 fc7f 	bl	80063e8 <I2C_WaitOnFlagUntilTimeout>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d001      	beq.n	8005af4 <HAL_I2C_Mem_Write+0x48>
            return HAL_BUSY;
 8005af0:	2302      	movs	r3, #2
 8005af2:	e0cc      	b.n	8005c8e <HAL_I2C_Mem_Write+0x1e2>
        }

        /* Process Locked */
        __HAL_LOCK(hi2c);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d101      	bne.n	8005b02 <HAL_I2C_Mem_Write+0x56>
 8005afe:	2302      	movs	r3, #2
 8005b00:	e0c5      	b.n	8005c8e <HAL_I2C_Mem_Write+0x1e2>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Check if the I2C is already enabled */
        if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0301 	and.w	r3, r3, #1
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d007      	beq.n	8005b28 <HAL_I2C_Mem_Write+0x7c>
            /* Enable I2C peripheral */
            __HAL_I2C_ENABLE(hi2c);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f042 0201 	orr.w	r2, r2, #1
 8005b26:	601a      	str	r2, [r3, #0]
        }

        /* Disable Pos */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b36:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_BUSY_TX;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2221      	movs	r2, #33	@ 0x21
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_MEM;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2240      	movs	r2, #64	@ 0x40
 8005b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Prepare transfer parameters */
        hi2c->pBuffPtr = pData;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6a3a      	ldr	r2, [r7, #32]
 8005b52:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount = Size;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005b58:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize = hi2c->XferCount;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4a4d      	ldr	r2, [pc, #308]	@ (8005c9c <HAL_I2C_Mem_Write+0x1f0>)
 8005b68:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK) {
 8005b6a:	88f8      	ldrh	r0, [r7, #6]
 8005b6c:	893a      	ldrh	r2, [r7, #8]
 8005b6e:	8979      	ldrh	r1, [r7, #10]
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	9301      	str	r3, [sp, #4]
 8005b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	4603      	mov	r3, r0
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f000 fab6 	bl	80060ec <I2C_RequestMemoryWrite>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d052      	beq.n	8005c2c <HAL_I2C_Mem_Write+0x180>
            return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e081      	b.n	8005c8e <HAL_I2C_Mem_Write+0x1e2>
        }

        while (hi2c->XferSize > 0U) {
            /* Wait until TXE flag is set */
            if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f000 fd00 	bl	8006594 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00d      	beq.n	8005bb6 <HAL_I2C_Mem_Write+0x10a>
                if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	d107      	bne.n	8005bb2 <HAL_I2C_Mem_Write+0x106>
                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bb0:	601a      	str	r2, [r3, #0]
                }
                return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e06b      	b.n	8005c8e <HAL_I2C_Mem_Write+0x1e2>
            }

            /* Write data to DR */
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bba:	781a      	ldrb	r2, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	611a      	str	r2, [r3, #16]

            /* Increment Buffer pointer */
            hi2c->pBuffPtr++;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc6:	1c5a      	adds	r2, r3, #1
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	625a      	str	r2, [r3, #36]	@ 0x24

            /* Update counter */
            hi2c->XferSize--;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	851a      	strh	r2, [r3, #40]	@ 0x28
            hi2c->XferCount--;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	3b01      	subs	r3, #1
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	855a      	strh	r2, [r3, #42]	@ 0x2a

            if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U)) {
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b04      	cmp	r3, #4
 8005bf2:	d11b      	bne.n	8005c2c <HAL_I2C_Mem_Write+0x180>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d017      	beq.n	8005c2c <HAL_I2C_Mem_Write+0x180>
                /* Write data to DR */
                hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c00:	781a      	ldrb	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	611a      	str	r2, [r3, #16]

                /* Increment Buffer pointer */
                hi2c->pBuffPtr++;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c0c:	1c5a      	adds	r2, r3, #1
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	625a      	str	r2, [r3, #36]	@ 0x24

                /* Update counter */
                hi2c->XferSize--;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c16:	3b01      	subs	r3, #1
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	851a      	strh	r2, [r3, #40]	@ 0x28
                hi2c->XferCount--;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	3b01      	subs	r3, #1
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        while (hi2c->XferSize > 0U) {
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1aa      	bne.n	8005b8a <HAL_I2C_Mem_Write+0xde>
            }
        }

        /* Wait until BTF flag is set */
        if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 fcec 	bl	8006616 <I2C_WaitOnBTFFlagUntilTimeout>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00d      	beq.n	8005c60 <HAL_I2C_Mem_Write+0x1b4>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c48:	2b04      	cmp	r3, #4
 8005c4a:	d107      	bne.n	8005c5c <HAL_I2C_Mem_Write+0x1b0>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c5a:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e016      	b.n	8005c8e <HAL_I2C_Mem_Write+0x1e2>
        }

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c6e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2220      	movs	r2, #32
 8005c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	e000      	b.n	8005c8e <HAL_I2C_Mem_Write+0x1e2>
    } else {
        return HAL_BUSY;
 8005c8c:	2302      	movs	r3, #2
    }
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3718      	adds	r7, #24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	00100002 	.word	0x00100002
 8005c9c:	ffff0000 	.word	0xffff0000

08005ca0 <HAL_I2C_Mem_Read>:
 * @param  pData Pointer to data buffer
 * @param  Size Amount of data to be sent
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData, uint16_t Size, uint32_t Timeout) {
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b08c      	sub	sp, #48	@ 0x30
 8005ca4:	af02      	add	r7, sp, #8
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	4608      	mov	r0, r1
 8005caa:	4611      	mov	r1, r2
 8005cac:	461a      	mov	r2, r3
 8005cae:	4603      	mov	r3, r0
 8005cb0:	817b      	strh	r3, [r7, #10]
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	813b      	strh	r3, [r7, #8]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	80fb      	strh	r3, [r7, #6]
    /* Init tickstart for timeout management*/
    uint32_t tickstart = HAL_GetTick();
 8005cba:	f7fe fd0d 	bl	80046d8 <HAL_GetTick>
 8005cbe:	6278      	str	r0, [r7, #36]	@ 0x24

    /* Check the parameters */
    assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

    if (hi2c->State == HAL_I2C_STATE_READY) {
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b20      	cmp	r3, #32
 8005cca:	f040 8208 	bne.w	80060de <HAL_I2C_Mem_Read+0x43e>
        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK) {
 8005cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	2319      	movs	r3, #25
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	497b      	ldr	r1, [pc, #492]	@ (8005ec4 <HAL_I2C_Mem_Read+0x224>)
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f000 fb85 	bl	80063e8 <I2C_WaitOnFlagUntilTimeout>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d001      	beq.n	8005ce8 <HAL_I2C_Mem_Read+0x48>
            return HAL_BUSY;
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	e1fb      	b.n	80060e0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Process Locked */
        __HAL_LOCK(hi2c);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d101      	bne.n	8005cf6 <HAL_I2C_Mem_Read+0x56>
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	e1f4      	b.n	80060e0 <HAL_I2C_Mem_Read+0x440>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Check if the I2C is already enabled */
        if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d007      	beq.n	8005d1c <HAL_I2C_Mem_Read+0x7c>
            /* Enable I2C peripheral */
            __HAL_I2C_ENABLE(hi2c);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f042 0201 	orr.w	r2, r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]
        }

        /* Disable Pos */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d2a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_BUSY_RX;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2222      	movs	r2, #34	@ 0x22
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_MEM;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2240      	movs	r2, #64	@ 0x40
 8005d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Prepare transfer parameters */
        hi2c->pBuffPtr = pData;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d46:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount = Size;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005d4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize = hi2c->XferCount;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	4a5b      	ldr	r2, [pc, #364]	@ (8005ec8 <HAL_I2C_Mem_Read+0x228>)
 8005d5c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK) {
 8005d5e:	88f8      	ldrh	r0, [r7, #6]
 8005d60:	893a      	ldrh	r2, [r7, #8]
 8005d62:	8979      	ldrh	r1, [r7, #10]
 8005d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d66:	9301      	str	r3, [sp, #4]
 8005d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 fa52 	bl	8006218 <I2C_RequestMemoryRead>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <HAL_I2C_Mem_Read+0xde>
            return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e1b0      	b.n	80060e0 <HAL_I2C_Mem_Read+0x440>
        }

        if (hi2c->XferSize == 0U) {
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d113      	bne.n	8005dae <HAL_I2C_Mem_Read+0x10e>
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d86:	2300      	movs	r3, #0
 8005d88:	623b      	str	r3, [r7, #32]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	695b      	ldr	r3, [r3, #20]
 8005d90:	623b      	str	r3, [r7, #32]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	623b      	str	r3, [r7, #32]
 8005d9a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	e184      	b.n	80060b8 <HAL_I2C_Mem_Read+0x418>
        } else if (hi2c->XferSize == 1U) {
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d11b      	bne.n	8005dee <HAL_I2C_Mem_Read+0x14e>
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dc4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	61fb      	str	r3, [r7, #28]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	61fb      	str	r3, [r7, #28]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	61fb      	str	r3, [r7, #28]
 8005dda:	69fb      	ldr	r3, [r7, #28]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dea:	601a      	str	r2, [r3, #0]
 8005dec:	e164      	b.n	80060b8 <HAL_I2C_Mem_Read+0x418>
        } else if (hi2c->XferSize == 2U) {
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d11b      	bne.n	8005e2e <HAL_I2C_Mem_Read+0x18e>
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e04:	601a      	str	r2, [r3, #0]

            /* Enable Pos */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e14:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e16:	2300      	movs	r3, #0
 8005e18:	61bb      	str	r3, [r7, #24]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	695b      	ldr	r3, [r3, #20]
 8005e20:	61bb      	str	r3, [r7, #24]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	61bb      	str	r3, [r7, #24]
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	e144      	b.n	80060b8 <HAL_I2C_Mem_Read+0x418>
        } else {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e2e:	2300      	movs	r3, #0
 8005e30:	617b      	str	r3, [r7, #20]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	617b      	str	r3, [r7, #20]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	617b      	str	r3, [r7, #20]
 8005e42:	697b      	ldr	r3, [r7, #20]
        }

        while (hi2c->XferSize > 0U) {
 8005e44:	e138      	b.n	80060b8 <HAL_I2C_Mem_Read+0x418>
            if (hi2c->XferSize <= 3U) {
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e4a:	2b03      	cmp	r3, #3
 8005e4c:	f200 80f1 	bhi.w	8006032 <HAL_I2C_Mem_Read+0x392>
                /* One byte */
                if (hi2c->XferSize == 1U) {
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d123      	bne.n	8005ea0 <HAL_I2C_Mem_Read+0x200>
                    /* Wait until RXNE flag is set */
                    if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8005e58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e5a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 fc1b 	bl	8006698 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <HAL_I2C_Mem_Read+0x1cc>
                        return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e139      	b.n	80060e0 <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	691a      	ldr	r2, [r3, #16]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e76:	b2d2      	uxtb	r2, r2
 8005e78:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e7e:	1c5a      	adds	r2, r3, #1
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	851a      	strh	r2, [r3, #40]	@ 0x28
                    hi2c->XferCount--;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	3b01      	subs	r3, #1
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005e9e:	e10b      	b.n	80060b8 <HAL_I2C_Mem_Read+0x418>
                }
                /* Two bytes */
                else if (hi2c->XferSize == 2U) {
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d14e      	bne.n	8005f46 <HAL_I2C_Mem_Read+0x2a6>
                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eae:	2200      	movs	r2, #0
 8005eb0:	4906      	ldr	r1, [pc, #24]	@ (8005ecc <HAL_I2C_Mem_Read+0x22c>)
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f000 fa98 	bl	80063e8 <I2C_WaitOnFlagUntilTimeout>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d008      	beq.n	8005ed0 <HAL_I2C_Mem_Read+0x230>
                        return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e10e      	b.n	80060e0 <HAL_I2C_Mem_Read+0x440>
 8005ec2:	bf00      	nop
 8005ec4:	00100002 	.word	0x00100002
 8005ec8:	ffff0000 	.word	0xffff0000
 8005ecc:	00010004 	.word	0x00010004
                    }

                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ede:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	691a      	ldr	r2, [r3, #16]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eea:	b2d2      	uxtb	r2, r2
 8005eec:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef2:	1c5a      	adds	r2, r3, #1
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005efc:	3b01      	subs	r3, #1
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	851a      	strh	r2, [r3, #40]	@ 0x28
                    hi2c->XferCount--;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	855a      	strh	r2, [r3, #42]	@ 0x2a

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	691a      	ldr	r2, [r3, #16]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1c:	b2d2      	uxtb	r2, r2
 8005f1e:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f24:	1c5a      	adds	r2, r3, #1
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	851a      	strh	r2, [r3, #40]	@ 0x28
                    hi2c->XferCount--;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005f44:	e0b8      	b.n	80060b8 <HAL_I2C_Mem_Read+0x418>
                }
                /* 3 Last bytes */
                else {
                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 8005f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f48:	9300      	str	r3, [sp, #0]
 8005f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	4966      	ldr	r1, [pc, #408]	@ (80060e8 <HAL_I2C_Mem_Read+0x448>)
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f000 fa49 	bl	80063e8 <I2C_WaitOnFlagUntilTimeout>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d001      	beq.n	8005f60 <HAL_I2C_Mem_Read+0x2c0>
                        return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e0bf      	b.n	80060e0 <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Disable Acknowledge */
                    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f6e:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	691a      	ldr	r2, [r3, #16]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7a:	b2d2      	uxtb	r2, r2
 8005f7c:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f82:	1c5a      	adds	r2, r3, #1
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	851a      	strh	r2, [r3, #40]	@ 0x28
                    hi2c->XferCount--;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	855a      	strh	r2, [r3, #42]	@ 0x2a

                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK) {
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa8:	2200      	movs	r2, #0
 8005faa:	494f      	ldr	r1, [pc, #316]	@ (80060e8 <HAL_I2C_Mem_Read+0x448>)
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f000 fa1b 	bl	80063e8 <I2C_WaitOnFlagUntilTimeout>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d001      	beq.n	8005fbc <HAL_I2C_Mem_Read+0x31c>
                        return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e091      	b.n	80060e0 <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fca:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	691a      	ldr	r2, [r3, #16]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd6:	b2d2      	uxtb	r2, r2
 8005fd8:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fde:	1c5a      	adds	r2, r3, #1
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	851a      	strh	r2, [r3, #40]	@ 0x28
                    hi2c->XferCount--;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	855a      	strh	r2, [r3, #42]	@ 0x2a

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	691a      	ldr	r2, [r3, #16]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006008:	b2d2      	uxtb	r2, r2
 800600a:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006010:	1c5a      	adds	r2, r3, #1
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800601a:	3b01      	subs	r3, #1
 800601c:	b29a      	uxth	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	851a      	strh	r2, [r3, #40]	@ 0x28
                    hi2c->XferCount--;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006026:	b29b      	uxth	r3, r3
 8006028:	3b01      	subs	r3, #1
 800602a:	b29a      	uxth	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006030:	e042      	b.n	80060b8 <HAL_I2C_Mem_Read+0x418>
                }
            } else {
                /* Wait until RXNE flag is set */
                if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8006032:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006034:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f000 fb2e 	bl	8006698 <I2C_WaitOnRXNEFlagUntilTimeout>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <HAL_I2C_Mem_Read+0x3a6>
                    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e04c      	b.n	80060e0 <HAL_I2C_Mem_Read+0x440>
                }

                /* Read data from DR */
                *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	691a      	ldr	r2, [r3, #16]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006050:	b2d2      	uxtb	r2, r2
 8006052:	701a      	strb	r2, [r3, #0]

                /* Increment Buffer pointer */
                hi2c->pBuffPtr++;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006058:	1c5a      	adds	r2, r3, #1
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	625a      	str	r2, [r3, #36]	@ 0x24

                /* Update counter */
                hi2c->XferSize--;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006062:	3b01      	subs	r3, #1
 8006064:	b29a      	uxth	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	851a      	strh	r2, [r3, #40]	@ 0x28
                hi2c->XferCount--;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800606e:	b29b      	uxth	r3, r3
 8006070:	3b01      	subs	r3, #1
 8006072:	b29a      	uxth	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	855a      	strh	r2, [r3, #42]	@ 0x2a

                if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) {
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	f003 0304 	and.w	r3, r3, #4
 8006082:	2b04      	cmp	r3, #4
 8006084:	d118      	bne.n	80060b8 <HAL_I2C_Mem_Read+0x418>
                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	691a      	ldr	r2, [r3, #16]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006090:	b2d2      	uxtb	r2, r2
 8006092:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006098:	1c5a      	adds	r2, r3, #1
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060a2:	3b01      	subs	r3, #1
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	851a      	strh	r2, [r3, #40]	@ 0x28
                    hi2c->XferCount--;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	3b01      	subs	r3, #1
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        while (hi2c->XferSize > 0U) {
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f47f aec2 	bne.w	8005e46 <HAL_I2C_Mem_Read+0x1a6>
                }
            }
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2220      	movs	r2, #32
 80060c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80060da:	2300      	movs	r3, #0
 80060dc:	e000      	b.n	80060e0 <HAL_I2C_Mem_Read+0x440>
    } else {
        return HAL_BUSY;
 80060de:	2302      	movs	r3, #2
    }
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3728      	adds	r7, #40	@ 0x28
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	00010004 	.word	0x00010004

080060ec <I2C_RequestMemoryWrite>:
 * @param  MemAddSize Size of internal memory address
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart) {
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b088      	sub	sp, #32
 80060f0:	af02      	add	r7, sp, #8
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	4608      	mov	r0, r1
 80060f6:	4611      	mov	r1, r2
 80060f8:	461a      	mov	r2, r3
 80060fa:	4603      	mov	r3, r0
 80060fc:	817b      	strh	r3, [r7, #10]
 80060fe:	460b      	mov	r3, r1
 8006100:	813b      	strh	r3, [r7, #8]
 8006102:	4613      	mov	r3, r2
 8006104:	80fb      	strh	r3, [r7, #6]
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006114:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 8006116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	6a3b      	ldr	r3, [r7, #32]
 800611c:	2200      	movs	r2, #0
 800611e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f000 f960 	bl	80063e8 <I2C_WaitOnFlagUntilTimeout>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00d      	beq.n	800614a <I2C_RequestMemoryWrite+0x5e>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006138:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800613c:	d103      	bne.n	8006146 <I2C_RequestMemoryWrite+0x5a>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006144:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e05f      	b.n	800620a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800614a:	897b      	ldrh	r3, [r7, #10]
 800614c:	b2db      	uxtb	r3, r3
 800614e:	461a      	mov	r2, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006158:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 800615a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615c:	6a3a      	ldr	r2, [r7, #32]
 800615e:	492d      	ldr	r1, [pc, #180]	@ (8006214 <I2C_RequestMemoryWrite+0x128>)
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f000 f998 	bl	8006496 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d001      	beq.n	8006170 <I2C_RequestMemoryWrite+0x84>
        return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e04c      	b.n	800620a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006170:	2300      	movs	r3, #0
 8006172:	617b      	str	r3, [r7, #20]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	617b      	str	r3, [r7, #20]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	617b      	str	r3, [r7, #20]
 8006184:	697b      	ldr	r3, [r7, #20]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8006186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006188:	6a39      	ldr	r1, [r7, #32]
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f000 fa02 	bl	8006594 <I2C_WaitOnTXEFlagUntilTimeout>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00d      	beq.n	80061b2 <I2C_RequestMemoryWrite+0xc6>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800619a:	2b04      	cmp	r3, #4
 800619c:	d107      	bne.n	80061ae <I2C_RequestMemoryWrite+0xc2>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e02b      	b.n	800620a <I2C_RequestMemoryWrite+0x11e>
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 80061b2:	88fb      	ldrh	r3, [r7, #6]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d105      	bne.n	80061c4 <I2C_RequestMemoryWrite+0xd8>
        /* Send Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061b8:	893b      	ldrh	r3, [r7, #8]
 80061ba:	b2da      	uxtb	r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	611a      	str	r2, [r3, #16]
 80061c2:	e021      	b.n	8006208 <I2C_RequestMemoryWrite+0x11c>
    }
    /* If Memory address size is 16Bit */
    else {
        /* Send MSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80061c4:	893b      	ldrh	r3, [r7, #8]
 80061c6:	0a1b      	lsrs	r3, r3, #8
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	b2da      	uxtb	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	611a      	str	r2, [r3, #16]

        /* Wait until TXE flag is set */
        if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 80061d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061d4:	6a39      	ldr	r1, [r7, #32]
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f000 f9dc 	bl	8006594 <I2C_WaitOnTXEFlagUntilTimeout>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00d      	beq.n	80061fe <I2C_RequestMemoryWrite+0x112>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e6:	2b04      	cmp	r3, #4
 80061e8:	d107      	bne.n	80061fa <I2C_RequestMemoryWrite+0x10e>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061f8:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e005      	b.n	800620a <I2C_RequestMemoryWrite+0x11e>
        }

        /* Send LSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061fe:	893b      	ldrh	r3, [r7, #8]
 8006200:	b2da      	uxtb	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	611a      	str	r2, [r3, #16]
    }

    return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3718      	adds	r7, #24
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	00010002 	.word	0x00010002

08006218 <I2C_RequestMemoryRead>:
 * @param  MemAddSize Size of internal memory address
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart) {
 8006218:	b580      	push	{r7, lr}
 800621a:	b088      	sub	sp, #32
 800621c:	af02      	add	r7, sp, #8
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	4608      	mov	r0, r1
 8006222:	4611      	mov	r1, r2
 8006224:	461a      	mov	r2, r3
 8006226:	4603      	mov	r3, r0
 8006228:	817b      	strh	r3, [r7, #10]
 800622a:	460b      	mov	r3, r1
 800622c:	813b      	strh	r3, [r7, #8]
 800622e:	4613      	mov	r3, r2
 8006230:	80fb      	strh	r3, [r7, #6]
    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006240:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006250:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 8006252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	2200      	movs	r2, #0
 800625a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f000 f8c2 	bl	80063e8 <I2C_WaitOnFlagUntilTimeout>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00d      	beq.n	8006286 <I2C_RequestMemoryRead+0x6e>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006274:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006278:	d103      	bne.n	8006282 <I2C_RequestMemoryRead+0x6a>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006280:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e0aa      	b.n	80063dc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006286:	897b      	ldrh	r3, [r7, #10]
 8006288:	b2db      	uxtb	r3, r3
 800628a:	461a      	mov	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006294:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 8006296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006298:	6a3a      	ldr	r2, [r7, #32]
 800629a:	4952      	ldr	r1, [pc, #328]	@ (80063e4 <I2C_RequestMemoryRead+0x1cc>)
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f000 f8fa 	bl	8006496 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d001      	beq.n	80062ac <I2C_RequestMemoryRead+0x94>
        return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e097      	b.n	80063dc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062ac:	2300      	movs	r3, #0
 80062ae:	617b      	str	r3, [r7, #20]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	617b      	str	r3, [r7, #20]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	617b      	str	r3, [r7, #20]
 80062c0:	697b      	ldr	r3, [r7, #20]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 80062c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062c4:	6a39      	ldr	r1, [r7, #32]
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f000 f964 	bl	8006594 <I2C_WaitOnTXEFlagUntilTimeout>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00d      	beq.n	80062ee <I2C_RequestMemoryRead+0xd6>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d6:	2b04      	cmp	r3, #4
 80062d8:	d107      	bne.n	80062ea <I2C_RequestMemoryRead+0xd2>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e076      	b.n	80063dc <I2C_RequestMemoryRead+0x1c4>
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 80062ee:	88fb      	ldrh	r3, [r7, #6]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d105      	bne.n	8006300 <I2C_RequestMemoryRead+0xe8>
        /* Send Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062f4:	893b      	ldrh	r3, [r7, #8]
 80062f6:	b2da      	uxtb	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	611a      	str	r2, [r3, #16]
 80062fe:	e021      	b.n	8006344 <I2C_RequestMemoryRead+0x12c>
    }
    /* If Memory address size is 16Bit */
    else {
        /* Send MSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006300:	893b      	ldrh	r3, [r7, #8]
 8006302:	0a1b      	lsrs	r3, r3, #8
 8006304:	b29b      	uxth	r3, r3
 8006306:	b2da      	uxtb	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	611a      	str	r2, [r3, #16]

        /* Wait until TXE flag is set */
        if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 800630e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006310:	6a39      	ldr	r1, [r7, #32]
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f000 f93e 	bl	8006594 <I2C_WaitOnTXEFlagUntilTimeout>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00d      	beq.n	800633a <I2C_RequestMemoryRead+0x122>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006322:	2b04      	cmp	r3, #4
 8006324:	d107      	bne.n	8006336 <I2C_RequestMemoryRead+0x11e>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006334:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e050      	b.n	80063dc <I2C_RequestMemoryRead+0x1c4>
        }

        /* Send LSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800633a:	893b      	ldrh	r3, [r7, #8]
 800633c:	b2da      	uxtb	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	611a      	str	r2, [r3, #16]
    }

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8006344:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006346:	6a39      	ldr	r1, [r7, #32]
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f000 f923 	bl	8006594 <I2C_WaitOnTXEFlagUntilTimeout>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00d      	beq.n	8006370 <I2C_RequestMemoryRead+0x158>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006358:	2b04      	cmp	r3, #4
 800635a:	d107      	bne.n	800636c <I2C_RequestMemoryRead+0x154>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800636a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e035      	b.n	80063dc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800637e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 8006380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	6a3b      	ldr	r3, [r7, #32]
 8006386:	2200      	movs	r2, #0
 8006388:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f000 f82b 	bl	80063e8 <I2C_WaitOnFlagUntilTimeout>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00d      	beq.n	80063b4 <I2C_RequestMemoryRead+0x19c>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063a6:	d103      	bne.n	80063b0 <I2C_RequestMemoryRead+0x198>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063ae:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e013      	b.n	80063dc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80063b4:	897b      	ldrh	r3, [r7, #10]
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	f043 0301 	orr.w	r3, r3, #1
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK) {
 80063c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c6:	6a3a      	ldr	r2, [r7, #32]
 80063c8:	4906      	ldr	r1, [pc, #24]	@ (80063e4 <I2C_RequestMemoryRead+0x1cc>)
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f000 f863 	bl	8006496 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d001      	beq.n	80063da <I2C_RequestMemoryRead+0x1c2>
        return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e000      	b.n	80063dc <I2C_RequestMemoryRead+0x1c4>
    }

    return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3718      	adds	r7, #24
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	00010002 	.word	0x00010002

080063e8 <I2C_WaitOnFlagUntilTimeout>:
 * @param  Status The new Flag status (SET or RESET).
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart) {
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	603b      	str	r3, [r7, #0]
 80063f4:	4613      	mov	r3, r2
 80063f6:	71fb      	strb	r3, [r7, #7]
    /* Wait until flag is set */
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 80063f8:	e025      	b.n	8006446 <I2C_WaitOnFlagUntilTimeout+0x5e>
        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006400:	d021      	beq.n	8006446 <I2C_WaitOnFlagUntilTimeout+0x5e>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8006402:	f7fe f969 	bl	80046d8 <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	429a      	cmp	r2, r3
 8006410:	d302      	bcc.n	8006418 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d116      	bne.n	8006446 <I2C_WaitOnFlagUntilTimeout+0x5e>
                hi2c->PreviousState = I2C_STATE_NONE;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	631a      	str	r2, [r3, #48]	@ 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2220      	movs	r2, #32
 8006422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006432:	f043 0220 	orr.w	r2, r3, #32
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	641a      	str	r2, [r3, #64]	@ 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

                return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e023      	b.n	800648e <I2C_WaitOnFlagUntilTimeout+0xa6>
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	0c1b      	lsrs	r3, r3, #16
 800644a:	b2db      	uxtb	r3, r3
 800644c:	2b01      	cmp	r3, #1
 800644e:	d10d      	bne.n	800646c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	43da      	mvns	r2, r3
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	4013      	ands	r3, r2
 800645c:	b29b      	uxth	r3, r3
 800645e:	2b00      	cmp	r3, #0
 8006460:	bf0c      	ite	eq
 8006462:	2301      	moveq	r3, #1
 8006464:	2300      	movne	r3, #0
 8006466:	b2db      	uxtb	r3, r3
 8006468:	461a      	mov	r2, r3
 800646a:	e00c      	b.n	8006486 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	43da      	mvns	r2, r3
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	4013      	ands	r3, r2
 8006478:	b29b      	uxth	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	bf0c      	ite	eq
 800647e:	2301      	moveq	r3, #1
 8006480:	2300      	movne	r3, #0
 8006482:	b2db      	uxtb	r3, r3
 8006484:	461a      	mov	r2, r3
 8006486:	79fb      	ldrb	r3, [r7, #7]
 8006488:	429a      	cmp	r2, r3
 800648a:	d0b6      	beq.n	80063fa <I2C_WaitOnFlagUntilTimeout+0x12>
            }
        }
    }
    return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 * @param  Flag specifies the I2C flag to check.
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart) {
 8006496:	b580      	push	{r7, lr}
 8006498:	b084      	sub	sp, #16
 800649a:	af00      	add	r7, sp, #0
 800649c:	60f8      	str	r0, [r7, #12]
 800649e:	60b9      	str	r1, [r7, #8]
 80064a0:	607a      	str	r2, [r7, #4]
 80064a2:	603b      	str	r3, [r7, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 80064a4:	e051      	b.n	800654a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064b4:	d123      	bne.n	80064fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064c4:	601a      	str	r2, [r3, #0]

            /* Clear AF Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80064ce:	615a      	str	r2, [r3, #20]

            hi2c->PreviousState = I2C_STATE_NONE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	631a      	str	r2, [r3, #48]	@ 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2220      	movs	r2, #32
 80064da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ea:	f043 0204 	orr.w	r2, r3, #4
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e046      	b.n	800658c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006504:	d021      	beq.n	800654a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8006506:	f7fe f8e7 	bl	80046d8 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	429a      	cmp	r2, r3
 8006514:	d302      	bcc.n	800651c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d116      	bne.n	800654a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
                hi2c->PreviousState = I2C_STATE_NONE;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	631a      	str	r2, [r3, #48]	@ 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2220      	movs	r2, #32
 8006526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006536:	f043 0220 	orr.w	r2, r3, #32
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	641a      	str	r2, [r3, #64]	@ 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

                return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e020      	b.n	800658c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	0c1b      	lsrs	r3, r3, #16
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b01      	cmp	r3, #1
 8006552:	d10c      	bne.n	800656e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	43da      	mvns	r2, r3
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	4013      	ands	r3, r2
 8006560:	b29b      	uxth	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	bf14      	ite	ne
 8006566:	2301      	movne	r3, #1
 8006568:	2300      	moveq	r3, #0
 800656a:	b2db      	uxtb	r3, r3
 800656c:	e00b      	b.n	8006586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	43da      	mvns	r2, r3
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	4013      	ands	r3, r2
 800657a:	b29b      	uxth	r3, r3
 800657c:	2b00      	cmp	r3, #0
 800657e:	bf14      	ite	ne
 8006580:	2301      	movne	r3, #1
 8006582:	2300      	moveq	r3, #0
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b00      	cmp	r3, #0
 8006588:	d18d      	bne.n	80064a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
            }
        }
    }
    return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <I2C_WaitOnTXEFlagUntilTimeout>:
 *                the configuration information for the specified I2C.
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout, uint32_t Tickstart) {
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 80065a0:	e02d      	b.n	80065fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
        /* Check if a NACK is detected */
        if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f000 f8ce 	bl	8006744 <I2C_IsAcknowledgeFailed>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
            return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e02d      	b.n	800660e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b8:	d021      	beq.n	80065fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 80065ba:	f7fe f88d 	bl	80046d8 <HAL_GetTick>
 80065be:	4602      	mov	r2, r0
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d302      	bcc.n	80065d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d116      	bne.n	80065fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
                hi2c->PreviousState = I2C_STATE_NONE;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	631a      	str	r2, [r3, #48]	@ 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2220      	movs	r2, #32
 80065da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ea:	f043 0220 	orr.w	r2, r3, #32
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	641a      	str	r2, [r3, #64]	@ 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

                return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e007      	b.n	800660e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	695b      	ldr	r3, [r3, #20]
 8006604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006608:	2b80      	cmp	r3, #128	@ 0x80
 800660a:	d1ca      	bne.n	80065a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
            }
        }
    }
    return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <I2C_WaitOnBTFFlagUntilTimeout>:
 *                the configuration information for the specified I2C.
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout, uint32_t Tickstart) {
 8006616:	b580      	push	{r7, lr}
 8006618:	b084      	sub	sp, #16
 800661a:	af00      	add	r7, sp, #0
 800661c:	60f8      	str	r0, [r7, #12]
 800661e:	60b9      	str	r1, [r7, #8]
 8006620:	607a      	str	r2, [r7, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET) {
 8006622:	e02d      	b.n	8006680 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
        /* Check if a NACK is detected */
        if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f000 f88d 	bl	8006744 <I2C_IsAcknowledgeFailed>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d001      	beq.n	8006634 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
            return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e02d      	b.n	8006690 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800663a:	d021      	beq.n	8006680 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 800663c:	f7fe f84c 	bl	80046d8 <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	429a      	cmp	r2, r3
 800664a:	d302      	bcc.n	8006652 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d116      	bne.n	8006680 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
                hi2c->PreviousState = I2C_STATE_NONE;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	631a      	str	r2, [r3, #48]	@ 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2220      	movs	r2, #32
 800665c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666c:	f043 0220 	orr.w	r2, r3, #32
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	641a      	str	r2, [r3, #64]	@ 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

                return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e007      	b.n	8006690 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET) {
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	f003 0304 	and.w	r3, r3, #4
 800668a:	2b04      	cmp	r3, #4
 800668c:	d1ca      	bne.n	8006624 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
            }
        }
    }
    return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <I2C_WaitOnRXNEFlagUntilTimeout>:
 *                the configuration information for the specified I2C.
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout, uint32_t Tickstart) {
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]

    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 80066a4:	e042      	b.n	800672c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
        /* Check if a STOPF is detected */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) {
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	695b      	ldr	r3, [r3, #20]
 80066ac:	f003 0310 	and.w	r3, r3, #16
 80066b0:	2b10      	cmp	r3, #16
 80066b2:	d119      	bne.n	80066e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f06f 0210 	mvn.w	r2, #16
 80066bc:	615a      	str	r2, [r3, #20]

            hi2c->PreviousState = I2C_STATE_NONE;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	631a      	str	r2, [r3, #48]	@ 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2220      	movs	r2, #32
 80066c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_NONE;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e029      	b.n	800673c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
        }

        /* Check for the Timeout */
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 80066e8:	f7fd fff6 	bl	80046d8 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d302      	bcc.n	80066fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d116      	bne.n	800672c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
            hi2c->PreviousState = I2C_STATE_NONE;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	631a      	str	r2, [r3, #48]	@ 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2220      	movs	r2, #32
 8006708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006718:	f043 0220 	orr.w	r2, r3, #32
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e007      	b.n	800673c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006736:	2b40      	cmp	r3, #64	@ 0x40
 8006738:	d1b5      	bne.n	80066a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
        }
    }
    return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <I2C_IsAcknowledgeFailed>:
 * @brief  This function handles Acknowledge failed detection during an I2C Communication.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef * hi2c) {
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006756:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800675a:	d11b      	bne.n	8006794 <I2C_IsAcknowledgeFailed+0x50>
        /* Clear NACKF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006764:	615a      	str	r2, [r3, #20]

        hi2c->PreviousState = I2C_STATE_NONE;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2220      	movs	r2, #32
 8006770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006780:	f043 0204 	orr.w	r2, r3, #4
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e000      	b.n	8006796 <I2C_IsAcknowledgeFailed+0x52>
    }
    return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80067a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067a4:	b08f      	sub	sp, #60	@ 0x3c
 80067a6:	af0a      	add	r7, sp, #40	@ 0x28
 80067a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e10f      	b.n	80069d4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d106      	bne.n	80067d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f009 fac6 	bl	800fd60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2203      	movs	r2, #3
 80067d8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d102      	bne.n	80067ee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f003 f95f 	bl	8009ab6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	603b      	str	r3, [r7, #0]
 80067fe:	687e      	ldr	r6, [r7, #4]
 8006800:	466d      	mov	r5, sp
 8006802:	f106 0410 	add.w	r4, r6, #16
 8006806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006808:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800680a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800680c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800680e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006812:	e885 0003 	stmia.w	r5, {r0, r1}
 8006816:	1d33      	adds	r3, r6, #4
 8006818:	cb0e      	ldmia	r3, {r1, r2, r3}
 800681a:	6838      	ldr	r0, [r7, #0]
 800681c:	f003 f836 	bl	800988c <USB_CoreInit>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d005      	beq.n	8006832 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2202      	movs	r2, #2
 800682a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e0d0      	b.n	80069d4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2100      	movs	r1, #0
 8006838:	4618      	mov	r0, r3
 800683a:	f003 f94d 	bl	8009ad8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800683e:	2300      	movs	r3, #0
 8006840:	73fb      	strb	r3, [r7, #15]
 8006842:	e04a      	b.n	80068da <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006844:	7bfa      	ldrb	r2, [r7, #15]
 8006846:	6879      	ldr	r1, [r7, #4]
 8006848:	4613      	mov	r3, r2
 800684a:	00db      	lsls	r3, r3, #3
 800684c:	4413      	add	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	440b      	add	r3, r1
 8006852:	333d      	adds	r3, #61	@ 0x3d
 8006854:	2201      	movs	r2, #1
 8006856:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006858:	7bfa      	ldrb	r2, [r7, #15]
 800685a:	6879      	ldr	r1, [r7, #4]
 800685c:	4613      	mov	r3, r2
 800685e:	00db      	lsls	r3, r3, #3
 8006860:	4413      	add	r3, r2
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	440b      	add	r3, r1
 8006866:	333c      	adds	r3, #60	@ 0x3c
 8006868:	7bfa      	ldrb	r2, [r7, #15]
 800686a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800686c:	7bfa      	ldrb	r2, [r7, #15]
 800686e:	7bfb      	ldrb	r3, [r7, #15]
 8006870:	b298      	uxth	r0, r3
 8006872:	6879      	ldr	r1, [r7, #4]
 8006874:	4613      	mov	r3, r2
 8006876:	00db      	lsls	r3, r3, #3
 8006878:	4413      	add	r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	440b      	add	r3, r1
 800687e:	3344      	adds	r3, #68	@ 0x44
 8006880:	4602      	mov	r2, r0
 8006882:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006884:	7bfa      	ldrb	r2, [r7, #15]
 8006886:	6879      	ldr	r1, [r7, #4]
 8006888:	4613      	mov	r3, r2
 800688a:	00db      	lsls	r3, r3, #3
 800688c:	4413      	add	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	440b      	add	r3, r1
 8006892:	3340      	adds	r3, #64	@ 0x40
 8006894:	2200      	movs	r2, #0
 8006896:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006898:	7bfa      	ldrb	r2, [r7, #15]
 800689a:	6879      	ldr	r1, [r7, #4]
 800689c:	4613      	mov	r3, r2
 800689e:	00db      	lsls	r3, r3, #3
 80068a0:	4413      	add	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	440b      	add	r3, r1
 80068a6:	3348      	adds	r3, #72	@ 0x48
 80068a8:	2200      	movs	r2, #0
 80068aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80068ac:	7bfa      	ldrb	r2, [r7, #15]
 80068ae:	6879      	ldr	r1, [r7, #4]
 80068b0:	4613      	mov	r3, r2
 80068b2:	00db      	lsls	r3, r3, #3
 80068b4:	4413      	add	r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	440b      	add	r3, r1
 80068ba:	334c      	adds	r3, #76	@ 0x4c
 80068bc:	2200      	movs	r2, #0
 80068be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80068c0:	7bfa      	ldrb	r2, [r7, #15]
 80068c2:	6879      	ldr	r1, [r7, #4]
 80068c4:	4613      	mov	r3, r2
 80068c6:	00db      	lsls	r3, r3, #3
 80068c8:	4413      	add	r3, r2
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	440b      	add	r3, r1
 80068ce:	3354      	adds	r3, #84	@ 0x54
 80068d0:	2200      	movs	r2, #0
 80068d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068d4:	7bfb      	ldrb	r3, [r7, #15]
 80068d6:	3301      	adds	r3, #1
 80068d8:	73fb      	strb	r3, [r7, #15]
 80068da:	7bfa      	ldrb	r2, [r7, #15]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d3af      	bcc.n	8006844 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068e4:	2300      	movs	r3, #0
 80068e6:	73fb      	strb	r3, [r7, #15]
 80068e8:	e044      	b.n	8006974 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80068ea:	7bfa      	ldrb	r2, [r7, #15]
 80068ec:	6879      	ldr	r1, [r7, #4]
 80068ee:	4613      	mov	r3, r2
 80068f0:	00db      	lsls	r3, r3, #3
 80068f2:	4413      	add	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	440b      	add	r3, r1
 80068f8:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 80068fc:	2200      	movs	r2, #0
 80068fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006900:	7bfa      	ldrb	r2, [r7, #15]
 8006902:	6879      	ldr	r1, [r7, #4]
 8006904:	4613      	mov	r3, r2
 8006906:	00db      	lsls	r3, r3, #3
 8006908:	4413      	add	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	440b      	add	r3, r1
 800690e:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8006912:	7bfa      	ldrb	r2, [r7, #15]
 8006914:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006916:	7bfa      	ldrb	r2, [r7, #15]
 8006918:	6879      	ldr	r1, [r7, #4]
 800691a:	4613      	mov	r3, r2
 800691c:	00db      	lsls	r3, r3, #3
 800691e:	4413      	add	r3, r2
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	440b      	add	r3, r1
 8006924:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8006928:	2200      	movs	r2, #0
 800692a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800692c:	7bfa      	ldrb	r2, [r7, #15]
 800692e:	6879      	ldr	r1, [r7, #4]
 8006930:	4613      	mov	r3, r2
 8006932:	00db      	lsls	r3, r3, #3
 8006934:	4413      	add	r3, r2
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	440b      	add	r3, r1
 800693a:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800693e:	2200      	movs	r2, #0
 8006940:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006942:	7bfa      	ldrb	r2, [r7, #15]
 8006944:	6879      	ldr	r1, [r7, #4]
 8006946:	4613      	mov	r3, r2
 8006948:	00db      	lsls	r3, r3, #3
 800694a:	4413      	add	r3, r2
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	440b      	add	r3, r1
 8006950:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8006954:	2200      	movs	r2, #0
 8006956:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006958:	7bfa      	ldrb	r2, [r7, #15]
 800695a:	6879      	ldr	r1, [r7, #4]
 800695c:	4613      	mov	r3, r2
 800695e:	00db      	lsls	r3, r3, #3
 8006960:	4413      	add	r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	440b      	add	r3, r1
 8006966:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800696a:	2200      	movs	r2, #0
 800696c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800696e:	7bfb      	ldrb	r3, [r7, #15]
 8006970:	3301      	adds	r3, #1
 8006972:	73fb      	strb	r3, [r7, #15]
 8006974:	7bfa      	ldrb	r2, [r7, #15]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	429a      	cmp	r2, r3
 800697c:	d3b5      	bcc.n	80068ea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	603b      	str	r3, [r7, #0]
 8006984:	687e      	ldr	r6, [r7, #4]
 8006986:	466d      	mov	r5, sp
 8006988:	f106 0410 	add.w	r4, r6, #16
 800698c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800698e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006990:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006992:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006994:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006998:	e885 0003 	stmia.w	r5, {r0, r1}
 800699c:	1d33      	adds	r3, r6, #4
 800699e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069a0:	6838      	ldr	r0, [r7, #0]
 80069a2:	f003 f8e5 	bl	8009b70 <USB_DevInit>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d005      	beq.n	80069b8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2202      	movs	r2, #2
 80069b0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e00d      	b.n	80069d4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4618      	mov	r0, r3
 80069ce:	f004 fa34 	bl	800ae3a <USB_DevDisconnect>

  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080069dc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d101      	bne.n	80069f8 <HAL_PCD_Start+0x1c>
 80069f4:	2302      	movs	r3, #2
 80069f6:	e020      	b.n	8006a3a <HAL_PCD_Start+0x5e>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d109      	bne.n	8006a1c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d005      	beq.n	8006a1c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a14:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4618      	mov	r0, r3
 8006a22:	f003 f837 	bl	8009a94 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f004 f9e4 	bl	800adf8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006a42:	b590      	push	{r4, r7, lr}
 8006a44:	b08d      	sub	sp, #52	@ 0x34
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f004 faa2 	bl	800afa2 <USB_GetMode>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f040 848a 	bne.w	800737a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f004 fa06 	bl	800ae7c <USB_ReadInterrupts>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f000 8480 	beq.w	8007378 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	0a1b      	lsrs	r3, r3, #8
 8006a82:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4618      	mov	r0, r3
 8006a92:	f004 f9f3 	bl	800ae7c <USB_ReadInterrupts>
 8006a96:	4603      	mov	r3, r0
 8006a98:	f003 0302 	and.w	r3, r3, #2
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d107      	bne.n	8006ab0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	695a      	ldr	r2, [r3, #20]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f002 0202 	and.w	r2, r2, #2
 8006aae:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f004 f9e1 	bl	800ae7c <USB_ReadInterrupts>
 8006aba:	4603      	mov	r3, r0
 8006abc:	f003 0310 	and.w	r3, r3, #16
 8006ac0:	2b10      	cmp	r3, #16
 8006ac2:	d161      	bne.n	8006b88 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	699a      	ldr	r2, [r3, #24]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f022 0210 	bic.w	r2, r2, #16
 8006ad2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	6a1b      	ldr	r3, [r3, #32]
 8006ad8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	f003 020f 	and.w	r2, r3, #15
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	00db      	lsls	r3, r3, #3
 8006ae4:	4413      	add	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	4413      	add	r3, r2
 8006af0:	3304      	adds	r3, #4
 8006af2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	0c5b      	lsrs	r3, r3, #17
 8006af8:	f003 030f 	and.w	r3, r3, #15
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d124      	bne.n	8006b4a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006b00:	69ba      	ldr	r2, [r7, #24]
 8006b02:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006b06:	4013      	ands	r3, r2
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d035      	beq.n	8006b78 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	091b      	lsrs	r3, r3, #4
 8006b14:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006b16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	6a38      	ldr	r0, [r7, #32]
 8006b20:	f004 f818 	bl	800ab54 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	691a      	ldr	r2, [r3, #16]
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	091b      	lsrs	r3, r3, #4
 8006b2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b30:	441a      	add	r2, r3
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	6a1a      	ldr	r2, [r3, #32]
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	091b      	lsrs	r3, r3, #4
 8006b3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b42:	441a      	add	r2, r3
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	621a      	str	r2, [r3, #32]
 8006b48:	e016      	b.n	8006b78 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	0c5b      	lsrs	r3, r3, #17
 8006b4e:	f003 030f 	and.w	r3, r3, #15
 8006b52:	2b06      	cmp	r3, #6
 8006b54:	d110      	bne.n	8006b78 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8006b5c:	2208      	movs	r2, #8
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6a38      	ldr	r0, [r7, #32]
 8006b62:	f003 fff7 	bl	800ab54 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	6a1a      	ldr	r2, [r3, #32]
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	091b      	lsrs	r3, r3, #4
 8006b6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b72:	441a      	add	r2, r3
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	699a      	ldr	r2, [r3, #24]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f042 0210 	orr.w	r2, r2, #16
 8006b86:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f004 f975 	bl	800ae7c <USB_ReadInterrupts>
 8006b92:	4603      	mov	r3, r0
 8006b94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006b98:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006b9c:	f040 80a7 	bne.w	8006cee <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f004 f97a 	bl	800aea2 <USB_ReadDevAllOutEpInterrupt>
 8006bae:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006bb0:	e099      	b.n	8006ce6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb4:	f003 0301 	and.w	r3, r3, #1
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f000 808e 	beq.w	8006cda <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bc4:	b2d2      	uxtb	r2, r2
 8006bc6:	4611      	mov	r1, r2
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f004 f99e 	bl	800af0a <USB_ReadDevOutEPInterrupt>
 8006bce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	f003 0301 	and.w	r3, r3, #1
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00c      	beq.n	8006bf4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bdc:	015a      	lsls	r2, r3, #5
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	4413      	add	r3, r2
 8006be2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006be6:	461a      	mov	r2, r3
 8006be8:	2301      	movs	r3, #1
 8006bea:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006bec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fec2 	bl	8007978 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	f003 0308 	and.w	r3, r3, #8
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00c      	beq.n	8006c18 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	2308      	movs	r3, #8
 8006c0e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006c10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 ff98 	bl	8007b48 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	f003 0310 	and.w	r3, r3, #16
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d008      	beq.n	8006c34 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c24:	015a      	lsls	r2, r3, #5
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	4413      	add	r3, r2
 8006c2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c2e:	461a      	mov	r2, r3
 8006c30:	2310      	movs	r3, #16
 8006c32:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d030      	beq.n	8006ca0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006c3e:	6a3b      	ldr	r3, [r7, #32]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c46:	2b80      	cmp	r3, #128	@ 0x80
 8006c48:	d109      	bne.n	8006c5e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	69fa      	ldr	r2, [r7, #28]
 8006c54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c58:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006c5c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006c5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c60:	4613      	mov	r3, r2
 8006c62:	00db      	lsls	r3, r3, #3
 8006c64:	4413      	add	r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	4413      	add	r3, r2
 8006c70:	3304      	adds	r3, #4
 8006c72:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	78db      	ldrb	r3, [r3, #3]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d108      	bne.n	8006c8e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	4619      	mov	r1, r3
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f009 f965 	bl	800ff58 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c90:	015a      	lsls	r2, r3, #5
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f003 0320 	and.w	r3, r3, #32
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d008      	beq.n	8006cbc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cac:	015a      	lsls	r2, r3, #5
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	2320      	movs	r3, #32
 8006cba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d009      	beq.n	8006cda <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc8:	015a      	lsls	r2, r3, #5
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006cd8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cdc:	3301      	adds	r3, #1
 8006cde:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce2:	085b      	lsrs	r3, r3, #1
 8006ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f47f af62 	bne.w	8006bb2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f004 f8c2 	bl	800ae7c <USB_ReadInterrupts>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006cfe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d02:	f040 80db 	bne.w	8006ebc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f004 f8e3 	bl	800aed6 <USB_ReadDevAllInEpInterrupt>
 8006d10:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006d12:	2300      	movs	r3, #0
 8006d14:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006d16:	e0cd      	b.n	8006eb4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f000 80c2 	beq.w	8006ea8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d2a:	b2d2      	uxtb	r2, r2
 8006d2c:	4611      	mov	r1, r2
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f004 f909 	bl	800af46 <USB_ReadDevInEPInterrupt>
 8006d34:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	f003 0301 	and.w	r3, r3, #1
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d057      	beq.n	8006df0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d42:	f003 030f 	and.w	r3, r3, #15
 8006d46:	2201      	movs	r2, #1
 8006d48:	fa02 f303 	lsl.w	r3, r2, r3
 8006d4c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	43db      	mvns	r3, r3
 8006d5a:	69f9      	ldr	r1, [r7, #28]
 8006d5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d60:	4013      	ands	r3, r2
 8006d62:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d70:	461a      	mov	r2, r3
 8006d72:	2301      	movs	r3, #1
 8006d74:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d132      	bne.n	8006de4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006d7e:	6879      	ldr	r1, [r7, #4]
 8006d80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d82:	4613      	mov	r3, r2
 8006d84:	00db      	lsls	r3, r3, #3
 8006d86:	4413      	add	r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	440b      	add	r3, r1
 8006d8c:	334c      	adds	r3, #76	@ 0x4c
 8006d8e:	6819      	ldr	r1, [r3, #0]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d94:	4613      	mov	r3, r2
 8006d96:	00db      	lsls	r3, r3, #3
 8006d98:	4413      	add	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4403      	add	r3, r0
 8006d9e:	3348      	adds	r3, #72	@ 0x48
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4419      	add	r1, r3
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006da8:	4613      	mov	r3, r2
 8006daa:	00db      	lsls	r3, r3, #3
 8006dac:	4413      	add	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4403      	add	r3, r0
 8006db2:	334c      	adds	r3, #76	@ 0x4c
 8006db4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d113      	bne.n	8006de4 <HAL_PCD_IRQHandler+0x3a2>
 8006dbc:	6879      	ldr	r1, [r7, #4]
 8006dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	00db      	lsls	r3, r3, #3
 8006dc4:	4413      	add	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	440b      	add	r3, r1
 8006dca:	3354      	adds	r3, #84	@ 0x54
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d108      	bne.n	8006de4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6818      	ldr	r0, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8006ddc:	461a      	mov	r2, r3
 8006dde:	2101      	movs	r1, #1
 8006de0:	f004 f910 	bl	800b004 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	4619      	mov	r1, r3
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f009 f839 	bl	800fe62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	f003 0308 	and.w	r3, r3, #8
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d008      	beq.n	8006e0c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfc:	015a      	lsls	r2, r3, #5
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	4413      	add	r3, r2
 8006e02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e06:	461a      	mov	r2, r3
 8006e08:	2308      	movs	r3, #8
 8006e0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	f003 0310 	and.w	r3, r3, #16
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d008      	beq.n	8006e28 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e18:	015a      	lsls	r2, r3, #5
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e22:	461a      	mov	r2, r3
 8006e24:	2310      	movs	r3, #16
 8006e26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d008      	beq.n	8006e44 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e34:	015a      	lsls	r2, r3, #5
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	4413      	add	r3, r2
 8006e3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e3e:	461a      	mov	r2, r3
 8006e40:	2340      	movs	r3, #64	@ 0x40
 8006e42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	f003 0302 	and.w	r3, r3, #2
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d023      	beq.n	8006e96 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006e4e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006e50:	6a38      	ldr	r0, [r7, #32]
 8006e52:	f002 fff1 	bl	8009e38 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e58:	4613      	mov	r3, r2
 8006e5a:	00db      	lsls	r3, r3, #3
 8006e5c:	4413      	add	r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	3338      	adds	r3, #56	@ 0x38
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	4413      	add	r3, r2
 8006e66:	3304      	adds	r3, #4
 8006e68:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	78db      	ldrb	r3, [r3, #3]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d108      	bne.n	8006e84 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	2200      	movs	r2, #0
 8006e76:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f009 f87c 	bl	800ff7c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e86:	015a      	lsls	r2, r3, #5
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e90:	461a      	mov	r2, r3
 8006e92:	2302      	movs	r3, #2
 8006e94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d003      	beq.n	8006ea8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006ea0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fcdb 	bl	800785e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eaa:	3301      	adds	r3, #1
 8006eac:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb0:	085b      	lsrs	r3, r3, #1
 8006eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f47f af2e 	bne.w	8006d18 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f003 ffdb 	bl	800ae7c <USB_ReadInterrupts>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ecc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ed0:	d122      	bne.n	8006f18 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	69fa      	ldr	r2, [r7, #28]
 8006edc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ee0:	f023 0301 	bic.w	r3, r3, #1
 8006ee4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d108      	bne.n	8006f02 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006ef8:	2100      	movs	r1, #0
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 fec2 	bl	8007c84 <HAL_PCDEx_LPM_Callback>
 8006f00:	e002      	b.n	8006f08 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f009 f81a 	bl	800ff3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	695a      	ldr	r2, [r3, #20]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8006f16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f003 ffad 	bl	800ae7c <USB_ReadInterrupts>
 8006f22:	4603      	mov	r3, r0
 8006f24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f2c:	d112      	bne.n	8006f54 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f003 0301 	and.w	r3, r3, #1
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d102      	bne.n	8006f44 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f008 ffd6 	bl	800fef0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	695a      	ldr	r2, [r3, #20]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006f52:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f003 ff8f 	bl	800ae7c <USB_ReadInterrupts>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006f64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f68:	f040 80b7 	bne.w	80070da <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	69fa      	ldr	r2, [r7, #28]
 8006f76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f7a:	f023 0301 	bic.w	r3, r3, #1
 8006f7e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2110      	movs	r1, #16
 8006f86:	4618      	mov	r0, r3
 8006f88:	f002 ff56 	bl	8009e38 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f90:	e046      	b.n	8007020 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f94:	015a      	lsls	r2, r3, #5
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	4413      	add	r3, r2
 8006f9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006fa4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fa8:	015a      	lsls	r2, r3, #5
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	4413      	add	r3, r2
 8006fae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fb6:	0151      	lsls	r1, r2, #5
 8006fb8:	69fa      	ldr	r2, [r7, #28]
 8006fba:	440a      	add	r2, r1
 8006fbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fc0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006fc4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fc8:	015a      	lsls	r2, r3, #5
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	4413      	add	r3, r2
 8006fce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006fd8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fdc:	015a      	lsls	r2, r3, #5
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fea:	0151      	lsls	r1, r2, #5
 8006fec:	69fa      	ldr	r2, [r7, #28]
 8006fee:	440a      	add	r2, r1
 8006ff0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ff4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006ff8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	4413      	add	r3, r2
 8007002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800700a:	0151      	lsls	r1, r2, #5
 800700c:	69fa      	ldr	r2, [r7, #28]
 800700e:	440a      	add	r2, r1
 8007010:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007014:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007018:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800701a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800701c:	3301      	adds	r3, #1
 800701e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007026:	429a      	cmp	r2, r3
 8007028:	d3b3      	bcc.n	8006f92 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007030:	69db      	ldr	r3, [r3, #28]
 8007032:	69fa      	ldr	r2, [r7, #28]
 8007034:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007038:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800703c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007042:	2b00      	cmp	r3, #0
 8007044:	d016      	beq.n	8007074 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800704c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007050:	69fa      	ldr	r2, [r7, #28]
 8007052:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007056:	f043 030b 	orr.w	r3, r3, #11
 800705a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007066:	69fa      	ldr	r2, [r7, #28]
 8007068:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800706c:	f043 030b 	orr.w	r3, r3, #11
 8007070:	6453      	str	r3, [r2, #68]	@ 0x44
 8007072:	e015      	b.n	80070a0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800707a:	695b      	ldr	r3, [r3, #20]
 800707c:	69fa      	ldr	r2, [r7, #28]
 800707e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007082:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007086:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800708a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	69fa      	ldr	r2, [r7, #28]
 8007096:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800709a:	f043 030b 	orr.w	r3, r3, #11
 800709e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	69fa      	ldr	r2, [r7, #28]
 80070aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070ae:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80070b2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6818      	ldr	r0, [r3, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80070c4:	461a      	mov	r2, r3
 80070c6:	f003 ff9d 	bl	800b004 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	695a      	ldr	r2, [r3, #20]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80070d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4618      	mov	r0, r3
 80070e0:	f003 fecc 	bl	800ae7c <USB_ReadInterrupts>
 80070e4:	4603      	mov	r3, r0
 80070e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070ee:	d124      	bne.n	800713a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4618      	mov	r0, r3
 80070f6:	f003 ff62 	bl	800afbe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4618      	mov	r0, r3
 8007100:	f002 ff17 	bl	8009f32 <USB_GetDevSpeed>
 8007104:	4603      	mov	r3, r0
 8007106:	461a      	mov	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681c      	ldr	r4, [r3, #0]
 8007110:	f001 f9e8 	bl	80084e4 <HAL_RCC_GetHCLKFreq>
 8007114:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800711a:	b2db      	uxtb	r3, r3
 800711c:	461a      	mov	r2, r3
 800711e:	4620      	mov	r0, r4
 8007120:	f002 fc16 	bl	8009950 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f008 fec4 	bl	800feb2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	695a      	ldr	r2, [r3, #20]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007138:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4618      	mov	r0, r3
 8007140:	f003 fe9c 	bl	800ae7c <USB_ReadInterrupts>
 8007144:	4603      	mov	r3, r0
 8007146:	f003 0308 	and.w	r3, r3, #8
 800714a:	2b08      	cmp	r3, #8
 800714c:	d10a      	bne.n	8007164 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f008 fea1 	bl	800fe96 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	695a      	ldr	r2, [r3, #20]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f002 0208 	and.w	r2, r2, #8
 8007162:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4618      	mov	r0, r3
 800716a:	f003 fe87 	bl	800ae7c <USB_ReadInterrupts>
 800716e:	4603      	mov	r3, r0
 8007170:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007174:	2b80      	cmp	r3, #128	@ 0x80
 8007176:	d122      	bne.n	80071be <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007178:	6a3b      	ldr	r3, [r7, #32]
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007180:	6a3b      	ldr	r3, [r7, #32]
 8007182:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007184:	2301      	movs	r3, #1
 8007186:	627b      	str	r3, [r7, #36]	@ 0x24
 8007188:	e014      	b.n	80071b4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800718a:	6879      	ldr	r1, [r7, #4]
 800718c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800718e:	4613      	mov	r3, r2
 8007190:	00db      	lsls	r3, r3, #3
 8007192:	4413      	add	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	440b      	add	r3, r1
 8007198:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d105      	bne.n	80071ae <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80071a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	4619      	mov	r1, r3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 fb27 	bl	80077fc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80071ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b0:	3301      	adds	r3, #1
 80071b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d3e5      	bcc.n	800718a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f003 fe5a 	bl	800ae7c <USB_ReadInterrupts>
 80071c8:	4603      	mov	r3, r0
 80071ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80071ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071d2:	d13b      	bne.n	800724c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80071d4:	2301      	movs	r3, #1
 80071d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80071d8:	e02b      	b.n	8007232 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80071da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071dc:	015a      	lsls	r2, r3, #5
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	4413      	add	r3, r2
 80071e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80071ea:	6879      	ldr	r1, [r7, #4]
 80071ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071ee:	4613      	mov	r3, r2
 80071f0:	00db      	lsls	r3, r3, #3
 80071f2:	4413      	add	r3, r2
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	440b      	add	r3, r1
 80071f8:	3340      	adds	r3, #64	@ 0x40
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d115      	bne.n	800722c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007200:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007202:	2b00      	cmp	r3, #0
 8007204:	da12      	bge.n	800722c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007206:	6879      	ldr	r1, [r7, #4]
 8007208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800720a:	4613      	mov	r3, r2
 800720c:	00db      	lsls	r3, r3, #3
 800720e:	4413      	add	r3, r2
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	440b      	add	r3, r1
 8007214:	333f      	adds	r3, #63	@ 0x3f
 8007216:	2201      	movs	r2, #1
 8007218:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800721a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721c:	b2db      	uxtb	r3, r3
 800721e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007222:	b2db      	uxtb	r3, r3
 8007224:	4619      	mov	r1, r3
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fae8 	bl	80077fc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800722c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722e:	3301      	adds	r3, #1
 8007230:	627b      	str	r3, [r7, #36]	@ 0x24
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007238:	429a      	cmp	r2, r3
 800723a:	d3ce      	bcc.n	80071da <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	695a      	ldr	r2, [r3, #20]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800724a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4618      	mov	r0, r3
 8007252:	f003 fe13 	bl	800ae7c <USB_ReadInterrupts>
 8007256:	4603      	mov	r3, r0
 8007258:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800725c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007260:	d155      	bne.n	800730e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007262:	2301      	movs	r3, #1
 8007264:	627b      	str	r3, [r7, #36]	@ 0x24
 8007266:	e045      	b.n	80072f4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	4413      	add	r3, r2
 8007270:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007278:	6879      	ldr	r1, [r7, #4]
 800727a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800727c:	4613      	mov	r3, r2
 800727e:	00db      	lsls	r3, r3, #3
 8007280:	4413      	add	r3, r2
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	440b      	add	r3, r1
 8007286:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d12e      	bne.n	80072ee <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007290:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007292:	2b00      	cmp	r3, #0
 8007294:	da2b      	bge.n	80072ee <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 80072a2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d121      	bne.n	80072ee <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80072aa:	6879      	ldr	r1, [r7, #4]
 80072ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072ae:	4613      	mov	r3, r2
 80072b0:	00db      	lsls	r3, r3, #3
 80072b2:	4413      	add	r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	440b      	add	r3, r1
 80072b8:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80072bc:	2201      	movs	r2, #1
 80072be:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80072c0:	6a3b      	ldr	r3, [r7, #32]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80072c8:	6a3b      	ldr	r3, [r7, #32]
 80072ca:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80072cc:	6a3b      	ldr	r3, [r7, #32]
 80072ce:	695b      	ldr	r3, [r3, #20]
 80072d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10a      	bne.n	80072ee <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	69fa      	ldr	r2, [r7, #28]
 80072e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80072ea:	6053      	str	r3, [r2, #4]
            break;
 80072ec:	e007      	b.n	80072fe <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80072ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f0:	3301      	adds	r3, #1
 80072f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d3b4      	bcc.n	8007268 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	695a      	ldr	r2, [r3, #20]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800730c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4618      	mov	r0, r3
 8007314:	f003 fdb2 	bl	800ae7c <USB_ReadInterrupts>
 8007318:	4603      	mov	r3, r0
 800731a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800731e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007322:	d10a      	bne.n	800733a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f008 fe3b 	bl	800ffa0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	695a      	ldr	r2, [r3, #20]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007338:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4618      	mov	r0, r3
 8007340:	f003 fd9c 	bl	800ae7c <USB_ReadInterrupts>
 8007344:	4603      	mov	r3, r0
 8007346:	f003 0304 	and.w	r3, r3, #4
 800734a:	2b04      	cmp	r3, #4
 800734c:	d115      	bne.n	800737a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	f003 0304 	and.w	r3, r3, #4
 800735c:	2b00      	cmp	r3, #0
 800735e:	d002      	beq.n	8007366 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f008 fe2b 	bl	800ffbc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	6859      	ldr	r1, [r3, #4]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	69ba      	ldr	r2, [r7, #24]
 8007372:	430a      	orrs	r2, r1
 8007374:	605a      	str	r2, [r3, #4]
 8007376:	e000      	b.n	800737a <HAL_PCD_IRQHandler+0x938>
      return;
 8007378:	bf00      	nop
    }
  }
}
 800737a:	3734      	adds	r7, #52	@ 0x34
 800737c:	46bd      	mov	sp, r7
 800737e:	bd90      	pop	{r4, r7, pc}

08007380 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	460b      	mov	r3, r1
 800738a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007392:	2b01      	cmp	r3, #1
 8007394:	d101      	bne.n	800739a <HAL_PCD_SetAddress+0x1a>
 8007396:	2302      	movs	r3, #2
 8007398:	e013      	b.n	80073c2 <HAL_PCD_SetAddress+0x42>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2201      	movs	r2, #1
 800739e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	78fa      	ldrb	r2, [r7, #3]
 80073a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	78fa      	ldrb	r2, [r7, #3]
 80073b0:	4611      	mov	r1, r2
 80073b2:	4618      	mov	r0, r3
 80073b4:	f003 fcfa 	bl	800adac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3708      	adds	r7, #8
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b084      	sub	sp, #16
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	4608      	mov	r0, r1
 80073d4:	4611      	mov	r1, r2
 80073d6:	461a      	mov	r2, r3
 80073d8:	4603      	mov	r3, r0
 80073da:	70fb      	strb	r3, [r7, #3]
 80073dc:	460b      	mov	r3, r1
 80073de:	803b      	strh	r3, [r7, #0]
 80073e0:	4613      	mov	r3, r2
 80073e2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80073e4:	2300      	movs	r3, #0
 80073e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80073e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	da0f      	bge.n	8007410 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80073f0:	78fb      	ldrb	r3, [r7, #3]
 80073f2:	f003 020f 	and.w	r2, r3, #15
 80073f6:	4613      	mov	r3, r2
 80073f8:	00db      	lsls	r3, r3, #3
 80073fa:	4413      	add	r3, r2
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	3338      	adds	r3, #56	@ 0x38
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	4413      	add	r3, r2
 8007404:	3304      	adds	r3, #4
 8007406:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2201      	movs	r2, #1
 800740c:	705a      	strb	r2, [r3, #1]
 800740e:	e00f      	b.n	8007430 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007410:	78fb      	ldrb	r3, [r7, #3]
 8007412:	f003 020f 	and.w	r2, r3, #15
 8007416:	4613      	mov	r3, r2
 8007418:	00db      	lsls	r3, r3, #3
 800741a:	4413      	add	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	4413      	add	r3, r2
 8007426:	3304      	adds	r3, #4
 8007428:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007430:	78fb      	ldrb	r3, [r7, #3]
 8007432:	f003 030f 	and.w	r3, r3, #15
 8007436:	b2da      	uxtb	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800743c:	883a      	ldrh	r2, [r7, #0]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	78ba      	ldrb	r2, [r7, #2]
 8007446:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	785b      	ldrb	r3, [r3, #1]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d004      	beq.n	800745a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	461a      	mov	r2, r3
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800745a:	78bb      	ldrb	r3, [r7, #2]
 800745c:	2b02      	cmp	r3, #2
 800745e:	d102      	bne.n	8007466 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800746c:	2b01      	cmp	r3, #1
 800746e:	d101      	bne.n	8007474 <HAL_PCD_EP_Open+0xaa>
 8007470:	2302      	movs	r3, #2
 8007472:	e00e      	b.n	8007492 <HAL_PCD_EP_Open+0xc8>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68f9      	ldr	r1, [r7, #12]
 8007482:	4618      	mov	r0, r3
 8007484:	f002 fd7a 	bl	8009f7c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8007490:	7afb      	ldrb	r3, [r7, #11]
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b084      	sub	sp, #16
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
 80074a2:	460b      	mov	r3, r1
 80074a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80074a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	da0f      	bge.n	80074ce <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074ae:	78fb      	ldrb	r3, [r7, #3]
 80074b0:	f003 020f 	and.w	r2, r3, #15
 80074b4:	4613      	mov	r3, r2
 80074b6:	00db      	lsls	r3, r3, #3
 80074b8:	4413      	add	r3, r2
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	3338      	adds	r3, #56	@ 0x38
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	4413      	add	r3, r2
 80074c2:	3304      	adds	r3, #4
 80074c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2201      	movs	r2, #1
 80074ca:	705a      	strb	r2, [r3, #1]
 80074cc:	e00f      	b.n	80074ee <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80074ce:	78fb      	ldrb	r3, [r7, #3]
 80074d0:	f003 020f 	and.w	r2, r3, #15
 80074d4:	4613      	mov	r3, r2
 80074d6:	00db      	lsls	r3, r3, #3
 80074d8:	4413      	add	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	4413      	add	r3, r2
 80074e4:	3304      	adds	r3, #4
 80074e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80074ee:	78fb      	ldrb	r3, [r7, #3]
 80074f0:	f003 030f 	and.w	r3, r3, #15
 80074f4:	b2da      	uxtb	r2, r3
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007500:	2b01      	cmp	r3, #1
 8007502:	d101      	bne.n	8007508 <HAL_PCD_EP_Close+0x6e>
 8007504:	2302      	movs	r3, #2
 8007506:	e00e      	b.n	8007526 <HAL_PCD_EP_Close+0x8c>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68f9      	ldr	r1, [r7, #12]
 8007516:	4618      	mov	r0, r3
 8007518:	f002 fdb8 	bl	800a08c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3710      	adds	r7, #16
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b086      	sub	sp, #24
 8007532:	af00      	add	r7, sp, #0
 8007534:	60f8      	str	r0, [r7, #12]
 8007536:	607a      	str	r2, [r7, #4]
 8007538:	603b      	str	r3, [r7, #0]
 800753a:	460b      	mov	r3, r1
 800753c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800753e:	7afb      	ldrb	r3, [r7, #11]
 8007540:	f003 020f 	and.w	r2, r3, #15
 8007544:	4613      	mov	r3, r2
 8007546:	00db      	lsls	r3, r3, #3
 8007548:	4413      	add	r3, r2
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	4413      	add	r3, r2
 8007554:	3304      	adds	r3, #4
 8007556:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	683a      	ldr	r2, [r7, #0]
 8007562:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	2200      	movs	r2, #0
 8007568:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	2200      	movs	r2, #0
 800756e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007570:	7afb      	ldrb	r3, [r7, #11]
 8007572:	f003 030f 	and.w	r3, r3, #15
 8007576:	b2da      	uxtb	r2, r3
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d102      	bne.n	800758a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800758a:	7afb      	ldrb	r3, [r7, #11]
 800758c:	f003 030f 	and.w	r3, r3, #15
 8007590:	2b00      	cmp	r3, #0
 8007592:	d109      	bne.n	80075a8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6818      	ldr	r0, [r3, #0]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	b2db      	uxtb	r3, r3
 800759e:	461a      	mov	r2, r3
 80075a0:	6979      	ldr	r1, [r7, #20]
 80075a2:	f003 f897 	bl	800a6d4 <USB_EP0StartXfer>
 80075a6:	e008      	b.n	80075ba <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6818      	ldr	r0, [r3, #0]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	461a      	mov	r2, r3
 80075b4:	6979      	ldr	r1, [r7, #20]
 80075b6:	f002 fe45 	bl	800a244 <USB_EPStartXfer>
  }

  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3718      	adds	r7, #24
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80075d0:	78fb      	ldrb	r3, [r7, #3]
 80075d2:	f003 020f 	and.w	r2, r3, #15
 80075d6:	6879      	ldr	r1, [r7, #4]
 80075d8:	4613      	mov	r3, r2
 80075da:	00db      	lsls	r3, r3, #3
 80075dc:	4413      	add	r3, r2
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	440b      	add	r3, r1
 80075e2:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 80075e6:	681b      	ldr	r3, [r3, #0]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b086      	sub	sp, #24
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	607a      	str	r2, [r7, #4]
 80075fe:	603b      	str	r3, [r7, #0]
 8007600:	460b      	mov	r3, r1
 8007602:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007604:	7afb      	ldrb	r3, [r7, #11]
 8007606:	f003 020f 	and.w	r2, r3, #15
 800760a:	4613      	mov	r3, r2
 800760c:	00db      	lsls	r3, r3, #3
 800760e:	4413      	add	r3, r2
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	3338      	adds	r3, #56	@ 0x38
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	4413      	add	r3, r2
 8007618:	3304      	adds	r3, #4
 800761a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	683a      	ldr	r2, [r7, #0]
 8007626:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	2200      	movs	r2, #0
 800762c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	2201      	movs	r2, #1
 8007632:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007634:	7afb      	ldrb	r3, [r7, #11]
 8007636:	f003 030f 	and.w	r3, r3, #15
 800763a:	b2da      	uxtb	r2, r3
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d102      	bne.n	800764e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800764e:	7afb      	ldrb	r3, [r7, #11]
 8007650:	f003 030f 	and.w	r3, r3, #15
 8007654:	2b00      	cmp	r3, #0
 8007656:	d109      	bne.n	800766c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6818      	ldr	r0, [r3, #0]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	b2db      	uxtb	r3, r3
 8007662:	461a      	mov	r2, r3
 8007664:	6979      	ldr	r1, [r7, #20]
 8007666:	f003 f835 	bl	800a6d4 <USB_EP0StartXfer>
 800766a:	e008      	b.n	800767e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6818      	ldr	r0, [r3, #0]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	b2db      	uxtb	r3, r3
 8007676:	461a      	mov	r2, r3
 8007678:	6979      	ldr	r1, [r7, #20]
 800767a:	f002 fde3 	bl	800a244 <USB_EPStartXfer>
  }

  return HAL_OK;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3718      	adds	r7, #24
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	460b      	mov	r3, r1
 8007692:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007694:	78fb      	ldrb	r3, [r7, #3]
 8007696:	f003 020f 	and.w	r2, r3, #15
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d901      	bls.n	80076a6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e050      	b.n	8007748 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80076a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	da0f      	bge.n	80076ce <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076ae:	78fb      	ldrb	r3, [r7, #3]
 80076b0:	f003 020f 	and.w	r2, r3, #15
 80076b4:	4613      	mov	r3, r2
 80076b6:	00db      	lsls	r3, r3, #3
 80076b8:	4413      	add	r3, r2
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	3338      	adds	r3, #56	@ 0x38
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	4413      	add	r3, r2
 80076c2:	3304      	adds	r3, #4
 80076c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2201      	movs	r2, #1
 80076ca:	705a      	strb	r2, [r3, #1]
 80076cc:	e00d      	b.n	80076ea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80076ce:	78fa      	ldrb	r2, [r7, #3]
 80076d0:	4613      	mov	r3, r2
 80076d2:	00db      	lsls	r3, r3, #3
 80076d4:	4413      	add	r3, r2
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	4413      	add	r3, r2
 80076e0:	3304      	adds	r3, #4
 80076e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2201      	movs	r2, #1
 80076ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80076f0:	78fb      	ldrb	r3, [r7, #3]
 80076f2:	f003 030f 	and.w	r3, r3, #15
 80076f6:	b2da      	uxtb	r2, r3
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007702:	2b01      	cmp	r3, #1
 8007704:	d101      	bne.n	800770a <HAL_PCD_EP_SetStall+0x82>
 8007706:	2302      	movs	r3, #2
 8007708:	e01e      	b.n	8007748 <HAL_PCD_EP_SetStall+0xc0>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2201      	movs	r2, #1
 800770e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68f9      	ldr	r1, [r7, #12]
 8007718:	4618      	mov	r0, r3
 800771a:	f003 fa73 	bl	800ac04 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800771e:	78fb      	ldrb	r3, [r7, #3]
 8007720:	f003 030f 	and.w	r3, r3, #15
 8007724:	2b00      	cmp	r3, #0
 8007726:	d10a      	bne.n	800773e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6818      	ldr	r0, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	691b      	ldr	r3, [r3, #16]
 8007730:	b2d9      	uxtb	r1, r3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007738:	461a      	mov	r2, r3
 800773a:	f003 fc63 	bl	800b004 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	460b      	mov	r3, r1
 800775a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800775c:	78fb      	ldrb	r3, [r7, #3]
 800775e:	f003 020f 	and.w	r2, r3, #15
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	429a      	cmp	r2, r3
 8007768:	d901      	bls.n	800776e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e042      	b.n	80077f4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800776e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007772:	2b00      	cmp	r3, #0
 8007774:	da0f      	bge.n	8007796 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007776:	78fb      	ldrb	r3, [r7, #3]
 8007778:	f003 020f 	and.w	r2, r3, #15
 800777c:	4613      	mov	r3, r2
 800777e:	00db      	lsls	r3, r3, #3
 8007780:	4413      	add	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	3338      	adds	r3, #56	@ 0x38
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	4413      	add	r3, r2
 800778a:	3304      	adds	r3, #4
 800778c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2201      	movs	r2, #1
 8007792:	705a      	strb	r2, [r3, #1]
 8007794:	e00f      	b.n	80077b6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007796:	78fb      	ldrb	r3, [r7, #3]
 8007798:	f003 020f 	and.w	r2, r3, #15
 800779c:	4613      	mov	r3, r2
 800779e:	00db      	lsls	r3, r3, #3
 80077a0:	4413      	add	r3, r2
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	4413      	add	r3, r2
 80077ac:	3304      	adds	r3, #4
 80077ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80077bc:	78fb      	ldrb	r3, [r7, #3]
 80077be:	f003 030f 	and.w	r3, r3, #15
 80077c2:	b2da      	uxtb	r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d101      	bne.n	80077d6 <HAL_PCD_EP_ClrStall+0x86>
 80077d2:	2302      	movs	r3, #2
 80077d4:	e00e      	b.n	80077f4 <HAL_PCD_EP_ClrStall+0xa4>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68f9      	ldr	r1, [r7, #12]
 80077e4:	4618      	mov	r0, r3
 80077e6:	f003 fa7b 	bl	800ace0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80077f2:	2300      	movs	r3, #0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3710      	adds	r7, #16
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	460b      	mov	r3, r1
 8007806:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007808:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800780c:	2b00      	cmp	r3, #0
 800780e:	da0c      	bge.n	800782a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007810:	78fb      	ldrb	r3, [r7, #3]
 8007812:	f003 020f 	and.w	r2, r3, #15
 8007816:	4613      	mov	r3, r2
 8007818:	00db      	lsls	r3, r3, #3
 800781a:	4413      	add	r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	3338      	adds	r3, #56	@ 0x38
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	4413      	add	r3, r2
 8007824:	3304      	adds	r3, #4
 8007826:	60fb      	str	r3, [r7, #12]
 8007828:	e00c      	b.n	8007844 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800782a:	78fb      	ldrb	r3, [r7, #3]
 800782c:	f003 020f 	and.w	r2, r3, #15
 8007830:	4613      	mov	r3, r2
 8007832:	00db      	lsls	r3, r3, #3
 8007834:	4413      	add	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	4413      	add	r3, r2
 8007840:	3304      	adds	r3, #4
 8007842:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68f9      	ldr	r1, [r7, #12]
 800784a:	4618      	mov	r0, r3
 800784c:	f003 f89a 	bl	800a984 <USB_EPStopXfer>
 8007850:	4603      	mov	r3, r0
 8007852:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007854:	7afb      	ldrb	r3, [r7, #11]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b08a      	sub	sp, #40	@ 0x28
 8007862:	af02      	add	r7, sp, #8
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	4613      	mov	r3, r2
 8007876:	00db      	lsls	r3, r3, #3
 8007878:	4413      	add	r3, r2
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	3338      	adds	r3, #56	@ 0x38
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	4413      	add	r3, r2
 8007882:	3304      	adds	r3, #4
 8007884:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6a1a      	ldr	r2, [r3, #32]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	429a      	cmp	r2, r3
 8007890:	d901      	bls.n	8007896 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e06c      	b.n	8007970 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	699a      	ldr	r2, [r3, #24]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	69fa      	ldr	r2, [r7, #28]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d902      	bls.n	80078b2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	3303      	adds	r3, #3
 80078b6:	089b      	lsrs	r3, r3, #2
 80078b8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80078ba:	e02b      	b.n	8007914 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	699a      	ldr	r2, [r3, #24]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6a1b      	ldr	r3, [r3, #32]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	69fa      	ldr	r2, [r7, #28]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d902      	bls.n	80078d8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	3303      	adds	r3, #3
 80078dc:	089b      	lsrs	r3, r3, #2
 80078de:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6919      	ldr	r1, [r3, #16]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	9300      	str	r3, [sp, #0]
 80078f4:	4603      	mov	r3, r0
 80078f6:	6978      	ldr	r0, [r7, #20]
 80078f8:	f003 f8ee 	bl	800aad8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	691a      	ldr	r2, [r3, #16]
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	441a      	add	r2, r3
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6a1a      	ldr	r2, [r3, #32]
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	441a      	add	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	015a      	lsls	r2, r3, #5
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	4413      	add	r3, r2
 800791c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007924:	69ba      	ldr	r2, [r7, #24]
 8007926:	429a      	cmp	r2, r3
 8007928:	d809      	bhi.n	800793e <PCD_WriteEmptyTxFifo+0xe0>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6a1a      	ldr	r2, [r3, #32]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007932:	429a      	cmp	r2, r3
 8007934:	d203      	bcs.n	800793e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1be      	bne.n	80078bc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	699a      	ldr	r2, [r3, #24]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6a1b      	ldr	r3, [r3, #32]
 8007946:	429a      	cmp	r2, r3
 8007948:	d811      	bhi.n	800796e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	f003 030f 	and.w	r3, r3, #15
 8007950:	2201      	movs	r2, #1
 8007952:	fa02 f303 	lsl.w	r3, r2, r3
 8007956:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800795e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	43db      	mvns	r3, r3
 8007964:	6939      	ldr	r1, [r7, #16]
 8007966:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800796a:	4013      	ands	r3, r2
 800796c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3720      	adds	r7, #32
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b088      	sub	sp, #32
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	333c      	adds	r3, #60	@ 0x3c
 8007990:	3304      	adds	r3, #4
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	015a      	lsls	r2, r3, #5
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	4413      	add	r3, r2
 800799e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d17b      	bne.n	8007aa6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	f003 0308 	and.w	r3, r3, #8
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d015      	beq.n	80079e4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	4a61      	ldr	r2, [pc, #388]	@ (8007b40 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	f240 80b9 	bls.w	8007b34 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f000 80b3 	beq.w	8007b34 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	015a      	lsls	r2, r3, #5
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	4413      	add	r3, r2
 80079d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079da:	461a      	mov	r2, r3
 80079dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079e0:	6093      	str	r3, [r2, #8]
 80079e2:	e0a7      	b.n	8007b34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	f003 0320 	and.w	r3, r3, #32
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d009      	beq.n	8007a02 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	015a      	lsls	r2, r3, #5
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	4413      	add	r3, r2
 80079f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079fa:	461a      	mov	r2, r3
 80079fc:	2320      	movs	r3, #32
 80079fe:	6093      	str	r3, [r2, #8]
 8007a00:	e098      	b.n	8007b34 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f040 8093 	bne.w	8007b34 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	4a4b      	ldr	r2, [pc, #300]	@ (8007b40 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d90f      	bls.n	8007a36 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00a      	beq.n	8007a36 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	015a      	lsls	r2, r3, #5
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	4413      	add	r3, r2
 8007a28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a32:	6093      	str	r3, [r2, #8]
 8007a34:	e07e      	b.n	8007b34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007a36:	683a      	ldr	r2, [r7, #0]
 8007a38:	4613      	mov	r3, r2
 8007a3a:	00db      	lsls	r3, r3, #3
 8007a3c:	4413      	add	r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	4413      	add	r3, r2
 8007a48:	3304      	adds	r3, #4
 8007a4a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	69da      	ldr	r2, [r3, #28]
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	0159      	lsls	r1, r3, #5
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	440b      	add	r3, r1
 8007a58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a62:	1ad2      	subs	r2, r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d114      	bne.n	8007a98 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	699b      	ldr	r3, [r3, #24]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d109      	bne.n	8007a8a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6818      	ldr	r0, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007a80:	461a      	mov	r2, r3
 8007a82:	2101      	movs	r1, #1
 8007a84:	f003 fabe 	bl	800b004 <USB_EP0_OutStart>
 8007a88:	e006      	b.n	8007a98 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	691a      	ldr	r2, [r3, #16]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6a1b      	ldr	r3, [r3, #32]
 8007a92:	441a      	add	r2, r3
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f008 f9c4 	bl	800fe2c <HAL_PCD_DataOutStageCallback>
 8007aa4:	e046      	b.n	8007b34 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	4a26      	ldr	r2, [pc, #152]	@ (8007b44 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d124      	bne.n	8007af8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00a      	beq.n	8007ace <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	015a      	lsls	r2, r3, #5
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	4413      	add	r3, r2
 8007ac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007aca:	6093      	str	r3, [r2, #8]
 8007acc:	e032      	b.n	8007b34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	f003 0320 	and.w	r3, r3, #32
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d008      	beq.n	8007aea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	015a      	lsls	r2, r3, #5
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	4413      	add	r3, r2
 8007ae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	2320      	movs	r3, #32
 8007ae8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	4619      	mov	r1, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f008 f99b 	bl	800fe2c <HAL_PCD_DataOutStageCallback>
 8007af6:	e01d      	b.n	8007b34 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d114      	bne.n	8007b28 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007afe:	6879      	ldr	r1, [r7, #4]
 8007b00:	683a      	ldr	r2, [r7, #0]
 8007b02:	4613      	mov	r3, r2
 8007b04:	00db      	lsls	r3, r3, #3
 8007b06:	4413      	add	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	440b      	add	r3, r1
 8007b0c:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d108      	bne.n	8007b28 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6818      	ldr	r0, [r3, #0]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007b20:	461a      	mov	r2, r3
 8007b22:	2100      	movs	r1, #0
 8007b24:	f003 fa6e 	bl	800b004 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f008 f97c 	bl	800fe2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3720      	adds	r7, #32
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	4f54300a 	.word	0x4f54300a
 8007b44:	4f54310a 	.word	0x4f54310a

08007b48 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b086      	sub	sp, #24
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	333c      	adds	r3, #60	@ 0x3c
 8007b60:	3304      	adds	r3, #4
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	015a      	lsls	r2, r3, #5
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	4a15      	ldr	r2, [pc, #84]	@ (8007bd0 <PCD_EP_OutSetupPacket_int+0x88>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d90e      	bls.n	8007b9c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d009      	beq.n	8007b9c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	015a      	lsls	r2, r3, #5
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	4413      	add	r3, r2
 8007b90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b94:	461a      	mov	r2, r3
 8007b96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b9a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f008 f933 	bl	800fe08 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	4a0a      	ldr	r2, [pc, #40]	@ (8007bd0 <PCD_EP_OutSetupPacket_int+0x88>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d90c      	bls.n	8007bc4 <PCD_EP_OutSetupPacket_int+0x7c>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d108      	bne.n	8007bc4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6818      	ldr	r0, [r3, #0]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	2101      	movs	r1, #1
 8007bc0:	f003 fa20 	bl	800b004 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3718      	adds	r7, #24
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	4f54300a 	.word	0x4f54300a

08007bd4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	70fb      	strb	r3, [r7, #3]
 8007be0:	4613      	mov	r3, r2
 8007be2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007bec:	78fb      	ldrb	r3, [r7, #3]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d107      	bne.n	8007c02 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007bf2:	883b      	ldrh	r3, [r7, #0]
 8007bf4:	0419      	lsls	r1, r3, #16
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68ba      	ldr	r2, [r7, #8]
 8007bfc:	430a      	orrs	r2, r1
 8007bfe:	629a      	str	r2, [r3, #40]	@ 0x28
 8007c00:	e028      	b.n	8007c54 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c08:	0c1b      	lsrs	r3, r3, #16
 8007c0a:	68ba      	ldr	r2, [r7, #8]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007c10:	2300      	movs	r3, #0
 8007c12:	73fb      	strb	r3, [r7, #15]
 8007c14:	e00d      	b.n	8007c32 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	7bfb      	ldrb	r3, [r7, #15]
 8007c1c:	3340      	adds	r3, #64	@ 0x40
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4413      	add	r3, r2
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	0c1b      	lsrs	r3, r3, #16
 8007c26:	68ba      	ldr	r2, [r7, #8]
 8007c28:	4413      	add	r3, r2
 8007c2a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007c2c:	7bfb      	ldrb	r3, [r7, #15]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	73fb      	strb	r3, [r7, #15]
 8007c32:	7bfa      	ldrb	r2, [r7, #15]
 8007c34:	78fb      	ldrb	r3, [r7, #3]
 8007c36:	3b01      	subs	r3, #1
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d3ec      	bcc.n	8007c16 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007c3c:	883b      	ldrh	r3, [r7, #0]
 8007c3e:	0418      	lsls	r0, r3, #16
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6819      	ldr	r1, [r3, #0]
 8007c44:	78fb      	ldrb	r3, [r7, #3]
 8007c46:	3b01      	subs	r3, #1
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	4302      	orrs	r2, r0
 8007c4c:	3340      	adds	r3, #64	@ 0x40
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	440b      	add	r3, r1
 8007c52:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007c62:	b480      	push	{r7}
 8007c64:	b083      	sub	sp, #12
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	887a      	ldrh	r2, [r7, #2]
 8007c74:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b086      	sub	sp, #24
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d101      	bne.n	8007cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e267      	b.n	800817e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 0301 	and.w	r3, r3, #1
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d075      	beq.n	8007da6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007cba:	4b88      	ldr	r3, [pc, #544]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	f003 030c 	and.w	r3, r3, #12
 8007cc2:	2b04      	cmp	r3, #4
 8007cc4:	d00c      	beq.n	8007ce0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cc6:	4b85      	ldr	r3, [pc, #532]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007cce:	2b08      	cmp	r3, #8
 8007cd0:	d112      	bne.n	8007cf8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cd2:	4b82      	ldr	r3, [pc, #520]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007cda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007cde:	d10b      	bne.n	8007cf8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ce0:	4b7e      	ldr	r3, [pc, #504]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d05b      	beq.n	8007da4 <HAL_RCC_OscConfig+0x108>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d157      	bne.n	8007da4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e242      	b.n	800817e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d00:	d106      	bne.n	8007d10 <HAL_RCC_OscConfig+0x74>
 8007d02:	4b76      	ldr	r3, [pc, #472]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a75      	ldr	r2, [pc, #468]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007d08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d0c:	6013      	str	r3, [r2, #0]
 8007d0e:	e01d      	b.n	8007d4c <HAL_RCC_OscConfig+0xb0>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d18:	d10c      	bne.n	8007d34 <HAL_RCC_OscConfig+0x98>
 8007d1a:	4b70      	ldr	r3, [pc, #448]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a6f      	ldr	r2, [pc, #444]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007d20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d24:	6013      	str	r3, [r2, #0]
 8007d26:	4b6d      	ldr	r3, [pc, #436]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a6c      	ldr	r2, [pc, #432]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d30:	6013      	str	r3, [r2, #0]
 8007d32:	e00b      	b.n	8007d4c <HAL_RCC_OscConfig+0xb0>
 8007d34:	4b69      	ldr	r3, [pc, #420]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a68      	ldr	r2, [pc, #416]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007d3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d3e:	6013      	str	r3, [r2, #0]
 8007d40:	4b66      	ldr	r3, [pc, #408]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a65      	ldr	r2, [pc, #404]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007d46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d013      	beq.n	8007d7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d54:	f7fc fcc0 	bl	80046d8 <HAL_GetTick>
 8007d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d5a:	e008      	b.n	8007d6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d5c:	f7fc fcbc 	bl	80046d8 <HAL_GetTick>
 8007d60:	4602      	mov	r2, r0
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	1ad3      	subs	r3, r2, r3
 8007d66:	2b64      	cmp	r3, #100	@ 0x64
 8007d68:	d901      	bls.n	8007d6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	e207      	b.n	800817e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d6e:	4b5b      	ldr	r3, [pc, #364]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d0f0      	beq.n	8007d5c <HAL_RCC_OscConfig+0xc0>
 8007d7a:	e014      	b.n	8007da6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d7c:	f7fc fcac 	bl	80046d8 <HAL_GetTick>
 8007d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d82:	e008      	b.n	8007d96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d84:	f7fc fca8 	bl	80046d8 <HAL_GetTick>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	2b64      	cmp	r3, #100	@ 0x64
 8007d90:	d901      	bls.n	8007d96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e1f3      	b.n	800817e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d96:	4b51      	ldr	r3, [pc, #324]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1f0      	bne.n	8007d84 <HAL_RCC_OscConfig+0xe8>
 8007da2:	e000      	b.n	8007da6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 0302 	and.w	r3, r3, #2
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d063      	beq.n	8007e7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007db2:	4b4a      	ldr	r3, [pc, #296]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	f003 030c 	and.w	r3, r3, #12
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00b      	beq.n	8007dd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007dbe:	4b47      	ldr	r3, [pc, #284]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007dc6:	2b08      	cmp	r3, #8
 8007dc8:	d11c      	bne.n	8007e04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007dca:	4b44      	ldr	r3, [pc, #272]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d116      	bne.n	8007e04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dd6:	4b41      	ldr	r3, [pc, #260]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 0302 	and.w	r3, r3, #2
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d005      	beq.n	8007dee <HAL_RCC_OscConfig+0x152>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d001      	beq.n	8007dee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e1c7      	b.n	800817e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dee:	4b3b      	ldr	r3, [pc, #236]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	00db      	lsls	r3, r3, #3
 8007dfc:	4937      	ldr	r1, [pc, #220]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e02:	e03a      	b.n	8007e7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d020      	beq.n	8007e4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e0c:	4b34      	ldr	r3, [pc, #208]	@ (8007ee0 <HAL_RCC_OscConfig+0x244>)
 8007e0e:	2201      	movs	r2, #1
 8007e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e12:	f7fc fc61 	bl	80046d8 <HAL_GetTick>
 8007e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e18:	e008      	b.n	8007e2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e1a:	f7fc fc5d 	bl	80046d8 <HAL_GetTick>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	1ad3      	subs	r3, r2, r3
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	d901      	bls.n	8007e2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	e1a8      	b.n	800817e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 0302 	and.w	r3, r3, #2
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d0f0      	beq.n	8007e1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e38:	4b28      	ldr	r3, [pc, #160]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	00db      	lsls	r3, r3, #3
 8007e46:	4925      	ldr	r1, [pc, #148]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	600b      	str	r3, [r1, #0]
 8007e4c:	e015      	b.n	8007e7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e4e:	4b24      	ldr	r3, [pc, #144]	@ (8007ee0 <HAL_RCC_OscConfig+0x244>)
 8007e50:	2200      	movs	r2, #0
 8007e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e54:	f7fc fc40 	bl	80046d8 <HAL_GetTick>
 8007e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e5a:	e008      	b.n	8007e6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e5c:	f7fc fc3c 	bl	80046d8 <HAL_GetTick>
 8007e60:	4602      	mov	r2, r0
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d901      	bls.n	8007e6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	e187      	b.n	800817e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 0302 	and.w	r3, r3, #2
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1f0      	bne.n	8007e5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 0308 	and.w	r3, r3, #8
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d036      	beq.n	8007ef4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d016      	beq.n	8007ebc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e8e:	4b15      	ldr	r3, [pc, #84]	@ (8007ee4 <HAL_RCC_OscConfig+0x248>)
 8007e90:	2201      	movs	r2, #1
 8007e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e94:	f7fc fc20 	bl	80046d8 <HAL_GetTick>
 8007e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e9a:	e008      	b.n	8007eae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e9c:	f7fc fc1c 	bl	80046d8 <HAL_GetTick>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d901      	bls.n	8007eae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e167      	b.n	800817e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007eae:	4b0b      	ldr	r3, [pc, #44]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eb2:	f003 0302 	and.w	r3, r3, #2
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d0f0      	beq.n	8007e9c <HAL_RCC_OscConfig+0x200>
 8007eba:	e01b      	b.n	8007ef4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ebc:	4b09      	ldr	r3, [pc, #36]	@ (8007ee4 <HAL_RCC_OscConfig+0x248>)
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ec2:	f7fc fc09 	bl	80046d8 <HAL_GetTick>
 8007ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ec8:	e00e      	b.n	8007ee8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007eca:	f7fc fc05 	bl	80046d8 <HAL_GetTick>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	d907      	bls.n	8007ee8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007ed8:	2303      	movs	r3, #3
 8007eda:	e150      	b.n	800817e <HAL_RCC_OscConfig+0x4e2>
 8007edc:	40023800 	.word	0x40023800
 8007ee0:	42470000 	.word	0x42470000
 8007ee4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ee8:	4b88      	ldr	r3, [pc, #544]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8007eea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eec:	f003 0302 	and.w	r3, r3, #2
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d1ea      	bne.n	8007eca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f003 0304 	and.w	r3, r3, #4
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f000 8097 	beq.w	8008030 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f02:	2300      	movs	r3, #0
 8007f04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f06:	4b81      	ldr	r3, [pc, #516]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8007f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10f      	bne.n	8007f32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f12:	2300      	movs	r3, #0
 8007f14:	60bb      	str	r3, [r7, #8]
 8007f16:	4b7d      	ldr	r3, [pc, #500]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8007f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f1a:	4a7c      	ldr	r2, [pc, #496]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8007f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8007f22:	4b7a      	ldr	r3, [pc, #488]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8007f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f2a:	60bb      	str	r3, [r7, #8]
 8007f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f32:	4b77      	ldr	r3, [pc, #476]	@ (8008110 <HAL_RCC_OscConfig+0x474>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d118      	bne.n	8007f70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f3e:	4b74      	ldr	r3, [pc, #464]	@ (8008110 <HAL_RCC_OscConfig+0x474>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a73      	ldr	r2, [pc, #460]	@ (8008110 <HAL_RCC_OscConfig+0x474>)
 8007f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f4a:	f7fc fbc5 	bl	80046d8 <HAL_GetTick>
 8007f4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f50:	e008      	b.n	8007f64 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f52:	f7fc fbc1 	bl	80046d8 <HAL_GetTick>
 8007f56:	4602      	mov	r2, r0
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	1ad3      	subs	r3, r2, r3
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d901      	bls.n	8007f64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007f60:	2303      	movs	r3, #3
 8007f62:	e10c      	b.n	800817e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f64:	4b6a      	ldr	r3, [pc, #424]	@ (8008110 <HAL_RCC_OscConfig+0x474>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d0f0      	beq.n	8007f52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d106      	bne.n	8007f86 <HAL_RCC_OscConfig+0x2ea>
 8007f78:	4b64      	ldr	r3, [pc, #400]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8007f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f7c:	4a63      	ldr	r2, [pc, #396]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8007f7e:	f043 0301 	orr.w	r3, r3, #1
 8007f82:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f84:	e01c      	b.n	8007fc0 <HAL_RCC_OscConfig+0x324>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	2b05      	cmp	r3, #5
 8007f8c:	d10c      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x30c>
 8007f8e:	4b5f      	ldr	r3, [pc, #380]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8007f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f92:	4a5e      	ldr	r2, [pc, #376]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8007f94:	f043 0304 	orr.w	r3, r3, #4
 8007f98:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f9a:	4b5c      	ldr	r3, [pc, #368]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8007f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f9e:	4a5b      	ldr	r2, [pc, #364]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8007fa0:	f043 0301 	orr.w	r3, r3, #1
 8007fa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fa6:	e00b      	b.n	8007fc0 <HAL_RCC_OscConfig+0x324>
 8007fa8:	4b58      	ldr	r3, [pc, #352]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8007faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fac:	4a57      	ldr	r2, [pc, #348]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8007fae:	f023 0301 	bic.w	r3, r3, #1
 8007fb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fb4:	4b55      	ldr	r3, [pc, #340]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8007fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fb8:	4a54      	ldr	r2, [pc, #336]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8007fba:	f023 0304 	bic.w	r3, r3, #4
 8007fbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d015      	beq.n	8007ff4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fc8:	f7fc fb86 	bl	80046d8 <HAL_GetTick>
 8007fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fce:	e00a      	b.n	8007fe6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fd0:	f7fc fb82 	bl	80046d8 <HAL_GetTick>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	1ad3      	subs	r3, r2, r3
 8007fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d901      	bls.n	8007fe6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	e0cb      	b.n	800817e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fe6:	4b49      	ldr	r3, [pc, #292]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8007fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fea:	f003 0302 	and.w	r3, r3, #2
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d0ee      	beq.n	8007fd0 <HAL_RCC_OscConfig+0x334>
 8007ff2:	e014      	b.n	800801e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ff4:	f7fc fb70 	bl	80046d8 <HAL_GetTick>
 8007ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ffa:	e00a      	b.n	8008012 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ffc:	f7fc fb6c 	bl	80046d8 <HAL_GetTick>
 8008000:	4602      	mov	r2, r0
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	1ad3      	subs	r3, r2, r3
 8008006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800800a:	4293      	cmp	r3, r2
 800800c:	d901      	bls.n	8008012 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e0b5      	b.n	800817e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008012:	4b3e      	ldr	r3, [pc, #248]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8008014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008016:	f003 0302 	and.w	r3, r3, #2
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1ee      	bne.n	8007ffc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800801e:	7dfb      	ldrb	r3, [r7, #23]
 8008020:	2b01      	cmp	r3, #1
 8008022:	d105      	bne.n	8008030 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008024:	4b39      	ldr	r3, [pc, #228]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8008026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008028:	4a38      	ldr	r2, [pc, #224]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 800802a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800802e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	699b      	ldr	r3, [r3, #24]
 8008034:	2b00      	cmp	r3, #0
 8008036:	f000 80a1 	beq.w	800817c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800803a:	4b34      	ldr	r3, [pc, #208]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	f003 030c 	and.w	r3, r3, #12
 8008042:	2b08      	cmp	r3, #8
 8008044:	d05c      	beq.n	8008100 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	2b02      	cmp	r3, #2
 800804c:	d141      	bne.n	80080d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800804e:	4b31      	ldr	r3, [pc, #196]	@ (8008114 <HAL_RCC_OscConfig+0x478>)
 8008050:	2200      	movs	r2, #0
 8008052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008054:	f7fc fb40 	bl	80046d8 <HAL_GetTick>
 8008058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800805a:	e008      	b.n	800806e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800805c:	f7fc fb3c 	bl	80046d8 <HAL_GetTick>
 8008060:	4602      	mov	r2, r0
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	1ad3      	subs	r3, r2, r3
 8008066:	2b02      	cmp	r3, #2
 8008068:	d901      	bls.n	800806e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800806a:	2303      	movs	r3, #3
 800806c:	e087      	b.n	800817e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800806e:	4b27      	ldr	r3, [pc, #156]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1f0      	bne.n	800805c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	69da      	ldr	r2, [r3, #28]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a1b      	ldr	r3, [r3, #32]
 8008082:	431a      	orrs	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008088:	019b      	lsls	r3, r3, #6
 800808a:	431a      	orrs	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008090:	085b      	lsrs	r3, r3, #1
 8008092:	3b01      	subs	r3, #1
 8008094:	041b      	lsls	r3, r3, #16
 8008096:	431a      	orrs	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800809c:	061b      	lsls	r3, r3, #24
 800809e:	491b      	ldr	r1, [pc, #108]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 80080a0:	4313      	orrs	r3, r2
 80080a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080a4:	4b1b      	ldr	r3, [pc, #108]	@ (8008114 <HAL_RCC_OscConfig+0x478>)
 80080a6:	2201      	movs	r2, #1
 80080a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080aa:	f7fc fb15 	bl	80046d8 <HAL_GetTick>
 80080ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080b0:	e008      	b.n	80080c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080b2:	f7fc fb11 	bl	80046d8 <HAL_GetTick>
 80080b6:	4602      	mov	r2, r0
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	1ad3      	subs	r3, r2, r3
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d901      	bls.n	80080c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e05c      	b.n	800817e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080c4:	4b11      	ldr	r3, [pc, #68]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d0f0      	beq.n	80080b2 <HAL_RCC_OscConfig+0x416>
 80080d0:	e054      	b.n	800817c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080d2:	4b10      	ldr	r3, [pc, #64]	@ (8008114 <HAL_RCC_OscConfig+0x478>)
 80080d4:	2200      	movs	r2, #0
 80080d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080d8:	f7fc fafe 	bl	80046d8 <HAL_GetTick>
 80080dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080de:	e008      	b.n	80080f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080e0:	f7fc fafa 	bl	80046d8 <HAL_GetTick>
 80080e4:	4602      	mov	r2, r0
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	2b02      	cmp	r3, #2
 80080ec:	d901      	bls.n	80080f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80080ee:	2303      	movs	r3, #3
 80080f0:	e045      	b.n	800817e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080f2:	4b06      	ldr	r3, [pc, #24]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1f0      	bne.n	80080e0 <HAL_RCC_OscConfig+0x444>
 80080fe:	e03d      	b.n	800817c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d107      	bne.n	8008118 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e038      	b.n	800817e <HAL_RCC_OscConfig+0x4e2>
 800810c:	40023800 	.word	0x40023800
 8008110:	40007000 	.word	0x40007000
 8008114:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008118:	4b1b      	ldr	r3, [pc, #108]	@ (8008188 <HAL_RCC_OscConfig+0x4ec>)
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	699b      	ldr	r3, [r3, #24]
 8008122:	2b01      	cmp	r3, #1
 8008124:	d028      	beq.n	8008178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008130:	429a      	cmp	r2, r3
 8008132:	d121      	bne.n	8008178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800813e:	429a      	cmp	r2, r3
 8008140:	d11a      	bne.n	8008178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008148:	4013      	ands	r3, r2
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800814e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008150:	4293      	cmp	r3, r2
 8008152:	d111      	bne.n	8008178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800815e:	085b      	lsrs	r3, r3, #1
 8008160:	3b01      	subs	r3, #1
 8008162:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008164:	429a      	cmp	r2, r3
 8008166:	d107      	bne.n	8008178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008172:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008174:	429a      	cmp	r2, r3
 8008176:	d001      	beq.n	800817c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	e000      	b.n	800817e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3718      	adds	r7, #24
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	40023800 	.word	0x40023800

0800818c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d101      	bne.n	80081a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	e0cc      	b.n	800833a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80081a0:	4b68      	ldr	r3, [pc, #416]	@ (8008344 <HAL_RCC_ClockConfig+0x1b8>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f003 0307 	and.w	r3, r3, #7
 80081a8:	683a      	ldr	r2, [r7, #0]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d90c      	bls.n	80081c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081ae:	4b65      	ldr	r3, [pc, #404]	@ (8008344 <HAL_RCC_ClockConfig+0x1b8>)
 80081b0:	683a      	ldr	r2, [r7, #0]
 80081b2:	b2d2      	uxtb	r2, r2
 80081b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081b6:	4b63      	ldr	r3, [pc, #396]	@ (8008344 <HAL_RCC_ClockConfig+0x1b8>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 0307 	and.w	r3, r3, #7
 80081be:	683a      	ldr	r2, [r7, #0]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d001      	beq.n	80081c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	e0b8      	b.n	800833a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 0302 	and.w	r3, r3, #2
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d020      	beq.n	8008216 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 0304 	and.w	r3, r3, #4
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d005      	beq.n	80081ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80081e0:	4b59      	ldr	r3, [pc, #356]	@ (8008348 <HAL_RCC_ClockConfig+0x1bc>)
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	4a58      	ldr	r2, [pc, #352]	@ (8008348 <HAL_RCC_ClockConfig+0x1bc>)
 80081e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80081ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f003 0308 	and.w	r3, r3, #8
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d005      	beq.n	8008204 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80081f8:	4b53      	ldr	r3, [pc, #332]	@ (8008348 <HAL_RCC_ClockConfig+0x1bc>)
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	4a52      	ldr	r2, [pc, #328]	@ (8008348 <HAL_RCC_ClockConfig+0x1bc>)
 80081fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008202:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008204:	4b50      	ldr	r3, [pc, #320]	@ (8008348 <HAL_RCC_ClockConfig+0x1bc>)
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	494d      	ldr	r1, [pc, #308]	@ (8008348 <HAL_RCC_ClockConfig+0x1bc>)
 8008212:	4313      	orrs	r3, r2
 8008214:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 0301 	and.w	r3, r3, #1
 800821e:	2b00      	cmp	r3, #0
 8008220:	d044      	beq.n	80082ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	2b01      	cmp	r3, #1
 8008228:	d107      	bne.n	800823a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800822a:	4b47      	ldr	r3, [pc, #284]	@ (8008348 <HAL_RCC_ClockConfig+0x1bc>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008232:	2b00      	cmp	r3, #0
 8008234:	d119      	bne.n	800826a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	e07f      	b.n	800833a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	2b02      	cmp	r3, #2
 8008240:	d003      	beq.n	800824a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008246:	2b03      	cmp	r3, #3
 8008248:	d107      	bne.n	800825a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800824a:	4b3f      	ldr	r3, [pc, #252]	@ (8008348 <HAL_RCC_ClockConfig+0x1bc>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008252:	2b00      	cmp	r3, #0
 8008254:	d109      	bne.n	800826a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	e06f      	b.n	800833a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800825a:	4b3b      	ldr	r3, [pc, #236]	@ (8008348 <HAL_RCC_ClockConfig+0x1bc>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f003 0302 	and.w	r3, r3, #2
 8008262:	2b00      	cmp	r3, #0
 8008264:	d101      	bne.n	800826a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e067      	b.n	800833a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800826a:	4b37      	ldr	r3, [pc, #220]	@ (8008348 <HAL_RCC_ClockConfig+0x1bc>)
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	f023 0203 	bic.w	r2, r3, #3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	4934      	ldr	r1, [pc, #208]	@ (8008348 <HAL_RCC_ClockConfig+0x1bc>)
 8008278:	4313      	orrs	r3, r2
 800827a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800827c:	f7fc fa2c 	bl	80046d8 <HAL_GetTick>
 8008280:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008282:	e00a      	b.n	800829a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008284:	f7fc fa28 	bl	80046d8 <HAL_GetTick>
 8008288:	4602      	mov	r2, r0
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008292:	4293      	cmp	r3, r2
 8008294:	d901      	bls.n	800829a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008296:	2303      	movs	r3, #3
 8008298:	e04f      	b.n	800833a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800829a:	4b2b      	ldr	r3, [pc, #172]	@ (8008348 <HAL_RCC_ClockConfig+0x1bc>)
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	f003 020c 	and.w	r2, r3, #12
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d1eb      	bne.n	8008284 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80082ac:	4b25      	ldr	r3, [pc, #148]	@ (8008344 <HAL_RCC_ClockConfig+0x1b8>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f003 0307 	and.w	r3, r3, #7
 80082b4:	683a      	ldr	r2, [r7, #0]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d20c      	bcs.n	80082d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082ba:	4b22      	ldr	r3, [pc, #136]	@ (8008344 <HAL_RCC_ClockConfig+0x1b8>)
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	b2d2      	uxtb	r2, r2
 80082c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082c2:	4b20      	ldr	r3, [pc, #128]	@ (8008344 <HAL_RCC_ClockConfig+0x1b8>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f003 0307 	and.w	r3, r3, #7
 80082ca:	683a      	ldr	r2, [r7, #0]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d001      	beq.n	80082d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	e032      	b.n	800833a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f003 0304 	and.w	r3, r3, #4
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d008      	beq.n	80082f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80082e0:	4b19      	ldr	r3, [pc, #100]	@ (8008348 <HAL_RCC_ClockConfig+0x1bc>)
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	4916      	ldr	r1, [pc, #88]	@ (8008348 <HAL_RCC_ClockConfig+0x1bc>)
 80082ee:	4313      	orrs	r3, r2
 80082f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f003 0308 	and.w	r3, r3, #8
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d009      	beq.n	8008312 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80082fe:	4b12      	ldr	r3, [pc, #72]	@ (8008348 <HAL_RCC_ClockConfig+0x1bc>)
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	00db      	lsls	r3, r3, #3
 800830c:	490e      	ldr	r1, [pc, #56]	@ (8008348 <HAL_RCC_ClockConfig+0x1bc>)
 800830e:	4313      	orrs	r3, r2
 8008310:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008312:	f000 f821 	bl	8008358 <HAL_RCC_GetSysClockFreq>
 8008316:	4602      	mov	r2, r0
 8008318:	4b0b      	ldr	r3, [pc, #44]	@ (8008348 <HAL_RCC_ClockConfig+0x1bc>)
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	091b      	lsrs	r3, r3, #4
 800831e:	f003 030f 	and.w	r3, r3, #15
 8008322:	490a      	ldr	r1, [pc, #40]	@ (800834c <HAL_RCC_ClockConfig+0x1c0>)
 8008324:	5ccb      	ldrb	r3, [r1, r3]
 8008326:	fa22 f303 	lsr.w	r3, r2, r3
 800832a:	4a09      	ldr	r2, [pc, #36]	@ (8008350 <HAL_RCC_ClockConfig+0x1c4>)
 800832c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800832e:	4b09      	ldr	r3, [pc, #36]	@ (8008354 <HAL_RCC_ClockConfig+0x1c8>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4618      	mov	r0, r3
 8008334:	f7fc f98c 	bl	8004650 <HAL_InitTick>

  return HAL_OK;
 8008338:	2300      	movs	r3, #0
}
 800833a:	4618      	mov	r0, r3
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	40023c00 	.word	0x40023c00
 8008348:	40023800 	.word	0x40023800
 800834c:	080136bc 	.word	0x080136bc
 8008350:	2000000c 	.word	0x2000000c
 8008354:	20000030 	.word	0x20000030

08008358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800835c:	b090      	sub	sp, #64	@ 0x40
 800835e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008360:	2300      	movs	r3, #0
 8008362:	637b      	str	r3, [r7, #52]	@ 0x34
 8008364:	2300      	movs	r3, #0
 8008366:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008368:	2300      	movs	r3, #0
 800836a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800836c:	2300      	movs	r3, #0
 800836e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008370:	4b59      	ldr	r3, [pc, #356]	@ (80084d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	f003 030c 	and.w	r3, r3, #12
 8008378:	2b08      	cmp	r3, #8
 800837a:	d00d      	beq.n	8008398 <HAL_RCC_GetSysClockFreq+0x40>
 800837c:	2b08      	cmp	r3, #8
 800837e:	f200 80a1 	bhi.w	80084c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8008382:	2b00      	cmp	r3, #0
 8008384:	d002      	beq.n	800838c <HAL_RCC_GetSysClockFreq+0x34>
 8008386:	2b04      	cmp	r3, #4
 8008388:	d003      	beq.n	8008392 <HAL_RCC_GetSysClockFreq+0x3a>
 800838a:	e09b      	b.n	80084c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800838c:	4b53      	ldr	r3, [pc, #332]	@ (80084dc <HAL_RCC_GetSysClockFreq+0x184>)
 800838e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8008390:	e09b      	b.n	80084ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008392:	4b53      	ldr	r3, [pc, #332]	@ (80084e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8008394:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008396:	e098      	b.n	80084ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008398:	4b4f      	ldr	r3, [pc, #316]	@ (80084d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80083a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80083a2:	4b4d      	ldr	r3, [pc, #308]	@ (80084d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d028      	beq.n	8008400 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083ae:	4b4a      	ldr	r3, [pc, #296]	@ (80084d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	099b      	lsrs	r3, r3, #6
 80083b4:	2200      	movs	r2, #0
 80083b6:	623b      	str	r3, [r7, #32]
 80083b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80083ba:	6a3b      	ldr	r3, [r7, #32]
 80083bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80083c0:	2100      	movs	r1, #0
 80083c2:	4b47      	ldr	r3, [pc, #284]	@ (80084e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80083c4:	fb03 f201 	mul.w	r2, r3, r1
 80083c8:	2300      	movs	r3, #0
 80083ca:	fb00 f303 	mul.w	r3, r0, r3
 80083ce:	4413      	add	r3, r2
 80083d0:	4a43      	ldr	r2, [pc, #268]	@ (80084e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80083d2:	fba0 1202 	umull	r1, r2, r0, r2
 80083d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80083d8:	460a      	mov	r2, r1
 80083da:	62ba      	str	r2, [r7, #40]	@ 0x28
 80083dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083de:	4413      	add	r3, r2
 80083e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083e4:	2200      	movs	r2, #0
 80083e6:	61bb      	str	r3, [r7, #24]
 80083e8:	61fa      	str	r2, [r7, #28]
 80083ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80083ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80083f2:	f7f8 fc51 	bl	8000c98 <__aeabi_uldivmod>
 80083f6:	4602      	mov	r2, r0
 80083f8:	460b      	mov	r3, r1
 80083fa:	4613      	mov	r3, r2
 80083fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083fe:	e053      	b.n	80084a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008400:	4b35      	ldr	r3, [pc, #212]	@ (80084d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	099b      	lsrs	r3, r3, #6
 8008406:	2200      	movs	r2, #0
 8008408:	613b      	str	r3, [r7, #16]
 800840a:	617a      	str	r2, [r7, #20]
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008412:	f04f 0b00 	mov.w	fp, #0
 8008416:	4652      	mov	r2, sl
 8008418:	465b      	mov	r3, fp
 800841a:	f04f 0000 	mov.w	r0, #0
 800841e:	f04f 0100 	mov.w	r1, #0
 8008422:	0159      	lsls	r1, r3, #5
 8008424:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008428:	0150      	lsls	r0, r2, #5
 800842a:	4602      	mov	r2, r0
 800842c:	460b      	mov	r3, r1
 800842e:	ebb2 080a 	subs.w	r8, r2, sl
 8008432:	eb63 090b 	sbc.w	r9, r3, fp
 8008436:	f04f 0200 	mov.w	r2, #0
 800843a:	f04f 0300 	mov.w	r3, #0
 800843e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008442:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008446:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800844a:	ebb2 0408 	subs.w	r4, r2, r8
 800844e:	eb63 0509 	sbc.w	r5, r3, r9
 8008452:	f04f 0200 	mov.w	r2, #0
 8008456:	f04f 0300 	mov.w	r3, #0
 800845a:	00eb      	lsls	r3, r5, #3
 800845c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008460:	00e2      	lsls	r2, r4, #3
 8008462:	4614      	mov	r4, r2
 8008464:	461d      	mov	r5, r3
 8008466:	eb14 030a 	adds.w	r3, r4, sl
 800846a:	603b      	str	r3, [r7, #0]
 800846c:	eb45 030b 	adc.w	r3, r5, fp
 8008470:	607b      	str	r3, [r7, #4]
 8008472:	f04f 0200 	mov.w	r2, #0
 8008476:	f04f 0300 	mov.w	r3, #0
 800847a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800847e:	4629      	mov	r1, r5
 8008480:	028b      	lsls	r3, r1, #10
 8008482:	4621      	mov	r1, r4
 8008484:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008488:	4621      	mov	r1, r4
 800848a:	028a      	lsls	r2, r1, #10
 800848c:	4610      	mov	r0, r2
 800848e:	4619      	mov	r1, r3
 8008490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008492:	2200      	movs	r2, #0
 8008494:	60bb      	str	r3, [r7, #8]
 8008496:	60fa      	str	r2, [r7, #12]
 8008498:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800849c:	f7f8 fbfc 	bl	8000c98 <__aeabi_uldivmod>
 80084a0:	4602      	mov	r2, r0
 80084a2:	460b      	mov	r3, r1
 80084a4:	4613      	mov	r3, r2
 80084a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80084a8:	4b0b      	ldr	r3, [pc, #44]	@ (80084d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	0c1b      	lsrs	r3, r3, #16
 80084ae:	f003 0303 	and.w	r3, r3, #3
 80084b2:	3301      	adds	r3, #1
 80084b4:	005b      	lsls	r3, r3, #1
 80084b6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80084b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80084ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80084c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80084c2:	e002      	b.n	80084ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80084c4:	4b05      	ldr	r3, [pc, #20]	@ (80084dc <HAL_RCC_GetSysClockFreq+0x184>)
 80084c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80084c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80084ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3740      	adds	r7, #64	@ 0x40
 80084d0:	46bd      	mov	sp, r7
 80084d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084d6:	bf00      	nop
 80084d8:	40023800 	.word	0x40023800
 80084dc:	00f42400 	.word	0x00f42400
 80084e0:	017d7840 	.word	0x017d7840

080084e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80084e4:	b480      	push	{r7}
 80084e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80084e8:	4b03      	ldr	r3, [pc, #12]	@ (80084f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80084ea:	681b      	ldr	r3, [r3, #0]
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	2000000c 	.word	0x2000000c

080084fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008500:	f7ff fff0 	bl	80084e4 <HAL_RCC_GetHCLKFreq>
 8008504:	4602      	mov	r2, r0
 8008506:	4b05      	ldr	r3, [pc, #20]	@ (800851c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	0a9b      	lsrs	r3, r3, #10
 800850c:	f003 0307 	and.w	r3, r3, #7
 8008510:	4903      	ldr	r1, [pc, #12]	@ (8008520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008512:	5ccb      	ldrb	r3, [r1, r3]
 8008514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008518:	4618      	mov	r0, r3
 800851a:	bd80      	pop	{r7, pc}
 800851c:	40023800 	.word	0x40023800
 8008520:	080136cc 	.word	0x080136cc

08008524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008528:	f7ff ffdc 	bl	80084e4 <HAL_RCC_GetHCLKFreq>
 800852c:	4602      	mov	r2, r0
 800852e:	4b05      	ldr	r3, [pc, #20]	@ (8008544 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	0b5b      	lsrs	r3, r3, #13
 8008534:	f003 0307 	and.w	r3, r3, #7
 8008538:	4903      	ldr	r1, [pc, #12]	@ (8008548 <HAL_RCC_GetPCLK2Freq+0x24>)
 800853a:	5ccb      	ldrb	r3, [r1, r3]
 800853c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008540:	4618      	mov	r0, r3
 8008542:	bd80      	pop	{r7, pc}
 8008544:	40023800 	.word	0x40023800
 8008548:	080136cc 	.word	0x080136cc

0800854c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d101      	bne.n	800855e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	e041      	b.n	80085e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008564:	b2db      	uxtb	r3, r3
 8008566:	2b00      	cmp	r3, #0
 8008568:	d106      	bne.n	8008578 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f7fa fa12 	bl	800299c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2202      	movs	r2, #2
 800857c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	3304      	adds	r3, #4
 8008588:	4619      	mov	r1, r3
 800858a:	4610      	mov	r0, r2
 800858c:	f000 f9a0 	bl	80088d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
	...

080085ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d109      	bne.n	8008610 <HAL_TIM_PWM_Start+0x24>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008602:	b2db      	uxtb	r3, r3
 8008604:	2b01      	cmp	r3, #1
 8008606:	bf14      	ite	ne
 8008608:	2301      	movne	r3, #1
 800860a:	2300      	moveq	r3, #0
 800860c:	b2db      	uxtb	r3, r3
 800860e:	e022      	b.n	8008656 <HAL_TIM_PWM_Start+0x6a>
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	2b04      	cmp	r3, #4
 8008614:	d109      	bne.n	800862a <HAL_TIM_PWM_Start+0x3e>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800861c:	b2db      	uxtb	r3, r3
 800861e:	2b01      	cmp	r3, #1
 8008620:	bf14      	ite	ne
 8008622:	2301      	movne	r3, #1
 8008624:	2300      	moveq	r3, #0
 8008626:	b2db      	uxtb	r3, r3
 8008628:	e015      	b.n	8008656 <HAL_TIM_PWM_Start+0x6a>
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	2b08      	cmp	r3, #8
 800862e:	d109      	bne.n	8008644 <HAL_TIM_PWM_Start+0x58>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008636:	b2db      	uxtb	r3, r3
 8008638:	2b01      	cmp	r3, #1
 800863a:	bf14      	ite	ne
 800863c:	2301      	movne	r3, #1
 800863e:	2300      	moveq	r3, #0
 8008640:	b2db      	uxtb	r3, r3
 8008642:	e008      	b.n	8008656 <HAL_TIM_PWM_Start+0x6a>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800864a:	b2db      	uxtb	r3, r3
 800864c:	2b01      	cmp	r3, #1
 800864e:	bf14      	ite	ne
 8008650:	2301      	movne	r3, #1
 8008652:	2300      	moveq	r3, #0
 8008654:	b2db      	uxtb	r3, r3
 8008656:	2b00      	cmp	r3, #0
 8008658:	d001      	beq.n	800865e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	e068      	b.n	8008730 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d104      	bne.n	800866e <HAL_TIM_PWM_Start+0x82>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2202      	movs	r2, #2
 8008668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800866c:	e013      	b.n	8008696 <HAL_TIM_PWM_Start+0xaa>
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	2b04      	cmp	r3, #4
 8008672:	d104      	bne.n	800867e <HAL_TIM_PWM_Start+0x92>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2202      	movs	r2, #2
 8008678:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800867c:	e00b      	b.n	8008696 <HAL_TIM_PWM_Start+0xaa>
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	2b08      	cmp	r3, #8
 8008682:	d104      	bne.n	800868e <HAL_TIM_PWM_Start+0xa2>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2202      	movs	r2, #2
 8008688:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800868c:	e003      	b.n	8008696 <HAL_TIM_PWM_Start+0xaa>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2202      	movs	r2, #2
 8008692:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2201      	movs	r2, #1
 800869c:	6839      	ldr	r1, [r7, #0]
 800869e:	4618      	mov	r0, r3
 80086a0:	f000 fb22 	bl	8008ce8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a23      	ldr	r2, [pc, #140]	@ (8008738 <HAL_TIM_PWM_Start+0x14c>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d107      	bne.n	80086be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80086bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a1d      	ldr	r2, [pc, #116]	@ (8008738 <HAL_TIM_PWM_Start+0x14c>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d018      	beq.n	80086fa <HAL_TIM_PWM_Start+0x10e>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086d0:	d013      	beq.n	80086fa <HAL_TIM_PWM_Start+0x10e>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a19      	ldr	r2, [pc, #100]	@ (800873c <HAL_TIM_PWM_Start+0x150>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d00e      	beq.n	80086fa <HAL_TIM_PWM_Start+0x10e>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a17      	ldr	r2, [pc, #92]	@ (8008740 <HAL_TIM_PWM_Start+0x154>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d009      	beq.n	80086fa <HAL_TIM_PWM_Start+0x10e>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a16      	ldr	r2, [pc, #88]	@ (8008744 <HAL_TIM_PWM_Start+0x158>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d004      	beq.n	80086fa <HAL_TIM_PWM_Start+0x10e>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a14      	ldr	r2, [pc, #80]	@ (8008748 <HAL_TIM_PWM_Start+0x15c>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d111      	bne.n	800871e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f003 0307 	and.w	r3, r3, #7
 8008704:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2b06      	cmp	r3, #6
 800870a:	d010      	beq.n	800872e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f042 0201 	orr.w	r2, r2, #1
 800871a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800871c:	e007      	b.n	800872e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f042 0201 	orr.w	r2, r2, #1
 800872c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	3710      	adds	r7, #16
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}
 8008738:	40010000 	.word	0x40010000
 800873c:	40000400 	.word	0x40000400
 8008740:	40000800 	.word	0x40000800
 8008744:	40000c00 	.word	0x40000c00
 8008748:	40014000 	.word	0x40014000

0800874c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b086      	sub	sp, #24
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008758:	2300      	movs	r3, #0
 800875a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008762:	2b01      	cmp	r3, #1
 8008764:	d101      	bne.n	800876a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008766:	2302      	movs	r3, #2
 8008768:	e0ae      	b.n	80088c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2201      	movs	r2, #1
 800876e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2b0c      	cmp	r3, #12
 8008776:	f200 809f 	bhi.w	80088b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800877a:	a201      	add	r2, pc, #4	@ (adr r2, 8008780 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800877c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008780:	080087b5 	.word	0x080087b5
 8008784:	080088b9 	.word	0x080088b9
 8008788:	080088b9 	.word	0x080088b9
 800878c:	080088b9 	.word	0x080088b9
 8008790:	080087f5 	.word	0x080087f5
 8008794:	080088b9 	.word	0x080088b9
 8008798:	080088b9 	.word	0x080088b9
 800879c:	080088b9 	.word	0x080088b9
 80087a0:	08008837 	.word	0x08008837
 80087a4:	080088b9 	.word	0x080088b9
 80087a8:	080088b9 	.word	0x080088b9
 80087ac:	080088b9 	.word	0x080088b9
 80087b0:	08008877 	.word	0x08008877
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68b9      	ldr	r1, [r7, #8]
 80087ba:	4618      	mov	r0, r3
 80087bc:	f000 f908 	bl	80089d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	699a      	ldr	r2, [r3, #24]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f042 0208 	orr.w	r2, r2, #8
 80087ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	699a      	ldr	r2, [r3, #24]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f022 0204 	bic.w	r2, r2, #4
 80087de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6999      	ldr	r1, [r3, #24]
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	691a      	ldr	r2, [r3, #16]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	430a      	orrs	r2, r1
 80087f0:	619a      	str	r2, [r3, #24]
      break;
 80087f2:	e064      	b.n	80088be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	68b9      	ldr	r1, [r7, #8]
 80087fa:	4618      	mov	r0, r3
 80087fc:	f000 f94e 	bl	8008a9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	699a      	ldr	r2, [r3, #24]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800880e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	699a      	ldr	r2, [r3, #24]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800881e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	6999      	ldr	r1, [r3, #24]
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	691b      	ldr	r3, [r3, #16]
 800882a:	021a      	lsls	r2, r3, #8
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	430a      	orrs	r2, r1
 8008832:	619a      	str	r2, [r3, #24]
      break;
 8008834:	e043      	b.n	80088be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68b9      	ldr	r1, [r7, #8]
 800883c:	4618      	mov	r0, r3
 800883e:	f000 f999 	bl	8008b74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	69da      	ldr	r2, [r3, #28]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f042 0208 	orr.w	r2, r2, #8
 8008850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	69da      	ldr	r2, [r3, #28]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f022 0204 	bic.w	r2, r2, #4
 8008860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	69d9      	ldr	r1, [r3, #28]
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	691a      	ldr	r2, [r3, #16]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	430a      	orrs	r2, r1
 8008872:	61da      	str	r2, [r3, #28]
      break;
 8008874:	e023      	b.n	80088be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	68b9      	ldr	r1, [r7, #8]
 800887c:	4618      	mov	r0, r3
 800887e:	f000 f9e3 	bl	8008c48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	69da      	ldr	r2, [r3, #28]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008890:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	69da      	ldr	r2, [r3, #28]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	69d9      	ldr	r1, [r3, #28]
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	021a      	lsls	r2, r3, #8
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	430a      	orrs	r2, r1
 80088b4:	61da      	str	r2, [r3, #28]
      break;
 80088b6:	e002      	b.n	80088be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	75fb      	strb	r3, [r7, #23]
      break;
 80088bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80088c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3718      	adds	r7, #24
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b085      	sub	sp, #20
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a34      	ldr	r2, [pc, #208]	@ (80089b4 <TIM_Base_SetConfig+0xe4>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d00f      	beq.n	8008908 <TIM_Base_SetConfig+0x38>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088ee:	d00b      	beq.n	8008908 <TIM_Base_SetConfig+0x38>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a31      	ldr	r2, [pc, #196]	@ (80089b8 <TIM_Base_SetConfig+0xe8>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d007      	beq.n	8008908 <TIM_Base_SetConfig+0x38>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4a30      	ldr	r2, [pc, #192]	@ (80089bc <TIM_Base_SetConfig+0xec>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d003      	beq.n	8008908 <TIM_Base_SetConfig+0x38>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a2f      	ldr	r2, [pc, #188]	@ (80089c0 <TIM_Base_SetConfig+0xf0>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d108      	bne.n	800891a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800890e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	68fa      	ldr	r2, [r7, #12]
 8008916:	4313      	orrs	r3, r2
 8008918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4a25      	ldr	r2, [pc, #148]	@ (80089b4 <TIM_Base_SetConfig+0xe4>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d01b      	beq.n	800895a <TIM_Base_SetConfig+0x8a>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008928:	d017      	beq.n	800895a <TIM_Base_SetConfig+0x8a>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a22      	ldr	r2, [pc, #136]	@ (80089b8 <TIM_Base_SetConfig+0xe8>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d013      	beq.n	800895a <TIM_Base_SetConfig+0x8a>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a21      	ldr	r2, [pc, #132]	@ (80089bc <TIM_Base_SetConfig+0xec>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d00f      	beq.n	800895a <TIM_Base_SetConfig+0x8a>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4a20      	ldr	r2, [pc, #128]	@ (80089c0 <TIM_Base_SetConfig+0xf0>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d00b      	beq.n	800895a <TIM_Base_SetConfig+0x8a>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4a1f      	ldr	r2, [pc, #124]	@ (80089c4 <TIM_Base_SetConfig+0xf4>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d007      	beq.n	800895a <TIM_Base_SetConfig+0x8a>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4a1e      	ldr	r2, [pc, #120]	@ (80089c8 <TIM_Base_SetConfig+0xf8>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d003      	beq.n	800895a <TIM_Base_SetConfig+0x8a>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4a1d      	ldr	r2, [pc, #116]	@ (80089cc <TIM_Base_SetConfig+0xfc>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d108      	bne.n	800896c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	68fa      	ldr	r2, [r7, #12]
 8008968:	4313      	orrs	r3, r2
 800896a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	695b      	ldr	r3, [r3, #20]
 8008976:	4313      	orrs	r3, r2
 8008978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	689a      	ldr	r2, [r3, #8]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4a08      	ldr	r2, [pc, #32]	@ (80089b4 <TIM_Base_SetConfig+0xe4>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d103      	bne.n	80089a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	691a      	ldr	r2, [r3, #16]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2201      	movs	r2, #1
 80089a4:	615a      	str	r2, [r3, #20]
}
 80089a6:	bf00      	nop
 80089a8:	3714      	adds	r7, #20
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	40010000 	.word	0x40010000
 80089b8:	40000400 	.word	0x40000400
 80089bc:	40000800 	.word	0x40000800
 80089c0:	40000c00 	.word	0x40000c00
 80089c4:	40014000 	.word	0x40014000
 80089c8:	40014400 	.word	0x40014400
 80089cc:	40014800 	.word	0x40014800

080089d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b087      	sub	sp, #28
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a1b      	ldr	r3, [r3, #32]
 80089de:	f023 0201 	bic.w	r2, r3, #1
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a1b      	ldr	r3, [r3, #32]
 80089ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	699b      	ldr	r3, [r3, #24]
 80089f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f023 0303 	bic.w	r3, r3, #3
 8008a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	f023 0302 	bic.w	r3, r3, #2
 8008a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	697a      	ldr	r2, [r7, #20]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4a1c      	ldr	r2, [pc, #112]	@ (8008a98 <TIM_OC1_SetConfig+0xc8>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d10c      	bne.n	8008a46 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	f023 0308 	bic.w	r3, r3, #8
 8008a32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	697a      	ldr	r2, [r7, #20]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	f023 0304 	bic.w	r3, r3, #4
 8008a44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a13      	ldr	r2, [pc, #76]	@ (8008a98 <TIM_OC1_SetConfig+0xc8>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d111      	bne.n	8008a72 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	695b      	ldr	r3, [r3, #20]
 8008a62:	693a      	ldr	r2, [r7, #16]
 8008a64:	4313      	orrs	r3, r2
 8008a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	699b      	ldr	r3, [r3, #24]
 8008a6c:	693a      	ldr	r2, [r7, #16]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	693a      	ldr	r2, [r7, #16]
 8008a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	685a      	ldr	r2, [r3, #4]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	697a      	ldr	r2, [r7, #20]
 8008a8a:	621a      	str	r2, [r3, #32]
}
 8008a8c:	bf00      	nop
 8008a8e:	371c      	adds	r7, #28
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr
 8008a98:	40010000 	.word	0x40010000

08008a9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b087      	sub	sp, #28
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a1b      	ldr	r3, [r3, #32]
 8008aaa:	f023 0210 	bic.w	r2, r3, #16
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6a1b      	ldr	r3, [r3, #32]
 8008ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	699b      	ldr	r3, [r3, #24]
 8008ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	021b      	lsls	r3, r3, #8
 8008ada:	68fa      	ldr	r2, [r7, #12]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	f023 0320 	bic.w	r3, r3, #32
 8008ae6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	011b      	lsls	r3, r3, #4
 8008aee:	697a      	ldr	r2, [r7, #20]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4a1e      	ldr	r2, [pc, #120]	@ (8008b70 <TIM_OC2_SetConfig+0xd4>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d10d      	bne.n	8008b18 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	011b      	lsls	r3, r3, #4
 8008b0a:	697a      	ldr	r2, [r7, #20]
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a15      	ldr	r2, [pc, #84]	@ (8008b70 <TIM_OC2_SetConfig+0xd4>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d113      	bne.n	8008b48 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008b26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	695b      	ldr	r3, [r3, #20]
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	693a      	ldr	r2, [r7, #16]
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	699b      	ldr	r3, [r3, #24]
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	693a      	ldr	r2, [r7, #16]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	693a      	ldr	r2, [r7, #16]
 8008b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	685a      	ldr	r2, [r3, #4]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	697a      	ldr	r2, [r7, #20]
 8008b60:	621a      	str	r2, [r3, #32]
}
 8008b62:	bf00      	nop
 8008b64:	371c      	adds	r7, #28
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	40010000 	.word	0x40010000

08008b74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b087      	sub	sp, #28
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a1b      	ldr	r3, [r3, #32]
 8008b82:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6a1b      	ldr	r3, [r3, #32]
 8008b8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	69db      	ldr	r3, [r3, #28]
 8008b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f023 0303 	bic.w	r3, r3, #3
 8008baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	68fa      	ldr	r2, [r7, #12]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008bbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	021b      	lsls	r3, r3, #8
 8008bc4:	697a      	ldr	r2, [r7, #20]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8008c44 <TIM_OC3_SetConfig+0xd0>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d10d      	bne.n	8008bee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008bd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	021b      	lsls	r3, r3, #8
 8008be0:	697a      	ldr	r2, [r7, #20]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008bec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a14      	ldr	r2, [pc, #80]	@ (8008c44 <TIM_OC3_SetConfig+0xd0>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d113      	bne.n	8008c1e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008bfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008c04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	695b      	ldr	r3, [r3, #20]
 8008c0a:	011b      	lsls	r3, r3, #4
 8008c0c:	693a      	ldr	r2, [r7, #16]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	699b      	ldr	r3, [r3, #24]
 8008c16:	011b      	lsls	r3, r3, #4
 8008c18:	693a      	ldr	r2, [r7, #16]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	693a      	ldr	r2, [r7, #16]
 8008c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	68fa      	ldr	r2, [r7, #12]
 8008c28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	685a      	ldr	r2, [r3, #4]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	697a      	ldr	r2, [r7, #20]
 8008c36:	621a      	str	r2, [r3, #32]
}
 8008c38:	bf00      	nop
 8008c3a:	371c      	adds	r7, #28
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr
 8008c44:	40010000 	.word	0x40010000

08008c48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b087      	sub	sp, #28
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6a1b      	ldr	r3, [r3, #32]
 8008c56:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a1b      	ldr	r3, [r3, #32]
 8008c62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	69db      	ldr	r3, [r3, #28]
 8008c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	021b      	lsls	r3, r3, #8
 8008c86:	68fa      	ldr	r2, [r7, #12]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008c92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	031b      	lsls	r3, r3, #12
 8008c9a:	693a      	ldr	r2, [r7, #16]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a10      	ldr	r2, [pc, #64]	@ (8008ce4 <TIM_OC4_SetConfig+0x9c>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d109      	bne.n	8008cbc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008cae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	695b      	ldr	r3, [r3, #20]
 8008cb4:	019b      	lsls	r3, r3, #6
 8008cb6:	697a      	ldr	r2, [r7, #20]
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	697a      	ldr	r2, [r7, #20]
 8008cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	68fa      	ldr	r2, [r7, #12]
 8008cc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	685a      	ldr	r2, [r3, #4]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	693a      	ldr	r2, [r7, #16]
 8008cd4:	621a      	str	r2, [r3, #32]
}
 8008cd6:	bf00      	nop
 8008cd8:	371c      	adds	r7, #28
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	40010000 	.word	0x40010000

08008ce8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b087      	sub	sp, #28
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	f003 031f 	and.w	r3, r3, #31
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8008d00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6a1a      	ldr	r2, [r3, #32]
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	43db      	mvns	r3, r3
 8008d0a:	401a      	ands	r2, r3
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6a1a      	ldr	r2, [r3, #32]
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	f003 031f 	and.w	r3, r3, #31
 8008d1a:	6879      	ldr	r1, [r7, #4]
 8008d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8008d20:	431a      	orrs	r2, r3
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	621a      	str	r2, [r3, #32]
}
 8008d26:	bf00      	nop
 8008d28:	371c      	adds	r7, #28
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
	...

08008d34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b085      	sub	sp, #20
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d101      	bne.n	8008d4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d48:	2302      	movs	r3, #2
 8008d4a:	e050      	b.n	8008dee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2202      	movs	r2, #2
 8008d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	68fa      	ldr	r2, [r7, #12]
 8008d84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8008dfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d018      	beq.n	8008dc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d98:	d013      	beq.n	8008dc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a18      	ldr	r2, [pc, #96]	@ (8008e00 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d00e      	beq.n	8008dc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a16      	ldr	r2, [pc, #88]	@ (8008e04 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d009      	beq.n	8008dc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a15      	ldr	r2, [pc, #84]	@ (8008e08 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d004      	beq.n	8008dc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a13      	ldr	r2, [pc, #76]	@ (8008e0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d10c      	bne.n	8008ddc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008dc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	68ba      	ldr	r2, [r7, #8]
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68ba      	ldr	r2, [r7, #8]
 8008dda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3714      	adds	r7, #20
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	40010000 	.word	0x40010000
 8008e00:	40000400 	.word	0x40000400
 8008e04:	40000800 	.word	0x40000800
 8008e08:	40000c00 	.word	0x40000c00
 8008e0c:	40014000 	.word	0x40014000

08008e10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d101      	bne.n	8008e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e03f      	b.n	8008ea2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d106      	bne.n	8008e3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f7f9 fe2c 	bl	8002a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2224      	movs	r2, #36	@ 0x24
 8008e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	68da      	ldr	r2, [r3, #12]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008e52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 faa5 	bl	80093a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	691a      	ldr	r2, [r3, #16]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008e68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	695a      	ldr	r2, [r3, #20]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008e78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	68da      	ldr	r2, [r3, #12]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008e88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2220      	movs	r2, #32
 8008e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2220      	movs	r2, #32
 8008e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b084      	sub	sp, #16
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	60f8      	str	r0, [r7, #12]
 8008eb2:	60b9      	str	r1, [r7, #8]
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	2b20      	cmp	r3, #32
 8008ec2:	d11d      	bne.n	8008f00 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d002      	beq.n	8008ed0 <HAL_UART_Receive_DMA+0x26>
 8008eca:	88fb      	ldrh	r3, [r7, #6]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d101      	bne.n	8008ed4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e016      	b.n	8008f02 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d101      	bne.n	8008ee2 <HAL_UART_Receive_DMA+0x38>
 8008ede:	2302      	movs	r3, #2
 8008ee0:	e00f      	b.n	8008f02 <HAL_UART_Receive_DMA+0x58>
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008ef0:	88fb      	ldrh	r3, [r7, #6]
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	68b9      	ldr	r1, [r7, #8]
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	f000 f92a 	bl	8009150 <UART_Start_Receive_DMA>
 8008efc:	4603      	mov	r3, r0
 8008efe:	e000      	b.n	8008f02 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008f00:	2302      	movs	r3, #2
  }
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3710      	adds	r7, #16
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f0a:	b480      	push	{r7}
 8008f0c:	b083      	sub	sp, #12
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008f12:	bf00      	nop
 8008f14:	370c      	adds	r7, #12
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr

08008f1e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008f1e:	b480      	push	{r7}
 8008f20:	b083      	sub	sp, #12
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008f26:	bf00      	nop
 8008f28:	370c      	adds	r7, #12
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr

08008f32 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f32:	b480      	push	{r7}
 8008f34:	b083      	sub	sp, #12
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008f3a:	bf00      	nop
 8008f3c:	370c      	adds	r7, #12
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr

08008f46 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008f46:	b480      	push	{r7}
 8008f48:	b083      	sub	sp, #12
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
 8008f4e:	460b      	mov	r3, r1
 8008f50:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008f52:	bf00      	nop
 8008f54:	370c      	adds	r7, #12
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr

08008f5e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b09c      	sub	sp, #112	@ 0x70
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d172      	bne.n	8009060 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008f7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	330c      	adds	r3, #12
 8008f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f8a:	e853 3f00 	ldrex	r3, [r3]
 8008f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008f90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f92:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f96:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	330c      	adds	r3, #12
 8008f9e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008fa0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008fa2:	657b      	str	r3, [r7, #84]	@ 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008fa6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008fa8:	e841 2300 	strex	r3, r2, [r1]
 8008fac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008fae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d1e5      	bne.n	8008f80 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	3314      	adds	r3, #20
 8008fba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fbe:	e853 3f00 	ldrex	r3, [r3]
 8008fc2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fc6:	f023 0301 	bic.w	r3, r3, #1
 8008fca:	667b      	str	r3, [r7, #100]	@ 0x64
 8008fcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	3314      	adds	r3, #20
 8008fd2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008fd4:	647a      	str	r2, [r7, #68]	@ 0x44
 8008fd6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008fda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008fdc:	e841 2300 	strex	r3, r2, [r1]
 8008fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008fe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d1e5      	bne.n	8008fb4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fe8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	3314      	adds	r3, #20
 8008fee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff2:	e853 3f00 	ldrex	r3, [r3]
 8008ff6:	623b      	str	r3, [r7, #32]
   return(result);
 8008ff8:	6a3b      	ldr	r3, [r7, #32]
 8008ffa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ffe:	663b      	str	r3, [r7, #96]	@ 0x60
 8009000:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	3314      	adds	r3, #20
 8009006:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009008:	633a      	str	r2, [r7, #48]	@ 0x30
 800900a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800900e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009010:	e841 2300 	strex	r3, r2, [r1]
 8009014:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009018:	2b00      	cmp	r3, #0
 800901a:	d1e5      	bne.n	8008fe8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800901c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800901e:	2220      	movs	r2, #32
 8009020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009024:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009028:	2b01      	cmp	r3, #1
 800902a:	d119      	bne.n	8009060 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800902c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	330c      	adds	r3, #12
 8009032:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	e853 3f00 	ldrex	r3, [r3]
 800903a:	60fb      	str	r3, [r7, #12]
   return(result);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f023 0310 	bic.w	r3, r3, #16
 8009042:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009044:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	330c      	adds	r3, #12
 800904a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800904c:	61fa      	str	r2, [r7, #28]
 800904e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009050:	69b9      	ldr	r1, [r7, #24]
 8009052:	69fa      	ldr	r2, [r7, #28]
 8009054:	e841 2300 	strex	r3, r2, [r1]
 8009058:	617b      	str	r3, [r7, #20]
   return(result);
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d1e5      	bne.n	800902c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009060:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009064:	2b01      	cmp	r3, #1
 8009066:	d106      	bne.n	8009076 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009068:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800906a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800906c:	4619      	mov	r1, r3
 800906e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009070:	f7ff ff69 	bl	8008f46 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009074:	e002      	b.n	800907c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009076:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009078:	f7ff ff47 	bl	8008f0a <HAL_UART_RxCpltCallback>
}
 800907c:	bf00      	nop
 800907e:	3770      	adds	r7, #112	@ 0x70
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009090:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009096:	2b01      	cmp	r3, #1
 8009098:	d108      	bne.n	80090ac <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800909e:	085b      	lsrs	r3, r3, #1
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	4619      	mov	r1, r3
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	f7ff ff4e 	bl	8008f46 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80090aa:	e002      	b.n	80090b2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f7ff ff36 	bl	8008f1e <HAL_UART_RxHalfCpltCallback>
}
 80090b2:	bf00      	nop
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b084      	sub	sp, #16
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80090c2:	2300      	movs	r3, #0
 80090c4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ca:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	695b      	ldr	r3, [r3, #20]
 80090d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090d6:	2b80      	cmp	r3, #128	@ 0x80
 80090d8:	bf0c      	ite	eq
 80090da:	2301      	moveq	r3, #1
 80090dc:	2300      	movne	r3, #0
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	2b21      	cmp	r3, #33	@ 0x21
 80090ec:	d108      	bne.n	8009100 <UART_DMAError+0x46>
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d005      	beq.n	8009100 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	2200      	movs	r2, #0
 80090f8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80090fa:	68b8      	ldr	r0, [r7, #8]
 80090fc:	f000 f8c6 	bl	800928c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	695b      	ldr	r3, [r3, #20]
 8009106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800910a:	2b40      	cmp	r3, #64	@ 0x40
 800910c:	bf0c      	ite	eq
 800910e:	2301      	moveq	r3, #1
 8009110:	2300      	movne	r3, #0
 8009112:	b2db      	uxtb	r3, r3
 8009114:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800911c:	b2db      	uxtb	r3, r3
 800911e:	2b22      	cmp	r3, #34	@ 0x22
 8009120:	d108      	bne.n	8009134 <UART_DMAError+0x7a>
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d005      	beq.n	8009134 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	2200      	movs	r2, #0
 800912c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800912e:	68b8      	ldr	r0, [r7, #8]
 8009130:	f000 f8d4 	bl	80092dc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009138:	f043 0210 	orr.w	r2, r3, #16
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009140:	68b8      	ldr	r0, [r7, #8]
 8009142:	f7ff fef6 	bl	8008f32 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009146:	bf00      	nop
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
	...

08009150 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b098      	sub	sp, #96	@ 0x60
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	4613      	mov	r3, r2
 800915c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800915e:	68ba      	ldr	r2, [r7, #8]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	88fa      	ldrh	r2, [r7, #6]
 8009168:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2200      	movs	r2, #0
 800916e:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2222      	movs	r2, #34	@ 0x22
 8009174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800917c:	4a40      	ldr	r2, [pc, #256]	@ (8009280 <UART_Start_Receive_DMA+0x130>)
 800917e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009184:	4a3f      	ldr	r2, [pc, #252]	@ (8009284 <UART_Start_Receive_DMA+0x134>)
 8009186:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800918c:	4a3e      	ldr	r2, [pc, #248]	@ (8009288 <UART_Start_Receive_DMA+0x138>)
 800918e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009194:	2200      	movs	r2, #0
 8009196:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009198:	f107 0308 	add.w	r3, r7, #8
 800919c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	3304      	adds	r3, #4
 80091a8:	4619      	mov	r1, r3
 80091aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	88fb      	ldrh	r3, [r7, #6]
 80091b0:	f7fc f84a 	bl	8005248 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80091b4:	2300      	movs	r3, #0
 80091b6:	613b      	str	r3, [r7, #16]
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	613b      	str	r3, [r7, #16]
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	613b      	str	r3, [r7, #16]
 80091c8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	691b      	ldr	r3, [r3, #16]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d019      	beq.n	800920e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	330c      	adds	r3, #12
 80091e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091e4:	e853 3f00 	ldrex	r3, [r3]
 80091e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80091f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	330c      	adds	r3, #12
 80091f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80091fa:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80091fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091fe:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009200:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009202:	e841 2300 	strex	r3, r2, [r1]
 8009206:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009208:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800920a:	2b00      	cmp	r3, #0
 800920c:	d1e5      	bne.n	80091da <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	3314      	adds	r3, #20
 8009214:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009218:	e853 3f00 	ldrex	r3, [r3]
 800921c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800921e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009220:	f043 0301 	orr.w	r3, r3, #1
 8009224:	657b      	str	r3, [r7, #84]	@ 0x54
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	3314      	adds	r3, #20
 800922c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800922e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009230:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009232:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009234:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009236:	e841 2300 	strex	r3, r2, [r1]
 800923a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800923c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800923e:	2b00      	cmp	r3, #0
 8009240:	d1e5      	bne.n	800920e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	3314      	adds	r3, #20
 8009248:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	e853 3f00 	ldrex	r3, [r3]
 8009250:	617b      	str	r3, [r7, #20]
   return(result);
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009258:	653b      	str	r3, [r7, #80]	@ 0x50
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	3314      	adds	r3, #20
 8009260:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009262:	627a      	str	r2, [r7, #36]	@ 0x24
 8009264:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009266:	6a39      	ldr	r1, [r7, #32]
 8009268:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800926a:	e841 2300 	strex	r3, r2, [r1]
 800926e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d1e5      	bne.n	8009242 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8009276:	2300      	movs	r3, #0
}
 8009278:	4618      	mov	r0, r3
 800927a:	3760      	adds	r7, #96	@ 0x60
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	08008f5f 	.word	0x08008f5f
 8009284:	08009085 	.word	0x08009085
 8009288:	080090bb 	.word	0x080090bb

0800928c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800928c:	b480      	push	{r7}
 800928e:	b089      	sub	sp, #36	@ 0x24
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	330c      	adds	r3, #12
 800929a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	e853 3f00 	ldrex	r3, [r3]
 80092a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80092aa:	61fb      	str	r3, [r7, #28]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	330c      	adds	r3, #12
 80092b2:	69fa      	ldr	r2, [r7, #28]
 80092b4:	61ba      	str	r2, [r7, #24]
 80092b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b8:	6979      	ldr	r1, [r7, #20]
 80092ba:	69ba      	ldr	r2, [r7, #24]
 80092bc:	e841 2300 	strex	r3, r2, [r1]
 80092c0:	613b      	str	r3, [r7, #16]
   return(result);
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d1e5      	bne.n	8009294 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2220      	movs	r2, #32
 80092cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 80092d0:	bf00      	nop
 80092d2:	3724      	adds	r7, #36	@ 0x24
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80092dc:	b480      	push	{r7}
 80092de:	b095      	sub	sp, #84	@ 0x54
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	330c      	adds	r3, #12
 80092ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092ee:	e853 3f00 	ldrex	r3, [r3]
 80092f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80092f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80092fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	330c      	adds	r3, #12
 8009302:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009304:	643a      	str	r2, [r7, #64]	@ 0x40
 8009306:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009308:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800930a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800930c:	e841 2300 	strex	r3, r2, [r1]
 8009310:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009314:	2b00      	cmp	r3, #0
 8009316:	d1e5      	bne.n	80092e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	3314      	adds	r3, #20
 800931e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009320:	6a3b      	ldr	r3, [r7, #32]
 8009322:	e853 3f00 	ldrex	r3, [r3]
 8009326:	61fb      	str	r3, [r7, #28]
   return(result);
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	f023 0301 	bic.w	r3, r3, #1
 800932e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	3314      	adds	r3, #20
 8009336:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009338:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800933a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800933e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009340:	e841 2300 	strex	r3, r2, [r1]
 8009344:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009348:	2b00      	cmp	r3, #0
 800934a:	d1e5      	bne.n	8009318 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009350:	2b01      	cmp	r3, #1
 8009352:	d119      	bne.n	8009388 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	330c      	adds	r3, #12
 800935a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	e853 3f00 	ldrex	r3, [r3]
 8009362:	60bb      	str	r3, [r7, #8]
   return(result);
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	f023 0310 	bic.w	r3, r3, #16
 800936a:	647b      	str	r3, [r7, #68]	@ 0x44
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	330c      	adds	r3, #12
 8009372:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009374:	61ba      	str	r2, [r7, #24]
 8009376:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009378:	6979      	ldr	r1, [r7, #20]
 800937a:	69ba      	ldr	r2, [r7, #24]
 800937c:	e841 2300 	strex	r3, r2, [r1]
 8009380:	613b      	str	r3, [r7, #16]
   return(result);
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d1e5      	bne.n	8009354 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2220      	movs	r2, #32
 800938c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009396:	bf00      	nop
 8009398:	3754      	adds	r7, #84	@ 0x54
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr
	...

080093a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093a8:	b0c0      	sub	sp, #256	@ 0x100
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	691b      	ldr	r3, [r3, #16]
 80093b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80093bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093c0:	68d9      	ldr	r1, [r3, #12]
 80093c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	ea40 0301 	orr.w	r3, r0, r1
 80093cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80093ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093d2:	689a      	ldr	r2, [r3, #8]
 80093d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	431a      	orrs	r2, r3
 80093dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093e0:	695b      	ldr	r3, [r3, #20]
 80093e2:	431a      	orrs	r2, r3
 80093e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093e8:	69db      	ldr	r3, [r3, #28]
 80093ea:	4313      	orrs	r3, r2
 80093ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80093f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80093fc:	f021 010c 	bic.w	r1, r1, #12
 8009400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800940a:	430b      	orrs	r3, r1
 800940c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800940e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	695b      	ldr	r3, [r3, #20]
 8009416:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800941a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800941e:	6999      	ldr	r1, [r3, #24]
 8009420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	ea40 0301 	orr.w	r3, r0, r1
 800942a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800942c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	4b8f      	ldr	r3, [pc, #572]	@ (8009670 <UART_SetConfig+0x2cc>)
 8009434:	429a      	cmp	r2, r3
 8009436:	d005      	beq.n	8009444 <UART_SetConfig+0xa0>
 8009438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	4b8d      	ldr	r3, [pc, #564]	@ (8009674 <UART_SetConfig+0x2d0>)
 8009440:	429a      	cmp	r2, r3
 8009442:	d104      	bne.n	800944e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009444:	f7ff f86e 	bl	8008524 <HAL_RCC_GetPCLK2Freq>
 8009448:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800944c:	e003      	b.n	8009456 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800944e:	f7ff f855 	bl	80084fc <HAL_RCC_GetPCLK1Freq>
 8009452:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800945a:	69db      	ldr	r3, [r3, #28]
 800945c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009460:	f040 810c 	bne.w	800967c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009464:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009468:	2200      	movs	r2, #0
 800946a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800946e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009472:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009476:	4622      	mov	r2, r4
 8009478:	462b      	mov	r3, r5
 800947a:	1891      	adds	r1, r2, r2
 800947c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800947e:	415b      	adcs	r3, r3
 8009480:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009482:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009486:	4621      	mov	r1, r4
 8009488:	eb12 0801 	adds.w	r8, r2, r1
 800948c:	4629      	mov	r1, r5
 800948e:	eb43 0901 	adc.w	r9, r3, r1
 8009492:	f04f 0200 	mov.w	r2, #0
 8009496:	f04f 0300 	mov.w	r3, #0
 800949a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800949e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80094a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80094a6:	4690      	mov	r8, r2
 80094a8:	4699      	mov	r9, r3
 80094aa:	4623      	mov	r3, r4
 80094ac:	eb18 0303 	adds.w	r3, r8, r3
 80094b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80094b4:	462b      	mov	r3, r5
 80094b6:	eb49 0303 	adc.w	r3, r9, r3
 80094ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80094be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80094ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80094ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80094d2:	460b      	mov	r3, r1
 80094d4:	18db      	adds	r3, r3, r3
 80094d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80094d8:	4613      	mov	r3, r2
 80094da:	eb42 0303 	adc.w	r3, r2, r3
 80094de:	657b      	str	r3, [r7, #84]	@ 0x54
 80094e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80094e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80094e8:	f7f7 fbd6 	bl	8000c98 <__aeabi_uldivmod>
 80094ec:	4602      	mov	r2, r0
 80094ee:	460b      	mov	r3, r1
 80094f0:	4b61      	ldr	r3, [pc, #388]	@ (8009678 <UART_SetConfig+0x2d4>)
 80094f2:	fba3 2302 	umull	r2, r3, r3, r2
 80094f6:	095b      	lsrs	r3, r3, #5
 80094f8:	011c      	lsls	r4, r3, #4
 80094fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80094fe:	2200      	movs	r2, #0
 8009500:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009504:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009508:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800950c:	4642      	mov	r2, r8
 800950e:	464b      	mov	r3, r9
 8009510:	1891      	adds	r1, r2, r2
 8009512:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009514:	415b      	adcs	r3, r3
 8009516:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009518:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800951c:	4641      	mov	r1, r8
 800951e:	eb12 0a01 	adds.w	sl, r2, r1
 8009522:	4649      	mov	r1, r9
 8009524:	eb43 0b01 	adc.w	fp, r3, r1
 8009528:	f04f 0200 	mov.w	r2, #0
 800952c:	f04f 0300 	mov.w	r3, #0
 8009530:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009534:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009538:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800953c:	4692      	mov	sl, r2
 800953e:	469b      	mov	fp, r3
 8009540:	4643      	mov	r3, r8
 8009542:	eb1a 0303 	adds.w	r3, sl, r3
 8009546:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800954a:	464b      	mov	r3, r9
 800954c:	eb4b 0303 	adc.w	r3, fp, r3
 8009550:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009560:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009564:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009568:	460b      	mov	r3, r1
 800956a:	18db      	adds	r3, r3, r3
 800956c:	643b      	str	r3, [r7, #64]	@ 0x40
 800956e:	4613      	mov	r3, r2
 8009570:	eb42 0303 	adc.w	r3, r2, r3
 8009574:	647b      	str	r3, [r7, #68]	@ 0x44
 8009576:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800957a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800957e:	f7f7 fb8b 	bl	8000c98 <__aeabi_uldivmod>
 8009582:	4602      	mov	r2, r0
 8009584:	460b      	mov	r3, r1
 8009586:	4611      	mov	r1, r2
 8009588:	4b3b      	ldr	r3, [pc, #236]	@ (8009678 <UART_SetConfig+0x2d4>)
 800958a:	fba3 2301 	umull	r2, r3, r3, r1
 800958e:	095b      	lsrs	r3, r3, #5
 8009590:	2264      	movs	r2, #100	@ 0x64
 8009592:	fb02 f303 	mul.w	r3, r2, r3
 8009596:	1acb      	subs	r3, r1, r3
 8009598:	00db      	lsls	r3, r3, #3
 800959a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800959e:	4b36      	ldr	r3, [pc, #216]	@ (8009678 <UART_SetConfig+0x2d4>)
 80095a0:	fba3 2302 	umull	r2, r3, r3, r2
 80095a4:	095b      	lsrs	r3, r3, #5
 80095a6:	005b      	lsls	r3, r3, #1
 80095a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80095ac:	441c      	add	r4, r3
 80095ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80095b2:	2200      	movs	r2, #0
 80095b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80095b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80095bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80095c0:	4642      	mov	r2, r8
 80095c2:	464b      	mov	r3, r9
 80095c4:	1891      	adds	r1, r2, r2
 80095c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80095c8:	415b      	adcs	r3, r3
 80095ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80095d0:	4641      	mov	r1, r8
 80095d2:	1851      	adds	r1, r2, r1
 80095d4:	6339      	str	r1, [r7, #48]	@ 0x30
 80095d6:	4649      	mov	r1, r9
 80095d8:	414b      	adcs	r3, r1
 80095da:	637b      	str	r3, [r7, #52]	@ 0x34
 80095dc:	f04f 0200 	mov.w	r2, #0
 80095e0:	f04f 0300 	mov.w	r3, #0
 80095e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80095e8:	4659      	mov	r1, fp
 80095ea:	00cb      	lsls	r3, r1, #3
 80095ec:	4651      	mov	r1, sl
 80095ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095f2:	4651      	mov	r1, sl
 80095f4:	00ca      	lsls	r2, r1, #3
 80095f6:	4610      	mov	r0, r2
 80095f8:	4619      	mov	r1, r3
 80095fa:	4603      	mov	r3, r0
 80095fc:	4642      	mov	r2, r8
 80095fe:	189b      	adds	r3, r3, r2
 8009600:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009604:	464b      	mov	r3, r9
 8009606:	460a      	mov	r2, r1
 8009608:	eb42 0303 	adc.w	r3, r2, r3
 800960c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	2200      	movs	r2, #0
 8009618:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800961c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009620:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009624:	460b      	mov	r3, r1
 8009626:	18db      	adds	r3, r3, r3
 8009628:	62bb      	str	r3, [r7, #40]	@ 0x28
 800962a:	4613      	mov	r3, r2
 800962c:	eb42 0303 	adc.w	r3, r2, r3
 8009630:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009632:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009636:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800963a:	f7f7 fb2d 	bl	8000c98 <__aeabi_uldivmod>
 800963e:	4602      	mov	r2, r0
 8009640:	460b      	mov	r3, r1
 8009642:	4b0d      	ldr	r3, [pc, #52]	@ (8009678 <UART_SetConfig+0x2d4>)
 8009644:	fba3 1302 	umull	r1, r3, r3, r2
 8009648:	095b      	lsrs	r3, r3, #5
 800964a:	2164      	movs	r1, #100	@ 0x64
 800964c:	fb01 f303 	mul.w	r3, r1, r3
 8009650:	1ad3      	subs	r3, r2, r3
 8009652:	00db      	lsls	r3, r3, #3
 8009654:	3332      	adds	r3, #50	@ 0x32
 8009656:	4a08      	ldr	r2, [pc, #32]	@ (8009678 <UART_SetConfig+0x2d4>)
 8009658:	fba2 2303 	umull	r2, r3, r2, r3
 800965c:	095b      	lsrs	r3, r3, #5
 800965e:	f003 0207 	and.w	r2, r3, #7
 8009662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4422      	add	r2, r4
 800966a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800966c:	e106      	b.n	800987c <UART_SetConfig+0x4d8>
 800966e:	bf00      	nop
 8009670:	40011000 	.word	0x40011000
 8009674:	40011400 	.word	0x40011400
 8009678:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800967c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009680:	2200      	movs	r2, #0
 8009682:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009686:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800968a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800968e:	4642      	mov	r2, r8
 8009690:	464b      	mov	r3, r9
 8009692:	1891      	adds	r1, r2, r2
 8009694:	6239      	str	r1, [r7, #32]
 8009696:	415b      	adcs	r3, r3
 8009698:	627b      	str	r3, [r7, #36]	@ 0x24
 800969a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800969e:	4641      	mov	r1, r8
 80096a0:	1854      	adds	r4, r2, r1
 80096a2:	4649      	mov	r1, r9
 80096a4:	eb43 0501 	adc.w	r5, r3, r1
 80096a8:	f04f 0200 	mov.w	r2, #0
 80096ac:	f04f 0300 	mov.w	r3, #0
 80096b0:	00eb      	lsls	r3, r5, #3
 80096b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80096b6:	00e2      	lsls	r2, r4, #3
 80096b8:	4614      	mov	r4, r2
 80096ba:	461d      	mov	r5, r3
 80096bc:	4643      	mov	r3, r8
 80096be:	18e3      	adds	r3, r4, r3
 80096c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80096c4:	464b      	mov	r3, r9
 80096c6:	eb45 0303 	adc.w	r3, r5, r3
 80096ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80096ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80096da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80096de:	f04f 0200 	mov.w	r2, #0
 80096e2:	f04f 0300 	mov.w	r3, #0
 80096e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80096ea:	4629      	mov	r1, r5
 80096ec:	008b      	lsls	r3, r1, #2
 80096ee:	4621      	mov	r1, r4
 80096f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80096f4:	4621      	mov	r1, r4
 80096f6:	008a      	lsls	r2, r1, #2
 80096f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80096fc:	f7f7 facc 	bl	8000c98 <__aeabi_uldivmod>
 8009700:	4602      	mov	r2, r0
 8009702:	460b      	mov	r3, r1
 8009704:	4b60      	ldr	r3, [pc, #384]	@ (8009888 <UART_SetConfig+0x4e4>)
 8009706:	fba3 2302 	umull	r2, r3, r3, r2
 800970a:	095b      	lsrs	r3, r3, #5
 800970c:	011c      	lsls	r4, r3, #4
 800970e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009712:	2200      	movs	r2, #0
 8009714:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009718:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800971c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009720:	4642      	mov	r2, r8
 8009722:	464b      	mov	r3, r9
 8009724:	1891      	adds	r1, r2, r2
 8009726:	61b9      	str	r1, [r7, #24]
 8009728:	415b      	adcs	r3, r3
 800972a:	61fb      	str	r3, [r7, #28]
 800972c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009730:	4641      	mov	r1, r8
 8009732:	1851      	adds	r1, r2, r1
 8009734:	6139      	str	r1, [r7, #16]
 8009736:	4649      	mov	r1, r9
 8009738:	414b      	adcs	r3, r1
 800973a:	617b      	str	r3, [r7, #20]
 800973c:	f04f 0200 	mov.w	r2, #0
 8009740:	f04f 0300 	mov.w	r3, #0
 8009744:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009748:	4659      	mov	r1, fp
 800974a:	00cb      	lsls	r3, r1, #3
 800974c:	4651      	mov	r1, sl
 800974e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009752:	4651      	mov	r1, sl
 8009754:	00ca      	lsls	r2, r1, #3
 8009756:	4610      	mov	r0, r2
 8009758:	4619      	mov	r1, r3
 800975a:	4603      	mov	r3, r0
 800975c:	4642      	mov	r2, r8
 800975e:	189b      	adds	r3, r3, r2
 8009760:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009764:	464b      	mov	r3, r9
 8009766:	460a      	mov	r2, r1
 8009768:	eb42 0303 	adc.w	r3, r2, r3
 800976c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	67bb      	str	r3, [r7, #120]	@ 0x78
 800977a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800977c:	f04f 0200 	mov.w	r2, #0
 8009780:	f04f 0300 	mov.w	r3, #0
 8009784:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009788:	4649      	mov	r1, r9
 800978a:	008b      	lsls	r3, r1, #2
 800978c:	4641      	mov	r1, r8
 800978e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009792:	4641      	mov	r1, r8
 8009794:	008a      	lsls	r2, r1, #2
 8009796:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800979a:	f7f7 fa7d 	bl	8000c98 <__aeabi_uldivmod>
 800979e:	4602      	mov	r2, r0
 80097a0:	460b      	mov	r3, r1
 80097a2:	4611      	mov	r1, r2
 80097a4:	4b38      	ldr	r3, [pc, #224]	@ (8009888 <UART_SetConfig+0x4e4>)
 80097a6:	fba3 2301 	umull	r2, r3, r3, r1
 80097aa:	095b      	lsrs	r3, r3, #5
 80097ac:	2264      	movs	r2, #100	@ 0x64
 80097ae:	fb02 f303 	mul.w	r3, r2, r3
 80097b2:	1acb      	subs	r3, r1, r3
 80097b4:	011b      	lsls	r3, r3, #4
 80097b6:	3332      	adds	r3, #50	@ 0x32
 80097b8:	4a33      	ldr	r2, [pc, #204]	@ (8009888 <UART_SetConfig+0x4e4>)
 80097ba:	fba2 2303 	umull	r2, r3, r2, r3
 80097be:	095b      	lsrs	r3, r3, #5
 80097c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80097c4:	441c      	add	r4, r3
 80097c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097ca:	2200      	movs	r2, #0
 80097cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80097ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80097d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80097d4:	4642      	mov	r2, r8
 80097d6:	464b      	mov	r3, r9
 80097d8:	1891      	adds	r1, r2, r2
 80097da:	60b9      	str	r1, [r7, #8]
 80097dc:	415b      	adcs	r3, r3
 80097de:	60fb      	str	r3, [r7, #12]
 80097e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80097e4:	4641      	mov	r1, r8
 80097e6:	1851      	adds	r1, r2, r1
 80097e8:	6039      	str	r1, [r7, #0]
 80097ea:	4649      	mov	r1, r9
 80097ec:	414b      	adcs	r3, r1
 80097ee:	607b      	str	r3, [r7, #4]
 80097f0:	f04f 0200 	mov.w	r2, #0
 80097f4:	f04f 0300 	mov.w	r3, #0
 80097f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80097fc:	4659      	mov	r1, fp
 80097fe:	00cb      	lsls	r3, r1, #3
 8009800:	4651      	mov	r1, sl
 8009802:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009806:	4651      	mov	r1, sl
 8009808:	00ca      	lsls	r2, r1, #3
 800980a:	4610      	mov	r0, r2
 800980c:	4619      	mov	r1, r3
 800980e:	4603      	mov	r3, r0
 8009810:	4642      	mov	r2, r8
 8009812:	189b      	adds	r3, r3, r2
 8009814:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009816:	464b      	mov	r3, r9
 8009818:	460a      	mov	r2, r1
 800981a:	eb42 0303 	adc.w	r3, r2, r3
 800981e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	663b      	str	r3, [r7, #96]	@ 0x60
 800982a:	667a      	str	r2, [r7, #100]	@ 0x64
 800982c:	f04f 0200 	mov.w	r2, #0
 8009830:	f04f 0300 	mov.w	r3, #0
 8009834:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009838:	4649      	mov	r1, r9
 800983a:	008b      	lsls	r3, r1, #2
 800983c:	4641      	mov	r1, r8
 800983e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009842:	4641      	mov	r1, r8
 8009844:	008a      	lsls	r2, r1, #2
 8009846:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800984a:	f7f7 fa25 	bl	8000c98 <__aeabi_uldivmod>
 800984e:	4602      	mov	r2, r0
 8009850:	460b      	mov	r3, r1
 8009852:	4b0d      	ldr	r3, [pc, #52]	@ (8009888 <UART_SetConfig+0x4e4>)
 8009854:	fba3 1302 	umull	r1, r3, r3, r2
 8009858:	095b      	lsrs	r3, r3, #5
 800985a:	2164      	movs	r1, #100	@ 0x64
 800985c:	fb01 f303 	mul.w	r3, r1, r3
 8009860:	1ad3      	subs	r3, r2, r3
 8009862:	011b      	lsls	r3, r3, #4
 8009864:	3332      	adds	r3, #50	@ 0x32
 8009866:	4a08      	ldr	r2, [pc, #32]	@ (8009888 <UART_SetConfig+0x4e4>)
 8009868:	fba2 2303 	umull	r2, r3, r2, r3
 800986c:	095b      	lsrs	r3, r3, #5
 800986e:	f003 020f 	and.w	r2, r3, #15
 8009872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4422      	add	r2, r4
 800987a:	609a      	str	r2, [r3, #8]
}
 800987c:	bf00      	nop
 800987e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009882:	46bd      	mov	sp, r7
 8009884:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009888:	51eb851f 	.word	0x51eb851f

0800988c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800988c:	b084      	sub	sp, #16
 800988e:	b580      	push	{r7, lr}
 8009890:	b084      	sub	sp, #16
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
 8009896:	f107 001c 	add.w	r0, r7, #28
 800989a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800989e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d122      	bne.n	80098ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098a8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	68db      	ldr	r3, [r3, #12]
 80098b4:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80098b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80098cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d105      	bne.n	80098de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f001 fbee 	bl	800b0c0 <USB_CoreReset>
 80098e4:	4603      	mov	r3, r0
 80098e6:	73fb      	strb	r3, [r7, #15]
 80098e8:	e01a      	b.n	8009920 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	68db      	ldr	r3, [r3, #12]
 80098ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f001 fbe2 	bl	800b0c0 <USB_CoreReset>
 80098fc:	4603      	mov	r3, r0
 80098fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009900:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009902:	2b00      	cmp	r3, #0
 8009904:	d106      	bne.n	8009914 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800990a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	639a      	str	r2, [r3, #56]	@ 0x38
 8009912:	e005      	b.n	8009920 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009918:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009922:	2b01      	cmp	r3, #1
 8009924:	d10b      	bne.n	800993e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	f043 0206 	orr.w	r2, r3, #6
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	f043 0220 	orr.w	r2, r3, #32
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800993e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009940:	4618      	mov	r0, r3
 8009942:	3710      	adds	r7, #16
 8009944:	46bd      	mov	sp, r7
 8009946:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800994a:	b004      	add	sp, #16
 800994c:	4770      	bx	lr
	...

08009950 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009950:	b480      	push	{r7}
 8009952:	b087      	sub	sp, #28
 8009954:	af00      	add	r7, sp, #0
 8009956:	60f8      	str	r0, [r7, #12]
 8009958:	60b9      	str	r1, [r7, #8]
 800995a:	4613      	mov	r3, r2
 800995c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800995e:	79fb      	ldrb	r3, [r7, #7]
 8009960:	2b02      	cmp	r3, #2
 8009962:	d165      	bne.n	8009a30 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	4a41      	ldr	r2, [pc, #260]	@ (8009a6c <USB_SetTurnaroundTime+0x11c>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d906      	bls.n	800997a <USB_SetTurnaroundTime+0x2a>
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	4a40      	ldr	r2, [pc, #256]	@ (8009a70 <USB_SetTurnaroundTime+0x120>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d202      	bcs.n	800997a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009974:	230f      	movs	r3, #15
 8009976:	617b      	str	r3, [r7, #20]
 8009978:	e062      	b.n	8009a40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	4a3c      	ldr	r2, [pc, #240]	@ (8009a70 <USB_SetTurnaroundTime+0x120>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d306      	bcc.n	8009990 <USB_SetTurnaroundTime+0x40>
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	4a3b      	ldr	r2, [pc, #236]	@ (8009a74 <USB_SetTurnaroundTime+0x124>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d202      	bcs.n	8009990 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800998a:	230e      	movs	r3, #14
 800998c:	617b      	str	r3, [r7, #20]
 800998e:	e057      	b.n	8009a40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	4a38      	ldr	r2, [pc, #224]	@ (8009a74 <USB_SetTurnaroundTime+0x124>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d306      	bcc.n	80099a6 <USB_SetTurnaroundTime+0x56>
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	4a37      	ldr	r2, [pc, #220]	@ (8009a78 <USB_SetTurnaroundTime+0x128>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d202      	bcs.n	80099a6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80099a0:	230d      	movs	r3, #13
 80099a2:	617b      	str	r3, [r7, #20]
 80099a4:	e04c      	b.n	8009a40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	4a33      	ldr	r2, [pc, #204]	@ (8009a78 <USB_SetTurnaroundTime+0x128>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d306      	bcc.n	80099bc <USB_SetTurnaroundTime+0x6c>
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	4a32      	ldr	r2, [pc, #200]	@ (8009a7c <USB_SetTurnaroundTime+0x12c>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d802      	bhi.n	80099bc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80099b6:	230c      	movs	r3, #12
 80099b8:	617b      	str	r3, [r7, #20]
 80099ba:	e041      	b.n	8009a40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	4a2f      	ldr	r2, [pc, #188]	@ (8009a7c <USB_SetTurnaroundTime+0x12c>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d906      	bls.n	80099d2 <USB_SetTurnaroundTime+0x82>
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	4a2e      	ldr	r2, [pc, #184]	@ (8009a80 <USB_SetTurnaroundTime+0x130>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d802      	bhi.n	80099d2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80099cc:	230b      	movs	r3, #11
 80099ce:	617b      	str	r3, [r7, #20]
 80099d0:	e036      	b.n	8009a40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	4a2a      	ldr	r2, [pc, #168]	@ (8009a80 <USB_SetTurnaroundTime+0x130>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d906      	bls.n	80099e8 <USB_SetTurnaroundTime+0x98>
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	4a29      	ldr	r2, [pc, #164]	@ (8009a84 <USB_SetTurnaroundTime+0x134>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d802      	bhi.n	80099e8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80099e2:	230a      	movs	r3, #10
 80099e4:	617b      	str	r3, [r7, #20]
 80099e6:	e02b      	b.n	8009a40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	4a26      	ldr	r2, [pc, #152]	@ (8009a84 <USB_SetTurnaroundTime+0x134>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d906      	bls.n	80099fe <USB_SetTurnaroundTime+0xae>
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	4a25      	ldr	r2, [pc, #148]	@ (8009a88 <USB_SetTurnaroundTime+0x138>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d202      	bcs.n	80099fe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80099f8:	2309      	movs	r3, #9
 80099fa:	617b      	str	r3, [r7, #20]
 80099fc:	e020      	b.n	8009a40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	4a21      	ldr	r2, [pc, #132]	@ (8009a88 <USB_SetTurnaroundTime+0x138>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d306      	bcc.n	8009a14 <USB_SetTurnaroundTime+0xc4>
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	4a20      	ldr	r2, [pc, #128]	@ (8009a8c <USB_SetTurnaroundTime+0x13c>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d802      	bhi.n	8009a14 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009a0e:	2308      	movs	r3, #8
 8009a10:	617b      	str	r3, [r7, #20]
 8009a12:	e015      	b.n	8009a40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	4a1d      	ldr	r2, [pc, #116]	@ (8009a8c <USB_SetTurnaroundTime+0x13c>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d906      	bls.n	8009a2a <USB_SetTurnaroundTime+0xda>
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	4a1c      	ldr	r2, [pc, #112]	@ (8009a90 <USB_SetTurnaroundTime+0x140>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d202      	bcs.n	8009a2a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009a24:	2307      	movs	r3, #7
 8009a26:	617b      	str	r3, [r7, #20]
 8009a28:	e00a      	b.n	8009a40 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009a2a:	2306      	movs	r3, #6
 8009a2c:	617b      	str	r3, [r7, #20]
 8009a2e:	e007      	b.n	8009a40 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009a30:	79fb      	ldrb	r3, [r7, #7]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d102      	bne.n	8009a3c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009a36:	2309      	movs	r3, #9
 8009a38:	617b      	str	r3, [r7, #20]
 8009a3a:	e001      	b.n	8009a40 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009a3c:	2309      	movs	r3, #9
 8009a3e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	68da      	ldr	r2, [r3, #12]
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	029b      	lsls	r3, r3, #10
 8009a54:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009a58:	431a      	orrs	r2, r3
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009a5e:	2300      	movs	r3, #0
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	371c      	adds	r7, #28
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr
 8009a6c:	00d8acbf 	.word	0x00d8acbf
 8009a70:	00e4e1c0 	.word	0x00e4e1c0
 8009a74:	00f42400 	.word	0x00f42400
 8009a78:	01067380 	.word	0x01067380
 8009a7c:	011a499f 	.word	0x011a499f
 8009a80:	01312cff 	.word	0x01312cff
 8009a84:	014ca43f 	.word	0x014ca43f
 8009a88:	016e3600 	.word	0x016e3600
 8009a8c:	01a6ab1f 	.word	0x01a6ab1f
 8009a90:	01e84800 	.word	0x01e84800

08009a94 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	f043 0201 	orr.w	r2, r3, #1
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009aa8:	2300      	movs	r3, #0
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	370c      	adds	r7, #12
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr

08009ab6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ab6:	b480      	push	{r7}
 8009ab8:	b083      	sub	sp, #12
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	f023 0201 	bic.w	r2, r3, #1
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009aca:	2300      	movs	r3, #0
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	370c      	adds	r7, #12
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	68db      	ldr	r3, [r3, #12]
 8009aec:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009af4:	78fb      	ldrb	r3, [r7, #3]
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d115      	bne.n	8009b26 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009b06:	2001      	movs	r0, #1
 8009b08:	f7fa fdf2 	bl	80046f0 <HAL_Delay>
      ms++;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	3301      	adds	r3, #1
 8009b10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f001 fa45 	bl	800afa2 <USB_GetMode>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d01e      	beq.n	8009b5c <USB_SetCurrentMode+0x84>
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2b31      	cmp	r3, #49	@ 0x31
 8009b22:	d9f0      	bls.n	8009b06 <USB_SetCurrentMode+0x2e>
 8009b24:	e01a      	b.n	8009b5c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009b26:	78fb      	ldrb	r3, [r7, #3]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d115      	bne.n	8009b58 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	68db      	ldr	r3, [r3, #12]
 8009b30:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009b38:	2001      	movs	r0, #1
 8009b3a:	f7fa fdd9 	bl	80046f0 <HAL_Delay>
      ms++;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	3301      	adds	r3, #1
 8009b42:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f001 fa2c 	bl	800afa2 <USB_GetMode>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d005      	beq.n	8009b5c <USB_SetCurrentMode+0x84>
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2b31      	cmp	r3, #49	@ 0x31
 8009b54:	d9f0      	bls.n	8009b38 <USB_SetCurrentMode+0x60>
 8009b56:	e001      	b.n	8009b5c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	e005      	b.n	8009b68 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2b32      	cmp	r3, #50	@ 0x32
 8009b60:	d101      	bne.n	8009b66 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009b62:	2301      	movs	r3, #1
 8009b64:	e000      	b.n	8009b68 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009b66:	2300      	movs	r3, #0
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3710      	adds	r7, #16
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009b70:	b084      	sub	sp, #16
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b086      	sub	sp, #24
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
 8009b7a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009b7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009b82:	2300      	movs	r3, #0
 8009b84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	613b      	str	r3, [r7, #16]
 8009b8e:	e009      	b.n	8009ba4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	3340      	adds	r3, #64	@ 0x40
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	4413      	add	r3, r2
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	613b      	str	r3, [r7, #16]
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	2b0e      	cmp	r3, #14
 8009ba8:	d9f2      	bls.n	8009b90 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009baa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d11c      	bne.n	8009bea <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bb6:	685b      	ldr	r3, [r3, #4]
 8009bb8:	68fa      	ldr	r2, [r7, #12]
 8009bba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009bbe:	f043 0302 	orr.w	r3, r3, #2
 8009bc2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bc8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bd4:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009be0:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	639a      	str	r2, [r3, #56]	@ 0x38
 8009be8:	e00b      	b.n	8009c02 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bee:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bfa:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009c08:	461a      	mov	r2, r3
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c14:	4619      	mov	r1, r3
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	680b      	ldr	r3, [r1, #0]
 8009c20:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d10c      	bne.n	8009c42 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d104      	bne.n	8009c38 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009c2e:	2100      	movs	r1, #0
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 f965 	bl	8009f00 <USB_SetDevSpeed>
 8009c36:	e008      	b.n	8009c4a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009c38:	2101      	movs	r1, #1
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 f960 	bl	8009f00 <USB_SetDevSpeed>
 8009c40:	e003      	b.n	8009c4a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009c42:	2103      	movs	r1, #3
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 f95b 	bl	8009f00 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009c4a:	2110      	movs	r1, #16
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 f8f3 	bl	8009e38 <USB_FlushTxFifo>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d001      	beq.n	8009c5c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 f91f 	bl	8009ea0 <USB_FlushRxFifo>
 8009c62:	4603      	mov	r3, r0
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d001      	beq.n	8009c6c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c72:	461a      	mov	r2, r3
 8009c74:	2300      	movs	r3, #0
 8009c76:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c7e:	461a      	mov	r2, r3
 8009c80:	2300      	movs	r3, #0
 8009c82:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c90:	2300      	movs	r3, #0
 8009c92:	613b      	str	r3, [r7, #16]
 8009c94:	e043      	b.n	8009d1e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	015a      	lsls	r2, r3, #5
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	4413      	add	r3, r2
 8009c9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ca8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009cac:	d118      	bne.n	8009ce0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d10a      	bne.n	8009cca <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	015a      	lsls	r2, r3, #5
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	4413      	add	r3, r2
 8009cbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009cc6:	6013      	str	r3, [r2, #0]
 8009cc8:	e013      	b.n	8009cf2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	015a      	lsls	r2, r3, #5
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009cdc:	6013      	str	r3, [r2, #0]
 8009cde:	e008      	b.n	8009cf2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	015a      	lsls	r2, r3, #5
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	4413      	add	r3, r2
 8009ce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cec:	461a      	mov	r2, r3
 8009cee:	2300      	movs	r3, #0
 8009cf0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	015a      	lsls	r2, r3, #5
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	4413      	add	r3, r2
 8009cfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cfe:	461a      	mov	r2, r3
 8009d00:	2300      	movs	r3, #0
 8009d02:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	015a      	lsls	r2, r3, #5
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	4413      	add	r3, r2
 8009d0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d10:	461a      	mov	r2, r3
 8009d12:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009d16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	613b      	str	r3, [r7, #16]
 8009d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d20:	693a      	ldr	r2, [r7, #16]
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d3b7      	bcc.n	8009c96 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d26:	2300      	movs	r3, #0
 8009d28:	613b      	str	r3, [r7, #16]
 8009d2a:	e043      	b.n	8009db4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	015a      	lsls	r2, r3, #5
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	4413      	add	r3, r2
 8009d34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d42:	d118      	bne.n	8009d76 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d10a      	bne.n	8009d60 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	015a      	lsls	r2, r3, #5
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	4413      	add	r3, r2
 8009d52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d56:	461a      	mov	r2, r3
 8009d58:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009d5c:	6013      	str	r3, [r2, #0]
 8009d5e:	e013      	b.n	8009d88 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	015a      	lsls	r2, r3, #5
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	4413      	add	r3, r2
 8009d68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009d72:	6013      	str	r3, [r2, #0]
 8009d74:	e008      	b.n	8009d88 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	015a      	lsls	r2, r3, #5
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	4413      	add	r3, r2
 8009d7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d82:	461a      	mov	r2, r3
 8009d84:	2300      	movs	r3, #0
 8009d86:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	015a      	lsls	r2, r3, #5
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	4413      	add	r3, r2
 8009d90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d94:	461a      	mov	r2, r3
 8009d96:	2300      	movs	r3, #0
 8009d98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	015a      	lsls	r2, r3, #5
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	4413      	add	r3, r2
 8009da2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009da6:	461a      	mov	r2, r3
 8009da8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009dac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	3301      	adds	r3, #1
 8009db2:	613b      	str	r3, [r7, #16]
 8009db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db6:	693a      	ldr	r2, [r7, #16]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d3b7      	bcc.n	8009d2c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dc2:	691b      	ldr	r3, [r3, #16]
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009dca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009dce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009ddc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d105      	bne.n	8009df0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	699b      	ldr	r3, [r3, #24]
 8009de8:	f043 0210 	orr.w	r2, r3, #16
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	699a      	ldr	r2, [r3, #24]
 8009df4:	4b0f      	ldr	r3, [pc, #60]	@ (8009e34 <USB_DevInit+0x2c4>)
 8009df6:	4313      	orrs	r3, r2
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009dfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d005      	beq.n	8009e0e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	699b      	ldr	r3, [r3, #24]
 8009e06:	f043 0208 	orr.w	r2, r3, #8
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009e0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d107      	bne.n	8009e24 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	699b      	ldr	r3, [r3, #24]
 8009e18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009e1c:	f043 0304 	orr.w	r3, r3, #4
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3718      	adds	r7, #24
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e30:	b004      	add	sp, #16
 8009e32:	4770      	bx	lr
 8009e34:	803c3800 	.word	0x803c3800

08009e38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009e42:	2300      	movs	r3, #0
 8009e44:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	3301      	adds	r3, #1
 8009e4a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	4a13      	ldr	r2, [pc, #76]	@ (8009e9c <USB_FlushTxFifo+0x64>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d901      	bls.n	8009e58 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009e54:	2303      	movs	r3, #3
 8009e56:	e01b      	b.n	8009e90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	691b      	ldr	r3, [r3, #16]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	daf2      	bge.n	8009e46 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009e60:	2300      	movs	r3, #0
 8009e62:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	019b      	lsls	r3, r3, #6
 8009e68:	f043 0220 	orr.w	r2, r3, #32
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	3301      	adds	r3, #1
 8009e74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	4a08      	ldr	r2, [pc, #32]	@ (8009e9c <USB_FlushTxFifo+0x64>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d901      	bls.n	8009e82 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009e7e:	2303      	movs	r3, #3
 8009e80:	e006      	b.n	8009e90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	691b      	ldr	r3, [r3, #16]
 8009e86:	f003 0320 	and.w	r3, r3, #32
 8009e8a:	2b20      	cmp	r3, #32
 8009e8c:	d0f0      	beq.n	8009e70 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009e8e:	2300      	movs	r3, #0
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3714      	adds	r7, #20
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr
 8009e9c:	00030d40 	.word	0x00030d40

08009ea0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	3301      	adds	r3, #1
 8009eb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	4a11      	ldr	r2, [pc, #68]	@ (8009efc <USB_FlushRxFifo+0x5c>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d901      	bls.n	8009ebe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009eba:	2303      	movs	r3, #3
 8009ebc:	e018      	b.n	8009ef0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	691b      	ldr	r3, [r3, #16]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	daf2      	bge.n	8009eac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2210      	movs	r2, #16
 8009ece:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	4a08      	ldr	r2, [pc, #32]	@ (8009efc <USB_FlushRxFifo+0x5c>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d901      	bls.n	8009ee2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009ede:	2303      	movs	r3, #3
 8009ee0:	e006      	b.n	8009ef0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	691b      	ldr	r3, [r3, #16]
 8009ee6:	f003 0310 	and.w	r3, r3, #16
 8009eea:	2b10      	cmp	r3, #16
 8009eec:	d0f0      	beq.n	8009ed0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3714      	adds	r7, #20
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr
 8009efc:	00030d40 	.word	0x00030d40

08009f00 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b085      	sub	sp, #20
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	460b      	mov	r3, r1
 8009f0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	78fb      	ldrb	r3, [r7, #3]
 8009f1a:	68f9      	ldr	r1, [r7, #12]
 8009f1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f20:	4313      	orrs	r3, r2
 8009f22:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009f24:	2300      	movs	r3, #0
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3714      	adds	r7, #20
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr

08009f32 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009f32:	b480      	push	{r7}
 8009f34:	b087      	sub	sp, #28
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	f003 0306 	and.w	r3, r3, #6
 8009f4a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d102      	bne.n	8009f58 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009f52:	2300      	movs	r3, #0
 8009f54:	75fb      	strb	r3, [r7, #23]
 8009f56:	e00a      	b.n	8009f6e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2b02      	cmp	r3, #2
 8009f5c:	d002      	beq.n	8009f64 <USB_GetDevSpeed+0x32>
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2b06      	cmp	r3, #6
 8009f62:	d102      	bne.n	8009f6a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009f64:	2302      	movs	r3, #2
 8009f66:	75fb      	strb	r3, [r7, #23]
 8009f68:	e001      	b.n	8009f6e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009f6a:	230f      	movs	r3, #15
 8009f6c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	371c      	adds	r7, #28
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr

08009f7c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b085      	sub	sp, #20
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	785b      	ldrb	r3, [r3, #1]
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d13a      	bne.n	800a00e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f9e:	69da      	ldr	r2, [r3, #28]
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	f003 030f 	and.w	r3, r3, #15
 8009fa8:	2101      	movs	r1, #1
 8009faa:	fa01 f303 	lsl.w	r3, r1, r3
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	68f9      	ldr	r1, [r7, #12]
 8009fb2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	015a      	lsls	r2, r3, #5
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d155      	bne.n	800a07c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	015a      	lsls	r2, r3, #5
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	791b      	ldrb	r3, [r3, #4]
 8009fea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009fec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	059b      	lsls	r3, r3, #22
 8009ff2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	68ba      	ldr	r2, [r7, #8]
 8009ff8:	0151      	lsls	r1, r2, #5
 8009ffa:	68fa      	ldr	r2, [r7, #12]
 8009ffc:	440a      	add	r2, r1
 8009ffe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a002:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a006:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a00a:	6013      	str	r3, [r2, #0]
 800a00c:	e036      	b.n	800a07c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a014:	69da      	ldr	r2, [r3, #28]
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	f003 030f 	and.w	r3, r3, #15
 800a01e:	2101      	movs	r1, #1
 800a020:	fa01 f303 	lsl.w	r3, r1, r3
 800a024:	041b      	lsls	r3, r3, #16
 800a026:	68f9      	ldr	r1, [r7, #12]
 800a028:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a02c:	4313      	orrs	r3, r2
 800a02e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	015a      	lsls	r2, r3, #5
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	4413      	add	r3, r2
 800a038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a042:	2b00      	cmp	r3, #0
 800a044:	d11a      	bne.n	800a07c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	015a      	lsls	r2, r3, #5
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	4413      	add	r3, r2
 800a04e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	791b      	ldrb	r3, [r3, #4]
 800a060:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a062:	430b      	orrs	r3, r1
 800a064:	4313      	orrs	r3, r2
 800a066:	68ba      	ldr	r2, [r7, #8]
 800a068:	0151      	lsls	r1, r2, #5
 800a06a:	68fa      	ldr	r2, [r7, #12]
 800a06c:	440a      	add	r2, r1
 800a06e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a072:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a076:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a07a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3714      	adds	r7, #20
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr
	...

0800a08c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b085      	sub	sp, #20
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	785b      	ldrb	r3, [r3, #1]
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d161      	bne.n	800a16c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	015a      	lsls	r2, r3, #5
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	4413      	add	r3, r2
 800a0b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a0ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a0be:	d11f      	bne.n	800a100 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	015a      	lsls	r2, r3, #5
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	68ba      	ldr	r2, [r7, #8]
 800a0d0:	0151      	lsls	r1, r2, #5
 800a0d2:	68fa      	ldr	r2, [r7, #12]
 800a0d4:	440a      	add	r2, r1
 800a0d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0da:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a0de:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	015a      	lsls	r2, r3, #5
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	4413      	add	r3, r2
 800a0e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	68ba      	ldr	r2, [r7, #8]
 800a0f0:	0151      	lsls	r1, r2, #5
 800a0f2:	68fa      	ldr	r2, [r7, #12]
 800a0f4:	440a      	add	r2, r1
 800a0f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a0fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a106:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	f003 030f 	and.w	r3, r3, #15
 800a110:	2101      	movs	r1, #1
 800a112:	fa01 f303 	lsl.w	r3, r1, r3
 800a116:	b29b      	uxth	r3, r3
 800a118:	43db      	mvns	r3, r3
 800a11a:	68f9      	ldr	r1, [r7, #12]
 800a11c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a120:	4013      	ands	r3, r2
 800a122:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a12a:	69da      	ldr	r2, [r3, #28]
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	f003 030f 	and.w	r3, r3, #15
 800a134:	2101      	movs	r1, #1
 800a136:	fa01 f303 	lsl.w	r3, r1, r3
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	43db      	mvns	r3, r3
 800a13e:	68f9      	ldr	r1, [r7, #12]
 800a140:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a144:	4013      	ands	r3, r2
 800a146:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	015a      	lsls	r2, r3, #5
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	4413      	add	r3, r2
 800a150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	0159      	lsls	r1, r3, #5
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	440b      	add	r3, r1
 800a15e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a162:	4619      	mov	r1, r3
 800a164:	4b35      	ldr	r3, [pc, #212]	@ (800a23c <USB_DeactivateEndpoint+0x1b0>)
 800a166:	4013      	ands	r3, r2
 800a168:	600b      	str	r3, [r1, #0]
 800a16a:	e060      	b.n	800a22e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	015a      	lsls	r2, r3, #5
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	4413      	add	r3, r2
 800a174:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a17e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a182:	d11f      	bne.n	800a1c4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	015a      	lsls	r2, r3, #5
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	4413      	add	r3, r2
 800a18c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	68ba      	ldr	r2, [r7, #8]
 800a194:	0151      	lsls	r1, r2, #5
 800a196:	68fa      	ldr	r2, [r7, #12]
 800a198:	440a      	add	r2, r1
 800a19a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a19e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a1a2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	015a      	lsls	r2, r3, #5
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	4413      	add	r3, r2
 800a1ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	68ba      	ldr	r2, [r7, #8]
 800a1b4:	0151      	lsls	r1, r2, #5
 800a1b6:	68fa      	ldr	r2, [r7, #12]
 800a1b8:	440a      	add	r2, r1
 800a1ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a1c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	f003 030f 	and.w	r3, r3, #15
 800a1d4:	2101      	movs	r1, #1
 800a1d6:	fa01 f303 	lsl.w	r3, r1, r3
 800a1da:	041b      	lsls	r3, r3, #16
 800a1dc:	43db      	mvns	r3, r3
 800a1de:	68f9      	ldr	r1, [r7, #12]
 800a1e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a1e4:	4013      	ands	r3, r2
 800a1e6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1ee:	69da      	ldr	r2, [r3, #28]
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	f003 030f 	and.w	r3, r3, #15
 800a1f8:	2101      	movs	r1, #1
 800a1fa:	fa01 f303 	lsl.w	r3, r1, r3
 800a1fe:	041b      	lsls	r3, r3, #16
 800a200:	43db      	mvns	r3, r3
 800a202:	68f9      	ldr	r1, [r7, #12]
 800a204:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a208:	4013      	ands	r3, r2
 800a20a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	015a      	lsls	r2, r3, #5
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	4413      	add	r3, r2
 800a214:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	0159      	lsls	r1, r3, #5
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	440b      	add	r3, r1
 800a222:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a226:	4619      	mov	r1, r3
 800a228:	4b05      	ldr	r3, [pc, #20]	@ (800a240 <USB_DeactivateEndpoint+0x1b4>)
 800a22a:	4013      	ands	r3, r2
 800a22c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a22e:	2300      	movs	r3, #0
}
 800a230:	4618      	mov	r0, r3
 800a232:	3714      	adds	r7, #20
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr
 800a23c:	ec337800 	.word	0xec337800
 800a240:	eff37800 	.word	0xeff37800

0800a244 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b08a      	sub	sp, #40	@ 0x28
 800a248:	af02      	add	r7, sp, #8
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	60b9      	str	r1, [r7, #8]
 800a24e:	4613      	mov	r3, r2
 800a250:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	785b      	ldrb	r3, [r3, #1]
 800a260:	2b01      	cmp	r3, #1
 800a262:	f040 815c 	bne.w	800a51e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	699b      	ldr	r3, [r3, #24]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d132      	bne.n	800a2d4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a26e:	69bb      	ldr	r3, [r7, #24]
 800a270:	015a      	lsls	r2, r3, #5
 800a272:	69fb      	ldr	r3, [r7, #28]
 800a274:	4413      	add	r3, r2
 800a276:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a27a:	691b      	ldr	r3, [r3, #16]
 800a27c:	69ba      	ldr	r2, [r7, #24]
 800a27e:	0151      	lsls	r1, r2, #5
 800a280:	69fa      	ldr	r2, [r7, #28]
 800a282:	440a      	add	r2, r1
 800a284:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a288:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a28c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a290:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a292:	69bb      	ldr	r3, [r7, #24]
 800a294:	015a      	lsls	r2, r3, #5
 800a296:	69fb      	ldr	r3, [r7, #28]
 800a298:	4413      	add	r3, r2
 800a29a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a29e:	691b      	ldr	r3, [r3, #16]
 800a2a0:	69ba      	ldr	r2, [r7, #24]
 800a2a2:	0151      	lsls	r1, r2, #5
 800a2a4:	69fa      	ldr	r2, [r7, #28]
 800a2a6:	440a      	add	r2, r1
 800a2a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a2b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a2b2:	69bb      	ldr	r3, [r7, #24]
 800a2b4:	015a      	lsls	r2, r3, #5
 800a2b6:	69fb      	ldr	r3, [r7, #28]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2be:	691b      	ldr	r3, [r3, #16]
 800a2c0:	69ba      	ldr	r2, [r7, #24]
 800a2c2:	0151      	lsls	r1, r2, #5
 800a2c4:	69fa      	ldr	r2, [r7, #28]
 800a2c6:	440a      	add	r2, r1
 800a2c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2cc:	0cdb      	lsrs	r3, r3, #19
 800a2ce:	04db      	lsls	r3, r3, #19
 800a2d0:	6113      	str	r3, [r2, #16]
 800a2d2:	e074      	b.n	800a3be <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a2d4:	69bb      	ldr	r3, [r7, #24]
 800a2d6:	015a      	lsls	r2, r3, #5
 800a2d8:	69fb      	ldr	r3, [r7, #28]
 800a2da:	4413      	add	r3, r2
 800a2dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2e0:	691b      	ldr	r3, [r3, #16]
 800a2e2:	69ba      	ldr	r2, [r7, #24]
 800a2e4:	0151      	lsls	r1, r2, #5
 800a2e6:	69fa      	ldr	r2, [r7, #28]
 800a2e8:	440a      	add	r2, r1
 800a2ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2ee:	0cdb      	lsrs	r3, r3, #19
 800a2f0:	04db      	lsls	r3, r3, #19
 800a2f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a2f4:	69bb      	ldr	r3, [r7, #24]
 800a2f6:	015a      	lsls	r2, r3, #5
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a300:	691b      	ldr	r3, [r3, #16]
 800a302:	69ba      	ldr	r2, [r7, #24]
 800a304:	0151      	lsls	r1, r2, #5
 800a306:	69fa      	ldr	r2, [r7, #28]
 800a308:	440a      	add	r2, r1
 800a30a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a30e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a312:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a316:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a318:	69bb      	ldr	r3, [r7, #24]
 800a31a:	015a      	lsls	r2, r3, #5
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	4413      	add	r3, r2
 800a320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a324:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	6999      	ldr	r1, [r3, #24]
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	68db      	ldr	r3, [r3, #12]
 800a32e:	440b      	add	r3, r1
 800a330:	1e59      	subs	r1, r3, #1
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	fbb1 f3f3 	udiv	r3, r1, r3
 800a33a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a33c:	4b9d      	ldr	r3, [pc, #628]	@ (800a5b4 <USB_EPStartXfer+0x370>)
 800a33e:	400b      	ands	r3, r1
 800a340:	69b9      	ldr	r1, [r7, #24]
 800a342:	0148      	lsls	r0, r1, #5
 800a344:	69f9      	ldr	r1, [r7, #28]
 800a346:	4401      	add	r1, r0
 800a348:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a34c:	4313      	orrs	r3, r2
 800a34e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	015a      	lsls	r2, r3, #5
 800a354:	69fb      	ldr	r3, [r7, #28]
 800a356:	4413      	add	r3, r2
 800a358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a35c:	691a      	ldr	r2, [r3, #16]
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	699b      	ldr	r3, [r3, #24]
 800a362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a366:	69b9      	ldr	r1, [r7, #24]
 800a368:	0148      	lsls	r0, r1, #5
 800a36a:	69f9      	ldr	r1, [r7, #28]
 800a36c:	4401      	add	r1, r0
 800a36e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a372:	4313      	orrs	r3, r2
 800a374:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	791b      	ldrb	r3, [r3, #4]
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d11f      	bne.n	800a3be <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a37e:	69bb      	ldr	r3, [r7, #24]
 800a380:	015a      	lsls	r2, r3, #5
 800a382:	69fb      	ldr	r3, [r7, #28]
 800a384:	4413      	add	r3, r2
 800a386:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a38a:	691b      	ldr	r3, [r3, #16]
 800a38c:	69ba      	ldr	r2, [r7, #24]
 800a38e:	0151      	lsls	r1, r2, #5
 800a390:	69fa      	ldr	r2, [r7, #28]
 800a392:	440a      	add	r2, r1
 800a394:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a398:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a39c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a39e:	69bb      	ldr	r3, [r7, #24]
 800a3a0:	015a      	lsls	r2, r3, #5
 800a3a2:	69fb      	ldr	r3, [r7, #28]
 800a3a4:	4413      	add	r3, r2
 800a3a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3aa:	691b      	ldr	r3, [r3, #16]
 800a3ac:	69ba      	ldr	r2, [r7, #24]
 800a3ae:	0151      	lsls	r1, r2, #5
 800a3b0:	69fa      	ldr	r2, [r7, #28]
 800a3b2:	440a      	add	r2, r1
 800a3b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a3bc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a3be:	79fb      	ldrb	r3, [r7, #7]
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	d14b      	bne.n	800a45c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	695b      	ldr	r3, [r3, #20]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d009      	beq.n	800a3e0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a3cc:	69bb      	ldr	r3, [r7, #24]
 800a3ce:	015a      	lsls	r2, r3, #5
 800a3d0:	69fb      	ldr	r3, [r7, #28]
 800a3d2:	4413      	add	r3, r2
 800a3d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3d8:	461a      	mov	r2, r3
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	695b      	ldr	r3, [r3, #20]
 800a3de:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	791b      	ldrb	r3, [r3, #4]
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d128      	bne.n	800a43a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a3e8:	69fb      	ldr	r3, [r7, #28]
 800a3ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d110      	bne.n	800a41a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a3f8:	69bb      	ldr	r3, [r7, #24]
 800a3fa:	015a      	lsls	r2, r3, #5
 800a3fc:	69fb      	ldr	r3, [r7, #28]
 800a3fe:	4413      	add	r3, r2
 800a400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	69ba      	ldr	r2, [r7, #24]
 800a408:	0151      	lsls	r1, r2, #5
 800a40a:	69fa      	ldr	r2, [r7, #28]
 800a40c:	440a      	add	r2, r1
 800a40e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a412:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a416:	6013      	str	r3, [r2, #0]
 800a418:	e00f      	b.n	800a43a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a41a:	69bb      	ldr	r3, [r7, #24]
 800a41c:	015a      	lsls	r2, r3, #5
 800a41e:	69fb      	ldr	r3, [r7, #28]
 800a420:	4413      	add	r3, r2
 800a422:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	69ba      	ldr	r2, [r7, #24]
 800a42a:	0151      	lsls	r1, r2, #5
 800a42c:	69fa      	ldr	r2, [r7, #28]
 800a42e:	440a      	add	r2, r1
 800a430:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a438:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a43a:	69bb      	ldr	r3, [r7, #24]
 800a43c:	015a      	lsls	r2, r3, #5
 800a43e:	69fb      	ldr	r3, [r7, #28]
 800a440:	4413      	add	r3, r2
 800a442:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	69ba      	ldr	r2, [r7, #24]
 800a44a:	0151      	lsls	r1, r2, #5
 800a44c:	69fa      	ldr	r2, [r7, #28]
 800a44e:	440a      	add	r2, r1
 800a450:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a454:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a458:	6013      	str	r3, [r2, #0]
 800a45a:	e133      	b.n	800a6c4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a45c:	69bb      	ldr	r3, [r7, #24]
 800a45e:	015a      	lsls	r2, r3, #5
 800a460:	69fb      	ldr	r3, [r7, #28]
 800a462:	4413      	add	r3, r2
 800a464:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	69ba      	ldr	r2, [r7, #24]
 800a46c:	0151      	lsls	r1, r2, #5
 800a46e:	69fa      	ldr	r2, [r7, #28]
 800a470:	440a      	add	r2, r1
 800a472:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a476:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a47a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	791b      	ldrb	r3, [r3, #4]
 800a480:	2b01      	cmp	r3, #1
 800a482:	d015      	beq.n	800a4b0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	699b      	ldr	r3, [r3, #24]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f000 811b 	beq.w	800a6c4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a48e:	69fb      	ldr	r3, [r7, #28]
 800a490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a494:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	f003 030f 	and.w	r3, r3, #15
 800a49e:	2101      	movs	r1, #1
 800a4a0:	fa01 f303 	lsl.w	r3, r1, r3
 800a4a4:	69f9      	ldr	r1, [r7, #28]
 800a4a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	634b      	str	r3, [r1, #52]	@ 0x34
 800a4ae:	e109      	b.n	800a6c4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a4b0:	69fb      	ldr	r3, [r7, #28]
 800a4b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d110      	bne.n	800a4e2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a4c0:	69bb      	ldr	r3, [r7, #24]
 800a4c2:	015a      	lsls	r2, r3, #5
 800a4c4:	69fb      	ldr	r3, [r7, #28]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	69ba      	ldr	r2, [r7, #24]
 800a4d0:	0151      	lsls	r1, r2, #5
 800a4d2:	69fa      	ldr	r2, [r7, #28]
 800a4d4:	440a      	add	r2, r1
 800a4d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4da:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a4de:	6013      	str	r3, [r2, #0]
 800a4e0:	e00f      	b.n	800a502 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	015a      	lsls	r2, r3, #5
 800a4e6:	69fb      	ldr	r3, [r7, #28]
 800a4e8:	4413      	add	r3, r2
 800a4ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	69ba      	ldr	r2, [r7, #24]
 800a4f2:	0151      	lsls	r1, r2, #5
 800a4f4:	69fa      	ldr	r2, [r7, #28]
 800a4f6:	440a      	add	r2, r1
 800a4f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a500:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	6919      	ldr	r1, [r3, #16]
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	781a      	ldrb	r2, [r3, #0]
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	699b      	ldr	r3, [r3, #24]
 800a50e:	b298      	uxth	r0, r3
 800a510:	79fb      	ldrb	r3, [r7, #7]
 800a512:	9300      	str	r3, [sp, #0]
 800a514:	4603      	mov	r3, r0
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	f000 fade 	bl	800aad8 <USB_WritePacket>
 800a51c:	e0d2      	b.n	800a6c4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a51e:	69bb      	ldr	r3, [r7, #24]
 800a520:	015a      	lsls	r2, r3, #5
 800a522:	69fb      	ldr	r3, [r7, #28]
 800a524:	4413      	add	r3, r2
 800a526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a52a:	691b      	ldr	r3, [r3, #16]
 800a52c:	69ba      	ldr	r2, [r7, #24]
 800a52e:	0151      	lsls	r1, r2, #5
 800a530:	69fa      	ldr	r2, [r7, #28]
 800a532:	440a      	add	r2, r1
 800a534:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a538:	0cdb      	lsrs	r3, r3, #19
 800a53a:	04db      	lsls	r3, r3, #19
 800a53c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	015a      	lsls	r2, r3, #5
 800a542:	69fb      	ldr	r3, [r7, #28]
 800a544:	4413      	add	r3, r2
 800a546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a54a:	691b      	ldr	r3, [r3, #16]
 800a54c:	69ba      	ldr	r2, [r7, #24]
 800a54e:	0151      	lsls	r1, r2, #5
 800a550:	69fa      	ldr	r2, [r7, #28]
 800a552:	440a      	add	r2, r1
 800a554:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a558:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a55c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a560:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	699b      	ldr	r3, [r3, #24]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d126      	bne.n	800a5b8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	015a      	lsls	r2, r3, #5
 800a56e:	69fb      	ldr	r3, [r7, #28]
 800a570:	4413      	add	r3, r2
 800a572:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a576:	691a      	ldr	r2, [r3, #16]
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	68db      	ldr	r3, [r3, #12]
 800a57c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a580:	69b9      	ldr	r1, [r7, #24]
 800a582:	0148      	lsls	r0, r1, #5
 800a584:	69f9      	ldr	r1, [r7, #28]
 800a586:	4401      	add	r1, r0
 800a588:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a58c:	4313      	orrs	r3, r2
 800a58e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a590:	69bb      	ldr	r3, [r7, #24]
 800a592:	015a      	lsls	r2, r3, #5
 800a594:	69fb      	ldr	r3, [r7, #28]
 800a596:	4413      	add	r3, r2
 800a598:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a59c:	691b      	ldr	r3, [r3, #16]
 800a59e:	69ba      	ldr	r2, [r7, #24]
 800a5a0:	0151      	lsls	r1, r2, #5
 800a5a2:	69fa      	ldr	r2, [r7, #28]
 800a5a4:	440a      	add	r2, r1
 800a5a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a5ae:	6113      	str	r3, [r2, #16]
 800a5b0:	e03a      	b.n	800a628 <USB_EPStartXfer+0x3e4>
 800a5b2:	bf00      	nop
 800a5b4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	699a      	ldr	r2, [r3, #24]
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	4413      	add	r3, r2
 800a5c2:	1e5a      	subs	r2, r3, #1
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	68db      	ldr	r3, [r3, #12]
 800a5c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5cc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	68db      	ldr	r3, [r3, #12]
 800a5d2:	8afa      	ldrh	r2, [r7, #22]
 800a5d4:	fb03 f202 	mul.w	r2, r3, r2
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a5dc:	69bb      	ldr	r3, [r7, #24]
 800a5de:	015a      	lsls	r2, r3, #5
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	4413      	add	r3, r2
 800a5e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5e8:	691a      	ldr	r2, [r3, #16]
 800a5ea:	8afb      	ldrh	r3, [r7, #22]
 800a5ec:	04d9      	lsls	r1, r3, #19
 800a5ee:	4b38      	ldr	r3, [pc, #224]	@ (800a6d0 <USB_EPStartXfer+0x48c>)
 800a5f0:	400b      	ands	r3, r1
 800a5f2:	69b9      	ldr	r1, [r7, #24]
 800a5f4:	0148      	lsls	r0, r1, #5
 800a5f6:	69f9      	ldr	r1, [r7, #28]
 800a5f8:	4401      	add	r1, r0
 800a5fa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a5fe:	4313      	orrs	r3, r2
 800a600:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a602:	69bb      	ldr	r3, [r7, #24]
 800a604:	015a      	lsls	r2, r3, #5
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	4413      	add	r3, r2
 800a60a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a60e:	691a      	ldr	r2, [r3, #16]
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	69db      	ldr	r3, [r3, #28]
 800a614:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a618:	69b9      	ldr	r1, [r7, #24]
 800a61a:	0148      	lsls	r0, r1, #5
 800a61c:	69f9      	ldr	r1, [r7, #28]
 800a61e:	4401      	add	r1, r0
 800a620:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a624:	4313      	orrs	r3, r2
 800a626:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a628:	79fb      	ldrb	r3, [r7, #7]
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d10d      	bne.n	800a64a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	691b      	ldr	r3, [r3, #16]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d009      	beq.n	800a64a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	6919      	ldr	r1, [r3, #16]
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	015a      	lsls	r2, r3, #5
 800a63e:	69fb      	ldr	r3, [r7, #28]
 800a640:	4413      	add	r3, r2
 800a642:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a646:	460a      	mov	r2, r1
 800a648:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	791b      	ldrb	r3, [r3, #4]
 800a64e:	2b01      	cmp	r3, #1
 800a650:	d128      	bne.n	800a6a4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a652:	69fb      	ldr	r3, [r7, #28]
 800a654:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a658:	689b      	ldr	r3, [r3, #8]
 800a65a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d110      	bne.n	800a684 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a662:	69bb      	ldr	r3, [r7, #24]
 800a664:	015a      	lsls	r2, r3, #5
 800a666:	69fb      	ldr	r3, [r7, #28]
 800a668:	4413      	add	r3, r2
 800a66a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	69ba      	ldr	r2, [r7, #24]
 800a672:	0151      	lsls	r1, r2, #5
 800a674:	69fa      	ldr	r2, [r7, #28]
 800a676:	440a      	add	r2, r1
 800a678:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a67c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a680:	6013      	str	r3, [r2, #0]
 800a682:	e00f      	b.n	800a6a4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a684:	69bb      	ldr	r3, [r7, #24]
 800a686:	015a      	lsls	r2, r3, #5
 800a688:	69fb      	ldr	r3, [r7, #28]
 800a68a:	4413      	add	r3, r2
 800a68c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	69ba      	ldr	r2, [r7, #24]
 800a694:	0151      	lsls	r1, r2, #5
 800a696:	69fa      	ldr	r2, [r7, #28]
 800a698:	440a      	add	r2, r1
 800a69a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a69e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a6a2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a6a4:	69bb      	ldr	r3, [r7, #24]
 800a6a6:	015a      	lsls	r2, r3, #5
 800a6a8:	69fb      	ldr	r3, [r7, #28]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	69ba      	ldr	r2, [r7, #24]
 800a6b4:	0151      	lsls	r1, r2, #5
 800a6b6:	69fa      	ldr	r2, [r7, #28]
 800a6b8:	440a      	add	r2, r1
 800a6ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6be:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a6c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a6c4:	2300      	movs	r3, #0
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3720      	adds	r7, #32
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	1ff80000 	.word	0x1ff80000

0800a6d4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b087      	sub	sp, #28
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	60f8      	str	r0, [r7, #12]
 800a6dc:	60b9      	str	r1, [r7, #8]
 800a6de:	4613      	mov	r3, r2
 800a6e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	785b      	ldrb	r3, [r3, #1]
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	f040 80ce 	bne.w	800a892 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	699b      	ldr	r3, [r3, #24]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d132      	bne.n	800a764 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	015a      	lsls	r2, r3, #5
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	4413      	add	r3, r2
 800a706:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a70a:	691b      	ldr	r3, [r3, #16]
 800a70c:	693a      	ldr	r2, [r7, #16]
 800a70e:	0151      	lsls	r1, r2, #5
 800a710:	697a      	ldr	r2, [r7, #20]
 800a712:	440a      	add	r2, r1
 800a714:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a718:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a71c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a720:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	015a      	lsls	r2, r3, #5
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	4413      	add	r3, r2
 800a72a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a72e:	691b      	ldr	r3, [r3, #16]
 800a730:	693a      	ldr	r2, [r7, #16]
 800a732:	0151      	lsls	r1, r2, #5
 800a734:	697a      	ldr	r2, [r7, #20]
 800a736:	440a      	add	r2, r1
 800a738:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a73c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a740:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	015a      	lsls	r2, r3, #5
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	4413      	add	r3, r2
 800a74a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a74e:	691b      	ldr	r3, [r3, #16]
 800a750:	693a      	ldr	r2, [r7, #16]
 800a752:	0151      	lsls	r1, r2, #5
 800a754:	697a      	ldr	r2, [r7, #20]
 800a756:	440a      	add	r2, r1
 800a758:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a75c:	0cdb      	lsrs	r3, r3, #19
 800a75e:	04db      	lsls	r3, r3, #19
 800a760:	6113      	str	r3, [r2, #16]
 800a762:	e04e      	b.n	800a802 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	015a      	lsls	r2, r3, #5
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	4413      	add	r3, r2
 800a76c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a770:	691b      	ldr	r3, [r3, #16]
 800a772:	693a      	ldr	r2, [r7, #16]
 800a774:	0151      	lsls	r1, r2, #5
 800a776:	697a      	ldr	r2, [r7, #20]
 800a778:	440a      	add	r2, r1
 800a77a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a77e:	0cdb      	lsrs	r3, r3, #19
 800a780:	04db      	lsls	r3, r3, #19
 800a782:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	015a      	lsls	r2, r3, #5
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	4413      	add	r3, r2
 800a78c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a790:	691b      	ldr	r3, [r3, #16]
 800a792:	693a      	ldr	r2, [r7, #16]
 800a794:	0151      	lsls	r1, r2, #5
 800a796:	697a      	ldr	r2, [r7, #20]
 800a798:	440a      	add	r2, r1
 800a79a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a79e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a7a2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a7a6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	699a      	ldr	r2, [r3, #24]
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d903      	bls.n	800a7bc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	68da      	ldr	r2, [r3, #12]
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	015a      	lsls	r2, r3, #5
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	4413      	add	r3, r2
 800a7c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7c8:	691b      	ldr	r3, [r3, #16]
 800a7ca:	693a      	ldr	r2, [r7, #16]
 800a7cc:	0151      	lsls	r1, r2, #5
 800a7ce:	697a      	ldr	r2, [r7, #20]
 800a7d0:	440a      	add	r2, r1
 800a7d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a7da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	015a      	lsls	r2, r3, #5
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	4413      	add	r3, r2
 800a7e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7e8:	691a      	ldr	r2, [r3, #16]
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	699b      	ldr	r3, [r3, #24]
 800a7ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7f2:	6939      	ldr	r1, [r7, #16]
 800a7f4:	0148      	lsls	r0, r1, #5
 800a7f6:	6979      	ldr	r1, [r7, #20]
 800a7f8:	4401      	add	r1, r0
 800a7fa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a7fe:	4313      	orrs	r3, r2
 800a800:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a802:	79fb      	ldrb	r3, [r7, #7]
 800a804:	2b01      	cmp	r3, #1
 800a806:	d11e      	bne.n	800a846 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	695b      	ldr	r3, [r3, #20]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d009      	beq.n	800a824 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	015a      	lsls	r2, r3, #5
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	4413      	add	r3, r2
 800a818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a81c:	461a      	mov	r2, r3
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	695b      	ldr	r3, [r3, #20]
 800a822:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	015a      	lsls	r2, r3, #5
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	4413      	add	r3, r2
 800a82c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	693a      	ldr	r2, [r7, #16]
 800a834:	0151      	lsls	r1, r2, #5
 800a836:	697a      	ldr	r2, [r7, #20]
 800a838:	440a      	add	r2, r1
 800a83a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a83e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a842:	6013      	str	r3, [r2, #0]
 800a844:	e097      	b.n	800a976 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	015a      	lsls	r2, r3, #5
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	4413      	add	r3, r2
 800a84e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	693a      	ldr	r2, [r7, #16]
 800a856:	0151      	lsls	r1, r2, #5
 800a858:	697a      	ldr	r2, [r7, #20]
 800a85a:	440a      	add	r2, r1
 800a85c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a860:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a864:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	699b      	ldr	r3, [r3, #24]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	f000 8083 	beq.w	800a976 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a876:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	781b      	ldrb	r3, [r3, #0]
 800a87c:	f003 030f 	and.w	r3, r3, #15
 800a880:	2101      	movs	r1, #1
 800a882:	fa01 f303 	lsl.w	r3, r1, r3
 800a886:	6979      	ldr	r1, [r7, #20]
 800a888:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a88c:	4313      	orrs	r3, r2
 800a88e:	634b      	str	r3, [r1, #52]	@ 0x34
 800a890:	e071      	b.n	800a976 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	015a      	lsls	r2, r3, #5
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	4413      	add	r3, r2
 800a89a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a89e:	691b      	ldr	r3, [r3, #16]
 800a8a0:	693a      	ldr	r2, [r7, #16]
 800a8a2:	0151      	lsls	r1, r2, #5
 800a8a4:	697a      	ldr	r2, [r7, #20]
 800a8a6:	440a      	add	r2, r1
 800a8a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8ac:	0cdb      	lsrs	r3, r3, #19
 800a8ae:	04db      	lsls	r3, r3, #19
 800a8b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	015a      	lsls	r2, r3, #5
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	4413      	add	r3, r2
 800a8ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8be:	691b      	ldr	r3, [r3, #16]
 800a8c0:	693a      	ldr	r2, [r7, #16]
 800a8c2:	0151      	lsls	r1, r2, #5
 800a8c4:	697a      	ldr	r2, [r7, #20]
 800a8c6:	440a      	add	r2, r1
 800a8c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8cc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a8d0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a8d4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	699b      	ldr	r3, [r3, #24]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d003      	beq.n	800a8e6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	68da      	ldr	r2, [r3, #12]
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	68da      	ldr	r2, [r3, #12]
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	015a      	lsls	r2, r3, #5
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	4413      	add	r3, r2
 800a8f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8fa:	691b      	ldr	r3, [r3, #16]
 800a8fc:	693a      	ldr	r2, [r7, #16]
 800a8fe:	0151      	lsls	r1, r2, #5
 800a900:	697a      	ldr	r2, [r7, #20]
 800a902:	440a      	add	r2, r1
 800a904:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a908:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a90c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	015a      	lsls	r2, r3, #5
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	4413      	add	r3, r2
 800a916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a91a:	691a      	ldr	r2, [r3, #16]
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	69db      	ldr	r3, [r3, #28]
 800a920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a924:	6939      	ldr	r1, [r7, #16]
 800a926:	0148      	lsls	r0, r1, #5
 800a928:	6979      	ldr	r1, [r7, #20]
 800a92a:	4401      	add	r1, r0
 800a92c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a930:	4313      	orrs	r3, r2
 800a932:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a934:	79fb      	ldrb	r3, [r7, #7]
 800a936:	2b01      	cmp	r3, #1
 800a938:	d10d      	bne.n	800a956 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	691b      	ldr	r3, [r3, #16]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d009      	beq.n	800a956 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	6919      	ldr	r1, [r3, #16]
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	015a      	lsls	r2, r3, #5
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	4413      	add	r3, r2
 800a94e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a952:	460a      	mov	r2, r1
 800a954:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	015a      	lsls	r2, r3, #5
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	4413      	add	r3, r2
 800a95e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	693a      	ldr	r2, [r7, #16]
 800a966:	0151      	lsls	r1, r2, #5
 800a968:	697a      	ldr	r2, [r7, #20]
 800a96a:	440a      	add	r2, r1
 800a96c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a970:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a974:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a976:	2300      	movs	r3, #0
}
 800a978:	4618      	mov	r0, r3
 800a97a:	371c      	adds	r7, #28
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a984:	b480      	push	{r7}
 800a986:	b087      	sub	sp, #28
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a98e:	2300      	movs	r3, #0
 800a990:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a992:	2300      	movs	r3, #0
 800a994:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	785b      	ldrb	r3, [r3, #1]
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d14a      	bne.n	800aa38 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	015a      	lsls	r2, r3, #5
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	4413      	add	r3, r2
 800a9ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a9b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a9ba:	f040 8086 	bne.w	800aaca <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	015a      	lsls	r2, r3, #5
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	4413      	add	r3, r2
 800a9c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	683a      	ldr	r2, [r7, #0]
 800a9d0:	7812      	ldrb	r2, [r2, #0]
 800a9d2:	0151      	lsls	r1, r2, #5
 800a9d4:	693a      	ldr	r2, [r7, #16]
 800a9d6:	440a      	add	r2, r1
 800a9d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9dc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a9e0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	781b      	ldrb	r3, [r3, #0]
 800a9e6:	015a      	lsls	r2, r3, #5
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	683a      	ldr	r2, [r7, #0]
 800a9f4:	7812      	ldrb	r2, [r2, #0]
 800a9f6:	0151      	lsls	r1, r2, #5
 800a9f8:	693a      	ldr	r2, [r7, #16]
 800a9fa:	440a      	add	r2, r1
 800a9fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aa04:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	3301      	adds	r3, #1
 800aa0a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d902      	bls.n	800aa1c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800aa16:	2301      	movs	r3, #1
 800aa18:	75fb      	strb	r3, [r7, #23]
          break;
 800aa1a:	e056      	b.n	800aaca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	015a      	lsls	r2, r3, #5
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	4413      	add	r3, r2
 800aa26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aa30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa34:	d0e7      	beq.n	800aa06 <USB_EPStopXfer+0x82>
 800aa36:	e048      	b.n	800aaca <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	015a      	lsls	r2, r3, #5
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	4413      	add	r3, r2
 800aa42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aa4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa50:	d13b      	bne.n	800aaca <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	015a      	lsls	r2, r3, #5
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	4413      	add	r3, r2
 800aa5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	683a      	ldr	r2, [r7, #0]
 800aa64:	7812      	ldrb	r2, [r2, #0]
 800aa66:	0151      	lsls	r1, r2, #5
 800aa68:	693a      	ldr	r2, [r7, #16]
 800aa6a:	440a      	add	r2, r1
 800aa6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa70:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800aa74:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	015a      	lsls	r2, r3, #5
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	4413      	add	r3, r2
 800aa80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	683a      	ldr	r2, [r7, #0]
 800aa88:	7812      	ldrb	r2, [r2, #0]
 800aa8a:	0151      	lsls	r1, r2, #5
 800aa8c:	693a      	ldr	r2, [r7, #16]
 800aa8e:	440a      	add	r2, r1
 800aa90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa94:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aa98:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d902      	bls.n	800aab0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	75fb      	strb	r3, [r7, #23]
          break;
 800aaae:	e00c      	b.n	800aaca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	015a      	lsls	r2, r3, #5
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	4413      	add	r3, r2
 800aaba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aac4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aac8:	d0e7      	beq.n	800aa9a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800aaca:	7dfb      	ldrb	r3, [r7, #23]
}
 800aacc:	4618      	mov	r0, r3
 800aace:	371c      	adds	r7, #28
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr

0800aad8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800aad8:	b480      	push	{r7}
 800aada:	b089      	sub	sp, #36	@ 0x24
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	60b9      	str	r1, [r7, #8]
 800aae2:	4611      	mov	r1, r2
 800aae4:	461a      	mov	r2, r3
 800aae6:	460b      	mov	r3, r1
 800aae8:	71fb      	strb	r3, [r7, #7]
 800aaea:	4613      	mov	r3, r2
 800aaec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800aaf6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d123      	bne.n	800ab46 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800aafe:	88bb      	ldrh	r3, [r7, #4]
 800ab00:	3303      	adds	r3, #3
 800ab02:	089b      	lsrs	r3, r3, #2
 800ab04:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ab06:	2300      	movs	r3, #0
 800ab08:	61bb      	str	r3, [r7, #24]
 800ab0a:	e018      	b.n	800ab3e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ab0c:	79fb      	ldrb	r3, [r7, #7]
 800ab0e:	031a      	lsls	r2, r3, #12
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	4413      	add	r3, r2
 800ab14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab18:	461a      	mov	r2, r3
 800ab1a:	69fb      	ldr	r3, [r7, #28]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ab20:	69fb      	ldr	r3, [r7, #28]
 800ab22:	3301      	adds	r3, #1
 800ab24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ab26:	69fb      	ldr	r3, [r7, #28]
 800ab28:	3301      	adds	r3, #1
 800ab2a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ab2c:	69fb      	ldr	r3, [r7, #28]
 800ab2e:	3301      	adds	r3, #1
 800ab30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ab32:	69fb      	ldr	r3, [r7, #28]
 800ab34:	3301      	adds	r3, #1
 800ab36:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ab38:	69bb      	ldr	r3, [r7, #24]
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	61bb      	str	r3, [r7, #24]
 800ab3e:	69ba      	ldr	r2, [r7, #24]
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d3e2      	bcc.n	800ab0c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ab46:	2300      	movs	r3, #0
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3724      	adds	r7, #36	@ 0x24
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr

0800ab54 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b08b      	sub	sp, #44	@ 0x2c
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	60b9      	str	r1, [r7, #8]
 800ab5e:	4613      	mov	r3, r2
 800ab60:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ab6a:	88fb      	ldrh	r3, [r7, #6]
 800ab6c:	089b      	lsrs	r3, r3, #2
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ab72:	88fb      	ldrh	r3, [r7, #6]
 800ab74:	f003 0303 	and.w	r3, r3, #3
 800ab78:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	623b      	str	r3, [r7, #32]
 800ab7e:	e014      	b.n	800abaa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ab80:	69bb      	ldr	r3, [r7, #24]
 800ab82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab8a:	601a      	str	r2, [r3, #0]
    pDest++;
 800ab8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab8e:	3301      	adds	r3, #1
 800ab90:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ab92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab94:	3301      	adds	r3, #1
 800ab96:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ab98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ab9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aba0:	3301      	adds	r3, #1
 800aba2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800aba4:	6a3b      	ldr	r3, [r7, #32]
 800aba6:	3301      	adds	r3, #1
 800aba8:	623b      	str	r3, [r7, #32]
 800abaa:	6a3a      	ldr	r2, [r7, #32]
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	429a      	cmp	r2, r3
 800abb0:	d3e6      	bcc.n	800ab80 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800abb2:	8bfb      	ldrh	r3, [r7, #30]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d01e      	beq.n	800abf6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800abb8:	2300      	movs	r3, #0
 800abba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800abbc:	69bb      	ldr	r3, [r7, #24]
 800abbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800abc2:	461a      	mov	r2, r3
 800abc4:	f107 0310 	add.w	r3, r7, #16
 800abc8:	6812      	ldr	r2, [r2, #0]
 800abca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800abcc:	693a      	ldr	r2, [r7, #16]
 800abce:	6a3b      	ldr	r3, [r7, #32]
 800abd0:	b2db      	uxtb	r3, r3
 800abd2:	00db      	lsls	r3, r3, #3
 800abd4:	fa22 f303 	lsr.w	r3, r2, r3
 800abd8:	b2da      	uxtb	r2, r3
 800abda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abdc:	701a      	strb	r2, [r3, #0]
      i++;
 800abde:	6a3b      	ldr	r3, [r7, #32]
 800abe0:	3301      	adds	r3, #1
 800abe2:	623b      	str	r3, [r7, #32]
      pDest++;
 800abe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe6:	3301      	adds	r3, #1
 800abe8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800abea:	8bfb      	ldrh	r3, [r7, #30]
 800abec:	3b01      	subs	r3, #1
 800abee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800abf0:	8bfb      	ldrh	r3, [r7, #30]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d1ea      	bne.n	800abcc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800abf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	372c      	adds	r7, #44	@ 0x2c
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr

0800ac04 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b085      	sub	sp, #20
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	785b      	ldrb	r3, [r3, #1]
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d12c      	bne.n	800ac7a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	015a      	lsls	r2, r3, #5
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	4413      	add	r3, r2
 800ac28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	db12      	blt.n	800ac58 <USB_EPSetStall+0x54>
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d00f      	beq.n	800ac58 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	015a      	lsls	r2, r3, #5
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	4413      	add	r3, r2
 800ac40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	68ba      	ldr	r2, [r7, #8]
 800ac48:	0151      	lsls	r1, r2, #5
 800ac4a:	68fa      	ldr	r2, [r7, #12]
 800ac4c:	440a      	add	r2, r1
 800ac4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac52:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ac56:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	015a      	lsls	r2, r3, #5
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	4413      	add	r3, r2
 800ac60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	68ba      	ldr	r2, [r7, #8]
 800ac68:	0151      	lsls	r1, r2, #5
 800ac6a:	68fa      	ldr	r2, [r7, #12]
 800ac6c:	440a      	add	r2, r1
 800ac6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac72:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ac76:	6013      	str	r3, [r2, #0]
 800ac78:	e02b      	b.n	800acd2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	015a      	lsls	r2, r3, #5
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	4413      	add	r3, r2
 800ac82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	db12      	blt.n	800acb2 <USB_EPSetStall+0xae>
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d00f      	beq.n	800acb2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	015a      	lsls	r2, r3, #5
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	4413      	add	r3, r2
 800ac9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	68ba      	ldr	r2, [r7, #8]
 800aca2:	0151      	lsls	r1, r2, #5
 800aca4:	68fa      	ldr	r2, [r7, #12]
 800aca6:	440a      	add	r2, r1
 800aca8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800acac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800acb0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	015a      	lsls	r2, r3, #5
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	4413      	add	r3, r2
 800acba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	68ba      	ldr	r2, [r7, #8]
 800acc2:	0151      	lsls	r1, r2, #5
 800acc4:	68fa      	ldr	r2, [r7, #12]
 800acc6:	440a      	add	r2, r1
 800acc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800accc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800acd0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800acd2:	2300      	movs	r3, #0
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3714      	adds	r7, #20
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b085      	sub	sp, #20
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	785b      	ldrb	r3, [r3, #1]
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d128      	bne.n	800ad4e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	015a      	lsls	r2, r3, #5
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	4413      	add	r3, r2
 800ad04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	68ba      	ldr	r2, [r7, #8]
 800ad0c:	0151      	lsls	r1, r2, #5
 800ad0e:	68fa      	ldr	r2, [r7, #12]
 800ad10:	440a      	add	r2, r1
 800ad12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad16:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ad1a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	791b      	ldrb	r3, [r3, #4]
 800ad20:	2b03      	cmp	r3, #3
 800ad22:	d003      	beq.n	800ad2c <USB_EPClearStall+0x4c>
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	791b      	ldrb	r3, [r3, #4]
 800ad28:	2b02      	cmp	r3, #2
 800ad2a:	d138      	bne.n	800ad9e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	015a      	lsls	r2, r3, #5
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	4413      	add	r3, r2
 800ad34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	68ba      	ldr	r2, [r7, #8]
 800ad3c:	0151      	lsls	r1, r2, #5
 800ad3e:	68fa      	ldr	r2, [r7, #12]
 800ad40:	440a      	add	r2, r1
 800ad42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad4a:	6013      	str	r3, [r2, #0]
 800ad4c:	e027      	b.n	800ad9e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	015a      	lsls	r2, r3, #5
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	4413      	add	r3, r2
 800ad56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	68ba      	ldr	r2, [r7, #8]
 800ad5e:	0151      	lsls	r1, r2, #5
 800ad60:	68fa      	ldr	r2, [r7, #12]
 800ad62:	440a      	add	r2, r1
 800ad64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad68:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ad6c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	791b      	ldrb	r3, [r3, #4]
 800ad72:	2b03      	cmp	r3, #3
 800ad74:	d003      	beq.n	800ad7e <USB_EPClearStall+0x9e>
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	791b      	ldrb	r3, [r3, #4]
 800ad7a:	2b02      	cmp	r3, #2
 800ad7c:	d10f      	bne.n	800ad9e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	015a      	lsls	r2, r3, #5
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	4413      	add	r3, r2
 800ad86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	68ba      	ldr	r2, [r7, #8]
 800ad8e:	0151      	lsls	r1, r2, #5
 800ad90:	68fa      	ldr	r2, [r7, #12]
 800ad92:	440a      	add	r2, r1
 800ad94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad9c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ad9e:	2300      	movs	r3, #0
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3714      	adds	r7, #20
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr

0800adac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800adac:	b480      	push	{r7}
 800adae:	b085      	sub	sp, #20
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	460b      	mov	r3, r1
 800adb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	68fa      	ldr	r2, [r7, #12]
 800adc6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800adca:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800adce:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800add6:	681a      	ldr	r2, [r3, #0]
 800add8:	78fb      	ldrb	r3, [r7, #3]
 800adda:	011b      	lsls	r3, r3, #4
 800addc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800ade0:	68f9      	ldr	r1, [r7, #12]
 800ade2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ade6:	4313      	orrs	r3, r2
 800ade8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800adea:	2300      	movs	r3, #0
}
 800adec:	4618      	mov	r0, r3
 800adee:	3714      	adds	r7, #20
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr

0800adf8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b085      	sub	sp, #20
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	68fa      	ldr	r2, [r7, #12]
 800ae0e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ae12:	f023 0303 	bic.w	r3, r3, #3
 800ae16:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	68fa      	ldr	r2, [r7, #12]
 800ae22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ae26:	f023 0302 	bic.w	r3, r3, #2
 800ae2a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ae2c:	2300      	movs	r3, #0
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3714      	adds	r7, #20
 800ae32:	46bd      	mov	sp, r7
 800ae34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae38:	4770      	bx	lr

0800ae3a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ae3a:	b480      	push	{r7}
 800ae3c:	b085      	sub	sp, #20
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	68fa      	ldr	r2, [r7, #12]
 800ae50:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ae54:	f023 0303 	bic.w	r3, r3, #3
 800ae58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	68fa      	ldr	r2, [r7, #12]
 800ae64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ae68:	f043 0302 	orr.w	r3, r3, #2
 800ae6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ae6e:	2300      	movs	r3, #0
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3714      	adds	r7, #20
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr

0800ae7c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b085      	sub	sp, #20
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	695b      	ldr	r3, [r3, #20]
 800ae88:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	699b      	ldr	r3, [r3, #24]
 800ae8e:	68fa      	ldr	r2, [r7, #12]
 800ae90:	4013      	ands	r3, r2
 800ae92:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ae94:	68fb      	ldr	r3, [r7, #12]
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3714      	adds	r7, #20
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr

0800aea2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aea2:	b480      	push	{r7}
 800aea4:	b085      	sub	sp, #20
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aeb4:	699b      	ldr	r3, [r3, #24]
 800aeb6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aebe:	69db      	ldr	r3, [r3, #28]
 800aec0:	68ba      	ldr	r2, [r7, #8]
 800aec2:	4013      	ands	r3, r2
 800aec4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	0c1b      	lsrs	r3, r3, #16
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3714      	adds	r7, #20
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr

0800aed6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aed6:	b480      	push	{r7}
 800aed8:	b085      	sub	sp, #20
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aee8:	699b      	ldr	r3, [r3, #24]
 800aeea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aef2:	69db      	ldr	r3, [r3, #28]
 800aef4:	68ba      	ldr	r2, [r7, #8]
 800aef6:	4013      	ands	r3, r2
 800aef8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	b29b      	uxth	r3, r3
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3714      	adds	r7, #20
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr

0800af0a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800af0a:	b480      	push	{r7}
 800af0c:	b085      	sub	sp, #20
 800af0e:	af00      	add	r7, sp, #0
 800af10:	6078      	str	r0, [r7, #4]
 800af12:	460b      	mov	r3, r1
 800af14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800af1a:	78fb      	ldrb	r3, [r7, #3]
 800af1c:	015a      	lsls	r2, r3, #5
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	4413      	add	r3, r2
 800af22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af26:	689b      	ldr	r3, [r3, #8]
 800af28:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af30:	695b      	ldr	r3, [r3, #20]
 800af32:	68ba      	ldr	r2, [r7, #8]
 800af34:	4013      	ands	r3, r2
 800af36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800af38:	68bb      	ldr	r3, [r7, #8]
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3714      	adds	r7, #20
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr

0800af46 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800af46:	b480      	push	{r7}
 800af48:	b087      	sub	sp, #28
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
 800af4e:	460b      	mov	r3, r1
 800af50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af5c:	691b      	ldr	r3, [r3, #16]
 800af5e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af68:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800af6a:	78fb      	ldrb	r3, [r7, #3]
 800af6c:	f003 030f 	and.w	r3, r3, #15
 800af70:	68fa      	ldr	r2, [r7, #12]
 800af72:	fa22 f303 	lsr.w	r3, r2, r3
 800af76:	01db      	lsls	r3, r3, #7
 800af78:	b2db      	uxtb	r3, r3
 800af7a:	693a      	ldr	r2, [r7, #16]
 800af7c:	4313      	orrs	r3, r2
 800af7e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800af80:	78fb      	ldrb	r3, [r7, #3]
 800af82:	015a      	lsls	r2, r3, #5
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	4413      	add	r3, r2
 800af88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af8c:	689b      	ldr	r3, [r3, #8]
 800af8e:	693a      	ldr	r2, [r7, #16]
 800af90:	4013      	ands	r3, r2
 800af92:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800af94:	68bb      	ldr	r3, [r7, #8]
}
 800af96:	4618      	mov	r0, r3
 800af98:	371c      	adds	r7, #28
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr

0800afa2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800afa2:	b480      	push	{r7}
 800afa4:	b083      	sub	sp, #12
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	695b      	ldr	r3, [r3, #20]
 800afae:	f003 0301 	and.w	r3, r3, #1
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	370c      	adds	r7, #12
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr

0800afbe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800afbe:	b480      	push	{r7}
 800afc0:	b085      	sub	sp, #20
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	68fa      	ldr	r2, [r7, #12]
 800afd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800afd8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800afdc:	f023 0307 	bic.w	r3, r3, #7
 800afe0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	68fa      	ldr	r2, [r7, #12]
 800afec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aff0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aff4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aff6:	2300      	movs	r3, #0
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3714      	adds	r7, #20
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr

0800b004 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b004:	b480      	push	{r7}
 800b006:	b087      	sub	sp, #28
 800b008:	af00      	add	r7, sp, #0
 800b00a:	60f8      	str	r0, [r7, #12]
 800b00c:	460b      	mov	r3, r1
 800b00e:	607a      	str	r2, [r7, #4]
 800b010:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	333c      	adds	r3, #60	@ 0x3c
 800b01a:	3304      	adds	r3, #4
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	4a26      	ldr	r2, [pc, #152]	@ (800b0bc <USB_EP0_OutStart+0xb8>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d90a      	bls.n	800b03e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b034:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b038:	d101      	bne.n	800b03e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b03a:	2300      	movs	r3, #0
 800b03c:	e037      	b.n	800b0ae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b044:	461a      	mov	r2, r3
 800b046:	2300      	movs	r3, #0
 800b048:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b050:	691b      	ldr	r3, [r3, #16]
 800b052:	697a      	ldr	r2, [r7, #20]
 800b054:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b058:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b05c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b064:	691b      	ldr	r3, [r3, #16]
 800b066:	697a      	ldr	r2, [r7, #20]
 800b068:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b06c:	f043 0318 	orr.w	r3, r3, #24
 800b070:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b078:	691b      	ldr	r3, [r3, #16]
 800b07a:	697a      	ldr	r2, [r7, #20]
 800b07c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b080:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b084:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b086:	7afb      	ldrb	r3, [r7, #11]
 800b088:	2b01      	cmp	r3, #1
 800b08a:	d10f      	bne.n	800b0ac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b092:	461a      	mov	r2, r3
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	697a      	ldr	r2, [r7, #20]
 800b0a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0a6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b0aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b0ac:	2300      	movs	r3, #0
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	371c      	adds	r7, #28
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr
 800b0ba:	bf00      	nop
 800b0bc:	4f54300a 	.word	0x4f54300a

0800b0c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b085      	sub	sp, #20
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	4a13      	ldr	r2, [pc, #76]	@ (800b124 <USB_CoreReset+0x64>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d901      	bls.n	800b0de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b0da:	2303      	movs	r3, #3
 800b0dc:	e01b      	b.n	800b116 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	691b      	ldr	r3, [r3, #16]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	daf2      	bge.n	800b0cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	691b      	ldr	r3, [r3, #16]
 800b0ee:	f043 0201 	orr.w	r2, r3, #1
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	3301      	adds	r3, #1
 800b0fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	4a09      	ldr	r2, [pc, #36]	@ (800b124 <USB_CoreReset+0x64>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d901      	bls.n	800b108 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b104:	2303      	movs	r3, #3
 800b106:	e006      	b.n	800b116 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	691b      	ldr	r3, [r3, #16]
 800b10c:	f003 0301 	and.w	r3, r3, #1
 800b110:	2b01      	cmp	r3, #1
 800b112:	d0f0      	beq.n	800b0f6 <USB_CoreReset+0x36>

  return HAL_OK;
 800b114:	2300      	movs	r3, #0
}
 800b116:	4618      	mov	r0, r3
 800b118:	3714      	adds	r7, #20
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr
 800b122:	bf00      	nop
 800b124:	00030d40 	.word	0x00030d40

0800b128 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	460b      	mov	r3, r1
 800b132:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b134:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b138:	f005 f8d8 	bl	80102ec <USBD_static_malloc>
 800b13c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d109      	bne.n	800b158 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	32b0      	adds	r2, #176	@ 0xb0
 800b14e:	2100      	movs	r1, #0
 800b150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b154:	2302      	movs	r3, #2
 800b156:	e0d4      	b.n	800b302 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b158:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b15c:	2100      	movs	r1, #0
 800b15e:	68f8      	ldr	r0, [r7, #12]
 800b160:	f005 ff23 	bl	8010faa <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	32b0      	adds	r2, #176	@ 0xb0
 800b16e:	68f9      	ldr	r1, [r7, #12]
 800b170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	32b0      	adds	r2, #176	@ 0xb0
 800b17e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	7c1b      	ldrb	r3, [r3, #16]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d138      	bne.n	800b202 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b190:	4b5e      	ldr	r3, [pc, #376]	@ (800b30c <USBD_CDC_Init+0x1e4>)
 800b192:	7819      	ldrb	r1, [r3, #0]
 800b194:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b198:	2202      	movs	r2, #2
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f004 ff83 	bl	80100a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b1a0:	4b5a      	ldr	r3, [pc, #360]	@ (800b30c <USBD_CDC_Init+0x1e4>)
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	f003 020f 	and.w	r2, r3, #15
 800b1a8:	6879      	ldr	r1, [r7, #4]
 800b1aa:	4613      	mov	r3, r2
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	4413      	add	r3, r2
 800b1b0:	009b      	lsls	r3, r3, #2
 800b1b2:	440b      	add	r3, r1
 800b1b4:	3324      	adds	r3, #36	@ 0x24
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b1ba:	4b55      	ldr	r3, [pc, #340]	@ (800b310 <USBD_CDC_Init+0x1e8>)
 800b1bc:	7819      	ldrb	r1, [r3, #0]
 800b1be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b1c2:	2202      	movs	r2, #2
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f004 ff6e 	bl	80100a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b1ca:	4b51      	ldr	r3, [pc, #324]	@ (800b310 <USBD_CDC_Init+0x1e8>)
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	f003 020f 	and.w	r2, r3, #15
 800b1d2:	6879      	ldr	r1, [r7, #4]
 800b1d4:	4613      	mov	r3, r2
 800b1d6:	009b      	lsls	r3, r3, #2
 800b1d8:	4413      	add	r3, r2
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	440b      	add	r3, r1
 800b1de:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b1e6:	4b4b      	ldr	r3, [pc, #300]	@ (800b314 <USBD_CDC_Init+0x1ec>)
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	f003 020f 	and.w	r2, r3, #15
 800b1ee:	6879      	ldr	r1, [r7, #4]
 800b1f0:	4613      	mov	r3, r2
 800b1f2:	009b      	lsls	r3, r3, #2
 800b1f4:	4413      	add	r3, r2
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	440b      	add	r3, r1
 800b1fa:	3326      	adds	r3, #38	@ 0x26
 800b1fc:	2210      	movs	r2, #16
 800b1fe:	801a      	strh	r2, [r3, #0]
 800b200:	e035      	b.n	800b26e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b202:	4b42      	ldr	r3, [pc, #264]	@ (800b30c <USBD_CDC_Init+0x1e4>)
 800b204:	7819      	ldrb	r1, [r3, #0]
 800b206:	2340      	movs	r3, #64	@ 0x40
 800b208:	2202      	movs	r2, #2
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f004 ff4b 	bl	80100a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b210:	4b3e      	ldr	r3, [pc, #248]	@ (800b30c <USBD_CDC_Init+0x1e4>)
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	f003 020f 	and.w	r2, r3, #15
 800b218:	6879      	ldr	r1, [r7, #4]
 800b21a:	4613      	mov	r3, r2
 800b21c:	009b      	lsls	r3, r3, #2
 800b21e:	4413      	add	r3, r2
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	440b      	add	r3, r1
 800b224:	3324      	adds	r3, #36	@ 0x24
 800b226:	2201      	movs	r2, #1
 800b228:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b22a:	4b39      	ldr	r3, [pc, #228]	@ (800b310 <USBD_CDC_Init+0x1e8>)
 800b22c:	7819      	ldrb	r1, [r3, #0]
 800b22e:	2340      	movs	r3, #64	@ 0x40
 800b230:	2202      	movs	r2, #2
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f004 ff37 	bl	80100a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b238:	4b35      	ldr	r3, [pc, #212]	@ (800b310 <USBD_CDC_Init+0x1e8>)
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	f003 020f 	and.w	r2, r3, #15
 800b240:	6879      	ldr	r1, [r7, #4]
 800b242:	4613      	mov	r3, r2
 800b244:	009b      	lsls	r3, r3, #2
 800b246:	4413      	add	r3, r2
 800b248:	009b      	lsls	r3, r3, #2
 800b24a:	440b      	add	r3, r1
 800b24c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b250:	2201      	movs	r2, #1
 800b252:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b254:	4b2f      	ldr	r3, [pc, #188]	@ (800b314 <USBD_CDC_Init+0x1ec>)
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	f003 020f 	and.w	r2, r3, #15
 800b25c:	6879      	ldr	r1, [r7, #4]
 800b25e:	4613      	mov	r3, r2
 800b260:	009b      	lsls	r3, r3, #2
 800b262:	4413      	add	r3, r2
 800b264:	009b      	lsls	r3, r3, #2
 800b266:	440b      	add	r3, r1
 800b268:	3326      	adds	r3, #38	@ 0x26
 800b26a:	2210      	movs	r2, #16
 800b26c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b26e:	4b29      	ldr	r3, [pc, #164]	@ (800b314 <USBD_CDC_Init+0x1ec>)
 800b270:	7819      	ldrb	r1, [r3, #0]
 800b272:	2308      	movs	r3, #8
 800b274:	2203      	movs	r2, #3
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f004 ff15 	bl	80100a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b27c:	4b25      	ldr	r3, [pc, #148]	@ (800b314 <USBD_CDC_Init+0x1ec>)
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	f003 020f 	and.w	r2, r3, #15
 800b284:	6879      	ldr	r1, [r7, #4]
 800b286:	4613      	mov	r3, r2
 800b288:	009b      	lsls	r3, r3, #2
 800b28a:	4413      	add	r3, r2
 800b28c:	009b      	lsls	r3, r3, #2
 800b28e:	440b      	add	r3, r1
 800b290:	3324      	adds	r3, #36	@ 0x24
 800b292:	2201      	movs	r2, #1
 800b294:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2200      	movs	r2, #0
 800b29a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b2a4:	687a      	ldr	r2, [r7, #4]
 800b2a6:	33b0      	adds	r3, #176	@ 0xb0
 800b2a8:	009b      	lsls	r3, r3, #2
 800b2aa:	4413      	add	r3, r2
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d101      	bne.n	800b2d0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b2cc:	2302      	movs	r3, #2
 800b2ce:	e018      	b.n	800b302 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	7c1b      	ldrb	r3, [r3, #16]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d10a      	bne.n	800b2ee <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b2d8:	4b0d      	ldr	r3, [pc, #52]	@ (800b310 <USBD_CDC_Init+0x1e8>)
 800b2da:	7819      	ldrb	r1, [r3, #0]
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b2e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f004 ffcc 	bl	8010284 <USBD_LL_PrepareReceive>
 800b2ec:	e008      	b.n	800b300 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b2ee:	4b08      	ldr	r3, [pc, #32]	@ (800b310 <USBD_CDC_Init+0x1e8>)
 800b2f0:	7819      	ldrb	r1, [r3, #0]
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b2f8:	2340      	movs	r3, #64	@ 0x40
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f004 ffc2 	bl	8010284 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b300:	2300      	movs	r3, #0
}
 800b302:	4618      	mov	r0, r3
 800b304:	3710      	adds	r7, #16
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop
 800b30c:	200000bf 	.word	0x200000bf
 800b310:	200000c0 	.word	0x200000c0
 800b314:	200000c1 	.word	0x200000c1

0800b318 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b082      	sub	sp, #8
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	460b      	mov	r3, r1
 800b322:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b324:	4b3a      	ldr	r3, [pc, #232]	@ (800b410 <USBD_CDC_DeInit+0xf8>)
 800b326:	781b      	ldrb	r3, [r3, #0]
 800b328:	4619      	mov	r1, r3
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f004 fee1 	bl	80100f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b330:	4b37      	ldr	r3, [pc, #220]	@ (800b410 <USBD_CDC_DeInit+0xf8>)
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	f003 020f 	and.w	r2, r3, #15
 800b338:	6879      	ldr	r1, [r7, #4]
 800b33a:	4613      	mov	r3, r2
 800b33c:	009b      	lsls	r3, r3, #2
 800b33e:	4413      	add	r3, r2
 800b340:	009b      	lsls	r3, r3, #2
 800b342:	440b      	add	r3, r1
 800b344:	3324      	adds	r3, #36	@ 0x24
 800b346:	2200      	movs	r2, #0
 800b348:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b34a:	4b32      	ldr	r3, [pc, #200]	@ (800b414 <USBD_CDC_DeInit+0xfc>)
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	4619      	mov	r1, r3
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f004 fece 	bl	80100f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b356:	4b2f      	ldr	r3, [pc, #188]	@ (800b414 <USBD_CDC_DeInit+0xfc>)
 800b358:	781b      	ldrb	r3, [r3, #0]
 800b35a:	f003 020f 	and.w	r2, r3, #15
 800b35e:	6879      	ldr	r1, [r7, #4]
 800b360:	4613      	mov	r3, r2
 800b362:	009b      	lsls	r3, r3, #2
 800b364:	4413      	add	r3, r2
 800b366:	009b      	lsls	r3, r3, #2
 800b368:	440b      	add	r3, r1
 800b36a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b36e:	2200      	movs	r2, #0
 800b370:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b372:	4b29      	ldr	r3, [pc, #164]	@ (800b418 <USBD_CDC_DeInit+0x100>)
 800b374:	781b      	ldrb	r3, [r3, #0]
 800b376:	4619      	mov	r1, r3
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f004 feba 	bl	80100f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b37e:	4b26      	ldr	r3, [pc, #152]	@ (800b418 <USBD_CDC_DeInit+0x100>)
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	f003 020f 	and.w	r2, r3, #15
 800b386:	6879      	ldr	r1, [r7, #4]
 800b388:	4613      	mov	r3, r2
 800b38a:	009b      	lsls	r3, r3, #2
 800b38c:	4413      	add	r3, r2
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	440b      	add	r3, r1
 800b392:	3324      	adds	r3, #36	@ 0x24
 800b394:	2200      	movs	r2, #0
 800b396:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b398:	4b1f      	ldr	r3, [pc, #124]	@ (800b418 <USBD_CDC_DeInit+0x100>)
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	f003 020f 	and.w	r2, r3, #15
 800b3a0:	6879      	ldr	r1, [r7, #4]
 800b3a2:	4613      	mov	r3, r2
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	4413      	add	r3, r2
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	440b      	add	r3, r1
 800b3ac:	3326      	adds	r3, #38	@ 0x26
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	32b0      	adds	r2, #176	@ 0xb0
 800b3bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d01f      	beq.n	800b404 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b3ca:	687a      	ldr	r2, [r7, #4]
 800b3cc:	33b0      	adds	r3, #176	@ 0xb0
 800b3ce:	009b      	lsls	r3, r3, #2
 800b3d0:	4413      	add	r3, r2
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	32b0      	adds	r2, #176	@ 0xb0
 800b3e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f004 ff8e 	bl	8010308 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	32b0      	adds	r2, #176	@ 0xb0
 800b3f6:	2100      	movs	r1, #0
 800b3f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2200      	movs	r2, #0
 800b400:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b404:	2300      	movs	r3, #0
}
 800b406:	4618      	mov	r0, r3
 800b408:	3708      	adds	r7, #8
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop
 800b410:	200000bf 	.word	0x200000bf
 800b414:	200000c0 	.word	0x200000c0
 800b418:	200000c1 	.word	0x200000c1

0800b41c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b086      	sub	sp, #24
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	32b0      	adds	r2, #176	@ 0xb0
 800b430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b434:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b436:	2300      	movs	r3, #0
 800b438:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b43a:	2300      	movs	r3, #0
 800b43c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b43e:	2300      	movs	r3, #0
 800b440:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d101      	bne.n	800b44c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b448:	2303      	movs	r3, #3
 800b44a:	e0bf      	b.n	800b5cc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	781b      	ldrb	r3, [r3, #0]
 800b450:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b454:	2b00      	cmp	r3, #0
 800b456:	d050      	beq.n	800b4fa <USBD_CDC_Setup+0xde>
 800b458:	2b20      	cmp	r3, #32
 800b45a:	f040 80af 	bne.w	800b5bc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	88db      	ldrh	r3, [r3, #6]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d03a      	beq.n	800b4dc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	b25b      	sxtb	r3, r3
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	da1b      	bge.n	800b4a8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	33b0      	adds	r3, #176	@ 0xb0
 800b47a:	009b      	lsls	r3, r3, #2
 800b47c:	4413      	add	r3, r2
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	689b      	ldr	r3, [r3, #8]
 800b482:	683a      	ldr	r2, [r7, #0]
 800b484:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b486:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b488:	683a      	ldr	r2, [r7, #0]
 800b48a:	88d2      	ldrh	r2, [r2, #6]
 800b48c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	88db      	ldrh	r3, [r3, #6]
 800b492:	2b07      	cmp	r3, #7
 800b494:	bf28      	it	cs
 800b496:	2307      	movcs	r3, #7
 800b498:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	89fa      	ldrh	r2, [r7, #14]
 800b49e:	4619      	mov	r1, r3
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f001 fd87 	bl	800cfb4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b4a6:	e090      	b.n	800b5ca <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	785a      	ldrb	r2, [r3, #1]
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	88db      	ldrh	r3, [r3, #6]
 800b4b6:	2b3f      	cmp	r3, #63	@ 0x3f
 800b4b8:	d803      	bhi.n	800b4c2 <USBD_CDC_Setup+0xa6>
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	88db      	ldrh	r3, [r3, #6]
 800b4be:	b2da      	uxtb	r2, r3
 800b4c0:	e000      	b.n	800b4c4 <USBD_CDC_Setup+0xa8>
 800b4c2:	2240      	movs	r2, #64	@ 0x40
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b4ca:	6939      	ldr	r1, [r7, #16]
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f001 fd99 	bl	800d00c <USBD_CtlPrepareRx>
      break;
 800b4da:	e076      	b.n	800b5ca <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b4e2:	687a      	ldr	r2, [r7, #4]
 800b4e4:	33b0      	adds	r3, #176	@ 0xb0
 800b4e6:	009b      	lsls	r3, r3, #2
 800b4e8:	4413      	add	r3, r2
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	689b      	ldr	r3, [r3, #8]
 800b4ee:	683a      	ldr	r2, [r7, #0]
 800b4f0:	7850      	ldrb	r0, [r2, #1]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	6839      	ldr	r1, [r7, #0]
 800b4f6:	4798      	blx	r3
      break;
 800b4f8:	e067      	b.n	800b5ca <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	785b      	ldrb	r3, [r3, #1]
 800b4fe:	2b0b      	cmp	r3, #11
 800b500:	d851      	bhi.n	800b5a6 <USBD_CDC_Setup+0x18a>
 800b502:	a201      	add	r2, pc, #4	@ (adr r2, 800b508 <USBD_CDC_Setup+0xec>)
 800b504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b508:	0800b539 	.word	0x0800b539
 800b50c:	0800b5b5 	.word	0x0800b5b5
 800b510:	0800b5a7 	.word	0x0800b5a7
 800b514:	0800b5a7 	.word	0x0800b5a7
 800b518:	0800b5a7 	.word	0x0800b5a7
 800b51c:	0800b5a7 	.word	0x0800b5a7
 800b520:	0800b5a7 	.word	0x0800b5a7
 800b524:	0800b5a7 	.word	0x0800b5a7
 800b528:	0800b5a7 	.word	0x0800b5a7
 800b52c:	0800b5a7 	.word	0x0800b5a7
 800b530:	0800b563 	.word	0x0800b563
 800b534:	0800b58d 	.word	0x0800b58d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b53e:	b2db      	uxtb	r3, r3
 800b540:	2b03      	cmp	r3, #3
 800b542:	d107      	bne.n	800b554 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b544:	f107 030a 	add.w	r3, r7, #10
 800b548:	2202      	movs	r2, #2
 800b54a:	4619      	mov	r1, r3
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f001 fd31 	bl	800cfb4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b552:	e032      	b.n	800b5ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b554:	6839      	ldr	r1, [r7, #0]
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f001 fcbb 	bl	800ced2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b55c:	2303      	movs	r3, #3
 800b55e:	75fb      	strb	r3, [r7, #23]
          break;
 800b560:	e02b      	b.n	800b5ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b568:	b2db      	uxtb	r3, r3
 800b56a:	2b03      	cmp	r3, #3
 800b56c:	d107      	bne.n	800b57e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b56e:	f107 030d 	add.w	r3, r7, #13
 800b572:	2201      	movs	r2, #1
 800b574:	4619      	mov	r1, r3
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f001 fd1c 	bl	800cfb4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b57c:	e01d      	b.n	800b5ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b57e:	6839      	ldr	r1, [r7, #0]
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f001 fca6 	bl	800ced2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b586:	2303      	movs	r3, #3
 800b588:	75fb      	strb	r3, [r7, #23]
          break;
 800b58a:	e016      	b.n	800b5ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b592:	b2db      	uxtb	r3, r3
 800b594:	2b03      	cmp	r3, #3
 800b596:	d00f      	beq.n	800b5b8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b598:	6839      	ldr	r1, [r7, #0]
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f001 fc99 	bl	800ced2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b5a0:	2303      	movs	r3, #3
 800b5a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b5a4:	e008      	b.n	800b5b8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b5a6:	6839      	ldr	r1, [r7, #0]
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f001 fc92 	bl	800ced2 <USBD_CtlError>
          ret = USBD_FAIL;
 800b5ae:	2303      	movs	r3, #3
 800b5b0:	75fb      	strb	r3, [r7, #23]
          break;
 800b5b2:	e002      	b.n	800b5ba <USBD_CDC_Setup+0x19e>
          break;
 800b5b4:	bf00      	nop
 800b5b6:	e008      	b.n	800b5ca <USBD_CDC_Setup+0x1ae>
          break;
 800b5b8:	bf00      	nop
      }
      break;
 800b5ba:	e006      	b.n	800b5ca <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b5bc:	6839      	ldr	r1, [r7, #0]
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f001 fc87 	bl	800ced2 <USBD_CtlError>
      ret = USBD_FAIL;
 800b5c4:	2303      	movs	r3, #3
 800b5c6:	75fb      	strb	r3, [r7, #23]
      break;
 800b5c8:	bf00      	nop
  }

  return (uint8_t)ret;
 800b5ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3718      	adds	r7, #24
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	460b      	mov	r3, r1
 800b5de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b5e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	32b0      	adds	r2, #176	@ 0xb0
 800b5f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d101      	bne.n	800b5fe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b5fa:	2303      	movs	r3, #3
 800b5fc:	e065      	b.n	800b6ca <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	32b0      	adds	r2, #176	@ 0xb0
 800b608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b60c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b60e:	78fb      	ldrb	r3, [r7, #3]
 800b610:	f003 020f 	and.w	r2, r3, #15
 800b614:	6879      	ldr	r1, [r7, #4]
 800b616:	4613      	mov	r3, r2
 800b618:	009b      	lsls	r3, r3, #2
 800b61a:	4413      	add	r3, r2
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	440b      	add	r3, r1
 800b620:	3318      	adds	r3, #24
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d02f      	beq.n	800b688 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b628:	78fb      	ldrb	r3, [r7, #3]
 800b62a:	f003 020f 	and.w	r2, r3, #15
 800b62e:	6879      	ldr	r1, [r7, #4]
 800b630:	4613      	mov	r3, r2
 800b632:	009b      	lsls	r3, r3, #2
 800b634:	4413      	add	r3, r2
 800b636:	009b      	lsls	r3, r3, #2
 800b638:	440b      	add	r3, r1
 800b63a:	3318      	adds	r3, #24
 800b63c:	681a      	ldr	r2, [r3, #0]
 800b63e:	78fb      	ldrb	r3, [r7, #3]
 800b640:	f003 010f 	and.w	r1, r3, #15
 800b644:	68f8      	ldr	r0, [r7, #12]
 800b646:	460b      	mov	r3, r1
 800b648:	00db      	lsls	r3, r3, #3
 800b64a:	440b      	add	r3, r1
 800b64c:	009b      	lsls	r3, r3, #2
 800b64e:	4403      	add	r3, r0
 800b650:	3348      	adds	r3, #72	@ 0x48
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	fbb2 f1f3 	udiv	r1, r2, r3
 800b658:	fb01 f303 	mul.w	r3, r1, r3
 800b65c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d112      	bne.n	800b688 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b662:	78fb      	ldrb	r3, [r7, #3]
 800b664:	f003 020f 	and.w	r2, r3, #15
 800b668:	6879      	ldr	r1, [r7, #4]
 800b66a:	4613      	mov	r3, r2
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	4413      	add	r3, r2
 800b670:	009b      	lsls	r3, r3, #2
 800b672:	440b      	add	r3, r1
 800b674:	3318      	adds	r3, #24
 800b676:	2200      	movs	r2, #0
 800b678:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b67a:	78f9      	ldrb	r1, [r7, #3]
 800b67c:	2300      	movs	r3, #0
 800b67e:	2200      	movs	r2, #0
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f004 fdde 	bl	8010242 <USBD_LL_Transmit>
 800b686:	e01f      	b.n	800b6c8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	2200      	movs	r2, #0
 800b68c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b696:	687a      	ldr	r2, [r7, #4]
 800b698:	33b0      	adds	r3, #176	@ 0xb0
 800b69a:	009b      	lsls	r3, r3, #2
 800b69c:	4413      	add	r3, r2
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	691b      	ldr	r3, [r3, #16]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d010      	beq.n	800b6c8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b6ac:	687a      	ldr	r2, [r7, #4]
 800b6ae:	33b0      	adds	r3, #176	@ 0xb0
 800b6b0:	009b      	lsls	r3, r3, #2
 800b6b2:	4413      	add	r3, r2
 800b6b4:	685b      	ldr	r3, [r3, #4]
 800b6b6:	691b      	ldr	r3, [r3, #16]
 800b6b8:	68ba      	ldr	r2, [r7, #8]
 800b6ba:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b6be:	68ba      	ldr	r2, [r7, #8]
 800b6c0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b6c4:	78fa      	ldrb	r2, [r7, #3]
 800b6c6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b6c8:	2300      	movs	r3, #0
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3710      	adds	r7, #16
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}

0800b6d2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b6d2:	b580      	push	{r7, lr}
 800b6d4:	b084      	sub	sp, #16
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
 800b6da:	460b      	mov	r3, r1
 800b6dc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	32b0      	adds	r2, #176	@ 0xb0
 800b6e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	32b0      	adds	r2, #176	@ 0xb0
 800b6f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d101      	bne.n	800b704 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b700:	2303      	movs	r3, #3
 800b702:	e01a      	b.n	800b73a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b704:	78fb      	ldrb	r3, [r7, #3]
 800b706:	4619      	mov	r1, r3
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f004 fddc 	bl	80102c6 <USBD_LL_GetRxDataSize>
 800b70e:	4602      	mov	r2, r0
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b71c:	687a      	ldr	r2, [r7, #4]
 800b71e:	33b0      	adds	r3, #176	@ 0xb0
 800b720:	009b      	lsls	r3, r3, #2
 800b722:	4413      	add	r3, r2
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	68db      	ldr	r3, [r3, #12]
 800b728:	68fa      	ldr	r2, [r7, #12]
 800b72a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b72e:	68fa      	ldr	r2, [r7, #12]
 800b730:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b734:	4611      	mov	r1, r2
 800b736:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b738:	2300      	movs	r3, #0
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3710      	adds	r7, #16
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}

0800b742 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b742:	b580      	push	{r7, lr}
 800b744:	b084      	sub	sp, #16
 800b746:	af00      	add	r7, sp, #0
 800b748:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	32b0      	adds	r2, #176	@ 0xb0
 800b754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b758:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d101      	bne.n	800b764 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b760:	2303      	movs	r3, #3
 800b762:	e024      	b.n	800b7ae <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b76a:	687a      	ldr	r2, [r7, #4]
 800b76c:	33b0      	adds	r3, #176	@ 0xb0
 800b76e:	009b      	lsls	r3, r3, #2
 800b770:	4413      	add	r3, r2
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d019      	beq.n	800b7ac <USBD_CDC_EP0_RxReady+0x6a>
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b77e:	2bff      	cmp	r3, #255	@ 0xff
 800b780:	d014      	beq.n	800b7ac <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b788:	687a      	ldr	r2, [r7, #4]
 800b78a:	33b0      	adds	r3, #176	@ 0xb0
 800b78c:	009b      	lsls	r3, r3, #2
 800b78e:	4413      	add	r3, r2
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	689b      	ldr	r3, [r3, #8]
 800b794:	68fa      	ldr	r2, [r7, #12]
 800b796:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b79a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b79c:	68fa      	ldr	r2, [r7, #12]
 800b79e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b7a2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	22ff      	movs	r2, #255	@ 0xff
 800b7a8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b7ac:	2300      	movs	r3, #0
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3710      	adds	r7, #16
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
	...

0800b7b8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b086      	sub	sp, #24
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b7c0:	2182      	movs	r1, #130	@ 0x82
 800b7c2:	4818      	ldr	r0, [pc, #96]	@ (800b824 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b7c4:	f000 fd4f 	bl	800c266 <USBD_GetEpDesc>
 800b7c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b7ca:	2101      	movs	r1, #1
 800b7cc:	4815      	ldr	r0, [pc, #84]	@ (800b824 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b7ce:	f000 fd4a 	bl	800c266 <USBD_GetEpDesc>
 800b7d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b7d4:	2181      	movs	r1, #129	@ 0x81
 800b7d6:	4813      	ldr	r0, [pc, #76]	@ (800b824 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b7d8:	f000 fd45 	bl	800c266 <USBD_GetEpDesc>
 800b7dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d002      	beq.n	800b7ea <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	2210      	movs	r2, #16
 800b7e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d006      	beq.n	800b7fe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b7f8:	711a      	strb	r2, [r3, #4]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d006      	beq.n	800b812 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2200      	movs	r2, #0
 800b808:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b80c:	711a      	strb	r2, [r3, #4]
 800b80e:	2200      	movs	r2, #0
 800b810:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2243      	movs	r2, #67	@ 0x43
 800b816:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b818:	4b02      	ldr	r3, [pc, #8]	@ (800b824 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3718      	adds	r7, #24
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop
 800b824:	2000007c 	.word	0x2000007c

0800b828 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b086      	sub	sp, #24
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b830:	2182      	movs	r1, #130	@ 0x82
 800b832:	4818      	ldr	r0, [pc, #96]	@ (800b894 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b834:	f000 fd17 	bl	800c266 <USBD_GetEpDesc>
 800b838:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b83a:	2101      	movs	r1, #1
 800b83c:	4815      	ldr	r0, [pc, #84]	@ (800b894 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b83e:	f000 fd12 	bl	800c266 <USBD_GetEpDesc>
 800b842:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b844:	2181      	movs	r1, #129	@ 0x81
 800b846:	4813      	ldr	r0, [pc, #76]	@ (800b894 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b848:	f000 fd0d 	bl	800c266 <USBD_GetEpDesc>
 800b84c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d002      	beq.n	800b85a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	2210      	movs	r2, #16
 800b858:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d006      	beq.n	800b86e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	2200      	movs	r2, #0
 800b864:	711a      	strb	r2, [r3, #4]
 800b866:	2200      	movs	r2, #0
 800b868:	f042 0202 	orr.w	r2, r2, #2
 800b86c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d006      	beq.n	800b882 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2200      	movs	r2, #0
 800b878:	711a      	strb	r2, [r3, #4]
 800b87a:	2200      	movs	r2, #0
 800b87c:	f042 0202 	orr.w	r2, r2, #2
 800b880:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2243      	movs	r2, #67	@ 0x43
 800b886:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b888:	4b02      	ldr	r3, [pc, #8]	@ (800b894 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3718      	adds	r7, #24
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop
 800b894:	2000007c 	.word	0x2000007c

0800b898 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b086      	sub	sp, #24
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b8a0:	2182      	movs	r1, #130	@ 0x82
 800b8a2:	4818      	ldr	r0, [pc, #96]	@ (800b904 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b8a4:	f000 fcdf 	bl	800c266 <USBD_GetEpDesc>
 800b8a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b8aa:	2101      	movs	r1, #1
 800b8ac:	4815      	ldr	r0, [pc, #84]	@ (800b904 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b8ae:	f000 fcda 	bl	800c266 <USBD_GetEpDesc>
 800b8b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b8b4:	2181      	movs	r1, #129	@ 0x81
 800b8b6:	4813      	ldr	r0, [pc, #76]	@ (800b904 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b8b8:	f000 fcd5 	bl	800c266 <USBD_GetEpDesc>
 800b8bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d002      	beq.n	800b8ca <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	2210      	movs	r2, #16
 800b8c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d006      	beq.n	800b8de <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b8d8:	711a      	strb	r2, [r3, #4]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d006      	beq.n	800b8f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b8ec:	711a      	strb	r2, [r3, #4]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2243      	movs	r2, #67	@ 0x43
 800b8f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b8f8:	4b02      	ldr	r3, [pc, #8]	@ (800b904 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3718      	adds	r7, #24
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	2000007c 	.word	0x2000007c

0800b908 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b908:	b480      	push	{r7}
 800b90a:	b083      	sub	sp, #12
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	220a      	movs	r2, #10
 800b914:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b916:	4b03      	ldr	r3, [pc, #12]	@ (800b924 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b918:	4618      	mov	r0, r3
 800b91a:	370c      	adds	r7, #12
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr
 800b924:	20000038 	.word	0x20000038

0800b928 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b928:	b480      	push	{r7}
 800b92a:	b083      	sub	sp, #12
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d101      	bne.n	800b93c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b938:	2303      	movs	r3, #3
 800b93a:	e009      	b.n	800b950 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	33b0      	adds	r3, #176	@ 0xb0
 800b946:	009b      	lsls	r3, r3, #2
 800b948:	4413      	add	r3, r2
 800b94a:	683a      	ldr	r2, [r7, #0]
 800b94c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b94e:	2300      	movs	r3, #0
}
 800b950:	4618      	mov	r0, r3
 800b952:	370c      	adds	r7, #12
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b087      	sub	sp, #28
 800b960:	af00      	add	r7, sp, #0
 800b962:	60f8      	str	r0, [r7, #12]
 800b964:	60b9      	str	r1, [r7, #8]
 800b966:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	32b0      	adds	r2, #176	@ 0xb0
 800b972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b976:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d101      	bne.n	800b982 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b97e:	2303      	movs	r3, #3
 800b980:	e008      	b.n	800b994 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	68ba      	ldr	r2, [r7, #8]
 800b986:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	687a      	ldr	r2, [r7, #4]
 800b98e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b992:	2300      	movs	r3, #0
}
 800b994:	4618      	mov	r0, r3
 800b996:	371c      	adds	r7, #28
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr

0800b9a0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b085      	sub	sp, #20
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	32b0      	adds	r2, #176	@ 0xb0
 800b9b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d101      	bne.n	800b9c4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b9c0:	2303      	movs	r3, #3
 800b9c2:	e004      	b.n	800b9ce <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	683a      	ldr	r2, [r7, #0]
 800b9c8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b9cc:	2300      	movs	r3, #0
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3714      	adds	r7, #20
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr
	...

0800b9dc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	32b0      	adds	r2, #176	@ 0xb0
 800b9ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9f2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	32b0      	adds	r2, #176	@ 0xb0
 800ba02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d101      	bne.n	800ba0e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ba0a:	2303      	movs	r3, #3
 800ba0c:	e025      	b.n	800ba5a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d11f      	bne.n	800ba58 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800ba20:	4b10      	ldr	r3, [pc, #64]	@ (800ba64 <USBD_CDC_TransmitPacket+0x88>)
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	f003 020f 	and.w	r2, r3, #15
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	4613      	mov	r3, r2
 800ba32:	009b      	lsls	r3, r3, #2
 800ba34:	4413      	add	r3, r2
 800ba36:	009b      	lsls	r3, r3, #2
 800ba38:	4403      	add	r3, r0
 800ba3a:	3318      	adds	r3, #24
 800ba3c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800ba3e:	4b09      	ldr	r3, [pc, #36]	@ (800ba64 <USBD_CDC_TransmitPacket+0x88>)
 800ba40:	7819      	ldrb	r1, [r3, #0]
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f004 fbf7 	bl	8010242 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ba54:	2300      	movs	r3, #0
 800ba56:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ba58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3710      	adds	r7, #16
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	bf00      	nop
 800ba64:	200000bf 	.word	0x200000bf

0800ba68 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b084      	sub	sp, #16
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	32b0      	adds	r2, #176	@ 0xb0
 800ba7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba7e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	32b0      	adds	r2, #176	@ 0xb0
 800ba8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d101      	bne.n	800ba96 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ba92:	2303      	movs	r3, #3
 800ba94:	e018      	b.n	800bac8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	7c1b      	ldrb	r3, [r3, #16]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d10a      	bne.n	800bab4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ba9e:	4b0c      	ldr	r3, [pc, #48]	@ (800bad0 <USBD_CDC_ReceivePacket+0x68>)
 800baa0:	7819      	ldrb	r1, [r3, #0]
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800baa8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f004 fbe9 	bl	8010284 <USBD_LL_PrepareReceive>
 800bab2:	e008      	b.n	800bac6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bab4:	4b06      	ldr	r3, [pc, #24]	@ (800bad0 <USBD_CDC_ReceivePacket+0x68>)
 800bab6:	7819      	ldrb	r1, [r3, #0]
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800babe:	2340      	movs	r3, #64	@ 0x40
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f004 fbdf 	bl	8010284 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bac6:	2300      	movs	r3, #0
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3710      	adds	r7, #16
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}
 800bad0:	200000c0 	.word	0x200000c0

0800bad4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b086      	sub	sp, #24
 800bad8:	af00      	add	r7, sp, #0
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	60b9      	str	r1, [r7, #8]
 800bade:	4613      	mov	r3, r2
 800bae0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d101      	bne.n	800baec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bae8:	2303      	movs	r3, #3
 800baea:	e01f      	b.n	800bb2c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2200      	movs	r2, #0
 800baf0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2200      	movs	r2, #0
 800baf8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2200      	movs	r2, #0
 800bb00:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d003      	beq.n	800bb12 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	68ba      	ldr	r2, [r7, #8]
 800bb0e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2201      	movs	r2, #1
 800bb16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	79fa      	ldrb	r2, [r7, #7]
 800bb1e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bb20:	68f8      	ldr	r0, [r7, #12]
 800bb22:	f004 fa59 	bl	800ffd8 <USBD_LL_Init>
 800bb26:	4603      	mov	r3, r0
 800bb28:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bb2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3718      	adds	r7, #24
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b084      	sub	sp, #16
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d101      	bne.n	800bb4c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bb48:	2303      	movs	r3, #3
 800bb4a:	e025      	b.n	800bb98 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	683a      	ldr	r2, [r7, #0]
 800bb50:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	32ae      	adds	r2, #174	@ 0xae
 800bb5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d00f      	beq.n	800bb88 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	32ae      	adds	r2, #174	@ 0xae
 800bb72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb78:	f107 020e 	add.w	r2, r7, #14
 800bb7c:	4610      	mov	r0, r2
 800bb7e:	4798      	blx	r3
 800bb80:	4602      	mov	r2, r0
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bb8e:	1c5a      	adds	r2, r3, #1
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800bb96:	2300      	movs	r3, #0
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3710      	adds	r7, #16
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b082      	sub	sp, #8
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f004 fa61 	bl	8010070 <USBD_LL_Start>
 800bbae:	4603      	mov	r3, r0
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3708      	adds	r7, #8
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b083      	sub	sp, #12
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bbc0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	370c      	adds	r7, #12
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbcc:	4770      	bx	lr

0800bbce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bbce:	b580      	push	{r7, lr}
 800bbd0:	b084      	sub	sp, #16
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	6078      	str	r0, [r7, #4]
 800bbd6:	460b      	mov	r3, r1
 800bbd8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d009      	beq.n	800bbfc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	78fa      	ldrb	r2, [r7, #3]
 800bbf2:	4611      	mov	r1, r2
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	4798      	blx	r3
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bbfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3710      	adds	r7, #16
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}

0800bc06 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc06:	b580      	push	{r7, lr}
 800bc08:	b084      	sub	sp, #16
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	6078      	str	r0, [r7, #4]
 800bc0e:	460b      	mov	r3, r1
 800bc10:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc12:	2300      	movs	r3, #0
 800bc14:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	78fa      	ldrb	r2, [r7, #3]
 800bc20:	4611      	mov	r1, r2
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	4798      	blx	r3
 800bc26:	4603      	mov	r3, r0
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d001      	beq.n	800bc30 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bc2c:	2303      	movs	r3, #3
 800bc2e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bc30:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3710      	adds	r7, #16
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}

0800bc3a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bc3a:	b580      	push	{r7, lr}
 800bc3c:	b084      	sub	sp, #16
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
 800bc42:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bc4a:	6839      	ldr	r1, [r7, #0]
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f001 f906 	bl	800ce5e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2201      	movs	r2, #1
 800bc56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800bc60:	461a      	mov	r2, r3
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bc6e:	f003 031f 	and.w	r3, r3, #31
 800bc72:	2b02      	cmp	r3, #2
 800bc74:	d01a      	beq.n	800bcac <USBD_LL_SetupStage+0x72>
 800bc76:	2b02      	cmp	r3, #2
 800bc78:	d822      	bhi.n	800bcc0 <USBD_LL_SetupStage+0x86>
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d002      	beq.n	800bc84 <USBD_LL_SetupStage+0x4a>
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	d00a      	beq.n	800bc98 <USBD_LL_SetupStage+0x5e>
 800bc82:	e01d      	b.n	800bcc0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f000 fb5d 	bl	800c34c <USBD_StdDevReq>
 800bc92:	4603      	mov	r3, r0
 800bc94:	73fb      	strb	r3, [r7, #15]
      break;
 800bc96:	e020      	b.n	800bcda <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bc9e:	4619      	mov	r1, r3
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f000 fbc5 	bl	800c430 <USBD_StdItfReq>
 800bca6:	4603      	mov	r3, r0
 800bca8:	73fb      	strb	r3, [r7, #15]
      break;
 800bcaa:	e016      	b.n	800bcda <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bcb2:	4619      	mov	r1, r3
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f000 fc27 	bl	800c508 <USBD_StdEPReq>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	73fb      	strb	r3, [r7, #15]
      break;
 800bcbe:	e00c      	b.n	800bcda <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bcc6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bcca:	b2db      	uxtb	r3, r3
 800bccc:	4619      	mov	r1, r3
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f004 fa2e 	bl	8010130 <USBD_LL_StallEP>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	73fb      	strb	r3, [r7, #15]
      break;
 800bcd8:	bf00      	nop
  }

  return ret;
 800bcda:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3710      	adds	r7, #16
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b086      	sub	sp, #24
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	60f8      	str	r0, [r7, #12]
 800bcec:	460b      	mov	r3, r1
 800bcee:	607a      	str	r2, [r7, #4]
 800bcf0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800bcf6:	7afb      	ldrb	r3, [r7, #11]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d16e      	bne.n	800bdda <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800bd02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bd0a:	2b03      	cmp	r3, #3
 800bd0c:	f040 8098 	bne.w	800be40 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	689a      	ldr	r2, [r3, #8]
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	68db      	ldr	r3, [r3, #12]
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	d913      	bls.n	800bd44 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	689a      	ldr	r2, [r3, #8]
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	68db      	ldr	r3, [r3, #12]
 800bd24:	1ad2      	subs	r2, r2, r3
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	68da      	ldr	r2, [r3, #12]
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	689b      	ldr	r3, [r3, #8]
 800bd32:	4293      	cmp	r3, r2
 800bd34:	bf28      	it	cs
 800bd36:	4613      	movcs	r3, r2
 800bd38:	461a      	mov	r2, r3
 800bd3a:	6879      	ldr	r1, [r7, #4]
 800bd3c:	68f8      	ldr	r0, [r7, #12]
 800bd3e:	f001 f982 	bl	800d046 <USBD_CtlContinueRx>
 800bd42:	e07d      	b.n	800be40 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bd4a:	f003 031f 	and.w	r3, r3, #31
 800bd4e:	2b02      	cmp	r3, #2
 800bd50:	d014      	beq.n	800bd7c <USBD_LL_DataOutStage+0x98>
 800bd52:	2b02      	cmp	r3, #2
 800bd54:	d81d      	bhi.n	800bd92 <USBD_LL_DataOutStage+0xae>
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d002      	beq.n	800bd60 <USBD_LL_DataOutStage+0x7c>
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	d003      	beq.n	800bd66 <USBD_LL_DataOutStage+0x82>
 800bd5e:	e018      	b.n	800bd92 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bd60:	2300      	movs	r3, #0
 800bd62:	75bb      	strb	r3, [r7, #22]
            break;
 800bd64:	e018      	b.n	800bd98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	4619      	mov	r1, r3
 800bd70:	68f8      	ldr	r0, [r7, #12]
 800bd72:	f000 fa5e 	bl	800c232 <USBD_CoreFindIF>
 800bd76:	4603      	mov	r3, r0
 800bd78:	75bb      	strb	r3, [r7, #22]
            break;
 800bd7a:	e00d      	b.n	800bd98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bd82:	b2db      	uxtb	r3, r3
 800bd84:	4619      	mov	r1, r3
 800bd86:	68f8      	ldr	r0, [r7, #12]
 800bd88:	f000 fa60 	bl	800c24c <USBD_CoreFindEP>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	75bb      	strb	r3, [r7, #22]
            break;
 800bd90:	e002      	b.n	800bd98 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bd92:	2300      	movs	r3, #0
 800bd94:	75bb      	strb	r3, [r7, #22]
            break;
 800bd96:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bd98:	7dbb      	ldrb	r3, [r7, #22]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d119      	bne.n	800bdd2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bda4:	b2db      	uxtb	r3, r3
 800bda6:	2b03      	cmp	r3, #3
 800bda8:	d113      	bne.n	800bdd2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bdaa:	7dba      	ldrb	r2, [r7, #22]
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	32ae      	adds	r2, #174	@ 0xae
 800bdb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdb4:	691b      	ldr	r3, [r3, #16]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d00b      	beq.n	800bdd2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800bdba:	7dba      	ldrb	r2, [r7, #22]
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bdc2:	7dba      	ldrb	r2, [r7, #22]
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	32ae      	adds	r2, #174	@ 0xae
 800bdc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdcc:	691b      	ldr	r3, [r3, #16]
 800bdce:	68f8      	ldr	r0, [r7, #12]
 800bdd0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bdd2:	68f8      	ldr	r0, [r7, #12]
 800bdd4:	f001 f948 	bl	800d068 <USBD_CtlSendStatus>
 800bdd8:	e032      	b.n	800be40 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bdda:	7afb      	ldrb	r3, [r7, #11]
 800bddc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bde0:	b2db      	uxtb	r3, r3
 800bde2:	4619      	mov	r1, r3
 800bde4:	68f8      	ldr	r0, [r7, #12]
 800bde6:	f000 fa31 	bl	800c24c <USBD_CoreFindEP>
 800bdea:	4603      	mov	r3, r0
 800bdec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bdee:	7dbb      	ldrb	r3, [r7, #22]
 800bdf0:	2bff      	cmp	r3, #255	@ 0xff
 800bdf2:	d025      	beq.n	800be40 <USBD_LL_DataOutStage+0x15c>
 800bdf4:	7dbb      	ldrb	r3, [r7, #22]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d122      	bne.n	800be40 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be00:	b2db      	uxtb	r3, r3
 800be02:	2b03      	cmp	r3, #3
 800be04:	d117      	bne.n	800be36 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800be06:	7dba      	ldrb	r2, [r7, #22]
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	32ae      	adds	r2, #174	@ 0xae
 800be0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be10:	699b      	ldr	r3, [r3, #24]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d00f      	beq.n	800be36 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800be16:	7dba      	ldrb	r2, [r7, #22]
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800be1e:	7dba      	ldrb	r2, [r7, #22]
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	32ae      	adds	r2, #174	@ 0xae
 800be24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be28:	699b      	ldr	r3, [r3, #24]
 800be2a:	7afa      	ldrb	r2, [r7, #11]
 800be2c:	4611      	mov	r1, r2
 800be2e:	68f8      	ldr	r0, [r7, #12]
 800be30:	4798      	blx	r3
 800be32:	4603      	mov	r3, r0
 800be34:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800be36:	7dfb      	ldrb	r3, [r7, #23]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d001      	beq.n	800be40 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800be3c:	7dfb      	ldrb	r3, [r7, #23]
 800be3e:	e000      	b.n	800be42 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800be40:	2300      	movs	r3, #0
}
 800be42:	4618      	mov	r0, r3
 800be44:	3718      	adds	r7, #24
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}

0800be4a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800be4a:	b580      	push	{r7, lr}
 800be4c:	b086      	sub	sp, #24
 800be4e:	af00      	add	r7, sp, #0
 800be50:	60f8      	str	r0, [r7, #12]
 800be52:	460b      	mov	r3, r1
 800be54:	607a      	str	r2, [r7, #4]
 800be56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800be58:	7afb      	ldrb	r3, [r7, #11]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d16f      	bne.n	800bf3e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	3314      	adds	r3, #20
 800be62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800be6a:	2b02      	cmp	r3, #2
 800be6c:	d15a      	bne.n	800bf24 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	689a      	ldr	r2, [r3, #8]
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	68db      	ldr	r3, [r3, #12]
 800be76:	429a      	cmp	r2, r3
 800be78:	d914      	bls.n	800bea4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	689a      	ldr	r2, [r3, #8]
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	68db      	ldr	r3, [r3, #12]
 800be82:	1ad2      	subs	r2, r2, r3
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	689b      	ldr	r3, [r3, #8]
 800be8c:	461a      	mov	r2, r3
 800be8e:	6879      	ldr	r1, [r7, #4]
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f001 f8aa 	bl	800cfea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800be96:	2300      	movs	r3, #0
 800be98:	2200      	movs	r2, #0
 800be9a:	2100      	movs	r1, #0
 800be9c:	68f8      	ldr	r0, [r7, #12]
 800be9e:	f004 f9f1 	bl	8010284 <USBD_LL_PrepareReceive>
 800bea2:	e03f      	b.n	800bf24 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	68da      	ldr	r2, [r3, #12]
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	689b      	ldr	r3, [r3, #8]
 800beac:	429a      	cmp	r2, r3
 800beae:	d11c      	bne.n	800beea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	685a      	ldr	r2, [r3, #4]
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800beb8:	429a      	cmp	r2, r3
 800beba:	d316      	bcc.n	800beea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bebc:	693b      	ldr	r3, [r7, #16]
 800bebe:	685a      	ldr	r2, [r3, #4]
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d20f      	bcs.n	800beea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800beca:	2200      	movs	r2, #0
 800becc:	2100      	movs	r1, #0
 800bece:	68f8      	ldr	r0, [r7, #12]
 800bed0:	f001 f88b 	bl	800cfea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	2200      	movs	r2, #0
 800bed8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bedc:	2300      	movs	r3, #0
 800bede:	2200      	movs	r2, #0
 800bee0:	2100      	movs	r1, #0
 800bee2:	68f8      	ldr	r0, [r7, #12]
 800bee4:	f004 f9ce 	bl	8010284 <USBD_LL_PrepareReceive>
 800bee8:	e01c      	b.n	800bf24 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bef0:	b2db      	uxtb	r3, r3
 800bef2:	2b03      	cmp	r3, #3
 800bef4:	d10f      	bne.n	800bf16 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800befc:	68db      	ldr	r3, [r3, #12]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d009      	beq.n	800bf16 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	2200      	movs	r2, #0
 800bf06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf10:	68db      	ldr	r3, [r3, #12]
 800bf12:	68f8      	ldr	r0, [r7, #12]
 800bf14:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf16:	2180      	movs	r1, #128	@ 0x80
 800bf18:	68f8      	ldr	r0, [r7, #12]
 800bf1a:	f004 f909 	bl	8010130 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bf1e:	68f8      	ldr	r0, [r7, #12]
 800bf20:	f001 f8b5 	bl	800d08e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d03a      	beq.n	800bfa4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bf2e:	68f8      	ldr	r0, [r7, #12]
 800bf30:	f7ff fe42 	bl	800bbb8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2200      	movs	r2, #0
 800bf38:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bf3c:	e032      	b.n	800bfa4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bf3e:	7afb      	ldrb	r3, [r7, #11]
 800bf40:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bf44:	b2db      	uxtb	r3, r3
 800bf46:	4619      	mov	r1, r3
 800bf48:	68f8      	ldr	r0, [r7, #12]
 800bf4a:	f000 f97f 	bl	800c24c <USBD_CoreFindEP>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf52:	7dfb      	ldrb	r3, [r7, #23]
 800bf54:	2bff      	cmp	r3, #255	@ 0xff
 800bf56:	d025      	beq.n	800bfa4 <USBD_LL_DataInStage+0x15a>
 800bf58:	7dfb      	ldrb	r3, [r7, #23]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d122      	bne.n	800bfa4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf64:	b2db      	uxtb	r3, r3
 800bf66:	2b03      	cmp	r3, #3
 800bf68:	d11c      	bne.n	800bfa4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bf6a:	7dfa      	ldrb	r2, [r7, #23]
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	32ae      	adds	r2, #174	@ 0xae
 800bf70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf74:	695b      	ldr	r3, [r3, #20]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d014      	beq.n	800bfa4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bf7a:	7dfa      	ldrb	r2, [r7, #23]
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bf82:	7dfa      	ldrb	r2, [r7, #23]
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	32ae      	adds	r2, #174	@ 0xae
 800bf88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf8c:	695b      	ldr	r3, [r3, #20]
 800bf8e:	7afa      	ldrb	r2, [r7, #11]
 800bf90:	4611      	mov	r1, r2
 800bf92:	68f8      	ldr	r0, [r7, #12]
 800bf94:	4798      	blx	r3
 800bf96:	4603      	mov	r3, r0
 800bf98:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bf9a:	7dbb      	ldrb	r3, [r7, #22]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d001      	beq.n	800bfa4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bfa0:	7dbb      	ldrb	r3, [r7, #22]
 800bfa2:	e000      	b.n	800bfa6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bfa4:	2300      	movs	r3, #0
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	3718      	adds	r7, #24
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}

0800bfae <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bfae:	b580      	push	{r7, lr}
 800bfb0:	b084      	sub	sp, #16
 800bfb2:	af00      	add	r7, sp, #0
 800bfb4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2201      	movs	r2, #1
 800bfbe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d014      	beq.n	800c014 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d00e      	beq.n	800c014 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bffc:	685b      	ldr	r3, [r3, #4]
 800bffe:	687a      	ldr	r2, [r7, #4]
 800c000:	6852      	ldr	r2, [r2, #4]
 800c002:	b2d2      	uxtb	r2, r2
 800c004:	4611      	mov	r1, r2
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	4798      	blx	r3
 800c00a:	4603      	mov	r3, r0
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d001      	beq.n	800c014 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c010:	2303      	movs	r3, #3
 800c012:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c014:	2340      	movs	r3, #64	@ 0x40
 800c016:	2200      	movs	r2, #0
 800c018:	2100      	movs	r1, #0
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f004 f843 	bl	80100a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2201      	movs	r2, #1
 800c024:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2240      	movs	r2, #64	@ 0x40
 800c02c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c030:	2340      	movs	r3, #64	@ 0x40
 800c032:	2200      	movs	r2, #0
 800c034:	2180      	movs	r1, #128	@ 0x80
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f004 f835 	bl	80100a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2201      	movs	r2, #1
 800c040:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2240      	movs	r2, #64	@ 0x40
 800c046:	621a      	str	r2, [r3, #32]

  return ret;
 800c048:	7bfb      	ldrb	r3, [r7, #15]
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3710      	adds	r7, #16
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}

0800c052 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c052:	b480      	push	{r7}
 800c054:	b083      	sub	sp, #12
 800c056:	af00      	add	r7, sp, #0
 800c058:	6078      	str	r0, [r7, #4]
 800c05a:	460b      	mov	r3, r1
 800c05c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	78fa      	ldrb	r2, [r7, #3]
 800c062:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c064:	2300      	movs	r3, #0
}
 800c066:	4618      	mov	r0, r3
 800c068:	370c      	adds	r7, #12
 800c06a:	46bd      	mov	sp, r7
 800c06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c070:	4770      	bx	lr

0800c072 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c072:	b480      	push	{r7}
 800c074:	b083      	sub	sp, #12
 800c076:	af00      	add	r7, sp, #0
 800c078:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c080:	b2da      	uxtb	r2, r3
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2204      	movs	r2, #4
 800c08c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c090:	2300      	movs	r3, #0
}
 800c092:	4618      	mov	r0, r3
 800c094:	370c      	adds	r7, #12
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr

0800c09e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c09e:	b480      	push	{r7}
 800c0a0:	b083      	sub	sp, #12
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0ac:	b2db      	uxtb	r3, r3
 800c0ae:	2b04      	cmp	r3, #4
 800c0b0:	d106      	bne.n	800c0c0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c0b8:	b2da      	uxtb	r2, r3
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c0c0:	2300      	movs	r3, #0
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	370c      	adds	r7, #12
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0cc:	4770      	bx	lr

0800c0ce <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c0ce:	b580      	push	{r7, lr}
 800c0d0:	b082      	sub	sp, #8
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0dc:	b2db      	uxtb	r3, r3
 800c0de:	2b03      	cmp	r3, #3
 800c0e0:	d110      	bne.n	800c104 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d00b      	beq.n	800c104 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0f2:	69db      	ldr	r3, [r3, #28]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d005      	beq.n	800c104 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0fe:	69db      	ldr	r3, [r3, #28]
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c104:	2300      	movs	r3, #0
}
 800c106:	4618      	mov	r0, r3
 800c108:	3708      	adds	r7, #8
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}

0800c10e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c10e:	b580      	push	{r7, lr}
 800c110:	b082      	sub	sp, #8
 800c112:	af00      	add	r7, sp, #0
 800c114:	6078      	str	r0, [r7, #4]
 800c116:	460b      	mov	r3, r1
 800c118:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	32ae      	adds	r2, #174	@ 0xae
 800c124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d101      	bne.n	800c130 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c12c:	2303      	movs	r3, #3
 800c12e:	e01c      	b.n	800c16a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c136:	b2db      	uxtb	r3, r3
 800c138:	2b03      	cmp	r3, #3
 800c13a:	d115      	bne.n	800c168 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	32ae      	adds	r2, #174	@ 0xae
 800c146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c14a:	6a1b      	ldr	r3, [r3, #32]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d00b      	beq.n	800c168 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	32ae      	adds	r2, #174	@ 0xae
 800c15a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c15e:	6a1b      	ldr	r3, [r3, #32]
 800c160:	78fa      	ldrb	r2, [r7, #3]
 800c162:	4611      	mov	r1, r2
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c168:	2300      	movs	r3, #0
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3708      	adds	r7, #8
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}

0800c172 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c172:	b580      	push	{r7, lr}
 800c174:	b082      	sub	sp, #8
 800c176:	af00      	add	r7, sp, #0
 800c178:	6078      	str	r0, [r7, #4]
 800c17a:	460b      	mov	r3, r1
 800c17c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	32ae      	adds	r2, #174	@ 0xae
 800c188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d101      	bne.n	800c194 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c190:	2303      	movs	r3, #3
 800c192:	e01c      	b.n	800c1ce <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c19a:	b2db      	uxtb	r3, r3
 800c19c:	2b03      	cmp	r3, #3
 800c19e:	d115      	bne.n	800c1cc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	32ae      	adds	r2, #174	@ 0xae
 800c1aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d00b      	beq.n	800c1cc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	32ae      	adds	r2, #174	@ 0xae
 800c1be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1c4:	78fa      	ldrb	r2, [r7, #3]
 800c1c6:	4611      	mov	r1, r2
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c1cc:	2300      	movs	r3, #0
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3708      	adds	r7, #8
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}

0800c1d6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c1d6:	b480      	push	{r7}
 800c1d8:	b083      	sub	sp, #12
 800c1da:	af00      	add	r7, sp, #0
 800c1dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c1de:	2300      	movs	r3, #0
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	370c      	adds	r7, #12
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ea:	4770      	bx	lr

0800c1ec <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b084      	sub	sp, #16
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c206:	2b00      	cmp	r3, #0
 800c208:	d00e      	beq.n	800c228 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	6852      	ldr	r2, [r2, #4]
 800c216:	b2d2      	uxtb	r2, r2
 800c218:	4611      	mov	r1, r2
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	4798      	blx	r3
 800c21e:	4603      	mov	r3, r0
 800c220:	2b00      	cmp	r3, #0
 800c222:	d001      	beq.n	800c228 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c224:	2303      	movs	r3, #3
 800c226:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c228:	7bfb      	ldrb	r3, [r7, #15]
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3710      	adds	r7, #16
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}

0800c232 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c232:	b480      	push	{r7}
 800c234:	b083      	sub	sp, #12
 800c236:	af00      	add	r7, sp, #0
 800c238:	6078      	str	r0, [r7, #4]
 800c23a:	460b      	mov	r3, r1
 800c23c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c23e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c240:	4618      	mov	r0, r3
 800c242:	370c      	adds	r7, #12
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr

0800c24c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b083      	sub	sp, #12
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	460b      	mov	r3, r1
 800c256:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c258:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	370c      	adds	r7, #12
 800c25e:	46bd      	mov	sp, r7
 800c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c264:	4770      	bx	lr

0800c266 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c266:	b580      	push	{r7, lr}
 800c268:	b086      	sub	sp, #24
 800c26a:	af00      	add	r7, sp, #0
 800c26c:	6078      	str	r0, [r7, #4]
 800c26e:	460b      	mov	r3, r1
 800c270:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c27a:	2300      	movs	r3, #0
 800c27c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	885b      	ldrh	r3, [r3, #2]
 800c282:	b29b      	uxth	r3, r3
 800c284:	68fa      	ldr	r2, [r7, #12]
 800c286:	7812      	ldrb	r2, [r2, #0]
 800c288:	4293      	cmp	r3, r2
 800c28a:	d91f      	bls.n	800c2cc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	781b      	ldrb	r3, [r3, #0]
 800c290:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c292:	e013      	b.n	800c2bc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c294:	f107 030a 	add.w	r3, r7, #10
 800c298:	4619      	mov	r1, r3
 800c29a:	6978      	ldr	r0, [r7, #20]
 800c29c:	f000 f81b 	bl	800c2d6 <USBD_GetNextDesc>
 800c2a0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	785b      	ldrb	r3, [r3, #1]
 800c2a6:	2b05      	cmp	r3, #5
 800c2a8:	d108      	bne.n	800c2bc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	789b      	ldrb	r3, [r3, #2]
 800c2b2:	78fa      	ldrb	r2, [r7, #3]
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d008      	beq.n	800c2ca <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	885b      	ldrh	r3, [r3, #2]
 800c2c0:	b29a      	uxth	r2, r3
 800c2c2:	897b      	ldrh	r3, [r7, #10]
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	d8e5      	bhi.n	800c294 <USBD_GetEpDesc+0x2e>
 800c2c8:	e000      	b.n	800c2cc <USBD_GetEpDesc+0x66>
          break;
 800c2ca:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c2cc:	693b      	ldr	r3, [r7, #16]
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3718      	adds	r7, #24
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}

0800c2d6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c2d6:	b480      	push	{r7}
 800c2d8:	b085      	sub	sp, #20
 800c2da:	af00      	add	r7, sp, #0
 800c2dc:	6078      	str	r0, [r7, #4]
 800c2de:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	881b      	ldrh	r3, [r3, #0]
 800c2e8:	68fa      	ldr	r2, [r7, #12]
 800c2ea:	7812      	ldrb	r2, [r2, #0]
 800c2ec:	4413      	add	r3, r2
 800c2ee:	b29a      	uxth	r2, r3
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	4413      	add	r3, r2
 800c2fe:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c300:	68fb      	ldr	r3, [r7, #12]
}
 800c302:	4618      	mov	r0, r3
 800c304:	3714      	adds	r7, #20
 800c306:	46bd      	mov	sp, r7
 800c308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30c:	4770      	bx	lr

0800c30e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c30e:	b480      	push	{r7}
 800c310:	b087      	sub	sp, #28
 800c312:	af00      	add	r7, sp, #0
 800c314:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	3301      	adds	r3, #1
 800c324:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	781b      	ldrb	r3, [r3, #0]
 800c32a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c32c:	8a3b      	ldrh	r3, [r7, #16]
 800c32e:	021b      	lsls	r3, r3, #8
 800c330:	b21a      	sxth	r2, r3
 800c332:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c336:	4313      	orrs	r3, r2
 800c338:	b21b      	sxth	r3, r3
 800c33a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c33c:	89fb      	ldrh	r3, [r7, #14]
}
 800c33e:	4618      	mov	r0, r3
 800c340:	371c      	adds	r7, #28
 800c342:	46bd      	mov	sp, r7
 800c344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c348:	4770      	bx	lr
	...

0800c34c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b084      	sub	sp, #16
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c356:	2300      	movs	r3, #0
 800c358:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c362:	2b40      	cmp	r3, #64	@ 0x40
 800c364:	d005      	beq.n	800c372 <USBD_StdDevReq+0x26>
 800c366:	2b40      	cmp	r3, #64	@ 0x40
 800c368:	d857      	bhi.n	800c41a <USBD_StdDevReq+0xce>
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d00f      	beq.n	800c38e <USBD_StdDevReq+0x42>
 800c36e:	2b20      	cmp	r3, #32
 800c370:	d153      	bne.n	800c41a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	32ae      	adds	r2, #174	@ 0xae
 800c37c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c380:	689b      	ldr	r3, [r3, #8]
 800c382:	6839      	ldr	r1, [r7, #0]
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	4798      	blx	r3
 800c388:	4603      	mov	r3, r0
 800c38a:	73fb      	strb	r3, [r7, #15]
      break;
 800c38c:	e04a      	b.n	800c424 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	785b      	ldrb	r3, [r3, #1]
 800c392:	2b09      	cmp	r3, #9
 800c394:	d83b      	bhi.n	800c40e <USBD_StdDevReq+0xc2>
 800c396:	a201      	add	r2, pc, #4	@ (adr r2, 800c39c <USBD_StdDevReq+0x50>)
 800c398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c39c:	0800c3f1 	.word	0x0800c3f1
 800c3a0:	0800c405 	.word	0x0800c405
 800c3a4:	0800c40f 	.word	0x0800c40f
 800c3a8:	0800c3fb 	.word	0x0800c3fb
 800c3ac:	0800c40f 	.word	0x0800c40f
 800c3b0:	0800c3cf 	.word	0x0800c3cf
 800c3b4:	0800c3c5 	.word	0x0800c3c5
 800c3b8:	0800c40f 	.word	0x0800c40f
 800c3bc:	0800c3e7 	.word	0x0800c3e7
 800c3c0:	0800c3d9 	.word	0x0800c3d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c3c4:	6839      	ldr	r1, [r7, #0]
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f000 fa3c 	bl	800c844 <USBD_GetDescriptor>
          break;
 800c3cc:	e024      	b.n	800c418 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c3ce:	6839      	ldr	r1, [r7, #0]
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f000 fba1 	bl	800cb18 <USBD_SetAddress>
          break;
 800c3d6:	e01f      	b.n	800c418 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c3d8:	6839      	ldr	r1, [r7, #0]
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f000 fbe0 	bl	800cba0 <USBD_SetConfig>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	73fb      	strb	r3, [r7, #15]
          break;
 800c3e4:	e018      	b.n	800c418 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c3e6:	6839      	ldr	r1, [r7, #0]
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f000 fc83 	bl	800ccf4 <USBD_GetConfig>
          break;
 800c3ee:	e013      	b.n	800c418 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c3f0:	6839      	ldr	r1, [r7, #0]
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f000 fcb4 	bl	800cd60 <USBD_GetStatus>
          break;
 800c3f8:	e00e      	b.n	800c418 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c3fa:	6839      	ldr	r1, [r7, #0]
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f000 fce3 	bl	800cdc8 <USBD_SetFeature>
          break;
 800c402:	e009      	b.n	800c418 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c404:	6839      	ldr	r1, [r7, #0]
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f000 fd07 	bl	800ce1a <USBD_ClrFeature>
          break;
 800c40c:	e004      	b.n	800c418 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c40e:	6839      	ldr	r1, [r7, #0]
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f000 fd5e 	bl	800ced2 <USBD_CtlError>
          break;
 800c416:	bf00      	nop
      }
      break;
 800c418:	e004      	b.n	800c424 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c41a:	6839      	ldr	r1, [r7, #0]
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f000 fd58 	bl	800ced2 <USBD_CtlError>
      break;
 800c422:	bf00      	nop
  }

  return ret;
 800c424:	7bfb      	ldrb	r3, [r7, #15]
}
 800c426:	4618      	mov	r0, r3
 800c428:	3710      	adds	r7, #16
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}
 800c42e:	bf00      	nop

0800c430 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b084      	sub	sp, #16
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c43a:	2300      	movs	r3, #0
 800c43c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	781b      	ldrb	r3, [r3, #0]
 800c442:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c446:	2b40      	cmp	r3, #64	@ 0x40
 800c448:	d005      	beq.n	800c456 <USBD_StdItfReq+0x26>
 800c44a:	2b40      	cmp	r3, #64	@ 0x40
 800c44c:	d852      	bhi.n	800c4f4 <USBD_StdItfReq+0xc4>
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d001      	beq.n	800c456 <USBD_StdItfReq+0x26>
 800c452:	2b20      	cmp	r3, #32
 800c454:	d14e      	bne.n	800c4f4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c45c:	b2db      	uxtb	r3, r3
 800c45e:	3b01      	subs	r3, #1
 800c460:	2b02      	cmp	r3, #2
 800c462:	d840      	bhi.n	800c4e6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	889b      	ldrh	r3, [r3, #4]
 800c468:	b2db      	uxtb	r3, r3
 800c46a:	2b01      	cmp	r3, #1
 800c46c:	d836      	bhi.n	800c4dc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	889b      	ldrh	r3, [r3, #4]
 800c472:	b2db      	uxtb	r3, r3
 800c474:	4619      	mov	r1, r3
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f7ff fedb 	bl	800c232 <USBD_CoreFindIF>
 800c47c:	4603      	mov	r3, r0
 800c47e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c480:	7bbb      	ldrb	r3, [r7, #14]
 800c482:	2bff      	cmp	r3, #255	@ 0xff
 800c484:	d01d      	beq.n	800c4c2 <USBD_StdItfReq+0x92>
 800c486:	7bbb      	ldrb	r3, [r7, #14]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d11a      	bne.n	800c4c2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c48c:	7bba      	ldrb	r2, [r7, #14]
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	32ae      	adds	r2, #174	@ 0xae
 800c492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c496:	689b      	ldr	r3, [r3, #8]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d00f      	beq.n	800c4bc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c49c:	7bba      	ldrb	r2, [r7, #14]
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c4a4:	7bba      	ldrb	r2, [r7, #14]
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	32ae      	adds	r2, #174	@ 0xae
 800c4aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4ae:	689b      	ldr	r3, [r3, #8]
 800c4b0:	6839      	ldr	r1, [r7, #0]
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	4798      	blx	r3
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c4ba:	e004      	b.n	800c4c6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c4bc:	2303      	movs	r3, #3
 800c4be:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c4c0:	e001      	b.n	800c4c6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c4c2:	2303      	movs	r3, #3
 800c4c4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	88db      	ldrh	r3, [r3, #6]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d110      	bne.n	800c4f0 <USBD_StdItfReq+0xc0>
 800c4ce:	7bfb      	ldrb	r3, [r7, #15]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d10d      	bne.n	800c4f0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f000 fdc7 	bl	800d068 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c4da:	e009      	b.n	800c4f0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c4dc:	6839      	ldr	r1, [r7, #0]
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f000 fcf7 	bl	800ced2 <USBD_CtlError>
          break;
 800c4e4:	e004      	b.n	800c4f0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c4e6:	6839      	ldr	r1, [r7, #0]
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f000 fcf2 	bl	800ced2 <USBD_CtlError>
          break;
 800c4ee:	e000      	b.n	800c4f2 <USBD_StdItfReq+0xc2>
          break;
 800c4f0:	bf00      	nop
      }
      break;
 800c4f2:	e004      	b.n	800c4fe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c4f4:	6839      	ldr	r1, [r7, #0]
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f000 fceb 	bl	800ced2 <USBD_CtlError>
      break;
 800c4fc:	bf00      	nop
  }

  return ret;
 800c4fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800c500:	4618      	mov	r0, r3
 800c502:	3710      	adds	r7, #16
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}

0800c508 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b084      	sub	sp, #16
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c512:	2300      	movs	r3, #0
 800c514:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	889b      	ldrh	r3, [r3, #4]
 800c51a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	781b      	ldrb	r3, [r3, #0]
 800c520:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c524:	2b40      	cmp	r3, #64	@ 0x40
 800c526:	d007      	beq.n	800c538 <USBD_StdEPReq+0x30>
 800c528:	2b40      	cmp	r3, #64	@ 0x40
 800c52a:	f200 817f 	bhi.w	800c82c <USBD_StdEPReq+0x324>
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d02a      	beq.n	800c588 <USBD_StdEPReq+0x80>
 800c532:	2b20      	cmp	r3, #32
 800c534:	f040 817a 	bne.w	800c82c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c538:	7bbb      	ldrb	r3, [r7, #14]
 800c53a:	4619      	mov	r1, r3
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f7ff fe85 	bl	800c24c <USBD_CoreFindEP>
 800c542:	4603      	mov	r3, r0
 800c544:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c546:	7b7b      	ldrb	r3, [r7, #13]
 800c548:	2bff      	cmp	r3, #255	@ 0xff
 800c54a:	f000 8174 	beq.w	800c836 <USBD_StdEPReq+0x32e>
 800c54e:	7b7b      	ldrb	r3, [r7, #13]
 800c550:	2b00      	cmp	r3, #0
 800c552:	f040 8170 	bne.w	800c836 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c556:	7b7a      	ldrb	r2, [r7, #13]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c55e:	7b7a      	ldrb	r2, [r7, #13]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	32ae      	adds	r2, #174	@ 0xae
 800c564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c568:	689b      	ldr	r3, [r3, #8]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	f000 8163 	beq.w	800c836 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c570:	7b7a      	ldrb	r2, [r7, #13]
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	32ae      	adds	r2, #174	@ 0xae
 800c576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c57a:	689b      	ldr	r3, [r3, #8]
 800c57c:	6839      	ldr	r1, [r7, #0]
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	4798      	blx	r3
 800c582:	4603      	mov	r3, r0
 800c584:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c586:	e156      	b.n	800c836 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	785b      	ldrb	r3, [r3, #1]
 800c58c:	2b03      	cmp	r3, #3
 800c58e:	d008      	beq.n	800c5a2 <USBD_StdEPReq+0x9a>
 800c590:	2b03      	cmp	r3, #3
 800c592:	f300 8145 	bgt.w	800c820 <USBD_StdEPReq+0x318>
 800c596:	2b00      	cmp	r3, #0
 800c598:	f000 809b 	beq.w	800c6d2 <USBD_StdEPReq+0x1ca>
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d03c      	beq.n	800c61a <USBD_StdEPReq+0x112>
 800c5a0:	e13e      	b.n	800c820 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5a8:	b2db      	uxtb	r3, r3
 800c5aa:	2b02      	cmp	r3, #2
 800c5ac:	d002      	beq.n	800c5b4 <USBD_StdEPReq+0xac>
 800c5ae:	2b03      	cmp	r3, #3
 800c5b0:	d016      	beq.n	800c5e0 <USBD_StdEPReq+0xd8>
 800c5b2:	e02c      	b.n	800c60e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c5b4:	7bbb      	ldrb	r3, [r7, #14]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d00d      	beq.n	800c5d6 <USBD_StdEPReq+0xce>
 800c5ba:	7bbb      	ldrb	r3, [r7, #14]
 800c5bc:	2b80      	cmp	r3, #128	@ 0x80
 800c5be:	d00a      	beq.n	800c5d6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c5c0:	7bbb      	ldrb	r3, [r7, #14]
 800c5c2:	4619      	mov	r1, r3
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f003 fdb3 	bl	8010130 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c5ca:	2180      	movs	r1, #128	@ 0x80
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f003 fdaf 	bl	8010130 <USBD_LL_StallEP>
 800c5d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c5d4:	e020      	b.n	800c618 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c5d6:	6839      	ldr	r1, [r7, #0]
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f000 fc7a 	bl	800ced2 <USBD_CtlError>
              break;
 800c5de:	e01b      	b.n	800c618 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	885b      	ldrh	r3, [r3, #2]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d10e      	bne.n	800c606 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c5e8:	7bbb      	ldrb	r3, [r7, #14]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d00b      	beq.n	800c606 <USBD_StdEPReq+0xfe>
 800c5ee:	7bbb      	ldrb	r3, [r7, #14]
 800c5f0:	2b80      	cmp	r3, #128	@ 0x80
 800c5f2:	d008      	beq.n	800c606 <USBD_StdEPReq+0xfe>
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	88db      	ldrh	r3, [r3, #6]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d104      	bne.n	800c606 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c5fc:	7bbb      	ldrb	r3, [r7, #14]
 800c5fe:	4619      	mov	r1, r3
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f003 fd95 	bl	8010130 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f000 fd2e 	bl	800d068 <USBD_CtlSendStatus>

              break;
 800c60c:	e004      	b.n	800c618 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c60e:	6839      	ldr	r1, [r7, #0]
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f000 fc5e 	bl	800ced2 <USBD_CtlError>
              break;
 800c616:	bf00      	nop
          }
          break;
 800c618:	e107      	b.n	800c82a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c620:	b2db      	uxtb	r3, r3
 800c622:	2b02      	cmp	r3, #2
 800c624:	d002      	beq.n	800c62c <USBD_StdEPReq+0x124>
 800c626:	2b03      	cmp	r3, #3
 800c628:	d016      	beq.n	800c658 <USBD_StdEPReq+0x150>
 800c62a:	e04b      	b.n	800c6c4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c62c:	7bbb      	ldrb	r3, [r7, #14]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d00d      	beq.n	800c64e <USBD_StdEPReq+0x146>
 800c632:	7bbb      	ldrb	r3, [r7, #14]
 800c634:	2b80      	cmp	r3, #128	@ 0x80
 800c636:	d00a      	beq.n	800c64e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c638:	7bbb      	ldrb	r3, [r7, #14]
 800c63a:	4619      	mov	r1, r3
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f003 fd77 	bl	8010130 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c642:	2180      	movs	r1, #128	@ 0x80
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f003 fd73 	bl	8010130 <USBD_LL_StallEP>
 800c64a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c64c:	e040      	b.n	800c6d0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c64e:	6839      	ldr	r1, [r7, #0]
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f000 fc3e 	bl	800ced2 <USBD_CtlError>
              break;
 800c656:	e03b      	b.n	800c6d0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	885b      	ldrh	r3, [r3, #2]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d136      	bne.n	800c6ce <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c660:	7bbb      	ldrb	r3, [r7, #14]
 800c662:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c666:	2b00      	cmp	r3, #0
 800c668:	d004      	beq.n	800c674 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c66a:	7bbb      	ldrb	r3, [r7, #14]
 800c66c:	4619      	mov	r1, r3
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f003 fd7d 	bl	801016e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f000 fcf7 	bl	800d068 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c67a:	7bbb      	ldrb	r3, [r7, #14]
 800c67c:	4619      	mov	r1, r3
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f7ff fde4 	bl	800c24c <USBD_CoreFindEP>
 800c684:	4603      	mov	r3, r0
 800c686:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c688:	7b7b      	ldrb	r3, [r7, #13]
 800c68a:	2bff      	cmp	r3, #255	@ 0xff
 800c68c:	d01f      	beq.n	800c6ce <USBD_StdEPReq+0x1c6>
 800c68e:	7b7b      	ldrb	r3, [r7, #13]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d11c      	bne.n	800c6ce <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c694:	7b7a      	ldrb	r2, [r7, #13]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c69c:	7b7a      	ldrb	r2, [r7, #13]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	32ae      	adds	r2, #174	@ 0xae
 800c6a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6a6:	689b      	ldr	r3, [r3, #8]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d010      	beq.n	800c6ce <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c6ac:	7b7a      	ldrb	r2, [r7, #13]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	32ae      	adds	r2, #174	@ 0xae
 800c6b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6b6:	689b      	ldr	r3, [r3, #8]
 800c6b8:	6839      	ldr	r1, [r7, #0]
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	4798      	blx	r3
 800c6be:	4603      	mov	r3, r0
 800c6c0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c6c2:	e004      	b.n	800c6ce <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c6c4:	6839      	ldr	r1, [r7, #0]
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f000 fc03 	bl	800ced2 <USBD_CtlError>
              break;
 800c6cc:	e000      	b.n	800c6d0 <USBD_StdEPReq+0x1c8>
              break;
 800c6ce:	bf00      	nop
          }
          break;
 800c6d0:	e0ab      	b.n	800c82a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6d8:	b2db      	uxtb	r3, r3
 800c6da:	2b02      	cmp	r3, #2
 800c6dc:	d002      	beq.n	800c6e4 <USBD_StdEPReq+0x1dc>
 800c6de:	2b03      	cmp	r3, #3
 800c6e0:	d032      	beq.n	800c748 <USBD_StdEPReq+0x240>
 800c6e2:	e097      	b.n	800c814 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c6e4:	7bbb      	ldrb	r3, [r7, #14]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d007      	beq.n	800c6fa <USBD_StdEPReq+0x1f2>
 800c6ea:	7bbb      	ldrb	r3, [r7, #14]
 800c6ec:	2b80      	cmp	r3, #128	@ 0x80
 800c6ee:	d004      	beq.n	800c6fa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c6f0:	6839      	ldr	r1, [r7, #0]
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f000 fbed 	bl	800ced2 <USBD_CtlError>
                break;
 800c6f8:	e091      	b.n	800c81e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	da0b      	bge.n	800c71a <USBD_StdEPReq+0x212>
 800c702:	7bbb      	ldrb	r3, [r7, #14]
 800c704:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c708:	4613      	mov	r3, r2
 800c70a:	009b      	lsls	r3, r3, #2
 800c70c:	4413      	add	r3, r2
 800c70e:	009b      	lsls	r3, r3, #2
 800c710:	3310      	adds	r3, #16
 800c712:	687a      	ldr	r2, [r7, #4]
 800c714:	4413      	add	r3, r2
 800c716:	3304      	adds	r3, #4
 800c718:	e00b      	b.n	800c732 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c71a:	7bbb      	ldrb	r3, [r7, #14]
 800c71c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c720:	4613      	mov	r3, r2
 800c722:	009b      	lsls	r3, r3, #2
 800c724:	4413      	add	r3, r2
 800c726:	009b      	lsls	r3, r3, #2
 800c728:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c72c:	687a      	ldr	r2, [r7, #4]
 800c72e:	4413      	add	r3, r2
 800c730:	3304      	adds	r3, #4
 800c732:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	2200      	movs	r2, #0
 800c738:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	2202      	movs	r2, #2
 800c73e:	4619      	mov	r1, r3
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f000 fc37 	bl	800cfb4 <USBD_CtlSendData>
              break;
 800c746:	e06a      	b.n	800c81e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c748:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	da11      	bge.n	800c774 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c750:	7bbb      	ldrb	r3, [r7, #14]
 800c752:	f003 020f 	and.w	r2, r3, #15
 800c756:	6879      	ldr	r1, [r7, #4]
 800c758:	4613      	mov	r3, r2
 800c75a:	009b      	lsls	r3, r3, #2
 800c75c:	4413      	add	r3, r2
 800c75e:	009b      	lsls	r3, r3, #2
 800c760:	440b      	add	r3, r1
 800c762:	3324      	adds	r3, #36	@ 0x24
 800c764:	881b      	ldrh	r3, [r3, #0]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d117      	bne.n	800c79a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c76a:	6839      	ldr	r1, [r7, #0]
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f000 fbb0 	bl	800ced2 <USBD_CtlError>
                  break;
 800c772:	e054      	b.n	800c81e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c774:	7bbb      	ldrb	r3, [r7, #14]
 800c776:	f003 020f 	and.w	r2, r3, #15
 800c77a:	6879      	ldr	r1, [r7, #4]
 800c77c:	4613      	mov	r3, r2
 800c77e:	009b      	lsls	r3, r3, #2
 800c780:	4413      	add	r3, r2
 800c782:	009b      	lsls	r3, r3, #2
 800c784:	440b      	add	r3, r1
 800c786:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c78a:	881b      	ldrh	r3, [r3, #0]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d104      	bne.n	800c79a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c790:	6839      	ldr	r1, [r7, #0]
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f000 fb9d 	bl	800ced2 <USBD_CtlError>
                  break;
 800c798:	e041      	b.n	800c81e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c79a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	da0b      	bge.n	800c7ba <USBD_StdEPReq+0x2b2>
 800c7a2:	7bbb      	ldrb	r3, [r7, #14]
 800c7a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c7a8:	4613      	mov	r3, r2
 800c7aa:	009b      	lsls	r3, r3, #2
 800c7ac:	4413      	add	r3, r2
 800c7ae:	009b      	lsls	r3, r3, #2
 800c7b0:	3310      	adds	r3, #16
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	4413      	add	r3, r2
 800c7b6:	3304      	adds	r3, #4
 800c7b8:	e00b      	b.n	800c7d2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c7ba:	7bbb      	ldrb	r3, [r7, #14]
 800c7bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c7c0:	4613      	mov	r3, r2
 800c7c2:	009b      	lsls	r3, r3, #2
 800c7c4:	4413      	add	r3, r2
 800c7c6:	009b      	lsls	r3, r3, #2
 800c7c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c7cc:	687a      	ldr	r2, [r7, #4]
 800c7ce:	4413      	add	r3, r2
 800c7d0:	3304      	adds	r3, #4
 800c7d2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c7d4:	7bbb      	ldrb	r3, [r7, #14]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d002      	beq.n	800c7e0 <USBD_StdEPReq+0x2d8>
 800c7da:	7bbb      	ldrb	r3, [r7, #14]
 800c7dc:	2b80      	cmp	r3, #128	@ 0x80
 800c7de:	d103      	bne.n	800c7e8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	601a      	str	r2, [r3, #0]
 800c7e6:	e00e      	b.n	800c806 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c7e8:	7bbb      	ldrb	r3, [r7, #14]
 800c7ea:	4619      	mov	r1, r3
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f003 fcdd 	bl	80101ac <USBD_LL_IsStallEP>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d003      	beq.n	800c800 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	2201      	movs	r2, #1
 800c7fc:	601a      	str	r2, [r3, #0]
 800c7fe:	e002      	b.n	800c806 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	2200      	movs	r2, #0
 800c804:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	2202      	movs	r2, #2
 800c80a:	4619      	mov	r1, r3
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f000 fbd1 	bl	800cfb4 <USBD_CtlSendData>
              break;
 800c812:	e004      	b.n	800c81e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c814:	6839      	ldr	r1, [r7, #0]
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f000 fb5b 	bl	800ced2 <USBD_CtlError>
              break;
 800c81c:	bf00      	nop
          }
          break;
 800c81e:	e004      	b.n	800c82a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c820:	6839      	ldr	r1, [r7, #0]
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f000 fb55 	bl	800ced2 <USBD_CtlError>
          break;
 800c828:	bf00      	nop
      }
      break;
 800c82a:	e005      	b.n	800c838 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c82c:	6839      	ldr	r1, [r7, #0]
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f000 fb4f 	bl	800ced2 <USBD_CtlError>
      break;
 800c834:	e000      	b.n	800c838 <USBD_StdEPReq+0x330>
      break;
 800c836:	bf00      	nop
  }

  return ret;
 800c838:	7bfb      	ldrb	r3, [r7, #15]
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3710      	adds	r7, #16
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
	...

0800c844 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b084      	sub	sp, #16
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
 800c84c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c84e:	2300      	movs	r3, #0
 800c850:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c852:	2300      	movs	r3, #0
 800c854:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c856:	2300      	movs	r3, #0
 800c858:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	885b      	ldrh	r3, [r3, #2]
 800c85e:	0a1b      	lsrs	r3, r3, #8
 800c860:	b29b      	uxth	r3, r3
 800c862:	3b01      	subs	r3, #1
 800c864:	2b06      	cmp	r3, #6
 800c866:	f200 8128 	bhi.w	800caba <USBD_GetDescriptor+0x276>
 800c86a:	a201      	add	r2, pc, #4	@ (adr r2, 800c870 <USBD_GetDescriptor+0x2c>)
 800c86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c870:	0800c88d 	.word	0x0800c88d
 800c874:	0800c8a5 	.word	0x0800c8a5
 800c878:	0800c8e5 	.word	0x0800c8e5
 800c87c:	0800cabb 	.word	0x0800cabb
 800c880:	0800cabb 	.word	0x0800cabb
 800c884:	0800ca5b 	.word	0x0800ca5b
 800c888:	0800ca87 	.word	0x0800ca87
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	687a      	ldr	r2, [r7, #4]
 800c896:	7c12      	ldrb	r2, [r2, #16]
 800c898:	f107 0108 	add.w	r1, r7, #8
 800c89c:	4610      	mov	r0, r2
 800c89e:	4798      	blx	r3
 800c8a0:	60f8      	str	r0, [r7, #12]
      break;
 800c8a2:	e112      	b.n	800caca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	7c1b      	ldrb	r3, [r3, #16]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d10d      	bne.n	800c8c8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8b4:	f107 0208 	add.w	r2, r7, #8
 800c8b8:	4610      	mov	r0, r2
 800c8ba:	4798      	blx	r3
 800c8bc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	3301      	adds	r3, #1
 800c8c2:	2202      	movs	r2, #2
 800c8c4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c8c6:	e100      	b.n	800caca <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8d0:	f107 0208 	add.w	r2, r7, #8
 800c8d4:	4610      	mov	r0, r2
 800c8d6:	4798      	blx	r3
 800c8d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	3301      	adds	r3, #1
 800c8de:	2202      	movs	r2, #2
 800c8e0:	701a      	strb	r2, [r3, #0]
      break;
 800c8e2:	e0f2      	b.n	800caca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	885b      	ldrh	r3, [r3, #2]
 800c8e8:	b2db      	uxtb	r3, r3
 800c8ea:	2b05      	cmp	r3, #5
 800c8ec:	f200 80ac 	bhi.w	800ca48 <USBD_GetDescriptor+0x204>
 800c8f0:	a201      	add	r2, pc, #4	@ (adr r2, 800c8f8 <USBD_GetDescriptor+0xb4>)
 800c8f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8f6:	bf00      	nop
 800c8f8:	0800c911 	.word	0x0800c911
 800c8fc:	0800c945 	.word	0x0800c945
 800c900:	0800c979 	.word	0x0800c979
 800c904:	0800c9ad 	.word	0x0800c9ad
 800c908:	0800c9e1 	.word	0x0800c9e1
 800c90c:	0800ca15 	.word	0x0800ca15
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c916:	685b      	ldr	r3, [r3, #4]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d00b      	beq.n	800c934 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c922:	685b      	ldr	r3, [r3, #4]
 800c924:	687a      	ldr	r2, [r7, #4]
 800c926:	7c12      	ldrb	r2, [r2, #16]
 800c928:	f107 0108 	add.w	r1, r7, #8
 800c92c:	4610      	mov	r0, r2
 800c92e:	4798      	blx	r3
 800c930:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c932:	e091      	b.n	800ca58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c934:	6839      	ldr	r1, [r7, #0]
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f000 facb 	bl	800ced2 <USBD_CtlError>
            err++;
 800c93c:	7afb      	ldrb	r3, [r7, #11]
 800c93e:	3301      	adds	r3, #1
 800c940:	72fb      	strb	r3, [r7, #11]
          break;
 800c942:	e089      	b.n	800ca58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c94a:	689b      	ldr	r3, [r3, #8]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d00b      	beq.n	800c968 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c956:	689b      	ldr	r3, [r3, #8]
 800c958:	687a      	ldr	r2, [r7, #4]
 800c95a:	7c12      	ldrb	r2, [r2, #16]
 800c95c:	f107 0108 	add.w	r1, r7, #8
 800c960:	4610      	mov	r0, r2
 800c962:	4798      	blx	r3
 800c964:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c966:	e077      	b.n	800ca58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c968:	6839      	ldr	r1, [r7, #0]
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f000 fab1 	bl	800ced2 <USBD_CtlError>
            err++;
 800c970:	7afb      	ldrb	r3, [r7, #11]
 800c972:	3301      	adds	r3, #1
 800c974:	72fb      	strb	r3, [r7, #11]
          break;
 800c976:	e06f      	b.n	800ca58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c97e:	68db      	ldr	r3, [r3, #12]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d00b      	beq.n	800c99c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c98a:	68db      	ldr	r3, [r3, #12]
 800c98c:	687a      	ldr	r2, [r7, #4]
 800c98e:	7c12      	ldrb	r2, [r2, #16]
 800c990:	f107 0108 	add.w	r1, r7, #8
 800c994:	4610      	mov	r0, r2
 800c996:	4798      	blx	r3
 800c998:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c99a:	e05d      	b.n	800ca58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c99c:	6839      	ldr	r1, [r7, #0]
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f000 fa97 	bl	800ced2 <USBD_CtlError>
            err++;
 800c9a4:	7afb      	ldrb	r3, [r7, #11]
 800c9a6:	3301      	adds	r3, #1
 800c9a8:	72fb      	strb	r3, [r7, #11]
          break;
 800c9aa:	e055      	b.n	800ca58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9b2:	691b      	ldr	r3, [r3, #16]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d00b      	beq.n	800c9d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9be:	691b      	ldr	r3, [r3, #16]
 800c9c0:	687a      	ldr	r2, [r7, #4]
 800c9c2:	7c12      	ldrb	r2, [r2, #16]
 800c9c4:	f107 0108 	add.w	r1, r7, #8
 800c9c8:	4610      	mov	r0, r2
 800c9ca:	4798      	blx	r3
 800c9cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c9ce:	e043      	b.n	800ca58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c9d0:	6839      	ldr	r1, [r7, #0]
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f000 fa7d 	bl	800ced2 <USBD_CtlError>
            err++;
 800c9d8:	7afb      	ldrb	r3, [r7, #11]
 800c9da:	3301      	adds	r3, #1
 800c9dc:	72fb      	strb	r3, [r7, #11]
          break;
 800c9de:	e03b      	b.n	800ca58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9e6:	695b      	ldr	r3, [r3, #20]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d00b      	beq.n	800ca04 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9f2:	695b      	ldr	r3, [r3, #20]
 800c9f4:	687a      	ldr	r2, [r7, #4]
 800c9f6:	7c12      	ldrb	r2, [r2, #16]
 800c9f8:	f107 0108 	add.w	r1, r7, #8
 800c9fc:	4610      	mov	r0, r2
 800c9fe:	4798      	blx	r3
 800ca00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca02:	e029      	b.n	800ca58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ca04:	6839      	ldr	r1, [r7, #0]
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f000 fa63 	bl	800ced2 <USBD_CtlError>
            err++;
 800ca0c:	7afb      	ldrb	r3, [r7, #11]
 800ca0e:	3301      	adds	r3, #1
 800ca10:	72fb      	strb	r3, [r7, #11]
          break;
 800ca12:	e021      	b.n	800ca58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca1a:	699b      	ldr	r3, [r3, #24]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d00b      	beq.n	800ca38 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca26:	699b      	ldr	r3, [r3, #24]
 800ca28:	687a      	ldr	r2, [r7, #4]
 800ca2a:	7c12      	ldrb	r2, [r2, #16]
 800ca2c:	f107 0108 	add.w	r1, r7, #8
 800ca30:	4610      	mov	r0, r2
 800ca32:	4798      	blx	r3
 800ca34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca36:	e00f      	b.n	800ca58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ca38:	6839      	ldr	r1, [r7, #0]
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f000 fa49 	bl	800ced2 <USBD_CtlError>
            err++;
 800ca40:	7afb      	ldrb	r3, [r7, #11]
 800ca42:	3301      	adds	r3, #1
 800ca44:	72fb      	strb	r3, [r7, #11]
          break;
 800ca46:	e007      	b.n	800ca58 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ca48:	6839      	ldr	r1, [r7, #0]
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f000 fa41 	bl	800ced2 <USBD_CtlError>
          err++;
 800ca50:	7afb      	ldrb	r3, [r7, #11]
 800ca52:	3301      	adds	r3, #1
 800ca54:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ca56:	bf00      	nop
      }
      break;
 800ca58:	e037      	b.n	800caca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	7c1b      	ldrb	r3, [r3, #16]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d109      	bne.n	800ca76 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca6a:	f107 0208 	add.w	r2, r7, #8
 800ca6e:	4610      	mov	r0, r2
 800ca70:	4798      	blx	r3
 800ca72:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ca74:	e029      	b.n	800caca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ca76:	6839      	ldr	r1, [r7, #0]
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f000 fa2a 	bl	800ced2 <USBD_CtlError>
        err++;
 800ca7e:	7afb      	ldrb	r3, [r7, #11]
 800ca80:	3301      	adds	r3, #1
 800ca82:	72fb      	strb	r3, [r7, #11]
      break;
 800ca84:	e021      	b.n	800caca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	7c1b      	ldrb	r3, [r3, #16]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d10d      	bne.n	800caaa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca96:	f107 0208 	add.w	r2, r7, #8
 800ca9a:	4610      	mov	r0, r2
 800ca9c:	4798      	blx	r3
 800ca9e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	3301      	adds	r3, #1
 800caa4:	2207      	movs	r2, #7
 800caa6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800caa8:	e00f      	b.n	800caca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800caaa:	6839      	ldr	r1, [r7, #0]
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f000 fa10 	bl	800ced2 <USBD_CtlError>
        err++;
 800cab2:	7afb      	ldrb	r3, [r7, #11]
 800cab4:	3301      	adds	r3, #1
 800cab6:	72fb      	strb	r3, [r7, #11]
      break;
 800cab8:	e007      	b.n	800caca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800caba:	6839      	ldr	r1, [r7, #0]
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f000 fa08 	bl	800ced2 <USBD_CtlError>
      err++;
 800cac2:	7afb      	ldrb	r3, [r7, #11]
 800cac4:	3301      	adds	r3, #1
 800cac6:	72fb      	strb	r3, [r7, #11]
      break;
 800cac8:	bf00      	nop
  }

  if (err != 0U)
 800caca:	7afb      	ldrb	r3, [r7, #11]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d11e      	bne.n	800cb0e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	88db      	ldrh	r3, [r3, #6]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d016      	beq.n	800cb06 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800cad8:	893b      	ldrh	r3, [r7, #8]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d00e      	beq.n	800cafc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	88da      	ldrh	r2, [r3, #6]
 800cae2:	893b      	ldrh	r3, [r7, #8]
 800cae4:	4293      	cmp	r3, r2
 800cae6:	bf28      	it	cs
 800cae8:	4613      	movcs	r3, r2
 800caea:	b29b      	uxth	r3, r3
 800caec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800caee:	893b      	ldrh	r3, [r7, #8]
 800caf0:	461a      	mov	r2, r3
 800caf2:	68f9      	ldr	r1, [r7, #12]
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f000 fa5d 	bl	800cfb4 <USBD_CtlSendData>
 800cafa:	e009      	b.n	800cb10 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cafc:	6839      	ldr	r1, [r7, #0]
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f000 f9e7 	bl	800ced2 <USBD_CtlError>
 800cb04:	e004      	b.n	800cb10 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f000 faae 	bl	800d068 <USBD_CtlSendStatus>
 800cb0c:	e000      	b.n	800cb10 <USBD_GetDescriptor+0x2cc>
    return;
 800cb0e:	bf00      	nop
  }
}
 800cb10:	3710      	adds	r7, #16
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}
 800cb16:	bf00      	nop

0800cb18 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b084      	sub	sp, #16
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
 800cb20:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	889b      	ldrh	r3, [r3, #4]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d131      	bne.n	800cb8e <USBD_SetAddress+0x76>
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	88db      	ldrh	r3, [r3, #6]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d12d      	bne.n	800cb8e <USBD_SetAddress+0x76>
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	885b      	ldrh	r3, [r3, #2]
 800cb36:	2b7f      	cmp	r3, #127	@ 0x7f
 800cb38:	d829      	bhi.n	800cb8e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	885b      	ldrh	r3, [r3, #2]
 800cb3e:	b2db      	uxtb	r3, r3
 800cb40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb44:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	2b03      	cmp	r3, #3
 800cb50:	d104      	bne.n	800cb5c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cb52:	6839      	ldr	r1, [r7, #0]
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f000 f9bc 	bl	800ced2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb5a:	e01d      	b.n	800cb98 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	7bfa      	ldrb	r2, [r7, #15]
 800cb60:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cb64:	7bfb      	ldrb	r3, [r7, #15]
 800cb66:	4619      	mov	r1, r3
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f003 fb4b 	bl	8010204 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f000 fa7a 	bl	800d068 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cb74:	7bfb      	ldrb	r3, [r7, #15]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d004      	beq.n	800cb84 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2202      	movs	r2, #2
 800cb7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb82:	e009      	b.n	800cb98 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2201      	movs	r2, #1
 800cb88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb8c:	e004      	b.n	800cb98 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cb8e:	6839      	ldr	r1, [r7, #0]
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f000 f99e 	bl	800ced2 <USBD_CtlError>
  }
}
 800cb96:	bf00      	nop
 800cb98:	bf00      	nop
 800cb9a:	3710      	adds	r7, #16
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}

0800cba0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b084      	sub	sp, #16
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	885b      	ldrh	r3, [r3, #2]
 800cbb2:	b2da      	uxtb	r2, r3
 800cbb4:	4b4e      	ldr	r3, [pc, #312]	@ (800ccf0 <USBD_SetConfig+0x150>)
 800cbb6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cbb8:	4b4d      	ldr	r3, [pc, #308]	@ (800ccf0 <USBD_SetConfig+0x150>)
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	2b01      	cmp	r3, #1
 800cbbe:	d905      	bls.n	800cbcc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cbc0:	6839      	ldr	r1, [r7, #0]
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f000 f985 	bl	800ced2 <USBD_CtlError>
    return USBD_FAIL;
 800cbc8:	2303      	movs	r3, #3
 800cbca:	e08c      	b.n	800cce6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbd2:	b2db      	uxtb	r3, r3
 800cbd4:	2b02      	cmp	r3, #2
 800cbd6:	d002      	beq.n	800cbde <USBD_SetConfig+0x3e>
 800cbd8:	2b03      	cmp	r3, #3
 800cbda:	d029      	beq.n	800cc30 <USBD_SetConfig+0x90>
 800cbdc:	e075      	b.n	800ccca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cbde:	4b44      	ldr	r3, [pc, #272]	@ (800ccf0 <USBD_SetConfig+0x150>)
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d020      	beq.n	800cc28 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800cbe6:	4b42      	ldr	r3, [pc, #264]	@ (800ccf0 <USBD_SetConfig+0x150>)
 800cbe8:	781b      	ldrb	r3, [r3, #0]
 800cbea:	461a      	mov	r2, r3
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cbf0:	4b3f      	ldr	r3, [pc, #252]	@ (800ccf0 <USBD_SetConfig+0x150>)
 800cbf2:	781b      	ldrb	r3, [r3, #0]
 800cbf4:	4619      	mov	r1, r3
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f7fe ffe9 	bl	800bbce <USBD_SetClassConfig>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cc00:	7bfb      	ldrb	r3, [r7, #15]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d008      	beq.n	800cc18 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cc06:	6839      	ldr	r1, [r7, #0]
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f000 f962 	bl	800ced2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2202      	movs	r2, #2
 800cc12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cc16:	e065      	b.n	800cce4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f000 fa25 	bl	800d068 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2203      	movs	r2, #3
 800cc22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cc26:	e05d      	b.n	800cce4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f000 fa1d 	bl	800d068 <USBD_CtlSendStatus>
      break;
 800cc2e:	e059      	b.n	800cce4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cc30:	4b2f      	ldr	r3, [pc, #188]	@ (800ccf0 <USBD_SetConfig+0x150>)
 800cc32:	781b      	ldrb	r3, [r3, #0]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d112      	bne.n	800cc5e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2202      	movs	r2, #2
 800cc3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800cc40:	4b2b      	ldr	r3, [pc, #172]	@ (800ccf0 <USBD_SetConfig+0x150>)
 800cc42:	781b      	ldrb	r3, [r3, #0]
 800cc44:	461a      	mov	r2, r3
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cc4a:	4b29      	ldr	r3, [pc, #164]	@ (800ccf0 <USBD_SetConfig+0x150>)
 800cc4c:	781b      	ldrb	r3, [r3, #0]
 800cc4e:	4619      	mov	r1, r3
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f7fe ffd8 	bl	800bc06 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f000 fa06 	bl	800d068 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cc5c:	e042      	b.n	800cce4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cc5e:	4b24      	ldr	r3, [pc, #144]	@ (800ccf0 <USBD_SetConfig+0x150>)
 800cc60:	781b      	ldrb	r3, [r3, #0]
 800cc62:	461a      	mov	r2, r3
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	685b      	ldr	r3, [r3, #4]
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d02a      	beq.n	800ccc2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	685b      	ldr	r3, [r3, #4]
 800cc70:	b2db      	uxtb	r3, r3
 800cc72:	4619      	mov	r1, r3
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f7fe ffc6 	bl	800bc06 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cc7a:	4b1d      	ldr	r3, [pc, #116]	@ (800ccf0 <USBD_SetConfig+0x150>)
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	461a      	mov	r2, r3
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cc84:	4b1a      	ldr	r3, [pc, #104]	@ (800ccf0 <USBD_SetConfig+0x150>)
 800cc86:	781b      	ldrb	r3, [r3, #0]
 800cc88:	4619      	mov	r1, r3
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f7fe ff9f 	bl	800bbce <USBD_SetClassConfig>
 800cc90:	4603      	mov	r3, r0
 800cc92:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cc94:	7bfb      	ldrb	r3, [r7, #15]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d00f      	beq.n	800ccba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cc9a:	6839      	ldr	r1, [r7, #0]
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f000 f918 	bl	800ced2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	685b      	ldr	r3, [r3, #4]
 800cca6:	b2db      	uxtb	r3, r3
 800cca8:	4619      	mov	r1, r3
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f7fe ffab 	bl	800bc06 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2202      	movs	r2, #2
 800ccb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ccb8:	e014      	b.n	800cce4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f000 f9d4 	bl	800d068 <USBD_CtlSendStatus>
      break;
 800ccc0:	e010      	b.n	800cce4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f000 f9d0 	bl	800d068 <USBD_CtlSendStatus>
      break;
 800ccc8:	e00c      	b.n	800cce4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ccca:	6839      	ldr	r1, [r7, #0]
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f000 f900 	bl	800ced2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ccd2:	4b07      	ldr	r3, [pc, #28]	@ (800ccf0 <USBD_SetConfig+0x150>)
 800ccd4:	781b      	ldrb	r3, [r3, #0]
 800ccd6:	4619      	mov	r1, r3
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f7fe ff94 	bl	800bc06 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ccde:	2303      	movs	r3, #3
 800cce0:	73fb      	strb	r3, [r7, #15]
      break;
 800cce2:	bf00      	nop
  }

  return ret;
 800cce4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	3710      	adds	r7, #16
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}
 800ccee:	bf00      	nop
 800ccf0:	20000c78 	.word	0x20000c78

0800ccf4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b082      	sub	sp, #8
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
 800ccfc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	88db      	ldrh	r3, [r3, #6]
 800cd02:	2b01      	cmp	r3, #1
 800cd04:	d004      	beq.n	800cd10 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cd06:	6839      	ldr	r1, [r7, #0]
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f000 f8e2 	bl	800ced2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cd0e:	e023      	b.n	800cd58 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd16:	b2db      	uxtb	r3, r3
 800cd18:	2b02      	cmp	r3, #2
 800cd1a:	dc02      	bgt.n	800cd22 <USBD_GetConfig+0x2e>
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	dc03      	bgt.n	800cd28 <USBD_GetConfig+0x34>
 800cd20:	e015      	b.n	800cd4e <USBD_GetConfig+0x5a>
 800cd22:	2b03      	cmp	r3, #3
 800cd24:	d00b      	beq.n	800cd3e <USBD_GetConfig+0x4a>
 800cd26:	e012      	b.n	800cd4e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	3308      	adds	r3, #8
 800cd32:	2201      	movs	r2, #1
 800cd34:	4619      	mov	r1, r3
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f000 f93c 	bl	800cfb4 <USBD_CtlSendData>
        break;
 800cd3c:	e00c      	b.n	800cd58 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	3304      	adds	r3, #4
 800cd42:	2201      	movs	r2, #1
 800cd44:	4619      	mov	r1, r3
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f000 f934 	bl	800cfb4 <USBD_CtlSendData>
        break;
 800cd4c:	e004      	b.n	800cd58 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cd4e:	6839      	ldr	r1, [r7, #0]
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f000 f8be 	bl	800ced2 <USBD_CtlError>
        break;
 800cd56:	bf00      	nop
}
 800cd58:	bf00      	nop
 800cd5a:	3708      	adds	r7, #8
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}

0800cd60 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b082      	sub	sp, #8
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd70:	b2db      	uxtb	r3, r3
 800cd72:	3b01      	subs	r3, #1
 800cd74:	2b02      	cmp	r3, #2
 800cd76:	d81e      	bhi.n	800cdb6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	88db      	ldrh	r3, [r3, #6]
 800cd7c:	2b02      	cmp	r3, #2
 800cd7e:	d004      	beq.n	800cd8a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cd80:	6839      	ldr	r1, [r7, #0]
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f000 f8a5 	bl	800ced2 <USBD_CtlError>
        break;
 800cd88:	e01a      	b.n	800cdc0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2201      	movs	r2, #1
 800cd8e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d005      	beq.n	800cda6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	68db      	ldr	r3, [r3, #12]
 800cd9e:	f043 0202 	orr.w	r2, r3, #2
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	330c      	adds	r3, #12
 800cdaa:	2202      	movs	r2, #2
 800cdac:	4619      	mov	r1, r3
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f000 f900 	bl	800cfb4 <USBD_CtlSendData>
      break;
 800cdb4:	e004      	b.n	800cdc0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cdb6:	6839      	ldr	r1, [r7, #0]
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f000 f88a 	bl	800ced2 <USBD_CtlError>
      break;
 800cdbe:	bf00      	nop
  }
}
 800cdc0:	bf00      	nop
 800cdc2:	3708      	adds	r7, #8
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}

0800cdc8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b082      	sub	sp, #8
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	885b      	ldrh	r3, [r3, #2]
 800cdd6:	2b01      	cmp	r3, #1
 800cdd8:	d107      	bne.n	800cdea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2201      	movs	r2, #1
 800cdde:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f000 f940 	bl	800d068 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cde8:	e013      	b.n	800ce12 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	885b      	ldrh	r3, [r3, #2]
 800cdee:	2b02      	cmp	r3, #2
 800cdf0:	d10b      	bne.n	800ce0a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	889b      	ldrh	r3, [r3, #4]
 800cdf6:	0a1b      	lsrs	r3, r3, #8
 800cdf8:	b29b      	uxth	r3, r3
 800cdfa:	b2da      	uxtb	r2, r3
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f000 f930 	bl	800d068 <USBD_CtlSendStatus>
}
 800ce08:	e003      	b.n	800ce12 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ce0a:	6839      	ldr	r1, [r7, #0]
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f000 f860 	bl	800ced2 <USBD_CtlError>
}
 800ce12:	bf00      	nop
 800ce14:	3708      	adds	r7, #8
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}

0800ce1a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce1a:	b580      	push	{r7, lr}
 800ce1c:	b082      	sub	sp, #8
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	6078      	str	r0, [r7, #4]
 800ce22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce2a:	b2db      	uxtb	r3, r3
 800ce2c:	3b01      	subs	r3, #1
 800ce2e:	2b02      	cmp	r3, #2
 800ce30:	d80b      	bhi.n	800ce4a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	885b      	ldrh	r3, [r3, #2]
 800ce36:	2b01      	cmp	r3, #1
 800ce38:	d10c      	bne.n	800ce54 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f000 f910 	bl	800d068 <USBD_CtlSendStatus>
      }
      break;
 800ce48:	e004      	b.n	800ce54 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ce4a:	6839      	ldr	r1, [r7, #0]
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f000 f840 	bl	800ced2 <USBD_CtlError>
      break;
 800ce52:	e000      	b.n	800ce56 <USBD_ClrFeature+0x3c>
      break;
 800ce54:	bf00      	nop
  }
}
 800ce56:	bf00      	nop
 800ce58:	3708      	adds	r7, #8
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}

0800ce5e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ce5e:	b580      	push	{r7, lr}
 800ce60:	b084      	sub	sp, #16
 800ce62:	af00      	add	r7, sp, #0
 800ce64:	6078      	str	r0, [r7, #4]
 800ce66:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	781a      	ldrb	r2, [r3, #0]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	3301      	adds	r3, #1
 800ce78:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	781a      	ldrb	r2, [r3, #0]
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	3301      	adds	r3, #1
 800ce86:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ce88:	68f8      	ldr	r0, [r7, #12]
 800ce8a:	f7ff fa40 	bl	800c30e <SWAPBYTE>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	461a      	mov	r2, r3
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	3301      	adds	r3, #1
 800ce9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	3301      	adds	r3, #1
 800cea0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cea2:	68f8      	ldr	r0, [r7, #12]
 800cea4:	f7ff fa33 	bl	800c30e <SWAPBYTE>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	461a      	mov	r2, r3
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	3301      	adds	r3, #1
 800ceba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cebc:	68f8      	ldr	r0, [r7, #12]
 800cebe:	f7ff fa26 	bl	800c30e <SWAPBYTE>
 800cec2:	4603      	mov	r3, r0
 800cec4:	461a      	mov	r2, r3
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	80da      	strh	r2, [r3, #6]
}
 800ceca:	bf00      	nop
 800cecc:	3710      	adds	r7, #16
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}

0800ced2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ced2:	b580      	push	{r7, lr}
 800ced4:	b082      	sub	sp, #8
 800ced6:	af00      	add	r7, sp, #0
 800ced8:	6078      	str	r0, [r7, #4]
 800ceda:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cedc:	2180      	movs	r1, #128	@ 0x80
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f003 f926 	bl	8010130 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cee4:	2100      	movs	r1, #0
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f003 f922 	bl	8010130 <USBD_LL_StallEP>
}
 800ceec:	bf00      	nop
 800ceee:	3708      	adds	r7, #8
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}

0800cef4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b086      	sub	sp, #24
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	60f8      	str	r0, [r7, #12]
 800cefc:	60b9      	str	r1, [r7, #8]
 800cefe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cf00:	2300      	movs	r3, #0
 800cf02:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d036      	beq.n	800cf78 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cf0e:	6938      	ldr	r0, [r7, #16]
 800cf10:	f000 f836 	bl	800cf80 <USBD_GetLen>
 800cf14:	4603      	mov	r3, r0
 800cf16:	3301      	adds	r3, #1
 800cf18:	b29b      	uxth	r3, r3
 800cf1a:	005b      	lsls	r3, r3, #1
 800cf1c:	b29a      	uxth	r2, r3
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cf22:	7dfb      	ldrb	r3, [r7, #23]
 800cf24:	68ba      	ldr	r2, [r7, #8]
 800cf26:	4413      	add	r3, r2
 800cf28:	687a      	ldr	r2, [r7, #4]
 800cf2a:	7812      	ldrb	r2, [r2, #0]
 800cf2c:	701a      	strb	r2, [r3, #0]
  idx++;
 800cf2e:	7dfb      	ldrb	r3, [r7, #23]
 800cf30:	3301      	adds	r3, #1
 800cf32:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cf34:	7dfb      	ldrb	r3, [r7, #23]
 800cf36:	68ba      	ldr	r2, [r7, #8]
 800cf38:	4413      	add	r3, r2
 800cf3a:	2203      	movs	r2, #3
 800cf3c:	701a      	strb	r2, [r3, #0]
  idx++;
 800cf3e:	7dfb      	ldrb	r3, [r7, #23]
 800cf40:	3301      	adds	r3, #1
 800cf42:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cf44:	e013      	b.n	800cf6e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cf46:	7dfb      	ldrb	r3, [r7, #23]
 800cf48:	68ba      	ldr	r2, [r7, #8]
 800cf4a:	4413      	add	r3, r2
 800cf4c:	693a      	ldr	r2, [r7, #16]
 800cf4e:	7812      	ldrb	r2, [r2, #0]
 800cf50:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	3301      	adds	r3, #1
 800cf56:	613b      	str	r3, [r7, #16]
    idx++;
 800cf58:	7dfb      	ldrb	r3, [r7, #23]
 800cf5a:	3301      	adds	r3, #1
 800cf5c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cf5e:	7dfb      	ldrb	r3, [r7, #23]
 800cf60:	68ba      	ldr	r2, [r7, #8]
 800cf62:	4413      	add	r3, r2
 800cf64:	2200      	movs	r2, #0
 800cf66:	701a      	strb	r2, [r3, #0]
    idx++;
 800cf68:	7dfb      	ldrb	r3, [r7, #23]
 800cf6a:	3301      	adds	r3, #1
 800cf6c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d1e7      	bne.n	800cf46 <USBD_GetString+0x52>
 800cf76:	e000      	b.n	800cf7a <USBD_GetString+0x86>
    return;
 800cf78:	bf00      	nop
  }
}
 800cf7a:	3718      	adds	r7, #24
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cf80:	b480      	push	{r7}
 800cf82:	b085      	sub	sp, #20
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cf90:	e005      	b.n	800cf9e <USBD_GetLen+0x1e>
  {
    len++;
 800cf92:	7bfb      	ldrb	r3, [r7, #15]
 800cf94:	3301      	adds	r3, #1
 800cf96:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cf9e:	68bb      	ldr	r3, [r7, #8]
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d1f5      	bne.n	800cf92 <USBD_GetLen+0x12>
  }

  return len;
 800cfa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3714      	adds	r7, #20
 800cfac:	46bd      	mov	sp, r7
 800cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb2:	4770      	bx	lr

0800cfb4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b084      	sub	sp, #16
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	60f8      	str	r0, [r7, #12]
 800cfbc:	60b9      	str	r1, [r7, #8]
 800cfbe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	2202      	movs	r2, #2
 800cfc4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	687a      	ldr	r2, [r7, #4]
 800cfcc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	687a      	ldr	r2, [r7, #4]
 800cfd2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	68ba      	ldr	r2, [r7, #8]
 800cfd8:	2100      	movs	r1, #0
 800cfda:	68f8      	ldr	r0, [r7, #12]
 800cfdc:	f003 f931 	bl	8010242 <USBD_LL_Transmit>

  return USBD_OK;
 800cfe0:	2300      	movs	r3, #0
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3710      	adds	r7, #16
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}

0800cfea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cfea:	b580      	push	{r7, lr}
 800cfec:	b084      	sub	sp, #16
 800cfee:	af00      	add	r7, sp, #0
 800cff0:	60f8      	str	r0, [r7, #12]
 800cff2:	60b9      	str	r1, [r7, #8]
 800cff4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	68ba      	ldr	r2, [r7, #8]
 800cffa:	2100      	movs	r1, #0
 800cffc:	68f8      	ldr	r0, [r7, #12]
 800cffe:	f003 f920 	bl	8010242 <USBD_LL_Transmit>

  return USBD_OK;
 800d002:	2300      	movs	r3, #0
}
 800d004:	4618      	mov	r0, r3
 800d006:	3710      	adds	r7, #16
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}

0800d00c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b084      	sub	sp, #16
 800d010:	af00      	add	r7, sp, #0
 800d012:	60f8      	str	r0, [r7, #12]
 800d014:	60b9      	str	r1, [r7, #8]
 800d016:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	2203      	movs	r2, #3
 800d01c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	687a      	ldr	r2, [r7, #4]
 800d024:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	687a      	ldr	r2, [r7, #4]
 800d02c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	68ba      	ldr	r2, [r7, #8]
 800d034:	2100      	movs	r1, #0
 800d036:	68f8      	ldr	r0, [r7, #12]
 800d038:	f003 f924 	bl	8010284 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d03c:	2300      	movs	r3, #0
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3710      	adds	r7, #16
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}

0800d046 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d046:	b580      	push	{r7, lr}
 800d048:	b084      	sub	sp, #16
 800d04a:	af00      	add	r7, sp, #0
 800d04c:	60f8      	str	r0, [r7, #12]
 800d04e:	60b9      	str	r1, [r7, #8]
 800d050:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	68ba      	ldr	r2, [r7, #8]
 800d056:	2100      	movs	r1, #0
 800d058:	68f8      	ldr	r0, [r7, #12]
 800d05a:	f003 f913 	bl	8010284 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d05e:	2300      	movs	r3, #0
}
 800d060:	4618      	mov	r0, r3
 800d062:	3710      	adds	r7, #16
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}

0800d068 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b082      	sub	sp, #8
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2204      	movs	r2, #4
 800d074:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d078:	2300      	movs	r3, #0
 800d07a:	2200      	movs	r2, #0
 800d07c:	2100      	movs	r1, #0
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f003 f8df 	bl	8010242 <USBD_LL_Transmit>

  return USBD_OK;
 800d084:	2300      	movs	r3, #0
}
 800d086:	4618      	mov	r0, r3
 800d088:	3708      	adds	r7, #8
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}

0800d08e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d08e:	b580      	push	{r7, lr}
 800d090:	b082      	sub	sp, #8
 800d092:	af00      	add	r7, sp, #0
 800d094:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2205      	movs	r2, #5
 800d09a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d09e:	2300      	movs	r3, #0
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	2100      	movs	r1, #0
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f003 f8ed 	bl	8010284 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d0aa:	2300      	movs	r3, #0
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3708      	adds	r7, #8
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}

0800d0b4 <makeFreeRtosPriority>:
#endif

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority(osPriority priority) {
 800d0b4:	b480      	push	{r7}
 800d0b6:	b085      	sub	sp, #20
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	80fb      	strh	r3, [r7, #6]
    unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	60fb      	str	r3, [r7, #12]

    if (priority != osPriorityError) {
 800d0c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d0c6:	2b84      	cmp	r3, #132	@ 0x84
 800d0c8:	d005      	beq.n	800d0d6 <makeFreeRtosPriority+0x22>
        fpriority += (priority - osPriorityIdle);
 800d0ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	4413      	add	r3, r2
 800d0d2:	3303      	adds	r3, #3
 800d0d4:	60fb      	str	r3, [r7, #12]
    }

    return fpriority;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3714      	adds	r7, #20
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e2:	4770      	bx	lr

0800d0e4 <osKernelStart>:
 * @param  thread_def    thread definition referenced with \ref osThread.
 * @param  argument      pointer that is passed to the thread function as start argument.
 * @retval status code that indicates the execution status of the function
 * @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
 */
osStatus osKernelStart(void) {
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	af00      	add	r7, sp, #0
    vTaskStartScheduler();
 800d0e8:	f001 f8ee 	bl	800e2c8 <vTaskStartScheduler>

    return osOK;
 800d0ec:	2300      	movs	r3, #0
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	bd80      	pop	{r7, pc}

0800d0f2 <osThreadCreate>:
 * @param  thread_def    thread definition referenced with \ref osThread.
 * @param  argument      pointer that is passed to the thread function as start argument.
 * @retval thread ID for reference by other functions or NULL in case of error.
 * @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
 */
osThreadId osThreadCreate(const osThreadDef_t * thread_def, void * argument) {
 800d0f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0f4:	b089      	sub	sp, #36	@ 0x24
 800d0f6:	af04      	add	r7, sp, #16
 800d0f8:	6078      	str	r0, [r7, #4]
 800d0fa:	6039      	str	r1, [r7, #0]
    TaskHandle_t handle;

#if (configSUPPORT_STATIC_ALLOCATION == 1) && (configSUPPORT_DYNAMIC_ALLOCATION == 1)
    if ((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	695b      	ldr	r3, [r3, #20]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d020      	beq.n	800d146 <osThreadCreate+0x54>
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	699b      	ldr	r3, [r3, #24]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d01c      	beq.n	800d146 <osThreadCreate+0x54>
        handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread, (const portCHAR *)thread_def->name, thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority), thread_def->buffer, thread_def->controlblock);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	685c      	ldr	r4, [r3, #4]
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681d      	ldr	r5, [r3, #0]
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	691e      	ldr	r6, [r3, #16]
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d11e:	4618      	mov	r0, r3
 800d120:	f7ff ffc8 	bl	800d0b4 <makeFreeRtosPriority>
 800d124:	4601      	mov	r1, r0
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	695b      	ldr	r3, [r3, #20]
 800d12a:	687a      	ldr	r2, [r7, #4]
 800d12c:	6992      	ldr	r2, [r2, #24]
 800d12e:	9202      	str	r2, [sp, #8]
 800d130:	9301      	str	r3, [sp, #4]
 800d132:	9100      	str	r1, [sp, #0]
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	4632      	mov	r2, r6
 800d138:	4629      	mov	r1, r5
 800d13a:	4620      	mov	r0, r4
 800d13c:	f000 fdd8 	bl	800dcf0 <xTaskCreateStatic>
 800d140:	4603      	mov	r3, r0
 800d142:	60fb      	str	r3, [r7, #12]
 800d144:	e01c      	b.n	800d180 <osThreadCreate+0x8e>
    } else {
        if (xTaskCreate((TaskFunction_t)thread_def->pthread, (const portCHAR *)thread_def->name, thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority), &handle) != pdPASS) {
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	685c      	ldr	r4, [r3, #4]
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681d      	ldr	r5, [r3, #0]
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	691b      	ldr	r3, [r3, #16]
 800d152:	b29e      	uxth	r6, r3
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d15a:	4618      	mov	r0, r3
 800d15c:	f7ff ffaa 	bl	800d0b4 <makeFreeRtosPriority>
 800d160:	4602      	mov	r2, r0
 800d162:	f107 030c 	add.w	r3, r7, #12
 800d166:	9301      	str	r3, [sp, #4]
 800d168:	9200      	str	r2, [sp, #0]
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	4632      	mov	r2, r6
 800d16e:	4629      	mov	r1, r5
 800d170:	4620      	mov	r0, r4
 800d172:	f000 fe1d 	bl	800ddb0 <xTaskCreate>
 800d176:	4603      	mov	r3, r0
 800d178:	2b01      	cmp	r3, #1
 800d17a:	d001      	beq.n	800d180 <osThreadCreate+0x8e>
            return NULL;
 800d17c:	2300      	movs	r3, #0
 800d17e:	e000      	b.n	800d182 <osThreadCreate+0x90>
    if (xTaskCreate((TaskFunction_t)thread_def->pthread, (const portCHAR *)thread_def->name, thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority), &handle) != pdPASS) {
        return NULL;
    }
#endif

    return handle;
 800d180:	68fb      	ldr	r3, [r7, #12]
}
 800d182:	4618      	mov	r0, r3
 800d184:	3714      	adds	r7, #20
 800d186:	46bd      	mov	sp, r7
 800d188:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d18a <osDelay>:
/**
 * @brief   Wait for Timeout (Time Delay)
 * @param   millisec      time delay value
 * @retval  status code that indicates the execution status of the function.
 */
osStatus osDelay(uint32_t millisec) {
 800d18a:	b580      	push	{r7, lr}
 800d18c:	b084      	sub	sp, #16
 800d18e:	af00      	add	r7, sp, #0
 800d190:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
    TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2200      	movs	r2, #0
 800d196:	fbb3 f3f2 	udiv	r3, r3, r2
 800d19a:	60fb      	str	r3, [r7, #12]

    vTaskDelay(ticks ? ticks : 1); /* Minimum delay = 1 tick */
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d001      	beq.n	800d1a6 <osDelay+0x1c>
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	e000      	b.n	800d1a8 <osDelay+0x1e>
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f000 ffc3 	bl	800e134 <vTaskDelay>

    return osOK;
 800d1ae:	2300      	movs	r3, #0
#else
    (void)millisec;

    return osErrorResource;
#endif
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3710      	adds	r7, #16
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}

0800d1b8 <vListInitialise>:

/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise(List_t * const pxList) {
 800d1b8:	b480      	push	{r7}
 800d1ba:	b083      	sub	sp, #12
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f103 0208 	add.w	r2, r3, #8
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f04f 32ff 	mov.w	r2, #4294967295
 800d1d0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = (ListItem_t *)&(pxList->xListEnd);     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f103 0208 	add.w	r2, r3, #8
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f103 0208 	add.w	r2, r3, #8
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = (UBaseType_t)0U;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
    configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE(pxList);
    listSET_LIST_INTEGRITY_CHECK_2_VALUE(pxList);
}
 800d1ec:	bf00      	nop
 800d1ee:	370c      	adds	r7, #12
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f6:	4770      	bx	lr

0800d1f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem(ListItem_t * const pxItem) {
 800d1f8:	b480      	push	{r7}
 800d1fa:	b083      	sub	sp, #12
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2200      	movs	r2, #0
 800d204:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
    configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE(pxItem);
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE(pxItem);
}
 800d206:	bf00      	nop
 800d208:	370c      	adds	r7, #12
 800d20a:	46bd      	mov	sp, r7
 800d20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d210:	4770      	bx	lr

0800d212 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t * const pxList, ListItem_t * const pxNewListItem) {
 800d212:	b480      	push	{r7}
 800d214:	b085      	sub	sp, #20
 800d216:	af00      	add	r7, sp, #0
 800d218:	6078      	str	r0, [r7, #4]
 800d21a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	68fa      	ldr	r2, [r7, #12]
 800d226:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	689a      	ldr	r2, [r3, #8]
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	689b      	ldr	r3, [r3, #8]
 800d234:	683a      	ldr	r2, [r7, #0]
 800d236:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	683a      	ldr	r2, [r7, #0]
 800d23c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	687a      	ldr	r2, [r7, #4]
 800d242:	611a      	str	r2, [r3, #16]

    (pxList->uxNumberOfItems)++;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	1c5a      	adds	r2, r3, #1
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	601a      	str	r2, [r3, #0]
}
 800d24e:	bf00      	nop
 800d250:	3714      	adds	r7, #20
 800d252:	46bd      	mov	sp, r7
 800d254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d258:	4770      	bx	lr

0800d25a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert(List_t * const pxList, ListItem_t * const pxNewListItem) {
 800d25a:	b480      	push	{r7}
 800d25c:	b085      	sub	sp, #20
 800d25e:	af00      	add	r7, sp, #0
 800d260:	6078      	str	r0, [r7, #4]
 800d262:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	60bb      	str	r3, [r7, #8]
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if (xValueOfInsertion == portMAX_DELAY) {
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d270:	d103      	bne.n	800d27a <vListInsert+0x20>
        pxIterator = pxList->xListEnd.pxPrevious;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	691b      	ldr	r3, [r3, #16]
 800d276:	60fb      	str	r3, [r7, #12]
 800d278:	e00c      	b.n	800d294 <vListInsert+0x3a>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	3308      	adds	r3, #8
 800d27e:	60fb      	str	r3, [r7, #12]
 800d280:	e002      	b.n	800d288 <vListInsert+0x2e>
             pxIterator = pxIterator->pxNext) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */ /*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	685b      	ldr	r3, [r3, #4]
 800d286:	60fb      	str	r3, [r7, #12]
        for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	685b      	ldr	r3, [r3, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	68ba      	ldr	r2, [r7, #8]
 800d290:	429a      	cmp	r2, r3
 800d292:	d2f6      	bcs.n	800d282 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	685a      	ldr	r2, [r3, #4]
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	685b      	ldr	r3, [r3, #4]
 800d2a0:	683a      	ldr	r2, [r7, #0]
 800d2a2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	68fa      	ldr	r2, [r7, #12]
 800d2a8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	683a      	ldr	r2, [r7, #0]
 800d2ae:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	687a      	ldr	r2, [r7, #4]
 800d2b4:	611a      	str	r2, [r3, #16]

    (pxList->uxNumberOfItems)++;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	1c5a      	adds	r2, r3, #1
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	601a      	str	r2, [r3, #0]
}
 800d2c0:	bf00      	nop
 800d2c2:	3714      	adds	r7, #20
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ca:	4770      	bx	lr

0800d2cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove(ListItem_t * const pxItemToRemove) {
 800d2cc:	b480      	push	{r7}
 800d2ce:	b085      	sub	sp, #20
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
    item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	691b      	ldr	r3, [r3, #16]
 800d2d8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	685b      	ldr	r3, [r3, #4]
 800d2de:	687a      	ldr	r2, [r7, #4]
 800d2e0:	6892      	ldr	r2, [r2, #8]
 800d2e2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	689b      	ldr	r3, [r3, #8]
 800d2e8:	687a      	ldr	r2, [r7, #4]
 800d2ea:	6852      	ldr	r2, [r2, #4]
 800d2ec:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if (pxList->pxIndex == pxItemToRemove) {
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	687a      	ldr	r2, [r7, #4]
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d103      	bne.n	800d300 <uxListRemove+0x34>
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	689a      	ldr	r2, [r3, #8]
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	605a      	str	r2, [r3, #4]
    } else {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2200      	movs	r2, #0
 800d304:	611a      	str	r2, [r3, #16]
    (pxList->uxNumberOfItems)--;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	1e5a      	subs	r2, r3, #1
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
}
 800d314:	4618      	mov	r0, r3
 800d316:	3714      	adds	r7, #20
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	4770      	bx	lr

0800d320 <xQueueGenericReset>:
        }                                                                                                                                                                                                                                                \
    }                                                                                                                                                                                                                                                    \
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset(QueueHandle_t xQueue, BaseType_t xNewQueue) {
 800d320:	b580      	push	{r7, lr}
 800d322:	b084      	sub	sp, #16
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
 800d328:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	60fb      	str	r3, [r7, #12]

    configASSERT(pxQueue);
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d10b      	bne.n	800d34c <xQueueGenericReset+0x2c>
    __asm volatile("	mov %0, %1												\n"
 800d334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d338:	f383 8811 	msr	BASEPRI, r3
 800d33c:	f3bf 8f6f 	isb	sy
 800d340:	f3bf 8f4f 	dsb	sy
 800d344:	60bb      	str	r3, [r7, #8]
}
 800d346:	bf00      	nop
 800d348:	bf00      	nop
 800d34a:	e7fd      	b.n	800d348 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800d34c:	f002 f9bc 	bl	800f6c8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + (pxQueue->uxLength * pxQueue->uxItemSize); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	681a      	ldr	r2, [r3, #0]
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d358:	68f9      	ldr	r1, [r7, #12]
 800d35a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d35c:	fb01 f303 	mul.w	r3, r1, r3
 800d360:	441a      	add	r2, r3
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = (UBaseType_t)0U;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	2200      	movs	r2, #0
 800d36a:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	681a      	ldr	r2, [r3, #0]
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ((pxQueue->uxLength - 1U) * pxQueue->uxItemSize); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	681a      	ldr	r2, [r3, #0]
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d37c:	3b01      	subs	r3, #1
 800d37e:	68f9      	ldr	r1, [r7, #12]
 800d380:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d382:	fb01 f303 	mul.w	r3, r1, r3
 800d386:	441a      	add	r2, r3
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	22ff      	movs	r2, #255	@ 0xff
 800d390:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	22ff      	movs	r2, #255	@ 0xff
 800d398:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if (xNewQueue == pdFALSE) {
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d114      	bne.n	800d3cc <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
            the tasks will remain blocked as after this function exits the queue
            will still be empty.  If there are tasks blocked waiting to write to
            the queue, then one should be unblocked as after this function exits
            it will be possible to write to it. */
            if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	691b      	ldr	r3, [r3, #16]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d01a      	beq.n	800d3e0 <xQueueGenericReset+0xc0>
                if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	3310      	adds	r3, #16
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f001 fa16 	bl	800e7e0 <xTaskRemoveFromEventList>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d012      	beq.n	800d3e0 <xQueueGenericReset+0xc0>
                    queueYIELD_IF_USING_PREEMPTION();
 800d3ba:	4b0d      	ldr	r3, [pc, #52]	@ (800d3f0 <xQueueGenericReset+0xd0>)
 800d3bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3c0:	601a      	str	r2, [r3, #0]
 800d3c2:	f3bf 8f4f 	dsb	sy
 800d3c6:	f3bf 8f6f 	isb	sy
 800d3ca:	e009      	b.n	800d3e0 <xQueueGenericReset+0xc0>
            } else {
                mtCOVERAGE_TEST_MARKER();
            }
        } else {
            /* Ensure the event queues start in the correct state. */
            vListInitialise(&(pxQueue->xTasksWaitingToSend));
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	3310      	adds	r3, #16
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f7ff fef1 	bl	800d1b8 <vListInitialise>
            vListInitialise(&(pxQueue->xTasksWaitingToReceive));
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	3324      	adds	r3, #36	@ 0x24
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f7ff feec 	bl	800d1b8 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800d3e0:	f002 f9a4 	bl	800f72c <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
    versions. */
    return pdPASS;
 800d3e4:	2301      	movs	r3, #1
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3710      	adds	r7, #16
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
 800d3ee:	bf00      	nop
 800d3f0:	e000ed04 	.word	0xe000ed04

0800d3f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if (configSUPPORT_STATIC_ALLOCATION == 1)

QueueHandle_t xQueueGenericCreateStatic(const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t * pucQueueStorage, StaticQueue_t * pxStaticQueue, const uint8_t ucQueueType) {
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b08e      	sub	sp, #56	@ 0x38
 800d3f8:	af02      	add	r7, sp, #8
 800d3fa:	60f8      	str	r0, [r7, #12]
 800d3fc:	60b9      	str	r1, [r7, #8]
 800d3fe:	607a      	str	r2, [r7, #4]
 800d400:	603b      	str	r3, [r7, #0]
    Queue_t * pxNewQueue;

    configASSERT(uxQueueLength > (UBaseType_t)0);
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d10b      	bne.n	800d420 <xQueueGenericCreateStatic+0x2c>
    __asm volatile("	mov %0, %1												\n"
 800d408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d40c:	f383 8811 	msr	BASEPRI, r3
 800d410:	f3bf 8f6f 	isb	sy
 800d414:	f3bf 8f4f 	dsb	sy
 800d418:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d41a:	bf00      	nop
 800d41c:	bf00      	nop
 800d41e:	e7fd      	b.n	800d41c <xQueueGenericCreateStatic+0x28>

    /* The StaticQueue_t structure and the queue storage area must be
    supplied. */
    configASSERT(pxStaticQueue != NULL);
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d10b      	bne.n	800d43e <xQueueGenericCreateStatic+0x4a>
    __asm volatile("	mov %0, %1												\n"
 800d426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d42a:	f383 8811 	msr	BASEPRI, r3
 800d42e:	f3bf 8f6f 	isb	sy
 800d432:	f3bf 8f4f 	dsb	sy
 800d436:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d438:	bf00      	nop
 800d43a:	bf00      	nop
 800d43c:	e7fd      	b.n	800d43a <xQueueGenericCreateStatic+0x46>

    /* A queue storage area should be provided if the item size is not 0, and
    should not be provided if the item size is 0. */
    configASSERT(!((pucQueueStorage != NULL) && (uxItemSize == 0)));
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d002      	beq.n	800d44a <xQueueGenericCreateStatic+0x56>
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d001      	beq.n	800d44e <xQueueGenericCreateStatic+0x5a>
 800d44a:	2301      	movs	r3, #1
 800d44c:	e000      	b.n	800d450 <xQueueGenericCreateStatic+0x5c>
 800d44e:	2300      	movs	r3, #0
 800d450:	2b00      	cmp	r3, #0
 800d452:	d10b      	bne.n	800d46c <xQueueGenericCreateStatic+0x78>
    __asm volatile("	mov %0, %1												\n"
 800d454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d458:	f383 8811 	msr	BASEPRI, r3
 800d45c:	f3bf 8f6f 	isb	sy
 800d460:	f3bf 8f4f 	dsb	sy
 800d464:	623b      	str	r3, [r7, #32]
}
 800d466:	bf00      	nop
 800d468:	bf00      	nop
 800d46a:	e7fd      	b.n	800d468 <xQueueGenericCreateStatic+0x74>
    configASSERT(!((pucQueueStorage == NULL) && (uxItemSize != 0)));
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d102      	bne.n	800d478 <xQueueGenericCreateStatic+0x84>
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d101      	bne.n	800d47c <xQueueGenericCreateStatic+0x88>
 800d478:	2301      	movs	r3, #1
 800d47a:	e000      	b.n	800d47e <xQueueGenericCreateStatic+0x8a>
 800d47c:	2300      	movs	r3, #0
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d10b      	bne.n	800d49a <xQueueGenericCreateStatic+0xa6>
    __asm volatile("	mov %0, %1												\n"
 800d482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d486:	f383 8811 	msr	BASEPRI, r3
 800d48a:	f3bf 8f6f 	isb	sy
 800d48e:	f3bf 8f4f 	dsb	sy
 800d492:	61fb      	str	r3, [r7, #28]
}
 800d494:	bf00      	nop
 800d496:	bf00      	nop
 800d498:	e7fd      	b.n	800d496 <xQueueGenericCreateStatic+0xa2>
#if (configASSERT_DEFINED == 1)
    {
        /* Sanity check that the size of the structure used to declare a
        variable of type StaticQueue_t or StaticSemaphore_t equals the size of
        the real queue and semaphore structures. */
        volatile size_t xSize = sizeof(StaticQueue_t);
 800d49a:	2348      	movs	r3, #72	@ 0x48
 800d49c:	617b      	str	r3, [r7, #20]
        configASSERT(xSize == sizeof(Queue_t));
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	2b48      	cmp	r3, #72	@ 0x48
 800d4a2:	d00b      	beq.n	800d4bc <xQueueGenericCreateStatic+0xc8>
    __asm volatile("	mov %0, %1												\n"
 800d4a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4a8:	f383 8811 	msr	BASEPRI, r3
 800d4ac:	f3bf 8f6f 	isb	sy
 800d4b0:	f3bf 8f4f 	dsb	sy
 800d4b4:	61bb      	str	r3, [r7, #24]
}
 800d4b6:	bf00      	nop
 800d4b8:	bf00      	nop
 800d4ba:	e7fd      	b.n	800d4b8 <xQueueGenericCreateStatic+0xc4>
        (void)xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d4bc:	697b      	ldr	r3, [r7, #20]
#endif /* configASSERT_DEFINED */

    /* The address of a statically allocated queue was passed in, use it.
    The address of a statically allocated storage area was also passed in
    but is already set. */
    pxNewQueue = (Queue_t *)pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (pxNewQueue != NULL) {
 800d4c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d00d      	beq.n	800d4e4 <xQueueGenericCreateStatic+0xf0>
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
        {
            /* Queues can be allocated wither statically or dynamically, so
            note this queue was allocated statically in case the queue is
            later deleted. */
            pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d4c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4ca:	2201      	movs	r2, #1
 800d4cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
        }
#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

        prvInitialiseNewQueue(uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue);
 800d4d0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d4d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4d6:	9300      	str	r3, [sp, #0]
 800d4d8:	4613      	mov	r3, r2
 800d4da:	687a      	ldr	r2, [r7, #4]
 800d4dc:	68b9      	ldr	r1, [r7, #8]
 800d4de:	68f8      	ldr	r0, [r7, #12]
 800d4e0:	f000 f805 	bl	800d4ee <prvInitialiseNewQueue>
    } else {
        traceQUEUE_CREATE_FAILED(ucQueueType);
        mtCOVERAGE_TEST_MARKER();
    }

    return pxNewQueue;
 800d4e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	3730      	adds	r7, #48	@ 0x30
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}

0800d4ee <prvInitialiseNewQueue>:
}

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue(const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t * pucQueueStorage, const uint8_t ucQueueType, Queue_t * pxNewQueue) {
 800d4ee:	b580      	push	{r7, lr}
 800d4f0:	b084      	sub	sp, #16
 800d4f2:	af00      	add	r7, sp, #0
 800d4f4:	60f8      	str	r0, [r7, #12]
 800d4f6:	60b9      	str	r1, [r7, #8]
 800d4f8:	607a      	str	r2, [r7, #4]
 800d4fa:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
    configUSE_TRACE_FACILITY not be set to 1. */
    (void)ucQueueType;

    if (uxItemSize == (UBaseType_t)0) {
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d103      	bne.n	800d50a <prvInitialiseNewQueue+0x1c>
        /* No RAM was allocated for the queue storage area, but PC head cannot
        be set to NULL because NULL is used as a key to say the queue is used as
        a mutex.  Therefore just set pcHead to point to the queue as a benign
        value that is known to be within the memory map. */
        pxNewQueue->pcHead = (int8_t *)pxNewQueue;
 800d502:	69bb      	ldr	r3, [r7, #24]
 800d504:	69ba      	ldr	r2, [r7, #24]
 800d506:	601a      	str	r2, [r3, #0]
 800d508:	e002      	b.n	800d510 <prvInitialiseNewQueue+0x22>
    } else {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = (int8_t *)pucQueueStorage;
 800d50a:	69bb      	ldr	r3, [r7, #24]
 800d50c:	687a      	ldr	r2, [r7, #4]
 800d50e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
    defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800d510:	69bb      	ldr	r3, [r7, #24]
 800d512:	68fa      	ldr	r2, [r7, #12]
 800d514:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800d516:	69bb      	ldr	r3, [r7, #24]
 800d518:	68ba      	ldr	r2, [r7, #8]
 800d51a:	641a      	str	r2, [r3, #64]	@ 0x40
    (void)xQueueGenericReset(pxNewQueue, pdTRUE);
 800d51c:	2101      	movs	r1, #1
 800d51e:	69b8      	ldr	r0, [r7, #24]
 800d520:	f7ff fefe 	bl	800d320 <xQueueGenericReset>
#if (configUSE_QUEUE_SETS == 1)
    { pxNewQueue->pxQueueSetContainer = NULL; }
#endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE(pxNewQueue);
}
 800d524:	bf00      	nop
 800d526:	3710      	adds	r7, #16
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}

0800d52c <xQueueGenericSend>:
}

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend(QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition) {
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b08e      	sub	sp, #56	@ 0x38
 800d530:	af00      	add	r7, sp, #0
 800d532:	60f8      	str	r0, [r7, #12]
 800d534:	60b9      	str	r1, [r7, #8]
 800d536:	607a      	str	r2, [r7, #4]
 800d538:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d53a:	2300      	movs	r3, #0
 800d53c:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT(pxQueue);
 800d542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d544:	2b00      	cmp	r3, #0
 800d546:	d10b      	bne.n	800d560 <xQueueGenericSend+0x34>
    __asm volatile("	mov %0, %1												\n"
 800d548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d54c:	f383 8811 	msr	BASEPRI, r3
 800d550:	f3bf 8f6f 	isb	sy
 800d554:	f3bf 8f4f 	dsb	sy
 800d558:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d55a:	bf00      	nop
 800d55c:	bf00      	nop
 800d55e:	e7fd      	b.n	800d55c <xQueueGenericSend+0x30>
    configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d103      	bne.n	800d56e <xQueueGenericSend+0x42>
 800d566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d101      	bne.n	800d572 <xQueueGenericSend+0x46>
 800d56e:	2301      	movs	r3, #1
 800d570:	e000      	b.n	800d574 <xQueueGenericSend+0x48>
 800d572:	2300      	movs	r3, #0
 800d574:	2b00      	cmp	r3, #0
 800d576:	d10b      	bne.n	800d590 <xQueueGenericSend+0x64>
    __asm volatile("	mov %0, %1												\n"
 800d578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d57c:	f383 8811 	msr	BASEPRI, r3
 800d580:	f3bf 8f6f 	isb	sy
 800d584:	f3bf 8f4f 	dsb	sy
 800d588:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d58a:	bf00      	nop
 800d58c:	bf00      	nop
 800d58e:	e7fd      	b.n	800d58c <xQueueGenericSend+0x60>
    configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	2b02      	cmp	r3, #2
 800d594:	d103      	bne.n	800d59e <xQueueGenericSend+0x72>
 800d596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d59a:	2b01      	cmp	r3, #1
 800d59c:	d101      	bne.n	800d5a2 <xQueueGenericSend+0x76>
 800d59e:	2301      	movs	r3, #1
 800d5a0:	e000      	b.n	800d5a4 <xQueueGenericSend+0x78>
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d10b      	bne.n	800d5c0 <xQueueGenericSend+0x94>
    __asm volatile("	mov %0, %1												\n"
 800d5a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5ac:	f383 8811 	msr	BASEPRI, r3
 800d5b0:	f3bf 8f6f 	isb	sy
 800d5b4:	f3bf 8f4f 	dsb	sy
 800d5b8:	623b      	str	r3, [r7, #32]
}
 800d5ba:	bf00      	nop
 800d5bc:	bf00      	nop
 800d5be:	e7fd      	b.n	800d5bc <xQueueGenericSend+0x90>
#if ((INCLUDE_xTaskGetSchedulerState == 1) || (configUSE_TIMERS == 1))
    { configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0))); }
 800d5c0:	f001 face 	bl	800eb60 <xTaskGetSchedulerState>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d102      	bne.n	800d5d0 <xQueueGenericSend+0xa4>
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d101      	bne.n	800d5d4 <xQueueGenericSend+0xa8>
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	e000      	b.n	800d5d6 <xQueueGenericSend+0xaa>
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d10b      	bne.n	800d5f2 <xQueueGenericSend+0xc6>
    __asm volatile("	mov %0, %1												\n"
 800d5da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5de:	f383 8811 	msr	BASEPRI, r3
 800d5e2:	f3bf 8f6f 	isb	sy
 800d5e6:	f3bf 8f4f 	dsb	sy
 800d5ea:	61fb      	str	r3, [r7, #28]
}
 800d5ec:	bf00      	nop
 800d5ee:	bf00      	nop
 800d5f0:	e7fd      	b.n	800d5ee <xQueueGenericSend+0xc2>

    /*lint -save -e904 This function relaxes the coding standard somewhat to
    allow return statements within the function itself.  This is done in the
    interest of execution time efficiency. */
    for (;;) {
        taskENTER_CRITICAL();
 800d5f2:	f002 f869 	bl	800f6c8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
            highest priority task wanting to access the queue.  If the head item
            in the queue is to be overwritten then it does not matter if the
            queue is full. */
            if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
 800d5f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d302      	bcc.n	800d608 <xQueueGenericSend+0xdc>
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	2b02      	cmp	r3, #2
 800d606:	d129      	bne.n	800d65c <xQueueGenericSend+0x130>
                        }
                    }
                }
#else  /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
 800d608:	683a      	ldr	r2, [r7, #0]
 800d60a:	68b9      	ldr	r1, [r7, #8]
 800d60c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d60e:	f000 fa0f 	bl	800da30 <prvCopyDataToQueue>
 800d612:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                    queue then unblock it now. */
                    if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
 800d614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d010      	beq.n	800d63e <xQueueGenericSend+0x112>
                        if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
 800d61c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d61e:	3324      	adds	r3, #36	@ 0x24
 800d620:	4618      	mov	r0, r3
 800d622:	f001 f8dd 	bl	800e7e0 <xTaskRemoveFromEventList>
 800d626:	4603      	mov	r3, r0
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d013      	beq.n	800d654 <xQueueGenericSend+0x128>
                            /* The unblocked task has a priority higher than
                            our own so yield immediately.  Yes it is ok to do
                            this from within the critical section - the kernel
                            takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800d62c:	4b3f      	ldr	r3, [pc, #252]	@ (800d72c <xQueueGenericSend+0x200>)
 800d62e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d632:	601a      	str	r2, [r3, #0]
 800d634:	f3bf 8f4f 	dsb	sy
 800d638:	f3bf 8f6f 	isb	sy
 800d63c:	e00a      	b.n	800d654 <xQueueGenericSend+0x128>
                        } else {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    } else if (xYieldRequired != pdFALSE) {
 800d63e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d640:	2b00      	cmp	r3, #0
 800d642:	d007      	beq.n	800d654 <xQueueGenericSend+0x128>
                        /* This path is a special case that will only get
                        executed if the task was holding multiple mutexes and
                        the mutexes were given back in an order that is
                        different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800d644:	4b39      	ldr	r3, [pc, #228]	@ (800d72c <xQueueGenericSend+0x200>)
 800d646:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d64a:	601a      	str	r2, [r3, #0]
 800d64c:	f3bf 8f4f 	dsb	sy
 800d650:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
#endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800d654:	f002 f86a 	bl	800f72c <vPortExitCritical>
                return pdPASS;
 800d658:	2301      	movs	r3, #1
 800d65a:	e063      	b.n	800d724 <xQueueGenericSend+0x1f8>
            } else {
                if (xTicksToWait == (TickType_t)0) {
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d103      	bne.n	800d66a <xQueueGenericSend+0x13e>
                    /* The queue was full and no block time is specified (or
                    the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800d662:	f002 f863 	bl	800f72c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                    the function. */
                    traceQUEUE_SEND_FAILED(pxQueue);
                    return errQUEUE_FULL;
 800d666:	2300      	movs	r3, #0
 800d668:	e05c      	b.n	800d724 <xQueueGenericSend+0x1f8>
                } else if (xEntryTimeSet == pdFALSE) {
 800d66a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d106      	bne.n	800d67e <xQueueGenericSend+0x152>
                    /* The queue was full and a block time was specified so
                    configure the timeout structure. */
                    vTaskInternalSetTimeOutState(&xTimeOut);
 800d670:	f107 0314 	add.w	r3, r7, #20
 800d674:	4618      	mov	r0, r3
 800d676:	f001 f917 	bl	800e8a8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800d67a:	2301      	movs	r3, #1
 800d67c:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800d67e:	f002 f855 	bl	800f72c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
        now the critical section has been exited. */

        vTaskSuspendAll();
 800d682:	f000 fe89 	bl	800e398 <vTaskSuspendAll>
        prvLockQueue(pxQueue);
 800d686:	f002 f81f 	bl	800f6c8 <vPortEnterCritical>
 800d68a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d68c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d690:	b25b      	sxtb	r3, r3
 800d692:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d696:	d103      	bne.n	800d6a0 <xQueueGenericSend+0x174>
 800d698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d69a:	2200      	movs	r2, #0
 800d69c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d6a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d6a6:	b25b      	sxtb	r3, r3
 800d6a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ac:	d103      	bne.n	800d6b6 <xQueueGenericSend+0x18a>
 800d6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d6b6:	f002 f839 	bl	800f72c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
 800d6ba:	1d3a      	adds	r2, r7, #4
 800d6bc:	f107 0314 	add.w	r3, r7, #20
 800d6c0:	4611      	mov	r1, r2
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f001 f906 	bl	800e8d4 <xTaskCheckForTimeOut>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d124      	bne.n	800d718 <xQueueGenericSend+0x1ec>
            if (prvIsQueueFull(pxQueue) != pdFALSE) {
 800d6ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d6d0:	f000 fa98 	bl	800dc04 <prvIsQueueFull>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d018      	beq.n	800d70c <xQueueGenericSend+0x1e0>
                traceBLOCKING_ON_QUEUE_SEND(pxQueue);
                vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend), xTicksToWait);
 800d6da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6dc:	3310      	adds	r3, #16
 800d6de:	687a      	ldr	r2, [r7, #4]
 800d6e0:	4611      	mov	r1, r2
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f001 f82a 	bl	800e73c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                event list.  It is possible that interrupts occurring now
                remove this task from the event list again - but as the
                scheduler is suspended the task will go onto the pending
                ready last instead of the actual ready list. */
                prvUnlockQueue(pxQueue);
 800d6e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d6ea:	f000 fa23 	bl	800db34 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                ready list into the ready list - so it is feasible that this
                task is already in a ready list before it yields - in which
                case the yield will not cause a context switch unless there
                is also a higher priority task in the pending ready list. */
                if (xTaskResumeAll() == pdFALSE) {
 800d6ee:	f000 fe61 	bl	800e3b4 <xTaskResumeAll>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	f47f af7c 	bne.w	800d5f2 <xQueueGenericSend+0xc6>
                    portYIELD_WITHIN_API();
 800d6fa:	4b0c      	ldr	r3, [pc, #48]	@ (800d72c <xQueueGenericSend+0x200>)
 800d6fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d700:	601a      	str	r2, [r3, #0]
 800d702:	f3bf 8f4f 	dsb	sy
 800d706:	f3bf 8f6f 	isb	sy
 800d70a:	e772      	b.n	800d5f2 <xQueueGenericSend+0xc6>
                }
            } else {
                /* Try again. */
                prvUnlockQueue(pxQueue);
 800d70c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d70e:	f000 fa11 	bl	800db34 <prvUnlockQueue>
                (void)xTaskResumeAll();
 800d712:	f000 fe4f 	bl	800e3b4 <xTaskResumeAll>
 800d716:	e76c      	b.n	800d5f2 <xQueueGenericSend+0xc6>
            }
        } else {
            /* The timeout has expired. */
            prvUnlockQueue(pxQueue);
 800d718:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d71a:	f000 fa0b 	bl	800db34 <prvUnlockQueue>
            (void)xTaskResumeAll();
 800d71e:	f000 fe49 	bl	800e3b4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED(pxQueue);
            return errQUEUE_FULL;
 800d722:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800d724:	4618      	mov	r0, r3
 800d726:	3738      	adds	r7, #56	@ 0x38
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}
 800d72c:	e000ed04 	.word	0xe000ed04

0800d730 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR(QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition) {
 800d730:	b580      	push	{r7, lr}
 800d732:	b090      	sub	sp, #64	@ 0x40
 800d734:	af00      	add	r7, sp, #0
 800d736:	60f8      	str	r0, [r7, #12]
 800d738:	60b9      	str	r1, [r7, #8]
 800d73a:	607a      	str	r2, [r7, #4]
 800d73c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT(pxQueue);
 800d742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d744:	2b00      	cmp	r3, #0
 800d746:	d10b      	bne.n	800d760 <xQueueGenericSendFromISR+0x30>
    __asm volatile("	mov %0, %1												\n"
 800d748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d74c:	f383 8811 	msr	BASEPRI, r3
 800d750:	f3bf 8f6f 	isb	sy
 800d754:	f3bf 8f4f 	dsb	sy
 800d758:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d75a:	bf00      	nop
 800d75c:	bf00      	nop
 800d75e:	e7fd      	b.n	800d75c <xQueueGenericSendFromISR+0x2c>
    configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d103      	bne.n	800d76e <xQueueGenericSendFromISR+0x3e>
 800d766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d101      	bne.n	800d772 <xQueueGenericSendFromISR+0x42>
 800d76e:	2301      	movs	r3, #1
 800d770:	e000      	b.n	800d774 <xQueueGenericSendFromISR+0x44>
 800d772:	2300      	movs	r3, #0
 800d774:	2b00      	cmp	r3, #0
 800d776:	d10b      	bne.n	800d790 <xQueueGenericSendFromISR+0x60>
    __asm volatile("	mov %0, %1												\n"
 800d778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d77c:	f383 8811 	msr	BASEPRI, r3
 800d780:	f3bf 8f6f 	isb	sy
 800d784:	f3bf 8f4f 	dsb	sy
 800d788:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d78a:	bf00      	nop
 800d78c:	bf00      	nop
 800d78e:	e7fd      	b.n	800d78c <xQueueGenericSendFromISR+0x5c>
    configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	2b02      	cmp	r3, #2
 800d794:	d103      	bne.n	800d79e <xQueueGenericSendFromISR+0x6e>
 800d796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d79a:	2b01      	cmp	r3, #1
 800d79c:	d101      	bne.n	800d7a2 <xQueueGenericSendFromISR+0x72>
 800d79e:	2301      	movs	r3, #1
 800d7a0:	e000      	b.n	800d7a4 <xQueueGenericSendFromISR+0x74>
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d10b      	bne.n	800d7c0 <xQueueGenericSendFromISR+0x90>
    __asm volatile("	mov %0, %1												\n"
 800d7a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7ac:	f383 8811 	msr	BASEPRI, r3
 800d7b0:	f3bf 8f6f 	isb	sy
 800d7b4:	f3bf 8f4f 	dsb	sy
 800d7b8:	623b      	str	r3, [r7, #32]
}
 800d7ba:	bf00      	nop
 800d7bc:	bf00      	nop
 800d7be:	e7fd      	b.n	800d7bc <xQueueGenericSendFromISR+0x8c>
    that have been assigned a priority at or (logically) below the maximum
    system call	interrupt priority.  FreeRTOS maintains a separate interrupt
    safe API to ensure interrupt entry is as fast and as simple as possible.
    More information (albeit Cortex-M specific) is provided on the following
    link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d7c0:	f002 f862 	bl	800f888 <vPortValidateInterruptPriority>
/*-----------------------------------------------------------*/

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI(void) {
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile("	mrs %0, basepri											\n"
 800d7c4:	f3ef 8211 	mrs	r2, BASEPRI
 800d7c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7cc:	f383 8811 	msr	BASEPRI, r3
 800d7d0:	f3bf 8f6f 	isb	sy
 800d7d4:	f3bf 8f4f 	dsb	sy
 800d7d8:	61fa      	str	r2, [r7, #28]
 800d7da:	61bb      	str	r3, [r7, #24]
                   : "i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
                   : "memory");

    /* This return will not be reached but is necessary to prevent compiler
    warnings. */
    return ulOriginalBASEPRI;
 800d7dc:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
    in the queue.  Also don't directly wake a task that was blocked on a queue
    read, instead return a flag to say whether a context switch is required or
    not (i.e. has a task with a higher priority than us been woken by this
    post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d7de:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
 800d7e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d7e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d7e8:	429a      	cmp	r2, r3
 800d7ea:	d302      	bcc.n	800d7f2 <xQueueGenericSendFromISR+0xc2>
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	2b02      	cmp	r3, #2
 800d7f0:	d12f      	bne.n	800d852 <xQueueGenericSendFromISR+0x122>
            const int8_t cTxLock = pxQueue->cTxLock;
 800d7f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d7f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d7fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d800:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
            semaphore or mutex.  That means prvCopyDataToQueue() cannot result
            in a task disinheriting a priority and prvCopyDataToQueue() can be
            called here even though the disinherit function does not check if
            the scheduler is suspended before accessing the ready lists. */
            (void)prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
 800d802:	683a      	ldr	r2, [r7, #0]
 800d804:	68b9      	ldr	r1, [r7, #8]
 800d806:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d808:	f000 f912 	bl	800da30 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
            be done when the queue is unlocked later. */
            if (cTxLock == queueUNLOCKED) {
 800d80c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d810:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d814:	d112      	bne.n	800d83c <xQueueGenericSendFromISR+0x10c>
                        }
                    }
                }
#else  /* configUSE_QUEUE_SETS */
                {
                    if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
 800d816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d016      	beq.n	800d84c <xQueueGenericSendFromISR+0x11c>
                        if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
 800d81e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d820:	3324      	adds	r3, #36	@ 0x24
 800d822:	4618      	mov	r0, r3
 800d824:	f000 ffdc 	bl	800e7e0 <xTaskRemoveFromEventList>
 800d828:	4603      	mov	r3, r0
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d00e      	beq.n	800d84c <xQueueGenericSendFromISR+0x11c>
                            /* The task waiting has a higher priority so record that a
                            context	switch is required. */
                            if (pxHigherPriorityTaskWoken != NULL) {
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d00b      	beq.n	800d84c <xQueueGenericSendFromISR+0x11c>
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2201      	movs	r2, #1
 800d838:	601a      	str	r2, [r3, #0]
 800d83a:	e007      	b.n	800d84c <xQueueGenericSendFromISR+0x11c>
                }
#endif /* configUSE_QUEUE_SETS */
            } else {
                /* Increment the lock count so the task that unlocks the queue
                knows that data was posted while it was locked. */
                pxQueue->cTxLock = (int8_t)(cTxLock + 1);
 800d83c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d840:	3301      	adds	r3, #1
 800d842:	b2db      	uxtb	r3, r3
 800d844:	b25a      	sxtb	r2, r3
 800d846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d848:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 800d84c:	2301      	movs	r3, #1
 800d84e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
 800d850:	e001      	b.n	800d856 <xQueueGenericSendFromISR+0x126>
        } else {
            traceQUEUE_SEND_FROM_ISR_FAILED(pxQueue);
            xReturn = errQUEUE_FULL;
 800d852:	2300      	movs	r3, #0
 800d854:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d858:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue) {
    __asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	f383 8811 	msr	BASEPRI, r3
}
 800d860:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);

    return xReturn;
 800d862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d864:	4618      	mov	r0, r3
 800d866:	3740      	adds	r7, #64	@ 0x40
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}

0800d86c <xQueueReceive>:

    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive(QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait) {
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b08c      	sub	sp, #48	@ 0x30
 800d870:	af00      	add	r7, sp, #0
 800d872:	60f8      	str	r0, [r7, #12]
 800d874:	60b9      	str	r1, [r7, #8]
 800d876:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800d878:	2300      	movs	r3, #0
 800d87a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT((pxQueue));
 800d880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d882:	2b00      	cmp	r3, #0
 800d884:	d10b      	bne.n	800d89e <xQueueReceive+0x32>
    __asm volatile("	mov %0, %1												\n"
 800d886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d88a:	f383 8811 	msr	BASEPRI, r3
 800d88e:	f3bf 8f6f 	isb	sy
 800d892:	f3bf 8f4f 	dsb	sy
 800d896:	623b      	str	r3, [r7, #32]
}
 800d898:	bf00      	nop
 800d89a:	bf00      	nop
 800d89c:	e7fd      	b.n	800d89a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
    is zero (so no data is copied into the buffer. */
    configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d103      	bne.n	800d8ac <xQueueReceive+0x40>
 800d8a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d101      	bne.n	800d8b0 <xQueueReceive+0x44>
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	e000      	b.n	800d8b2 <xQueueReceive+0x46>
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d10b      	bne.n	800d8ce <xQueueReceive+0x62>
    __asm volatile("	mov %0, %1												\n"
 800d8b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8ba:	f383 8811 	msr	BASEPRI, r3
 800d8be:	f3bf 8f6f 	isb	sy
 800d8c2:	f3bf 8f4f 	dsb	sy
 800d8c6:	61fb      	str	r3, [r7, #28]
}
 800d8c8:	bf00      	nop
 800d8ca:	bf00      	nop
 800d8cc:	e7fd      	b.n	800d8ca <xQueueReceive+0x5e>

/* Cannot block if the scheduler is suspended. */
#if ((INCLUDE_xTaskGetSchedulerState == 1) || (configUSE_TIMERS == 1))
    { configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0))); }
 800d8ce:	f001 f947 	bl	800eb60 <xTaskGetSchedulerState>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d102      	bne.n	800d8de <xQueueReceive+0x72>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d101      	bne.n	800d8e2 <xQueueReceive+0x76>
 800d8de:	2301      	movs	r3, #1
 800d8e0:	e000      	b.n	800d8e4 <xQueueReceive+0x78>
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d10b      	bne.n	800d900 <xQueueReceive+0x94>
    __asm volatile("	mov %0, %1												\n"
 800d8e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8ec:	f383 8811 	msr	BASEPRI, r3
 800d8f0:	f3bf 8f6f 	isb	sy
 800d8f4:	f3bf 8f4f 	dsb	sy
 800d8f8:	61bb      	str	r3, [r7, #24]
}
 800d8fa:	bf00      	nop
 800d8fc:	bf00      	nop
 800d8fe:	e7fd      	b.n	800d8fc <xQueueReceive+0x90>

    /*lint -save -e904  This function relaxes the coding standard somewhat to
    allow return statements within the function itself.  This is done in the
    interest of execution time efficiency. */
    for (;;) {
        taskENTER_CRITICAL();
 800d900:	f001 fee2 	bl	800f6c8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d908:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
            must be the highest priority task wanting to access the queue. */
            if (uxMessagesWaiting > (UBaseType_t)0) {
 800d90a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d01f      	beq.n	800d950 <xQueueReceive+0xe4>
                /* Data available, remove one item. */
                prvCopyDataFromQueue(pxQueue, pvBuffer);
 800d910:	68b9      	ldr	r1, [r7, #8]
 800d912:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d914:	f000 f8e8 	bl	800dae8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE(pxQueue);
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - (UBaseType_t)1;
 800d918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d91a:	1e5a      	subs	r2, r3, #1
 800d91c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d91e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                post to the queue?  If so, unblock the highest priority waiting
                task. */
                if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
 800d920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d922:	691b      	ldr	r3, [r3, #16]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d00f      	beq.n	800d948 <xQueueReceive+0xdc>
                    if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
 800d928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d92a:	3310      	adds	r3, #16
 800d92c:	4618      	mov	r0, r3
 800d92e:	f000 ff57 	bl	800e7e0 <xTaskRemoveFromEventList>
 800d932:	4603      	mov	r3, r0
 800d934:	2b00      	cmp	r3, #0
 800d936:	d007      	beq.n	800d948 <xQueueReceive+0xdc>
                        queueYIELD_IF_USING_PREEMPTION();
 800d938:	4b3c      	ldr	r3, [pc, #240]	@ (800da2c <xQueueReceive+0x1c0>)
 800d93a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d93e:	601a      	str	r2, [r3, #0]
 800d940:	f3bf 8f4f 	dsb	sy
 800d944:	f3bf 8f6f 	isb	sy
                    }
                } else {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800d948:	f001 fef0 	bl	800f72c <vPortExitCritical>
                return pdPASS;
 800d94c:	2301      	movs	r3, #1
 800d94e:	e069      	b.n	800da24 <xQueueReceive+0x1b8>
            } else {
                if (xTicksToWait == (TickType_t)0) {
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d103      	bne.n	800d95e <xQueueReceive+0xf2>
                    /* The queue was empty and no block time is specified (or
                    the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800d956:	f001 fee9 	bl	800f72c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED(pxQueue);
                    return errQUEUE_EMPTY;
 800d95a:	2300      	movs	r3, #0
 800d95c:	e062      	b.n	800da24 <xQueueReceive+0x1b8>
                } else if (xEntryTimeSet == pdFALSE) {
 800d95e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d960:	2b00      	cmp	r3, #0
 800d962:	d106      	bne.n	800d972 <xQueueReceive+0x106>
                    /* The queue was empty and a block time was specified so
                    configure the timeout structure. */
                    vTaskInternalSetTimeOutState(&xTimeOut);
 800d964:	f107 0310 	add.w	r3, r7, #16
 800d968:	4618      	mov	r0, r3
 800d96a:	f000 ff9d 	bl	800e8a8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800d96e:	2301      	movs	r3, #1
 800d970:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800d972:	f001 fedb 	bl	800f72c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
        now the critical section has been exited. */

        vTaskSuspendAll();
 800d976:	f000 fd0f 	bl	800e398 <vTaskSuspendAll>
        prvLockQueue(pxQueue);
 800d97a:	f001 fea5 	bl	800f6c8 <vPortEnterCritical>
 800d97e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d980:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d984:	b25b      	sxtb	r3, r3
 800d986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d98a:	d103      	bne.n	800d994 <xQueueReceive+0x128>
 800d98c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d98e:	2200      	movs	r2, #0
 800d990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d996:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d99a:	b25b      	sxtb	r3, r3
 800d99c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9a0:	d103      	bne.n	800d9aa <xQueueReceive+0x13e>
 800d9a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d9aa:	f001 febf 	bl	800f72c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
 800d9ae:	1d3a      	adds	r2, r7, #4
 800d9b0:	f107 0310 	add.w	r3, r7, #16
 800d9b4:	4611      	mov	r1, r2
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f000 ff8c 	bl	800e8d4 <xTaskCheckForTimeOut>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d123      	bne.n	800da0a <xQueueReceive+0x19e>
            /* The timeout has not expired.  If the queue is still empty place
            the task on the list of tasks waiting to receive from the queue. */
            if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
 800d9c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9c4:	f000 f908 	bl	800dbd8 <prvIsQueueEmpty>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d017      	beq.n	800d9fe <xQueueReceive+0x192>
                traceBLOCKING_ON_QUEUE_RECEIVE(pxQueue);
                vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
 800d9ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9d0:	3324      	adds	r3, #36	@ 0x24
 800d9d2:	687a      	ldr	r2, [r7, #4]
 800d9d4:	4611      	mov	r1, r2
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f000 feb0 	bl	800e73c <vTaskPlaceOnEventList>
                prvUnlockQueue(pxQueue);
 800d9dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9de:	f000 f8a9 	bl	800db34 <prvUnlockQueue>
                if (xTaskResumeAll() == pdFALSE) {
 800d9e2:	f000 fce7 	bl	800e3b4 <xTaskResumeAll>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d189      	bne.n	800d900 <xQueueReceive+0x94>
                    portYIELD_WITHIN_API();
 800d9ec:	4b0f      	ldr	r3, [pc, #60]	@ (800da2c <xQueueReceive+0x1c0>)
 800d9ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9f2:	601a      	str	r2, [r3, #0]
 800d9f4:	f3bf 8f4f 	dsb	sy
 800d9f8:	f3bf 8f6f 	isb	sy
 800d9fc:	e780      	b.n	800d900 <xQueueReceive+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } else {
                /* The queue contains data again.  Loop back to try and read the
                data. */
                prvUnlockQueue(pxQueue);
 800d9fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da00:	f000 f898 	bl	800db34 <prvUnlockQueue>
                (void)xTaskResumeAll();
 800da04:	f000 fcd6 	bl	800e3b4 <xTaskResumeAll>
 800da08:	e77a      	b.n	800d900 <xQueueReceive+0x94>
            }
        } else {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
            back and attempt to read the data. */
            prvUnlockQueue(pxQueue);
 800da0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da0c:	f000 f892 	bl	800db34 <prvUnlockQueue>
            (void)xTaskResumeAll();
 800da10:	f000 fcd0 	bl	800e3b4 <xTaskResumeAll>

            if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
 800da14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da16:	f000 f8df 	bl	800dbd8 <prvIsQueueEmpty>
 800da1a:	4603      	mov	r3, r0
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	f43f af6f 	beq.w	800d900 <xQueueReceive+0x94>
                traceQUEUE_RECEIVE_FAILED(pxQueue);
                return errQUEUE_EMPTY;
 800da22:	2300      	movs	r3, #0
            } else {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800da24:	4618      	mov	r0, r3
 800da26:	3730      	adds	r7, #48	@ 0x30
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}
 800da2c:	e000ed04 	.word	0xe000ed04

0800da30 <prvCopyDataToQueue>:
}

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue(Queue_t * const pxQueue, const void * pvItemToQueue, const BaseType_t xPosition) {
 800da30:	b580      	push	{r7, lr}
 800da32:	b086      	sub	sp, #24
 800da34:	af00      	add	r7, sp, #0
 800da36:	60f8      	str	r0, [r7, #12]
 800da38:	60b9      	str	r1, [r7, #8]
 800da3a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800da3c:	2300      	movs	r3, #0
 800da3e:	613b      	str	r3, [r7, #16]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da44:	617b      	str	r3, [r7, #20]

    if (pxQueue->uxItemSize == (UBaseType_t)0) {
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d043      	beq.n	800dad6 <prvCopyDataToQueue+0xa6>
            } else {
                mtCOVERAGE_TEST_MARKER();
            }
        }
#endif /* configUSE_MUTEXES */
    } else if (xPosition == queueSEND_TO_BACK) {
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d119      	bne.n	800da88 <prvCopyDataToQueue+0x58>
        (void)memcpy((void *)pxQueue->pcWriteTo, pvItemToQueue, (size_t)pxQueue->uxItemSize); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	6858      	ldr	r0, [r3, #4]
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da5c:	461a      	mov	r2, r3
 800da5e:	68b9      	ldr	r1, [r7, #8]
 800da60:	f003 fb41 	bl	80110e6 <memcpy>
                                                                                                 memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                            /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	685a      	ldr	r2, [r3, #4]
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da6c:	441a      	add	r2, r3
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	605a      	str	r2, [r3, #4]
        if (pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail)                                   /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	685a      	ldr	r2, [r3, #4]
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	689b      	ldr	r3, [r3, #8]
 800da7a:	429a      	cmp	r2, r3
 800da7c:	d32b      	bcc.n	800dad6 <prvCopyDataToQueue+0xa6>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	681a      	ldr	r2, [r3, #0]
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	605a      	str	r2, [r3, #4]
 800da86:	e026      	b.n	800dad6 <prvCopyDataToQueue+0xa6>
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    } else {
        (void)memcpy((void *)pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, (size_t)pxQueue->uxItemSize); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	68d8      	ldr	r0, [r3, #12]
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da90:	461a      	mov	r2, r3
 800da92:	68b9      	ldr	r1, [r7, #8]
 800da94:	f003 fb27 	bl	80110e6 <memcpy>
                                                                                                           no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	68da      	ldr	r2, [r3, #12]
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800daa0:	425b      	negs	r3, r3
 800daa2:	441a      	add	r2, r3
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	60da      	str	r2, [r3, #12]
        if (pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	68da      	ldr	r2, [r3, #12]
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d207      	bcs.n	800dac4 <prvCopyDataToQueue+0x94>
        {
            pxQueue->u.xQueue.pcReadFrom = (pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize);
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	689a      	ldr	r2, [r3, #8]
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dabc:	425b      	negs	r3, r3
 800dabe:	441a      	add	r2, r3
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	60da      	str	r2, [r3, #12]
        } else {
            mtCOVERAGE_TEST_MARKER();
        }

        if (xPosition == queueOVERWRITE) {
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2b02      	cmp	r3, #2
 800dac8:	d105      	bne.n	800dad6 <prvCopyDataToQueue+0xa6>
            if (uxMessagesWaiting > (UBaseType_t)0) {
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d002      	beq.n	800dad6 <prvCopyDataToQueue+0xa6>
                /* An item is not being added but overwritten, so subtract
                one from the recorded number of items in the queue so when
                one is added again below the number of recorded items remains
                correct. */
                --uxMessagesWaiting;
 800dad0:	697b      	ldr	r3, [r7, #20]
 800dad2:	3b01      	subs	r3, #1
 800dad4:	617b      	str	r3, [r7, #20]
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t)1;
 800dad6:	697b      	ldr	r3, [r7, #20]
 800dad8:	1c5a      	adds	r2, r3, #1
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800dade:	693b      	ldr	r3, [r7, #16]
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	3718      	adds	r7, #24
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}

0800dae8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue(Queue_t * const pxQueue, void * const pvBuffer) {
 800dae8:	b580      	push	{r7, lr}
 800daea:	b082      	sub	sp, #8
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
 800daf0:	6039      	str	r1, [r7, #0]
    if (pxQueue->uxItemSize != (UBaseType_t)0) {
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d018      	beq.n	800db2c <prvCopyDataFromQueue+0x44>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;          /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	68da      	ldr	r2, [r3, #12]
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db02:	441a      	add	r2, r3
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	60da      	str	r2, [r3, #12]
        if (pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	68da      	ldr	r2, [r3, #12]
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	689b      	ldr	r3, [r3, #8]
 800db10:	429a      	cmp	r2, r3
 800db12:	d303      	bcc.n	800db1c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681a      	ldr	r2, [r3, #0]
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	60da      	str	r2, [r3, #12]
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
        (void)memcpy((void *)pvBuffer, (void *)pxQueue->u.xQueue.pcReadFrom,
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	68d9      	ldr	r1, [r3, #12]
                     (size_t)pxQueue->uxItemSize); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        (void)memcpy((void *)pvBuffer, (void *)pxQueue->u.xQueue.pcReadFrom,
 800db24:	461a      	mov	r2, r3
 800db26:	6838      	ldr	r0, [r7, #0]
 800db28:	f003 fadd 	bl	80110e6 <memcpy>
                                                      required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    }
}
 800db2c:	bf00      	nop
 800db2e:	3708      	adds	r7, #8
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}

0800db34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue(Queue_t * const pxQueue) {
 800db34:	b580      	push	{r7, lr}
 800db36:	b084      	sub	sp, #16
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
    removed from the queue while the queue was locked.  When a queue is
    locked items can be added or removed, but the event lists cannot be
    updated. */
    taskENTER_CRITICAL();
 800db3c:	f001 fdc4 	bl	800f6c8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800db46:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while (cTxLock > queueLOCKED_UNMODIFIED) {
 800db48:	e011      	b.n	800db6e <prvUnlockQueue+0x3a>
            }
#else  /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                the pending ready list as the scheduler is still suspended. */
                if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d012      	beq.n	800db78 <prvUnlockQueue+0x44>
                    if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	3324      	adds	r3, #36	@ 0x24
 800db56:	4618      	mov	r0, r3
 800db58:	f000 fe42 	bl	800e7e0 <xTaskRemoveFromEventList>
 800db5c:	4603      	mov	r3, r0
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d001      	beq.n	800db66 <prvUnlockQueue+0x32>
                        /* The task waiting has a higher priority so record that
                        a context switch is required. */
                        vTaskMissedYield();
 800db62:	f000 ff1b 	bl	800e99c <vTaskMissedYield>
                    break;
                }
            }
#endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800db66:	7bfb      	ldrb	r3, [r7, #15]
 800db68:	3b01      	subs	r3, #1
 800db6a:	b2db      	uxtb	r3, r3
 800db6c:	73fb      	strb	r3, [r7, #15]
        while (cTxLock > queueLOCKED_UNMODIFIED) {
 800db6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db72:	2b00      	cmp	r3, #0
 800db74:	dce9      	bgt.n	800db4a <prvUnlockQueue+0x16>
 800db76:	e000      	b.n	800db7a <prvUnlockQueue+0x46>
                    break;
 800db78:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	22ff      	movs	r2, #255	@ 0xff
 800db7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800db82:	f001 fdd3 	bl	800f72c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800db86:	f001 fd9f 	bl	800f6c8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800db90:	73bb      	strb	r3, [r7, #14]

        while (cRxLock > queueLOCKED_UNMODIFIED) {
 800db92:	e011      	b.n	800dbb8 <prvUnlockQueue+0x84>
            if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	691b      	ldr	r3, [r3, #16]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d012      	beq.n	800dbc2 <prvUnlockQueue+0x8e>
                if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	3310      	adds	r3, #16
 800dba0:	4618      	mov	r0, r3
 800dba2:	f000 fe1d 	bl	800e7e0 <xTaskRemoveFromEventList>
 800dba6:	4603      	mov	r3, r0
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d001      	beq.n	800dbb0 <prvUnlockQueue+0x7c>
                    vTaskMissedYield();
 800dbac:	f000 fef6 	bl	800e99c <vTaskMissedYield>
                } else {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800dbb0:	7bbb      	ldrb	r3, [r7, #14]
 800dbb2:	3b01      	subs	r3, #1
 800dbb4:	b2db      	uxtb	r3, r3
 800dbb6:	73bb      	strb	r3, [r7, #14]
        while (cRxLock > queueLOCKED_UNMODIFIED) {
 800dbb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	dce9      	bgt.n	800db94 <prvUnlockQueue+0x60>
 800dbc0:	e000      	b.n	800dbc4 <prvUnlockQueue+0x90>
            } else {
                break;
 800dbc2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	22ff      	movs	r2, #255	@ 0xff
 800dbc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800dbcc:	f001 fdae 	bl	800f72c <vPortExitCritical>
}
 800dbd0:	bf00      	nop
 800dbd2:	3710      	adds	r7, #16
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}

0800dbd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty(const Queue_t * pxQueue) {
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b084      	sub	sp, #16
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800dbe0:	f001 fd72 	bl	800f6c8 <vPortEnterCritical>
    {
        if (pxQueue->uxMessagesWaiting == (UBaseType_t)0) {
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d102      	bne.n	800dbf2 <prvIsQueueEmpty+0x1a>
            xReturn = pdTRUE;
 800dbec:	2301      	movs	r3, #1
 800dbee:	60fb      	str	r3, [r7, #12]
 800dbf0:	e001      	b.n	800dbf6 <prvIsQueueEmpty+0x1e>
        } else {
            xReturn = pdFALSE;
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800dbf6:	f001 fd99 	bl	800f72c <vPortExitCritical>

    return xReturn;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3710      	adds	r7, #16
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}

0800dc04 <prvIsQueueFull>:

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull(const Queue_t * pxQueue) {
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b084      	sub	sp, #16
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800dc0c:	f001 fd5c 	bl	800f6c8 <vPortEnterCritical>
    {
        if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d102      	bne.n	800dc22 <prvIsQueueFull+0x1e>
            xReturn = pdTRUE;
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	60fb      	str	r3, [r7, #12]
 800dc20:	e001      	b.n	800dc26 <prvIsQueueFull+0x22>
        } else {
            xReturn = pdFALSE;
 800dc22:	2300      	movs	r3, #0
 800dc24:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800dc26:	f001 fd81 	bl	800f72c <vPortExitCritical>

    return xReturn;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3710      	adds	r7, #16
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}

0800dc34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if (configQUEUE_REGISTRY_SIZE > 0)

void vQueueAddToRegistry(QueueHandle_t xQueue, const char * pcQueueName) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800dc34:	b480      	push	{r7}
 800dc36:	b085      	sub	sp, #20
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	6039      	str	r1, [r7, #0]
    UBaseType_t ux;

    /* See if there is an empty space in the registry.  A NULL name denotes
    a free slot. */
    for (ux = (UBaseType_t)0U; ux < (UBaseType_t)configQUEUE_REGISTRY_SIZE; ux++) {
 800dc3e:	2300      	movs	r3, #0
 800dc40:	60fb      	str	r3, [r7, #12]
 800dc42:	e014      	b.n	800dc6e <vQueueAddToRegistry+0x3a>
        if (xQueueRegistry[ux].pcQueueName == NULL) {
 800dc44:	4a0f      	ldr	r2, [pc, #60]	@ (800dc84 <vQueueAddToRegistry+0x50>)
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d10b      	bne.n	800dc68 <vQueueAddToRegistry+0x34>
            /* Store the information on this queue. */
            xQueueRegistry[ux].pcQueueName = pcQueueName;
 800dc50:	490c      	ldr	r1, [pc, #48]	@ (800dc84 <vQueueAddToRegistry+0x50>)
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	683a      	ldr	r2, [r7, #0]
 800dc56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
            xQueueRegistry[ux].xHandle = xQueue;
 800dc5a:	4a0a      	ldr	r2, [pc, #40]	@ (800dc84 <vQueueAddToRegistry+0x50>)
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	00db      	lsls	r3, r3, #3
 800dc60:	4413      	add	r3, r2
 800dc62:	687a      	ldr	r2, [r7, #4]
 800dc64:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD(xQueue, pcQueueName);
            break;
 800dc66:	e006      	b.n	800dc76 <vQueueAddToRegistry+0x42>
    for (ux = (UBaseType_t)0U; ux < (UBaseType_t)configQUEUE_REGISTRY_SIZE; ux++) {
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	3301      	adds	r3, #1
 800dc6c:	60fb      	str	r3, [r7, #12]
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	2b07      	cmp	r3, #7
 800dc72:	d9e7      	bls.n	800dc44 <vQueueAddToRegistry+0x10>
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800dc74:	bf00      	nop
 800dc76:	bf00      	nop
 800dc78:	3714      	adds	r7, #20
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc80:	4770      	bx	lr
 800dc82:	bf00      	nop
 800dc84:	20000c7c 	.word	0x20000c7c

0800dc88 <vQueueWaitForMessageRestricted>:
#endif /* configQUEUE_REGISTRY_SIZE */
/*-----------------------------------------------------------*/

#if (configUSE_TIMERS == 1)

void vQueueWaitForMessageRestricted(QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely) {
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b086      	sub	sp, #24
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	60f8      	str	r0, [r7, #12]
 800dc90:	60b9      	str	r1, [r7, #8]
 800dc92:	607a      	str	r2, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	617b      	str	r3, [r7, #20]
    will not actually cause the task to block, just place it on a blocked
    list.  It will not block until the scheduler is unlocked - at which
    time a yield will be performed.  If an item is added to the queue while
    the queue is locked, and the calling task blocks on the queue, then the
    calling task will be immediately unblocked when the queue is unlocked. */
    prvLockQueue(pxQueue);
 800dc98:	f001 fd16 	bl	800f6c8 <vPortEnterCritical>
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dca2:	b25b      	sxtb	r3, r3
 800dca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dca8:	d103      	bne.n	800dcb2 <vQueueWaitForMessageRestricted+0x2a>
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	2200      	movs	r2, #0
 800dcae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dcb8:	b25b      	sxtb	r3, r3
 800dcba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcbe:	d103      	bne.n	800dcc8 <vQueueWaitForMessageRestricted+0x40>
 800dcc0:	697b      	ldr	r3, [r7, #20]
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dcc8:	f001 fd30 	bl	800f72c <vPortExitCritical>
    if (pxQueue->uxMessagesWaiting == (UBaseType_t)0U) {
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d106      	bne.n	800dce2 <vQueueWaitForMessageRestricted+0x5a>
        /* There is nothing in the queue, block for the specified period. */
        vTaskPlaceOnEventListRestricted(&(pxQueue->xTasksWaitingToReceive), xTicksToWait, xWaitIndefinitely);
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	3324      	adds	r3, #36	@ 0x24
 800dcd8:	687a      	ldr	r2, [r7, #4]
 800dcda:	68b9      	ldr	r1, [r7, #8]
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f000 fd53 	bl	800e788 <vTaskPlaceOnEventListRestricted>
    } else {
        mtCOVERAGE_TEST_MARKER();
    }
    prvUnlockQueue(pxQueue);
 800dce2:	6978      	ldr	r0, [r7, #20]
 800dce4:	f7ff ff26 	bl	800db34 <prvUnlockQueue>
}
 800dce8:	bf00      	nop
 800dcea:	3718      	adds	r7, #24
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}

0800dcf0 <xTaskCreateStatic>:
/*-----------------------------------------------------------*/

#if (configSUPPORT_STATIC_ALLOCATION == 1)

TaskHandle_t xTaskCreateStatic(TaskFunction_t pxTaskCode, const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                               const uint32_t ulStackDepth, void * const pvParameters, UBaseType_t uxPriority, StackType_t * const puxStackBuffer, StaticTask_t * const pxTaskBuffer) {
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b08e      	sub	sp, #56	@ 0x38
 800dcf4:	af04      	add	r7, sp, #16
 800dcf6:	60f8      	str	r0, [r7, #12]
 800dcf8:	60b9      	str	r1, [r7, #8]
 800dcfa:	607a      	str	r2, [r7, #4]
 800dcfc:	603b      	str	r3, [r7, #0]
    TCB_t * pxNewTCB;
    TaskHandle_t xReturn;

    configASSERT(puxStackBuffer != NULL);
 800dcfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d10b      	bne.n	800dd1c <xTaskCreateStatic+0x2c>
    __asm volatile("	mov %0, %1												\n"
 800dd04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd08:	f383 8811 	msr	BASEPRI, r3
 800dd0c:	f3bf 8f6f 	isb	sy
 800dd10:	f3bf 8f4f 	dsb	sy
 800dd14:	623b      	str	r3, [r7, #32]
}
 800dd16:	bf00      	nop
 800dd18:	bf00      	nop
 800dd1a:	e7fd      	b.n	800dd18 <xTaskCreateStatic+0x28>
    configASSERT(pxTaskBuffer != NULL);
 800dd1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d10b      	bne.n	800dd3a <xTaskCreateStatic+0x4a>
    __asm volatile("	mov %0, %1												\n"
 800dd22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd26:	f383 8811 	msr	BASEPRI, r3
 800dd2a:	f3bf 8f6f 	isb	sy
 800dd2e:	f3bf 8f4f 	dsb	sy
 800dd32:	61fb      	str	r3, [r7, #28]
}
 800dd34:	bf00      	nop
 800dd36:	bf00      	nop
 800dd38:	e7fd      	b.n	800dd36 <xTaskCreateStatic+0x46>
#if (configASSERT_DEFINED == 1)
    {
        /* Sanity check that the size of the structure used to declare a
        variable of type StaticTask_t equals the size of the real task
        structure. */
        volatile size_t xSize = sizeof(StaticTask_t);
 800dd3a:	237c      	movs	r3, #124	@ 0x7c
 800dd3c:	613b      	str	r3, [r7, #16]
        configASSERT(xSize == sizeof(TCB_t));
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	2b7c      	cmp	r3, #124	@ 0x7c
 800dd42:	d00b      	beq.n	800dd5c <xTaskCreateStatic+0x6c>
    __asm volatile("	mov %0, %1												\n"
 800dd44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd48:	f383 8811 	msr	BASEPRI, r3
 800dd4c:	f3bf 8f6f 	isb	sy
 800dd50:	f3bf 8f4f 	dsb	sy
 800dd54:	61bb      	str	r3, [r7, #24]
}
 800dd56:	bf00      	nop
 800dd58:	bf00      	nop
 800dd5a:	e7fd      	b.n	800dd58 <xTaskCreateStatic+0x68>
        (void)xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dd5c:	693b      	ldr	r3, [r7, #16]
    }
#endif /* configASSERT_DEFINED */

    if ((pxTaskBuffer != NULL) && (puxStackBuffer != NULL)) {
 800dd5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d01e      	beq.n	800dda2 <xTaskCreateStatic+0xb2>
 800dd64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d01b      	beq.n	800dda2 <xTaskCreateStatic+0xb2>
        /* The memory used for the task's TCB and stack are passed into this
        function - use them. */
        pxNewTCB = (TCB_t *)pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dd6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd6c:	627b      	str	r3, [r7, #36]	@ 0x24
        pxNewTCB->pxStack = (StackType_t *)puxStackBuffer;
 800dd6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dd72:	631a      	str	r2, [r3, #48]	@ 0x30

#if (tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* Tasks can be created statically or dynamically, so note this
            task was created statically in case the task is later deleted. */
            pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dd74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd76:	2202      	movs	r2, #2
 800dd78:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
        }
#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

        prvInitialiseNewTask(pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL);
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	9303      	str	r3, [sp, #12]
 800dd80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd82:	9302      	str	r3, [sp, #8]
 800dd84:	f107 0314 	add.w	r3, r7, #20
 800dd88:	9301      	str	r3, [sp, #4]
 800dd8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd8c:	9300      	str	r3, [sp, #0]
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	687a      	ldr	r2, [r7, #4]
 800dd92:	68b9      	ldr	r1, [r7, #8]
 800dd94:	68f8      	ldr	r0, [r7, #12]
 800dd96:	f000 f850 	bl	800de3a <prvInitialiseNewTask>
        prvAddNewTaskToReadyList(pxNewTCB);
 800dd9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dd9c:	f000 f8d0 	bl	800df40 <prvAddNewTaskToReadyList>
 800dda0:	e001      	b.n	800dda6 <xTaskCreateStatic+0xb6>
    } else {
        xReturn = NULL;
 800dda2:	2300      	movs	r3, #0
 800dda4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800dda6:	697b      	ldr	r3, [r7, #20]
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3728      	adds	r7, #40	@ 0x28
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}

0800ddb0 <xTaskCreate>:
/*-----------------------------------------------------------*/

#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)

BaseType_t xTaskCreate(TaskFunction_t pxTaskCode, const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                       const configSTACK_DEPTH_TYPE usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask) {
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b08c      	sub	sp, #48	@ 0x30
 800ddb4:	af04      	add	r7, sp, #16
 800ddb6:	60f8      	str	r0, [r7, #12]
 800ddb8:	60b9      	str	r1, [r7, #8]
 800ddba:	603b      	str	r3, [r7, #0]
 800ddbc:	4613      	mov	r3, r2
 800ddbe:	80fb      	strh	r3, [r7, #6]
#else  /* portSTACK_GROWTH */
    {
        StackType_t * pxStack;

        /* Allocate space for the stack used by the task being created. */
        pxStack = pvPortMalloc((((size_t)usStackDepth) * sizeof(StackType_t))); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ddc0:	88fb      	ldrh	r3, [r7, #6]
 800ddc2:	009b      	lsls	r3, r3, #2
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f001 fda1 	bl	800f90c <pvPortMalloc>
 800ddca:	6178      	str	r0, [r7, #20]

        if (pxStack != NULL) {
 800ddcc:	697b      	ldr	r3, [r7, #20]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d00e      	beq.n	800ddf0 <xTaskCreate+0x40>
            /* Allocate space for the TCB. */
            pxNewTCB = (TCB_t *)pvPortMalloc(sizeof(TCB_t)); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ddd2:	207c      	movs	r0, #124	@ 0x7c
 800ddd4:	f001 fd9a 	bl	800f90c <pvPortMalloc>
 800ddd8:	61f8      	str	r0, [r7, #28]

            if (pxNewTCB != NULL) {
 800ddda:	69fb      	ldr	r3, [r7, #28]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d003      	beq.n	800dde8 <xTaskCreate+0x38>
                /* Store the stack location in the TCB. */
                pxNewTCB->pxStack = pxStack;
 800dde0:	69fb      	ldr	r3, [r7, #28]
 800dde2:	697a      	ldr	r2, [r7, #20]
 800dde4:	631a      	str	r2, [r3, #48]	@ 0x30
 800dde6:	e005      	b.n	800ddf4 <xTaskCreate+0x44>
            } else {
                /* The stack cannot be used as the TCB was not created.  Free
                it again. */
                vPortFree(pxStack);
 800dde8:	6978      	ldr	r0, [r7, #20]
 800ddea:	f001 fda1 	bl	800f930 <vPortFree>
 800ddee:	e001      	b.n	800ddf4 <xTaskCreate+0x44>
            }
        } else {
            pxNewTCB = NULL;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	61fb      	str	r3, [r7, #28]
        }
    }
#endif /* portSTACK_GROWTH */

    if (pxNewTCB != NULL) {
 800ddf4:	69fb      	ldr	r3, [r7, #28]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d017      	beq.n	800de2a <xTaskCreate+0x7a>
#if (tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
        {
            /* Tasks can be created statically or dynamically, so note this
            task was created dynamically in case it is later deleted. */
            pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ddfa:	69fb      	ldr	r3, [r7, #28]
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
        }
#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

        prvInitialiseNewTask(pxTaskCode, pcName, (uint32_t)usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL);
 800de02:	88fa      	ldrh	r2, [r7, #6]
 800de04:	2300      	movs	r3, #0
 800de06:	9303      	str	r3, [sp, #12]
 800de08:	69fb      	ldr	r3, [r7, #28]
 800de0a:	9302      	str	r3, [sp, #8]
 800de0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de0e:	9301      	str	r3, [sp, #4]
 800de10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de12:	9300      	str	r3, [sp, #0]
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	68b9      	ldr	r1, [r7, #8]
 800de18:	68f8      	ldr	r0, [r7, #12]
 800de1a:	f000 f80e 	bl	800de3a <prvInitialiseNewTask>
        prvAddNewTaskToReadyList(pxNewTCB);
 800de1e:	69f8      	ldr	r0, [r7, #28]
 800de20:	f000 f88e 	bl	800df40 <prvAddNewTaskToReadyList>
        xReturn = pdPASS;
 800de24:	2301      	movs	r3, #1
 800de26:	61bb      	str	r3, [r7, #24]
 800de28:	e002      	b.n	800de30 <xTaskCreate+0x80>
    } else {
        xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800de2a:	f04f 33ff 	mov.w	r3, #4294967295
 800de2e:	61bb      	str	r3, [r7, #24]
    }

    return xReturn;
 800de30:	69bb      	ldr	r3, [r7, #24]
}
 800de32:	4618      	mov	r0, r3
 800de34:	3720      	adds	r7, #32
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}

0800de3a <prvInitialiseNewTask>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewTask(TaskFunction_t pxTaskCode, const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                 const uint32_t ulStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, TCB_t * pxNewTCB, const MemoryRegion_t * const xRegions) {
 800de3a:	b580      	push	{r7, lr}
 800de3c:	b088      	sub	sp, #32
 800de3e:	af00      	add	r7, sp, #0
 800de40:	60f8      	str	r0, [r7, #12]
 800de42:	60b9      	str	r1, [r7, #8]
 800de44:	607a      	str	r2, [r7, #4]
 800de46:	603b      	str	r3, [r7, #0]
grows from high memory to low (as per the 80x86) or vice versa.
portSTACK_GROWTH is used to make the result positive or negative as required
by the port. */
#if (portSTACK_GROWTH < 0)
    {
        pxTopOfStack = &(pxNewTCB->pxStack[ulStackDepth - (uint32_t)1]);
 800de48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de52:	3b01      	subs	r3, #1
 800de54:	009b      	lsls	r3, r3, #2
 800de56:	4413      	add	r3, r2
 800de58:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = (StackType_t *)(((portPOINTER_SIZE_TYPE)pxTopOfStack) & (~((portPOINTER_SIZE_TYPE)portBYTE_ALIGNMENT_MASK))); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size
 800de5a:	69bb      	ldr	r3, [r7, #24]
 800de5c:	f023 0307 	bic.w	r3, r3, #7
 800de60:	61bb      	str	r3, [r7, #24]
                                                                                                                                        differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT((((portPOINTER_SIZE_TYPE)pxTopOfStack & (portPOINTER_SIZE_TYPE)portBYTE_ALIGNMENT_MASK) == 0UL));
 800de62:	69bb      	ldr	r3, [r7, #24]
 800de64:	f003 0307 	and.w	r3, r3, #7
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d00b      	beq.n	800de84 <prvInitialiseNewTask+0x4a>
    __asm volatile("	mov %0, %1												\n"
 800de6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de70:	f383 8811 	msr	BASEPRI, r3
 800de74:	f3bf 8f6f 	isb	sy
 800de78:	f3bf 8f4f 	dsb	sy
 800de7c:	617b      	str	r3, [r7, #20]
}
 800de7e:	bf00      	nop
 800de80:	bf00      	nop
 800de82:	e7fd      	b.n	800de80 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + (ulStackDepth - (uint32_t)1);
    }
#endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if (pcName != NULL) {
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d01f      	beq.n	800deca <prvInitialiseNewTask+0x90>
        for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
 800de8a:	2300      	movs	r3, #0
 800de8c:	61fb      	str	r3, [r7, #28]
 800de8e:	e012      	b.n	800deb6 <prvInitialiseNewTask+0x7c>
            pxNewTCB->pcTaskName[x] = pcName[x];
 800de90:	68ba      	ldr	r2, [r7, #8]
 800de92:	69fb      	ldr	r3, [r7, #28]
 800de94:	4413      	add	r3, r2
 800de96:	7819      	ldrb	r1, [r3, #0]
 800de98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de9a:	69fb      	ldr	r3, [r7, #28]
 800de9c:	4413      	add	r3, r2
 800de9e:	3334      	adds	r3, #52	@ 0x34
 800dea0:	460a      	mov	r2, r1
 800dea2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
            configMAX_TASK_NAME_LEN characters just in case the memory after the
            string is not accessible (extremely unlikely). */
            if (pcName[x] == (char)0x00) {
 800dea4:	68ba      	ldr	r2, [r7, #8]
 800dea6:	69fb      	ldr	r3, [r7, #28]
 800dea8:	4413      	add	r3, r2
 800deaa:	781b      	ldrb	r3, [r3, #0]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d006      	beq.n	800debe <prvInitialiseNewTask+0x84>
        for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
 800deb0:	69fb      	ldr	r3, [r7, #28]
 800deb2:	3301      	adds	r3, #1
 800deb4:	61fb      	str	r3, [r7, #28]
 800deb6:	69fb      	ldr	r3, [r7, #28]
 800deb8:	2b3f      	cmp	r3, #63	@ 0x3f
 800deba:	d9e9      	bls.n	800de90 <prvInitialiseNewTask+0x56>
 800debc:	e000      	b.n	800dec0 <prvInitialiseNewTask+0x86>
                break;
 800debe:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
        was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[configMAX_TASK_NAME_LEN - 1] = '\0';
 800dec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dec2:	2200      	movs	r2, #0
 800dec4:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
 800dec8:	e003      	b.n	800ded2 <prvInitialiseNewTask+0x98>
    } else {
        /* The task has not been given a name, so just ensure there is a NULL
        terminator when it is read out. */
        pxNewTCB->pcTaskName[0] = 0x00;
 800deca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800decc:	2200      	movs	r2, #0
 800dece:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
    remove the privilege bit if one is present. */
    if (uxPriority >= (UBaseType_t)configMAX_PRIORITIES) {
 800ded2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ded4:	2b06      	cmp	r3, #6
 800ded6:	d901      	bls.n	800dedc <prvInitialiseNewTask+0xa2>
        uxPriority = (UBaseType_t)configMAX_PRIORITIES - (UBaseType_t)1U;
 800ded8:	2306      	movs	r3, #6
 800deda:	62bb      	str	r3, [r7, #40]	@ 0x28
    } else {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800dedc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dede:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dee0:	62da      	str	r2, [r3, #44]	@ 0x2c
        pxNewTCB->uxBasePriority = uxPriority;
        pxNewTCB->uxMutexesHeld = 0;
    }
#endif /* configUSE_MUTEXES */

    vListInitialiseItem(&(pxNewTCB->xStateListItem));
 800dee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dee4:	3304      	adds	r3, #4
 800dee6:	4618      	mov	r0, r3
 800dee8:	f7ff f986 	bl	800d1f8 <vListInitialiseItem>
    vListInitialiseItem(&(pxNewTCB->xEventListItem));
 800deec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deee:	3318      	adds	r3, #24
 800def0:	4618      	mov	r0, r3
 800def2:	f7ff f981 	bl	800d1f8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
    back to	the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER(&(pxNewTCB->xStateListItem), pxNewTCB);
 800def6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800def8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800defa:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE(&(pxNewTCB->xEventListItem), (TickType_t)configMAX_PRIORITIES - (TickType_t)uxPriority); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800defc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800defe:	f1c3 0207 	rsb	r2, r3, #7
 800df02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df04:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER(&(pxNewTCB->xEventListItem), pxNewTCB);
 800df06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df0a:	625a      	str	r2, [r3, #36]	@ 0x24
    }
#endif

#if (configUSE_TASK_NOTIFICATIONS == 1)
    {
        pxNewTCB->ulNotifiedValue = 0;
 800df0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df0e:	2200      	movs	r2, #0
 800df10:	675a      	str	r2, [r3, #116]	@ 0x74
        pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800df12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df14:	2200      	movs	r2, #0
 800df16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
            }
#endif /* portSTACK_GROWTH */
        }
#else  /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters);
 800df1a:	683a      	ldr	r2, [r7, #0]
 800df1c:	68f9      	ldr	r1, [r7, #12]
 800df1e:	69b8      	ldr	r0, [r7, #24]
 800df20:	f001 fa9e 	bl	800f460 <pxPortInitialiseStack>
 800df24:	4602      	mov	r2, r0
 800df26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df28:	601a      	str	r2, [r3, #0]
        }
#endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
#endif /* portUSING_MPU_WRAPPERS */

    if (pxCreatedTask != NULL) {
 800df2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d002      	beq.n	800df36 <prvInitialiseNewTask+0xfc>
        /* Pass the handle out in an anonymous way.  The handle can be used to
        change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = (TaskHandle_t)pxNewTCB;
 800df30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df34:	601a      	str	r2, [r3, #0]
    } else {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800df36:	bf00      	nop
 800df38:	3720      	adds	r7, #32
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}
	...

0800df40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList(TCB_t * pxNewTCB) {
 800df40:	b580      	push	{r7, lr}
 800df42:	b082      	sub	sp, #8
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
    updated. */
    taskENTER_CRITICAL();
 800df48:	f001 fbbe 	bl	800f6c8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800df4c:	4b2a      	ldr	r3, [pc, #168]	@ (800dff8 <prvAddNewTaskToReadyList+0xb8>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	3301      	adds	r3, #1
 800df52:	4a29      	ldr	r2, [pc, #164]	@ (800dff8 <prvAddNewTaskToReadyList+0xb8>)
 800df54:	6013      	str	r3, [r2, #0]
        if (pxCurrentTCB == NULL) {
 800df56:	4b29      	ldr	r3, [pc, #164]	@ (800dffc <prvAddNewTaskToReadyList+0xbc>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d109      	bne.n	800df72 <prvAddNewTaskToReadyList+0x32>
            /* There are no other tasks, or all the other tasks are in
            the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800df5e:	4a27      	ldr	r2, [pc, #156]	@ (800dffc <prvAddNewTaskToReadyList+0xbc>)
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	6013      	str	r3, [r2, #0]

            if (uxCurrentNumberOfTasks == (UBaseType_t)1) {
 800df64:	4b24      	ldr	r3, [pc, #144]	@ (800dff8 <prvAddNewTaskToReadyList+0xb8>)
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	2b01      	cmp	r3, #1
 800df6a:	d110      	bne.n	800df8e <prvAddNewTaskToReadyList+0x4e>
                /* This is the first task to be created so do the preliminary
                initialisation required.  We will not recover if this call
                fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800df6c:	f000 fd3a 	bl	800e9e4 <prvInitialiseTaskLists>
 800df70:	e00d      	b.n	800df8e <prvAddNewTaskToReadyList+0x4e>
            }
        } else {
            /* If the scheduler is not already running, make this task the
            current task if it is the highest priority task to be created
            so far. */
            if (xSchedulerRunning == pdFALSE) {
 800df72:	4b23      	ldr	r3, [pc, #140]	@ (800e000 <prvAddNewTaskToReadyList+0xc0>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d109      	bne.n	800df8e <prvAddNewTaskToReadyList+0x4e>
                if (pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority) {
 800df7a:	4b20      	ldr	r3, [pc, #128]	@ (800dffc <prvAddNewTaskToReadyList+0xbc>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df84:	429a      	cmp	r2, r3
 800df86:	d802      	bhi.n	800df8e <prvAddNewTaskToReadyList+0x4e>
                    pxCurrentTCB = pxNewTCB;
 800df88:	4a1c      	ldr	r2, [pc, #112]	@ (800dffc <prvAddNewTaskToReadyList+0xbc>)
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	6013      	str	r3, [r2, #0]
            } else {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800df8e:	4b1d      	ldr	r3, [pc, #116]	@ (800e004 <prvAddNewTaskToReadyList+0xc4>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	3301      	adds	r3, #1
 800df94:	4a1b      	ldr	r2, [pc, #108]	@ (800e004 <prvAddNewTaskToReadyList+0xc4>)
 800df96:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
#endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE(pxNewTCB);

        prvAddTaskToReadyList(pxNewTCB);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df9c:	2201      	movs	r2, #1
 800df9e:	409a      	lsls	r2, r3
 800dfa0:	4b19      	ldr	r3, [pc, #100]	@ (800e008 <prvAddNewTaskToReadyList+0xc8>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	4313      	orrs	r3, r2
 800dfa6:	4a18      	ldr	r2, [pc, #96]	@ (800e008 <prvAddNewTaskToReadyList+0xc8>)
 800dfa8:	6013      	str	r3, [r2, #0]
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfae:	4613      	mov	r3, r2
 800dfb0:	009b      	lsls	r3, r3, #2
 800dfb2:	4413      	add	r3, r2
 800dfb4:	009b      	lsls	r3, r3, #2
 800dfb6:	4a15      	ldr	r2, [pc, #84]	@ (800e00c <prvAddNewTaskToReadyList+0xcc>)
 800dfb8:	441a      	add	r2, r3
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	3304      	adds	r3, #4
 800dfbe:	4619      	mov	r1, r3
 800dfc0:	4610      	mov	r0, r2
 800dfc2:	f7ff f926 	bl	800d212 <vListInsertEnd>

        portSETUP_TCB(pxNewTCB);
    }
    taskEXIT_CRITICAL();
 800dfc6:	f001 fbb1 	bl	800f72c <vPortExitCritical>

    if (xSchedulerRunning != pdFALSE) {
 800dfca:	4b0d      	ldr	r3, [pc, #52]	@ (800e000 <prvAddNewTaskToReadyList+0xc0>)
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d00e      	beq.n	800dff0 <prvAddNewTaskToReadyList+0xb0>
        /* If the created task is of a higher priority than the current task
        then it should run now. */
        if (pxCurrentTCB->uxPriority < pxNewTCB->uxPriority) {
 800dfd2:	4b0a      	ldr	r3, [pc, #40]	@ (800dffc <prvAddNewTaskToReadyList+0xbc>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfdc:	429a      	cmp	r2, r3
 800dfde:	d207      	bcs.n	800dff0 <prvAddNewTaskToReadyList+0xb0>
            taskYIELD_IF_USING_PREEMPTION();
 800dfe0:	4b0b      	ldr	r3, [pc, #44]	@ (800e010 <prvAddNewTaskToReadyList+0xd0>)
 800dfe2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfe6:	601a      	str	r2, [r3, #0]
 800dfe8:	f3bf 8f4f 	dsb	sy
 800dfec:	f3bf 8f6f 	isb	sy
            mtCOVERAGE_TEST_MARKER();
        }
    } else {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800dff0:	bf00      	nop
 800dff2:	3708      	adds	r7, #8
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}
 800dff8:	20000dbc 	.word	0x20000dbc
 800dffc:	20000cbc 	.word	0x20000cbc
 800e000:	20000dc8 	.word	0x20000dc8
 800e004:	20000dd8 	.word	0x20000dd8
 800e008:	20000dc4 	.word	0x20000dc4
 800e00c:	20000cc0 	.word	0x20000cc0
 800e010:	e000ed04 	.word	0xe000ed04

0800e014 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if (INCLUDE_vTaskDelete == 1)

void vTaskDelete(TaskHandle_t xTaskToDelete) {
 800e014:	b580      	push	{r7, lr}
 800e016:	b084      	sub	sp, #16
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
    TCB_t * pxTCB;

    taskENTER_CRITICAL();
 800e01c:	f001 fb54 	bl	800f6c8 <vPortEnterCritical>
    {
        /* If null is passed in here then it is the calling task that is
        being deleted. */
        pxTCB = prvGetTCBFromHandle(xTaskToDelete);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d102      	bne.n	800e02c <vTaskDelete+0x18>
 800e026:	4b39      	ldr	r3, [pc, #228]	@ (800e10c <vTaskDelete+0xf8>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	e000      	b.n	800e02e <vTaskDelete+0x1a>
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	60fb      	str	r3, [r7, #12]

        /* Remove task from the ready/delayed list. */
        if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	3304      	adds	r3, #4
 800e034:	4618      	mov	r0, r3
 800e036:	f7ff f949 	bl	800d2cc <uxListRemove>
 800e03a:	4603      	mov	r3, r0
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d115      	bne.n	800e06c <vTaskDelete+0x58>
            taskRESET_READY_PRIORITY(pxTCB->uxPriority);
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e044:	4932      	ldr	r1, [pc, #200]	@ (800e110 <vTaskDelete+0xfc>)
 800e046:	4613      	mov	r3, r2
 800e048:	009b      	lsls	r3, r3, #2
 800e04a:	4413      	add	r3, r2
 800e04c:	009b      	lsls	r3, r3, #2
 800e04e:	440b      	add	r3, r1
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d10a      	bne.n	800e06c <vTaskDelete+0x58>
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e05a:	2201      	movs	r2, #1
 800e05c:	fa02 f303 	lsl.w	r3, r2, r3
 800e060:	43da      	mvns	r2, r3
 800e062:	4b2c      	ldr	r3, [pc, #176]	@ (800e114 <vTaskDelete+0x100>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	4013      	ands	r3, r2
 800e068:	4a2a      	ldr	r2, [pc, #168]	@ (800e114 <vTaskDelete+0x100>)
 800e06a:	6013      	str	r3, [r2, #0]
        } else {
            mtCOVERAGE_TEST_MARKER();
        }

        /* Is the task waiting on an event also? */
        if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e070:	2b00      	cmp	r3, #0
 800e072:	d004      	beq.n	800e07e <vTaskDelete+0x6a>
            (void)uxListRemove(&(pxTCB->xEventListItem));
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	3318      	adds	r3, #24
 800e078:	4618      	mov	r0, r3
 800e07a:	f7ff f927 	bl	800d2cc <uxListRemove>

        /* Increment the uxTaskNumber also so kernel aware debuggers can
        detect that the task lists need re-generating.  This is done before
        portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
        not return. */
        uxTaskNumber++;
 800e07e:	4b26      	ldr	r3, [pc, #152]	@ (800e118 <vTaskDelete+0x104>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	3301      	adds	r3, #1
 800e084:	4a24      	ldr	r2, [pc, #144]	@ (800e118 <vTaskDelete+0x104>)
 800e086:	6013      	str	r3, [r2, #0]

        if (pxTCB == pxCurrentTCB) {
 800e088:	4b20      	ldr	r3, [pc, #128]	@ (800e10c <vTaskDelete+0xf8>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	68fa      	ldr	r2, [r7, #12]
 800e08e:	429a      	cmp	r2, r3
 800e090:	d10b      	bne.n	800e0aa <vTaskDelete+0x96>
            /* A task is deleting itself.  This cannot complete within the
            task itself, as a context switch to another task is required.
            Place the task in the termination list.  The idle task will
            check the termination list and free up any memory allocated by
            the scheduler for the TCB and stack of the deleted task. */
            vListInsertEnd(&xTasksWaitingTermination, &(pxTCB->xStateListItem));
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	3304      	adds	r3, #4
 800e096:	4619      	mov	r1, r3
 800e098:	4820      	ldr	r0, [pc, #128]	@ (800e11c <vTaskDelete+0x108>)
 800e09a:	f7ff f8ba 	bl	800d212 <vListInsertEnd>

            /* Increment the ucTasksDeleted variable so the idle task knows
            there is a task that has been deleted and that it should therefore
            check the xTasksWaitingTermination list. */
            ++uxDeletedTasksWaitingCleanUp;
 800e09e:	4b20      	ldr	r3, [pc, #128]	@ (800e120 <vTaskDelete+0x10c>)
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	3301      	adds	r3, #1
 800e0a4:	4a1e      	ldr	r2, [pc, #120]	@ (800e120 <vTaskDelete+0x10c>)
 800e0a6:	6013      	str	r3, [r2, #0]
 800e0a8:	e009      	b.n	800e0be <vTaskDelete+0xaa>
            after which it is not possible to yield away from this task -
            hence xYieldPending is used to latch that a context switch is
            required. */
            portPRE_TASK_DELETE_HOOK(pxTCB, &xYieldPending);
        } else {
            --uxCurrentNumberOfTasks;
 800e0aa:	4b1e      	ldr	r3, [pc, #120]	@ (800e124 <vTaskDelete+0x110>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	3b01      	subs	r3, #1
 800e0b0:	4a1c      	ldr	r2, [pc, #112]	@ (800e124 <vTaskDelete+0x110>)
 800e0b2:	6013      	str	r3, [r2, #0]
            traceTASK_DELETE(pxTCB);
            prvDeleteTCB(pxTCB);
 800e0b4:	68f8      	ldr	r0, [r7, #12]
 800e0b6:	f000 fd03 	bl	800eac0 <prvDeleteTCB>

            /* Reset the next expected unblock time in case it referred to
            the task that has just been deleted. */
            prvResetNextTaskUnblockTime();
 800e0ba:	f000 fd31 	bl	800eb20 <prvResetNextTaskUnblockTime>
        }
    }
    taskEXIT_CRITICAL();
 800e0be:	f001 fb35 	bl	800f72c <vPortExitCritical>

    /* Force a reschedule if it is the currently running task that has just
    been deleted. */
    if (xSchedulerRunning != pdFALSE) {
 800e0c2:	4b19      	ldr	r3, [pc, #100]	@ (800e128 <vTaskDelete+0x114>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d01c      	beq.n	800e104 <vTaskDelete+0xf0>
        if (pxTCB == pxCurrentTCB) {
 800e0ca:	4b10      	ldr	r3, [pc, #64]	@ (800e10c <vTaskDelete+0xf8>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	68fa      	ldr	r2, [r7, #12]
 800e0d0:	429a      	cmp	r2, r3
 800e0d2:	d117      	bne.n	800e104 <vTaskDelete+0xf0>
            configASSERT(uxSchedulerSuspended == 0);
 800e0d4:	4b15      	ldr	r3, [pc, #84]	@ (800e12c <vTaskDelete+0x118>)
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d00b      	beq.n	800e0f4 <vTaskDelete+0xe0>
    __asm volatile("	mov %0, %1												\n"
 800e0dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0e0:	f383 8811 	msr	BASEPRI, r3
 800e0e4:	f3bf 8f6f 	isb	sy
 800e0e8:	f3bf 8f4f 	dsb	sy
 800e0ec:	60bb      	str	r3, [r7, #8]
}
 800e0ee:	bf00      	nop
 800e0f0:	bf00      	nop
 800e0f2:	e7fd      	b.n	800e0f0 <vTaskDelete+0xdc>
            portYIELD_WITHIN_API();
 800e0f4:	4b0e      	ldr	r3, [pc, #56]	@ (800e130 <vTaskDelete+0x11c>)
 800e0f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0fa:	601a      	str	r2, [r3, #0]
 800e0fc:	f3bf 8f4f 	dsb	sy
 800e100:	f3bf 8f6f 	isb	sy
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800e104:	bf00      	nop
 800e106:	3710      	adds	r7, #16
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}
 800e10c:	20000cbc 	.word	0x20000cbc
 800e110:	20000cc0 	.word	0x20000cc0
 800e114:	20000dc4 	.word	0x20000dc4
 800e118:	20000dd8 	.word	0x20000dd8
 800e11c:	20000d90 	.word	0x20000d90
 800e120:	20000da4 	.word	0x20000da4
 800e124:	20000dbc 	.word	0x20000dbc
 800e128:	20000dc8 	.word	0x20000dc8
 800e12c:	20000de4 	.word	0x20000de4
 800e130:	e000ed04 	.word	0xe000ed04

0800e134 <vTaskDelay>:
#endif /* INCLUDE_vTaskDelayUntil */
/*-----------------------------------------------------------*/

#if (INCLUDE_vTaskDelay == 1)

void vTaskDelay(const TickType_t xTicksToDelay) {
 800e134:	b580      	push	{r7, lr}
 800e136:	b084      	sub	sp, #16
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
    BaseType_t xAlreadyYielded = pdFALSE;
 800e13c:	2300      	movs	r3, #0
 800e13e:	60fb      	str	r3, [r7, #12]

    /* A delay time of zero just forces a reschedule. */
    if (xTicksToDelay > (TickType_t)0U) {
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d018      	beq.n	800e178 <vTaskDelay+0x44>
        configASSERT(uxSchedulerSuspended == 0);
 800e146:	4b14      	ldr	r3, [pc, #80]	@ (800e198 <vTaskDelay+0x64>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d00b      	beq.n	800e166 <vTaskDelay+0x32>
    __asm volatile("	mov %0, %1												\n"
 800e14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e152:	f383 8811 	msr	BASEPRI, r3
 800e156:	f3bf 8f6f 	isb	sy
 800e15a:	f3bf 8f4f 	dsb	sy
 800e15e:	60bb      	str	r3, [r7, #8]
}
 800e160:	bf00      	nop
 800e162:	bf00      	nop
 800e164:	e7fd      	b.n	800e162 <vTaskDelay+0x2e>
        vTaskSuspendAll();
 800e166:	f000 f917 	bl	800e398 <vTaskSuspendAll>
            list or removed from the blocked list until the scheduler
            is resumed.

            This task cannot be in an event list as it is the currently
            executing task. */
            prvAddCurrentTaskToDelayedList(xTicksToDelay, pdFALSE);
 800e16a:	2100      	movs	r1, #0
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f000 fd15 	bl	800eb9c <prvAddCurrentTaskToDelayedList>
        }
        xAlreadyYielded = xTaskResumeAll();
 800e172:	f000 f91f 	bl	800e3b4 <xTaskResumeAll>
 800e176:	60f8      	str	r0, [r7, #12]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Force a reschedule if xTaskResumeAll has not already done so, we may
    have put ourselves to sleep. */
    if (xAlreadyYielded == pdFALSE) {
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d107      	bne.n	800e18e <vTaskDelay+0x5a>
        portYIELD_WITHIN_API();
 800e17e:	4b07      	ldr	r3, [pc, #28]	@ (800e19c <vTaskDelay+0x68>)
 800e180:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e184:	601a      	str	r2, [r3, #0]
 800e186:	f3bf 8f4f 	dsb	sy
 800e18a:	f3bf 8f6f 	isb	sy
    } else {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800e18e:	bf00      	nop
 800e190:	3710      	adds	r7, #16
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}
 800e196:	bf00      	nop
 800e198:	20000de4 	.word	0x20000de4
 800e19c:	e000ed04 	.word	0xe000ed04

0800e1a0 <vTaskSuspend>:
#endif /* INCLUDE_vTaskPrioritySet */
/*-----------------------------------------------------------*/

#if (INCLUDE_vTaskSuspend == 1)

void vTaskSuspend(TaskHandle_t xTaskToSuspend) {
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b084      	sub	sp, #16
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
    TCB_t * pxTCB;

    taskENTER_CRITICAL();
 800e1a8:	f001 fa8e 	bl	800f6c8 <vPortEnterCritical>
    {
        /* If null is passed in here then it is the running task that is
        being suspended. */
        pxTCB = prvGetTCBFromHandle(xTaskToSuspend);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d102      	bne.n	800e1b8 <vTaskSuspend+0x18>
 800e1b2:	4b3d      	ldr	r3, [pc, #244]	@ (800e2a8 <vTaskSuspend+0x108>)
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	e000      	b.n	800e1ba <vTaskSuspend+0x1a>
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	60fb      	str	r3, [r7, #12]

        traceTASK_SUSPEND(pxTCB);

        /* Remove task from the ready/delayed list and place in the
        suspended list. */
        if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	3304      	adds	r3, #4
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f7ff f883 	bl	800d2cc <uxListRemove>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d115      	bne.n	800e1f8 <vTaskSuspend+0x58>
            taskRESET_READY_PRIORITY(pxTCB->uxPriority);
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1d0:	4936      	ldr	r1, [pc, #216]	@ (800e2ac <vTaskSuspend+0x10c>)
 800e1d2:	4613      	mov	r3, r2
 800e1d4:	009b      	lsls	r3, r3, #2
 800e1d6:	4413      	add	r3, r2
 800e1d8:	009b      	lsls	r3, r3, #2
 800e1da:	440b      	add	r3, r1
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d10a      	bne.n	800e1f8 <vTaskSuspend+0x58>
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1e6:	2201      	movs	r2, #1
 800e1e8:	fa02 f303 	lsl.w	r3, r2, r3
 800e1ec:	43da      	mvns	r2, r3
 800e1ee:	4b30      	ldr	r3, [pc, #192]	@ (800e2b0 <vTaskSuspend+0x110>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	4013      	ands	r3, r2
 800e1f4:	4a2e      	ldr	r2, [pc, #184]	@ (800e2b0 <vTaskSuspend+0x110>)
 800e1f6:	6013      	str	r3, [r2, #0]
        } else {
            mtCOVERAGE_TEST_MARKER();
        }

        /* Is the task waiting on an event also? */
        if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d004      	beq.n	800e20a <vTaskSuspend+0x6a>
            (void)uxListRemove(&(pxTCB->xEventListItem));
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	3318      	adds	r3, #24
 800e204:	4618      	mov	r0, r3
 800e206:	f7ff f861 	bl	800d2cc <uxListRemove>
        } else {
            mtCOVERAGE_TEST_MARKER();
        }

        vListInsertEnd(&xSuspendedTaskList, &(pxTCB->xStateListItem));
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	3304      	adds	r3, #4
 800e20e:	4619      	mov	r1, r3
 800e210:	4828      	ldr	r0, [pc, #160]	@ (800e2b4 <vTaskSuspend+0x114>)
 800e212:	f7fe fffe 	bl	800d212 <vListInsertEnd>

#if (configUSE_TASK_NOTIFICATIONS == 1)
        {
            if (pxTCB->ucNotifyState == taskWAITING_NOTIFICATION) {
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 800e21c:	b2db      	uxtb	r3, r3
 800e21e:	2b01      	cmp	r3, #1
 800e220:	d103      	bne.n	800e22a <vTaskSuspend+0x8a>
                /* The task was blocked to wait for a notification, but is
                now suspended, so no notification was received. */
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	2200      	movs	r2, #0
 800e226:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
            }
        }
#endif
    }
    taskEXIT_CRITICAL();
 800e22a:	f001 fa7f 	bl	800f72c <vPortExitCritical>

    if (xSchedulerRunning != pdFALSE) {
 800e22e:	4b22      	ldr	r3, [pc, #136]	@ (800e2b8 <vTaskSuspend+0x118>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d005      	beq.n	800e242 <vTaskSuspend+0xa2>
        /* Reset the next expected unblock time in case it referred to the
        task that is now in the Suspended state. */
        taskENTER_CRITICAL();
 800e236:	f001 fa47 	bl	800f6c8 <vPortEnterCritical>
        { prvResetNextTaskUnblockTime(); }
 800e23a:	f000 fc71 	bl	800eb20 <prvResetNextTaskUnblockTime>
        taskEXIT_CRITICAL();
 800e23e:	f001 fa75 	bl	800f72c <vPortExitCritical>
    } else {
        mtCOVERAGE_TEST_MARKER();
    }

    if (pxTCB == pxCurrentTCB) {
 800e242:	4b19      	ldr	r3, [pc, #100]	@ (800e2a8 <vTaskSuspend+0x108>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	68fa      	ldr	r2, [r7, #12]
 800e248:	429a      	cmp	r2, r3
 800e24a:	d128      	bne.n	800e29e <vTaskSuspend+0xfe>
        if (xSchedulerRunning != pdFALSE) {
 800e24c:	4b1a      	ldr	r3, [pc, #104]	@ (800e2b8 <vTaskSuspend+0x118>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d018      	beq.n	800e286 <vTaskSuspend+0xe6>
            /* The current task has just been suspended. */
            configASSERT(uxSchedulerSuspended == 0);
 800e254:	4b19      	ldr	r3, [pc, #100]	@ (800e2bc <vTaskSuspend+0x11c>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d00b      	beq.n	800e274 <vTaskSuspend+0xd4>
    __asm volatile("	mov %0, %1												\n"
 800e25c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e260:	f383 8811 	msr	BASEPRI, r3
 800e264:	f3bf 8f6f 	isb	sy
 800e268:	f3bf 8f4f 	dsb	sy
 800e26c:	60bb      	str	r3, [r7, #8]
}
 800e26e:	bf00      	nop
 800e270:	bf00      	nop
 800e272:	e7fd      	b.n	800e270 <vTaskSuspend+0xd0>
            portYIELD_WITHIN_API();
 800e274:	4b12      	ldr	r3, [pc, #72]	@ (800e2c0 <vTaskSuspend+0x120>)
 800e276:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e27a:	601a      	str	r2, [r3, #0]
 800e27c:	f3bf 8f4f 	dsb	sy
 800e280:	f3bf 8f6f 	isb	sy
            }
        }
    } else {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800e284:	e00b      	b.n	800e29e <vTaskSuspend+0xfe>
            if (listCURRENT_LIST_LENGTH(&xSuspendedTaskList) == uxCurrentNumberOfTasks) /*lint !e931 Right has no side effect, just volatile. */
 800e286:	4b0b      	ldr	r3, [pc, #44]	@ (800e2b4 <vTaskSuspend+0x114>)
 800e288:	681a      	ldr	r2, [r3, #0]
 800e28a:	4b0e      	ldr	r3, [pc, #56]	@ (800e2c4 <vTaskSuspend+0x124>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	429a      	cmp	r2, r3
 800e290:	d103      	bne.n	800e29a <vTaskSuspend+0xfa>
                pxCurrentTCB = NULL;
 800e292:	4b05      	ldr	r3, [pc, #20]	@ (800e2a8 <vTaskSuspend+0x108>)
 800e294:	2200      	movs	r2, #0
 800e296:	601a      	str	r2, [r3, #0]
}
 800e298:	e001      	b.n	800e29e <vTaskSuspend+0xfe>
                vTaskSwitchContext();
 800e29a:	f000 f9f3 	bl	800e684 <vTaskSwitchContext>
}
 800e29e:	bf00      	nop
 800e2a0:	3710      	adds	r7, #16
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}
 800e2a6:	bf00      	nop
 800e2a8:	20000cbc 	.word	0x20000cbc
 800e2ac:	20000cc0 	.word	0x20000cc0
 800e2b0:	20000dc4 	.word	0x20000dc4
 800e2b4:	20000da8 	.word	0x20000da8
 800e2b8:	20000dc8 	.word	0x20000dc8
 800e2bc:	20000de4 	.word	0x20000de4
 800e2c0:	e000ed04 	.word	0xe000ed04
 800e2c4:	20000dbc 	.word	0x20000dbc

0800e2c8 <vTaskStartScheduler>:
}

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler(void) {
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b08a      	sub	sp, #40	@ 0x28
 800e2cc:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

/* Add the idle task at the lowest priority. */
#if (configSUPPORT_STATIC_ALLOCATION == 1)
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
        address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory(&pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize);
 800e2d6:	463a      	mov	r2, r7
 800e2d8:	1d39      	adds	r1, r7, #4
 800e2da:	f107 0308 	add.w	r3, r7, #8
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f7f3 ffee 	bl	80022c0 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic(prvIdleTask, configIDLE_TASK_NAME, ulIdleTaskStackSize, (void *)NULL, /*lint !e961.  The cast is not redundant for all compilers. */
 800e2e4:	6839      	ldr	r1, [r7, #0]
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	68ba      	ldr	r2, [r7, #8]
 800e2ea:	9202      	str	r2, [sp, #8]
 800e2ec:	9301      	str	r3, [sp, #4]
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	9300      	str	r3, [sp, #0]
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	460a      	mov	r2, r1
 800e2f6:	4922      	ldr	r1, [pc, #136]	@ (800e380 <vTaskStartScheduler+0xb8>)
 800e2f8:	4822      	ldr	r0, [pc, #136]	@ (800e384 <vTaskStartScheduler+0xbc>)
 800e2fa:	f7ff fcf9 	bl	800dcf0 <xTaskCreateStatic>
 800e2fe:	4603      	mov	r3, r0
 800e300:	4a21      	ldr	r2, [pc, #132]	@ (800e388 <vTaskStartScheduler+0xc0>)
 800e302:	6013      	str	r3, [r2, #0]
                                            portPRIVILEGE_BIT,                                                    /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                            pxIdleTaskStackBuffer, pxIdleTaskTCBBuffer);                          /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if (xIdleTaskHandle != NULL) {
 800e304:	4b20      	ldr	r3, [pc, #128]	@ (800e388 <vTaskStartScheduler+0xc0>)
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d002      	beq.n	800e312 <vTaskStartScheduler+0x4a>
            xReturn = pdPASS;
 800e30c:	2301      	movs	r3, #1
 800e30e:	617b      	str	r3, [r7, #20]
 800e310:	e001      	b.n	800e316 <vTaskStartScheduler+0x4e>
        } else {
            xReturn = pdFAIL;
 800e312:	2300      	movs	r3, #0
 800e314:	617b      	str	r3, [r7, #20]
    }
#endif /* configSUPPORT_STATIC_ALLOCATION */

#if (configUSE_TIMERS == 1)
    {
        if (xReturn == pdPASS) {
 800e316:	697b      	ldr	r3, [r7, #20]
 800e318:	2b01      	cmp	r3, #1
 800e31a:	d102      	bne.n	800e322 <vTaskStartScheduler+0x5a>
            xReturn = xTimerCreateTimerTask();
 800e31c:	f000 fca4 	bl	800ec68 <xTimerCreateTimerTask>
 800e320:	6178      	str	r0, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }
    }
#endif /* configUSE_TIMERS */

    if (xReturn == pdPASS) {
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	2b01      	cmp	r3, #1
 800e326:	d116      	bne.n	800e356 <vTaskStartScheduler+0x8e>
    __asm volatile("	mov %0, %1												\n"
 800e328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e32c:	f383 8811 	msr	BASEPRI, r3
 800e330:	f3bf 8f6f 	isb	sy
 800e334:	f3bf 8f4f 	dsb	sy
 800e338:	613b      	str	r3, [r7, #16]
}
 800e33a:	bf00      	nop
            for additional information. */
            _impure_ptr = &(pxCurrentTCB->xNewLib_reent);
        }
#endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800e33c:	4b13      	ldr	r3, [pc, #76]	@ (800e38c <vTaskStartScheduler+0xc4>)
 800e33e:	f04f 32ff 	mov.w	r2, #4294967295
 800e342:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800e344:	4b12      	ldr	r3, [pc, #72]	@ (800e390 <vTaskStartScheduler+0xc8>)
 800e346:	2201      	movs	r2, #1
 800e348:	601a      	str	r2, [r3, #0]
        xTickCount = (TickType_t)configINITIAL_TICK_COUNT;
 800e34a:	4b12      	ldr	r3, [pc, #72]	@ (800e394 <vTaskStartScheduler+0xcc>)
 800e34c:	2200      	movs	r2, #0
 800e34e:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
        portable interface. */
        if (xPortStartScheduler() != pdFALSE) {
 800e350:	f001 f916 	bl	800f580 <xPortStartScheduler>
    }

    /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
    meaning xIdleTaskHandle is not used anywhere else. */
    (void)xIdleTaskHandle;
}
 800e354:	e00f      	b.n	800e376 <vTaskStartScheduler+0xae>
        configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
 800e356:	697b      	ldr	r3, [r7, #20]
 800e358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e35c:	d10b      	bne.n	800e376 <vTaskStartScheduler+0xae>
    __asm volatile("	mov %0, %1												\n"
 800e35e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e362:	f383 8811 	msr	BASEPRI, r3
 800e366:	f3bf 8f6f 	isb	sy
 800e36a:	f3bf 8f4f 	dsb	sy
 800e36e:	60fb      	str	r3, [r7, #12]
}
 800e370:	bf00      	nop
 800e372:	bf00      	nop
 800e374:	e7fd      	b.n	800e372 <vTaskStartScheduler+0xaa>
}
 800e376:	bf00      	nop
 800e378:	3718      	adds	r7, #24
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}
 800e37e:	bf00      	nop
 800e380:	0801365c 	.word	0x0801365c
 800e384:	0800e9b5 	.word	0x0800e9b5
 800e388:	20000de0 	.word	0x20000de0
 800e38c:	20000ddc 	.word	0x20000ddc
 800e390:	20000dc8 	.word	0x20000dc8
 800e394:	20000dc0 	.word	0x20000dc0

0800e398 <vTaskSuspendAll>:
    xSchedulerRunning = pdFALSE;
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll(void) {
 800e398:	b480      	push	{r7}
 800e39a:	af00      	add	r7, sp, #0
    do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
    is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800e39c:	4b04      	ldr	r3, [pc, #16]	@ (800e3b0 <vTaskSuspendAll+0x18>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	3301      	adds	r3, #1
 800e3a2:	4a03      	ldr	r2, [pc, #12]	@ (800e3b0 <vTaskSuspendAll+0x18>)
 800e3a4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
    the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800e3a6:	bf00      	nop
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ae:	4770      	bx	lr
 800e3b0:	20000de4 	.word	0x20000de4

0800e3b4 <xTaskResumeAll>:
}

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll(void) {
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b084      	sub	sp, #16
 800e3b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
    previous call to vTaskSuspendAll(). */
    configASSERT(uxSchedulerSuspended);
 800e3c2:	4b42      	ldr	r3, [pc, #264]	@ (800e4cc <xTaskResumeAll+0x118>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d10b      	bne.n	800e3e2 <xTaskResumeAll+0x2e>
    __asm volatile("	mov %0, %1												\n"
 800e3ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3ce:	f383 8811 	msr	BASEPRI, r3
 800e3d2:	f3bf 8f6f 	isb	sy
 800e3d6:	f3bf 8f4f 	dsb	sy
 800e3da:	603b      	str	r3, [r7, #0]
}
 800e3dc:	bf00      	nop
 800e3de:	bf00      	nop
 800e3e0:	e7fd      	b.n	800e3de <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
    list while the scheduler was suspended.  If this was the case then the
    removed task will have been added to the xPendingReadyList.  Once the
    scheduler has been resumed it is safe to move all the pending ready
    tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800e3e2:	f001 f971 	bl	800f6c8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800e3e6:	4b39      	ldr	r3, [pc, #228]	@ (800e4cc <xTaskResumeAll+0x118>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	3b01      	subs	r3, #1
 800e3ec:	4a37      	ldr	r2, [pc, #220]	@ (800e4cc <xTaskResumeAll+0x118>)
 800e3ee:	6013      	str	r3, [r2, #0]

        if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
 800e3f0:	4b36      	ldr	r3, [pc, #216]	@ (800e4cc <xTaskResumeAll+0x118>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d161      	bne.n	800e4bc <xTaskResumeAll+0x108>
            if (uxCurrentNumberOfTasks > (UBaseType_t)0U) {
 800e3f8:	4b35      	ldr	r3, [pc, #212]	@ (800e4d0 <xTaskResumeAll+0x11c>)
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d05d      	beq.n	800e4bc <xTaskResumeAll+0x108>
                /* Move any readied tasks from the pending list into the
                appropriate ready list. */
                while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
 800e400:	e02e      	b.n	800e460 <xTaskResumeAll+0xac>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY(
 800e402:	4b34      	ldr	r3, [pc, #208]	@ (800e4d4 <xTaskResumeAll+0x120>)
 800e404:	68db      	ldr	r3, [r3, #12]
 800e406:	68db      	ldr	r3, [r3, #12]
 800e408:	60fb      	str	r3, [r7, #12]
                        (&xPendingReadyList)); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
                    (void)uxListRemove(&(pxTCB->xEventListItem));
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	3318      	adds	r3, #24
 800e40e:	4618      	mov	r0, r3
 800e410:	f7fe ff5c 	bl	800d2cc <uxListRemove>
                    (void)uxListRemove(&(pxTCB->xStateListItem));
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	3304      	adds	r3, #4
 800e418:	4618      	mov	r0, r3
 800e41a:	f7fe ff57 	bl	800d2cc <uxListRemove>
                    prvAddTaskToReadyList(pxTCB);
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e422:	2201      	movs	r2, #1
 800e424:	409a      	lsls	r2, r3
 800e426:	4b2c      	ldr	r3, [pc, #176]	@ (800e4d8 <xTaskResumeAll+0x124>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	4313      	orrs	r3, r2
 800e42c:	4a2a      	ldr	r2, [pc, #168]	@ (800e4d8 <xTaskResumeAll+0x124>)
 800e42e:	6013      	str	r3, [r2, #0]
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e434:	4613      	mov	r3, r2
 800e436:	009b      	lsls	r3, r3, #2
 800e438:	4413      	add	r3, r2
 800e43a:	009b      	lsls	r3, r3, #2
 800e43c:	4a27      	ldr	r2, [pc, #156]	@ (800e4dc <xTaskResumeAll+0x128>)
 800e43e:	441a      	add	r2, r3
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	3304      	adds	r3, #4
 800e444:	4619      	mov	r1, r3
 800e446:	4610      	mov	r0, r2
 800e448:	f7fe fee3 	bl	800d212 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                    task then a yield must be performed. */
                    if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e450:	4b23      	ldr	r3, [pc, #140]	@ (800e4e0 <xTaskResumeAll+0x12c>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e456:	429a      	cmp	r2, r3
 800e458:	d302      	bcc.n	800e460 <xTaskResumeAll+0xac>
                        xYieldPending = pdTRUE;
 800e45a:	4b22      	ldr	r3, [pc, #136]	@ (800e4e4 <xTaskResumeAll+0x130>)
 800e45c:	2201      	movs	r2, #1
 800e45e:	601a      	str	r2, [r3, #0]
                while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
 800e460:	4b1c      	ldr	r3, [pc, #112]	@ (800e4d4 <xTaskResumeAll+0x120>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d1cc      	bne.n	800e402 <xTaskResumeAll+0x4e>
                    } else {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if (pxTCB != NULL) {
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d001      	beq.n	800e472 <xTaskResumeAll+0xbe>
                    which may have prevented the next unblock time from being
                    re-calculated, in which case re-calculate it now.  Mainly
                    important for low power tickless implementations, where
                    this can prevent an unnecessary exit from low power
                    state. */
                    prvResetNextTaskUnblockTime();
 800e46e:	f000 fb57 	bl	800eb20 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                they should be processed now.  This ensures the tick count does
                not	slip, and that any delayed tasks are resumed at the correct
                time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e472:	4b1d      	ldr	r3, [pc, #116]	@ (800e4e8 <xTaskResumeAll+0x134>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	607b      	str	r3, [r7, #4]

                    if (xPendedCounts > (TickType_t)0U) {
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d010      	beq.n	800e4a0 <xTaskResumeAll+0xec>
                        do {
                            if (xTaskIncrementTick() != pdFALSE) {
 800e47e:	f000 f847 	bl	800e510 <xTaskIncrementTick>
 800e482:	4603      	mov	r3, r0
 800e484:	2b00      	cmp	r3, #0
 800e486:	d002      	beq.n	800e48e <xTaskResumeAll+0xda>
                                xYieldPending = pdTRUE;
 800e488:	4b16      	ldr	r3, [pc, #88]	@ (800e4e4 <xTaskResumeAll+0x130>)
 800e48a:	2201      	movs	r2, #1
 800e48c:	601a      	str	r2, [r3, #0]
                            } else {
                                mtCOVERAGE_TEST_MARKER();
                            }
                            --xPendedCounts;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	3b01      	subs	r3, #1
 800e492:	607b      	str	r3, [r7, #4]
                        } while (xPendedCounts > (TickType_t)0U);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d1f1      	bne.n	800e47e <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 800e49a:	4b13      	ldr	r3, [pc, #76]	@ (800e4e8 <xTaskResumeAll+0x134>)
 800e49c:	2200      	movs	r2, #0
 800e49e:	601a      	str	r2, [r3, #0]
                    } else {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if (xYieldPending != pdFALSE) {
 800e4a0:	4b10      	ldr	r3, [pc, #64]	@ (800e4e4 <xTaskResumeAll+0x130>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d009      	beq.n	800e4bc <xTaskResumeAll+0x108>
#if (configUSE_PREEMPTION != 0)
                    { xAlreadyYielded = pdTRUE; }
 800e4a8:	2301      	movs	r3, #1
 800e4aa:	60bb      	str	r3, [r7, #8]
#endif
                    taskYIELD_IF_USING_PREEMPTION();
 800e4ac:	4b0f      	ldr	r3, [pc, #60]	@ (800e4ec <xTaskResumeAll+0x138>)
 800e4ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4b2:	601a      	str	r2, [r3, #0]
 800e4b4:	f3bf 8f4f 	dsb	sy
 800e4b8:	f3bf 8f6f 	isb	sy
            }
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800e4bc:	f001 f936 	bl	800f72c <vPortExitCritical>

    return xAlreadyYielded;
 800e4c0:	68bb      	ldr	r3, [r7, #8]
}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	3710      	adds	r7, #16
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}
 800e4ca:	bf00      	nop
 800e4cc:	20000de4 	.word	0x20000de4
 800e4d0:	20000dbc 	.word	0x20000dbc
 800e4d4:	20000d7c 	.word	0x20000d7c
 800e4d8:	20000dc4 	.word	0x20000dc4
 800e4dc:	20000cc0 	.word	0x20000cc0
 800e4e0:	20000cbc 	.word	0x20000cbc
 800e4e4:	20000dd0 	.word	0x20000dd0
 800e4e8:	20000dcc 	.word	0x20000dcc
 800e4ec:	e000ed04 	.word	0xe000ed04

0800e4f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount(void) {
 800e4f0:	b480      	push	{r7}
 800e4f2:	b083      	sub	sp, #12
 800e4f4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    { xTicks = xTickCount; }
 800e4f6:	4b05      	ldr	r3, [pc, #20]	@ (800e50c <xTaskGetTickCount+0x1c>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	607b      	str	r3, [r7, #4]
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800e4fc:	687b      	ldr	r3, [r7, #4]
}
 800e4fe:	4618      	mov	r0, r3
 800e500:	370c      	adds	r7, #12
 800e502:	46bd      	mov	sp, r7
 800e504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e508:	4770      	bx	lr
 800e50a:	bf00      	nop
 800e50c:	20000dc0 	.word	0x20000dc0

0800e510 <xTaskIncrementTick>:
}

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick(void) {
 800e510:	b580      	push	{r7, lr}
 800e512:	b086      	sub	sp, #24
 800e514:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800e516:	2300      	movs	r3, #0
 800e518:	617b      	str	r3, [r7, #20]

    /* Called by the portable layer each time a tick interrupt occurs.
    Increments the tick then checks to see if the new tick value will cause any
    tasks to be unblocked. */
    traceTASK_INCREMENT_TICK(xTickCount);
    if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
 800e51a:	4b4f      	ldr	r3, [pc, #316]	@ (800e658 <xTaskIncrementTick+0x148>)
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	f040 808f 	bne.w	800e642 <xTaskIncrementTick+0x132>
        /* Minor optimisation.  The tick count cannot change in this
        block. */
        const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
 800e524:	4b4d      	ldr	r3, [pc, #308]	@ (800e65c <xTaskIncrementTick+0x14c>)
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	3301      	adds	r3, #1
 800e52a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
        delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800e52c:	4a4b      	ldr	r2, [pc, #300]	@ (800e65c <xTaskIncrementTick+0x14c>)
 800e52e:	693b      	ldr	r3, [r7, #16]
 800e530:	6013      	str	r3, [r2, #0]

        if (xConstTickCount == (TickType_t)0U) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e532:	693b      	ldr	r3, [r7, #16]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d121      	bne.n	800e57c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800e538:	4b49      	ldr	r3, [pc, #292]	@ (800e660 <xTaskIncrementTick+0x150>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d00b      	beq.n	800e55a <xTaskIncrementTick+0x4a>
    __asm volatile("	mov %0, %1												\n"
 800e542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e546:	f383 8811 	msr	BASEPRI, r3
 800e54a:	f3bf 8f6f 	isb	sy
 800e54e:	f3bf 8f4f 	dsb	sy
 800e552:	603b      	str	r3, [r7, #0]
}
 800e554:	bf00      	nop
 800e556:	bf00      	nop
 800e558:	e7fd      	b.n	800e556 <xTaskIncrementTick+0x46>
 800e55a:	4b41      	ldr	r3, [pc, #260]	@ (800e660 <xTaskIncrementTick+0x150>)
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	60fb      	str	r3, [r7, #12]
 800e560:	4b40      	ldr	r3, [pc, #256]	@ (800e664 <xTaskIncrementTick+0x154>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	4a3e      	ldr	r2, [pc, #248]	@ (800e660 <xTaskIncrementTick+0x150>)
 800e566:	6013      	str	r3, [r2, #0]
 800e568:	4a3e      	ldr	r2, [pc, #248]	@ (800e664 <xTaskIncrementTick+0x154>)
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	6013      	str	r3, [r2, #0]
 800e56e:	4b3e      	ldr	r3, [pc, #248]	@ (800e668 <xTaskIncrementTick+0x158>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	3301      	adds	r3, #1
 800e574:	4a3c      	ldr	r2, [pc, #240]	@ (800e668 <xTaskIncrementTick+0x158>)
 800e576:	6013      	str	r3, [r2, #0]
 800e578:	f000 fad2 	bl	800eb20 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
        the	queue in the order of their wake time - meaning once one task
        has been found whose block time has not expired there is no need to
        look any further down the list. */
        if (xConstTickCount >= xNextTaskUnblockTime) {
 800e57c:	4b3b      	ldr	r3, [pc, #236]	@ (800e66c <xTaskIncrementTick+0x15c>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	693a      	ldr	r2, [r7, #16]
 800e582:	429a      	cmp	r2, r3
 800e584:	d348      	bcc.n	800e618 <xTaskIncrementTick+0x108>
            for (;;) {
                if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
 800e586:	4b36      	ldr	r3, [pc, #216]	@ (800e660 <xTaskIncrementTick+0x150>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d104      	bne.n	800e59a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                    to the maximum possible value so it is extremely
                    unlikely that the
                    if( xTickCount >= xNextTaskUnblockTime ) test will pass
                    next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e590:	4b36      	ldr	r3, [pc, #216]	@ (800e66c <xTaskIncrementTick+0x15c>)
 800e592:	f04f 32ff 	mov.w	r2, #4294967295
 800e596:	601a      	str	r2, [r3, #0]
                    break;
 800e598:	e03e      	b.n	800e618 <xTaskIncrementTick+0x108>
                    /* The delayed list is not empty, get the value of the
                    item at the head of the delayed list.  This is the time
                    at which the task at the head of the delayed list must
                    be removed from the Blocked state. */
                    pxTCB =
                        listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e59a:	4b31      	ldr	r3, [pc, #196]	@ (800e660 <xTaskIncrementTick+0x150>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	68db      	ldr	r3, [r3, #12]
                    pxTCB =
 800e5a0:	68db      	ldr	r3, [r3, #12]
 800e5a2:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
 800e5a4:	68bb      	ldr	r3, [r7, #8]
 800e5a6:	685b      	ldr	r3, [r3, #4]
 800e5a8:	607b      	str	r3, [r7, #4]

                    if (xConstTickCount < xItemValue) {
 800e5aa:	693a      	ldr	r2, [r7, #16]
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	429a      	cmp	r2, r3
 800e5b0:	d203      	bcs.n	800e5ba <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                        item value is the time at which the task at the head
                        of the blocked list must be removed from the Blocked
                        state -	so record the item value in
                        xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800e5b2:	4a2e      	ldr	r2, [pc, #184]	@ (800e66c <xTaskIncrementTick+0x15c>)
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e5b8:	e02e      	b.n	800e618 <xTaskIncrementTick+0x108>
                    } else {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    (void)uxListRemove(&(pxTCB->xStateListItem));
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	3304      	adds	r3, #4
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f7fe fe84 	bl	800d2cc <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                    it from the event list. */
                    if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d004      	beq.n	800e5d6 <xTaskIncrementTick+0xc6>
                        (void)uxListRemove(&(pxTCB->xEventListItem));
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	3318      	adds	r3, #24
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f7fe fe7b 	bl	800d2cc <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                    list. */
                    prvAddTaskToReadyList(pxTCB);
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5da:	2201      	movs	r2, #1
 800e5dc:	409a      	lsls	r2, r3
 800e5de:	4b24      	ldr	r3, [pc, #144]	@ (800e670 <xTaskIncrementTick+0x160>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	4313      	orrs	r3, r2
 800e5e4:	4a22      	ldr	r2, [pc, #136]	@ (800e670 <xTaskIncrementTick+0x160>)
 800e5e6:	6013      	str	r3, [r2, #0]
 800e5e8:	68bb      	ldr	r3, [r7, #8]
 800e5ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5ec:	4613      	mov	r3, r2
 800e5ee:	009b      	lsls	r3, r3, #2
 800e5f0:	4413      	add	r3, r2
 800e5f2:	009b      	lsls	r3, r3, #2
 800e5f4:	4a1f      	ldr	r2, [pc, #124]	@ (800e674 <xTaskIncrementTick+0x164>)
 800e5f6:	441a      	add	r2, r3
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	3304      	adds	r3, #4
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	4610      	mov	r0, r2
 800e600:	f7fe fe07 	bl	800d212 <vListInsertEnd>
                    {
                        /* Preemption is on, but a context switch should
                        only be performed if the unblocked task has a
                        priority that is equal to or higher than the
                        currently executing task. */
                        if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
 800e604:	68bb      	ldr	r3, [r7, #8]
 800e606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e608:	4b1b      	ldr	r3, [pc, #108]	@ (800e678 <xTaskIncrementTick+0x168>)
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e60e:	429a      	cmp	r2, r3
 800e610:	d3b9      	bcc.n	800e586 <xTaskIncrementTick+0x76>
                            xSwitchRequired = pdTRUE;
 800e612:	2301      	movs	r3, #1
 800e614:	617b      	str	r3, [r7, #20]
                if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
 800e616:	e7b6      	b.n	800e586 <xTaskIncrementTick+0x76>
/* Tasks of equal priority to the currently running task will share
processing time (time slice) if preemption is on, and the application
writer has not explicitly turned time slicing off. */
#if ((configUSE_PREEMPTION == 1) && (configUSE_TIME_SLICING == 1))
        {
            if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
 800e618:	4b17      	ldr	r3, [pc, #92]	@ (800e678 <xTaskIncrementTick+0x168>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e61e:	4915      	ldr	r1, [pc, #84]	@ (800e674 <xTaskIncrementTick+0x164>)
 800e620:	4613      	mov	r3, r2
 800e622:	009b      	lsls	r3, r3, #2
 800e624:	4413      	add	r3, r2
 800e626:	009b      	lsls	r3, r3, #2
 800e628:	440b      	add	r3, r1
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	2b01      	cmp	r3, #1
 800e62e:	d901      	bls.n	800e634 <xTaskIncrementTick+0x124>
                xSwitchRequired = pdTRUE;
 800e630:	2301      	movs	r3, #1
 800e632:	617b      	str	r3, [r7, #20]
        }
#endif /* configUSE_TICK_HOOK */

#if (configUSE_PREEMPTION == 1)
        {
            if (xYieldPending != pdFALSE) {
 800e634:	4b11      	ldr	r3, [pc, #68]	@ (800e67c <xTaskIncrementTick+0x16c>)
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d007      	beq.n	800e64c <xTaskIncrementTick+0x13c>
                xSwitchRequired = pdTRUE;
 800e63c:	2301      	movs	r3, #1
 800e63e:	617b      	str	r3, [r7, #20]
 800e640:	e004      	b.n	800e64c <xTaskIncrementTick+0x13c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
#endif /* configUSE_PREEMPTION */
    } else {
        ++xPendedTicks;
 800e642:	4b0f      	ldr	r3, [pc, #60]	@ (800e680 <xTaskIncrementTick+0x170>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	3301      	adds	r3, #1
 800e648:	4a0d      	ldr	r2, [pc, #52]	@ (800e680 <xTaskIncrementTick+0x170>)
 800e64a:	6013      	str	r3, [r2, #0]
#if (configUSE_TICK_HOOK == 1)
        { vApplicationTickHook(); }
#endif
    }

    return xSwitchRequired;
 800e64c:	697b      	ldr	r3, [r7, #20]
}
 800e64e:	4618      	mov	r0, r3
 800e650:	3718      	adds	r7, #24
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}
 800e656:	bf00      	nop
 800e658:	20000de4 	.word	0x20000de4
 800e65c:	20000dc0 	.word	0x20000dc0
 800e660:	20000d74 	.word	0x20000d74
 800e664:	20000d78 	.word	0x20000d78
 800e668:	20000dd4 	.word	0x20000dd4
 800e66c:	20000ddc 	.word	0x20000ddc
 800e670:	20000dc4 	.word	0x20000dc4
 800e674:	20000cc0 	.word	0x20000cc0
 800e678:	20000cbc 	.word	0x20000cbc
 800e67c:	20000dd0 	.word	0x20000dd0
 800e680:	20000dcc 	.word	0x20000dcc

0800e684 <vTaskSwitchContext>:
}

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext(void) {
 800e684:	b480      	push	{r7}
 800e686:	b087      	sub	sp, #28
 800e688:	af00      	add	r7, sp, #0
    if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
 800e68a:	4b27      	ldr	r3, [pc, #156]	@ (800e728 <vTaskSwitchContext+0xa4>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d003      	beq.n	800e69a <vTaskSwitchContext+0x16>
        /* The scheduler is currently suspended - do not allow a context
        switch. */
        xYieldPending = pdTRUE;
 800e692:	4b26      	ldr	r3, [pc, #152]	@ (800e72c <vTaskSwitchContext+0xa8>)
 800e694:	2201      	movs	r2, #1
 800e696:	601a      	str	r2, [r3, #0]
            for additional information. */
            _impure_ptr = &(pxCurrentTCB->xNewLib_reent);
        }
#endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800e698:	e040      	b.n	800e71c <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 800e69a:	4b24      	ldr	r3, [pc, #144]	@ (800e72c <vTaskSwitchContext+0xa8>)
 800e69c:	2200      	movs	r2, #0
 800e69e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6a0:	4b23      	ldr	r3, [pc, #140]	@ (800e730 <vTaskSwitchContext+0xac>)
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	60fb      	str	r3, [r7, #12]
    __asm volatile("clz %0, %1" : "=r"(ucReturn) : "r"(ulBitmap) : "memory");
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	fab3 f383 	clz	r3, r3
 800e6ac:	72fb      	strb	r3, [r7, #11]
    return ucReturn;
 800e6ae:	7afb      	ldrb	r3, [r7, #11]
 800e6b0:	f1c3 031f 	rsb	r3, r3, #31
 800e6b4:	617b      	str	r3, [r7, #20]
 800e6b6:	491f      	ldr	r1, [pc, #124]	@ (800e734 <vTaskSwitchContext+0xb0>)
 800e6b8:	697a      	ldr	r2, [r7, #20]
 800e6ba:	4613      	mov	r3, r2
 800e6bc:	009b      	lsls	r3, r3, #2
 800e6be:	4413      	add	r3, r2
 800e6c0:	009b      	lsls	r3, r3, #2
 800e6c2:	440b      	add	r3, r1
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d10b      	bne.n	800e6e2 <vTaskSwitchContext+0x5e>
    __asm volatile("	mov %0, %1												\n"
 800e6ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6ce:	f383 8811 	msr	BASEPRI, r3
 800e6d2:	f3bf 8f6f 	isb	sy
 800e6d6:	f3bf 8f4f 	dsb	sy
 800e6da:	607b      	str	r3, [r7, #4]
}
 800e6dc:	bf00      	nop
 800e6de:	bf00      	nop
 800e6e0:	e7fd      	b.n	800e6de <vTaskSwitchContext+0x5a>
 800e6e2:	697a      	ldr	r2, [r7, #20]
 800e6e4:	4613      	mov	r3, r2
 800e6e6:	009b      	lsls	r3, r3, #2
 800e6e8:	4413      	add	r3, r2
 800e6ea:	009b      	lsls	r3, r3, #2
 800e6ec:	4a11      	ldr	r2, [pc, #68]	@ (800e734 <vTaskSwitchContext+0xb0>)
 800e6ee:	4413      	add	r3, r2
 800e6f0:	613b      	str	r3, [r7, #16]
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	685b      	ldr	r3, [r3, #4]
 800e6f6:	685a      	ldr	r2, [r3, #4]
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	605a      	str	r2, [r3, #4]
 800e6fc:	693b      	ldr	r3, [r7, #16]
 800e6fe:	685a      	ldr	r2, [r3, #4]
 800e700:	693b      	ldr	r3, [r7, #16]
 800e702:	3308      	adds	r3, #8
 800e704:	429a      	cmp	r2, r3
 800e706:	d104      	bne.n	800e712 <vTaskSwitchContext+0x8e>
 800e708:	693b      	ldr	r3, [r7, #16]
 800e70a:	685b      	ldr	r3, [r3, #4]
 800e70c:	685a      	ldr	r2, [r3, #4]
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	605a      	str	r2, [r3, #4]
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	685b      	ldr	r3, [r3, #4]
 800e716:	68db      	ldr	r3, [r3, #12]
 800e718:	4a07      	ldr	r2, [pc, #28]	@ (800e738 <vTaskSwitchContext+0xb4>)
 800e71a:	6013      	str	r3, [r2, #0]
}
 800e71c:	bf00      	nop
 800e71e:	371c      	adds	r7, #28
 800e720:	46bd      	mov	sp, r7
 800e722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e726:	4770      	bx	lr
 800e728:	20000de4 	.word	0x20000de4
 800e72c:	20000dd0 	.word	0x20000dd0
 800e730:	20000dc4 	.word	0x20000dc4
 800e734:	20000cc0 	.word	0x20000cc0
 800e738:	20000cbc 	.word	0x20000cbc

0800e73c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList(List_t * const pxEventList, const TickType_t xTicksToWait) {
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b084      	sub	sp, #16
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
 800e744:	6039      	str	r1, [r7, #0]
    configASSERT(pxEventList);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d10b      	bne.n	800e764 <vTaskPlaceOnEventList+0x28>
    __asm volatile("	mov %0, %1												\n"
 800e74c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e750:	f383 8811 	msr	BASEPRI, r3
 800e754:	f3bf 8f6f 	isb	sy
 800e758:	f3bf 8f4f 	dsb	sy
 800e75c:	60fb      	str	r3, [r7, #12]
}
 800e75e:	bf00      	nop
 800e760:	bf00      	nop
 800e762:	e7fd      	b.n	800e760 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
    This is placed in the list in priority order so the highest priority task
    is the first to be woken by the event.  The queue that contains the event
    list is locked, preventing simultaneous access from interrupts. */
    vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
 800e764:	4b07      	ldr	r3, [pc, #28]	@ (800e784 <vTaskPlaceOnEventList+0x48>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	3318      	adds	r3, #24
 800e76a:	4619      	mov	r1, r3
 800e76c:	6878      	ldr	r0, [r7, #4]
 800e76e:	f7fe fd74 	bl	800d25a <vListInsert>

    prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
 800e772:	2101      	movs	r1, #1
 800e774:	6838      	ldr	r0, [r7, #0]
 800e776:	f000 fa11 	bl	800eb9c <prvAddCurrentTaskToDelayedList>
}
 800e77a:	bf00      	nop
 800e77c:	3710      	adds	r7, #16
 800e77e:	46bd      	mov	sp, r7
 800e780:	bd80      	pop	{r7, pc}
 800e782:	bf00      	nop
 800e784:	20000cbc 	.word	0x20000cbc

0800e788 <vTaskPlaceOnEventListRestricted>:
}
/*-----------------------------------------------------------*/

#if (configUSE_TIMERS == 1)

void vTaskPlaceOnEventListRestricted(List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely) {
 800e788:	b580      	push	{r7, lr}
 800e78a:	b086      	sub	sp, #24
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	60f8      	str	r0, [r7, #12]
 800e790:	60b9      	str	r1, [r7, #8]
 800e792:	607a      	str	r2, [r7, #4]
    configASSERT(pxEventList);
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d10b      	bne.n	800e7b2 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile("	mov %0, %1												\n"
 800e79a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e79e:	f383 8811 	msr	BASEPRI, r3
 800e7a2:	f3bf 8f6f 	isb	sy
 800e7a6:	f3bf 8f4f 	dsb	sy
 800e7aa:	617b      	str	r3, [r7, #20]
}
 800e7ac:	bf00      	nop
 800e7ae:	bf00      	nop
 800e7b0:	e7fd      	b.n	800e7ae <vTaskPlaceOnEventListRestricted+0x26>

    /* Place the event list item of the TCB in the appropriate event list.
    In this case it is assume that this is the only task that is going to
    be waiting on this event list, so the faster vListInsertEnd() function
    can be used in place of vListInsert. */
    vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
 800e7b2:	4b0a      	ldr	r3, [pc, #40]	@ (800e7dc <vTaskPlaceOnEventListRestricted+0x54>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	3318      	adds	r3, #24
 800e7b8:	4619      	mov	r1, r3
 800e7ba:	68f8      	ldr	r0, [r7, #12]
 800e7bc:	f7fe fd29 	bl	800d212 <vListInsertEnd>

    /* If the task should block indefinitely then set the block time to a
    value that will be recognised as an indefinite delay inside the
    prvAddCurrentTaskToDelayedList() function. */
    if (xWaitIndefinitely != pdFALSE) {
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d002      	beq.n	800e7cc <vTaskPlaceOnEventListRestricted+0x44>
        xTicksToWait = portMAX_DELAY;
 800e7c6:	f04f 33ff 	mov.w	r3, #4294967295
 800e7ca:	60bb      	str	r3, [r7, #8]
    }

    traceTASK_DELAY_UNTIL((xTickCount + xTicksToWait));
    prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
 800e7cc:	6879      	ldr	r1, [r7, #4]
 800e7ce:	68b8      	ldr	r0, [r7, #8]
 800e7d0:	f000 f9e4 	bl	800eb9c <prvAddCurrentTaskToDelayedList>
}
 800e7d4:	bf00      	nop
 800e7d6:	3718      	adds	r7, #24
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd80      	pop	{r7, pc}
 800e7dc:	20000cbc 	.word	0x20000cbc

0800e7e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList(const List_t * const pxEventList) {
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b086      	sub	sp, #24
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
    get called - the lock count on the queue will get modified instead.  This
    means exclusive access to the event list is guaranteed here.

    This function assumes that a check has already been made to ensure that
    pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY(pxEventList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	68db      	ldr	r3, [r3, #12]
 800e7ec:	68db      	ldr	r3, [r3, #12]
 800e7ee:	613b      	str	r3, [r7, #16]
    configASSERT(pxUnblockedTCB);
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d10b      	bne.n	800e80e <xTaskRemoveFromEventList+0x2e>
    __asm volatile("	mov %0, %1												\n"
 800e7f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7fa:	f383 8811 	msr	BASEPRI, r3
 800e7fe:	f3bf 8f6f 	isb	sy
 800e802:	f3bf 8f4f 	dsb	sy
 800e806:	60fb      	str	r3, [r7, #12]
}
 800e808:	bf00      	nop
 800e80a:	bf00      	nop
 800e80c:	e7fd      	b.n	800e80a <xTaskRemoveFromEventList+0x2a>
    (void)uxListRemove(&(pxUnblockedTCB->xEventListItem));
 800e80e:	693b      	ldr	r3, [r7, #16]
 800e810:	3318      	adds	r3, #24
 800e812:	4618      	mov	r0, r3
 800e814:	f7fe fd5a 	bl	800d2cc <uxListRemove>

    if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
 800e818:	4b1d      	ldr	r3, [pc, #116]	@ (800e890 <xTaskRemoveFromEventList+0xb0>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d11c      	bne.n	800e85a <xTaskRemoveFromEventList+0x7a>
        (void)uxListRemove(&(pxUnblockedTCB->xStateListItem));
 800e820:	693b      	ldr	r3, [r7, #16]
 800e822:	3304      	adds	r3, #4
 800e824:	4618      	mov	r0, r3
 800e826:	f7fe fd51 	bl	800d2cc <uxListRemove>
        prvAddTaskToReadyList(pxUnblockedTCB);
 800e82a:	693b      	ldr	r3, [r7, #16]
 800e82c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e82e:	2201      	movs	r2, #1
 800e830:	409a      	lsls	r2, r3
 800e832:	4b18      	ldr	r3, [pc, #96]	@ (800e894 <xTaskRemoveFromEventList+0xb4>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	4313      	orrs	r3, r2
 800e838:	4a16      	ldr	r2, [pc, #88]	@ (800e894 <xTaskRemoveFromEventList+0xb4>)
 800e83a:	6013      	str	r3, [r2, #0]
 800e83c:	693b      	ldr	r3, [r7, #16]
 800e83e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e840:	4613      	mov	r3, r2
 800e842:	009b      	lsls	r3, r3, #2
 800e844:	4413      	add	r3, r2
 800e846:	009b      	lsls	r3, r3, #2
 800e848:	4a13      	ldr	r2, [pc, #76]	@ (800e898 <xTaskRemoveFromEventList+0xb8>)
 800e84a:	441a      	add	r2, r3
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	3304      	adds	r3, #4
 800e850:	4619      	mov	r1, r3
 800e852:	4610      	mov	r0, r2
 800e854:	f7fe fcdd 	bl	800d212 <vListInsertEnd>
 800e858:	e005      	b.n	800e866 <xTaskRemoveFromEventList+0x86>
        }
#endif
    } else {
        /* The delayed and ready lists cannot be accessed, so hold this task
        pending until the scheduler is resumed. */
        vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
 800e85a:	693b      	ldr	r3, [r7, #16]
 800e85c:	3318      	adds	r3, #24
 800e85e:	4619      	mov	r1, r3
 800e860:	480e      	ldr	r0, [pc, #56]	@ (800e89c <xTaskRemoveFromEventList+0xbc>)
 800e862:	f7fe fcd6 	bl	800d212 <vListInsertEnd>
    }

    if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
 800e866:	693b      	ldr	r3, [r7, #16]
 800e868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e86a:	4b0d      	ldr	r3, [pc, #52]	@ (800e8a0 <xTaskRemoveFromEventList+0xc0>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e870:	429a      	cmp	r2, r3
 800e872:	d905      	bls.n	800e880 <xTaskRemoveFromEventList+0xa0>
        /* Return true if the task removed from the event list has a higher
        priority than the calling task.  This allows the calling task to know if
        it should force a context switch now. */
        xReturn = pdTRUE;
 800e874:	2301      	movs	r3, #1
 800e876:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
        "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800e878:	4b0a      	ldr	r3, [pc, #40]	@ (800e8a4 <xTaskRemoveFromEventList+0xc4>)
 800e87a:	2201      	movs	r2, #1
 800e87c:	601a      	str	r2, [r3, #0]
 800e87e:	e001      	b.n	800e884 <xTaskRemoveFromEventList+0xa4>
    } else {
        xReturn = pdFALSE;
 800e880:	2300      	movs	r3, #0
 800e882:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800e884:	697b      	ldr	r3, [r7, #20]
}
 800e886:	4618      	mov	r0, r3
 800e888:	3718      	adds	r7, #24
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}
 800e88e:	bf00      	nop
 800e890:	20000de4 	.word	0x20000de4
 800e894:	20000dc4 	.word	0x20000dc4
 800e898:	20000cc0 	.word	0x20000cc0
 800e89c:	20000d7c 	.word	0x20000d7c
 800e8a0:	20000cbc 	.word	0x20000cbc
 800e8a4:	20000dd0 	.word	0x20000dd0

0800e8a8 <vTaskInternalSetTimeOutState>:
    }
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState(TimeOut_t * const pxTimeOut) {
 800e8a8:	b480      	push	{r7}
 800e8aa:	b083      	sub	sp, #12
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e8b0:	4b06      	ldr	r3, [pc, #24]	@ (800e8cc <vTaskInternalSetTimeOutState+0x24>)
 800e8b2:	681a      	ldr	r2, [r3, #0]
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800e8b8:	4b05      	ldr	r3, [pc, #20]	@ (800e8d0 <vTaskInternalSetTimeOutState+0x28>)
 800e8ba:	681a      	ldr	r2, [r3, #0]
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	605a      	str	r2, [r3, #4]
}
 800e8c0:	bf00      	nop
 800e8c2:	370c      	adds	r7, #12
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ca:	4770      	bx	lr
 800e8cc:	20000dd4 	.word	0x20000dd4
 800e8d0:	20000dc0 	.word	0x20000dc0

0800e8d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut(TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait) {
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b088      	sub	sp, #32
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
 800e8dc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT(pxTimeOut);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d10b      	bne.n	800e8fc <xTaskCheckForTimeOut+0x28>
    __asm volatile("	mov %0, %1												\n"
 800e8e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8e8:	f383 8811 	msr	BASEPRI, r3
 800e8ec:	f3bf 8f6f 	isb	sy
 800e8f0:	f3bf 8f4f 	dsb	sy
 800e8f4:	613b      	str	r3, [r7, #16]
}
 800e8f6:	bf00      	nop
 800e8f8:	bf00      	nop
 800e8fa:	e7fd      	b.n	800e8f8 <xTaskCheckForTimeOut+0x24>
    configASSERT(pxTicksToWait);
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d10b      	bne.n	800e91a <xTaskCheckForTimeOut+0x46>
    __asm volatile("	mov %0, %1												\n"
 800e902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e906:	f383 8811 	msr	BASEPRI, r3
 800e90a:	f3bf 8f6f 	isb	sy
 800e90e:	f3bf 8f4f 	dsb	sy
 800e912:	60fb      	str	r3, [r7, #12]
}
 800e914:	bf00      	nop
 800e916:	bf00      	nop
 800e918:	e7fd      	b.n	800e916 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800e91a:	f000 fed5 	bl	800f6c8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800e91e:	4b1d      	ldr	r3, [pc, #116]	@ (800e994 <xTaskCheckForTimeOut+0xc0>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	685b      	ldr	r3, [r3, #4]
 800e928:	69ba      	ldr	r2, [r7, #24]
 800e92a:	1ad3      	subs	r3, r2, r3
 800e92c:	617b      	str	r3, [r7, #20]
            xReturn = pdTRUE;
        } else
#endif

#if (INCLUDE_vTaskSuspend == 1)
            if (*pxTicksToWait == portMAX_DELAY) {
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e936:	d102      	bne.n	800e93e <xTaskCheckForTimeOut+0x6a>
            /* If INCLUDE_vTaskSuspend is set to 1 and the block time
            specified is the maximum block time then the task should block
            indefinitely, and therefore never time out. */
            xReturn = pdFALSE;
 800e938:	2300      	movs	r3, #0
 800e93a:	61fb      	str	r3, [r7, #28]
 800e93c:	e023      	b.n	800e986 <xTaskCheckForTimeOut+0xb2>
        } else
#endif

            if ((xNumOfOverflows != pxTimeOut->xOverflowCount) && (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681a      	ldr	r2, [r3, #0]
 800e942:	4b15      	ldr	r3, [pc, #84]	@ (800e998 <xTaskCheckForTimeOut+0xc4>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	429a      	cmp	r2, r3
 800e948:	d007      	beq.n	800e95a <xTaskCheckForTimeOut+0x86>
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	685b      	ldr	r3, [r3, #4]
 800e94e:	69ba      	ldr	r2, [r7, #24]
 800e950:	429a      	cmp	r2, r3
 800e952:	d302      	bcc.n	800e95a <xTaskCheckForTimeOut+0x86>
            /* The tick count is greater than the time at which
            vTaskSetTimeout() was called, but has also overflowed since
            vTaskSetTimeOut() was called.  It must have wrapped all the way
            around and gone past again. This passed since vTaskSetTimeout()
            was called. */
            xReturn = pdTRUE;
 800e954:	2301      	movs	r3, #1
 800e956:	61fb      	str	r3, [r7, #28]
 800e958:	e015      	b.n	800e986 <xTaskCheckForTimeOut+0xb2>
        } else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	697a      	ldr	r2, [r7, #20]
 800e960:	429a      	cmp	r2, r3
 800e962:	d20b      	bcs.n	800e97c <xTaskCheckForTimeOut+0xa8>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	681a      	ldr	r2, [r3, #0]
 800e968:	697b      	ldr	r3, [r7, #20]
 800e96a:	1ad2      	subs	r2, r2, r3
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState(pxTimeOut);
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f7ff ff99 	bl	800e8a8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800e976:	2300      	movs	r3, #0
 800e978:	61fb      	str	r3, [r7, #28]
 800e97a:	e004      	b.n	800e986 <xTaskCheckForTimeOut+0xb2>
        } else {
            *pxTicksToWait = 0;
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	2200      	movs	r2, #0
 800e980:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800e982:	2301      	movs	r3, #1
 800e984:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800e986:	f000 fed1 	bl	800f72c <vPortExitCritical>

    return xReturn;
 800e98a:	69fb      	ldr	r3, [r7, #28]
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	3720      	adds	r7, #32
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}
 800e994:	20000dc0 	.word	0x20000dc0
 800e998:	20000dd4 	.word	0x20000dd4

0800e99c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield(void) {
 800e99c:	b480      	push	{r7}
 800e99e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800e9a0:	4b03      	ldr	r3, [pc, #12]	@ (800e9b0 <vTaskMissedYield+0x14>)
 800e9a2:	2201      	movs	r2, #1
 800e9a4:	601a      	str	r2, [r3, #0]
}
 800e9a6:	bf00      	nop
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ae:	4770      	bx	lr
 800e9b0:	20000dd0 	.word	0x20000dd0

0800e9b4 <prvIdleTask>:
 * language extensions.  The equivalent prototype for this function is:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION(prvIdleTask, pvParameters) {
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b082      	sub	sp, #8
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
    portALLOCATE_SECURE_CONTEXT(configMINIMAL_SECURE_STACK_SIZE);

    for (;;) {
        /* See if any tasks have deleted themselves - if so then the idle task
        is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800e9bc:	f000 f852 	bl	800ea64 <prvCheckTasksWaitingTermination>

            A critical region is not required here as we are just reading from
            the list, and an occasional incorrect value will not matter.  If
            the ready list at the idle priority contains more than one task
            then a task other than the idle task is ready to execute. */
            if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
 800e9c0:	4b06      	ldr	r3, [pc, #24]	@ (800e9dc <prvIdleTask+0x28>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	2b01      	cmp	r3, #1
 800e9c6:	d9f9      	bls.n	800e9bc <prvIdleTask+0x8>
                taskYIELD();
 800e9c8:	4b05      	ldr	r3, [pc, #20]	@ (800e9e0 <prvIdleTask+0x2c>)
 800e9ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e9ce:	601a      	str	r2, [r3, #0]
 800e9d0:	f3bf 8f4f 	dsb	sy
 800e9d4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800e9d8:	e7f0      	b.n	800e9bc <prvIdleTask+0x8>
 800e9da:	bf00      	nop
 800e9dc:	20000cc0 	.word	0x20000cc0
 800e9e0:	e000ed04 	.word	0xe000ed04

0800e9e4 <prvInitialiseTaskLists>:
}

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists(void) {
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b082      	sub	sp, #8
 800e9e8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for (uxPriority = (UBaseType_t)0U; uxPriority < (UBaseType_t)configMAX_PRIORITIES; uxPriority++) {
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	607b      	str	r3, [r7, #4]
 800e9ee:	e00c      	b.n	800ea0a <prvInitialiseTaskLists+0x26>
        vListInitialise(&(pxReadyTasksLists[uxPriority]));
 800e9f0:	687a      	ldr	r2, [r7, #4]
 800e9f2:	4613      	mov	r3, r2
 800e9f4:	009b      	lsls	r3, r3, #2
 800e9f6:	4413      	add	r3, r2
 800e9f8:	009b      	lsls	r3, r3, #2
 800e9fa:	4a12      	ldr	r2, [pc, #72]	@ (800ea44 <prvInitialiseTaskLists+0x60>)
 800e9fc:	4413      	add	r3, r2
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f7fe fbda 	bl	800d1b8 <vListInitialise>
    for (uxPriority = (UBaseType_t)0U; uxPriority < (UBaseType_t)configMAX_PRIORITIES; uxPriority++) {
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	3301      	adds	r3, #1
 800ea08:	607b      	str	r3, [r7, #4]
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2b06      	cmp	r3, #6
 800ea0e:	d9ef      	bls.n	800e9f0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise(&xDelayedTaskList1);
 800ea10:	480d      	ldr	r0, [pc, #52]	@ (800ea48 <prvInitialiseTaskLists+0x64>)
 800ea12:	f7fe fbd1 	bl	800d1b8 <vListInitialise>
    vListInitialise(&xDelayedTaskList2);
 800ea16:	480d      	ldr	r0, [pc, #52]	@ (800ea4c <prvInitialiseTaskLists+0x68>)
 800ea18:	f7fe fbce 	bl	800d1b8 <vListInitialise>
    vListInitialise(&xPendingReadyList);
 800ea1c:	480c      	ldr	r0, [pc, #48]	@ (800ea50 <prvInitialiseTaskLists+0x6c>)
 800ea1e:	f7fe fbcb 	bl	800d1b8 <vListInitialise>

#if (INCLUDE_vTaskDelete == 1)
    { vListInitialise(&xTasksWaitingTermination); }
 800ea22:	480c      	ldr	r0, [pc, #48]	@ (800ea54 <prvInitialiseTaskLists+0x70>)
 800ea24:	f7fe fbc8 	bl	800d1b8 <vListInitialise>
#endif /* INCLUDE_vTaskDelete */

#if (INCLUDE_vTaskSuspend == 1)
    { vListInitialise(&xSuspendedTaskList); }
 800ea28:	480b      	ldr	r0, [pc, #44]	@ (800ea58 <prvInitialiseTaskLists+0x74>)
 800ea2a:	f7fe fbc5 	bl	800d1b8 <vListInitialise>
#endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
    using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800ea2e:	4b0b      	ldr	r3, [pc, #44]	@ (800ea5c <prvInitialiseTaskLists+0x78>)
 800ea30:	4a05      	ldr	r2, [pc, #20]	@ (800ea48 <prvInitialiseTaskLists+0x64>)
 800ea32:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ea34:	4b0a      	ldr	r3, [pc, #40]	@ (800ea60 <prvInitialiseTaskLists+0x7c>)
 800ea36:	4a05      	ldr	r2, [pc, #20]	@ (800ea4c <prvInitialiseTaskLists+0x68>)
 800ea38:	601a      	str	r2, [r3, #0]
}
 800ea3a:	bf00      	nop
 800ea3c:	3708      	adds	r7, #8
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd80      	pop	{r7, pc}
 800ea42:	bf00      	nop
 800ea44:	20000cc0 	.word	0x20000cc0
 800ea48:	20000d4c 	.word	0x20000d4c
 800ea4c:	20000d60 	.word	0x20000d60
 800ea50:	20000d7c 	.word	0x20000d7c
 800ea54:	20000d90 	.word	0x20000d90
 800ea58:	20000da8 	.word	0x20000da8
 800ea5c:	20000d74 	.word	0x20000d74
 800ea60:	20000d78 	.word	0x20000d78

0800ea64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination(void) {
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b082      	sub	sp, #8
 800ea68:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
        being called too often in the idle task. */
        while (uxDeletedTasksWaitingCleanUp > (UBaseType_t)0U) {
 800ea6a:	e019      	b.n	800eaa0 <prvCheckTasksWaitingTermination+0x3c>
            taskENTER_CRITICAL();
 800ea6c:	f000 fe2c 	bl	800f6c8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY(
 800ea70:	4b10      	ldr	r3, [pc, #64]	@ (800eab4 <prvCheckTasksWaitingTermination+0x50>)
 800ea72:	68db      	ldr	r3, [r3, #12]
 800ea74:	68db      	ldr	r3, [r3, #12]
 800ea76:	607b      	str	r3, [r7, #4]
                    (&xTasksWaitingTermination)); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
                (void)uxListRemove(&(pxTCB->xStateListItem));
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	3304      	adds	r3, #4
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f7fe fc25 	bl	800d2cc <uxListRemove>
                --uxCurrentNumberOfTasks;
 800ea82:	4b0d      	ldr	r3, [pc, #52]	@ (800eab8 <prvCheckTasksWaitingTermination+0x54>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	3b01      	subs	r3, #1
 800ea88:	4a0b      	ldr	r2, [pc, #44]	@ (800eab8 <prvCheckTasksWaitingTermination+0x54>)
 800ea8a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800ea8c:	4b0b      	ldr	r3, [pc, #44]	@ (800eabc <prvCheckTasksWaitingTermination+0x58>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	3b01      	subs	r3, #1
 800ea92:	4a0a      	ldr	r2, [pc, #40]	@ (800eabc <prvCheckTasksWaitingTermination+0x58>)
 800ea94:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800ea96:	f000 fe49 	bl	800f72c <vPortExitCritical>

            prvDeleteTCB(pxTCB);
 800ea9a:	6878      	ldr	r0, [r7, #4]
 800ea9c:	f000 f810 	bl	800eac0 <prvDeleteTCB>
        while (uxDeletedTasksWaitingCleanUp > (UBaseType_t)0U) {
 800eaa0:	4b06      	ldr	r3, [pc, #24]	@ (800eabc <prvCheckTasksWaitingTermination+0x58>)
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d1e1      	bne.n	800ea6c <prvCheckTasksWaitingTermination+0x8>
        }
    }
#endif /* INCLUDE_vTaskDelete */
}
 800eaa8:	bf00      	nop
 800eaaa:	bf00      	nop
 800eaac:	3708      	adds	r7, #8
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}
 800eab2:	bf00      	nop
 800eab4:	20000d90 	.word	0x20000d90
 800eab8:	20000dbc 	.word	0x20000dbc
 800eabc:	20000da4 	.word	0x20000da4

0800eac0 <prvDeleteTCB>:
#endif /* INCLUDE_uxTaskGetStackHighWaterMark */
/*-----------------------------------------------------------*/

#if (INCLUDE_vTaskDelete == 1)

static void prvDeleteTCB(TCB_t * pxTCB) {
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b084      	sub	sp, #16
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
#elif (tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
    {
        /* The task could have been allocated statically or dynamically, so
        check what was statically allocated before trying to free the
        memory. */
        if (pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB) {
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d108      	bne.n	800eae4 <prvDeleteTCB+0x24>
            /* Both the stack and TCB were allocated dynamically, so both
            must be freed. */
            vPortFree(pxTCB->pxStack);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ead6:	4618      	mov	r0, r3
 800ead8:	f000 ff2a 	bl	800f930 <vPortFree>
            vPortFree(pxTCB);
 800eadc:	6878      	ldr	r0, [r7, #4]
 800eade:	f000 ff27 	bl	800f930 <vPortFree>
            configASSERT(pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB);
            mtCOVERAGE_TEST_MARKER();
        }
    }
#endif                                                 /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800eae2:	e019      	b.n	800eb18 <prvDeleteTCB+0x58>
        } else if (pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY) {
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800eaea:	2b01      	cmp	r3, #1
 800eaec:	d103      	bne.n	800eaf6 <prvDeleteTCB+0x36>
            vPortFree(pxTCB);
 800eaee:	6878      	ldr	r0, [r7, #4]
 800eaf0:	f000 ff1e 	bl	800f930 <vPortFree>
}
 800eaf4:	e010      	b.n	800eb18 <prvDeleteTCB+0x58>
            configASSERT(pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB);
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800eafc:	2b02      	cmp	r3, #2
 800eafe:	d00b      	beq.n	800eb18 <prvDeleteTCB+0x58>
    __asm volatile("	mov %0, %1												\n"
 800eb00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb04:	f383 8811 	msr	BASEPRI, r3
 800eb08:	f3bf 8f6f 	isb	sy
 800eb0c:	f3bf 8f4f 	dsb	sy
 800eb10:	60fb      	str	r3, [r7, #12]
}
 800eb12:	bf00      	nop
 800eb14:	bf00      	nop
 800eb16:	e7fd      	b.n	800eb14 <prvDeleteTCB+0x54>
}
 800eb18:	bf00      	nop
 800eb1a:	3710      	adds	r7, #16
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}

0800eb20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime(void) {
 800eb20:	b480      	push	{r7}
 800eb22:	b083      	sub	sp, #12
 800eb24:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;

    if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
 800eb26:	4b0c      	ldr	r3, [pc, #48]	@ (800eb58 <prvResetNextTaskUnblockTime+0x38>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d104      	bne.n	800eb3a <prvResetNextTaskUnblockTime+0x1a>
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
        the maximum possible value so it is	extremely unlikely that the
        if( xTickCount >= xNextTaskUnblockTime ) test will pass until
        there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800eb30:	4b0a      	ldr	r3, [pc, #40]	@ (800eb5c <prvResetNextTaskUnblockTime+0x3c>)
 800eb32:	f04f 32ff 	mov.w	r2, #4294967295
 800eb36:	601a      	str	r2, [r3, #0]
        which the task at the head of the delayed list should be removed
        from the Blocked state. */
        (pxTCB) = listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
        xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    }
}
 800eb38:	e008      	b.n	800eb4c <prvResetNextTaskUnblockTime+0x2c>
        (pxTCB) = listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb3a:	4b07      	ldr	r3, [pc, #28]	@ (800eb58 <prvResetNextTaskUnblockTime+0x38>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	68db      	ldr	r3, [r3, #12]
 800eb40:	68db      	ldr	r3, [r3, #12]
 800eb42:	607b      	str	r3, [r7, #4]
        xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	685b      	ldr	r3, [r3, #4]
 800eb48:	4a04      	ldr	r2, [pc, #16]	@ (800eb5c <prvResetNextTaskUnblockTime+0x3c>)
 800eb4a:	6013      	str	r3, [r2, #0]
}
 800eb4c:	bf00      	nop
 800eb4e:	370c      	adds	r7, #12
 800eb50:	46bd      	mov	sp, r7
 800eb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb56:	4770      	bx	lr
 800eb58:	20000d74 	.word	0x20000d74
 800eb5c:	20000ddc 	.word	0x20000ddc

0800eb60 <xTaskGetSchedulerState>:
#endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
/*-----------------------------------------------------------*/

#if ((INCLUDE_xTaskGetSchedulerState == 1) || (configUSE_TIMERS == 1))

BaseType_t xTaskGetSchedulerState(void) {
 800eb60:	b480      	push	{r7}
 800eb62:	b083      	sub	sp, #12
 800eb64:	af00      	add	r7, sp, #0
    BaseType_t xReturn;

    if (xSchedulerRunning == pdFALSE) {
 800eb66:	4b0b      	ldr	r3, [pc, #44]	@ (800eb94 <xTaskGetSchedulerState+0x34>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d102      	bne.n	800eb74 <xTaskGetSchedulerState+0x14>
        xReturn = taskSCHEDULER_NOT_STARTED;
 800eb6e:	2301      	movs	r3, #1
 800eb70:	607b      	str	r3, [r7, #4]
 800eb72:	e008      	b.n	800eb86 <xTaskGetSchedulerState+0x26>
    } else {
        if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
 800eb74:	4b08      	ldr	r3, [pc, #32]	@ (800eb98 <xTaskGetSchedulerState+0x38>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d102      	bne.n	800eb82 <xTaskGetSchedulerState+0x22>
            xReturn = taskSCHEDULER_RUNNING;
 800eb7c:	2302      	movs	r3, #2
 800eb7e:	607b      	str	r3, [r7, #4]
 800eb80:	e001      	b.n	800eb86 <xTaskGetSchedulerState+0x26>
        } else {
            xReturn = taskSCHEDULER_SUSPENDED;
 800eb82:	2300      	movs	r3, #0
 800eb84:	607b      	str	r3, [r7, #4]
        }
    }

    return xReturn;
 800eb86:	687b      	ldr	r3, [r7, #4]
}
 800eb88:	4618      	mov	r0, r3
 800eb8a:	370c      	adds	r7, #12
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb92:	4770      	bx	lr
 800eb94:	20000dc8 	.word	0x20000dc8
 800eb98:	20000de4 	.word	0x20000de4

0800eb9c <prvAddCurrentTaskToDelayedList>:
}

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely) {
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b084      	sub	sp, #16
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
 800eba4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800eba6:	4b29      	ldr	r3, [pc, #164]	@ (800ec4c <prvAddCurrentTaskToDelayedList+0xb0>)
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	60fb      	str	r3, [r7, #12]
    }
#endif

    /* Remove the task from the ready list before adding it to the blocked list
    as the same list item is used for both lists. */
    if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t)0) {
 800ebac:	4b28      	ldr	r3, [pc, #160]	@ (800ec50 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	3304      	adds	r3, #4
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f7fe fb8a 	bl	800d2cc <uxListRemove>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d10b      	bne.n	800ebd6 <prvAddCurrentTaskToDelayedList+0x3a>
        /* The current task must be in a ready list, so there is no need to
        check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY(pxCurrentTCB->uxPriority,
 800ebbe:	4b24      	ldr	r3, [pc, #144]	@ (800ec50 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebc4:	2201      	movs	r2, #1
 800ebc6:	fa02 f303 	lsl.w	r3, r2, r3
 800ebca:	43da      	mvns	r2, r3
 800ebcc:	4b21      	ldr	r3, [pc, #132]	@ (800ec54 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	4013      	ands	r3, r2
 800ebd2:	4a20      	ldr	r2, [pc, #128]	@ (800ec54 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ebd4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

#if (INCLUDE_vTaskSuspend == 1)
    {
        if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebdc:	d10a      	bne.n	800ebf4 <prvAddCurrentTaskToDelayedList+0x58>
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d007      	beq.n	800ebf4 <prvAddCurrentTaskToDelayedList+0x58>
            /* Add the task to the suspended task list instead of a delayed task
            list to ensure it is not woken by a timing event.  It will block
            indefinitely. */
            vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
 800ebe4:	4b1a      	ldr	r3, [pc, #104]	@ (800ec50 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	3304      	adds	r3, #4
 800ebea:	4619      	mov	r1, r3
 800ebec:	481a      	ldr	r0, [pc, #104]	@ (800ec58 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ebee:	f7fe fb10 	bl	800d212 <vListInsertEnd>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        (void)xCanBlockIndefinitely;
    }
#endif /* INCLUDE_vTaskSuspend */
}
 800ebf2:	e026      	b.n	800ec42 <prvAddCurrentTaskToDelayedList+0xa6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800ebf4:	68fa      	ldr	r2, [r7, #12]
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	4413      	add	r3, r2
 800ebfa:	60bb      	str	r3, [r7, #8]
            listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem), xTimeToWake);
 800ebfc:	4b14      	ldr	r3, [pc, #80]	@ (800ec50 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	68ba      	ldr	r2, [r7, #8]
 800ec02:	605a      	str	r2, [r3, #4]
            if (xTimeToWake < xConstTickCount) {
 800ec04:	68ba      	ldr	r2, [r7, #8]
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	d209      	bcs.n	800ec20 <prvAddCurrentTaskToDelayedList+0x84>
                vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
 800ec0c:	4b13      	ldr	r3, [pc, #76]	@ (800ec5c <prvAddCurrentTaskToDelayedList+0xc0>)
 800ec0e:	681a      	ldr	r2, [r3, #0]
 800ec10:	4b0f      	ldr	r3, [pc, #60]	@ (800ec50 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	3304      	adds	r3, #4
 800ec16:	4619      	mov	r1, r3
 800ec18:	4610      	mov	r0, r2
 800ec1a:	f7fe fb1e 	bl	800d25a <vListInsert>
}
 800ec1e:	e010      	b.n	800ec42 <prvAddCurrentTaskToDelayedList+0xa6>
                vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
 800ec20:	4b0f      	ldr	r3, [pc, #60]	@ (800ec60 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ec22:	681a      	ldr	r2, [r3, #0]
 800ec24:	4b0a      	ldr	r3, [pc, #40]	@ (800ec50 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	3304      	adds	r3, #4
 800ec2a:	4619      	mov	r1, r3
 800ec2c:	4610      	mov	r0, r2
 800ec2e:	f7fe fb14 	bl	800d25a <vListInsert>
                if (xTimeToWake < xNextTaskUnblockTime) {
 800ec32:	4b0c      	ldr	r3, [pc, #48]	@ (800ec64 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	68ba      	ldr	r2, [r7, #8]
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	d202      	bcs.n	800ec42 <prvAddCurrentTaskToDelayedList+0xa6>
                    xNextTaskUnblockTime = xTimeToWake;
 800ec3c:	4a09      	ldr	r2, [pc, #36]	@ (800ec64 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	6013      	str	r3, [r2, #0]
}
 800ec42:	bf00      	nop
 800ec44:	3710      	adds	r7, #16
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
 800ec4a:	bf00      	nop
 800ec4c:	20000dc0 	.word	0x20000dc0
 800ec50:	20000cbc 	.word	0x20000cbc
 800ec54:	20000dc4 	.word	0x20000dc4
 800ec58:	20000da8 	.word	0x20000da8
 800ec5c:	20000d78 	.word	0x20000d78
 800ec60:	20000d74 	.word	0x20000d74
 800ec64:	20000ddc 	.word	0x20000ddc

0800ec68 <xTimerCreateTimerTask>:
 */
static void prvInitialiseNewTimer(const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                  const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction, Timer_t * pxNewTimer) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask(void) {
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b08a      	sub	sp, #40	@ 0x28
 800ec6c:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdFAIL;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	617b      	str	r3, [r7, #20]

    /* This function is called when the scheduler is started if
    configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
    timer service task has been created/initialised.  If timers have already
    been created then the initialisation will already have been performed. */
    prvCheckForValidListAndQueue();
 800ec72:	f000 fb73 	bl	800f35c <prvCheckForValidListAndQueue>

    if (xTimerQueue != NULL) {
 800ec76:	4b1d      	ldr	r3, [pc, #116]	@ (800ecec <xTimerCreateTimerTask+0x84>)
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d021      	beq.n	800ecc2 <xTimerCreateTimerTask+0x5a>
#if (configSUPPORT_STATIC_ALLOCATION == 1)
        {
            StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	60fb      	str	r3, [r7, #12]
            StackType_t * pxTimerTaskStackBuffer = NULL;
 800ec82:	2300      	movs	r3, #0
 800ec84:	60bb      	str	r3, [r7, #8]
            uint32_t ulTimerTaskStackSize;

            vApplicationGetTimerTaskMemory(&pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize);
 800ec86:	1d3a      	adds	r2, r7, #4
 800ec88:	f107 0108 	add.w	r1, r7, #8
 800ec8c:	f107 030c 	add.w	r3, r7, #12
 800ec90:	4618      	mov	r0, r3
 800ec92:	f7f3 fb2f 	bl	80022f4 <vApplicationGetTimerTaskMemory>
            xTimerTaskHandle = xTaskCreateStatic(prvTimerTask, configTIMER_SERVICE_TASK_NAME, ulTimerTaskStackSize, NULL, ((UBaseType_t)configTIMER_TASK_PRIORITY) | portPRIVILEGE_BIT, pxTimerTaskStackBuffer, pxTimerTaskTCBBuffer);
 800ec96:	6879      	ldr	r1, [r7, #4]
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	68fa      	ldr	r2, [r7, #12]
 800ec9c:	9202      	str	r2, [sp, #8]
 800ec9e:	9301      	str	r3, [sp, #4]
 800eca0:	2303      	movs	r3, #3
 800eca2:	9300      	str	r3, [sp, #0]
 800eca4:	2300      	movs	r3, #0
 800eca6:	460a      	mov	r2, r1
 800eca8:	4911      	ldr	r1, [pc, #68]	@ (800ecf0 <xTimerCreateTimerTask+0x88>)
 800ecaa:	4812      	ldr	r0, [pc, #72]	@ (800ecf4 <xTimerCreateTimerTask+0x8c>)
 800ecac:	f7ff f820 	bl	800dcf0 <xTaskCreateStatic>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	4a11      	ldr	r2, [pc, #68]	@ (800ecf8 <xTimerCreateTimerTask+0x90>)
 800ecb4:	6013      	str	r3, [r2, #0]

            if (xTimerTaskHandle != NULL) {
 800ecb6:	4b10      	ldr	r3, [pc, #64]	@ (800ecf8 <xTimerCreateTimerTask+0x90>)
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d001      	beq.n	800ecc2 <xTimerCreateTimerTask+0x5a>
                xReturn = pdPASS;
 800ecbe:	2301      	movs	r3, #1
 800ecc0:	617b      	str	r3, [r7, #20]
#endif /* configSUPPORT_STATIC_ALLOCATION */
    } else {
        mtCOVERAGE_TEST_MARKER();
    }

    configASSERT(xReturn);
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d10b      	bne.n	800ece0 <xTimerCreateTimerTask+0x78>
    __asm volatile("	mov %0, %1												\n"
 800ecc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eccc:	f383 8811 	msr	BASEPRI, r3
 800ecd0:	f3bf 8f6f 	isb	sy
 800ecd4:	f3bf 8f4f 	dsb	sy
 800ecd8:	613b      	str	r3, [r7, #16]
}
 800ecda:	bf00      	nop
 800ecdc:	bf00      	nop
 800ecde:	e7fd      	b.n	800ecdc <xTimerCreateTimerTask+0x74>
    return xReturn;
 800ece0:	697b      	ldr	r3, [r7, #20]
}
 800ece2:	4618      	mov	r0, r3
 800ece4:	3718      	adds	r7, #24
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}
 800ecea:	bf00      	nop
 800ecec:	20000e18 	.word	0x20000e18
 800ecf0:	08013664 	.word	0x08013664
 800ecf4:	0800ef2d 	.word	0x0800ef2d
 800ecf8:	20000e1c 	.word	0x20000e1c

0800ecfc <xTimerCreate>:
/*-----------------------------------------------------------*/

#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)

TimerHandle_t xTimerCreate(const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                           const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction) {
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b088      	sub	sp, #32
 800ed00:	af02      	add	r7, sp, #8
 800ed02:	60f8      	str	r0, [r7, #12]
 800ed04:	60b9      	str	r1, [r7, #8]
 800ed06:	607a      	str	r2, [r7, #4]
 800ed08:	603b      	str	r3, [r7, #0]
    Timer_t * pxNewTimer;

    pxNewTimer = (Timer_t *)pvPortMalloc(sizeof(Timer_t)); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800ed0a:	2028      	movs	r0, #40	@ 0x28
 800ed0c:	f000 fdfe 	bl	800f90c <pvPortMalloc>
 800ed10:	6178      	str	r0, [r7, #20]

    if (pxNewTimer != NULL) {
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d00d      	beq.n	800ed34 <xTimerCreate+0x38>
        /* Status is thus far zero as the timer is not created statically
        and has not been started.  The auto-reload bit may get set in
        prvInitialiseNewTimer. */
        pxNewTimer->ucStatus = 0x00;
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        prvInitialiseNewTimer(pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer);
 800ed20:	697b      	ldr	r3, [r7, #20]
 800ed22:	9301      	str	r3, [sp, #4]
 800ed24:	6a3b      	ldr	r3, [r7, #32]
 800ed26:	9300      	str	r3, [sp, #0]
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	687a      	ldr	r2, [r7, #4]
 800ed2c:	68b9      	ldr	r1, [r7, #8]
 800ed2e:	68f8      	ldr	r0, [r7, #12]
 800ed30:	f000 f805 	bl	800ed3e <prvInitialiseNewTimer>
    }

    return pxNewTimer;
 800ed34:	697b      	ldr	r3, [r7, #20]
}
 800ed36:	4618      	mov	r0, r3
 800ed38:	3718      	adds	r7, #24
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd80      	pop	{r7, pc}

0800ed3e <prvInitialiseNewTimer>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewTimer(const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                  const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction, Timer_t * pxNewTimer) {
 800ed3e:	b580      	push	{r7, lr}
 800ed40:	b086      	sub	sp, #24
 800ed42:	af00      	add	r7, sp, #0
 800ed44:	60f8      	str	r0, [r7, #12]
 800ed46:	60b9      	str	r1, [r7, #8]
 800ed48:	607a      	str	r2, [r7, #4]
 800ed4a:	603b      	str	r3, [r7, #0]
    /* 0 is not a valid value for xTimerPeriodInTicks. */
    configASSERT((xTimerPeriodInTicks > 0));
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d10b      	bne.n	800ed6a <prvInitialiseNewTimer+0x2c>
    __asm volatile("	mov %0, %1												\n"
 800ed52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed56:	f383 8811 	msr	BASEPRI, r3
 800ed5a:	f3bf 8f6f 	isb	sy
 800ed5e:	f3bf 8f4f 	dsb	sy
 800ed62:	617b      	str	r3, [r7, #20]
}
 800ed64:	bf00      	nop
 800ed66:	bf00      	nop
 800ed68:	e7fd      	b.n	800ed66 <prvInitialiseNewTimer+0x28>

    if (pxNewTimer != NULL) {
 800ed6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d01e      	beq.n	800edae <prvInitialiseNewTimer+0x70>
        /* Ensure the infrastructure used by the timer service task has been
        created/initialised. */
        prvCheckForValidListAndQueue();
 800ed70:	f000 faf4 	bl	800f35c <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
        parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 800ed74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed76:	68fa      	ldr	r2, [r7, #12]
 800ed78:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ed7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed7c:	68ba      	ldr	r2, [r7, #8]
 800ed7e:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 800ed80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed82:	683a      	ldr	r2, [r7, #0]
 800ed84:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ed86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed88:	6a3a      	ldr	r2, [r7, #32]
 800ed8a:	621a      	str	r2, [r3, #32]
        vListInitialiseItem(&(pxNewTimer->xTimerListItem));
 800ed8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed8e:	3304      	adds	r3, #4
 800ed90:	4618      	mov	r0, r3
 800ed92:	f7fe fa31 	bl	800d1f8 <vListInitialiseItem>
        if (uxAutoReload != pdFALSE) {
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d008      	beq.n	800edae <prvInitialiseNewTimer+0x70>
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800ed9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed9e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800eda2:	f043 0304 	orr.w	r3, r3, #4
 800eda6:	b2da      	uxtb	r2, r3
 800eda8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edaa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }
        traceTIMER_CREATE(pxNewTimer);
    }
}
 800edae:	bf00      	nop
 800edb0:	3718      	adds	r7, #24
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}
	...

0800edb8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand(TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait) {
 800edb8:	b580      	push	{r7, lr}
 800edba:	b08a      	sub	sp, #40	@ 0x28
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	60f8      	str	r0, [r7, #12]
 800edc0:	60b9      	str	r1, [r7, #8]
 800edc2:	607a      	str	r2, [r7, #4]
 800edc4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdFAIL;
 800edc6:	2300      	movs	r3, #0
 800edc8:	627b      	str	r3, [r7, #36]	@ 0x24
    DaemonTaskMessage_t xMessage;

    configASSERT(xTimer);
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d10b      	bne.n	800ede8 <xTimerGenericCommand+0x30>
    __asm volatile("	mov %0, %1												\n"
 800edd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edd4:	f383 8811 	msr	BASEPRI, r3
 800edd8:	f3bf 8f6f 	isb	sy
 800eddc:	f3bf 8f4f 	dsb	sy
 800ede0:	623b      	str	r3, [r7, #32]
}
 800ede2:	bf00      	nop
 800ede4:	bf00      	nop
 800ede6:	e7fd      	b.n	800ede4 <xTimerGenericCommand+0x2c>

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if (xTimerQueue != NULL) {
 800ede8:	4b19      	ldr	r3, [pc, #100]	@ (800ee50 <xTimerGenericCommand+0x98>)
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d02a      	beq.n	800ee46 <xTimerGenericCommand+0x8e>
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
 800edf0:	68bb      	ldr	r3, [r7, #8]
 800edf2:	617b      	str	r3, [r7, #20]
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	61bb      	str	r3, [r7, #24]
        xMessage.u.xTimerParameters.pxTimer = xTimer;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	61fb      	str	r3, [r7, #28]

        if (xCommandID < tmrFIRST_FROM_ISR_COMMAND) {
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	2b05      	cmp	r3, #5
 800ee00:	dc18      	bgt.n	800ee34 <xTimerGenericCommand+0x7c>
            if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
 800ee02:	f7ff fead 	bl	800eb60 <xTaskGetSchedulerState>
 800ee06:	4603      	mov	r3, r0
 800ee08:	2b02      	cmp	r3, #2
 800ee0a:	d109      	bne.n	800ee20 <xTimerGenericCommand+0x68>
                xReturn = xQueueSendToBack(xTimerQueue, &xMessage, xTicksToWait);
 800ee0c:	4b10      	ldr	r3, [pc, #64]	@ (800ee50 <xTimerGenericCommand+0x98>)
 800ee0e:	6818      	ldr	r0, [r3, #0]
 800ee10:	f107 0114 	add.w	r1, r7, #20
 800ee14:	2300      	movs	r3, #0
 800ee16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee18:	f7fe fb88 	bl	800d52c <xQueueGenericSend>
 800ee1c:	6278      	str	r0, [r7, #36]	@ 0x24
 800ee1e:	e012      	b.n	800ee46 <xTimerGenericCommand+0x8e>
            } else {
                xReturn = xQueueSendToBack(xTimerQueue, &xMessage, tmrNO_DELAY);
 800ee20:	4b0b      	ldr	r3, [pc, #44]	@ (800ee50 <xTimerGenericCommand+0x98>)
 800ee22:	6818      	ldr	r0, [r3, #0]
 800ee24:	f107 0114 	add.w	r1, r7, #20
 800ee28:	2300      	movs	r3, #0
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	f7fe fb7e 	bl	800d52c <xQueueGenericSend>
 800ee30:	6278      	str	r0, [r7, #36]	@ 0x24
 800ee32:	e008      	b.n	800ee46 <xTimerGenericCommand+0x8e>
            }
        } else {
            xReturn = xQueueSendToBackFromISR(xTimerQueue, &xMessage, pxHigherPriorityTaskWoken);
 800ee34:	4b06      	ldr	r3, [pc, #24]	@ (800ee50 <xTimerGenericCommand+0x98>)
 800ee36:	6818      	ldr	r0, [r3, #0]
 800ee38:	f107 0114 	add.w	r1, r7, #20
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	683a      	ldr	r2, [r7, #0]
 800ee40:	f7fe fc76 	bl	800d730 <xQueueGenericSendFromISR>
 800ee44:	6278      	str	r0, [r7, #36]	@ 0x24
        traceTIMER_COMMAND_SEND(xTimer, xCommandID, xOptionalValue, xReturn);
    } else {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
 800ee46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ee48:	4618      	mov	r0, r3
 800ee4a:	3728      	adds	r7, #40	@ 0x28
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	bd80      	pop	{r7, pc}
 800ee50:	20000e18 	.word	0x20000e18

0800ee54 <xTimerGetPeriod>:
    configASSERT((xTimerTaskHandle != NULL));
    return xTimerTaskHandle;
}
/*-----------------------------------------------------------*/

TickType_t xTimerGetPeriod(TimerHandle_t xTimer) {
 800ee54:	b480      	push	{r7}
 800ee56:	b085      	sub	sp, #20
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
    Timer_t * pxTimer = xTimer;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	60fb      	str	r3, [r7, #12]

    configASSERT(xTimer);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d10b      	bne.n	800ee7e <xTimerGetPeriod+0x2a>
    __asm volatile("	mov %0, %1												\n"
 800ee66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee6a:	f383 8811 	msr	BASEPRI, r3
 800ee6e:	f3bf 8f6f 	isb	sy
 800ee72:	f3bf 8f4f 	dsb	sy
 800ee76:	60bb      	str	r3, [r7, #8]
}
 800ee78:	bf00      	nop
 800ee7a:	bf00      	nop
 800ee7c:	e7fd      	b.n	800ee7a <xTimerGetPeriod+0x26>
    return pxTimer->xTimerPeriodInTicks;
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	699b      	ldr	r3, [r3, #24]
}
 800ee82:	4618      	mov	r0, r3
 800ee84:	3714      	adds	r7, #20
 800ee86:	46bd      	mov	sp, r7
 800ee88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8c:	4770      	bx	lr
	...

0800ee90 <prvProcessExpiredTimer>:
    configASSERT(xTimer);
    return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer(const TickType_t xNextExpireTime, const TickType_t xTimeNow) {
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b088      	sub	sp, #32
 800ee94:	af02      	add	r7, sp, #8
 800ee96:	6078      	str	r0, [r7, #4]
 800ee98:	6039      	str	r1, [r7, #0]
    BaseType_t xResult;
    Timer_t * const pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(
 800ee9a:	4b23      	ldr	r3, [pc, #140]	@ (800ef28 <prvProcessExpiredTimer+0x98>)
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	68db      	ldr	r3, [r3, #12]
 800eea0:	68db      	ldr	r3, [r3, #12]
 800eea2:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    (void)uxListRemove(&(pxTimer->xTimerListItem));
 800eea4:	697b      	ldr	r3, [r7, #20]
 800eea6:	3304      	adds	r3, #4
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f7fe fa0f 	bl	800d2cc <uxListRemove>
    traceTIMER_EXPIRED(pxTimer);

    /* If the timer is an auto-reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if ((pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD) != 0) {
 800eeae:	697b      	ldr	r3, [r7, #20]
 800eeb0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800eeb4:	f003 0304 	and.w	r3, r3, #4
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d023      	beq.n	800ef04 <prvProcessExpiredTimer+0x74>
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if (prvInsertTimerInActiveList(pxTimer, (xNextExpireTime + pxTimer->xTimerPeriodInTicks), xTimeNow, xNextExpireTime) != pdFALSE) {
 800eebc:	697b      	ldr	r3, [r7, #20]
 800eebe:	699a      	ldr	r2, [r3, #24]
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	18d1      	adds	r1, r2, r3
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	683a      	ldr	r2, [r7, #0]
 800eec8:	6978      	ldr	r0, [r7, #20]
 800eeca:	f000 f8d5 	bl	800f078 <prvInsertTimerInActiveList>
 800eece:	4603      	mov	r3, r0
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d020      	beq.n	800ef16 <prvProcessExpiredTimer+0x86>
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
 800eed4:	2300      	movs	r3, #0
 800eed6:	9300      	str	r3, [sp, #0]
 800eed8:	2300      	movs	r3, #0
 800eeda:	687a      	ldr	r2, [r7, #4]
 800eedc:	2100      	movs	r1, #0
 800eede:	6978      	ldr	r0, [r7, #20]
 800eee0:	f7ff ff6a 	bl	800edb8 <xTimerGenericCommand>
 800eee4:	6138      	str	r0, [r7, #16]
            configASSERT(xResult);
 800eee6:	693b      	ldr	r3, [r7, #16]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d114      	bne.n	800ef16 <prvProcessExpiredTimer+0x86>
    __asm volatile("	mov %0, %1												\n"
 800eeec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eef0:	f383 8811 	msr	BASEPRI, r3
 800eef4:	f3bf 8f6f 	isb	sy
 800eef8:	f3bf 8f4f 	dsb	sy
 800eefc:	60fb      	str	r3, [r7, #12]
}
 800eefe:	bf00      	nop
 800ef00:	bf00      	nop
 800ef02:	e7fd      	b.n	800ef00 <prvProcessExpiredTimer+0x70>
            (void)xResult;
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    } else {
        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ef04:	697b      	ldr	r3, [r7, #20]
 800ef06:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ef0a:	f023 0301 	bic.w	r3, r3, #1
 800ef0e:	b2da      	uxtb	r2, r3
 800ef10:	697b      	ldr	r3, [r7, #20]
 800ef12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
 800ef16:	697b      	ldr	r3, [r7, #20]
 800ef18:	6a1b      	ldr	r3, [r3, #32]
 800ef1a:	6978      	ldr	r0, [r7, #20]
 800ef1c:	4798      	blx	r3
}
 800ef1e:	bf00      	nop
 800ef20:	3718      	adds	r7, #24
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}
 800ef26:	bf00      	nop
 800ef28:	20000e10 	.word	0x20000e10

0800ef2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION(prvTimerTask, pvParameters) {
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b084      	sub	sp, #16
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
#endif /* configUSE_DAEMON_TASK_STARTUP_HOOK */

    for (;;) {
        /* Query the timers list to see if it contains any timers, and if so,
        obtain the time at which the next timer will expire. */
        xNextExpireTime = prvGetNextExpireTime(&xListWasEmpty);
 800ef34:	f107 0308 	add.w	r3, r7, #8
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f000 f859 	bl	800eff0 <prvGetNextExpireTime>
 800ef3e:	60f8      	str	r0, [r7, #12]

        /* If a timer has expired, process it.  Otherwise, block this task
        until either a timer does expire, or a command is received. */
        prvProcessTimerOrBlockTask(xNextExpireTime, xListWasEmpty);
 800ef40:	68bb      	ldr	r3, [r7, #8]
 800ef42:	4619      	mov	r1, r3
 800ef44:	68f8      	ldr	r0, [r7, #12]
 800ef46:	f000 f805 	bl	800ef54 <prvProcessTimerOrBlockTask>

        /* Empty the command queue. */
        prvProcessReceivedCommands();
 800ef4a:	f000 f8d7 	bl	800f0fc <prvProcessReceivedCommands>
        xNextExpireTime = prvGetNextExpireTime(&xListWasEmpty);
 800ef4e:	bf00      	nop
 800ef50:	e7f0      	b.n	800ef34 <prvTimerTask+0x8>
	...

0800ef54 <prvProcessTimerOrBlockTask>:
    }
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask(const TickType_t xNextExpireTime, BaseType_t xListWasEmpty) {
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b084      	sub	sp, #16
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
 800ef5c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeNow;
    BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
 800ef5e:	f7ff fa1b 	bl	800e398 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
 800ef62:	f107 0308 	add.w	r3, r7, #8
 800ef66:	4618      	mov	r0, r3
 800ef68:	f000 f866 	bl	800f038 <prvSampleTimeNow>
 800ef6c:	60f8      	str	r0, [r7, #12]
        if (xTimerListsWereSwitched == pdFALSE) {
 800ef6e:	68bb      	ldr	r3, [r7, #8]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d130      	bne.n	800efd6 <prvProcessTimerOrBlockTask+0x82>
            /* The tick count has not overflowed, has the timer expired? */
            if ((xListWasEmpty == pdFALSE) && (xNextExpireTime <= xTimeNow)) {
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d10a      	bne.n	800ef90 <prvProcessTimerOrBlockTask+0x3c>
 800ef7a:	687a      	ldr	r2, [r7, #4]
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	429a      	cmp	r2, r3
 800ef80:	d806      	bhi.n	800ef90 <prvProcessTimerOrBlockTask+0x3c>
                (void)xTaskResumeAll();
 800ef82:	f7ff fa17 	bl	800e3b4 <xTaskResumeAll>
                prvProcessExpiredTimer(xNextExpireTime, xTimeNow);
 800ef86:	68f9      	ldr	r1, [r7, #12]
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f7ff ff81 	bl	800ee90 <prvProcessExpiredTimer>
            }
        } else {
            (void)xTaskResumeAll();
        }
    }
}
 800ef8e:	e024      	b.n	800efda <prvProcessTimerOrBlockTask+0x86>
                if (xListWasEmpty != pdFALSE) {
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d008      	beq.n	800efa8 <prvProcessTimerOrBlockTask+0x54>
                    xListWasEmpty = listLIST_IS_EMPTY(pxOverflowTimerList);
 800ef96:	4b13      	ldr	r3, [pc, #76]	@ (800efe4 <prvProcessTimerOrBlockTask+0x90>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d101      	bne.n	800efa4 <prvProcessTimerOrBlockTask+0x50>
 800efa0:	2301      	movs	r3, #1
 800efa2:	e000      	b.n	800efa6 <prvProcessTimerOrBlockTask+0x52>
 800efa4:	2300      	movs	r3, #0
 800efa6:	603b      	str	r3, [r7, #0]
                vQueueWaitForMessageRestricted(xTimerQueue, (xNextExpireTime - xTimeNow), xListWasEmpty);
 800efa8:	4b0f      	ldr	r3, [pc, #60]	@ (800efe8 <prvProcessTimerOrBlockTask+0x94>)
 800efaa:	6818      	ldr	r0, [r3, #0]
 800efac:	687a      	ldr	r2, [r7, #4]
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	1ad3      	subs	r3, r2, r3
 800efb2:	683a      	ldr	r2, [r7, #0]
 800efb4:	4619      	mov	r1, r3
 800efb6:	f7fe fe67 	bl	800dc88 <vQueueWaitForMessageRestricted>
                if (xTaskResumeAll() == pdFALSE) {
 800efba:	f7ff f9fb 	bl	800e3b4 <xTaskResumeAll>
 800efbe:	4603      	mov	r3, r0
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d10a      	bne.n	800efda <prvProcessTimerOrBlockTask+0x86>
                    portYIELD_WITHIN_API();
 800efc4:	4b09      	ldr	r3, [pc, #36]	@ (800efec <prvProcessTimerOrBlockTask+0x98>)
 800efc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800efca:	601a      	str	r2, [r3, #0]
 800efcc:	f3bf 8f4f 	dsb	sy
 800efd0:	f3bf 8f6f 	isb	sy
}
 800efd4:	e001      	b.n	800efda <prvProcessTimerOrBlockTask+0x86>
            (void)xTaskResumeAll();
 800efd6:	f7ff f9ed 	bl	800e3b4 <xTaskResumeAll>
}
 800efda:	bf00      	nop
 800efdc:	3710      	adds	r7, #16
 800efde:	46bd      	mov	sp, r7
 800efe0:	bd80      	pop	{r7, pc}
 800efe2:	bf00      	nop
 800efe4:	20000e14 	.word	0x20000e14
 800efe8:	20000e18 	.word	0x20000e18
 800efec:	e000ed04 	.word	0xe000ed04

0800eff0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime(BaseType_t * const pxListWasEmpty) {
 800eff0:	b480      	push	{r7}
 800eff2:	b085      	sub	sp, #20
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
 800eff8:	4b0e      	ldr	r3, [pc, #56]	@ (800f034 <prvGetNextExpireTime+0x44>)
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d101      	bne.n	800f006 <prvGetNextExpireTime+0x16>
 800f002:	2201      	movs	r2, #1
 800f004:	e000      	b.n	800f008 <prvGetNextExpireTime+0x18>
 800f006:	2200      	movs	r2, #0
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	601a      	str	r2, [r3, #0]
    if (*pxListWasEmpty == pdFALSE) {
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d105      	bne.n	800f020 <prvGetNextExpireTime+0x30>
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
 800f014:	4b07      	ldr	r3, [pc, #28]	@ (800f034 <prvGetNextExpireTime+0x44>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	68db      	ldr	r3, [r3, #12]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	60fb      	str	r3, [r7, #12]
 800f01e:	e001      	b.n	800f024 <prvGetNextExpireTime+0x34>
    } else {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = (TickType_t)0U;
 800f020:	2300      	movs	r3, #0
 800f022:	60fb      	str	r3, [r7, #12]
    }

    return xNextExpireTime;
 800f024:	68fb      	ldr	r3, [r7, #12]
}
 800f026:	4618      	mov	r0, r3
 800f028:	3714      	adds	r7, #20
 800f02a:	46bd      	mov	sp, r7
 800f02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f030:	4770      	bx	lr
 800f032:	bf00      	nop
 800f034:	20000e10 	.word	0x20000e10

0800f038 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow(BaseType_t * const pxTimerListsWereSwitched) {
 800f038:	b580      	push	{r7, lr}
 800f03a:	b084      	sub	sp, #16
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
    TickType_t xTimeNow;
    PRIVILEGED_DATA static TickType_t xLastTime = (TickType_t)0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
 800f040:	f7ff fa56 	bl	800e4f0 <xTaskGetTickCount>
 800f044:	60f8      	str	r0, [r7, #12]

    if (xTimeNow < xLastTime) {
 800f046:	4b0b      	ldr	r3, [pc, #44]	@ (800f074 <prvSampleTimeNow+0x3c>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	68fa      	ldr	r2, [r7, #12]
 800f04c:	429a      	cmp	r2, r3
 800f04e:	d205      	bcs.n	800f05c <prvSampleTimeNow+0x24>
        prvSwitchTimerLists();
 800f050:	f000 f91e 	bl	800f290 <prvSwitchTimerLists>
        *pxTimerListsWereSwitched = pdTRUE;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2201      	movs	r2, #1
 800f058:	601a      	str	r2, [r3, #0]
 800f05a:	e002      	b.n	800f062 <prvSampleTimeNow+0x2a>
    } else {
        *pxTimerListsWereSwitched = pdFALSE;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2200      	movs	r2, #0
 800f060:	601a      	str	r2, [r3, #0]
    }

    xLastTime = xTimeNow;
 800f062:	4a04      	ldr	r2, [pc, #16]	@ (800f074 <prvSampleTimeNow+0x3c>)
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	6013      	str	r3, [r2, #0]

    return xTimeNow;
 800f068:	68fb      	ldr	r3, [r7, #12]
}
 800f06a:	4618      	mov	r0, r3
 800f06c:	3710      	adds	r7, #16
 800f06e:	46bd      	mov	sp, r7
 800f070:	bd80      	pop	{r7, pc}
 800f072:	bf00      	nop
 800f074:	20000e20 	.word	0x20000e20

0800f078 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList(Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime) {
 800f078:	b580      	push	{r7, lr}
 800f07a:	b086      	sub	sp, #24
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	60f8      	str	r0, [r7, #12]
 800f080:	60b9      	str	r1, [r7, #8]
 800f082:	607a      	str	r2, [r7, #4]
 800f084:	603b      	str	r3, [r7, #0]
    BaseType_t xProcessTimerNow = pdFALSE;
 800f086:	2300      	movs	r3, #0
 800f088:	617b      	str	r3, [r7, #20]

    listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xNextExpiryTime);
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	68ba      	ldr	r2, [r7, #8]
 800f08e:	605a      	str	r2, [r3, #4]
    listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	68fa      	ldr	r2, [r7, #12]
 800f094:	611a      	str	r2, [r3, #16]

    if (xNextExpiryTime <= xTimeNow) {
 800f096:	68ba      	ldr	r2, [r7, #8]
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	429a      	cmp	r2, r3
 800f09c:	d812      	bhi.n	800f0c4 <prvInsertTimerInActiveList+0x4c>
        /* Has the expiry time elapsed between the command to start/reset a
        timer was issued, and the time the command was processed? */
        if (((TickType_t)(xTimeNow - xCommandTime)) >= pxTimer->xTimerPeriodInTicks) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f09e:	687a      	ldr	r2, [r7, #4]
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	1ad2      	subs	r2, r2, r3
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	699b      	ldr	r3, [r3, #24]
 800f0a8:	429a      	cmp	r2, r3
 800f0aa:	d302      	bcc.n	800f0b2 <prvInsertTimerInActiveList+0x3a>
        {
            /* The time between a command being issued and the command being
            processed actually exceeds the timers period.  */
            xProcessTimerNow = pdTRUE;
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	617b      	str	r3, [r7, #20]
 800f0b0:	e01b      	b.n	800f0ea <prvInsertTimerInActiveList+0x72>
        } else {
            vListInsert(pxOverflowTimerList, &(pxTimer->xTimerListItem));
 800f0b2:	4b10      	ldr	r3, [pc, #64]	@ (800f0f4 <prvInsertTimerInActiveList+0x7c>)
 800f0b4:	681a      	ldr	r2, [r3, #0]
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	3304      	adds	r3, #4
 800f0ba:	4619      	mov	r1, r3
 800f0bc:	4610      	mov	r0, r2
 800f0be:	f7fe f8cc 	bl	800d25a <vListInsert>
 800f0c2:	e012      	b.n	800f0ea <prvInsertTimerInActiveList+0x72>
        }
    } else {
        if ((xTimeNow < xCommandTime) && (xNextExpiryTime >= xCommandTime)) {
 800f0c4:	687a      	ldr	r2, [r7, #4]
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	429a      	cmp	r2, r3
 800f0ca:	d206      	bcs.n	800f0da <prvInsertTimerInActiveList+0x62>
 800f0cc:	68ba      	ldr	r2, [r7, #8]
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	429a      	cmp	r2, r3
 800f0d2:	d302      	bcc.n	800f0da <prvInsertTimerInActiveList+0x62>
            /* If, since the command was issued, the tick count has overflowed
            but the expiry time has not, then the timer must have already passed
            its expiry time and should be processed immediately. */
            xProcessTimerNow = pdTRUE;
 800f0d4:	2301      	movs	r3, #1
 800f0d6:	617b      	str	r3, [r7, #20]
 800f0d8:	e007      	b.n	800f0ea <prvInsertTimerInActiveList+0x72>
        } else {
            vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
 800f0da:	4b07      	ldr	r3, [pc, #28]	@ (800f0f8 <prvInsertTimerInActiveList+0x80>)
 800f0dc:	681a      	ldr	r2, [r3, #0]
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	3304      	adds	r3, #4
 800f0e2:	4619      	mov	r1, r3
 800f0e4:	4610      	mov	r0, r2
 800f0e6:	f7fe f8b8 	bl	800d25a <vListInsert>
        }
    }

    return xProcessTimerNow;
 800f0ea:	697b      	ldr	r3, [r7, #20]
}
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	3718      	adds	r7, #24
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	bd80      	pop	{r7, pc}
 800f0f4:	20000e14 	.word	0x20000e14
 800f0f8:	20000e10 	.word	0x20000e10

0800f0fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void prvProcessReceivedCommands(void) {
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b08c      	sub	sp, #48	@ 0x30
 800f100:	af02      	add	r7, sp, #8
    DaemonTaskMessage_t xMessage;
    Timer_t * pxTimer;
    BaseType_t xTimerListsWereSwitched, xResult;
    TickType_t xTimeNow;

    while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY) != pdFAIL) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f102:	e0b2      	b.n	800f26a <prvProcessReceivedCommands+0x16e>
        }
#endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if (xMessage.xMessageID >= (BaseType_t)0) {
 800f104:	68bb      	ldr	r3, [r7, #8]
 800f106:	2b00      	cmp	r3, #0
 800f108:	f2c0 80af 	blt.w	800f26a <prvProcessReceivedCommands+0x16e>
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f10c:	693b      	ldr	r3, [r7, #16]
 800f10e:	627b      	str	r3, [r7, #36]	@ 0x24

            if (listIS_CONTAINED_WITHIN(NULL, &(pxTimer->xTimerListItem)) == pdFALSE) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f112:	695b      	ldr	r3, [r3, #20]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d004      	beq.n	800f122 <prvProcessReceivedCommands+0x26>
            {
                /* The timer is in a list, remove it. */
                (void)uxListRemove(&(pxTimer->xTimerListItem));
 800f118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f11a:	3304      	adds	r3, #4
 800f11c:	4618      	mov	r0, r3
 800f11e:	f7fe f8d5 	bl	800d2cc <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
 800f122:	1d3b      	adds	r3, r7, #4
 800f124:	4618      	mov	r0, r3
 800f126:	f7ff ff87 	bl	800f038 <prvSampleTimeNow>
 800f12a:	6238      	str	r0, [r7, #32]

            switch (xMessage.xMessageID) {
 800f12c:	68bb      	ldr	r3, [r7, #8]
 800f12e:	2b09      	cmp	r3, #9
 800f130:	f200 8098 	bhi.w	800f264 <prvProcessReceivedCommands+0x168>
 800f134:	a201      	add	r2, pc, #4	@ (adr r2, 800f13c <prvProcessReceivedCommands+0x40>)
 800f136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f13a:	bf00      	nop
 800f13c:	0800f165 	.word	0x0800f165
 800f140:	0800f165 	.word	0x0800f165
 800f144:	0800f165 	.word	0x0800f165
 800f148:	0800f1db 	.word	0x0800f1db
 800f14c:	0800f1ef 	.word	0x0800f1ef
 800f150:	0800f23b 	.word	0x0800f23b
 800f154:	0800f165 	.word	0x0800f165
 800f158:	0800f165 	.word	0x0800f165
 800f15c:	0800f1db 	.word	0x0800f1db
 800f160:	0800f1ef 	.word	0x0800f1ef
            case tmrCOMMAND_START_FROM_ISR:
            case tmrCOMMAND_RESET:
            case tmrCOMMAND_RESET_FROM_ISR:
            case tmrCOMMAND_START_DONT_TRACE:
                /* Start or restart a timer. */
                pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f166:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f16a:	f043 0301 	orr.w	r3, r3, #1
 800f16e:	b2da      	uxtb	r2, r3
 800f170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f172:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                if (prvInsertTimerInActiveList(pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue) != pdFALSE) {
 800f176:	68fa      	ldr	r2, [r7, #12]
 800f178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f17a:	699b      	ldr	r3, [r3, #24]
 800f17c:	18d1      	adds	r1, r2, r3
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	6a3a      	ldr	r2, [r7, #32]
 800f182:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f184:	f7ff ff78 	bl	800f078 <prvInsertTimerInActiveList>
 800f188:	4603      	mov	r3, r0
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d06c      	beq.n	800f268 <prvProcessReceivedCommands+0x16c>
                    /* The timer expired before it was added to the active
                    timer list.  Process it now. */
                    pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
 800f18e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f190:	6a1b      	ldr	r3, [r3, #32]
 800f192:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f194:	4798      	blx	r3
                    traceTIMER_EXPIRED(pxTimer);

                    if ((pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD) != 0) {
 800f196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f198:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f19c:	f003 0304 	and.w	r3, r3, #4
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d061      	beq.n	800f268 <prvProcessReceivedCommands+0x16c>
                        xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY);
 800f1a4:	68fa      	ldr	r2, [r7, #12]
 800f1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1a8:	699b      	ldr	r3, [r3, #24]
 800f1aa:	441a      	add	r2, r3
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	9300      	str	r3, [sp, #0]
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	2100      	movs	r1, #0
 800f1b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f1b6:	f7ff fdff 	bl	800edb8 <xTimerGenericCommand>
 800f1ba:	61f8      	str	r0, [r7, #28]
                        configASSERT(xResult);
 800f1bc:	69fb      	ldr	r3, [r7, #28]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d152      	bne.n	800f268 <prvProcessReceivedCommands+0x16c>
    __asm volatile("	mov %0, %1												\n"
 800f1c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1c6:	f383 8811 	msr	BASEPRI, r3
 800f1ca:	f3bf 8f6f 	isb	sy
 800f1ce:	f3bf 8f4f 	dsb	sy
 800f1d2:	61bb      	str	r3, [r7, #24]
}
 800f1d4:	bf00      	nop
 800f1d6:	bf00      	nop
 800f1d8:	e7fd      	b.n	800f1d6 <prvProcessReceivedCommands+0xda>
                break;

            case tmrCOMMAND_STOP:
            case tmrCOMMAND_STOP_FROM_ISR:
                /* The timer has already been removed from the active list. */
                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f1e0:	f023 0301 	bic.w	r3, r3, #1
 800f1e4:	b2da      	uxtb	r2, r3
 800f1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                break;
 800f1ec:	e03d      	b.n	800f26a <prvProcessReceivedCommands+0x16e>

            case tmrCOMMAND_CHANGE_PERIOD:
            case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f1ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f1f4:	f043 0301 	orr.w	r3, r3, #1
 800f1f8:	b2da      	uxtb	r2, r3
 800f1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f200:	68fa      	ldr	r2, [r7, #12]
 800f202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f204:	619a      	str	r2, [r3, #24]
                configASSERT((pxTimer->xTimerPeriodInTicks > 0));
 800f206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f208:	699b      	ldr	r3, [r3, #24]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d10b      	bne.n	800f226 <prvProcessReceivedCommands+0x12a>
    __asm volatile("	mov %0, %1												\n"
 800f20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f212:	f383 8811 	msr	BASEPRI, r3
 800f216:	f3bf 8f6f 	isb	sy
 800f21a:	f3bf 8f4f 	dsb	sy
 800f21e:	617b      	str	r3, [r7, #20]
}
 800f220:	bf00      	nop
 800f222:	bf00      	nop
 800f224:	e7fd      	b.n	800f222 <prvProcessReceivedCommands+0x126>
                be longer or shorter than the old one.  The command time is
                therefore set to the current time, and as the period cannot
                be zero the next expiry time can only be in the future,
                meaning (unlike for the xTimerStart() case above) there is
                no fail case that needs to be handled here. */
                (void)prvInsertTimerInActiveList(pxTimer, (xTimeNow + pxTimer->xTimerPeriodInTicks), xTimeNow, xTimeNow);
 800f226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f228:	699a      	ldr	r2, [r3, #24]
 800f22a:	6a3b      	ldr	r3, [r7, #32]
 800f22c:	18d1      	adds	r1, r2, r3
 800f22e:	6a3b      	ldr	r3, [r7, #32]
 800f230:	6a3a      	ldr	r2, [r7, #32]
 800f232:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f234:	f7ff ff20 	bl	800f078 <prvInsertTimerInActiveList>
                break;
 800f238:	e017      	b.n	800f26a <prvProcessReceivedCommands+0x16e>
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            {
                /* The timer has already been removed from the active list,
                just free up the memory if the memory was dynamically
                allocated. */
                if ((pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED) == (uint8_t)0) {
 800f23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f23c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f240:	f003 0302 	and.w	r3, r3, #2
 800f244:	2b00      	cmp	r3, #0
 800f246:	d103      	bne.n	800f250 <prvProcessReceivedCommands+0x154>
                    vPortFree(pxTimer);
 800f248:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f24a:	f000 fb71 	bl	800f930 <vPortFree>
                no need to free the memory - just mark the timer as
                "not active". */
                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
            }
#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
            break;
 800f24e:	e00c      	b.n	800f26a <prvProcessReceivedCommands+0x16e>
                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f252:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f256:	f023 0301 	bic.w	r3, r3, #1
 800f25a:	b2da      	uxtb	r2, r3
 800f25c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f25e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            break;
 800f262:	e002      	b.n	800f26a <prvProcessReceivedCommands+0x16e>

            default:
                /* Don't expect to get here. */
                break;
 800f264:	bf00      	nop
 800f266:	e000      	b.n	800f26a <prvProcessReceivedCommands+0x16e>
                break;
 800f268:	bf00      	nop
    while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY) != pdFAIL) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f26a:	4b08      	ldr	r3, [pc, #32]	@ (800f28c <prvProcessReceivedCommands+0x190>)
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	f107 0108 	add.w	r1, r7, #8
 800f272:	2200      	movs	r2, #0
 800f274:	4618      	mov	r0, r3
 800f276:	f7fe faf9 	bl	800d86c <xQueueReceive>
 800f27a:	4603      	mov	r3, r0
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	f47f af41 	bne.w	800f104 <prvProcessReceivedCommands+0x8>
            }
        }
    }
}
 800f282:	bf00      	nop
 800f284:	bf00      	nop
 800f286:	3728      	adds	r7, #40	@ 0x28
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}
 800f28c:	20000e18 	.word	0x20000e18

0800f290 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists(void) {
 800f290:	b580      	push	{r7, lr}
 800f292:	b088      	sub	sp, #32
 800f294:	af02      	add	r7, sp, #8

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
 800f296:	e049      	b.n	800f32c <prvSwitchTimerLists+0x9c>
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
 800f298:	4b2e      	ldr	r3, [pc, #184]	@ (800f354 <prvSwitchTimerLists+0xc4>)
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	68db      	ldr	r3, [r3, #12]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	613b      	str	r3, [r7, #16]

        /* Remove the timer from the list. */
        pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(
 800f2a2:	4b2c      	ldr	r3, [pc, #176]	@ (800f354 <prvSwitchTimerLists+0xc4>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	68db      	ldr	r3, [r3, #12]
 800f2a8:	68db      	ldr	r3, [r3, #12]
 800f2aa:	60fb      	str	r3, [r7, #12]
            pxCurrentTimerList); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
        (void)uxListRemove(&(pxTimer->xTimerListItem));
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	3304      	adds	r3, #4
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	f7fe f80b 	bl	800d2cc <uxListRemove>
        traceTIMER_EXPIRED(pxTimer);

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	6a1b      	ldr	r3, [r3, #32]
 800f2ba:	68f8      	ldr	r0, [r7, #12]
 800f2bc:	4798      	blx	r3

        if ((pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD) != 0) {
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f2c4:	f003 0304 	and.w	r3, r3, #4
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d02f      	beq.n	800f32c <prvSwitchTimerLists+0x9c>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = (xNextExpireTime + pxTimer->xTimerPeriodInTicks);
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	699b      	ldr	r3, [r3, #24]
 800f2d0:	693a      	ldr	r2, [r7, #16]
 800f2d2:	4413      	add	r3, r2
 800f2d4:	60bb      	str	r3, [r7, #8]
            if (xReloadTime > xNextExpireTime) {
 800f2d6:	68ba      	ldr	r2, [r7, #8]
 800f2d8:	693b      	ldr	r3, [r7, #16]
 800f2da:	429a      	cmp	r2, r3
 800f2dc:	d90e      	bls.n	800f2fc <prvSwitchTimerLists+0x6c>
                listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xReloadTime);
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	68ba      	ldr	r2, [r7, #8]
 800f2e2:	605a      	str	r2, [r3, #4]
                listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	68fa      	ldr	r2, [r7, #12]
 800f2e8:	611a      	str	r2, [r3, #16]
                vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
 800f2ea:	4b1a      	ldr	r3, [pc, #104]	@ (800f354 <prvSwitchTimerLists+0xc4>)
 800f2ec:	681a      	ldr	r2, [r3, #0]
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	3304      	adds	r3, #4
 800f2f2:	4619      	mov	r1, r3
 800f2f4:	4610      	mov	r0, r2
 800f2f6:	f7fd ffb0 	bl	800d25a <vListInsert>
 800f2fa:	e017      	b.n	800f32c <prvSwitchTimerLists+0x9c>
            } else {
                xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	9300      	str	r3, [sp, #0]
 800f300:	2300      	movs	r3, #0
 800f302:	693a      	ldr	r2, [r7, #16]
 800f304:	2100      	movs	r1, #0
 800f306:	68f8      	ldr	r0, [r7, #12]
 800f308:	f7ff fd56 	bl	800edb8 <xTimerGenericCommand>
 800f30c:	6078      	str	r0, [r7, #4]
                configASSERT(xResult);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d10b      	bne.n	800f32c <prvSwitchTimerLists+0x9c>
    __asm volatile("	mov %0, %1												\n"
 800f314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f318:	f383 8811 	msr	BASEPRI, r3
 800f31c:	f3bf 8f6f 	isb	sy
 800f320:	f3bf 8f4f 	dsb	sy
 800f324:	603b      	str	r3, [r7, #0]
}
 800f326:	bf00      	nop
 800f328:	bf00      	nop
 800f32a:	e7fd      	b.n	800f328 <prvSwitchTimerLists+0x98>
    while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
 800f32c:	4b09      	ldr	r3, [pc, #36]	@ (800f354 <prvSwitchTimerLists+0xc4>)
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d1b0      	bne.n	800f298 <prvSwitchTimerLists+0x8>
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
 800f336:	4b07      	ldr	r3, [pc, #28]	@ (800f354 <prvSwitchTimerLists+0xc4>)
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	617b      	str	r3, [r7, #20]
    pxCurrentTimerList = pxOverflowTimerList;
 800f33c:	4b06      	ldr	r3, [pc, #24]	@ (800f358 <prvSwitchTimerLists+0xc8>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	4a04      	ldr	r2, [pc, #16]	@ (800f354 <prvSwitchTimerLists+0xc4>)
 800f342:	6013      	str	r3, [r2, #0]
    pxOverflowTimerList = pxTemp;
 800f344:	4a04      	ldr	r2, [pc, #16]	@ (800f358 <prvSwitchTimerLists+0xc8>)
 800f346:	697b      	ldr	r3, [r7, #20]
 800f348:	6013      	str	r3, [r2, #0]
}
 800f34a:	bf00      	nop
 800f34c:	3718      	adds	r7, #24
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd80      	pop	{r7, pc}
 800f352:	bf00      	nop
 800f354:	20000e10 	.word	0x20000e10
 800f358:	20000e14 	.word	0x20000e14

0800f35c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue(void) {
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b082      	sub	sp, #8
 800f360:	af02      	add	r7, sp, #8
    /* Check that the list from which active timers are referenced, and the
    queue used to communicate with the timer service, have been
    initialised. */
    taskENTER_CRITICAL();
 800f362:	f000 f9b1 	bl	800f6c8 <vPortEnterCritical>
    {
        if (xTimerQueue == NULL) {
 800f366:	4b15      	ldr	r3, [pc, #84]	@ (800f3bc <prvCheckForValidListAndQueue+0x60>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d120      	bne.n	800f3b0 <prvCheckForValidListAndQueue+0x54>
            vListInitialise(&xActiveTimerList1);
 800f36e:	4814      	ldr	r0, [pc, #80]	@ (800f3c0 <prvCheckForValidListAndQueue+0x64>)
 800f370:	f7fd ff22 	bl	800d1b8 <vListInitialise>
            vListInitialise(&xActiveTimerList2);
 800f374:	4813      	ldr	r0, [pc, #76]	@ (800f3c4 <prvCheckForValidListAndQueue+0x68>)
 800f376:	f7fd ff1f 	bl	800d1b8 <vListInitialise>
            pxCurrentTimerList = &xActiveTimerList1;
 800f37a:	4b13      	ldr	r3, [pc, #76]	@ (800f3c8 <prvCheckForValidListAndQueue+0x6c>)
 800f37c:	4a10      	ldr	r2, [pc, #64]	@ (800f3c0 <prvCheckForValidListAndQueue+0x64>)
 800f37e:	601a      	str	r2, [r3, #0]
            pxOverflowTimerList = &xActiveTimerList2;
 800f380:	4b12      	ldr	r3, [pc, #72]	@ (800f3cc <prvCheckForValidListAndQueue+0x70>)
 800f382:	4a10      	ldr	r2, [pc, #64]	@ (800f3c4 <prvCheckForValidListAndQueue+0x68>)
 800f384:	601a      	str	r2, [r3, #0]
                /* The timer queue is allocated statically in case
                configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                static StaticQueue_t xStaticTimerQueue;                                                                   /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                static uint8_t ucStaticTimerQueueStorage[(size_t)configTIMER_QUEUE_LENGTH * sizeof(DaemonTaskMessage_t)]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                xTimerQueue = xQueueCreateStatic((UBaseType_t)configTIMER_QUEUE_LENGTH, (UBaseType_t)sizeof(DaemonTaskMessage_t), &(ucStaticTimerQueueStorage[0]), &xStaticTimerQueue);
 800f386:	2300      	movs	r3, #0
 800f388:	9300      	str	r3, [sp, #0]
 800f38a:	4b11      	ldr	r3, [pc, #68]	@ (800f3d0 <prvCheckForValidListAndQueue+0x74>)
 800f38c:	4a11      	ldr	r2, [pc, #68]	@ (800f3d4 <prvCheckForValidListAndQueue+0x78>)
 800f38e:	210c      	movs	r1, #12
 800f390:	200a      	movs	r0, #10
 800f392:	f7fe f82f 	bl	800d3f4 <xQueueGenericCreateStatic>
 800f396:	4603      	mov	r3, r0
 800f398:	4a08      	ldr	r2, [pc, #32]	@ (800f3bc <prvCheckForValidListAndQueue+0x60>)
 800f39a:	6013      	str	r3, [r2, #0]
            }
#endif

#if (configQUEUE_REGISTRY_SIZE > 0)
            {
                if (xTimerQueue != NULL) {
 800f39c:	4b07      	ldr	r3, [pc, #28]	@ (800f3bc <prvCheckForValidListAndQueue+0x60>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d005      	beq.n	800f3b0 <prvCheckForValidListAndQueue+0x54>
                    vQueueAddToRegistry(xTimerQueue, "TmrQ");
 800f3a4:	4b05      	ldr	r3, [pc, #20]	@ (800f3bc <prvCheckForValidListAndQueue+0x60>)
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	490b      	ldr	r1, [pc, #44]	@ (800f3d8 <prvCheckForValidListAndQueue+0x7c>)
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	f7fe fc42 	bl	800dc34 <vQueueAddToRegistry>
#endif /* configQUEUE_REGISTRY_SIZE */
        } else {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800f3b0:	f000 f9bc 	bl	800f72c <vPortExitCritical>
}
 800f3b4:	bf00      	nop
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	bd80      	pop	{r7, pc}
 800f3ba:	bf00      	nop
 800f3bc:	20000e18 	.word	0x20000e18
 800f3c0:	20000de8 	.word	0x20000de8
 800f3c4:	20000dfc 	.word	0x20000dfc
 800f3c8:	20000e10 	.word	0x20000e10
 800f3cc:	20000e14 	.word	0x20000e14
 800f3d0:	20000e9c 	.word	0x20000e9c
 800f3d4:	20000e24 	.word	0x20000e24
 800f3d8:	0801366c 	.word	0x0801366c

0800f3dc <pvTimerGetTimerID>:

    return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void * pvTimerGetTimerID(const TimerHandle_t xTimer) {
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b086      	sub	sp, #24
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
    Timer_t * const pxTimer = xTimer;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	617b      	str	r3, [r7, #20]
    void * pvReturn;

    configASSERT(xTimer);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d10b      	bne.n	800f406 <pvTimerGetTimerID+0x2a>
    __asm volatile("	mov %0, %1												\n"
 800f3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3f2:	f383 8811 	msr	BASEPRI, r3
 800f3f6:	f3bf 8f6f 	isb	sy
 800f3fa:	f3bf 8f4f 	dsb	sy
 800f3fe:	60fb      	str	r3, [r7, #12]
}
 800f400:	bf00      	nop
 800f402:	bf00      	nop
 800f404:	e7fd      	b.n	800f402 <pvTimerGetTimerID+0x26>

    taskENTER_CRITICAL();
 800f406:	f000 f95f 	bl	800f6c8 <vPortEnterCritical>
    { pvReturn = pxTimer->pvTimerID; }
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	69db      	ldr	r3, [r3, #28]
 800f40e:	613b      	str	r3, [r7, #16]
    taskEXIT_CRITICAL();
 800f410:	f000 f98c 	bl	800f72c <vPortExitCritical>

    return pvReturn;
 800f414:	693b      	ldr	r3, [r7, #16]
}
 800f416:	4618      	mov	r0, r3
 800f418:	3718      	adds	r7, #24
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bd80      	pop	{r7, pc}

0800f41e <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID(TimerHandle_t xTimer, void * pvNewID) {
 800f41e:	b580      	push	{r7, lr}
 800f420:	b084      	sub	sp, #16
 800f422:	af00      	add	r7, sp, #0
 800f424:	6078      	str	r0, [r7, #4]
 800f426:	6039      	str	r1, [r7, #0]
    Timer_t * const pxTimer = xTimer;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	60fb      	str	r3, [r7, #12]

    configASSERT(xTimer);
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d10b      	bne.n	800f44a <vTimerSetTimerID+0x2c>
    __asm volatile("	mov %0, %1												\n"
 800f432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f436:	f383 8811 	msr	BASEPRI, r3
 800f43a:	f3bf 8f6f 	isb	sy
 800f43e:	f3bf 8f4f 	dsb	sy
 800f442:	60bb      	str	r3, [r7, #8]
}
 800f444:	bf00      	nop
 800f446:	bf00      	nop
 800f448:	e7fd      	b.n	800f446 <vTimerSetTimerID+0x28>

    taskENTER_CRITICAL();
 800f44a:	f000 f93d 	bl	800f6c8 <vPortEnterCritical>
    { pxTimer->pvTimerID = pvNewID; }
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	683a      	ldr	r2, [r7, #0]
 800f452:	61da      	str	r2, [r3, #28]
    taskEXIT_CRITICAL();
 800f454:	f000 f96a 	bl	800f72c <vPortExitCritical>
}
 800f458:	bf00      	nop
 800f45a:	3710      	adds	r7, #16
 800f45c:	46bd      	mov	sp, r7
 800f45e:	bd80      	pop	{r7, pc}

0800f460 <pxPortInitialiseStack>:
/*-----------------------------------------------------------*/

/*
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack(StackType_t * pxTopOfStack, TaskFunction_t pxCode, void * pvParameters) {
 800f460:	b480      	push	{r7}
 800f462:	b085      	sub	sp, #20
 800f464:	af00      	add	r7, sp, #0
 800f466:	60f8      	str	r0, [r7, #12]
 800f468:	60b9      	str	r1, [r7, #8]
 800f46a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
    interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
    of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	3b04      	subs	r3, #4
 800f470:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR; /* xPSR */
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f478:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	3b04      	subs	r3, #4
 800f47e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ((StackType_t)pxCode) & portSTART_ADDRESS_MASK; /* PC */
 800f480:	68bb      	ldr	r3, [r7, #8]
 800f482:	f023 0201 	bic.w	r2, r3, #1
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	3b04      	subs	r3, #4
 800f48e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = (StackType_t)portTASK_RETURN_ADDRESS; /* LR */
 800f490:	4a0c      	ldr	r2, [pc, #48]	@ (800f4c4 <pxPortInitialiseStack+0x64>)
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                         /* R12, R3, R2 and R1. */
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	3b14      	subs	r3, #20
 800f49a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = (StackType_t)pvParameters; /* R0 */
 800f49c:	687a      	ldr	r2, [r7, #4]
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
    own exec return value. */
    pxTopOfStack--;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	3b04      	subs	r3, #4
 800f4a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	f06f 0202 	mvn.w	r2, #2
 800f4ae:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	3b20      	subs	r3, #32
 800f4b4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800f4b6:	68fb      	ldr	r3, [r7, #12]
}
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	3714      	adds	r7, #20
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c2:	4770      	bx	lr
 800f4c4:	0800f4c9 	.word	0x0800f4c9

0800f4c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError(void) {
 800f4c8:	b480      	push	{r7}
 800f4ca:	b085      	sub	sp, #20
 800f4cc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	607b      	str	r3, [r7, #4]
    its caller as there is nothing to return to.  If a task wants to exit it
    should instead call vTaskDelete( NULL ).

    Artificially force an assert() to be triggered if configASSERT() is
    defined, then stop here so application writers can catch the error. */
    configASSERT(uxCriticalNesting == ~0UL);
 800f4d2:	4b13      	ldr	r3, [pc, #76]	@ (800f520 <prvTaskExitError+0x58>)
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4da:	d00b      	beq.n	800f4f4 <prvTaskExitError+0x2c>
    __asm volatile("	mov %0, %1												\n"
 800f4dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4e0:	f383 8811 	msr	BASEPRI, r3
 800f4e4:	f3bf 8f6f 	isb	sy
 800f4e8:	f3bf 8f4f 	dsb	sy
 800f4ec:	60fb      	str	r3, [r7, #12]
}
 800f4ee:	bf00      	nop
 800f4f0:	bf00      	nop
 800f4f2:	e7fd      	b.n	800f4f0 <prvTaskExitError+0x28>
    __asm volatile("	mov %0, %1												\n"
 800f4f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4f8:	f383 8811 	msr	BASEPRI, r3
 800f4fc:	f3bf 8f6f 	isb	sy
 800f500:	f3bf 8f4f 	dsb	sy
 800f504:	60bb      	str	r3, [r7, #8]
}
 800f506:	bf00      	nop
    portDISABLE_INTERRUPTS();
    while (ulDummy == 0) {
 800f508:	bf00      	nop
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d0fc      	beq.n	800f50a <prvTaskExitError+0x42>
        about code appearing after this function is called - making ulDummy
        volatile makes the compiler think the function could return and
        therefore not output an 'unreachable code' warning for code that appears
        after it. */
    }
}
 800f510:	bf00      	nop
 800f512:	bf00      	nop
 800f514:	3714      	adds	r7, #20
 800f516:	46bd      	mov	sp, r7
 800f518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51c:	4770      	bx	lr
 800f51e:	bf00      	nop
 800f520:	200000c4 	.word	0x200000c4
	...

0800f530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler(void) {
    __asm volatile("	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 800f530:	4b07      	ldr	r3, [pc, #28]	@ (800f550 <pxCurrentTCBConst2>)
 800f532:	6819      	ldr	r1, [r3, #0]
 800f534:	6808      	ldr	r0, [r1, #0]
 800f536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f53a:	f380 8809 	msr	PSP, r0
 800f53e:	f3bf 8f6f 	isb	sy
 800f542:	f04f 0000 	mov.w	r0, #0
 800f546:	f380 8811 	msr	BASEPRI, r0
 800f54a:	4770      	bx	lr
 800f54c:	f3af 8000 	nop.w

0800f550 <pxCurrentTCBConst2>:
 800f550:	20000cbc 	.word	0x20000cbc
                   "	msr	basepri, r0					\n"
                   "	bx r14							\n"
                   "									\n"
                   "	.align 4						\n"
                   "pxCurrentTCBConst2: .word pxCurrentTCB				\n");
}
 800f554:	bf00      	nop
 800f556:	bf00      	nop

0800f558 <prvPortStartFirstTask>:
static void prvPortStartFirstTask(void) {
    /* Start the first task.  This also clears the bit that indicates the FPU is
    in use in case the FPU was used before the scheduler was started - which
    would otherwise result in the unnecessary leaving of space in the SVC stack
    for lazy saving of FPU registers. */
    __asm volatile(" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 800f558:	4808      	ldr	r0, [pc, #32]	@ (800f57c <prvPortStartFirstTask+0x24>)
 800f55a:	6800      	ldr	r0, [r0, #0]
 800f55c:	6800      	ldr	r0, [r0, #0]
 800f55e:	f380 8808 	msr	MSP, r0
 800f562:	f04f 0000 	mov.w	r0, #0
 800f566:	f380 8814 	msr	CONTROL, r0
 800f56a:	b662      	cpsie	i
 800f56c:	b661      	cpsie	f
 800f56e:	f3bf 8f4f 	dsb	sy
 800f572:	f3bf 8f6f 	isb	sy
 800f576:	df00      	svc	0
 800f578:	bf00      	nop
                   " cpsie f				\n"
                   " dsb					\n"
                   " isb					\n"
                   " svc 0					\n" /* System call to start first task. */
                   " nop					\n");
}
 800f57a:	bf00      	nop
 800f57c:	e000ed08 	.word	0xe000ed08

0800f580 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler(void) {
 800f580:	b580      	push	{r7, lr}
 800f582:	b086      	sub	sp, #24
 800f584:	af00      	add	r7, sp, #0
    configASSERT(configMAX_SYSCALL_INTERRUPT_PRIORITY);

    /* This port can be used on all revisions of the Cortex-M7 core other than
    the r0p1 parts.  r0p1 parts should use the port from the
    /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
 800f586:	4b47      	ldr	r3, [pc, #284]	@ (800f6a4 <xPortStartScheduler+0x124>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	4a47      	ldr	r2, [pc, #284]	@ (800f6a8 <xPortStartScheduler+0x128>)
 800f58c:	4293      	cmp	r3, r2
 800f58e:	d10b      	bne.n	800f5a8 <xPortStartScheduler+0x28>
    __asm volatile("	mov %0, %1												\n"
 800f590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f594:	f383 8811 	msr	BASEPRI, r3
 800f598:	f3bf 8f6f 	isb	sy
 800f59c:	f3bf 8f4f 	dsb	sy
 800f5a0:	613b      	str	r3, [r7, #16]
}
 800f5a2:	bf00      	nop
 800f5a4:	bf00      	nop
 800f5a6:	e7fd      	b.n	800f5a4 <xPortStartScheduler+0x24>
    configASSERT(portCPUID != portCORTEX_M7_r0p0_ID);
 800f5a8:	4b3e      	ldr	r3, [pc, #248]	@ (800f6a4 <xPortStartScheduler+0x124>)
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	4a3f      	ldr	r2, [pc, #252]	@ (800f6ac <xPortStartScheduler+0x12c>)
 800f5ae:	4293      	cmp	r3, r2
 800f5b0:	d10b      	bne.n	800f5ca <xPortStartScheduler+0x4a>
    __asm volatile("	mov %0, %1												\n"
 800f5b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5b6:	f383 8811 	msr	BASEPRI, r3
 800f5ba:	f3bf 8f6f 	isb	sy
 800f5be:	f3bf 8f4f 	dsb	sy
 800f5c2:	60fb      	str	r3, [r7, #12]
}
 800f5c4:	bf00      	nop
 800f5c6:	bf00      	nop
 800f5c8:	e7fd      	b.n	800f5c6 <xPortStartScheduler+0x46>

#if (configASSERT_DEFINED == 1)
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = (volatile uint8_t * const)(portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER);
 800f5ca:	4b39      	ldr	r3, [pc, #228]	@ (800f6b0 <xPortStartScheduler+0x130>)
 800f5cc:	617b      	str	r3, [r7, #20]
        functions can be called.  ISR safe functions are those that end in
        "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
        ensure interrupt entry is as fast and simple as possible.

        Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	781b      	ldrb	r3, [r3, #0]
 800f5d2:	b2db      	uxtb	r3, r3
 800f5d4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
        possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f5d6:	697b      	ldr	r3, [r7, #20]
 800f5d8:	22ff      	movs	r2, #255	@ 0xff
 800f5da:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f5dc:	697b      	ldr	r3, [r7, #20]
 800f5de:	781b      	ldrb	r3, [r3, #0]
 800f5e0:	b2db      	uxtb	r3, r3
 800f5e2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f5e4:	78fb      	ldrb	r3, [r7, #3]
 800f5e6:	b2db      	uxtb	r3, r3
 800f5e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f5ec:	b2da      	uxtb	r2, r3
 800f5ee:	4b31      	ldr	r3, [pc, #196]	@ (800f6b4 <xPortStartScheduler+0x134>)
 800f5f0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
        of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f5f2:	4b31      	ldr	r3, [pc, #196]	@ (800f6b8 <xPortStartScheduler+0x138>)
 800f5f4:	2207      	movs	r2, #7
 800f5f6:	601a      	str	r2, [r3, #0]
        while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 800f5f8:	e009      	b.n	800f60e <xPortStartScheduler+0x8e>
            ulMaxPRIGROUPValue--;
 800f5fa:	4b2f      	ldr	r3, [pc, #188]	@ (800f6b8 <xPortStartScheduler+0x138>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	3b01      	subs	r3, #1
 800f600:	4a2d      	ldr	r2, [pc, #180]	@ (800f6b8 <xPortStartScheduler+0x138>)
 800f602:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= (uint8_t)0x01;
 800f604:	78fb      	ldrb	r3, [r7, #3]
 800f606:	b2db      	uxtb	r3, r3
 800f608:	005b      	lsls	r3, r3, #1
 800f60a:	b2db      	uxtb	r3, r3
 800f60c:	70fb      	strb	r3, [r7, #3]
        while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 800f60e:	78fb      	ldrb	r3, [r7, #3]
 800f610:	b2db      	uxtb	r3, r3
 800f612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f616:	2b80      	cmp	r3, #128	@ 0x80
 800f618:	d0ef      	beq.n	800f5fa <xPortStartScheduler+0x7a>
#ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
            priority bits matches the number of priority bits actually queried
            from the hardware. */
            configASSERT((portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue) == configPRIO_BITS);
 800f61a:	4b27      	ldr	r3, [pc, #156]	@ (800f6b8 <xPortStartScheduler+0x138>)
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	f1c3 0307 	rsb	r3, r3, #7
 800f622:	2b04      	cmp	r3, #4
 800f624:	d00b      	beq.n	800f63e <xPortStartScheduler+0xbe>
    __asm volatile("	mov %0, %1												\n"
 800f626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f62a:	f383 8811 	msr	BASEPRI, r3
 800f62e:	f3bf 8f6f 	isb	sy
 800f632:	f3bf 8f4f 	dsb	sy
 800f636:	60bb      	str	r3, [r7, #8]
}
 800f638:	bf00      	nop
 800f63a:	bf00      	nop
 800f63c:	e7fd      	b.n	800f63a <xPortStartScheduler+0xba>
        }
#endif

        /* Shift the priority group value back to its position within the AIRCR
        register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f63e:	4b1e      	ldr	r3, [pc, #120]	@ (800f6b8 <xPortStartScheduler+0x138>)
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	021b      	lsls	r3, r3, #8
 800f644:	4a1c      	ldr	r2, [pc, #112]	@ (800f6b8 <xPortStartScheduler+0x138>)
 800f646:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f648:	4b1b      	ldr	r3, [pc, #108]	@ (800f6b8 <xPortStartScheduler+0x138>)
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f650:	4a19      	ldr	r2, [pc, #100]	@ (800f6b8 <xPortStartScheduler+0x138>)
 800f652:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
        value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	b2da      	uxtb	r2, r3
 800f658:	697b      	ldr	r3, [r7, #20]
 800f65a:	701a      	strb	r2, [r3, #0]
    }
#endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f65c:	4b17      	ldr	r3, [pc, #92]	@ (800f6bc <xPortStartScheduler+0x13c>)
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	4a16      	ldr	r2, [pc, #88]	@ (800f6bc <xPortStartScheduler+0x13c>)
 800f662:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f666:	6013      	str	r3, [r2, #0]
    portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f668:	4b14      	ldr	r3, [pc, #80]	@ (800f6bc <xPortStartScheduler+0x13c>)
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	4a13      	ldr	r2, [pc, #76]	@ (800f6bc <xPortStartScheduler+0x13c>)
 800f66e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f672:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
    here already. */
    vPortSetupTimerInterrupt();
 800f674:	f000 f8da 	bl	800f82c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800f678:	4b11      	ldr	r3, [pc, #68]	@ (800f6c0 <xPortStartScheduler+0x140>)
 800f67a:	2200      	movs	r2, #0
 800f67c:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800f67e:	f000 f8f9 	bl	800f874 <vPortEnableVFP>

    /* Lazy save always. */
    *(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
 800f682:	4b10      	ldr	r3, [pc, #64]	@ (800f6c4 <xPortStartScheduler+0x144>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	4a0f      	ldr	r2, [pc, #60]	@ (800f6c4 <xPortStartScheduler+0x144>)
 800f688:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f68c:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800f68e:	f7ff ff63 	bl	800f558 <prvPortStartFirstTask>
    exit error function to prevent compiler warnings about a static function
    not being called in the case that the application writer overrides this
    functionality by defining configTASK_RETURN_ADDRESS.  Call
    vTaskSwitchContext() so link time optimisation does not remove the
    symbol. */
    vTaskSwitchContext();
 800f692:	f7fe fff7 	bl	800e684 <vTaskSwitchContext>
    prvTaskExitError();
 800f696:	f7ff ff17 	bl	800f4c8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800f69a:	2300      	movs	r3, #0
}
 800f69c:	4618      	mov	r0, r3
 800f69e:	3718      	adds	r7, #24
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}
 800f6a4:	e000ed00 	.word	0xe000ed00
 800f6a8:	410fc271 	.word	0x410fc271
 800f6ac:	410fc270 	.word	0x410fc270
 800f6b0:	e000e400 	.word	0xe000e400
 800f6b4:	20000ee4 	.word	0x20000ee4
 800f6b8:	20000ee8 	.word	0x20000ee8
 800f6bc:	e000ed20 	.word	0xe000ed20
 800f6c0:	200000c4 	.word	0x200000c4
 800f6c4:	e000ef34 	.word	0xe000ef34

0800f6c8 <vPortEnterCritical>:
    Artificially force an assert. */
    configASSERT(uxCriticalNesting == 1000UL);
}
/*-----------------------------------------------------------*/

void vPortEnterCritical(void) {
 800f6c8:	b480      	push	{r7}
 800f6ca:	b083      	sub	sp, #12
 800f6cc:	af00      	add	r7, sp, #0
    __asm volatile("	mov %0, %1												\n"
 800f6ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6d2:	f383 8811 	msr	BASEPRI, r3
 800f6d6:	f3bf 8f6f 	isb	sy
 800f6da:	f3bf 8f4f 	dsb	sy
 800f6de:	607b      	str	r3, [r7, #4]
}
 800f6e0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800f6e2:	4b10      	ldr	r3, [pc, #64]	@ (800f724 <vPortEnterCritical+0x5c>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	3301      	adds	r3, #1
 800f6e8:	4a0e      	ldr	r2, [pc, #56]	@ (800f724 <vPortEnterCritical+0x5c>)
 800f6ea:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
    assert() if it is being called from an interrupt context.  Only API
    functions that end in "FromISR" can be used in an interrupt.  Only assert if
    the critical nesting count is 1 to protect against recursive calls if the
    assert function also uses a critical section. */
    if (uxCriticalNesting == 1) {
 800f6ec:	4b0d      	ldr	r3, [pc, #52]	@ (800f724 <vPortEnterCritical+0x5c>)
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	2b01      	cmp	r3, #1
 800f6f2:	d110      	bne.n	800f716 <vPortEnterCritical+0x4e>
        configASSERT((portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK) == 0);
 800f6f4:	4b0c      	ldr	r3, [pc, #48]	@ (800f728 <vPortEnterCritical+0x60>)
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	b2db      	uxtb	r3, r3
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d00b      	beq.n	800f716 <vPortEnterCritical+0x4e>
    __asm volatile("	mov %0, %1												\n"
 800f6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f702:	f383 8811 	msr	BASEPRI, r3
 800f706:	f3bf 8f6f 	isb	sy
 800f70a:	f3bf 8f4f 	dsb	sy
 800f70e:	603b      	str	r3, [r7, #0]
}
 800f710:	bf00      	nop
 800f712:	bf00      	nop
 800f714:	e7fd      	b.n	800f712 <vPortEnterCritical+0x4a>
    }
}
 800f716:	bf00      	nop
 800f718:	370c      	adds	r7, #12
 800f71a:	46bd      	mov	sp, r7
 800f71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f720:	4770      	bx	lr
 800f722:	bf00      	nop
 800f724:	200000c4 	.word	0x200000c4
 800f728:	e000ed04 	.word	0xe000ed04

0800f72c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical(void) {
 800f72c:	b480      	push	{r7}
 800f72e:	b083      	sub	sp, #12
 800f730:	af00      	add	r7, sp, #0
    configASSERT(uxCriticalNesting);
 800f732:	4b12      	ldr	r3, [pc, #72]	@ (800f77c <vPortExitCritical+0x50>)
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d10b      	bne.n	800f752 <vPortExitCritical+0x26>
    __asm volatile("	mov %0, %1												\n"
 800f73a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f73e:	f383 8811 	msr	BASEPRI, r3
 800f742:	f3bf 8f6f 	isb	sy
 800f746:	f3bf 8f4f 	dsb	sy
 800f74a:	607b      	str	r3, [r7, #4]
}
 800f74c:	bf00      	nop
 800f74e:	bf00      	nop
 800f750:	e7fd      	b.n	800f74e <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800f752:	4b0a      	ldr	r3, [pc, #40]	@ (800f77c <vPortExitCritical+0x50>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	3b01      	subs	r3, #1
 800f758:	4a08      	ldr	r2, [pc, #32]	@ (800f77c <vPortExitCritical+0x50>)
 800f75a:	6013      	str	r3, [r2, #0]
    if (uxCriticalNesting == 0) {
 800f75c:	4b07      	ldr	r3, [pc, #28]	@ (800f77c <vPortExitCritical+0x50>)
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d105      	bne.n	800f770 <vPortExitCritical+0x44>
 800f764:	2300      	movs	r3, #0
 800f766:	603b      	str	r3, [r7, #0]
    __asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	f383 8811 	msr	BASEPRI, r3
}
 800f76e:	bf00      	nop
        portENABLE_INTERRUPTS();
    }
}
 800f770:	bf00      	nop
 800f772:	370c      	adds	r7, #12
 800f774:	46bd      	mov	sp, r7
 800f776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77a:	4770      	bx	lr
 800f77c:	200000c4 	.word	0x200000c4

0800f780 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void xPortPendSVHandler(void) {
    /* This is a naked function. */

    __asm volatile("	mrs r0, psp							\n"
 800f780:	f3ef 8009 	mrs	r0, PSP
 800f784:	f3bf 8f6f 	isb	sy
 800f788:	4b15      	ldr	r3, [pc, #84]	@ (800f7e0 <pxCurrentTCBConst>)
 800f78a:	681a      	ldr	r2, [r3, #0]
 800f78c:	f01e 0f10 	tst.w	lr, #16
 800f790:	bf08      	it	eq
 800f792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f79a:	6010      	str	r0, [r2, #0]
 800f79c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f7a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f7a4:	f380 8811 	msr	BASEPRI, r0
 800f7a8:	f3bf 8f4f 	dsb	sy
 800f7ac:	f3bf 8f6f 	isb	sy
 800f7b0:	f7fe ff68 	bl	800e684 <vTaskSwitchContext>
 800f7b4:	f04f 0000 	mov.w	r0, #0
 800f7b8:	f380 8811 	msr	BASEPRI, r0
 800f7bc:	bc09      	pop	{r0, r3}
 800f7be:	6819      	ldr	r1, [r3, #0]
 800f7c0:	6808      	ldr	r0, [r1, #0]
 800f7c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7c6:	f01e 0f10 	tst.w	lr, #16
 800f7ca:	bf08      	it	eq
 800f7cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f7d0:	f380 8809 	msr	PSP, r0
 800f7d4:	f3bf 8f6f 	isb	sy
 800f7d8:	4770      	bx	lr
 800f7da:	bf00      	nop
 800f7dc:	f3af 8000 	nop.w

0800f7e0 <pxCurrentTCBConst>:
 800f7e0:	20000cbc 	.word	0x20000cbc
                   "										\n"
                   "	bx r14								\n"
                   "										\n"
                   "	.align 4							\n"
                   "pxCurrentTCBConst: .word pxCurrentTCB	\n" ::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY));
}
 800f7e4:	bf00      	nop
 800f7e6:	bf00      	nop

0800f7e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler(void) {
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b082      	sub	sp, #8
 800f7ec:	af00      	add	r7, sp, #0
    __asm volatile("	mov %0, %1												\n"
 800f7ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7f2:	f383 8811 	msr	BASEPRI, r3
 800f7f6:	f3bf 8f6f 	isb	sy
 800f7fa:	f3bf 8f4f 	dsb	sy
 800f7fe:	607b      	str	r3, [r7, #4]
}
 800f800:	bf00      	nop
    save and then restore the interrupt mask value as its value is already
    known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if (xTaskIncrementTick() != pdFALSE) {
 800f802:	f7fe fe85 	bl	800e510 <xTaskIncrementTick>
 800f806:	4603      	mov	r3, r0
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d003      	beq.n	800f814 <xPortSysTickHandler+0x2c>
            /* A context switch is required.  Context switching is performed in
            the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f80c:	4b06      	ldr	r3, [pc, #24]	@ (800f828 <xPortSysTickHandler+0x40>)
 800f80e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f812:	601a      	str	r2, [r3, #0]
 800f814:	2300      	movs	r3, #0
 800f816:	603b      	str	r3, [r7, #0]
    __asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
 800f818:	683b      	ldr	r3, [r7, #0]
 800f81a:	f383 8811 	msr	BASEPRI, r3
}
 800f81e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800f820:	bf00      	nop
 800f822:	3708      	adds	r7, #8
 800f824:	46bd      	mov	sp, r7
 800f826:	bd80      	pop	{r7, pc}
 800f828:	e000ed04 	.word	0xe000ed04

0800f82c <vPortSetupTimerInterrupt>:

/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__((weak)) void vPortSetupTimerInterrupt(void) {
 800f82c:	b480      	push	{r7}
 800f82e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / (configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ);
    }
#endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f830:	4b0b      	ldr	r3, [pc, #44]	@ (800f860 <vPortSetupTimerInterrupt+0x34>)
 800f832:	2200      	movs	r2, #0
 800f834:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f836:	4b0b      	ldr	r3, [pc, #44]	@ (800f864 <vPortSetupTimerInterrupt+0x38>)
 800f838:	2200      	movs	r2, #0
 800f83a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 800f83c:	4b0a      	ldr	r3, [pc, #40]	@ (800f868 <vPortSetupTimerInterrupt+0x3c>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	4a0a      	ldr	r2, [pc, #40]	@ (800f86c <vPortSetupTimerInterrupt+0x40>)
 800f842:	fba2 2303 	umull	r2, r3, r2, r3
 800f846:	0b5b      	lsrs	r3, r3, #13
 800f848:	4a09      	ldr	r2, [pc, #36]	@ (800f870 <vPortSetupTimerInterrupt+0x44>)
 800f84a:	3b01      	subs	r3, #1
 800f84c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = (portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT);
 800f84e:	4b04      	ldr	r3, [pc, #16]	@ (800f860 <vPortSetupTimerInterrupt+0x34>)
 800f850:	2207      	movs	r2, #7
 800f852:	601a      	str	r2, [r3, #0]
}
 800f854:	bf00      	nop
 800f856:	46bd      	mov	sp, r7
 800f858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85c:	4770      	bx	lr
 800f85e:	bf00      	nop
 800f860:	e000e010 	.word	0xe000e010
 800f864:	e000e018 	.word	0xe000e018
 800f868:	2000000c 	.word	0x2000000c
 800f86c:	d1b71759 	.word	0xd1b71759
 800f870:	e000e014 	.word	0xe000e014

0800f874 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP(void) {
    __asm volatile("	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
 800f874:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f884 <vPortEnableVFP+0x10>
 800f878:	6801      	ldr	r1, [r0, #0]
 800f87a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f87e:	6001      	str	r1, [r0, #0]
 800f880:	4770      	bx	lr
                   "	ldr r1, [r0]				\n"
                   "								\n"
                   "	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
                   "	str r1, [r0]				\n"
                   "	bx r14						");
}
 800f882:	bf00      	nop
 800f884:	e000ed88 	.word	0xe000ed88

0800f888 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if (configASSERT_DEFINED == 1)

void vPortValidateInterruptPriority(void) {
 800f888:	b480      	push	{r7}
 800f88a:	b085      	sub	sp, #20
 800f88c:	af00      	add	r7, sp, #0
    uint32_t ulCurrentInterrupt;
    uint8_t ucCurrentPriority;

    /* Obtain the number of the currently executing interrupt. */
    __asm volatile("mrs %0, ipsr" : "=r"(ulCurrentInterrupt)::"memory");
 800f88e:	f3ef 8305 	mrs	r3, IPSR
 800f892:	60fb      	str	r3, [r7, #12]

    /* Is the interrupt number a user defined interrupt? */
    if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	2b0f      	cmp	r3, #15
 800f898:	d915      	bls.n	800f8c6 <vPortValidateInterruptPriority+0x3e>
        /* Look up the interrupt's priority. */
        ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
 800f89a:	4a18      	ldr	r2, [pc, #96]	@ (800f8fc <vPortValidateInterruptPriority+0x74>)
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	4413      	add	r3, r2
 800f8a0:	781b      	ldrb	r3, [r3, #0]
 800f8a2:	72fb      	strb	r3, [r7, #11]
        interrupt entry is as fast and simple as possible.

        The following links provide detailed information:
        http://www.freertos.org/RTOS-Cortex-M3-M4.html
        http://www.freertos.org/FAQHelp.html */
        configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
 800f8a4:	4b16      	ldr	r3, [pc, #88]	@ (800f900 <vPortValidateInterruptPriority+0x78>)
 800f8a6:	781b      	ldrb	r3, [r3, #0]
 800f8a8:	7afa      	ldrb	r2, [r7, #11]
 800f8aa:	429a      	cmp	r2, r3
 800f8ac:	d20b      	bcs.n	800f8c6 <vPortValidateInterruptPriority+0x3e>
    __asm volatile("	mov %0, %1												\n"
 800f8ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8b2:	f383 8811 	msr	BASEPRI, r3
 800f8b6:	f3bf 8f6f 	isb	sy
 800f8ba:	f3bf 8f4f 	dsb	sy
 800f8be:	607b      	str	r3, [r7, #4]
}
 800f8c0:	bf00      	nop
 800f8c2:	bf00      	nop
 800f8c4:	e7fd      	b.n	800f8c2 <vPortValidateInterruptPriority+0x3a>
    configuration then the correct setting can be achieved on all Cortex-M
    devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
    scheduler.  Note however that some vendor specific peripheral libraries
    assume a non-zero priority group setting, in which cases using a value
    of zero will result in unpredictable behaviour. */
    configASSERT((portAIRCR_REG & portPRIORITY_GROUP_MASK) <= ulMaxPRIGROUPValue);
 800f8c6:	4b0f      	ldr	r3, [pc, #60]	@ (800f904 <vPortValidateInterruptPriority+0x7c>)
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f8ce:	4b0e      	ldr	r3, [pc, #56]	@ (800f908 <vPortValidateInterruptPriority+0x80>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	429a      	cmp	r2, r3
 800f8d4:	d90b      	bls.n	800f8ee <vPortValidateInterruptPriority+0x66>
    __asm volatile("	mov %0, %1												\n"
 800f8d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8da:	f383 8811 	msr	BASEPRI, r3
 800f8de:	f3bf 8f6f 	isb	sy
 800f8e2:	f3bf 8f4f 	dsb	sy
 800f8e6:	603b      	str	r3, [r7, #0]
}
 800f8e8:	bf00      	nop
 800f8ea:	bf00      	nop
 800f8ec:	e7fd      	b.n	800f8ea <vPortValidateInterruptPriority+0x62>
}
 800f8ee:	bf00      	nop
 800f8f0:	3714      	adds	r7, #20
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f8:	4770      	bx	lr
 800f8fa:	bf00      	nop
 800f8fc:	e000e3f0 	.word	0xe000e3f0
 800f900:	20000ee4 	.word	0x20000ee4
 800f904:	e000ed0c 	.word	0xe000ed0c
 800f908:	20000ee8 	.word	0x20000ee8

0800f90c <pvPortMalloc>:
#error This file must not be used if configSUPPORT_DYNAMIC_ALLOCATION is 0
#endif

/*-----------------------------------------------------------*/

void * pvPortMalloc(size_t xWantedSize) {
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b084      	sub	sp, #16
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
    void * pvReturn;

    vTaskSuspendAll();
 800f914:	f7fe fd40 	bl	800e398 <vTaskSuspendAll>
    {
        pvReturn = malloc(xWantedSize);
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f000 fd2b 	bl	8010374 <malloc>
 800f91e:	4603      	mov	r3, r0
 800f920:	60fb      	str	r3, [r7, #12]
        traceMALLOC(pvReturn, xWantedSize);
    }
    (void)xTaskResumeAll();
 800f922:	f7fe fd47 	bl	800e3b4 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
#endif

    return pvReturn;
 800f926:	68fb      	ldr	r3, [r7, #12]
}
 800f928:	4618      	mov	r0, r3
 800f92a:	3710      	adds	r7, #16
 800f92c:	46bd      	mov	sp, r7
 800f92e:	bd80      	pop	{r7, pc}

0800f930 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree(void * pv) {
 800f930:	b580      	push	{r7, lr}
 800f932:	b082      	sub	sp, #8
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
    if (pv) {
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d006      	beq.n	800f94c <vPortFree+0x1c>
        vTaskSuspendAll();
 800f93e:	f7fe fd2b 	bl	800e398 <vTaskSuspendAll>
        {
            free(pv);
 800f942:	6878      	ldr	r0, [r7, #4]
 800f944:	f000 fd1e 	bl	8010384 <free>
            traceFREE(pv, 0);
        }
        (void)xTaskResumeAll();
 800f948:	f7fe fd34 	bl	800e3b4 <xTaskResumeAll>
    }
}
 800f94c:	bf00      	nop
 800f94e:	3708      	adds	r7, #8
 800f950:	46bd      	mov	sp, r7
 800f952:	bd80      	pop	{r7, pc}

0800f954 <MX_USB_DEVICE_Init>:

/**
 * Init USB device Library, add supported class and start the library
 * @retval None
 */
void MX_USB_DEVICE_Init(void) {
 800f954:	b580      	push	{r7, lr}
 800f956:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

    /* USER CODE END USB_DEVICE_Init_PreTreatment */

    /* Init Device Library, add supported class and start the library. */
    if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 800f958:	2200      	movs	r2, #0
 800f95a:	4912      	ldr	r1, [pc, #72]	@ (800f9a4 <MX_USB_DEVICE_Init+0x50>)
 800f95c:	4812      	ldr	r0, [pc, #72]	@ (800f9a8 <MX_USB_DEVICE_Init+0x54>)
 800f95e:	f7fc f8b9 	bl	800bad4 <USBD_Init>
 800f962:	4603      	mov	r3, r0
 800f964:	2b00      	cmp	r3, #0
 800f966:	d001      	beq.n	800f96c <MX_USB_DEVICE_Init+0x18>
        Error_Handler();
 800f968:	f7f2 ff59 	bl	800281e <Error_Handler>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800f96c:	490f      	ldr	r1, [pc, #60]	@ (800f9ac <MX_USB_DEVICE_Init+0x58>)
 800f96e:	480e      	ldr	r0, [pc, #56]	@ (800f9a8 <MX_USB_DEVICE_Init+0x54>)
 800f970:	f7fc f8e0 	bl	800bb34 <USBD_RegisterClass>
 800f974:	4603      	mov	r3, r0
 800f976:	2b00      	cmp	r3, #0
 800f978:	d001      	beq.n	800f97e <MX_USB_DEVICE_Init+0x2a>
        Error_Handler();
 800f97a:	f7f2 ff50 	bl	800281e <Error_Handler>
    }
    if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800f97e:	490c      	ldr	r1, [pc, #48]	@ (800f9b0 <MX_USB_DEVICE_Init+0x5c>)
 800f980:	4809      	ldr	r0, [pc, #36]	@ (800f9a8 <MX_USB_DEVICE_Init+0x54>)
 800f982:	f7fb ffd1 	bl	800b928 <USBD_CDC_RegisterInterface>
 800f986:	4603      	mov	r3, r0
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d001      	beq.n	800f990 <MX_USB_DEVICE_Init+0x3c>
        Error_Handler();
 800f98c:	f7f2 ff47 	bl	800281e <Error_Handler>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800f990:	4805      	ldr	r0, [pc, #20]	@ (800f9a8 <MX_USB_DEVICE_Init+0x54>)
 800f992:	f7fc f905 	bl	800bba0 <USBD_Start>
 800f996:	4603      	mov	r3, r0
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d001      	beq.n	800f9a0 <MX_USB_DEVICE_Init+0x4c>
        Error_Handler();
 800f99c:	f7f2 ff3f 	bl	800281e <Error_Handler>
    }

    /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

    /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f9a0:	bf00      	nop
 800f9a2:	bd80      	pop	{r7, pc}
 800f9a4:	200000dc 	.word	0x200000dc
 800f9a8:	20000eec 	.word	0x20000eec
 800f9ac:	20000044 	.word	0x20000044
 800f9b0:	200000c8 	.word	0x200000c8

0800f9b4 <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	4905      	ldr	r1, [pc, #20]	@ (800f9d0 <CDC_Init_FS+0x1c>)
 800f9bc:	4805      	ldr	r0, [pc, #20]	@ (800f9d4 <CDC_Init_FS+0x20>)
 800f9be:	f7fb ffcd 	bl	800b95c <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f9c2:	4905      	ldr	r1, [pc, #20]	@ (800f9d8 <CDC_Init_FS+0x24>)
 800f9c4:	4803      	ldr	r0, [pc, #12]	@ (800f9d4 <CDC_Init_FS+0x20>)
 800f9c6:	f7fb ffeb 	bl	800b9a0 <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 800f9ca:	2300      	movs	r3, #0
    /* USER CODE END 3 */
}
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	bd80      	pop	{r7, pc}
 800f9d0:	200012c8 	.word	0x200012c8
 800f9d4:	20000eec 	.word	0x20000eec
 800f9d8:	200011c8 	.word	0x200011c8

0800f9dc <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 800f9dc:	b480      	push	{r7}
 800f9de:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 4 */
    return (USBD_OK);
 800f9e0:	2300      	movs	r3, #0
    /* USER CODE END 4 */
}
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ea:	4770      	bx	lr

0800f9ec <CDC_Control_FS>:
 * @param  cmd: Command code
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t * pbuf, uint16_t length) {
 800f9ec:	b480      	push	{r7}
 800f9ee:	b083      	sub	sp, #12
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	6039      	str	r1, [r7, #0]
 800f9f6:	71fb      	strb	r3, [r7, #7]
 800f9f8:	4613      	mov	r3, r2
 800f9fa:	80bb      	strh	r3, [r7, #4]
    /* USER CODE BEGIN 5 */
    switch (cmd) {
 800f9fc:	79fb      	ldrb	r3, [r7, #7]
 800f9fe:	2b23      	cmp	r3, #35	@ 0x23
 800fa00:	d84a      	bhi.n	800fa98 <CDC_Control_FS+0xac>
 800fa02:	a201      	add	r2, pc, #4	@ (adr r2, 800fa08 <CDC_Control_FS+0x1c>)
 800fa04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa08:	0800fa99 	.word	0x0800fa99
 800fa0c:	0800fa99 	.word	0x0800fa99
 800fa10:	0800fa99 	.word	0x0800fa99
 800fa14:	0800fa99 	.word	0x0800fa99
 800fa18:	0800fa99 	.word	0x0800fa99
 800fa1c:	0800fa99 	.word	0x0800fa99
 800fa20:	0800fa99 	.word	0x0800fa99
 800fa24:	0800fa99 	.word	0x0800fa99
 800fa28:	0800fa99 	.word	0x0800fa99
 800fa2c:	0800fa99 	.word	0x0800fa99
 800fa30:	0800fa99 	.word	0x0800fa99
 800fa34:	0800fa99 	.word	0x0800fa99
 800fa38:	0800fa99 	.word	0x0800fa99
 800fa3c:	0800fa99 	.word	0x0800fa99
 800fa40:	0800fa99 	.word	0x0800fa99
 800fa44:	0800fa99 	.word	0x0800fa99
 800fa48:	0800fa99 	.word	0x0800fa99
 800fa4c:	0800fa99 	.word	0x0800fa99
 800fa50:	0800fa99 	.word	0x0800fa99
 800fa54:	0800fa99 	.word	0x0800fa99
 800fa58:	0800fa99 	.word	0x0800fa99
 800fa5c:	0800fa99 	.word	0x0800fa99
 800fa60:	0800fa99 	.word	0x0800fa99
 800fa64:	0800fa99 	.word	0x0800fa99
 800fa68:	0800fa99 	.word	0x0800fa99
 800fa6c:	0800fa99 	.word	0x0800fa99
 800fa70:	0800fa99 	.word	0x0800fa99
 800fa74:	0800fa99 	.word	0x0800fa99
 800fa78:	0800fa99 	.word	0x0800fa99
 800fa7c:	0800fa99 	.word	0x0800fa99
 800fa80:	0800fa99 	.word	0x0800fa99
 800fa84:	0800fa99 	.word	0x0800fa99
 800fa88:	0800fa99 	.word	0x0800fa99
 800fa8c:	0800fa99 	.word	0x0800fa99
 800fa90:	0800fa99 	.word	0x0800fa99
 800fa94:	0800fa99 	.word	0x0800fa99
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 800fa98:	bf00      	nop
    }

    return (USBD_OK);
 800fa9a:	2300      	movs	r3, #0
    /* USER CODE END 5 */
}
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	370c      	adds	r7, #12
 800faa0:	46bd      	mov	sp, r7
 800faa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa6:	4770      	bx	lr

0800faa8 <CDC_Receive_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t * Buf, uint32_t * Len) {
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b082      	sub	sp, #8
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
 800fab0:	6039      	str	r1, [r7, #0]
    /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fab2:	6879      	ldr	r1, [r7, #4]
 800fab4:	4805      	ldr	r0, [pc, #20]	@ (800facc <CDC_Receive_FS+0x24>)
 800fab6:	f7fb ff73 	bl	800b9a0 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800faba:	4804      	ldr	r0, [pc, #16]	@ (800facc <CDC_Receive_FS+0x24>)
 800fabc:	f7fb ffd4 	bl	800ba68 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 800fac0:	2300      	movs	r3, #0
    /* USER CODE END 6 */
}
 800fac2:	4618      	mov	r0, r3
 800fac4:	3708      	adds	r7, #8
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}
 800faca:	bf00      	nop
 800facc:	20000eec 	.word	0x20000eec

0800fad0 <CDC_Transmit_FS>:
 *
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t * Buf, uint16_t Len) {
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b084      	sub	sp, #16
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
 800fad8:	460b      	mov	r3, r1
 800fada:	807b      	strh	r3, [r7, #2]
    uint8_t result = USBD_OK;
 800fadc:	2300      	movs	r3, #0
 800fade:	73fb      	strb	r3, [r7, #15]
    /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800fae0:	4b0d      	ldr	r3, [pc, #52]	@ (800fb18 <CDC_Transmit_FS+0x48>)
 800fae2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fae6:	60bb      	str	r3, [r7, #8]
    if (hcdc->TxState != 0) {
 800fae8:	68bb      	ldr	r3, [r7, #8]
 800faea:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d001      	beq.n	800faf6 <CDC_Transmit_FS+0x26>
        return USBD_BUSY;
 800faf2:	2301      	movs	r3, #1
 800faf4:	e00b      	b.n	800fb0e <CDC_Transmit_FS+0x3e>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800faf6:	887b      	ldrh	r3, [r7, #2]
 800faf8:	461a      	mov	r2, r3
 800fafa:	6879      	ldr	r1, [r7, #4]
 800fafc:	4806      	ldr	r0, [pc, #24]	@ (800fb18 <CDC_Transmit_FS+0x48>)
 800fafe:	f7fb ff2d 	bl	800b95c <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800fb02:	4805      	ldr	r0, [pc, #20]	@ (800fb18 <CDC_Transmit_FS+0x48>)
 800fb04:	f7fb ff6a 	bl	800b9dc <USBD_CDC_TransmitPacket>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	73fb      	strb	r3, [r7, #15]
    /* USER CODE END 7 */
    return result;
 800fb0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb0e:	4618      	mov	r0, r3
 800fb10:	3710      	adds	r7, #16
 800fb12:	46bd      	mov	sp, r7
 800fb14:	bd80      	pop	{r7, pc}
 800fb16:	bf00      	nop
 800fb18:	20000eec 	.word	0x20000eec

0800fb1c <CDC_TransmitCplt_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t * Buf, uint32_t * Len, uint8_t epnum) {
 800fb1c:	b480      	push	{r7}
 800fb1e:	b087      	sub	sp, #28
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	60f8      	str	r0, [r7, #12]
 800fb24:	60b9      	str	r1, [r7, #8]
 800fb26:	4613      	mov	r3, r2
 800fb28:	71fb      	strb	r3, [r7, #7]
    uint8_t result = USBD_OK;
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	75fb      	strb	r3, [r7, #23]
    /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
    /* USER CODE END 13 */
    return result;
 800fb2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fb32:	4618      	mov	r0, r3
 800fb34:	371c      	adds	r7, #28
 800fb36:	46bd      	mov	sp, r7
 800fb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3c:	4770      	bx	lr
	...

0800fb40 <USBD_FS_DeviceDescriptor>:
 * @brief  Return the device descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800fb40:	b480      	push	{r7}
 800fb42:	b083      	sub	sp, #12
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	4603      	mov	r3, r0
 800fb48:	6039      	str	r1, [r7, #0]
 800fb4a:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    *length = sizeof(USBD_FS_DeviceDesc);
 800fb4c:	683b      	ldr	r3, [r7, #0]
 800fb4e:	2212      	movs	r2, #18
 800fb50:	801a      	strh	r2, [r3, #0]
    return USBD_FS_DeviceDesc;
 800fb52:	4b03      	ldr	r3, [pc, #12]	@ (800fb60 <USBD_FS_DeviceDescriptor+0x20>)
}
 800fb54:	4618      	mov	r0, r3
 800fb56:	370c      	adds	r7, #12
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5e:	4770      	bx	lr
 800fb60:	200000f8 	.word	0x200000f8

0800fb64 <USBD_FS_LangIDStrDescriptor>:
 * @brief  Return the LangID string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800fb64:	b480      	push	{r7}
 800fb66:	b083      	sub	sp, #12
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	6039      	str	r1, [r7, #0]
 800fb6e:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    *length = sizeof(USBD_LangIDDesc);
 800fb70:	683b      	ldr	r3, [r7, #0]
 800fb72:	2204      	movs	r2, #4
 800fb74:	801a      	strh	r2, [r3, #0]
    return USBD_LangIDDesc;
 800fb76:	4b03      	ldr	r3, [pc, #12]	@ (800fb84 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fb78:	4618      	mov	r0, r3
 800fb7a:	370c      	adds	r7, #12
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb82:	4770      	bx	lr
 800fb84:	2000010c 	.word	0x2000010c

0800fb88 <USBD_FS_ProductStrDescriptor>:
 * @brief  Return the product string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b082      	sub	sp, #8
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	4603      	mov	r3, r0
 800fb90:	6039      	str	r1, [r7, #0]
 800fb92:	71fb      	strb	r3, [r7, #7]
    if (speed == 0) {
 800fb94:	79fb      	ldrb	r3, [r7, #7]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d105      	bne.n	800fba6 <USBD_FS_ProductStrDescriptor+0x1e>
        USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fb9a:	683a      	ldr	r2, [r7, #0]
 800fb9c:	4907      	ldr	r1, [pc, #28]	@ (800fbbc <USBD_FS_ProductStrDescriptor+0x34>)
 800fb9e:	4808      	ldr	r0, [pc, #32]	@ (800fbc0 <USBD_FS_ProductStrDescriptor+0x38>)
 800fba0:	f7fd f9a8 	bl	800cef4 <USBD_GetString>
 800fba4:	e004      	b.n	800fbb0 <USBD_FS_ProductStrDescriptor+0x28>
    } else {
        USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fba6:	683a      	ldr	r2, [r7, #0]
 800fba8:	4904      	ldr	r1, [pc, #16]	@ (800fbbc <USBD_FS_ProductStrDescriptor+0x34>)
 800fbaa:	4805      	ldr	r0, [pc, #20]	@ (800fbc0 <USBD_FS_ProductStrDescriptor+0x38>)
 800fbac:	f7fd f9a2 	bl	800cef4 <USBD_GetString>
    }
    return USBD_StrDesc;
 800fbb0:	4b02      	ldr	r3, [pc, #8]	@ (800fbbc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	3708      	adds	r7, #8
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	bd80      	pop	{r7, pc}
 800fbba:	bf00      	nop
 800fbbc:	200013c8 	.word	0x200013c8
 800fbc0:	08013674 	.word	0x08013674

0800fbc4 <USBD_FS_ManufacturerStrDescriptor>:
 * @brief  Return the manufacturer string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b082      	sub	sp, #8
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	4603      	mov	r3, r0
 800fbcc:	6039      	str	r1, [r7, #0]
 800fbce:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fbd0:	683a      	ldr	r2, [r7, #0]
 800fbd2:	4904      	ldr	r1, [pc, #16]	@ (800fbe4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fbd4:	4804      	ldr	r0, [pc, #16]	@ (800fbe8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fbd6:	f7fd f98d 	bl	800cef4 <USBD_GetString>
    return USBD_StrDesc;
 800fbda:	4b02      	ldr	r3, [pc, #8]	@ (800fbe4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fbdc:	4618      	mov	r0, r3
 800fbde:	3708      	adds	r7, #8
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bd80      	pop	{r7, pc}
 800fbe4:	200013c8 	.word	0x200013c8
 800fbe8:	0801368c 	.word	0x0801368c

0800fbec <USBD_FS_SerialStrDescriptor>:
 * @brief  Return the serial number string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b082      	sub	sp, #8
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	6039      	str	r1, [r7, #0]
 800fbf6:	71fb      	strb	r3, [r7, #7]
    UNUSED(speed);
    *length = USB_SIZ_STRING_SERIAL;
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	221a      	movs	r2, #26
 800fbfc:	801a      	strh	r2, [r3, #0]

    /* Update the serial number string descriptor with the data from the unique
     * ID */
    Get_SerialNum();
 800fbfe:	f000 f843 	bl	800fc88 <Get_SerialNum>
    /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

    /* USER CODE END USBD_FS_SerialStrDescriptor */
    return (uint8_t *)USBD_StringSerial;
 800fc02:	4b02      	ldr	r3, [pc, #8]	@ (800fc0c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fc04:	4618      	mov	r0, r3
 800fc06:	3708      	adds	r7, #8
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	bd80      	pop	{r7, pc}
 800fc0c:	20000110 	.word	0x20000110

0800fc10 <USBD_FS_ConfigStrDescriptor>:
 * @brief  Return the configuration string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b082      	sub	sp, #8
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	4603      	mov	r3, r0
 800fc18:	6039      	str	r1, [r7, #0]
 800fc1a:	71fb      	strb	r3, [r7, #7]
    if (speed == USBD_SPEED_HIGH) {
 800fc1c:	79fb      	ldrb	r3, [r7, #7]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d105      	bne.n	800fc2e <USBD_FS_ConfigStrDescriptor+0x1e>
        USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fc22:	683a      	ldr	r2, [r7, #0]
 800fc24:	4907      	ldr	r1, [pc, #28]	@ (800fc44 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fc26:	4808      	ldr	r0, [pc, #32]	@ (800fc48 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fc28:	f7fd f964 	bl	800cef4 <USBD_GetString>
 800fc2c:	e004      	b.n	800fc38 <USBD_FS_ConfigStrDescriptor+0x28>
    } else {
        USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fc2e:	683a      	ldr	r2, [r7, #0]
 800fc30:	4904      	ldr	r1, [pc, #16]	@ (800fc44 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fc32:	4805      	ldr	r0, [pc, #20]	@ (800fc48 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fc34:	f7fd f95e 	bl	800cef4 <USBD_GetString>
    }
    return USBD_StrDesc;
 800fc38:	4b02      	ldr	r3, [pc, #8]	@ (800fc44 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	3708      	adds	r7, #8
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}
 800fc42:	bf00      	nop
 800fc44:	200013c8 	.word	0x200013c8
 800fc48:	080136a0 	.word	0x080136a0

0800fc4c <USBD_FS_InterfaceStrDescriptor>:
 * @brief  Return the interface string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t * length) {
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b082      	sub	sp, #8
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	4603      	mov	r3, r0
 800fc54:	6039      	str	r1, [r7, #0]
 800fc56:	71fb      	strb	r3, [r7, #7]
    if (speed == 0) {
 800fc58:	79fb      	ldrb	r3, [r7, #7]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d105      	bne.n	800fc6a <USBD_FS_InterfaceStrDescriptor+0x1e>
        USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fc5e:	683a      	ldr	r2, [r7, #0]
 800fc60:	4907      	ldr	r1, [pc, #28]	@ (800fc80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fc62:	4808      	ldr	r0, [pc, #32]	@ (800fc84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fc64:	f7fd f946 	bl	800cef4 <USBD_GetString>
 800fc68:	e004      	b.n	800fc74 <USBD_FS_InterfaceStrDescriptor+0x28>
    } else {
        USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fc6a:	683a      	ldr	r2, [r7, #0]
 800fc6c:	4904      	ldr	r1, [pc, #16]	@ (800fc80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fc6e:	4805      	ldr	r0, [pc, #20]	@ (800fc84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fc70:	f7fd f940 	bl	800cef4 <USBD_GetString>
    }
    return USBD_StrDesc;
 800fc74:	4b02      	ldr	r3, [pc, #8]	@ (800fc80 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fc76:	4618      	mov	r0, r3
 800fc78:	3708      	adds	r7, #8
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}
 800fc7e:	bf00      	nop
 800fc80:	200013c8 	.word	0x200013c8
 800fc84:	080136ac 	.word	0x080136ac

0800fc88 <Get_SerialNum>:
/**
 * @brief  Create the serial number string descriptor
 * @param  None
 * @retval None
 */
static void Get_SerialNum(void) {
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b084      	sub	sp, #16
 800fc8c:	af00      	add	r7, sp, #0
    uint32_t deviceserial0;
    uint32_t deviceserial1;
    uint32_t deviceserial2;

    deviceserial0 = *(uint32_t *)DEVICE_ID1;
 800fc8e:	4b0f      	ldr	r3, [pc, #60]	@ (800fccc <Get_SerialNum+0x44>)
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	60fb      	str	r3, [r7, #12]
    deviceserial1 = *(uint32_t *)DEVICE_ID2;
 800fc94:	4b0e      	ldr	r3, [pc, #56]	@ (800fcd0 <Get_SerialNum+0x48>)
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	60bb      	str	r3, [r7, #8]
    deviceserial2 = *(uint32_t *)DEVICE_ID3;
 800fc9a:	4b0e      	ldr	r3, [pc, #56]	@ (800fcd4 <Get_SerialNum+0x4c>)
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	607b      	str	r3, [r7, #4]

    deviceserial0 += deviceserial2;
 800fca0:	68fa      	ldr	r2, [r7, #12]
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	4413      	add	r3, r2
 800fca6:	60fb      	str	r3, [r7, #12]

    if (deviceserial0 != 0) {
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d009      	beq.n	800fcc2 <Get_SerialNum+0x3a>
        IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fcae:	2208      	movs	r2, #8
 800fcb0:	4909      	ldr	r1, [pc, #36]	@ (800fcd8 <Get_SerialNum+0x50>)
 800fcb2:	68f8      	ldr	r0, [r7, #12]
 800fcb4:	f000 f814 	bl	800fce0 <IntToUnicode>
        IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fcb8:	2204      	movs	r2, #4
 800fcba:	4908      	ldr	r1, [pc, #32]	@ (800fcdc <Get_SerialNum+0x54>)
 800fcbc:	68b8      	ldr	r0, [r7, #8]
 800fcbe:	f000 f80f 	bl	800fce0 <IntToUnicode>
    }
}
 800fcc2:	bf00      	nop
 800fcc4:	3710      	adds	r7, #16
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	bd80      	pop	{r7, pc}
 800fcca:	bf00      	nop
 800fccc:	1fff7a10 	.word	0x1fff7a10
 800fcd0:	1fff7a14 	.word	0x1fff7a14
 800fcd4:	1fff7a18 	.word	0x1fff7a18
 800fcd8:	20000112 	.word	0x20000112
 800fcdc:	20000122 	.word	0x20000122

0800fce0 <IntToUnicode>:
 * @param  value: value to convert
 * @param  pbuf: pointer to the buffer
 * @param  len: buffer length
 * @retval None
 */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len) {
 800fce0:	b480      	push	{r7}
 800fce2:	b087      	sub	sp, #28
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	60f8      	str	r0, [r7, #12]
 800fce8:	60b9      	str	r1, [r7, #8]
 800fcea:	4613      	mov	r3, r2
 800fcec:	71fb      	strb	r3, [r7, #7]
    uint8_t idx = 0;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	75fb      	strb	r3, [r7, #23]

    for (idx = 0; idx < len; idx++) {
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	75fb      	strb	r3, [r7, #23]
 800fcf6:	e027      	b.n	800fd48 <IntToUnicode+0x68>
        if (((value >> 28)) < 0xA) {
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	0f1b      	lsrs	r3, r3, #28
 800fcfc:	2b09      	cmp	r3, #9
 800fcfe:	d80b      	bhi.n	800fd18 <IntToUnicode+0x38>
            pbuf[2 * idx] = (value >> 28) + '0';
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	0f1b      	lsrs	r3, r3, #28
 800fd04:	b2da      	uxtb	r2, r3
 800fd06:	7dfb      	ldrb	r3, [r7, #23]
 800fd08:	005b      	lsls	r3, r3, #1
 800fd0a:	4619      	mov	r1, r3
 800fd0c:	68bb      	ldr	r3, [r7, #8]
 800fd0e:	440b      	add	r3, r1
 800fd10:	3230      	adds	r2, #48	@ 0x30
 800fd12:	b2d2      	uxtb	r2, r2
 800fd14:	701a      	strb	r2, [r3, #0]
 800fd16:	e00a      	b.n	800fd2e <IntToUnicode+0x4e>
        } else {
            pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	0f1b      	lsrs	r3, r3, #28
 800fd1c:	b2da      	uxtb	r2, r3
 800fd1e:	7dfb      	ldrb	r3, [r7, #23]
 800fd20:	005b      	lsls	r3, r3, #1
 800fd22:	4619      	mov	r1, r3
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	440b      	add	r3, r1
 800fd28:	3237      	adds	r2, #55	@ 0x37
 800fd2a:	b2d2      	uxtb	r2, r2
 800fd2c:	701a      	strb	r2, [r3, #0]
        }

        value = value << 4;
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	011b      	lsls	r3, r3, #4
 800fd32:	60fb      	str	r3, [r7, #12]

        pbuf[2 * idx + 1] = 0;
 800fd34:	7dfb      	ldrb	r3, [r7, #23]
 800fd36:	005b      	lsls	r3, r3, #1
 800fd38:	3301      	adds	r3, #1
 800fd3a:	68ba      	ldr	r2, [r7, #8]
 800fd3c:	4413      	add	r3, r2
 800fd3e:	2200      	movs	r2, #0
 800fd40:	701a      	strb	r2, [r3, #0]
    for (idx = 0; idx < len; idx++) {
 800fd42:	7dfb      	ldrb	r3, [r7, #23]
 800fd44:	3301      	adds	r3, #1
 800fd46:	75fb      	strb	r3, [r7, #23]
 800fd48:	7dfa      	ldrb	r2, [r7, #23]
 800fd4a:	79fb      	ldrb	r3, [r7, #7]
 800fd4c:	429a      	cmp	r2, r3
 800fd4e:	d3d3      	bcc.n	800fcf8 <IntToUnicode+0x18>
    }
}
 800fd50:	bf00      	nop
 800fd52:	bf00      	nop
 800fd54:	371c      	adds	r7, #28
 800fd56:	46bd      	mov	sp, r7
 800fd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5c:	4770      	bx	lr
	...

0800fd60 <HAL_PCD_MspInit>:
/*******************************************************************************
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef * pcdHandle) {
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b08a      	sub	sp, #40	@ 0x28
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fd68:	f107 0314 	add.w	r3, r7, #20
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	601a      	str	r2, [r3, #0]
 800fd70:	605a      	str	r2, [r3, #4]
 800fd72:	609a      	str	r2, [r3, #8]
 800fd74:	60da      	str	r2, [r3, #12]
 800fd76:	611a      	str	r2, [r3, #16]
    if (pcdHandle->Instance == USB_OTG_FS) {
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fd80:	d13a      	bne.n	800fdf8 <HAL_PCD_MspInit+0x98>
        /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

        /* USER CODE END USB_OTG_FS_MspInit 0 */

        __HAL_RCC_GPIOA_CLK_ENABLE();
 800fd82:	2300      	movs	r3, #0
 800fd84:	613b      	str	r3, [r7, #16]
 800fd86:	4b1e      	ldr	r3, [pc, #120]	@ (800fe00 <HAL_PCD_MspInit+0xa0>)
 800fd88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd8a:	4a1d      	ldr	r2, [pc, #116]	@ (800fe00 <HAL_PCD_MspInit+0xa0>)
 800fd8c:	f043 0301 	orr.w	r3, r3, #1
 800fd90:	6313      	str	r3, [r2, #48]	@ 0x30
 800fd92:	4b1b      	ldr	r3, [pc, #108]	@ (800fe00 <HAL_PCD_MspInit+0xa0>)
 800fd94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd96:	f003 0301 	and.w	r3, r3, #1
 800fd9a:	613b      	str	r3, [r7, #16]
 800fd9c:	693b      	ldr	r3, [r7, #16]
        /**USB_OTG_FS GPIO Configuration
        PA11     ------> USB_OTG_FS_DM
        PA12     ------> USB_OTG_FS_DP
        */
        GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 800fd9e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800fda2:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fda4:	2302      	movs	r3, #2
 800fda6:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fda8:	2300      	movs	r3, #0
 800fdaa:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fdac:	2303      	movs	r3, #3
 800fdae:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fdb0:	230a      	movs	r3, #10
 800fdb2:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fdb4:	f107 0314 	add.w	r3, r7, #20
 800fdb8:	4619      	mov	r1, r3
 800fdba:	4812      	ldr	r0, [pc, #72]	@ (800fe04 <HAL_PCD_MspInit+0xa4>)
 800fdbc:	f7f5 fb7c 	bl	80054b8 <HAL_GPIO_Init>

        /* Peripheral clock enable */
        __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fdc0:	4b0f      	ldr	r3, [pc, #60]	@ (800fe00 <HAL_PCD_MspInit+0xa0>)
 800fdc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fdc4:	4a0e      	ldr	r2, [pc, #56]	@ (800fe00 <HAL_PCD_MspInit+0xa0>)
 800fdc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fdca:	6353      	str	r3, [r2, #52]	@ 0x34
 800fdcc:	2300      	movs	r3, #0
 800fdce:	60fb      	str	r3, [r7, #12]
 800fdd0:	4b0b      	ldr	r3, [pc, #44]	@ (800fe00 <HAL_PCD_MspInit+0xa0>)
 800fdd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fdd4:	4a0a      	ldr	r2, [pc, #40]	@ (800fe00 <HAL_PCD_MspInit+0xa0>)
 800fdd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800fdda:	6453      	str	r3, [r2, #68]	@ 0x44
 800fddc:	4b08      	ldr	r3, [pc, #32]	@ (800fe00 <HAL_PCD_MspInit+0xa0>)
 800fdde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fde0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fde4:	60fb      	str	r3, [r7, #12]
 800fde6:	68fb      	ldr	r3, [r7, #12]

        /* Peripheral interrupt init */
        HAL_NVIC_SetPriority(OTG_FS_IRQn, 2, 0);
 800fde8:	2200      	movs	r2, #0
 800fdea:	2102      	movs	r1, #2
 800fdec:	2043      	movs	r0, #67	@ 0x43
 800fdee:	f7f5 f942 	bl	8005076 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fdf2:	2043      	movs	r0, #67	@ 0x43
 800fdf4:	f7f5 f95b 	bl	80050ae <HAL_NVIC_EnableIRQ>
        /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

        /* USER CODE END USB_OTG_FS_MspInit 1 */
    }
}
 800fdf8:	bf00      	nop
 800fdfa:	3728      	adds	r7, #40	@ 0x28
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	bd80      	pop	{r7, pc}
 800fe00:	40023800 	.word	0x40023800
 800fe04:	40020000 	.word	0x40020000

0800fe08 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b082      	sub	sp, #8
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
    USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800fe1c:	4619      	mov	r1, r3
 800fe1e:	4610      	mov	r0, r2
 800fe20:	f7fb ff0b 	bl	800bc3a <USBD_LL_SetupStage>
}
 800fe24:	bf00      	nop
 800fe26:	3708      	adds	r7, #8
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bd80      	pop	{r7, pc}

0800fe2c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b082      	sub	sp, #8
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
 800fe34:	460b      	mov	r3, r1
 800fe36:	70fb      	strb	r3, [r7, #3]
    USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800fe3e:	78fa      	ldrb	r2, [r7, #3]
 800fe40:	6879      	ldr	r1, [r7, #4]
 800fe42:	4613      	mov	r3, r2
 800fe44:	00db      	lsls	r3, r3, #3
 800fe46:	4413      	add	r3, r2
 800fe48:	009b      	lsls	r3, r3, #2
 800fe4a:	440b      	add	r3, r1
 800fe4c:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800fe50:	681a      	ldr	r2, [r3, #0]
 800fe52:	78fb      	ldrb	r3, [r7, #3]
 800fe54:	4619      	mov	r1, r3
 800fe56:	f7fb ff45 	bl	800bce4 <USBD_LL_DataOutStage>
}
 800fe5a:	bf00      	nop
 800fe5c:	3708      	adds	r7, #8
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}

0800fe62 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe62:	b580      	push	{r7, lr}
 800fe64:	b082      	sub	sp, #8
 800fe66:	af00      	add	r7, sp, #0
 800fe68:	6078      	str	r0, [r7, #4]
 800fe6a:	460b      	mov	r3, r1
 800fe6c:	70fb      	strb	r3, [r7, #3]
    USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800fe74:	78fa      	ldrb	r2, [r7, #3]
 800fe76:	6879      	ldr	r1, [r7, #4]
 800fe78:	4613      	mov	r3, r2
 800fe7a:	00db      	lsls	r3, r3, #3
 800fe7c:	4413      	add	r3, r2
 800fe7e:	009b      	lsls	r3, r3, #2
 800fe80:	440b      	add	r3, r1
 800fe82:	334c      	adds	r3, #76	@ 0x4c
 800fe84:	681a      	ldr	r2, [r3, #0]
 800fe86:	78fb      	ldrb	r3, [r7, #3]
 800fe88:	4619      	mov	r1, r3
 800fe8a:	f7fb ffde 	bl	800be4a <USBD_LL_DataInStage>
}
 800fe8e:	bf00      	nop
 800fe90:	3708      	adds	r7, #8
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}

0800fe96 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe96:	b580      	push	{r7, lr}
 800fe98:	b082      	sub	sp, #8
 800fe9a:	af00      	add	r7, sp, #0
 800fe9c:	6078      	str	r0, [r7, #4]
    USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800fea4:	4618      	mov	r0, r3
 800fea6:	f7fc f912 	bl	800c0ce <USBD_LL_SOF>
}
 800feaa:	bf00      	nop
 800feac:	3708      	adds	r7, #8
 800feae:	46bd      	mov	sp, r7
 800feb0:	bd80      	pop	{r7, pc}

0800feb2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800feb2:	b580      	push	{r7, lr}
 800feb4:	b084      	sub	sp, #16
 800feb6:	af00      	add	r7, sp, #0
 800feb8:	6078      	str	r0, [r7, #4]
    USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800feba:	2301      	movs	r3, #1
 800febc:	73fb      	strb	r3, [r7, #15]

    if (hpcd->Init.speed != PCD_SPEED_FULL) {
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	68db      	ldr	r3, [r3, #12]
 800fec2:	2b02      	cmp	r3, #2
 800fec4:	d001      	beq.n	800feca <HAL_PCD_ResetCallback+0x18>
        Error_Handler();
 800fec6:	f7f2 fcaa 	bl	800281e <Error_Handler>
    }
    /* Set Speed. */
    USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800fed0:	7bfa      	ldrb	r2, [r7, #15]
 800fed2:	4611      	mov	r1, r2
 800fed4:	4618      	mov	r0, r3
 800fed6:	f7fc f8bc 	bl	800c052 <USBD_LL_SetSpeed>

    /* Reset Device. */
    USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800fee0:	4618      	mov	r0, r3
 800fee2:	f7fc f864 	bl	800bfae <USBD_LL_Reset>
}
 800fee6:	bf00      	nop
 800fee8:	3710      	adds	r7, #16
 800feea:	46bd      	mov	sp, r7
 800feec:	bd80      	pop	{r7, pc}
	...

0800fef0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b082      	sub	sp, #8
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
    /* Inform USB library that core enters in suspend Mode. */
    USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800fefe:	4618      	mov	r0, r3
 800ff00:	f7fc f8b7 	bl	800c072 <USBD_LL_Suspend>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	687a      	ldr	r2, [r7, #4]
 800ff10:	6812      	ldr	r2, [r2, #0]
 800ff12:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ff16:	f043 0301 	orr.w	r3, r3, #1
 800ff1a:	6013      	str	r3, [r2, #0]
    /* Enter in STOP mode. */
    /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	6a1b      	ldr	r3, [r3, #32]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d005      	beq.n	800ff30 <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ff24:	4b04      	ldr	r3, [pc, #16]	@ (800ff38 <HAL_PCD_SuspendCallback+0x48>)
 800ff26:	691b      	ldr	r3, [r3, #16]
 800ff28:	4a03      	ldr	r2, [pc, #12]	@ (800ff38 <HAL_PCD_SuspendCallback+0x48>)
 800ff2a:	f043 0306 	orr.w	r3, r3, #6
 800ff2e:	6113      	str	r3, [r2, #16]
    }
    /* USER CODE END 2 */
}
 800ff30:	bf00      	nop
 800ff32:	3708      	adds	r7, #8
 800ff34:	46bd      	mov	sp, r7
 800ff36:	bd80      	pop	{r7, pc}
 800ff38:	e000ed00 	.word	0xe000ed00

0800ff3c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b082      	sub	sp, #8
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN 3 */

    /* USER CODE END 3 */
    USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f7fc f8a7 	bl	800c09e <USBD_LL_Resume>
}
 800ff50:	bf00      	nop
 800ff52:	3708      	adds	r7, #8
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}

0800ff58 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b082      	sub	sp, #8
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
 800ff60:	460b      	mov	r3, r1
 800ff62:	70fb      	strb	r3, [r7, #3]
    USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800ff6a:	78fa      	ldrb	r2, [r7, #3]
 800ff6c:	4611      	mov	r1, r2
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f7fc f8ff 	bl	800c172 <USBD_LL_IsoOUTIncomplete>
}
 800ff74:	bf00      	nop
 800ff76:	3708      	adds	r7, #8
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	bd80      	pop	{r7, pc}

0800ff7c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b082      	sub	sp, #8
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
 800ff84:	460b      	mov	r3, r1
 800ff86:	70fb      	strb	r3, [r7, #3]
    USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800ff8e:	78fa      	ldrb	r2, [r7, #3]
 800ff90:	4611      	mov	r1, r2
 800ff92:	4618      	mov	r0, r3
 800ff94:	f7fc f8bb 	bl	800c10e <USBD_LL_IsoINIncomplete>
}
 800ff98:	bf00      	nop
 800ff9a:	3708      	adds	r7, #8
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd80      	pop	{r7, pc}

0800ffa0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b082      	sub	sp, #8
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
    USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7fc f911 	bl	800c1d6 <USBD_LL_DevConnected>
}
 800ffb4:	bf00      	nop
 800ffb6:	3708      	adds	r7, #8
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	bd80      	pop	{r7, pc}

0800ffbc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef * hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef * hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b082      	sub	sp, #8
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
    USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f7fc f90e 	bl	800c1ec <USBD_LL_DevDisconnected>
}
 800ffd0:	bf00      	nop
 800ffd2:	3708      	adds	r7, #8
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	bd80      	pop	{r7, pc}

0800ffd8 <USBD_LL_Init>:
/**
 * @brief  Initializes the low level portion of the device driver.
 * @param  pdev: Device handle
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef * pdev) {
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b082      	sub	sp, #8
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
    /* Init USB Ip. */
    if (pdev->id == DEVICE_FS) {
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	781b      	ldrb	r3, [r3, #0]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d13c      	bne.n	8010062 <USBD_LL_Init+0x8a>
        /* Link the driver to the stack. */
        hpcd_USB_OTG_FS.pData = pdev;
 800ffe8:	4a20      	ldr	r2, [pc, #128]	@ (801006c <USBD_LL_Init+0x94>)
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
        pdev->pData = &hpcd_USB_OTG_FS;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	4a1e      	ldr	r2, [pc, #120]	@ (801006c <USBD_LL_Init+0x94>)
 800fff4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

        hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fff8:	4b1c      	ldr	r3, [pc, #112]	@ (801006c <USBD_LL_Init+0x94>)
 800fffa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800fffe:	601a      	str	r2, [r3, #0]
        hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8010000:	4b1a      	ldr	r3, [pc, #104]	@ (801006c <USBD_LL_Init+0x94>)
 8010002:	2204      	movs	r2, #4
 8010004:	605a      	str	r2, [r3, #4]
        hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010006:	4b19      	ldr	r3, [pc, #100]	@ (801006c <USBD_LL_Init+0x94>)
 8010008:	2202      	movs	r2, #2
 801000a:	60da      	str	r2, [r3, #12]
        hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801000c:	4b17      	ldr	r3, [pc, #92]	@ (801006c <USBD_LL_Init+0x94>)
 801000e:	2200      	movs	r2, #0
 8010010:	611a      	str	r2, [r3, #16]
        hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010012:	4b16      	ldr	r3, [pc, #88]	@ (801006c <USBD_LL_Init+0x94>)
 8010014:	2202      	movs	r2, #2
 8010016:	619a      	str	r2, [r3, #24]
        hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010018:	4b14      	ldr	r3, [pc, #80]	@ (801006c <USBD_LL_Init+0x94>)
 801001a:	2200      	movs	r2, #0
 801001c:	61da      	str	r2, [r3, #28]
        hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801001e:	4b13      	ldr	r3, [pc, #76]	@ (801006c <USBD_LL_Init+0x94>)
 8010020:	2200      	movs	r2, #0
 8010022:	621a      	str	r2, [r3, #32]
        hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010024:	4b11      	ldr	r3, [pc, #68]	@ (801006c <USBD_LL_Init+0x94>)
 8010026:	2200      	movs	r2, #0
 8010028:	625a      	str	r2, [r3, #36]	@ 0x24
        hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801002a:	4b10      	ldr	r3, [pc, #64]	@ (801006c <USBD_LL_Init+0x94>)
 801002c:	2200      	movs	r2, #0
 801002e:	62da      	str	r2, [r3, #44]	@ 0x2c
        hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010030:	4b0e      	ldr	r3, [pc, #56]	@ (801006c <USBD_LL_Init+0x94>)
 8010032:	2200      	movs	r2, #0
 8010034:	631a      	str	r2, [r3, #48]	@ 0x30
        if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8010036:	480d      	ldr	r0, [pc, #52]	@ (801006c <USBD_LL_Init+0x94>)
 8010038:	f7f6 fbb3 	bl	80067a2 <HAL_PCD_Init>
 801003c:	4603      	mov	r3, r0
 801003e:	2b00      	cmp	r3, #0
 8010040:	d001      	beq.n	8010046 <USBD_LL_Init+0x6e>
            Error_Handler();
 8010042:	f7f2 fbec 	bl	800281e <Error_Handler>
        HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
        HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
        HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
        HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010046:	2180      	movs	r1, #128	@ 0x80
 8010048:	4808      	ldr	r0, [pc, #32]	@ (801006c <USBD_LL_Init+0x94>)
 801004a:	f7f7 fe0a 	bl	8007c62 <HAL_PCDEx_SetRxFiFo>
        HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801004e:	2240      	movs	r2, #64	@ 0x40
 8010050:	2100      	movs	r1, #0
 8010052:	4806      	ldr	r0, [pc, #24]	@ (801006c <USBD_LL_Init+0x94>)
 8010054:	f7f7 fdbe 	bl	8007bd4 <HAL_PCDEx_SetTxFiFo>
        HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010058:	2280      	movs	r2, #128	@ 0x80
 801005a:	2101      	movs	r1, #1
 801005c:	4803      	ldr	r0, [pc, #12]	@ (801006c <USBD_LL_Init+0x94>)
 801005e:	f7f7 fdb9 	bl	8007bd4 <HAL_PCDEx_SetTxFiFo>
    }
    return USBD_OK;
 8010062:	2300      	movs	r3, #0
}
 8010064:	4618      	mov	r0, r3
 8010066:	3708      	adds	r7, #8
 8010068:	46bd      	mov	sp, r7
 801006a:	bd80      	pop	{r7, pc}
 801006c:	200015c8 	.word	0x200015c8

08010070 <USBD_LL_Start>:
/**
 * @brief  Starts the low level portion of the device driver.
 * @param  pdev: Device handle
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef * pdev) {
 8010070:	b580      	push	{r7, lr}
 8010072:	b084      	sub	sp, #16
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8010078:	2300      	movs	r3, #0
 801007a:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 801007c:	2300      	movs	r3, #0
 801007e:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_Start(pdev->pData);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010086:	4618      	mov	r0, r3
 8010088:	f7f6 fca8 	bl	80069dc <HAL_PCD_Start>
 801008c:	4603      	mov	r3, r0
 801008e:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 8010090:	7bfb      	ldrb	r3, [r7, #15]
 8010092:	4618      	mov	r0, r3
 8010094:	f000 f942 	bl	801031c <USBD_Get_USB_Status>
 8010098:	4603      	mov	r3, r0
 801009a:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 801009c:	7bbb      	ldrb	r3, [r7, #14]
}
 801009e:	4618      	mov	r0, r3
 80100a0:	3710      	adds	r7, #16
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd80      	pop	{r7, pc}

080100a6 <USBD_LL_OpenEP>:
 * @param  ep_addr: Endpoint number
 * @param  ep_type: Endpoint type
 * @param  ep_mps: Endpoint max packet size
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps) {
 80100a6:	b580      	push	{r7, lr}
 80100a8:	b084      	sub	sp, #16
 80100aa:	af00      	add	r7, sp, #0
 80100ac:	6078      	str	r0, [r7, #4]
 80100ae:	4608      	mov	r0, r1
 80100b0:	4611      	mov	r1, r2
 80100b2:	461a      	mov	r2, r3
 80100b4:	4603      	mov	r3, r0
 80100b6:	70fb      	strb	r3, [r7, #3]
 80100b8:	460b      	mov	r3, r1
 80100ba:	70bb      	strb	r3, [r7, #2]
 80100bc:	4613      	mov	r3, r2
 80100be:	803b      	strh	r3, [r7, #0]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80100c0:	2300      	movs	r3, #0
 80100c2:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 80100c4:	2300      	movs	r3, #0
 80100c6:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80100ce:	78bb      	ldrb	r3, [r7, #2]
 80100d0:	883a      	ldrh	r2, [r7, #0]
 80100d2:	78f9      	ldrb	r1, [r7, #3]
 80100d4:	f7f7 f979 	bl	80073ca <HAL_PCD_EP_Open>
 80100d8:	4603      	mov	r3, r0
 80100da:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 80100dc:	7bfb      	ldrb	r3, [r7, #15]
 80100de:	4618      	mov	r0, r3
 80100e0:	f000 f91c 	bl	801031c <USBD_Get_USB_Status>
 80100e4:	4603      	mov	r3, r0
 80100e6:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 80100e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80100ea:	4618      	mov	r0, r3
 80100ec:	3710      	adds	r7, #16
 80100ee:	46bd      	mov	sp, r7
 80100f0:	bd80      	pop	{r7, pc}

080100f2 <USBD_LL_CloseEP>:
 * @brief  Closes an endpoint of the low level driver.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 80100f2:	b580      	push	{r7, lr}
 80100f4:	b084      	sub	sp, #16
 80100f6:	af00      	add	r7, sp, #0
 80100f8:	6078      	str	r0, [r7, #4]
 80100fa:	460b      	mov	r3, r1
 80100fc:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80100fe:	2300      	movs	r3, #0
 8010100:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 8010102:	2300      	movs	r3, #0
 8010104:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801010c:	78fa      	ldrb	r2, [r7, #3]
 801010e:	4611      	mov	r1, r2
 8010110:	4618      	mov	r0, r3
 8010112:	f7f7 f9c2 	bl	800749a <HAL_PCD_EP_Close>
 8010116:	4603      	mov	r3, r0
 8010118:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 801011a:	7bfb      	ldrb	r3, [r7, #15]
 801011c:	4618      	mov	r0, r3
 801011e:	f000 f8fd 	bl	801031c <USBD_Get_USB_Status>
 8010122:	4603      	mov	r3, r0
 8010124:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 8010126:	7bbb      	ldrb	r3, [r7, #14]
}
 8010128:	4618      	mov	r0, r3
 801012a:	3710      	adds	r7, #16
 801012c:	46bd      	mov	sp, r7
 801012e:	bd80      	pop	{r7, pc}

08010130 <USBD_LL_StallEP>:
 * @brief  Sets a Stall condition on an endpoint of the Low Level Driver.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 8010130:	b580      	push	{r7, lr}
 8010132:	b084      	sub	sp, #16
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
 8010138:	460b      	mov	r3, r1
 801013a:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 801013c:	2300      	movs	r3, #0
 801013e:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 8010140:	2300      	movs	r3, #0
 8010142:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801014a:	78fa      	ldrb	r2, [r7, #3]
 801014c:	4611      	mov	r1, r2
 801014e:	4618      	mov	r0, r3
 8010150:	f7f7 fa9a 	bl	8007688 <HAL_PCD_EP_SetStall>
 8010154:	4603      	mov	r3, r0
 8010156:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 8010158:	7bfb      	ldrb	r3, [r7, #15]
 801015a:	4618      	mov	r0, r3
 801015c:	f000 f8de 	bl	801031c <USBD_Get_USB_Status>
 8010160:	4603      	mov	r3, r0
 8010162:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 8010164:	7bbb      	ldrb	r3, [r7, #14]
}
 8010166:	4618      	mov	r0, r3
 8010168:	3710      	adds	r7, #16
 801016a:	46bd      	mov	sp, r7
 801016c:	bd80      	pop	{r7, pc}

0801016e <USBD_LL_ClearStallEP>:
 * @brief  Clears a Stall condition on an endpoint of the Low Level Driver.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 801016e:	b580      	push	{r7, lr}
 8010170:	b084      	sub	sp, #16
 8010172:	af00      	add	r7, sp, #0
 8010174:	6078      	str	r0, [r7, #4]
 8010176:	460b      	mov	r3, r1
 8010178:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 801017a:	2300      	movs	r3, #0
 801017c:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 801017e:	2300      	movs	r3, #0
 8010180:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010188:	78fa      	ldrb	r2, [r7, #3]
 801018a:	4611      	mov	r1, r2
 801018c:	4618      	mov	r0, r3
 801018e:	f7f7 fadf 	bl	8007750 <HAL_PCD_EP_ClrStall>
 8010192:	4603      	mov	r3, r0
 8010194:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 8010196:	7bfb      	ldrb	r3, [r7, #15]
 8010198:	4618      	mov	r0, r3
 801019a:	f000 f8bf 	bl	801031c <USBD_Get_USB_Status>
 801019e:	4603      	mov	r3, r0
 80101a0:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 80101a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80101a4:	4618      	mov	r0, r3
 80101a6:	3710      	adds	r7, #16
 80101a8:	46bd      	mov	sp, r7
 80101aa:	bd80      	pop	{r7, pc}

080101ac <USBD_LL_IsStallEP>:
 * @brief  Returns Stall condition.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval Stall (1: Yes, 0: No)
 */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 80101ac:	b480      	push	{r7}
 80101ae:	b085      	sub	sp, #20
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
 80101b4:	460b      	mov	r3, r1
 80101b6:	70fb      	strb	r3, [r7, #3]
    PCD_HandleTypeDef * hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80101be:	60fb      	str	r3, [r7, #12]

    if ((ep_addr & 0x80) == 0x80) {
 80101c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	da0b      	bge.n	80101e0 <USBD_LL_IsStallEP+0x34>
        return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80101c8:	78fb      	ldrb	r3, [r7, #3]
 80101ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80101ce:	68f9      	ldr	r1, [r7, #12]
 80101d0:	4613      	mov	r3, r2
 80101d2:	00db      	lsls	r3, r3, #3
 80101d4:	4413      	add	r3, r2
 80101d6:	009b      	lsls	r3, r3, #2
 80101d8:	440b      	add	r3, r1
 80101da:	333e      	adds	r3, #62	@ 0x3e
 80101dc:	781b      	ldrb	r3, [r3, #0]
 80101de:	e00b      	b.n	80101f8 <USBD_LL_IsStallEP+0x4c>
    } else {
        return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80101e0:	78fb      	ldrb	r3, [r7, #3]
 80101e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80101e6:	68f9      	ldr	r1, [r7, #12]
 80101e8:	4613      	mov	r3, r2
 80101ea:	00db      	lsls	r3, r3, #3
 80101ec:	4413      	add	r3, r2
 80101ee:	009b      	lsls	r3, r3, #2
 80101f0:	440b      	add	r3, r1
 80101f2:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 80101f6:	781b      	ldrb	r3, [r3, #0]
    }
}
 80101f8:	4618      	mov	r0, r3
 80101fa:	3714      	adds	r7, #20
 80101fc:	46bd      	mov	sp, r7
 80101fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010202:	4770      	bx	lr

08010204 <USBD_LL_SetUSBAddress>:
 * @brief  Assigns a USB address to the device.
 * @param  pdev: Device handle
 * @param  dev_addr: Device address
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef * pdev, uint8_t dev_addr) {
 8010204:	b580      	push	{r7, lr}
 8010206:	b084      	sub	sp, #16
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
 801020c:	460b      	mov	r3, r1
 801020e:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8010210:	2300      	movs	r3, #0
 8010212:	73fb      	strb	r3, [r7, #15]
    USBD_StatusTypeDef usb_status = USBD_OK;
 8010214:	2300      	movs	r3, #0
 8010216:	73bb      	strb	r3, [r7, #14]

    hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801021e:	78fa      	ldrb	r2, [r7, #3]
 8010220:	4611      	mov	r1, r2
 8010222:	4618      	mov	r0, r3
 8010224:	f7f7 f8ac 	bl	8007380 <HAL_PCD_SetAddress>
 8010228:	4603      	mov	r3, r0
 801022a:	73fb      	strb	r3, [r7, #15]

    usb_status = USBD_Get_USB_Status(hal_status);
 801022c:	7bfb      	ldrb	r3, [r7, #15]
 801022e:	4618      	mov	r0, r3
 8010230:	f000 f874 	bl	801031c <USBD_Get_USB_Status>
 8010234:	4603      	mov	r3, r0
 8010236:	73bb      	strb	r3, [r7, #14]

    return usb_status;
 8010238:	7bbb      	ldrb	r3, [r7, #14]
}
 801023a:	4618      	mov	r0, r3
 801023c:	3710      	adds	r7, #16
 801023e:	46bd      	mov	sp, r7
 8010240:	bd80      	pop	{r7, pc}

08010242 <USBD_LL_Transmit>:
 * @param  ep_addr: Endpoint number
 * @param  pbuf: Pointer to data to be sent
 * @param  size: Data size
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef * pdev, uint8_t ep_addr, uint8_t * pbuf, uint32_t size) {
 8010242:	b580      	push	{r7, lr}
 8010244:	b086      	sub	sp, #24
 8010246:	af00      	add	r7, sp, #0
 8010248:	60f8      	str	r0, [r7, #12]
 801024a:	607a      	str	r2, [r7, #4]
 801024c:	603b      	str	r3, [r7, #0]
 801024e:	460b      	mov	r3, r1
 8010250:	72fb      	strb	r3, [r7, #11]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8010252:	2300      	movs	r3, #0
 8010254:	75fb      	strb	r3, [r7, #23]
    USBD_StatusTypeDef usb_status = USBD_OK;
 8010256:	2300      	movs	r3, #0
 8010258:	75bb      	strb	r3, [r7, #22]

    hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010260:	7af9      	ldrb	r1, [r7, #11]
 8010262:	683b      	ldr	r3, [r7, #0]
 8010264:	687a      	ldr	r2, [r7, #4]
 8010266:	f7f7 f9c5 	bl	80075f4 <HAL_PCD_EP_Transmit>
 801026a:	4603      	mov	r3, r0
 801026c:	75fb      	strb	r3, [r7, #23]

    usb_status = USBD_Get_USB_Status(hal_status);
 801026e:	7dfb      	ldrb	r3, [r7, #23]
 8010270:	4618      	mov	r0, r3
 8010272:	f000 f853 	bl	801031c <USBD_Get_USB_Status>
 8010276:	4603      	mov	r3, r0
 8010278:	75bb      	strb	r3, [r7, #22]

    return usb_status;
 801027a:	7dbb      	ldrb	r3, [r7, #22]
}
 801027c:	4618      	mov	r0, r3
 801027e:	3718      	adds	r7, #24
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}

08010284 <USBD_LL_PrepareReceive>:
 * @param  ep_addr: Endpoint number
 * @param  pbuf: Pointer to data to be received
 * @param  size: Data size
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef * pdev, uint8_t ep_addr, uint8_t * pbuf, uint32_t size) {
 8010284:	b580      	push	{r7, lr}
 8010286:	b086      	sub	sp, #24
 8010288:	af00      	add	r7, sp, #0
 801028a:	60f8      	str	r0, [r7, #12]
 801028c:	607a      	str	r2, [r7, #4]
 801028e:	603b      	str	r3, [r7, #0]
 8010290:	460b      	mov	r3, r1
 8010292:	72fb      	strb	r3, [r7, #11]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8010294:	2300      	movs	r3, #0
 8010296:	75fb      	strb	r3, [r7, #23]
    USBD_StatusTypeDef usb_status = USBD_OK;
 8010298:	2300      	movs	r3, #0
 801029a:	75bb      	strb	r3, [r7, #22]

    hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80102a2:	7af9      	ldrb	r1, [r7, #11]
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	687a      	ldr	r2, [r7, #4]
 80102a8:	f7f7 f941 	bl	800752e <HAL_PCD_EP_Receive>
 80102ac:	4603      	mov	r3, r0
 80102ae:	75fb      	strb	r3, [r7, #23]

    usb_status = USBD_Get_USB_Status(hal_status);
 80102b0:	7dfb      	ldrb	r3, [r7, #23]
 80102b2:	4618      	mov	r0, r3
 80102b4:	f000 f832 	bl	801031c <USBD_Get_USB_Status>
 80102b8:	4603      	mov	r3, r0
 80102ba:	75bb      	strb	r3, [r7, #22]

    return usb_status;
 80102bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80102be:	4618      	mov	r0, r3
 80102c0:	3718      	adds	r7, #24
 80102c2:	46bd      	mov	sp, r7
 80102c4:	bd80      	pop	{r7, pc}

080102c6 <USBD_LL_GetRxDataSize>:
 * @brief  Returns the last transferred packet size.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval Received Data Size
 */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef * pdev, uint8_t ep_addr) {
 80102c6:	b580      	push	{r7, lr}
 80102c8:	b082      	sub	sp, #8
 80102ca:	af00      	add	r7, sp, #0
 80102cc:	6078      	str	r0, [r7, #4]
 80102ce:	460b      	mov	r3, r1
 80102d0:	70fb      	strb	r3, [r7, #3]
    return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80102d8:	78fa      	ldrb	r2, [r7, #3]
 80102da:	4611      	mov	r1, r2
 80102dc:	4618      	mov	r0, r3
 80102de:	f7f7 f971 	bl	80075c4 <HAL_PCD_EP_GetRxCount>
 80102e2:	4603      	mov	r3, r0
}
 80102e4:	4618      	mov	r0, r3
 80102e6:	3708      	adds	r7, #8
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bd80      	pop	{r7, pc}

080102ec <USBD_static_malloc>:
/**
 * @brief  Static single allocation.
 * @param  size: Size of allocated memory
 * @retval None
 */
void * USBD_static_malloc(uint32_t size) {
 80102ec:	b480      	push	{r7}
 80102ee:	b083      	sub	sp, #12
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
    static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
    return mem;
 80102f4:	4b03      	ldr	r3, [pc, #12]	@ (8010304 <USBD_static_malloc+0x18>)
}
 80102f6:	4618      	mov	r0, r3
 80102f8:	370c      	adds	r7, #12
 80102fa:	46bd      	mov	sp, r7
 80102fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010300:	4770      	bx	lr
 8010302:	bf00      	nop
 8010304:	20001ad4 	.word	0x20001ad4

08010308 <USBD_static_free>:
/**
 * @brief  Dummy memory free
 * @param  p: Pointer to allocated  memory address
 * @retval None
 */
void USBD_static_free(void * p) {
 8010308:	b480      	push	{r7}
 801030a:	b083      	sub	sp, #12
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
}
 8010310:	bf00      	nop
 8010312:	370c      	adds	r7, #12
 8010314:	46bd      	mov	sp, r7
 8010316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031a:	4770      	bx	lr

0801031c <USBD_Get_USB_Status>:
/**
 * @brief  Returns the USB status depending on the HAL status:
 * @param  hal_status: HAL status
 * @retval USB status
 */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status) {
 801031c:	b480      	push	{r7}
 801031e:	b085      	sub	sp, #20
 8010320:	af00      	add	r7, sp, #0
 8010322:	4603      	mov	r3, r0
 8010324:	71fb      	strb	r3, [r7, #7]
    USBD_StatusTypeDef usb_status = USBD_OK;
 8010326:	2300      	movs	r3, #0
 8010328:	73fb      	strb	r3, [r7, #15]

    switch (hal_status) {
 801032a:	79fb      	ldrb	r3, [r7, #7]
 801032c:	2b03      	cmp	r3, #3
 801032e:	d817      	bhi.n	8010360 <USBD_Get_USB_Status+0x44>
 8010330:	a201      	add	r2, pc, #4	@ (adr r2, 8010338 <USBD_Get_USB_Status+0x1c>)
 8010332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010336:	bf00      	nop
 8010338:	08010349 	.word	0x08010349
 801033c:	0801034f 	.word	0x0801034f
 8010340:	08010355 	.word	0x08010355
 8010344:	0801035b 	.word	0x0801035b
    case HAL_OK:
        usb_status = USBD_OK;
 8010348:	2300      	movs	r3, #0
 801034a:	73fb      	strb	r3, [r7, #15]
        break;
 801034c:	e00b      	b.n	8010366 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR:
        usb_status = USBD_FAIL;
 801034e:	2303      	movs	r3, #3
 8010350:	73fb      	strb	r3, [r7, #15]
        break;
 8010352:	e008      	b.n	8010366 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY:
        usb_status = USBD_BUSY;
 8010354:	2301      	movs	r3, #1
 8010356:	73fb      	strb	r3, [r7, #15]
        break;
 8010358:	e005      	b.n	8010366 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT:
        usb_status = USBD_FAIL;
 801035a:	2303      	movs	r3, #3
 801035c:	73fb      	strb	r3, [r7, #15]
        break;
 801035e:	e002      	b.n	8010366 <USBD_Get_USB_Status+0x4a>
    default:
        usb_status = USBD_FAIL;
 8010360:	2303      	movs	r3, #3
 8010362:	73fb      	strb	r3, [r7, #15]
        break;
 8010364:	bf00      	nop
    }
    return usb_status;
 8010366:	7bfb      	ldrb	r3, [r7, #15]
}
 8010368:	4618      	mov	r0, r3
 801036a:	3714      	adds	r7, #20
 801036c:	46bd      	mov	sp, r7
 801036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010372:	4770      	bx	lr

08010374 <malloc>:
 8010374:	4b02      	ldr	r3, [pc, #8]	@ (8010380 <malloc+0xc>)
 8010376:	4601      	mov	r1, r0
 8010378:	6818      	ldr	r0, [r3, #0]
 801037a:	f000 b82d 	b.w	80103d8 <_malloc_r>
 801037e:	bf00      	nop
 8010380:	20000138 	.word	0x20000138

08010384 <free>:
 8010384:	4b02      	ldr	r3, [pc, #8]	@ (8010390 <free+0xc>)
 8010386:	4601      	mov	r1, r0
 8010388:	6818      	ldr	r0, [r3, #0]
 801038a:	f001 bd09 	b.w	8011da0 <_free_r>
 801038e:	bf00      	nop
 8010390:	20000138 	.word	0x20000138

08010394 <sbrk_aligned>:
 8010394:	b570      	push	{r4, r5, r6, lr}
 8010396:	4e0f      	ldr	r6, [pc, #60]	@ (80103d4 <sbrk_aligned+0x40>)
 8010398:	460c      	mov	r4, r1
 801039a:	6831      	ldr	r1, [r6, #0]
 801039c:	4605      	mov	r5, r0
 801039e:	b911      	cbnz	r1, 80103a6 <sbrk_aligned+0x12>
 80103a0:	f000 fe52 	bl	8011048 <_sbrk_r>
 80103a4:	6030      	str	r0, [r6, #0]
 80103a6:	4621      	mov	r1, r4
 80103a8:	4628      	mov	r0, r5
 80103aa:	f000 fe4d 	bl	8011048 <_sbrk_r>
 80103ae:	1c43      	adds	r3, r0, #1
 80103b0:	d103      	bne.n	80103ba <sbrk_aligned+0x26>
 80103b2:	f04f 34ff 	mov.w	r4, #4294967295
 80103b6:	4620      	mov	r0, r4
 80103b8:	bd70      	pop	{r4, r5, r6, pc}
 80103ba:	1cc4      	adds	r4, r0, #3
 80103bc:	f024 0403 	bic.w	r4, r4, #3
 80103c0:	42a0      	cmp	r0, r4
 80103c2:	d0f8      	beq.n	80103b6 <sbrk_aligned+0x22>
 80103c4:	1a21      	subs	r1, r4, r0
 80103c6:	4628      	mov	r0, r5
 80103c8:	f000 fe3e 	bl	8011048 <_sbrk_r>
 80103cc:	3001      	adds	r0, #1
 80103ce:	d1f2      	bne.n	80103b6 <sbrk_aligned+0x22>
 80103d0:	e7ef      	b.n	80103b2 <sbrk_aligned+0x1e>
 80103d2:	bf00      	nop
 80103d4:	20001cf4 	.word	0x20001cf4

080103d8 <_malloc_r>:
 80103d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103dc:	1ccd      	adds	r5, r1, #3
 80103de:	f025 0503 	bic.w	r5, r5, #3
 80103e2:	3508      	adds	r5, #8
 80103e4:	2d0c      	cmp	r5, #12
 80103e6:	bf38      	it	cc
 80103e8:	250c      	movcc	r5, #12
 80103ea:	2d00      	cmp	r5, #0
 80103ec:	4606      	mov	r6, r0
 80103ee:	db01      	blt.n	80103f4 <_malloc_r+0x1c>
 80103f0:	42a9      	cmp	r1, r5
 80103f2:	d904      	bls.n	80103fe <_malloc_r+0x26>
 80103f4:	230c      	movs	r3, #12
 80103f6:	6033      	str	r3, [r6, #0]
 80103f8:	2000      	movs	r0, #0
 80103fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80104d4 <_malloc_r+0xfc>
 8010402:	f000 f869 	bl	80104d8 <__malloc_lock>
 8010406:	f8d8 3000 	ldr.w	r3, [r8]
 801040a:	461c      	mov	r4, r3
 801040c:	bb44      	cbnz	r4, 8010460 <_malloc_r+0x88>
 801040e:	4629      	mov	r1, r5
 8010410:	4630      	mov	r0, r6
 8010412:	f7ff ffbf 	bl	8010394 <sbrk_aligned>
 8010416:	1c43      	adds	r3, r0, #1
 8010418:	4604      	mov	r4, r0
 801041a:	d158      	bne.n	80104ce <_malloc_r+0xf6>
 801041c:	f8d8 4000 	ldr.w	r4, [r8]
 8010420:	4627      	mov	r7, r4
 8010422:	2f00      	cmp	r7, #0
 8010424:	d143      	bne.n	80104ae <_malloc_r+0xd6>
 8010426:	2c00      	cmp	r4, #0
 8010428:	d04b      	beq.n	80104c2 <_malloc_r+0xea>
 801042a:	6823      	ldr	r3, [r4, #0]
 801042c:	4639      	mov	r1, r7
 801042e:	4630      	mov	r0, r6
 8010430:	eb04 0903 	add.w	r9, r4, r3
 8010434:	f000 fe08 	bl	8011048 <_sbrk_r>
 8010438:	4581      	cmp	r9, r0
 801043a:	d142      	bne.n	80104c2 <_malloc_r+0xea>
 801043c:	6821      	ldr	r1, [r4, #0]
 801043e:	1a6d      	subs	r5, r5, r1
 8010440:	4629      	mov	r1, r5
 8010442:	4630      	mov	r0, r6
 8010444:	f7ff ffa6 	bl	8010394 <sbrk_aligned>
 8010448:	3001      	adds	r0, #1
 801044a:	d03a      	beq.n	80104c2 <_malloc_r+0xea>
 801044c:	6823      	ldr	r3, [r4, #0]
 801044e:	442b      	add	r3, r5
 8010450:	6023      	str	r3, [r4, #0]
 8010452:	f8d8 3000 	ldr.w	r3, [r8]
 8010456:	685a      	ldr	r2, [r3, #4]
 8010458:	bb62      	cbnz	r2, 80104b4 <_malloc_r+0xdc>
 801045a:	f8c8 7000 	str.w	r7, [r8]
 801045e:	e00f      	b.n	8010480 <_malloc_r+0xa8>
 8010460:	6822      	ldr	r2, [r4, #0]
 8010462:	1b52      	subs	r2, r2, r5
 8010464:	d420      	bmi.n	80104a8 <_malloc_r+0xd0>
 8010466:	2a0b      	cmp	r2, #11
 8010468:	d917      	bls.n	801049a <_malloc_r+0xc2>
 801046a:	1961      	adds	r1, r4, r5
 801046c:	42a3      	cmp	r3, r4
 801046e:	6025      	str	r5, [r4, #0]
 8010470:	bf18      	it	ne
 8010472:	6059      	strne	r1, [r3, #4]
 8010474:	6863      	ldr	r3, [r4, #4]
 8010476:	bf08      	it	eq
 8010478:	f8c8 1000 	streq.w	r1, [r8]
 801047c:	5162      	str	r2, [r4, r5]
 801047e:	604b      	str	r3, [r1, #4]
 8010480:	4630      	mov	r0, r6
 8010482:	f000 f82f 	bl	80104e4 <__malloc_unlock>
 8010486:	f104 000b 	add.w	r0, r4, #11
 801048a:	1d23      	adds	r3, r4, #4
 801048c:	f020 0007 	bic.w	r0, r0, #7
 8010490:	1ac2      	subs	r2, r0, r3
 8010492:	bf1c      	itt	ne
 8010494:	1a1b      	subne	r3, r3, r0
 8010496:	50a3      	strne	r3, [r4, r2]
 8010498:	e7af      	b.n	80103fa <_malloc_r+0x22>
 801049a:	6862      	ldr	r2, [r4, #4]
 801049c:	42a3      	cmp	r3, r4
 801049e:	bf0c      	ite	eq
 80104a0:	f8c8 2000 	streq.w	r2, [r8]
 80104a4:	605a      	strne	r2, [r3, #4]
 80104a6:	e7eb      	b.n	8010480 <_malloc_r+0xa8>
 80104a8:	4623      	mov	r3, r4
 80104aa:	6864      	ldr	r4, [r4, #4]
 80104ac:	e7ae      	b.n	801040c <_malloc_r+0x34>
 80104ae:	463c      	mov	r4, r7
 80104b0:	687f      	ldr	r7, [r7, #4]
 80104b2:	e7b6      	b.n	8010422 <_malloc_r+0x4a>
 80104b4:	461a      	mov	r2, r3
 80104b6:	685b      	ldr	r3, [r3, #4]
 80104b8:	42a3      	cmp	r3, r4
 80104ba:	d1fb      	bne.n	80104b4 <_malloc_r+0xdc>
 80104bc:	2300      	movs	r3, #0
 80104be:	6053      	str	r3, [r2, #4]
 80104c0:	e7de      	b.n	8010480 <_malloc_r+0xa8>
 80104c2:	230c      	movs	r3, #12
 80104c4:	6033      	str	r3, [r6, #0]
 80104c6:	4630      	mov	r0, r6
 80104c8:	f000 f80c 	bl	80104e4 <__malloc_unlock>
 80104cc:	e794      	b.n	80103f8 <_malloc_r+0x20>
 80104ce:	6005      	str	r5, [r0, #0]
 80104d0:	e7d6      	b.n	8010480 <_malloc_r+0xa8>
 80104d2:	bf00      	nop
 80104d4:	20001cf8 	.word	0x20001cf8

080104d8 <__malloc_lock>:
 80104d8:	4801      	ldr	r0, [pc, #4]	@ (80104e0 <__malloc_lock+0x8>)
 80104da:	f000 be02 	b.w	80110e2 <__retarget_lock_acquire_recursive>
 80104de:	bf00      	nop
 80104e0:	20001e3c 	.word	0x20001e3c

080104e4 <__malloc_unlock>:
 80104e4:	4801      	ldr	r0, [pc, #4]	@ (80104ec <__malloc_unlock+0x8>)
 80104e6:	f000 bdfd 	b.w	80110e4 <__retarget_lock_release_recursive>
 80104ea:	bf00      	nop
 80104ec:	20001e3c 	.word	0x20001e3c

080104f0 <__cvt>:
 80104f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80104f4:	ec57 6b10 	vmov	r6, r7, d0
 80104f8:	2f00      	cmp	r7, #0
 80104fa:	460c      	mov	r4, r1
 80104fc:	4619      	mov	r1, r3
 80104fe:	463b      	mov	r3, r7
 8010500:	bfbb      	ittet	lt
 8010502:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010506:	461f      	movlt	r7, r3
 8010508:	2300      	movge	r3, #0
 801050a:	232d      	movlt	r3, #45	@ 0x2d
 801050c:	700b      	strb	r3, [r1, #0]
 801050e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010510:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010514:	4691      	mov	r9, r2
 8010516:	f023 0820 	bic.w	r8, r3, #32
 801051a:	bfbc      	itt	lt
 801051c:	4632      	movlt	r2, r6
 801051e:	4616      	movlt	r6, r2
 8010520:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010524:	d005      	beq.n	8010532 <__cvt+0x42>
 8010526:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801052a:	d100      	bne.n	801052e <__cvt+0x3e>
 801052c:	3401      	adds	r4, #1
 801052e:	2102      	movs	r1, #2
 8010530:	e000      	b.n	8010534 <__cvt+0x44>
 8010532:	2103      	movs	r1, #3
 8010534:	ab03      	add	r3, sp, #12
 8010536:	9301      	str	r3, [sp, #4]
 8010538:	ab02      	add	r3, sp, #8
 801053a:	9300      	str	r3, [sp, #0]
 801053c:	ec47 6b10 	vmov	d0, r6, r7
 8010540:	4653      	mov	r3, sl
 8010542:	4622      	mov	r2, r4
 8010544:	f000 fe68 	bl	8011218 <_dtoa_r>
 8010548:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801054c:	4605      	mov	r5, r0
 801054e:	d119      	bne.n	8010584 <__cvt+0x94>
 8010550:	f019 0f01 	tst.w	r9, #1
 8010554:	d00e      	beq.n	8010574 <__cvt+0x84>
 8010556:	eb00 0904 	add.w	r9, r0, r4
 801055a:	2200      	movs	r2, #0
 801055c:	2300      	movs	r3, #0
 801055e:	4630      	mov	r0, r6
 8010560:	4639      	mov	r1, r7
 8010562:	f7f0 fab9 	bl	8000ad8 <__aeabi_dcmpeq>
 8010566:	b108      	cbz	r0, 801056c <__cvt+0x7c>
 8010568:	f8cd 900c 	str.w	r9, [sp, #12]
 801056c:	2230      	movs	r2, #48	@ 0x30
 801056e:	9b03      	ldr	r3, [sp, #12]
 8010570:	454b      	cmp	r3, r9
 8010572:	d31e      	bcc.n	80105b2 <__cvt+0xc2>
 8010574:	9b03      	ldr	r3, [sp, #12]
 8010576:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010578:	1b5b      	subs	r3, r3, r5
 801057a:	4628      	mov	r0, r5
 801057c:	6013      	str	r3, [r2, #0]
 801057e:	b004      	add	sp, #16
 8010580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010584:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010588:	eb00 0904 	add.w	r9, r0, r4
 801058c:	d1e5      	bne.n	801055a <__cvt+0x6a>
 801058e:	7803      	ldrb	r3, [r0, #0]
 8010590:	2b30      	cmp	r3, #48	@ 0x30
 8010592:	d10a      	bne.n	80105aa <__cvt+0xba>
 8010594:	2200      	movs	r2, #0
 8010596:	2300      	movs	r3, #0
 8010598:	4630      	mov	r0, r6
 801059a:	4639      	mov	r1, r7
 801059c:	f7f0 fa9c 	bl	8000ad8 <__aeabi_dcmpeq>
 80105a0:	b918      	cbnz	r0, 80105aa <__cvt+0xba>
 80105a2:	f1c4 0401 	rsb	r4, r4, #1
 80105a6:	f8ca 4000 	str.w	r4, [sl]
 80105aa:	f8da 3000 	ldr.w	r3, [sl]
 80105ae:	4499      	add	r9, r3
 80105b0:	e7d3      	b.n	801055a <__cvt+0x6a>
 80105b2:	1c59      	adds	r1, r3, #1
 80105b4:	9103      	str	r1, [sp, #12]
 80105b6:	701a      	strb	r2, [r3, #0]
 80105b8:	e7d9      	b.n	801056e <__cvt+0x7e>

080105ba <__exponent>:
 80105ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80105bc:	2900      	cmp	r1, #0
 80105be:	bfba      	itte	lt
 80105c0:	4249      	neglt	r1, r1
 80105c2:	232d      	movlt	r3, #45	@ 0x2d
 80105c4:	232b      	movge	r3, #43	@ 0x2b
 80105c6:	2909      	cmp	r1, #9
 80105c8:	7002      	strb	r2, [r0, #0]
 80105ca:	7043      	strb	r3, [r0, #1]
 80105cc:	dd29      	ble.n	8010622 <__exponent+0x68>
 80105ce:	f10d 0307 	add.w	r3, sp, #7
 80105d2:	461d      	mov	r5, r3
 80105d4:	270a      	movs	r7, #10
 80105d6:	461a      	mov	r2, r3
 80105d8:	fbb1 f6f7 	udiv	r6, r1, r7
 80105dc:	fb07 1416 	mls	r4, r7, r6, r1
 80105e0:	3430      	adds	r4, #48	@ 0x30
 80105e2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80105e6:	460c      	mov	r4, r1
 80105e8:	2c63      	cmp	r4, #99	@ 0x63
 80105ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80105ee:	4631      	mov	r1, r6
 80105f0:	dcf1      	bgt.n	80105d6 <__exponent+0x1c>
 80105f2:	3130      	adds	r1, #48	@ 0x30
 80105f4:	1e94      	subs	r4, r2, #2
 80105f6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80105fa:	1c41      	adds	r1, r0, #1
 80105fc:	4623      	mov	r3, r4
 80105fe:	42ab      	cmp	r3, r5
 8010600:	d30a      	bcc.n	8010618 <__exponent+0x5e>
 8010602:	f10d 0309 	add.w	r3, sp, #9
 8010606:	1a9b      	subs	r3, r3, r2
 8010608:	42ac      	cmp	r4, r5
 801060a:	bf88      	it	hi
 801060c:	2300      	movhi	r3, #0
 801060e:	3302      	adds	r3, #2
 8010610:	4403      	add	r3, r0
 8010612:	1a18      	subs	r0, r3, r0
 8010614:	b003      	add	sp, #12
 8010616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010618:	f813 6b01 	ldrb.w	r6, [r3], #1
 801061c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010620:	e7ed      	b.n	80105fe <__exponent+0x44>
 8010622:	2330      	movs	r3, #48	@ 0x30
 8010624:	3130      	adds	r1, #48	@ 0x30
 8010626:	7083      	strb	r3, [r0, #2]
 8010628:	70c1      	strb	r1, [r0, #3]
 801062a:	1d03      	adds	r3, r0, #4
 801062c:	e7f1      	b.n	8010612 <__exponent+0x58>
	...

08010630 <_printf_float>:
 8010630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010634:	b08d      	sub	sp, #52	@ 0x34
 8010636:	460c      	mov	r4, r1
 8010638:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801063c:	4616      	mov	r6, r2
 801063e:	461f      	mov	r7, r3
 8010640:	4605      	mov	r5, r0
 8010642:	f000 fcc9 	bl	8010fd8 <_localeconv_r>
 8010646:	6803      	ldr	r3, [r0, #0]
 8010648:	9304      	str	r3, [sp, #16]
 801064a:	4618      	mov	r0, r3
 801064c:	f7ef fe18 	bl	8000280 <strlen>
 8010650:	2300      	movs	r3, #0
 8010652:	930a      	str	r3, [sp, #40]	@ 0x28
 8010654:	f8d8 3000 	ldr.w	r3, [r8]
 8010658:	9005      	str	r0, [sp, #20]
 801065a:	3307      	adds	r3, #7
 801065c:	f023 0307 	bic.w	r3, r3, #7
 8010660:	f103 0208 	add.w	r2, r3, #8
 8010664:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010668:	f8d4 b000 	ldr.w	fp, [r4]
 801066c:	f8c8 2000 	str.w	r2, [r8]
 8010670:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010674:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010678:	9307      	str	r3, [sp, #28]
 801067a:	f8cd 8018 	str.w	r8, [sp, #24]
 801067e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8010682:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010686:	4b9c      	ldr	r3, [pc, #624]	@ (80108f8 <_printf_float+0x2c8>)
 8010688:	f04f 32ff 	mov.w	r2, #4294967295
 801068c:	f7f0 fa56 	bl	8000b3c <__aeabi_dcmpun>
 8010690:	bb70      	cbnz	r0, 80106f0 <_printf_float+0xc0>
 8010692:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010696:	4b98      	ldr	r3, [pc, #608]	@ (80108f8 <_printf_float+0x2c8>)
 8010698:	f04f 32ff 	mov.w	r2, #4294967295
 801069c:	f7f0 fa30 	bl	8000b00 <__aeabi_dcmple>
 80106a0:	bb30      	cbnz	r0, 80106f0 <_printf_float+0xc0>
 80106a2:	2200      	movs	r2, #0
 80106a4:	2300      	movs	r3, #0
 80106a6:	4640      	mov	r0, r8
 80106a8:	4649      	mov	r1, r9
 80106aa:	f7f0 fa1f 	bl	8000aec <__aeabi_dcmplt>
 80106ae:	b110      	cbz	r0, 80106b6 <_printf_float+0x86>
 80106b0:	232d      	movs	r3, #45	@ 0x2d
 80106b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80106b6:	4a91      	ldr	r2, [pc, #580]	@ (80108fc <_printf_float+0x2cc>)
 80106b8:	4b91      	ldr	r3, [pc, #580]	@ (8010900 <_printf_float+0x2d0>)
 80106ba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80106be:	bf94      	ite	ls
 80106c0:	4690      	movls	r8, r2
 80106c2:	4698      	movhi	r8, r3
 80106c4:	2303      	movs	r3, #3
 80106c6:	6123      	str	r3, [r4, #16]
 80106c8:	f02b 0304 	bic.w	r3, fp, #4
 80106cc:	6023      	str	r3, [r4, #0]
 80106ce:	f04f 0900 	mov.w	r9, #0
 80106d2:	9700      	str	r7, [sp, #0]
 80106d4:	4633      	mov	r3, r6
 80106d6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80106d8:	4621      	mov	r1, r4
 80106da:	4628      	mov	r0, r5
 80106dc:	f000 f9d2 	bl	8010a84 <_printf_common>
 80106e0:	3001      	adds	r0, #1
 80106e2:	f040 808d 	bne.w	8010800 <_printf_float+0x1d0>
 80106e6:	f04f 30ff 	mov.w	r0, #4294967295
 80106ea:	b00d      	add	sp, #52	@ 0x34
 80106ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106f0:	4642      	mov	r2, r8
 80106f2:	464b      	mov	r3, r9
 80106f4:	4640      	mov	r0, r8
 80106f6:	4649      	mov	r1, r9
 80106f8:	f7f0 fa20 	bl	8000b3c <__aeabi_dcmpun>
 80106fc:	b140      	cbz	r0, 8010710 <_printf_float+0xe0>
 80106fe:	464b      	mov	r3, r9
 8010700:	2b00      	cmp	r3, #0
 8010702:	bfbc      	itt	lt
 8010704:	232d      	movlt	r3, #45	@ 0x2d
 8010706:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801070a:	4a7e      	ldr	r2, [pc, #504]	@ (8010904 <_printf_float+0x2d4>)
 801070c:	4b7e      	ldr	r3, [pc, #504]	@ (8010908 <_printf_float+0x2d8>)
 801070e:	e7d4      	b.n	80106ba <_printf_float+0x8a>
 8010710:	6863      	ldr	r3, [r4, #4]
 8010712:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8010716:	9206      	str	r2, [sp, #24]
 8010718:	1c5a      	adds	r2, r3, #1
 801071a:	d13b      	bne.n	8010794 <_printf_float+0x164>
 801071c:	2306      	movs	r3, #6
 801071e:	6063      	str	r3, [r4, #4]
 8010720:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8010724:	2300      	movs	r3, #0
 8010726:	6022      	str	r2, [r4, #0]
 8010728:	9303      	str	r3, [sp, #12]
 801072a:	ab0a      	add	r3, sp, #40	@ 0x28
 801072c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010730:	ab09      	add	r3, sp, #36	@ 0x24
 8010732:	9300      	str	r3, [sp, #0]
 8010734:	6861      	ldr	r1, [r4, #4]
 8010736:	ec49 8b10 	vmov	d0, r8, r9
 801073a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801073e:	4628      	mov	r0, r5
 8010740:	f7ff fed6 	bl	80104f0 <__cvt>
 8010744:	9b06      	ldr	r3, [sp, #24]
 8010746:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010748:	2b47      	cmp	r3, #71	@ 0x47
 801074a:	4680      	mov	r8, r0
 801074c:	d129      	bne.n	80107a2 <_printf_float+0x172>
 801074e:	1cc8      	adds	r0, r1, #3
 8010750:	db02      	blt.n	8010758 <_printf_float+0x128>
 8010752:	6863      	ldr	r3, [r4, #4]
 8010754:	4299      	cmp	r1, r3
 8010756:	dd41      	ble.n	80107dc <_printf_float+0x1ac>
 8010758:	f1aa 0a02 	sub.w	sl, sl, #2
 801075c:	fa5f fa8a 	uxtb.w	sl, sl
 8010760:	3901      	subs	r1, #1
 8010762:	4652      	mov	r2, sl
 8010764:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010768:	9109      	str	r1, [sp, #36]	@ 0x24
 801076a:	f7ff ff26 	bl	80105ba <__exponent>
 801076e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010770:	1813      	adds	r3, r2, r0
 8010772:	2a01      	cmp	r2, #1
 8010774:	4681      	mov	r9, r0
 8010776:	6123      	str	r3, [r4, #16]
 8010778:	dc02      	bgt.n	8010780 <_printf_float+0x150>
 801077a:	6822      	ldr	r2, [r4, #0]
 801077c:	07d2      	lsls	r2, r2, #31
 801077e:	d501      	bpl.n	8010784 <_printf_float+0x154>
 8010780:	3301      	adds	r3, #1
 8010782:	6123      	str	r3, [r4, #16]
 8010784:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010788:	2b00      	cmp	r3, #0
 801078a:	d0a2      	beq.n	80106d2 <_printf_float+0xa2>
 801078c:	232d      	movs	r3, #45	@ 0x2d
 801078e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010792:	e79e      	b.n	80106d2 <_printf_float+0xa2>
 8010794:	9a06      	ldr	r2, [sp, #24]
 8010796:	2a47      	cmp	r2, #71	@ 0x47
 8010798:	d1c2      	bne.n	8010720 <_printf_float+0xf0>
 801079a:	2b00      	cmp	r3, #0
 801079c:	d1c0      	bne.n	8010720 <_printf_float+0xf0>
 801079e:	2301      	movs	r3, #1
 80107a0:	e7bd      	b.n	801071e <_printf_float+0xee>
 80107a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80107a6:	d9db      	bls.n	8010760 <_printf_float+0x130>
 80107a8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80107ac:	d118      	bne.n	80107e0 <_printf_float+0x1b0>
 80107ae:	2900      	cmp	r1, #0
 80107b0:	6863      	ldr	r3, [r4, #4]
 80107b2:	dd0b      	ble.n	80107cc <_printf_float+0x19c>
 80107b4:	6121      	str	r1, [r4, #16]
 80107b6:	b913      	cbnz	r3, 80107be <_printf_float+0x18e>
 80107b8:	6822      	ldr	r2, [r4, #0]
 80107ba:	07d0      	lsls	r0, r2, #31
 80107bc:	d502      	bpl.n	80107c4 <_printf_float+0x194>
 80107be:	3301      	adds	r3, #1
 80107c0:	440b      	add	r3, r1
 80107c2:	6123      	str	r3, [r4, #16]
 80107c4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80107c6:	f04f 0900 	mov.w	r9, #0
 80107ca:	e7db      	b.n	8010784 <_printf_float+0x154>
 80107cc:	b913      	cbnz	r3, 80107d4 <_printf_float+0x1a4>
 80107ce:	6822      	ldr	r2, [r4, #0]
 80107d0:	07d2      	lsls	r2, r2, #31
 80107d2:	d501      	bpl.n	80107d8 <_printf_float+0x1a8>
 80107d4:	3302      	adds	r3, #2
 80107d6:	e7f4      	b.n	80107c2 <_printf_float+0x192>
 80107d8:	2301      	movs	r3, #1
 80107da:	e7f2      	b.n	80107c2 <_printf_float+0x192>
 80107dc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80107e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80107e2:	4299      	cmp	r1, r3
 80107e4:	db05      	blt.n	80107f2 <_printf_float+0x1c2>
 80107e6:	6823      	ldr	r3, [r4, #0]
 80107e8:	6121      	str	r1, [r4, #16]
 80107ea:	07d8      	lsls	r0, r3, #31
 80107ec:	d5ea      	bpl.n	80107c4 <_printf_float+0x194>
 80107ee:	1c4b      	adds	r3, r1, #1
 80107f0:	e7e7      	b.n	80107c2 <_printf_float+0x192>
 80107f2:	2900      	cmp	r1, #0
 80107f4:	bfd4      	ite	le
 80107f6:	f1c1 0202 	rsble	r2, r1, #2
 80107fa:	2201      	movgt	r2, #1
 80107fc:	4413      	add	r3, r2
 80107fe:	e7e0      	b.n	80107c2 <_printf_float+0x192>
 8010800:	6823      	ldr	r3, [r4, #0]
 8010802:	055a      	lsls	r2, r3, #21
 8010804:	d407      	bmi.n	8010816 <_printf_float+0x1e6>
 8010806:	6923      	ldr	r3, [r4, #16]
 8010808:	4642      	mov	r2, r8
 801080a:	4631      	mov	r1, r6
 801080c:	4628      	mov	r0, r5
 801080e:	47b8      	blx	r7
 8010810:	3001      	adds	r0, #1
 8010812:	d12b      	bne.n	801086c <_printf_float+0x23c>
 8010814:	e767      	b.n	80106e6 <_printf_float+0xb6>
 8010816:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801081a:	f240 80dd 	bls.w	80109d8 <_printf_float+0x3a8>
 801081e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010822:	2200      	movs	r2, #0
 8010824:	2300      	movs	r3, #0
 8010826:	f7f0 f957 	bl	8000ad8 <__aeabi_dcmpeq>
 801082a:	2800      	cmp	r0, #0
 801082c:	d033      	beq.n	8010896 <_printf_float+0x266>
 801082e:	4a37      	ldr	r2, [pc, #220]	@ (801090c <_printf_float+0x2dc>)
 8010830:	2301      	movs	r3, #1
 8010832:	4631      	mov	r1, r6
 8010834:	4628      	mov	r0, r5
 8010836:	47b8      	blx	r7
 8010838:	3001      	adds	r0, #1
 801083a:	f43f af54 	beq.w	80106e6 <_printf_float+0xb6>
 801083e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010842:	4543      	cmp	r3, r8
 8010844:	db02      	blt.n	801084c <_printf_float+0x21c>
 8010846:	6823      	ldr	r3, [r4, #0]
 8010848:	07d8      	lsls	r0, r3, #31
 801084a:	d50f      	bpl.n	801086c <_printf_float+0x23c>
 801084c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010850:	4631      	mov	r1, r6
 8010852:	4628      	mov	r0, r5
 8010854:	47b8      	blx	r7
 8010856:	3001      	adds	r0, #1
 8010858:	f43f af45 	beq.w	80106e6 <_printf_float+0xb6>
 801085c:	f04f 0900 	mov.w	r9, #0
 8010860:	f108 38ff 	add.w	r8, r8, #4294967295
 8010864:	f104 0a1a 	add.w	sl, r4, #26
 8010868:	45c8      	cmp	r8, r9
 801086a:	dc09      	bgt.n	8010880 <_printf_float+0x250>
 801086c:	6823      	ldr	r3, [r4, #0]
 801086e:	079b      	lsls	r3, r3, #30
 8010870:	f100 8103 	bmi.w	8010a7a <_printf_float+0x44a>
 8010874:	68e0      	ldr	r0, [r4, #12]
 8010876:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010878:	4298      	cmp	r0, r3
 801087a:	bfb8      	it	lt
 801087c:	4618      	movlt	r0, r3
 801087e:	e734      	b.n	80106ea <_printf_float+0xba>
 8010880:	2301      	movs	r3, #1
 8010882:	4652      	mov	r2, sl
 8010884:	4631      	mov	r1, r6
 8010886:	4628      	mov	r0, r5
 8010888:	47b8      	blx	r7
 801088a:	3001      	adds	r0, #1
 801088c:	f43f af2b 	beq.w	80106e6 <_printf_float+0xb6>
 8010890:	f109 0901 	add.w	r9, r9, #1
 8010894:	e7e8      	b.n	8010868 <_printf_float+0x238>
 8010896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010898:	2b00      	cmp	r3, #0
 801089a:	dc39      	bgt.n	8010910 <_printf_float+0x2e0>
 801089c:	4a1b      	ldr	r2, [pc, #108]	@ (801090c <_printf_float+0x2dc>)
 801089e:	2301      	movs	r3, #1
 80108a0:	4631      	mov	r1, r6
 80108a2:	4628      	mov	r0, r5
 80108a4:	47b8      	blx	r7
 80108a6:	3001      	adds	r0, #1
 80108a8:	f43f af1d 	beq.w	80106e6 <_printf_float+0xb6>
 80108ac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80108b0:	ea59 0303 	orrs.w	r3, r9, r3
 80108b4:	d102      	bne.n	80108bc <_printf_float+0x28c>
 80108b6:	6823      	ldr	r3, [r4, #0]
 80108b8:	07d9      	lsls	r1, r3, #31
 80108ba:	d5d7      	bpl.n	801086c <_printf_float+0x23c>
 80108bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80108c0:	4631      	mov	r1, r6
 80108c2:	4628      	mov	r0, r5
 80108c4:	47b8      	blx	r7
 80108c6:	3001      	adds	r0, #1
 80108c8:	f43f af0d 	beq.w	80106e6 <_printf_float+0xb6>
 80108cc:	f04f 0a00 	mov.w	sl, #0
 80108d0:	f104 0b1a 	add.w	fp, r4, #26
 80108d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108d6:	425b      	negs	r3, r3
 80108d8:	4553      	cmp	r3, sl
 80108da:	dc01      	bgt.n	80108e0 <_printf_float+0x2b0>
 80108dc:	464b      	mov	r3, r9
 80108de:	e793      	b.n	8010808 <_printf_float+0x1d8>
 80108e0:	2301      	movs	r3, #1
 80108e2:	465a      	mov	r2, fp
 80108e4:	4631      	mov	r1, r6
 80108e6:	4628      	mov	r0, r5
 80108e8:	47b8      	blx	r7
 80108ea:	3001      	adds	r0, #1
 80108ec:	f43f aefb 	beq.w	80106e6 <_printf_float+0xb6>
 80108f0:	f10a 0a01 	add.w	sl, sl, #1
 80108f4:	e7ee      	b.n	80108d4 <_printf_float+0x2a4>
 80108f6:	bf00      	nop
 80108f8:	7fefffff 	.word	0x7fefffff
 80108fc:	080136dc 	.word	0x080136dc
 8010900:	080136e0 	.word	0x080136e0
 8010904:	080136e4 	.word	0x080136e4
 8010908:	080136e8 	.word	0x080136e8
 801090c:	080136ec 	.word	0x080136ec
 8010910:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010912:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010916:	4553      	cmp	r3, sl
 8010918:	bfa8      	it	ge
 801091a:	4653      	movge	r3, sl
 801091c:	2b00      	cmp	r3, #0
 801091e:	4699      	mov	r9, r3
 8010920:	dc36      	bgt.n	8010990 <_printf_float+0x360>
 8010922:	f04f 0b00 	mov.w	fp, #0
 8010926:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801092a:	f104 021a 	add.w	r2, r4, #26
 801092e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010930:	9306      	str	r3, [sp, #24]
 8010932:	eba3 0309 	sub.w	r3, r3, r9
 8010936:	455b      	cmp	r3, fp
 8010938:	dc31      	bgt.n	801099e <_printf_float+0x36e>
 801093a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801093c:	459a      	cmp	sl, r3
 801093e:	dc3a      	bgt.n	80109b6 <_printf_float+0x386>
 8010940:	6823      	ldr	r3, [r4, #0]
 8010942:	07da      	lsls	r2, r3, #31
 8010944:	d437      	bmi.n	80109b6 <_printf_float+0x386>
 8010946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010948:	ebaa 0903 	sub.w	r9, sl, r3
 801094c:	9b06      	ldr	r3, [sp, #24]
 801094e:	ebaa 0303 	sub.w	r3, sl, r3
 8010952:	4599      	cmp	r9, r3
 8010954:	bfa8      	it	ge
 8010956:	4699      	movge	r9, r3
 8010958:	f1b9 0f00 	cmp.w	r9, #0
 801095c:	dc33      	bgt.n	80109c6 <_printf_float+0x396>
 801095e:	f04f 0800 	mov.w	r8, #0
 8010962:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010966:	f104 0b1a 	add.w	fp, r4, #26
 801096a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801096c:	ebaa 0303 	sub.w	r3, sl, r3
 8010970:	eba3 0309 	sub.w	r3, r3, r9
 8010974:	4543      	cmp	r3, r8
 8010976:	f77f af79 	ble.w	801086c <_printf_float+0x23c>
 801097a:	2301      	movs	r3, #1
 801097c:	465a      	mov	r2, fp
 801097e:	4631      	mov	r1, r6
 8010980:	4628      	mov	r0, r5
 8010982:	47b8      	blx	r7
 8010984:	3001      	adds	r0, #1
 8010986:	f43f aeae 	beq.w	80106e6 <_printf_float+0xb6>
 801098a:	f108 0801 	add.w	r8, r8, #1
 801098e:	e7ec      	b.n	801096a <_printf_float+0x33a>
 8010990:	4642      	mov	r2, r8
 8010992:	4631      	mov	r1, r6
 8010994:	4628      	mov	r0, r5
 8010996:	47b8      	blx	r7
 8010998:	3001      	adds	r0, #1
 801099a:	d1c2      	bne.n	8010922 <_printf_float+0x2f2>
 801099c:	e6a3      	b.n	80106e6 <_printf_float+0xb6>
 801099e:	2301      	movs	r3, #1
 80109a0:	4631      	mov	r1, r6
 80109a2:	4628      	mov	r0, r5
 80109a4:	9206      	str	r2, [sp, #24]
 80109a6:	47b8      	blx	r7
 80109a8:	3001      	adds	r0, #1
 80109aa:	f43f ae9c 	beq.w	80106e6 <_printf_float+0xb6>
 80109ae:	9a06      	ldr	r2, [sp, #24]
 80109b0:	f10b 0b01 	add.w	fp, fp, #1
 80109b4:	e7bb      	b.n	801092e <_printf_float+0x2fe>
 80109b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80109ba:	4631      	mov	r1, r6
 80109bc:	4628      	mov	r0, r5
 80109be:	47b8      	blx	r7
 80109c0:	3001      	adds	r0, #1
 80109c2:	d1c0      	bne.n	8010946 <_printf_float+0x316>
 80109c4:	e68f      	b.n	80106e6 <_printf_float+0xb6>
 80109c6:	9a06      	ldr	r2, [sp, #24]
 80109c8:	464b      	mov	r3, r9
 80109ca:	4442      	add	r2, r8
 80109cc:	4631      	mov	r1, r6
 80109ce:	4628      	mov	r0, r5
 80109d0:	47b8      	blx	r7
 80109d2:	3001      	adds	r0, #1
 80109d4:	d1c3      	bne.n	801095e <_printf_float+0x32e>
 80109d6:	e686      	b.n	80106e6 <_printf_float+0xb6>
 80109d8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80109dc:	f1ba 0f01 	cmp.w	sl, #1
 80109e0:	dc01      	bgt.n	80109e6 <_printf_float+0x3b6>
 80109e2:	07db      	lsls	r3, r3, #31
 80109e4:	d536      	bpl.n	8010a54 <_printf_float+0x424>
 80109e6:	2301      	movs	r3, #1
 80109e8:	4642      	mov	r2, r8
 80109ea:	4631      	mov	r1, r6
 80109ec:	4628      	mov	r0, r5
 80109ee:	47b8      	blx	r7
 80109f0:	3001      	adds	r0, #1
 80109f2:	f43f ae78 	beq.w	80106e6 <_printf_float+0xb6>
 80109f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80109fa:	4631      	mov	r1, r6
 80109fc:	4628      	mov	r0, r5
 80109fe:	47b8      	blx	r7
 8010a00:	3001      	adds	r0, #1
 8010a02:	f43f ae70 	beq.w	80106e6 <_printf_float+0xb6>
 8010a06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010a12:	f7f0 f861 	bl	8000ad8 <__aeabi_dcmpeq>
 8010a16:	b9c0      	cbnz	r0, 8010a4a <_printf_float+0x41a>
 8010a18:	4653      	mov	r3, sl
 8010a1a:	f108 0201 	add.w	r2, r8, #1
 8010a1e:	4631      	mov	r1, r6
 8010a20:	4628      	mov	r0, r5
 8010a22:	47b8      	blx	r7
 8010a24:	3001      	adds	r0, #1
 8010a26:	d10c      	bne.n	8010a42 <_printf_float+0x412>
 8010a28:	e65d      	b.n	80106e6 <_printf_float+0xb6>
 8010a2a:	2301      	movs	r3, #1
 8010a2c:	465a      	mov	r2, fp
 8010a2e:	4631      	mov	r1, r6
 8010a30:	4628      	mov	r0, r5
 8010a32:	47b8      	blx	r7
 8010a34:	3001      	adds	r0, #1
 8010a36:	f43f ae56 	beq.w	80106e6 <_printf_float+0xb6>
 8010a3a:	f108 0801 	add.w	r8, r8, #1
 8010a3e:	45d0      	cmp	r8, sl
 8010a40:	dbf3      	blt.n	8010a2a <_printf_float+0x3fa>
 8010a42:	464b      	mov	r3, r9
 8010a44:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010a48:	e6df      	b.n	801080a <_printf_float+0x1da>
 8010a4a:	f04f 0800 	mov.w	r8, #0
 8010a4e:	f104 0b1a 	add.w	fp, r4, #26
 8010a52:	e7f4      	b.n	8010a3e <_printf_float+0x40e>
 8010a54:	2301      	movs	r3, #1
 8010a56:	4642      	mov	r2, r8
 8010a58:	e7e1      	b.n	8010a1e <_printf_float+0x3ee>
 8010a5a:	2301      	movs	r3, #1
 8010a5c:	464a      	mov	r2, r9
 8010a5e:	4631      	mov	r1, r6
 8010a60:	4628      	mov	r0, r5
 8010a62:	47b8      	blx	r7
 8010a64:	3001      	adds	r0, #1
 8010a66:	f43f ae3e 	beq.w	80106e6 <_printf_float+0xb6>
 8010a6a:	f108 0801 	add.w	r8, r8, #1
 8010a6e:	68e3      	ldr	r3, [r4, #12]
 8010a70:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010a72:	1a5b      	subs	r3, r3, r1
 8010a74:	4543      	cmp	r3, r8
 8010a76:	dcf0      	bgt.n	8010a5a <_printf_float+0x42a>
 8010a78:	e6fc      	b.n	8010874 <_printf_float+0x244>
 8010a7a:	f04f 0800 	mov.w	r8, #0
 8010a7e:	f104 0919 	add.w	r9, r4, #25
 8010a82:	e7f4      	b.n	8010a6e <_printf_float+0x43e>

08010a84 <_printf_common>:
 8010a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a88:	4616      	mov	r6, r2
 8010a8a:	4698      	mov	r8, r3
 8010a8c:	688a      	ldr	r2, [r1, #8]
 8010a8e:	690b      	ldr	r3, [r1, #16]
 8010a90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010a94:	4293      	cmp	r3, r2
 8010a96:	bfb8      	it	lt
 8010a98:	4613      	movlt	r3, r2
 8010a9a:	6033      	str	r3, [r6, #0]
 8010a9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010aa0:	4607      	mov	r7, r0
 8010aa2:	460c      	mov	r4, r1
 8010aa4:	b10a      	cbz	r2, 8010aaa <_printf_common+0x26>
 8010aa6:	3301      	adds	r3, #1
 8010aa8:	6033      	str	r3, [r6, #0]
 8010aaa:	6823      	ldr	r3, [r4, #0]
 8010aac:	0699      	lsls	r1, r3, #26
 8010aae:	bf42      	ittt	mi
 8010ab0:	6833      	ldrmi	r3, [r6, #0]
 8010ab2:	3302      	addmi	r3, #2
 8010ab4:	6033      	strmi	r3, [r6, #0]
 8010ab6:	6825      	ldr	r5, [r4, #0]
 8010ab8:	f015 0506 	ands.w	r5, r5, #6
 8010abc:	d106      	bne.n	8010acc <_printf_common+0x48>
 8010abe:	f104 0a19 	add.w	sl, r4, #25
 8010ac2:	68e3      	ldr	r3, [r4, #12]
 8010ac4:	6832      	ldr	r2, [r6, #0]
 8010ac6:	1a9b      	subs	r3, r3, r2
 8010ac8:	42ab      	cmp	r3, r5
 8010aca:	dc26      	bgt.n	8010b1a <_printf_common+0x96>
 8010acc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010ad0:	6822      	ldr	r2, [r4, #0]
 8010ad2:	3b00      	subs	r3, #0
 8010ad4:	bf18      	it	ne
 8010ad6:	2301      	movne	r3, #1
 8010ad8:	0692      	lsls	r2, r2, #26
 8010ada:	d42b      	bmi.n	8010b34 <_printf_common+0xb0>
 8010adc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010ae0:	4641      	mov	r1, r8
 8010ae2:	4638      	mov	r0, r7
 8010ae4:	47c8      	blx	r9
 8010ae6:	3001      	adds	r0, #1
 8010ae8:	d01e      	beq.n	8010b28 <_printf_common+0xa4>
 8010aea:	6823      	ldr	r3, [r4, #0]
 8010aec:	6922      	ldr	r2, [r4, #16]
 8010aee:	f003 0306 	and.w	r3, r3, #6
 8010af2:	2b04      	cmp	r3, #4
 8010af4:	bf02      	ittt	eq
 8010af6:	68e5      	ldreq	r5, [r4, #12]
 8010af8:	6833      	ldreq	r3, [r6, #0]
 8010afa:	1aed      	subeq	r5, r5, r3
 8010afc:	68a3      	ldr	r3, [r4, #8]
 8010afe:	bf0c      	ite	eq
 8010b00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010b04:	2500      	movne	r5, #0
 8010b06:	4293      	cmp	r3, r2
 8010b08:	bfc4      	itt	gt
 8010b0a:	1a9b      	subgt	r3, r3, r2
 8010b0c:	18ed      	addgt	r5, r5, r3
 8010b0e:	2600      	movs	r6, #0
 8010b10:	341a      	adds	r4, #26
 8010b12:	42b5      	cmp	r5, r6
 8010b14:	d11a      	bne.n	8010b4c <_printf_common+0xc8>
 8010b16:	2000      	movs	r0, #0
 8010b18:	e008      	b.n	8010b2c <_printf_common+0xa8>
 8010b1a:	2301      	movs	r3, #1
 8010b1c:	4652      	mov	r2, sl
 8010b1e:	4641      	mov	r1, r8
 8010b20:	4638      	mov	r0, r7
 8010b22:	47c8      	blx	r9
 8010b24:	3001      	adds	r0, #1
 8010b26:	d103      	bne.n	8010b30 <_printf_common+0xac>
 8010b28:	f04f 30ff 	mov.w	r0, #4294967295
 8010b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b30:	3501      	adds	r5, #1
 8010b32:	e7c6      	b.n	8010ac2 <_printf_common+0x3e>
 8010b34:	18e1      	adds	r1, r4, r3
 8010b36:	1c5a      	adds	r2, r3, #1
 8010b38:	2030      	movs	r0, #48	@ 0x30
 8010b3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010b3e:	4422      	add	r2, r4
 8010b40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010b44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010b48:	3302      	adds	r3, #2
 8010b4a:	e7c7      	b.n	8010adc <_printf_common+0x58>
 8010b4c:	2301      	movs	r3, #1
 8010b4e:	4622      	mov	r2, r4
 8010b50:	4641      	mov	r1, r8
 8010b52:	4638      	mov	r0, r7
 8010b54:	47c8      	blx	r9
 8010b56:	3001      	adds	r0, #1
 8010b58:	d0e6      	beq.n	8010b28 <_printf_common+0xa4>
 8010b5a:	3601      	adds	r6, #1
 8010b5c:	e7d9      	b.n	8010b12 <_printf_common+0x8e>
	...

08010b60 <_printf_i>:
 8010b60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010b64:	7e0f      	ldrb	r7, [r1, #24]
 8010b66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010b68:	2f78      	cmp	r7, #120	@ 0x78
 8010b6a:	4691      	mov	r9, r2
 8010b6c:	4680      	mov	r8, r0
 8010b6e:	460c      	mov	r4, r1
 8010b70:	469a      	mov	sl, r3
 8010b72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010b76:	d807      	bhi.n	8010b88 <_printf_i+0x28>
 8010b78:	2f62      	cmp	r7, #98	@ 0x62
 8010b7a:	d80a      	bhi.n	8010b92 <_printf_i+0x32>
 8010b7c:	2f00      	cmp	r7, #0
 8010b7e:	f000 80d2 	beq.w	8010d26 <_printf_i+0x1c6>
 8010b82:	2f58      	cmp	r7, #88	@ 0x58
 8010b84:	f000 80b9 	beq.w	8010cfa <_printf_i+0x19a>
 8010b88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010b8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010b90:	e03a      	b.n	8010c08 <_printf_i+0xa8>
 8010b92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010b96:	2b15      	cmp	r3, #21
 8010b98:	d8f6      	bhi.n	8010b88 <_printf_i+0x28>
 8010b9a:	a101      	add	r1, pc, #4	@ (adr r1, 8010ba0 <_printf_i+0x40>)
 8010b9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010ba0:	08010bf9 	.word	0x08010bf9
 8010ba4:	08010c0d 	.word	0x08010c0d
 8010ba8:	08010b89 	.word	0x08010b89
 8010bac:	08010b89 	.word	0x08010b89
 8010bb0:	08010b89 	.word	0x08010b89
 8010bb4:	08010b89 	.word	0x08010b89
 8010bb8:	08010c0d 	.word	0x08010c0d
 8010bbc:	08010b89 	.word	0x08010b89
 8010bc0:	08010b89 	.word	0x08010b89
 8010bc4:	08010b89 	.word	0x08010b89
 8010bc8:	08010b89 	.word	0x08010b89
 8010bcc:	08010d0d 	.word	0x08010d0d
 8010bd0:	08010c37 	.word	0x08010c37
 8010bd4:	08010cc7 	.word	0x08010cc7
 8010bd8:	08010b89 	.word	0x08010b89
 8010bdc:	08010b89 	.word	0x08010b89
 8010be0:	08010d2f 	.word	0x08010d2f
 8010be4:	08010b89 	.word	0x08010b89
 8010be8:	08010c37 	.word	0x08010c37
 8010bec:	08010b89 	.word	0x08010b89
 8010bf0:	08010b89 	.word	0x08010b89
 8010bf4:	08010ccf 	.word	0x08010ccf
 8010bf8:	6833      	ldr	r3, [r6, #0]
 8010bfa:	1d1a      	adds	r2, r3, #4
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	6032      	str	r2, [r6, #0]
 8010c00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010c04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010c08:	2301      	movs	r3, #1
 8010c0a:	e09d      	b.n	8010d48 <_printf_i+0x1e8>
 8010c0c:	6833      	ldr	r3, [r6, #0]
 8010c0e:	6820      	ldr	r0, [r4, #0]
 8010c10:	1d19      	adds	r1, r3, #4
 8010c12:	6031      	str	r1, [r6, #0]
 8010c14:	0606      	lsls	r6, r0, #24
 8010c16:	d501      	bpl.n	8010c1c <_printf_i+0xbc>
 8010c18:	681d      	ldr	r5, [r3, #0]
 8010c1a:	e003      	b.n	8010c24 <_printf_i+0xc4>
 8010c1c:	0645      	lsls	r5, r0, #25
 8010c1e:	d5fb      	bpl.n	8010c18 <_printf_i+0xb8>
 8010c20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010c24:	2d00      	cmp	r5, #0
 8010c26:	da03      	bge.n	8010c30 <_printf_i+0xd0>
 8010c28:	232d      	movs	r3, #45	@ 0x2d
 8010c2a:	426d      	negs	r5, r5
 8010c2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010c30:	4859      	ldr	r0, [pc, #356]	@ (8010d98 <_printf_i+0x238>)
 8010c32:	230a      	movs	r3, #10
 8010c34:	e011      	b.n	8010c5a <_printf_i+0xfa>
 8010c36:	6821      	ldr	r1, [r4, #0]
 8010c38:	6833      	ldr	r3, [r6, #0]
 8010c3a:	0608      	lsls	r0, r1, #24
 8010c3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8010c40:	d402      	bmi.n	8010c48 <_printf_i+0xe8>
 8010c42:	0649      	lsls	r1, r1, #25
 8010c44:	bf48      	it	mi
 8010c46:	b2ad      	uxthmi	r5, r5
 8010c48:	2f6f      	cmp	r7, #111	@ 0x6f
 8010c4a:	4853      	ldr	r0, [pc, #332]	@ (8010d98 <_printf_i+0x238>)
 8010c4c:	6033      	str	r3, [r6, #0]
 8010c4e:	bf14      	ite	ne
 8010c50:	230a      	movne	r3, #10
 8010c52:	2308      	moveq	r3, #8
 8010c54:	2100      	movs	r1, #0
 8010c56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010c5a:	6866      	ldr	r6, [r4, #4]
 8010c5c:	60a6      	str	r6, [r4, #8]
 8010c5e:	2e00      	cmp	r6, #0
 8010c60:	bfa2      	ittt	ge
 8010c62:	6821      	ldrge	r1, [r4, #0]
 8010c64:	f021 0104 	bicge.w	r1, r1, #4
 8010c68:	6021      	strge	r1, [r4, #0]
 8010c6a:	b90d      	cbnz	r5, 8010c70 <_printf_i+0x110>
 8010c6c:	2e00      	cmp	r6, #0
 8010c6e:	d04b      	beq.n	8010d08 <_printf_i+0x1a8>
 8010c70:	4616      	mov	r6, r2
 8010c72:	fbb5 f1f3 	udiv	r1, r5, r3
 8010c76:	fb03 5711 	mls	r7, r3, r1, r5
 8010c7a:	5dc7      	ldrb	r7, [r0, r7]
 8010c7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010c80:	462f      	mov	r7, r5
 8010c82:	42bb      	cmp	r3, r7
 8010c84:	460d      	mov	r5, r1
 8010c86:	d9f4      	bls.n	8010c72 <_printf_i+0x112>
 8010c88:	2b08      	cmp	r3, #8
 8010c8a:	d10b      	bne.n	8010ca4 <_printf_i+0x144>
 8010c8c:	6823      	ldr	r3, [r4, #0]
 8010c8e:	07df      	lsls	r7, r3, #31
 8010c90:	d508      	bpl.n	8010ca4 <_printf_i+0x144>
 8010c92:	6923      	ldr	r3, [r4, #16]
 8010c94:	6861      	ldr	r1, [r4, #4]
 8010c96:	4299      	cmp	r1, r3
 8010c98:	bfde      	ittt	le
 8010c9a:	2330      	movle	r3, #48	@ 0x30
 8010c9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010ca0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010ca4:	1b92      	subs	r2, r2, r6
 8010ca6:	6122      	str	r2, [r4, #16]
 8010ca8:	f8cd a000 	str.w	sl, [sp]
 8010cac:	464b      	mov	r3, r9
 8010cae:	aa03      	add	r2, sp, #12
 8010cb0:	4621      	mov	r1, r4
 8010cb2:	4640      	mov	r0, r8
 8010cb4:	f7ff fee6 	bl	8010a84 <_printf_common>
 8010cb8:	3001      	adds	r0, #1
 8010cba:	d14a      	bne.n	8010d52 <_printf_i+0x1f2>
 8010cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8010cc0:	b004      	add	sp, #16
 8010cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cc6:	6823      	ldr	r3, [r4, #0]
 8010cc8:	f043 0320 	orr.w	r3, r3, #32
 8010ccc:	6023      	str	r3, [r4, #0]
 8010cce:	4833      	ldr	r0, [pc, #204]	@ (8010d9c <_printf_i+0x23c>)
 8010cd0:	2778      	movs	r7, #120	@ 0x78
 8010cd2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010cd6:	6823      	ldr	r3, [r4, #0]
 8010cd8:	6831      	ldr	r1, [r6, #0]
 8010cda:	061f      	lsls	r7, r3, #24
 8010cdc:	f851 5b04 	ldr.w	r5, [r1], #4
 8010ce0:	d402      	bmi.n	8010ce8 <_printf_i+0x188>
 8010ce2:	065f      	lsls	r7, r3, #25
 8010ce4:	bf48      	it	mi
 8010ce6:	b2ad      	uxthmi	r5, r5
 8010ce8:	6031      	str	r1, [r6, #0]
 8010cea:	07d9      	lsls	r1, r3, #31
 8010cec:	bf44      	itt	mi
 8010cee:	f043 0320 	orrmi.w	r3, r3, #32
 8010cf2:	6023      	strmi	r3, [r4, #0]
 8010cf4:	b11d      	cbz	r5, 8010cfe <_printf_i+0x19e>
 8010cf6:	2310      	movs	r3, #16
 8010cf8:	e7ac      	b.n	8010c54 <_printf_i+0xf4>
 8010cfa:	4827      	ldr	r0, [pc, #156]	@ (8010d98 <_printf_i+0x238>)
 8010cfc:	e7e9      	b.n	8010cd2 <_printf_i+0x172>
 8010cfe:	6823      	ldr	r3, [r4, #0]
 8010d00:	f023 0320 	bic.w	r3, r3, #32
 8010d04:	6023      	str	r3, [r4, #0]
 8010d06:	e7f6      	b.n	8010cf6 <_printf_i+0x196>
 8010d08:	4616      	mov	r6, r2
 8010d0a:	e7bd      	b.n	8010c88 <_printf_i+0x128>
 8010d0c:	6833      	ldr	r3, [r6, #0]
 8010d0e:	6825      	ldr	r5, [r4, #0]
 8010d10:	6961      	ldr	r1, [r4, #20]
 8010d12:	1d18      	adds	r0, r3, #4
 8010d14:	6030      	str	r0, [r6, #0]
 8010d16:	062e      	lsls	r6, r5, #24
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	d501      	bpl.n	8010d20 <_printf_i+0x1c0>
 8010d1c:	6019      	str	r1, [r3, #0]
 8010d1e:	e002      	b.n	8010d26 <_printf_i+0x1c6>
 8010d20:	0668      	lsls	r0, r5, #25
 8010d22:	d5fb      	bpl.n	8010d1c <_printf_i+0x1bc>
 8010d24:	8019      	strh	r1, [r3, #0]
 8010d26:	2300      	movs	r3, #0
 8010d28:	6123      	str	r3, [r4, #16]
 8010d2a:	4616      	mov	r6, r2
 8010d2c:	e7bc      	b.n	8010ca8 <_printf_i+0x148>
 8010d2e:	6833      	ldr	r3, [r6, #0]
 8010d30:	1d1a      	adds	r2, r3, #4
 8010d32:	6032      	str	r2, [r6, #0]
 8010d34:	681e      	ldr	r6, [r3, #0]
 8010d36:	6862      	ldr	r2, [r4, #4]
 8010d38:	2100      	movs	r1, #0
 8010d3a:	4630      	mov	r0, r6
 8010d3c:	f7ef fa50 	bl	80001e0 <memchr>
 8010d40:	b108      	cbz	r0, 8010d46 <_printf_i+0x1e6>
 8010d42:	1b80      	subs	r0, r0, r6
 8010d44:	6060      	str	r0, [r4, #4]
 8010d46:	6863      	ldr	r3, [r4, #4]
 8010d48:	6123      	str	r3, [r4, #16]
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010d50:	e7aa      	b.n	8010ca8 <_printf_i+0x148>
 8010d52:	6923      	ldr	r3, [r4, #16]
 8010d54:	4632      	mov	r2, r6
 8010d56:	4649      	mov	r1, r9
 8010d58:	4640      	mov	r0, r8
 8010d5a:	47d0      	blx	sl
 8010d5c:	3001      	adds	r0, #1
 8010d5e:	d0ad      	beq.n	8010cbc <_printf_i+0x15c>
 8010d60:	6823      	ldr	r3, [r4, #0]
 8010d62:	079b      	lsls	r3, r3, #30
 8010d64:	d413      	bmi.n	8010d8e <_printf_i+0x22e>
 8010d66:	68e0      	ldr	r0, [r4, #12]
 8010d68:	9b03      	ldr	r3, [sp, #12]
 8010d6a:	4298      	cmp	r0, r3
 8010d6c:	bfb8      	it	lt
 8010d6e:	4618      	movlt	r0, r3
 8010d70:	e7a6      	b.n	8010cc0 <_printf_i+0x160>
 8010d72:	2301      	movs	r3, #1
 8010d74:	4632      	mov	r2, r6
 8010d76:	4649      	mov	r1, r9
 8010d78:	4640      	mov	r0, r8
 8010d7a:	47d0      	blx	sl
 8010d7c:	3001      	adds	r0, #1
 8010d7e:	d09d      	beq.n	8010cbc <_printf_i+0x15c>
 8010d80:	3501      	adds	r5, #1
 8010d82:	68e3      	ldr	r3, [r4, #12]
 8010d84:	9903      	ldr	r1, [sp, #12]
 8010d86:	1a5b      	subs	r3, r3, r1
 8010d88:	42ab      	cmp	r3, r5
 8010d8a:	dcf2      	bgt.n	8010d72 <_printf_i+0x212>
 8010d8c:	e7eb      	b.n	8010d66 <_printf_i+0x206>
 8010d8e:	2500      	movs	r5, #0
 8010d90:	f104 0619 	add.w	r6, r4, #25
 8010d94:	e7f5      	b.n	8010d82 <_printf_i+0x222>
 8010d96:	bf00      	nop
 8010d98:	080136ee 	.word	0x080136ee
 8010d9c:	080136ff 	.word	0x080136ff

08010da0 <std>:
 8010da0:	2300      	movs	r3, #0
 8010da2:	b510      	push	{r4, lr}
 8010da4:	4604      	mov	r4, r0
 8010da6:	e9c0 3300 	strd	r3, r3, [r0]
 8010daa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010dae:	6083      	str	r3, [r0, #8]
 8010db0:	8181      	strh	r1, [r0, #12]
 8010db2:	6643      	str	r3, [r0, #100]	@ 0x64
 8010db4:	81c2      	strh	r2, [r0, #14]
 8010db6:	6183      	str	r3, [r0, #24]
 8010db8:	4619      	mov	r1, r3
 8010dba:	2208      	movs	r2, #8
 8010dbc:	305c      	adds	r0, #92	@ 0x5c
 8010dbe:	f000 f8f4 	bl	8010faa <memset>
 8010dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8010df8 <std+0x58>)
 8010dc4:	6263      	str	r3, [r4, #36]	@ 0x24
 8010dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8010dfc <std+0x5c>)
 8010dc8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010dca:	4b0d      	ldr	r3, [pc, #52]	@ (8010e00 <std+0x60>)
 8010dcc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010dce:	4b0d      	ldr	r3, [pc, #52]	@ (8010e04 <std+0x64>)
 8010dd0:	6323      	str	r3, [r4, #48]	@ 0x30
 8010dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8010e08 <std+0x68>)
 8010dd4:	6224      	str	r4, [r4, #32]
 8010dd6:	429c      	cmp	r4, r3
 8010dd8:	d006      	beq.n	8010de8 <std+0x48>
 8010dda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010dde:	4294      	cmp	r4, r2
 8010de0:	d002      	beq.n	8010de8 <std+0x48>
 8010de2:	33d0      	adds	r3, #208	@ 0xd0
 8010de4:	429c      	cmp	r4, r3
 8010de6:	d105      	bne.n	8010df4 <std+0x54>
 8010de8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010df0:	f000 b976 	b.w	80110e0 <__retarget_lock_init_recursive>
 8010df4:	bd10      	pop	{r4, pc}
 8010df6:	bf00      	nop
 8010df8:	08010f25 	.word	0x08010f25
 8010dfc:	08010f47 	.word	0x08010f47
 8010e00:	08010f7f 	.word	0x08010f7f
 8010e04:	08010fa3 	.word	0x08010fa3
 8010e08:	20001cfc 	.word	0x20001cfc

08010e0c <stdio_exit_handler>:
 8010e0c:	4a02      	ldr	r2, [pc, #8]	@ (8010e18 <stdio_exit_handler+0xc>)
 8010e0e:	4903      	ldr	r1, [pc, #12]	@ (8010e1c <stdio_exit_handler+0x10>)
 8010e10:	4803      	ldr	r0, [pc, #12]	@ (8010e20 <stdio_exit_handler+0x14>)
 8010e12:	f000 b869 	b.w	8010ee8 <_fwalk_sglue>
 8010e16:	bf00      	nop
 8010e18:	2000012c 	.word	0x2000012c
 8010e1c:	08012641 	.word	0x08012641
 8010e20:	2000013c 	.word	0x2000013c

08010e24 <cleanup_stdio>:
 8010e24:	6841      	ldr	r1, [r0, #4]
 8010e26:	4b0c      	ldr	r3, [pc, #48]	@ (8010e58 <cleanup_stdio+0x34>)
 8010e28:	4299      	cmp	r1, r3
 8010e2a:	b510      	push	{r4, lr}
 8010e2c:	4604      	mov	r4, r0
 8010e2e:	d001      	beq.n	8010e34 <cleanup_stdio+0x10>
 8010e30:	f001 fc06 	bl	8012640 <_fflush_r>
 8010e34:	68a1      	ldr	r1, [r4, #8]
 8010e36:	4b09      	ldr	r3, [pc, #36]	@ (8010e5c <cleanup_stdio+0x38>)
 8010e38:	4299      	cmp	r1, r3
 8010e3a:	d002      	beq.n	8010e42 <cleanup_stdio+0x1e>
 8010e3c:	4620      	mov	r0, r4
 8010e3e:	f001 fbff 	bl	8012640 <_fflush_r>
 8010e42:	68e1      	ldr	r1, [r4, #12]
 8010e44:	4b06      	ldr	r3, [pc, #24]	@ (8010e60 <cleanup_stdio+0x3c>)
 8010e46:	4299      	cmp	r1, r3
 8010e48:	d004      	beq.n	8010e54 <cleanup_stdio+0x30>
 8010e4a:	4620      	mov	r0, r4
 8010e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e50:	f001 bbf6 	b.w	8012640 <_fflush_r>
 8010e54:	bd10      	pop	{r4, pc}
 8010e56:	bf00      	nop
 8010e58:	20001cfc 	.word	0x20001cfc
 8010e5c:	20001d64 	.word	0x20001d64
 8010e60:	20001dcc 	.word	0x20001dcc

08010e64 <global_stdio_init.part.0>:
 8010e64:	b510      	push	{r4, lr}
 8010e66:	4b0b      	ldr	r3, [pc, #44]	@ (8010e94 <global_stdio_init.part.0+0x30>)
 8010e68:	4c0b      	ldr	r4, [pc, #44]	@ (8010e98 <global_stdio_init.part.0+0x34>)
 8010e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8010e9c <global_stdio_init.part.0+0x38>)
 8010e6c:	601a      	str	r2, [r3, #0]
 8010e6e:	4620      	mov	r0, r4
 8010e70:	2200      	movs	r2, #0
 8010e72:	2104      	movs	r1, #4
 8010e74:	f7ff ff94 	bl	8010da0 <std>
 8010e78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010e7c:	2201      	movs	r2, #1
 8010e7e:	2109      	movs	r1, #9
 8010e80:	f7ff ff8e 	bl	8010da0 <std>
 8010e84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010e88:	2202      	movs	r2, #2
 8010e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e8e:	2112      	movs	r1, #18
 8010e90:	f7ff bf86 	b.w	8010da0 <std>
 8010e94:	20001e34 	.word	0x20001e34
 8010e98:	20001cfc 	.word	0x20001cfc
 8010e9c:	08010e0d 	.word	0x08010e0d

08010ea0 <__sfp_lock_acquire>:
 8010ea0:	4801      	ldr	r0, [pc, #4]	@ (8010ea8 <__sfp_lock_acquire+0x8>)
 8010ea2:	f000 b91e 	b.w	80110e2 <__retarget_lock_acquire_recursive>
 8010ea6:	bf00      	nop
 8010ea8:	20001e3d 	.word	0x20001e3d

08010eac <__sfp_lock_release>:
 8010eac:	4801      	ldr	r0, [pc, #4]	@ (8010eb4 <__sfp_lock_release+0x8>)
 8010eae:	f000 b919 	b.w	80110e4 <__retarget_lock_release_recursive>
 8010eb2:	bf00      	nop
 8010eb4:	20001e3d 	.word	0x20001e3d

08010eb8 <__sinit>:
 8010eb8:	b510      	push	{r4, lr}
 8010eba:	4604      	mov	r4, r0
 8010ebc:	f7ff fff0 	bl	8010ea0 <__sfp_lock_acquire>
 8010ec0:	6a23      	ldr	r3, [r4, #32]
 8010ec2:	b11b      	cbz	r3, 8010ecc <__sinit+0x14>
 8010ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ec8:	f7ff bff0 	b.w	8010eac <__sfp_lock_release>
 8010ecc:	4b04      	ldr	r3, [pc, #16]	@ (8010ee0 <__sinit+0x28>)
 8010ece:	6223      	str	r3, [r4, #32]
 8010ed0:	4b04      	ldr	r3, [pc, #16]	@ (8010ee4 <__sinit+0x2c>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d1f5      	bne.n	8010ec4 <__sinit+0xc>
 8010ed8:	f7ff ffc4 	bl	8010e64 <global_stdio_init.part.0>
 8010edc:	e7f2      	b.n	8010ec4 <__sinit+0xc>
 8010ede:	bf00      	nop
 8010ee0:	08010e25 	.word	0x08010e25
 8010ee4:	20001e34 	.word	0x20001e34

08010ee8 <_fwalk_sglue>:
 8010ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010eec:	4607      	mov	r7, r0
 8010eee:	4688      	mov	r8, r1
 8010ef0:	4614      	mov	r4, r2
 8010ef2:	2600      	movs	r6, #0
 8010ef4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010ef8:	f1b9 0901 	subs.w	r9, r9, #1
 8010efc:	d505      	bpl.n	8010f0a <_fwalk_sglue+0x22>
 8010efe:	6824      	ldr	r4, [r4, #0]
 8010f00:	2c00      	cmp	r4, #0
 8010f02:	d1f7      	bne.n	8010ef4 <_fwalk_sglue+0xc>
 8010f04:	4630      	mov	r0, r6
 8010f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f0a:	89ab      	ldrh	r3, [r5, #12]
 8010f0c:	2b01      	cmp	r3, #1
 8010f0e:	d907      	bls.n	8010f20 <_fwalk_sglue+0x38>
 8010f10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010f14:	3301      	adds	r3, #1
 8010f16:	d003      	beq.n	8010f20 <_fwalk_sglue+0x38>
 8010f18:	4629      	mov	r1, r5
 8010f1a:	4638      	mov	r0, r7
 8010f1c:	47c0      	blx	r8
 8010f1e:	4306      	orrs	r6, r0
 8010f20:	3568      	adds	r5, #104	@ 0x68
 8010f22:	e7e9      	b.n	8010ef8 <_fwalk_sglue+0x10>

08010f24 <__sread>:
 8010f24:	b510      	push	{r4, lr}
 8010f26:	460c      	mov	r4, r1
 8010f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f2c:	f000 f87a 	bl	8011024 <_read_r>
 8010f30:	2800      	cmp	r0, #0
 8010f32:	bfab      	itete	ge
 8010f34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010f36:	89a3      	ldrhlt	r3, [r4, #12]
 8010f38:	181b      	addge	r3, r3, r0
 8010f3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010f3e:	bfac      	ite	ge
 8010f40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010f42:	81a3      	strhlt	r3, [r4, #12]
 8010f44:	bd10      	pop	{r4, pc}

08010f46 <__swrite>:
 8010f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f4a:	461f      	mov	r7, r3
 8010f4c:	898b      	ldrh	r3, [r1, #12]
 8010f4e:	05db      	lsls	r3, r3, #23
 8010f50:	4605      	mov	r5, r0
 8010f52:	460c      	mov	r4, r1
 8010f54:	4616      	mov	r6, r2
 8010f56:	d505      	bpl.n	8010f64 <__swrite+0x1e>
 8010f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f5c:	2302      	movs	r3, #2
 8010f5e:	2200      	movs	r2, #0
 8010f60:	f000 f84e 	bl	8011000 <_lseek_r>
 8010f64:	89a3      	ldrh	r3, [r4, #12]
 8010f66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010f6e:	81a3      	strh	r3, [r4, #12]
 8010f70:	4632      	mov	r2, r6
 8010f72:	463b      	mov	r3, r7
 8010f74:	4628      	mov	r0, r5
 8010f76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f7a:	f000 b875 	b.w	8011068 <_write_r>

08010f7e <__sseek>:
 8010f7e:	b510      	push	{r4, lr}
 8010f80:	460c      	mov	r4, r1
 8010f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f86:	f000 f83b 	bl	8011000 <_lseek_r>
 8010f8a:	1c43      	adds	r3, r0, #1
 8010f8c:	89a3      	ldrh	r3, [r4, #12]
 8010f8e:	bf15      	itete	ne
 8010f90:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010f92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010f96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010f9a:	81a3      	strheq	r3, [r4, #12]
 8010f9c:	bf18      	it	ne
 8010f9e:	81a3      	strhne	r3, [r4, #12]
 8010fa0:	bd10      	pop	{r4, pc}

08010fa2 <__sclose>:
 8010fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fa6:	f000 b81b 	b.w	8010fe0 <_close_r>

08010faa <memset>:
 8010faa:	4402      	add	r2, r0
 8010fac:	4603      	mov	r3, r0
 8010fae:	4293      	cmp	r3, r2
 8010fb0:	d100      	bne.n	8010fb4 <memset+0xa>
 8010fb2:	4770      	bx	lr
 8010fb4:	f803 1b01 	strb.w	r1, [r3], #1
 8010fb8:	e7f9      	b.n	8010fae <memset+0x4>

08010fba <strcat>:
 8010fba:	b510      	push	{r4, lr}
 8010fbc:	4602      	mov	r2, r0
 8010fbe:	7814      	ldrb	r4, [r2, #0]
 8010fc0:	4613      	mov	r3, r2
 8010fc2:	3201      	adds	r2, #1
 8010fc4:	2c00      	cmp	r4, #0
 8010fc6:	d1fa      	bne.n	8010fbe <strcat+0x4>
 8010fc8:	3b01      	subs	r3, #1
 8010fca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010fce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010fd2:	2a00      	cmp	r2, #0
 8010fd4:	d1f9      	bne.n	8010fca <strcat+0x10>
 8010fd6:	bd10      	pop	{r4, pc}

08010fd8 <_localeconv_r>:
 8010fd8:	4800      	ldr	r0, [pc, #0]	@ (8010fdc <_localeconv_r+0x4>)
 8010fda:	4770      	bx	lr
 8010fdc:	20000278 	.word	0x20000278

08010fe0 <_close_r>:
 8010fe0:	b538      	push	{r3, r4, r5, lr}
 8010fe2:	4d06      	ldr	r5, [pc, #24]	@ (8010ffc <_close_r+0x1c>)
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	4604      	mov	r4, r0
 8010fe8:	4608      	mov	r0, r1
 8010fea:	602b      	str	r3, [r5, #0]
 8010fec:	f7f1 fe58 	bl	8002ca0 <_close>
 8010ff0:	1c43      	adds	r3, r0, #1
 8010ff2:	d102      	bne.n	8010ffa <_close_r+0x1a>
 8010ff4:	682b      	ldr	r3, [r5, #0]
 8010ff6:	b103      	cbz	r3, 8010ffa <_close_r+0x1a>
 8010ff8:	6023      	str	r3, [r4, #0]
 8010ffa:	bd38      	pop	{r3, r4, r5, pc}
 8010ffc:	20001e38 	.word	0x20001e38

08011000 <_lseek_r>:
 8011000:	b538      	push	{r3, r4, r5, lr}
 8011002:	4d07      	ldr	r5, [pc, #28]	@ (8011020 <_lseek_r+0x20>)
 8011004:	4604      	mov	r4, r0
 8011006:	4608      	mov	r0, r1
 8011008:	4611      	mov	r1, r2
 801100a:	2200      	movs	r2, #0
 801100c:	602a      	str	r2, [r5, #0]
 801100e:	461a      	mov	r2, r3
 8011010:	f7f1 fe6d 	bl	8002cee <_lseek>
 8011014:	1c43      	adds	r3, r0, #1
 8011016:	d102      	bne.n	801101e <_lseek_r+0x1e>
 8011018:	682b      	ldr	r3, [r5, #0]
 801101a:	b103      	cbz	r3, 801101e <_lseek_r+0x1e>
 801101c:	6023      	str	r3, [r4, #0]
 801101e:	bd38      	pop	{r3, r4, r5, pc}
 8011020:	20001e38 	.word	0x20001e38

08011024 <_read_r>:
 8011024:	b538      	push	{r3, r4, r5, lr}
 8011026:	4d07      	ldr	r5, [pc, #28]	@ (8011044 <_read_r+0x20>)
 8011028:	4604      	mov	r4, r0
 801102a:	4608      	mov	r0, r1
 801102c:	4611      	mov	r1, r2
 801102e:	2200      	movs	r2, #0
 8011030:	602a      	str	r2, [r5, #0]
 8011032:	461a      	mov	r2, r3
 8011034:	f7f1 fdfb 	bl	8002c2e <_read>
 8011038:	1c43      	adds	r3, r0, #1
 801103a:	d102      	bne.n	8011042 <_read_r+0x1e>
 801103c:	682b      	ldr	r3, [r5, #0]
 801103e:	b103      	cbz	r3, 8011042 <_read_r+0x1e>
 8011040:	6023      	str	r3, [r4, #0]
 8011042:	bd38      	pop	{r3, r4, r5, pc}
 8011044:	20001e38 	.word	0x20001e38

08011048 <_sbrk_r>:
 8011048:	b538      	push	{r3, r4, r5, lr}
 801104a:	4d06      	ldr	r5, [pc, #24]	@ (8011064 <_sbrk_r+0x1c>)
 801104c:	2300      	movs	r3, #0
 801104e:	4604      	mov	r4, r0
 8011050:	4608      	mov	r0, r1
 8011052:	602b      	str	r3, [r5, #0]
 8011054:	f7f1 fe58 	bl	8002d08 <_sbrk>
 8011058:	1c43      	adds	r3, r0, #1
 801105a:	d102      	bne.n	8011062 <_sbrk_r+0x1a>
 801105c:	682b      	ldr	r3, [r5, #0]
 801105e:	b103      	cbz	r3, 8011062 <_sbrk_r+0x1a>
 8011060:	6023      	str	r3, [r4, #0]
 8011062:	bd38      	pop	{r3, r4, r5, pc}
 8011064:	20001e38 	.word	0x20001e38

08011068 <_write_r>:
 8011068:	b538      	push	{r3, r4, r5, lr}
 801106a:	4d07      	ldr	r5, [pc, #28]	@ (8011088 <_write_r+0x20>)
 801106c:	4604      	mov	r4, r0
 801106e:	4608      	mov	r0, r1
 8011070:	4611      	mov	r1, r2
 8011072:	2200      	movs	r2, #0
 8011074:	602a      	str	r2, [r5, #0]
 8011076:	461a      	mov	r2, r3
 8011078:	f7f1 fdf6 	bl	8002c68 <_write>
 801107c:	1c43      	adds	r3, r0, #1
 801107e:	d102      	bne.n	8011086 <_write_r+0x1e>
 8011080:	682b      	ldr	r3, [r5, #0]
 8011082:	b103      	cbz	r3, 8011086 <_write_r+0x1e>
 8011084:	6023      	str	r3, [r4, #0]
 8011086:	bd38      	pop	{r3, r4, r5, pc}
 8011088:	20001e38 	.word	0x20001e38

0801108c <__errno>:
 801108c:	4b01      	ldr	r3, [pc, #4]	@ (8011094 <__errno+0x8>)
 801108e:	6818      	ldr	r0, [r3, #0]
 8011090:	4770      	bx	lr
 8011092:	bf00      	nop
 8011094:	20000138 	.word	0x20000138

08011098 <__libc_init_array>:
 8011098:	b570      	push	{r4, r5, r6, lr}
 801109a:	4d0d      	ldr	r5, [pc, #52]	@ (80110d0 <__libc_init_array+0x38>)
 801109c:	4c0d      	ldr	r4, [pc, #52]	@ (80110d4 <__libc_init_array+0x3c>)
 801109e:	1b64      	subs	r4, r4, r5
 80110a0:	10a4      	asrs	r4, r4, #2
 80110a2:	2600      	movs	r6, #0
 80110a4:	42a6      	cmp	r6, r4
 80110a6:	d109      	bne.n	80110bc <__libc_init_array+0x24>
 80110a8:	4d0b      	ldr	r5, [pc, #44]	@ (80110d8 <__libc_init_array+0x40>)
 80110aa:	4c0c      	ldr	r4, [pc, #48]	@ (80110dc <__libc_init_array+0x44>)
 80110ac:	f002 f96a 	bl	8013384 <_init>
 80110b0:	1b64      	subs	r4, r4, r5
 80110b2:	10a4      	asrs	r4, r4, #2
 80110b4:	2600      	movs	r6, #0
 80110b6:	42a6      	cmp	r6, r4
 80110b8:	d105      	bne.n	80110c6 <__libc_init_array+0x2e>
 80110ba:	bd70      	pop	{r4, r5, r6, pc}
 80110bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80110c0:	4798      	blx	r3
 80110c2:	3601      	adds	r6, #1
 80110c4:	e7ee      	b.n	80110a4 <__libc_init_array+0xc>
 80110c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80110ca:	4798      	blx	r3
 80110cc:	3601      	adds	r6, #1
 80110ce:	e7f2      	b.n	80110b6 <__libc_init_array+0x1e>
 80110d0:	08013ac8 	.word	0x08013ac8
 80110d4:	08013ac8 	.word	0x08013ac8
 80110d8:	08013ac8 	.word	0x08013ac8
 80110dc:	08013acc 	.word	0x08013acc

080110e0 <__retarget_lock_init_recursive>:
 80110e0:	4770      	bx	lr

080110e2 <__retarget_lock_acquire_recursive>:
 80110e2:	4770      	bx	lr

080110e4 <__retarget_lock_release_recursive>:
 80110e4:	4770      	bx	lr

080110e6 <memcpy>:
 80110e6:	440a      	add	r2, r1
 80110e8:	4291      	cmp	r1, r2
 80110ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80110ee:	d100      	bne.n	80110f2 <memcpy+0xc>
 80110f0:	4770      	bx	lr
 80110f2:	b510      	push	{r4, lr}
 80110f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80110f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80110fc:	4291      	cmp	r1, r2
 80110fe:	d1f9      	bne.n	80110f4 <memcpy+0xe>
 8011100:	bd10      	pop	{r4, pc}

08011102 <quorem>:
 8011102:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011106:	6903      	ldr	r3, [r0, #16]
 8011108:	690c      	ldr	r4, [r1, #16]
 801110a:	42a3      	cmp	r3, r4
 801110c:	4607      	mov	r7, r0
 801110e:	db7e      	blt.n	801120e <quorem+0x10c>
 8011110:	3c01      	subs	r4, #1
 8011112:	f101 0814 	add.w	r8, r1, #20
 8011116:	00a3      	lsls	r3, r4, #2
 8011118:	f100 0514 	add.w	r5, r0, #20
 801111c:	9300      	str	r3, [sp, #0]
 801111e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011122:	9301      	str	r3, [sp, #4]
 8011124:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011128:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801112c:	3301      	adds	r3, #1
 801112e:	429a      	cmp	r2, r3
 8011130:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011134:	fbb2 f6f3 	udiv	r6, r2, r3
 8011138:	d32e      	bcc.n	8011198 <quorem+0x96>
 801113a:	f04f 0a00 	mov.w	sl, #0
 801113e:	46c4      	mov	ip, r8
 8011140:	46ae      	mov	lr, r5
 8011142:	46d3      	mov	fp, sl
 8011144:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011148:	b298      	uxth	r0, r3
 801114a:	fb06 a000 	mla	r0, r6, r0, sl
 801114e:	0c02      	lsrs	r2, r0, #16
 8011150:	0c1b      	lsrs	r3, r3, #16
 8011152:	fb06 2303 	mla	r3, r6, r3, r2
 8011156:	f8de 2000 	ldr.w	r2, [lr]
 801115a:	b280      	uxth	r0, r0
 801115c:	b292      	uxth	r2, r2
 801115e:	1a12      	subs	r2, r2, r0
 8011160:	445a      	add	r2, fp
 8011162:	f8de 0000 	ldr.w	r0, [lr]
 8011166:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801116a:	b29b      	uxth	r3, r3
 801116c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011170:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011174:	b292      	uxth	r2, r2
 8011176:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801117a:	45e1      	cmp	r9, ip
 801117c:	f84e 2b04 	str.w	r2, [lr], #4
 8011180:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011184:	d2de      	bcs.n	8011144 <quorem+0x42>
 8011186:	9b00      	ldr	r3, [sp, #0]
 8011188:	58eb      	ldr	r3, [r5, r3]
 801118a:	b92b      	cbnz	r3, 8011198 <quorem+0x96>
 801118c:	9b01      	ldr	r3, [sp, #4]
 801118e:	3b04      	subs	r3, #4
 8011190:	429d      	cmp	r5, r3
 8011192:	461a      	mov	r2, r3
 8011194:	d32f      	bcc.n	80111f6 <quorem+0xf4>
 8011196:	613c      	str	r4, [r7, #16]
 8011198:	4638      	mov	r0, r7
 801119a:	f001 f8c5 	bl	8012328 <__mcmp>
 801119e:	2800      	cmp	r0, #0
 80111a0:	db25      	blt.n	80111ee <quorem+0xec>
 80111a2:	4629      	mov	r1, r5
 80111a4:	2000      	movs	r0, #0
 80111a6:	f858 2b04 	ldr.w	r2, [r8], #4
 80111aa:	f8d1 c000 	ldr.w	ip, [r1]
 80111ae:	fa1f fe82 	uxth.w	lr, r2
 80111b2:	fa1f f38c 	uxth.w	r3, ip
 80111b6:	eba3 030e 	sub.w	r3, r3, lr
 80111ba:	4403      	add	r3, r0
 80111bc:	0c12      	lsrs	r2, r2, #16
 80111be:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80111c2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80111c6:	b29b      	uxth	r3, r3
 80111c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80111cc:	45c1      	cmp	r9, r8
 80111ce:	f841 3b04 	str.w	r3, [r1], #4
 80111d2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80111d6:	d2e6      	bcs.n	80111a6 <quorem+0xa4>
 80111d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80111dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80111e0:	b922      	cbnz	r2, 80111ec <quorem+0xea>
 80111e2:	3b04      	subs	r3, #4
 80111e4:	429d      	cmp	r5, r3
 80111e6:	461a      	mov	r2, r3
 80111e8:	d30b      	bcc.n	8011202 <quorem+0x100>
 80111ea:	613c      	str	r4, [r7, #16]
 80111ec:	3601      	adds	r6, #1
 80111ee:	4630      	mov	r0, r6
 80111f0:	b003      	add	sp, #12
 80111f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111f6:	6812      	ldr	r2, [r2, #0]
 80111f8:	3b04      	subs	r3, #4
 80111fa:	2a00      	cmp	r2, #0
 80111fc:	d1cb      	bne.n	8011196 <quorem+0x94>
 80111fe:	3c01      	subs	r4, #1
 8011200:	e7c6      	b.n	8011190 <quorem+0x8e>
 8011202:	6812      	ldr	r2, [r2, #0]
 8011204:	3b04      	subs	r3, #4
 8011206:	2a00      	cmp	r2, #0
 8011208:	d1ef      	bne.n	80111ea <quorem+0xe8>
 801120a:	3c01      	subs	r4, #1
 801120c:	e7ea      	b.n	80111e4 <quorem+0xe2>
 801120e:	2000      	movs	r0, #0
 8011210:	e7ee      	b.n	80111f0 <quorem+0xee>
 8011212:	0000      	movs	r0, r0
 8011214:	0000      	movs	r0, r0
	...

08011218 <_dtoa_r>:
 8011218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801121c:	69c7      	ldr	r7, [r0, #28]
 801121e:	b099      	sub	sp, #100	@ 0x64
 8011220:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011224:	ec55 4b10 	vmov	r4, r5, d0
 8011228:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801122a:	9109      	str	r1, [sp, #36]	@ 0x24
 801122c:	4683      	mov	fp, r0
 801122e:	920e      	str	r2, [sp, #56]	@ 0x38
 8011230:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011232:	b97f      	cbnz	r7, 8011254 <_dtoa_r+0x3c>
 8011234:	2010      	movs	r0, #16
 8011236:	f7ff f89d 	bl	8010374 <malloc>
 801123a:	4602      	mov	r2, r0
 801123c:	f8cb 001c 	str.w	r0, [fp, #28]
 8011240:	b920      	cbnz	r0, 801124c <_dtoa_r+0x34>
 8011242:	4ba7      	ldr	r3, [pc, #668]	@ (80114e0 <_dtoa_r+0x2c8>)
 8011244:	21ef      	movs	r1, #239	@ 0xef
 8011246:	48a7      	ldr	r0, [pc, #668]	@ (80114e4 <_dtoa_r+0x2cc>)
 8011248:	f001 fa22 	bl	8012690 <__assert_func>
 801124c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011250:	6007      	str	r7, [r0, #0]
 8011252:	60c7      	str	r7, [r0, #12]
 8011254:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011258:	6819      	ldr	r1, [r3, #0]
 801125a:	b159      	cbz	r1, 8011274 <_dtoa_r+0x5c>
 801125c:	685a      	ldr	r2, [r3, #4]
 801125e:	604a      	str	r2, [r1, #4]
 8011260:	2301      	movs	r3, #1
 8011262:	4093      	lsls	r3, r2
 8011264:	608b      	str	r3, [r1, #8]
 8011266:	4658      	mov	r0, fp
 8011268:	f000 fe24 	bl	8011eb4 <_Bfree>
 801126c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011270:	2200      	movs	r2, #0
 8011272:	601a      	str	r2, [r3, #0]
 8011274:	1e2b      	subs	r3, r5, #0
 8011276:	bfb9      	ittee	lt
 8011278:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801127c:	9303      	strlt	r3, [sp, #12]
 801127e:	2300      	movge	r3, #0
 8011280:	6033      	strge	r3, [r6, #0]
 8011282:	9f03      	ldr	r7, [sp, #12]
 8011284:	4b98      	ldr	r3, [pc, #608]	@ (80114e8 <_dtoa_r+0x2d0>)
 8011286:	bfbc      	itt	lt
 8011288:	2201      	movlt	r2, #1
 801128a:	6032      	strlt	r2, [r6, #0]
 801128c:	43bb      	bics	r3, r7
 801128e:	d112      	bne.n	80112b6 <_dtoa_r+0x9e>
 8011290:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011292:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011296:	6013      	str	r3, [r2, #0]
 8011298:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801129c:	4323      	orrs	r3, r4
 801129e:	f000 854d 	beq.w	8011d3c <_dtoa_r+0xb24>
 80112a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80112a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80114fc <_dtoa_r+0x2e4>
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	f000 854f 	beq.w	8011d4c <_dtoa_r+0xb34>
 80112ae:	f10a 0303 	add.w	r3, sl, #3
 80112b2:	f000 bd49 	b.w	8011d48 <_dtoa_r+0xb30>
 80112b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80112ba:	2200      	movs	r2, #0
 80112bc:	ec51 0b17 	vmov	r0, r1, d7
 80112c0:	2300      	movs	r3, #0
 80112c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80112c6:	f7ef fc07 	bl	8000ad8 <__aeabi_dcmpeq>
 80112ca:	4680      	mov	r8, r0
 80112cc:	b158      	cbz	r0, 80112e6 <_dtoa_r+0xce>
 80112ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80112d0:	2301      	movs	r3, #1
 80112d2:	6013      	str	r3, [r2, #0]
 80112d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80112d6:	b113      	cbz	r3, 80112de <_dtoa_r+0xc6>
 80112d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80112da:	4b84      	ldr	r3, [pc, #528]	@ (80114ec <_dtoa_r+0x2d4>)
 80112dc:	6013      	str	r3, [r2, #0]
 80112de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8011500 <_dtoa_r+0x2e8>
 80112e2:	f000 bd33 	b.w	8011d4c <_dtoa_r+0xb34>
 80112e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80112ea:	aa16      	add	r2, sp, #88	@ 0x58
 80112ec:	a917      	add	r1, sp, #92	@ 0x5c
 80112ee:	4658      	mov	r0, fp
 80112f0:	f001 f8ca 	bl	8012488 <__d2b>
 80112f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80112f8:	4681      	mov	r9, r0
 80112fa:	2e00      	cmp	r6, #0
 80112fc:	d077      	beq.n	80113ee <_dtoa_r+0x1d6>
 80112fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011300:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8011304:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011308:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801130c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011310:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8011314:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011318:	4619      	mov	r1, r3
 801131a:	2200      	movs	r2, #0
 801131c:	4b74      	ldr	r3, [pc, #464]	@ (80114f0 <_dtoa_r+0x2d8>)
 801131e:	f7ee ffbb 	bl	8000298 <__aeabi_dsub>
 8011322:	a369      	add	r3, pc, #420	@ (adr r3, 80114c8 <_dtoa_r+0x2b0>)
 8011324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011328:	f7ef f96e 	bl	8000608 <__aeabi_dmul>
 801132c:	a368      	add	r3, pc, #416	@ (adr r3, 80114d0 <_dtoa_r+0x2b8>)
 801132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011332:	f7ee ffb3 	bl	800029c <__adddf3>
 8011336:	4604      	mov	r4, r0
 8011338:	4630      	mov	r0, r6
 801133a:	460d      	mov	r5, r1
 801133c:	f7ef f8fa 	bl	8000534 <__aeabi_i2d>
 8011340:	a365      	add	r3, pc, #404	@ (adr r3, 80114d8 <_dtoa_r+0x2c0>)
 8011342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011346:	f7ef f95f 	bl	8000608 <__aeabi_dmul>
 801134a:	4602      	mov	r2, r0
 801134c:	460b      	mov	r3, r1
 801134e:	4620      	mov	r0, r4
 8011350:	4629      	mov	r1, r5
 8011352:	f7ee ffa3 	bl	800029c <__adddf3>
 8011356:	4604      	mov	r4, r0
 8011358:	460d      	mov	r5, r1
 801135a:	f7ef fc05 	bl	8000b68 <__aeabi_d2iz>
 801135e:	2200      	movs	r2, #0
 8011360:	4607      	mov	r7, r0
 8011362:	2300      	movs	r3, #0
 8011364:	4620      	mov	r0, r4
 8011366:	4629      	mov	r1, r5
 8011368:	f7ef fbc0 	bl	8000aec <__aeabi_dcmplt>
 801136c:	b140      	cbz	r0, 8011380 <_dtoa_r+0x168>
 801136e:	4638      	mov	r0, r7
 8011370:	f7ef f8e0 	bl	8000534 <__aeabi_i2d>
 8011374:	4622      	mov	r2, r4
 8011376:	462b      	mov	r3, r5
 8011378:	f7ef fbae 	bl	8000ad8 <__aeabi_dcmpeq>
 801137c:	b900      	cbnz	r0, 8011380 <_dtoa_r+0x168>
 801137e:	3f01      	subs	r7, #1
 8011380:	2f16      	cmp	r7, #22
 8011382:	d851      	bhi.n	8011428 <_dtoa_r+0x210>
 8011384:	4b5b      	ldr	r3, [pc, #364]	@ (80114f4 <_dtoa_r+0x2dc>)
 8011386:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801138a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801138e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011392:	f7ef fbab 	bl	8000aec <__aeabi_dcmplt>
 8011396:	2800      	cmp	r0, #0
 8011398:	d048      	beq.n	801142c <_dtoa_r+0x214>
 801139a:	3f01      	subs	r7, #1
 801139c:	2300      	movs	r3, #0
 801139e:	9312      	str	r3, [sp, #72]	@ 0x48
 80113a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80113a2:	1b9b      	subs	r3, r3, r6
 80113a4:	1e5a      	subs	r2, r3, #1
 80113a6:	bf44      	itt	mi
 80113a8:	f1c3 0801 	rsbmi	r8, r3, #1
 80113ac:	2300      	movmi	r3, #0
 80113ae:	9208      	str	r2, [sp, #32]
 80113b0:	bf54      	ite	pl
 80113b2:	f04f 0800 	movpl.w	r8, #0
 80113b6:	9308      	strmi	r3, [sp, #32]
 80113b8:	2f00      	cmp	r7, #0
 80113ba:	db39      	blt.n	8011430 <_dtoa_r+0x218>
 80113bc:	9b08      	ldr	r3, [sp, #32]
 80113be:	970f      	str	r7, [sp, #60]	@ 0x3c
 80113c0:	443b      	add	r3, r7
 80113c2:	9308      	str	r3, [sp, #32]
 80113c4:	2300      	movs	r3, #0
 80113c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80113c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113ca:	2b09      	cmp	r3, #9
 80113cc:	d864      	bhi.n	8011498 <_dtoa_r+0x280>
 80113ce:	2b05      	cmp	r3, #5
 80113d0:	bfc4      	itt	gt
 80113d2:	3b04      	subgt	r3, #4
 80113d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80113d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113d8:	f1a3 0302 	sub.w	r3, r3, #2
 80113dc:	bfcc      	ite	gt
 80113de:	2400      	movgt	r4, #0
 80113e0:	2401      	movle	r4, #1
 80113e2:	2b03      	cmp	r3, #3
 80113e4:	d863      	bhi.n	80114ae <_dtoa_r+0x296>
 80113e6:	e8df f003 	tbb	[pc, r3]
 80113ea:	372a      	.short	0x372a
 80113ec:	5535      	.short	0x5535
 80113ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80113f2:	441e      	add	r6, r3
 80113f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80113f8:	2b20      	cmp	r3, #32
 80113fa:	bfc1      	itttt	gt
 80113fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011400:	409f      	lslgt	r7, r3
 8011402:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8011406:	fa24 f303 	lsrgt.w	r3, r4, r3
 801140a:	bfd6      	itet	le
 801140c:	f1c3 0320 	rsble	r3, r3, #32
 8011410:	ea47 0003 	orrgt.w	r0, r7, r3
 8011414:	fa04 f003 	lslle.w	r0, r4, r3
 8011418:	f7ef f87c 	bl	8000514 <__aeabi_ui2d>
 801141c:	2201      	movs	r2, #1
 801141e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8011422:	3e01      	subs	r6, #1
 8011424:	9214      	str	r2, [sp, #80]	@ 0x50
 8011426:	e777      	b.n	8011318 <_dtoa_r+0x100>
 8011428:	2301      	movs	r3, #1
 801142a:	e7b8      	b.n	801139e <_dtoa_r+0x186>
 801142c:	9012      	str	r0, [sp, #72]	@ 0x48
 801142e:	e7b7      	b.n	80113a0 <_dtoa_r+0x188>
 8011430:	427b      	negs	r3, r7
 8011432:	930a      	str	r3, [sp, #40]	@ 0x28
 8011434:	2300      	movs	r3, #0
 8011436:	eba8 0807 	sub.w	r8, r8, r7
 801143a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801143c:	e7c4      	b.n	80113c8 <_dtoa_r+0x1b0>
 801143e:	2300      	movs	r3, #0
 8011440:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011442:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011444:	2b00      	cmp	r3, #0
 8011446:	dc35      	bgt.n	80114b4 <_dtoa_r+0x29c>
 8011448:	2301      	movs	r3, #1
 801144a:	9300      	str	r3, [sp, #0]
 801144c:	9307      	str	r3, [sp, #28]
 801144e:	461a      	mov	r2, r3
 8011450:	920e      	str	r2, [sp, #56]	@ 0x38
 8011452:	e00b      	b.n	801146c <_dtoa_r+0x254>
 8011454:	2301      	movs	r3, #1
 8011456:	e7f3      	b.n	8011440 <_dtoa_r+0x228>
 8011458:	2300      	movs	r3, #0
 801145a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801145c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801145e:	18fb      	adds	r3, r7, r3
 8011460:	9300      	str	r3, [sp, #0]
 8011462:	3301      	adds	r3, #1
 8011464:	2b01      	cmp	r3, #1
 8011466:	9307      	str	r3, [sp, #28]
 8011468:	bfb8      	it	lt
 801146a:	2301      	movlt	r3, #1
 801146c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8011470:	2100      	movs	r1, #0
 8011472:	2204      	movs	r2, #4
 8011474:	f102 0514 	add.w	r5, r2, #20
 8011478:	429d      	cmp	r5, r3
 801147a:	d91f      	bls.n	80114bc <_dtoa_r+0x2a4>
 801147c:	6041      	str	r1, [r0, #4]
 801147e:	4658      	mov	r0, fp
 8011480:	f000 fcd8 	bl	8011e34 <_Balloc>
 8011484:	4682      	mov	sl, r0
 8011486:	2800      	cmp	r0, #0
 8011488:	d13c      	bne.n	8011504 <_dtoa_r+0x2ec>
 801148a:	4b1b      	ldr	r3, [pc, #108]	@ (80114f8 <_dtoa_r+0x2e0>)
 801148c:	4602      	mov	r2, r0
 801148e:	f240 11af 	movw	r1, #431	@ 0x1af
 8011492:	e6d8      	b.n	8011246 <_dtoa_r+0x2e>
 8011494:	2301      	movs	r3, #1
 8011496:	e7e0      	b.n	801145a <_dtoa_r+0x242>
 8011498:	2401      	movs	r4, #1
 801149a:	2300      	movs	r3, #0
 801149c:	9309      	str	r3, [sp, #36]	@ 0x24
 801149e:	940b      	str	r4, [sp, #44]	@ 0x2c
 80114a0:	f04f 33ff 	mov.w	r3, #4294967295
 80114a4:	9300      	str	r3, [sp, #0]
 80114a6:	9307      	str	r3, [sp, #28]
 80114a8:	2200      	movs	r2, #0
 80114aa:	2312      	movs	r3, #18
 80114ac:	e7d0      	b.n	8011450 <_dtoa_r+0x238>
 80114ae:	2301      	movs	r3, #1
 80114b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80114b2:	e7f5      	b.n	80114a0 <_dtoa_r+0x288>
 80114b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80114b6:	9300      	str	r3, [sp, #0]
 80114b8:	9307      	str	r3, [sp, #28]
 80114ba:	e7d7      	b.n	801146c <_dtoa_r+0x254>
 80114bc:	3101      	adds	r1, #1
 80114be:	0052      	lsls	r2, r2, #1
 80114c0:	e7d8      	b.n	8011474 <_dtoa_r+0x25c>
 80114c2:	bf00      	nop
 80114c4:	f3af 8000 	nop.w
 80114c8:	636f4361 	.word	0x636f4361
 80114cc:	3fd287a7 	.word	0x3fd287a7
 80114d0:	8b60c8b3 	.word	0x8b60c8b3
 80114d4:	3fc68a28 	.word	0x3fc68a28
 80114d8:	509f79fb 	.word	0x509f79fb
 80114dc:	3fd34413 	.word	0x3fd34413
 80114e0:	0801371d 	.word	0x0801371d
 80114e4:	08013734 	.word	0x08013734
 80114e8:	7ff00000 	.word	0x7ff00000
 80114ec:	080136ed 	.word	0x080136ed
 80114f0:	3ff80000 	.word	0x3ff80000
 80114f4:	08013830 	.word	0x08013830
 80114f8:	0801378c 	.word	0x0801378c
 80114fc:	08013719 	.word	0x08013719
 8011500:	080136ec 	.word	0x080136ec
 8011504:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011508:	6018      	str	r0, [r3, #0]
 801150a:	9b07      	ldr	r3, [sp, #28]
 801150c:	2b0e      	cmp	r3, #14
 801150e:	f200 80a4 	bhi.w	801165a <_dtoa_r+0x442>
 8011512:	2c00      	cmp	r4, #0
 8011514:	f000 80a1 	beq.w	801165a <_dtoa_r+0x442>
 8011518:	2f00      	cmp	r7, #0
 801151a:	dd33      	ble.n	8011584 <_dtoa_r+0x36c>
 801151c:	4bad      	ldr	r3, [pc, #692]	@ (80117d4 <_dtoa_r+0x5bc>)
 801151e:	f007 020f 	and.w	r2, r7, #15
 8011522:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011526:	ed93 7b00 	vldr	d7, [r3]
 801152a:	05f8      	lsls	r0, r7, #23
 801152c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011530:	ea4f 1427 	mov.w	r4, r7, asr #4
 8011534:	d516      	bpl.n	8011564 <_dtoa_r+0x34c>
 8011536:	4ba8      	ldr	r3, [pc, #672]	@ (80117d8 <_dtoa_r+0x5c0>)
 8011538:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801153c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011540:	f7ef f98c 	bl	800085c <__aeabi_ddiv>
 8011544:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011548:	f004 040f 	and.w	r4, r4, #15
 801154c:	2603      	movs	r6, #3
 801154e:	4da2      	ldr	r5, [pc, #648]	@ (80117d8 <_dtoa_r+0x5c0>)
 8011550:	b954      	cbnz	r4, 8011568 <_dtoa_r+0x350>
 8011552:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801155a:	f7ef f97f 	bl	800085c <__aeabi_ddiv>
 801155e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011562:	e028      	b.n	80115b6 <_dtoa_r+0x39e>
 8011564:	2602      	movs	r6, #2
 8011566:	e7f2      	b.n	801154e <_dtoa_r+0x336>
 8011568:	07e1      	lsls	r1, r4, #31
 801156a:	d508      	bpl.n	801157e <_dtoa_r+0x366>
 801156c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011570:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011574:	f7ef f848 	bl	8000608 <__aeabi_dmul>
 8011578:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801157c:	3601      	adds	r6, #1
 801157e:	1064      	asrs	r4, r4, #1
 8011580:	3508      	adds	r5, #8
 8011582:	e7e5      	b.n	8011550 <_dtoa_r+0x338>
 8011584:	f000 80d2 	beq.w	801172c <_dtoa_r+0x514>
 8011588:	427c      	negs	r4, r7
 801158a:	4b92      	ldr	r3, [pc, #584]	@ (80117d4 <_dtoa_r+0x5bc>)
 801158c:	4d92      	ldr	r5, [pc, #584]	@ (80117d8 <_dtoa_r+0x5c0>)
 801158e:	f004 020f 	and.w	r2, r4, #15
 8011592:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801159a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801159e:	f7ef f833 	bl	8000608 <__aeabi_dmul>
 80115a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80115a6:	1124      	asrs	r4, r4, #4
 80115a8:	2300      	movs	r3, #0
 80115aa:	2602      	movs	r6, #2
 80115ac:	2c00      	cmp	r4, #0
 80115ae:	f040 80b2 	bne.w	8011716 <_dtoa_r+0x4fe>
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d1d3      	bne.n	801155e <_dtoa_r+0x346>
 80115b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80115b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	f000 80b7 	beq.w	8011730 <_dtoa_r+0x518>
 80115c2:	4b86      	ldr	r3, [pc, #536]	@ (80117dc <_dtoa_r+0x5c4>)
 80115c4:	2200      	movs	r2, #0
 80115c6:	4620      	mov	r0, r4
 80115c8:	4629      	mov	r1, r5
 80115ca:	f7ef fa8f 	bl	8000aec <__aeabi_dcmplt>
 80115ce:	2800      	cmp	r0, #0
 80115d0:	f000 80ae 	beq.w	8011730 <_dtoa_r+0x518>
 80115d4:	9b07      	ldr	r3, [sp, #28]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	f000 80aa 	beq.w	8011730 <_dtoa_r+0x518>
 80115dc:	9b00      	ldr	r3, [sp, #0]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	dd37      	ble.n	8011652 <_dtoa_r+0x43a>
 80115e2:	1e7b      	subs	r3, r7, #1
 80115e4:	9304      	str	r3, [sp, #16]
 80115e6:	4620      	mov	r0, r4
 80115e8:	4b7d      	ldr	r3, [pc, #500]	@ (80117e0 <_dtoa_r+0x5c8>)
 80115ea:	2200      	movs	r2, #0
 80115ec:	4629      	mov	r1, r5
 80115ee:	f7ef f80b 	bl	8000608 <__aeabi_dmul>
 80115f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80115f6:	9c00      	ldr	r4, [sp, #0]
 80115f8:	3601      	adds	r6, #1
 80115fa:	4630      	mov	r0, r6
 80115fc:	f7ee ff9a 	bl	8000534 <__aeabi_i2d>
 8011600:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011604:	f7ef f800 	bl	8000608 <__aeabi_dmul>
 8011608:	4b76      	ldr	r3, [pc, #472]	@ (80117e4 <_dtoa_r+0x5cc>)
 801160a:	2200      	movs	r2, #0
 801160c:	f7ee fe46 	bl	800029c <__adddf3>
 8011610:	4605      	mov	r5, r0
 8011612:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011616:	2c00      	cmp	r4, #0
 8011618:	f040 808d 	bne.w	8011736 <_dtoa_r+0x51e>
 801161c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011620:	4b71      	ldr	r3, [pc, #452]	@ (80117e8 <_dtoa_r+0x5d0>)
 8011622:	2200      	movs	r2, #0
 8011624:	f7ee fe38 	bl	8000298 <__aeabi_dsub>
 8011628:	4602      	mov	r2, r0
 801162a:	460b      	mov	r3, r1
 801162c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011630:	462a      	mov	r2, r5
 8011632:	4633      	mov	r3, r6
 8011634:	f7ef fa78 	bl	8000b28 <__aeabi_dcmpgt>
 8011638:	2800      	cmp	r0, #0
 801163a:	f040 828b 	bne.w	8011b54 <_dtoa_r+0x93c>
 801163e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011642:	462a      	mov	r2, r5
 8011644:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011648:	f7ef fa50 	bl	8000aec <__aeabi_dcmplt>
 801164c:	2800      	cmp	r0, #0
 801164e:	f040 8128 	bne.w	80118a2 <_dtoa_r+0x68a>
 8011652:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8011656:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801165a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801165c:	2b00      	cmp	r3, #0
 801165e:	f2c0 815a 	blt.w	8011916 <_dtoa_r+0x6fe>
 8011662:	2f0e      	cmp	r7, #14
 8011664:	f300 8157 	bgt.w	8011916 <_dtoa_r+0x6fe>
 8011668:	4b5a      	ldr	r3, [pc, #360]	@ (80117d4 <_dtoa_r+0x5bc>)
 801166a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801166e:	ed93 7b00 	vldr	d7, [r3]
 8011672:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011674:	2b00      	cmp	r3, #0
 8011676:	ed8d 7b00 	vstr	d7, [sp]
 801167a:	da03      	bge.n	8011684 <_dtoa_r+0x46c>
 801167c:	9b07      	ldr	r3, [sp, #28]
 801167e:	2b00      	cmp	r3, #0
 8011680:	f340 8101 	ble.w	8011886 <_dtoa_r+0x66e>
 8011684:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011688:	4656      	mov	r6, sl
 801168a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801168e:	4620      	mov	r0, r4
 8011690:	4629      	mov	r1, r5
 8011692:	f7ef f8e3 	bl	800085c <__aeabi_ddiv>
 8011696:	f7ef fa67 	bl	8000b68 <__aeabi_d2iz>
 801169a:	4680      	mov	r8, r0
 801169c:	f7ee ff4a 	bl	8000534 <__aeabi_i2d>
 80116a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80116a4:	f7ee ffb0 	bl	8000608 <__aeabi_dmul>
 80116a8:	4602      	mov	r2, r0
 80116aa:	460b      	mov	r3, r1
 80116ac:	4620      	mov	r0, r4
 80116ae:	4629      	mov	r1, r5
 80116b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80116b4:	f7ee fdf0 	bl	8000298 <__aeabi_dsub>
 80116b8:	f806 4b01 	strb.w	r4, [r6], #1
 80116bc:	9d07      	ldr	r5, [sp, #28]
 80116be:	eba6 040a 	sub.w	r4, r6, sl
 80116c2:	42a5      	cmp	r5, r4
 80116c4:	4602      	mov	r2, r0
 80116c6:	460b      	mov	r3, r1
 80116c8:	f040 8117 	bne.w	80118fa <_dtoa_r+0x6e2>
 80116cc:	f7ee fde6 	bl	800029c <__adddf3>
 80116d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80116d4:	4604      	mov	r4, r0
 80116d6:	460d      	mov	r5, r1
 80116d8:	f7ef fa26 	bl	8000b28 <__aeabi_dcmpgt>
 80116dc:	2800      	cmp	r0, #0
 80116de:	f040 80f9 	bne.w	80118d4 <_dtoa_r+0x6bc>
 80116e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80116e6:	4620      	mov	r0, r4
 80116e8:	4629      	mov	r1, r5
 80116ea:	f7ef f9f5 	bl	8000ad8 <__aeabi_dcmpeq>
 80116ee:	b118      	cbz	r0, 80116f8 <_dtoa_r+0x4e0>
 80116f0:	f018 0f01 	tst.w	r8, #1
 80116f4:	f040 80ee 	bne.w	80118d4 <_dtoa_r+0x6bc>
 80116f8:	4649      	mov	r1, r9
 80116fa:	4658      	mov	r0, fp
 80116fc:	f000 fbda 	bl	8011eb4 <_Bfree>
 8011700:	2300      	movs	r3, #0
 8011702:	7033      	strb	r3, [r6, #0]
 8011704:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011706:	3701      	adds	r7, #1
 8011708:	601f      	str	r7, [r3, #0]
 801170a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801170c:	2b00      	cmp	r3, #0
 801170e:	f000 831d 	beq.w	8011d4c <_dtoa_r+0xb34>
 8011712:	601e      	str	r6, [r3, #0]
 8011714:	e31a      	b.n	8011d4c <_dtoa_r+0xb34>
 8011716:	07e2      	lsls	r2, r4, #31
 8011718:	d505      	bpl.n	8011726 <_dtoa_r+0x50e>
 801171a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801171e:	f7ee ff73 	bl	8000608 <__aeabi_dmul>
 8011722:	3601      	adds	r6, #1
 8011724:	2301      	movs	r3, #1
 8011726:	1064      	asrs	r4, r4, #1
 8011728:	3508      	adds	r5, #8
 801172a:	e73f      	b.n	80115ac <_dtoa_r+0x394>
 801172c:	2602      	movs	r6, #2
 801172e:	e742      	b.n	80115b6 <_dtoa_r+0x39e>
 8011730:	9c07      	ldr	r4, [sp, #28]
 8011732:	9704      	str	r7, [sp, #16]
 8011734:	e761      	b.n	80115fa <_dtoa_r+0x3e2>
 8011736:	4b27      	ldr	r3, [pc, #156]	@ (80117d4 <_dtoa_r+0x5bc>)
 8011738:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801173a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801173e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011742:	4454      	add	r4, sl
 8011744:	2900      	cmp	r1, #0
 8011746:	d053      	beq.n	80117f0 <_dtoa_r+0x5d8>
 8011748:	4928      	ldr	r1, [pc, #160]	@ (80117ec <_dtoa_r+0x5d4>)
 801174a:	2000      	movs	r0, #0
 801174c:	f7ef f886 	bl	800085c <__aeabi_ddiv>
 8011750:	4633      	mov	r3, r6
 8011752:	462a      	mov	r2, r5
 8011754:	f7ee fda0 	bl	8000298 <__aeabi_dsub>
 8011758:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801175c:	4656      	mov	r6, sl
 801175e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011762:	f7ef fa01 	bl	8000b68 <__aeabi_d2iz>
 8011766:	4605      	mov	r5, r0
 8011768:	f7ee fee4 	bl	8000534 <__aeabi_i2d>
 801176c:	4602      	mov	r2, r0
 801176e:	460b      	mov	r3, r1
 8011770:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011774:	f7ee fd90 	bl	8000298 <__aeabi_dsub>
 8011778:	3530      	adds	r5, #48	@ 0x30
 801177a:	4602      	mov	r2, r0
 801177c:	460b      	mov	r3, r1
 801177e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011782:	f806 5b01 	strb.w	r5, [r6], #1
 8011786:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801178a:	f7ef f9af 	bl	8000aec <__aeabi_dcmplt>
 801178e:	2800      	cmp	r0, #0
 8011790:	d171      	bne.n	8011876 <_dtoa_r+0x65e>
 8011792:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011796:	4911      	ldr	r1, [pc, #68]	@ (80117dc <_dtoa_r+0x5c4>)
 8011798:	2000      	movs	r0, #0
 801179a:	f7ee fd7d 	bl	8000298 <__aeabi_dsub>
 801179e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80117a2:	f7ef f9a3 	bl	8000aec <__aeabi_dcmplt>
 80117a6:	2800      	cmp	r0, #0
 80117a8:	f040 8095 	bne.w	80118d6 <_dtoa_r+0x6be>
 80117ac:	42a6      	cmp	r6, r4
 80117ae:	f43f af50 	beq.w	8011652 <_dtoa_r+0x43a>
 80117b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80117b6:	4b0a      	ldr	r3, [pc, #40]	@ (80117e0 <_dtoa_r+0x5c8>)
 80117b8:	2200      	movs	r2, #0
 80117ba:	f7ee ff25 	bl	8000608 <__aeabi_dmul>
 80117be:	4b08      	ldr	r3, [pc, #32]	@ (80117e0 <_dtoa_r+0x5c8>)
 80117c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80117c4:	2200      	movs	r2, #0
 80117c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80117ca:	f7ee ff1d 	bl	8000608 <__aeabi_dmul>
 80117ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80117d2:	e7c4      	b.n	801175e <_dtoa_r+0x546>
 80117d4:	08013830 	.word	0x08013830
 80117d8:	08013808 	.word	0x08013808
 80117dc:	3ff00000 	.word	0x3ff00000
 80117e0:	40240000 	.word	0x40240000
 80117e4:	401c0000 	.word	0x401c0000
 80117e8:	40140000 	.word	0x40140000
 80117ec:	3fe00000 	.word	0x3fe00000
 80117f0:	4631      	mov	r1, r6
 80117f2:	4628      	mov	r0, r5
 80117f4:	f7ee ff08 	bl	8000608 <__aeabi_dmul>
 80117f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80117fc:	9415      	str	r4, [sp, #84]	@ 0x54
 80117fe:	4656      	mov	r6, sl
 8011800:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011804:	f7ef f9b0 	bl	8000b68 <__aeabi_d2iz>
 8011808:	4605      	mov	r5, r0
 801180a:	f7ee fe93 	bl	8000534 <__aeabi_i2d>
 801180e:	4602      	mov	r2, r0
 8011810:	460b      	mov	r3, r1
 8011812:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011816:	f7ee fd3f 	bl	8000298 <__aeabi_dsub>
 801181a:	3530      	adds	r5, #48	@ 0x30
 801181c:	f806 5b01 	strb.w	r5, [r6], #1
 8011820:	4602      	mov	r2, r0
 8011822:	460b      	mov	r3, r1
 8011824:	42a6      	cmp	r6, r4
 8011826:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801182a:	f04f 0200 	mov.w	r2, #0
 801182e:	d124      	bne.n	801187a <_dtoa_r+0x662>
 8011830:	4bac      	ldr	r3, [pc, #688]	@ (8011ae4 <_dtoa_r+0x8cc>)
 8011832:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011836:	f7ee fd31 	bl	800029c <__adddf3>
 801183a:	4602      	mov	r2, r0
 801183c:	460b      	mov	r3, r1
 801183e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011842:	f7ef f971 	bl	8000b28 <__aeabi_dcmpgt>
 8011846:	2800      	cmp	r0, #0
 8011848:	d145      	bne.n	80118d6 <_dtoa_r+0x6be>
 801184a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801184e:	49a5      	ldr	r1, [pc, #660]	@ (8011ae4 <_dtoa_r+0x8cc>)
 8011850:	2000      	movs	r0, #0
 8011852:	f7ee fd21 	bl	8000298 <__aeabi_dsub>
 8011856:	4602      	mov	r2, r0
 8011858:	460b      	mov	r3, r1
 801185a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801185e:	f7ef f945 	bl	8000aec <__aeabi_dcmplt>
 8011862:	2800      	cmp	r0, #0
 8011864:	f43f aef5 	beq.w	8011652 <_dtoa_r+0x43a>
 8011868:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801186a:	1e73      	subs	r3, r6, #1
 801186c:	9315      	str	r3, [sp, #84]	@ 0x54
 801186e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011872:	2b30      	cmp	r3, #48	@ 0x30
 8011874:	d0f8      	beq.n	8011868 <_dtoa_r+0x650>
 8011876:	9f04      	ldr	r7, [sp, #16]
 8011878:	e73e      	b.n	80116f8 <_dtoa_r+0x4e0>
 801187a:	4b9b      	ldr	r3, [pc, #620]	@ (8011ae8 <_dtoa_r+0x8d0>)
 801187c:	f7ee fec4 	bl	8000608 <__aeabi_dmul>
 8011880:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011884:	e7bc      	b.n	8011800 <_dtoa_r+0x5e8>
 8011886:	d10c      	bne.n	80118a2 <_dtoa_r+0x68a>
 8011888:	4b98      	ldr	r3, [pc, #608]	@ (8011aec <_dtoa_r+0x8d4>)
 801188a:	2200      	movs	r2, #0
 801188c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011890:	f7ee feba 	bl	8000608 <__aeabi_dmul>
 8011894:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011898:	f7ef f93c 	bl	8000b14 <__aeabi_dcmpge>
 801189c:	2800      	cmp	r0, #0
 801189e:	f000 8157 	beq.w	8011b50 <_dtoa_r+0x938>
 80118a2:	2400      	movs	r4, #0
 80118a4:	4625      	mov	r5, r4
 80118a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80118a8:	43db      	mvns	r3, r3
 80118aa:	9304      	str	r3, [sp, #16]
 80118ac:	4656      	mov	r6, sl
 80118ae:	2700      	movs	r7, #0
 80118b0:	4621      	mov	r1, r4
 80118b2:	4658      	mov	r0, fp
 80118b4:	f000 fafe 	bl	8011eb4 <_Bfree>
 80118b8:	2d00      	cmp	r5, #0
 80118ba:	d0dc      	beq.n	8011876 <_dtoa_r+0x65e>
 80118bc:	b12f      	cbz	r7, 80118ca <_dtoa_r+0x6b2>
 80118be:	42af      	cmp	r7, r5
 80118c0:	d003      	beq.n	80118ca <_dtoa_r+0x6b2>
 80118c2:	4639      	mov	r1, r7
 80118c4:	4658      	mov	r0, fp
 80118c6:	f000 faf5 	bl	8011eb4 <_Bfree>
 80118ca:	4629      	mov	r1, r5
 80118cc:	4658      	mov	r0, fp
 80118ce:	f000 faf1 	bl	8011eb4 <_Bfree>
 80118d2:	e7d0      	b.n	8011876 <_dtoa_r+0x65e>
 80118d4:	9704      	str	r7, [sp, #16]
 80118d6:	4633      	mov	r3, r6
 80118d8:	461e      	mov	r6, r3
 80118da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80118de:	2a39      	cmp	r2, #57	@ 0x39
 80118e0:	d107      	bne.n	80118f2 <_dtoa_r+0x6da>
 80118e2:	459a      	cmp	sl, r3
 80118e4:	d1f8      	bne.n	80118d8 <_dtoa_r+0x6c0>
 80118e6:	9a04      	ldr	r2, [sp, #16]
 80118e8:	3201      	adds	r2, #1
 80118ea:	9204      	str	r2, [sp, #16]
 80118ec:	2230      	movs	r2, #48	@ 0x30
 80118ee:	f88a 2000 	strb.w	r2, [sl]
 80118f2:	781a      	ldrb	r2, [r3, #0]
 80118f4:	3201      	adds	r2, #1
 80118f6:	701a      	strb	r2, [r3, #0]
 80118f8:	e7bd      	b.n	8011876 <_dtoa_r+0x65e>
 80118fa:	4b7b      	ldr	r3, [pc, #492]	@ (8011ae8 <_dtoa_r+0x8d0>)
 80118fc:	2200      	movs	r2, #0
 80118fe:	f7ee fe83 	bl	8000608 <__aeabi_dmul>
 8011902:	2200      	movs	r2, #0
 8011904:	2300      	movs	r3, #0
 8011906:	4604      	mov	r4, r0
 8011908:	460d      	mov	r5, r1
 801190a:	f7ef f8e5 	bl	8000ad8 <__aeabi_dcmpeq>
 801190e:	2800      	cmp	r0, #0
 8011910:	f43f aebb 	beq.w	801168a <_dtoa_r+0x472>
 8011914:	e6f0      	b.n	80116f8 <_dtoa_r+0x4e0>
 8011916:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011918:	2a00      	cmp	r2, #0
 801191a:	f000 80db 	beq.w	8011ad4 <_dtoa_r+0x8bc>
 801191e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011920:	2a01      	cmp	r2, #1
 8011922:	f300 80bf 	bgt.w	8011aa4 <_dtoa_r+0x88c>
 8011926:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011928:	2a00      	cmp	r2, #0
 801192a:	f000 80b7 	beq.w	8011a9c <_dtoa_r+0x884>
 801192e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011932:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011934:	4646      	mov	r6, r8
 8011936:	9a08      	ldr	r2, [sp, #32]
 8011938:	2101      	movs	r1, #1
 801193a:	441a      	add	r2, r3
 801193c:	4658      	mov	r0, fp
 801193e:	4498      	add	r8, r3
 8011940:	9208      	str	r2, [sp, #32]
 8011942:	f000 fb6b 	bl	801201c <__i2b>
 8011946:	4605      	mov	r5, r0
 8011948:	b15e      	cbz	r6, 8011962 <_dtoa_r+0x74a>
 801194a:	9b08      	ldr	r3, [sp, #32]
 801194c:	2b00      	cmp	r3, #0
 801194e:	dd08      	ble.n	8011962 <_dtoa_r+0x74a>
 8011950:	42b3      	cmp	r3, r6
 8011952:	9a08      	ldr	r2, [sp, #32]
 8011954:	bfa8      	it	ge
 8011956:	4633      	movge	r3, r6
 8011958:	eba8 0803 	sub.w	r8, r8, r3
 801195c:	1af6      	subs	r6, r6, r3
 801195e:	1ad3      	subs	r3, r2, r3
 8011960:	9308      	str	r3, [sp, #32]
 8011962:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011964:	b1f3      	cbz	r3, 80119a4 <_dtoa_r+0x78c>
 8011966:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011968:	2b00      	cmp	r3, #0
 801196a:	f000 80b7 	beq.w	8011adc <_dtoa_r+0x8c4>
 801196e:	b18c      	cbz	r4, 8011994 <_dtoa_r+0x77c>
 8011970:	4629      	mov	r1, r5
 8011972:	4622      	mov	r2, r4
 8011974:	4658      	mov	r0, fp
 8011976:	f000 fc11 	bl	801219c <__pow5mult>
 801197a:	464a      	mov	r2, r9
 801197c:	4601      	mov	r1, r0
 801197e:	4605      	mov	r5, r0
 8011980:	4658      	mov	r0, fp
 8011982:	f000 fb61 	bl	8012048 <__multiply>
 8011986:	4649      	mov	r1, r9
 8011988:	9004      	str	r0, [sp, #16]
 801198a:	4658      	mov	r0, fp
 801198c:	f000 fa92 	bl	8011eb4 <_Bfree>
 8011990:	9b04      	ldr	r3, [sp, #16]
 8011992:	4699      	mov	r9, r3
 8011994:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011996:	1b1a      	subs	r2, r3, r4
 8011998:	d004      	beq.n	80119a4 <_dtoa_r+0x78c>
 801199a:	4649      	mov	r1, r9
 801199c:	4658      	mov	r0, fp
 801199e:	f000 fbfd 	bl	801219c <__pow5mult>
 80119a2:	4681      	mov	r9, r0
 80119a4:	2101      	movs	r1, #1
 80119a6:	4658      	mov	r0, fp
 80119a8:	f000 fb38 	bl	801201c <__i2b>
 80119ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80119ae:	4604      	mov	r4, r0
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	f000 81cf 	beq.w	8011d54 <_dtoa_r+0xb3c>
 80119b6:	461a      	mov	r2, r3
 80119b8:	4601      	mov	r1, r0
 80119ba:	4658      	mov	r0, fp
 80119bc:	f000 fbee 	bl	801219c <__pow5mult>
 80119c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80119c2:	2b01      	cmp	r3, #1
 80119c4:	4604      	mov	r4, r0
 80119c6:	f300 8095 	bgt.w	8011af4 <_dtoa_r+0x8dc>
 80119ca:	9b02      	ldr	r3, [sp, #8]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	f040 8087 	bne.w	8011ae0 <_dtoa_r+0x8c8>
 80119d2:	9b03      	ldr	r3, [sp, #12]
 80119d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80119d8:	2b00      	cmp	r3, #0
 80119da:	f040 8089 	bne.w	8011af0 <_dtoa_r+0x8d8>
 80119de:	9b03      	ldr	r3, [sp, #12]
 80119e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80119e4:	0d1b      	lsrs	r3, r3, #20
 80119e6:	051b      	lsls	r3, r3, #20
 80119e8:	b12b      	cbz	r3, 80119f6 <_dtoa_r+0x7de>
 80119ea:	9b08      	ldr	r3, [sp, #32]
 80119ec:	3301      	adds	r3, #1
 80119ee:	9308      	str	r3, [sp, #32]
 80119f0:	f108 0801 	add.w	r8, r8, #1
 80119f4:	2301      	movs	r3, #1
 80119f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80119f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	f000 81b0 	beq.w	8011d60 <_dtoa_r+0xb48>
 8011a00:	6923      	ldr	r3, [r4, #16]
 8011a02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011a06:	6918      	ldr	r0, [r3, #16]
 8011a08:	f000 fabc 	bl	8011f84 <__hi0bits>
 8011a0c:	f1c0 0020 	rsb	r0, r0, #32
 8011a10:	9b08      	ldr	r3, [sp, #32]
 8011a12:	4418      	add	r0, r3
 8011a14:	f010 001f 	ands.w	r0, r0, #31
 8011a18:	d077      	beq.n	8011b0a <_dtoa_r+0x8f2>
 8011a1a:	f1c0 0320 	rsb	r3, r0, #32
 8011a1e:	2b04      	cmp	r3, #4
 8011a20:	dd6b      	ble.n	8011afa <_dtoa_r+0x8e2>
 8011a22:	9b08      	ldr	r3, [sp, #32]
 8011a24:	f1c0 001c 	rsb	r0, r0, #28
 8011a28:	4403      	add	r3, r0
 8011a2a:	4480      	add	r8, r0
 8011a2c:	4406      	add	r6, r0
 8011a2e:	9308      	str	r3, [sp, #32]
 8011a30:	f1b8 0f00 	cmp.w	r8, #0
 8011a34:	dd05      	ble.n	8011a42 <_dtoa_r+0x82a>
 8011a36:	4649      	mov	r1, r9
 8011a38:	4642      	mov	r2, r8
 8011a3a:	4658      	mov	r0, fp
 8011a3c:	f000 fc08 	bl	8012250 <__lshift>
 8011a40:	4681      	mov	r9, r0
 8011a42:	9b08      	ldr	r3, [sp, #32]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	dd05      	ble.n	8011a54 <_dtoa_r+0x83c>
 8011a48:	4621      	mov	r1, r4
 8011a4a:	461a      	mov	r2, r3
 8011a4c:	4658      	mov	r0, fp
 8011a4e:	f000 fbff 	bl	8012250 <__lshift>
 8011a52:	4604      	mov	r4, r0
 8011a54:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d059      	beq.n	8011b0e <_dtoa_r+0x8f6>
 8011a5a:	4621      	mov	r1, r4
 8011a5c:	4648      	mov	r0, r9
 8011a5e:	f000 fc63 	bl	8012328 <__mcmp>
 8011a62:	2800      	cmp	r0, #0
 8011a64:	da53      	bge.n	8011b0e <_dtoa_r+0x8f6>
 8011a66:	1e7b      	subs	r3, r7, #1
 8011a68:	9304      	str	r3, [sp, #16]
 8011a6a:	4649      	mov	r1, r9
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	220a      	movs	r2, #10
 8011a70:	4658      	mov	r0, fp
 8011a72:	f000 fa41 	bl	8011ef8 <__multadd>
 8011a76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011a78:	4681      	mov	r9, r0
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	f000 8172 	beq.w	8011d64 <_dtoa_r+0xb4c>
 8011a80:	2300      	movs	r3, #0
 8011a82:	4629      	mov	r1, r5
 8011a84:	220a      	movs	r2, #10
 8011a86:	4658      	mov	r0, fp
 8011a88:	f000 fa36 	bl	8011ef8 <__multadd>
 8011a8c:	9b00      	ldr	r3, [sp, #0]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	4605      	mov	r5, r0
 8011a92:	dc67      	bgt.n	8011b64 <_dtoa_r+0x94c>
 8011a94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a96:	2b02      	cmp	r3, #2
 8011a98:	dc41      	bgt.n	8011b1e <_dtoa_r+0x906>
 8011a9a:	e063      	b.n	8011b64 <_dtoa_r+0x94c>
 8011a9c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011a9e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8011aa2:	e746      	b.n	8011932 <_dtoa_r+0x71a>
 8011aa4:	9b07      	ldr	r3, [sp, #28]
 8011aa6:	1e5c      	subs	r4, r3, #1
 8011aa8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011aaa:	42a3      	cmp	r3, r4
 8011aac:	bfbf      	itttt	lt
 8011aae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011ab0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8011ab2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8011ab4:	1ae3      	sublt	r3, r4, r3
 8011ab6:	bfb4      	ite	lt
 8011ab8:	18d2      	addlt	r2, r2, r3
 8011aba:	1b1c      	subge	r4, r3, r4
 8011abc:	9b07      	ldr	r3, [sp, #28]
 8011abe:	bfbc      	itt	lt
 8011ac0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8011ac2:	2400      	movlt	r4, #0
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	bfb5      	itete	lt
 8011ac8:	eba8 0603 	sublt.w	r6, r8, r3
 8011acc:	9b07      	ldrge	r3, [sp, #28]
 8011ace:	2300      	movlt	r3, #0
 8011ad0:	4646      	movge	r6, r8
 8011ad2:	e730      	b.n	8011936 <_dtoa_r+0x71e>
 8011ad4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011ad6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8011ad8:	4646      	mov	r6, r8
 8011ada:	e735      	b.n	8011948 <_dtoa_r+0x730>
 8011adc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011ade:	e75c      	b.n	801199a <_dtoa_r+0x782>
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	e788      	b.n	80119f6 <_dtoa_r+0x7de>
 8011ae4:	3fe00000 	.word	0x3fe00000
 8011ae8:	40240000 	.word	0x40240000
 8011aec:	40140000 	.word	0x40140000
 8011af0:	9b02      	ldr	r3, [sp, #8]
 8011af2:	e780      	b.n	80119f6 <_dtoa_r+0x7de>
 8011af4:	2300      	movs	r3, #0
 8011af6:	930a      	str	r3, [sp, #40]	@ 0x28
 8011af8:	e782      	b.n	8011a00 <_dtoa_r+0x7e8>
 8011afa:	d099      	beq.n	8011a30 <_dtoa_r+0x818>
 8011afc:	9a08      	ldr	r2, [sp, #32]
 8011afe:	331c      	adds	r3, #28
 8011b00:	441a      	add	r2, r3
 8011b02:	4498      	add	r8, r3
 8011b04:	441e      	add	r6, r3
 8011b06:	9208      	str	r2, [sp, #32]
 8011b08:	e792      	b.n	8011a30 <_dtoa_r+0x818>
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	e7f6      	b.n	8011afc <_dtoa_r+0x8e4>
 8011b0e:	9b07      	ldr	r3, [sp, #28]
 8011b10:	9704      	str	r7, [sp, #16]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	dc20      	bgt.n	8011b58 <_dtoa_r+0x940>
 8011b16:	9300      	str	r3, [sp, #0]
 8011b18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b1a:	2b02      	cmp	r3, #2
 8011b1c:	dd1e      	ble.n	8011b5c <_dtoa_r+0x944>
 8011b1e:	9b00      	ldr	r3, [sp, #0]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	f47f aec0 	bne.w	80118a6 <_dtoa_r+0x68e>
 8011b26:	4621      	mov	r1, r4
 8011b28:	2205      	movs	r2, #5
 8011b2a:	4658      	mov	r0, fp
 8011b2c:	f000 f9e4 	bl	8011ef8 <__multadd>
 8011b30:	4601      	mov	r1, r0
 8011b32:	4604      	mov	r4, r0
 8011b34:	4648      	mov	r0, r9
 8011b36:	f000 fbf7 	bl	8012328 <__mcmp>
 8011b3a:	2800      	cmp	r0, #0
 8011b3c:	f77f aeb3 	ble.w	80118a6 <_dtoa_r+0x68e>
 8011b40:	4656      	mov	r6, sl
 8011b42:	2331      	movs	r3, #49	@ 0x31
 8011b44:	f806 3b01 	strb.w	r3, [r6], #1
 8011b48:	9b04      	ldr	r3, [sp, #16]
 8011b4a:	3301      	adds	r3, #1
 8011b4c:	9304      	str	r3, [sp, #16]
 8011b4e:	e6ae      	b.n	80118ae <_dtoa_r+0x696>
 8011b50:	9c07      	ldr	r4, [sp, #28]
 8011b52:	9704      	str	r7, [sp, #16]
 8011b54:	4625      	mov	r5, r4
 8011b56:	e7f3      	b.n	8011b40 <_dtoa_r+0x928>
 8011b58:	9b07      	ldr	r3, [sp, #28]
 8011b5a:	9300      	str	r3, [sp, #0]
 8011b5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	f000 8104 	beq.w	8011d6c <_dtoa_r+0xb54>
 8011b64:	2e00      	cmp	r6, #0
 8011b66:	dd05      	ble.n	8011b74 <_dtoa_r+0x95c>
 8011b68:	4629      	mov	r1, r5
 8011b6a:	4632      	mov	r2, r6
 8011b6c:	4658      	mov	r0, fp
 8011b6e:	f000 fb6f 	bl	8012250 <__lshift>
 8011b72:	4605      	mov	r5, r0
 8011b74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d05a      	beq.n	8011c30 <_dtoa_r+0xa18>
 8011b7a:	6869      	ldr	r1, [r5, #4]
 8011b7c:	4658      	mov	r0, fp
 8011b7e:	f000 f959 	bl	8011e34 <_Balloc>
 8011b82:	4606      	mov	r6, r0
 8011b84:	b928      	cbnz	r0, 8011b92 <_dtoa_r+0x97a>
 8011b86:	4b84      	ldr	r3, [pc, #528]	@ (8011d98 <_dtoa_r+0xb80>)
 8011b88:	4602      	mov	r2, r0
 8011b8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011b8e:	f7ff bb5a 	b.w	8011246 <_dtoa_r+0x2e>
 8011b92:	692a      	ldr	r2, [r5, #16]
 8011b94:	3202      	adds	r2, #2
 8011b96:	0092      	lsls	r2, r2, #2
 8011b98:	f105 010c 	add.w	r1, r5, #12
 8011b9c:	300c      	adds	r0, #12
 8011b9e:	f7ff faa2 	bl	80110e6 <memcpy>
 8011ba2:	2201      	movs	r2, #1
 8011ba4:	4631      	mov	r1, r6
 8011ba6:	4658      	mov	r0, fp
 8011ba8:	f000 fb52 	bl	8012250 <__lshift>
 8011bac:	f10a 0301 	add.w	r3, sl, #1
 8011bb0:	9307      	str	r3, [sp, #28]
 8011bb2:	9b00      	ldr	r3, [sp, #0]
 8011bb4:	4453      	add	r3, sl
 8011bb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011bb8:	9b02      	ldr	r3, [sp, #8]
 8011bba:	f003 0301 	and.w	r3, r3, #1
 8011bbe:	462f      	mov	r7, r5
 8011bc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8011bc2:	4605      	mov	r5, r0
 8011bc4:	9b07      	ldr	r3, [sp, #28]
 8011bc6:	4621      	mov	r1, r4
 8011bc8:	3b01      	subs	r3, #1
 8011bca:	4648      	mov	r0, r9
 8011bcc:	9300      	str	r3, [sp, #0]
 8011bce:	f7ff fa98 	bl	8011102 <quorem>
 8011bd2:	4639      	mov	r1, r7
 8011bd4:	9002      	str	r0, [sp, #8]
 8011bd6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011bda:	4648      	mov	r0, r9
 8011bdc:	f000 fba4 	bl	8012328 <__mcmp>
 8011be0:	462a      	mov	r2, r5
 8011be2:	9008      	str	r0, [sp, #32]
 8011be4:	4621      	mov	r1, r4
 8011be6:	4658      	mov	r0, fp
 8011be8:	f000 fbba 	bl	8012360 <__mdiff>
 8011bec:	68c2      	ldr	r2, [r0, #12]
 8011bee:	4606      	mov	r6, r0
 8011bf0:	bb02      	cbnz	r2, 8011c34 <_dtoa_r+0xa1c>
 8011bf2:	4601      	mov	r1, r0
 8011bf4:	4648      	mov	r0, r9
 8011bf6:	f000 fb97 	bl	8012328 <__mcmp>
 8011bfa:	4602      	mov	r2, r0
 8011bfc:	4631      	mov	r1, r6
 8011bfe:	4658      	mov	r0, fp
 8011c00:	920e      	str	r2, [sp, #56]	@ 0x38
 8011c02:	f000 f957 	bl	8011eb4 <_Bfree>
 8011c06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011c0a:	9e07      	ldr	r6, [sp, #28]
 8011c0c:	ea43 0102 	orr.w	r1, r3, r2
 8011c10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011c12:	4319      	orrs	r1, r3
 8011c14:	d110      	bne.n	8011c38 <_dtoa_r+0xa20>
 8011c16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011c1a:	d029      	beq.n	8011c70 <_dtoa_r+0xa58>
 8011c1c:	9b08      	ldr	r3, [sp, #32]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	dd02      	ble.n	8011c28 <_dtoa_r+0xa10>
 8011c22:	9b02      	ldr	r3, [sp, #8]
 8011c24:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8011c28:	9b00      	ldr	r3, [sp, #0]
 8011c2a:	f883 8000 	strb.w	r8, [r3]
 8011c2e:	e63f      	b.n	80118b0 <_dtoa_r+0x698>
 8011c30:	4628      	mov	r0, r5
 8011c32:	e7bb      	b.n	8011bac <_dtoa_r+0x994>
 8011c34:	2201      	movs	r2, #1
 8011c36:	e7e1      	b.n	8011bfc <_dtoa_r+0x9e4>
 8011c38:	9b08      	ldr	r3, [sp, #32]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	db04      	blt.n	8011c48 <_dtoa_r+0xa30>
 8011c3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011c40:	430b      	orrs	r3, r1
 8011c42:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011c44:	430b      	orrs	r3, r1
 8011c46:	d120      	bne.n	8011c8a <_dtoa_r+0xa72>
 8011c48:	2a00      	cmp	r2, #0
 8011c4a:	dded      	ble.n	8011c28 <_dtoa_r+0xa10>
 8011c4c:	4649      	mov	r1, r9
 8011c4e:	2201      	movs	r2, #1
 8011c50:	4658      	mov	r0, fp
 8011c52:	f000 fafd 	bl	8012250 <__lshift>
 8011c56:	4621      	mov	r1, r4
 8011c58:	4681      	mov	r9, r0
 8011c5a:	f000 fb65 	bl	8012328 <__mcmp>
 8011c5e:	2800      	cmp	r0, #0
 8011c60:	dc03      	bgt.n	8011c6a <_dtoa_r+0xa52>
 8011c62:	d1e1      	bne.n	8011c28 <_dtoa_r+0xa10>
 8011c64:	f018 0f01 	tst.w	r8, #1
 8011c68:	d0de      	beq.n	8011c28 <_dtoa_r+0xa10>
 8011c6a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011c6e:	d1d8      	bne.n	8011c22 <_dtoa_r+0xa0a>
 8011c70:	9a00      	ldr	r2, [sp, #0]
 8011c72:	2339      	movs	r3, #57	@ 0x39
 8011c74:	7013      	strb	r3, [r2, #0]
 8011c76:	4633      	mov	r3, r6
 8011c78:	461e      	mov	r6, r3
 8011c7a:	3b01      	subs	r3, #1
 8011c7c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011c80:	2a39      	cmp	r2, #57	@ 0x39
 8011c82:	d052      	beq.n	8011d2a <_dtoa_r+0xb12>
 8011c84:	3201      	adds	r2, #1
 8011c86:	701a      	strb	r2, [r3, #0]
 8011c88:	e612      	b.n	80118b0 <_dtoa_r+0x698>
 8011c8a:	2a00      	cmp	r2, #0
 8011c8c:	dd07      	ble.n	8011c9e <_dtoa_r+0xa86>
 8011c8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011c92:	d0ed      	beq.n	8011c70 <_dtoa_r+0xa58>
 8011c94:	9a00      	ldr	r2, [sp, #0]
 8011c96:	f108 0301 	add.w	r3, r8, #1
 8011c9a:	7013      	strb	r3, [r2, #0]
 8011c9c:	e608      	b.n	80118b0 <_dtoa_r+0x698>
 8011c9e:	9b07      	ldr	r3, [sp, #28]
 8011ca0:	9a07      	ldr	r2, [sp, #28]
 8011ca2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8011ca6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011ca8:	4293      	cmp	r3, r2
 8011caa:	d028      	beq.n	8011cfe <_dtoa_r+0xae6>
 8011cac:	4649      	mov	r1, r9
 8011cae:	2300      	movs	r3, #0
 8011cb0:	220a      	movs	r2, #10
 8011cb2:	4658      	mov	r0, fp
 8011cb4:	f000 f920 	bl	8011ef8 <__multadd>
 8011cb8:	42af      	cmp	r7, r5
 8011cba:	4681      	mov	r9, r0
 8011cbc:	f04f 0300 	mov.w	r3, #0
 8011cc0:	f04f 020a 	mov.w	r2, #10
 8011cc4:	4639      	mov	r1, r7
 8011cc6:	4658      	mov	r0, fp
 8011cc8:	d107      	bne.n	8011cda <_dtoa_r+0xac2>
 8011cca:	f000 f915 	bl	8011ef8 <__multadd>
 8011cce:	4607      	mov	r7, r0
 8011cd0:	4605      	mov	r5, r0
 8011cd2:	9b07      	ldr	r3, [sp, #28]
 8011cd4:	3301      	adds	r3, #1
 8011cd6:	9307      	str	r3, [sp, #28]
 8011cd8:	e774      	b.n	8011bc4 <_dtoa_r+0x9ac>
 8011cda:	f000 f90d 	bl	8011ef8 <__multadd>
 8011cde:	4629      	mov	r1, r5
 8011ce0:	4607      	mov	r7, r0
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	220a      	movs	r2, #10
 8011ce6:	4658      	mov	r0, fp
 8011ce8:	f000 f906 	bl	8011ef8 <__multadd>
 8011cec:	4605      	mov	r5, r0
 8011cee:	e7f0      	b.n	8011cd2 <_dtoa_r+0xaba>
 8011cf0:	9b00      	ldr	r3, [sp, #0]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	bfcc      	ite	gt
 8011cf6:	461e      	movgt	r6, r3
 8011cf8:	2601      	movle	r6, #1
 8011cfa:	4456      	add	r6, sl
 8011cfc:	2700      	movs	r7, #0
 8011cfe:	4649      	mov	r1, r9
 8011d00:	2201      	movs	r2, #1
 8011d02:	4658      	mov	r0, fp
 8011d04:	f000 faa4 	bl	8012250 <__lshift>
 8011d08:	4621      	mov	r1, r4
 8011d0a:	4681      	mov	r9, r0
 8011d0c:	f000 fb0c 	bl	8012328 <__mcmp>
 8011d10:	2800      	cmp	r0, #0
 8011d12:	dcb0      	bgt.n	8011c76 <_dtoa_r+0xa5e>
 8011d14:	d102      	bne.n	8011d1c <_dtoa_r+0xb04>
 8011d16:	f018 0f01 	tst.w	r8, #1
 8011d1a:	d1ac      	bne.n	8011c76 <_dtoa_r+0xa5e>
 8011d1c:	4633      	mov	r3, r6
 8011d1e:	461e      	mov	r6, r3
 8011d20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011d24:	2a30      	cmp	r2, #48	@ 0x30
 8011d26:	d0fa      	beq.n	8011d1e <_dtoa_r+0xb06>
 8011d28:	e5c2      	b.n	80118b0 <_dtoa_r+0x698>
 8011d2a:	459a      	cmp	sl, r3
 8011d2c:	d1a4      	bne.n	8011c78 <_dtoa_r+0xa60>
 8011d2e:	9b04      	ldr	r3, [sp, #16]
 8011d30:	3301      	adds	r3, #1
 8011d32:	9304      	str	r3, [sp, #16]
 8011d34:	2331      	movs	r3, #49	@ 0x31
 8011d36:	f88a 3000 	strb.w	r3, [sl]
 8011d3a:	e5b9      	b.n	80118b0 <_dtoa_r+0x698>
 8011d3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011d3e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8011d9c <_dtoa_r+0xb84>
 8011d42:	b11b      	cbz	r3, 8011d4c <_dtoa_r+0xb34>
 8011d44:	f10a 0308 	add.w	r3, sl, #8
 8011d48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011d4a:	6013      	str	r3, [r2, #0]
 8011d4c:	4650      	mov	r0, sl
 8011d4e:	b019      	add	sp, #100	@ 0x64
 8011d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d56:	2b01      	cmp	r3, #1
 8011d58:	f77f ae37 	ble.w	80119ca <_dtoa_r+0x7b2>
 8011d5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011d60:	2001      	movs	r0, #1
 8011d62:	e655      	b.n	8011a10 <_dtoa_r+0x7f8>
 8011d64:	9b00      	ldr	r3, [sp, #0]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	f77f aed6 	ble.w	8011b18 <_dtoa_r+0x900>
 8011d6c:	4656      	mov	r6, sl
 8011d6e:	4621      	mov	r1, r4
 8011d70:	4648      	mov	r0, r9
 8011d72:	f7ff f9c6 	bl	8011102 <quorem>
 8011d76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011d7a:	f806 8b01 	strb.w	r8, [r6], #1
 8011d7e:	9b00      	ldr	r3, [sp, #0]
 8011d80:	eba6 020a 	sub.w	r2, r6, sl
 8011d84:	4293      	cmp	r3, r2
 8011d86:	ddb3      	ble.n	8011cf0 <_dtoa_r+0xad8>
 8011d88:	4649      	mov	r1, r9
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	220a      	movs	r2, #10
 8011d8e:	4658      	mov	r0, fp
 8011d90:	f000 f8b2 	bl	8011ef8 <__multadd>
 8011d94:	4681      	mov	r9, r0
 8011d96:	e7ea      	b.n	8011d6e <_dtoa_r+0xb56>
 8011d98:	0801378c 	.word	0x0801378c
 8011d9c:	08013710 	.word	0x08013710

08011da0 <_free_r>:
 8011da0:	b538      	push	{r3, r4, r5, lr}
 8011da2:	4605      	mov	r5, r0
 8011da4:	2900      	cmp	r1, #0
 8011da6:	d041      	beq.n	8011e2c <_free_r+0x8c>
 8011da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011dac:	1f0c      	subs	r4, r1, #4
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	bfb8      	it	lt
 8011db2:	18e4      	addlt	r4, r4, r3
 8011db4:	f7fe fb90 	bl	80104d8 <__malloc_lock>
 8011db8:	4a1d      	ldr	r2, [pc, #116]	@ (8011e30 <_free_r+0x90>)
 8011dba:	6813      	ldr	r3, [r2, #0]
 8011dbc:	b933      	cbnz	r3, 8011dcc <_free_r+0x2c>
 8011dbe:	6063      	str	r3, [r4, #4]
 8011dc0:	6014      	str	r4, [r2, #0]
 8011dc2:	4628      	mov	r0, r5
 8011dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011dc8:	f7fe bb8c 	b.w	80104e4 <__malloc_unlock>
 8011dcc:	42a3      	cmp	r3, r4
 8011dce:	d908      	bls.n	8011de2 <_free_r+0x42>
 8011dd0:	6820      	ldr	r0, [r4, #0]
 8011dd2:	1821      	adds	r1, r4, r0
 8011dd4:	428b      	cmp	r3, r1
 8011dd6:	bf01      	itttt	eq
 8011dd8:	6819      	ldreq	r1, [r3, #0]
 8011dda:	685b      	ldreq	r3, [r3, #4]
 8011ddc:	1809      	addeq	r1, r1, r0
 8011dde:	6021      	streq	r1, [r4, #0]
 8011de0:	e7ed      	b.n	8011dbe <_free_r+0x1e>
 8011de2:	461a      	mov	r2, r3
 8011de4:	685b      	ldr	r3, [r3, #4]
 8011de6:	b10b      	cbz	r3, 8011dec <_free_r+0x4c>
 8011de8:	42a3      	cmp	r3, r4
 8011dea:	d9fa      	bls.n	8011de2 <_free_r+0x42>
 8011dec:	6811      	ldr	r1, [r2, #0]
 8011dee:	1850      	adds	r0, r2, r1
 8011df0:	42a0      	cmp	r0, r4
 8011df2:	d10b      	bne.n	8011e0c <_free_r+0x6c>
 8011df4:	6820      	ldr	r0, [r4, #0]
 8011df6:	4401      	add	r1, r0
 8011df8:	1850      	adds	r0, r2, r1
 8011dfa:	4283      	cmp	r3, r0
 8011dfc:	6011      	str	r1, [r2, #0]
 8011dfe:	d1e0      	bne.n	8011dc2 <_free_r+0x22>
 8011e00:	6818      	ldr	r0, [r3, #0]
 8011e02:	685b      	ldr	r3, [r3, #4]
 8011e04:	6053      	str	r3, [r2, #4]
 8011e06:	4408      	add	r0, r1
 8011e08:	6010      	str	r0, [r2, #0]
 8011e0a:	e7da      	b.n	8011dc2 <_free_r+0x22>
 8011e0c:	d902      	bls.n	8011e14 <_free_r+0x74>
 8011e0e:	230c      	movs	r3, #12
 8011e10:	602b      	str	r3, [r5, #0]
 8011e12:	e7d6      	b.n	8011dc2 <_free_r+0x22>
 8011e14:	6820      	ldr	r0, [r4, #0]
 8011e16:	1821      	adds	r1, r4, r0
 8011e18:	428b      	cmp	r3, r1
 8011e1a:	bf04      	itt	eq
 8011e1c:	6819      	ldreq	r1, [r3, #0]
 8011e1e:	685b      	ldreq	r3, [r3, #4]
 8011e20:	6063      	str	r3, [r4, #4]
 8011e22:	bf04      	itt	eq
 8011e24:	1809      	addeq	r1, r1, r0
 8011e26:	6021      	streq	r1, [r4, #0]
 8011e28:	6054      	str	r4, [r2, #4]
 8011e2a:	e7ca      	b.n	8011dc2 <_free_r+0x22>
 8011e2c:	bd38      	pop	{r3, r4, r5, pc}
 8011e2e:	bf00      	nop
 8011e30:	20001cf8 	.word	0x20001cf8

08011e34 <_Balloc>:
 8011e34:	b570      	push	{r4, r5, r6, lr}
 8011e36:	69c6      	ldr	r6, [r0, #28]
 8011e38:	4604      	mov	r4, r0
 8011e3a:	460d      	mov	r5, r1
 8011e3c:	b976      	cbnz	r6, 8011e5c <_Balloc+0x28>
 8011e3e:	2010      	movs	r0, #16
 8011e40:	f7fe fa98 	bl	8010374 <malloc>
 8011e44:	4602      	mov	r2, r0
 8011e46:	61e0      	str	r0, [r4, #28]
 8011e48:	b920      	cbnz	r0, 8011e54 <_Balloc+0x20>
 8011e4a:	4b18      	ldr	r3, [pc, #96]	@ (8011eac <_Balloc+0x78>)
 8011e4c:	4818      	ldr	r0, [pc, #96]	@ (8011eb0 <_Balloc+0x7c>)
 8011e4e:	216b      	movs	r1, #107	@ 0x6b
 8011e50:	f000 fc1e 	bl	8012690 <__assert_func>
 8011e54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011e58:	6006      	str	r6, [r0, #0]
 8011e5a:	60c6      	str	r6, [r0, #12]
 8011e5c:	69e6      	ldr	r6, [r4, #28]
 8011e5e:	68f3      	ldr	r3, [r6, #12]
 8011e60:	b183      	cbz	r3, 8011e84 <_Balloc+0x50>
 8011e62:	69e3      	ldr	r3, [r4, #28]
 8011e64:	68db      	ldr	r3, [r3, #12]
 8011e66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011e6a:	b9b8      	cbnz	r0, 8011e9c <_Balloc+0x68>
 8011e6c:	2101      	movs	r1, #1
 8011e6e:	fa01 f605 	lsl.w	r6, r1, r5
 8011e72:	1d72      	adds	r2, r6, #5
 8011e74:	0092      	lsls	r2, r2, #2
 8011e76:	4620      	mov	r0, r4
 8011e78:	f000 fc28 	bl	80126cc <_calloc_r>
 8011e7c:	b160      	cbz	r0, 8011e98 <_Balloc+0x64>
 8011e7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011e82:	e00e      	b.n	8011ea2 <_Balloc+0x6e>
 8011e84:	2221      	movs	r2, #33	@ 0x21
 8011e86:	2104      	movs	r1, #4
 8011e88:	4620      	mov	r0, r4
 8011e8a:	f000 fc1f 	bl	80126cc <_calloc_r>
 8011e8e:	69e3      	ldr	r3, [r4, #28]
 8011e90:	60f0      	str	r0, [r6, #12]
 8011e92:	68db      	ldr	r3, [r3, #12]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d1e4      	bne.n	8011e62 <_Balloc+0x2e>
 8011e98:	2000      	movs	r0, #0
 8011e9a:	bd70      	pop	{r4, r5, r6, pc}
 8011e9c:	6802      	ldr	r2, [r0, #0]
 8011e9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011ea8:	e7f7      	b.n	8011e9a <_Balloc+0x66>
 8011eaa:	bf00      	nop
 8011eac:	0801371d 	.word	0x0801371d
 8011eb0:	0801379d 	.word	0x0801379d

08011eb4 <_Bfree>:
 8011eb4:	b570      	push	{r4, r5, r6, lr}
 8011eb6:	69c6      	ldr	r6, [r0, #28]
 8011eb8:	4605      	mov	r5, r0
 8011eba:	460c      	mov	r4, r1
 8011ebc:	b976      	cbnz	r6, 8011edc <_Bfree+0x28>
 8011ebe:	2010      	movs	r0, #16
 8011ec0:	f7fe fa58 	bl	8010374 <malloc>
 8011ec4:	4602      	mov	r2, r0
 8011ec6:	61e8      	str	r0, [r5, #28]
 8011ec8:	b920      	cbnz	r0, 8011ed4 <_Bfree+0x20>
 8011eca:	4b09      	ldr	r3, [pc, #36]	@ (8011ef0 <_Bfree+0x3c>)
 8011ecc:	4809      	ldr	r0, [pc, #36]	@ (8011ef4 <_Bfree+0x40>)
 8011ece:	218f      	movs	r1, #143	@ 0x8f
 8011ed0:	f000 fbde 	bl	8012690 <__assert_func>
 8011ed4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011ed8:	6006      	str	r6, [r0, #0]
 8011eda:	60c6      	str	r6, [r0, #12]
 8011edc:	b13c      	cbz	r4, 8011eee <_Bfree+0x3a>
 8011ede:	69eb      	ldr	r3, [r5, #28]
 8011ee0:	6862      	ldr	r2, [r4, #4]
 8011ee2:	68db      	ldr	r3, [r3, #12]
 8011ee4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011ee8:	6021      	str	r1, [r4, #0]
 8011eea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011eee:	bd70      	pop	{r4, r5, r6, pc}
 8011ef0:	0801371d 	.word	0x0801371d
 8011ef4:	0801379d 	.word	0x0801379d

08011ef8 <__multadd>:
 8011ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011efc:	690d      	ldr	r5, [r1, #16]
 8011efe:	4607      	mov	r7, r0
 8011f00:	460c      	mov	r4, r1
 8011f02:	461e      	mov	r6, r3
 8011f04:	f101 0c14 	add.w	ip, r1, #20
 8011f08:	2000      	movs	r0, #0
 8011f0a:	f8dc 3000 	ldr.w	r3, [ip]
 8011f0e:	b299      	uxth	r1, r3
 8011f10:	fb02 6101 	mla	r1, r2, r1, r6
 8011f14:	0c1e      	lsrs	r6, r3, #16
 8011f16:	0c0b      	lsrs	r3, r1, #16
 8011f18:	fb02 3306 	mla	r3, r2, r6, r3
 8011f1c:	b289      	uxth	r1, r1
 8011f1e:	3001      	adds	r0, #1
 8011f20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011f24:	4285      	cmp	r5, r0
 8011f26:	f84c 1b04 	str.w	r1, [ip], #4
 8011f2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011f2e:	dcec      	bgt.n	8011f0a <__multadd+0x12>
 8011f30:	b30e      	cbz	r6, 8011f76 <__multadd+0x7e>
 8011f32:	68a3      	ldr	r3, [r4, #8]
 8011f34:	42ab      	cmp	r3, r5
 8011f36:	dc19      	bgt.n	8011f6c <__multadd+0x74>
 8011f38:	6861      	ldr	r1, [r4, #4]
 8011f3a:	4638      	mov	r0, r7
 8011f3c:	3101      	adds	r1, #1
 8011f3e:	f7ff ff79 	bl	8011e34 <_Balloc>
 8011f42:	4680      	mov	r8, r0
 8011f44:	b928      	cbnz	r0, 8011f52 <__multadd+0x5a>
 8011f46:	4602      	mov	r2, r0
 8011f48:	4b0c      	ldr	r3, [pc, #48]	@ (8011f7c <__multadd+0x84>)
 8011f4a:	480d      	ldr	r0, [pc, #52]	@ (8011f80 <__multadd+0x88>)
 8011f4c:	21ba      	movs	r1, #186	@ 0xba
 8011f4e:	f000 fb9f 	bl	8012690 <__assert_func>
 8011f52:	6922      	ldr	r2, [r4, #16]
 8011f54:	3202      	adds	r2, #2
 8011f56:	f104 010c 	add.w	r1, r4, #12
 8011f5a:	0092      	lsls	r2, r2, #2
 8011f5c:	300c      	adds	r0, #12
 8011f5e:	f7ff f8c2 	bl	80110e6 <memcpy>
 8011f62:	4621      	mov	r1, r4
 8011f64:	4638      	mov	r0, r7
 8011f66:	f7ff ffa5 	bl	8011eb4 <_Bfree>
 8011f6a:	4644      	mov	r4, r8
 8011f6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011f70:	3501      	adds	r5, #1
 8011f72:	615e      	str	r6, [r3, #20]
 8011f74:	6125      	str	r5, [r4, #16]
 8011f76:	4620      	mov	r0, r4
 8011f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f7c:	0801378c 	.word	0x0801378c
 8011f80:	0801379d 	.word	0x0801379d

08011f84 <__hi0bits>:
 8011f84:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011f88:	4603      	mov	r3, r0
 8011f8a:	bf36      	itet	cc
 8011f8c:	0403      	lslcc	r3, r0, #16
 8011f8e:	2000      	movcs	r0, #0
 8011f90:	2010      	movcc	r0, #16
 8011f92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011f96:	bf3c      	itt	cc
 8011f98:	021b      	lslcc	r3, r3, #8
 8011f9a:	3008      	addcc	r0, #8
 8011f9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011fa0:	bf3c      	itt	cc
 8011fa2:	011b      	lslcc	r3, r3, #4
 8011fa4:	3004      	addcc	r0, #4
 8011fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011faa:	bf3c      	itt	cc
 8011fac:	009b      	lslcc	r3, r3, #2
 8011fae:	3002      	addcc	r0, #2
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	db05      	blt.n	8011fc0 <__hi0bits+0x3c>
 8011fb4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011fb8:	f100 0001 	add.w	r0, r0, #1
 8011fbc:	bf08      	it	eq
 8011fbe:	2020      	moveq	r0, #32
 8011fc0:	4770      	bx	lr

08011fc2 <__lo0bits>:
 8011fc2:	6803      	ldr	r3, [r0, #0]
 8011fc4:	4602      	mov	r2, r0
 8011fc6:	f013 0007 	ands.w	r0, r3, #7
 8011fca:	d00b      	beq.n	8011fe4 <__lo0bits+0x22>
 8011fcc:	07d9      	lsls	r1, r3, #31
 8011fce:	d421      	bmi.n	8012014 <__lo0bits+0x52>
 8011fd0:	0798      	lsls	r0, r3, #30
 8011fd2:	bf49      	itett	mi
 8011fd4:	085b      	lsrmi	r3, r3, #1
 8011fd6:	089b      	lsrpl	r3, r3, #2
 8011fd8:	2001      	movmi	r0, #1
 8011fda:	6013      	strmi	r3, [r2, #0]
 8011fdc:	bf5c      	itt	pl
 8011fde:	6013      	strpl	r3, [r2, #0]
 8011fe0:	2002      	movpl	r0, #2
 8011fe2:	4770      	bx	lr
 8011fe4:	b299      	uxth	r1, r3
 8011fe6:	b909      	cbnz	r1, 8011fec <__lo0bits+0x2a>
 8011fe8:	0c1b      	lsrs	r3, r3, #16
 8011fea:	2010      	movs	r0, #16
 8011fec:	b2d9      	uxtb	r1, r3
 8011fee:	b909      	cbnz	r1, 8011ff4 <__lo0bits+0x32>
 8011ff0:	3008      	adds	r0, #8
 8011ff2:	0a1b      	lsrs	r3, r3, #8
 8011ff4:	0719      	lsls	r1, r3, #28
 8011ff6:	bf04      	itt	eq
 8011ff8:	091b      	lsreq	r3, r3, #4
 8011ffa:	3004      	addeq	r0, #4
 8011ffc:	0799      	lsls	r1, r3, #30
 8011ffe:	bf04      	itt	eq
 8012000:	089b      	lsreq	r3, r3, #2
 8012002:	3002      	addeq	r0, #2
 8012004:	07d9      	lsls	r1, r3, #31
 8012006:	d403      	bmi.n	8012010 <__lo0bits+0x4e>
 8012008:	085b      	lsrs	r3, r3, #1
 801200a:	f100 0001 	add.w	r0, r0, #1
 801200e:	d003      	beq.n	8012018 <__lo0bits+0x56>
 8012010:	6013      	str	r3, [r2, #0]
 8012012:	4770      	bx	lr
 8012014:	2000      	movs	r0, #0
 8012016:	4770      	bx	lr
 8012018:	2020      	movs	r0, #32
 801201a:	4770      	bx	lr

0801201c <__i2b>:
 801201c:	b510      	push	{r4, lr}
 801201e:	460c      	mov	r4, r1
 8012020:	2101      	movs	r1, #1
 8012022:	f7ff ff07 	bl	8011e34 <_Balloc>
 8012026:	4602      	mov	r2, r0
 8012028:	b928      	cbnz	r0, 8012036 <__i2b+0x1a>
 801202a:	4b05      	ldr	r3, [pc, #20]	@ (8012040 <__i2b+0x24>)
 801202c:	4805      	ldr	r0, [pc, #20]	@ (8012044 <__i2b+0x28>)
 801202e:	f240 1145 	movw	r1, #325	@ 0x145
 8012032:	f000 fb2d 	bl	8012690 <__assert_func>
 8012036:	2301      	movs	r3, #1
 8012038:	6144      	str	r4, [r0, #20]
 801203a:	6103      	str	r3, [r0, #16]
 801203c:	bd10      	pop	{r4, pc}
 801203e:	bf00      	nop
 8012040:	0801378c 	.word	0x0801378c
 8012044:	0801379d 	.word	0x0801379d

08012048 <__multiply>:
 8012048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801204c:	4614      	mov	r4, r2
 801204e:	690a      	ldr	r2, [r1, #16]
 8012050:	6923      	ldr	r3, [r4, #16]
 8012052:	429a      	cmp	r2, r3
 8012054:	bfa8      	it	ge
 8012056:	4623      	movge	r3, r4
 8012058:	460f      	mov	r7, r1
 801205a:	bfa4      	itt	ge
 801205c:	460c      	movge	r4, r1
 801205e:	461f      	movge	r7, r3
 8012060:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012064:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012068:	68a3      	ldr	r3, [r4, #8]
 801206a:	6861      	ldr	r1, [r4, #4]
 801206c:	eb0a 0609 	add.w	r6, sl, r9
 8012070:	42b3      	cmp	r3, r6
 8012072:	b085      	sub	sp, #20
 8012074:	bfb8      	it	lt
 8012076:	3101      	addlt	r1, #1
 8012078:	f7ff fedc 	bl	8011e34 <_Balloc>
 801207c:	b930      	cbnz	r0, 801208c <__multiply+0x44>
 801207e:	4602      	mov	r2, r0
 8012080:	4b44      	ldr	r3, [pc, #272]	@ (8012194 <__multiply+0x14c>)
 8012082:	4845      	ldr	r0, [pc, #276]	@ (8012198 <__multiply+0x150>)
 8012084:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012088:	f000 fb02 	bl	8012690 <__assert_func>
 801208c:	f100 0514 	add.w	r5, r0, #20
 8012090:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012094:	462b      	mov	r3, r5
 8012096:	2200      	movs	r2, #0
 8012098:	4543      	cmp	r3, r8
 801209a:	d321      	bcc.n	80120e0 <__multiply+0x98>
 801209c:	f107 0114 	add.w	r1, r7, #20
 80120a0:	f104 0214 	add.w	r2, r4, #20
 80120a4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80120a8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80120ac:	9302      	str	r3, [sp, #8]
 80120ae:	1b13      	subs	r3, r2, r4
 80120b0:	3b15      	subs	r3, #21
 80120b2:	f023 0303 	bic.w	r3, r3, #3
 80120b6:	3304      	adds	r3, #4
 80120b8:	f104 0715 	add.w	r7, r4, #21
 80120bc:	42ba      	cmp	r2, r7
 80120be:	bf38      	it	cc
 80120c0:	2304      	movcc	r3, #4
 80120c2:	9301      	str	r3, [sp, #4]
 80120c4:	9b02      	ldr	r3, [sp, #8]
 80120c6:	9103      	str	r1, [sp, #12]
 80120c8:	428b      	cmp	r3, r1
 80120ca:	d80c      	bhi.n	80120e6 <__multiply+0x9e>
 80120cc:	2e00      	cmp	r6, #0
 80120ce:	dd03      	ble.n	80120d8 <__multiply+0x90>
 80120d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d05b      	beq.n	8012190 <__multiply+0x148>
 80120d8:	6106      	str	r6, [r0, #16]
 80120da:	b005      	add	sp, #20
 80120dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120e0:	f843 2b04 	str.w	r2, [r3], #4
 80120e4:	e7d8      	b.n	8012098 <__multiply+0x50>
 80120e6:	f8b1 a000 	ldrh.w	sl, [r1]
 80120ea:	f1ba 0f00 	cmp.w	sl, #0
 80120ee:	d024      	beq.n	801213a <__multiply+0xf2>
 80120f0:	f104 0e14 	add.w	lr, r4, #20
 80120f4:	46a9      	mov	r9, r5
 80120f6:	f04f 0c00 	mov.w	ip, #0
 80120fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80120fe:	f8d9 3000 	ldr.w	r3, [r9]
 8012102:	fa1f fb87 	uxth.w	fp, r7
 8012106:	b29b      	uxth	r3, r3
 8012108:	fb0a 330b 	mla	r3, sl, fp, r3
 801210c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012110:	f8d9 7000 	ldr.w	r7, [r9]
 8012114:	4463      	add	r3, ip
 8012116:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801211a:	fb0a c70b 	mla	r7, sl, fp, ip
 801211e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012122:	b29b      	uxth	r3, r3
 8012124:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012128:	4572      	cmp	r2, lr
 801212a:	f849 3b04 	str.w	r3, [r9], #4
 801212e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012132:	d8e2      	bhi.n	80120fa <__multiply+0xb2>
 8012134:	9b01      	ldr	r3, [sp, #4]
 8012136:	f845 c003 	str.w	ip, [r5, r3]
 801213a:	9b03      	ldr	r3, [sp, #12]
 801213c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012140:	3104      	adds	r1, #4
 8012142:	f1b9 0f00 	cmp.w	r9, #0
 8012146:	d021      	beq.n	801218c <__multiply+0x144>
 8012148:	682b      	ldr	r3, [r5, #0]
 801214a:	f104 0c14 	add.w	ip, r4, #20
 801214e:	46ae      	mov	lr, r5
 8012150:	f04f 0a00 	mov.w	sl, #0
 8012154:	f8bc b000 	ldrh.w	fp, [ip]
 8012158:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801215c:	fb09 770b 	mla	r7, r9, fp, r7
 8012160:	4457      	add	r7, sl
 8012162:	b29b      	uxth	r3, r3
 8012164:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012168:	f84e 3b04 	str.w	r3, [lr], #4
 801216c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012170:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012174:	f8be 3000 	ldrh.w	r3, [lr]
 8012178:	fb09 330a 	mla	r3, r9, sl, r3
 801217c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012180:	4562      	cmp	r2, ip
 8012182:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012186:	d8e5      	bhi.n	8012154 <__multiply+0x10c>
 8012188:	9f01      	ldr	r7, [sp, #4]
 801218a:	51eb      	str	r3, [r5, r7]
 801218c:	3504      	adds	r5, #4
 801218e:	e799      	b.n	80120c4 <__multiply+0x7c>
 8012190:	3e01      	subs	r6, #1
 8012192:	e79b      	b.n	80120cc <__multiply+0x84>
 8012194:	0801378c 	.word	0x0801378c
 8012198:	0801379d 	.word	0x0801379d

0801219c <__pow5mult>:
 801219c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121a0:	4615      	mov	r5, r2
 80121a2:	f012 0203 	ands.w	r2, r2, #3
 80121a6:	4607      	mov	r7, r0
 80121a8:	460e      	mov	r6, r1
 80121aa:	d007      	beq.n	80121bc <__pow5mult+0x20>
 80121ac:	4c25      	ldr	r4, [pc, #148]	@ (8012244 <__pow5mult+0xa8>)
 80121ae:	3a01      	subs	r2, #1
 80121b0:	2300      	movs	r3, #0
 80121b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80121b6:	f7ff fe9f 	bl	8011ef8 <__multadd>
 80121ba:	4606      	mov	r6, r0
 80121bc:	10ad      	asrs	r5, r5, #2
 80121be:	d03d      	beq.n	801223c <__pow5mult+0xa0>
 80121c0:	69fc      	ldr	r4, [r7, #28]
 80121c2:	b97c      	cbnz	r4, 80121e4 <__pow5mult+0x48>
 80121c4:	2010      	movs	r0, #16
 80121c6:	f7fe f8d5 	bl	8010374 <malloc>
 80121ca:	4602      	mov	r2, r0
 80121cc:	61f8      	str	r0, [r7, #28]
 80121ce:	b928      	cbnz	r0, 80121dc <__pow5mult+0x40>
 80121d0:	4b1d      	ldr	r3, [pc, #116]	@ (8012248 <__pow5mult+0xac>)
 80121d2:	481e      	ldr	r0, [pc, #120]	@ (801224c <__pow5mult+0xb0>)
 80121d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80121d8:	f000 fa5a 	bl	8012690 <__assert_func>
 80121dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80121e0:	6004      	str	r4, [r0, #0]
 80121e2:	60c4      	str	r4, [r0, #12]
 80121e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80121e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80121ec:	b94c      	cbnz	r4, 8012202 <__pow5mult+0x66>
 80121ee:	f240 2171 	movw	r1, #625	@ 0x271
 80121f2:	4638      	mov	r0, r7
 80121f4:	f7ff ff12 	bl	801201c <__i2b>
 80121f8:	2300      	movs	r3, #0
 80121fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80121fe:	4604      	mov	r4, r0
 8012200:	6003      	str	r3, [r0, #0]
 8012202:	f04f 0900 	mov.w	r9, #0
 8012206:	07eb      	lsls	r3, r5, #31
 8012208:	d50a      	bpl.n	8012220 <__pow5mult+0x84>
 801220a:	4631      	mov	r1, r6
 801220c:	4622      	mov	r2, r4
 801220e:	4638      	mov	r0, r7
 8012210:	f7ff ff1a 	bl	8012048 <__multiply>
 8012214:	4631      	mov	r1, r6
 8012216:	4680      	mov	r8, r0
 8012218:	4638      	mov	r0, r7
 801221a:	f7ff fe4b 	bl	8011eb4 <_Bfree>
 801221e:	4646      	mov	r6, r8
 8012220:	106d      	asrs	r5, r5, #1
 8012222:	d00b      	beq.n	801223c <__pow5mult+0xa0>
 8012224:	6820      	ldr	r0, [r4, #0]
 8012226:	b938      	cbnz	r0, 8012238 <__pow5mult+0x9c>
 8012228:	4622      	mov	r2, r4
 801222a:	4621      	mov	r1, r4
 801222c:	4638      	mov	r0, r7
 801222e:	f7ff ff0b 	bl	8012048 <__multiply>
 8012232:	6020      	str	r0, [r4, #0]
 8012234:	f8c0 9000 	str.w	r9, [r0]
 8012238:	4604      	mov	r4, r0
 801223a:	e7e4      	b.n	8012206 <__pow5mult+0x6a>
 801223c:	4630      	mov	r0, r6
 801223e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012242:	bf00      	nop
 8012244:	080137f8 	.word	0x080137f8
 8012248:	0801371d 	.word	0x0801371d
 801224c:	0801379d 	.word	0x0801379d

08012250 <__lshift>:
 8012250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012254:	460c      	mov	r4, r1
 8012256:	6849      	ldr	r1, [r1, #4]
 8012258:	6923      	ldr	r3, [r4, #16]
 801225a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801225e:	68a3      	ldr	r3, [r4, #8]
 8012260:	4607      	mov	r7, r0
 8012262:	4691      	mov	r9, r2
 8012264:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012268:	f108 0601 	add.w	r6, r8, #1
 801226c:	42b3      	cmp	r3, r6
 801226e:	db0b      	blt.n	8012288 <__lshift+0x38>
 8012270:	4638      	mov	r0, r7
 8012272:	f7ff fddf 	bl	8011e34 <_Balloc>
 8012276:	4605      	mov	r5, r0
 8012278:	b948      	cbnz	r0, 801228e <__lshift+0x3e>
 801227a:	4602      	mov	r2, r0
 801227c:	4b28      	ldr	r3, [pc, #160]	@ (8012320 <__lshift+0xd0>)
 801227e:	4829      	ldr	r0, [pc, #164]	@ (8012324 <__lshift+0xd4>)
 8012280:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012284:	f000 fa04 	bl	8012690 <__assert_func>
 8012288:	3101      	adds	r1, #1
 801228a:	005b      	lsls	r3, r3, #1
 801228c:	e7ee      	b.n	801226c <__lshift+0x1c>
 801228e:	2300      	movs	r3, #0
 8012290:	f100 0114 	add.w	r1, r0, #20
 8012294:	f100 0210 	add.w	r2, r0, #16
 8012298:	4618      	mov	r0, r3
 801229a:	4553      	cmp	r3, sl
 801229c:	db33      	blt.n	8012306 <__lshift+0xb6>
 801229e:	6920      	ldr	r0, [r4, #16]
 80122a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80122a4:	f104 0314 	add.w	r3, r4, #20
 80122a8:	f019 091f 	ands.w	r9, r9, #31
 80122ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80122b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80122b4:	d02b      	beq.n	801230e <__lshift+0xbe>
 80122b6:	f1c9 0e20 	rsb	lr, r9, #32
 80122ba:	468a      	mov	sl, r1
 80122bc:	2200      	movs	r2, #0
 80122be:	6818      	ldr	r0, [r3, #0]
 80122c0:	fa00 f009 	lsl.w	r0, r0, r9
 80122c4:	4310      	orrs	r0, r2
 80122c6:	f84a 0b04 	str.w	r0, [sl], #4
 80122ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80122ce:	459c      	cmp	ip, r3
 80122d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80122d4:	d8f3      	bhi.n	80122be <__lshift+0x6e>
 80122d6:	ebac 0304 	sub.w	r3, ip, r4
 80122da:	3b15      	subs	r3, #21
 80122dc:	f023 0303 	bic.w	r3, r3, #3
 80122e0:	3304      	adds	r3, #4
 80122e2:	f104 0015 	add.w	r0, r4, #21
 80122e6:	4584      	cmp	ip, r0
 80122e8:	bf38      	it	cc
 80122ea:	2304      	movcc	r3, #4
 80122ec:	50ca      	str	r2, [r1, r3]
 80122ee:	b10a      	cbz	r2, 80122f4 <__lshift+0xa4>
 80122f0:	f108 0602 	add.w	r6, r8, #2
 80122f4:	3e01      	subs	r6, #1
 80122f6:	4638      	mov	r0, r7
 80122f8:	612e      	str	r6, [r5, #16]
 80122fa:	4621      	mov	r1, r4
 80122fc:	f7ff fdda 	bl	8011eb4 <_Bfree>
 8012300:	4628      	mov	r0, r5
 8012302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012306:	f842 0f04 	str.w	r0, [r2, #4]!
 801230a:	3301      	adds	r3, #1
 801230c:	e7c5      	b.n	801229a <__lshift+0x4a>
 801230e:	3904      	subs	r1, #4
 8012310:	f853 2b04 	ldr.w	r2, [r3], #4
 8012314:	f841 2f04 	str.w	r2, [r1, #4]!
 8012318:	459c      	cmp	ip, r3
 801231a:	d8f9      	bhi.n	8012310 <__lshift+0xc0>
 801231c:	e7ea      	b.n	80122f4 <__lshift+0xa4>
 801231e:	bf00      	nop
 8012320:	0801378c 	.word	0x0801378c
 8012324:	0801379d 	.word	0x0801379d

08012328 <__mcmp>:
 8012328:	690a      	ldr	r2, [r1, #16]
 801232a:	4603      	mov	r3, r0
 801232c:	6900      	ldr	r0, [r0, #16]
 801232e:	1a80      	subs	r0, r0, r2
 8012330:	b530      	push	{r4, r5, lr}
 8012332:	d10e      	bne.n	8012352 <__mcmp+0x2a>
 8012334:	3314      	adds	r3, #20
 8012336:	3114      	adds	r1, #20
 8012338:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801233c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012340:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012344:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012348:	4295      	cmp	r5, r2
 801234a:	d003      	beq.n	8012354 <__mcmp+0x2c>
 801234c:	d205      	bcs.n	801235a <__mcmp+0x32>
 801234e:	f04f 30ff 	mov.w	r0, #4294967295
 8012352:	bd30      	pop	{r4, r5, pc}
 8012354:	42a3      	cmp	r3, r4
 8012356:	d3f3      	bcc.n	8012340 <__mcmp+0x18>
 8012358:	e7fb      	b.n	8012352 <__mcmp+0x2a>
 801235a:	2001      	movs	r0, #1
 801235c:	e7f9      	b.n	8012352 <__mcmp+0x2a>
	...

08012360 <__mdiff>:
 8012360:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012364:	4689      	mov	r9, r1
 8012366:	4606      	mov	r6, r0
 8012368:	4611      	mov	r1, r2
 801236a:	4648      	mov	r0, r9
 801236c:	4614      	mov	r4, r2
 801236e:	f7ff ffdb 	bl	8012328 <__mcmp>
 8012372:	1e05      	subs	r5, r0, #0
 8012374:	d112      	bne.n	801239c <__mdiff+0x3c>
 8012376:	4629      	mov	r1, r5
 8012378:	4630      	mov	r0, r6
 801237a:	f7ff fd5b 	bl	8011e34 <_Balloc>
 801237e:	4602      	mov	r2, r0
 8012380:	b928      	cbnz	r0, 801238e <__mdiff+0x2e>
 8012382:	4b3f      	ldr	r3, [pc, #252]	@ (8012480 <__mdiff+0x120>)
 8012384:	f240 2137 	movw	r1, #567	@ 0x237
 8012388:	483e      	ldr	r0, [pc, #248]	@ (8012484 <__mdiff+0x124>)
 801238a:	f000 f981 	bl	8012690 <__assert_func>
 801238e:	2301      	movs	r3, #1
 8012390:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012394:	4610      	mov	r0, r2
 8012396:	b003      	add	sp, #12
 8012398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801239c:	bfbc      	itt	lt
 801239e:	464b      	movlt	r3, r9
 80123a0:	46a1      	movlt	r9, r4
 80123a2:	4630      	mov	r0, r6
 80123a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80123a8:	bfba      	itte	lt
 80123aa:	461c      	movlt	r4, r3
 80123ac:	2501      	movlt	r5, #1
 80123ae:	2500      	movge	r5, #0
 80123b0:	f7ff fd40 	bl	8011e34 <_Balloc>
 80123b4:	4602      	mov	r2, r0
 80123b6:	b918      	cbnz	r0, 80123c0 <__mdiff+0x60>
 80123b8:	4b31      	ldr	r3, [pc, #196]	@ (8012480 <__mdiff+0x120>)
 80123ba:	f240 2145 	movw	r1, #581	@ 0x245
 80123be:	e7e3      	b.n	8012388 <__mdiff+0x28>
 80123c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80123c4:	6926      	ldr	r6, [r4, #16]
 80123c6:	60c5      	str	r5, [r0, #12]
 80123c8:	f109 0310 	add.w	r3, r9, #16
 80123cc:	f109 0514 	add.w	r5, r9, #20
 80123d0:	f104 0e14 	add.w	lr, r4, #20
 80123d4:	f100 0b14 	add.w	fp, r0, #20
 80123d8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80123dc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80123e0:	9301      	str	r3, [sp, #4]
 80123e2:	46d9      	mov	r9, fp
 80123e4:	f04f 0c00 	mov.w	ip, #0
 80123e8:	9b01      	ldr	r3, [sp, #4]
 80123ea:	f85e 0b04 	ldr.w	r0, [lr], #4
 80123ee:	f853 af04 	ldr.w	sl, [r3, #4]!
 80123f2:	9301      	str	r3, [sp, #4]
 80123f4:	fa1f f38a 	uxth.w	r3, sl
 80123f8:	4619      	mov	r1, r3
 80123fa:	b283      	uxth	r3, r0
 80123fc:	1acb      	subs	r3, r1, r3
 80123fe:	0c00      	lsrs	r0, r0, #16
 8012400:	4463      	add	r3, ip
 8012402:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012406:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801240a:	b29b      	uxth	r3, r3
 801240c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012410:	4576      	cmp	r6, lr
 8012412:	f849 3b04 	str.w	r3, [r9], #4
 8012416:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801241a:	d8e5      	bhi.n	80123e8 <__mdiff+0x88>
 801241c:	1b33      	subs	r3, r6, r4
 801241e:	3b15      	subs	r3, #21
 8012420:	f023 0303 	bic.w	r3, r3, #3
 8012424:	3415      	adds	r4, #21
 8012426:	3304      	adds	r3, #4
 8012428:	42a6      	cmp	r6, r4
 801242a:	bf38      	it	cc
 801242c:	2304      	movcc	r3, #4
 801242e:	441d      	add	r5, r3
 8012430:	445b      	add	r3, fp
 8012432:	461e      	mov	r6, r3
 8012434:	462c      	mov	r4, r5
 8012436:	4544      	cmp	r4, r8
 8012438:	d30e      	bcc.n	8012458 <__mdiff+0xf8>
 801243a:	f108 0103 	add.w	r1, r8, #3
 801243e:	1b49      	subs	r1, r1, r5
 8012440:	f021 0103 	bic.w	r1, r1, #3
 8012444:	3d03      	subs	r5, #3
 8012446:	45a8      	cmp	r8, r5
 8012448:	bf38      	it	cc
 801244a:	2100      	movcc	r1, #0
 801244c:	440b      	add	r3, r1
 801244e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012452:	b191      	cbz	r1, 801247a <__mdiff+0x11a>
 8012454:	6117      	str	r7, [r2, #16]
 8012456:	e79d      	b.n	8012394 <__mdiff+0x34>
 8012458:	f854 1b04 	ldr.w	r1, [r4], #4
 801245c:	46e6      	mov	lr, ip
 801245e:	0c08      	lsrs	r0, r1, #16
 8012460:	fa1c fc81 	uxtah	ip, ip, r1
 8012464:	4471      	add	r1, lr
 8012466:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801246a:	b289      	uxth	r1, r1
 801246c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012470:	f846 1b04 	str.w	r1, [r6], #4
 8012474:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012478:	e7dd      	b.n	8012436 <__mdiff+0xd6>
 801247a:	3f01      	subs	r7, #1
 801247c:	e7e7      	b.n	801244e <__mdiff+0xee>
 801247e:	bf00      	nop
 8012480:	0801378c 	.word	0x0801378c
 8012484:	0801379d 	.word	0x0801379d

08012488 <__d2b>:
 8012488:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801248c:	460f      	mov	r7, r1
 801248e:	2101      	movs	r1, #1
 8012490:	ec59 8b10 	vmov	r8, r9, d0
 8012494:	4616      	mov	r6, r2
 8012496:	f7ff fccd 	bl	8011e34 <_Balloc>
 801249a:	4604      	mov	r4, r0
 801249c:	b930      	cbnz	r0, 80124ac <__d2b+0x24>
 801249e:	4602      	mov	r2, r0
 80124a0:	4b23      	ldr	r3, [pc, #140]	@ (8012530 <__d2b+0xa8>)
 80124a2:	4824      	ldr	r0, [pc, #144]	@ (8012534 <__d2b+0xac>)
 80124a4:	f240 310f 	movw	r1, #783	@ 0x30f
 80124a8:	f000 f8f2 	bl	8012690 <__assert_func>
 80124ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80124b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80124b4:	b10d      	cbz	r5, 80124ba <__d2b+0x32>
 80124b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80124ba:	9301      	str	r3, [sp, #4]
 80124bc:	f1b8 0300 	subs.w	r3, r8, #0
 80124c0:	d023      	beq.n	801250a <__d2b+0x82>
 80124c2:	4668      	mov	r0, sp
 80124c4:	9300      	str	r3, [sp, #0]
 80124c6:	f7ff fd7c 	bl	8011fc2 <__lo0bits>
 80124ca:	e9dd 1200 	ldrd	r1, r2, [sp]
 80124ce:	b1d0      	cbz	r0, 8012506 <__d2b+0x7e>
 80124d0:	f1c0 0320 	rsb	r3, r0, #32
 80124d4:	fa02 f303 	lsl.w	r3, r2, r3
 80124d8:	430b      	orrs	r3, r1
 80124da:	40c2      	lsrs	r2, r0
 80124dc:	6163      	str	r3, [r4, #20]
 80124de:	9201      	str	r2, [sp, #4]
 80124e0:	9b01      	ldr	r3, [sp, #4]
 80124e2:	61a3      	str	r3, [r4, #24]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	bf0c      	ite	eq
 80124e8:	2201      	moveq	r2, #1
 80124ea:	2202      	movne	r2, #2
 80124ec:	6122      	str	r2, [r4, #16]
 80124ee:	b1a5      	cbz	r5, 801251a <__d2b+0x92>
 80124f0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80124f4:	4405      	add	r5, r0
 80124f6:	603d      	str	r5, [r7, #0]
 80124f8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80124fc:	6030      	str	r0, [r6, #0]
 80124fe:	4620      	mov	r0, r4
 8012500:	b003      	add	sp, #12
 8012502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012506:	6161      	str	r1, [r4, #20]
 8012508:	e7ea      	b.n	80124e0 <__d2b+0x58>
 801250a:	a801      	add	r0, sp, #4
 801250c:	f7ff fd59 	bl	8011fc2 <__lo0bits>
 8012510:	9b01      	ldr	r3, [sp, #4]
 8012512:	6163      	str	r3, [r4, #20]
 8012514:	3020      	adds	r0, #32
 8012516:	2201      	movs	r2, #1
 8012518:	e7e8      	b.n	80124ec <__d2b+0x64>
 801251a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801251e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012522:	6038      	str	r0, [r7, #0]
 8012524:	6918      	ldr	r0, [r3, #16]
 8012526:	f7ff fd2d 	bl	8011f84 <__hi0bits>
 801252a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801252e:	e7e5      	b.n	80124fc <__d2b+0x74>
 8012530:	0801378c 	.word	0x0801378c
 8012534:	0801379d 	.word	0x0801379d

08012538 <__sflush_r>:
 8012538:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801253c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012540:	0716      	lsls	r6, r2, #28
 8012542:	4605      	mov	r5, r0
 8012544:	460c      	mov	r4, r1
 8012546:	d454      	bmi.n	80125f2 <__sflush_r+0xba>
 8012548:	684b      	ldr	r3, [r1, #4]
 801254a:	2b00      	cmp	r3, #0
 801254c:	dc02      	bgt.n	8012554 <__sflush_r+0x1c>
 801254e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012550:	2b00      	cmp	r3, #0
 8012552:	dd48      	ble.n	80125e6 <__sflush_r+0xae>
 8012554:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012556:	2e00      	cmp	r6, #0
 8012558:	d045      	beq.n	80125e6 <__sflush_r+0xae>
 801255a:	2300      	movs	r3, #0
 801255c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012560:	682f      	ldr	r7, [r5, #0]
 8012562:	6a21      	ldr	r1, [r4, #32]
 8012564:	602b      	str	r3, [r5, #0]
 8012566:	d030      	beq.n	80125ca <__sflush_r+0x92>
 8012568:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801256a:	89a3      	ldrh	r3, [r4, #12]
 801256c:	0759      	lsls	r1, r3, #29
 801256e:	d505      	bpl.n	801257c <__sflush_r+0x44>
 8012570:	6863      	ldr	r3, [r4, #4]
 8012572:	1ad2      	subs	r2, r2, r3
 8012574:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012576:	b10b      	cbz	r3, 801257c <__sflush_r+0x44>
 8012578:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801257a:	1ad2      	subs	r2, r2, r3
 801257c:	2300      	movs	r3, #0
 801257e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012580:	6a21      	ldr	r1, [r4, #32]
 8012582:	4628      	mov	r0, r5
 8012584:	47b0      	blx	r6
 8012586:	1c43      	adds	r3, r0, #1
 8012588:	89a3      	ldrh	r3, [r4, #12]
 801258a:	d106      	bne.n	801259a <__sflush_r+0x62>
 801258c:	6829      	ldr	r1, [r5, #0]
 801258e:	291d      	cmp	r1, #29
 8012590:	d82b      	bhi.n	80125ea <__sflush_r+0xb2>
 8012592:	4a2a      	ldr	r2, [pc, #168]	@ (801263c <__sflush_r+0x104>)
 8012594:	410a      	asrs	r2, r1
 8012596:	07d6      	lsls	r6, r2, #31
 8012598:	d427      	bmi.n	80125ea <__sflush_r+0xb2>
 801259a:	2200      	movs	r2, #0
 801259c:	6062      	str	r2, [r4, #4]
 801259e:	04d9      	lsls	r1, r3, #19
 80125a0:	6922      	ldr	r2, [r4, #16]
 80125a2:	6022      	str	r2, [r4, #0]
 80125a4:	d504      	bpl.n	80125b0 <__sflush_r+0x78>
 80125a6:	1c42      	adds	r2, r0, #1
 80125a8:	d101      	bne.n	80125ae <__sflush_r+0x76>
 80125aa:	682b      	ldr	r3, [r5, #0]
 80125ac:	b903      	cbnz	r3, 80125b0 <__sflush_r+0x78>
 80125ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80125b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80125b2:	602f      	str	r7, [r5, #0]
 80125b4:	b1b9      	cbz	r1, 80125e6 <__sflush_r+0xae>
 80125b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80125ba:	4299      	cmp	r1, r3
 80125bc:	d002      	beq.n	80125c4 <__sflush_r+0x8c>
 80125be:	4628      	mov	r0, r5
 80125c0:	f7ff fbee 	bl	8011da0 <_free_r>
 80125c4:	2300      	movs	r3, #0
 80125c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80125c8:	e00d      	b.n	80125e6 <__sflush_r+0xae>
 80125ca:	2301      	movs	r3, #1
 80125cc:	4628      	mov	r0, r5
 80125ce:	47b0      	blx	r6
 80125d0:	4602      	mov	r2, r0
 80125d2:	1c50      	adds	r0, r2, #1
 80125d4:	d1c9      	bne.n	801256a <__sflush_r+0x32>
 80125d6:	682b      	ldr	r3, [r5, #0]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d0c6      	beq.n	801256a <__sflush_r+0x32>
 80125dc:	2b1d      	cmp	r3, #29
 80125de:	d001      	beq.n	80125e4 <__sflush_r+0xac>
 80125e0:	2b16      	cmp	r3, #22
 80125e2:	d11e      	bne.n	8012622 <__sflush_r+0xea>
 80125e4:	602f      	str	r7, [r5, #0]
 80125e6:	2000      	movs	r0, #0
 80125e8:	e022      	b.n	8012630 <__sflush_r+0xf8>
 80125ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80125ee:	b21b      	sxth	r3, r3
 80125f0:	e01b      	b.n	801262a <__sflush_r+0xf2>
 80125f2:	690f      	ldr	r7, [r1, #16]
 80125f4:	2f00      	cmp	r7, #0
 80125f6:	d0f6      	beq.n	80125e6 <__sflush_r+0xae>
 80125f8:	0793      	lsls	r3, r2, #30
 80125fa:	680e      	ldr	r6, [r1, #0]
 80125fc:	bf08      	it	eq
 80125fe:	694b      	ldreq	r3, [r1, #20]
 8012600:	600f      	str	r7, [r1, #0]
 8012602:	bf18      	it	ne
 8012604:	2300      	movne	r3, #0
 8012606:	eba6 0807 	sub.w	r8, r6, r7
 801260a:	608b      	str	r3, [r1, #8]
 801260c:	f1b8 0f00 	cmp.w	r8, #0
 8012610:	dde9      	ble.n	80125e6 <__sflush_r+0xae>
 8012612:	6a21      	ldr	r1, [r4, #32]
 8012614:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012616:	4643      	mov	r3, r8
 8012618:	463a      	mov	r2, r7
 801261a:	4628      	mov	r0, r5
 801261c:	47b0      	blx	r6
 801261e:	2800      	cmp	r0, #0
 8012620:	dc08      	bgt.n	8012634 <__sflush_r+0xfc>
 8012622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012626:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801262a:	81a3      	strh	r3, [r4, #12]
 801262c:	f04f 30ff 	mov.w	r0, #4294967295
 8012630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012634:	4407      	add	r7, r0
 8012636:	eba8 0800 	sub.w	r8, r8, r0
 801263a:	e7e7      	b.n	801260c <__sflush_r+0xd4>
 801263c:	dfbffffe 	.word	0xdfbffffe

08012640 <_fflush_r>:
 8012640:	b538      	push	{r3, r4, r5, lr}
 8012642:	690b      	ldr	r3, [r1, #16]
 8012644:	4605      	mov	r5, r0
 8012646:	460c      	mov	r4, r1
 8012648:	b913      	cbnz	r3, 8012650 <_fflush_r+0x10>
 801264a:	2500      	movs	r5, #0
 801264c:	4628      	mov	r0, r5
 801264e:	bd38      	pop	{r3, r4, r5, pc}
 8012650:	b118      	cbz	r0, 801265a <_fflush_r+0x1a>
 8012652:	6a03      	ldr	r3, [r0, #32]
 8012654:	b90b      	cbnz	r3, 801265a <_fflush_r+0x1a>
 8012656:	f7fe fc2f 	bl	8010eb8 <__sinit>
 801265a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d0f3      	beq.n	801264a <_fflush_r+0xa>
 8012662:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012664:	07d0      	lsls	r0, r2, #31
 8012666:	d404      	bmi.n	8012672 <_fflush_r+0x32>
 8012668:	0599      	lsls	r1, r3, #22
 801266a:	d402      	bmi.n	8012672 <_fflush_r+0x32>
 801266c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801266e:	f7fe fd38 	bl	80110e2 <__retarget_lock_acquire_recursive>
 8012672:	4628      	mov	r0, r5
 8012674:	4621      	mov	r1, r4
 8012676:	f7ff ff5f 	bl	8012538 <__sflush_r>
 801267a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801267c:	07da      	lsls	r2, r3, #31
 801267e:	4605      	mov	r5, r0
 8012680:	d4e4      	bmi.n	801264c <_fflush_r+0xc>
 8012682:	89a3      	ldrh	r3, [r4, #12]
 8012684:	059b      	lsls	r3, r3, #22
 8012686:	d4e1      	bmi.n	801264c <_fflush_r+0xc>
 8012688:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801268a:	f7fe fd2b 	bl	80110e4 <__retarget_lock_release_recursive>
 801268e:	e7dd      	b.n	801264c <_fflush_r+0xc>

08012690 <__assert_func>:
 8012690:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012692:	4614      	mov	r4, r2
 8012694:	461a      	mov	r2, r3
 8012696:	4b09      	ldr	r3, [pc, #36]	@ (80126bc <__assert_func+0x2c>)
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	4605      	mov	r5, r0
 801269c:	68d8      	ldr	r0, [r3, #12]
 801269e:	b954      	cbnz	r4, 80126b6 <__assert_func+0x26>
 80126a0:	4b07      	ldr	r3, [pc, #28]	@ (80126c0 <__assert_func+0x30>)
 80126a2:	461c      	mov	r4, r3
 80126a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80126a8:	9100      	str	r1, [sp, #0]
 80126aa:	462b      	mov	r3, r5
 80126ac:	4905      	ldr	r1, [pc, #20]	@ (80126c4 <__assert_func+0x34>)
 80126ae:	f000 f841 	bl	8012734 <fiprintf>
 80126b2:	f000 f851 	bl	8012758 <abort>
 80126b6:	4b04      	ldr	r3, [pc, #16]	@ (80126c8 <__assert_func+0x38>)
 80126b8:	e7f4      	b.n	80126a4 <__assert_func+0x14>
 80126ba:	bf00      	nop
 80126bc:	20000138 	.word	0x20000138
 80126c0:	0801393d 	.word	0x0801393d
 80126c4:	0801390f 	.word	0x0801390f
 80126c8:	08013902 	.word	0x08013902

080126cc <_calloc_r>:
 80126cc:	b570      	push	{r4, r5, r6, lr}
 80126ce:	fba1 5402 	umull	r5, r4, r1, r2
 80126d2:	b93c      	cbnz	r4, 80126e4 <_calloc_r+0x18>
 80126d4:	4629      	mov	r1, r5
 80126d6:	f7fd fe7f 	bl	80103d8 <_malloc_r>
 80126da:	4606      	mov	r6, r0
 80126dc:	b928      	cbnz	r0, 80126ea <_calloc_r+0x1e>
 80126de:	2600      	movs	r6, #0
 80126e0:	4630      	mov	r0, r6
 80126e2:	bd70      	pop	{r4, r5, r6, pc}
 80126e4:	220c      	movs	r2, #12
 80126e6:	6002      	str	r2, [r0, #0]
 80126e8:	e7f9      	b.n	80126de <_calloc_r+0x12>
 80126ea:	462a      	mov	r2, r5
 80126ec:	4621      	mov	r1, r4
 80126ee:	f7fe fc5c 	bl	8010faa <memset>
 80126f2:	e7f5      	b.n	80126e0 <_calloc_r+0x14>

080126f4 <__ascii_mbtowc>:
 80126f4:	b082      	sub	sp, #8
 80126f6:	b901      	cbnz	r1, 80126fa <__ascii_mbtowc+0x6>
 80126f8:	a901      	add	r1, sp, #4
 80126fa:	b142      	cbz	r2, 801270e <__ascii_mbtowc+0x1a>
 80126fc:	b14b      	cbz	r3, 8012712 <__ascii_mbtowc+0x1e>
 80126fe:	7813      	ldrb	r3, [r2, #0]
 8012700:	600b      	str	r3, [r1, #0]
 8012702:	7812      	ldrb	r2, [r2, #0]
 8012704:	1e10      	subs	r0, r2, #0
 8012706:	bf18      	it	ne
 8012708:	2001      	movne	r0, #1
 801270a:	b002      	add	sp, #8
 801270c:	4770      	bx	lr
 801270e:	4610      	mov	r0, r2
 8012710:	e7fb      	b.n	801270a <__ascii_mbtowc+0x16>
 8012712:	f06f 0001 	mvn.w	r0, #1
 8012716:	e7f8      	b.n	801270a <__ascii_mbtowc+0x16>

08012718 <__ascii_wctomb>:
 8012718:	4603      	mov	r3, r0
 801271a:	4608      	mov	r0, r1
 801271c:	b141      	cbz	r1, 8012730 <__ascii_wctomb+0x18>
 801271e:	2aff      	cmp	r2, #255	@ 0xff
 8012720:	d904      	bls.n	801272c <__ascii_wctomb+0x14>
 8012722:	228a      	movs	r2, #138	@ 0x8a
 8012724:	601a      	str	r2, [r3, #0]
 8012726:	f04f 30ff 	mov.w	r0, #4294967295
 801272a:	4770      	bx	lr
 801272c:	700a      	strb	r2, [r1, #0]
 801272e:	2001      	movs	r0, #1
 8012730:	4770      	bx	lr
	...

08012734 <fiprintf>:
 8012734:	b40e      	push	{r1, r2, r3}
 8012736:	b503      	push	{r0, r1, lr}
 8012738:	4601      	mov	r1, r0
 801273a:	ab03      	add	r3, sp, #12
 801273c:	4805      	ldr	r0, [pc, #20]	@ (8012754 <fiprintf+0x20>)
 801273e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012742:	6800      	ldr	r0, [r0, #0]
 8012744:	9301      	str	r3, [sp, #4]
 8012746:	f000 f837 	bl	80127b8 <_vfiprintf_r>
 801274a:	b002      	add	sp, #8
 801274c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012750:	b003      	add	sp, #12
 8012752:	4770      	bx	lr
 8012754:	20000138 	.word	0x20000138

08012758 <abort>:
 8012758:	b508      	push	{r3, lr}
 801275a:	2006      	movs	r0, #6
 801275c:	f000 fa00 	bl	8012b60 <raise>
 8012760:	2001      	movs	r0, #1
 8012762:	f7f0 fa59 	bl	8002c18 <_exit>

08012766 <__sfputc_r>:
 8012766:	6893      	ldr	r3, [r2, #8]
 8012768:	3b01      	subs	r3, #1
 801276a:	2b00      	cmp	r3, #0
 801276c:	b410      	push	{r4}
 801276e:	6093      	str	r3, [r2, #8]
 8012770:	da08      	bge.n	8012784 <__sfputc_r+0x1e>
 8012772:	6994      	ldr	r4, [r2, #24]
 8012774:	42a3      	cmp	r3, r4
 8012776:	db01      	blt.n	801277c <__sfputc_r+0x16>
 8012778:	290a      	cmp	r1, #10
 801277a:	d103      	bne.n	8012784 <__sfputc_r+0x1e>
 801277c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012780:	f000 b932 	b.w	80129e8 <__swbuf_r>
 8012784:	6813      	ldr	r3, [r2, #0]
 8012786:	1c58      	adds	r0, r3, #1
 8012788:	6010      	str	r0, [r2, #0]
 801278a:	7019      	strb	r1, [r3, #0]
 801278c:	4608      	mov	r0, r1
 801278e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012792:	4770      	bx	lr

08012794 <__sfputs_r>:
 8012794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012796:	4606      	mov	r6, r0
 8012798:	460f      	mov	r7, r1
 801279a:	4614      	mov	r4, r2
 801279c:	18d5      	adds	r5, r2, r3
 801279e:	42ac      	cmp	r4, r5
 80127a0:	d101      	bne.n	80127a6 <__sfputs_r+0x12>
 80127a2:	2000      	movs	r0, #0
 80127a4:	e007      	b.n	80127b6 <__sfputs_r+0x22>
 80127a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127aa:	463a      	mov	r2, r7
 80127ac:	4630      	mov	r0, r6
 80127ae:	f7ff ffda 	bl	8012766 <__sfputc_r>
 80127b2:	1c43      	adds	r3, r0, #1
 80127b4:	d1f3      	bne.n	801279e <__sfputs_r+0xa>
 80127b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080127b8 <_vfiprintf_r>:
 80127b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127bc:	460d      	mov	r5, r1
 80127be:	b09d      	sub	sp, #116	@ 0x74
 80127c0:	4614      	mov	r4, r2
 80127c2:	4698      	mov	r8, r3
 80127c4:	4606      	mov	r6, r0
 80127c6:	b118      	cbz	r0, 80127d0 <_vfiprintf_r+0x18>
 80127c8:	6a03      	ldr	r3, [r0, #32]
 80127ca:	b90b      	cbnz	r3, 80127d0 <_vfiprintf_r+0x18>
 80127cc:	f7fe fb74 	bl	8010eb8 <__sinit>
 80127d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80127d2:	07d9      	lsls	r1, r3, #31
 80127d4:	d405      	bmi.n	80127e2 <_vfiprintf_r+0x2a>
 80127d6:	89ab      	ldrh	r3, [r5, #12]
 80127d8:	059a      	lsls	r2, r3, #22
 80127da:	d402      	bmi.n	80127e2 <_vfiprintf_r+0x2a>
 80127dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80127de:	f7fe fc80 	bl	80110e2 <__retarget_lock_acquire_recursive>
 80127e2:	89ab      	ldrh	r3, [r5, #12]
 80127e4:	071b      	lsls	r3, r3, #28
 80127e6:	d501      	bpl.n	80127ec <_vfiprintf_r+0x34>
 80127e8:	692b      	ldr	r3, [r5, #16]
 80127ea:	b99b      	cbnz	r3, 8012814 <_vfiprintf_r+0x5c>
 80127ec:	4629      	mov	r1, r5
 80127ee:	4630      	mov	r0, r6
 80127f0:	f000 f938 	bl	8012a64 <__swsetup_r>
 80127f4:	b170      	cbz	r0, 8012814 <_vfiprintf_r+0x5c>
 80127f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80127f8:	07dc      	lsls	r4, r3, #31
 80127fa:	d504      	bpl.n	8012806 <_vfiprintf_r+0x4e>
 80127fc:	f04f 30ff 	mov.w	r0, #4294967295
 8012800:	b01d      	add	sp, #116	@ 0x74
 8012802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012806:	89ab      	ldrh	r3, [r5, #12]
 8012808:	0598      	lsls	r0, r3, #22
 801280a:	d4f7      	bmi.n	80127fc <_vfiprintf_r+0x44>
 801280c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801280e:	f7fe fc69 	bl	80110e4 <__retarget_lock_release_recursive>
 8012812:	e7f3      	b.n	80127fc <_vfiprintf_r+0x44>
 8012814:	2300      	movs	r3, #0
 8012816:	9309      	str	r3, [sp, #36]	@ 0x24
 8012818:	2320      	movs	r3, #32
 801281a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801281e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012822:	2330      	movs	r3, #48	@ 0x30
 8012824:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80129d4 <_vfiprintf_r+0x21c>
 8012828:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801282c:	f04f 0901 	mov.w	r9, #1
 8012830:	4623      	mov	r3, r4
 8012832:	469a      	mov	sl, r3
 8012834:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012838:	b10a      	cbz	r2, 801283e <_vfiprintf_r+0x86>
 801283a:	2a25      	cmp	r2, #37	@ 0x25
 801283c:	d1f9      	bne.n	8012832 <_vfiprintf_r+0x7a>
 801283e:	ebba 0b04 	subs.w	fp, sl, r4
 8012842:	d00b      	beq.n	801285c <_vfiprintf_r+0xa4>
 8012844:	465b      	mov	r3, fp
 8012846:	4622      	mov	r2, r4
 8012848:	4629      	mov	r1, r5
 801284a:	4630      	mov	r0, r6
 801284c:	f7ff ffa2 	bl	8012794 <__sfputs_r>
 8012850:	3001      	adds	r0, #1
 8012852:	f000 80a7 	beq.w	80129a4 <_vfiprintf_r+0x1ec>
 8012856:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012858:	445a      	add	r2, fp
 801285a:	9209      	str	r2, [sp, #36]	@ 0x24
 801285c:	f89a 3000 	ldrb.w	r3, [sl]
 8012860:	2b00      	cmp	r3, #0
 8012862:	f000 809f 	beq.w	80129a4 <_vfiprintf_r+0x1ec>
 8012866:	2300      	movs	r3, #0
 8012868:	f04f 32ff 	mov.w	r2, #4294967295
 801286c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012870:	f10a 0a01 	add.w	sl, sl, #1
 8012874:	9304      	str	r3, [sp, #16]
 8012876:	9307      	str	r3, [sp, #28]
 8012878:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801287c:	931a      	str	r3, [sp, #104]	@ 0x68
 801287e:	4654      	mov	r4, sl
 8012880:	2205      	movs	r2, #5
 8012882:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012886:	4853      	ldr	r0, [pc, #332]	@ (80129d4 <_vfiprintf_r+0x21c>)
 8012888:	f7ed fcaa 	bl	80001e0 <memchr>
 801288c:	9a04      	ldr	r2, [sp, #16]
 801288e:	b9d8      	cbnz	r0, 80128c8 <_vfiprintf_r+0x110>
 8012890:	06d1      	lsls	r1, r2, #27
 8012892:	bf44      	itt	mi
 8012894:	2320      	movmi	r3, #32
 8012896:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801289a:	0713      	lsls	r3, r2, #28
 801289c:	bf44      	itt	mi
 801289e:	232b      	movmi	r3, #43	@ 0x2b
 80128a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80128a4:	f89a 3000 	ldrb.w	r3, [sl]
 80128a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80128aa:	d015      	beq.n	80128d8 <_vfiprintf_r+0x120>
 80128ac:	9a07      	ldr	r2, [sp, #28]
 80128ae:	4654      	mov	r4, sl
 80128b0:	2000      	movs	r0, #0
 80128b2:	f04f 0c0a 	mov.w	ip, #10
 80128b6:	4621      	mov	r1, r4
 80128b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80128bc:	3b30      	subs	r3, #48	@ 0x30
 80128be:	2b09      	cmp	r3, #9
 80128c0:	d94b      	bls.n	801295a <_vfiprintf_r+0x1a2>
 80128c2:	b1b0      	cbz	r0, 80128f2 <_vfiprintf_r+0x13a>
 80128c4:	9207      	str	r2, [sp, #28]
 80128c6:	e014      	b.n	80128f2 <_vfiprintf_r+0x13a>
 80128c8:	eba0 0308 	sub.w	r3, r0, r8
 80128cc:	fa09 f303 	lsl.w	r3, r9, r3
 80128d0:	4313      	orrs	r3, r2
 80128d2:	9304      	str	r3, [sp, #16]
 80128d4:	46a2      	mov	sl, r4
 80128d6:	e7d2      	b.n	801287e <_vfiprintf_r+0xc6>
 80128d8:	9b03      	ldr	r3, [sp, #12]
 80128da:	1d19      	adds	r1, r3, #4
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	9103      	str	r1, [sp, #12]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	bfbb      	ittet	lt
 80128e4:	425b      	neglt	r3, r3
 80128e6:	f042 0202 	orrlt.w	r2, r2, #2
 80128ea:	9307      	strge	r3, [sp, #28]
 80128ec:	9307      	strlt	r3, [sp, #28]
 80128ee:	bfb8      	it	lt
 80128f0:	9204      	strlt	r2, [sp, #16]
 80128f2:	7823      	ldrb	r3, [r4, #0]
 80128f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80128f6:	d10a      	bne.n	801290e <_vfiprintf_r+0x156>
 80128f8:	7863      	ldrb	r3, [r4, #1]
 80128fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80128fc:	d132      	bne.n	8012964 <_vfiprintf_r+0x1ac>
 80128fe:	9b03      	ldr	r3, [sp, #12]
 8012900:	1d1a      	adds	r2, r3, #4
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	9203      	str	r2, [sp, #12]
 8012906:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801290a:	3402      	adds	r4, #2
 801290c:	9305      	str	r3, [sp, #20]
 801290e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80129e4 <_vfiprintf_r+0x22c>
 8012912:	7821      	ldrb	r1, [r4, #0]
 8012914:	2203      	movs	r2, #3
 8012916:	4650      	mov	r0, sl
 8012918:	f7ed fc62 	bl	80001e0 <memchr>
 801291c:	b138      	cbz	r0, 801292e <_vfiprintf_r+0x176>
 801291e:	9b04      	ldr	r3, [sp, #16]
 8012920:	eba0 000a 	sub.w	r0, r0, sl
 8012924:	2240      	movs	r2, #64	@ 0x40
 8012926:	4082      	lsls	r2, r0
 8012928:	4313      	orrs	r3, r2
 801292a:	3401      	adds	r4, #1
 801292c:	9304      	str	r3, [sp, #16]
 801292e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012932:	4829      	ldr	r0, [pc, #164]	@ (80129d8 <_vfiprintf_r+0x220>)
 8012934:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012938:	2206      	movs	r2, #6
 801293a:	f7ed fc51 	bl	80001e0 <memchr>
 801293e:	2800      	cmp	r0, #0
 8012940:	d03f      	beq.n	80129c2 <_vfiprintf_r+0x20a>
 8012942:	4b26      	ldr	r3, [pc, #152]	@ (80129dc <_vfiprintf_r+0x224>)
 8012944:	bb1b      	cbnz	r3, 801298e <_vfiprintf_r+0x1d6>
 8012946:	9b03      	ldr	r3, [sp, #12]
 8012948:	3307      	adds	r3, #7
 801294a:	f023 0307 	bic.w	r3, r3, #7
 801294e:	3308      	adds	r3, #8
 8012950:	9303      	str	r3, [sp, #12]
 8012952:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012954:	443b      	add	r3, r7
 8012956:	9309      	str	r3, [sp, #36]	@ 0x24
 8012958:	e76a      	b.n	8012830 <_vfiprintf_r+0x78>
 801295a:	fb0c 3202 	mla	r2, ip, r2, r3
 801295e:	460c      	mov	r4, r1
 8012960:	2001      	movs	r0, #1
 8012962:	e7a8      	b.n	80128b6 <_vfiprintf_r+0xfe>
 8012964:	2300      	movs	r3, #0
 8012966:	3401      	adds	r4, #1
 8012968:	9305      	str	r3, [sp, #20]
 801296a:	4619      	mov	r1, r3
 801296c:	f04f 0c0a 	mov.w	ip, #10
 8012970:	4620      	mov	r0, r4
 8012972:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012976:	3a30      	subs	r2, #48	@ 0x30
 8012978:	2a09      	cmp	r2, #9
 801297a:	d903      	bls.n	8012984 <_vfiprintf_r+0x1cc>
 801297c:	2b00      	cmp	r3, #0
 801297e:	d0c6      	beq.n	801290e <_vfiprintf_r+0x156>
 8012980:	9105      	str	r1, [sp, #20]
 8012982:	e7c4      	b.n	801290e <_vfiprintf_r+0x156>
 8012984:	fb0c 2101 	mla	r1, ip, r1, r2
 8012988:	4604      	mov	r4, r0
 801298a:	2301      	movs	r3, #1
 801298c:	e7f0      	b.n	8012970 <_vfiprintf_r+0x1b8>
 801298e:	ab03      	add	r3, sp, #12
 8012990:	9300      	str	r3, [sp, #0]
 8012992:	462a      	mov	r2, r5
 8012994:	4b12      	ldr	r3, [pc, #72]	@ (80129e0 <_vfiprintf_r+0x228>)
 8012996:	a904      	add	r1, sp, #16
 8012998:	4630      	mov	r0, r6
 801299a:	f7fd fe49 	bl	8010630 <_printf_float>
 801299e:	4607      	mov	r7, r0
 80129a0:	1c78      	adds	r0, r7, #1
 80129a2:	d1d6      	bne.n	8012952 <_vfiprintf_r+0x19a>
 80129a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80129a6:	07d9      	lsls	r1, r3, #31
 80129a8:	d405      	bmi.n	80129b6 <_vfiprintf_r+0x1fe>
 80129aa:	89ab      	ldrh	r3, [r5, #12]
 80129ac:	059a      	lsls	r2, r3, #22
 80129ae:	d402      	bmi.n	80129b6 <_vfiprintf_r+0x1fe>
 80129b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80129b2:	f7fe fb97 	bl	80110e4 <__retarget_lock_release_recursive>
 80129b6:	89ab      	ldrh	r3, [r5, #12]
 80129b8:	065b      	lsls	r3, r3, #25
 80129ba:	f53f af1f 	bmi.w	80127fc <_vfiprintf_r+0x44>
 80129be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80129c0:	e71e      	b.n	8012800 <_vfiprintf_r+0x48>
 80129c2:	ab03      	add	r3, sp, #12
 80129c4:	9300      	str	r3, [sp, #0]
 80129c6:	462a      	mov	r2, r5
 80129c8:	4b05      	ldr	r3, [pc, #20]	@ (80129e0 <_vfiprintf_r+0x228>)
 80129ca:	a904      	add	r1, sp, #16
 80129cc:	4630      	mov	r0, r6
 80129ce:	f7fe f8c7 	bl	8010b60 <_printf_i>
 80129d2:	e7e4      	b.n	801299e <_vfiprintf_r+0x1e6>
 80129d4:	08013a3f 	.word	0x08013a3f
 80129d8:	08013a49 	.word	0x08013a49
 80129dc:	08010631 	.word	0x08010631
 80129e0:	08012795 	.word	0x08012795
 80129e4:	08013a45 	.word	0x08013a45

080129e8 <__swbuf_r>:
 80129e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129ea:	460e      	mov	r6, r1
 80129ec:	4614      	mov	r4, r2
 80129ee:	4605      	mov	r5, r0
 80129f0:	b118      	cbz	r0, 80129fa <__swbuf_r+0x12>
 80129f2:	6a03      	ldr	r3, [r0, #32]
 80129f4:	b90b      	cbnz	r3, 80129fa <__swbuf_r+0x12>
 80129f6:	f7fe fa5f 	bl	8010eb8 <__sinit>
 80129fa:	69a3      	ldr	r3, [r4, #24]
 80129fc:	60a3      	str	r3, [r4, #8]
 80129fe:	89a3      	ldrh	r3, [r4, #12]
 8012a00:	071a      	lsls	r2, r3, #28
 8012a02:	d501      	bpl.n	8012a08 <__swbuf_r+0x20>
 8012a04:	6923      	ldr	r3, [r4, #16]
 8012a06:	b943      	cbnz	r3, 8012a1a <__swbuf_r+0x32>
 8012a08:	4621      	mov	r1, r4
 8012a0a:	4628      	mov	r0, r5
 8012a0c:	f000 f82a 	bl	8012a64 <__swsetup_r>
 8012a10:	b118      	cbz	r0, 8012a1a <__swbuf_r+0x32>
 8012a12:	f04f 37ff 	mov.w	r7, #4294967295
 8012a16:	4638      	mov	r0, r7
 8012a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a1a:	6823      	ldr	r3, [r4, #0]
 8012a1c:	6922      	ldr	r2, [r4, #16]
 8012a1e:	1a98      	subs	r0, r3, r2
 8012a20:	6963      	ldr	r3, [r4, #20]
 8012a22:	b2f6      	uxtb	r6, r6
 8012a24:	4283      	cmp	r3, r0
 8012a26:	4637      	mov	r7, r6
 8012a28:	dc05      	bgt.n	8012a36 <__swbuf_r+0x4e>
 8012a2a:	4621      	mov	r1, r4
 8012a2c:	4628      	mov	r0, r5
 8012a2e:	f7ff fe07 	bl	8012640 <_fflush_r>
 8012a32:	2800      	cmp	r0, #0
 8012a34:	d1ed      	bne.n	8012a12 <__swbuf_r+0x2a>
 8012a36:	68a3      	ldr	r3, [r4, #8]
 8012a38:	3b01      	subs	r3, #1
 8012a3a:	60a3      	str	r3, [r4, #8]
 8012a3c:	6823      	ldr	r3, [r4, #0]
 8012a3e:	1c5a      	adds	r2, r3, #1
 8012a40:	6022      	str	r2, [r4, #0]
 8012a42:	701e      	strb	r6, [r3, #0]
 8012a44:	6962      	ldr	r2, [r4, #20]
 8012a46:	1c43      	adds	r3, r0, #1
 8012a48:	429a      	cmp	r2, r3
 8012a4a:	d004      	beq.n	8012a56 <__swbuf_r+0x6e>
 8012a4c:	89a3      	ldrh	r3, [r4, #12]
 8012a4e:	07db      	lsls	r3, r3, #31
 8012a50:	d5e1      	bpl.n	8012a16 <__swbuf_r+0x2e>
 8012a52:	2e0a      	cmp	r6, #10
 8012a54:	d1df      	bne.n	8012a16 <__swbuf_r+0x2e>
 8012a56:	4621      	mov	r1, r4
 8012a58:	4628      	mov	r0, r5
 8012a5a:	f7ff fdf1 	bl	8012640 <_fflush_r>
 8012a5e:	2800      	cmp	r0, #0
 8012a60:	d0d9      	beq.n	8012a16 <__swbuf_r+0x2e>
 8012a62:	e7d6      	b.n	8012a12 <__swbuf_r+0x2a>

08012a64 <__swsetup_r>:
 8012a64:	b538      	push	{r3, r4, r5, lr}
 8012a66:	4b29      	ldr	r3, [pc, #164]	@ (8012b0c <__swsetup_r+0xa8>)
 8012a68:	4605      	mov	r5, r0
 8012a6a:	6818      	ldr	r0, [r3, #0]
 8012a6c:	460c      	mov	r4, r1
 8012a6e:	b118      	cbz	r0, 8012a78 <__swsetup_r+0x14>
 8012a70:	6a03      	ldr	r3, [r0, #32]
 8012a72:	b90b      	cbnz	r3, 8012a78 <__swsetup_r+0x14>
 8012a74:	f7fe fa20 	bl	8010eb8 <__sinit>
 8012a78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a7c:	0719      	lsls	r1, r3, #28
 8012a7e:	d422      	bmi.n	8012ac6 <__swsetup_r+0x62>
 8012a80:	06da      	lsls	r2, r3, #27
 8012a82:	d407      	bmi.n	8012a94 <__swsetup_r+0x30>
 8012a84:	2209      	movs	r2, #9
 8012a86:	602a      	str	r2, [r5, #0]
 8012a88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012a8c:	81a3      	strh	r3, [r4, #12]
 8012a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8012a92:	e033      	b.n	8012afc <__swsetup_r+0x98>
 8012a94:	0758      	lsls	r0, r3, #29
 8012a96:	d512      	bpl.n	8012abe <__swsetup_r+0x5a>
 8012a98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012a9a:	b141      	cbz	r1, 8012aae <__swsetup_r+0x4a>
 8012a9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012aa0:	4299      	cmp	r1, r3
 8012aa2:	d002      	beq.n	8012aaa <__swsetup_r+0x46>
 8012aa4:	4628      	mov	r0, r5
 8012aa6:	f7ff f97b 	bl	8011da0 <_free_r>
 8012aaa:	2300      	movs	r3, #0
 8012aac:	6363      	str	r3, [r4, #52]	@ 0x34
 8012aae:	89a3      	ldrh	r3, [r4, #12]
 8012ab0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012ab4:	81a3      	strh	r3, [r4, #12]
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	6063      	str	r3, [r4, #4]
 8012aba:	6923      	ldr	r3, [r4, #16]
 8012abc:	6023      	str	r3, [r4, #0]
 8012abe:	89a3      	ldrh	r3, [r4, #12]
 8012ac0:	f043 0308 	orr.w	r3, r3, #8
 8012ac4:	81a3      	strh	r3, [r4, #12]
 8012ac6:	6923      	ldr	r3, [r4, #16]
 8012ac8:	b94b      	cbnz	r3, 8012ade <__swsetup_r+0x7a>
 8012aca:	89a3      	ldrh	r3, [r4, #12]
 8012acc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012ad0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012ad4:	d003      	beq.n	8012ade <__swsetup_r+0x7a>
 8012ad6:	4621      	mov	r1, r4
 8012ad8:	4628      	mov	r0, r5
 8012ada:	f000 f883 	bl	8012be4 <__smakebuf_r>
 8012ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ae2:	f013 0201 	ands.w	r2, r3, #1
 8012ae6:	d00a      	beq.n	8012afe <__swsetup_r+0x9a>
 8012ae8:	2200      	movs	r2, #0
 8012aea:	60a2      	str	r2, [r4, #8]
 8012aec:	6962      	ldr	r2, [r4, #20]
 8012aee:	4252      	negs	r2, r2
 8012af0:	61a2      	str	r2, [r4, #24]
 8012af2:	6922      	ldr	r2, [r4, #16]
 8012af4:	b942      	cbnz	r2, 8012b08 <__swsetup_r+0xa4>
 8012af6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012afa:	d1c5      	bne.n	8012a88 <__swsetup_r+0x24>
 8012afc:	bd38      	pop	{r3, r4, r5, pc}
 8012afe:	0799      	lsls	r1, r3, #30
 8012b00:	bf58      	it	pl
 8012b02:	6962      	ldrpl	r2, [r4, #20]
 8012b04:	60a2      	str	r2, [r4, #8]
 8012b06:	e7f4      	b.n	8012af2 <__swsetup_r+0x8e>
 8012b08:	2000      	movs	r0, #0
 8012b0a:	e7f7      	b.n	8012afc <__swsetup_r+0x98>
 8012b0c:	20000138 	.word	0x20000138

08012b10 <_raise_r>:
 8012b10:	291f      	cmp	r1, #31
 8012b12:	b538      	push	{r3, r4, r5, lr}
 8012b14:	4605      	mov	r5, r0
 8012b16:	460c      	mov	r4, r1
 8012b18:	d904      	bls.n	8012b24 <_raise_r+0x14>
 8012b1a:	2316      	movs	r3, #22
 8012b1c:	6003      	str	r3, [r0, #0]
 8012b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8012b22:	bd38      	pop	{r3, r4, r5, pc}
 8012b24:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012b26:	b112      	cbz	r2, 8012b2e <_raise_r+0x1e>
 8012b28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012b2c:	b94b      	cbnz	r3, 8012b42 <_raise_r+0x32>
 8012b2e:	4628      	mov	r0, r5
 8012b30:	f000 f830 	bl	8012b94 <_getpid_r>
 8012b34:	4622      	mov	r2, r4
 8012b36:	4601      	mov	r1, r0
 8012b38:	4628      	mov	r0, r5
 8012b3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b3e:	f000 b817 	b.w	8012b70 <_kill_r>
 8012b42:	2b01      	cmp	r3, #1
 8012b44:	d00a      	beq.n	8012b5c <_raise_r+0x4c>
 8012b46:	1c59      	adds	r1, r3, #1
 8012b48:	d103      	bne.n	8012b52 <_raise_r+0x42>
 8012b4a:	2316      	movs	r3, #22
 8012b4c:	6003      	str	r3, [r0, #0]
 8012b4e:	2001      	movs	r0, #1
 8012b50:	e7e7      	b.n	8012b22 <_raise_r+0x12>
 8012b52:	2100      	movs	r1, #0
 8012b54:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012b58:	4620      	mov	r0, r4
 8012b5a:	4798      	blx	r3
 8012b5c:	2000      	movs	r0, #0
 8012b5e:	e7e0      	b.n	8012b22 <_raise_r+0x12>

08012b60 <raise>:
 8012b60:	4b02      	ldr	r3, [pc, #8]	@ (8012b6c <raise+0xc>)
 8012b62:	4601      	mov	r1, r0
 8012b64:	6818      	ldr	r0, [r3, #0]
 8012b66:	f7ff bfd3 	b.w	8012b10 <_raise_r>
 8012b6a:	bf00      	nop
 8012b6c:	20000138 	.word	0x20000138

08012b70 <_kill_r>:
 8012b70:	b538      	push	{r3, r4, r5, lr}
 8012b72:	4d07      	ldr	r5, [pc, #28]	@ (8012b90 <_kill_r+0x20>)
 8012b74:	2300      	movs	r3, #0
 8012b76:	4604      	mov	r4, r0
 8012b78:	4608      	mov	r0, r1
 8012b7a:	4611      	mov	r1, r2
 8012b7c:	602b      	str	r3, [r5, #0]
 8012b7e:	f7f0 f83b 	bl	8002bf8 <_kill>
 8012b82:	1c43      	adds	r3, r0, #1
 8012b84:	d102      	bne.n	8012b8c <_kill_r+0x1c>
 8012b86:	682b      	ldr	r3, [r5, #0]
 8012b88:	b103      	cbz	r3, 8012b8c <_kill_r+0x1c>
 8012b8a:	6023      	str	r3, [r4, #0]
 8012b8c:	bd38      	pop	{r3, r4, r5, pc}
 8012b8e:	bf00      	nop
 8012b90:	20001e38 	.word	0x20001e38

08012b94 <_getpid_r>:
 8012b94:	f7f0 b828 	b.w	8002be8 <_getpid>

08012b98 <__swhatbuf_r>:
 8012b98:	b570      	push	{r4, r5, r6, lr}
 8012b9a:	460c      	mov	r4, r1
 8012b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ba0:	2900      	cmp	r1, #0
 8012ba2:	b096      	sub	sp, #88	@ 0x58
 8012ba4:	4615      	mov	r5, r2
 8012ba6:	461e      	mov	r6, r3
 8012ba8:	da0d      	bge.n	8012bc6 <__swhatbuf_r+0x2e>
 8012baa:	89a3      	ldrh	r3, [r4, #12]
 8012bac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012bb0:	f04f 0100 	mov.w	r1, #0
 8012bb4:	bf14      	ite	ne
 8012bb6:	2340      	movne	r3, #64	@ 0x40
 8012bb8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012bbc:	2000      	movs	r0, #0
 8012bbe:	6031      	str	r1, [r6, #0]
 8012bc0:	602b      	str	r3, [r5, #0]
 8012bc2:	b016      	add	sp, #88	@ 0x58
 8012bc4:	bd70      	pop	{r4, r5, r6, pc}
 8012bc6:	466a      	mov	r2, sp
 8012bc8:	f000 f848 	bl	8012c5c <_fstat_r>
 8012bcc:	2800      	cmp	r0, #0
 8012bce:	dbec      	blt.n	8012baa <__swhatbuf_r+0x12>
 8012bd0:	9901      	ldr	r1, [sp, #4]
 8012bd2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012bd6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012bda:	4259      	negs	r1, r3
 8012bdc:	4159      	adcs	r1, r3
 8012bde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012be2:	e7eb      	b.n	8012bbc <__swhatbuf_r+0x24>

08012be4 <__smakebuf_r>:
 8012be4:	898b      	ldrh	r3, [r1, #12]
 8012be6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012be8:	079d      	lsls	r5, r3, #30
 8012bea:	4606      	mov	r6, r0
 8012bec:	460c      	mov	r4, r1
 8012bee:	d507      	bpl.n	8012c00 <__smakebuf_r+0x1c>
 8012bf0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012bf4:	6023      	str	r3, [r4, #0]
 8012bf6:	6123      	str	r3, [r4, #16]
 8012bf8:	2301      	movs	r3, #1
 8012bfa:	6163      	str	r3, [r4, #20]
 8012bfc:	b003      	add	sp, #12
 8012bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c00:	ab01      	add	r3, sp, #4
 8012c02:	466a      	mov	r2, sp
 8012c04:	f7ff ffc8 	bl	8012b98 <__swhatbuf_r>
 8012c08:	9f00      	ldr	r7, [sp, #0]
 8012c0a:	4605      	mov	r5, r0
 8012c0c:	4639      	mov	r1, r7
 8012c0e:	4630      	mov	r0, r6
 8012c10:	f7fd fbe2 	bl	80103d8 <_malloc_r>
 8012c14:	b948      	cbnz	r0, 8012c2a <__smakebuf_r+0x46>
 8012c16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c1a:	059a      	lsls	r2, r3, #22
 8012c1c:	d4ee      	bmi.n	8012bfc <__smakebuf_r+0x18>
 8012c1e:	f023 0303 	bic.w	r3, r3, #3
 8012c22:	f043 0302 	orr.w	r3, r3, #2
 8012c26:	81a3      	strh	r3, [r4, #12]
 8012c28:	e7e2      	b.n	8012bf0 <__smakebuf_r+0xc>
 8012c2a:	89a3      	ldrh	r3, [r4, #12]
 8012c2c:	6020      	str	r0, [r4, #0]
 8012c2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012c32:	81a3      	strh	r3, [r4, #12]
 8012c34:	9b01      	ldr	r3, [sp, #4]
 8012c36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012c3a:	b15b      	cbz	r3, 8012c54 <__smakebuf_r+0x70>
 8012c3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012c40:	4630      	mov	r0, r6
 8012c42:	f000 f81d 	bl	8012c80 <_isatty_r>
 8012c46:	b128      	cbz	r0, 8012c54 <__smakebuf_r+0x70>
 8012c48:	89a3      	ldrh	r3, [r4, #12]
 8012c4a:	f023 0303 	bic.w	r3, r3, #3
 8012c4e:	f043 0301 	orr.w	r3, r3, #1
 8012c52:	81a3      	strh	r3, [r4, #12]
 8012c54:	89a3      	ldrh	r3, [r4, #12]
 8012c56:	431d      	orrs	r5, r3
 8012c58:	81a5      	strh	r5, [r4, #12]
 8012c5a:	e7cf      	b.n	8012bfc <__smakebuf_r+0x18>

08012c5c <_fstat_r>:
 8012c5c:	b538      	push	{r3, r4, r5, lr}
 8012c5e:	4d07      	ldr	r5, [pc, #28]	@ (8012c7c <_fstat_r+0x20>)
 8012c60:	2300      	movs	r3, #0
 8012c62:	4604      	mov	r4, r0
 8012c64:	4608      	mov	r0, r1
 8012c66:	4611      	mov	r1, r2
 8012c68:	602b      	str	r3, [r5, #0]
 8012c6a:	f7f0 f825 	bl	8002cb8 <_fstat>
 8012c6e:	1c43      	adds	r3, r0, #1
 8012c70:	d102      	bne.n	8012c78 <_fstat_r+0x1c>
 8012c72:	682b      	ldr	r3, [r5, #0]
 8012c74:	b103      	cbz	r3, 8012c78 <_fstat_r+0x1c>
 8012c76:	6023      	str	r3, [r4, #0]
 8012c78:	bd38      	pop	{r3, r4, r5, pc}
 8012c7a:	bf00      	nop
 8012c7c:	20001e38 	.word	0x20001e38

08012c80 <_isatty_r>:
 8012c80:	b538      	push	{r3, r4, r5, lr}
 8012c82:	4d06      	ldr	r5, [pc, #24]	@ (8012c9c <_isatty_r+0x1c>)
 8012c84:	2300      	movs	r3, #0
 8012c86:	4604      	mov	r4, r0
 8012c88:	4608      	mov	r0, r1
 8012c8a:	602b      	str	r3, [r5, #0]
 8012c8c:	f7f0 f824 	bl	8002cd8 <_isatty>
 8012c90:	1c43      	adds	r3, r0, #1
 8012c92:	d102      	bne.n	8012c9a <_isatty_r+0x1a>
 8012c94:	682b      	ldr	r3, [r5, #0]
 8012c96:	b103      	cbz	r3, 8012c9a <_isatty_r+0x1a>
 8012c98:	6023      	str	r3, [r4, #0]
 8012c9a:	bd38      	pop	{r3, r4, r5, pc}
 8012c9c:	20001e38 	.word	0x20001e38

08012ca0 <atan2>:
 8012ca0:	f000 baaa 	b.w	80131f8 <__ieee754_atan2>

08012ca4 <sqrt>:
 8012ca4:	b538      	push	{r3, r4, r5, lr}
 8012ca6:	ed2d 8b02 	vpush	{d8}
 8012caa:	ec55 4b10 	vmov	r4, r5, d0
 8012cae:	f000 f9c7 	bl	8013040 <__ieee754_sqrt>
 8012cb2:	4622      	mov	r2, r4
 8012cb4:	462b      	mov	r3, r5
 8012cb6:	4620      	mov	r0, r4
 8012cb8:	4629      	mov	r1, r5
 8012cba:	eeb0 8a40 	vmov.f32	s16, s0
 8012cbe:	eef0 8a60 	vmov.f32	s17, s1
 8012cc2:	f7ed ff3b 	bl	8000b3c <__aeabi_dcmpun>
 8012cc6:	b990      	cbnz	r0, 8012cee <sqrt+0x4a>
 8012cc8:	2200      	movs	r2, #0
 8012cca:	2300      	movs	r3, #0
 8012ccc:	4620      	mov	r0, r4
 8012cce:	4629      	mov	r1, r5
 8012cd0:	f7ed ff0c 	bl	8000aec <__aeabi_dcmplt>
 8012cd4:	b158      	cbz	r0, 8012cee <sqrt+0x4a>
 8012cd6:	f7fe f9d9 	bl	801108c <__errno>
 8012cda:	2321      	movs	r3, #33	@ 0x21
 8012cdc:	6003      	str	r3, [r0, #0]
 8012cde:	2200      	movs	r2, #0
 8012ce0:	2300      	movs	r3, #0
 8012ce2:	4610      	mov	r0, r2
 8012ce4:	4619      	mov	r1, r3
 8012ce6:	f7ed fdb9 	bl	800085c <__aeabi_ddiv>
 8012cea:	ec41 0b18 	vmov	d8, r0, r1
 8012cee:	eeb0 0a48 	vmov.f32	s0, s16
 8012cf2:	eef0 0a68 	vmov.f32	s1, s17
 8012cf6:	ecbd 8b02 	vpop	{d8}
 8012cfa:	bd38      	pop	{r3, r4, r5, pc}
 8012cfc:	0000      	movs	r0, r0
	...

08012d00 <atan>:
 8012d00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d04:	ec55 4b10 	vmov	r4, r5, d0
 8012d08:	4bbf      	ldr	r3, [pc, #764]	@ (8013008 <atan+0x308>)
 8012d0a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8012d0e:	429e      	cmp	r6, r3
 8012d10:	46ab      	mov	fp, r5
 8012d12:	d918      	bls.n	8012d46 <atan+0x46>
 8012d14:	4bbd      	ldr	r3, [pc, #756]	@ (801300c <atan+0x30c>)
 8012d16:	429e      	cmp	r6, r3
 8012d18:	d801      	bhi.n	8012d1e <atan+0x1e>
 8012d1a:	d109      	bne.n	8012d30 <atan+0x30>
 8012d1c:	b144      	cbz	r4, 8012d30 <atan+0x30>
 8012d1e:	4622      	mov	r2, r4
 8012d20:	462b      	mov	r3, r5
 8012d22:	4620      	mov	r0, r4
 8012d24:	4629      	mov	r1, r5
 8012d26:	f7ed fab9 	bl	800029c <__adddf3>
 8012d2a:	4604      	mov	r4, r0
 8012d2c:	460d      	mov	r5, r1
 8012d2e:	e006      	b.n	8012d3e <atan+0x3e>
 8012d30:	f1bb 0f00 	cmp.w	fp, #0
 8012d34:	f340 812b 	ble.w	8012f8e <atan+0x28e>
 8012d38:	a597      	add	r5, pc, #604	@ (adr r5, 8012f98 <atan+0x298>)
 8012d3a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012d3e:	ec45 4b10 	vmov	d0, r4, r5
 8012d42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d46:	4bb2      	ldr	r3, [pc, #712]	@ (8013010 <atan+0x310>)
 8012d48:	429e      	cmp	r6, r3
 8012d4a:	d813      	bhi.n	8012d74 <atan+0x74>
 8012d4c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8012d50:	429e      	cmp	r6, r3
 8012d52:	d80c      	bhi.n	8012d6e <atan+0x6e>
 8012d54:	a392      	add	r3, pc, #584	@ (adr r3, 8012fa0 <atan+0x2a0>)
 8012d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d5a:	4620      	mov	r0, r4
 8012d5c:	4629      	mov	r1, r5
 8012d5e:	f7ed fa9d 	bl	800029c <__adddf3>
 8012d62:	4bac      	ldr	r3, [pc, #688]	@ (8013014 <atan+0x314>)
 8012d64:	2200      	movs	r2, #0
 8012d66:	f7ed fedf 	bl	8000b28 <__aeabi_dcmpgt>
 8012d6a:	2800      	cmp	r0, #0
 8012d6c:	d1e7      	bne.n	8012d3e <atan+0x3e>
 8012d6e:	f04f 3aff 	mov.w	sl, #4294967295
 8012d72:	e029      	b.n	8012dc8 <atan+0xc8>
 8012d74:	f000 f95c 	bl	8013030 <fabs>
 8012d78:	4ba7      	ldr	r3, [pc, #668]	@ (8013018 <atan+0x318>)
 8012d7a:	429e      	cmp	r6, r3
 8012d7c:	ec55 4b10 	vmov	r4, r5, d0
 8012d80:	f200 80bc 	bhi.w	8012efc <atan+0x1fc>
 8012d84:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8012d88:	429e      	cmp	r6, r3
 8012d8a:	f200 809e 	bhi.w	8012eca <atan+0x1ca>
 8012d8e:	4622      	mov	r2, r4
 8012d90:	462b      	mov	r3, r5
 8012d92:	4620      	mov	r0, r4
 8012d94:	4629      	mov	r1, r5
 8012d96:	f7ed fa81 	bl	800029c <__adddf3>
 8012d9a:	4b9e      	ldr	r3, [pc, #632]	@ (8013014 <atan+0x314>)
 8012d9c:	2200      	movs	r2, #0
 8012d9e:	f7ed fa7b 	bl	8000298 <__aeabi_dsub>
 8012da2:	2200      	movs	r2, #0
 8012da4:	4606      	mov	r6, r0
 8012da6:	460f      	mov	r7, r1
 8012da8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012dac:	4620      	mov	r0, r4
 8012dae:	4629      	mov	r1, r5
 8012db0:	f7ed fa74 	bl	800029c <__adddf3>
 8012db4:	4602      	mov	r2, r0
 8012db6:	460b      	mov	r3, r1
 8012db8:	4630      	mov	r0, r6
 8012dba:	4639      	mov	r1, r7
 8012dbc:	f7ed fd4e 	bl	800085c <__aeabi_ddiv>
 8012dc0:	f04f 0a00 	mov.w	sl, #0
 8012dc4:	4604      	mov	r4, r0
 8012dc6:	460d      	mov	r5, r1
 8012dc8:	4622      	mov	r2, r4
 8012dca:	462b      	mov	r3, r5
 8012dcc:	4620      	mov	r0, r4
 8012dce:	4629      	mov	r1, r5
 8012dd0:	f7ed fc1a 	bl	8000608 <__aeabi_dmul>
 8012dd4:	4602      	mov	r2, r0
 8012dd6:	460b      	mov	r3, r1
 8012dd8:	4680      	mov	r8, r0
 8012dda:	4689      	mov	r9, r1
 8012ddc:	f7ed fc14 	bl	8000608 <__aeabi_dmul>
 8012de0:	a371      	add	r3, pc, #452	@ (adr r3, 8012fa8 <atan+0x2a8>)
 8012de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012de6:	4606      	mov	r6, r0
 8012de8:	460f      	mov	r7, r1
 8012dea:	f7ed fc0d 	bl	8000608 <__aeabi_dmul>
 8012dee:	a370      	add	r3, pc, #448	@ (adr r3, 8012fb0 <atan+0x2b0>)
 8012df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012df4:	f7ed fa52 	bl	800029c <__adddf3>
 8012df8:	4632      	mov	r2, r6
 8012dfa:	463b      	mov	r3, r7
 8012dfc:	f7ed fc04 	bl	8000608 <__aeabi_dmul>
 8012e00:	a36d      	add	r3, pc, #436	@ (adr r3, 8012fb8 <atan+0x2b8>)
 8012e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e06:	f7ed fa49 	bl	800029c <__adddf3>
 8012e0a:	4632      	mov	r2, r6
 8012e0c:	463b      	mov	r3, r7
 8012e0e:	f7ed fbfb 	bl	8000608 <__aeabi_dmul>
 8012e12:	a36b      	add	r3, pc, #428	@ (adr r3, 8012fc0 <atan+0x2c0>)
 8012e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e18:	f7ed fa40 	bl	800029c <__adddf3>
 8012e1c:	4632      	mov	r2, r6
 8012e1e:	463b      	mov	r3, r7
 8012e20:	f7ed fbf2 	bl	8000608 <__aeabi_dmul>
 8012e24:	a368      	add	r3, pc, #416	@ (adr r3, 8012fc8 <atan+0x2c8>)
 8012e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e2a:	f7ed fa37 	bl	800029c <__adddf3>
 8012e2e:	4632      	mov	r2, r6
 8012e30:	463b      	mov	r3, r7
 8012e32:	f7ed fbe9 	bl	8000608 <__aeabi_dmul>
 8012e36:	a366      	add	r3, pc, #408	@ (adr r3, 8012fd0 <atan+0x2d0>)
 8012e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e3c:	f7ed fa2e 	bl	800029c <__adddf3>
 8012e40:	4642      	mov	r2, r8
 8012e42:	464b      	mov	r3, r9
 8012e44:	f7ed fbe0 	bl	8000608 <__aeabi_dmul>
 8012e48:	a363      	add	r3, pc, #396	@ (adr r3, 8012fd8 <atan+0x2d8>)
 8012e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e4e:	4680      	mov	r8, r0
 8012e50:	4689      	mov	r9, r1
 8012e52:	4630      	mov	r0, r6
 8012e54:	4639      	mov	r1, r7
 8012e56:	f7ed fbd7 	bl	8000608 <__aeabi_dmul>
 8012e5a:	a361      	add	r3, pc, #388	@ (adr r3, 8012fe0 <atan+0x2e0>)
 8012e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e60:	f7ed fa1a 	bl	8000298 <__aeabi_dsub>
 8012e64:	4632      	mov	r2, r6
 8012e66:	463b      	mov	r3, r7
 8012e68:	f7ed fbce 	bl	8000608 <__aeabi_dmul>
 8012e6c:	a35e      	add	r3, pc, #376	@ (adr r3, 8012fe8 <atan+0x2e8>)
 8012e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e72:	f7ed fa11 	bl	8000298 <__aeabi_dsub>
 8012e76:	4632      	mov	r2, r6
 8012e78:	463b      	mov	r3, r7
 8012e7a:	f7ed fbc5 	bl	8000608 <__aeabi_dmul>
 8012e7e:	a35c      	add	r3, pc, #368	@ (adr r3, 8012ff0 <atan+0x2f0>)
 8012e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e84:	f7ed fa08 	bl	8000298 <__aeabi_dsub>
 8012e88:	4632      	mov	r2, r6
 8012e8a:	463b      	mov	r3, r7
 8012e8c:	f7ed fbbc 	bl	8000608 <__aeabi_dmul>
 8012e90:	a359      	add	r3, pc, #356	@ (adr r3, 8012ff8 <atan+0x2f8>)
 8012e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e96:	f7ed f9ff 	bl	8000298 <__aeabi_dsub>
 8012e9a:	4632      	mov	r2, r6
 8012e9c:	463b      	mov	r3, r7
 8012e9e:	f7ed fbb3 	bl	8000608 <__aeabi_dmul>
 8012ea2:	4602      	mov	r2, r0
 8012ea4:	460b      	mov	r3, r1
 8012ea6:	4640      	mov	r0, r8
 8012ea8:	4649      	mov	r1, r9
 8012eaa:	f7ed f9f7 	bl	800029c <__adddf3>
 8012eae:	4622      	mov	r2, r4
 8012eb0:	462b      	mov	r3, r5
 8012eb2:	f7ed fba9 	bl	8000608 <__aeabi_dmul>
 8012eb6:	f1ba 3fff 	cmp.w	sl, #4294967295
 8012eba:	4602      	mov	r2, r0
 8012ebc:	460b      	mov	r3, r1
 8012ebe:	d148      	bne.n	8012f52 <atan+0x252>
 8012ec0:	4620      	mov	r0, r4
 8012ec2:	4629      	mov	r1, r5
 8012ec4:	f7ed f9e8 	bl	8000298 <__aeabi_dsub>
 8012ec8:	e72f      	b.n	8012d2a <atan+0x2a>
 8012eca:	4b52      	ldr	r3, [pc, #328]	@ (8013014 <atan+0x314>)
 8012ecc:	2200      	movs	r2, #0
 8012ece:	4620      	mov	r0, r4
 8012ed0:	4629      	mov	r1, r5
 8012ed2:	f7ed f9e1 	bl	8000298 <__aeabi_dsub>
 8012ed6:	4b4f      	ldr	r3, [pc, #316]	@ (8013014 <atan+0x314>)
 8012ed8:	4606      	mov	r6, r0
 8012eda:	460f      	mov	r7, r1
 8012edc:	2200      	movs	r2, #0
 8012ede:	4620      	mov	r0, r4
 8012ee0:	4629      	mov	r1, r5
 8012ee2:	f7ed f9db 	bl	800029c <__adddf3>
 8012ee6:	4602      	mov	r2, r0
 8012ee8:	460b      	mov	r3, r1
 8012eea:	4630      	mov	r0, r6
 8012eec:	4639      	mov	r1, r7
 8012eee:	f7ed fcb5 	bl	800085c <__aeabi_ddiv>
 8012ef2:	f04f 0a01 	mov.w	sl, #1
 8012ef6:	4604      	mov	r4, r0
 8012ef8:	460d      	mov	r5, r1
 8012efa:	e765      	b.n	8012dc8 <atan+0xc8>
 8012efc:	4b47      	ldr	r3, [pc, #284]	@ (801301c <atan+0x31c>)
 8012efe:	429e      	cmp	r6, r3
 8012f00:	d21c      	bcs.n	8012f3c <atan+0x23c>
 8012f02:	4b47      	ldr	r3, [pc, #284]	@ (8013020 <atan+0x320>)
 8012f04:	2200      	movs	r2, #0
 8012f06:	4620      	mov	r0, r4
 8012f08:	4629      	mov	r1, r5
 8012f0a:	f7ed f9c5 	bl	8000298 <__aeabi_dsub>
 8012f0e:	4b44      	ldr	r3, [pc, #272]	@ (8013020 <atan+0x320>)
 8012f10:	4606      	mov	r6, r0
 8012f12:	460f      	mov	r7, r1
 8012f14:	2200      	movs	r2, #0
 8012f16:	4620      	mov	r0, r4
 8012f18:	4629      	mov	r1, r5
 8012f1a:	f7ed fb75 	bl	8000608 <__aeabi_dmul>
 8012f1e:	4b3d      	ldr	r3, [pc, #244]	@ (8013014 <atan+0x314>)
 8012f20:	2200      	movs	r2, #0
 8012f22:	f7ed f9bb 	bl	800029c <__adddf3>
 8012f26:	4602      	mov	r2, r0
 8012f28:	460b      	mov	r3, r1
 8012f2a:	4630      	mov	r0, r6
 8012f2c:	4639      	mov	r1, r7
 8012f2e:	f7ed fc95 	bl	800085c <__aeabi_ddiv>
 8012f32:	f04f 0a02 	mov.w	sl, #2
 8012f36:	4604      	mov	r4, r0
 8012f38:	460d      	mov	r5, r1
 8012f3a:	e745      	b.n	8012dc8 <atan+0xc8>
 8012f3c:	4622      	mov	r2, r4
 8012f3e:	462b      	mov	r3, r5
 8012f40:	4938      	ldr	r1, [pc, #224]	@ (8013024 <atan+0x324>)
 8012f42:	2000      	movs	r0, #0
 8012f44:	f7ed fc8a 	bl	800085c <__aeabi_ddiv>
 8012f48:	f04f 0a03 	mov.w	sl, #3
 8012f4c:	4604      	mov	r4, r0
 8012f4e:	460d      	mov	r5, r1
 8012f50:	e73a      	b.n	8012dc8 <atan+0xc8>
 8012f52:	4b35      	ldr	r3, [pc, #212]	@ (8013028 <atan+0x328>)
 8012f54:	4e35      	ldr	r6, [pc, #212]	@ (801302c <atan+0x32c>)
 8012f56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f5e:	f7ed f99b 	bl	8000298 <__aeabi_dsub>
 8012f62:	4622      	mov	r2, r4
 8012f64:	462b      	mov	r3, r5
 8012f66:	f7ed f997 	bl	8000298 <__aeabi_dsub>
 8012f6a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8012f6e:	4602      	mov	r2, r0
 8012f70:	460b      	mov	r3, r1
 8012f72:	e9d6 0100 	ldrd	r0, r1, [r6]
 8012f76:	f7ed f98f 	bl	8000298 <__aeabi_dsub>
 8012f7a:	f1bb 0f00 	cmp.w	fp, #0
 8012f7e:	4604      	mov	r4, r0
 8012f80:	460d      	mov	r5, r1
 8012f82:	f6bf aedc 	bge.w	8012d3e <atan+0x3e>
 8012f86:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012f8a:	461d      	mov	r5, r3
 8012f8c:	e6d7      	b.n	8012d3e <atan+0x3e>
 8012f8e:	a51c      	add	r5, pc, #112	@ (adr r5, 8013000 <atan+0x300>)
 8012f90:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012f94:	e6d3      	b.n	8012d3e <atan+0x3e>
 8012f96:	bf00      	nop
 8012f98:	54442d18 	.word	0x54442d18
 8012f9c:	3ff921fb 	.word	0x3ff921fb
 8012fa0:	8800759c 	.word	0x8800759c
 8012fa4:	7e37e43c 	.word	0x7e37e43c
 8012fa8:	e322da11 	.word	0xe322da11
 8012fac:	3f90ad3a 	.word	0x3f90ad3a
 8012fb0:	24760deb 	.word	0x24760deb
 8012fb4:	3fa97b4b 	.word	0x3fa97b4b
 8012fb8:	a0d03d51 	.word	0xa0d03d51
 8012fbc:	3fb10d66 	.word	0x3fb10d66
 8012fc0:	c54c206e 	.word	0xc54c206e
 8012fc4:	3fb745cd 	.word	0x3fb745cd
 8012fc8:	920083ff 	.word	0x920083ff
 8012fcc:	3fc24924 	.word	0x3fc24924
 8012fd0:	5555550d 	.word	0x5555550d
 8012fd4:	3fd55555 	.word	0x3fd55555
 8012fd8:	2c6a6c2f 	.word	0x2c6a6c2f
 8012fdc:	bfa2b444 	.word	0xbfa2b444
 8012fe0:	52defd9a 	.word	0x52defd9a
 8012fe4:	3fadde2d 	.word	0x3fadde2d
 8012fe8:	af749a6d 	.word	0xaf749a6d
 8012fec:	3fb3b0f2 	.word	0x3fb3b0f2
 8012ff0:	fe231671 	.word	0xfe231671
 8012ff4:	3fbc71c6 	.word	0x3fbc71c6
 8012ff8:	9998ebc4 	.word	0x9998ebc4
 8012ffc:	3fc99999 	.word	0x3fc99999
 8013000:	54442d18 	.word	0x54442d18
 8013004:	bff921fb 	.word	0xbff921fb
 8013008:	440fffff 	.word	0x440fffff
 801300c:	7ff00000 	.word	0x7ff00000
 8013010:	3fdbffff 	.word	0x3fdbffff
 8013014:	3ff00000 	.word	0x3ff00000
 8013018:	3ff2ffff 	.word	0x3ff2ffff
 801301c:	40038000 	.word	0x40038000
 8013020:	3ff80000 	.word	0x3ff80000
 8013024:	bff00000 	.word	0xbff00000
 8013028:	08013a50 	.word	0x08013a50
 801302c:	08013a70 	.word	0x08013a70

08013030 <fabs>:
 8013030:	ec51 0b10 	vmov	r0, r1, d0
 8013034:	4602      	mov	r2, r0
 8013036:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801303a:	ec43 2b10 	vmov	d0, r2, r3
 801303e:	4770      	bx	lr

08013040 <__ieee754_sqrt>:
 8013040:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013044:	4a68      	ldr	r2, [pc, #416]	@ (80131e8 <__ieee754_sqrt+0x1a8>)
 8013046:	ec55 4b10 	vmov	r4, r5, d0
 801304a:	43aa      	bics	r2, r5
 801304c:	462b      	mov	r3, r5
 801304e:	4621      	mov	r1, r4
 8013050:	d110      	bne.n	8013074 <__ieee754_sqrt+0x34>
 8013052:	4622      	mov	r2, r4
 8013054:	4620      	mov	r0, r4
 8013056:	4629      	mov	r1, r5
 8013058:	f7ed fad6 	bl	8000608 <__aeabi_dmul>
 801305c:	4602      	mov	r2, r0
 801305e:	460b      	mov	r3, r1
 8013060:	4620      	mov	r0, r4
 8013062:	4629      	mov	r1, r5
 8013064:	f7ed f91a 	bl	800029c <__adddf3>
 8013068:	4604      	mov	r4, r0
 801306a:	460d      	mov	r5, r1
 801306c:	ec45 4b10 	vmov	d0, r4, r5
 8013070:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013074:	2d00      	cmp	r5, #0
 8013076:	dc0e      	bgt.n	8013096 <__ieee754_sqrt+0x56>
 8013078:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801307c:	4322      	orrs	r2, r4
 801307e:	d0f5      	beq.n	801306c <__ieee754_sqrt+0x2c>
 8013080:	b19d      	cbz	r5, 80130aa <__ieee754_sqrt+0x6a>
 8013082:	4622      	mov	r2, r4
 8013084:	4620      	mov	r0, r4
 8013086:	4629      	mov	r1, r5
 8013088:	f7ed f906 	bl	8000298 <__aeabi_dsub>
 801308c:	4602      	mov	r2, r0
 801308e:	460b      	mov	r3, r1
 8013090:	f7ed fbe4 	bl	800085c <__aeabi_ddiv>
 8013094:	e7e8      	b.n	8013068 <__ieee754_sqrt+0x28>
 8013096:	152a      	asrs	r2, r5, #20
 8013098:	d115      	bne.n	80130c6 <__ieee754_sqrt+0x86>
 801309a:	2000      	movs	r0, #0
 801309c:	e009      	b.n	80130b2 <__ieee754_sqrt+0x72>
 801309e:	0acb      	lsrs	r3, r1, #11
 80130a0:	3a15      	subs	r2, #21
 80130a2:	0549      	lsls	r1, r1, #21
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d0fa      	beq.n	801309e <__ieee754_sqrt+0x5e>
 80130a8:	e7f7      	b.n	801309a <__ieee754_sqrt+0x5a>
 80130aa:	462a      	mov	r2, r5
 80130ac:	e7fa      	b.n	80130a4 <__ieee754_sqrt+0x64>
 80130ae:	005b      	lsls	r3, r3, #1
 80130b0:	3001      	adds	r0, #1
 80130b2:	02dc      	lsls	r4, r3, #11
 80130b4:	d5fb      	bpl.n	80130ae <__ieee754_sqrt+0x6e>
 80130b6:	1e44      	subs	r4, r0, #1
 80130b8:	1b12      	subs	r2, r2, r4
 80130ba:	f1c0 0420 	rsb	r4, r0, #32
 80130be:	fa21 f404 	lsr.w	r4, r1, r4
 80130c2:	4323      	orrs	r3, r4
 80130c4:	4081      	lsls	r1, r0
 80130c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80130ca:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80130ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80130d2:	07d2      	lsls	r2, r2, #31
 80130d4:	bf5c      	itt	pl
 80130d6:	005b      	lslpl	r3, r3, #1
 80130d8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80130dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80130e0:	bf58      	it	pl
 80130e2:	0049      	lslpl	r1, r1, #1
 80130e4:	2600      	movs	r6, #0
 80130e6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80130ea:	106d      	asrs	r5, r5, #1
 80130ec:	0049      	lsls	r1, r1, #1
 80130ee:	2016      	movs	r0, #22
 80130f0:	4632      	mov	r2, r6
 80130f2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80130f6:	1917      	adds	r7, r2, r4
 80130f8:	429f      	cmp	r7, r3
 80130fa:	bfde      	ittt	le
 80130fc:	193a      	addle	r2, r7, r4
 80130fe:	1bdb      	suble	r3, r3, r7
 8013100:	1936      	addle	r6, r6, r4
 8013102:	0fcf      	lsrs	r7, r1, #31
 8013104:	3801      	subs	r0, #1
 8013106:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801310a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801310e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8013112:	d1f0      	bne.n	80130f6 <__ieee754_sqrt+0xb6>
 8013114:	4604      	mov	r4, r0
 8013116:	2720      	movs	r7, #32
 8013118:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801311c:	429a      	cmp	r2, r3
 801311e:	eb00 0e0c 	add.w	lr, r0, ip
 8013122:	db02      	blt.n	801312a <__ieee754_sqrt+0xea>
 8013124:	d113      	bne.n	801314e <__ieee754_sqrt+0x10e>
 8013126:	458e      	cmp	lr, r1
 8013128:	d811      	bhi.n	801314e <__ieee754_sqrt+0x10e>
 801312a:	f1be 0f00 	cmp.w	lr, #0
 801312e:	eb0e 000c 	add.w	r0, lr, ip
 8013132:	da42      	bge.n	80131ba <__ieee754_sqrt+0x17a>
 8013134:	2800      	cmp	r0, #0
 8013136:	db40      	blt.n	80131ba <__ieee754_sqrt+0x17a>
 8013138:	f102 0801 	add.w	r8, r2, #1
 801313c:	1a9b      	subs	r3, r3, r2
 801313e:	458e      	cmp	lr, r1
 8013140:	bf88      	it	hi
 8013142:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8013146:	eba1 010e 	sub.w	r1, r1, lr
 801314a:	4464      	add	r4, ip
 801314c:	4642      	mov	r2, r8
 801314e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8013152:	3f01      	subs	r7, #1
 8013154:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8013158:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801315c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8013160:	d1dc      	bne.n	801311c <__ieee754_sqrt+0xdc>
 8013162:	4319      	orrs	r1, r3
 8013164:	d01b      	beq.n	801319e <__ieee754_sqrt+0x15e>
 8013166:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80131ec <__ieee754_sqrt+0x1ac>
 801316a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80131f0 <__ieee754_sqrt+0x1b0>
 801316e:	e9da 0100 	ldrd	r0, r1, [sl]
 8013172:	e9db 2300 	ldrd	r2, r3, [fp]
 8013176:	f7ed f88f 	bl	8000298 <__aeabi_dsub>
 801317a:	e9da 8900 	ldrd	r8, r9, [sl]
 801317e:	4602      	mov	r2, r0
 8013180:	460b      	mov	r3, r1
 8013182:	4640      	mov	r0, r8
 8013184:	4649      	mov	r1, r9
 8013186:	f7ed fcbb 	bl	8000b00 <__aeabi_dcmple>
 801318a:	b140      	cbz	r0, 801319e <__ieee754_sqrt+0x15e>
 801318c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8013190:	e9da 0100 	ldrd	r0, r1, [sl]
 8013194:	e9db 2300 	ldrd	r2, r3, [fp]
 8013198:	d111      	bne.n	80131be <__ieee754_sqrt+0x17e>
 801319a:	3601      	adds	r6, #1
 801319c:	463c      	mov	r4, r7
 801319e:	1072      	asrs	r2, r6, #1
 80131a0:	0863      	lsrs	r3, r4, #1
 80131a2:	07f1      	lsls	r1, r6, #31
 80131a4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80131a8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80131ac:	bf48      	it	mi
 80131ae:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80131b2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80131b6:	4618      	mov	r0, r3
 80131b8:	e756      	b.n	8013068 <__ieee754_sqrt+0x28>
 80131ba:	4690      	mov	r8, r2
 80131bc:	e7be      	b.n	801313c <__ieee754_sqrt+0xfc>
 80131be:	f7ed f86d 	bl	800029c <__adddf3>
 80131c2:	e9da 8900 	ldrd	r8, r9, [sl]
 80131c6:	4602      	mov	r2, r0
 80131c8:	460b      	mov	r3, r1
 80131ca:	4640      	mov	r0, r8
 80131cc:	4649      	mov	r1, r9
 80131ce:	f7ed fc8d 	bl	8000aec <__aeabi_dcmplt>
 80131d2:	b120      	cbz	r0, 80131de <__ieee754_sqrt+0x19e>
 80131d4:	1ca0      	adds	r0, r4, #2
 80131d6:	bf08      	it	eq
 80131d8:	3601      	addeq	r6, #1
 80131da:	3402      	adds	r4, #2
 80131dc:	e7df      	b.n	801319e <__ieee754_sqrt+0x15e>
 80131de:	1c63      	adds	r3, r4, #1
 80131e0:	f023 0401 	bic.w	r4, r3, #1
 80131e4:	e7db      	b.n	801319e <__ieee754_sqrt+0x15e>
 80131e6:	bf00      	nop
 80131e8:	7ff00000 	.word	0x7ff00000
 80131ec:	20000300 	.word	0x20000300
 80131f0:	200002f8 	.word	0x200002f8
 80131f4:	00000000 	.word	0x00000000

080131f8 <__ieee754_atan2>:
 80131f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131fc:	ec57 6b11 	vmov	r6, r7, d1
 8013200:	4273      	negs	r3, r6
 8013202:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8013380 <__ieee754_atan2+0x188>
 8013206:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801320a:	4333      	orrs	r3, r6
 801320c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8013210:	4543      	cmp	r3, r8
 8013212:	ec51 0b10 	vmov	r0, r1, d0
 8013216:	4635      	mov	r5, r6
 8013218:	d809      	bhi.n	801322e <__ieee754_atan2+0x36>
 801321a:	4244      	negs	r4, r0
 801321c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013220:	4304      	orrs	r4, r0
 8013222:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8013226:	4544      	cmp	r4, r8
 8013228:	468e      	mov	lr, r1
 801322a:	4681      	mov	r9, r0
 801322c:	d907      	bls.n	801323e <__ieee754_atan2+0x46>
 801322e:	4632      	mov	r2, r6
 8013230:	463b      	mov	r3, r7
 8013232:	f7ed f833 	bl	800029c <__adddf3>
 8013236:	ec41 0b10 	vmov	d0, r0, r1
 801323a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801323e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8013242:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8013246:	4334      	orrs	r4, r6
 8013248:	d103      	bne.n	8013252 <__ieee754_atan2+0x5a>
 801324a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801324e:	f7ff bd57 	b.w	8012d00 <atan>
 8013252:	17bc      	asrs	r4, r7, #30
 8013254:	f004 0402 	and.w	r4, r4, #2
 8013258:	ea53 0909 	orrs.w	r9, r3, r9
 801325c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8013260:	d107      	bne.n	8013272 <__ieee754_atan2+0x7a>
 8013262:	2c02      	cmp	r4, #2
 8013264:	d05f      	beq.n	8013326 <__ieee754_atan2+0x12e>
 8013266:	2c03      	cmp	r4, #3
 8013268:	d1e5      	bne.n	8013236 <__ieee754_atan2+0x3e>
 801326a:	a141      	add	r1, pc, #260	@ (adr r1, 8013370 <__ieee754_atan2+0x178>)
 801326c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013270:	e7e1      	b.n	8013236 <__ieee754_atan2+0x3e>
 8013272:	4315      	orrs	r5, r2
 8013274:	d106      	bne.n	8013284 <__ieee754_atan2+0x8c>
 8013276:	f1be 0f00 	cmp.w	lr, #0
 801327a:	da5f      	bge.n	801333c <__ieee754_atan2+0x144>
 801327c:	a13e      	add	r1, pc, #248	@ (adr r1, 8013378 <__ieee754_atan2+0x180>)
 801327e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013282:	e7d8      	b.n	8013236 <__ieee754_atan2+0x3e>
 8013284:	4542      	cmp	r2, r8
 8013286:	d10f      	bne.n	80132a8 <__ieee754_atan2+0xb0>
 8013288:	4293      	cmp	r3, r2
 801328a:	f104 34ff 	add.w	r4, r4, #4294967295
 801328e:	d107      	bne.n	80132a0 <__ieee754_atan2+0xa8>
 8013290:	2c02      	cmp	r4, #2
 8013292:	d84c      	bhi.n	801332e <__ieee754_atan2+0x136>
 8013294:	4b34      	ldr	r3, [pc, #208]	@ (8013368 <__ieee754_atan2+0x170>)
 8013296:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801329a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801329e:	e7ca      	b.n	8013236 <__ieee754_atan2+0x3e>
 80132a0:	2c02      	cmp	r4, #2
 80132a2:	d848      	bhi.n	8013336 <__ieee754_atan2+0x13e>
 80132a4:	4b31      	ldr	r3, [pc, #196]	@ (801336c <__ieee754_atan2+0x174>)
 80132a6:	e7f6      	b.n	8013296 <__ieee754_atan2+0x9e>
 80132a8:	4543      	cmp	r3, r8
 80132aa:	d0e4      	beq.n	8013276 <__ieee754_atan2+0x7e>
 80132ac:	1a9b      	subs	r3, r3, r2
 80132ae:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80132b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80132b6:	da1e      	bge.n	80132f6 <__ieee754_atan2+0xfe>
 80132b8:	2f00      	cmp	r7, #0
 80132ba:	da01      	bge.n	80132c0 <__ieee754_atan2+0xc8>
 80132bc:	323c      	adds	r2, #60	@ 0x3c
 80132be:	db1e      	blt.n	80132fe <__ieee754_atan2+0x106>
 80132c0:	4632      	mov	r2, r6
 80132c2:	463b      	mov	r3, r7
 80132c4:	f7ed faca 	bl	800085c <__aeabi_ddiv>
 80132c8:	ec41 0b10 	vmov	d0, r0, r1
 80132cc:	f7ff feb0 	bl	8013030 <fabs>
 80132d0:	f7ff fd16 	bl	8012d00 <atan>
 80132d4:	ec51 0b10 	vmov	r0, r1, d0
 80132d8:	2c01      	cmp	r4, #1
 80132da:	d013      	beq.n	8013304 <__ieee754_atan2+0x10c>
 80132dc:	2c02      	cmp	r4, #2
 80132de:	d015      	beq.n	801330c <__ieee754_atan2+0x114>
 80132e0:	2c00      	cmp	r4, #0
 80132e2:	d0a8      	beq.n	8013236 <__ieee754_atan2+0x3e>
 80132e4:	a318      	add	r3, pc, #96	@ (adr r3, 8013348 <__ieee754_atan2+0x150>)
 80132e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ea:	f7ec ffd5 	bl	8000298 <__aeabi_dsub>
 80132ee:	a318      	add	r3, pc, #96	@ (adr r3, 8013350 <__ieee754_atan2+0x158>)
 80132f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132f4:	e014      	b.n	8013320 <__ieee754_atan2+0x128>
 80132f6:	a118      	add	r1, pc, #96	@ (adr r1, 8013358 <__ieee754_atan2+0x160>)
 80132f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80132fc:	e7ec      	b.n	80132d8 <__ieee754_atan2+0xe0>
 80132fe:	2000      	movs	r0, #0
 8013300:	2100      	movs	r1, #0
 8013302:	e7e9      	b.n	80132d8 <__ieee754_atan2+0xe0>
 8013304:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013308:	4619      	mov	r1, r3
 801330a:	e794      	b.n	8013236 <__ieee754_atan2+0x3e>
 801330c:	a30e      	add	r3, pc, #56	@ (adr r3, 8013348 <__ieee754_atan2+0x150>)
 801330e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013312:	f7ec ffc1 	bl	8000298 <__aeabi_dsub>
 8013316:	4602      	mov	r2, r0
 8013318:	460b      	mov	r3, r1
 801331a:	a10d      	add	r1, pc, #52	@ (adr r1, 8013350 <__ieee754_atan2+0x158>)
 801331c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013320:	f7ec ffba 	bl	8000298 <__aeabi_dsub>
 8013324:	e787      	b.n	8013236 <__ieee754_atan2+0x3e>
 8013326:	a10a      	add	r1, pc, #40	@ (adr r1, 8013350 <__ieee754_atan2+0x158>)
 8013328:	e9d1 0100 	ldrd	r0, r1, [r1]
 801332c:	e783      	b.n	8013236 <__ieee754_atan2+0x3e>
 801332e:	a10c      	add	r1, pc, #48	@ (adr r1, 8013360 <__ieee754_atan2+0x168>)
 8013330:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013334:	e77f      	b.n	8013236 <__ieee754_atan2+0x3e>
 8013336:	2000      	movs	r0, #0
 8013338:	2100      	movs	r1, #0
 801333a:	e77c      	b.n	8013236 <__ieee754_atan2+0x3e>
 801333c:	a106      	add	r1, pc, #24	@ (adr r1, 8013358 <__ieee754_atan2+0x160>)
 801333e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013342:	e778      	b.n	8013236 <__ieee754_atan2+0x3e>
 8013344:	f3af 8000 	nop.w
 8013348:	33145c07 	.word	0x33145c07
 801334c:	3ca1a626 	.word	0x3ca1a626
 8013350:	54442d18 	.word	0x54442d18
 8013354:	400921fb 	.word	0x400921fb
 8013358:	54442d18 	.word	0x54442d18
 801335c:	3ff921fb 	.word	0x3ff921fb
 8013360:	54442d18 	.word	0x54442d18
 8013364:	3fe921fb 	.word	0x3fe921fb
 8013368:	08013aa8 	.word	0x08013aa8
 801336c:	08013a90 	.word	0x08013a90
 8013370:	54442d18 	.word	0x54442d18
 8013374:	c00921fb 	.word	0xc00921fb
 8013378:	54442d18 	.word	0x54442d18
 801337c:	bff921fb 	.word	0xbff921fb
 8013380:	7ff00000 	.word	0x7ff00000

08013384 <_init>:
 8013384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013386:	bf00      	nop
 8013388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801338a:	bc08      	pop	{r3}
 801338c:	469e      	mov	lr, r3
 801338e:	4770      	bx	lr

08013390 <_fini>:
 8013390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013392:	bf00      	nop
 8013394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013396:	bc08      	pop	{r3}
 8013398:	469e      	mov	lr, r3
 801339a:	4770      	bx	lr
