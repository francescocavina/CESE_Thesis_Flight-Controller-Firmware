
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082f8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800848c  0800848c  0001848c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084f4  080084f4  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  080084f4  080084f4  000184f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084fc  080084fc  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084fc  080084fc  000184fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008500  08008500  00018500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08008504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000156c  200000fc  08008600  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001668  08008600  00021668  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019417  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bd1  00000000  00000000  00039586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001648  00000000  00000000  0003d158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001158  00000000  00000000  0003e7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a212  00000000  00000000  0003f8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cac5  00000000  00000000  00059b0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093e60  00000000  00000000  000765cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e6c  00000000  00000000  0010a430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  0011029c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08008474 	.word	0x08008474

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	08008474 	.word	0x08008474

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <flightController_App>:
extern TIM_HandleTypeDef htim3;

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
void flightController_App(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
    //    	HAL_Delay(1000);
    //    }



	PWM_SetDutyCycle(&htim3, TIM_CHANNEL_1, 500);
 80004d4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80004d8:	2100      	movs	r1, #0
 80004da:	4807      	ldr	r0, [pc, #28]	; (80004f8 <flightController_App+0x28>)
 80004dc:	f000 fb90 	bl	8000c00 <PWM_SetDutyCycle>
//	PWM_SetDutyCycle(&htim3, TIM_CHANNEL_2, 500);
//	PWM_SetDutyCycle(&htim3, TIM_CHANNEL_3, 500);
//	PWM_SetDutyCycle(&htim3, TIM_CHANNEL_4, 500);

	HAL_Delay(3000);
 80004e0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80004e4:	f000 fc5e 	bl	8000da4 <HAL_Delay>

	while(1) {

		PWM_SetDutyCycle(&htim3, TIM_CHANNEL_1, 600);
 80004e8:	f44f 7216 	mov.w	r2, #600	; 0x258
 80004ec:	2100      	movs	r1, #0
 80004ee:	4802      	ldr	r0, [pc, #8]	; (80004f8 <flightController_App+0x28>)
 80004f0:	f000 fb86 	bl	8000c00 <PWM_SetDutyCycle>
 80004f4:	e7f8      	b.n	80004e8 <flightController_App+0x18>
 80004f6:	bf00      	nop
 80004f8:	2000016c 	.word	0x2000016c

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fbde 	bl	8000cc0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f812 	bl	800052c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f966 	bl	80007d8 <MX_GPIO_Init>
  MX_DMA_Init();
 800050c:	f000 f94a 	bl	80007a4 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000510:	f007 fa9a 	bl	8007a48 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000514:	f000 f874 	bl	8000600 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000518:	f000 f91a 	bl	8000750 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800051c:	f000 f89e 	bl	800065c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  flightController_App();
 8000520:	f7ff ffd6 	bl	80004d0 <flightController_App>
 8000524:	2300      	movs	r3, #0
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8000526:	4618      	mov	r0, r3
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	; 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	; 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f007 ff6e 	bl	800841c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	4b28      	ldr	r3, [pc, #160]	; (80005f8 <SystemClock_Config+0xcc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	4a27      	ldr	r2, [pc, #156]	; (80005f8 <SystemClock_Config+0xcc>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	; 0x40
 8000560:	4b25      	ldr	r3, [pc, #148]	; (80005f8 <SystemClock_Config+0xcc>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b22      	ldr	r3, [pc, #136]	; (80005fc <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000578:	4a20      	ldr	r2, [pc, #128]	; (80005fc <SystemClock_Config+0xd0>)
 800057a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b1e      	ldr	r3, [pc, #120]	; (80005fc <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058c:	2301      	movs	r3, #1
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000590:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800059e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80005a0:	230f      	movs	r3, #15
 80005a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80005a4:	2390      	movs	r3, #144	; 0x90
 80005a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005a8:	2304      	movs	r3, #4
 80005aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80005ac:	2305      	movs	r3, #5
 80005ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 0320 	add.w	r3, r7, #32
 80005b4:	4618      	mov	r0, r3
 80005b6:	f002 fbd1 	bl	8002d5c <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005c0:	f000 f940 	bl	8000844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	230f      	movs	r3, #15
 80005c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c8:	2302      	movs	r3, #2
 80005ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	2101      	movs	r1, #1
 80005e0:	4618      	mov	r0, r3
 80005e2:	f002 fe33 	bl	800324c <HAL_RCC_ClockConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005ec:	f000 f92a 	bl	8000844 <Error_Handler>
  }
}
 80005f0:	bf00      	nop
 80005f2:	3750      	adds	r7, #80	; 0x50
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <MX_I2C1_Init+0x50>)
 8000606:	4a13      	ldr	r2, [pc, #76]	; (8000654 <MX_I2C1_Init+0x54>)
 8000608:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_I2C1_Init+0x50>)
 800060c:	4a12      	ldr	r2, [pc, #72]	; (8000658 <MX_I2C1_Init+0x58>)
 800060e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_I2C1_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_I2C1_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_I2C1_Init+0x50>)
 800061e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000622:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000624:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <MX_I2C1_Init+0x50>)
 8000626:	2200      	movs	r2, #0
 8000628:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_I2C1_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000630:	4b07      	ldr	r3, [pc, #28]	; (8000650 <MX_I2C1_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_I2C1_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800063c:	4804      	ldr	r0, [pc, #16]	; (8000650 <MX_I2C1_Init+0x50>)
 800063e:	f000 ffcb 	bl	80015d8 <HAL_I2C_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000648:	f000 f8fc 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000118 	.word	0x20000118
 8000654:	40005400 	.word	0x40005400
 8000658:	00061a80 	.word	0x00061a80

0800065c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	; 0x28
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]
 800067a:	615a      	str	r2, [r3, #20]
 800067c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800067e:	4b32      	ldr	r3, [pc, #200]	; (8000748 <MX_TIM3_Init+0xec>)
 8000680:	4a32      	ldr	r2, [pc, #200]	; (800074c <MX_TIM3_Init+0xf0>)
 8000682:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 73-1;
 8000684:	4b30      	ldr	r3, [pc, #192]	; (8000748 <MX_TIM3_Init+0xec>)
 8000686:	2248      	movs	r2, #72	; 0x48
 8000688:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800068a:	4b2f      	ldr	r3, [pc, #188]	; (8000748 <MX_TIM3_Init+0xec>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16384-1;
 8000690:	4b2d      	ldr	r3, [pc, #180]	; (8000748 <MX_TIM3_Init+0xec>)
 8000692:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8000696:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000698:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <MX_TIM3_Init+0xec>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800069e:	4b2a      	ldr	r3, [pc, #168]	; (8000748 <MX_TIM3_Init+0xec>)
 80006a0:	2280      	movs	r2, #128	; 0x80
 80006a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006a4:	4828      	ldr	r0, [pc, #160]	; (8000748 <MX_TIM3_Init+0xec>)
 80006a6:	f002 ffb1 	bl	800360c <HAL_TIM_PWM_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80006b0:	f000 f8c8 	bl	8000844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b4:	2300      	movs	r3, #0
 80006b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006bc:	f107 0320 	add.w	r3, r7, #32
 80006c0:	4619      	mov	r1, r3
 80006c2:	4821      	ldr	r0, [pc, #132]	; (8000748 <MX_TIM3_Init+0xec>)
 80006c4:	f003 fac0 	bl	8003c48 <HAL_TIMEx_MasterConfigSynchronization>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80006ce:	f000 f8b9 	bl	8000844 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006d2:	2360      	movs	r3, #96	; 0x60
 80006d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2200      	movs	r2, #0
 80006e6:	4619      	mov	r1, r3
 80006e8:	4817      	ldr	r0, [pc, #92]	; (8000748 <MX_TIM3_Init+0xec>)
 80006ea:	f002 ffdf 	bl	80036ac <HAL_TIM_PWM_ConfigChannel>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80006f4:	f000 f8a6 	bl	8000844 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2204      	movs	r2, #4
 80006fc:	4619      	mov	r1, r3
 80006fe:	4812      	ldr	r0, [pc, #72]	; (8000748 <MX_TIM3_Init+0xec>)
 8000700:	f002 ffd4 	bl	80036ac <HAL_TIM_PWM_ConfigChannel>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800070a:	f000 f89b 	bl	8000844 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2208      	movs	r2, #8
 8000712:	4619      	mov	r1, r3
 8000714:	480c      	ldr	r0, [pc, #48]	; (8000748 <MX_TIM3_Init+0xec>)
 8000716:	f002 ffc9 	bl	80036ac <HAL_TIM_PWM_ConfigChannel>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000720:	f000 f890 	bl	8000844 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	220c      	movs	r2, #12
 8000728:	4619      	mov	r1, r3
 800072a:	4807      	ldr	r0, [pc, #28]	; (8000748 <MX_TIM3_Init+0xec>)
 800072c:	f002 ffbe 	bl	80036ac <HAL_TIM_PWM_ConfigChannel>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8000736:	f000 f885 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800073a:	4803      	ldr	r0, [pc, #12]	; (8000748 <MX_TIM3_Init+0xec>)
 800073c:	f000 f91c 	bl	8000978 <HAL_TIM_MspPostInit>

}
 8000740:	bf00      	nop
 8000742:	3728      	adds	r7, #40	; 0x28
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	2000016c 	.word	0x2000016c
 800074c:	40000400 	.word	0x40000400

08000750 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_USART2_UART_Init+0x4c>)
 8000756:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <MX_USART2_UART_Init+0x50>)
 8000758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <MX_USART2_UART_Init+0x4c>)
 800075c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_USART2_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_USART2_UART_Init+0x4c>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_USART2_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_USART2_UART_Init+0x4c>)
 8000776:	2204      	movs	r2, #4
 8000778:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_USART2_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_USART2_UART_Init+0x4c>)
 8000788:	f003 facc 	bl	8003d24 <HAL_UART_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000792:	f000 f857 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200001b4 	.word	0x200001b4
 80007a0:	40004400 	.word	0x40004400

080007a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_DMA_Init+0x30>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <MX_DMA_Init+0x30>)
 80007b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_DMA_Init+0x30>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_GPIO_Init+0x68>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a16      	ldr	r2, [pc, #88]	; (8000840 <MX_GPIO_Init+0x68>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_GPIO_Init+0x68>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <MX_GPIO_Init+0x68>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a0f      	ldr	r2, [pc, #60]	; (8000840 <MX_GPIO_Init+0x68>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <MX_GPIO_Init+0x68>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_GPIO_Init+0x68>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a08      	ldr	r2, [pc, #32]	; (8000840 <MX_GPIO_Init+0x68>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_GPIO_Init+0x68>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000832:	bf00      	nop
 8000834:	3714      	adds	r7, #20
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
	...

08000854 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <HAL_MspInit+0x4c>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000862:	4a0f      	ldr	r2, [pc, #60]	; (80008a0 <HAL_MspInit+0x4c>)
 8000864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000868:	6453      	str	r3, [r2, #68]	; 0x44
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <HAL_MspInit+0x4c>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <HAL_MspInit+0x4c>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <HAL_MspInit+0x4c>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000884:	6413      	str	r3, [r2, #64]	; 0x40
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <HAL_MspInit+0x4c>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800

080008a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	; 0x28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a19      	ldr	r2, [pc, #100]	; (8000928 <HAL_I2C_MspInit+0x84>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d12b      	bne.n	800091e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
 80008ca:	4b18      	ldr	r3, [pc, #96]	; (800092c <HAL_I2C_MspInit+0x88>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a17      	ldr	r2, [pc, #92]	; (800092c <HAL_I2C_MspInit+0x88>)
 80008d0:	f043 0302 	orr.w	r3, r3, #2
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <HAL_I2C_MspInit+0x88>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008e2:	23c0      	movs	r3, #192	; 0xc0
 80008e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008e6:	2312      	movs	r3, #18
 80008e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ee:	2303      	movs	r3, #3
 80008f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008f2:	2304      	movs	r3, #4
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	480c      	ldr	r0, [pc, #48]	; (8000930 <HAL_I2C_MspInit+0x8c>)
 80008fe:	f000 fce7 	bl	80012d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <HAL_I2C_MspInit+0x88>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	4a08      	ldr	r2, [pc, #32]	; (800092c <HAL_I2C_MspInit+0x88>)
 800090c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000910:	6413      	str	r3, [r2, #64]	; 0x40
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_I2C_MspInit+0x88>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800091e:	bf00      	nop
 8000920:	3728      	adds	r7, #40	; 0x28
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40005400 	.word	0x40005400
 800092c:	40023800 	.word	0x40023800
 8000930:	40020400 	.word	0x40020400

08000934 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <HAL_TIM_PWM_MspInit+0x3c>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d10d      	bne.n	8000962 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_TIM_PWM_MspInit+0x40>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	4a09      	ldr	r2, [pc, #36]	; (8000974 <HAL_TIM_PWM_MspInit+0x40>)
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	6413      	str	r3, [r2, #64]	; 0x40
 8000956:	4b07      	ldr	r3, [pc, #28]	; (8000974 <HAL_TIM_PWM_MspInit+0x40>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000962:	bf00      	nop
 8000964:	3714      	adds	r7, #20
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40000400 	.word	0x40000400
 8000974:	40023800 	.word	0x40023800

08000978 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a21      	ldr	r2, [pc, #132]	; (8000a1c <HAL_TIM_MspPostInit+0xa4>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d13b      	bne.n	8000a12 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <HAL_TIM_MspPostInit+0xa8>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a1f      	ldr	r2, [pc, #124]	; (8000a20 <HAL_TIM_MspPostInit+0xa8>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <HAL_TIM_MspPostInit+0xa8>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <HAL_TIM_MspPostInit+0xa8>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a18      	ldr	r2, [pc, #96]	; (8000a20 <HAL_TIM_MspPostInit+0xa8>)
 80009c0:	f043 0302 	orr.w	r3, r3, #2
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <HAL_TIM_MspPostInit+0xa8>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009d2:	23c0      	movs	r3, #192	; 0xc0
 80009d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80009e2:	2302      	movs	r3, #2
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	480d      	ldr	r0, [pc, #52]	; (8000a24 <HAL_TIM_MspPostInit+0xac>)
 80009ee:	f000 fc6f 	bl	80012d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009f2:	2303      	movs	r3, #3
 80009f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a02:	2302      	movs	r3, #2
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4806      	ldr	r0, [pc, #24]	; (8000a28 <HAL_TIM_MspPostInit+0xb0>)
 8000a0e:	f000 fc5f 	bl	80012d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a12:	bf00      	nop
 8000a14:	3728      	adds	r7, #40	; 0x28
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40000400 	.word	0x40000400
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020000 	.word	0x40020000
 8000a28:	40020400 	.word	0x40020400

08000a2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	; 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a30      	ldr	r2, [pc, #192]	; (8000b0c <HAL_UART_MspInit+0xe0>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d15a      	bne.n	8000b04 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	4b2f      	ldr	r3, [pc, #188]	; (8000b10 <HAL_UART_MspInit+0xe4>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	4a2e      	ldr	r2, [pc, #184]	; (8000b10 <HAL_UART_MspInit+0xe4>)
 8000a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5e:	4b2c      	ldr	r3, [pc, #176]	; (8000b10 <HAL_UART_MspInit+0xe4>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	4b28      	ldr	r3, [pc, #160]	; (8000b10 <HAL_UART_MspInit+0xe4>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a27      	ldr	r2, [pc, #156]	; (8000b10 <HAL_UART_MspInit+0xe4>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b25      	ldr	r3, [pc, #148]	; (8000b10 <HAL_UART_MspInit+0xe4>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a86:	230c      	movs	r3, #12
 8000a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a96:	2307      	movs	r3, #7
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	481c      	ldr	r0, [pc, #112]	; (8000b14 <HAL_UART_MspInit+0xe8>)
 8000aa2:	f000 fc15 	bl	80012d0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <HAL_UART_MspInit+0xec>)
 8000aa8:	4a1c      	ldr	r2, [pc, #112]	; (8000b1c <HAL_UART_MspInit+0xf0>)
 8000aaa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000aac:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <HAL_UART_MspInit+0xec>)
 8000aae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ab2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ab4:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <HAL_UART_MspInit+0xec>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aba:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <HAL_UART_MspInit+0xec>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ac0:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <HAL_UART_MspInit+0xec>)
 8000ac2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ac6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ac8:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <HAL_UART_MspInit+0xec>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ace:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <HAL_UART_MspInit+0xec>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000ad4:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <HAL_UART_MspInit+0xec>)
 8000ad6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ada:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000adc:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <HAL_UART_MspInit+0xec>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <HAL_UART_MspInit+0xec>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000ae8:	480b      	ldr	r0, [pc, #44]	; (8000b18 <HAL_UART_MspInit+0xec>)
 8000aea:	f000 fa91 	bl	8001010 <HAL_DMA_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000af4:	f7ff fea6 	bl	8000844 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a07      	ldr	r2, [pc, #28]	; (8000b18 <HAL_UART_MspInit+0xec>)
 8000afc:	639a      	str	r2, [r3, #56]	; 0x38
 8000afe:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <HAL_UART_MspInit+0xec>)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b04:	bf00      	nop
 8000b06:	3728      	adds	r7, #40	; 0x28
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40004400 	.word	0x40004400
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020000 	.word	0x40020000
 8000b18:	200001f8 	.word	0x200001f8
 8000b1c:	40026088 	.word	0x40026088

08000b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8000b24:	e7fe      	b.n	8000b24 <NMI_Handler+0x4>

08000b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <MemManage_Handler+0x4>

08000b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <BusFault_Handler+0x4>

08000b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <UsageFault_Handler+0x4>

08000b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6c:	f000 f8fa 	bl	8000d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b78:	4802      	ldr	r0, [pc, #8]	; (8000b84 <OTG_FS_IRQHandler+0x10>)
 8000b7a:	f000 ffc1 	bl	8001b00 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000f3c 	.word	0x20000f3c

08000b88 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <SystemInit+0x20>)
 8000b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b92:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <SystemInit+0x20>)
 8000b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000bac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb0:	480d      	ldr	r0, [pc, #52]	; (8000be8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bb2:	490e      	ldr	r1, [pc, #56]	; (8000bec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bb4:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb8:	e002      	b.n	8000bc0 <LoopCopyDataInit>

08000bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bbe:	3304      	adds	r3, #4

08000bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc4:	d3f9      	bcc.n	8000bba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc6:	4a0b      	ldr	r2, [pc, #44]	; (8000bf4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bc8:	4c0b      	ldr	r4, [pc, #44]	; (8000bf8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bcc:	e001      	b.n	8000bd2 <LoopFillZerobss>

08000bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd0:	3204      	adds	r2, #4

08000bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd4:	d3fb      	bcc.n	8000bce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bd6:	f7ff ffd7 	bl	8000b88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bda:	f007 fc27 	bl	800842c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bde:	f7ff fc8d 	bl	80004fc <main>
  bx  lr
 8000be2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000be4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bec:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000bf0:	08008504 	.word	0x08008504
  ldr r2, =_sbss
 8000bf4:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000bf8:	20001668 	.word	0x20001668

08000bfc <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC_IRQHandler>
	...

08000c00 <PWM_SetDutyCycle>:
	HAL_TIM_PWM_DeInit(htim);

	return true;
}

bool_t PWM_SetDutyCycle(TIM_HandleTypeDef * htim, uint32_t channel, uint16_t dutyCycle) {
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	80fb      	strh	r3, [r7, #6]

    /* Check parameters */
    if(NULL == htim) {
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d101      	bne.n	8000c18 <PWM_SetDutyCycle+0x18>
        return false;
 8000c14:	2300      	movs	r3, #0
 8000c16:	e04a      	b.n	8000cae <PWM_SetDutyCycle+0xae>
    }
    if(TIM_CHANNEL_1 != channel && TIM_CHANNEL_2 != channel && TIM_CHANNEL_3 != channel && TIM_CHANNEL_4 != channel && TIM_CHANNEL_ALL != channel) {
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d00d      	beq.n	8000c3a <PWM_SetDutyCycle+0x3a>
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	2b04      	cmp	r3, #4
 8000c22:	d00a      	beq.n	8000c3a <PWM_SetDutyCycle+0x3a>
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	2b08      	cmp	r3, #8
 8000c28:	d007      	beq.n	8000c3a <PWM_SetDutyCycle+0x3a>
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	2b0c      	cmp	r3, #12
 8000c2e:	d004      	beq.n	8000c3a <PWM_SetDutyCycle+0x3a>
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	2b3c      	cmp	r3, #60	; 0x3c
 8000c34:	d001      	beq.n	8000c3a <PWM_SetDutyCycle+0x3a>
    	return false;
 8000c36:	2300      	movs	r3, #0
 8000c38:	e039      	b.n	8000cae <PWM_SetDutyCycle+0xae>
    }
    if(dutyCycle > 16383) {
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c40:	d301      	bcc.n	8000c46 <PWM_SetDutyCycle+0x46>
    	return false;
 8000c42:	2300      	movs	r3, #0
 8000c44:	e033      	b.n	8000cae <PWM_SetDutyCycle+0xae>
    }

	/* Set duty cycle */
	switch(channel) {
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	2b0c      	cmp	r3, #12
 8000c4a:	d82d      	bhi.n	8000ca8 <PWM_SetDutyCycle+0xa8>
 8000c4c:	a201      	add	r2, pc, #4	; (adr r2, 8000c54 <PWM_SetDutyCycle+0x54>)
 8000c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c52:	bf00      	nop
 8000c54:	08000c89 	.word	0x08000c89
 8000c58:	08000ca9 	.word	0x08000ca9
 8000c5c:	08000ca9 	.word	0x08000ca9
 8000c60:	08000ca9 	.word	0x08000ca9
 8000c64:	08000c91 	.word	0x08000c91
 8000c68:	08000ca9 	.word	0x08000ca9
 8000c6c:	08000ca9 	.word	0x08000ca9
 8000c70:	08000ca9 	.word	0x08000ca9
 8000c74:	08000c99 	.word	0x08000c99
 8000c78:	08000ca9 	.word	0x08000ca9
 8000c7c:	08000ca9 	.word	0x08000ca9
 8000c80:	08000ca9 	.word	0x08000ca9
 8000c84:	08000ca1 	.word	0x08000ca1

		case TIM_CHANNEL_1:
			TIM3->CCR1 = dutyCycle;
 8000c88:	4a0c      	ldr	r2, [pc, #48]	; (8000cbc <PWM_SetDutyCycle+0xbc>)
 8000c8a:	88fb      	ldrh	r3, [r7, #6]
 8000c8c:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000c8e:	e00d      	b.n	8000cac <PWM_SetDutyCycle+0xac>

		case TIM_CHANNEL_2:
			TIM3->CCR2 = dutyCycle;
 8000c90:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <PWM_SetDutyCycle+0xbc>)
 8000c92:	88fb      	ldrh	r3, [r7, #6]
 8000c94:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 8000c96:	e009      	b.n	8000cac <PWM_SetDutyCycle+0xac>

		case TIM_CHANNEL_3:
			TIM3->CCR3 = dutyCycle;
 8000c98:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <PWM_SetDutyCycle+0xbc>)
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8000c9e:	e005      	b.n	8000cac <PWM_SetDutyCycle+0xac>

		case TIM_CHANNEL_4:
			TIM3->CCR4 = dutyCycle;
 8000ca0:	4a06      	ldr	r2, [pc, #24]	; (8000cbc <PWM_SetDutyCycle+0xbc>)
 8000ca2:	88fb      	ldrh	r3, [r7, #6]
 8000ca4:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8000ca6:	e001      	b.n	8000cac <PWM_SetDutyCycle+0xac>

		default:
			return false;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	e000      	b.n	8000cae <PWM_SetDutyCycle+0xae>
			break;
	}

	return true;
 8000cac:	2301      	movs	r3, #1
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3714      	adds	r7, #20
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	40000400 	.word	0x40000400

08000cc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_Init+0x40>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <HAL_Init+0x40>)
 8000cca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <HAL_Init+0x40>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <HAL_Init+0x40>)
 8000cd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <HAL_Init+0x40>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a07      	ldr	r2, [pc, #28]	; (8000d00 <HAL_Init+0x40>)
 8000ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce8:	2003      	movs	r0, #3
 8000cea:	f000 f94f 	bl	8000f8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cee:	200f      	movs	r0, #15
 8000cf0:	f000 f808 	bl	8000d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf4:	f7ff fdae 	bl	8000854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40023c00 	.word	0x40023c00

08000d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_InitTick+0x54>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <HAL_InitTick+0x58>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	4619      	mov	r1, r3
 8000d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 f967 	bl	8000ff6 <HAL_SYSTICK_Config>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e00e      	b.n	8000d50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2b0f      	cmp	r3, #15
 8000d36:	d80a      	bhi.n	8000d4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d40:	f000 f92f 	bl	8000fa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d44:	4a06      	ldr	r2, [pc, #24]	; (8000d60 <HAL_InitTick+0x5c>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e000      	b.n	8000d50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	20000004 	.word	0x20000004

08000d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_IncTick+0x20>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_IncTick+0x24>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4413      	add	r3, r2
 8000d74:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <HAL_IncTick+0x24>)
 8000d76:	6013      	str	r3, [r2, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000008 	.word	0x20000008
 8000d88:	20000258 	.word	0x20000258

08000d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <HAL_GetTick+0x14>)
 8000d92:	681b      	ldr	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000258 	.word	0x20000258

08000da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dac:	f7ff ffee 	bl	8000d8c <HAL_GetTick>
 8000db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dbc:	d005      	beq.n	8000dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <HAL_Delay+0x44>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dca:	bf00      	nop
 8000dcc:	f7ff ffde 	bl	8000d8c <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d8f7      	bhi.n	8000dcc <HAL_Delay+0x28>
  {
  }
}
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000008 	.word	0x20000008

08000dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e08:	4013      	ands	r3, r2
 8000e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e1e:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	60d3      	str	r3, [r2, #12]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <__NVIC_GetPriorityGrouping+0x18>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	0a1b      	lsrs	r3, r3, #8
 8000e3e:	f003 0307 	and.w	r3, r3, #7
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	db0b      	blt.n	8000e7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	f003 021f 	and.w	r2, r3, #31
 8000e68:	4907      	ldr	r1, [pc, #28]	; (8000e88 <__NVIC_EnableIRQ+0x38>)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	095b      	lsrs	r3, r3, #5
 8000e70:	2001      	movs	r0, #1
 8000e72:	fa00 f202 	lsl.w	r2, r0, r2
 8000e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000e100 	.word	0xe000e100

08000e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	6039      	str	r1, [r7, #0]
 8000e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	db0a      	blt.n	8000eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	490c      	ldr	r1, [pc, #48]	; (8000ed8 <__NVIC_SetPriority+0x4c>)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	0112      	lsls	r2, r2, #4
 8000eac:	b2d2      	uxtb	r2, r2
 8000eae:	440b      	add	r3, r1
 8000eb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb4:	e00a      	b.n	8000ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	4908      	ldr	r1, [pc, #32]	; (8000edc <__NVIC_SetPriority+0x50>)
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	f003 030f 	and.w	r3, r3, #15
 8000ec2:	3b04      	subs	r3, #4
 8000ec4:	0112      	lsls	r2, r2, #4
 8000ec6:	b2d2      	uxtb	r2, r2
 8000ec8:	440b      	add	r3, r1
 8000eca:	761a      	strb	r2, [r3, #24]
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000e100 	.word	0xe000e100
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b089      	sub	sp, #36	; 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f1c3 0307 	rsb	r3, r3, #7
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	bf28      	it	cs
 8000efe:	2304      	movcs	r3, #4
 8000f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3304      	adds	r3, #4
 8000f06:	2b06      	cmp	r3, #6
 8000f08:	d902      	bls.n	8000f10 <NVIC_EncodePriority+0x30>
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3b03      	subs	r3, #3
 8000f0e:	e000      	b.n	8000f12 <NVIC_EncodePriority+0x32>
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	401a      	ands	r2, r3
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f32:	43d9      	mvns	r1, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	4313      	orrs	r3, r2
         );
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3724      	adds	r7, #36	; 0x24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
	...

08000f48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f58:	d301      	bcc.n	8000f5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e00f      	b.n	8000f7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <SysTick_Config+0x40>)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f66:	210f      	movs	r1, #15
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f6c:	f7ff ff8e 	bl	8000e8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <SysTick_Config+0x40>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f76:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <SysTick_Config+0x40>)
 8000f78:	2207      	movs	r2, #7
 8000f7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	e000e010 	.word	0xe000e010

08000f8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff ff29 	bl	8000dec <__NVIC_SetPriorityGrouping>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b086      	sub	sp, #24
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	4603      	mov	r3, r0
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	607a      	str	r2, [r7, #4]
 8000fae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb4:	f7ff ff3e 	bl	8000e34 <__NVIC_GetPriorityGrouping>
 8000fb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	68b9      	ldr	r1, [r7, #8]
 8000fbe:	6978      	ldr	r0, [r7, #20]
 8000fc0:	f7ff ff8e 	bl	8000ee0 <NVIC_EncodePriority>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fca:	4611      	mov	r1, r2
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ff5d 	bl	8000e8c <__NVIC_SetPriority>
}
 8000fd2:	bf00      	nop
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ff31 	bl	8000e50 <__NVIC_EnableIRQ>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff ffa2 	bl	8000f48 <SysTick_Config>
 8001004:	4603      	mov	r3, r0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800101c:	f7ff feb6 	bl	8000d8c <HAL_GetTick>
 8001020:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d101      	bne.n	800102c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e099      	b.n	8001160 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2202      	movs	r2, #2
 8001030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f022 0201 	bic.w	r2, r2, #1
 800104a:	601a      	str	r2, [r3, #0]

  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800104c:	e00f      	b.n	800106e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800104e:	f7ff fe9d 	bl	8000d8c <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b05      	cmp	r3, #5
 800105a:	d908      	bls.n	800106e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2220      	movs	r2, #32
 8001060:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2203      	movs	r2, #3
 8001066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e078      	b.n	8001160 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1e8      	bne.n	800104e <HAL_DMA_Init+0x3e>
    }
  }

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001084:	697a      	ldr	r2, [r7, #20]
 8001086:	4b38      	ldr	r3, [pc, #224]	; (8001168 <HAL_DMA_Init+0x158>)
 8001088:	4013      	ands	r3, r2
 800108a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800109a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a1b      	ldr	r3, [r3, #32]
 80010b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	4313      	orrs	r3, r2
 80010be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c4:	2b04      	cmp	r3, #4
 80010c6:	d107      	bne.n	80010d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d0:	4313      	orrs	r3, r2
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	697a      	ldr	r2, [r7, #20]
 80010de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	f023 0307 	bic.w	r3, r3, #7
 80010ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fe:	2b04      	cmp	r3, #4
 8001100:	d117      	bne.n	8001132 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	4313      	orrs	r3, r2
 800110a:	617b      	str	r3, [r7, #20]

    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001110:	2b00      	cmp	r3, #0
 8001112:	d00e      	beq.n	8001132 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f000 f85f 	bl	80011d8 <DMA_CheckFifoParam>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d008      	beq.n	8001132 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2240      	movs	r2, #64	; 0x40
 8001124:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2201      	movs	r2, #1
 800112a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e016      	b.n	8001160 <HAL_DMA_Init+0x150>
      }
    }
  }

  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 f816 	bl	800116c <DMA_CalcBaseAndBitshift>
 8001140:	4603      	mov	r3, r0
 8001142:	60fb      	str	r3, [r7, #12]

  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001148:	223f      	movs	r2, #63	; 0x3f
 800114a:	409a      	lsls	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2201      	movs	r2, #1
 800115a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	f010803f 	.word	0xf010803f

0800116c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	3b10      	subs	r3, #16
 800117c:	4a14      	ldr	r2, [pc, #80]	; (80011d0 <DMA_CalcBaseAndBitshift+0x64>)
 800117e:	fba2 2303 	umull	r2, r3, r2, r3
 8001182:	091b      	lsrs	r3, r3, #4
 8001184:	60fb      	str	r3, [r7, #12]

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001186:	4a13      	ldr	r2, [pc, #76]	; (80011d4 <DMA_CalcBaseAndBitshift+0x68>)
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4413      	add	r3, r2
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	65da      	str	r2, [r3, #92]	; 0x5c

  if (stream_number > 3U)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2b03      	cmp	r3, #3
 8001198:	d909      	bls.n	80011ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80011a2:	f023 0303 	bic.w	r3, r3, #3
 80011a6:	1d1a      	adds	r2, r3, #4
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	659a      	str	r2, [r3, #88]	; 0x58
 80011ac:	e007      	b.n	80011be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80011b6:	f023 0303 	bic.w	r3, r3, #3
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3714      	adds	r7, #20
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	aaaaaaab 	.word	0xaaaaaaab
 80011d4:	080084ec 	.word	0x080084ec

080011d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011e0:	2300      	movs	r3, #0
 80011e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e8:	60bb      	str	r3, [r7, #8]

  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d11f      	bne.n	8001232 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	2b03      	cmp	r3, #3
 80011f6:	d856      	bhi.n	80012a6 <DMA_CheckFifoParam+0xce>
 80011f8:	a201      	add	r2, pc, #4	; (adr r2, 8001200 <DMA_CheckFifoParam+0x28>)
 80011fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fe:	bf00      	nop
 8001200:	08001211 	.word	0x08001211
 8001204:	08001223 	.word	0x08001223
 8001208:	08001211 	.word	0x08001211
 800120c:	080012a7 	.word	0x080012a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001214:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d046      	beq.n	80012aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001220:	e043      	b.n	80012aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001226:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800122a:	d140      	bne.n	80012ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001230:	e03d      	b.n	80012ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800123a:	d121      	bne.n	8001280 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	2b03      	cmp	r3, #3
 8001240:	d837      	bhi.n	80012b2 <DMA_CheckFifoParam+0xda>
 8001242:	a201      	add	r2, pc, #4	; (adr r2, 8001248 <DMA_CheckFifoParam+0x70>)
 8001244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001248:	08001259 	.word	0x08001259
 800124c:	0800125f 	.word	0x0800125f
 8001250:	08001259 	.word	0x08001259
 8001254:	08001271 	.word	0x08001271
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	73fb      	strb	r3, [r7, #15]
      break;
 800125c:	e030      	b.n	80012c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001262:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d025      	beq.n	80012b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800126e:	e022      	b.n	80012b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001274:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001278:	d11f      	bne.n	80012ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800127e:	e01c      	b.n	80012ba <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	2b02      	cmp	r3, #2
 8001284:	d903      	bls.n	800128e <DMA_CheckFifoParam+0xb6>
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	2b03      	cmp	r3, #3
 800128a:	d003      	beq.n	8001294 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800128c:	e018      	b.n	80012c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	73fb      	strb	r3, [r7, #15]
      break;
 8001292:	e015      	b.n	80012c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001298:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d00e      	beq.n	80012be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	73fb      	strb	r3, [r7, #15]
      break;
 80012a4:	e00b      	b.n	80012be <DMA_CheckFifoParam+0xe6>
      break;
 80012a6:	bf00      	nop
 80012a8:	e00a      	b.n	80012c0 <DMA_CheckFifoParam+0xe8>
      break;
 80012aa:	bf00      	nop
 80012ac:	e008      	b.n	80012c0 <DMA_CheckFifoParam+0xe8>
      break;
 80012ae:	bf00      	nop
 80012b0:	e006      	b.n	80012c0 <DMA_CheckFifoParam+0xe8>
      break;
 80012b2:	bf00      	nop
 80012b4:	e004      	b.n	80012c0 <DMA_CheckFifoParam+0xe8>
      break;
 80012b6:	bf00      	nop
 80012b8:	e002      	b.n	80012c0 <DMA_CheckFifoParam+0xe8>
      break;
 80012ba:	bf00      	nop
 80012bc:	e000      	b.n	80012c0 <DMA_CheckFifoParam+0xe8>
      break;
 80012be:	bf00      	nop
    }
  }

  return status;
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop

080012d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b089      	sub	sp, #36	; 0x24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
 80012ea:	e159      	b.n	80015a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012ec:	2201      	movs	r2, #1
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	429a      	cmp	r2, r3
 8001306:	f040 8148 	bne.w	800159a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	2b01      	cmp	r3, #1
 8001314:	d005      	beq.n	8001322 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800131e:	2b02      	cmp	r3, #2
 8001320:	d130      	bne.n	8001384 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	2203      	movs	r2, #3
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	68da      	ldr	r2, [r3, #12]
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001358:	2201      	movs	r2, #1
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	091b      	lsrs	r3, r3, #4
 800136e:	f003 0201 	and.w	r2, r3, #1
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	2b03      	cmp	r3, #3
 800138e:	d017      	beq.n	80013c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	2203      	movs	r2, #3
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d123      	bne.n	8001414 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	08da      	lsrs	r2, r3, #3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3208      	adds	r2, #8
 80013d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	f003 0307 	and.w	r3, r3, #7
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	220f      	movs	r2, #15
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	691a      	ldr	r2, [r3, #16]
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	08da      	lsrs	r2, r3, #3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3208      	adds	r2, #8
 800140e:	69b9      	ldr	r1, [r7, #24]
 8001410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	2203      	movs	r2, #3
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f003 0203 	and.w	r2, r3, #3
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001450:	2b00      	cmp	r3, #0
 8001452:	f000 80a2 	beq.w	800159a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	4b57      	ldr	r3, [pc, #348]	; (80015b8 <HAL_GPIO_Init+0x2e8>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	4a56      	ldr	r2, [pc, #344]	; (80015b8 <HAL_GPIO_Init+0x2e8>)
 8001460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001464:	6453      	str	r3, [r2, #68]	; 0x44
 8001466:	4b54      	ldr	r3, [pc, #336]	; (80015b8 <HAL_GPIO_Init+0x2e8>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001472:	4a52      	ldr	r2, [pc, #328]	; (80015bc <HAL_GPIO_Init+0x2ec>)
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	089b      	lsrs	r3, r3, #2
 8001478:	3302      	adds	r3, #2
 800147a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f003 0303 	and.w	r3, r3, #3
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	220f      	movs	r2, #15
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4013      	ands	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a49      	ldr	r2, [pc, #292]	; (80015c0 <HAL_GPIO_Init+0x2f0>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d019      	beq.n	80014d2 <HAL_GPIO_Init+0x202>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a48      	ldr	r2, [pc, #288]	; (80015c4 <HAL_GPIO_Init+0x2f4>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d013      	beq.n	80014ce <HAL_GPIO_Init+0x1fe>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a47      	ldr	r2, [pc, #284]	; (80015c8 <HAL_GPIO_Init+0x2f8>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d00d      	beq.n	80014ca <HAL_GPIO_Init+0x1fa>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a46      	ldr	r2, [pc, #280]	; (80015cc <HAL_GPIO_Init+0x2fc>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d007      	beq.n	80014c6 <HAL_GPIO_Init+0x1f6>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a45      	ldr	r2, [pc, #276]	; (80015d0 <HAL_GPIO_Init+0x300>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d101      	bne.n	80014c2 <HAL_GPIO_Init+0x1f2>
 80014be:	2304      	movs	r3, #4
 80014c0:	e008      	b.n	80014d4 <HAL_GPIO_Init+0x204>
 80014c2:	2307      	movs	r3, #7
 80014c4:	e006      	b.n	80014d4 <HAL_GPIO_Init+0x204>
 80014c6:	2303      	movs	r3, #3
 80014c8:	e004      	b.n	80014d4 <HAL_GPIO_Init+0x204>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e002      	b.n	80014d4 <HAL_GPIO_Init+0x204>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <HAL_GPIO_Init+0x204>
 80014d2:	2300      	movs	r3, #0
 80014d4:	69fa      	ldr	r2, [r7, #28]
 80014d6:	f002 0203 	and.w	r2, r2, #3
 80014da:	0092      	lsls	r2, r2, #2
 80014dc:	4093      	lsls	r3, r2
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014e4:	4935      	ldr	r1, [pc, #212]	; (80015bc <HAL_GPIO_Init+0x2ec>)
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	089b      	lsrs	r3, r3, #2
 80014ea:	3302      	adds	r3, #2
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014f2:	4b38      	ldr	r3, [pc, #224]	; (80015d4 <HAL_GPIO_Init+0x304>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001516:	4a2f      	ldr	r2, [pc, #188]	; (80015d4 <HAL_GPIO_Init+0x304>)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800151c:	4b2d      	ldr	r3, [pc, #180]	; (80015d4 <HAL_GPIO_Init+0x304>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001540:	4a24      	ldr	r2, [pc, #144]	; (80015d4 <HAL_GPIO_Init+0x304>)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001546:	4b23      	ldr	r3, [pc, #140]	; (80015d4 <HAL_GPIO_Init+0x304>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800156a:	4a1a      	ldr	r2, [pc, #104]	; (80015d4 <HAL_GPIO_Init+0x304>)
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001570:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <HAL_GPIO_Init+0x304>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001594:	4a0f      	ldr	r2, [pc, #60]	; (80015d4 <HAL_GPIO_Init+0x304>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3301      	adds	r3, #1
 800159e:	61fb      	str	r3, [r7, #28]
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	2b0f      	cmp	r3, #15
 80015a4:	f67f aea2 	bls.w	80012ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	3724      	adds	r7, #36	; 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40013800 	.word	0x40013800
 80015c0:	40020000 	.word	0x40020000
 80015c4:	40020400 	.word	0x40020400
 80015c8:	40020800 	.word	0x40020800
 80015cc:	40020c00 	.word	0x40020c00
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40013c00 	.word	0x40013c00

080015d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e12b      	b.n	8001842 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d106      	bne.n	8001604 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff f950 	bl	80008a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2224      	movs	r2, #36	; 0x24
 8001608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0201 	bic.w	r2, r2, #1
 800161a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800162a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800163a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800163c:	f001 ffbe 	bl	80035bc <HAL_RCC_GetPCLK1Freq>
 8001640:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	4a81      	ldr	r2, [pc, #516]	; (800184c <HAL_I2C_Init+0x274>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d807      	bhi.n	800165c <HAL_I2C_Init+0x84>
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4a80      	ldr	r2, [pc, #512]	; (8001850 <HAL_I2C_Init+0x278>)
 8001650:	4293      	cmp	r3, r2
 8001652:	bf94      	ite	ls
 8001654:	2301      	movls	r3, #1
 8001656:	2300      	movhi	r3, #0
 8001658:	b2db      	uxtb	r3, r3
 800165a:	e006      	b.n	800166a <HAL_I2C_Init+0x92>
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4a7d      	ldr	r2, [pc, #500]	; (8001854 <HAL_I2C_Init+0x27c>)
 8001660:	4293      	cmp	r3, r2
 8001662:	bf94      	ite	ls
 8001664:	2301      	movls	r3, #1
 8001666:	2300      	movhi	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e0e7      	b.n	8001842 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4a78      	ldr	r2, [pc, #480]	; (8001858 <HAL_I2C_Init+0x280>)
 8001676:	fba2 2303 	umull	r2, r3, r2, r3
 800167a:	0c9b      	lsrs	r3, r3, #18
 800167c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	68ba      	ldr	r2, [r7, #8]
 800168e:	430a      	orrs	r2, r1
 8001690:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	4a6a      	ldr	r2, [pc, #424]	; (800184c <HAL_I2C_Init+0x274>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d802      	bhi.n	80016ac <HAL_I2C_Init+0xd4>
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	3301      	adds	r3, #1
 80016aa:	e009      	b.n	80016c0 <HAL_I2C_Init+0xe8>
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016b2:	fb02 f303 	mul.w	r3, r2, r3
 80016b6:	4a69      	ldr	r2, [pc, #420]	; (800185c <HAL_I2C_Init+0x284>)
 80016b8:	fba2 2303 	umull	r2, r3, r2, r3
 80016bc:	099b      	lsrs	r3, r3, #6
 80016be:	3301      	adds	r3, #1
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6812      	ldr	r2, [r2, #0]
 80016c4:	430b      	orrs	r3, r1
 80016c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80016d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	495c      	ldr	r1, [pc, #368]	; (800184c <HAL_I2C_Init+0x274>)
 80016dc:	428b      	cmp	r3, r1
 80016de:	d819      	bhi.n	8001714 <HAL_I2C_Init+0x13c>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	1e59      	subs	r1, r3, #1
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80016ee:	1c59      	adds	r1, r3, #1
 80016f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80016f4:	400b      	ands	r3, r1
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00a      	beq.n	8001710 <HAL_I2C_Init+0x138>
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	1e59      	subs	r1, r3, #1
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	fbb1 f3f3 	udiv	r3, r1, r3
 8001708:	3301      	adds	r3, #1
 800170a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800170e:	e051      	b.n	80017b4 <HAL_I2C_Init+0x1dc>
 8001710:	2304      	movs	r3, #4
 8001712:	e04f      	b.n	80017b4 <HAL_I2C_Init+0x1dc>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d111      	bne.n	8001740 <HAL_I2C_Init+0x168>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	1e58      	subs	r0, r3, #1
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6859      	ldr	r1, [r3, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	440b      	add	r3, r1
 800172a:	fbb0 f3f3 	udiv	r3, r0, r3
 800172e:	3301      	adds	r3, #1
 8001730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001734:	2b00      	cmp	r3, #0
 8001736:	bf0c      	ite	eq
 8001738:	2301      	moveq	r3, #1
 800173a:	2300      	movne	r3, #0
 800173c:	b2db      	uxtb	r3, r3
 800173e:	e012      	b.n	8001766 <HAL_I2C_Init+0x18e>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	1e58      	subs	r0, r3, #1
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6859      	ldr	r1, [r3, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	440b      	add	r3, r1
 800174e:	0099      	lsls	r1, r3, #2
 8001750:	440b      	add	r3, r1
 8001752:	fbb0 f3f3 	udiv	r3, r0, r3
 8001756:	3301      	adds	r3, #1
 8001758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800175c:	2b00      	cmp	r3, #0
 800175e:	bf0c      	ite	eq
 8001760:	2301      	moveq	r3, #1
 8001762:	2300      	movne	r3, #0
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_I2C_Init+0x196>
 800176a:	2301      	movs	r3, #1
 800176c:	e022      	b.n	80017b4 <HAL_I2C_Init+0x1dc>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10e      	bne.n	8001794 <HAL_I2C_Init+0x1bc>
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	1e58      	subs	r0, r3, #1
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6859      	ldr	r1, [r3, #4]
 800177e:	460b      	mov	r3, r1
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	440b      	add	r3, r1
 8001784:	fbb0 f3f3 	udiv	r3, r0, r3
 8001788:	3301      	adds	r3, #1
 800178a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800178e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001792:	e00f      	b.n	80017b4 <HAL_I2C_Init+0x1dc>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	1e58      	subs	r0, r3, #1
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6859      	ldr	r1, [r3, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	0099      	lsls	r1, r3, #2
 80017a4:	440b      	add	r3, r1
 80017a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80017aa:	3301      	adds	r3, #1
 80017ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	6809      	ldr	r1, [r1, #0]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69da      	ldr	r2, [r3, #28]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80017e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	6911      	ldr	r1, [r2, #16]
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	68d2      	ldr	r2, [r2, #12]
 80017ee:	4311      	orrs	r1, r2
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	6812      	ldr	r2, [r2, #0]
 80017f4:	430b      	orrs	r3, r1
 80017f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695a      	ldr	r2, [r3, #20]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f042 0201 	orr.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2220      	movs	r2, #32
 800182e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	000186a0 	.word	0x000186a0
 8001850:	001e847f 	.word	0x001e847f
 8001854:	003d08ff 	.word	0x003d08ff
 8001858:	431bde83 	.word	0x431bde83
 800185c:	10624dd3 	.word	0x10624dd3

08001860 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001862:	b08f      	sub	sp, #60	; 0x3c
 8001864:	af0a      	add	r7, sp, #40	; 0x28
 8001866:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e10f      	b.n	8001a92 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b00      	cmp	r3, #0
 8001882:	d106      	bne.n	8001892 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f006 fabb 	bl	8007e08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2203      	movs	r2, #3
 8001896:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800189e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d102      	bne.n	80018ac <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f002 fe0e 	bl	80044d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	687e      	ldr	r6, [r7, #4]
 80018be:	466d      	mov	r5, sp
 80018c0:	f106 0410 	add.w	r4, r6, #16
 80018c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80018d4:	1d33      	adds	r3, r6, #4
 80018d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018d8:	6838      	ldr	r0, [r7, #0]
 80018da:	f002 fce5 	bl	80042a8 <USB_CoreInit>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d005      	beq.n	80018f0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2202      	movs	r2, #2
 80018e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e0d0      	b.n	8001a92 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2100      	movs	r1, #0
 80018f6:	4618      	mov	r0, r3
 80018f8:	f002 fdfc 	bl	80044f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018fc:	2300      	movs	r3, #0
 80018fe:	73fb      	strb	r3, [r7, #15]
 8001900:	e04a      	b.n	8001998 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001902:	7bfa      	ldrb	r2, [r7, #15]
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	4413      	add	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	440b      	add	r3, r1
 8001910:	333d      	adds	r3, #61	; 0x3d
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001916:	7bfa      	ldrb	r2, [r7, #15]
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	4613      	mov	r3, r2
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	4413      	add	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	440b      	add	r3, r1
 8001924:	333c      	adds	r3, #60	; 0x3c
 8001926:	7bfa      	ldrb	r2, [r7, #15]
 8001928:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800192a:	7bfa      	ldrb	r2, [r7, #15]
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	b298      	uxth	r0, r3
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	4613      	mov	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	4413      	add	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	440b      	add	r3, r1
 800193c:	3344      	adds	r3, #68	; 0x44
 800193e:	4602      	mov	r2, r0
 8001940:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001942:	7bfa      	ldrb	r2, [r7, #15]
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	4613      	mov	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	4413      	add	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	440b      	add	r3, r1
 8001950:	3340      	adds	r3, #64	; 0x40
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001956:	7bfa      	ldrb	r2, [r7, #15]
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	4413      	add	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	440b      	add	r3, r1
 8001964:	3348      	adds	r3, #72	; 0x48
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800196a:	7bfa      	ldrb	r2, [r7, #15]
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	4413      	add	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	440b      	add	r3, r1
 8001978:	334c      	adds	r3, #76	; 0x4c
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800197e:	7bfa      	ldrb	r2, [r7, #15]
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	4413      	add	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	440b      	add	r3, r1
 800198c:	3354      	adds	r3, #84	; 0x54
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	3301      	adds	r3, #1
 8001996:	73fb      	strb	r3, [r7, #15]
 8001998:	7bfa      	ldrb	r2, [r7, #15]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d3af      	bcc.n	8001902 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019a2:	2300      	movs	r3, #0
 80019a4:	73fb      	strb	r3, [r7, #15]
 80019a6:	e044      	b.n	8001a32 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019a8:	7bfa      	ldrb	r2, [r7, #15]
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	4613      	mov	r3, r2
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	4413      	add	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80019ba:	2200      	movs	r2, #0
 80019bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019be:	7bfa      	ldrb	r2, [r7, #15]
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	4613      	mov	r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	4413      	add	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	440b      	add	r3, r1
 80019cc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80019d0:	7bfa      	ldrb	r2, [r7, #15]
 80019d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019d4:	7bfa      	ldrb	r2, [r7, #15]
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	4613      	mov	r3, r2
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	4413      	add	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	440b      	add	r3, r1
 80019e2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019ea:	7bfa      	ldrb	r2, [r7, #15]
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	4413      	add	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	440b      	add	r3, r1
 80019f8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a00:	7bfa      	ldrb	r2, [r7, #15]
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	4413      	add	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a16:	7bfa      	ldrb	r2, [r7, #15]
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	4413      	add	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	440b      	add	r3, r1
 8001a24:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	73fb      	strb	r3, [r7, #15]
 8001a32:	7bfa      	ldrb	r2, [r7, #15]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d3b5      	bcc.n	80019a8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	603b      	str	r3, [r7, #0]
 8001a42:	687e      	ldr	r6, [r7, #4]
 8001a44:	466d      	mov	r5, sp
 8001a46:	f106 0410 	add.w	r4, r6, #16
 8001a4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a56:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a5a:	1d33      	adds	r3, r6, #4
 8001a5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a5e:	6838      	ldr	r0, [r7, #0]
 8001a60:	f002 fd94 	bl	800458c <USB_DevInit>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d005      	beq.n	8001a76 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e00d      	b.n	8001a92 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2201      	movs	r2, #1
 8001a82:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f003 fee3 	bl	8005856 <USB_DevDisconnect>

  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a9a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b084      	sub	sp, #16
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d101      	bne.n	8001ab6 <HAL_PCD_Start+0x1c>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e020      	b.n	8001af8 <HAL_PCD_Start+0x5e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d109      	bne.n	8001ada <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d005      	beq.n	8001ada <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f002 fce6 	bl	80044b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f003 fe93 	bl	8005814 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b08d      	sub	sp, #52	; 0x34
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b0e:	6a3b      	ldr	r3, [r7, #32]
 8001b10:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f003 ff51 	bl	80059be <USB_GetMode>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f040 848a 	bne.w	8002438 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f003 feb5 	bl	8005898 <USB_ReadInterrupts>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 8480 	beq.w	8002436 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	0a1b      	lsrs	r3, r3, #8
 8001b40:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f003 fea2 	bl	8005898 <USB_ReadInterrupts>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d107      	bne.n	8001b6e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695a      	ldr	r2, [r3, #20]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f002 0202 	and.w	r2, r2, #2
 8001b6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f003 fe90 	bl	8005898 <USB_ReadInterrupts>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f003 0310 	and.w	r3, r3, #16
 8001b7e:	2b10      	cmp	r3, #16
 8001b80:	d161      	bne.n	8001c46 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	699a      	ldr	r2, [r3, #24]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 0210 	bic.w	r2, r2, #16
 8001b90:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001b92:	6a3b      	ldr	r3, [r7, #32]
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	f003 020f 	and.w	r2, r3, #15
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	3304      	adds	r3, #4
 8001bb0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	0c5b      	lsrs	r3, r3, #17
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d124      	bne.n	8001c08 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d035      	beq.n	8001c36 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	091b      	lsrs	r3, r3, #4
 8001bd2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001bd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	461a      	mov	r2, r3
 8001bdc:	6a38      	ldr	r0, [r7, #32]
 8001bde:	f003 fcc7 	bl	8005570 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	691a      	ldr	r2, [r3, #16]
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bee:	441a      	add	r2, r3
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	6a1a      	ldr	r2, [r3, #32]
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	091b      	lsrs	r3, r3, #4
 8001bfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c00:	441a      	add	r2, r3
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	621a      	str	r2, [r3, #32]
 8001c06:	e016      	b.n	8001c36 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	0c5b      	lsrs	r3, r3, #17
 8001c0c:	f003 030f 	and.w	r3, r3, #15
 8001c10:	2b06      	cmp	r3, #6
 8001c12:	d110      	bne.n	8001c36 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001c1a:	2208      	movs	r2, #8
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	6a38      	ldr	r0, [r7, #32]
 8001c20:	f003 fca6 	bl	8005570 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	6a1a      	ldr	r2, [r3, #32]
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	091b      	lsrs	r3, r3, #4
 8001c2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c30:	441a      	add	r2, r3
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	699a      	ldr	r2, [r3, #24]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f042 0210 	orr.w	r2, r2, #16
 8001c44:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f003 fe24 	bl	8005898 <USB_ReadInterrupts>
 8001c50:	4603      	mov	r3, r0
 8001c52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c56:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001c5a:	f040 80a7 	bne.w	8001dac <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f003 fe29 	bl	80058be <USB_ReadDevAllOutEpInterrupt>
 8001c6c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001c6e:	e099      	b.n	8001da4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 808e 	beq.w	8001d98 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	4611      	mov	r1, r2
 8001c86:	4618      	mov	r0, r3
 8001c88:	f003 fe4d 	bl	8005926 <USB_ReadDevOutEPInterrupt>
 8001c8c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00c      	beq.n	8001cb2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	015a      	lsls	r2, r3, #5
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001caa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 fec3 	bl	8002a38 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00c      	beq.n	8001cd6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	015a      	lsls	r2, r3, #5
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cc8:	461a      	mov	r2, r3
 8001cca:	2308      	movs	r3, #8
 8001ccc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001cce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 ff99 	bl	8002c08 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	f003 0310 	and.w	r3, r3, #16
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d008      	beq.n	8001cf2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	015a      	lsls	r2, r3, #5
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cec:	461a      	mov	r2, r3
 8001cee:	2310      	movs	r3, #16
 8001cf0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d030      	beq.n	8001d5e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001cfc:	6a3b      	ldr	r3, [r7, #32]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d04:	2b80      	cmp	r3, #128	; 0x80
 8001d06:	d109      	bne.n	8001d1c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	69fa      	ldr	r2, [r7, #28]
 8001d12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d1a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d1e:	4613      	mov	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	4413      	add	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	3304      	adds	r3, #4
 8001d30:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	78db      	ldrb	r3, [r3, #3]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d108      	bne.n	8001d4c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	4619      	mov	r1, r3
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f006 f95a 	bl	8008000 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	015a      	lsls	r2, r3, #5
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	4413      	add	r3, r2
 8001d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d58:	461a      	mov	r2, r3
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	f003 0320 	and.w	r3, r3, #32
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d008      	beq.n	8001d7a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	015a      	lsls	r2, r3, #5
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	4413      	add	r3, r2
 8001d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d74:	461a      	mov	r2, r3
 8001d76:	2320      	movs	r3, #32
 8001d78:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d009      	beq.n	8001d98 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	015a      	lsls	r2, r3, #5
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d90:	461a      	mov	r2, r3
 8001d92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d96:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da0:	085b      	lsrs	r3, r3, #1
 8001da2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f47f af62 	bne.w	8001c70 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f003 fd71 	bl	8005898 <USB_ReadInterrupts>
 8001db6:	4603      	mov	r3, r0
 8001db8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001dc0:	f040 80db 	bne.w	8001f7a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f003 fd92 	bl	80058f2 <USB_ReadDevAllInEpInterrupt>
 8001dce:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001dd4:	e0cd      	b.n	8001f72 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 80c2 	beq.w	8001f66 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	4611      	mov	r1, r2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f003 fdb8 	bl	8005962 <USB_ReadDevInEPInterrupt>
 8001df2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d057      	beq.n	8001eae <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	2201      	movs	r2, #1
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	43db      	mvns	r3, r3
 8001e18:	69f9      	ldr	r1, [r7, #28]
 8001e1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001e1e:	4013      	ands	r3, r2
 8001e20:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	015a      	lsls	r2, r3, #5
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	4413      	add	r3, r2
 8001e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e2e:	461a      	mov	r2, r3
 8001e30:	2301      	movs	r3, #1
 8001e32:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d132      	bne.n	8001ea2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e40:	4613      	mov	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	4413      	add	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	334c      	adds	r3, #76	; 0x4c
 8001e4c:	6819      	ldr	r1, [r3, #0]
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e52:	4613      	mov	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	4413      	add	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4403      	add	r3, r0
 8001e5c:	3348      	adds	r3, #72	; 0x48
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4419      	add	r1, r3
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e66:	4613      	mov	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4403      	add	r3, r0
 8001e70:	334c      	adds	r3, #76	; 0x4c
 8001e72:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d113      	bne.n	8001ea2 <HAL_PCD_IRQHandler+0x3a2>
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e7e:	4613      	mov	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	4413      	add	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	440b      	add	r3, r1
 8001e88:	3354      	adds	r3, #84	; 0x54
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d108      	bne.n	8001ea2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6818      	ldr	r0, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	f003 fdbf 	bl	8005a20 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f006 f82e 	bl	8007f0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d008      	beq.n	8001eca <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	015a      	lsls	r2, r3, #5
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	2308      	movs	r3, #8
 8001ec8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	f003 0310 	and.w	r3, r3, #16
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d008      	beq.n	8001ee6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	015a      	lsls	r2, r3, #5
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	4413      	add	r3, r2
 8001edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	2310      	movs	r3, #16
 8001ee4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d008      	beq.n	8001f02 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	015a      	lsls	r2, r3, #5
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001efc:	461a      	mov	r2, r3
 8001efe:	2340      	movs	r3, #64	; 0x40
 8001f00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d023      	beq.n	8001f54 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001f0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f0e:	6a38      	ldr	r0, [r7, #32]
 8001f10:	f002 fca0 	bl	8004854 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f16:	4613      	mov	r3, r2
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	4413      	add	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	3338      	adds	r3, #56	; 0x38
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	4413      	add	r3, r2
 8001f24:	3304      	adds	r3, #4
 8001f26:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	78db      	ldrb	r3, [r3, #3]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d108      	bne.n	8001f42 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	2200      	movs	r2, #0
 8001f34:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f006 f871 	bl	8008024 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	015a      	lsls	r2, r3, #5
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	4413      	add	r3, r2
 8001f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f4e:	461a      	mov	r2, r3
 8001f50:	2302      	movs	r3, #2
 8001f52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001f5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 fcdb 	bl	800291c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	3301      	adds	r3, #1
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6e:	085b      	lsrs	r3, r3, #1
 8001f70:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f47f af2e 	bne.w	8001dd6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f003 fc8a 	bl	8005898 <USB_ReadInterrupts>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f8e:	d122      	bne.n	8001fd6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	69fa      	ldr	r2, [r7, #28]
 8001f9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f9e:	f023 0301 	bic.w	r3, r3, #1
 8001fa2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d108      	bne.n	8001fc0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 fec3 	bl	8002d44 <HAL_PCDEx_LPM_Callback>
 8001fbe:	e002      	b.n	8001fc6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f006 f80f 	bl	8007fe4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	695a      	ldr	r2, [r3, #20]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001fd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f003 fc5c 	bl	8005898 <USB_ReadInterrupts>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fe6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fea:	d112      	bne.n	8002012 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d102      	bne.n	8002002 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f005 ffcb 	bl	8007f98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	695a      	ldr	r2, [r3, #20]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002010:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f003 fc3e 	bl	8005898 <USB_ReadInterrupts>
 800201c:	4603      	mov	r3, r0
 800201e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002026:	f040 80b7 	bne.w	8002198 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	69fa      	ldr	r2, [r7, #28]
 8002034:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002038:	f023 0301 	bic.w	r3, r3, #1
 800203c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2110      	movs	r1, #16
 8002044:	4618      	mov	r0, r3
 8002046:	f002 fc05 	bl	8004854 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800204a:	2300      	movs	r3, #0
 800204c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800204e:	e046      	b.n	80020de <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002052:	015a      	lsls	r2, r3, #5
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	4413      	add	r3, r2
 8002058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800205c:	461a      	mov	r2, r3
 800205e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002062:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002066:	015a      	lsls	r2, r3, #5
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	4413      	add	r3, r2
 800206c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002074:	0151      	lsls	r1, r2, #5
 8002076:	69fa      	ldr	r2, [r7, #28]
 8002078:	440a      	add	r2, r1
 800207a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800207e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002082:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002086:	015a      	lsls	r2, r3, #5
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	4413      	add	r3, r2
 800208c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002090:	461a      	mov	r2, r3
 8002092:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002096:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209a:	015a      	lsls	r2, r3, #5
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	4413      	add	r3, r2
 80020a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020a8:	0151      	lsls	r1, r2, #5
 80020aa:	69fa      	ldr	r2, [r7, #28]
 80020ac:	440a      	add	r2, r1
 80020ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80020b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020b6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80020b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ba:	015a      	lsls	r2, r3, #5
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	4413      	add	r3, r2
 80020c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020c8:	0151      	lsls	r1, r2, #5
 80020ca:	69fa      	ldr	r2, [r7, #28]
 80020cc:	440a      	add	r2, r1
 80020ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80020d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80020d6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020da:	3301      	adds	r3, #1
 80020dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d3b3      	bcc.n	8002050 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	69fa      	ldr	r2, [r7, #28]
 80020f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020f6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80020fa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002100:	2b00      	cmp	r3, #0
 8002102:	d016      	beq.n	8002132 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800210a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800210e:	69fa      	ldr	r2, [r7, #28]
 8002110:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002114:	f043 030b 	orr.w	r3, r3, #11
 8002118:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002124:	69fa      	ldr	r2, [r7, #28]
 8002126:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800212a:	f043 030b 	orr.w	r3, r3, #11
 800212e:	6453      	str	r3, [r2, #68]	; 0x44
 8002130:	e015      	b.n	800215e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	69fa      	ldr	r2, [r7, #28]
 800213c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002140:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002144:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002148:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	69fa      	ldr	r2, [r7, #28]
 8002154:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002158:	f043 030b 	orr.w	r3, r3, #11
 800215c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	69fa      	ldr	r2, [r7, #28]
 8002168:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800216c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002170:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002182:	461a      	mov	r2, r3
 8002184:	f003 fc4c 	bl	8005a20 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	695a      	ldr	r2, [r3, #20]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002196:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f003 fb7b 	bl	8005898 <USB_ReadInterrupts>
 80021a2:	4603      	mov	r3, r0
 80021a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ac:	d124      	bne.n	80021f8 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f003 fc11 	bl	80059da <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f002 fbc6 	bl	800494e <USB_GetDevSpeed>
 80021c2:	4603      	mov	r3, r0
 80021c4:	461a      	mov	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681c      	ldr	r4, [r3, #0]
 80021ce:	f001 f9e9 	bl	80035a4 <HAL_RCC_GetHCLKFreq>
 80021d2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	461a      	mov	r2, r3
 80021dc:	4620      	mov	r0, r4
 80021de:	f002 f8c5 	bl	800436c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f005 feb9 	bl	8007f5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	695a      	ldr	r2, [r3, #20]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80021f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f003 fb4b 	bl	8005898 <USB_ReadInterrupts>
 8002202:	4603      	mov	r3, r0
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	2b08      	cmp	r3, #8
 800220a:	d10a      	bne.n	8002222 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f005 fe96 	bl	8007f3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695a      	ldr	r2, [r3, #20]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f002 0208 	and.w	r2, r2, #8
 8002220:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f003 fb36 	bl	8005898 <USB_ReadInterrupts>
 800222c:	4603      	mov	r3, r0
 800222e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002232:	2b80      	cmp	r3, #128	; 0x80
 8002234:	d122      	bne.n	800227c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002242:	2301      	movs	r3, #1
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
 8002246:	e014      	b.n	8002272 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800224c:	4613      	mov	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4413      	add	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d105      	bne.n	800226c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	b2db      	uxtb	r3, r3
 8002264:	4619      	mov	r1, r3
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 fb27 	bl	80028ba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	3301      	adds	r3, #1
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002278:	429a      	cmp	r2, r3
 800227a:	d3e5      	bcc.n	8002248 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f003 fb09 	bl	8005898 <USB_ReadInterrupts>
 8002286:	4603      	mov	r3, r0
 8002288:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800228c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002290:	d13b      	bne.n	800230a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002292:	2301      	movs	r3, #1
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
 8002296:	e02b      	b.n	80022f0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	015a      	lsls	r2, r3, #5
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	4413      	add	r3, r2
 80022a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ac:	4613      	mov	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4413      	add	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	3340      	adds	r3, #64	; 0x40
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d115      	bne.n	80022ea <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80022be:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	da12      	bge.n	80022ea <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c8:	4613      	mov	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	4413      	add	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	333f      	adds	r3, #63	; 0x3f
 80022d4:	2201      	movs	r2, #1
 80022d6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	4619      	mov	r1, r3
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 fae8 	bl	80028ba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	3301      	adds	r3, #1
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d3ce      	bcc.n	8002298 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	695a      	ldr	r2, [r3, #20]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002308:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f003 fac2 	bl	8005898 <USB_ReadInterrupts>
 8002314:	4603      	mov	r3, r0
 8002316:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800231a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800231e:	d155      	bne.n	80023cc <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002320:	2301      	movs	r3, #1
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
 8002324:	e045      	b.n	80023b2 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	015a      	lsls	r2, r3, #5
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	4413      	add	r3, r2
 800232e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800233a:	4613      	mov	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	4413      	add	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	440b      	add	r3, r1
 8002344:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d12e      	bne.n	80023ac <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800234e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002350:	2b00      	cmp	r3, #0
 8002352:	da2b      	bge.n	80023ac <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002360:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002364:	429a      	cmp	r2, r3
 8002366:	d121      	bne.n	80023ac <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800237a:	2201      	movs	r2, #1
 800237c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10a      	bne.n	80023ac <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	69fa      	ldr	r2, [r7, #28]
 80023a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023a8:	6053      	str	r3, [r2, #4]
            break;
 80023aa:	e007      	b.n	80023bc <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	3301      	adds	r3, #1
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d3b4      	bcc.n	8002326 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	695a      	ldr	r2, [r3, #20]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80023ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f003 fa61 	bl	8005898 <USB_ReadInterrupts>
 80023d6:	4603      	mov	r3, r0
 80023d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80023dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e0:	d10a      	bne.n	80023f8 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f005 fe30 	bl	8008048 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	695a      	ldr	r2, [r3, #20]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80023f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f003 fa4b 	bl	8005898 <USB_ReadInterrupts>
 8002402:	4603      	mov	r3, r0
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b04      	cmp	r3, #4
 800240a:	d115      	bne.n	8002438 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	2b00      	cmp	r3, #0
 800241c:	d002      	beq.n	8002424 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f005 fe20 	bl	8008064 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6859      	ldr	r1, [r3, #4]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	430a      	orrs	r2, r1
 8002432:	605a      	str	r2, [r3, #4]
 8002434:	e000      	b.n	8002438 <HAL_PCD_IRQHandler+0x938>
      return;
 8002436:	bf00      	nop
    }
  }
}
 8002438:	3734      	adds	r7, #52	; 0x34
 800243a:	46bd      	mov	sp, r7
 800243c:	bd90      	pop	{r4, r7, pc}

0800243e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
 8002446:	460b      	mov	r3, r1
 8002448:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002450:	2b01      	cmp	r3, #1
 8002452:	d101      	bne.n	8002458 <HAL_PCD_SetAddress+0x1a>
 8002454:	2302      	movs	r3, #2
 8002456:	e013      	b.n	8002480 <HAL_PCD_SetAddress+0x42>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	78fa      	ldrb	r2, [r7, #3]
 8002464:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	78fa      	ldrb	r2, [r7, #3]
 800246e:	4611      	mov	r1, r2
 8002470:	4618      	mov	r0, r3
 8002472:	f003 f9a9 	bl	80057c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	4608      	mov	r0, r1
 8002492:	4611      	mov	r1, r2
 8002494:	461a      	mov	r2, r3
 8002496:	4603      	mov	r3, r0
 8002498:	70fb      	strb	r3, [r7, #3]
 800249a:	460b      	mov	r3, r1
 800249c:	803b      	strh	r3, [r7, #0]
 800249e:	4613      	mov	r3, r2
 80024a0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80024a2:	2300      	movs	r3, #0
 80024a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	da0f      	bge.n	80024ce <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024ae:	78fb      	ldrb	r3, [r7, #3]
 80024b0:	f003 020f 	and.w	r2, r3, #15
 80024b4:	4613      	mov	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	3338      	adds	r3, #56	; 0x38
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	4413      	add	r3, r2
 80024c2:	3304      	adds	r3, #4
 80024c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2201      	movs	r2, #1
 80024ca:	705a      	strb	r2, [r3, #1]
 80024cc:	e00f      	b.n	80024ee <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024ce:	78fb      	ldrb	r3, [r7, #3]
 80024d0:	f003 020f 	and.w	r2, r3, #15
 80024d4:	4613      	mov	r3, r2
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	4413      	add	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	4413      	add	r3, r2
 80024e4:	3304      	adds	r3, #4
 80024e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80024ee:	78fb      	ldrb	r3, [r7, #3]
 80024f0:	f003 030f 	and.w	r3, r3, #15
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80024fa:	883a      	ldrh	r2, [r7, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	78ba      	ldrb	r2, [r7, #2]
 8002504:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	785b      	ldrb	r3, [r3, #1]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d004      	beq.n	8002518 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	b29a      	uxth	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002518:	78bb      	ldrb	r3, [r7, #2]
 800251a:	2b02      	cmp	r3, #2
 800251c:	d102      	bne.n	8002524 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800252a:	2b01      	cmp	r3, #1
 800252c:	d101      	bne.n	8002532 <HAL_PCD_EP_Open+0xaa>
 800252e:	2302      	movs	r3, #2
 8002530:	e00e      	b.n	8002550 <HAL_PCD_EP_Open+0xc8>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68f9      	ldr	r1, [r7, #12]
 8002540:	4618      	mov	r0, r3
 8002542:	f002 fa29 	bl	8004998 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800254e:	7afb      	ldrb	r3, [r7, #11]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002564:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002568:	2b00      	cmp	r3, #0
 800256a:	da0f      	bge.n	800258c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	f003 020f 	and.w	r2, r3, #15
 8002572:	4613      	mov	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	4413      	add	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	3338      	adds	r3, #56	; 0x38
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	4413      	add	r3, r2
 8002580:	3304      	adds	r3, #4
 8002582:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2201      	movs	r2, #1
 8002588:	705a      	strb	r2, [r3, #1]
 800258a:	e00f      	b.n	80025ac <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800258c:	78fb      	ldrb	r3, [r7, #3]
 800258e:	f003 020f 	and.w	r2, r3, #15
 8002592:	4613      	mov	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4413      	add	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	3304      	adds	r3, #4
 80025a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80025ac:	78fb      	ldrb	r3, [r7, #3]
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d101      	bne.n	80025c6 <HAL_PCD_EP_Close+0x6e>
 80025c2:	2302      	movs	r3, #2
 80025c4:	e00e      	b.n	80025e4 <HAL_PCD_EP_Close+0x8c>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68f9      	ldr	r1, [r7, #12]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f002 fa67 	bl	8004aa8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	607a      	str	r2, [r7, #4]
 80025f6:	603b      	str	r3, [r7, #0]
 80025f8:	460b      	mov	r3, r1
 80025fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025fc:	7afb      	ldrb	r3, [r7, #11]
 80025fe:	f003 020f 	and.w	r2, r3, #15
 8002602:	4613      	mov	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	4413      	add	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	4413      	add	r3, r2
 8002612:	3304      	adds	r3, #4
 8002614:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	2200      	movs	r2, #0
 8002626:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	2200      	movs	r2, #0
 800262c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800262e:	7afb      	ldrb	r3, [r7, #11]
 8002630:	f003 030f 	and.w	r3, r3, #15
 8002634:	b2da      	uxtb	r2, r3
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d102      	bne.n	8002648 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002648:	7afb      	ldrb	r3, [r7, #11]
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	2b00      	cmp	r3, #0
 8002650:	d109      	bne.n	8002666 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	b2db      	uxtb	r3, r3
 800265c:	461a      	mov	r2, r3
 800265e:	6979      	ldr	r1, [r7, #20]
 8002660:	f002 fd46 	bl	80050f0 <USB_EP0StartXfer>
 8002664:	e008      	b.n	8002678 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	b2db      	uxtb	r3, r3
 8002670:	461a      	mov	r2, r3
 8002672:	6979      	ldr	r1, [r7, #20]
 8002674:	f002 faf4 	bl	8004c60 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	460b      	mov	r3, r1
 800268c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800268e:	78fb      	ldrb	r3, [r7, #3]
 8002690:	f003 020f 	and.w	r2, r3, #15
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	4413      	add	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	440b      	add	r3, r1
 80026a0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80026a4:	681b      	ldr	r3, [r3, #0]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b086      	sub	sp, #24
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	60f8      	str	r0, [r7, #12]
 80026ba:	607a      	str	r2, [r7, #4]
 80026bc:	603b      	str	r3, [r7, #0]
 80026be:	460b      	mov	r3, r1
 80026c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026c2:	7afb      	ldrb	r3, [r7, #11]
 80026c4:	f003 020f 	and.w	r2, r3, #15
 80026c8:	4613      	mov	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	4413      	add	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	3338      	adds	r3, #56	; 0x38
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	4413      	add	r3, r2
 80026d6:	3304      	adds	r3, #4
 80026d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2200      	movs	r2, #0
 80026ea:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	2201      	movs	r2, #1
 80026f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026f2:	7afb      	ldrb	r3, [r7, #11]
 80026f4:	f003 030f 	and.w	r3, r3, #15
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d102      	bne.n	800270c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800270c:	7afb      	ldrb	r3, [r7, #11]
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	2b00      	cmp	r3, #0
 8002714:	d109      	bne.n	800272a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6818      	ldr	r0, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	b2db      	uxtb	r3, r3
 8002720:	461a      	mov	r2, r3
 8002722:	6979      	ldr	r1, [r7, #20]
 8002724:	f002 fce4 	bl	80050f0 <USB_EP0StartXfer>
 8002728:	e008      	b.n	800273c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6818      	ldr	r0, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	b2db      	uxtb	r3, r3
 8002734:	461a      	mov	r2, r3
 8002736:	6979      	ldr	r1, [r7, #20]
 8002738:	f002 fa92 	bl	8004c60 <USB_EPStartXfer>
  }

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b084      	sub	sp, #16
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
 800274e:	460b      	mov	r3, r1
 8002750:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002752:	78fb      	ldrb	r3, [r7, #3]
 8002754:	f003 020f 	and.w	r2, r3, #15
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	429a      	cmp	r2, r3
 800275e:	d901      	bls.n	8002764 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e050      	b.n	8002806 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002764:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002768:	2b00      	cmp	r3, #0
 800276a:	da0f      	bge.n	800278c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800276c:	78fb      	ldrb	r3, [r7, #3]
 800276e:	f003 020f 	and.w	r2, r3, #15
 8002772:	4613      	mov	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	4413      	add	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	3338      	adds	r3, #56	; 0x38
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	4413      	add	r3, r2
 8002780:	3304      	adds	r3, #4
 8002782:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2201      	movs	r2, #1
 8002788:	705a      	strb	r2, [r3, #1]
 800278a:	e00d      	b.n	80027a8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800278c:	78fa      	ldrb	r2, [r7, #3]
 800278e:	4613      	mov	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4413      	add	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	4413      	add	r3, r2
 800279e:	3304      	adds	r3, #4
 80027a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2201      	movs	r2, #1
 80027ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027ae:	78fb      	ldrb	r3, [r7, #3]
 80027b0:	f003 030f 	and.w	r3, r3, #15
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_PCD_EP_SetStall+0x82>
 80027c4:	2302      	movs	r3, #2
 80027c6:	e01e      	b.n	8002806 <HAL_PCD_EP_SetStall+0xc0>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68f9      	ldr	r1, [r7, #12]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f002 ff22 	bl	8005620 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027dc:	78fb      	ldrb	r3, [r7, #3]
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10a      	bne.n	80027fc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6818      	ldr	r0, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	b2d9      	uxtb	r1, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80027f6:	461a      	mov	r2, r3
 80027f8:	f003 f912 	bl	8005a20 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b084      	sub	sp, #16
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
 8002816:	460b      	mov	r3, r1
 8002818:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800281a:	78fb      	ldrb	r3, [r7, #3]
 800281c:	f003 020f 	and.w	r2, r3, #15
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	429a      	cmp	r2, r3
 8002826:	d901      	bls.n	800282c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e042      	b.n	80028b2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800282c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002830:	2b00      	cmp	r3, #0
 8002832:	da0f      	bge.n	8002854 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002834:	78fb      	ldrb	r3, [r7, #3]
 8002836:	f003 020f 	and.w	r2, r3, #15
 800283a:	4613      	mov	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	4413      	add	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	3338      	adds	r3, #56	; 0x38
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	4413      	add	r3, r2
 8002848:	3304      	adds	r3, #4
 800284a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2201      	movs	r2, #1
 8002850:	705a      	strb	r2, [r3, #1]
 8002852:	e00f      	b.n	8002874 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002854:	78fb      	ldrb	r3, [r7, #3]
 8002856:	f003 020f 	and.w	r2, r3, #15
 800285a:	4613      	mov	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	4413      	add	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	4413      	add	r3, r2
 800286a:	3304      	adds	r3, #4
 800286c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800287a:	78fb      	ldrb	r3, [r7, #3]
 800287c:	f003 030f 	and.w	r3, r3, #15
 8002880:	b2da      	uxtb	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <HAL_PCD_EP_ClrStall+0x86>
 8002890:	2302      	movs	r3, #2
 8002892:	e00e      	b.n	80028b2 <HAL_PCD_EP_ClrStall+0xa4>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68f9      	ldr	r1, [r7, #12]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f002 ff2a 	bl	80056fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b084      	sub	sp, #16
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	460b      	mov	r3, r1
 80028c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80028c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	da0c      	bge.n	80028e8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028ce:	78fb      	ldrb	r3, [r7, #3]
 80028d0:	f003 020f 	and.w	r2, r3, #15
 80028d4:	4613      	mov	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	3338      	adds	r3, #56	; 0x38
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	4413      	add	r3, r2
 80028e2:	3304      	adds	r3, #4
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	e00c      	b.n	8002902 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028e8:	78fb      	ldrb	r3, [r7, #3]
 80028ea:	f003 020f 	and.w	r2, r3, #15
 80028ee:	4613      	mov	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4413      	add	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	4413      	add	r3, r2
 80028fe:	3304      	adds	r3, #4
 8002900:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68f9      	ldr	r1, [r7, #12]
 8002908:	4618      	mov	r0, r3
 800290a:	f002 fd49 	bl	80053a0 <USB_EPStopXfer>
 800290e:	4603      	mov	r3, r0
 8002910:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002912:	7afb      	ldrb	r3, [r7, #11]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08a      	sub	sp, #40	; 0x28
 8002920:	af02      	add	r7, sp, #8
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	4613      	mov	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4413      	add	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	3338      	adds	r3, #56	; 0x38
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	4413      	add	r3, r2
 8002940:	3304      	adds	r3, #4
 8002942:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a1a      	ldr	r2, [r3, #32]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	429a      	cmp	r2, r3
 800294e:	d901      	bls.n	8002954 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e06c      	b.n	8002a2e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	699a      	ldr	r2, [r3, #24]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	69fa      	ldr	r2, [r7, #28]
 8002966:	429a      	cmp	r2, r3
 8002968:	d902      	bls.n	8002970 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	3303      	adds	r3, #3
 8002974:	089b      	lsrs	r3, r3, #2
 8002976:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002978:	e02b      	b.n	80029d2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	699a      	ldr	r2, [r3, #24]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	69fa      	ldr	r2, [r7, #28]
 800298c:	429a      	cmp	r2, r3
 800298e:	d902      	bls.n	8002996 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	3303      	adds	r3, #3
 800299a:	089b      	lsrs	r3, r3, #2
 800299c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6919      	ldr	r1, [r3, #16]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	4603      	mov	r3, r0
 80029b4:	6978      	ldr	r0, [r7, #20]
 80029b6:	f002 fd9d 	bl	80054f4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	691a      	ldr	r2, [r3, #16]
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	441a      	add	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a1a      	ldr	r2, [r3, #32]
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	441a      	add	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	015a      	lsls	r2, r3, #5
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	4413      	add	r3, r2
 80029da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d809      	bhi.n	80029fc <PCD_WriteEmptyTxFifo+0xe0>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a1a      	ldr	r2, [r3, #32]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d203      	bcs.n	80029fc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1be      	bne.n	800297a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	699a      	ldr	r2, [r3, #24]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d811      	bhi.n	8002a2c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	2201      	movs	r2, #1
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	43db      	mvns	r3, r3
 8002a22:	6939      	ldr	r1, [r7, #16]
 8002a24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a28:	4013      	ands	r3, r2
 8002a2a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3720      	adds	r7, #32
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	333c      	adds	r3, #60	; 0x3c
 8002a50:	3304      	adds	r3, #4
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	015a      	lsls	r2, r3, #5
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d17b      	bne.n	8002b66 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f003 0308 	and.w	r3, r3, #8
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d015      	beq.n	8002aa4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	4a61      	ldr	r2, [pc, #388]	; (8002c00 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	f240 80b9 	bls.w	8002bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 80b3 	beq.w	8002bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	015a      	lsls	r2, r3, #5
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	4413      	add	r3, r2
 8002a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002aa0:	6093      	str	r3, [r2, #8]
 8002aa2:	e0a7      	b.n	8002bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	f003 0320 	and.w	r3, r3, #32
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d009      	beq.n	8002ac2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	015a      	lsls	r2, r3, #5
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aba:	461a      	mov	r2, r3
 8002abc:	2320      	movs	r3, #32
 8002abe:	6093      	str	r3, [r2, #8]
 8002ac0:	e098      	b.n	8002bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f040 8093 	bne.w	8002bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	4a4b      	ldr	r2, [pc, #300]	; (8002c00 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d90f      	bls.n	8002af6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00a      	beq.n	8002af6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	015a      	lsls	r2, r3, #5
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aec:	461a      	mov	r2, r3
 8002aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002af2:	6093      	str	r3, [r2, #8]
 8002af4:	e07e      	b.n	8002bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	4613      	mov	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	4413      	add	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	4413      	add	r3, r2
 8002b08:	3304      	adds	r3, #4
 8002b0a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	69da      	ldr	r2, [r3, #28]
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	0159      	lsls	r1, r3, #5
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	440b      	add	r3, r1
 8002b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b22:	1ad2      	subs	r2, r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d114      	bne.n	8002b58 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d109      	bne.n	8002b4a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6818      	ldr	r0, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b40:	461a      	mov	r2, r3
 8002b42:	2101      	movs	r1, #1
 8002b44:	f002 ff6c 	bl	8005a20 <USB_EP0_OutStart>
 8002b48:	e006      	b.n	8002b58 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	691a      	ldr	r2, [r3, #16]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	441a      	add	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f005 f9b8 	bl	8007ed4 <HAL_PCD_DataOutStageCallback>
 8002b64:	e046      	b.n	8002bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	4a26      	ldr	r2, [pc, #152]	; (8002c04 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d124      	bne.n	8002bb8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00a      	beq.n	8002b8e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	015a      	lsls	r2, r3, #5
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	4413      	add	r3, r2
 8002b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b84:	461a      	mov	r2, r3
 8002b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b8a:	6093      	str	r3, [r2, #8]
 8002b8c:	e032      	b.n	8002bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	f003 0320 	and.w	r3, r3, #32
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	2320      	movs	r3, #32
 8002ba8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	4619      	mov	r1, r3
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f005 f98f 	bl	8007ed4 <HAL_PCD_DataOutStageCallback>
 8002bb6:	e01d      	b.n	8002bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d114      	bne.n	8002be8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	440b      	add	r3, r1
 8002bcc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d108      	bne.n	8002be8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002be0:	461a      	mov	r2, r3
 8002be2:	2100      	movs	r1, #0
 8002be4:	f002 ff1c 	bl	8005a20 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	4619      	mov	r1, r3
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f005 f970 	bl	8007ed4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3720      	adds	r7, #32
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	4f54300a 	.word	0x4f54300a
 8002c04:	4f54310a 	.word	0x4f54310a

08002c08 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	333c      	adds	r3, #60	; 0x3c
 8002c20:	3304      	adds	r3, #4
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	015a      	lsls	r2, r3, #5
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	4a15      	ldr	r2, [pc, #84]	; (8002c90 <PCD_EP_OutSetupPacket_int+0x88>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d90e      	bls.n	8002c5c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d009      	beq.n	8002c5c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c54:	461a      	mov	r2, r3
 8002c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c5a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f005 f927 	bl	8007eb0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4a0a      	ldr	r2, [pc, #40]	; (8002c90 <PCD_EP_OutSetupPacket_int+0x88>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d90c      	bls.n	8002c84 <PCD_EP_OutSetupPacket_int+0x7c>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d108      	bne.n	8002c84 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6818      	ldr	r0, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	2101      	movs	r1, #1
 8002c80:	f002 fece 	bl	8005a20 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	4f54300a 	.word	0x4f54300a

08002c94 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	70fb      	strb	r3, [r7, #3]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002cac:	78fb      	ldrb	r3, [r7, #3]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d107      	bne.n	8002cc2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002cb2:	883b      	ldrh	r3, [r7, #0]
 8002cb4:	0419      	lsls	r1, r3, #16
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	629a      	str	r2, [r3, #40]	; 0x28
 8002cc0:	e028      	b.n	8002d14 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc8:	0c1b      	lsrs	r3, r3, #16
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	4413      	add	r3, r2
 8002cce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	73fb      	strb	r3, [r7, #15]
 8002cd4:	e00d      	b.n	8002cf2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
 8002cdc:	3340      	adds	r3, #64	; 0x40
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	0c1b      	lsrs	r3, r3, #16
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	4413      	add	r3, r2
 8002cea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	73fb      	strb	r3, [r7, #15]
 8002cf2:	7bfa      	ldrb	r2, [r7, #15]
 8002cf4:	78fb      	ldrb	r3, [r7, #3]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d3ec      	bcc.n	8002cd6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002cfc:	883b      	ldrh	r3, [r7, #0]
 8002cfe:	0418      	lsls	r0, r3, #16
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6819      	ldr	r1, [r3, #0]
 8002d04:	78fb      	ldrb	r3, [r7, #3]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	4302      	orrs	r2, r0
 8002d0c:	3340      	adds	r3, #64	; 0x40
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	887a      	ldrh	r2, [r7, #2]
 8002d34:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e267      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d075      	beq.n	8002e66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d7a:	4b88      	ldr	r3, [pc, #544]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d00c      	beq.n	8002da0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d86:	4b85      	ldr	r3, [pc, #532]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d112      	bne.n	8002db8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d92:	4b82      	ldr	r3, [pc, #520]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d9e:	d10b      	bne.n	8002db8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da0:	4b7e      	ldr	r3, [pc, #504]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d05b      	beq.n	8002e64 <HAL_RCC_OscConfig+0x108>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d157      	bne.n	8002e64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e242      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc0:	d106      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x74>
 8002dc2:	4b76      	ldr	r3, [pc, #472]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a75      	ldr	r2, [pc, #468]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	e01d      	b.n	8002e0c <HAL_RCC_OscConfig+0xb0>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dd8:	d10c      	bne.n	8002df4 <HAL_RCC_OscConfig+0x98>
 8002dda:	4b70      	ldr	r3, [pc, #448]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a6f      	ldr	r2, [pc, #444]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	4b6d      	ldr	r3, [pc, #436]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a6c      	ldr	r2, [pc, #432]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	e00b      	b.n	8002e0c <HAL_RCC_OscConfig+0xb0>
 8002df4:	4b69      	ldr	r3, [pc, #420]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a68      	ldr	r2, [pc, #416]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dfe:	6013      	str	r3, [r2, #0]
 8002e00:	4b66      	ldr	r3, [pc, #408]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a65      	ldr	r2, [pc, #404]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d013      	beq.n	8002e3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e14:	f7fd ffba 	bl	8000d8c <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e1c:	f7fd ffb6 	bl	8000d8c <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b64      	cmp	r3, #100	; 0x64
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e207      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2e:	4b5b      	ldr	r3, [pc, #364]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0f0      	beq.n	8002e1c <HAL_RCC_OscConfig+0xc0>
 8002e3a:	e014      	b.n	8002e66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7fd ffa6 	bl	8000d8c <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e44:	f7fd ffa2 	bl	8000d8c <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b64      	cmp	r3, #100	; 0x64
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e1f3      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e56:	4b51      	ldr	r3, [pc, #324]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0xe8>
 8002e62:	e000      	b.n	8002e66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d063      	beq.n	8002f3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e72:	4b4a      	ldr	r3, [pc, #296]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 030c 	and.w	r3, r3, #12
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00b      	beq.n	8002e96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e7e:	4b47      	ldr	r3, [pc, #284]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d11c      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e8a:	4b44      	ldr	r3, [pc, #272]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d116      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e96:	4b41      	ldr	r3, [pc, #260]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d005      	beq.n	8002eae <HAL_RCC_OscConfig+0x152>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d001      	beq.n	8002eae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e1c7      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eae:	4b3b      	ldr	r3, [pc, #236]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4937      	ldr	r1, [pc, #220]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec2:	e03a      	b.n	8002f3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d020      	beq.n	8002f0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ecc:	4b34      	ldr	r3, [pc, #208]	; (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed2:	f7fd ff5b 	bl	8000d8c <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eda:	f7fd ff57 	bl	8000d8c <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e1a8      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eec:	4b2b      	ldr	r3, [pc, #172]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f0      	beq.n	8002eda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef8:	4b28      	ldr	r3, [pc, #160]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4925      	ldr	r1, [pc, #148]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	600b      	str	r3, [r1, #0]
 8002f0c:	e015      	b.n	8002f3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f0e:	4b24      	ldr	r3, [pc, #144]	; (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f14:	f7fd ff3a 	bl	8000d8c <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f1c:	f7fd ff36 	bl	8000d8c <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e187      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2e:	4b1b      	ldr	r3, [pc, #108]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d036      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d016      	beq.n	8002f7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f4e:	4b15      	ldr	r3, [pc, #84]	; (8002fa4 <HAL_RCC_OscConfig+0x248>)
 8002f50:	2201      	movs	r2, #1
 8002f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f54:	f7fd ff1a 	bl	8000d8c <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f5c:	f7fd ff16 	bl	8000d8c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e167      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f6e:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0f0      	beq.n	8002f5c <HAL_RCC_OscConfig+0x200>
 8002f7a:	e01b      	b.n	8002fb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f7c:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <HAL_RCC_OscConfig+0x248>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f82:	f7fd ff03 	bl	8000d8c <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f88:	e00e      	b.n	8002fa8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f8a:	f7fd feff 	bl	8000d8c <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d907      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e150      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	42470000 	.word	0x42470000
 8002fa4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa8:	4b88      	ldr	r3, [pc, #544]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8002faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1ea      	bne.n	8002f8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 8097 	beq.w	80030f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fc6:	4b81      	ldr	r3, [pc, #516]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10f      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	4b7d      	ldr	r3, [pc, #500]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	4a7c      	ldr	r2, [pc, #496]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8002fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fe2:	4b7a      	ldr	r3, [pc, #488]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fea:	60bb      	str	r3, [r7, #8]
 8002fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff2:	4b77      	ldr	r3, [pc, #476]	; (80031d0 <HAL_RCC_OscConfig+0x474>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d118      	bne.n	8003030 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ffe:	4b74      	ldr	r3, [pc, #464]	; (80031d0 <HAL_RCC_OscConfig+0x474>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a73      	ldr	r2, [pc, #460]	; (80031d0 <HAL_RCC_OscConfig+0x474>)
 8003004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800300a:	f7fd febf 	bl	8000d8c <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003012:	f7fd febb 	bl	8000d8c <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e10c      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003024:	4b6a      	ldr	r3, [pc, #424]	; (80031d0 <HAL_RCC_OscConfig+0x474>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0f0      	beq.n	8003012 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d106      	bne.n	8003046 <HAL_RCC_OscConfig+0x2ea>
 8003038:	4b64      	ldr	r3, [pc, #400]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 800303a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303c:	4a63      	ldr	r2, [pc, #396]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 800303e:	f043 0301 	orr.w	r3, r3, #1
 8003042:	6713      	str	r3, [r2, #112]	; 0x70
 8003044:	e01c      	b.n	8003080 <HAL_RCC_OscConfig+0x324>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	2b05      	cmp	r3, #5
 800304c:	d10c      	bne.n	8003068 <HAL_RCC_OscConfig+0x30c>
 800304e:	4b5f      	ldr	r3, [pc, #380]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8003050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003052:	4a5e      	ldr	r2, [pc, #376]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8003054:	f043 0304 	orr.w	r3, r3, #4
 8003058:	6713      	str	r3, [r2, #112]	; 0x70
 800305a:	4b5c      	ldr	r3, [pc, #368]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 800305c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305e:	4a5b      	ldr	r2, [pc, #364]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8003060:	f043 0301 	orr.w	r3, r3, #1
 8003064:	6713      	str	r3, [r2, #112]	; 0x70
 8003066:	e00b      	b.n	8003080 <HAL_RCC_OscConfig+0x324>
 8003068:	4b58      	ldr	r3, [pc, #352]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 800306a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306c:	4a57      	ldr	r2, [pc, #348]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 800306e:	f023 0301 	bic.w	r3, r3, #1
 8003072:	6713      	str	r3, [r2, #112]	; 0x70
 8003074:	4b55      	ldr	r3, [pc, #340]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8003076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003078:	4a54      	ldr	r2, [pc, #336]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 800307a:	f023 0304 	bic.w	r3, r3, #4
 800307e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d015      	beq.n	80030b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003088:	f7fd fe80 	bl	8000d8c <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800308e:	e00a      	b.n	80030a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003090:	f7fd fe7c 	bl	8000d8c <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f241 3288 	movw	r2, #5000	; 0x1388
 800309e:	4293      	cmp	r3, r2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e0cb      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a6:	4b49      	ldr	r3, [pc, #292]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 80030a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0ee      	beq.n	8003090 <HAL_RCC_OscConfig+0x334>
 80030b2:	e014      	b.n	80030de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b4:	f7fd fe6a 	bl	8000d8c <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ba:	e00a      	b.n	80030d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030bc:	f7fd fe66 	bl	8000d8c <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e0b5      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d2:	4b3e      	ldr	r3, [pc, #248]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 80030d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1ee      	bne.n	80030bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030de:	7dfb      	ldrb	r3, [r7, #23]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d105      	bne.n	80030f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e4:	4b39      	ldr	r3, [pc, #228]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	4a38      	ldr	r2, [pc, #224]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 80030ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 80a1 	beq.w	800323c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030fa:	4b34      	ldr	r3, [pc, #208]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 030c 	and.w	r3, r3, #12
 8003102:	2b08      	cmp	r3, #8
 8003104:	d05c      	beq.n	80031c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d141      	bne.n	8003192 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800310e:	4b31      	ldr	r3, [pc, #196]	; (80031d4 <HAL_RCC_OscConfig+0x478>)
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003114:	f7fd fe3a 	bl	8000d8c <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800311c:	f7fd fe36 	bl	8000d8c <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e087      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312e:	4b27      	ldr	r3, [pc, #156]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f0      	bne.n	800311c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69da      	ldr	r2, [r3, #28]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	019b      	lsls	r3, r3, #6
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003150:	085b      	lsrs	r3, r3, #1
 8003152:	3b01      	subs	r3, #1
 8003154:	041b      	lsls	r3, r3, #16
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315c:	061b      	lsls	r3, r3, #24
 800315e:	491b      	ldr	r1, [pc, #108]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8003160:	4313      	orrs	r3, r2
 8003162:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003164:	4b1b      	ldr	r3, [pc, #108]	; (80031d4 <HAL_RCC_OscConfig+0x478>)
 8003166:	2201      	movs	r2, #1
 8003168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316a:	f7fd fe0f 	bl	8000d8c <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003172:	f7fd fe0b 	bl	8000d8c <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e05c      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003184:	4b11      	ldr	r3, [pc, #68]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0f0      	beq.n	8003172 <HAL_RCC_OscConfig+0x416>
 8003190:	e054      	b.n	800323c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003192:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <HAL_RCC_OscConfig+0x478>)
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003198:	f7fd fdf8 	bl	8000d8c <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031a0:	f7fd fdf4 	bl	8000d8c <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e045      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b2:	4b06      	ldr	r3, [pc, #24]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f0      	bne.n	80031a0 <HAL_RCC_OscConfig+0x444>
 80031be:	e03d      	b.n	800323c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d107      	bne.n	80031d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e038      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
 80031cc:	40023800 	.word	0x40023800
 80031d0:	40007000 	.word	0x40007000
 80031d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031d8:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <HAL_RCC_OscConfig+0x4ec>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d028      	beq.n	8003238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d121      	bne.n	8003238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fe:	429a      	cmp	r2, r3
 8003200:	d11a      	bne.n	8003238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003208:	4013      	ands	r3, r2
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800320e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003210:	4293      	cmp	r3, r2
 8003212:	d111      	bne.n	8003238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321e:	085b      	lsrs	r3, r3, #1
 8003220:	3b01      	subs	r3, #1
 8003222:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003224:	429a      	cmp	r2, r3
 8003226:	d107      	bne.n	8003238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003234:	429a      	cmp	r2, r3
 8003236:	d001      	beq.n	800323c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e000      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3718      	adds	r7, #24
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40023800 	.word	0x40023800

0800324c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0cc      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003260:	4b68      	ldr	r3, [pc, #416]	; (8003404 <HAL_RCC_ClockConfig+0x1b8>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d90c      	bls.n	8003288 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326e:	4b65      	ldr	r3, [pc, #404]	; (8003404 <HAL_RCC_ClockConfig+0x1b8>)
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003276:	4b63      	ldr	r3, [pc, #396]	; (8003404 <HAL_RCC_ClockConfig+0x1b8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d001      	beq.n	8003288 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0b8      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d020      	beq.n	80032d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	d005      	beq.n	80032ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a0:	4b59      	ldr	r3, [pc, #356]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	4a58      	ldr	r2, [pc, #352]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0308 	and.w	r3, r3, #8
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032b8:	4b53      	ldr	r3, [pc, #332]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	4a52      	ldr	r2, [pc, #328]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c4:	4b50      	ldr	r3, [pc, #320]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	494d      	ldr	r1, [pc, #308]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d044      	beq.n	800336c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d107      	bne.n	80032fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ea:	4b47      	ldr	r3, [pc, #284]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d119      	bne.n	800332a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e07f      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d003      	beq.n	800330a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003306:	2b03      	cmp	r3, #3
 8003308:	d107      	bne.n	800331a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800330a:	4b3f      	ldr	r3, [pc, #252]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d109      	bne.n	800332a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e06f      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331a:	4b3b      	ldr	r3, [pc, #236]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e067      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800332a:	4b37      	ldr	r3, [pc, #220]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f023 0203 	bic.w	r2, r3, #3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	4934      	ldr	r1, [pc, #208]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 8003338:	4313      	orrs	r3, r2
 800333a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800333c:	f7fd fd26 	bl	8000d8c <HAL_GetTick>
 8003340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003342:	e00a      	b.n	800335a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003344:	f7fd fd22 	bl	8000d8c <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003352:	4293      	cmp	r3, r2
 8003354:	d901      	bls.n	800335a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e04f      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335a:	4b2b      	ldr	r3, [pc, #172]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 020c 	and.w	r2, r3, #12
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	429a      	cmp	r2, r3
 800336a:	d1eb      	bne.n	8003344 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800336c:	4b25      	ldr	r3, [pc, #148]	; (8003404 <HAL_RCC_ClockConfig+0x1b8>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d20c      	bcs.n	8003394 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337a:	4b22      	ldr	r3, [pc, #136]	; (8003404 <HAL_RCC_ClockConfig+0x1b8>)
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003382:	4b20      	ldr	r3, [pc, #128]	; (8003404 <HAL_RCC_ClockConfig+0x1b8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	429a      	cmp	r2, r3
 800338e:	d001      	beq.n	8003394 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e032      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	d008      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a0:	4b19      	ldr	r3, [pc, #100]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	4916      	ldr	r1, [pc, #88]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d009      	beq.n	80033d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033be:	4b12      	ldr	r3, [pc, #72]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	490e      	ldr	r1, [pc, #56]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033d2:	f000 f821 	bl	8003418 <HAL_RCC_GetSysClockFreq>
 80033d6:	4602      	mov	r2, r0
 80033d8:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	091b      	lsrs	r3, r3, #4
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	490a      	ldr	r1, [pc, #40]	; (800340c <HAL_RCC_ClockConfig+0x1c0>)
 80033e4:	5ccb      	ldrb	r3, [r1, r3]
 80033e6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ea:	4a09      	ldr	r2, [pc, #36]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 80033ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033ee:	4b09      	ldr	r3, [pc, #36]	; (8003414 <HAL_RCC_ClockConfig+0x1c8>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fd fc86 	bl	8000d04 <HAL_InitTick>

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	40023c00 	.word	0x40023c00
 8003408:	40023800 	.word	0x40023800
 800340c:	080084d4 	.word	0x080084d4
 8003410:	20000000 	.word	0x20000000
 8003414:	20000004 	.word	0x20000004

08003418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800341c:	b090      	sub	sp, #64	; 0x40
 800341e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	637b      	str	r3, [r7, #52]	; 0x34
 8003424:	2300      	movs	r3, #0
 8003426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003428:	2300      	movs	r3, #0
 800342a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003430:	4b59      	ldr	r3, [pc, #356]	; (8003598 <HAL_RCC_GetSysClockFreq+0x180>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 030c 	and.w	r3, r3, #12
 8003438:	2b08      	cmp	r3, #8
 800343a:	d00d      	beq.n	8003458 <HAL_RCC_GetSysClockFreq+0x40>
 800343c:	2b08      	cmp	r3, #8
 800343e:	f200 80a1 	bhi.w	8003584 <HAL_RCC_GetSysClockFreq+0x16c>
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <HAL_RCC_GetSysClockFreq+0x34>
 8003446:	2b04      	cmp	r3, #4
 8003448:	d003      	beq.n	8003452 <HAL_RCC_GetSysClockFreq+0x3a>
 800344a:	e09b      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800344c:	4b53      	ldr	r3, [pc, #332]	; (800359c <HAL_RCC_GetSysClockFreq+0x184>)
 800344e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003450:	e09b      	b.n	800358a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003452:	4b53      	ldr	r3, [pc, #332]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003454:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003456:	e098      	b.n	800358a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003458:	4b4f      	ldr	r3, [pc, #316]	; (8003598 <HAL_RCC_GetSysClockFreq+0x180>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003460:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003462:	4b4d      	ldr	r3, [pc, #308]	; (8003598 <HAL_RCC_GetSysClockFreq+0x180>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d028      	beq.n	80034c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800346e:	4b4a      	ldr	r3, [pc, #296]	; (8003598 <HAL_RCC_GetSysClockFreq+0x180>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	099b      	lsrs	r3, r3, #6
 8003474:	2200      	movs	r2, #0
 8003476:	623b      	str	r3, [r7, #32]
 8003478:	627a      	str	r2, [r7, #36]	; 0x24
 800347a:	6a3b      	ldr	r3, [r7, #32]
 800347c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003480:	2100      	movs	r1, #0
 8003482:	4b47      	ldr	r3, [pc, #284]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003484:	fb03 f201 	mul.w	r2, r3, r1
 8003488:	2300      	movs	r3, #0
 800348a:	fb00 f303 	mul.w	r3, r0, r3
 800348e:	4413      	add	r3, r2
 8003490:	4a43      	ldr	r2, [pc, #268]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003492:	fba0 1202 	umull	r1, r2, r0, r2
 8003496:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003498:	460a      	mov	r2, r1
 800349a:	62ba      	str	r2, [r7, #40]	; 0x28
 800349c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800349e:	4413      	add	r3, r2
 80034a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034a4:	2200      	movs	r2, #0
 80034a6:	61bb      	str	r3, [r7, #24]
 80034a8:	61fa      	str	r2, [r7, #28]
 80034aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80034b2:	f7fc fe8f 	bl	80001d4 <__aeabi_uldivmod>
 80034b6:	4602      	mov	r2, r0
 80034b8:	460b      	mov	r3, r1
 80034ba:	4613      	mov	r3, r2
 80034bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034be:	e053      	b.n	8003568 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034c0:	4b35      	ldr	r3, [pc, #212]	; (8003598 <HAL_RCC_GetSysClockFreq+0x180>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	099b      	lsrs	r3, r3, #6
 80034c6:	2200      	movs	r2, #0
 80034c8:	613b      	str	r3, [r7, #16]
 80034ca:	617a      	str	r2, [r7, #20]
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80034d2:	f04f 0b00 	mov.w	fp, #0
 80034d6:	4652      	mov	r2, sl
 80034d8:	465b      	mov	r3, fp
 80034da:	f04f 0000 	mov.w	r0, #0
 80034de:	f04f 0100 	mov.w	r1, #0
 80034e2:	0159      	lsls	r1, r3, #5
 80034e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034e8:	0150      	lsls	r0, r2, #5
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	ebb2 080a 	subs.w	r8, r2, sl
 80034f2:	eb63 090b 	sbc.w	r9, r3, fp
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	f04f 0300 	mov.w	r3, #0
 80034fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003502:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003506:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800350a:	ebb2 0408 	subs.w	r4, r2, r8
 800350e:	eb63 0509 	sbc.w	r5, r3, r9
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	00eb      	lsls	r3, r5, #3
 800351c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003520:	00e2      	lsls	r2, r4, #3
 8003522:	4614      	mov	r4, r2
 8003524:	461d      	mov	r5, r3
 8003526:	eb14 030a 	adds.w	r3, r4, sl
 800352a:	603b      	str	r3, [r7, #0]
 800352c:	eb45 030b 	adc.w	r3, r5, fp
 8003530:	607b      	str	r3, [r7, #4]
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800353e:	4629      	mov	r1, r5
 8003540:	028b      	lsls	r3, r1, #10
 8003542:	4621      	mov	r1, r4
 8003544:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003548:	4621      	mov	r1, r4
 800354a:	028a      	lsls	r2, r1, #10
 800354c:	4610      	mov	r0, r2
 800354e:	4619      	mov	r1, r3
 8003550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003552:	2200      	movs	r2, #0
 8003554:	60bb      	str	r3, [r7, #8]
 8003556:	60fa      	str	r2, [r7, #12]
 8003558:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800355c:	f7fc fe3a 	bl	80001d4 <__aeabi_uldivmod>
 8003560:	4602      	mov	r2, r0
 8003562:	460b      	mov	r3, r1
 8003564:	4613      	mov	r3, r2
 8003566:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003568:	4b0b      	ldr	r3, [pc, #44]	; (8003598 <HAL_RCC_GetSysClockFreq+0x180>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	0c1b      	lsrs	r3, r3, #16
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	3301      	adds	r3, #1
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003578:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800357a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003580:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003582:	e002      	b.n	800358a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003584:	4b05      	ldr	r3, [pc, #20]	; (800359c <HAL_RCC_GetSysClockFreq+0x184>)
 8003586:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003588:	bf00      	nop
    }
  }
  return sysclockfreq;
 800358a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800358c:	4618      	mov	r0, r3
 800358e:	3740      	adds	r7, #64	; 0x40
 8003590:	46bd      	mov	sp, r7
 8003592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003596:	bf00      	nop
 8003598:	40023800 	.word	0x40023800
 800359c:	00f42400 	.word	0x00f42400
 80035a0:	017d7840 	.word	0x017d7840

080035a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035a8:	4b03      	ldr	r3, [pc, #12]	; (80035b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80035aa:	681b      	ldr	r3, [r3, #0]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	20000000 	.word	0x20000000

080035bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035c0:	f7ff fff0 	bl	80035a4 <HAL_RCC_GetHCLKFreq>
 80035c4:	4602      	mov	r2, r0
 80035c6:	4b05      	ldr	r3, [pc, #20]	; (80035dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	0a9b      	lsrs	r3, r3, #10
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	4903      	ldr	r1, [pc, #12]	; (80035e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035d2:	5ccb      	ldrb	r3, [r1, r3]
 80035d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d8:	4618      	mov	r0, r3
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40023800 	.word	0x40023800
 80035e0:	080084e4 	.word	0x080084e4

080035e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035e8:	f7ff ffdc 	bl	80035a4 <HAL_RCC_GetHCLKFreq>
 80035ec:	4602      	mov	r2, r0
 80035ee:	4b05      	ldr	r3, [pc, #20]	; (8003604 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	0b5b      	lsrs	r3, r3, #13
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	4903      	ldr	r1, [pc, #12]	; (8003608 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035fa:	5ccb      	ldrb	r3, [r1, r3]
 80035fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003600:	4618      	mov	r0, r3
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40023800 	.word	0x40023800
 8003608:	080084e4 	.word	0x080084e4

0800360c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e041      	b.n	80036a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d106      	bne.n	8003638 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7fd f97e 	bl	8000934 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3304      	adds	r3, #4
 8003648:	4619      	mov	r1, r3
 800364a:	4610      	mov	r0, r2
 800364c:	f000 f8f0 	bl	8003830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e0ae      	b.n	8003828 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b0c      	cmp	r3, #12
 80036d6:	f200 809f 	bhi.w	8003818 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80036da:	a201      	add	r2, pc, #4	; (adr r2, 80036e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e0:	08003715 	.word	0x08003715
 80036e4:	08003819 	.word	0x08003819
 80036e8:	08003819 	.word	0x08003819
 80036ec:	08003819 	.word	0x08003819
 80036f0:	08003755 	.word	0x08003755
 80036f4:	08003819 	.word	0x08003819
 80036f8:	08003819 	.word	0x08003819
 80036fc:	08003819 	.word	0x08003819
 8003700:	08003797 	.word	0x08003797
 8003704:	08003819 	.word	0x08003819
 8003708:	08003819 	.word	0x08003819
 800370c:	08003819 	.word	0x08003819
 8003710:	080037d7 	.word	0x080037d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68b9      	ldr	r1, [r7, #8]
 800371a:	4618      	mov	r0, r3
 800371c:	f000 f908 	bl	8003930 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699a      	ldr	r2, [r3, #24]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0208 	orr.w	r2, r2, #8
 800372e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699a      	ldr	r2, [r3, #24]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0204 	bic.w	r2, r2, #4
 800373e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6999      	ldr	r1, [r3, #24]
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	691a      	ldr	r2, [r3, #16]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	619a      	str	r2, [r3, #24]
      break;
 8003752:	e064      	b.n	800381e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68b9      	ldr	r1, [r7, #8]
 800375a:	4618      	mov	r0, r3
 800375c:	f000 f94e 	bl	80039fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699a      	ldr	r2, [r3, #24]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800376e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699a      	ldr	r2, [r3, #24]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800377e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6999      	ldr	r1, [r3, #24]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	021a      	lsls	r2, r3, #8
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	619a      	str	r2, [r3, #24]
      break;
 8003794:	e043      	b.n	800381e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68b9      	ldr	r1, [r7, #8]
 800379c:	4618      	mov	r0, r3
 800379e:	f000 f999 	bl	8003ad4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	69da      	ldr	r2, [r3, #28]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f042 0208 	orr.w	r2, r2, #8
 80037b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	69da      	ldr	r2, [r3, #28]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0204 	bic.w	r2, r2, #4
 80037c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69d9      	ldr	r1, [r3, #28]
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	691a      	ldr	r2, [r3, #16]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	61da      	str	r2, [r3, #28]
      break;
 80037d4:	e023      	b.n	800381e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68b9      	ldr	r1, [r7, #8]
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 f9e3 	bl	8003ba8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	69da      	ldr	r2, [r3, #28]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	69da      	ldr	r2, [r3, #28]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003800:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69d9      	ldr	r1, [r3, #28]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	021a      	lsls	r2, r3, #8
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	61da      	str	r2, [r3, #28]
      break;
 8003816:	e002      	b.n	800381e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	75fb      	strb	r3, [r7, #23]
      break;
 800381c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003826:	7dfb      	ldrb	r3, [r7, #23]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3718      	adds	r7, #24
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a34      	ldr	r2, [pc, #208]	; (8003914 <TIM_Base_SetConfig+0xe4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d00f      	beq.n	8003868 <TIM_Base_SetConfig+0x38>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800384e:	d00b      	beq.n	8003868 <TIM_Base_SetConfig+0x38>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a31      	ldr	r2, [pc, #196]	; (8003918 <TIM_Base_SetConfig+0xe8>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d007      	beq.n	8003868 <TIM_Base_SetConfig+0x38>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a30      	ldr	r2, [pc, #192]	; (800391c <TIM_Base_SetConfig+0xec>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d003      	beq.n	8003868 <TIM_Base_SetConfig+0x38>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a2f      	ldr	r2, [pc, #188]	; (8003920 <TIM_Base_SetConfig+0xf0>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d108      	bne.n	800387a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	4313      	orrs	r3, r2
 8003878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a25      	ldr	r2, [pc, #148]	; (8003914 <TIM_Base_SetConfig+0xe4>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d01b      	beq.n	80038ba <TIM_Base_SetConfig+0x8a>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003888:	d017      	beq.n	80038ba <TIM_Base_SetConfig+0x8a>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a22      	ldr	r2, [pc, #136]	; (8003918 <TIM_Base_SetConfig+0xe8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d013      	beq.n	80038ba <TIM_Base_SetConfig+0x8a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a21      	ldr	r2, [pc, #132]	; (800391c <TIM_Base_SetConfig+0xec>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d00f      	beq.n	80038ba <TIM_Base_SetConfig+0x8a>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a20      	ldr	r2, [pc, #128]	; (8003920 <TIM_Base_SetConfig+0xf0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d00b      	beq.n	80038ba <TIM_Base_SetConfig+0x8a>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a1f      	ldr	r2, [pc, #124]	; (8003924 <TIM_Base_SetConfig+0xf4>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d007      	beq.n	80038ba <TIM_Base_SetConfig+0x8a>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a1e      	ldr	r2, [pc, #120]	; (8003928 <TIM_Base_SetConfig+0xf8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d003      	beq.n	80038ba <TIM_Base_SetConfig+0x8a>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a1d      	ldr	r2, [pc, #116]	; (800392c <TIM_Base_SetConfig+0xfc>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d108      	bne.n	80038cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a08      	ldr	r2, [pc, #32]	; (8003914 <TIM_Base_SetConfig+0xe4>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d103      	bne.n	8003900 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	615a      	str	r2, [r3, #20]
}
 8003906:	bf00      	nop
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40010000 	.word	0x40010000
 8003918:	40000400 	.word	0x40000400
 800391c:	40000800 	.word	0x40000800
 8003920:	40000c00 	.word	0x40000c00
 8003924:	40014000 	.word	0x40014000
 8003928:	40014400 	.word	0x40014400
 800392c:	40014800 	.word	0x40014800

08003930 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	f023 0201 	bic.w	r2, r3, #1
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800395e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f023 0303 	bic.w	r3, r3, #3
 8003966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	4313      	orrs	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f023 0302 	bic.w	r3, r3, #2
 8003978:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	4313      	orrs	r3, r2
 8003982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a1c      	ldr	r2, [pc, #112]	; (80039f8 <TIM_OC1_SetConfig+0xc8>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d10c      	bne.n	80039a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f023 0308 	bic.w	r3, r3, #8
 8003992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	4313      	orrs	r3, r2
 800399c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f023 0304 	bic.w	r3, r3, #4
 80039a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a13      	ldr	r2, [pc, #76]	; (80039f8 <TIM_OC1_SetConfig+0xc8>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d111      	bne.n	80039d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	621a      	str	r2, [r3, #32]
}
 80039ec:	bf00      	nop
 80039ee:	371c      	adds	r7, #28
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	40010000 	.word	0x40010000

080039fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	f023 0210 	bic.w	r2, r3, #16
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	021b      	lsls	r3, r3, #8
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	f023 0320 	bic.w	r3, r3, #32
 8003a46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a1e      	ldr	r2, [pc, #120]	; (8003ad0 <TIM_OC2_SetConfig+0xd4>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d10d      	bne.n	8003a78 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a15      	ldr	r2, [pc, #84]	; (8003ad0 <TIM_OC2_SetConfig+0xd4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d113      	bne.n	8003aa8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	621a      	str	r2, [r3, #32]
}
 8003ac2:	bf00      	nop
 8003ac4:	371c      	adds	r7, #28
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40010000 	.word	0x40010000

08003ad4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f023 0303 	bic.w	r3, r3, #3
 8003b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	021b      	lsls	r3, r3, #8
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a1d      	ldr	r2, [pc, #116]	; (8003ba4 <TIM_OC3_SetConfig+0xd0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d10d      	bne.n	8003b4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	021b      	lsls	r3, r3, #8
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a14      	ldr	r2, [pc, #80]	; (8003ba4 <TIM_OC3_SetConfig+0xd0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d113      	bne.n	8003b7e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	621a      	str	r2, [r3, #32]
}
 8003b98:	bf00      	nop
 8003b9a:	371c      	adds	r7, #28
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	40010000 	.word	0x40010000

08003ba8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	021b      	lsls	r3, r3, #8
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	031b      	lsls	r3, r3, #12
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a10      	ldr	r2, [pc, #64]	; (8003c44 <TIM_OC4_SetConfig+0x9c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d109      	bne.n	8003c1c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	019b      	lsls	r3, r3, #6
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	621a      	str	r2, [r3, #32]
}
 8003c36:	bf00      	nop
 8003c38:	371c      	adds	r7, #28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	40010000 	.word	0x40010000

08003c48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d101      	bne.n	8003c60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	e050      	b.n	8003d02 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a1c      	ldr	r2, [pc, #112]	; (8003d10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d018      	beq.n	8003cd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cac:	d013      	beq.n	8003cd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a18      	ldr	r2, [pc, #96]	; (8003d14 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d00e      	beq.n	8003cd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a16      	ldr	r2, [pc, #88]	; (8003d18 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d009      	beq.n	8003cd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a15      	ldr	r2, [pc, #84]	; (8003d1c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d004      	beq.n	8003cd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a13      	ldr	r2, [pc, #76]	; (8003d20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d10c      	bne.n	8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	40010000 	.word	0x40010000
 8003d14:	40000400 	.word	0x40000400
 8003d18:	40000800 	.word	0x40000800
 8003d1c:	40000c00 	.word	0x40000c00
 8003d20:	40014000 	.word	0x40014000

08003d24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e03f      	b.n	8003db6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fc fe6e 	bl	8000a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2224      	movs	r2, #36	; 0x24
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f829 	bl	8003dc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	691a      	ldr	r2, [r3, #16]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695a      	ldr	r2, [r3, #20]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68da      	ldr	r2, [r3, #12]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dc4:	b0c0      	sub	sp, #256	; 0x100
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ddc:	68d9      	ldr	r1, [r3, #12]
 8003dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	ea40 0301 	orr.w	r3, r0, r1
 8003de8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e18:	f021 010c 	bic.w	r1, r1, #12
 8003e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e26:	430b      	orrs	r3, r1
 8003e28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e3a:	6999      	ldr	r1, [r3, #24]
 8003e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	ea40 0301 	orr.w	r3, r0, r1
 8003e46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	4b8f      	ldr	r3, [pc, #572]	; (800408c <UART_SetConfig+0x2cc>)
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d005      	beq.n	8003e60 <UART_SetConfig+0xa0>
 8003e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	4b8d      	ldr	r3, [pc, #564]	; (8004090 <UART_SetConfig+0x2d0>)
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d104      	bne.n	8003e6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e60:	f7ff fbc0 	bl	80035e4 <HAL_RCC_GetPCLK2Freq>
 8003e64:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003e68:	e003      	b.n	8003e72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e6a:	f7ff fba7 	bl	80035bc <HAL_RCC_GetPCLK1Freq>
 8003e6e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e7c:	f040 810c 	bne.w	8004098 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e84:	2200      	movs	r2, #0
 8003e86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e8a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e92:	4622      	mov	r2, r4
 8003e94:	462b      	mov	r3, r5
 8003e96:	1891      	adds	r1, r2, r2
 8003e98:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e9a:	415b      	adcs	r3, r3
 8003e9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ea2:	4621      	mov	r1, r4
 8003ea4:	eb12 0801 	adds.w	r8, r2, r1
 8003ea8:	4629      	mov	r1, r5
 8003eaa:	eb43 0901 	adc.w	r9, r3, r1
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	f04f 0300 	mov.w	r3, #0
 8003eb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003eba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ebe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ec2:	4690      	mov	r8, r2
 8003ec4:	4699      	mov	r9, r3
 8003ec6:	4623      	mov	r3, r4
 8003ec8:	eb18 0303 	adds.w	r3, r8, r3
 8003ecc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ed0:	462b      	mov	r3, r5
 8003ed2:	eb49 0303 	adc.w	r3, r9, r3
 8003ed6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ee6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003eea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003eee:	460b      	mov	r3, r1
 8003ef0:	18db      	adds	r3, r3, r3
 8003ef2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	eb42 0303 	adc.w	r3, r2, r3
 8003efa:	657b      	str	r3, [r7, #84]	; 0x54
 8003efc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003f00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003f04:	f7fc f966 	bl	80001d4 <__aeabi_uldivmod>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4b61      	ldr	r3, [pc, #388]	; (8004094 <UART_SetConfig+0x2d4>)
 8003f0e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	011c      	lsls	r4, r3, #4
 8003f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003f24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003f28:	4642      	mov	r2, r8
 8003f2a:	464b      	mov	r3, r9
 8003f2c:	1891      	adds	r1, r2, r2
 8003f2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003f30:	415b      	adcs	r3, r3
 8003f32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f38:	4641      	mov	r1, r8
 8003f3a:	eb12 0a01 	adds.w	sl, r2, r1
 8003f3e:	4649      	mov	r1, r9
 8003f40:	eb43 0b01 	adc.w	fp, r3, r1
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f58:	4692      	mov	sl, r2
 8003f5a:	469b      	mov	fp, r3
 8003f5c:	4643      	mov	r3, r8
 8003f5e:	eb1a 0303 	adds.w	r3, sl, r3
 8003f62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f66:	464b      	mov	r3, r9
 8003f68:	eb4b 0303 	adc.w	r3, fp, r3
 8003f6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f84:	460b      	mov	r3, r1
 8003f86:	18db      	adds	r3, r3, r3
 8003f88:	643b      	str	r3, [r7, #64]	; 0x40
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	eb42 0303 	adc.w	r3, r2, r3
 8003f90:	647b      	str	r3, [r7, #68]	; 0x44
 8003f92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f9a:	f7fc f91b 	bl	80001d4 <__aeabi_uldivmod>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4611      	mov	r1, r2
 8003fa4:	4b3b      	ldr	r3, [pc, #236]	; (8004094 <UART_SetConfig+0x2d4>)
 8003fa6:	fba3 2301 	umull	r2, r3, r3, r1
 8003faa:	095b      	lsrs	r3, r3, #5
 8003fac:	2264      	movs	r2, #100	; 0x64
 8003fae:	fb02 f303 	mul.w	r3, r2, r3
 8003fb2:	1acb      	subs	r3, r1, r3
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003fba:	4b36      	ldr	r3, [pc, #216]	; (8004094 <UART_SetConfig+0x2d4>)
 8003fbc:	fba3 2302 	umull	r2, r3, r3, r2
 8003fc0:	095b      	lsrs	r3, r3, #5
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fc8:	441c      	add	r4, r3
 8003fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fd4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003fd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003fdc:	4642      	mov	r2, r8
 8003fde:	464b      	mov	r3, r9
 8003fe0:	1891      	adds	r1, r2, r2
 8003fe2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003fe4:	415b      	adcs	r3, r3
 8003fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fe8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003fec:	4641      	mov	r1, r8
 8003fee:	1851      	adds	r1, r2, r1
 8003ff0:	6339      	str	r1, [r7, #48]	; 0x30
 8003ff2:	4649      	mov	r1, r9
 8003ff4:	414b      	adcs	r3, r1
 8003ff6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004004:	4659      	mov	r1, fp
 8004006:	00cb      	lsls	r3, r1, #3
 8004008:	4651      	mov	r1, sl
 800400a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800400e:	4651      	mov	r1, sl
 8004010:	00ca      	lsls	r2, r1, #3
 8004012:	4610      	mov	r0, r2
 8004014:	4619      	mov	r1, r3
 8004016:	4603      	mov	r3, r0
 8004018:	4642      	mov	r2, r8
 800401a:	189b      	adds	r3, r3, r2
 800401c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004020:	464b      	mov	r3, r9
 8004022:	460a      	mov	r2, r1
 8004024:	eb42 0303 	adc.w	r3, r2, r3
 8004028:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800402c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004038:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800403c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004040:	460b      	mov	r3, r1
 8004042:	18db      	adds	r3, r3, r3
 8004044:	62bb      	str	r3, [r7, #40]	; 0x28
 8004046:	4613      	mov	r3, r2
 8004048:	eb42 0303 	adc.w	r3, r2, r3
 800404c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800404e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004052:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004056:	f7fc f8bd 	bl	80001d4 <__aeabi_uldivmod>
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	4b0d      	ldr	r3, [pc, #52]	; (8004094 <UART_SetConfig+0x2d4>)
 8004060:	fba3 1302 	umull	r1, r3, r3, r2
 8004064:	095b      	lsrs	r3, r3, #5
 8004066:	2164      	movs	r1, #100	; 0x64
 8004068:	fb01 f303 	mul.w	r3, r1, r3
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	3332      	adds	r3, #50	; 0x32
 8004072:	4a08      	ldr	r2, [pc, #32]	; (8004094 <UART_SetConfig+0x2d4>)
 8004074:	fba2 2303 	umull	r2, r3, r2, r3
 8004078:	095b      	lsrs	r3, r3, #5
 800407a:	f003 0207 	and.w	r2, r3, #7
 800407e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4422      	add	r2, r4
 8004086:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004088:	e106      	b.n	8004298 <UART_SetConfig+0x4d8>
 800408a:	bf00      	nop
 800408c:	40011000 	.word	0x40011000
 8004090:	40011400 	.word	0x40011400
 8004094:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004098:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800409c:	2200      	movs	r2, #0
 800409e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80040a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80040a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80040aa:	4642      	mov	r2, r8
 80040ac:	464b      	mov	r3, r9
 80040ae:	1891      	adds	r1, r2, r2
 80040b0:	6239      	str	r1, [r7, #32]
 80040b2:	415b      	adcs	r3, r3
 80040b4:	627b      	str	r3, [r7, #36]	; 0x24
 80040b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040ba:	4641      	mov	r1, r8
 80040bc:	1854      	adds	r4, r2, r1
 80040be:	4649      	mov	r1, r9
 80040c0:	eb43 0501 	adc.w	r5, r3, r1
 80040c4:	f04f 0200 	mov.w	r2, #0
 80040c8:	f04f 0300 	mov.w	r3, #0
 80040cc:	00eb      	lsls	r3, r5, #3
 80040ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040d2:	00e2      	lsls	r2, r4, #3
 80040d4:	4614      	mov	r4, r2
 80040d6:	461d      	mov	r5, r3
 80040d8:	4643      	mov	r3, r8
 80040da:	18e3      	adds	r3, r4, r3
 80040dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040e0:	464b      	mov	r3, r9
 80040e2:	eb45 0303 	adc.w	r3, r5, r3
 80040e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040fa:	f04f 0200 	mov.w	r2, #0
 80040fe:	f04f 0300 	mov.w	r3, #0
 8004102:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004106:	4629      	mov	r1, r5
 8004108:	008b      	lsls	r3, r1, #2
 800410a:	4621      	mov	r1, r4
 800410c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004110:	4621      	mov	r1, r4
 8004112:	008a      	lsls	r2, r1, #2
 8004114:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004118:	f7fc f85c 	bl	80001d4 <__aeabi_uldivmod>
 800411c:	4602      	mov	r2, r0
 800411e:	460b      	mov	r3, r1
 8004120:	4b60      	ldr	r3, [pc, #384]	; (80042a4 <UART_SetConfig+0x4e4>)
 8004122:	fba3 2302 	umull	r2, r3, r3, r2
 8004126:	095b      	lsrs	r3, r3, #5
 8004128:	011c      	lsls	r4, r3, #4
 800412a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800412e:	2200      	movs	r2, #0
 8004130:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004134:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004138:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800413c:	4642      	mov	r2, r8
 800413e:	464b      	mov	r3, r9
 8004140:	1891      	adds	r1, r2, r2
 8004142:	61b9      	str	r1, [r7, #24]
 8004144:	415b      	adcs	r3, r3
 8004146:	61fb      	str	r3, [r7, #28]
 8004148:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800414c:	4641      	mov	r1, r8
 800414e:	1851      	adds	r1, r2, r1
 8004150:	6139      	str	r1, [r7, #16]
 8004152:	4649      	mov	r1, r9
 8004154:	414b      	adcs	r3, r1
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	f04f 0300 	mov.w	r3, #0
 8004160:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004164:	4659      	mov	r1, fp
 8004166:	00cb      	lsls	r3, r1, #3
 8004168:	4651      	mov	r1, sl
 800416a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800416e:	4651      	mov	r1, sl
 8004170:	00ca      	lsls	r2, r1, #3
 8004172:	4610      	mov	r0, r2
 8004174:	4619      	mov	r1, r3
 8004176:	4603      	mov	r3, r0
 8004178:	4642      	mov	r2, r8
 800417a:	189b      	adds	r3, r3, r2
 800417c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004180:	464b      	mov	r3, r9
 8004182:	460a      	mov	r2, r1
 8004184:	eb42 0303 	adc.w	r3, r2, r3
 8004188:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800418c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	67bb      	str	r3, [r7, #120]	; 0x78
 8004196:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	f04f 0300 	mov.w	r3, #0
 80041a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80041a4:	4649      	mov	r1, r9
 80041a6:	008b      	lsls	r3, r1, #2
 80041a8:	4641      	mov	r1, r8
 80041aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041ae:	4641      	mov	r1, r8
 80041b0:	008a      	lsls	r2, r1, #2
 80041b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80041b6:	f7fc f80d 	bl	80001d4 <__aeabi_uldivmod>
 80041ba:	4602      	mov	r2, r0
 80041bc:	460b      	mov	r3, r1
 80041be:	4611      	mov	r1, r2
 80041c0:	4b38      	ldr	r3, [pc, #224]	; (80042a4 <UART_SetConfig+0x4e4>)
 80041c2:	fba3 2301 	umull	r2, r3, r3, r1
 80041c6:	095b      	lsrs	r3, r3, #5
 80041c8:	2264      	movs	r2, #100	; 0x64
 80041ca:	fb02 f303 	mul.w	r3, r2, r3
 80041ce:	1acb      	subs	r3, r1, r3
 80041d0:	011b      	lsls	r3, r3, #4
 80041d2:	3332      	adds	r3, #50	; 0x32
 80041d4:	4a33      	ldr	r2, [pc, #204]	; (80042a4 <UART_SetConfig+0x4e4>)
 80041d6:	fba2 2303 	umull	r2, r3, r2, r3
 80041da:	095b      	lsrs	r3, r3, #5
 80041dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041e0:	441c      	add	r4, r3
 80041e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041e6:	2200      	movs	r2, #0
 80041e8:	673b      	str	r3, [r7, #112]	; 0x70
 80041ea:	677a      	str	r2, [r7, #116]	; 0x74
 80041ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80041f0:	4642      	mov	r2, r8
 80041f2:	464b      	mov	r3, r9
 80041f4:	1891      	adds	r1, r2, r2
 80041f6:	60b9      	str	r1, [r7, #8]
 80041f8:	415b      	adcs	r3, r3
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004200:	4641      	mov	r1, r8
 8004202:	1851      	adds	r1, r2, r1
 8004204:	6039      	str	r1, [r7, #0]
 8004206:	4649      	mov	r1, r9
 8004208:	414b      	adcs	r3, r1
 800420a:	607b      	str	r3, [r7, #4]
 800420c:	f04f 0200 	mov.w	r2, #0
 8004210:	f04f 0300 	mov.w	r3, #0
 8004214:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004218:	4659      	mov	r1, fp
 800421a:	00cb      	lsls	r3, r1, #3
 800421c:	4651      	mov	r1, sl
 800421e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004222:	4651      	mov	r1, sl
 8004224:	00ca      	lsls	r2, r1, #3
 8004226:	4610      	mov	r0, r2
 8004228:	4619      	mov	r1, r3
 800422a:	4603      	mov	r3, r0
 800422c:	4642      	mov	r2, r8
 800422e:	189b      	adds	r3, r3, r2
 8004230:	66bb      	str	r3, [r7, #104]	; 0x68
 8004232:	464b      	mov	r3, r9
 8004234:	460a      	mov	r2, r1
 8004236:	eb42 0303 	adc.w	r3, r2, r3
 800423a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800423c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	663b      	str	r3, [r7, #96]	; 0x60
 8004246:	667a      	str	r2, [r7, #100]	; 0x64
 8004248:	f04f 0200 	mov.w	r2, #0
 800424c:	f04f 0300 	mov.w	r3, #0
 8004250:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004254:	4649      	mov	r1, r9
 8004256:	008b      	lsls	r3, r1, #2
 8004258:	4641      	mov	r1, r8
 800425a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800425e:	4641      	mov	r1, r8
 8004260:	008a      	lsls	r2, r1, #2
 8004262:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004266:	f7fb ffb5 	bl	80001d4 <__aeabi_uldivmod>
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	4b0d      	ldr	r3, [pc, #52]	; (80042a4 <UART_SetConfig+0x4e4>)
 8004270:	fba3 1302 	umull	r1, r3, r3, r2
 8004274:	095b      	lsrs	r3, r3, #5
 8004276:	2164      	movs	r1, #100	; 0x64
 8004278:	fb01 f303 	mul.w	r3, r1, r3
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	011b      	lsls	r3, r3, #4
 8004280:	3332      	adds	r3, #50	; 0x32
 8004282:	4a08      	ldr	r2, [pc, #32]	; (80042a4 <UART_SetConfig+0x4e4>)
 8004284:	fba2 2303 	umull	r2, r3, r2, r3
 8004288:	095b      	lsrs	r3, r3, #5
 800428a:	f003 020f 	and.w	r2, r3, #15
 800428e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4422      	add	r2, r4
 8004296:	609a      	str	r2, [r3, #8]
}
 8004298:	bf00      	nop
 800429a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800429e:	46bd      	mov	sp, r7
 80042a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042a4:	51eb851f 	.word	0x51eb851f

080042a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042a8:	b084      	sub	sp, #16
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b084      	sub	sp, #16
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
 80042b2:	f107 001c 	add.w	r0, r7, #28
 80042b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d122      	bne.n	8004306 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80042d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80042e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d105      	bne.n	80042fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f001 fbee 	bl	8005adc <USB_CoreReset>
 8004300:	4603      	mov	r3, r0
 8004302:	73fb      	strb	r3, [r7, #15]
 8004304:	e01a      	b.n	800433c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f001 fbe2 	bl	8005adc <USB_CoreReset>
 8004318:	4603      	mov	r3, r0
 800431a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800431c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800431e:	2b00      	cmp	r3, #0
 8004320:	d106      	bne.n	8004330 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004326:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	639a      	str	r2, [r3, #56]	; 0x38
 800432e:	e005      	b.n	800433c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004334:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800433c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433e:	2b01      	cmp	r3, #1
 8004340:	d10b      	bne.n	800435a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f043 0206 	orr.w	r2, r3, #6
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f043 0220 	orr.w	r2, r3, #32
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800435a:	7bfb      	ldrb	r3, [r7, #15]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004366:	b004      	add	sp, #16
 8004368:	4770      	bx	lr
	...

0800436c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	4613      	mov	r3, r2
 8004378:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800437a:	79fb      	ldrb	r3, [r7, #7]
 800437c:	2b02      	cmp	r3, #2
 800437e:	d165      	bne.n	800444c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	4a41      	ldr	r2, [pc, #260]	; (8004488 <USB_SetTurnaroundTime+0x11c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d906      	bls.n	8004396 <USB_SetTurnaroundTime+0x2a>
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	4a40      	ldr	r2, [pc, #256]	; (800448c <USB_SetTurnaroundTime+0x120>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d202      	bcs.n	8004396 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004390:	230f      	movs	r3, #15
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	e062      	b.n	800445c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	4a3c      	ldr	r2, [pc, #240]	; (800448c <USB_SetTurnaroundTime+0x120>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d306      	bcc.n	80043ac <USB_SetTurnaroundTime+0x40>
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	4a3b      	ldr	r2, [pc, #236]	; (8004490 <USB_SetTurnaroundTime+0x124>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d202      	bcs.n	80043ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80043a6:	230e      	movs	r3, #14
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	e057      	b.n	800445c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	4a38      	ldr	r2, [pc, #224]	; (8004490 <USB_SetTurnaroundTime+0x124>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d306      	bcc.n	80043c2 <USB_SetTurnaroundTime+0x56>
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	4a37      	ldr	r2, [pc, #220]	; (8004494 <USB_SetTurnaroundTime+0x128>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d202      	bcs.n	80043c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80043bc:	230d      	movs	r3, #13
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	e04c      	b.n	800445c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	4a33      	ldr	r2, [pc, #204]	; (8004494 <USB_SetTurnaroundTime+0x128>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d306      	bcc.n	80043d8 <USB_SetTurnaroundTime+0x6c>
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	4a32      	ldr	r2, [pc, #200]	; (8004498 <USB_SetTurnaroundTime+0x12c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d802      	bhi.n	80043d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80043d2:	230c      	movs	r3, #12
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	e041      	b.n	800445c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	4a2f      	ldr	r2, [pc, #188]	; (8004498 <USB_SetTurnaroundTime+0x12c>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d906      	bls.n	80043ee <USB_SetTurnaroundTime+0x82>
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	4a2e      	ldr	r2, [pc, #184]	; (800449c <USB_SetTurnaroundTime+0x130>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d802      	bhi.n	80043ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80043e8:	230b      	movs	r3, #11
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	e036      	b.n	800445c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	4a2a      	ldr	r2, [pc, #168]	; (800449c <USB_SetTurnaroundTime+0x130>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d906      	bls.n	8004404 <USB_SetTurnaroundTime+0x98>
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	4a29      	ldr	r2, [pc, #164]	; (80044a0 <USB_SetTurnaroundTime+0x134>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d802      	bhi.n	8004404 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80043fe:	230a      	movs	r3, #10
 8004400:	617b      	str	r3, [r7, #20]
 8004402:	e02b      	b.n	800445c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	4a26      	ldr	r2, [pc, #152]	; (80044a0 <USB_SetTurnaroundTime+0x134>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d906      	bls.n	800441a <USB_SetTurnaroundTime+0xae>
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	4a25      	ldr	r2, [pc, #148]	; (80044a4 <USB_SetTurnaroundTime+0x138>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d202      	bcs.n	800441a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004414:	2309      	movs	r3, #9
 8004416:	617b      	str	r3, [r7, #20]
 8004418:	e020      	b.n	800445c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	4a21      	ldr	r2, [pc, #132]	; (80044a4 <USB_SetTurnaroundTime+0x138>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d306      	bcc.n	8004430 <USB_SetTurnaroundTime+0xc4>
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	4a20      	ldr	r2, [pc, #128]	; (80044a8 <USB_SetTurnaroundTime+0x13c>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d802      	bhi.n	8004430 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800442a:	2308      	movs	r3, #8
 800442c:	617b      	str	r3, [r7, #20]
 800442e:	e015      	b.n	800445c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	4a1d      	ldr	r2, [pc, #116]	; (80044a8 <USB_SetTurnaroundTime+0x13c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d906      	bls.n	8004446 <USB_SetTurnaroundTime+0xda>
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	4a1c      	ldr	r2, [pc, #112]	; (80044ac <USB_SetTurnaroundTime+0x140>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d202      	bcs.n	8004446 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004440:	2307      	movs	r3, #7
 8004442:	617b      	str	r3, [r7, #20]
 8004444:	e00a      	b.n	800445c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004446:	2306      	movs	r3, #6
 8004448:	617b      	str	r3, [r7, #20]
 800444a:	e007      	b.n	800445c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800444c:	79fb      	ldrb	r3, [r7, #7]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d102      	bne.n	8004458 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004452:	2309      	movs	r3, #9
 8004454:	617b      	str	r3, [r7, #20]
 8004456:	e001      	b.n	800445c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004458:	2309      	movs	r3, #9
 800445a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	68da      	ldr	r2, [r3, #12]
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	029b      	lsls	r3, r3, #10
 8004470:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004474:	431a      	orrs	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	371c      	adds	r7, #28
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	00d8acbf 	.word	0x00d8acbf
 800448c:	00e4e1c0 	.word	0x00e4e1c0
 8004490:	00f42400 	.word	0x00f42400
 8004494:	01067380 	.word	0x01067380
 8004498:	011a499f 	.word	0x011a499f
 800449c:	01312cff 	.word	0x01312cff
 80044a0:	014ca43f 	.word	0x014ca43f
 80044a4:	016e3600 	.word	0x016e3600
 80044a8:	01a6ab1f 	.word	0x01a6ab1f
 80044ac:	01e84800 	.word	0x01e84800

080044b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f043 0201 	orr.w	r2, r3, #1
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044d2:	b480      	push	{r7}
 80044d4:	b083      	sub	sp, #12
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f023 0201 	bic.w	r2, r3, #1
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	460b      	mov	r3, r1
 80044fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004510:	78fb      	ldrb	r3, [r7, #3]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d115      	bne.n	8004542 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004522:	2001      	movs	r0, #1
 8004524:	f7fc fc3e 	bl	8000da4 <HAL_Delay>
      ms++;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	3301      	adds	r3, #1
 800452c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f001 fa45 	bl	80059be <USB_GetMode>
 8004534:	4603      	mov	r3, r0
 8004536:	2b01      	cmp	r3, #1
 8004538:	d01e      	beq.n	8004578 <USB_SetCurrentMode+0x84>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2b31      	cmp	r3, #49	; 0x31
 800453e:	d9f0      	bls.n	8004522 <USB_SetCurrentMode+0x2e>
 8004540:	e01a      	b.n	8004578 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004542:	78fb      	ldrb	r3, [r7, #3]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d115      	bne.n	8004574 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004554:	2001      	movs	r0, #1
 8004556:	f7fc fc25 	bl	8000da4 <HAL_Delay>
      ms++;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3301      	adds	r3, #1
 800455e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f001 fa2c 	bl	80059be <USB_GetMode>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d005      	beq.n	8004578 <USB_SetCurrentMode+0x84>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b31      	cmp	r3, #49	; 0x31
 8004570:	d9f0      	bls.n	8004554 <USB_SetCurrentMode+0x60>
 8004572:	e001      	b.n	8004578 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e005      	b.n	8004584 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b32      	cmp	r3, #50	; 0x32
 800457c:	d101      	bne.n	8004582 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e000      	b.n	8004584 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800458c:	b084      	sub	sp, #16
 800458e:	b580      	push	{r7, lr}
 8004590:	b086      	sub	sp, #24
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
 8004596:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800459a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800459e:	2300      	movs	r3, #0
 80045a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80045a6:	2300      	movs	r3, #0
 80045a8:	613b      	str	r3, [r7, #16]
 80045aa:	e009      	b.n	80045c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	3340      	adds	r3, #64	; 0x40
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4413      	add	r3, r2
 80045b6:	2200      	movs	r2, #0
 80045b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	3301      	adds	r3, #1
 80045be:	613b      	str	r3, [r7, #16]
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	2b0e      	cmp	r3, #14
 80045c4:	d9f2      	bls.n	80045ac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80045c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d11c      	bne.n	8004606 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045da:	f043 0302 	orr.w	r3, r3, #2
 80045de:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	639a      	str	r2, [r3, #56]	; 0x38
 8004604:	e00b      	b.n	800461e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004616:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004624:	461a      	mov	r2, r3
 8004626:	2300      	movs	r3, #0
 8004628:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004630:	4619      	mov	r1, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004638:	461a      	mov	r2, r3
 800463a:	680b      	ldr	r3, [r1, #0]
 800463c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800463e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004640:	2b01      	cmp	r3, #1
 8004642:	d10c      	bne.n	800465e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004646:	2b00      	cmp	r3, #0
 8004648:	d104      	bne.n	8004654 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800464a:	2100      	movs	r1, #0
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f965 	bl	800491c <USB_SetDevSpeed>
 8004652:	e008      	b.n	8004666 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004654:	2101      	movs	r1, #1
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f960 	bl	800491c <USB_SetDevSpeed>
 800465c:	e003      	b.n	8004666 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800465e:	2103      	movs	r1, #3
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 f95b 	bl	800491c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004666:	2110      	movs	r1, #16
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f8f3 	bl	8004854 <USB_FlushTxFifo>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f91f 	bl	80048bc <USB_FlushRxFifo>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800468e:	461a      	mov	r2, r3
 8004690:	2300      	movs	r3, #0
 8004692:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800469a:	461a      	mov	r2, r3
 800469c:	2300      	movs	r3, #0
 800469e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a6:	461a      	mov	r2, r3
 80046a8:	2300      	movs	r3, #0
 80046aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046ac:	2300      	movs	r3, #0
 80046ae:	613b      	str	r3, [r7, #16]
 80046b0:	e043      	b.n	800473a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	015a      	lsls	r2, r3, #5
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	4413      	add	r3, r2
 80046ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046c8:	d118      	bne.n	80046fc <USB_DevInit+0x170>
    {
      if (i == 0U)
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10a      	bne.n	80046e6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046dc:	461a      	mov	r2, r3
 80046de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046e2:	6013      	str	r3, [r2, #0]
 80046e4:	e013      	b.n	800470e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f2:	461a      	mov	r2, r3
 80046f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80046f8:	6013      	str	r3, [r2, #0]
 80046fa:	e008      	b.n	800470e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	015a      	lsls	r2, r3, #5
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4413      	add	r3, r2
 8004704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004708:	461a      	mov	r2, r3
 800470a:	2300      	movs	r3, #0
 800470c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	4413      	add	r3, r2
 8004716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800471a:	461a      	mov	r2, r3
 800471c:	2300      	movs	r3, #0
 800471e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4413      	add	r3, r2
 8004728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800472c:	461a      	mov	r2, r3
 800472e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004732:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	3301      	adds	r3, #1
 8004738:	613b      	str	r3, [r7, #16]
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	429a      	cmp	r2, r3
 8004740:	d3b7      	bcc.n	80046b2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004742:	2300      	movs	r3, #0
 8004744:	613b      	str	r3, [r7, #16]
 8004746:	e043      	b.n	80047d0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800475a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800475e:	d118      	bne.n	8004792 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10a      	bne.n	800477c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	4413      	add	r3, r2
 800476e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004772:	461a      	mov	r2, r3
 8004774:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	e013      	b.n	80047a4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4413      	add	r3, r2
 8004784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004788:	461a      	mov	r2, r3
 800478a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800478e:	6013      	str	r3, [r2, #0]
 8004790:	e008      	b.n	80047a4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	4413      	add	r3, r2
 800479a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479e:	461a      	mov	r2, r3
 80047a0:	2300      	movs	r3, #0
 80047a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b0:	461a      	mov	r2, r3
 80047b2:	2300      	movs	r3, #0
 80047b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	015a      	lsls	r2, r3, #5
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4413      	add	r3, r2
 80047be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c2:	461a      	mov	r2, r3
 80047c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	3301      	adds	r3, #1
 80047ce:	613b      	str	r3, [r7, #16]
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d3b7      	bcc.n	8004748 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80047f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80047fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d105      	bne.n	800480c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	f043 0210 	orr.w	r2, r3, #16
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	699a      	ldr	r2, [r3, #24]
 8004810:	4b0f      	ldr	r3, [pc, #60]	; (8004850 <USB_DevInit+0x2c4>)
 8004812:	4313      	orrs	r3, r2
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800481a:	2b00      	cmp	r3, #0
 800481c:	d005      	beq.n	800482a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	f043 0208 	orr.w	r2, r3, #8
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800482a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800482c:	2b01      	cmp	r3, #1
 800482e:	d107      	bne.n	8004840 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004838:	f043 0304 	orr.w	r3, r3, #4
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004840:	7dfb      	ldrb	r3, [r7, #23]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800484c:	b004      	add	sp, #16
 800484e:	4770      	bx	lr
 8004850:	803c3800 	.word	0x803c3800

08004854 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	3301      	adds	r3, #1
 8004866:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4a13      	ldr	r2, [pc, #76]	; (80048b8 <USB_FlushTxFifo+0x64>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d901      	bls.n	8004874 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e01b      	b.n	80048ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	2b00      	cmp	r3, #0
 800487a:	daf2      	bge.n	8004862 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	019b      	lsls	r3, r3, #6
 8004884:	f043 0220 	orr.w	r2, r3, #32
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	3301      	adds	r3, #1
 8004890:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	4a08      	ldr	r2, [pc, #32]	; (80048b8 <USB_FlushTxFifo+0x64>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d901      	bls.n	800489e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e006      	b.n	80048ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f003 0320 	and.w	r3, r3, #32
 80048a6:	2b20      	cmp	r3, #32
 80048a8:	d0f0      	beq.n	800488c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	00030d40 	.word	0x00030d40

080048bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048c4:	2300      	movs	r3, #0
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	3301      	adds	r3, #1
 80048cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	4a11      	ldr	r2, [pc, #68]	; (8004918 <USB_FlushRxFifo+0x5c>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d901      	bls.n	80048da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e018      	b.n	800490c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	daf2      	bge.n	80048c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2210      	movs	r2, #16
 80048ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	3301      	adds	r3, #1
 80048f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4a08      	ldr	r2, [pc, #32]	; (8004918 <USB_FlushRxFifo+0x5c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d901      	bls.n	80048fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e006      	b.n	800490c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	f003 0310 	and.w	r3, r3, #16
 8004906:	2b10      	cmp	r3, #16
 8004908:	d0f0      	beq.n	80048ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	00030d40 	.word	0x00030d40

0800491c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	460b      	mov	r3, r1
 8004926:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	78fb      	ldrb	r3, [r7, #3]
 8004936:	68f9      	ldr	r1, [r7, #12]
 8004938:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800493c:	4313      	orrs	r3, r2
 800493e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800494e:	b480      	push	{r7}
 8004950:	b087      	sub	sp, #28
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 0306 	and.w	r3, r3, #6
 8004966:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d102      	bne.n	8004974 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800496e:	2300      	movs	r3, #0
 8004970:	75fb      	strb	r3, [r7, #23]
 8004972:	e00a      	b.n	800498a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2b02      	cmp	r3, #2
 8004978:	d002      	beq.n	8004980 <USB_GetDevSpeed+0x32>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2b06      	cmp	r3, #6
 800497e:	d102      	bne.n	8004986 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004980:	2302      	movs	r3, #2
 8004982:	75fb      	strb	r3, [r7, #23]
 8004984:	e001      	b.n	800498a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004986:	230f      	movs	r3, #15
 8004988:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800498a:	7dfb      	ldrb	r3, [r7, #23]
}
 800498c:	4618      	mov	r0, r3
 800498e:	371c      	adds	r7, #28
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	785b      	ldrb	r3, [r3, #1]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d13a      	bne.n	8004a2a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ba:	69da      	ldr	r2, [r3, #28]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	f003 030f 	and.w	r3, r3, #15
 80049c4:	2101      	movs	r1, #1
 80049c6:	fa01 f303 	lsl.w	r3, r1, r3
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	68f9      	ldr	r1, [r7, #12]
 80049ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049d2:	4313      	orrs	r3, r2
 80049d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	015a      	lsls	r2, r3, #5
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4413      	add	r3, r2
 80049de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d155      	bne.n	8004a98 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	791b      	ldrb	r3, [r3, #4]
 8004a06:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a08:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	059b      	lsls	r3, r3, #22
 8004a0e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a10:	4313      	orrs	r3, r2
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	0151      	lsls	r1, r2, #5
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	440a      	add	r2, r1
 8004a1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a26:	6013      	str	r3, [r2, #0]
 8004a28:	e036      	b.n	8004a98 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a30:	69da      	ldr	r2, [r3, #28]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	f003 030f 	and.w	r3, r3, #15
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a40:	041b      	lsls	r3, r3, #16
 8004a42:	68f9      	ldr	r1, [r7, #12]
 8004a44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d11a      	bne.n	8004a98 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	791b      	ldrb	r3, [r3, #4]
 8004a7c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a7e:	430b      	orrs	r3, r1
 8004a80:	4313      	orrs	r3, r2
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	0151      	lsls	r1, r2, #5
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	440a      	add	r2, r1
 8004a8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a96:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3714      	adds	r7, #20
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
	...

08004aa8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	785b      	ldrb	r3, [r3, #1]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d161      	bne.n	8004b88 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ad6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ada:	d11f      	bne.n	8004b1c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	0151      	lsls	r1, r2, #5
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	440a      	add	r2, r1
 8004af2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004af6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004afa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	0151      	lsls	r1, r2, #5
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	440a      	add	r2, r1
 8004b12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	f003 030f 	and.w	r3, r3, #15
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	43db      	mvns	r3, r3
 8004b36:	68f9      	ldr	r1, [r7, #12]
 8004b38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b46:	69da      	ldr	r2, [r3, #28]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	f003 030f 	and.w	r3, r3, #15
 8004b50:	2101      	movs	r1, #1
 8004b52:	fa01 f303 	lsl.w	r3, r1, r3
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	43db      	mvns	r3, r3
 8004b5a:	68f9      	ldr	r1, [r7, #12]
 8004b5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b60:	4013      	ands	r3, r2
 8004b62:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	015a      	lsls	r2, r3, #5
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	0159      	lsls	r1, r3, #5
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	440b      	add	r3, r1
 8004b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7e:	4619      	mov	r1, r3
 8004b80:	4b35      	ldr	r3, [pc, #212]	; (8004c58 <USB_DeactivateEndpoint+0x1b0>)
 8004b82:	4013      	ands	r3, r2
 8004b84:	600b      	str	r3, [r1, #0]
 8004b86:	e060      	b.n	8004c4a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	015a      	lsls	r2, r3, #5
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4413      	add	r3, r2
 8004b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b9e:	d11f      	bne.n	8004be0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	0151      	lsls	r1, r2, #5
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	440a      	add	r2, r1
 8004bb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004bbe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	015a      	lsls	r2, r3, #5
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	0151      	lsls	r1, r2, #5
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	440a      	add	r2, r1
 8004bd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bde:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	f003 030f 	and.w	r3, r3, #15
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf6:	041b      	lsls	r3, r3, #16
 8004bf8:	43db      	mvns	r3, r3
 8004bfa:	68f9      	ldr	r1, [r7, #12]
 8004bfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c00:	4013      	ands	r3, r2
 8004c02:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c0a:	69da      	ldr	r2, [r3, #28]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	f003 030f 	and.w	r3, r3, #15
 8004c14:	2101      	movs	r1, #1
 8004c16:	fa01 f303 	lsl.w	r3, r1, r3
 8004c1a:	041b      	lsls	r3, r3, #16
 8004c1c:	43db      	mvns	r3, r3
 8004c1e:	68f9      	ldr	r1, [r7, #12]
 8004c20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c24:	4013      	ands	r3, r2
 8004c26:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	0159      	lsls	r1, r3, #5
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	440b      	add	r3, r1
 8004c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c42:	4619      	mov	r1, r3
 8004c44:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <USB_DeactivateEndpoint+0x1b4>)
 8004c46:	4013      	ands	r3, r2
 8004c48:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	ec337800 	.word	0xec337800
 8004c5c:	eff37800 	.word	0xeff37800

08004c60 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b08a      	sub	sp, #40	; 0x28
 8004c64:	af02      	add	r7, sp, #8
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	785b      	ldrb	r3, [r3, #1]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	f040 815c 	bne.w	8004f3a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d132      	bne.n	8004cf0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	015a      	lsls	r2, r3, #5
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	0151      	lsls	r1, r2, #5
 8004c9c:	69fa      	ldr	r2, [r7, #28]
 8004c9e:	440a      	add	r2, r1
 8004ca0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ca4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ca8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	0151      	lsls	r1, r2, #5
 8004cc0:	69fa      	ldr	r2, [r7, #28]
 8004cc2:	440a      	add	r2, r1
 8004cc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ccc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	0151      	lsls	r1, r2, #5
 8004ce0:	69fa      	ldr	r2, [r7, #28]
 8004ce2:	440a      	add	r2, r1
 8004ce4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ce8:	0cdb      	lsrs	r3, r3, #19
 8004cea:	04db      	lsls	r3, r3, #19
 8004cec:	6113      	str	r3, [r2, #16]
 8004cee:	e074      	b.n	8004dda <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	015a      	lsls	r2, r3, #5
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	0151      	lsls	r1, r2, #5
 8004d02:	69fa      	ldr	r2, [r7, #28]
 8004d04:	440a      	add	r2, r1
 8004d06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d0a:	0cdb      	lsrs	r3, r3, #19
 8004d0c:	04db      	lsls	r3, r3, #19
 8004d0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	0151      	lsls	r1, r2, #5
 8004d22:	69fa      	ldr	r2, [r7, #28]
 8004d24:	440a      	add	r2, r1
 8004d26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d2a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d2e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d40:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	6999      	ldr	r1, [r3, #24]
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	440b      	add	r3, r1
 8004d4c:	1e59      	subs	r1, r3, #1
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d56:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004d58:	4b9d      	ldr	r3, [pc, #628]	; (8004fd0 <USB_EPStartXfer+0x370>)
 8004d5a:	400b      	ands	r3, r1
 8004d5c:	69b9      	ldr	r1, [r7, #24]
 8004d5e:	0148      	lsls	r0, r1, #5
 8004d60:	69f9      	ldr	r1, [r7, #28]
 8004d62:	4401      	add	r1, r0
 8004d64:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d78:	691a      	ldr	r2, [r3, #16]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d82:	69b9      	ldr	r1, [r7, #24]
 8004d84:	0148      	lsls	r0, r1, #5
 8004d86:	69f9      	ldr	r1, [r7, #28]
 8004d88:	4401      	add	r1, r0
 8004d8a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	791b      	ldrb	r3, [r3, #4]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d11f      	bne.n	8004dda <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	015a      	lsls	r2, r3, #5
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	4413      	add	r3, r2
 8004da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	0151      	lsls	r1, r2, #5
 8004dac:	69fa      	ldr	r2, [r7, #28]
 8004dae:	440a      	add	r2, r1
 8004db0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004db4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004db8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	0151      	lsls	r1, r2, #5
 8004dcc:	69fa      	ldr	r2, [r7, #28]
 8004dce:	440a      	add	r2, r1
 8004dd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004dd8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004dda:	79fb      	ldrb	r3, [r7, #7]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d14b      	bne.n	8004e78 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d009      	beq.n	8004dfc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df4:	461a      	mov	r2, r3
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	791b      	ldrb	r3, [r3, #4]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d128      	bne.n	8004e56 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d110      	bne.n	8004e36 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	0151      	lsls	r1, r2, #5
 8004e26:	69fa      	ldr	r2, [r7, #28]
 8004e28:	440a      	add	r2, r1
 8004e2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e32:	6013      	str	r3, [r2, #0]
 8004e34:	e00f      	b.n	8004e56 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	015a      	lsls	r2, r3, #5
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	0151      	lsls	r1, r2, #5
 8004e48:	69fa      	ldr	r2, [r7, #28]
 8004e4a:	440a      	add	r2, r1
 8004e4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e54:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	0151      	lsls	r1, r2, #5
 8004e68:	69fa      	ldr	r2, [r7, #28]
 8004e6a:	440a      	add	r2, r1
 8004e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	e133      	b.n	80050e0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	0151      	lsls	r1, r2, #5
 8004e8a:	69fa      	ldr	r2, [r7, #28]
 8004e8c:	440a      	add	r2, r1
 8004e8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e96:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	791b      	ldrb	r3, [r3, #4]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d015      	beq.n	8004ecc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 811b 	beq.w	80050e0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	f003 030f 	and.w	r3, r3, #15
 8004eba:	2101      	movs	r1, #1
 8004ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec0:	69f9      	ldr	r1, [r7, #28]
 8004ec2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	634b      	str	r3, [r1, #52]	; 0x34
 8004eca:	e109      	b.n	80050e0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d110      	bne.n	8004efe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	0151      	lsls	r1, r2, #5
 8004eee:	69fa      	ldr	r2, [r7, #28]
 8004ef0:	440a      	add	r2, r1
 8004ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004efa:	6013      	str	r3, [r2, #0]
 8004efc:	e00f      	b.n	8004f1e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	015a      	lsls	r2, r3, #5
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	0151      	lsls	r1, r2, #5
 8004f10:	69fa      	ldr	r2, [r7, #28]
 8004f12:	440a      	add	r2, r1
 8004f14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f1c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	6919      	ldr	r1, [r3, #16]
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	781a      	ldrb	r2, [r3, #0]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	b298      	uxth	r0, r3
 8004f2c:	79fb      	ldrb	r3, [r7, #7]
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	4603      	mov	r3, r0
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 fade 	bl	80054f4 <USB_WritePacket>
 8004f38:	e0d2      	b.n	80050e0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	0151      	lsls	r1, r2, #5
 8004f4c:	69fa      	ldr	r2, [r7, #28]
 8004f4e:	440a      	add	r2, r1
 8004f50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f54:	0cdb      	lsrs	r3, r3, #19
 8004f56:	04db      	lsls	r3, r3, #19
 8004f58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	015a      	lsls	r2, r3, #5
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	4413      	add	r3, r2
 8004f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	0151      	lsls	r1, r2, #5
 8004f6c:	69fa      	ldr	r2, [r7, #28]
 8004f6e:	440a      	add	r2, r1
 8004f70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f7c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d126      	bne.n	8004fd4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	015a      	lsls	r2, r3, #5
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f9c:	69b9      	ldr	r1, [r7, #24]
 8004f9e:	0148      	lsls	r0, r1, #5
 8004fa0:	69f9      	ldr	r1, [r7, #28]
 8004fa2:	4401      	add	r1, r0
 8004fa4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	0151      	lsls	r1, r2, #5
 8004fbe:	69fa      	ldr	r2, [r7, #28]
 8004fc0:	440a      	add	r2, r1
 8004fc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fc6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fca:	6113      	str	r3, [r2, #16]
 8004fcc:	e03a      	b.n	8005044 <USB_EPStartXfer+0x3e4>
 8004fce:	bf00      	nop
 8004fd0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	699a      	ldr	r2, [r3, #24]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	4413      	add	r3, r2
 8004fde:	1e5a      	subs	r2, r3, #1
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	8afa      	ldrh	r2, [r7, #22]
 8004ff0:	fb03 f202 	mul.w	r2, r3, r2
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	015a      	lsls	r2, r3, #5
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	4413      	add	r3, r2
 8005000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005004:	691a      	ldr	r2, [r3, #16]
 8005006:	8afb      	ldrh	r3, [r7, #22]
 8005008:	04d9      	lsls	r1, r3, #19
 800500a:	4b38      	ldr	r3, [pc, #224]	; (80050ec <USB_EPStartXfer+0x48c>)
 800500c:	400b      	ands	r3, r1
 800500e:	69b9      	ldr	r1, [r7, #24]
 8005010:	0148      	lsls	r0, r1, #5
 8005012:	69f9      	ldr	r1, [r7, #28]
 8005014:	4401      	add	r1, r0
 8005016:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800501a:	4313      	orrs	r3, r2
 800501c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	4413      	add	r3, r2
 8005026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	69db      	ldr	r3, [r3, #28]
 8005030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005034:	69b9      	ldr	r1, [r7, #24]
 8005036:	0148      	lsls	r0, r1, #5
 8005038:	69f9      	ldr	r1, [r7, #28]
 800503a:	4401      	add	r1, r0
 800503c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005040:	4313      	orrs	r3, r2
 8005042:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005044:	79fb      	ldrb	r3, [r7, #7]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d10d      	bne.n	8005066 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d009      	beq.n	8005066 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	6919      	ldr	r1, [r3, #16]
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	015a      	lsls	r2, r3, #5
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	4413      	add	r3, r2
 800505e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005062:	460a      	mov	r2, r1
 8005064:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	791b      	ldrb	r3, [r3, #4]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d128      	bne.n	80050c0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800507a:	2b00      	cmp	r3, #0
 800507c:	d110      	bne.n	80050a0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	015a      	lsls	r2, r3, #5
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	4413      	add	r3, r2
 8005086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	0151      	lsls	r1, r2, #5
 8005090:	69fa      	ldr	r2, [r7, #28]
 8005092:	440a      	add	r2, r1
 8005094:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005098:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800509c:	6013      	str	r3, [r2, #0]
 800509e:	e00f      	b.n	80050c0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	0151      	lsls	r1, r2, #5
 80050b2:	69fa      	ldr	r2, [r7, #28]
 80050b4:	440a      	add	r2, r1
 80050b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050be:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	015a      	lsls	r2, r3, #5
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	4413      	add	r3, r2
 80050c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	0151      	lsls	r1, r2, #5
 80050d2:	69fa      	ldr	r2, [r7, #28]
 80050d4:	440a      	add	r2, r1
 80050d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3720      	adds	r7, #32
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	1ff80000 	.word	0x1ff80000

080050f0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	4613      	mov	r3, r2
 80050fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	785b      	ldrb	r3, [r3, #1]
 800510c:	2b01      	cmp	r3, #1
 800510e:	f040 80ce 	bne.w	80052ae <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d132      	bne.n	8005180 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	4413      	add	r3, r2
 8005122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	0151      	lsls	r1, r2, #5
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	440a      	add	r2, r1
 8005130:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005134:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005138:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800513c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	0151      	lsls	r1, r2, #5
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	440a      	add	r2, r1
 8005154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005158:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800515c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	4413      	add	r3, r2
 8005166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	0151      	lsls	r1, r2, #5
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	440a      	add	r2, r1
 8005174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005178:	0cdb      	lsrs	r3, r3, #19
 800517a:	04db      	lsls	r3, r3, #19
 800517c:	6113      	str	r3, [r2, #16]
 800517e:	e04e      	b.n	800521e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	0151      	lsls	r1, r2, #5
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	440a      	add	r2, r1
 8005196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800519a:	0cdb      	lsrs	r3, r3, #19
 800519c:	04db      	lsls	r3, r3, #19
 800519e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	0151      	lsls	r1, r2, #5
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	440a      	add	r2, r1
 80051b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051c2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	699a      	ldr	r2, [r3, #24]
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d903      	bls.n	80051d8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	68da      	ldr	r2, [r3, #12]
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	0151      	lsls	r1, r2, #5
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	440a      	add	r2, r1
 80051ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005204:	691a      	ldr	r2, [r3, #16]
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800520e:	6939      	ldr	r1, [r7, #16]
 8005210:	0148      	lsls	r0, r1, #5
 8005212:	6979      	ldr	r1, [r7, #20]
 8005214:	4401      	add	r1, r0
 8005216:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800521a:	4313      	orrs	r3, r2
 800521c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800521e:	79fb      	ldrb	r3, [r7, #7]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d11e      	bne.n	8005262 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d009      	beq.n	8005240 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	4413      	add	r3, r2
 8005234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005238:	461a      	mov	r2, r3
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	0151      	lsls	r1, r2, #5
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	440a      	add	r2, r1
 8005256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800525a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800525e:	6013      	str	r3, [r2, #0]
 8005260:	e097      	b.n	8005392 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	4413      	add	r3, r2
 800526a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	0151      	lsls	r1, r2, #5
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	440a      	add	r2, r1
 8005278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800527c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005280:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	2b00      	cmp	r3, #0
 8005288:	f000 8083 	beq.w	8005392 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	f003 030f 	and.w	r3, r3, #15
 800529c:	2101      	movs	r1, #1
 800529e:	fa01 f303 	lsl.w	r3, r1, r3
 80052a2:	6979      	ldr	r1, [r7, #20]
 80052a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052a8:	4313      	orrs	r3, r2
 80052aa:	634b      	str	r3, [r1, #52]	; 0x34
 80052ac:	e071      	b.n	8005392 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	0151      	lsls	r1, r2, #5
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	440a      	add	r2, r1
 80052c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052c8:	0cdb      	lsrs	r3, r3, #19
 80052ca:	04db      	lsls	r3, r3, #19
 80052cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	015a      	lsls	r2, r3, #5
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	4413      	add	r3, r2
 80052d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	0151      	lsls	r1, r2, #5
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	440a      	add	r2, r1
 80052e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052f0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	68da      	ldr	r2, [r3, #12]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	68da      	ldr	r2, [r3, #12]
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	4413      	add	r3, r2
 8005312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	0151      	lsls	r1, r2, #5
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	440a      	add	r2, r1
 8005320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005324:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005328:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005336:	691a      	ldr	r2, [r3, #16]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005340:	6939      	ldr	r1, [r7, #16]
 8005342:	0148      	lsls	r0, r1, #5
 8005344:	6979      	ldr	r1, [r7, #20]
 8005346:	4401      	add	r1, r0
 8005348:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800534c:	4313      	orrs	r3, r2
 800534e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005350:	79fb      	ldrb	r3, [r7, #7]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d10d      	bne.n	8005372 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d009      	beq.n	8005372 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	6919      	ldr	r1, [r3, #16]
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	4413      	add	r3, r2
 800536a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536e:	460a      	mov	r2, r1
 8005370:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	015a      	lsls	r2, r3, #5
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	4413      	add	r3, r2
 800537a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	0151      	lsls	r1, r2, #5
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	440a      	add	r2, r1
 8005388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800538c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005390:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	371c      	adds	r7, #28
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053aa:	2300      	movs	r3, #0
 80053ac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80053ae:	2300      	movs	r3, #0
 80053b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	785b      	ldrb	r3, [r3, #1]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d14a      	bne.n	8005454 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053d6:	f040 8086 	bne.w	80054e6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	7812      	ldrb	r2, [r2, #0]
 80053ee:	0151      	lsls	r1, r2, #5
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	440a      	add	r2, r1
 80053f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053fc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	4413      	add	r3, r2
 8005408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	7812      	ldrb	r2, [r2, #0]
 8005412:	0151      	lsls	r1, r2, #5
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	440a      	add	r2, r1
 8005418:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800541c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005420:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	3301      	adds	r3, #1
 8005426:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f242 7210 	movw	r2, #10000	; 0x2710
 800542e:	4293      	cmp	r3, r2
 8005430:	d902      	bls.n	8005438 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	75fb      	strb	r3, [r7, #23]
          break;
 8005436:	e056      	b.n	80054e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	015a      	lsls	r2, r3, #5
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	4413      	add	r3, r2
 8005442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800544c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005450:	d0e7      	beq.n	8005422 <USB_EPStopXfer+0x82>
 8005452:	e048      	b.n	80054e6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	4413      	add	r3, r2
 800545e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005468:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800546c:	d13b      	bne.n	80054e6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	015a      	lsls	r2, r3, #5
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	4413      	add	r3, r2
 8005478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	7812      	ldrb	r2, [r2, #0]
 8005482:	0151      	lsls	r1, r2, #5
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	440a      	add	r2, r1
 8005488:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800548c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005490:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	4413      	add	r3, r2
 800549c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	7812      	ldrb	r2, [r2, #0]
 80054a6:	0151      	lsls	r1, r2, #5
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	440a      	add	r2, r1
 80054ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	3301      	adds	r3, #1
 80054ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f242 7210 	movw	r2, #10000	; 0x2710
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d902      	bls.n	80054cc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	75fb      	strb	r3, [r7, #23]
          break;
 80054ca:	e00c      	b.n	80054e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054e4:	d0e7      	beq.n	80054b6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80054e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	371c      	adds	r7, #28
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b089      	sub	sp, #36	; 0x24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	4611      	mov	r1, r2
 8005500:	461a      	mov	r2, r3
 8005502:	460b      	mov	r3, r1
 8005504:	71fb      	strb	r3, [r7, #7]
 8005506:	4613      	mov	r3, r2
 8005508:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005512:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005516:	2b00      	cmp	r3, #0
 8005518:	d123      	bne.n	8005562 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800551a:	88bb      	ldrh	r3, [r7, #4]
 800551c:	3303      	adds	r3, #3
 800551e:	089b      	lsrs	r3, r3, #2
 8005520:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005522:	2300      	movs	r3, #0
 8005524:	61bb      	str	r3, [r7, #24]
 8005526:	e018      	b.n	800555a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005528:	79fb      	ldrb	r3, [r7, #7]
 800552a:	031a      	lsls	r2, r3, #12
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	4413      	add	r3, r2
 8005530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005534:	461a      	mov	r2, r3
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	3301      	adds	r3, #1
 8005540:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	3301      	adds	r3, #1
 8005546:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	3301      	adds	r3, #1
 800554c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	3301      	adds	r3, #1
 8005552:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	3301      	adds	r3, #1
 8005558:	61bb      	str	r3, [r7, #24]
 800555a:	69ba      	ldr	r2, [r7, #24]
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	429a      	cmp	r2, r3
 8005560:	d3e2      	bcc.n	8005528 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3724      	adds	r7, #36	; 0x24
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005570:	b480      	push	{r7}
 8005572:	b08b      	sub	sp, #44	; 0x2c
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	4613      	mov	r3, r2
 800557c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005586:	88fb      	ldrh	r3, [r7, #6]
 8005588:	089b      	lsrs	r3, r3, #2
 800558a:	b29b      	uxth	r3, r3
 800558c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800558e:	88fb      	ldrh	r3, [r7, #6]
 8005590:	f003 0303 	and.w	r3, r3, #3
 8005594:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005596:	2300      	movs	r3, #0
 8005598:	623b      	str	r3, [r7, #32]
 800559a:	e014      	b.n	80055c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	601a      	str	r2, [r3, #0]
    pDest++;
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	3301      	adds	r3, #1
 80055ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	3301      	adds	r3, #1
 80055b2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b6:	3301      	adds	r3, #1
 80055b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	3301      	adds	r3, #1
 80055be:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80055c0:	6a3b      	ldr	r3, [r7, #32]
 80055c2:	3301      	adds	r3, #1
 80055c4:	623b      	str	r3, [r7, #32]
 80055c6:	6a3a      	ldr	r2, [r7, #32]
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d3e6      	bcc.n	800559c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80055ce:	8bfb      	ldrh	r3, [r7, #30]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d01e      	beq.n	8005612 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80055d4:	2300      	movs	r3, #0
 80055d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055de:	461a      	mov	r2, r3
 80055e0:	f107 0310 	add.w	r3, r7, #16
 80055e4:	6812      	ldr	r2, [r2, #0]
 80055e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	fa22 f303 	lsr.w	r3, r2, r3
 80055f4:	b2da      	uxtb	r2, r3
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	701a      	strb	r2, [r3, #0]
      i++;
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	3301      	adds	r3, #1
 80055fe:	623b      	str	r3, [r7, #32]
      pDest++;
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	3301      	adds	r3, #1
 8005604:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005606:	8bfb      	ldrh	r3, [r7, #30]
 8005608:	3b01      	subs	r3, #1
 800560a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800560c:	8bfb      	ldrh	r3, [r7, #30]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1ea      	bne.n	80055e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005614:	4618      	mov	r0, r3
 8005616:	372c      	adds	r7, #44	; 0x2c
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	785b      	ldrb	r3, [r3, #1]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d12c      	bne.n	8005696 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	db12      	blt.n	8005674 <USB_EPSetStall+0x54>
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00f      	beq.n	8005674 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4413      	add	r3, r2
 800565c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	0151      	lsls	r1, r2, #5
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	440a      	add	r2, r1
 800566a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800566e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005672:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4413      	add	r3, r2
 800567c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	0151      	lsls	r1, r2, #5
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	440a      	add	r2, r1
 800568a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800568e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005692:	6013      	str	r3, [r2, #0]
 8005694:	e02b      	b.n	80056ee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4413      	add	r3, r2
 800569e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	db12      	blt.n	80056ce <USB_EPSetStall+0xae>
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00f      	beq.n	80056ce <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68ba      	ldr	r2, [r7, #8]
 80056be:	0151      	lsls	r1, r2, #5
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	440a      	add	r2, r1
 80056c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056cc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	015a      	lsls	r2, r3, #5
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	0151      	lsls	r1, r2, #5
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	440a      	add	r2, r1
 80056e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	785b      	ldrb	r3, [r3, #1]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d128      	bne.n	800576a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	0151      	lsls	r1, r2, #5
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	440a      	add	r2, r1
 800572e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005732:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005736:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	791b      	ldrb	r3, [r3, #4]
 800573c:	2b03      	cmp	r3, #3
 800573e:	d003      	beq.n	8005748 <USB_EPClearStall+0x4c>
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	791b      	ldrb	r3, [r3, #4]
 8005744:	2b02      	cmp	r3, #2
 8005746:	d138      	bne.n	80057ba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4413      	add	r3, r2
 8005750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	0151      	lsls	r1, r2, #5
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	440a      	add	r2, r1
 800575e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005766:	6013      	str	r3, [r2, #0]
 8005768:	e027      	b.n	80057ba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4413      	add	r3, r2
 8005772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	0151      	lsls	r1, r2, #5
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	440a      	add	r2, r1
 8005780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005784:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005788:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	791b      	ldrb	r3, [r3, #4]
 800578e:	2b03      	cmp	r3, #3
 8005790:	d003      	beq.n	800579a <USB_EPClearStall+0x9e>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	791b      	ldrb	r3, [r3, #4]
 8005796:	2b02      	cmp	r3, #2
 8005798:	d10f      	bne.n	80057ba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	0151      	lsls	r1, r2, #5
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	440a      	add	r2, r1
 80057b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057b8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3714      	adds	r7, #20
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	460b      	mov	r3, r1
 80057d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057e6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80057ea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	78fb      	ldrb	r3, [r7, #3]
 80057f6:	011b      	lsls	r3, r3, #4
 80057f8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80057fc:	68f9      	ldr	r1, [r7, #12]
 80057fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005802:	4313      	orrs	r3, r2
 8005804:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800582e:	f023 0303 	bic.w	r3, r3, #3
 8005832:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005842:	f023 0302 	bic.w	r3, r3, #2
 8005846:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005856:	b480      	push	{r7}
 8005858:	b085      	sub	sp, #20
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005870:	f023 0303 	bic.w	r3, r3, #3
 8005874:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005884:	f043 0302 	orr.w	r3, r3, #2
 8005888:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	4013      	ands	r3, r2
 80058ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80058b0:	68fb      	ldr	r3, [r7, #12]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3714      	adds	r7, #20
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80058be:	b480      	push	{r7}
 80058c0:	b085      	sub	sp, #20
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	4013      	ands	r3, r2
 80058e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	0c1b      	lsrs	r3, r3, #16
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b085      	sub	sp, #20
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800590e:	69db      	ldr	r3, [r3, #28]
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	4013      	ands	r3, r2
 8005914:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	b29b      	uxth	r3, r3
}
 800591a:	4618      	mov	r0, r3
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005926:	b480      	push	{r7}
 8005928:	b085      	sub	sp, #20
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	460b      	mov	r3, r1
 8005930:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005936:	78fb      	ldrb	r3, [r7, #3]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4413      	add	r3, r2
 800593e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	4013      	ands	r3, r2
 8005952:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005954:	68bb      	ldr	r3, [r7, #8]
}
 8005956:	4618      	mov	r0, r3
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005962:	b480      	push	{r7}
 8005964:	b087      	sub	sp, #28
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
 800596a:	460b      	mov	r3, r1
 800596c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005984:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005986:	78fb      	ldrb	r3, [r7, #3]
 8005988:	f003 030f 	and.w	r3, r3, #15
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	fa22 f303 	lsr.w	r3, r2, r3
 8005992:	01db      	lsls	r3, r3, #7
 8005994:	b2db      	uxtb	r3, r3
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	4313      	orrs	r3, r2
 800599a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800599c:	78fb      	ldrb	r3, [r7, #3]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	4013      	ands	r3, r2
 80059ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80059b0:	68bb      	ldr	r3, [r7, #8]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	371c      	adds	r7, #28
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	f003 0301 	and.w	r3, r3, #1
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80059da:	b480      	push	{r7}
 80059dc:	b085      	sub	sp, #20
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80059f8:	f023 0307 	bic.w	r3, r3, #7
 80059fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	460b      	mov	r3, r1
 8005a2a:	607a      	str	r2, [r7, #4]
 8005a2c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	333c      	adds	r3, #60	; 0x3c
 8005a36:	3304      	adds	r3, #4
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	4a26      	ldr	r2, [pc, #152]	; (8005ad8 <USB_EP0_OutStart+0xb8>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d90a      	bls.n	8005a5a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a54:	d101      	bne.n	8005a5a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	e037      	b.n	8005aca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a60:	461a      	mov	r2, r3
 8005a62:	2300      	movs	r3, #0
 8005a64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a88:	f043 0318 	orr.w	r3, r3, #24
 8005a8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a9c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005aa0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005aa2:	7afb      	ldrb	r3, [r7, #11]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d10f      	bne.n	8005ac8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aae:	461a      	mov	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ac2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005ac6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	371c      	adds	r7, #28
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	4f54300a 	.word	0x4f54300a

08005adc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	3301      	adds	r3, #1
 8005aec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	4a13      	ldr	r2, [pc, #76]	; (8005b40 <USB_CoreReset+0x64>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d901      	bls.n	8005afa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e01b      	b.n	8005b32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	daf2      	bge.n	8005ae8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b02:	2300      	movs	r3, #0
 8005b04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	f043 0201 	orr.w	r2, r3, #1
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	3301      	adds	r3, #1
 8005b16:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	4a09      	ldr	r2, [pc, #36]	; (8005b40 <USB_CoreReset+0x64>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d901      	bls.n	8005b24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e006      	b.n	8005b32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	f003 0301 	and.w	r3, r3, #1
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d0f0      	beq.n	8005b12 <USB_CoreReset+0x36>

  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	00030d40 	.word	0x00030d40

08005b44 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005b50:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005b54:	f002 fc1e 	bl	8008394 <USBD_static_malloc>
 8005b58:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d109      	bne.n	8005b74 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	32b0      	adds	r2, #176	; 0xb0
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005b70:	2302      	movs	r3, #2
 8005b72:	e0d4      	b.n	8005d1e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005b74:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005b78:	2100      	movs	r1, #0
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f002 fc4e 	bl	800841c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	32b0      	adds	r2, #176	; 0xb0
 8005b8a:	68f9      	ldr	r1, [r7, #12]
 8005b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	32b0      	adds	r2, #176	; 0xb0
 8005b9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	7c1b      	ldrb	r3, [r3, #16]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d138      	bne.n	8005c1e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005bac:	4b5e      	ldr	r3, [pc, #376]	; (8005d28 <USBD_CDC_Init+0x1e4>)
 8005bae:	7819      	ldrb	r1, [r3, #0]
 8005bb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bb4:	2202      	movs	r2, #2
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f002 fac9 	bl	800814e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005bbc:	4b5a      	ldr	r3, [pc, #360]	; (8005d28 <USBD_CDC_Init+0x1e4>)
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	f003 020f 	and.w	r2, r3, #15
 8005bc4:	6879      	ldr	r1, [r7, #4]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	440b      	add	r3, r1
 8005bd0:	3324      	adds	r3, #36	; 0x24
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005bd6:	4b55      	ldr	r3, [pc, #340]	; (8005d2c <USBD_CDC_Init+0x1e8>)
 8005bd8:	7819      	ldrb	r1, [r3, #0]
 8005bda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bde:	2202      	movs	r2, #2
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f002 fab4 	bl	800814e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005be6:	4b51      	ldr	r3, [pc, #324]	; (8005d2c <USBD_CDC_Init+0x1e8>)
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	f003 020f 	and.w	r2, r3, #15
 8005bee:	6879      	ldr	r1, [r7, #4]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4413      	add	r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	440b      	add	r3, r1
 8005bfa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005bfe:	2201      	movs	r2, #1
 8005c00:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005c02:	4b4b      	ldr	r3, [pc, #300]	; (8005d30 <USBD_CDC_Init+0x1ec>)
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	f003 020f 	and.w	r2, r3, #15
 8005c0a:	6879      	ldr	r1, [r7, #4]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	440b      	add	r3, r1
 8005c16:	3326      	adds	r3, #38	; 0x26
 8005c18:	2210      	movs	r2, #16
 8005c1a:	801a      	strh	r2, [r3, #0]
 8005c1c:	e035      	b.n	8005c8a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005c1e:	4b42      	ldr	r3, [pc, #264]	; (8005d28 <USBD_CDC_Init+0x1e4>)
 8005c20:	7819      	ldrb	r1, [r3, #0]
 8005c22:	2340      	movs	r3, #64	; 0x40
 8005c24:	2202      	movs	r2, #2
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f002 fa91 	bl	800814e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005c2c:	4b3e      	ldr	r3, [pc, #248]	; (8005d28 <USBD_CDC_Init+0x1e4>)
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	f003 020f 	and.w	r2, r3, #15
 8005c34:	6879      	ldr	r1, [r7, #4]
 8005c36:	4613      	mov	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4413      	add	r3, r2
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	440b      	add	r3, r1
 8005c40:	3324      	adds	r3, #36	; 0x24
 8005c42:	2201      	movs	r2, #1
 8005c44:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005c46:	4b39      	ldr	r3, [pc, #228]	; (8005d2c <USBD_CDC_Init+0x1e8>)
 8005c48:	7819      	ldrb	r1, [r3, #0]
 8005c4a:	2340      	movs	r3, #64	; 0x40
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f002 fa7d 	bl	800814e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005c54:	4b35      	ldr	r3, [pc, #212]	; (8005d2c <USBD_CDC_Init+0x1e8>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	f003 020f 	and.w	r2, r3, #15
 8005c5c:	6879      	ldr	r1, [r7, #4]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	440b      	add	r3, r1
 8005c68:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005c70:	4b2f      	ldr	r3, [pc, #188]	; (8005d30 <USBD_CDC_Init+0x1ec>)
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	f003 020f 	and.w	r2, r3, #15
 8005c78:	6879      	ldr	r1, [r7, #4]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	440b      	add	r3, r1
 8005c84:	3326      	adds	r3, #38	; 0x26
 8005c86:	2210      	movs	r2, #16
 8005c88:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005c8a:	4b29      	ldr	r3, [pc, #164]	; (8005d30 <USBD_CDC_Init+0x1ec>)
 8005c8c:	7819      	ldrb	r1, [r3, #0]
 8005c8e:	2308      	movs	r3, #8
 8005c90:	2203      	movs	r2, #3
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f002 fa5b 	bl	800814e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005c98:	4b25      	ldr	r3, [pc, #148]	; (8005d30 <USBD_CDC_Init+0x1ec>)
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	f003 020f 	and.w	r2, r3, #15
 8005ca0:	6879      	ldr	r1, [r7, #4]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	440b      	add	r3, r1
 8005cac:	3324      	adds	r3, #36	; 0x24
 8005cae:	2201      	movs	r2, #1
 8005cb0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	33b0      	adds	r3, #176	; 0xb0
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d101      	bne.n	8005cec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005ce8:	2302      	movs	r3, #2
 8005cea:	e018      	b.n	8005d1e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	7c1b      	ldrb	r3, [r3, #16]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10a      	bne.n	8005d0a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005cf4:	4b0d      	ldr	r3, [pc, #52]	; (8005d2c <USBD_CDC_Init+0x1e8>)
 8005cf6:	7819      	ldrb	r1, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005cfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f002 fb12 	bl	800832c <USBD_LL_PrepareReceive>
 8005d08:	e008      	b.n	8005d1c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005d0a:	4b08      	ldr	r3, [pc, #32]	; (8005d2c <USBD_CDC_Init+0x1e8>)
 8005d0c:	7819      	ldrb	r1, [r3, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d14:	2340      	movs	r3, #64	; 0x40
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f002 fb08 	bl	800832c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	20000093 	.word	0x20000093
 8005d2c:	20000094 	.word	0x20000094
 8005d30:	20000095 	.word	0x20000095

08005d34 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005d40:	4b3a      	ldr	r3, [pc, #232]	; (8005e2c <USBD_CDC_DeInit+0xf8>)
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	4619      	mov	r1, r3
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f002 fa27 	bl	800819a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005d4c:	4b37      	ldr	r3, [pc, #220]	; (8005e2c <USBD_CDC_DeInit+0xf8>)
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	f003 020f 	and.w	r2, r3, #15
 8005d54:	6879      	ldr	r1, [r7, #4]
 8005d56:	4613      	mov	r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	440b      	add	r3, r1
 8005d60:	3324      	adds	r3, #36	; 0x24
 8005d62:	2200      	movs	r2, #0
 8005d64:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005d66:	4b32      	ldr	r3, [pc, #200]	; (8005e30 <USBD_CDC_DeInit+0xfc>)
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f002 fa14 	bl	800819a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005d72:	4b2f      	ldr	r3, [pc, #188]	; (8005e30 <USBD_CDC_DeInit+0xfc>)
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	f003 020f 	and.w	r2, r3, #15
 8005d7a:	6879      	ldr	r1, [r7, #4]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	440b      	add	r3, r1
 8005d86:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005d8e:	4b29      	ldr	r3, [pc, #164]	; (8005e34 <USBD_CDC_DeInit+0x100>)
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	4619      	mov	r1, r3
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f002 fa00 	bl	800819a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005d9a:	4b26      	ldr	r3, [pc, #152]	; (8005e34 <USBD_CDC_DeInit+0x100>)
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	f003 020f 	and.w	r2, r3, #15
 8005da2:	6879      	ldr	r1, [r7, #4]
 8005da4:	4613      	mov	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	440b      	add	r3, r1
 8005dae:	3324      	adds	r3, #36	; 0x24
 8005db0:	2200      	movs	r2, #0
 8005db2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005db4:	4b1f      	ldr	r3, [pc, #124]	; (8005e34 <USBD_CDC_DeInit+0x100>)
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	f003 020f 	and.w	r2, r3, #15
 8005dbc:	6879      	ldr	r1, [r7, #4]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	440b      	add	r3, r1
 8005dc8:	3326      	adds	r3, #38	; 0x26
 8005dca:	2200      	movs	r2, #0
 8005dcc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	32b0      	adds	r2, #176	; 0xb0
 8005dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d01f      	beq.n	8005e20 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	33b0      	adds	r3, #176	; 0xb0
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4413      	add	r3, r2
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	32b0      	adds	r2, #176	; 0xb0
 8005dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f002 fad4 	bl	80083b0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	32b0      	adds	r2, #176	; 0xb0
 8005e12:	2100      	movs	r1, #0
 8005e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	20000093 	.word	0x20000093
 8005e30:	20000094 	.word	0x20000094
 8005e34:	20000095 	.word	0x20000095

08005e38 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b086      	sub	sp, #24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	32b0      	adds	r2, #176	; 0xb0
 8005e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e50:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005e56:	2300      	movs	r3, #0
 8005e58:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d101      	bne.n	8005e68 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e0bf      	b.n	8005fe8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d050      	beq.n	8005f16 <USBD_CDC_Setup+0xde>
 8005e74:	2b20      	cmp	r3, #32
 8005e76:	f040 80af 	bne.w	8005fd8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	88db      	ldrh	r3, [r3, #6]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d03a      	beq.n	8005ef8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	b25b      	sxtb	r3, r3
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	da1b      	bge.n	8005ec4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	33b0      	adds	r3, #176	; 0xb0
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4413      	add	r3, r2
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	683a      	ldr	r2, [r7, #0]
 8005ea0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005ea2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	88d2      	ldrh	r2, [r2, #6]
 8005ea8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	88db      	ldrh	r3, [r3, #6]
 8005eae:	2b07      	cmp	r3, #7
 8005eb0:	bf28      	it	cs
 8005eb2:	2307      	movcs	r3, #7
 8005eb4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	89fa      	ldrh	r2, [r7, #14]
 8005eba:	4619      	mov	r1, r3
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f001 fd43 	bl	8007948 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005ec2:	e090      	b.n	8005fe6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	785a      	ldrb	r2, [r3, #1]
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	88db      	ldrh	r3, [r3, #6]
 8005ed2:	2b3f      	cmp	r3, #63	; 0x3f
 8005ed4:	d803      	bhi.n	8005ede <USBD_CDC_Setup+0xa6>
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	88db      	ldrh	r3, [r3, #6]
 8005eda:	b2da      	uxtb	r2, r3
 8005edc:	e000      	b.n	8005ee0 <USBD_CDC_Setup+0xa8>
 8005ede:	2240      	movs	r2, #64	; 0x40
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005ee6:	6939      	ldr	r1, [r7, #16]
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005eee:	461a      	mov	r2, r3
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f001 fd55 	bl	80079a0 <USBD_CtlPrepareRx>
      break;
 8005ef6:	e076      	b.n	8005fe6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	33b0      	adds	r3, #176	; 0xb0
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4413      	add	r3, r2
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	7850      	ldrb	r0, [r2, #1]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	6839      	ldr	r1, [r7, #0]
 8005f12:	4798      	blx	r3
      break;
 8005f14:	e067      	b.n	8005fe6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	785b      	ldrb	r3, [r3, #1]
 8005f1a:	2b0b      	cmp	r3, #11
 8005f1c:	d851      	bhi.n	8005fc2 <USBD_CDC_Setup+0x18a>
 8005f1e:	a201      	add	r2, pc, #4	; (adr r2, 8005f24 <USBD_CDC_Setup+0xec>)
 8005f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f24:	08005f55 	.word	0x08005f55
 8005f28:	08005fd1 	.word	0x08005fd1
 8005f2c:	08005fc3 	.word	0x08005fc3
 8005f30:	08005fc3 	.word	0x08005fc3
 8005f34:	08005fc3 	.word	0x08005fc3
 8005f38:	08005fc3 	.word	0x08005fc3
 8005f3c:	08005fc3 	.word	0x08005fc3
 8005f40:	08005fc3 	.word	0x08005fc3
 8005f44:	08005fc3 	.word	0x08005fc3
 8005f48:	08005fc3 	.word	0x08005fc3
 8005f4c:	08005f7f 	.word	0x08005f7f
 8005f50:	08005fa9 	.word	0x08005fa9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	2b03      	cmp	r3, #3
 8005f5e:	d107      	bne.n	8005f70 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005f60:	f107 030a 	add.w	r3, r7, #10
 8005f64:	2202      	movs	r2, #2
 8005f66:	4619      	mov	r1, r3
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f001 fced 	bl	8007948 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f6e:	e032      	b.n	8005fd6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005f70:	6839      	ldr	r1, [r7, #0]
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f001 fc77 	bl	8007866 <USBD_CtlError>
            ret = USBD_FAIL;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	75fb      	strb	r3, [r7, #23]
          break;
 8005f7c:	e02b      	b.n	8005fd6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b03      	cmp	r3, #3
 8005f88:	d107      	bne.n	8005f9a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005f8a:	f107 030d 	add.w	r3, r7, #13
 8005f8e:	2201      	movs	r2, #1
 8005f90:	4619      	mov	r1, r3
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f001 fcd8 	bl	8007948 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f98:	e01d      	b.n	8005fd6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005f9a:	6839      	ldr	r1, [r7, #0]
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f001 fc62 	bl	8007866 <USBD_CtlError>
            ret = USBD_FAIL;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	75fb      	strb	r3, [r7, #23]
          break;
 8005fa6:	e016      	b.n	8005fd6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b03      	cmp	r3, #3
 8005fb2:	d00f      	beq.n	8005fd4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005fb4:	6839      	ldr	r1, [r7, #0]
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f001 fc55 	bl	8007866 <USBD_CtlError>
            ret = USBD_FAIL;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005fc0:	e008      	b.n	8005fd4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005fc2:	6839      	ldr	r1, [r7, #0]
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f001 fc4e 	bl	8007866 <USBD_CtlError>
          ret = USBD_FAIL;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	75fb      	strb	r3, [r7, #23]
          break;
 8005fce:	e002      	b.n	8005fd6 <USBD_CDC_Setup+0x19e>
          break;
 8005fd0:	bf00      	nop
 8005fd2:	e008      	b.n	8005fe6 <USBD_CDC_Setup+0x1ae>
          break;
 8005fd4:	bf00      	nop
      }
      break;
 8005fd6:	e006      	b.n	8005fe6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005fd8:	6839      	ldr	r1, [r7, #0]
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f001 fc43 	bl	8007866 <USBD_CtlError>
      ret = USBD_FAIL;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8005fe4:	bf00      	nop
  }

  return (uint8_t)ret;
 8005fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3718      	adds	r7, #24
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006002:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	32b0      	adds	r2, #176	; 0xb0
 800600e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006016:	2303      	movs	r3, #3
 8006018:	e065      	b.n	80060e6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	32b0      	adds	r2, #176	; 0xb0
 8006024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006028:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800602a:	78fb      	ldrb	r3, [r7, #3]
 800602c:	f003 020f 	and.w	r2, r3, #15
 8006030:	6879      	ldr	r1, [r7, #4]
 8006032:	4613      	mov	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4413      	add	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	440b      	add	r3, r1
 800603c:	3318      	adds	r3, #24
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d02f      	beq.n	80060a4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006044:	78fb      	ldrb	r3, [r7, #3]
 8006046:	f003 020f 	and.w	r2, r3, #15
 800604a:	6879      	ldr	r1, [r7, #4]
 800604c:	4613      	mov	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4413      	add	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	440b      	add	r3, r1
 8006056:	3318      	adds	r3, #24
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	78fb      	ldrb	r3, [r7, #3]
 800605c:	f003 010f 	and.w	r1, r3, #15
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	460b      	mov	r3, r1
 8006064:	00db      	lsls	r3, r3, #3
 8006066:	440b      	add	r3, r1
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4403      	add	r3, r0
 800606c:	3348      	adds	r3, #72	; 0x48
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	fbb2 f1f3 	udiv	r1, r2, r3
 8006074:	fb01 f303 	mul.w	r3, r1, r3
 8006078:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800607a:	2b00      	cmp	r3, #0
 800607c:	d112      	bne.n	80060a4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800607e:	78fb      	ldrb	r3, [r7, #3]
 8006080:	f003 020f 	and.w	r2, r3, #15
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	4613      	mov	r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4413      	add	r3, r2
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	440b      	add	r3, r1
 8006090:	3318      	adds	r3, #24
 8006092:	2200      	movs	r2, #0
 8006094:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006096:	78f9      	ldrb	r1, [r7, #3]
 8006098:	2300      	movs	r3, #0
 800609a:	2200      	movs	r2, #0
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f002 f924 	bl	80082ea <USBD_LL_Transmit>
 80060a2:	e01f      	b.n	80060e4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	33b0      	adds	r3, #176	; 0xb0
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d010      	beq.n	80060e4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	33b0      	adds	r3, #176	; 0xb0
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80060e0:	78fa      	ldrb	r2, [r7, #3]
 80060e2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b084      	sub	sp, #16
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	460b      	mov	r3, r1
 80060f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	32b0      	adds	r2, #176	; 0xb0
 8006104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006108:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	32b0      	adds	r2, #176	; 0xb0
 8006114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d101      	bne.n	8006120 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800611c:	2303      	movs	r3, #3
 800611e:	e01a      	b.n	8006156 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006120:	78fb      	ldrb	r3, [r7, #3]
 8006122:	4619      	mov	r1, r3
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f002 f922 	bl	800836e <USBD_LL_GetRxDataSize>
 800612a:	4602      	mov	r2, r0
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	33b0      	adds	r3, #176	; 0xb0
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4413      	add	r3, r2
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006150:	4611      	mov	r1, r2
 8006152:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b084      	sub	sp, #16
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	32b0      	adds	r2, #176	; 0xb0
 8006170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006174:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800617c:	2303      	movs	r3, #3
 800617e:	e025      	b.n	80061cc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	33b0      	adds	r3, #176	; 0xb0
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d01a      	beq.n	80061ca <USBD_CDC_EP0_RxReady+0x6c>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800619a:	2bff      	cmp	r3, #255	; 0xff
 800619c:	d015      	beq.n	80061ca <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	33b0      	adds	r3, #176	; 0xb0
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80061b6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80061be:	b292      	uxth	r2, r2
 80061c0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	22ff      	movs	r2, #255	; 0xff
 80061c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80061dc:	2182      	movs	r1, #130	; 0x82
 80061de:	4818      	ldr	r0, [pc, #96]	; (8006240 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80061e0:	f000 fd09 	bl	8006bf6 <USBD_GetEpDesc>
 80061e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80061e6:	2101      	movs	r1, #1
 80061e8:	4815      	ldr	r0, [pc, #84]	; (8006240 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80061ea:	f000 fd04 	bl	8006bf6 <USBD_GetEpDesc>
 80061ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80061f0:	2181      	movs	r1, #129	; 0x81
 80061f2:	4813      	ldr	r0, [pc, #76]	; (8006240 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80061f4:	f000 fcff 	bl	8006bf6 <USBD_GetEpDesc>
 80061f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d002      	beq.n	8006206 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	2210      	movs	r2, #16
 8006204:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d006      	beq.n	800621a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	2200      	movs	r2, #0
 8006210:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006214:	711a      	strb	r2, [r3, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d006      	beq.n	800622e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006228:	711a      	strb	r2, [r3, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2243      	movs	r2, #67	; 0x43
 8006232:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006234:	4b02      	ldr	r3, [pc, #8]	; (8006240 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006236:	4618      	mov	r0, r3
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	20000050 	.word	0x20000050

08006244 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800624c:	2182      	movs	r1, #130	; 0x82
 800624e:	4818      	ldr	r0, [pc, #96]	; (80062b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006250:	f000 fcd1 	bl	8006bf6 <USBD_GetEpDesc>
 8006254:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006256:	2101      	movs	r1, #1
 8006258:	4815      	ldr	r0, [pc, #84]	; (80062b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800625a:	f000 fccc 	bl	8006bf6 <USBD_GetEpDesc>
 800625e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006260:	2181      	movs	r1, #129	; 0x81
 8006262:	4813      	ldr	r0, [pc, #76]	; (80062b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006264:	f000 fcc7 	bl	8006bf6 <USBD_GetEpDesc>
 8006268:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d002      	beq.n	8006276 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	2210      	movs	r2, #16
 8006274:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d006      	beq.n	800628a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	2200      	movs	r2, #0
 8006280:	711a      	strb	r2, [r3, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f042 0202 	orr.w	r2, r2, #2
 8006288:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d006      	beq.n	800629e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	711a      	strb	r2, [r3, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	f042 0202 	orr.w	r2, r2, #2
 800629c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2243      	movs	r2, #67	; 0x43
 80062a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80062a4:	4b02      	ldr	r3, [pc, #8]	; (80062b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3718      	adds	r7, #24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	20000050 	.word	0x20000050

080062b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b086      	sub	sp, #24
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80062bc:	2182      	movs	r1, #130	; 0x82
 80062be:	4818      	ldr	r0, [pc, #96]	; (8006320 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80062c0:	f000 fc99 	bl	8006bf6 <USBD_GetEpDesc>
 80062c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80062c6:	2101      	movs	r1, #1
 80062c8:	4815      	ldr	r0, [pc, #84]	; (8006320 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80062ca:	f000 fc94 	bl	8006bf6 <USBD_GetEpDesc>
 80062ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80062d0:	2181      	movs	r1, #129	; 0x81
 80062d2:	4813      	ldr	r0, [pc, #76]	; (8006320 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80062d4:	f000 fc8f 	bl	8006bf6 <USBD_GetEpDesc>
 80062d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d002      	beq.n	80062e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	2210      	movs	r2, #16
 80062e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d006      	beq.n	80062fa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062f4:	711a      	strb	r2, [r3, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d006      	beq.n	800630e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006308:	711a      	strb	r2, [r3, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2243      	movs	r2, #67	; 0x43
 8006312:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006314:	4b02      	ldr	r3, [pc, #8]	; (8006320 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006316:	4618      	mov	r0, r3
 8006318:	3718      	adds	r7, #24
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	20000050 	.word	0x20000050

08006324 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	220a      	movs	r2, #10
 8006330:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006332:	4b03      	ldr	r3, [pc, #12]	; (8006340 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006334:	4618      	mov	r0, r3
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr
 8006340:	2000000c 	.word	0x2000000c

08006344 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006354:	2303      	movs	r3, #3
 8006356:	e009      	b.n	800636c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	33b0      	adds	r3, #176	; 0xb0
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	4413      	add	r3, r2
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	32b0      	adds	r2, #176	; 0xb0
 800638e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006392:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800639a:	2303      	movs	r3, #3
 800639c:	e008      	b.n	80063b0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	371c      	adds	r7, #28
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	32b0      	adds	r2, #176	; 0xb0
 80063d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80063dc:	2303      	movs	r3, #3
 80063de:	e004      	b.n	80063ea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	683a      	ldr	r2, [r7, #0]
 80063e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
	...

080063f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	32b0      	adds	r2, #176	; 0xb0
 800640a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800640e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	32b0      	adds	r2, #176	; 0xb0
 800641a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006422:	2303      	movs	r3, #3
 8006424:	e018      	b.n	8006458 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	7c1b      	ldrb	r3, [r3, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10a      	bne.n	8006444 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800642e:	4b0c      	ldr	r3, [pc, #48]	; (8006460 <USBD_CDC_ReceivePacket+0x68>)
 8006430:	7819      	ldrb	r1, [r3, #0]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006438:	f44f 7300 	mov.w	r3, #512	; 0x200
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f001 ff75 	bl	800832c <USBD_LL_PrepareReceive>
 8006442:	e008      	b.n	8006456 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006444:	4b06      	ldr	r3, [pc, #24]	; (8006460 <USBD_CDC_ReceivePacket+0x68>)
 8006446:	7819      	ldrb	r1, [r3, #0]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800644e:	2340      	movs	r3, #64	; 0x40
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f001 ff6b 	bl	800832c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	20000094 	.word	0x20000094

08006464 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	4613      	mov	r3, r2
 8006470:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d101      	bne.n	800647c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006478:	2303      	movs	r3, #3
 800647a:	e01f      	b.n	80064bc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d003      	beq.n	80064a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	79fa      	ldrb	r2, [r7, #7]
 80064ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f001 fde5 	bl	8008080 <USBD_LL_Init>
 80064b6:	4603      	mov	r3, r0
 80064b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80064ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3718      	adds	r7, #24
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80064d8:	2303      	movs	r3, #3
 80064da:	e025      	b.n	8006528 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	683a      	ldr	r2, [r7, #0]
 80064e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	32ae      	adds	r2, #174	; 0xae
 80064ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00f      	beq.n	8006518 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	32ae      	adds	r2, #174	; 0xae
 8006502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006508:	f107 020e 	add.w	r2, r7, #14
 800650c:	4610      	mov	r0, r2
 800650e:	4798      	blx	r3
 8006510:	4602      	mov	r2, r0
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800651e:	1c5a      	adds	r2, r3, #1
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f001 fded 	bl	8008118 <USBD_LL_Start>
 800653e:	4603      	mov	r3, r0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3708      	adds	r7, #8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006550:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006552:	4618      	mov	r0, r3
 8006554:	370c      	adds	r7, #12
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b084      	sub	sp, #16
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	460b      	mov	r3, r1
 8006568:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800656a:	2300      	movs	r3, #0
 800656c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006574:	2b00      	cmp	r3, #0
 8006576:	d009      	beq.n	800658c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	78fa      	ldrb	r2, [r7, #3]
 8006582:	4611      	mov	r1, r2
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	4798      	blx	r3
 8006588:	4603      	mov	r3, r0
 800658a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800658c:	7bfb      	ldrb	r3, [r7, #15]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b084      	sub	sp, #16
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
 800659e:	460b      	mov	r3, r1
 80065a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80065a2:	2300      	movs	r3, #0
 80065a4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	78fa      	ldrb	r2, [r7, #3]
 80065b0:	4611      	mov	r1, r2
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	4798      	blx	r3
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d001      	beq.n	80065c0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80065bc:	2303      	movs	r3, #3
 80065be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80065c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b084      	sub	sp, #16
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80065da:	6839      	ldr	r1, [r7, #0]
 80065dc:	4618      	mov	r0, r3
 80065de:	f001 f908 	bl	80077f2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80065f0:	461a      	mov	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80065fe:	f003 031f 	and.w	r3, r3, #31
 8006602:	2b02      	cmp	r3, #2
 8006604:	d01a      	beq.n	800663c <USBD_LL_SetupStage+0x72>
 8006606:	2b02      	cmp	r3, #2
 8006608:	d822      	bhi.n	8006650 <USBD_LL_SetupStage+0x86>
 800660a:	2b00      	cmp	r3, #0
 800660c:	d002      	beq.n	8006614 <USBD_LL_SetupStage+0x4a>
 800660e:	2b01      	cmp	r3, #1
 8006610:	d00a      	beq.n	8006628 <USBD_LL_SetupStage+0x5e>
 8006612:	e01d      	b.n	8006650 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800661a:	4619      	mov	r1, r3
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fb5f 	bl	8006ce0 <USBD_StdDevReq>
 8006622:	4603      	mov	r3, r0
 8006624:	73fb      	strb	r3, [r7, #15]
      break;
 8006626:	e020      	b.n	800666a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800662e:	4619      	mov	r1, r3
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 fbc7 	bl	8006dc4 <USBD_StdItfReq>
 8006636:	4603      	mov	r3, r0
 8006638:	73fb      	strb	r3, [r7, #15]
      break;
 800663a:	e016      	b.n	800666a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006642:	4619      	mov	r1, r3
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 fc29 	bl	8006e9c <USBD_StdEPReq>
 800664a:	4603      	mov	r3, r0
 800664c:	73fb      	strb	r3, [r7, #15]
      break;
 800664e:	e00c      	b.n	800666a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006656:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800665a:	b2db      	uxtb	r3, r3
 800665c:	4619      	mov	r1, r3
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f001 fdba 	bl	80081d8 <USBD_LL_StallEP>
 8006664:	4603      	mov	r3, r0
 8006666:	73fb      	strb	r3, [r7, #15]
      break;
 8006668:	bf00      	nop
  }

  return ret;
 800666a:	7bfb      	ldrb	r3, [r7, #15]
}
 800666c:	4618      	mov	r0, r3
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b086      	sub	sp, #24
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	460b      	mov	r3, r1
 800667e:	607a      	str	r2, [r7, #4]
 8006680:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006682:	2300      	movs	r3, #0
 8006684:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006686:	7afb      	ldrb	r3, [r7, #11]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d16e      	bne.n	800676a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006692:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800669a:	2b03      	cmp	r3, #3
 800669c:	f040 8098 	bne.w	80067d0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	689a      	ldr	r2, [r3, #8]
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d913      	bls.n	80066d4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	689a      	ldr	r2, [r3, #8]
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	1ad2      	subs	r2, r2, r3
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	68da      	ldr	r2, [r3, #12]
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	4293      	cmp	r3, r2
 80066c4:	bf28      	it	cs
 80066c6:	4613      	movcs	r3, r2
 80066c8:	461a      	mov	r2, r3
 80066ca:	6879      	ldr	r1, [r7, #4]
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f001 f984 	bl	80079da <USBD_CtlContinueRx>
 80066d2:	e07d      	b.n	80067d0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80066da:	f003 031f 	and.w	r3, r3, #31
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d014      	beq.n	800670c <USBD_LL_DataOutStage+0x98>
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d81d      	bhi.n	8006722 <USBD_LL_DataOutStage+0xae>
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <USBD_LL_DataOutStage+0x7c>
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d003      	beq.n	80066f6 <USBD_LL_DataOutStage+0x82>
 80066ee:	e018      	b.n	8006722 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80066f0:	2300      	movs	r3, #0
 80066f2:	75bb      	strb	r3, [r7, #22]
            break;
 80066f4:	e018      	b.n	8006728 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	4619      	mov	r1, r3
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f000 fa5e 	bl	8006bc2 <USBD_CoreFindIF>
 8006706:	4603      	mov	r3, r0
 8006708:	75bb      	strb	r3, [r7, #22]
            break;
 800670a:	e00d      	b.n	8006728 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006712:	b2db      	uxtb	r3, r3
 8006714:	4619      	mov	r1, r3
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f000 fa60 	bl	8006bdc <USBD_CoreFindEP>
 800671c:	4603      	mov	r3, r0
 800671e:	75bb      	strb	r3, [r7, #22]
            break;
 8006720:	e002      	b.n	8006728 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006722:	2300      	movs	r3, #0
 8006724:	75bb      	strb	r3, [r7, #22]
            break;
 8006726:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006728:	7dbb      	ldrb	r3, [r7, #22]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d119      	bne.n	8006762 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b03      	cmp	r3, #3
 8006738:	d113      	bne.n	8006762 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800673a:	7dba      	ldrb	r2, [r7, #22]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	32ae      	adds	r2, #174	; 0xae
 8006740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00b      	beq.n	8006762 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800674a:	7dba      	ldrb	r2, [r7, #22]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006752:	7dba      	ldrb	r2, [r7, #22]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	32ae      	adds	r2, #174	; 0xae
 8006758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f001 f94a 	bl	80079fc <USBD_CtlSendStatus>
 8006768:	e032      	b.n	80067d0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800676a:	7afb      	ldrb	r3, [r7, #11]
 800676c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006770:	b2db      	uxtb	r3, r3
 8006772:	4619      	mov	r1, r3
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f000 fa31 	bl	8006bdc <USBD_CoreFindEP>
 800677a:	4603      	mov	r3, r0
 800677c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800677e:	7dbb      	ldrb	r3, [r7, #22]
 8006780:	2bff      	cmp	r3, #255	; 0xff
 8006782:	d025      	beq.n	80067d0 <USBD_LL_DataOutStage+0x15c>
 8006784:	7dbb      	ldrb	r3, [r7, #22]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d122      	bne.n	80067d0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b03      	cmp	r3, #3
 8006794:	d117      	bne.n	80067c6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006796:	7dba      	ldrb	r2, [r7, #22]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	32ae      	adds	r2, #174	; 0xae
 800679c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00f      	beq.n	80067c6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80067a6:	7dba      	ldrb	r2, [r7, #22]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80067ae:	7dba      	ldrb	r2, [r7, #22]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	32ae      	adds	r2, #174	; 0xae
 80067b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	7afa      	ldrb	r2, [r7, #11]
 80067bc:	4611      	mov	r1, r2
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	4798      	blx	r3
 80067c2:	4603      	mov	r3, r0
 80067c4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80067c6:	7dfb      	ldrb	r3, [r7, #23]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80067cc:	7dfb      	ldrb	r3, [r7, #23]
 80067ce:	e000      	b.n	80067d2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3718      	adds	r7, #24
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b086      	sub	sp, #24
 80067de:	af00      	add	r7, sp, #0
 80067e0:	60f8      	str	r0, [r7, #12]
 80067e2:	460b      	mov	r3, r1
 80067e4:	607a      	str	r2, [r7, #4]
 80067e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80067e8:	7afb      	ldrb	r3, [r7, #11]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d16f      	bne.n	80068ce <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	3314      	adds	r3, #20
 80067f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d15a      	bne.n	80068b4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	689a      	ldr	r2, [r3, #8]
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	429a      	cmp	r2, r3
 8006808:	d914      	bls.n	8006834 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	689a      	ldr	r2, [r3, #8]
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	1ad2      	subs	r2, r2, r3
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	461a      	mov	r2, r3
 800681e:	6879      	ldr	r1, [r7, #4]
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	f001 f8ac 	bl	800797e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006826:	2300      	movs	r3, #0
 8006828:	2200      	movs	r2, #0
 800682a:	2100      	movs	r1, #0
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f001 fd7d 	bl	800832c <USBD_LL_PrepareReceive>
 8006832:	e03f      	b.n	80068b4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	68da      	ldr	r2, [r3, #12]
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	429a      	cmp	r2, r3
 800683e:	d11c      	bne.n	800687a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006848:	429a      	cmp	r2, r3
 800684a:	d316      	bcc.n	800687a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006856:	429a      	cmp	r2, r3
 8006858:	d20f      	bcs.n	800687a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800685a:	2200      	movs	r2, #0
 800685c:	2100      	movs	r1, #0
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f001 f88d 	bl	800797e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800686c:	2300      	movs	r3, #0
 800686e:	2200      	movs	r2, #0
 8006870:	2100      	movs	r1, #0
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f001 fd5a 	bl	800832c <USBD_LL_PrepareReceive>
 8006878:	e01c      	b.n	80068b4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b03      	cmp	r3, #3
 8006884:	d10f      	bne.n	80068a6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d009      	beq.n	80068a6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80068a6:	2180      	movs	r1, #128	; 0x80
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f001 fc95 	bl	80081d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f001 f8b7 	bl	8007a22 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d03a      	beq.n	8006934 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f7ff fe42 	bl	8006548 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80068cc:	e032      	b.n	8006934 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80068ce:	7afb      	ldrb	r3, [r7, #11]
 80068d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	4619      	mov	r1, r3
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f000 f97f 	bl	8006bdc <USBD_CoreFindEP>
 80068de:	4603      	mov	r3, r0
 80068e0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068e2:	7dfb      	ldrb	r3, [r7, #23]
 80068e4:	2bff      	cmp	r3, #255	; 0xff
 80068e6:	d025      	beq.n	8006934 <USBD_LL_DataInStage+0x15a>
 80068e8:	7dfb      	ldrb	r3, [r7, #23]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d122      	bne.n	8006934 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b03      	cmp	r3, #3
 80068f8:	d11c      	bne.n	8006934 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80068fa:	7dfa      	ldrb	r2, [r7, #23]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	32ae      	adds	r2, #174	; 0xae
 8006900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d014      	beq.n	8006934 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800690a:	7dfa      	ldrb	r2, [r7, #23]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006912:	7dfa      	ldrb	r2, [r7, #23]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	32ae      	adds	r2, #174	; 0xae
 8006918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	7afa      	ldrb	r2, [r7, #11]
 8006920:	4611      	mov	r1, r2
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	4798      	blx	r3
 8006926:	4603      	mov	r3, r0
 8006928:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800692a:	7dbb      	ldrb	r3, [r7, #22]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d001      	beq.n	8006934 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006930:	7dbb      	ldrb	r3, [r7, #22]
 8006932:	e000      	b.n	8006936 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3718      	adds	r7, #24
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b084      	sub	sp, #16
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006946:	2300      	movs	r3, #0
 8006948:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006976:	2b00      	cmp	r3, #0
 8006978:	d014      	beq.n	80069a4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00e      	beq.n	80069a4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	6852      	ldr	r2, [r2, #4]
 8006992:	b2d2      	uxtb	r2, r2
 8006994:	4611      	mov	r1, r2
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	4798      	blx	r3
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d001      	beq.n	80069a4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80069a0:	2303      	movs	r3, #3
 80069a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069a4:	2340      	movs	r3, #64	; 0x40
 80069a6:	2200      	movs	r2, #0
 80069a8:	2100      	movs	r1, #0
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f001 fbcf 	bl	800814e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2240      	movs	r2, #64	; 0x40
 80069bc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069c0:	2340      	movs	r3, #64	; 0x40
 80069c2:	2200      	movs	r2, #0
 80069c4:	2180      	movs	r1, #128	; 0x80
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f001 fbc1 	bl	800814e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2240      	movs	r2, #64	; 0x40
 80069d6:	621a      	str	r2, [r3, #32]

  return ret;
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80069e2:	b480      	push	{r7}
 80069e4:	b083      	sub	sp, #12
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
 80069ea:	460b      	mov	r3, r1
 80069ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	78fa      	ldrb	r2, [r7, #3]
 80069f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b083      	sub	sp, #12
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a10:	b2da      	uxtb	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2204      	movs	r2, #4
 8006a1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	370c      	adds	r7, #12
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b083      	sub	sp, #12
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b04      	cmp	r3, #4
 8006a40:	d106      	bne.n	8006a50 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006a48:	b2da      	uxtb	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	370c      	adds	r7, #12
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr

08006a5e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b082      	sub	sp, #8
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	2b03      	cmp	r3, #3
 8006a70:	d110      	bne.n	8006a94 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00b      	beq.n	8006a94 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a82:	69db      	ldr	r3, [r3, #28]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d005      	beq.n	8006a94 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a8e:	69db      	ldr	r3, [r3, #28]
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3708      	adds	r7, #8
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b082      	sub	sp, #8
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	32ae      	adds	r2, #174	; 0xae
 8006ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d101      	bne.n	8006ac0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e01c      	b.n	8006afa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b03      	cmp	r3, #3
 8006aca:	d115      	bne.n	8006af8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	32ae      	adds	r2, #174	; 0xae
 8006ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ada:	6a1b      	ldr	r3, [r3, #32]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00b      	beq.n	8006af8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	32ae      	adds	r2, #174	; 0xae
 8006aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aee:	6a1b      	ldr	r3, [r3, #32]
 8006af0:	78fa      	ldrb	r2, [r7, #3]
 8006af2:	4611      	mov	r1, r2
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b082      	sub	sp, #8
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	32ae      	adds	r2, #174	; 0xae
 8006b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006b20:	2303      	movs	r3, #3
 8006b22:	e01c      	b.n	8006b5e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	2b03      	cmp	r3, #3
 8006b2e:	d115      	bne.n	8006b5c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	32ae      	adds	r2, #174	; 0xae
 8006b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00b      	beq.n	8006b5c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	32ae      	adds	r2, #174	; 0xae
 8006b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b54:	78fa      	ldrb	r2, [r7, #3]
 8006b56:	4611      	mov	r1, r2
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3708      	adds	r7, #8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006b66:	b480      	push	{r7}
 8006b68:	b083      	sub	sp, #12
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006b84:	2300      	movs	r3, #0
 8006b86:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00e      	beq.n	8006bb8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	6852      	ldr	r2, [r2, #4]
 8006ba6:	b2d2      	uxtb	r2, r2
 8006ba8:	4611      	mov	r1, r2
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	4798      	blx	r3
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d001      	beq.n	8006bb8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b083      	sub	sp, #12
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	460b      	mov	r3, r1
 8006bcc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006bce:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	460b      	mov	r3, r1
 8006be6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006be8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	370c      	adds	r7, #12
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr

08006bf6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b086      	sub	sp, #24
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
 8006bfe:	460b      	mov	r3, r1
 8006c00:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	885b      	ldrh	r3, [r3, #2]
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d920      	bls.n	8006c60 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006c26:	e013      	b.n	8006c50 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006c28:	f107 030a 	add.w	r3, r7, #10
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	6978      	ldr	r0, [r7, #20]
 8006c30:	f000 f81b 	bl	8006c6a <USBD_GetNextDesc>
 8006c34:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	785b      	ldrb	r3, [r3, #1]
 8006c3a:	2b05      	cmp	r3, #5
 8006c3c:	d108      	bne.n	8006c50 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	789b      	ldrb	r3, [r3, #2]
 8006c46:	78fa      	ldrb	r2, [r7, #3]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d008      	beq.n	8006c5e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	885b      	ldrh	r3, [r3, #2]
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	897b      	ldrh	r3, [r7, #10]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d8e5      	bhi.n	8006c28 <USBD_GetEpDesc+0x32>
 8006c5c:	e000      	b.n	8006c60 <USBD_GetEpDesc+0x6a>
          break;
 8006c5e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006c60:	693b      	ldr	r3, [r7, #16]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3718      	adds	r7, #24
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b085      	sub	sp, #20
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	881a      	ldrh	r2, [r3, #0]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	4413      	add	r3, r2
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4413      	add	r3, r2
 8006c94:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006c96:	68fb      	ldr	r3, [r7, #12]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3714      	adds	r7, #20
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b087      	sub	sp, #28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006cc2:	8a3b      	ldrh	r3, [r7, #16]
 8006cc4:	021b      	lsls	r3, r3, #8
 8006cc6:	b21a      	sxth	r2, r3
 8006cc8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	b21b      	sxth	r3, r3
 8006cd0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006cd2:	89fb      	ldrh	r3, [r7, #14]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	371c      	adds	r7, #28
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cea:	2300      	movs	r3, #0
 8006cec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cf6:	2b40      	cmp	r3, #64	; 0x40
 8006cf8:	d005      	beq.n	8006d06 <USBD_StdDevReq+0x26>
 8006cfa:	2b40      	cmp	r3, #64	; 0x40
 8006cfc:	d857      	bhi.n	8006dae <USBD_StdDevReq+0xce>
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00f      	beq.n	8006d22 <USBD_StdDevReq+0x42>
 8006d02:	2b20      	cmp	r3, #32
 8006d04:	d153      	bne.n	8006dae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	32ae      	adds	r2, #174	; 0xae
 8006d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	6839      	ldr	r1, [r7, #0]
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	4798      	blx	r3
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d20:	e04a      	b.n	8006db8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	785b      	ldrb	r3, [r3, #1]
 8006d26:	2b09      	cmp	r3, #9
 8006d28:	d83b      	bhi.n	8006da2 <USBD_StdDevReq+0xc2>
 8006d2a:	a201      	add	r2, pc, #4	; (adr r2, 8006d30 <USBD_StdDevReq+0x50>)
 8006d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d30:	08006d85 	.word	0x08006d85
 8006d34:	08006d99 	.word	0x08006d99
 8006d38:	08006da3 	.word	0x08006da3
 8006d3c:	08006d8f 	.word	0x08006d8f
 8006d40:	08006da3 	.word	0x08006da3
 8006d44:	08006d63 	.word	0x08006d63
 8006d48:	08006d59 	.word	0x08006d59
 8006d4c:	08006da3 	.word	0x08006da3
 8006d50:	08006d7b 	.word	0x08006d7b
 8006d54:	08006d6d 	.word	0x08006d6d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006d58:	6839      	ldr	r1, [r7, #0]
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 fa3c 	bl	80071d8 <USBD_GetDescriptor>
          break;
 8006d60:	e024      	b.n	8006dac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fba1 	bl	80074ac <USBD_SetAddress>
          break;
 8006d6a:	e01f      	b.n	8006dac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006d6c:	6839      	ldr	r1, [r7, #0]
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 fbe0 	bl	8007534 <USBD_SetConfig>
 8006d74:	4603      	mov	r3, r0
 8006d76:	73fb      	strb	r3, [r7, #15]
          break;
 8006d78:	e018      	b.n	8006dac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006d7a:	6839      	ldr	r1, [r7, #0]
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fc83 	bl	8007688 <USBD_GetConfig>
          break;
 8006d82:	e013      	b.n	8006dac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006d84:	6839      	ldr	r1, [r7, #0]
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fcb4 	bl	80076f4 <USBD_GetStatus>
          break;
 8006d8c:	e00e      	b.n	8006dac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006d8e:	6839      	ldr	r1, [r7, #0]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fce3 	bl	800775c <USBD_SetFeature>
          break;
 8006d96:	e009      	b.n	8006dac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006d98:	6839      	ldr	r1, [r7, #0]
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 fd07 	bl	80077ae <USBD_ClrFeature>
          break;
 8006da0:	e004      	b.n	8006dac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006da2:	6839      	ldr	r1, [r7, #0]
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fd5e 	bl	8007866 <USBD_CtlError>
          break;
 8006daa:	bf00      	nop
      }
      break;
 8006dac:	e004      	b.n	8006db8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006dae:	6839      	ldr	r1, [r7, #0]
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 fd58 	bl	8007866 <USBD_CtlError>
      break;
 8006db6:	bf00      	nop
  }

  return ret;
 8006db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop

08006dc4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dda:	2b40      	cmp	r3, #64	; 0x40
 8006ddc:	d005      	beq.n	8006dea <USBD_StdItfReq+0x26>
 8006dde:	2b40      	cmp	r3, #64	; 0x40
 8006de0:	d852      	bhi.n	8006e88 <USBD_StdItfReq+0xc4>
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d001      	beq.n	8006dea <USBD_StdItfReq+0x26>
 8006de6:	2b20      	cmp	r3, #32
 8006de8:	d14e      	bne.n	8006e88 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	3b01      	subs	r3, #1
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d840      	bhi.n	8006e7a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	889b      	ldrh	r3, [r3, #4]
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d836      	bhi.n	8006e70 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	889b      	ldrh	r3, [r3, #4]
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	4619      	mov	r1, r3
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7ff fed9 	bl	8006bc2 <USBD_CoreFindIF>
 8006e10:	4603      	mov	r3, r0
 8006e12:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e14:	7bbb      	ldrb	r3, [r7, #14]
 8006e16:	2bff      	cmp	r3, #255	; 0xff
 8006e18:	d01d      	beq.n	8006e56 <USBD_StdItfReq+0x92>
 8006e1a:	7bbb      	ldrb	r3, [r7, #14]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d11a      	bne.n	8006e56 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006e20:	7bba      	ldrb	r2, [r7, #14]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	32ae      	adds	r2, #174	; 0xae
 8006e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00f      	beq.n	8006e50 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006e30:	7bba      	ldrb	r2, [r7, #14]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006e38:	7bba      	ldrb	r2, [r7, #14]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	32ae      	adds	r2, #174	; 0xae
 8006e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	6839      	ldr	r1, [r7, #0]
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	4798      	blx	r3
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006e4e:	e004      	b.n	8006e5a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006e50:	2303      	movs	r3, #3
 8006e52:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006e54:	e001      	b.n	8006e5a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006e56:	2303      	movs	r3, #3
 8006e58:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	88db      	ldrh	r3, [r3, #6]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d110      	bne.n	8006e84 <USBD_StdItfReq+0xc0>
 8006e62:	7bfb      	ldrb	r3, [r7, #15]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d10d      	bne.n	8006e84 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 fdc7 	bl	80079fc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006e6e:	e009      	b.n	8006e84 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006e70:	6839      	ldr	r1, [r7, #0]
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 fcf7 	bl	8007866 <USBD_CtlError>
          break;
 8006e78:	e004      	b.n	8006e84 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006e7a:	6839      	ldr	r1, [r7, #0]
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fcf2 	bl	8007866 <USBD_CtlError>
          break;
 8006e82:	e000      	b.n	8006e86 <USBD_StdItfReq+0xc2>
          break;
 8006e84:	bf00      	nop
      }
      break;
 8006e86:	e004      	b.n	8006e92 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006e88:	6839      	ldr	r1, [r7, #0]
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fceb 	bl	8007866 <USBD_CtlError>
      break;
 8006e90:	bf00      	nop
  }

  return ret;
 8006e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	889b      	ldrh	r3, [r3, #4]
 8006eae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006eb8:	2b40      	cmp	r3, #64	; 0x40
 8006eba:	d007      	beq.n	8006ecc <USBD_StdEPReq+0x30>
 8006ebc:	2b40      	cmp	r3, #64	; 0x40
 8006ebe:	f200 817f 	bhi.w	80071c0 <USBD_StdEPReq+0x324>
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d02a      	beq.n	8006f1c <USBD_StdEPReq+0x80>
 8006ec6:	2b20      	cmp	r3, #32
 8006ec8:	f040 817a 	bne.w	80071c0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006ecc:	7bbb      	ldrb	r3, [r7, #14]
 8006ece:	4619      	mov	r1, r3
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f7ff fe83 	bl	8006bdc <USBD_CoreFindEP>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006eda:	7b7b      	ldrb	r3, [r7, #13]
 8006edc:	2bff      	cmp	r3, #255	; 0xff
 8006ede:	f000 8174 	beq.w	80071ca <USBD_StdEPReq+0x32e>
 8006ee2:	7b7b      	ldrb	r3, [r7, #13]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f040 8170 	bne.w	80071ca <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006eea:	7b7a      	ldrb	r2, [r7, #13]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006ef2:	7b7a      	ldrb	r2, [r7, #13]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	32ae      	adds	r2, #174	; 0xae
 8006ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f000 8163 	beq.w	80071ca <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006f04:	7b7a      	ldrb	r2, [r7, #13]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	32ae      	adds	r2, #174	; 0xae
 8006f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	6839      	ldr	r1, [r7, #0]
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	4798      	blx	r3
 8006f16:	4603      	mov	r3, r0
 8006f18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006f1a:	e156      	b.n	80071ca <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	785b      	ldrb	r3, [r3, #1]
 8006f20:	2b03      	cmp	r3, #3
 8006f22:	d008      	beq.n	8006f36 <USBD_StdEPReq+0x9a>
 8006f24:	2b03      	cmp	r3, #3
 8006f26:	f300 8145 	bgt.w	80071b4 <USBD_StdEPReq+0x318>
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f000 809b 	beq.w	8007066 <USBD_StdEPReq+0x1ca>
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d03c      	beq.n	8006fae <USBD_StdEPReq+0x112>
 8006f34:	e13e      	b.n	80071b4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d002      	beq.n	8006f48 <USBD_StdEPReq+0xac>
 8006f42:	2b03      	cmp	r3, #3
 8006f44:	d016      	beq.n	8006f74 <USBD_StdEPReq+0xd8>
 8006f46:	e02c      	b.n	8006fa2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f48:	7bbb      	ldrb	r3, [r7, #14]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00d      	beq.n	8006f6a <USBD_StdEPReq+0xce>
 8006f4e:	7bbb      	ldrb	r3, [r7, #14]
 8006f50:	2b80      	cmp	r3, #128	; 0x80
 8006f52:	d00a      	beq.n	8006f6a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f54:	7bbb      	ldrb	r3, [r7, #14]
 8006f56:	4619      	mov	r1, r3
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f001 f93d 	bl	80081d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f5e:	2180      	movs	r1, #128	; 0x80
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f001 f939 	bl	80081d8 <USBD_LL_StallEP>
 8006f66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f68:	e020      	b.n	8006fac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006f6a:	6839      	ldr	r1, [r7, #0]
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 fc7a 	bl	8007866 <USBD_CtlError>
              break;
 8006f72:	e01b      	b.n	8006fac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	885b      	ldrh	r3, [r3, #2]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10e      	bne.n	8006f9a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006f7c:	7bbb      	ldrb	r3, [r7, #14]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00b      	beq.n	8006f9a <USBD_StdEPReq+0xfe>
 8006f82:	7bbb      	ldrb	r3, [r7, #14]
 8006f84:	2b80      	cmp	r3, #128	; 0x80
 8006f86:	d008      	beq.n	8006f9a <USBD_StdEPReq+0xfe>
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	88db      	ldrh	r3, [r3, #6]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d104      	bne.n	8006f9a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f90:	7bbb      	ldrb	r3, [r7, #14]
 8006f92:	4619      	mov	r1, r3
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f001 f91f 	bl	80081d8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fd2e 	bl	80079fc <USBD_CtlSendStatus>

              break;
 8006fa0:	e004      	b.n	8006fac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006fa2:	6839      	ldr	r1, [r7, #0]
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fc5e 	bl	8007866 <USBD_CtlError>
              break;
 8006faa:	bf00      	nop
          }
          break;
 8006fac:	e107      	b.n	80071be <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d002      	beq.n	8006fc0 <USBD_StdEPReq+0x124>
 8006fba:	2b03      	cmp	r3, #3
 8006fbc:	d016      	beq.n	8006fec <USBD_StdEPReq+0x150>
 8006fbe:	e04b      	b.n	8007058 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fc0:	7bbb      	ldrb	r3, [r7, #14]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00d      	beq.n	8006fe2 <USBD_StdEPReq+0x146>
 8006fc6:	7bbb      	ldrb	r3, [r7, #14]
 8006fc8:	2b80      	cmp	r3, #128	; 0x80
 8006fca:	d00a      	beq.n	8006fe2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006fcc:	7bbb      	ldrb	r3, [r7, #14]
 8006fce:	4619      	mov	r1, r3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f001 f901 	bl	80081d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006fd6:	2180      	movs	r1, #128	; 0x80
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f001 f8fd 	bl	80081d8 <USBD_LL_StallEP>
 8006fde:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006fe0:	e040      	b.n	8007064 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006fe2:	6839      	ldr	r1, [r7, #0]
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fc3e 	bl	8007866 <USBD_CtlError>
              break;
 8006fea:	e03b      	b.n	8007064 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	885b      	ldrh	r3, [r3, #2]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d136      	bne.n	8007062 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006ff4:	7bbb      	ldrb	r3, [r7, #14]
 8006ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d004      	beq.n	8007008 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006ffe:	7bbb      	ldrb	r3, [r7, #14]
 8007000:	4619      	mov	r1, r3
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f001 f907 	bl	8008216 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 fcf7 	bl	80079fc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800700e:	7bbb      	ldrb	r3, [r7, #14]
 8007010:	4619      	mov	r1, r3
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f7ff fde2 	bl	8006bdc <USBD_CoreFindEP>
 8007018:	4603      	mov	r3, r0
 800701a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800701c:	7b7b      	ldrb	r3, [r7, #13]
 800701e:	2bff      	cmp	r3, #255	; 0xff
 8007020:	d01f      	beq.n	8007062 <USBD_StdEPReq+0x1c6>
 8007022:	7b7b      	ldrb	r3, [r7, #13]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d11c      	bne.n	8007062 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007028:	7b7a      	ldrb	r2, [r7, #13]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007030:	7b7a      	ldrb	r2, [r7, #13]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	32ae      	adds	r2, #174	; 0xae
 8007036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d010      	beq.n	8007062 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007040:	7b7a      	ldrb	r2, [r7, #13]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	32ae      	adds	r2, #174	; 0xae
 8007046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	6839      	ldr	r1, [r7, #0]
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	4798      	blx	r3
 8007052:	4603      	mov	r3, r0
 8007054:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007056:	e004      	b.n	8007062 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007058:	6839      	ldr	r1, [r7, #0]
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fc03 	bl	8007866 <USBD_CtlError>
              break;
 8007060:	e000      	b.n	8007064 <USBD_StdEPReq+0x1c8>
              break;
 8007062:	bf00      	nop
          }
          break;
 8007064:	e0ab      	b.n	80071be <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800706c:	b2db      	uxtb	r3, r3
 800706e:	2b02      	cmp	r3, #2
 8007070:	d002      	beq.n	8007078 <USBD_StdEPReq+0x1dc>
 8007072:	2b03      	cmp	r3, #3
 8007074:	d032      	beq.n	80070dc <USBD_StdEPReq+0x240>
 8007076:	e097      	b.n	80071a8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007078:	7bbb      	ldrb	r3, [r7, #14]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d007      	beq.n	800708e <USBD_StdEPReq+0x1f2>
 800707e:	7bbb      	ldrb	r3, [r7, #14]
 8007080:	2b80      	cmp	r3, #128	; 0x80
 8007082:	d004      	beq.n	800708e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007084:	6839      	ldr	r1, [r7, #0]
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 fbed 	bl	8007866 <USBD_CtlError>
                break;
 800708c:	e091      	b.n	80071b2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800708e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007092:	2b00      	cmp	r3, #0
 8007094:	da0b      	bge.n	80070ae <USBD_StdEPReq+0x212>
 8007096:	7bbb      	ldrb	r3, [r7, #14]
 8007098:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800709c:	4613      	mov	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	3310      	adds	r3, #16
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	4413      	add	r3, r2
 80070aa:	3304      	adds	r3, #4
 80070ac:	e00b      	b.n	80070c6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80070ae:	7bbb      	ldrb	r3, [r7, #14]
 80070b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070b4:	4613      	mov	r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	4413      	add	r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	4413      	add	r3, r2
 80070c4:	3304      	adds	r3, #4
 80070c6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	2200      	movs	r2, #0
 80070cc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	2202      	movs	r2, #2
 80070d2:	4619      	mov	r1, r3
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 fc37 	bl	8007948 <USBD_CtlSendData>
              break;
 80070da:	e06a      	b.n	80071b2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80070dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	da11      	bge.n	8007108 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80070e4:	7bbb      	ldrb	r3, [r7, #14]
 80070e6:	f003 020f 	and.w	r2, r3, #15
 80070ea:	6879      	ldr	r1, [r7, #4]
 80070ec:	4613      	mov	r3, r2
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	4413      	add	r3, r2
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	440b      	add	r3, r1
 80070f6:	3324      	adds	r3, #36	; 0x24
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d117      	bne.n	800712e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80070fe:	6839      	ldr	r1, [r7, #0]
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 fbb0 	bl	8007866 <USBD_CtlError>
                  break;
 8007106:	e054      	b.n	80071b2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007108:	7bbb      	ldrb	r3, [r7, #14]
 800710a:	f003 020f 	and.w	r2, r3, #15
 800710e:	6879      	ldr	r1, [r7, #4]
 8007110:	4613      	mov	r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4413      	add	r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	440b      	add	r3, r1
 800711a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800711e:	881b      	ldrh	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d104      	bne.n	800712e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007124:	6839      	ldr	r1, [r7, #0]
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fb9d 	bl	8007866 <USBD_CtlError>
                  break;
 800712c:	e041      	b.n	80071b2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800712e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007132:	2b00      	cmp	r3, #0
 8007134:	da0b      	bge.n	800714e <USBD_StdEPReq+0x2b2>
 8007136:	7bbb      	ldrb	r3, [r7, #14]
 8007138:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800713c:	4613      	mov	r3, r2
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	3310      	adds	r3, #16
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	4413      	add	r3, r2
 800714a:	3304      	adds	r3, #4
 800714c:	e00b      	b.n	8007166 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800714e:	7bbb      	ldrb	r3, [r7, #14]
 8007150:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007154:	4613      	mov	r3, r2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	4413      	add	r3, r2
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	4413      	add	r3, r2
 8007164:	3304      	adds	r3, #4
 8007166:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007168:	7bbb      	ldrb	r3, [r7, #14]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d002      	beq.n	8007174 <USBD_StdEPReq+0x2d8>
 800716e:	7bbb      	ldrb	r3, [r7, #14]
 8007170:	2b80      	cmp	r3, #128	; 0x80
 8007172:	d103      	bne.n	800717c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	2200      	movs	r2, #0
 8007178:	601a      	str	r2, [r3, #0]
 800717a:	e00e      	b.n	800719a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800717c:	7bbb      	ldrb	r3, [r7, #14]
 800717e:	4619      	mov	r1, r3
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f001 f867 	bl	8008254 <USBD_LL_IsStallEP>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d003      	beq.n	8007194 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	2201      	movs	r2, #1
 8007190:	601a      	str	r2, [r3, #0]
 8007192:	e002      	b.n	800719a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	2200      	movs	r2, #0
 8007198:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	2202      	movs	r2, #2
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 fbd1 	bl	8007948 <USBD_CtlSendData>
              break;
 80071a6:	e004      	b.n	80071b2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80071a8:	6839      	ldr	r1, [r7, #0]
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fb5b 	bl	8007866 <USBD_CtlError>
              break;
 80071b0:	bf00      	nop
          }
          break;
 80071b2:	e004      	b.n	80071be <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80071b4:	6839      	ldr	r1, [r7, #0]
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fb55 	bl	8007866 <USBD_CtlError>
          break;
 80071bc:	bf00      	nop
      }
      break;
 80071be:	e005      	b.n	80071cc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80071c0:	6839      	ldr	r1, [r7, #0]
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fb4f 	bl	8007866 <USBD_CtlError>
      break;
 80071c8:	e000      	b.n	80071cc <USBD_StdEPReq+0x330>
      break;
 80071ca:	bf00      	nop
  }

  return ret;
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
	...

080071d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80071e2:	2300      	movs	r3, #0
 80071e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80071e6:	2300      	movs	r3, #0
 80071e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80071ea:	2300      	movs	r3, #0
 80071ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	885b      	ldrh	r3, [r3, #2]
 80071f2:	0a1b      	lsrs	r3, r3, #8
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	3b01      	subs	r3, #1
 80071f8:	2b06      	cmp	r3, #6
 80071fa:	f200 8128 	bhi.w	800744e <USBD_GetDescriptor+0x276>
 80071fe:	a201      	add	r2, pc, #4	; (adr r2, 8007204 <USBD_GetDescriptor+0x2c>)
 8007200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007204:	08007221 	.word	0x08007221
 8007208:	08007239 	.word	0x08007239
 800720c:	08007279 	.word	0x08007279
 8007210:	0800744f 	.word	0x0800744f
 8007214:	0800744f 	.word	0x0800744f
 8007218:	080073ef 	.word	0x080073ef
 800721c:	0800741b 	.word	0x0800741b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	7c12      	ldrb	r2, [r2, #16]
 800722c:	f107 0108 	add.w	r1, r7, #8
 8007230:	4610      	mov	r0, r2
 8007232:	4798      	blx	r3
 8007234:	60f8      	str	r0, [r7, #12]
      break;
 8007236:	e112      	b.n	800745e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	7c1b      	ldrb	r3, [r3, #16]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d10d      	bne.n	800725c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007248:	f107 0208 	add.w	r2, r7, #8
 800724c:	4610      	mov	r0, r2
 800724e:	4798      	blx	r3
 8007250:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	3301      	adds	r3, #1
 8007256:	2202      	movs	r2, #2
 8007258:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800725a:	e100      	b.n	800745e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007264:	f107 0208 	add.w	r2, r7, #8
 8007268:	4610      	mov	r0, r2
 800726a:	4798      	blx	r3
 800726c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	3301      	adds	r3, #1
 8007272:	2202      	movs	r2, #2
 8007274:	701a      	strb	r2, [r3, #0]
      break;
 8007276:	e0f2      	b.n	800745e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	885b      	ldrh	r3, [r3, #2]
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b05      	cmp	r3, #5
 8007280:	f200 80ac 	bhi.w	80073dc <USBD_GetDescriptor+0x204>
 8007284:	a201      	add	r2, pc, #4	; (adr r2, 800728c <USBD_GetDescriptor+0xb4>)
 8007286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800728a:	bf00      	nop
 800728c:	080072a5 	.word	0x080072a5
 8007290:	080072d9 	.word	0x080072d9
 8007294:	0800730d 	.word	0x0800730d
 8007298:	08007341 	.word	0x08007341
 800729c:	08007375 	.word	0x08007375
 80072a0:	080073a9 	.word	0x080073a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00b      	beq.n	80072c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	7c12      	ldrb	r2, [r2, #16]
 80072bc:	f107 0108 	add.w	r1, r7, #8
 80072c0:	4610      	mov	r0, r2
 80072c2:	4798      	blx	r3
 80072c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072c6:	e091      	b.n	80073ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072c8:	6839      	ldr	r1, [r7, #0]
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 facb 	bl	8007866 <USBD_CtlError>
            err++;
 80072d0:	7afb      	ldrb	r3, [r7, #11]
 80072d2:	3301      	adds	r3, #1
 80072d4:	72fb      	strb	r3, [r7, #11]
          break;
 80072d6:	e089      	b.n	80073ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00b      	beq.n	80072fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	7c12      	ldrb	r2, [r2, #16]
 80072f0:	f107 0108 	add.w	r1, r7, #8
 80072f4:	4610      	mov	r0, r2
 80072f6:	4798      	blx	r3
 80072f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072fa:	e077      	b.n	80073ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072fc:	6839      	ldr	r1, [r7, #0]
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fab1 	bl	8007866 <USBD_CtlError>
            err++;
 8007304:	7afb      	ldrb	r3, [r7, #11]
 8007306:	3301      	adds	r3, #1
 8007308:	72fb      	strb	r3, [r7, #11]
          break;
 800730a:	e06f      	b.n	80073ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00b      	beq.n	8007330 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	7c12      	ldrb	r2, [r2, #16]
 8007324:	f107 0108 	add.w	r1, r7, #8
 8007328:	4610      	mov	r0, r2
 800732a:	4798      	blx	r3
 800732c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800732e:	e05d      	b.n	80073ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007330:	6839      	ldr	r1, [r7, #0]
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fa97 	bl	8007866 <USBD_CtlError>
            err++;
 8007338:	7afb      	ldrb	r3, [r7, #11]
 800733a:	3301      	adds	r3, #1
 800733c:	72fb      	strb	r3, [r7, #11]
          break;
 800733e:	e055      	b.n	80073ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00b      	beq.n	8007364 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	7c12      	ldrb	r2, [r2, #16]
 8007358:	f107 0108 	add.w	r1, r7, #8
 800735c:	4610      	mov	r0, r2
 800735e:	4798      	blx	r3
 8007360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007362:	e043      	b.n	80073ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007364:	6839      	ldr	r1, [r7, #0]
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fa7d 	bl	8007866 <USBD_CtlError>
            err++;
 800736c:	7afb      	ldrb	r3, [r7, #11]
 800736e:	3301      	adds	r3, #1
 8007370:	72fb      	strb	r3, [r7, #11]
          break;
 8007372:	e03b      	b.n	80073ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800737a:	695b      	ldr	r3, [r3, #20]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00b      	beq.n	8007398 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007386:	695b      	ldr	r3, [r3, #20]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	7c12      	ldrb	r2, [r2, #16]
 800738c:	f107 0108 	add.w	r1, r7, #8
 8007390:	4610      	mov	r0, r2
 8007392:	4798      	blx	r3
 8007394:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007396:	e029      	b.n	80073ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007398:	6839      	ldr	r1, [r7, #0]
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 fa63 	bl	8007866 <USBD_CtlError>
            err++;
 80073a0:	7afb      	ldrb	r3, [r7, #11]
 80073a2:	3301      	adds	r3, #1
 80073a4:	72fb      	strb	r3, [r7, #11]
          break;
 80073a6:	e021      	b.n	80073ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00b      	beq.n	80073cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ba:	699b      	ldr	r3, [r3, #24]
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	7c12      	ldrb	r2, [r2, #16]
 80073c0:	f107 0108 	add.w	r1, r7, #8
 80073c4:	4610      	mov	r0, r2
 80073c6:	4798      	blx	r3
 80073c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073ca:	e00f      	b.n	80073ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073cc:	6839      	ldr	r1, [r7, #0]
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fa49 	bl	8007866 <USBD_CtlError>
            err++;
 80073d4:	7afb      	ldrb	r3, [r7, #11]
 80073d6:	3301      	adds	r3, #1
 80073d8:	72fb      	strb	r3, [r7, #11]
          break;
 80073da:	e007      	b.n	80073ec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80073dc:	6839      	ldr	r1, [r7, #0]
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fa41 	bl	8007866 <USBD_CtlError>
          err++;
 80073e4:	7afb      	ldrb	r3, [r7, #11]
 80073e6:	3301      	adds	r3, #1
 80073e8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80073ea:	bf00      	nop
      }
      break;
 80073ec:	e037      	b.n	800745e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	7c1b      	ldrb	r3, [r3, #16]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d109      	bne.n	800740a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073fe:	f107 0208 	add.w	r2, r7, #8
 8007402:	4610      	mov	r0, r2
 8007404:	4798      	blx	r3
 8007406:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007408:	e029      	b.n	800745e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800740a:	6839      	ldr	r1, [r7, #0]
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 fa2a 	bl	8007866 <USBD_CtlError>
        err++;
 8007412:	7afb      	ldrb	r3, [r7, #11]
 8007414:	3301      	adds	r3, #1
 8007416:	72fb      	strb	r3, [r7, #11]
      break;
 8007418:	e021      	b.n	800745e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	7c1b      	ldrb	r3, [r3, #16]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d10d      	bne.n	800743e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742a:	f107 0208 	add.w	r2, r7, #8
 800742e:	4610      	mov	r0, r2
 8007430:	4798      	blx	r3
 8007432:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	3301      	adds	r3, #1
 8007438:	2207      	movs	r2, #7
 800743a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800743c:	e00f      	b.n	800745e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800743e:	6839      	ldr	r1, [r7, #0]
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 fa10 	bl	8007866 <USBD_CtlError>
        err++;
 8007446:	7afb      	ldrb	r3, [r7, #11]
 8007448:	3301      	adds	r3, #1
 800744a:	72fb      	strb	r3, [r7, #11]
      break;
 800744c:	e007      	b.n	800745e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800744e:	6839      	ldr	r1, [r7, #0]
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 fa08 	bl	8007866 <USBD_CtlError>
      err++;
 8007456:	7afb      	ldrb	r3, [r7, #11]
 8007458:	3301      	adds	r3, #1
 800745a:	72fb      	strb	r3, [r7, #11]
      break;
 800745c:	bf00      	nop
  }

  if (err != 0U)
 800745e:	7afb      	ldrb	r3, [r7, #11]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d11e      	bne.n	80074a2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	88db      	ldrh	r3, [r3, #6]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d016      	beq.n	800749a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800746c:	893b      	ldrh	r3, [r7, #8]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00e      	beq.n	8007490 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	88da      	ldrh	r2, [r3, #6]
 8007476:	893b      	ldrh	r3, [r7, #8]
 8007478:	4293      	cmp	r3, r2
 800747a:	bf28      	it	cs
 800747c:	4613      	movcs	r3, r2
 800747e:	b29b      	uxth	r3, r3
 8007480:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007482:	893b      	ldrh	r3, [r7, #8]
 8007484:	461a      	mov	r2, r3
 8007486:	68f9      	ldr	r1, [r7, #12]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fa5d 	bl	8007948 <USBD_CtlSendData>
 800748e:	e009      	b.n	80074a4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f9e7 	bl	8007866 <USBD_CtlError>
 8007498:	e004      	b.n	80074a4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 faae 	bl	80079fc <USBD_CtlSendStatus>
 80074a0:	e000      	b.n	80074a4 <USBD_GetDescriptor+0x2cc>
    return;
 80074a2:	bf00      	nop
  }
}
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop

080074ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	889b      	ldrh	r3, [r3, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d131      	bne.n	8007522 <USBD_SetAddress+0x76>
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	88db      	ldrh	r3, [r3, #6]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d12d      	bne.n	8007522 <USBD_SetAddress+0x76>
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	885b      	ldrh	r3, [r3, #2]
 80074ca:	2b7f      	cmp	r3, #127	; 0x7f
 80074cc:	d829      	bhi.n	8007522 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	885b      	ldrh	r3, [r3, #2]
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	d104      	bne.n	80074f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80074e6:	6839      	ldr	r1, [r7, #0]
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 f9bc 	bl	8007866 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ee:	e01d      	b.n	800752c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	7bfa      	ldrb	r2, [r7, #15]
 80074f4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80074f8:	7bfb      	ldrb	r3, [r7, #15]
 80074fa:	4619      	mov	r1, r3
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 fed5 	bl	80082ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fa7a 	bl	80079fc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007508:	7bfb      	ldrb	r3, [r7, #15]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d004      	beq.n	8007518 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2202      	movs	r2, #2
 8007512:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007516:	e009      	b.n	800752c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007520:	e004      	b.n	800752c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007522:	6839      	ldr	r1, [r7, #0]
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f99e 	bl	8007866 <USBD_CtlError>
  }
}
 800752a:	bf00      	nop
 800752c:	bf00      	nop
 800752e:	3710      	adds	r7, #16
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800753e:	2300      	movs	r3, #0
 8007540:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	885b      	ldrh	r3, [r3, #2]
 8007546:	b2da      	uxtb	r2, r3
 8007548:	4b4e      	ldr	r3, [pc, #312]	; (8007684 <USBD_SetConfig+0x150>)
 800754a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800754c:	4b4d      	ldr	r3, [pc, #308]	; (8007684 <USBD_SetConfig+0x150>)
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	2b01      	cmp	r3, #1
 8007552:	d905      	bls.n	8007560 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007554:	6839      	ldr	r1, [r7, #0]
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f985 	bl	8007866 <USBD_CtlError>
    return USBD_FAIL;
 800755c:	2303      	movs	r3, #3
 800755e:	e08c      	b.n	800767a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b02      	cmp	r3, #2
 800756a:	d002      	beq.n	8007572 <USBD_SetConfig+0x3e>
 800756c:	2b03      	cmp	r3, #3
 800756e:	d029      	beq.n	80075c4 <USBD_SetConfig+0x90>
 8007570:	e075      	b.n	800765e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007572:	4b44      	ldr	r3, [pc, #272]	; (8007684 <USBD_SetConfig+0x150>)
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d020      	beq.n	80075bc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800757a:	4b42      	ldr	r3, [pc, #264]	; (8007684 <USBD_SetConfig+0x150>)
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	461a      	mov	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007584:	4b3f      	ldr	r3, [pc, #252]	; (8007684 <USBD_SetConfig+0x150>)
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	4619      	mov	r1, r3
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7fe ffe7 	bl	800655e <USBD_SetClassConfig>
 8007590:	4603      	mov	r3, r0
 8007592:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007594:	7bfb      	ldrb	r3, [r7, #15]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d008      	beq.n	80075ac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800759a:	6839      	ldr	r1, [r7, #0]
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f962 	bl	8007866 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2202      	movs	r2, #2
 80075a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80075aa:	e065      	b.n	8007678 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fa25 	bl	80079fc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2203      	movs	r2, #3
 80075b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80075ba:	e05d      	b.n	8007678 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fa1d 	bl	80079fc <USBD_CtlSendStatus>
      break;
 80075c2:	e059      	b.n	8007678 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80075c4:	4b2f      	ldr	r3, [pc, #188]	; (8007684 <USBD_SetConfig+0x150>)
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d112      	bne.n	80075f2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2202      	movs	r2, #2
 80075d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80075d4:	4b2b      	ldr	r3, [pc, #172]	; (8007684 <USBD_SetConfig+0x150>)
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	461a      	mov	r2, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80075de:	4b29      	ldr	r3, [pc, #164]	; (8007684 <USBD_SetConfig+0x150>)
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f7fe ffd6 	bl	8006596 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 fa06 	bl	80079fc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80075f0:	e042      	b.n	8007678 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80075f2:	4b24      	ldr	r3, [pc, #144]	; (8007684 <USBD_SetConfig+0x150>)
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	461a      	mov	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d02a      	beq.n	8007656 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	b2db      	uxtb	r3, r3
 8007606:	4619      	mov	r1, r3
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f7fe ffc4 	bl	8006596 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800760e:	4b1d      	ldr	r3, [pc, #116]	; (8007684 <USBD_SetConfig+0x150>)
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	461a      	mov	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007618:	4b1a      	ldr	r3, [pc, #104]	; (8007684 <USBD_SetConfig+0x150>)
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	4619      	mov	r1, r3
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f7fe ff9d 	bl	800655e <USBD_SetClassConfig>
 8007624:	4603      	mov	r3, r0
 8007626:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007628:	7bfb      	ldrb	r3, [r7, #15]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00f      	beq.n	800764e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800762e:	6839      	ldr	r1, [r7, #0]
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 f918 	bl	8007866 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	b2db      	uxtb	r3, r3
 800763c:	4619      	mov	r1, r3
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7fe ffa9 	bl	8006596 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2202      	movs	r2, #2
 8007648:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800764c:	e014      	b.n	8007678 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f9d4 	bl	80079fc <USBD_CtlSendStatus>
      break;
 8007654:	e010      	b.n	8007678 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 f9d0 	bl	80079fc <USBD_CtlSendStatus>
      break;
 800765c:	e00c      	b.n	8007678 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800765e:	6839      	ldr	r1, [r7, #0]
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 f900 	bl	8007866 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007666:	4b07      	ldr	r3, [pc, #28]	; (8007684 <USBD_SetConfig+0x150>)
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	4619      	mov	r1, r3
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f7fe ff92 	bl	8006596 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007672:	2303      	movs	r3, #3
 8007674:	73fb      	strb	r3, [r7, #15]
      break;
 8007676:	bf00      	nop
  }

  return ret;
 8007678:	7bfb      	ldrb	r3, [r7, #15]
}
 800767a:	4618      	mov	r0, r3
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	2000025c 	.word	0x2000025c

08007688 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	88db      	ldrh	r3, [r3, #6]
 8007696:	2b01      	cmp	r3, #1
 8007698:	d004      	beq.n	80076a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800769a:	6839      	ldr	r1, [r7, #0]
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f8e2 	bl	8007866 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80076a2:	e023      	b.n	80076ec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	dc02      	bgt.n	80076b6 <USBD_GetConfig+0x2e>
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	dc03      	bgt.n	80076bc <USBD_GetConfig+0x34>
 80076b4:	e015      	b.n	80076e2 <USBD_GetConfig+0x5a>
 80076b6:	2b03      	cmp	r3, #3
 80076b8:	d00b      	beq.n	80076d2 <USBD_GetConfig+0x4a>
 80076ba:	e012      	b.n	80076e2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	3308      	adds	r3, #8
 80076c6:	2201      	movs	r2, #1
 80076c8:	4619      	mov	r1, r3
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f93c 	bl	8007948 <USBD_CtlSendData>
        break;
 80076d0:	e00c      	b.n	80076ec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	3304      	adds	r3, #4
 80076d6:	2201      	movs	r2, #1
 80076d8:	4619      	mov	r1, r3
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 f934 	bl	8007948 <USBD_CtlSendData>
        break;
 80076e0:	e004      	b.n	80076ec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80076e2:	6839      	ldr	r1, [r7, #0]
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 f8be 	bl	8007866 <USBD_CtlError>
        break;
 80076ea:	bf00      	nop
}
 80076ec:	bf00      	nop
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007704:	b2db      	uxtb	r3, r3
 8007706:	3b01      	subs	r3, #1
 8007708:	2b02      	cmp	r3, #2
 800770a:	d81e      	bhi.n	800774a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	88db      	ldrh	r3, [r3, #6]
 8007710:	2b02      	cmp	r3, #2
 8007712:	d004      	beq.n	800771e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007714:	6839      	ldr	r1, [r7, #0]
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f8a5 	bl	8007866 <USBD_CtlError>
        break;
 800771c:	e01a      	b.n	8007754 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800772a:	2b00      	cmp	r3, #0
 800772c:	d005      	beq.n	800773a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	f043 0202 	orr.w	r2, r3, #2
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	330c      	adds	r3, #12
 800773e:	2202      	movs	r2, #2
 8007740:	4619      	mov	r1, r3
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f900 	bl	8007948 <USBD_CtlSendData>
      break;
 8007748:	e004      	b.n	8007754 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800774a:	6839      	ldr	r1, [r7, #0]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 f88a 	bl	8007866 <USBD_CtlError>
      break;
 8007752:	bf00      	nop
  }
}
 8007754:	bf00      	nop
 8007756:	3708      	adds	r7, #8
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	885b      	ldrh	r3, [r3, #2]
 800776a:	2b01      	cmp	r3, #1
 800776c:	d107      	bne.n	800777e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2201      	movs	r2, #1
 8007772:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f940 	bl	80079fc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800777c:	e013      	b.n	80077a6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	885b      	ldrh	r3, [r3, #2]
 8007782:	2b02      	cmp	r3, #2
 8007784:	d10b      	bne.n	800779e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	889b      	ldrh	r3, [r3, #4]
 800778a:	0a1b      	lsrs	r3, r3, #8
 800778c:	b29b      	uxth	r3, r3
 800778e:	b2da      	uxtb	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f930 	bl	80079fc <USBD_CtlSendStatus>
}
 800779c:	e003      	b.n	80077a6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800779e:	6839      	ldr	r1, [r7, #0]
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 f860 	bl	8007866 <USBD_CtlError>
}
 80077a6:	bf00      	nop
 80077a8:	3708      	adds	r7, #8
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b082      	sub	sp, #8
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
 80077b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	3b01      	subs	r3, #1
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d80b      	bhi.n	80077de <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	885b      	ldrh	r3, [r3, #2]
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d10c      	bne.n	80077e8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f910 	bl	80079fc <USBD_CtlSendStatus>
      }
      break;
 80077dc:	e004      	b.n	80077e8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80077de:	6839      	ldr	r1, [r7, #0]
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 f840 	bl	8007866 <USBD_CtlError>
      break;
 80077e6:	e000      	b.n	80077ea <USBD_ClrFeature+0x3c>
      break;
 80077e8:	bf00      	nop
  }
}
 80077ea:	bf00      	nop
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b084      	sub	sp, #16
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
 80077fa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	781a      	ldrb	r2, [r3, #0]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	3301      	adds	r3, #1
 800780c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	781a      	ldrb	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	3301      	adds	r3, #1
 800781a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f7ff fa41 	bl	8006ca4 <SWAPBYTE>
 8007822:	4603      	mov	r3, r0
 8007824:	461a      	mov	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	3301      	adds	r3, #1
 800782e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	3301      	adds	r3, #1
 8007834:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f7ff fa34 	bl	8006ca4 <SWAPBYTE>
 800783c:	4603      	mov	r3, r0
 800783e:	461a      	mov	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	3301      	adds	r3, #1
 8007848:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	3301      	adds	r3, #1
 800784e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f7ff fa27 	bl	8006ca4 <SWAPBYTE>
 8007856:	4603      	mov	r3, r0
 8007858:	461a      	mov	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	80da      	strh	r2, [r3, #6]
}
 800785e:	bf00      	nop
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b082      	sub	sp, #8
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
 800786e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007870:	2180      	movs	r1, #128	; 0x80
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fcb0 	bl	80081d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007878:	2100      	movs	r1, #0
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fcac 	bl	80081d8 <USBD_LL_StallEP>
}
 8007880:	bf00      	nop
 8007882:	3708      	adds	r7, #8
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b086      	sub	sp, #24
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007894:	2300      	movs	r3, #0
 8007896:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d036      	beq.n	800790c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80078a2:	6938      	ldr	r0, [r7, #16]
 80078a4:	f000 f836 	bl	8007914 <USBD_GetLen>
 80078a8:	4603      	mov	r3, r0
 80078aa:	3301      	adds	r3, #1
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	005b      	lsls	r3, r3, #1
 80078b0:	b29a      	uxth	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80078b6:	7dfb      	ldrb	r3, [r7, #23]
 80078b8:	68ba      	ldr	r2, [r7, #8]
 80078ba:	4413      	add	r3, r2
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	7812      	ldrb	r2, [r2, #0]
 80078c0:	701a      	strb	r2, [r3, #0]
  idx++;
 80078c2:	7dfb      	ldrb	r3, [r7, #23]
 80078c4:	3301      	adds	r3, #1
 80078c6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80078c8:	7dfb      	ldrb	r3, [r7, #23]
 80078ca:	68ba      	ldr	r2, [r7, #8]
 80078cc:	4413      	add	r3, r2
 80078ce:	2203      	movs	r2, #3
 80078d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80078d2:	7dfb      	ldrb	r3, [r7, #23]
 80078d4:	3301      	adds	r3, #1
 80078d6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80078d8:	e013      	b.n	8007902 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80078da:	7dfb      	ldrb	r3, [r7, #23]
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	4413      	add	r3, r2
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	7812      	ldrb	r2, [r2, #0]
 80078e4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	3301      	adds	r3, #1
 80078ea:	613b      	str	r3, [r7, #16]
    idx++;
 80078ec:	7dfb      	ldrb	r3, [r7, #23]
 80078ee:	3301      	adds	r3, #1
 80078f0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80078f2:	7dfb      	ldrb	r3, [r7, #23]
 80078f4:	68ba      	ldr	r2, [r7, #8]
 80078f6:	4413      	add	r3, r2
 80078f8:	2200      	movs	r2, #0
 80078fa:	701a      	strb	r2, [r3, #0]
    idx++;
 80078fc:	7dfb      	ldrb	r3, [r7, #23]
 80078fe:	3301      	adds	r3, #1
 8007900:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d1e7      	bne.n	80078da <USBD_GetString+0x52>
 800790a:	e000      	b.n	800790e <USBD_GetString+0x86>
    return;
 800790c:	bf00      	nop
  }
}
 800790e:	3718      	adds	r7, #24
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800791c:	2300      	movs	r3, #0
 800791e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007924:	e005      	b.n	8007932 <USBD_GetLen+0x1e>
  {
    len++;
 8007926:	7bfb      	ldrb	r3, [r7, #15]
 8007928:	3301      	adds	r3, #1
 800792a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	3301      	adds	r3, #1
 8007930:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d1f5      	bne.n	8007926 <USBD_GetLen+0x12>
  }

  return len;
 800793a:	7bfb      	ldrb	r3, [r7, #15]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3714      	adds	r7, #20
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2202      	movs	r2, #2
 8007958:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	2100      	movs	r1, #0
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f000 fcbb 	bl	80082ea <USBD_LL_Transmit>

  return USBD_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b084      	sub	sp, #16
 8007982:	af00      	add	r7, sp, #0
 8007984:	60f8      	str	r0, [r7, #12]
 8007986:	60b9      	str	r1, [r7, #8]
 8007988:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	2100      	movs	r1, #0
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f000 fcaa 	bl	80082ea <USBD_LL_Transmit>

  return USBD_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2203      	movs	r2, #3
 80079b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	68ba      	ldr	r2, [r7, #8]
 80079c8:	2100      	movs	r1, #0
 80079ca:	68f8      	ldr	r0, [r7, #12]
 80079cc:	f000 fcae 	bl	800832c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b084      	sub	sp, #16
 80079de:	af00      	add	r7, sp, #0
 80079e0:	60f8      	str	r0, [r7, #12]
 80079e2:	60b9      	str	r1, [r7, #8]
 80079e4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	2100      	movs	r1, #0
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	f000 fc9d 	bl	800832c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3710      	adds	r7, #16
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2204      	movs	r2, #4
 8007a08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	2200      	movs	r2, #0
 8007a10:	2100      	movs	r1, #0
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 fc69 	bl	80082ea <USBD_LL_Transmit>

  return USBD_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3708      	adds	r7, #8
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b082      	sub	sp, #8
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2205      	movs	r2, #5
 8007a2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a32:	2300      	movs	r3, #0
 8007a34:	2200      	movs	r2, #0
 8007a36:	2100      	movs	r1, #0
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 fc77 	bl	800832c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3708      	adds	r7, #8
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	4912      	ldr	r1, [pc, #72]	; (8007a98 <MX_USB_DEVICE_Init+0x50>)
 8007a50:	4812      	ldr	r0, [pc, #72]	; (8007a9c <MX_USB_DEVICE_Init+0x54>)
 8007a52:	f7fe fd07 	bl	8006464 <USBD_Init>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d001      	beq.n	8007a60 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007a5c:	f7f8 fef2 	bl	8000844 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007a60:	490f      	ldr	r1, [pc, #60]	; (8007aa0 <MX_USB_DEVICE_Init+0x58>)
 8007a62:	480e      	ldr	r0, [pc, #56]	; (8007a9c <MX_USB_DEVICE_Init+0x54>)
 8007a64:	f7fe fd2e 	bl	80064c4 <USBD_RegisterClass>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d001      	beq.n	8007a72 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007a6e:	f7f8 fee9 	bl	8000844 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007a72:	490c      	ldr	r1, [pc, #48]	; (8007aa4 <MX_USB_DEVICE_Init+0x5c>)
 8007a74:	4809      	ldr	r0, [pc, #36]	; (8007a9c <MX_USB_DEVICE_Init+0x54>)
 8007a76:	f7fe fc65 	bl	8006344 <USBD_CDC_RegisterInterface>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d001      	beq.n	8007a84 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007a80:	f7f8 fee0 	bl	8000844 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007a84:	4805      	ldr	r0, [pc, #20]	; (8007a9c <MX_USB_DEVICE_Init+0x54>)
 8007a86:	f7fe fd53 	bl	8006530 <USBD_Start>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d001      	beq.n	8007a94 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007a90:	f7f8 fed8 	bl	8000844 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007a94:	bf00      	nop
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	200000ac 	.word	0x200000ac
 8007a9c:	20000260 	.word	0x20000260
 8007aa0:	20000018 	.word	0x20000018
 8007aa4:	20000098 	.word	0x20000098

08007aa8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007aac:	2200      	movs	r2, #0
 8007aae:	4905      	ldr	r1, [pc, #20]	; (8007ac4 <CDC_Init_FS+0x1c>)
 8007ab0:	4805      	ldr	r0, [pc, #20]	; (8007ac8 <CDC_Init_FS+0x20>)
 8007ab2:	f7fe fc61 	bl	8006378 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007ab6:	4905      	ldr	r1, [pc, #20]	; (8007acc <CDC_Init_FS+0x24>)
 8007ab8:	4803      	ldr	r0, [pc, #12]	; (8007ac8 <CDC_Init_FS+0x20>)
 8007aba:	f7fe fc7f 	bl	80063bc <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 8007abe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	2000093c 	.word	0x2000093c
 8007ac8:	20000260 	.word	0x20000260
 8007acc:	2000053c 	.word	0x2000053c

08007ad0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
    return (USBD_OK);
 8007ad4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	6039      	str	r1, [r7, #0]
 8007aea:	71fb      	strb	r3, [r7, #7]
 8007aec:	4613      	mov	r3, r2
 8007aee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
    switch (cmd) {
 8007af0:	79fb      	ldrb	r3, [r7, #7]
 8007af2:	2b23      	cmp	r3, #35	; 0x23
 8007af4:	d84a      	bhi.n	8007b8c <CDC_Control_FS+0xac>
 8007af6:	a201      	add	r2, pc, #4	; (adr r2, 8007afc <CDC_Control_FS+0x1c>)
 8007af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007afc:	08007b8d 	.word	0x08007b8d
 8007b00:	08007b8d 	.word	0x08007b8d
 8007b04:	08007b8d 	.word	0x08007b8d
 8007b08:	08007b8d 	.word	0x08007b8d
 8007b0c:	08007b8d 	.word	0x08007b8d
 8007b10:	08007b8d 	.word	0x08007b8d
 8007b14:	08007b8d 	.word	0x08007b8d
 8007b18:	08007b8d 	.word	0x08007b8d
 8007b1c:	08007b8d 	.word	0x08007b8d
 8007b20:	08007b8d 	.word	0x08007b8d
 8007b24:	08007b8d 	.word	0x08007b8d
 8007b28:	08007b8d 	.word	0x08007b8d
 8007b2c:	08007b8d 	.word	0x08007b8d
 8007b30:	08007b8d 	.word	0x08007b8d
 8007b34:	08007b8d 	.word	0x08007b8d
 8007b38:	08007b8d 	.word	0x08007b8d
 8007b3c:	08007b8d 	.word	0x08007b8d
 8007b40:	08007b8d 	.word	0x08007b8d
 8007b44:	08007b8d 	.word	0x08007b8d
 8007b48:	08007b8d 	.word	0x08007b8d
 8007b4c:	08007b8d 	.word	0x08007b8d
 8007b50:	08007b8d 	.word	0x08007b8d
 8007b54:	08007b8d 	.word	0x08007b8d
 8007b58:	08007b8d 	.word	0x08007b8d
 8007b5c:	08007b8d 	.word	0x08007b8d
 8007b60:	08007b8d 	.word	0x08007b8d
 8007b64:	08007b8d 	.word	0x08007b8d
 8007b68:	08007b8d 	.word	0x08007b8d
 8007b6c:	08007b8d 	.word	0x08007b8d
 8007b70:	08007b8d 	.word	0x08007b8d
 8007b74:	08007b8d 	.word	0x08007b8d
 8007b78:	08007b8d 	.word	0x08007b8d
 8007b7c:	08007b8d 	.word	0x08007b8d
 8007b80:	08007b8d 	.word	0x08007b8d
 8007b84:	08007b8d 	.word	0x08007b8d
 8007b88:	08007b8d 	.word	0x08007b8d
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 8007b8c:	bf00      	nop
    }

    return (USBD_OK);
 8007b8e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007ba6:	6879      	ldr	r1, [r7, #4]
 8007ba8:	4805      	ldr	r0, [pc, #20]	; (8007bc0 <CDC_Receive_FS+0x24>)
 8007baa:	f7fe fc07 	bl	80063bc <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007bae:	4804      	ldr	r0, [pc, #16]	; (8007bc0 <CDC_Receive_FS+0x24>)
 8007bb0:	f7fe fc22 	bl	80063f8 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 8007bb4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	20000260 	.word	0x20000260

08007bc4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b087      	sub	sp, #28
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007bd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	371c      	adds	r7, #28
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
	...

08007be8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	4603      	mov	r3, r0
 8007bf0:	6039      	str	r1, [r7, #0]
 8007bf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	2212      	movs	r2, #18
 8007bf8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007bfa:	4b03      	ldr	r3, [pc, #12]	; (8007c08 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr
 8007c08:	200000c8 	.word	0x200000c8

08007c0c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	4603      	mov	r3, r0
 8007c14:	6039      	str	r1, [r7, #0]
 8007c16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	2204      	movs	r2, #4
 8007c1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007c1e:	4b03      	ldr	r3, [pc, #12]	; (8007c2c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr
 8007c2c:	200000dc 	.word	0x200000dc

08007c30 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	4603      	mov	r3, r0
 8007c38:	6039      	str	r1, [r7, #0]
 8007c3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c3c:	79fb      	ldrb	r3, [r7, #7]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d105      	bne.n	8007c4e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c42:	683a      	ldr	r2, [r7, #0]
 8007c44:	4907      	ldr	r1, [pc, #28]	; (8007c64 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c46:	4808      	ldr	r0, [pc, #32]	; (8007c68 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c48:	f7ff fe1e 	bl	8007888 <USBD_GetString>
 8007c4c:	e004      	b.n	8007c58 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c4e:	683a      	ldr	r2, [r7, #0]
 8007c50:	4904      	ldr	r1, [pc, #16]	; (8007c64 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c52:	4805      	ldr	r0, [pc, #20]	; (8007c68 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c54:	f7ff fe18 	bl	8007888 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c58:	4b02      	ldr	r3, [pc, #8]	; (8007c64 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3708      	adds	r7, #8
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	20000d3c 	.word	0x20000d3c
 8007c68:	0800848c 	.word	0x0800848c

08007c6c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	4603      	mov	r3, r0
 8007c74:	6039      	str	r1, [r7, #0]
 8007c76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007c78:	683a      	ldr	r2, [r7, #0]
 8007c7a:	4904      	ldr	r1, [pc, #16]	; (8007c8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007c7c:	4804      	ldr	r0, [pc, #16]	; (8007c90 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007c7e:	f7ff fe03 	bl	8007888 <USBD_GetString>
  return USBD_StrDesc;
 8007c82:	4b02      	ldr	r3, [pc, #8]	; (8007c8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3708      	adds	r7, #8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	20000d3c 	.word	0x20000d3c
 8007c90:	080084a4 	.word	0x080084a4

08007c94 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	6039      	str	r1, [r7, #0]
 8007c9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	221a      	movs	r2, #26
 8007ca4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007ca6:	f000 f843 	bl	8007d30 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007caa:	4b02      	ldr	r3, [pc, #8]	; (8007cb4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3708      	adds	r7, #8
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	200000e0 	.word	0x200000e0

08007cb8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	6039      	str	r1, [r7, #0]
 8007cc2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007cc4:	79fb      	ldrb	r3, [r7, #7]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d105      	bne.n	8007cd6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007cca:	683a      	ldr	r2, [r7, #0]
 8007ccc:	4907      	ldr	r1, [pc, #28]	; (8007cec <USBD_FS_ConfigStrDescriptor+0x34>)
 8007cce:	4808      	ldr	r0, [pc, #32]	; (8007cf0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007cd0:	f7ff fdda 	bl	8007888 <USBD_GetString>
 8007cd4:	e004      	b.n	8007ce0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007cd6:	683a      	ldr	r2, [r7, #0]
 8007cd8:	4904      	ldr	r1, [pc, #16]	; (8007cec <USBD_FS_ConfigStrDescriptor+0x34>)
 8007cda:	4805      	ldr	r0, [pc, #20]	; (8007cf0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007cdc:	f7ff fdd4 	bl	8007888 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ce0:	4b02      	ldr	r3, [pc, #8]	; (8007cec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3708      	adds	r7, #8
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	20000d3c 	.word	0x20000d3c
 8007cf0:	080084b8 	.word	0x080084b8

08007cf4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	6039      	str	r1, [r7, #0]
 8007cfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d00:	79fb      	ldrb	r3, [r7, #7]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d105      	bne.n	8007d12 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d06:	683a      	ldr	r2, [r7, #0]
 8007d08:	4907      	ldr	r1, [pc, #28]	; (8007d28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d0a:	4808      	ldr	r0, [pc, #32]	; (8007d2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d0c:	f7ff fdbc 	bl	8007888 <USBD_GetString>
 8007d10:	e004      	b.n	8007d1c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d12:	683a      	ldr	r2, [r7, #0]
 8007d14:	4904      	ldr	r1, [pc, #16]	; (8007d28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d16:	4805      	ldr	r0, [pc, #20]	; (8007d2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d18:	f7ff fdb6 	bl	8007888 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d1c:	4b02      	ldr	r3, [pc, #8]	; (8007d28 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	20000d3c 	.word	0x20000d3c
 8007d2c:	080084c4 	.word	0x080084c4

08007d30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007d36:	4b0f      	ldr	r3, [pc, #60]	; (8007d74 <Get_SerialNum+0x44>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007d3c:	4b0e      	ldr	r3, [pc, #56]	; (8007d78 <Get_SerialNum+0x48>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007d42:	4b0e      	ldr	r3, [pc, #56]	; (8007d7c <Get_SerialNum+0x4c>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d009      	beq.n	8007d6a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007d56:	2208      	movs	r2, #8
 8007d58:	4909      	ldr	r1, [pc, #36]	; (8007d80 <Get_SerialNum+0x50>)
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f000 f814 	bl	8007d88 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007d60:	2204      	movs	r2, #4
 8007d62:	4908      	ldr	r1, [pc, #32]	; (8007d84 <Get_SerialNum+0x54>)
 8007d64:	68b8      	ldr	r0, [r7, #8]
 8007d66:	f000 f80f 	bl	8007d88 <IntToUnicode>
  }
}
 8007d6a:	bf00      	nop
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	1fff7a10 	.word	0x1fff7a10
 8007d78:	1fff7a14 	.word	0x1fff7a14
 8007d7c:	1fff7a18 	.word	0x1fff7a18
 8007d80:	200000e2 	.word	0x200000e2
 8007d84:	200000f2 	.word	0x200000f2

08007d88 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b087      	sub	sp, #28
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	4613      	mov	r3, r2
 8007d94:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007d96:	2300      	movs	r3, #0
 8007d98:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	75fb      	strb	r3, [r7, #23]
 8007d9e:	e027      	b.n	8007df0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	0f1b      	lsrs	r3, r3, #28
 8007da4:	2b09      	cmp	r3, #9
 8007da6:	d80b      	bhi.n	8007dc0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	0f1b      	lsrs	r3, r3, #28
 8007dac:	b2da      	uxtb	r2, r3
 8007dae:	7dfb      	ldrb	r3, [r7, #23]
 8007db0:	005b      	lsls	r3, r3, #1
 8007db2:	4619      	mov	r1, r3
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	440b      	add	r3, r1
 8007db8:	3230      	adds	r2, #48	; 0x30
 8007dba:	b2d2      	uxtb	r2, r2
 8007dbc:	701a      	strb	r2, [r3, #0]
 8007dbe:	e00a      	b.n	8007dd6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	0f1b      	lsrs	r3, r3, #28
 8007dc4:	b2da      	uxtb	r2, r3
 8007dc6:	7dfb      	ldrb	r3, [r7, #23]
 8007dc8:	005b      	lsls	r3, r3, #1
 8007dca:	4619      	mov	r1, r3
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	440b      	add	r3, r1
 8007dd0:	3237      	adds	r2, #55	; 0x37
 8007dd2:	b2d2      	uxtb	r2, r2
 8007dd4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	011b      	lsls	r3, r3, #4
 8007dda:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007ddc:	7dfb      	ldrb	r3, [r7, #23]
 8007dde:	005b      	lsls	r3, r3, #1
 8007de0:	3301      	adds	r3, #1
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	4413      	add	r3, r2
 8007de6:	2200      	movs	r2, #0
 8007de8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007dea:	7dfb      	ldrb	r3, [r7, #23]
 8007dec:	3301      	adds	r3, #1
 8007dee:	75fb      	strb	r3, [r7, #23]
 8007df0:	7dfa      	ldrb	r2, [r7, #23]
 8007df2:	79fb      	ldrb	r3, [r7, #7]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d3d3      	bcc.n	8007da0 <IntToUnicode+0x18>
  }
}
 8007df8:	bf00      	nop
 8007dfa:	bf00      	nop
 8007dfc:	371c      	adds	r7, #28
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
	...

08007e08 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b08a      	sub	sp, #40	; 0x28
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e10:	f107 0314 	add.w	r3, r7, #20
 8007e14:	2200      	movs	r2, #0
 8007e16:	601a      	str	r2, [r3, #0]
 8007e18:	605a      	str	r2, [r3, #4]
 8007e1a:	609a      	str	r2, [r3, #8]
 8007e1c:	60da      	str	r2, [r3, #12]
 8007e1e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e28:	d13a      	bne.n	8007ea0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	613b      	str	r3, [r7, #16]
 8007e2e:	4b1e      	ldr	r3, [pc, #120]	; (8007ea8 <HAL_PCD_MspInit+0xa0>)
 8007e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e32:	4a1d      	ldr	r2, [pc, #116]	; (8007ea8 <HAL_PCD_MspInit+0xa0>)
 8007e34:	f043 0301 	orr.w	r3, r3, #1
 8007e38:	6313      	str	r3, [r2, #48]	; 0x30
 8007e3a:	4b1b      	ldr	r3, [pc, #108]	; (8007ea8 <HAL_PCD_MspInit+0xa0>)
 8007e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e3e:	f003 0301 	and.w	r3, r3, #1
 8007e42:	613b      	str	r3, [r7, #16]
 8007e44:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007e46:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e4c:	2302      	movs	r3, #2
 8007e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e50:	2300      	movs	r3, #0
 8007e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e54:	2303      	movs	r3, #3
 8007e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007e58:	230a      	movs	r3, #10
 8007e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e5c:	f107 0314 	add.w	r3, r7, #20
 8007e60:	4619      	mov	r1, r3
 8007e62:	4812      	ldr	r0, [pc, #72]	; (8007eac <HAL_PCD_MspInit+0xa4>)
 8007e64:	f7f9 fa34 	bl	80012d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007e68:	4b0f      	ldr	r3, [pc, #60]	; (8007ea8 <HAL_PCD_MspInit+0xa0>)
 8007e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e6c:	4a0e      	ldr	r2, [pc, #56]	; (8007ea8 <HAL_PCD_MspInit+0xa0>)
 8007e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e72:	6353      	str	r3, [r2, #52]	; 0x34
 8007e74:	2300      	movs	r3, #0
 8007e76:	60fb      	str	r3, [r7, #12]
 8007e78:	4b0b      	ldr	r3, [pc, #44]	; (8007ea8 <HAL_PCD_MspInit+0xa0>)
 8007e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e7c:	4a0a      	ldr	r2, [pc, #40]	; (8007ea8 <HAL_PCD_MspInit+0xa0>)
 8007e7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e82:	6453      	str	r3, [r2, #68]	; 0x44
 8007e84:	4b08      	ldr	r3, [pc, #32]	; (8007ea8 <HAL_PCD_MspInit+0xa0>)
 8007e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e8c:	60fb      	str	r3, [r7, #12]
 8007e8e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007e90:	2200      	movs	r2, #0
 8007e92:	2100      	movs	r1, #0
 8007e94:	2043      	movs	r0, #67	; 0x43
 8007e96:	f7f9 f884 	bl	8000fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007e9a:	2043      	movs	r0, #67	; 0x43
 8007e9c:	f7f9 f89d 	bl	8000fda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007ea0:	bf00      	nop
 8007ea2:	3728      	adds	r7, #40	; 0x28
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	40023800 	.word	0x40023800
 8007eac:	40020000 	.word	0x40020000

08007eb0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	4610      	mov	r0, r2
 8007ec8:	f7fe fb7f 	bl	80065ca <USBD_LL_SetupStage>
}
 8007ecc:	bf00      	nop
 8007ece:	3708      	adds	r7, #8
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	460b      	mov	r3, r1
 8007ede:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007ee6:	78fa      	ldrb	r2, [r7, #3]
 8007ee8:	6879      	ldr	r1, [r7, #4]
 8007eea:	4613      	mov	r3, r2
 8007eec:	00db      	lsls	r3, r3, #3
 8007eee:	4413      	add	r3, r2
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	440b      	add	r3, r1
 8007ef4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	78fb      	ldrb	r3, [r7, #3]
 8007efc:	4619      	mov	r1, r3
 8007efe:	f7fe fbb9 	bl	8006674 <USBD_LL_DataOutStage>
}
 8007f02:	bf00      	nop
 8007f04:	3708      	adds	r7, #8
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b082      	sub	sp, #8
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
 8007f12:	460b      	mov	r3, r1
 8007f14:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007f1c:	78fa      	ldrb	r2, [r7, #3]
 8007f1e:	6879      	ldr	r1, [r7, #4]
 8007f20:	4613      	mov	r3, r2
 8007f22:	00db      	lsls	r3, r3, #3
 8007f24:	4413      	add	r3, r2
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	440b      	add	r3, r1
 8007f2a:	334c      	adds	r3, #76	; 0x4c
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	78fb      	ldrb	r3, [r7, #3]
 8007f30:	4619      	mov	r1, r3
 8007f32:	f7fe fc52 	bl	80067da <USBD_LL_DataInStage>
}
 8007f36:	bf00      	nop
 8007f38:	3708      	adds	r7, #8
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b082      	sub	sp, #8
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7fe fd86 	bl	8006a5e <USBD_LL_SOF>
}
 8007f52:	bf00      	nop
 8007f54:	3708      	adds	r7, #8
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b084      	sub	sp, #16
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007f62:	2301      	movs	r3, #1
 8007f64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d001      	beq.n	8007f72 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007f6e:	f7f8 fc69 	bl	8000844 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f78:	7bfa      	ldrb	r2, [r7, #15]
 8007f7a:	4611      	mov	r1, r2
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7fe fd30 	bl	80069e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f7fe fcd8 	bl	800693e <USBD_LL_Reset>
}
 8007f8e:	bf00      	nop
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
	...

08007f98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fe fd2b 	bl	8006a02 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	6812      	ldr	r2, [r2, #0]
 8007fba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007fbe:	f043 0301 	orr.w	r3, r3, #1
 8007fc2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6a1b      	ldr	r3, [r3, #32]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d005      	beq.n	8007fd8 <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007fcc:	4b04      	ldr	r3, [pc, #16]	; (8007fe0 <HAL_PCD_SuspendCallback+0x48>)
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	4a03      	ldr	r2, [pc, #12]	; (8007fe0 <HAL_PCD_SuspendCallback+0x48>)
 8007fd2:	f043 0306 	orr.w	r3, r3, #6
 8007fd6:	6113      	str	r3, [r2, #16]
    }
  /* USER CODE END 2 */
}
 8007fd8:	bf00      	nop
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	e000ed00 	.word	0xe000ed00

08007fe4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7fe fd1b 	bl	8006a2e <USBD_LL_Resume>
}
 8007ff8:	bf00      	nop
 8007ffa:	3708      	adds	r7, #8
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	460b      	mov	r3, r1
 800800a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008012:	78fa      	ldrb	r2, [r7, #3]
 8008014:	4611      	mov	r1, r2
 8008016:	4618      	mov	r0, r3
 8008018:	f7fe fd73 	bl	8006b02 <USBD_LL_IsoOUTIncomplete>
}
 800801c:	bf00      	nop
 800801e:	3708      	adds	r7, #8
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	460b      	mov	r3, r1
 800802e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008036:	78fa      	ldrb	r2, [r7, #3]
 8008038:	4611      	mov	r1, r2
 800803a:	4618      	mov	r0, r3
 800803c:	f7fe fd2f 	bl	8006a9e <USBD_LL_IsoINIncomplete>
}
 8008040:	bf00      	nop
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008056:	4618      	mov	r0, r3
 8008058:	f7fe fd85 	bl	8006b66 <USBD_LL_DevConnected>
}
 800805c:	bf00      	nop
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008072:	4618      	mov	r0, r3
 8008074:	f7fe fd82 	bl	8006b7c <USBD_LL_DevDisconnected>
}
 8008078:	bf00      	nop
 800807a:	3708      	adds	r7, #8
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d13c      	bne.n	800810a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008090:	4a20      	ldr	r2, [pc, #128]	; (8008114 <USBD_LL_Init+0x94>)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4a1e      	ldr	r2, [pc, #120]	; (8008114 <USBD_LL_Init+0x94>)
 800809c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80080a0:	4b1c      	ldr	r3, [pc, #112]	; (8008114 <USBD_LL_Init+0x94>)
 80080a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80080a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80080a8:	4b1a      	ldr	r3, [pc, #104]	; (8008114 <USBD_LL_Init+0x94>)
 80080aa:	2204      	movs	r2, #4
 80080ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80080ae:	4b19      	ldr	r3, [pc, #100]	; (8008114 <USBD_LL_Init+0x94>)
 80080b0:	2202      	movs	r2, #2
 80080b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80080b4:	4b17      	ldr	r3, [pc, #92]	; (8008114 <USBD_LL_Init+0x94>)
 80080b6:	2200      	movs	r2, #0
 80080b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80080ba:	4b16      	ldr	r3, [pc, #88]	; (8008114 <USBD_LL_Init+0x94>)
 80080bc:	2202      	movs	r2, #2
 80080be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80080c0:	4b14      	ldr	r3, [pc, #80]	; (8008114 <USBD_LL_Init+0x94>)
 80080c2:	2200      	movs	r2, #0
 80080c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80080c6:	4b13      	ldr	r3, [pc, #76]	; (8008114 <USBD_LL_Init+0x94>)
 80080c8:	2200      	movs	r2, #0
 80080ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80080cc:	4b11      	ldr	r3, [pc, #68]	; (8008114 <USBD_LL_Init+0x94>)
 80080ce:	2200      	movs	r2, #0
 80080d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80080d2:	4b10      	ldr	r3, [pc, #64]	; (8008114 <USBD_LL_Init+0x94>)
 80080d4:	2200      	movs	r2, #0
 80080d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80080d8:	4b0e      	ldr	r3, [pc, #56]	; (8008114 <USBD_LL_Init+0x94>)
 80080da:	2200      	movs	r2, #0
 80080dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80080de:	480d      	ldr	r0, [pc, #52]	; (8008114 <USBD_LL_Init+0x94>)
 80080e0:	f7f9 fbbe 	bl	8001860 <HAL_PCD_Init>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d001      	beq.n	80080ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80080ea:	f7f8 fbab 	bl	8000844 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80080ee:	2180      	movs	r1, #128	; 0x80
 80080f0:	4808      	ldr	r0, [pc, #32]	; (8008114 <USBD_LL_Init+0x94>)
 80080f2:	f7fa fe16 	bl	8002d22 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80080f6:	2240      	movs	r2, #64	; 0x40
 80080f8:	2100      	movs	r1, #0
 80080fa:	4806      	ldr	r0, [pc, #24]	; (8008114 <USBD_LL_Init+0x94>)
 80080fc:	f7fa fdca 	bl	8002c94 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008100:	2280      	movs	r2, #128	; 0x80
 8008102:	2101      	movs	r1, #1
 8008104:	4803      	ldr	r0, [pc, #12]	; (8008114 <USBD_LL_Init+0x94>)
 8008106:	f7fa fdc5 	bl	8002c94 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	3708      	adds	r7, #8
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}
 8008114:	20000f3c 	.word	0x20000f3c

08008118 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008120:	2300      	movs	r3, #0
 8008122:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008124:	2300      	movs	r3, #0
 8008126:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800812e:	4618      	mov	r0, r3
 8008130:	f7f9 fcb3 	bl	8001a9a <HAL_PCD_Start>
 8008134:	4603      	mov	r3, r0
 8008136:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008138:	7bfb      	ldrb	r3, [r7, #15]
 800813a:	4618      	mov	r0, r3
 800813c:	f000 f942 	bl	80083c4 <USBD_Get_USB_Status>
 8008140:	4603      	mov	r3, r0
 8008142:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008144:	7bbb      	ldrb	r3, [r7, #14]
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b084      	sub	sp, #16
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	4608      	mov	r0, r1
 8008158:	4611      	mov	r1, r2
 800815a:	461a      	mov	r2, r3
 800815c:	4603      	mov	r3, r0
 800815e:	70fb      	strb	r3, [r7, #3]
 8008160:	460b      	mov	r3, r1
 8008162:	70bb      	strb	r3, [r7, #2]
 8008164:	4613      	mov	r3, r2
 8008166:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008168:	2300      	movs	r3, #0
 800816a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008176:	78bb      	ldrb	r3, [r7, #2]
 8008178:	883a      	ldrh	r2, [r7, #0]
 800817a:	78f9      	ldrb	r1, [r7, #3]
 800817c:	f7fa f984 	bl	8002488 <HAL_PCD_EP_Open>
 8008180:	4603      	mov	r3, r0
 8008182:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008184:	7bfb      	ldrb	r3, [r7, #15]
 8008186:	4618      	mov	r0, r3
 8008188:	f000 f91c 	bl	80083c4 <USBD_Get_USB_Status>
 800818c:	4603      	mov	r3, r0
 800818e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008190:	7bbb      	ldrb	r3, [r7, #14]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b084      	sub	sp, #16
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	460b      	mov	r3, r1
 80081a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081a6:	2300      	movs	r3, #0
 80081a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081aa:	2300      	movs	r3, #0
 80081ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80081b4:	78fa      	ldrb	r2, [r7, #3]
 80081b6:	4611      	mov	r1, r2
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7fa f9cd 	bl	8002558 <HAL_PCD_EP_Close>
 80081be:	4603      	mov	r3, r0
 80081c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081c2:	7bfb      	ldrb	r3, [r7, #15]
 80081c4:	4618      	mov	r0, r3
 80081c6:	f000 f8fd 	bl	80083c4 <USBD_Get_USB_Status>
 80081ca:	4603      	mov	r3, r0
 80081cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3710      	adds	r7, #16
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	460b      	mov	r3, r1
 80081e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081e4:	2300      	movs	r3, #0
 80081e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081e8:	2300      	movs	r3, #0
 80081ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80081f2:	78fa      	ldrb	r2, [r7, #3]
 80081f4:	4611      	mov	r1, r2
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7fa faa5 	bl	8002746 <HAL_PCD_EP_SetStall>
 80081fc:	4603      	mov	r3, r0
 80081fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008200:	7bfb      	ldrb	r3, [r7, #15]
 8008202:	4618      	mov	r0, r3
 8008204:	f000 f8de 	bl	80083c4 <USBD_Get_USB_Status>
 8008208:	4603      	mov	r3, r0
 800820a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800820c:	7bbb      	ldrb	r3, [r7, #14]
}
 800820e:	4618      	mov	r0, r3
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b084      	sub	sp, #16
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
 800821e:	460b      	mov	r3, r1
 8008220:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008222:	2300      	movs	r3, #0
 8008224:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008230:	78fa      	ldrb	r2, [r7, #3]
 8008232:	4611      	mov	r1, r2
 8008234:	4618      	mov	r0, r3
 8008236:	f7fa faea 	bl	800280e <HAL_PCD_EP_ClrStall>
 800823a:	4603      	mov	r3, r0
 800823c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800823e:	7bfb      	ldrb	r3, [r7, #15]
 8008240:	4618      	mov	r0, r3
 8008242:	f000 f8bf 	bl	80083c4 <USBD_Get_USB_Status>
 8008246:	4603      	mov	r3, r0
 8008248:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800824a:	7bbb      	ldrb	r3, [r7, #14]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008254:	b480      	push	{r7}
 8008256:	b085      	sub	sp, #20
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	460b      	mov	r3, r1
 800825e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008266:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008268:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800826c:	2b00      	cmp	r3, #0
 800826e:	da0b      	bge.n	8008288 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008270:	78fb      	ldrb	r3, [r7, #3]
 8008272:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008276:	68f9      	ldr	r1, [r7, #12]
 8008278:	4613      	mov	r3, r2
 800827a:	00db      	lsls	r3, r3, #3
 800827c:	4413      	add	r3, r2
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	440b      	add	r3, r1
 8008282:	333e      	adds	r3, #62	; 0x3e
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	e00b      	b.n	80082a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008288:	78fb      	ldrb	r3, [r7, #3]
 800828a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800828e:	68f9      	ldr	r1, [r7, #12]
 8008290:	4613      	mov	r3, r2
 8008292:	00db      	lsls	r3, r3, #3
 8008294:	4413      	add	r3, r2
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	440b      	add	r3, r1
 800829a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800829e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3714      	adds	r7, #20
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	460b      	mov	r3, r1
 80082b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082b8:	2300      	movs	r3, #0
 80082ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80082c6:	78fa      	ldrb	r2, [r7, #3]
 80082c8:	4611      	mov	r1, r2
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fa f8b7 	bl	800243e <HAL_PCD_SetAddress>
 80082d0:	4603      	mov	r3, r0
 80082d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082d4:	7bfb      	ldrb	r3, [r7, #15]
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 f874 	bl	80083c4 <USBD_Get_USB_Status>
 80082dc:	4603      	mov	r3, r0
 80082de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b086      	sub	sp, #24
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	60f8      	str	r0, [r7, #12]
 80082f2:	607a      	str	r2, [r7, #4]
 80082f4:	603b      	str	r3, [r7, #0]
 80082f6:	460b      	mov	r3, r1
 80082f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082fa:	2300      	movs	r3, #0
 80082fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082fe:	2300      	movs	r3, #0
 8008300:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008308:	7af9      	ldrb	r1, [r7, #11]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	f7fa f9d0 	bl	80026b2 <HAL_PCD_EP_Transmit>
 8008312:	4603      	mov	r3, r0
 8008314:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008316:	7dfb      	ldrb	r3, [r7, #23]
 8008318:	4618      	mov	r0, r3
 800831a:	f000 f853 	bl	80083c4 <USBD_Get_USB_Status>
 800831e:	4603      	mov	r3, r0
 8008320:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008322:	7dbb      	ldrb	r3, [r7, #22]
}
 8008324:	4618      	mov	r0, r3
 8008326:	3718      	adds	r7, #24
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b086      	sub	sp, #24
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	607a      	str	r2, [r7, #4]
 8008336:	603b      	str	r3, [r7, #0]
 8008338:	460b      	mov	r3, r1
 800833a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800833c:	2300      	movs	r3, #0
 800833e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008340:	2300      	movs	r3, #0
 8008342:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800834a:	7af9      	ldrb	r1, [r7, #11]
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	f7fa f94c 	bl	80025ec <HAL_PCD_EP_Receive>
 8008354:	4603      	mov	r3, r0
 8008356:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008358:	7dfb      	ldrb	r3, [r7, #23]
 800835a:	4618      	mov	r0, r3
 800835c:	f000 f832 	bl	80083c4 <USBD_Get_USB_Status>
 8008360:	4603      	mov	r3, r0
 8008362:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008364:	7dbb      	ldrb	r3, [r7, #22]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3718      	adds	r7, #24
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800836e:	b580      	push	{r7, lr}
 8008370:	b082      	sub	sp, #8
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
 8008376:	460b      	mov	r3, r1
 8008378:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008380:	78fa      	ldrb	r2, [r7, #3]
 8008382:	4611      	mov	r1, r2
 8008384:	4618      	mov	r0, r3
 8008386:	f7fa f97c 	bl	8002682 <HAL_PCD_EP_GetRxCount>
 800838a:	4603      	mov	r3, r0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3708      	adds	r7, #8
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800839c:	4b03      	ldr	r3, [pc, #12]	; (80083ac <USBD_static_malloc+0x18>)
}
 800839e:	4618      	mov	r0, r3
 80083a0:	370c      	adds	r7, #12
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	20001448 	.word	0x20001448

080083b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]

}
 80083b8:	bf00      	nop
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	4603      	mov	r3, r0
 80083cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083ce:	2300      	movs	r3, #0
 80083d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80083d2:	79fb      	ldrb	r3, [r7, #7]
 80083d4:	2b03      	cmp	r3, #3
 80083d6:	d817      	bhi.n	8008408 <USBD_Get_USB_Status+0x44>
 80083d8:	a201      	add	r2, pc, #4	; (adr r2, 80083e0 <USBD_Get_USB_Status+0x1c>)
 80083da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083de:	bf00      	nop
 80083e0:	080083f1 	.word	0x080083f1
 80083e4:	080083f7 	.word	0x080083f7
 80083e8:	080083fd 	.word	0x080083fd
 80083ec:	08008403 	.word	0x08008403
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80083f0:	2300      	movs	r3, #0
 80083f2:	73fb      	strb	r3, [r7, #15]
    break;
 80083f4:	e00b      	b.n	800840e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80083f6:	2303      	movs	r3, #3
 80083f8:	73fb      	strb	r3, [r7, #15]
    break;
 80083fa:	e008      	b.n	800840e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80083fc:	2301      	movs	r3, #1
 80083fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008400:	e005      	b.n	800840e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008402:	2303      	movs	r3, #3
 8008404:	73fb      	strb	r3, [r7, #15]
    break;
 8008406:	e002      	b.n	800840e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008408:	2303      	movs	r3, #3
 800840a:	73fb      	strb	r3, [r7, #15]
    break;
 800840c:	bf00      	nop
  }
  return usb_status;
 800840e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008410:	4618      	mov	r0, r3
 8008412:	3714      	adds	r7, #20
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <memset>:
 800841c:	4402      	add	r2, r0
 800841e:	4603      	mov	r3, r0
 8008420:	4293      	cmp	r3, r2
 8008422:	d100      	bne.n	8008426 <memset+0xa>
 8008424:	4770      	bx	lr
 8008426:	f803 1b01 	strb.w	r1, [r3], #1
 800842a:	e7f9      	b.n	8008420 <memset+0x4>

0800842c <__libc_init_array>:
 800842c:	b570      	push	{r4, r5, r6, lr}
 800842e:	4d0d      	ldr	r5, [pc, #52]	; (8008464 <__libc_init_array+0x38>)
 8008430:	4c0d      	ldr	r4, [pc, #52]	; (8008468 <__libc_init_array+0x3c>)
 8008432:	1b64      	subs	r4, r4, r5
 8008434:	10a4      	asrs	r4, r4, #2
 8008436:	2600      	movs	r6, #0
 8008438:	42a6      	cmp	r6, r4
 800843a:	d109      	bne.n	8008450 <__libc_init_array+0x24>
 800843c:	4d0b      	ldr	r5, [pc, #44]	; (800846c <__libc_init_array+0x40>)
 800843e:	4c0c      	ldr	r4, [pc, #48]	; (8008470 <__libc_init_array+0x44>)
 8008440:	f000 f818 	bl	8008474 <_init>
 8008444:	1b64      	subs	r4, r4, r5
 8008446:	10a4      	asrs	r4, r4, #2
 8008448:	2600      	movs	r6, #0
 800844a:	42a6      	cmp	r6, r4
 800844c:	d105      	bne.n	800845a <__libc_init_array+0x2e>
 800844e:	bd70      	pop	{r4, r5, r6, pc}
 8008450:	f855 3b04 	ldr.w	r3, [r5], #4
 8008454:	4798      	blx	r3
 8008456:	3601      	adds	r6, #1
 8008458:	e7ee      	b.n	8008438 <__libc_init_array+0xc>
 800845a:	f855 3b04 	ldr.w	r3, [r5], #4
 800845e:	4798      	blx	r3
 8008460:	3601      	adds	r6, #1
 8008462:	e7f2      	b.n	800844a <__libc_init_array+0x1e>
 8008464:	080084fc 	.word	0x080084fc
 8008468:	080084fc 	.word	0x080084fc
 800846c:	080084fc 	.word	0x080084fc
 8008470:	08008500 	.word	0x08008500

08008474 <_init>:
 8008474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008476:	bf00      	nop
 8008478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800847a:	bc08      	pop	{r3}
 800847c:	469e      	mov	lr, r3
 800847e:	4770      	bx	lr

08008480 <_fini>:
 8008480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008482:	bf00      	nop
 8008484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008486:	bc08      	pop	{r3}
 8008488:	469e      	mov	lr, r3
 800848a:	4770      	bx	lr
