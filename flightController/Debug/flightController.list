
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c14  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08009db4  08009db4  00019db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e90  08009e90  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08009e90  08009e90  00019e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e98  08009e98  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e98  08009e98  00019e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e9c  08009e9c  00019e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08009ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001678  2000014c  08009fec  0002014c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200017c4  08009fec  000217c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016b62  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c3e  00000000  00000000  00036d21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c8  00000000  00000000  0003a960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d92  00000000  00000000  0003bb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a122  00000000  00000000  0003c8ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d61c  00000000  00000000  000569dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cc43  00000000  00000000  00073ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004db0  00000000  00000000  00100c3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  001059ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000014c 	.word	0x2000014c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009d9c 	.word	0x08009d9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000150 	.word	0x20000150
 80001dc:	08009d9c 	.word	0x08009d9c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <flightController_App>:
extern DMA_HandleTypeDef hdma_usart2_rx;

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
void flightController_App(void) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b098      	sub	sp, #96	; 0x60
 8000590:	af00      	add	r7, sp, #0
	static IBUS_HandleTypeDef_t * rc_controller;
	uint8_t channel = CHANNEL_1;
 8000592:	2301      	movs	r3, #1
 8000594:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t str1[40];
	uint8_t str2[40];

	MPU6050_HandleTypeDef_t * hmpu6050;

	rc_controller = FSA8S_RC_Init(&huart2);
 8000598:	482b      	ldr	r0, [pc, #172]	; (8000648 <flightController_App+0xbc>)
 800059a:	f000 fb3d 	bl	8000c18 <FSA8S_RC_Init>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a2a      	ldr	r2, [pc, #168]	; (800064c <flightController_App+0xc0>)
 80005a2:	6013      	str	r3, [r2, #0]

	hmpu6050 = MPU6050_IMU_Init(&hi2c1);
 80005a4:	482a      	ldr	r0, [pc, #168]	; (8000650 <flightController_App+0xc4>)
 80005a6:	f000 fcc5 	bl	8000f34 <MPU6050_IMU_Init>
 80005aa:	65b8      	str	r0, [r7, #88]	; 0x58
	//

	gyroscopeValues_t * gyroscopeValues;
	accelerometerValues_t * accelerometerValues;
	while(1) {
		HAL_Delay(1000);
 80005ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005b0:	f000 fda8 	bl	8001104 <HAL_Delay>
//		HAL_Delay(10);
//		sprintf((char *)str1, (const char *)"Value Gyro Z: %d\r\n\n", gyroscopeValues->gyroscopeZ);
//		CDC_Transmit_FS(str1, strlen((const char *)str1));
//		HAL_Delay(10);

		MPU6050_IMU_ReadAccelerometer(hmpu6050, accelerometerValues);
 80005b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80005b6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80005b8:	f000 fcf0 	bl	8000f9c <MPU6050_IMU_ReadAccelerometer>
		sprintf((char *)str2, (const char *)"Value Accel X: %d\r\n", accelerometerValues->accelerometerX);
 80005bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80005be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005c2:	461a      	mov	r2, r3
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	4923      	ldr	r1, [pc, #140]	; (8000654 <flightController_App+0xc8>)
 80005c8:	4618      	mov	r0, r3
 80005ca:	f008 ffef 	bl	80095ac <siprintf>
		CDC_Transmit_FS(str2, strlen((const char *)str2));
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff fe05 	bl	80001e0 <strlen>
 80005d6:	4603      	mov	r3, r0
 80005d8:	b29a      	uxth	r2, r3
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	4611      	mov	r1, r2
 80005de:	4618      	mov	r0, r3
 80005e0:	f008 fad6 	bl	8008b90 <CDC_Transmit_FS>
		HAL_Delay(10);
 80005e4:	200a      	movs	r0, #10
 80005e6:	f000 fd8d 	bl	8001104 <HAL_Delay>
		sprintf((char *)str2, (const char *)"Value Accel Y: %d\r\n", accelerometerValues->accelerometerY);
 80005ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80005ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80005f0:	461a      	mov	r2, r3
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	4918      	ldr	r1, [pc, #96]	; (8000658 <flightController_App+0xcc>)
 80005f6:	4618      	mov	r0, r3
 80005f8:	f008 ffd8 	bl	80095ac <siprintf>
		CDC_Transmit_FS(str2, strlen((const char *)str2));
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff fdee 	bl	80001e0 <strlen>
 8000604:	4603      	mov	r3, r0
 8000606:	b29a      	uxth	r2, r3
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	4611      	mov	r1, r2
 800060c:	4618      	mov	r0, r3
 800060e:	f008 fabf 	bl	8008b90 <CDC_Transmit_FS>
		HAL_Delay(10);
 8000612:	200a      	movs	r0, #10
 8000614:	f000 fd76 	bl	8001104 <HAL_Delay>
		sprintf((char *)str2, (const char *)"Value Accel Z: %d\r\n\n\n\n\n", accelerometerValues->accelerometerZ);
 8000618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800061a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800061e:	461a      	mov	r2, r3
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	490e      	ldr	r1, [pc, #56]	; (800065c <flightController_App+0xd0>)
 8000624:	4618      	mov	r0, r3
 8000626:	f008 ffc1 	bl	80095ac <siprintf>
		CDC_Transmit_FS(str2, strlen((const char *)str2));
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff fdd7 	bl	80001e0 <strlen>
 8000632:	4603      	mov	r3, r0
 8000634:	b29a      	uxth	r2, r3
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	4611      	mov	r1, r2
 800063a:	4618      	mov	r0, r3
 800063c:	f008 faa8 	bl	8008b90 <CDC_Transmit_FS>
		HAL_Delay(10);
 8000640:	200a      	movs	r0, #10
 8000642:	f000 fd5f 	bl	8001104 <HAL_Delay>
		HAL_Delay(1000);
 8000646:	e7b1      	b.n	80005ac <flightController_App+0x20>
 8000648:	200001c0 	.word	0x200001c0
 800064c:	20000168 	.word	0x20000168
 8000650:	2000016c 	.word	0x2000016c
 8000654:	08009db4 	.word	0x08009db4
 8000658:	08009dc8 	.word	0x08009dc8
 800065c:	08009ddc 	.word	0x08009ddc

08000660 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000664:	f000 fcdc 	bl	8001020 <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000668:	f000 f810 	bl	800068c <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800066c:	f000 f8ea 	bl	8000844 <MX_GPIO_Init>
    MX_DMA_Init();
 8000670:	f000 f8ce 	bl	8000810 <MX_DMA_Init>
    MX_USB_DEVICE_Init();
 8000674:	f008 f9ce 	bl	8008a14 <MX_USB_DEVICE_Init>
    MX_I2C1_Init();
 8000678:	f000 f872 	bl	8000760 <MX_I2C1_Init>
    MX_USART2_UART_Init();
 800067c:	f000 f89e 	bl	80007bc <MX_USART2_UART_Init>
    /* USER CODE BEGIN 2 */
    flightController_App();
 8000680:	f7ff ff84 	bl	800058c <flightController_App>
 8000684:	2300      	movs	r3, #0
    /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    /* USER CODE END 3 */
}
 8000686:	4618      	mov	r0, r3
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b094      	sub	sp, #80	; 0x50
 8000690:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	2230      	movs	r2, #48	; 0x30
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f008 ffa6 	bl	80095ec <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	4b28      	ldr	r3, [pc, #160]	; (8000758 <SystemClock_Config+0xcc>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	4a27      	ldr	r2, [pc, #156]	; (8000758 <SystemClock_Config+0xcc>)
 80006ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006be:	6413      	str	r3, [r2, #64]	; 0x40
 80006c0:	4b25      	ldr	r3, [pc, #148]	; (8000758 <SystemClock_Config+0xcc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006cc:	2300      	movs	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	4b22      	ldr	r3, [pc, #136]	; (800075c <SystemClock_Config+0xd0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006d8:	4a20      	ldr	r2, [pc, #128]	; (800075c <SystemClock_Config+0xd0>)
 80006da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b1e      	ldr	r3, [pc, #120]	; (800075c <SystemClock_Config+0xd0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ec:	2301      	movs	r3, #1
 80006ee:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f6:	2302      	movs	r3, #2
 80006f8:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 15;
 8000700:	230f      	movs	r3, #15
 8000702:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 144;
 8000704:	2390      	movs	r3, #144	; 0x90
 8000706:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000708:	2304      	movs	r3, #4
 800070a:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 5;
 800070c:	2305      	movs	r3, #5
 800070e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000710:	f107 0320 	add.w	r3, r7, #32
 8000714:	4618      	mov	r0, r3
 8000716:	f003 fbd1 	bl	8003ebc <HAL_RCC_OscConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x98>
        Error_Handler();
 8000720:	f000 f8c6 	bl	80008b0 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType =
 8000724:	230f      	movs	r3, #15
 8000726:	60fb      	str	r3, [r7, #12]
        RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000728:	2302      	movs	r3, #2
 800072a:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000734:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800073a:	f107 030c 	add.w	r3, r7, #12
 800073e:	2101      	movs	r1, #1
 8000740:	4618      	mov	r0, r3
 8000742:	f003 fe33 	bl	80043ac <HAL_RCC_ClockConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0xc4>
        Error_Handler();
 800074c:	f000 f8b0 	bl	80008b0 <Error_Handler>
    }
}
 8000750:	bf00      	nop
 8000752:	3750      	adds	r7, #80	; 0x50
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN I2C1_Init 0 */
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */
    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8000764:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <MX_I2C1_Init+0x50>)
 8000766:	4a13      	ldr	r2, [pc, #76]	; (80007b4 <MX_I2C1_Init+0x54>)
 8000768:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 400000;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_I2C1_Init+0x50>)
 800076c:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <MX_I2C1_Init+0x58>)
 800076e:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_I2C1_Init+0x50>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_I2C1_Init+0x50>)
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_I2C1_Init+0x50>)
 800077e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000782:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000784:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <MX_I2C1_Init+0x50>)
 8000786:	2200      	movs	r2, #0
 8000788:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_I2C1_Init+0x50>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000790:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <MX_I2C1_Init+0x50>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_I2C1_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800079c:	4804      	ldr	r0, [pc, #16]	; (80007b0 <MX_I2C1_Init+0x50>)
 800079e:	f001 f951 	bl	8001a44 <HAL_I2C_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_I2C1_Init+0x4c>
        Error_Handler();
 80007a8:	f000 f882 	bl	80008b0 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */
    /* USER CODE END I2C1_Init 2 */
}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	2000016c 	.word	0x2000016c
 80007b4:	40005400 	.word	0x40005400
 80007b8:	00061a80 	.word	0x00061a80

080007bc <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART2_Init 0 */
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */
    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007c2:	4a12      	ldr	r2, [pc, #72]	; (800080c <MX_USART2_UART_Init+0x50>)
 80007c4:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_RX;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007e2:	2204      	movs	r2, #4
 80007e4:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007f4:	f003 ffba 	bl	800476c <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART2_UART_Init+0x46>
        Error_Handler();
 80007fe:	f000 f857 	bl	80008b0 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */
    /* USER CODE END USART2_Init 2 */
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200001c0 	.word	0x200001c0
 800080c:	40004400 	.word	0x40004400

08000810 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_DMA_Init+0x30>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a08      	ldr	r2, [pc, #32]	; (8000840 <MX_DMA_Init+0x30>)
 8000820:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_DMA_Init+0x30>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800

08000844 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	4b17      	ldr	r3, [pc, #92]	; (80008ac <MX_GPIO_Init+0x68>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a16      	ldr	r2, [pc, #88]	; (80008ac <MX_GPIO_Init+0x68>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b14      	ldr	r3, [pc, #80]	; (80008ac <MX_GPIO_Init+0x68>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <MX_GPIO_Init+0x68>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a0f      	ldr	r2, [pc, #60]	; (80008ac <MX_GPIO_Init+0x68>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <MX_GPIO_Init+0x68>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_GPIO_Init+0x68>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a08      	ldr	r2, [pc, #32]	; (80008ac <MX_GPIO_Init+0x68>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_GPIO_Init+0x68>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 800089e:	bf00      	nop
 80008a0:	3714      	adds	r7, #20
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800

080008b0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* USER CODE END Error_Handler_Debug */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
	...

080008c0 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <HAL_MspInit+0x4c>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ce:	4a0f      	ldr	r2, [pc, #60]	; (800090c <HAL_MspInit+0x4c>)
 80008d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d4:	6453      	str	r3, [r2, #68]	; 0x44
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <HAL_MspInit+0x4c>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <HAL_MspInit+0x4c>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	4a08      	ldr	r2, [pc, #32]	; (800090c <HAL_MspInit+0x4c>)
 80008ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f0:	6413      	str	r3, [r2, #64]	; 0x40
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_MspInit+0x4c>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]
    /* System interrupt init*/

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800

08000910 <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef * hi2c) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
    if (hi2c->Instance == I2C1) {
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a19      	ldr	r2, [pc, #100]	; (8000994 <HAL_I2C_MspInit+0x84>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d12b      	bne.n	800098a <HAL_I2C_MspInit+0x7a>
        /* USER CODE BEGIN I2C1_MspInit 0 */

        /* USER CODE END I2C1_MspInit 0 */

        __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	4b18      	ldr	r3, [pc, #96]	; (8000998 <HAL_I2C_MspInit+0x88>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a17      	ldr	r2, [pc, #92]	; (8000998 <HAL_I2C_MspInit+0x88>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <HAL_I2C_MspInit+0x88>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]
        /**I2C1 GPIO Configuration
        PB6     ------> I2C1_SCL
        PB7     ------> I2C1_SDA
        */
        GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 800094e:	23c0      	movs	r3, #192	; 0xc0
 8000950:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000952:	2312      	movs	r3, #18
 8000954:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095a:	2303      	movs	r3, #3
 800095c:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800095e:	2304      	movs	r3, #4
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	4619      	mov	r1, r3
 8000968:	480c      	ldr	r0, [pc, #48]	; (800099c <HAL_I2C_MspInit+0x8c>)
 800096a:	f000 fee7 	bl	800173c <HAL_GPIO_Init>

        /* Peripheral clock enable */
        __HAL_RCC_I2C1_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <HAL_I2C_MspInit+0x88>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a08      	ldr	r2, [pc, #32]	; (8000998 <HAL_I2C_MspInit+0x88>)
 8000978:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_I2C_MspInit+0x88>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
        /* USER CODE BEGIN I2C1_MspInit 1 */

        /* USER CODE END I2C1_MspInit 1 */
    }
}
 800098a:	bf00      	nop
 800098c:	3728      	adds	r7, #40	; 0x28
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40005400 	.word	0x40005400
 8000998:	40023800 	.word	0x40023800
 800099c:	40020400 	.word	0x40020400

080009a0 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef * huart) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
    if (huart->Instance == USART2) {
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a30      	ldr	r2, [pc, #192]	; (8000a80 <HAL_UART_MspInit+0xe0>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d15a      	bne.n	8000a78 <HAL_UART_MspInit+0xd8>
        /* USER CODE BEGIN USART2_MspInit 0 */

        /* USER CODE END USART2_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_USART2_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	4b2f      	ldr	r3, [pc, #188]	; (8000a84 <HAL_UART_MspInit+0xe4>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	4a2e      	ldr	r2, [pc, #184]	; (8000a84 <HAL_UART_MspInit+0xe4>)
 80009cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d0:	6413      	str	r3, [r2, #64]	; 0x40
 80009d2:	4b2c      	ldr	r3, [pc, #176]	; (8000a84 <HAL_UART_MspInit+0xe4>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b28      	ldr	r3, [pc, #160]	; (8000a84 <HAL_UART_MspInit+0xe4>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a27      	ldr	r2, [pc, #156]	; (8000a84 <HAL_UART_MspInit+0xe4>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b25      	ldr	r3, [pc, #148]	; (8000a84 <HAL_UART_MspInit+0xe4>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
        /**USART2 GPIO Configuration
        PA2     ------> USART2_TX
        PA3     ------> USART2_RX
        */
        GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 80009fa:	230c      	movs	r3, #12
 80009fc:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a06:	2303      	movs	r3, #3
 8000a08:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a0a:	2307      	movs	r3, #7
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4619      	mov	r1, r3
 8000a14:	481c      	ldr	r0, [pc, #112]	; (8000a88 <HAL_UART_MspInit+0xe8>)
 8000a16:	f000 fe91 	bl	800173c <HAL_GPIO_Init>

        /* USART2 DMA Init */
        /* USART2_RX Init */
        hdma_usart2_rx.Instance = DMA1_Stream5;
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <HAL_UART_MspInit+0xec>)
 8000a1c:	4a1c      	ldr	r2, [pc, #112]	; (8000a90 <HAL_UART_MspInit+0xf0>)
 8000a1e:	601a      	str	r2, [r3, #0]
        hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000a20:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <HAL_UART_MspInit+0xec>)
 8000a22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a26:	605a      	str	r2, [r3, #4]
        hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a28:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <HAL_UART_MspInit+0xec>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
        hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a2e:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <HAL_UART_MspInit+0xec>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
        hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a34:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <HAL_UART_MspInit+0xec>)
 8000a36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a3a:	611a      	str	r2, [r3, #16]
        hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a3c:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <HAL_UART_MspInit+0xec>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	615a      	str	r2, [r3, #20]
        hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a42:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <HAL_UART_MspInit+0xec>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
        hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000a48:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <HAL_UART_MspInit+0xec>)
 8000a4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a4e:	61da      	str	r2, [r3, #28]
        hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a50:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <HAL_UART_MspInit+0xec>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	621a      	str	r2, [r3, #32]
        hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a56:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <HAL_UART_MspInit+0xec>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	625a      	str	r2, [r3, #36]	; 0x24
        if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 8000a5c:	480b      	ldr	r0, [pc, #44]	; (8000a8c <HAL_UART_MspInit+0xec>)
 8000a5e:	f000 fc87 	bl	8001370 <HAL_DMA_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <HAL_UART_MspInit+0xcc>
            Error_Handler();
 8000a68:	f7ff ff22 	bl	80008b0 <Error_Handler>
        }

        __HAL_LINKDMA(huart, hdmarx, hdma_usart2_rx);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4a07      	ldr	r2, [pc, #28]	; (8000a8c <HAL_UART_MspInit+0xec>)
 8000a70:	639a      	str	r2, [r3, #56]	; 0x38
 8000a72:	4a06      	ldr	r2, [pc, #24]	; (8000a8c <HAL_UART_MspInit+0xec>)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6393      	str	r3, [r2, #56]	; 0x38

        /* USER CODE BEGIN USART2_MspInit 1 */

        /* USER CODE END USART2_MspInit 1 */
    }
}
 8000a78:	bf00      	nop
 8000a7a:	3728      	adds	r7, #40	; 0x28
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40004400 	.word	0x40004400
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020000 	.word	0x40020000
 8000a8c:	20000204 	.word	0x20000204
 8000a90:	40026088 	.word	0x40026088

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8000a98:	e7fe      	b.n	8000a98 <NMI_Handler+0x4>

08000a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <BusFault_Handler+0x4>

08000aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <UsageFault_Handler+0x4>

08000ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae0:	f000 faf0 	bl	80010c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <OTG_FS_IRQHandler+0x10>)
 8000aee:	f002 f8b8 	bl	8002c62 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000f50 	.word	0x20000f50

08000afc <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b04:	4a14      	ldr	r2, [pc, #80]	; (8000b58 <_sbrk+0x5c>)
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <_sbrk+0x60>)
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 8000b10:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <_sbrk+0x64>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d102      	bne.n	8000b1e <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <_sbrk+0x64>)
 8000b1a:	4a12      	ldr	r2, [pc, #72]	; (8000b64 <_sbrk+0x68>)
 8000b1c:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <_sbrk+0x64>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d207      	bcs.n	8000b3c <_sbrk+0x40>
        errno = ENOMEM;
 8000b2c:	f008 fd76 	bl	800961c <__errno>
 8000b30:	4603      	mov	r3, r0
 8000b32:	220c      	movs	r2, #12
 8000b34:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b3a:	e009      	b.n	8000b50 <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <_sbrk+0x64>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 8000b42:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <_sbrk+0x64>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	4a05      	ldr	r2, [pc, #20]	; (8000b60 <_sbrk+0x64>)
 8000b4c:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3718      	adds	r7, #24
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20010000 	.word	0x20010000
 8000b5c:	00000400 	.word	0x00000400
 8000b60:	20000264 	.word	0x20000264
 8000b64:	200017c8 	.word	0x200017c8

08000b68 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <SystemInit+0x20>)
 8000b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b72:	4a05      	ldr	r2, [pc, #20]	; (8000b88 <SystemInit+0x20>)
 8000b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b90:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b92:	490e      	ldr	r1, [pc, #56]	; (8000bcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b94:	4a0e      	ldr	r2, [pc, #56]	; (8000bd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b98:	e002      	b.n	8000ba0 <LoopCopyDataInit>

08000b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9e:	3304      	adds	r3, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba4:	d3f9      	bcc.n	8000b9a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba6:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ba8:	4c0b      	ldr	r4, [pc, #44]	; (8000bd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bac:	e001      	b.n	8000bb2 <LoopFillZerobss>

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb0:	3204      	adds	r2, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bb6:	f7ff ffd7 	bl	8000b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bba:	f008 fd35 	bl	8009628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bbe:	f7ff fd4f 	bl	8000660 <main>
  bx  lr
 8000bc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bc4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000bd0:	08009ea0 	.word	0x08009ea0
  ldr r2, =_sbss
 8000bd4:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000bd8:	200017c4 	.word	0x200017c4

08000bdc <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC_IRQHandler>

08000bde <IBUS_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t IBUS_Init(IBUS_HandleTypeDef_t * hibus) {
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]

    /* Check parameter */
    if (NULL == hibus) {
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d101      	bne.n	8000bf0 <IBUS_Init+0x12>
        return false;
 8000bec:	2300      	movs	r3, #0
 8000bee:	e00f      	b.n	8000c10 <IBUS_Init+0x32>
    }

    /* Initialize DMA reception */
    /* BEGIN MODIFY 1 */
    if (HAL_OK != HAL_UART_Receive_DMA(hibus->huart, hibus->buffer, hibus->bufferSize)) {
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6818      	ldr	r0, [r3, #0]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6859      	ldr	r1, [r3, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	7a1b      	ldrb	r3, [r3, #8]
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	461a      	mov	r2, r3
 8000c00:	f003 fe01 	bl	8004806 <HAL_UART_Receive_DMA>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <IBUS_Init+0x30>
        /* END MODIFY 1 */

        /* DMA initialization was unsuccessful */
        return false;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e000      	b.n	8000c10 <IBUS_Init+0x32>
    }

    /* iBus initialization was successful */
    return true;
 8000c0e:	2301      	movs	r3, #1
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <FSA8S_RC_Init>:
        }
    }
}

/* --- Public function implementation ---------------------------------------------------------- */
IBUS_HandleTypeDef_t * FSA8S_RC_Init(UART_HandleTypeDef * huart) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]

    static uint8_t alreadyInitialized = false;

    /* Check parameter */
    if (NULL == huart) {
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d101      	bne.n	8000c2a <FSA8S_RC_Init+0x12>
        return NULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	e049      	b.n	8000cbe <FSA8S_RC_Init+0xa6>
    }

    /* Check if driver was already initialized */
    if (alreadyInitialized) {
 8000c2a:	4b27      	ldr	r3, [pc, #156]	; (8000cc8 <FSA8S_RC_Init+0xb0>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <FSA8S_RC_Init+0x1e>
        return NULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	e043      	b.n	8000cbe <FSA8S_RC_Init+0xa6>
#ifdef USE_FREERTOS
    IBUS_HandleTypeDef_t * hibus = pvPortmalloc(sizeof(IBUS_HandleTypeDef_t));
    uint8_t * buffer = pvortMalloc(sizeof(IBUS_BUFFER_LENGTH));
    uint16_t * data = pvortMalloc(sizeof(uint16_t) * IBUS_CHANNELS);
#else
    IBUS_HandleTypeDef_t * hibus = malloc(sizeof(IBUS_HandleTypeDef_t));
 8000c36:	2014      	movs	r0, #20
 8000c38:	f008 fbfc 	bl	8009434 <malloc>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	617b      	str	r3, [r7, #20]
    uint8_t * buffer = malloc(sizeof(IBUS_BUFFER_LENGTH));
 8000c40:	2004      	movs	r0, #4
 8000c42:	f008 fbf7 	bl	8009434 <malloc>
 8000c46:	4603      	mov	r3, r0
 8000c48:	613b      	str	r3, [r7, #16]
    uint16_t * data = malloc(sizeof(uint16_t));
 8000c4a:	2002      	movs	r0, #2
 8000c4c:	f008 fbf2 	bl	8009434 <malloc>
 8000c50:	4603      	mov	r3, r0
 8000c52:	60fb      	str	r3, [r7, #12]
#endif

    /* Initialize iBus_HandleTypeDef structure */
    if (hibus) {
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d00f      	beq.n	8000c7a <FSA8S_RC_Init+0x62>
        hibus->huart = huart;
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	601a      	str	r2, [r3, #0]
        hibus->buffer = buffer;
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	605a      	str	r2, [r3, #4]
        hibus->bufferSize = IBUS_BUFFER_LENGTH;
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	2220      	movs	r2, #32
 8000c6a:	721a      	strb	r2, [r3, #8]
        hibus->data = data;
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	60da      	str	r2, [r3, #12]
        hibus->channels = IBUS_CHANNELS;
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	220e      	movs	r2, #14
 8000c76:	741a      	strb	r2, [r3, #16]
 8000c78:	e00a      	b.n	8000c90 <FSA8S_RC_Init+0x78>
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
        vPortFree(hibus);
#else
        /* Free up dynamic allocated memory */
        hibus->buffer = 0;
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	605a      	str	r2, [r3, #4]
        free(hibus->buffer);
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f008 fbdd 	bl	8009444 <free>
        free(hibus);
 8000c8a:	6978      	ldr	r0, [r7, #20]
 8000c8c:	f008 fbda 	bl	8009444 <free>
#endif
    }

    /* Initialize iBus communication */
    if (IBUS_Init(hibus)) {
 8000c90:	6978      	ldr	r0, [r7, #20]
 8000c92:	f7ff ffa4 	bl	8000bde <IBUS_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d004      	beq.n	8000ca6 <FSA8S_RC_Init+0x8e>
        /* Initialization was successful */
        alreadyInitialized = true;
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <FSA8S_RC_Init+0xb0>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	701a      	strb	r2, [r3, #0]
        return hibus;
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	e00b      	b.n	8000cbe <FSA8S_RC_Init+0xa6>
        /* Free up dynamic allocated memory */
        vPortFree(hibus->buffer);
        vPortFree(hibus);
#else
        /* Free up dynamic allocated memory */
        hibus->buffer = 0;
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	605a      	str	r2, [r3, #4]
        free(hibus->buffer);
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f008 fbc7 	bl	8009444 <free>
        free(hibus);
 8000cb6:	6978      	ldr	r0, [r7, #20]
 8000cb8:	f008 fbc4 	bl	8009444 <free>
#endif
        return NULL;
 8000cbc:	2300      	movs	r3, #0
    }
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000268 	.word	0x20000268

08000ccc <I2C_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t I2C_Init(MPU6050_HandleTypeDef_t * hmpu6050) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]

	uint8_t who_am_I_value;

    /* Check parameter */
    if (NULL == hmpu6050) {
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d101      	bne.n	8000cde <I2C_Init+0x12>
        return false;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	e00c      	b.n	8000cf8 <I2C_Init+0x2c>
    }

    /* Read IMU device ID */
    I2C_Read(hmpu6050, MPU_6050_REG_WHO_AM_I_MPU6050, &who_am_I_value, 1);
 8000cde:	f107 020f 	add.w	r2, r7, #15
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	2175      	movs	r1, #117	; 0x75
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f000 f80a 	bl	8000d00 <I2C_Read>
    /* Check IMU device ID */
    if (who_am_I_value == MPU_6050_VALUE_WHO_AM_I) {
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	2b68      	cmp	r3, #104	; 0x68
 8000cf0:	d101      	bne.n	8000cf6 <I2C_Init+0x2a>
        /* Right IMU device ID */
        return true;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e000      	b.n	8000cf8 <I2C_Init+0x2c>
    } else {
        /* Wrong IMU device ID */
        return false;
 8000cf6:	2300      	movs	r3, #0
    }
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <I2C_Read>:

bool_t I2C_Read(MPU6050_HandleTypeDef_t * hmpu6050, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 8000d00:	b590      	push	{r4, r7, lr}
 8000d02:	b089      	sub	sp, #36	; 0x24
 8000d04:	af04      	add	r7, sp, #16
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	607a      	str	r2, [r7, #4]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	72fb      	strb	r3, [r7, #11]
 8000d10:	4613      	mov	r3, r2
 8000d12:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hmpu6050) {
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d101      	bne.n	8000d1e <I2C_Read+0x1e>
        return false;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	e028      	b.n	8000d70 <I2C_Read+0x70>
    }
    if (reg < MPU_6050_MIN_REG_ADDR || reg > MPU_6050_MAX_REG_ADDR) {
 8000d1e:	7afb      	ldrb	r3, [r7, #11]
 8000d20:	2b75      	cmp	r3, #117	; 0x75
 8000d22:	d901      	bls.n	8000d28 <I2C_Read+0x28>
    	return false;
 8000d24:	2300      	movs	r3, #0
 8000d26:	e023      	b.n	8000d70 <I2C_Read+0x70>
    }
    if (NULL == data) {
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d101      	bne.n	8000d32 <I2C_Read+0x32>
    	return false;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e01e      	b.n	8000d70 <I2C_Read+0x70>
    }
    if (dataSize < MPU_6050_MIN_DATA_SIZE || dataSize > MPU_6050_MAX_DATA_SIZE) {
 8000d32:	7abb      	ldrb	r3, [r7, #10]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d002      	beq.n	8000d3e <I2C_Read+0x3e>
 8000d38:	7abb      	ldrb	r3, [r7, #10]
 8000d3a:	2b0a      	cmp	r3, #10
 8000d3c:	d901      	bls.n	8000d42 <I2C_Read+0x42>
    	return false;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e016      	b.n	8000d70 <I2C_Read+0x70>
    }

    /* Read IMU data by passing a data register */
    if(HAL_OK != HAL_I2C_Mem_Read(hmpu6050->hi2c, hmpu6050->address, reg, MPU_6050_ADDR_SIZE, data, dataSize, MPU_6050_I2C_READ_TIMEOUT)) {
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	6858      	ldr	r0, [r3, #4]
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	7a1b      	ldrb	r3, [r3, #8]
 8000d4a:	b299      	uxth	r1, r3
 8000d4c:	7afb      	ldrb	r3, [r7, #11]
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	7abb      	ldrb	r3, [r7, #10]
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	2464      	movs	r4, #100	; 0x64
 8000d56:	9402      	str	r4, [sp, #8]
 8000d58:	9301      	str	r3, [sp, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	2301      	movs	r3, #1
 8000d60:	f001 f8ae 	bl	8001ec0 <HAL_I2C_Mem_Read>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <I2C_Read+0x6e>

    	/* Data couldn't be read */
    	return false;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	e000      	b.n	8000d70 <I2C_Read+0x70>
    } else {

    	/* Data read successfully */
    	return true;
 8000d6e:	2301      	movs	r3, #1
    }
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd90      	pop	{r4, r7, pc}

08000d78 <I2C_Write>:

bool_t I2C_Write(MPU6050_HandleTypeDef_t * hmpu6050, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 8000d78:	b590      	push	{r4, r7, lr}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af04      	add	r7, sp, #16
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	607a      	str	r2, [r7, #4]
 8000d82:	461a      	mov	r2, r3
 8000d84:	460b      	mov	r3, r1
 8000d86:	72fb      	strb	r3, [r7, #11]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hmpu6050) {
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d101      	bne.n	8000d96 <I2C_Write+0x1e>
        return false;
 8000d92:	2300      	movs	r3, #0
 8000d94:	e028      	b.n	8000de8 <I2C_Write+0x70>
    }
    if (reg < MPU_6050_MIN_REG_ADDR || reg > MPU_6050_MAX_REG_ADDR) {
 8000d96:	7afb      	ldrb	r3, [r7, #11]
 8000d98:	2b75      	cmp	r3, #117	; 0x75
 8000d9a:	d901      	bls.n	8000da0 <I2C_Write+0x28>
    	return false;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	e023      	b.n	8000de8 <I2C_Write+0x70>
    }
    if (NULL == data) {
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d101      	bne.n	8000daa <I2C_Write+0x32>
    	return false;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e01e      	b.n	8000de8 <I2C_Write+0x70>
    }
    if (dataSize < MPU_6050_MIN_DATA_SIZE || dataSize > MPU_6050_MAX_DATA_SIZE) {
 8000daa:	7abb      	ldrb	r3, [r7, #10]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d002      	beq.n	8000db6 <I2C_Write+0x3e>
 8000db0:	7abb      	ldrb	r3, [r7, #10]
 8000db2:	2b0a      	cmp	r3, #10
 8000db4:	d901      	bls.n	8000dba <I2C_Write+0x42>
    	return false;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e016      	b.n	8000de8 <I2C_Write+0x70>
    }

    /* Write to IMU */
    if(HAL_OK != HAL_I2C_Mem_Write(hmpu6050->hi2c, hmpu6050->address, reg, MPU_6050_ADDR_SIZE, data, dataSize, MPU_6050_I2C_WRITE_TIMEOUT)) {
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	6858      	ldr	r0, [r3, #4]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	7a1b      	ldrb	r3, [r3, #8]
 8000dc2:	b299      	uxth	r1, r3
 8000dc4:	7afb      	ldrb	r3, [r7, #11]
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	7abb      	ldrb	r3, [r7, #10]
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	2464      	movs	r4, #100	; 0x64
 8000dce:	9402      	str	r4, [sp, #8]
 8000dd0:	9301      	str	r3, [sp, #4]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	f000 ff78 	bl	8001ccc <HAL_I2C_Mem_Write>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <I2C_Write+0x6e>

    	/* Data couldn't be written */
    	return false;
 8000de2:	2300      	movs	r3, #0
 8000de4:	e000      	b.n	8000de8 <I2C_Write+0x70>
    } else {

    	/* Data written successfully */
    	return true;
 8000de6:	2301      	movs	r3, #1
    }
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd90      	pop	{r4, r7, pc}

08000df0 <MPU6050_IMU_InstanceInit>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static MPU6050_HandleTypeDef_t * MPU6050_IMU_InstanceInit(I2C_HandleTypeDef * hi2c) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]

    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = pvortMalloc(sizeof(1));
#else
    /* Allocate dynamic memory for the MPU6050_HandleTypeDef_t structure */
    MPU6050_HandleTypeDef_t * hmpu6050 = malloc(sizeof(MPU6050_HandleTypeDef_t));
 8000df8:	2014      	movs	r0, #20
 8000dfa:	f008 fb1b 	bl	8009434 <malloc>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	60fb      	str	r3, [r7, #12]

    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = malloc(sizeof(1));
 8000e02:	2004      	movs	r0, #4
 8000e04:	f008 fb16 	bl	8009434 <malloc>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	60bb      	str	r3, [r7, #8]
#endif

    /* Check if dynamic memory allocation was successful */
    if (NULL == hmpu6050 || NULL == buffer) {
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d002      	beq.n	8000e18 <MPU6050_IMU_InstanceInit+0x28>
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d10c      	bne.n	8000e32 <MPU6050_IMU_InstanceInit+0x42>
        /* Free up dynamic allocated memory */
        vPortFree(hmpu6050->buffer);
        vPortFree(hmpu6050);
#else
        /* Free up dynamic allocated memory */
        hmpu6050->buffer = 0;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
        free(hmpu6050->buffer);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f008 fb0e 	bl	8009444 <free>
        free(hmpu6050);
 8000e28:	68f8      	ldr	r0, [r7, #12]
 8000e2a:	f008 fb0b 	bl	8009444 <free>
#endif
        return NULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	e01b      	b.n	8000e6a <MPU6050_IMU_InstanceInit+0x7a>
    } else {
        /* Dynamic memory allocation was successful */

        /* Initialize MPU6050_HandleTypeDef_t structure */
        if (instancesNumber == 0) {
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <MPU6050_IMU_InstanceInit+0x84>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d106      	bne.n	8000e48 <MPU6050_IMU_InstanceInit+0x58>
            hmpu6050->instance = 1;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	701a      	strb	r2, [r3, #0]
            hmpu6050->address = MPU6050_I2C_ADDR1;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	22d0      	movs	r2, #208	; 0xd0
 8000e44:	721a      	strb	r2, [r3, #8]
 8000e46:	e009      	b.n	8000e5c <MPU6050_IMU_InstanceInit+0x6c>
        } else if (instancesNumber == 1) {
 8000e48:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <MPU6050_IMU_InstanceInit+0x84>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d105      	bne.n	8000e5c <MPU6050_IMU_InstanceInit+0x6c>
            hmpu6050->instance = 2;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	2202      	movs	r2, #2
 8000e54:	701a      	strb	r2, [r3, #0]
            hmpu6050->address = MPU6050_I2C_ADDR2;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	22d1      	movs	r2, #209	; 0xd1
 8000e5a:	721a      	strb	r2, [r3, #8]
        }
        hmpu6050->hi2c = hi2c;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	605a      	str	r2, [r3, #4]
        hmpu6050->buffer = buffer;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	68ba      	ldr	r2, [r7, #8]
 8000e66:	60da      	str	r2, [r3, #12]
    }

    /* Return created instance */
    return hmpu6050;
 8000e68:	68fb      	ldr	r3, [r7, #12]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000269 	.word	0x20000269

08000e78 <MPU6050_IMU_Config>:

static void MPU6050_IMU_Config(MPU6050_HandleTypeDef_t * hmpu6050) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

    /* Configure MPU6050 device */
    uint8_t regValue;

    /* --- Wake up device ---------------------------------------------------------------------- */
    regValue = 0x00;
 8000e80:	2300      	movs	r3, #0
 8000e82:	73fb      	strb	r3, [r7, #15]
    /* Write '0' to PWR_MGMT_1 register on SLEEP_MODE bit (6) */
    MPU6050_IMU_WriteRegister(hmpu6050, MPU_6050_REG_PWR_MGMT_1, &regValue, sizeof(regValue));
 8000e84:	f107 020f 	add.w	r2, r7, #15
 8000e88:	2301      	movs	r3, #1
 8000e8a:	216b      	movs	r1, #107	; 0x6b
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f000 f83c 	bl	8000f0a <MPU6050_IMU_WriteRegister>

    /* --- Set clock source -------------------------------------------------------------------- */
    regValue = 0x01;
 8000e92:	2301      	movs	r3, #1
 8000e94:	73fb      	strb	r3, [r7, #15]
    /* Write '001' to PWR_MGMT_1 register on CLKSEL bits [2:0] */
    /* Set clock source to be PLL with X axis gyroscope reference */
    MPU6050_IMU_WriteRegister(hmpu6050, MPU_6050_REG_PWR_MGMT_1, &regValue, sizeof(regValue));
 8000e96:	f107 020f 	add.w	r2, r7, #15
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	216b      	movs	r1, #107	; 0x6b
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f000 f833 	bl	8000f0a <MPU6050_IMU_WriteRegister>

    /* --- Set sample rate divider ------------------------------------------------------------- */
    regValue = (MPU6050_GYROSCOPE_SAMPLE_RATE - MPU6050_SAMPLE_RATE) / MPU6050_SAMPLE_RATE;
 8000ea4:	230f      	movs	r3, #15
 8000ea6:	73fb      	strb	r3, [r7, #15]
     * Gyroscope Output Rate = 8 kHz when the DLPF is disabled, for sample rate = 500 Hz,
     * SAMPLRT_DIVE = Gyroscope Output Rate = 1 kHz when the DLPF is enabled, for sample rate = 500
     * Hz
     */
    /* Write regValue to SMPLRT_DIV register bits [7:0] */
    MPU6050_IMU_WriteRegister(hmpu6050, MPU_6050_REG_SMPLRT_DIV, &regValue, sizeof(regValue));
 8000ea8:	f107 020f 	add.w	r2, r7, #15
 8000eac:	2301      	movs	r3, #1
 8000eae:	2119      	movs	r1, #25
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f000 f82a 	bl	8000f0a <MPU6050_IMU_WriteRegister>

    /* --- Configure gyroscope ----------------------------------------------------------------- */
    regValue = 11 << 3;
 8000eb6:	2358      	movs	r3, #88	; 0x58
 8000eb8:	73fb      	strb	r3, [r7, #15]
    /* Write '11' to GYRO_CONFIG register on FS_SEL bits [4:3] */
    MPU6050_IMU_WriteRegister(hmpu6050, MPU_6050_REG_GYRO_CONFIG, &regValue, sizeof(regValue));
 8000eba:	f107 020f 	add.w	r2, r7, #15
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	211b      	movs	r1, #27
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f000 f821 	bl	8000f0a <MPU6050_IMU_WriteRegister>

    /* --- Configure accelerometer ------------------------------------------------------------- */
    regValue = 11 << 3;
 8000ec8:	2358      	movs	r3, #88	; 0x58
 8000eca:	73fb      	strb	r3, [r7, #15]
    /* Write '11' to ACCEL_CONFIG register on FS_SEL bits [4:3] */
    MPU6050_IMU_WriteRegister(hmpu6050, MPU_6050_REG_ACCEL_CONFIG, &regValue, sizeof(regValue));
 8000ecc:	f107 020f 	add.w	r2, r7, #15
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	211c      	movs	r1, #28
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f000 f818 	bl	8000f0a <MPU6050_IMU_WriteRegister>
}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <MPU6050_IMU_ReadRegister>:

static void MPU6050_IMU_ReadRegister(MPU6050_HandleTypeDef_t * hmpu6050, uint8_t reg,
                                     uint8_t * data, uint8_t dataSize) {
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b084      	sub	sp, #16
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	60f8      	str	r0, [r7, #12]
 8000eea:	607a      	str	r2, [r7, #4]
 8000eec:	461a      	mov	r2, r3
 8000eee:	460b      	mov	r3, r1
 8000ef0:	72fb      	strb	r3, [r7, #11]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	72bb      	strb	r3, [r7, #10]

    I2C_Read(hmpu6050, reg, data, dataSize);
 8000ef6:	7abb      	ldrb	r3, [r7, #10]
 8000ef8:	7af9      	ldrb	r1, [r7, #11]
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	68f8      	ldr	r0, [r7, #12]
 8000efe:	f7ff feff 	bl	8000d00 <I2C_Read>
}
 8000f02:	bf00      	nop
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <MPU6050_IMU_WriteRegister>:

static void MPU6050_IMU_WriteRegister(MPU6050_HandleTypeDef_t * hmpu6050, uint8_t reg,
                                      uint8_t * data, uint8_t dataSize) {
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b084      	sub	sp, #16
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	60f8      	str	r0, [r7, #12]
 8000f12:	607a      	str	r2, [r7, #4]
 8000f14:	461a      	mov	r2, r3
 8000f16:	460b      	mov	r3, r1
 8000f18:	72fb      	strb	r3, [r7, #11]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	72bb      	strb	r3, [r7, #10]

    I2C_Write(hmpu6050, reg, data, dataSize);
 8000f1e:	7abb      	ldrb	r3, [r7, #10]
 8000f20:	7af9      	ldrb	r1, [r7, #11]
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	68f8      	ldr	r0, [r7, #12]
 8000f26:	f7ff ff27 	bl	8000d78 <I2C_Write>
}
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <MPU6050_IMU_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
MPU6050_HandleTypeDef_t * MPU6050_IMU_Init(I2C_HandleTypeDef * hi2c) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]

    /* Check if driver was already once or twice initialized */
    if (MPU6050_MAX_NUMBER_INSTANCES == instancesNumber) {
 8000f3c:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <MPU6050_IMU_Init+0x64>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d101      	bne.n	8000f48 <MPU6050_IMU_Init+0x14>
        return NULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	e022      	b.n	8000f8e <MPU6050_IMU_Init+0x5a>
    }

    /* Create an instance of the MPU6050_IMU device */
    MPU6050_HandleTypeDef_t * hmpu6050 = MPU6050_IMU_InstanceInit(hi2c);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff ff51 	bl	8000df0 <MPU6050_IMU_InstanceInit>
 8000f4e:	60f8      	str	r0, [r7, #12]

    /* Check if instance was successfully created */
    if (NULL != hmpu6050) {
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d01a      	beq.n	8000f8c <MPU6050_IMU_Init+0x58>
        /* Instance was successfully created */

        /* Initialize I2C communication */
        if (I2C_Init(hmpu6050)) {
 8000f56:	68f8      	ldr	r0, [r7, #12]
 8000f58:	f7ff feb8 	bl	8000ccc <I2C_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d00a      	beq.n	8000f78 <MPU6050_IMU_Init+0x44>

            /* Initialization was successful */
            /* Configure device */
            MPU6050_IMU_Config(hmpu6050);
 8000f62:	68f8      	ldr	r0, [r7, #12]
 8000f64:	f7ff ff88 	bl	8000e78 <MPU6050_IMU_Config>

            instancesNumber++;
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <MPU6050_IMU_Init+0x64>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <MPU6050_IMU_Init+0x64>)
 8000f72:	701a      	strb	r2, [r3, #0]

            return hmpu6050;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	e00a      	b.n	8000f8e <MPU6050_IMU_Init+0x5a>
            /* Free up dynamic allocated memory */
            vPortFree(hmpu6050->buffer);
            vPortFree(hmpu6050);
#else
            /* Free up dynamic allocated memory */
            free(hmpu6050->buffer);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f008 fa61 	bl	8009444 <free>
            free(hmpu6050);
 8000f82:	68f8      	ldr	r0, [r7, #12]
 8000f84:	f008 fa5e 	bl	8009444 <free>
#endif
            return NULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	e000      	b.n	8000f8e <MPU6050_IMU_Init+0x5a>
        }
    } else {

        /* Instance couldn't be created */
        return NULL;
 8000f8c:	2300      	movs	r3, #0
    }
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000269 	.word	0x20000269

08000f9c <MPU6050_IMU_ReadAccelerometer>:
    /* Read gyroscope in axis Z */
    MPU6050_IMU_ReadRegister(hmpu6050, MPU_6050_REG_GYRO_ZOUT_H, gyroscopeRawData, sizeof(uint16_t));
    gyroscopeValues->gyroscopeZ = (int16_t) (gyroscopeRawData[0] << 8 | gyroscopeRawData[1]);
}

void MPU6050_IMU_ReadAccelerometer(MPU6050_HandleTypeDef_t * hmpu6050, accelerometerValues_t * accelerometerValues) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]

	accelerometerValues->accelerometerX = 0;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	801a      	strh	r2, [r3, #0]
	accelerometerValues->accelerometerY = 0;
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	805a      	strh	r2, [r3, #2]
	accelerometerValues->accelerometerZ = 0;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	809a      	strh	r2, [r3, #4]

	uint8_t accelerometerRawData[2];

    /* Read accelerometer in axis X */
    MPU6050_IMU_ReadRegister(hmpu6050, MPU_6050_REG_ACCEL_XOUT_H, accelerometerRawData, sizeof(uint16_t));
 8000fb8:	f107 020c 	add.w	r2, r7, #12
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	213b      	movs	r1, #59	; 0x3b
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff ff8e 	bl	8000ee2 <MPU6050_IMU_ReadRegister>
    accelerometerValues->accelerometerX = (int16_t) (accelerometerRawData[0] << 8 | accelerometerRawData[1]);
 8000fc6:	7b3b      	ldrb	r3, [r7, #12]
 8000fc8:	021b      	lsls	r3, r3, #8
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	7b7b      	ldrb	r3, [r7, #13]
 8000fce:	b21b      	sxth	r3, r3
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	b21a      	sxth	r2, r3
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	801a      	strh	r2, [r3, #0]

    /* Read accelerometer in axis Y */
    MPU6050_IMU_ReadRegister(hmpu6050, MPU_6050_REG_ACCEL_YOUT_H, accelerometerRawData, sizeof(uint16_t));
 8000fd8:	f107 020c 	add.w	r2, r7, #12
 8000fdc:	2302      	movs	r3, #2
 8000fde:	213d      	movs	r1, #61	; 0x3d
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ff7e 	bl	8000ee2 <MPU6050_IMU_ReadRegister>
    accelerometerValues->accelerometerY = (int16_t) (accelerometerRawData[0] << 8 | accelerometerRawData[1]);
 8000fe6:	7b3b      	ldrb	r3, [r7, #12]
 8000fe8:	021b      	lsls	r3, r3, #8
 8000fea:	b21a      	sxth	r2, r3
 8000fec:	7b7b      	ldrb	r3, [r7, #13]
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	b21a      	sxth	r2, r3
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	805a      	strh	r2, [r3, #2]

    /* Read accelerometer in axis Z */
    MPU6050_IMU_ReadRegister(hmpu6050, MPU_6050_REG_ACCEL_ZOUT_H, accelerometerRawData, sizeof(uint16_t));
 8000ff8:	f107 020c 	add.w	r2, r7, #12
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	213f      	movs	r1, #63	; 0x3f
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff ff6e 	bl	8000ee2 <MPU6050_IMU_ReadRegister>
    accelerometerValues->accelerometerZ = (int16_t) (accelerometerRawData[0] << 8 | accelerometerRawData[1]);
 8001006:	7b3b      	ldrb	r3, [r7, #12]
 8001008:	021b      	lsls	r3, r3, #8
 800100a:	b21a      	sxth	r2, r3
 800100c:	7b7b      	ldrb	r3, [r7, #13]
 800100e:	b21b      	sxth	r3, r3
 8001010:	4313      	orrs	r3, r2
 8001012:	b21a      	sxth	r2, r3
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	809a      	strh	r2, [r3, #4]
}
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <HAL_Init+0x40>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a0d      	ldr	r2, [pc, #52]	; (8001060 <HAL_Init+0x40>)
 800102a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800102e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <HAL_Init+0x40>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <HAL_Init+0x40>)
 8001036:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800103a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <HAL_Init+0x40>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a07      	ldr	r2, [pc, #28]	; (8001060 <HAL_Init+0x40>)
 8001042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001046:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001048:	2003      	movs	r0, #3
 800104a:	f000 f94f 	bl	80012ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800104e:	200f      	movs	r0, #15
 8001050:	f000 f808 	bl	8001064 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001054:	f7ff fc34 	bl	80008c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40023c00 	.word	0x40023c00

08001064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <HAL_InitTick+0x54>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <HAL_InitTick+0x58>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	4619      	mov	r1, r3
 8001076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107a:	fbb3 f3f1 	udiv	r3, r3, r1
 800107e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f967 	bl	8001356 <HAL_SYSTICK_Config>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e00e      	b.n	80010b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b0f      	cmp	r3, #15
 8001096:	d80a      	bhi.n	80010ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001098:	2200      	movs	r2, #0
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010a0:	f000 f92f 	bl	8001302 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a4:	4a06      	ldr	r2, [pc, #24]	; (80010c0 <HAL_InitTick+0x5c>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
 80010ac:	e000      	b.n	80010b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000000 	.word	0x20000000
 80010bc:	20000008 	.word	0x20000008
 80010c0:	20000004 	.word	0x20000004

080010c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_IncTick+0x20>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <HAL_IncTick+0x24>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4413      	add	r3, r2
 80010d4:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <HAL_IncTick+0x24>)
 80010d6:	6013      	str	r3, [r2, #0]
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20000008 	.word	0x20000008
 80010e8:	2000026c 	.word	0x2000026c

080010ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return uwTick;
 80010f0:	4b03      	ldr	r3, [pc, #12]	; (8001100 <HAL_GetTick+0x14>)
 80010f2:	681b      	ldr	r3, [r3, #0]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	2000026c 	.word	0x2000026c

08001104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800110c:	f7ff ffee 	bl	80010ec <HAL_GetTick>
 8001110:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800111c:	d005      	beq.n	800112a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800111e:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <HAL_Delay+0x44>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4413      	add	r3, r2
 8001128:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800112a:	bf00      	nop
 800112c:	f7ff ffde 	bl	80010ec <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	429a      	cmp	r2, r3
 800113a:	d8f7      	bhi.n	800112c <HAL_Delay+0x28>
  {
  }
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000008 	.word	0x20000008

0800114c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <__NVIC_SetPriorityGrouping+0x44>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001168:	4013      	ands	r3, r2
 800116a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800117c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117e:	4a04      	ldr	r2, [pc, #16]	; (8001190 <__NVIC_SetPriorityGrouping+0x44>)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	60d3      	str	r3, [r2, #12]
}
 8001184:	bf00      	nop
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <__NVIC_GetPriorityGrouping+0x18>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	f003 0307 	and.w	r3, r3, #7
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	db0b      	blt.n	80011da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	f003 021f 	and.w	r2, r3, #31
 80011c8:	4907      	ldr	r1, [pc, #28]	; (80011e8 <__NVIC_EnableIRQ+0x38>)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	095b      	lsrs	r3, r3, #5
 80011d0:	2001      	movs	r0, #1
 80011d2:	fa00 f202 	lsl.w	r2, r0, r2
 80011d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000e100 	.word	0xe000e100

080011ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	db0a      	blt.n	8001216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	b2da      	uxtb	r2, r3
 8001204:	490c      	ldr	r1, [pc, #48]	; (8001238 <__NVIC_SetPriority+0x4c>)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	0112      	lsls	r2, r2, #4
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	440b      	add	r3, r1
 8001210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001214:	e00a      	b.n	800122c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4908      	ldr	r1, [pc, #32]	; (800123c <__NVIC_SetPriority+0x50>)
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	3b04      	subs	r3, #4
 8001224:	0112      	lsls	r2, r2, #4
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	440b      	add	r3, r1
 800122a:	761a      	strb	r2, [r3, #24]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000e100 	.word	0xe000e100
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	; 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f1c3 0307 	rsb	r3, r3, #7
 800125a:	2b04      	cmp	r3, #4
 800125c:	bf28      	it	cs
 800125e:	2304      	movcs	r3, #4
 8001260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3304      	adds	r3, #4
 8001266:	2b06      	cmp	r3, #6
 8001268:	d902      	bls.n	8001270 <NVIC_EncodePriority+0x30>
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3b03      	subs	r3, #3
 800126e:	e000      	b.n	8001272 <NVIC_EncodePriority+0x32>
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43da      	mvns	r2, r3
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	401a      	ands	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001288:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	43d9      	mvns	r1, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	4313      	orrs	r3, r2
         );
}
 800129a:	4618      	mov	r0, r3
 800129c:	3724      	adds	r7, #36	; 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b8:	d301      	bcc.n	80012be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00f      	b.n	80012de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012be:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <SysTick_Config+0x40>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c6:	210f      	movs	r1, #15
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012cc:	f7ff ff8e 	bl	80011ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <SysTick_Config+0x40>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d6:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <SysTick_Config+0x40>)
 80012d8:	2207      	movs	r2, #7
 80012da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	e000e010 	.word	0xe000e010

080012ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ff29 	bl	800114c <__NVIC_SetPriorityGrouping>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
 800130e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001314:	f7ff ff3e 	bl	8001194 <__NVIC_GetPriorityGrouping>
 8001318:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	68b9      	ldr	r1, [r7, #8]
 800131e:	6978      	ldr	r0, [r7, #20]
 8001320:	f7ff ff8e 	bl	8001240 <NVIC_EncodePriority>
 8001324:	4602      	mov	r2, r0
 8001326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132a:	4611      	mov	r1, r2
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff5d 	bl	80011ec <__NVIC_SetPriority>
}
 8001332:	bf00      	nop
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff31 	bl	80011b0 <__NVIC_EnableIRQ>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ffa2 	bl	80012a8 <SysTick_Config>
 8001364:	4603      	mov	r3, r0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800137c:	f7ff feb6 	bl	80010ec <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d101      	bne.n	800138c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e099      	b.n	80014c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2202      	movs	r2, #2
 8001390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0201 	bic.w	r2, r2, #1
 80013aa:	601a      	str	r2, [r3, #0]

  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013ac:	e00f      	b.n	80013ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013ae:	f7ff fe9d 	bl	80010ec <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b05      	cmp	r3, #5
 80013ba:	d908      	bls.n	80013ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2220      	movs	r2, #32
 80013c0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2203      	movs	r2, #3
 80013c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e078      	b.n	80014c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1e8      	bne.n	80013ae <HAL_DMA_Init+0x3e>
    }
  }

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	4b38      	ldr	r3, [pc, #224]	; (80014c8 <HAL_DMA_Init+0x158>)
 80013e8:	4013      	ands	r3, r2
 80013ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001406:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001412:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	4313      	orrs	r3, r2
 800141e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001424:	2b04      	cmp	r3, #4
 8001426:	d107      	bne.n	8001438 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001430:	4313      	orrs	r3, r2
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	4313      	orrs	r3, r2
 8001436:	617b      	str	r3, [r7, #20]
  }

  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	f023 0307 	bic.w	r3, r3, #7
 800144e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	4313      	orrs	r3, r2
 8001458:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145e:	2b04      	cmp	r3, #4
 8001460:	d117      	bne.n	8001492 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	4313      	orrs	r3, r2
 800146a:	617b      	str	r3, [r7, #20]

    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00e      	beq.n	8001492 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f000 f8e5 	bl	8001644 <DMA_CheckFifoParam>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d008      	beq.n	8001492 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2240      	movs	r2, #64	; 0x40
 8001484:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2201      	movs	r2, #1
 800148a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e016      	b.n	80014c0 <HAL_DMA_Init+0x150>
      }
    }
  }

  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 f89c 	bl	80015d8 <DMA_CalcBaseAndBitshift>
 80014a0:	4603      	mov	r3, r0
 80014a2:	60fb      	str	r3, [r7, #12]

  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a8:	223f      	movs	r2, #63	; 0x3f
 80014aa:	409a      	lsls	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	f010803f 	.word	0xf010803f

080014cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
 80014d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d101      	bne.n	80014f2 <HAL_DMA_Start_IT+0x26>
 80014ee:	2302      	movs	r3, #2
 80014f0:	e040      	b.n	8001574 <HAL_DMA_Start_IT+0xa8>
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2201      	movs	r2, #1
 80014f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b01      	cmp	r3, #1
 8001504:	d12f      	bne.n	8001566 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2202      	movs	r2, #2
 800150a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	655a      	str	r2, [r3, #84]	; 0x54

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	68b9      	ldr	r1, [r7, #8]
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f000 f82e 	bl	800157c <DMA_SetConfig>

    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001524:	223f      	movs	r2, #63	; 0x3f
 8001526:	409a      	lsls	r2, r3
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	609a      	str	r2, [r3, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 0216 	orr.w	r2, r2, #22
 800153a:	601a      	str	r2, [r3, #0]

    if(hdma->XferHalfCpltCallback != NULL)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	2b00      	cmp	r3, #0
 8001542:	d007      	beq.n	8001554 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f042 0208 	orr.w	r2, r2, #8
 8001552:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 0201 	orr.w	r2, r2, #1
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	e005      	b.n	8001572 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_BUSY;
 800156e:	2302      	movs	r3, #2
 8001570:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001572:	7dfb      	ldrb	r3, [r7, #23]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
 8001588:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001598:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2b40      	cmp	r3, #64	; 0x40
 80015a8:	d108      	bne.n	80015bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80015ba:	e007      	b.n	80015cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68ba      	ldr	r2, [r7, #8]
 80015c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	60da      	str	r2, [r3, #12]
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	3b10      	subs	r3, #16
 80015e8:	4a14      	ldr	r2, [pc, #80]	; (800163c <DMA_CalcBaseAndBitshift+0x64>)
 80015ea:	fba2 2303 	umull	r2, r3, r2, r3
 80015ee:	091b      	lsrs	r3, r3, #4
 80015f0:	60fb      	str	r3, [r7, #12]

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015f2:	4a13      	ldr	r2, [pc, #76]	; (8001640 <DMA_CalcBaseAndBitshift+0x68>)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4413      	add	r3, r2
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	65da      	str	r2, [r3, #92]	; 0x5c

  if (stream_number > 3U)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2b03      	cmp	r3, #3
 8001604:	d909      	bls.n	800161a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800160e:	f023 0303 	bic.w	r3, r3, #3
 8001612:	1d1a      	adds	r2, r3, #4
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	659a      	str	r2, [r3, #88]	; 0x58
 8001618:	e007      	b.n	800162a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001622:	f023 0303 	bic.w	r3, r3, #3
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	6593      	str	r3, [r2, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800162e:	4618      	mov	r0, r3
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	aaaaaaab 	.word	0xaaaaaaab
 8001640:	08009e54 	.word	0x08009e54

08001644 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800164c:	2300      	movs	r3, #0
 800164e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	60bb      	str	r3, [r7, #8]

  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d11f      	bne.n	800169e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	2b03      	cmp	r3, #3
 8001662:	d856      	bhi.n	8001712 <DMA_CheckFifoParam+0xce>
 8001664:	a201      	add	r2, pc, #4	; (adr r2, 800166c <DMA_CheckFifoParam+0x28>)
 8001666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800166a:	bf00      	nop
 800166c:	0800167d 	.word	0x0800167d
 8001670:	0800168f 	.word	0x0800168f
 8001674:	0800167d 	.word	0x0800167d
 8001678:	08001713 	.word	0x08001713
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001680:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d046      	beq.n	8001716 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800168c:	e043      	b.n	8001716 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001692:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001696:	d140      	bne.n	800171a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800169c:	e03d      	b.n	800171a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016a6:	d121      	bne.n	80016ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d837      	bhi.n	800171e <DMA_CheckFifoParam+0xda>
 80016ae:	a201      	add	r2, pc, #4	; (adr r2, 80016b4 <DMA_CheckFifoParam+0x70>)
 80016b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b4:	080016c5 	.word	0x080016c5
 80016b8:	080016cb 	.word	0x080016cb
 80016bc:	080016c5 	.word	0x080016c5
 80016c0:	080016dd 	.word	0x080016dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	73fb      	strb	r3, [r7, #15]
      break;
 80016c8:	e030      	b.n	800172c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d025      	beq.n	8001722 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016da:	e022      	b.n	8001722 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016e4:	d11f      	bne.n	8001726 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016ea:	e01c      	b.n	8001726 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d903      	bls.n	80016fa <DMA_CheckFifoParam+0xb6>
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	2b03      	cmp	r3, #3
 80016f6:	d003      	beq.n	8001700 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80016f8:	e018      	b.n	800172c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	73fb      	strb	r3, [r7, #15]
      break;
 80016fe:	e015      	b.n	800172c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001704:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d00e      	beq.n	800172a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	73fb      	strb	r3, [r7, #15]
      break;
 8001710:	e00b      	b.n	800172a <DMA_CheckFifoParam+0xe6>
      break;
 8001712:	bf00      	nop
 8001714:	e00a      	b.n	800172c <DMA_CheckFifoParam+0xe8>
      break;
 8001716:	bf00      	nop
 8001718:	e008      	b.n	800172c <DMA_CheckFifoParam+0xe8>
      break;
 800171a:	bf00      	nop
 800171c:	e006      	b.n	800172c <DMA_CheckFifoParam+0xe8>
      break;
 800171e:	bf00      	nop
 8001720:	e004      	b.n	800172c <DMA_CheckFifoParam+0xe8>
      break;
 8001722:	bf00      	nop
 8001724:	e002      	b.n	800172c <DMA_CheckFifoParam+0xe8>
      break;
 8001726:	bf00      	nop
 8001728:	e000      	b.n	800172c <DMA_CheckFifoParam+0xe8>
      break;
 800172a:	bf00      	nop
    }
  }

  return status;
 800172c:	7bfb      	ldrb	r3, [r7, #15]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop

0800173c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800173c:	b480      	push	{r7}
 800173e:	b089      	sub	sp, #36	; 0x24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800174e:	2300      	movs	r3, #0
 8001750:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
 8001756:	e159      	b.n	8001a0c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001758:	2201      	movs	r2, #1
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	4013      	ands	r3, r2
 800176a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	429a      	cmp	r2, r3
 8001772:	f040 8148 	bne.w	8001a06 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	2b01      	cmp	r3, #1
 8001780:	d005      	beq.n	800178e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800178a:	2b02      	cmp	r3, #2
 800178c:	d130      	bne.n	80017f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	2203      	movs	r2, #3
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4013      	ands	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	68da      	ldr	r2, [r3, #12]
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017c4:	2201      	movs	r2, #1
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	091b      	lsrs	r3, r3, #4
 80017da:	f003 0201 	and.w	r2, r3, #1
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 0303 	and.w	r3, r3, #3
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	d017      	beq.n	800182c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	2203      	movs	r2, #3
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4013      	ands	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4313      	orrs	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 0303 	and.w	r3, r3, #3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d123      	bne.n	8001880 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	08da      	lsrs	r2, r3, #3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3208      	adds	r2, #8
 8001840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001844:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	220f      	movs	r2, #15
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	691a      	ldr	r2, [r3, #16]
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	08da      	lsrs	r2, r3, #3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	3208      	adds	r2, #8
 800187a:	69b9      	ldr	r1, [r7, #24]
 800187c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	2203      	movs	r2, #3
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4013      	ands	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 0203 	and.w	r2, r3, #3
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f000 80a2 	beq.w	8001a06 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	4b57      	ldr	r3, [pc, #348]	; (8001a24 <HAL_GPIO_Init+0x2e8>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	4a56      	ldr	r2, [pc, #344]	; (8001a24 <HAL_GPIO_Init+0x2e8>)
 80018cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d0:	6453      	str	r3, [r2, #68]	; 0x44
 80018d2:	4b54      	ldr	r3, [pc, #336]	; (8001a24 <HAL_GPIO_Init+0x2e8>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018de:	4a52      	ldr	r2, [pc, #328]	; (8001a28 <HAL_GPIO_Init+0x2ec>)
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	089b      	lsrs	r3, r3, #2
 80018e4:	3302      	adds	r3, #2
 80018e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	220f      	movs	r2, #15
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4013      	ands	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a49      	ldr	r2, [pc, #292]	; (8001a2c <HAL_GPIO_Init+0x2f0>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d019      	beq.n	800193e <HAL_GPIO_Init+0x202>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a48      	ldr	r2, [pc, #288]	; (8001a30 <HAL_GPIO_Init+0x2f4>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d013      	beq.n	800193a <HAL_GPIO_Init+0x1fe>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a47      	ldr	r2, [pc, #284]	; (8001a34 <HAL_GPIO_Init+0x2f8>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d00d      	beq.n	8001936 <HAL_GPIO_Init+0x1fa>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a46      	ldr	r2, [pc, #280]	; (8001a38 <HAL_GPIO_Init+0x2fc>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d007      	beq.n	8001932 <HAL_GPIO_Init+0x1f6>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a45      	ldr	r2, [pc, #276]	; (8001a3c <HAL_GPIO_Init+0x300>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d101      	bne.n	800192e <HAL_GPIO_Init+0x1f2>
 800192a:	2304      	movs	r3, #4
 800192c:	e008      	b.n	8001940 <HAL_GPIO_Init+0x204>
 800192e:	2307      	movs	r3, #7
 8001930:	e006      	b.n	8001940 <HAL_GPIO_Init+0x204>
 8001932:	2303      	movs	r3, #3
 8001934:	e004      	b.n	8001940 <HAL_GPIO_Init+0x204>
 8001936:	2302      	movs	r3, #2
 8001938:	e002      	b.n	8001940 <HAL_GPIO_Init+0x204>
 800193a:	2301      	movs	r3, #1
 800193c:	e000      	b.n	8001940 <HAL_GPIO_Init+0x204>
 800193e:	2300      	movs	r3, #0
 8001940:	69fa      	ldr	r2, [r7, #28]
 8001942:	f002 0203 	and.w	r2, r2, #3
 8001946:	0092      	lsls	r2, r2, #2
 8001948:	4093      	lsls	r3, r2
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001950:	4935      	ldr	r1, [pc, #212]	; (8001a28 <HAL_GPIO_Init+0x2ec>)
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	089b      	lsrs	r3, r3, #2
 8001956:	3302      	adds	r3, #2
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800195e:	4b38      	ldr	r3, [pc, #224]	; (8001a40 <HAL_GPIO_Init+0x304>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001982:	4a2f      	ldr	r2, [pc, #188]	; (8001a40 <HAL_GPIO_Init+0x304>)
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001988:	4b2d      	ldr	r3, [pc, #180]	; (8001a40 <HAL_GPIO_Init+0x304>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019ac:	4a24      	ldr	r2, [pc, #144]	; (8001a40 <HAL_GPIO_Init+0x304>)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019b2:	4b23      	ldr	r3, [pc, #140]	; (8001a40 <HAL_GPIO_Init+0x304>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019d6:	4a1a      	ldr	r2, [pc, #104]	; (8001a40 <HAL_GPIO_Init+0x304>)
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019dc:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <HAL_GPIO_Init+0x304>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a00:	4a0f      	ldr	r2, [pc, #60]	; (8001a40 <HAL_GPIO_Init+0x304>)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	61fb      	str	r3, [r7, #28]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	2b0f      	cmp	r3, #15
 8001a10:	f67f aea2 	bls.w	8001758 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a14:	bf00      	nop
 8001a16:	bf00      	nop
 8001a18:	3724      	adds	r7, #36	; 0x24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40013800 	.word	0x40013800
 8001a2c:	40020000 	.word	0x40020000
 8001a30:	40020400 	.word	0x40020400
 8001a34:	40020800 	.word	0x40020800
 8001a38:	40020c00 	.word	0x40020c00
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40013c00 	.word	0x40013c00

08001a44 <HAL_I2C_Init>:
 *         in the I2C_InitTypeDef and initialize the associated handle.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef * hi2c) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
    uint32_t freqrange;
    uint32_t pclk1;

    /* Check the I2C handle allocation */
    if (hi2c == NULL) {
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_I2C_Init+0x12>
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e12b      	b.n	8001cae <HAL_I2C_Init+0x26a>
    assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
    assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
    assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
    assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

    if (hi2c->State == HAL_I2C_STATE_RESET) {
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d106      	bne.n	8001a70 <HAL_I2C_Init+0x2c>
        /* Allocate lock resource and initialize it */
        hi2c->Lock = HAL_UNLOCKED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        hi2c->MspInitCallback(hi2c);
#else
        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        HAL_I2C_MspInit(hi2c);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7fe ff50 	bl	8000910 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2224      	movs	r2, #36	; 0x24
 8001a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 0201 	bic.w	r2, r2, #1
 8001a86:	601a      	str	r2, [r3, #0]

    /*Reset I2C*/
    hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a96:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001aa6:	601a      	str	r2, [r3, #0]

    /* Get PCLK1 frequency */
    pclk1 = HAL_RCC_GetPCLK1Freq();
 8001aa8:	f002 fe38 	bl	800471c <HAL_RCC_GetPCLK1Freq>
 8001aac:	60f8      	str	r0, [r7, #12]

    /* Check the minimum allowed PCLK1 frequency */
    if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U) {
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	4a81      	ldr	r2, [pc, #516]	; (8001cb8 <HAL_I2C_Init+0x274>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d807      	bhi.n	8001ac8 <HAL_I2C_Init+0x84>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4a80      	ldr	r2, [pc, #512]	; (8001cbc <HAL_I2C_Init+0x278>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	bf94      	ite	ls
 8001ac0:	2301      	movls	r3, #1
 8001ac2:	2300      	movhi	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	e006      	b.n	8001ad6 <HAL_I2C_Init+0x92>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4a7d      	ldr	r2, [pc, #500]	; (8001cc0 <HAL_I2C_Init+0x27c>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	bf94      	ite	ls
 8001ad0:	2301      	movls	r3, #1
 8001ad2:	2300      	movhi	r3, #0
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_I2C_Init+0x9a>
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e0e7      	b.n	8001cae <HAL_I2C_Init+0x26a>
    }

    /* Calculate frequency range */
    freqrange = I2C_FREQRANGE(pclk1);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	4a78      	ldr	r2, [pc, #480]	; (8001cc4 <HAL_I2C_Init+0x280>)
 8001ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae6:	0c9b      	lsrs	r3, r3, #18
 8001ae8:	60bb      	str	r3, [r7, #8]

    /*---------------------------- I2Cx CR2 Configuration ----------------------*/
    /* Configure I2Cx: Frequency range */
    MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	605a      	str	r2, [r3, #4]

    /*---------------------------- I2Cx TRISE Configuration --------------------*/
    /* Configure I2Cx: Rise Time */
    MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE,
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	4a6a      	ldr	r2, [pc, #424]	; (8001cb8 <HAL_I2C_Init+0x274>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d802      	bhi.n	8001b18 <HAL_I2C_Init+0xd4>
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	3301      	adds	r3, #1
 8001b16:	e009      	b.n	8001b2c <HAL_I2C_Init+0xe8>
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b1e:	fb02 f303 	mul.w	r3, r2, r3
 8001b22:	4a69      	ldr	r2, [pc, #420]	; (8001cc8 <HAL_I2C_Init+0x284>)
 8001b24:	fba2 2303 	umull	r2, r3, r2, r3
 8001b28:	099b      	lsrs	r3, r3, #6
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6812      	ldr	r2, [r2, #0]
 8001b30:	430b      	orrs	r3, r1
 8001b32:	6213      	str	r3, [r2, #32]
               I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

    /*---------------------------- I2Cx CCR Configuration ----------------------*/
    /* Configure I2Cx: Speed */
    MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR),
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	495c      	ldr	r1, [pc, #368]	; (8001cb8 <HAL_I2C_Init+0x274>)
 8001b48:	428b      	cmp	r3, r1
 8001b4a:	d819      	bhi.n	8001b80 <HAL_I2C_Init+0x13c>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	1e59      	subs	r1, r3, #1
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b5a:	1c59      	adds	r1, r3, #1
 8001b5c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b60:	400b      	ands	r3, r1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00a      	beq.n	8001b7c <HAL_I2C_Init+0x138>
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1e59      	subs	r1, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b74:	3301      	adds	r3, #1
 8001b76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b7a:	e051      	b.n	8001c20 <HAL_I2C_Init+0x1dc>
 8001b7c:	2304      	movs	r3, #4
 8001b7e:	e04f      	b.n	8001c20 <HAL_I2C_Init+0x1dc>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d111      	bne.n	8001bac <HAL_I2C_Init+0x168>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1e58      	subs	r0, r3, #1
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6859      	ldr	r1, [r3, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	440b      	add	r3, r1
 8001b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	bf0c      	ite	eq
 8001ba4:	2301      	moveq	r3, #1
 8001ba6:	2300      	movne	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	e012      	b.n	8001bd2 <HAL_I2C_Init+0x18e>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	1e58      	subs	r0, r3, #1
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6859      	ldr	r1, [r3, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	440b      	add	r3, r1
 8001bba:	0099      	lsls	r1, r3, #2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	bf0c      	ite	eq
 8001bcc:	2301      	moveq	r3, #1
 8001bce:	2300      	movne	r3, #0
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_I2C_Init+0x196>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e022      	b.n	8001c20 <HAL_I2C_Init+0x1dc>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10e      	bne.n	8001c00 <HAL_I2C_Init+0x1bc>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	1e58      	subs	r0, r3, #1
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6859      	ldr	r1, [r3, #4]
 8001bea:	460b      	mov	r3, r1
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	440b      	add	r3, r1
 8001bf0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bfe:	e00f      	b.n	8001c20 <HAL_I2C_Init+0x1dc>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	1e58      	subs	r0, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6859      	ldr	r1, [r3, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	0099      	lsls	r1, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c16:	3301      	adds	r3, #1
 8001c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	6809      	ldr	r1, [r1, #0]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61cb      	str	r3, [r1, #28]
               I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));

    /*---------------------------- I2Cx CR1 Configuration ----------------------*/
    /* Configure I2Cx: Generalcall and NoStretch mode */
    MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH),
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69da      	ldr	r2, [r3, #28]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	601a      	str	r2, [r3, #0]
               (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));

    /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
    /* Configure I2Cx: Own Address1 and addressing mode */
    MODIFY_REG(hi2c->Instance->OAR1,
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6911      	ldr	r1, [r2, #16]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	68d2      	ldr	r2, [r2, #12]
 8001c5a:	4311      	orrs	r1, r2
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	430b      	orrs	r3, r1
 8001c62:	6093      	str	r3, [r2, #8]
               (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0),
               (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));

    /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
    /* Configure I2Cx: Dual mode and Own Address2 */
    MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2),
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695a      	ldr	r2, [r3, #20]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	60da      	str	r2, [r3, #12]
               (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));

    /* Enable the selected I2C peripheral */
    __HAL_I2C_ENABLE(hi2c);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0201 	orr.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]

    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2220      	movs	r2, #32
 8001c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	000186a0 	.word	0x000186a0
 8001cbc:	001e847f 	.word	0x001e847f
 8001cc0:	003d08ff 	.word	0x003d08ff
 8001cc4:	431bde83 	.word	0x431bde83
 8001cc8:	10624dd3 	.word	0x10624dd3

08001ccc <HAL_I2C_Mem_Write>:
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef * hi2c, uint16_t DevAddress,
                                    uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData,
                                    uint16_t Size, uint32_t Timeout) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af02      	add	r7, sp, #8
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	4608      	mov	r0, r1
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4603      	mov	r3, r0
 8001cdc:	817b      	strh	r3, [r7, #10]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	813b      	strh	r3, [r7, #8]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	80fb      	strh	r3, [r7, #6]
    /* Init tickstart for timeout management*/
    uint32_t tickstart = HAL_GetTick();
 8001ce6:	f7ff fa01 	bl	80010ec <HAL_GetTick>
 8001cea:	6178      	str	r0, [r7, #20]

    /* Check the parameters */
    assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

    if (hi2c->State == HAL_I2C_STATE_READY) {
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b20      	cmp	r3, #32
 8001cf6:	f040 80d9 	bne.w	8001eac <HAL_I2C_Mem_Write+0x1e0>
        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG,
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	2319      	movs	r3, #25
 8001d00:	2201      	movs	r2, #1
 8001d02:	496d      	ldr	r1, [pc, #436]	; (8001eb8 <HAL_I2C_Mem_Write+0x1ec>)
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f000 fc7f 	bl	8002608 <I2C_WaitOnFlagUntilTimeout>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <HAL_I2C_Mem_Write+0x48>
                                       tickstart) != HAL_OK) {
            return HAL_BUSY;
 8001d10:	2302      	movs	r3, #2
 8001d12:	e0cc      	b.n	8001eae <HAL_I2C_Mem_Write+0x1e2>
        }

        /* Process Locked */
        __HAL_LOCK(hi2c);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d101      	bne.n	8001d22 <HAL_I2C_Mem_Write+0x56>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e0c5      	b.n	8001eae <HAL_I2C_Mem_Write+0x1e2>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Check if the I2C is already enabled */
        if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d007      	beq.n	8001d48 <HAL_I2C_Mem_Write+0x7c>
            /* Enable I2C peripheral */
            __HAL_I2C_ENABLE(hi2c);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]
        }

        /* Disable Pos */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d56:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_BUSY_TX;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2221      	movs	r2, #33	; 0x21
 8001d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_MEM;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2240      	movs	r2, #64	; 0x40
 8001d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Prepare transfer parameters */
        hi2c->pBuffPtr = pData;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6a3a      	ldr	r2, [r7, #32]
 8001d72:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount = Size;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d78:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize = hi2c->XferCount;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4a4d      	ldr	r2, [pc, #308]	; (8001ebc <HAL_I2C_Mem_Write+0x1f0>)
 8001d88:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) !=
 8001d8a:	88f8      	ldrh	r0, [r7, #6]
 8001d8c:	893a      	ldrh	r2, [r7, #8]
 8001d8e:	8979      	ldrh	r1, [r7, #10]
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	9301      	str	r3, [sp, #4]
 8001d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	4603      	mov	r3, r0
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 fab6 	bl	800230c <I2C_RequestMemoryWrite>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d052      	beq.n	8001e4c <HAL_I2C_Mem_Write+0x180>
            HAL_OK) {
            return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e081      	b.n	8001eae <HAL_I2C_Mem_Write+0x1e2>
        }

        while (hi2c->XferSize > 0U) {
            /* Wait until TXE flag is set */
            if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f000 fd00 	bl	80027b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00d      	beq.n	8001dd6 <HAL_I2C_Mem_Write+0x10a>
                if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d107      	bne.n	8001dd2 <HAL_I2C_Mem_Write+0x106>
                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dd0:	601a      	str	r2, [r3, #0]
                }
                return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e06b      	b.n	8001eae <HAL_I2C_Mem_Write+0x1e2>
            }

            /* Write data to DR */
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	781a      	ldrb	r2, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	611a      	str	r2, [r3, #16]

            /* Increment Buffer pointer */
            hi2c->pBuffPtr++;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	1c5a      	adds	r2, r3, #1
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	625a      	str	r2, [r3, #36]	; 0x24

            /* Update counter */
            hi2c->XferSize--;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df0:	3b01      	subs	r3, #1
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	851a      	strh	r2, [r3, #40]	; 0x28
            hi2c->XferCount--;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	855a      	strh	r2, [r3, #42]	; 0x2a

            if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U)) {
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d11b      	bne.n	8001e4c <HAL_I2C_Mem_Write+0x180>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d017      	beq.n	8001e4c <HAL_I2C_Mem_Write+0x180>
                /* Write data to DR */
                hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	781a      	ldrb	r2, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	611a      	str	r2, [r3, #16]

                /* Increment Buffer pointer */
                hi2c->pBuffPtr++;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	625a      	str	r2, [r3, #36]	; 0x24

                /* Update counter */
                hi2c->XferSize--;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e36:	3b01      	subs	r3, #1
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	851a      	strh	r2, [r3, #40]	; 0x28
                hi2c->XferCount--;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	3b01      	subs	r3, #1
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	855a      	strh	r2, [r3, #42]	; 0x2a
        while (hi2c->XferSize > 0U) {
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1aa      	bne.n	8001daa <HAL_I2C_Mem_Write+0xde>
            }
        }

        /* Wait until BTF flag is set */
        if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f000 fcec 	bl	8002836 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00d      	beq.n	8001e80 <HAL_I2C_Mem_Write+0x1b4>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	2b04      	cmp	r3, #4
 8001e6a:	d107      	bne.n	8001e7c <HAL_I2C_Mem_Write+0x1b0>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e7a:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e016      	b.n	8001eae <HAL_I2C_Mem_Write+0x1e2>
        }

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e8e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2220      	movs	r2, #32
 8001e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	e000      	b.n	8001eae <HAL_I2C_Mem_Write+0x1e2>
    } else {
        return HAL_BUSY;
 8001eac:	2302      	movs	r3, #2
    }
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	00100002 	.word	0x00100002
 8001ebc:	ffff0000 	.word	0xffff0000

08001ec0 <HAL_I2C_Mem_Read>:
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef * hi2c, uint16_t DevAddress,
                                   uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData,
                                   uint16_t Size, uint32_t Timeout) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08c      	sub	sp, #48	; 0x30
 8001ec4:	af02      	add	r7, sp, #8
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	4608      	mov	r0, r1
 8001eca:	4611      	mov	r1, r2
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4603      	mov	r3, r0
 8001ed0:	817b      	strh	r3, [r7, #10]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	813b      	strh	r3, [r7, #8]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	80fb      	strh	r3, [r7, #6]
    /* Init tickstart for timeout management*/
    uint32_t tickstart = HAL_GetTick();
 8001eda:	f7ff f907 	bl	80010ec <HAL_GetTick>
 8001ede:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the parameters */
    assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

    if (hi2c->State == HAL_I2C_STATE_READY) {
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b20      	cmp	r3, #32
 8001eea:	f040 8208 	bne.w	80022fe <HAL_I2C_Mem_Read+0x43e>
        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG,
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	2319      	movs	r3, #25
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	497b      	ldr	r1, [pc, #492]	; (80020e4 <HAL_I2C_Mem_Read+0x224>)
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f000 fb85 	bl	8002608 <I2C_WaitOnFlagUntilTimeout>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <HAL_I2C_Mem_Read+0x48>
                                       tickstart) != HAL_OK) {
            return HAL_BUSY;
 8001f04:	2302      	movs	r3, #2
 8001f06:	e1fb      	b.n	8002300 <HAL_I2C_Mem_Read+0x440>
        }

        /* Process Locked */
        __HAL_LOCK(hi2c);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d101      	bne.n	8001f16 <HAL_I2C_Mem_Read+0x56>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e1f4      	b.n	8002300 <HAL_I2C_Mem_Read+0x440>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Check if the I2C is already enabled */
        if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d007      	beq.n	8001f3c <HAL_I2C_Mem_Read+0x7c>
            /* Enable I2C peripheral */
            __HAL_I2C_ENABLE(hi2c);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0201 	orr.w	r2, r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]
        }

        /* Disable Pos */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f4a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_BUSY_RX;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2222      	movs	r2, #34	; 0x22
 8001f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_MEM;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2240      	movs	r2, #64	; 0x40
 8001f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Prepare transfer parameters */
        hi2c->pBuffPtr = pData;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f66:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount = Size;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001f6c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize = hi2c->XferCount;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4a5b      	ldr	r2, [pc, #364]	; (80020e8 <HAL_I2C_Mem_Read+0x228>)
 8001f7c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) !=
 8001f7e:	88f8      	ldrh	r0, [r7, #6]
 8001f80:	893a      	ldrh	r2, [r7, #8]
 8001f82:	8979      	ldrh	r1, [r7, #10]
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	9301      	str	r3, [sp, #4]
 8001f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 fa52 	bl	8002438 <I2C_RequestMemoryRead>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_I2C_Mem_Read+0xde>
            HAL_OK) {
            return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e1b0      	b.n	8002300 <HAL_I2C_Mem_Read+0x440>
        }

        if (hi2c->XferSize == 0U) {
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d113      	bne.n	8001fce <HAL_I2C_Mem_Read+0x10e>
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	623b      	str	r3, [r7, #32]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	623b      	str	r3, [r7, #32]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	623b      	str	r3, [r7, #32]
 8001fba:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	e184      	b.n	80022d8 <HAL_I2C_Mem_Read+0x418>
        } else if (hi2c->XferSize == 1U) {
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d11b      	bne.n	800200e <HAL_I2C_Mem_Read+0x14e>
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fe4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61fb      	str	r3, [r7, #28]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	61fb      	str	r3, [r7, #28]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	69fb      	ldr	r3, [r7, #28]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	e164      	b.n	80022d8 <HAL_I2C_Mem_Read+0x418>
        } else if (hi2c->XferSize == 2U) {
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002012:	2b02      	cmp	r3, #2
 8002014:	d11b      	bne.n	800204e <HAL_I2C_Mem_Read+0x18e>
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002024:	601a      	str	r2, [r3, #0]

            /* Enable Pos */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002034:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002036:	2300      	movs	r3, #0
 8002038:	61bb      	str	r3, [r7, #24]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	61bb      	str	r3, [r7, #24]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	61bb      	str	r3, [r7, #24]
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	e144      	b.n	80022d8 <HAL_I2C_Mem_Read+0x418>
        } else {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	697b      	ldr	r3, [r7, #20]
        }

        while (hi2c->XferSize > 0U) {
 8002064:	e138      	b.n	80022d8 <HAL_I2C_Mem_Read+0x418>
            if (hi2c->XferSize <= 3U) {
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800206a:	2b03      	cmp	r3, #3
 800206c:	f200 80f1 	bhi.w	8002252 <HAL_I2C_Mem_Read+0x392>
                /* One byte */
                if (hi2c->XferSize == 1U) {
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002074:	2b01      	cmp	r3, #1
 8002076:	d123      	bne.n	80020c0 <HAL_I2C_Mem_Read+0x200>
                    /* Wait until RXNE flag is set */
                    if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8002078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800207a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f000 fc1b 	bl	80028b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <HAL_I2C_Mem_Read+0x1cc>
                        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e139      	b.n	8002300 <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691a      	ldr	r2, [r3, #16]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	1c5a      	adds	r2, r3, #1
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a8:	3b01      	subs	r3, #1
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	3b01      	subs	r3, #1
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020be:	e10b      	b.n	80022d8 <HAL_I2C_Mem_Read+0x418>
                }
                /* Two bytes */
                else if (hi2c->XferSize == 2U) {
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d14e      	bne.n	8002166 <HAL_I2C_Mem_Read+0x2a6>
                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) !=
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ce:	2200      	movs	r2, #0
 80020d0:	4906      	ldr	r1, [pc, #24]	; (80020ec <HAL_I2C_Mem_Read+0x22c>)
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 fa98 	bl	8002608 <I2C_WaitOnFlagUntilTimeout>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d008      	beq.n	80020f0 <HAL_I2C_Mem_Read+0x230>
                        HAL_OK) {
                        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e10e      	b.n	8002300 <HAL_I2C_Mem_Read+0x440>
 80020e2:	bf00      	nop
 80020e4:	00100002 	.word	0x00100002
 80020e8:	ffff0000 	.word	0xffff0000
 80020ec:	00010004 	.word	0x00010004
                    }

                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020fe:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	691a      	ldr	r2, [r3, #16]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	1c5a      	adds	r2, r3, #1
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211c:	3b01      	subs	r3, #1
 800211e:	b29a      	uxth	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002128:	b29b      	uxth	r3, r3
 800212a:	3b01      	subs	r3, #1
 800212c:	b29a      	uxth	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	855a      	strh	r2, [r3, #42]	; 0x2a

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	691a      	ldr	r2, [r3, #16]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	1c5a      	adds	r2, r3, #1
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214e:	3b01      	subs	r3, #1
 8002150:	b29a      	uxth	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215a:	b29b      	uxth	r3, r3
 800215c:	3b01      	subs	r3, #1
 800215e:	b29a      	uxth	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002164:	e0b8      	b.n	80022d8 <HAL_I2C_Mem_Read+0x418>
                }
                /* 3 Last bytes */
                else {
                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) !=
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800216c:	2200      	movs	r2, #0
 800216e:	4966      	ldr	r1, [pc, #408]	; (8002308 <HAL_I2C_Mem_Read+0x448>)
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 fa49 	bl	8002608 <I2C_WaitOnFlagUntilTimeout>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <HAL_I2C_Mem_Read+0x2c0>
                        HAL_OK) {
                        return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0bf      	b.n	8002300 <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Disable Acknowledge */
                    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800218e:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691a      	ldr	r2, [r3, #16]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	3b01      	subs	r3, #1
 80021bc:	b29a      	uxth	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	855a      	strh	r2, [r3, #42]	; 0x2a

                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) !=
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c8:	2200      	movs	r2, #0
 80021ca:	494f      	ldr	r1, [pc, #316]	; (8002308 <HAL_I2C_Mem_Read+0x448>)
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f000 fa1b 	bl	8002608 <I2C_WaitOnFlagUntilTimeout>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <HAL_I2C_Mem_Read+0x31c>
                        HAL_OK) {
                        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e091      	b.n	8002300 <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ea:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	691a      	ldr	r2, [r3, #16]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002208:	3b01      	subs	r3, #1
 800220a:	b29a      	uxth	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002214:	b29b      	uxth	r3, r3
 8002216:	3b01      	subs	r3, #1
 8002218:	b29a      	uxth	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	855a      	strh	r2, [r3, #42]	; 0x2a

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	691a      	ldr	r2, [r3, #16]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	1c5a      	adds	r2, r3, #1
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223a:	3b01      	subs	r3, #1
 800223c:	b29a      	uxth	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002246:	b29b      	uxth	r3, r3
 8002248:	3b01      	subs	r3, #1
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002250:	e042      	b.n	80022d8 <HAL_I2C_Mem_Read+0x418>
                }
            } else {
                /* Wait until RXNE flag is set */
                if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8002252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002254:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 fb2e 	bl	80028b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_I2C_Mem_Read+0x3a6>
                    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e04c      	b.n	8002300 <HAL_I2C_Mem_Read+0x440>
                }

                /* Read data from DR */
                *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	701a      	strb	r2, [r3, #0]

                /* Increment Buffer pointer */
                hi2c->pBuffPtr++;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	1c5a      	adds	r2, r3, #1
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	625a      	str	r2, [r3, #36]	; 0x24

                /* Update counter */
                hi2c->XferSize--;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002282:	3b01      	subs	r3, #1
 8002284:	b29a      	uxth	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	851a      	strh	r2, [r3, #40]	; 0x28
                hi2c->XferCount--;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228e:	b29b      	uxth	r3, r3
 8002290:	3b01      	subs	r3, #1
 8002292:	b29a      	uxth	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	855a      	strh	r2, [r3, #42]	; 0x2a

                if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) {
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d118      	bne.n	80022d8 <HAL_I2C_Mem_Read+0x418>
                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	1c5a      	adds	r2, r3, #1
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	3b01      	subs	r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        while (hi2c->XferSize > 0U) {
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f47f aec2 	bne.w	8002066 <HAL_I2C_Mem_Read+0x1a6>
                }
            }
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2220      	movs	r2, #32
 80022e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80022fa:	2300      	movs	r3, #0
 80022fc:	e000      	b.n	8002300 <HAL_I2C_Mem_Read+0x440>
    } else {
        return HAL_BUSY;
 80022fe:	2302      	movs	r3, #2
    }
}
 8002300:	4618      	mov	r0, r3
 8002302:	3728      	adds	r7, #40	; 0x28
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	00010004 	.word	0x00010004

0800230c <I2C_RequestMemoryWrite>:
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef * hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize,
                                                uint32_t Timeout, uint32_t Tickstart) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b088      	sub	sp, #32
 8002310:	af02      	add	r7, sp, #8
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	4608      	mov	r0, r1
 8002316:	4611      	mov	r1, r2
 8002318:	461a      	mov	r2, r3
 800231a:	4603      	mov	r3, r0
 800231c:	817b      	strh	r3, [r7, #10]
 800231e:	460b      	mov	r3, r1
 8002320:	813b      	strh	r3, [r7, #8]
 8002322:	4613      	mov	r3, r2
 8002324:	80fb      	strh	r3, [r7, #6]
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002334:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	2200      	movs	r2, #0
 800233e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 f960 	bl	8002608 <I2C_WaitOnFlagUntilTimeout>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00d      	beq.n	800236a <I2C_RequestMemoryWrite+0x5e>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002358:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800235c:	d103      	bne.n	8002366 <I2C_RequestMemoryWrite+0x5a>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002364:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e05f      	b.n	800242a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800236a:	897b      	ldrh	r3, [r7, #10]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	461a      	mov	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002378:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) !=
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	6a3a      	ldr	r2, [r7, #32]
 800237e:	492d      	ldr	r1, [pc, #180]	; (8002434 <I2C_RequestMemoryWrite+0x128>)
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f000 f998 	bl	80026b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <I2C_RequestMemoryWrite+0x84>
        HAL_OK) {
        return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e04c      	b.n	800242a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	697b      	ldr	r3, [r7, #20]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 80023a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a8:	6a39      	ldr	r1, [r7, #32]
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 fa02 	bl	80027b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00d      	beq.n	80023d2 <I2C_RequestMemoryWrite+0xc6>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d107      	bne.n	80023ce <I2C_RequestMemoryWrite+0xc2>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e02b      	b.n	800242a <I2C_RequestMemoryWrite+0x11e>
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 80023d2:	88fb      	ldrh	r3, [r7, #6]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d105      	bne.n	80023e4 <I2C_RequestMemoryWrite+0xd8>
        /* Send Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023d8:	893b      	ldrh	r3, [r7, #8]
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	611a      	str	r2, [r3, #16]
 80023e2:	e021      	b.n	8002428 <I2C_RequestMemoryWrite+0x11c>
    }
    /* If Memory address size is 16Bit */
    else {
        /* Send MSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80023e4:	893b      	ldrh	r3, [r7, #8]
 80023e6:	0a1b      	lsrs	r3, r3, #8
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	611a      	str	r2, [r3, #16]

        /* Wait until TXE flag is set */
        if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 80023f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f4:	6a39      	ldr	r1, [r7, #32]
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 f9dc 	bl	80027b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00d      	beq.n	800241e <I2C_RequestMemoryWrite+0x112>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	2b04      	cmp	r3, #4
 8002408:	d107      	bne.n	800241a <I2C_RequestMemoryWrite+0x10e>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002418:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e005      	b.n	800242a <I2C_RequestMemoryWrite+0x11e>
        }

        /* Send LSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800241e:	893b      	ldrh	r3, [r7, #8]
 8002420:	b2da      	uxtb	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	611a      	str	r2, [r3, #16]
    }

    return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	00010002 	.word	0x00010002

08002438 <I2C_RequestMemoryRead>:
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef * hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize,
                                               uint32_t Timeout, uint32_t Tickstart) {
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af02      	add	r7, sp, #8
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	4608      	mov	r0, r1
 8002442:	4611      	mov	r1, r2
 8002444:	461a      	mov	r2, r3
 8002446:	4603      	mov	r3, r0
 8002448:	817b      	strh	r3, [r7, #10]
 800244a:	460b      	mov	r3, r1
 800244c:	813b      	strh	r3, [r7, #8]
 800244e:	4613      	mov	r3, r2
 8002450:	80fb      	strh	r3, [r7, #6]
    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002460:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002470:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	2200      	movs	r2, #0
 800247a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 f8c2 	bl	8002608 <I2C_WaitOnFlagUntilTimeout>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00d      	beq.n	80024a6 <I2C_RequestMemoryRead+0x6e>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002498:	d103      	bne.n	80024a2 <I2C_RequestMemoryRead+0x6a>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024a0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e0aa      	b.n	80025fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024a6:	897b      	ldrh	r3, [r7, #10]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	461a      	mov	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024b4:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) !=
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	6a3a      	ldr	r2, [r7, #32]
 80024ba:	4952      	ldr	r1, [pc, #328]	; (8002604 <I2C_RequestMemoryRead+0x1cc>)
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 f8fa 	bl	80026b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <I2C_RequestMemoryRead+0x94>
        HAL_OK) {
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e097      	b.n	80025fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	697b      	ldr	r3, [r7, #20]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 80024e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e4:	6a39      	ldr	r1, [r7, #32]
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 f964 	bl	80027b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00d      	beq.n	800250e <I2C_RequestMemoryRead+0xd6>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d107      	bne.n	800250a <I2C_RequestMemoryRead+0xd2>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002508:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e076      	b.n	80025fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 800250e:	88fb      	ldrh	r3, [r7, #6]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d105      	bne.n	8002520 <I2C_RequestMemoryRead+0xe8>
        /* Send Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002514:	893b      	ldrh	r3, [r7, #8]
 8002516:	b2da      	uxtb	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	611a      	str	r2, [r3, #16]
 800251e:	e021      	b.n	8002564 <I2C_RequestMemoryRead+0x12c>
    }
    /* If Memory address size is 16Bit */
    else {
        /* Send MSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002520:	893b      	ldrh	r3, [r7, #8]
 8002522:	0a1b      	lsrs	r3, r3, #8
 8002524:	b29b      	uxth	r3, r3
 8002526:	b2da      	uxtb	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	611a      	str	r2, [r3, #16]

        /* Wait until TXE flag is set */
        if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 800252e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002530:	6a39      	ldr	r1, [r7, #32]
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 f93e 	bl	80027b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00d      	beq.n	800255a <I2C_RequestMemoryRead+0x122>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	2b04      	cmp	r3, #4
 8002544:	d107      	bne.n	8002556 <I2C_RequestMemoryRead+0x11e>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002554:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e050      	b.n	80025fc <I2C_RequestMemoryRead+0x1c4>
        }

        /* Send LSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800255a:	893b      	ldrh	r3, [r7, #8]
 800255c:	b2da      	uxtb	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	611a      	str	r2, [r3, #16]
    }

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8002564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002566:	6a39      	ldr	r1, [r7, #32]
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 f923 	bl	80027b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00d      	beq.n	8002590 <I2C_RequestMemoryRead+0x158>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	2b04      	cmp	r3, #4
 800257a:	d107      	bne.n	800258c <I2C_RequestMemoryRead+0x154>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800258a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e035      	b.n	80025fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800259e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 f82b 	bl	8002608 <I2C_WaitOnFlagUntilTimeout>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00d      	beq.n	80025d4 <I2C_RequestMemoryRead+0x19c>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025c6:	d103      	bne.n	80025d0 <I2C_RequestMemoryRead+0x198>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ce:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e013      	b.n	80025fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80025d4:	897b      	ldrh	r3, [r7, #10]
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) !=
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	6a3a      	ldr	r2, [r7, #32]
 80025e8:	4906      	ldr	r1, [pc, #24]	; (8002604 <I2C_RequestMemoryRead+0x1cc>)
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 f863 	bl	80026b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <I2C_RequestMemoryRead+0x1c2>
        HAL_OK) {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <I2C_RequestMemoryRead+0x1c4>
    }

    return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	00010002 	.word	0x00010002

08002608 <I2C_WaitOnFlagUntilTimeout>:
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Flag,
                                                    FlagStatus Status, uint32_t Timeout,
                                                    uint32_t Tickstart) {
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	603b      	str	r3, [r7, #0]
 8002614:	4613      	mov	r3, r2
 8002616:	71fb      	strb	r3, [r7, #7]
    /* Wait until flag is set */
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 8002618:	e025      	b.n	8002666 <I2C_WaitOnFlagUntilTimeout+0x5e>
        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002620:	d021      	beq.n	8002666 <I2C_WaitOnFlagUntilTimeout+0x5e>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8002622:	f7fe fd63 	bl	80010ec <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	429a      	cmp	r2, r3
 8002630:	d302      	bcc.n	8002638 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d116      	bne.n	8002666 <I2C_WaitOnFlagUntilTimeout+0x5e>
                hi2c->PreviousState = I2C_STATE_NONE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2220      	movs	r2, #32
 8002642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f043 0220 	orr.w	r2, r3, #32
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e023      	b.n	80026ae <I2C_WaitOnFlagUntilTimeout+0xa6>
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	0c1b      	lsrs	r3, r3, #16
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b01      	cmp	r3, #1
 800266e:	d10d      	bne.n	800268c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	43da      	mvns	r2, r3
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	4013      	ands	r3, r2
 800267c:	b29b      	uxth	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	bf0c      	ite	eq
 8002682:	2301      	moveq	r3, #1
 8002684:	2300      	movne	r3, #0
 8002686:	b2db      	uxtb	r3, r3
 8002688:	461a      	mov	r2, r3
 800268a:	e00c      	b.n	80026a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	43da      	mvns	r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	4013      	ands	r3, r2
 8002698:	b29b      	uxth	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	bf0c      	ite	eq
 800269e:	2301      	moveq	r3, #1
 80026a0:	2300      	movne	r3, #0
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	461a      	mov	r2, r3
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d0b6      	beq.n	800261a <I2C_WaitOnFlagUntilTimeout+0x12>
            }
        }
    }
    return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef * hi2c,
                                                                 uint32_t Flag, uint32_t Timeout,
                                                                 uint32_t Tickstart) {
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b084      	sub	sp, #16
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	60f8      	str	r0, [r7, #12]
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	607a      	str	r2, [r7, #4]
 80026c2:	603b      	str	r3, [r7, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 80026c4:	e051      	b.n	800276a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026d4:	d123      	bne.n	800271e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e4:	601a      	str	r2, [r3, #0]

            /* Clear AF Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026ee:	615a      	str	r2, [r3, #20]

            hi2c->PreviousState = I2C_STATE_NONE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	631a      	str	r2, [r3, #48]	; 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2220      	movs	r2, #32
 80026fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f043 0204 	orr.w	r2, r3, #4
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	641a      	str	r2, [r3, #64]	; 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e046      	b.n	80027ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002724:	d021      	beq.n	800276a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8002726:	f7fe fce1 	bl	80010ec <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	429a      	cmp	r2, r3
 8002734:	d302      	bcc.n	800273c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d116      	bne.n	800276a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
                hi2c->PreviousState = I2C_STATE_NONE;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2220      	movs	r2, #32
 8002746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f043 0220 	orr.w	r2, r3, #32
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e020      	b.n	80027ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	0c1b      	lsrs	r3, r3, #16
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b01      	cmp	r3, #1
 8002772:	d10c      	bne.n	800278e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	43da      	mvns	r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	4013      	ands	r3, r2
 8002780:	b29b      	uxth	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	bf14      	ite	ne
 8002786:	2301      	movne	r3, #1
 8002788:	2300      	moveq	r3, #0
 800278a:	b2db      	uxtb	r3, r3
 800278c:	e00b      	b.n	80027a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	43da      	mvns	r2, r3
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	4013      	ands	r3, r2
 800279a:	b29b      	uxth	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	bf14      	ite	ne
 80027a0:	2301      	movne	r3, #1
 80027a2:	2300      	moveq	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d18d      	bne.n	80026c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
            }
        }
    }
    return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <I2C_WaitOnTXEFlagUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout,
                                                       uint32_t Tickstart) {
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 80027c0:	e02d      	b.n	800281e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
        /* Check if a NACK is detected */
        if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 f8ce 	bl	8002964 <I2C_IsAcknowledgeFailed>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
            return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e02d      	b.n	800282e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027d8:	d021      	beq.n	800281e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 80027da:	f7fe fc87 	bl	80010ec <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d302      	bcc.n	80027f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d116      	bne.n	800281e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
                hi2c->PreviousState = I2C_STATE_NONE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2220      	movs	r2, #32
 80027fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	f043 0220 	orr.w	r2, r3, #32
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e007      	b.n	800282e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002828:	2b80      	cmp	r3, #128	; 0x80
 800282a:	d1ca      	bne.n	80027c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
            }
        }
    }
    return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <I2C_WaitOnBTFFlagUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout,
                                                       uint32_t Tickstart) {
 8002836:	b580      	push	{r7, lr}
 8002838:	b084      	sub	sp, #16
 800283a:	af00      	add	r7, sp, #0
 800283c:	60f8      	str	r0, [r7, #12]
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	607a      	str	r2, [r7, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET) {
 8002842:	e02d      	b.n	80028a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
        /* Check if a NACK is detected */
        if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 f88d 	bl	8002964 <I2C_IsAcknowledgeFailed>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
            return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e02d      	b.n	80028b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800285a:	d021      	beq.n	80028a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 800285c:	f7fe fc46 	bl	80010ec <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	429a      	cmp	r2, r3
 800286a:	d302      	bcc.n	8002872 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d116      	bne.n	80028a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
                hi2c->PreviousState = I2C_STATE_NONE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2220      	movs	r2, #32
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	f043 0220 	orr.w	r2, r3, #32
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e007      	b.n	80028b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET) {
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	f003 0304 	and.w	r3, r3, #4
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	d1ca      	bne.n	8002844 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
            }
        }
    }
    return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart) {
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]

    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 80028c4:	e042      	b.n	800294c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
        /* Check if a STOPF is detected */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) {
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	f003 0310 	and.w	r3, r3, #16
 80028d0:	2b10      	cmp	r3, #16
 80028d2:	d119      	bne.n	8002908 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f06f 0210 	mvn.w	r2, #16
 80028dc:	615a      	str	r2, [r3, #20]

            hi2c->PreviousState = I2C_STATE_NONE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	631a      	str	r2, [r3, #48]	; 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2220      	movs	r2, #32
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_NONE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	641a      	str	r2, [r3, #64]	; 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e029      	b.n	800295c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
        }

        /* Check for the Timeout */
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8002908:	f7fe fbf0 	bl	80010ec <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	429a      	cmp	r2, r3
 8002916:	d302      	bcc.n	800291e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d116      	bne.n	800294c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
            hi2c->PreviousState = I2C_STATE_NONE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	631a      	str	r2, [r3, #48]	; 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	f043 0220 	orr.w	r2, r3, #32
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	641a      	str	r2, [r3, #64]	; 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e007      	b.n	800295c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002956:	2b40      	cmp	r3, #64	; 0x40
 8002958:	d1b5      	bne.n	80028c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
        }
    }
    return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <I2C_IsAcknowledgeFailed>:
 * @brief  This function handles Acknowledge failed detection during an I2C Communication.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef * hi2c) {
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800297a:	d11b      	bne.n	80029b4 <I2C_IsAcknowledgeFailed+0x50>
        /* Clear NACKF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002984:	615a      	str	r2, [r3, #20]

        hi2c->PreviousState = I2C_STATE_NONE;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	f043 0204 	orr.w	r2, r3, #4
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <I2C_IsAcknowledgeFailed+0x52>
    }
    return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029c4:	b08f      	sub	sp, #60	; 0x3c
 80029c6:	af0a      	add	r7, sp, #40	; 0x28
 80029c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e10f      	b.n	8002bf4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d106      	bne.n	80029f4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f006 fa16 	bl	8008e20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2203      	movs	r2, #3
 80029f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d102      	bne.n	8002a0e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f002 fcfd 	bl	8005412 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	603b      	str	r3, [r7, #0]
 8002a1e:	687e      	ldr	r6, [r7, #4]
 8002a20:	466d      	mov	r5, sp
 8002a22:	f106 0410 	add.w	r4, r6, #16
 8002a26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a32:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a36:	1d33      	adds	r3, r6, #4
 8002a38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a3a:	6838      	ldr	r0, [r7, #0]
 8002a3c:	f002 fbd4 	bl	80051e8 <USB_CoreInit>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d005      	beq.n	8002a52 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2202      	movs	r2, #2
 8002a4a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e0d0      	b.n	8002bf4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2100      	movs	r1, #0
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f002 fceb 	bl	8005434 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a5e:	2300      	movs	r3, #0
 8002a60:	73fb      	strb	r3, [r7, #15]
 8002a62:	e04a      	b.n	8002afa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a64:	7bfa      	ldrb	r2, [r7, #15]
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	333d      	adds	r3, #61	; 0x3d
 8002a74:	2201      	movs	r2, #1
 8002a76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a78:	7bfa      	ldrb	r2, [r7, #15]
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	4413      	add	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	333c      	adds	r3, #60	; 0x3c
 8002a88:	7bfa      	ldrb	r2, [r7, #15]
 8002a8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a8c:	7bfa      	ldrb	r2, [r7, #15]
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
 8002a90:	b298      	uxth	r0, r3
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	4413      	add	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	3344      	adds	r3, #68	; 0x44
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002aa4:	7bfa      	ldrb	r2, [r7, #15]
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	3340      	adds	r3, #64	; 0x40
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ab8:	7bfa      	ldrb	r2, [r7, #15]
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	3348      	adds	r3, #72	; 0x48
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002acc:	7bfa      	ldrb	r2, [r7, #15]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	334c      	adds	r3, #76	; 0x4c
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ae0:	7bfa      	ldrb	r2, [r7, #15]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4413      	add	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	3354      	adds	r3, #84	; 0x54
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	3301      	adds	r3, #1
 8002af8:	73fb      	strb	r3, [r7, #15]
 8002afa:	7bfa      	ldrb	r2, [r7, #15]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d3af      	bcc.n	8002a64 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b04:	2300      	movs	r3, #0
 8002b06:	73fb      	strb	r3, [r7, #15]
 8002b08:	e044      	b.n	8002b94 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b0a:	7bfa      	ldrb	r2, [r7, #15]
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	4413      	add	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b20:	7bfa      	ldrb	r2, [r7, #15]
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	4413      	add	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002b32:	7bfa      	ldrb	r2, [r7, #15]
 8002b34:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b36:	7bfa      	ldrb	r2, [r7, #15]
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	4413      	add	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	440b      	add	r3, r1
 8002b44:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b4c:	7bfa      	ldrb	r2, [r7, #15]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	4413      	add	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b62:	7bfa      	ldrb	r2, [r7, #15]
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	440b      	add	r3, r1
 8002b70:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b78:	7bfa      	ldrb	r2, [r7, #15]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b8e:	7bfb      	ldrb	r3, [r7, #15]
 8002b90:	3301      	adds	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
 8002b94:	7bfa      	ldrb	r2, [r7, #15]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d3b5      	bcc.n	8002b0a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	603b      	str	r3, [r7, #0]
 8002ba4:	687e      	ldr	r6, [r7, #4]
 8002ba6:	466d      	mov	r5, sp
 8002ba8:	f106 0410 	add.w	r4, r6, #16
 8002bac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bb4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bb8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bbc:	1d33      	adds	r3, r6, #4
 8002bbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bc0:	6838      	ldr	r0, [r7, #0]
 8002bc2:	f002 fc83 	bl	80054cc <USB_DevInit>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e00d      	b.n	8002bf4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f003 fdd2 	bl	8006796 <USB_DevDisconnect>

  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bfc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_PCD_Start+0x1c>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e020      	b.n	8002c5a <HAL_PCD_Start+0x5e>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d109      	bne.n	8002c3c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d005      	beq.n	8002c3c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c34:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f002 fbd5 	bl	80053f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f003 fd82 	bl	8006754 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c62:	b590      	push	{r4, r7, lr}
 8002c64:	b08d      	sub	sp, #52	; 0x34
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f003 fe40 	bl	80068fe <USB_GetMode>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f040 848a 	bne.w	800359a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f003 fda4 	bl	80067d8 <USB_ReadInterrupts>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 8480 	beq.w	8003598 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	0a1b      	lsrs	r3, r3, #8
 8002ca2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f003 fd91 	bl	80067d8 <USB_ReadInterrupts>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d107      	bne.n	8002cd0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f002 0202 	and.w	r2, r2, #2
 8002cce:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f003 fd7f 	bl	80067d8 <USB_ReadInterrupts>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	f003 0310 	and.w	r3, r3, #16
 8002ce0:	2b10      	cmp	r3, #16
 8002ce2:	d161      	bne.n	8002da8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699a      	ldr	r2, [r3, #24]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0210 	bic.w	r2, r2, #16
 8002cf2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	f003 020f 	and.w	r2, r3, #15
 8002d00:	4613      	mov	r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	4413      	add	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	4413      	add	r3, r2
 8002d10:	3304      	adds	r3, #4
 8002d12:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	0c5b      	lsrs	r3, r3, #17
 8002d18:	f003 030f 	and.w	r3, r3, #15
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d124      	bne.n	8002d6a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002d26:	4013      	ands	r3, r2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d035      	beq.n	8002d98 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	091b      	lsrs	r3, r3, #4
 8002d34:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	6a38      	ldr	r0, [r7, #32]
 8002d40:	f003 fbb6 	bl	80064b0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	691a      	ldr	r2, [r3, #16]
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	091b      	lsrs	r3, r3, #4
 8002d4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d50:	441a      	add	r2, r3
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	6a1a      	ldr	r2, [r3, #32]
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	091b      	lsrs	r3, r3, #4
 8002d5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d62:	441a      	add	r2, r3
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	621a      	str	r2, [r3, #32]
 8002d68:	e016      	b.n	8002d98 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	0c5b      	lsrs	r3, r3, #17
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	2b06      	cmp	r3, #6
 8002d74:	d110      	bne.n	8002d98 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d7c:	2208      	movs	r2, #8
 8002d7e:	4619      	mov	r1, r3
 8002d80:	6a38      	ldr	r0, [r7, #32]
 8002d82:	f003 fb95 	bl	80064b0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	6a1a      	ldr	r2, [r3, #32]
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	091b      	lsrs	r3, r3, #4
 8002d8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d92:	441a      	add	r2, r3
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	699a      	ldr	r2, [r3, #24]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0210 	orr.w	r2, r2, #16
 8002da6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f003 fd13 	bl	80067d8 <USB_ReadInterrupts>
 8002db2:	4603      	mov	r3, r0
 8002db4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002db8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002dbc:	f040 80a7 	bne.w	8002f0e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f003 fd18 	bl	80067fe <USB_ReadDevAllOutEpInterrupt>
 8002dce:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002dd0:	e099      	b.n	8002f06 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 808e 	beq.w	8002efa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	4611      	mov	r1, r2
 8002de8:	4618      	mov	r0, r3
 8002dea:	f003 fd3c 	bl	8006866 <USB_ReadDevOutEPInterrupt>
 8002dee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00c      	beq.n	8002e14 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	015a      	lsls	r2, r3, #5
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	4413      	add	r3, r2
 8002e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e06:	461a      	mov	r2, r3
 8002e08:	2301      	movs	r3, #1
 8002e0a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002e0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 fec2 	bl	8003b98 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00c      	beq.n	8002e38 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	015a      	lsls	r2, r3, #5
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	4413      	add	r3, r2
 8002e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	2308      	movs	r3, #8
 8002e2e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002e30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 ff98 	bl	8003d68 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	f003 0310 	and.w	r3, r3, #16
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d008      	beq.n	8002e54 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	015a      	lsls	r2, r3, #5
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e4e:	461a      	mov	r2, r3
 8002e50:	2310      	movs	r3, #16
 8002e52:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d030      	beq.n	8002ec0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e66:	2b80      	cmp	r3, #128	; 0x80
 8002e68:	d109      	bne.n	8002e7e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	69fa      	ldr	r2, [r7, #28]
 8002e74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e7c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e80:	4613      	mov	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	4413      	add	r3, r2
 8002e90:	3304      	adds	r3, #4
 8002e92:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	78db      	ldrb	r3, [r3, #3]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d108      	bne.n	8002eae <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f006 f8b5 	bl	8009018 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eba:	461a      	mov	r2, r3
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f003 0320 	and.w	r3, r3, #32
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d008      	beq.n	8002edc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	2320      	movs	r3, #32
 8002eda:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d009      	beq.n	8002efa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ef8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	3301      	adds	r3, #1
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f02:	085b      	lsrs	r3, r3, #1
 8002f04:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f47f af62 	bne.w	8002dd2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f003 fc60 	bl	80067d8 <USB_ReadInterrupts>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f22:	f040 80db 	bne.w	80030dc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f003 fc81 	bl	8006832 <USB_ReadDevAllInEpInterrupt>
 8002f30:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002f36:	e0cd      	b.n	80030d4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 80c2 	beq.w	80030c8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f003 fca7 	bl	80068a2 <USB_ReadDevInEPInterrupt>
 8002f54:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d057      	beq.n	8003010 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	2201      	movs	r2, #1
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	69f9      	ldr	r1, [r7, #28]
 8002f7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f80:	4013      	ands	r3, r2
 8002f82:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	015a      	lsls	r2, r3, #5
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f90:	461a      	mov	r2, r3
 8002f92:	2301      	movs	r3, #1
 8002f94:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d132      	bne.n	8003004 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	334c      	adds	r3, #76	; 0x4c
 8002fae:	6819      	ldr	r1, [r3, #0]
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	4413      	add	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4403      	add	r3, r0
 8002fbe:	3348      	adds	r3, #72	; 0x48
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4419      	add	r1, r3
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc8:	4613      	mov	r3, r2
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4403      	add	r3, r0
 8002fd2:	334c      	adds	r3, #76	; 0x4c
 8002fd4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d113      	bne.n	8003004 <HAL_PCD_IRQHandler+0x3a2>
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	3354      	adds	r3, #84	; 0x54
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d108      	bne.n	8003004 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6818      	ldr	r0, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	2101      	movs	r1, #1
 8003000:	f003 fcae 	bl	8006960 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	b2db      	uxtb	r3, r3
 8003008:	4619      	mov	r1, r3
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f005 ff89 	bl	8008f22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b00      	cmp	r3, #0
 8003018:	d008      	beq.n	800302c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	4413      	add	r3, r2
 8003022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003026:	461a      	mov	r2, r3
 8003028:	2308      	movs	r3, #8
 800302a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	f003 0310 	and.w	r3, r3, #16
 8003032:	2b00      	cmp	r3, #0
 8003034:	d008      	beq.n	8003048 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	015a      	lsls	r2, r3, #5
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	4413      	add	r3, r2
 800303e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003042:	461a      	mov	r2, r3
 8003044:	2310      	movs	r3, #16
 8003046:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	d008      	beq.n	8003064 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	015a      	lsls	r2, r3, #5
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	4413      	add	r3, r2
 800305a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800305e:	461a      	mov	r2, r3
 8003060:	2340      	movs	r3, #64	; 0x40
 8003062:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d023      	beq.n	80030b6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800306e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003070:	6a38      	ldr	r0, [r7, #32]
 8003072:	f002 fb8f 	bl	8005794 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003078:	4613      	mov	r3, r2
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	3338      	adds	r3, #56	; 0x38
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	4413      	add	r3, r2
 8003086:	3304      	adds	r3, #4
 8003088:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	78db      	ldrb	r3, [r3, #3]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d108      	bne.n	80030a4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	2200      	movs	r2, #0
 8003096:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	b2db      	uxtb	r3, r3
 800309c:	4619      	mov	r1, r3
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f005 ffcc 	bl	800903c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	015a      	lsls	r2, r3, #5
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	4413      	add	r3, r2
 80030ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030b0:	461a      	mov	r2, r3
 80030b2:	2302      	movs	r3, #2
 80030b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d003      	beq.n	80030c8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80030c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 fcdb 	bl	8003a7e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	3301      	adds	r3, #1
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80030ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d0:	085b      	lsrs	r3, r3, #1
 80030d2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80030d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f47f af2e 	bne.w	8002f38 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f003 fb79 	bl	80067d8 <USB_ReadInterrupts>
 80030e6:	4603      	mov	r3, r0
 80030e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030f0:	d122      	bne.n	8003138 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	69fa      	ldr	r2, [r7, #28]
 80030fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003100:	f023 0301 	bic.w	r3, r3, #1
 8003104:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800310c:	2b01      	cmp	r3, #1
 800310e:	d108      	bne.n	8003122 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003118:	2100      	movs	r1, #0
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 fec2 	bl	8003ea4 <HAL_PCDEx_LPM_Callback>
 8003120:	e002      	b.n	8003128 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f005 ff6a 	bl	8008ffc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695a      	ldr	r2, [r3, #20]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003136:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f003 fb4b 	bl	80067d8 <USB_ReadInterrupts>
 8003142:	4603      	mov	r3, r0
 8003144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800314c:	d112      	bne.n	8003174 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b01      	cmp	r3, #1
 800315c:	d102      	bne.n	8003164 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f005 ff26 	bl	8008fb0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	695a      	ldr	r2, [r3, #20]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003172:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f003 fb2d 	bl	80067d8 <USB_ReadInterrupts>
 800317e:	4603      	mov	r3, r0
 8003180:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003188:	f040 80b7 	bne.w	80032fa <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	69fa      	ldr	r2, [r7, #28]
 8003196:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800319a:	f023 0301 	bic.w	r3, r3, #1
 800319e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2110      	movs	r1, #16
 80031a6:	4618      	mov	r0, r3
 80031a8:	f002 faf4 	bl	8005794 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ac:	2300      	movs	r3, #0
 80031ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031b0:	e046      	b.n	8003240 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80031b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031be:	461a      	mov	r2, r3
 80031c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031c4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80031c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c8:	015a      	lsls	r2, r3, #5
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	4413      	add	r3, r2
 80031ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031d6:	0151      	lsls	r1, r2, #5
 80031d8:	69fa      	ldr	r2, [r7, #28]
 80031da:	440a      	add	r2, r1
 80031dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80031e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e8:	015a      	lsls	r2, r3, #5
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	4413      	add	r3, r2
 80031ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f2:	461a      	mov	r2, r3
 80031f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031f8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80031fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	4413      	add	r3, r2
 8003202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800320a:	0151      	lsls	r1, r2, #5
 800320c:	69fa      	ldr	r2, [r7, #28]
 800320e:	440a      	add	r2, r1
 8003210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003214:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003218:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800321a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321c:	015a      	lsls	r2, r3, #5
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	4413      	add	r3, r2
 8003222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800322a:	0151      	lsls	r1, r2, #5
 800322c:	69fa      	ldr	r2, [r7, #28]
 800322e:	440a      	add	r2, r1
 8003230:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003234:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003238:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800323a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323c:	3301      	adds	r3, #1
 800323e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003246:	429a      	cmp	r2, r3
 8003248:	d3b3      	bcc.n	80031b2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	69fa      	ldr	r2, [r7, #28]
 8003254:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003258:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800325c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	2b00      	cmp	r3, #0
 8003264:	d016      	beq.n	8003294 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800326c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003270:	69fa      	ldr	r2, [r7, #28]
 8003272:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003276:	f043 030b 	orr.w	r3, r3, #11
 800327a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003286:	69fa      	ldr	r2, [r7, #28]
 8003288:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800328c:	f043 030b 	orr.w	r3, r3, #11
 8003290:	6453      	str	r3, [r2, #68]	; 0x44
 8003292:	e015      	b.n	80032c0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	69fa      	ldr	r2, [r7, #28]
 800329e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032a6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80032aa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	69fa      	ldr	r2, [r7, #28]
 80032b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ba:	f043 030b 	orr.w	r3, r3, #11
 80032be:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	69fa      	ldr	r2, [r7, #28]
 80032ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80032d2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6818      	ldr	r0, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032e4:	461a      	mov	r2, r3
 80032e6:	f003 fb3b 	bl	8006960 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695a      	ldr	r2, [r3, #20]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80032f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f003 fa6a 	bl	80067d8 <USB_ReadInterrupts>
 8003304:	4603      	mov	r3, r0
 8003306:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800330a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800330e:	d124      	bne.n	800335a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f003 fb00 	bl	800691a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f002 fab5 	bl	800588e <USB_GetDevSpeed>
 8003324:	4603      	mov	r3, r0
 8003326:	461a      	mov	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681c      	ldr	r4, [r3, #0]
 8003330:	f001 f9e8 	bl	8004704 <HAL_RCC_GetHCLKFreq>
 8003334:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800333a:	b2db      	uxtb	r3, r3
 800333c:	461a      	mov	r2, r3
 800333e:	4620      	mov	r0, r4
 8003340:	f001 ffb4 	bl	80052ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f005 fe14 	bl	8008f72 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695a      	ldr	r2, [r3, #20]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003358:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f003 fa3a 	bl	80067d8 <USB_ReadInterrupts>
 8003364:	4603      	mov	r3, r0
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	2b08      	cmp	r3, #8
 800336c:	d10a      	bne.n	8003384 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f005 fdf1 	bl	8008f56 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695a      	ldr	r2, [r3, #20]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f002 0208 	and.w	r2, r2, #8
 8003382:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f003 fa25 	bl	80067d8 <USB_ReadInterrupts>
 800338e:	4603      	mov	r3, r0
 8003390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003394:	2b80      	cmp	r3, #128	; 0x80
 8003396:	d122      	bne.n	80033de <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033a4:	2301      	movs	r3, #1
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
 80033a8:	e014      	b.n	80033d4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ae:	4613      	mov	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d105      	bne.n	80033ce <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	4619      	mov	r1, r3
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 fb27 	bl	8003a1c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	3301      	adds	r3, #1
 80033d2:	627b      	str	r3, [r7, #36]	; 0x24
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033da:	429a      	cmp	r2, r3
 80033dc:	d3e5      	bcc.n	80033aa <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f003 f9f8 	bl	80067d8 <USB_ReadInterrupts>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033f2:	d13b      	bne.n	800346c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033f4:	2301      	movs	r3, #1
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
 80033f8:	e02b      	b.n	8003452 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	015a      	lsls	r2, r3, #5
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	4413      	add	r3, r2
 8003402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340e:	4613      	mov	r3, r2
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	4413      	add	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	440b      	add	r3, r1
 8003418:	3340      	adds	r3, #64	; 0x40
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d115      	bne.n	800344c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003420:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003422:	2b00      	cmp	r3, #0
 8003424:	da12      	bge.n	800344c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800342a:	4613      	mov	r3, r2
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	4413      	add	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	333f      	adds	r3, #63	; 0x3f
 8003436:	2201      	movs	r2, #1
 8003438:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	b2db      	uxtb	r3, r3
 800343e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003442:	b2db      	uxtb	r3, r3
 8003444:	4619      	mov	r1, r3
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 fae8 	bl	8003a1c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344e:	3301      	adds	r3, #1
 8003450:	627b      	str	r3, [r7, #36]	; 0x24
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003458:	429a      	cmp	r2, r3
 800345a:	d3ce      	bcc.n	80033fa <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	695a      	ldr	r2, [r3, #20]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800346a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f003 f9b1 	bl	80067d8 <USB_ReadInterrupts>
 8003476:	4603      	mov	r3, r0
 8003478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800347c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003480:	d155      	bne.n	800352e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003482:	2301      	movs	r3, #1
 8003484:	627b      	str	r3, [r7, #36]	; 0x24
 8003486:	e045      	b.n	8003514 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	4413      	add	r3, r2
 8003490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800349c:	4613      	mov	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d12e      	bne.n	800350e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80034b0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	da2b      	bge.n	800350e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80034c2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d121      	bne.n	800350e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ce:	4613      	mov	r3, r2
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	4413      	add	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	440b      	add	r3, r1
 80034d8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80034dc:	2201      	movs	r2, #1
 80034de:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10a      	bne.n	800350e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	69fa      	ldr	r2, [r7, #28]
 8003502:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800350a:	6053      	str	r3, [r2, #4]
            break;
 800350c:	e007      	b.n	800351e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	3301      	adds	r3, #1
 8003512:	627b      	str	r3, [r7, #36]	; 0x24
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351a:	429a      	cmp	r2, r3
 800351c:	d3b4      	bcc.n	8003488 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695a      	ldr	r2, [r3, #20]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800352c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f003 f950 	bl	80067d8 <USB_ReadInterrupts>
 8003538:	4603      	mov	r3, r0
 800353a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800353e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003542:	d10a      	bne.n	800355a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f005 fd8b 	bl	8009060 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	695a      	ldr	r2, [r3, #20]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003558:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f003 f93a 	bl	80067d8 <USB_ReadInterrupts>
 8003564:	4603      	mov	r3, r0
 8003566:	f003 0304 	and.w	r3, r3, #4
 800356a:	2b04      	cmp	r3, #4
 800356c:	d115      	bne.n	800359a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d002      	beq.n	8003586 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f005 fd7b 	bl	800907c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6859      	ldr	r1, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	430a      	orrs	r2, r1
 8003594:	605a      	str	r2, [r3, #4]
 8003596:	e000      	b.n	800359a <HAL_PCD_IRQHandler+0x938>
      return;
 8003598:	bf00      	nop
    }
  }
}
 800359a:	3734      	adds	r7, #52	; 0x34
 800359c:	46bd      	mov	sp, r7
 800359e:	bd90      	pop	{r4, r7, pc}

080035a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	460b      	mov	r3, r1
 80035aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d101      	bne.n	80035ba <HAL_PCD_SetAddress+0x1a>
 80035b6:	2302      	movs	r3, #2
 80035b8:	e013      	b.n	80035e2 <HAL_PCD_SetAddress+0x42>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	78fa      	ldrb	r2, [r7, #3]
 80035c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	78fa      	ldrb	r2, [r7, #3]
 80035d0:	4611      	mov	r1, r2
 80035d2:	4618      	mov	r0, r3
 80035d4:	f003 f898 	bl	8006708 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b084      	sub	sp, #16
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	4608      	mov	r0, r1
 80035f4:	4611      	mov	r1, r2
 80035f6:	461a      	mov	r2, r3
 80035f8:	4603      	mov	r3, r0
 80035fa:	70fb      	strb	r3, [r7, #3]
 80035fc:	460b      	mov	r3, r1
 80035fe:	803b      	strh	r3, [r7, #0]
 8003600:	4613      	mov	r3, r2
 8003602:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003604:	2300      	movs	r3, #0
 8003606:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003608:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800360c:	2b00      	cmp	r3, #0
 800360e:	da0f      	bge.n	8003630 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003610:	78fb      	ldrb	r3, [r7, #3]
 8003612:	f003 020f 	and.w	r2, r3, #15
 8003616:	4613      	mov	r3, r2
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	4413      	add	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	3338      	adds	r3, #56	; 0x38
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	4413      	add	r3, r2
 8003624:	3304      	adds	r3, #4
 8003626:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2201      	movs	r2, #1
 800362c:	705a      	strb	r2, [r3, #1]
 800362e:	e00f      	b.n	8003650 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003630:	78fb      	ldrb	r3, [r7, #3]
 8003632:	f003 020f 	and.w	r2, r3, #15
 8003636:	4613      	mov	r3, r2
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	4413      	add	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	4413      	add	r3, r2
 8003646:	3304      	adds	r3, #4
 8003648:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003650:	78fb      	ldrb	r3, [r7, #3]
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	b2da      	uxtb	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800365c:	883a      	ldrh	r2, [r7, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	78ba      	ldrb	r2, [r7, #2]
 8003666:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	785b      	ldrb	r3, [r3, #1]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d004      	beq.n	800367a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	b29a      	uxth	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800367a:	78bb      	ldrb	r3, [r7, #2]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d102      	bne.n	8003686 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <HAL_PCD_EP_Open+0xaa>
 8003690:	2302      	movs	r3, #2
 8003692:	e00e      	b.n	80036b2 <HAL_PCD_EP_Open+0xc8>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68f9      	ldr	r1, [r7, #12]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f002 f918 	bl	80058d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80036b0:	7afb      	ldrb	r3, [r7, #11]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b084      	sub	sp, #16
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	460b      	mov	r3, r1
 80036c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	da0f      	bge.n	80036ee <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036ce:	78fb      	ldrb	r3, [r7, #3]
 80036d0:	f003 020f 	and.w	r2, r3, #15
 80036d4:	4613      	mov	r3, r2
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	3338      	adds	r3, #56	; 0x38
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	4413      	add	r3, r2
 80036e2:	3304      	adds	r3, #4
 80036e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2201      	movs	r2, #1
 80036ea:	705a      	strb	r2, [r3, #1]
 80036ec:	e00f      	b.n	800370e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036ee:	78fb      	ldrb	r3, [r7, #3]
 80036f0:	f003 020f 	and.w	r2, r3, #15
 80036f4:	4613      	mov	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	4413      	add	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	4413      	add	r3, r2
 8003704:	3304      	adds	r3, #4
 8003706:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800370e:	78fb      	ldrb	r3, [r7, #3]
 8003710:	f003 030f 	and.w	r3, r3, #15
 8003714:	b2da      	uxtb	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003720:	2b01      	cmp	r3, #1
 8003722:	d101      	bne.n	8003728 <HAL_PCD_EP_Close+0x6e>
 8003724:	2302      	movs	r3, #2
 8003726:	e00e      	b.n	8003746 <HAL_PCD_EP_Close+0x8c>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68f9      	ldr	r1, [r7, #12]
 8003736:	4618      	mov	r0, r3
 8003738:	f002 f956 	bl	80059e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b086      	sub	sp, #24
 8003752:	af00      	add	r7, sp, #0
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	607a      	str	r2, [r7, #4]
 8003758:	603b      	str	r3, [r7, #0]
 800375a:	460b      	mov	r3, r1
 800375c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800375e:	7afb      	ldrb	r3, [r7, #11]
 8003760:	f003 020f 	and.w	r2, r3, #15
 8003764:	4613      	mov	r3, r2
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	4413      	add	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	4413      	add	r3, r2
 8003774:	3304      	adds	r3, #4
 8003776:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	2200      	movs	r2, #0
 8003788:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2200      	movs	r2, #0
 800378e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003790:	7afb      	ldrb	r3, [r7, #11]
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	b2da      	uxtb	r2, r3
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d102      	bne.n	80037aa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037aa:	7afb      	ldrb	r3, [r7, #11]
 80037ac:	f003 030f 	and.w	r3, r3, #15
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d109      	bne.n	80037c8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6818      	ldr	r0, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	461a      	mov	r2, r3
 80037c0:	6979      	ldr	r1, [r7, #20]
 80037c2:	f002 fc35 	bl	8006030 <USB_EP0StartXfer>
 80037c6:	e008      	b.n	80037da <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6818      	ldr	r0, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	461a      	mov	r2, r3
 80037d4:	6979      	ldr	r1, [r7, #20]
 80037d6:	f002 f9e3 	bl	8005ba0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3718      	adds	r7, #24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80037f0:	78fb      	ldrb	r3, [r7, #3]
 80037f2:	f003 020f 	and.w	r2, r3, #15
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	4613      	mov	r3, r2
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	4413      	add	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003806:	681b      	ldr	r3, [r3, #0]
}
 8003808:	4618      	mov	r0, r3
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	607a      	str	r2, [r7, #4]
 800381e:	603b      	str	r3, [r7, #0]
 8003820:	460b      	mov	r3, r1
 8003822:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003824:	7afb      	ldrb	r3, [r7, #11]
 8003826:	f003 020f 	and.w	r2, r3, #15
 800382a:	4613      	mov	r3, r2
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	4413      	add	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	3338      	adds	r3, #56	; 0x38
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	4413      	add	r3, r2
 8003838:	3304      	adds	r3, #4
 800383a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	2200      	movs	r2, #0
 800384c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2201      	movs	r2, #1
 8003852:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003854:	7afb      	ldrb	r3, [r7, #11]
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	b2da      	uxtb	r2, r3
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d102      	bne.n	800386e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800386e:	7afb      	ldrb	r3, [r7, #11]
 8003870:	f003 030f 	and.w	r3, r3, #15
 8003874:	2b00      	cmp	r3, #0
 8003876:	d109      	bne.n	800388c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6818      	ldr	r0, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	b2db      	uxtb	r3, r3
 8003882:	461a      	mov	r2, r3
 8003884:	6979      	ldr	r1, [r7, #20]
 8003886:	f002 fbd3 	bl	8006030 <USB_EP0StartXfer>
 800388a:	e008      	b.n	800389e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6818      	ldr	r0, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	b2db      	uxtb	r3, r3
 8003896:	461a      	mov	r2, r3
 8003898:	6979      	ldr	r1, [r7, #20]
 800389a:	f002 f981 	bl	8005ba0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3718      	adds	r7, #24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	460b      	mov	r3, r1
 80038b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038b4:	78fb      	ldrb	r3, [r7, #3]
 80038b6:	f003 020f 	and.w	r2, r3, #15
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d901      	bls.n	80038c6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e050      	b.n	8003968 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	da0f      	bge.n	80038ee <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038ce:	78fb      	ldrb	r3, [r7, #3]
 80038d0:	f003 020f 	and.w	r2, r3, #15
 80038d4:	4613      	mov	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	4413      	add	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	3338      	adds	r3, #56	; 0x38
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	4413      	add	r3, r2
 80038e2:	3304      	adds	r3, #4
 80038e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2201      	movs	r2, #1
 80038ea:	705a      	strb	r2, [r3, #1]
 80038ec:	e00d      	b.n	800390a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80038ee:	78fa      	ldrb	r2, [r7, #3]
 80038f0:	4613      	mov	r3, r2
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	4413      	add	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	4413      	add	r3, r2
 8003900:	3304      	adds	r3, #4
 8003902:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2201      	movs	r2, #1
 800390e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003910:	78fb      	ldrb	r3, [r7, #3]
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	b2da      	uxtb	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003922:	2b01      	cmp	r3, #1
 8003924:	d101      	bne.n	800392a <HAL_PCD_EP_SetStall+0x82>
 8003926:	2302      	movs	r3, #2
 8003928:	e01e      	b.n	8003968 <HAL_PCD_EP_SetStall+0xc0>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68f9      	ldr	r1, [r7, #12]
 8003938:	4618      	mov	r0, r3
 800393a:	f002 fe11 	bl	8006560 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800393e:	78fb      	ldrb	r3, [r7, #3]
 8003940:	f003 030f 	and.w	r3, r3, #15
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10a      	bne.n	800395e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6818      	ldr	r0, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	b2d9      	uxtb	r1, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003958:	461a      	mov	r2, r3
 800395a:	f003 f801 	bl	8006960 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	460b      	mov	r3, r1
 800397a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800397c:	78fb      	ldrb	r3, [r7, #3]
 800397e:	f003 020f 	and.w	r2, r3, #15
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	429a      	cmp	r2, r3
 8003988:	d901      	bls.n	800398e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e042      	b.n	8003a14 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800398e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003992:	2b00      	cmp	r3, #0
 8003994:	da0f      	bge.n	80039b6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003996:	78fb      	ldrb	r3, [r7, #3]
 8003998:	f003 020f 	and.w	r2, r3, #15
 800399c:	4613      	mov	r3, r2
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	4413      	add	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	3338      	adds	r3, #56	; 0x38
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	4413      	add	r3, r2
 80039aa:	3304      	adds	r3, #4
 80039ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2201      	movs	r2, #1
 80039b2:	705a      	strb	r2, [r3, #1]
 80039b4:	e00f      	b.n	80039d6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039b6:	78fb      	ldrb	r3, [r7, #3]
 80039b8:	f003 020f 	and.w	r2, r3, #15
 80039bc:	4613      	mov	r3, r2
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	4413      	add	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	4413      	add	r3, r2
 80039cc:	3304      	adds	r3, #4
 80039ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d101      	bne.n	80039f6 <HAL_PCD_EP_ClrStall+0x86>
 80039f2:	2302      	movs	r3, #2
 80039f4:	e00e      	b.n	8003a14 <HAL_PCD_EP_ClrStall+0xa4>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68f9      	ldr	r1, [r7, #12]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f002 fe19 	bl	800663c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003a28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	da0c      	bge.n	8003a4a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a30:	78fb      	ldrb	r3, [r7, #3]
 8003a32:	f003 020f 	and.w	r2, r3, #15
 8003a36:	4613      	mov	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	3338      	adds	r3, #56	; 0x38
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	4413      	add	r3, r2
 8003a44:	3304      	adds	r3, #4
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	e00c      	b.n	8003a64 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a4a:	78fb      	ldrb	r3, [r7, #3]
 8003a4c:	f003 020f 	and.w	r2, r3, #15
 8003a50:	4613      	mov	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	4413      	add	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	4413      	add	r3, r2
 8003a60:	3304      	adds	r3, #4
 8003a62:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68f9      	ldr	r1, [r7, #12]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f002 fc38 	bl	80062e0 <USB_EPStopXfer>
 8003a70:	4603      	mov	r3, r0
 8003a72:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003a74:	7afb      	ldrb	r3, [r7, #11]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b08a      	sub	sp, #40	; 0x28
 8003a82:	af02      	add	r7, sp, #8
 8003a84:	6078      	str	r0, [r7, #4]
 8003a86:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	4613      	mov	r3, r2
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	4413      	add	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	3338      	adds	r3, #56	; 0x38
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a1a      	ldr	r2, [r3, #32]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d901      	bls.n	8003ab6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e06c      	b.n	8003b90 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	699a      	ldr	r2, [r3, #24]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	69fa      	ldr	r2, [r7, #28]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d902      	bls.n	8003ad2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	3303      	adds	r3, #3
 8003ad6:	089b      	lsrs	r3, r3, #2
 8003ad8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ada:	e02b      	b.n	8003b34 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	699a      	ldr	r2, [r3, #24]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	69fa      	ldr	r2, [r7, #28]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d902      	bls.n	8003af8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	3303      	adds	r3, #3
 8003afc:	089b      	lsrs	r3, r3, #2
 8003afe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6919      	ldr	r1, [r3, #16]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	4603      	mov	r3, r0
 8003b16:	6978      	ldr	r0, [r7, #20]
 8003b18:	f002 fc8c 	bl	8006434 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	691a      	ldr	r2, [r3, #16]
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	441a      	add	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6a1a      	ldr	r2, [r3, #32]
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	441a      	add	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	015a      	lsls	r2, r3, #5
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d809      	bhi.n	8003b5e <PCD_WriteEmptyTxFifo+0xe0>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6a1a      	ldr	r2, [r3, #32]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d203      	bcs.n	8003b5e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1be      	bne.n	8003adc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	699a      	ldr	r2, [r3, #24]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d811      	bhi.n	8003b8e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	f003 030f 	and.w	r3, r3, #15
 8003b70:	2201      	movs	r2, #1
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	43db      	mvns	r3, r3
 8003b84:	6939      	ldr	r1, [r7, #16]
 8003b86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3720      	adds	r7, #32
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b088      	sub	sp, #32
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	333c      	adds	r3, #60	; 0x3c
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	015a      	lsls	r2, r3, #5
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d17b      	bne.n	8003cc6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f003 0308 	and.w	r3, r3, #8
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d015      	beq.n	8003c04 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	4a61      	ldr	r2, [pc, #388]	; (8003d60 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	f240 80b9 	bls.w	8003d54 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 80b3 	beq.w	8003d54 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c00:	6093      	str	r3, [r2, #8]
 8003c02:	e0a7      	b.n	8003d54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	f003 0320 	and.w	r3, r3, #32
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d009      	beq.n	8003c22 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	2320      	movs	r3, #32
 8003c1e:	6093      	str	r3, [r2, #8]
 8003c20:	e098      	b.n	8003d54 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f040 8093 	bne.w	8003d54 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	4a4b      	ldr	r2, [pc, #300]	; (8003d60 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d90f      	bls.n	8003c56 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00a      	beq.n	8003c56 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	015a      	lsls	r2, r3, #5
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	4413      	add	r3, r2
 8003c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c52:	6093      	str	r3, [r2, #8]
 8003c54:	e07e      	b.n	8003d54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	4413      	add	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	4413      	add	r3, r2
 8003c68:	3304      	adds	r3, #4
 8003c6a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	69da      	ldr	r2, [r3, #28]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	0159      	lsls	r1, r3, #5
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	440b      	add	r3, r1
 8003c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c82:	1ad2      	subs	r2, r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d114      	bne.n	8003cb8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d109      	bne.n	8003caa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6818      	ldr	r0, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	f002 fe5c 	bl	8006960 <USB_EP0_OutStart>
 8003ca8:	e006      	b.n	8003cb8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	691a      	ldr	r2, [r3, #16]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	441a      	add	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f005 f914 	bl	8008eec <HAL_PCD_DataOutStageCallback>
 8003cc4:	e046      	b.n	8003d54 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	4a26      	ldr	r2, [pc, #152]	; (8003d64 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d124      	bne.n	8003d18 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00a      	beq.n	8003cee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cea:	6093      	str	r3, [r2, #8]
 8003cec:	e032      	b.n	8003d54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	f003 0320 	and.w	r3, r3, #32
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d008      	beq.n	8003d0a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d04:	461a      	mov	r2, r3
 8003d06:	2320      	movs	r3, #32
 8003d08:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	4619      	mov	r1, r3
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f005 f8eb 	bl	8008eec <HAL_PCD_DataOutStageCallback>
 8003d16:	e01d      	b.n	8003d54 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d114      	bne.n	8003d48 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	4613      	mov	r3, r2
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	4413      	add	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	440b      	add	r3, r1
 8003d2c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d108      	bne.n	8003d48 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6818      	ldr	r0, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d40:	461a      	mov	r2, r3
 8003d42:	2100      	movs	r1, #0
 8003d44:	f002 fe0c 	bl	8006960 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f005 f8cc 	bl	8008eec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3720      	adds	r7, #32
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	4f54300a 	.word	0x4f54300a
 8003d64:	4f54310a 	.word	0x4f54310a

08003d68 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	333c      	adds	r3, #60	; 0x3c
 8003d80:	3304      	adds	r3, #4
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	015a      	lsls	r2, r3, #5
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	4a15      	ldr	r2, [pc, #84]	; (8003df0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d90e      	bls.n	8003dbc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d009      	beq.n	8003dbc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db4:	461a      	mov	r2, r3
 8003db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f005 f883 	bl	8008ec8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	4a0a      	ldr	r2, [pc, #40]	; (8003df0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d90c      	bls.n	8003de4 <PCD_EP_OutSetupPacket_int+0x7c>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d108      	bne.n	8003de4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6818      	ldr	r0, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ddc:	461a      	mov	r2, r3
 8003dde:	2101      	movs	r1, #1
 8003de0:	f002 fdbe 	bl	8006960 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	4f54300a 	.word	0x4f54300a

08003df4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	70fb      	strb	r3, [r7, #3]
 8003e00:	4613      	mov	r3, r2
 8003e02:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003e0c:	78fb      	ldrb	r3, [r7, #3]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d107      	bne.n	8003e22 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003e12:	883b      	ldrh	r3, [r7, #0]
 8003e14:	0419      	lsls	r1, r3, #16
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	629a      	str	r2, [r3, #40]	; 0x28
 8003e20:	e028      	b.n	8003e74 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e28:	0c1b      	lsrs	r3, r3, #16
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e30:	2300      	movs	r3, #0
 8003e32:	73fb      	strb	r3, [r7, #15]
 8003e34:	e00d      	b.n	8003e52 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	3340      	adds	r3, #64	; 0x40
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4413      	add	r3, r2
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	0c1b      	lsrs	r3, r3, #16
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	4413      	add	r3, r2
 8003e4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	73fb      	strb	r3, [r7, #15]
 8003e52:	7bfa      	ldrb	r2, [r7, #15]
 8003e54:	78fb      	ldrb	r3, [r7, #3]
 8003e56:	3b01      	subs	r3, #1
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d3ec      	bcc.n	8003e36 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003e5c:	883b      	ldrh	r3, [r7, #0]
 8003e5e:	0418      	lsls	r0, r3, #16
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6819      	ldr	r1, [r3, #0]
 8003e64:	78fb      	ldrb	r3, [r7, #3]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	4302      	orrs	r2, r0
 8003e6c:	3340      	adds	r3, #64	; 0x40
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	887a      	ldrh	r2, [r7, #2]
 8003e94:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	460b      	mov	r3, r1
 8003eae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e267      	b.n	800439e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d075      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003eda:	4b88      	ldr	r3, [pc, #544]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 030c 	and.w	r3, r3, #12
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d00c      	beq.n	8003f00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ee6:	4b85      	ldr	r3, [pc, #532]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003eee:	2b08      	cmp	r3, #8
 8003ef0:	d112      	bne.n	8003f18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ef2:	4b82      	ldr	r3, [pc, #520]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003efa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003efe:	d10b      	bne.n	8003f18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f00:	4b7e      	ldr	r3, [pc, #504]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d05b      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x108>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d157      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e242      	b.n	800439e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f20:	d106      	bne.n	8003f30 <HAL_RCC_OscConfig+0x74>
 8003f22:	4b76      	ldr	r3, [pc, #472]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a75      	ldr	r2, [pc, #468]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f2c:	6013      	str	r3, [r2, #0]
 8003f2e:	e01d      	b.n	8003f6c <HAL_RCC_OscConfig+0xb0>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f38:	d10c      	bne.n	8003f54 <HAL_RCC_OscConfig+0x98>
 8003f3a:	4b70      	ldr	r3, [pc, #448]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a6f      	ldr	r2, [pc, #444]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f44:	6013      	str	r3, [r2, #0]
 8003f46:	4b6d      	ldr	r3, [pc, #436]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a6c      	ldr	r2, [pc, #432]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	e00b      	b.n	8003f6c <HAL_RCC_OscConfig+0xb0>
 8003f54:	4b69      	ldr	r3, [pc, #420]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a68      	ldr	r2, [pc, #416]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f5e:	6013      	str	r3, [r2, #0]
 8003f60:	4b66      	ldr	r3, [pc, #408]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a65      	ldr	r2, [pc, #404]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d013      	beq.n	8003f9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f74:	f7fd f8ba 	bl	80010ec <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f7c:	f7fd f8b6 	bl	80010ec <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b64      	cmp	r3, #100	; 0x64
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e207      	b.n	800439e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f8e:	4b5b      	ldr	r3, [pc, #364]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0f0      	beq.n	8003f7c <HAL_RCC_OscConfig+0xc0>
 8003f9a:	e014      	b.n	8003fc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9c:	f7fd f8a6 	bl	80010ec <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fa4:	f7fd f8a2 	bl	80010ec <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b64      	cmp	r3, #100	; 0x64
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e1f3      	b.n	800439e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fb6:	4b51      	ldr	r3, [pc, #324]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f0      	bne.n	8003fa4 <HAL_RCC_OscConfig+0xe8>
 8003fc2:	e000      	b.n	8003fc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d063      	beq.n	800409a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fd2:	4b4a      	ldr	r3, [pc, #296]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 030c 	and.w	r3, r3, #12
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00b      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fde:	4b47      	ldr	r3, [pc, #284]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fe6:	2b08      	cmp	r3, #8
 8003fe8:	d11c      	bne.n	8004024 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fea:	4b44      	ldr	r3, [pc, #272]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d116      	bne.n	8004024 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ff6:	4b41      	ldr	r3, [pc, #260]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d005      	beq.n	800400e <HAL_RCC_OscConfig+0x152>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d001      	beq.n	800400e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e1c7      	b.n	800439e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800400e:	4b3b      	ldr	r3, [pc, #236]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	4937      	ldr	r1, [pc, #220]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 800401e:	4313      	orrs	r3, r2
 8004020:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004022:	e03a      	b.n	800409a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d020      	beq.n	800406e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800402c:	4b34      	ldr	r3, [pc, #208]	; (8004100 <HAL_RCC_OscConfig+0x244>)
 800402e:	2201      	movs	r2, #1
 8004030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004032:	f7fd f85b 	bl	80010ec <HAL_GetTick>
 8004036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004038:	e008      	b.n	800404c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800403a:	f7fd f857 	bl	80010ec <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e1a8      	b.n	800439e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800404c:	4b2b      	ldr	r3, [pc, #172]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0f0      	beq.n	800403a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004058:	4b28      	ldr	r3, [pc, #160]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	4925      	ldr	r1, [pc, #148]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8004068:	4313      	orrs	r3, r2
 800406a:	600b      	str	r3, [r1, #0]
 800406c:	e015      	b.n	800409a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800406e:	4b24      	ldr	r3, [pc, #144]	; (8004100 <HAL_RCC_OscConfig+0x244>)
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004074:	f7fd f83a 	bl	80010ec <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800407c:	f7fd f836 	bl	80010ec <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e187      	b.n	800439e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800408e:	4b1b      	ldr	r3, [pc, #108]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f0      	bne.n	800407c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d036      	beq.n	8004114 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d016      	beq.n	80040dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ae:	4b15      	ldr	r3, [pc, #84]	; (8004104 <HAL_RCC_OscConfig+0x248>)
 80040b0:	2201      	movs	r2, #1
 80040b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b4:	f7fd f81a 	bl	80010ec <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040bc:	f7fd f816 	bl	80010ec <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e167      	b.n	800439e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ce:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <HAL_RCC_OscConfig+0x240>)
 80040d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d0f0      	beq.n	80040bc <HAL_RCC_OscConfig+0x200>
 80040da:	e01b      	b.n	8004114 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040dc:	4b09      	ldr	r3, [pc, #36]	; (8004104 <HAL_RCC_OscConfig+0x248>)
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040e2:	f7fd f803 	bl	80010ec <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040e8:	e00e      	b.n	8004108 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040ea:	f7fc ffff 	bl	80010ec <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d907      	bls.n	8004108 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e150      	b.n	800439e <HAL_RCC_OscConfig+0x4e2>
 80040fc:	40023800 	.word	0x40023800
 8004100:	42470000 	.word	0x42470000
 8004104:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004108:	4b88      	ldr	r3, [pc, #544]	; (800432c <HAL_RCC_OscConfig+0x470>)
 800410a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1ea      	bne.n	80040ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 8097 	beq.w	8004250 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004122:	2300      	movs	r3, #0
 8004124:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004126:	4b81      	ldr	r3, [pc, #516]	; (800432c <HAL_RCC_OscConfig+0x470>)
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10f      	bne.n	8004152 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004132:	2300      	movs	r3, #0
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	4b7d      	ldr	r3, [pc, #500]	; (800432c <HAL_RCC_OscConfig+0x470>)
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	4a7c      	ldr	r2, [pc, #496]	; (800432c <HAL_RCC_OscConfig+0x470>)
 800413c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004140:	6413      	str	r3, [r2, #64]	; 0x40
 8004142:	4b7a      	ldr	r3, [pc, #488]	; (800432c <HAL_RCC_OscConfig+0x470>)
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800414a:	60bb      	str	r3, [r7, #8]
 800414c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800414e:	2301      	movs	r3, #1
 8004150:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004152:	4b77      	ldr	r3, [pc, #476]	; (8004330 <HAL_RCC_OscConfig+0x474>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415a:	2b00      	cmp	r3, #0
 800415c:	d118      	bne.n	8004190 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800415e:	4b74      	ldr	r3, [pc, #464]	; (8004330 <HAL_RCC_OscConfig+0x474>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a73      	ldr	r2, [pc, #460]	; (8004330 <HAL_RCC_OscConfig+0x474>)
 8004164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004168:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800416a:	f7fc ffbf 	bl	80010ec <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004170:	e008      	b.n	8004184 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004172:	f7fc ffbb 	bl	80010ec <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e10c      	b.n	800439e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004184:	4b6a      	ldr	r3, [pc, #424]	; (8004330 <HAL_RCC_OscConfig+0x474>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418c:	2b00      	cmp	r3, #0
 800418e:	d0f0      	beq.n	8004172 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d106      	bne.n	80041a6 <HAL_RCC_OscConfig+0x2ea>
 8004198:	4b64      	ldr	r3, [pc, #400]	; (800432c <HAL_RCC_OscConfig+0x470>)
 800419a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419c:	4a63      	ldr	r2, [pc, #396]	; (800432c <HAL_RCC_OscConfig+0x470>)
 800419e:	f043 0301 	orr.w	r3, r3, #1
 80041a2:	6713      	str	r3, [r2, #112]	; 0x70
 80041a4:	e01c      	b.n	80041e0 <HAL_RCC_OscConfig+0x324>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	2b05      	cmp	r3, #5
 80041ac:	d10c      	bne.n	80041c8 <HAL_RCC_OscConfig+0x30c>
 80041ae:	4b5f      	ldr	r3, [pc, #380]	; (800432c <HAL_RCC_OscConfig+0x470>)
 80041b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b2:	4a5e      	ldr	r2, [pc, #376]	; (800432c <HAL_RCC_OscConfig+0x470>)
 80041b4:	f043 0304 	orr.w	r3, r3, #4
 80041b8:	6713      	str	r3, [r2, #112]	; 0x70
 80041ba:	4b5c      	ldr	r3, [pc, #368]	; (800432c <HAL_RCC_OscConfig+0x470>)
 80041bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041be:	4a5b      	ldr	r2, [pc, #364]	; (800432c <HAL_RCC_OscConfig+0x470>)
 80041c0:	f043 0301 	orr.w	r3, r3, #1
 80041c4:	6713      	str	r3, [r2, #112]	; 0x70
 80041c6:	e00b      	b.n	80041e0 <HAL_RCC_OscConfig+0x324>
 80041c8:	4b58      	ldr	r3, [pc, #352]	; (800432c <HAL_RCC_OscConfig+0x470>)
 80041ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041cc:	4a57      	ldr	r2, [pc, #348]	; (800432c <HAL_RCC_OscConfig+0x470>)
 80041ce:	f023 0301 	bic.w	r3, r3, #1
 80041d2:	6713      	str	r3, [r2, #112]	; 0x70
 80041d4:	4b55      	ldr	r3, [pc, #340]	; (800432c <HAL_RCC_OscConfig+0x470>)
 80041d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d8:	4a54      	ldr	r2, [pc, #336]	; (800432c <HAL_RCC_OscConfig+0x470>)
 80041da:	f023 0304 	bic.w	r3, r3, #4
 80041de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d015      	beq.n	8004214 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e8:	f7fc ff80 	bl	80010ec <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ee:	e00a      	b.n	8004206 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041f0:	f7fc ff7c 	bl	80010ec <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fe:	4293      	cmp	r3, r2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e0cb      	b.n	800439e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004206:	4b49      	ldr	r3, [pc, #292]	; (800432c <HAL_RCC_OscConfig+0x470>)
 8004208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0ee      	beq.n	80041f0 <HAL_RCC_OscConfig+0x334>
 8004212:	e014      	b.n	800423e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004214:	f7fc ff6a 	bl	80010ec <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800421a:	e00a      	b.n	8004232 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800421c:	f7fc ff66 	bl	80010ec <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	f241 3288 	movw	r2, #5000	; 0x1388
 800422a:	4293      	cmp	r3, r2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e0b5      	b.n	800439e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004232:	4b3e      	ldr	r3, [pc, #248]	; (800432c <HAL_RCC_OscConfig+0x470>)
 8004234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1ee      	bne.n	800421c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800423e:	7dfb      	ldrb	r3, [r7, #23]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d105      	bne.n	8004250 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004244:	4b39      	ldr	r3, [pc, #228]	; (800432c <HAL_RCC_OscConfig+0x470>)
 8004246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004248:	4a38      	ldr	r2, [pc, #224]	; (800432c <HAL_RCC_OscConfig+0x470>)
 800424a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800424e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 80a1 	beq.w	800439c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800425a:	4b34      	ldr	r3, [pc, #208]	; (800432c <HAL_RCC_OscConfig+0x470>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 030c 	and.w	r3, r3, #12
 8004262:	2b08      	cmp	r3, #8
 8004264:	d05c      	beq.n	8004320 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	2b02      	cmp	r3, #2
 800426c:	d141      	bne.n	80042f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800426e:	4b31      	ldr	r3, [pc, #196]	; (8004334 <HAL_RCC_OscConfig+0x478>)
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004274:	f7fc ff3a 	bl	80010ec <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800427c:	f7fc ff36 	bl	80010ec <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e087      	b.n	800439e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800428e:	4b27      	ldr	r3, [pc, #156]	; (800432c <HAL_RCC_OscConfig+0x470>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1f0      	bne.n	800427c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69da      	ldr	r2, [r3, #28]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	019b      	lsls	r3, r3, #6
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b0:	085b      	lsrs	r3, r3, #1
 80042b2:	3b01      	subs	r3, #1
 80042b4:	041b      	lsls	r3, r3, #16
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042bc:	061b      	lsls	r3, r3, #24
 80042be:	491b      	ldr	r1, [pc, #108]	; (800432c <HAL_RCC_OscConfig+0x470>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042c4:	4b1b      	ldr	r3, [pc, #108]	; (8004334 <HAL_RCC_OscConfig+0x478>)
 80042c6:	2201      	movs	r2, #1
 80042c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ca:	f7fc ff0f 	bl	80010ec <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d0:	e008      	b.n	80042e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042d2:	f7fc ff0b 	bl	80010ec <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e05c      	b.n	800439e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042e4:	4b11      	ldr	r3, [pc, #68]	; (800432c <HAL_RCC_OscConfig+0x470>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d0f0      	beq.n	80042d2 <HAL_RCC_OscConfig+0x416>
 80042f0:	e054      	b.n	800439c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f2:	4b10      	ldr	r3, [pc, #64]	; (8004334 <HAL_RCC_OscConfig+0x478>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f8:	f7fc fef8 	bl	80010ec <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004300:	f7fc fef4 	bl	80010ec <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e045      	b.n	800439e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004312:	4b06      	ldr	r3, [pc, #24]	; (800432c <HAL_RCC_OscConfig+0x470>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1f0      	bne.n	8004300 <HAL_RCC_OscConfig+0x444>
 800431e:	e03d      	b.n	800439c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d107      	bne.n	8004338 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e038      	b.n	800439e <HAL_RCC_OscConfig+0x4e2>
 800432c:	40023800 	.word	0x40023800
 8004330:	40007000 	.word	0x40007000
 8004334:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004338:	4b1b      	ldr	r3, [pc, #108]	; (80043a8 <HAL_RCC_OscConfig+0x4ec>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d028      	beq.n	8004398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004350:	429a      	cmp	r2, r3
 8004352:	d121      	bne.n	8004398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800435e:	429a      	cmp	r2, r3
 8004360:	d11a      	bne.n	8004398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004368:	4013      	ands	r3, r2
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800436e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004370:	4293      	cmp	r3, r2
 8004372:	d111      	bne.n	8004398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437e:	085b      	lsrs	r3, r3, #1
 8004380:	3b01      	subs	r3, #1
 8004382:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004384:	429a      	cmp	r2, r3
 8004386:	d107      	bne.n	8004398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004392:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004394:	429a      	cmp	r2, r3
 8004396:	d001      	beq.n	800439c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e000      	b.n	800439e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3718      	adds	r7, #24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	40023800 	.word	0x40023800

080043ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e0cc      	b.n	800455a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043c0:	4b68      	ldr	r3, [pc, #416]	; (8004564 <HAL_RCC_ClockConfig+0x1b8>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d90c      	bls.n	80043e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ce:	4b65      	ldr	r3, [pc, #404]	; (8004564 <HAL_RCC_ClockConfig+0x1b8>)
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043d6:	4b63      	ldr	r3, [pc, #396]	; (8004564 <HAL_RCC_ClockConfig+0x1b8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d001      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e0b8      	b.n	800455a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d020      	beq.n	8004436 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0304 	and.w	r3, r3, #4
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d005      	beq.n	800440c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004400:	4b59      	ldr	r3, [pc, #356]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	4a58      	ldr	r2, [pc, #352]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 8004406:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800440a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b00      	cmp	r3, #0
 8004416:	d005      	beq.n	8004424 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004418:	4b53      	ldr	r3, [pc, #332]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	4a52      	ldr	r2, [pc, #328]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 800441e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004422:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004424:	4b50      	ldr	r3, [pc, #320]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	494d      	ldr	r1, [pc, #308]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	4313      	orrs	r3, r2
 8004434:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d044      	beq.n	80044cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d107      	bne.n	800445a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800444a:	4b47      	ldr	r3, [pc, #284]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d119      	bne.n	800448a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e07f      	b.n	800455a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b02      	cmp	r3, #2
 8004460:	d003      	beq.n	800446a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004466:	2b03      	cmp	r3, #3
 8004468:	d107      	bne.n	800447a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800446a:	4b3f      	ldr	r3, [pc, #252]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d109      	bne.n	800448a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e06f      	b.n	800455a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800447a:	4b3b      	ldr	r3, [pc, #236]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e067      	b.n	800455a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800448a:	4b37      	ldr	r3, [pc, #220]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f023 0203 	bic.w	r2, r3, #3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	4934      	ldr	r1, [pc, #208]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 8004498:	4313      	orrs	r3, r2
 800449a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800449c:	f7fc fe26 	bl	80010ec <HAL_GetTick>
 80044a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044a2:	e00a      	b.n	80044ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044a4:	f7fc fe22 	bl	80010ec <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e04f      	b.n	800455a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ba:	4b2b      	ldr	r3, [pc, #172]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 020c 	and.w	r2, r3, #12
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d1eb      	bne.n	80044a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044cc:	4b25      	ldr	r3, [pc, #148]	; (8004564 <HAL_RCC_ClockConfig+0x1b8>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d20c      	bcs.n	80044f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044da:	4b22      	ldr	r3, [pc, #136]	; (8004564 <HAL_RCC_ClockConfig+0x1b8>)
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	b2d2      	uxtb	r2, r2
 80044e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e2:	4b20      	ldr	r3, [pc, #128]	; (8004564 <HAL_RCC_ClockConfig+0x1b8>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d001      	beq.n	80044f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e032      	b.n	800455a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d008      	beq.n	8004512 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004500:	4b19      	ldr	r3, [pc, #100]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	4916      	ldr	r1, [pc, #88]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 800450e:	4313      	orrs	r3, r2
 8004510:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0308 	and.w	r3, r3, #8
 800451a:	2b00      	cmp	r3, #0
 800451c:	d009      	beq.n	8004532 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800451e:	4b12      	ldr	r3, [pc, #72]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	490e      	ldr	r1, [pc, #56]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 800452e:	4313      	orrs	r3, r2
 8004530:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004532:	f000 f821 	bl	8004578 <HAL_RCC_GetSysClockFreq>
 8004536:	4602      	mov	r2, r0
 8004538:	4b0b      	ldr	r3, [pc, #44]	; (8004568 <HAL_RCC_ClockConfig+0x1bc>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	091b      	lsrs	r3, r3, #4
 800453e:	f003 030f 	and.w	r3, r3, #15
 8004542:	490a      	ldr	r1, [pc, #40]	; (800456c <HAL_RCC_ClockConfig+0x1c0>)
 8004544:	5ccb      	ldrb	r3, [r1, r3]
 8004546:	fa22 f303 	lsr.w	r3, r2, r3
 800454a:	4a09      	ldr	r2, [pc, #36]	; (8004570 <HAL_RCC_ClockConfig+0x1c4>)
 800454c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800454e:	4b09      	ldr	r3, [pc, #36]	; (8004574 <HAL_RCC_ClockConfig+0x1c8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f7fc fd86 	bl	8001064 <HAL_InitTick>

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	40023c00 	.word	0x40023c00
 8004568:	40023800 	.word	0x40023800
 800456c:	08009e3c 	.word	0x08009e3c
 8004570:	20000000 	.word	0x20000000
 8004574:	20000004 	.word	0x20000004

08004578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800457c:	b090      	sub	sp, #64	; 0x40
 800457e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	637b      	str	r3, [r7, #52]	; 0x34
 8004584:	2300      	movs	r3, #0
 8004586:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004588:	2300      	movs	r3, #0
 800458a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004590:	4b59      	ldr	r3, [pc, #356]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f003 030c 	and.w	r3, r3, #12
 8004598:	2b08      	cmp	r3, #8
 800459a:	d00d      	beq.n	80045b8 <HAL_RCC_GetSysClockFreq+0x40>
 800459c:	2b08      	cmp	r3, #8
 800459e:	f200 80a1 	bhi.w	80046e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <HAL_RCC_GetSysClockFreq+0x34>
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d003      	beq.n	80045b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80045aa:	e09b      	b.n	80046e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045ac:	4b53      	ldr	r3, [pc, #332]	; (80046fc <HAL_RCC_GetSysClockFreq+0x184>)
 80045ae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80045b0:	e09b      	b.n	80046ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045b2:	4b53      	ldr	r3, [pc, #332]	; (8004700 <HAL_RCC_GetSysClockFreq+0x188>)
 80045b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80045b6:	e098      	b.n	80046ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045b8:	4b4f      	ldr	r3, [pc, #316]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045c0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045c2:	4b4d      	ldr	r3, [pc, #308]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d028      	beq.n	8004620 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045ce:	4b4a      	ldr	r3, [pc, #296]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	099b      	lsrs	r3, r3, #6
 80045d4:	2200      	movs	r2, #0
 80045d6:	623b      	str	r3, [r7, #32]
 80045d8:	627a      	str	r2, [r7, #36]	; 0x24
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80045e0:	2100      	movs	r1, #0
 80045e2:	4b47      	ldr	r3, [pc, #284]	; (8004700 <HAL_RCC_GetSysClockFreq+0x188>)
 80045e4:	fb03 f201 	mul.w	r2, r3, r1
 80045e8:	2300      	movs	r3, #0
 80045ea:	fb00 f303 	mul.w	r3, r0, r3
 80045ee:	4413      	add	r3, r2
 80045f0:	4a43      	ldr	r2, [pc, #268]	; (8004700 <HAL_RCC_GetSysClockFreq+0x188>)
 80045f2:	fba0 1202 	umull	r1, r2, r0, r2
 80045f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045f8:	460a      	mov	r2, r1
 80045fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80045fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045fe:	4413      	add	r3, r2
 8004600:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004604:	2200      	movs	r2, #0
 8004606:	61bb      	str	r3, [r7, #24]
 8004608:	61fa      	str	r2, [r7, #28]
 800460a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800460e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004612:	f7fb fe3d 	bl	8000290 <__aeabi_uldivmod>
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	4613      	mov	r3, r2
 800461c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800461e:	e053      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004620:	4b35      	ldr	r3, [pc, #212]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	099b      	lsrs	r3, r3, #6
 8004626:	2200      	movs	r2, #0
 8004628:	613b      	str	r3, [r7, #16]
 800462a:	617a      	str	r2, [r7, #20]
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004632:	f04f 0b00 	mov.w	fp, #0
 8004636:	4652      	mov	r2, sl
 8004638:	465b      	mov	r3, fp
 800463a:	f04f 0000 	mov.w	r0, #0
 800463e:	f04f 0100 	mov.w	r1, #0
 8004642:	0159      	lsls	r1, r3, #5
 8004644:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004648:	0150      	lsls	r0, r2, #5
 800464a:	4602      	mov	r2, r0
 800464c:	460b      	mov	r3, r1
 800464e:	ebb2 080a 	subs.w	r8, r2, sl
 8004652:	eb63 090b 	sbc.w	r9, r3, fp
 8004656:	f04f 0200 	mov.w	r2, #0
 800465a:	f04f 0300 	mov.w	r3, #0
 800465e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004662:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004666:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800466a:	ebb2 0408 	subs.w	r4, r2, r8
 800466e:	eb63 0509 	sbc.w	r5, r3, r9
 8004672:	f04f 0200 	mov.w	r2, #0
 8004676:	f04f 0300 	mov.w	r3, #0
 800467a:	00eb      	lsls	r3, r5, #3
 800467c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004680:	00e2      	lsls	r2, r4, #3
 8004682:	4614      	mov	r4, r2
 8004684:	461d      	mov	r5, r3
 8004686:	eb14 030a 	adds.w	r3, r4, sl
 800468a:	603b      	str	r3, [r7, #0]
 800468c:	eb45 030b 	adc.w	r3, r5, fp
 8004690:	607b      	str	r3, [r7, #4]
 8004692:	f04f 0200 	mov.w	r2, #0
 8004696:	f04f 0300 	mov.w	r3, #0
 800469a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800469e:	4629      	mov	r1, r5
 80046a0:	028b      	lsls	r3, r1, #10
 80046a2:	4621      	mov	r1, r4
 80046a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046a8:	4621      	mov	r1, r4
 80046aa:	028a      	lsls	r2, r1, #10
 80046ac:	4610      	mov	r0, r2
 80046ae:	4619      	mov	r1, r3
 80046b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b2:	2200      	movs	r2, #0
 80046b4:	60bb      	str	r3, [r7, #8]
 80046b6:	60fa      	str	r2, [r7, #12]
 80046b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046bc:	f7fb fde8 	bl	8000290 <__aeabi_uldivmod>
 80046c0:	4602      	mov	r2, r0
 80046c2:	460b      	mov	r3, r1
 80046c4:	4613      	mov	r3, r2
 80046c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046c8:	4b0b      	ldr	r3, [pc, #44]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	0c1b      	lsrs	r3, r3, #16
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	3301      	adds	r3, #1
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80046d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046e2:	e002      	b.n	80046ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046e4:	4b05      	ldr	r3, [pc, #20]	; (80046fc <HAL_RCC_GetSysClockFreq+0x184>)
 80046e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3740      	adds	r7, #64	; 0x40
 80046f0:	46bd      	mov	sp, r7
 80046f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046f6:	bf00      	nop
 80046f8:	40023800 	.word	0x40023800
 80046fc:	00f42400 	.word	0x00f42400
 8004700:	017d7840 	.word	0x017d7840

08004704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004708:	4b03      	ldr	r3, [pc, #12]	; (8004718 <HAL_RCC_GetHCLKFreq+0x14>)
 800470a:	681b      	ldr	r3, [r3, #0]
}
 800470c:	4618      	mov	r0, r3
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	20000000 	.word	0x20000000

0800471c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004720:	f7ff fff0 	bl	8004704 <HAL_RCC_GetHCLKFreq>
 8004724:	4602      	mov	r2, r0
 8004726:	4b05      	ldr	r3, [pc, #20]	; (800473c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	0a9b      	lsrs	r3, r3, #10
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	4903      	ldr	r1, [pc, #12]	; (8004740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004732:	5ccb      	ldrb	r3, [r1, r3]
 8004734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004738:	4618      	mov	r0, r3
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40023800 	.word	0x40023800
 8004740:	08009e4c 	.word	0x08009e4c

08004744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004748:	f7ff ffdc 	bl	8004704 <HAL_RCC_GetHCLKFreq>
 800474c:	4602      	mov	r2, r0
 800474e:	4b05      	ldr	r3, [pc, #20]	; (8004764 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	0b5b      	lsrs	r3, r3, #13
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	4903      	ldr	r1, [pc, #12]	; (8004768 <HAL_RCC_GetPCLK2Freq+0x24>)
 800475a:	5ccb      	ldrb	r3, [r1, r3]
 800475c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004760:	4618      	mov	r0, r3
 8004762:	bd80      	pop	{r7, pc}
 8004764:	40023800 	.word	0x40023800
 8004768:	08009e4c 	.word	0x08009e4c

0800476c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e03f      	b.n	80047fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d106      	bne.n	8004798 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7fc f904 	bl	80009a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2224      	movs	r2, #36	; 0x24
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68da      	ldr	r2, [r3, #12]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 faa5 	bl	8004d00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	695a      	ldr	r2, [r3, #20]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68da      	ldr	r2, [r3, #12]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2220      	movs	r2, #32
 80047f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b084      	sub	sp, #16
 800480a:	af00      	add	r7, sp, #0
 800480c:	60f8      	str	r0, [r7, #12]
 800480e:	60b9      	str	r1, [r7, #8]
 8004810:	4613      	mov	r3, r2
 8004812:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b20      	cmp	r3, #32
 800481e:	d11d      	bne.n	800485c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <HAL_UART_Receive_DMA+0x26>
 8004826:	88fb      	ldrh	r3, [r7, #6]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e016      	b.n	800485e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <HAL_UART_Receive_DMA+0x38>
 800483a:	2302      	movs	r3, #2
 800483c:	e00f      	b.n	800485e <HAL_UART_Receive_DMA+0x58>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800484c:	88fb      	ldrh	r3, [r7, #6]
 800484e:	461a      	mov	r2, r3
 8004850:	68b9      	ldr	r1, [r7, #8]
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f000 f92a 	bl	8004aac <UART_Start_Receive_DMA>
 8004858:	4603      	mov	r3, r0
 800485a:	e000      	b.n	800485e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800485c:	2302      	movs	r3, #2
  }
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800488e:	b480      	push	{r7}
 8004890:	b083      	sub	sp, #12
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b083      	sub	sp, #12
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
 80048aa:	460b      	mov	r3, r1
 80048ac:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b09c      	sub	sp, #112	; 0x70
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d172      	bne.n	80049bc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80048d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d8:	2200      	movs	r2, #0
 80048da:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	330c      	adds	r3, #12
 80048e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048e6:	e853 3f00 	ldrex	r3, [r3]
 80048ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80048f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	330c      	adds	r3, #12
 80048fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80048fe:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004900:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004902:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004904:	e841 2300 	strex	r3, r2, [r1]
 8004908:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800490a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1e5      	bne.n	80048dc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	3314      	adds	r3, #20
 8004916:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491a:	e853 3f00 	ldrex	r3, [r3]
 800491e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004922:	f023 0301 	bic.w	r3, r3, #1
 8004926:	667b      	str	r3, [r7, #100]	; 0x64
 8004928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3314      	adds	r3, #20
 800492e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004930:	647a      	str	r2, [r7, #68]	; 0x44
 8004932:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004934:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004936:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004938:	e841 2300 	strex	r3, r2, [r1]
 800493c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800493e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1e5      	bne.n	8004910 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3314      	adds	r3, #20
 800494a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494e:	e853 3f00 	ldrex	r3, [r3]
 8004952:	623b      	str	r3, [r7, #32]
   return(result);
 8004954:	6a3b      	ldr	r3, [r7, #32]
 8004956:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800495a:	663b      	str	r3, [r7, #96]	; 0x60
 800495c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3314      	adds	r3, #20
 8004962:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004964:	633a      	str	r2, [r7, #48]	; 0x30
 8004966:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004968:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800496a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800496c:	e841 2300 	strex	r3, r2, [r1]
 8004970:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1e5      	bne.n	8004944 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800497a:	2220      	movs	r2, #32
 800497c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004984:	2b01      	cmp	r3, #1
 8004986:	d119      	bne.n	80049bc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	330c      	adds	r3, #12
 800498e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	e853 3f00 	ldrex	r3, [r3]
 8004996:	60fb      	str	r3, [r7, #12]
   return(result);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f023 0310 	bic.w	r3, r3, #16
 800499e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	330c      	adds	r3, #12
 80049a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049a8:	61fa      	str	r2, [r7, #28]
 80049aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ac:	69b9      	ldr	r1, [r7, #24]
 80049ae:	69fa      	ldr	r2, [r7, #28]
 80049b0:	e841 2300 	strex	r3, r2, [r1]
 80049b4:	617b      	str	r3, [r7, #20]
   return(result);
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1e5      	bne.n	8004988 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d106      	bne.n	80049d2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049c8:	4619      	mov	r1, r3
 80049ca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80049cc:	f7ff ff69 	bl	80048a2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80049d0:	e002      	b.n	80049d8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80049d2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80049d4:	f7ff ff47 	bl	8004866 <HAL_UART_RxCpltCallback>
}
 80049d8:	bf00      	nop
 80049da:	3770      	adds	r7, #112	; 0x70
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ec:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d108      	bne.n	8004a08 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049fa:	085b      	lsrs	r3, r3, #1
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	4619      	mov	r1, r3
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f7ff ff4e 	bl	80048a2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a06:	e002      	b.n	8004a0e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f7ff ff36 	bl	800487a <HAL_UART_RxHalfCpltCallback>
}
 8004a0e:	bf00      	nop
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b084      	sub	sp, #16
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a26:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a32:	2b80      	cmp	r3, #128	; 0x80
 8004a34:	bf0c      	ite	eq
 8004a36:	2301      	moveq	r3, #1
 8004a38:	2300      	movne	r3, #0
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b21      	cmp	r3, #33	; 0x21
 8004a48:	d108      	bne.n	8004a5c <UART_DMAError+0x46>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d005      	beq.n	8004a5c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2200      	movs	r2, #0
 8004a54:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004a56:	68b8      	ldr	r0, [r7, #8]
 8004a58:	f000 f8c6 	bl	8004be8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a66:	2b40      	cmp	r3, #64	; 0x40
 8004a68:	bf0c      	ite	eq
 8004a6a:	2301      	moveq	r3, #1
 8004a6c:	2300      	movne	r3, #0
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b22      	cmp	r3, #34	; 0x22
 8004a7c:	d108      	bne.n	8004a90 <UART_DMAError+0x7a>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d005      	beq.n	8004a90 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	2200      	movs	r2, #0
 8004a88:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004a8a:	68b8      	ldr	r0, [r7, #8]
 8004a8c:	f000 f8d4 	bl	8004c38 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a94:	f043 0210 	orr.w	r2, r3, #16
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a9c:	68b8      	ldr	r0, [r7, #8]
 8004a9e:	f7ff fef6 	bl	800488e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004aa2:	bf00      	nop
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
	...

08004aac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b098      	sub	sp, #96	; 0x60
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	88fa      	ldrh	r2, [r7, #6]
 8004ac4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2222      	movs	r2, #34	; 0x22
 8004ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad8:	4a40      	ldr	r2, [pc, #256]	; (8004bdc <UART_Start_Receive_DMA+0x130>)
 8004ada:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae0:	4a3f      	ldr	r2, [pc, #252]	; (8004be0 <UART_Start_Receive_DMA+0x134>)
 8004ae2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae8:	4a3e      	ldr	r2, [pc, #248]	; (8004be4 <UART_Start_Receive_DMA+0x138>)
 8004aea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af0:	2200      	movs	r2, #0
 8004af2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004af4:	f107 0308 	add.w	r3, r7, #8
 8004af8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	3304      	adds	r3, #4
 8004b04:	4619      	mov	r1, r3
 8004b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	88fb      	ldrh	r3, [r7, #6]
 8004b0c:	f7fc fcde 	bl	80014cc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004b10:	2300      	movs	r3, #0
 8004b12:	613b      	str	r3, [r7, #16]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	613b      	str	r3, [r7, #16]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	613b      	str	r3, [r7, #16]
 8004b24:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d019      	beq.n	8004b6a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	330c      	adds	r3, #12
 8004b3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b40:	e853 3f00 	ldrex	r3, [r3]
 8004b44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	330c      	adds	r3, #12
 8004b54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b56:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004b58:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004b5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b5e:	e841 2300 	strex	r3, r2, [r1]
 8004b62:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1e5      	bne.n	8004b36 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	3314      	adds	r3, #20
 8004b70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b74:	e853 3f00 	ldrex	r3, [r3]
 8004b78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7c:	f043 0301 	orr.w	r3, r3, #1
 8004b80:	657b      	str	r3, [r7, #84]	; 0x54
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3314      	adds	r3, #20
 8004b88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004b8a:	63ba      	str	r2, [r7, #56]	; 0x38
 8004b8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004b90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b92:	e841 2300 	strex	r3, r2, [r1]
 8004b96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1e5      	bne.n	8004b6a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	3314      	adds	r3, #20
 8004ba4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	e853 3f00 	ldrex	r3, [r3]
 8004bac:	617b      	str	r3, [r7, #20]
   return(result);
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bb4:	653b      	str	r3, [r7, #80]	; 0x50
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	3314      	adds	r3, #20
 8004bbc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004bbe:	627a      	str	r2, [r7, #36]	; 0x24
 8004bc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc2:	6a39      	ldr	r1, [r7, #32]
 8004bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc6:	e841 2300 	strex	r3, r2, [r1]
 8004bca:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1e5      	bne.n	8004b9e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3760      	adds	r7, #96	; 0x60
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	080048bb 	.word	0x080048bb
 8004be0:	080049e1 	.word	0x080049e1
 8004be4:	08004a17 	.word	0x08004a17

08004be8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b089      	sub	sp, #36	; 0x24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	330c      	adds	r3, #12
 8004bf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	e853 3f00 	ldrex	r3, [r3]
 8004bfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004c06:	61fb      	str	r3, [r7, #28]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	330c      	adds	r3, #12
 8004c0e:	69fa      	ldr	r2, [r7, #28]
 8004c10:	61ba      	str	r2, [r7, #24]
 8004c12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c14:	6979      	ldr	r1, [r7, #20]
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	e841 2300 	strex	r3, r2, [r1]
 8004c1c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e5      	bne.n	8004bf0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004c2c:	bf00      	nop
 8004c2e:	3724      	adds	r7, #36	; 0x24
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b095      	sub	sp, #84	; 0x54
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	330c      	adds	r3, #12
 8004c46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c4a:	e853 3f00 	ldrex	r3, [r3]
 8004c4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	330c      	adds	r3, #12
 8004c5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c60:	643a      	str	r2, [r7, #64]	; 0x40
 8004c62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c68:	e841 2300 	strex	r3, r2, [r1]
 8004c6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1e5      	bne.n	8004c40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3314      	adds	r3, #20
 8004c7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
 8004c7e:	e853 3f00 	ldrex	r3, [r3]
 8004c82:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	f023 0301 	bic.w	r3, r3, #1
 8004c8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3314      	adds	r3, #20
 8004c92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c9c:	e841 2300 	strex	r3, r2, [r1]
 8004ca0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1e5      	bne.n	8004c74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d119      	bne.n	8004ce4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	330c      	adds	r3, #12
 8004cb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	e853 3f00 	ldrex	r3, [r3]
 8004cbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f023 0310 	bic.w	r3, r3, #16
 8004cc6:	647b      	str	r3, [r7, #68]	; 0x44
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	330c      	adds	r3, #12
 8004cce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cd0:	61ba      	str	r2, [r7, #24]
 8004cd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd4:	6979      	ldr	r1, [r7, #20]
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	e841 2300 	strex	r3, r2, [r1]
 8004cdc:	613b      	str	r3, [r7, #16]
   return(result);
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1e5      	bne.n	8004cb0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004cf2:	bf00      	nop
 8004cf4:	3754      	adds	r7, #84	; 0x54
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
	...

08004d00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d04:	b0c0      	sub	sp, #256	; 0x100
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1c:	68d9      	ldr	r1, [r3, #12]
 8004d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	ea40 0301 	orr.w	r3, r0, r1
 8004d28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	431a      	orrs	r2, r3
 8004d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d58:	f021 010c 	bic.w	r1, r1, #12
 8004d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d66:	430b      	orrs	r3, r1
 8004d68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d7a:	6999      	ldr	r1, [r3, #24]
 8004d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	ea40 0301 	orr.w	r3, r0, r1
 8004d86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	4b8f      	ldr	r3, [pc, #572]	; (8004fcc <UART_SetConfig+0x2cc>)
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d005      	beq.n	8004da0 <UART_SetConfig+0xa0>
 8004d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	4b8d      	ldr	r3, [pc, #564]	; (8004fd0 <UART_SetConfig+0x2d0>)
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d104      	bne.n	8004daa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004da0:	f7ff fcd0 	bl	8004744 <HAL_RCC_GetPCLK2Freq>
 8004da4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004da8:	e003      	b.n	8004db2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004daa:	f7ff fcb7 	bl	800471c <HAL_RCC_GetPCLK1Freq>
 8004dae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db6:	69db      	ldr	r3, [r3, #28]
 8004db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dbc:	f040 810c 	bne.w	8004fd8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004dc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004dca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004dce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004dd2:	4622      	mov	r2, r4
 8004dd4:	462b      	mov	r3, r5
 8004dd6:	1891      	adds	r1, r2, r2
 8004dd8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004dda:	415b      	adcs	r3, r3
 8004ddc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004de2:	4621      	mov	r1, r4
 8004de4:	eb12 0801 	adds.w	r8, r2, r1
 8004de8:	4629      	mov	r1, r5
 8004dea:	eb43 0901 	adc.w	r9, r3, r1
 8004dee:	f04f 0200 	mov.w	r2, #0
 8004df2:	f04f 0300 	mov.w	r3, #0
 8004df6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e02:	4690      	mov	r8, r2
 8004e04:	4699      	mov	r9, r3
 8004e06:	4623      	mov	r3, r4
 8004e08:	eb18 0303 	adds.w	r3, r8, r3
 8004e0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e10:	462b      	mov	r3, r5
 8004e12:	eb49 0303 	adc.w	r3, r9, r3
 8004e16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e26:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004e2e:	460b      	mov	r3, r1
 8004e30:	18db      	adds	r3, r3, r3
 8004e32:	653b      	str	r3, [r7, #80]	; 0x50
 8004e34:	4613      	mov	r3, r2
 8004e36:	eb42 0303 	adc.w	r3, r2, r3
 8004e3a:	657b      	str	r3, [r7, #84]	; 0x54
 8004e3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e44:	f7fb fa24 	bl	8000290 <__aeabi_uldivmod>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4b61      	ldr	r3, [pc, #388]	; (8004fd4 <UART_SetConfig+0x2d4>)
 8004e4e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e52:	095b      	lsrs	r3, r3, #5
 8004e54:	011c      	lsls	r4, r3, #4
 8004e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e60:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e68:	4642      	mov	r2, r8
 8004e6a:	464b      	mov	r3, r9
 8004e6c:	1891      	adds	r1, r2, r2
 8004e6e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e70:	415b      	adcs	r3, r3
 8004e72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e78:	4641      	mov	r1, r8
 8004e7a:	eb12 0a01 	adds.w	sl, r2, r1
 8004e7e:	4649      	mov	r1, r9
 8004e80:	eb43 0b01 	adc.w	fp, r3, r1
 8004e84:	f04f 0200 	mov.w	r2, #0
 8004e88:	f04f 0300 	mov.w	r3, #0
 8004e8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e98:	4692      	mov	sl, r2
 8004e9a:	469b      	mov	fp, r3
 8004e9c:	4643      	mov	r3, r8
 8004e9e:	eb1a 0303 	adds.w	r3, sl, r3
 8004ea2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ea6:	464b      	mov	r3, r9
 8004ea8:	eb4b 0303 	adc.w	r3, fp, r3
 8004eac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ebc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ec0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	18db      	adds	r3, r3, r3
 8004ec8:	643b      	str	r3, [r7, #64]	; 0x40
 8004eca:	4613      	mov	r3, r2
 8004ecc:	eb42 0303 	adc.w	r3, r2, r3
 8004ed0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ed2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ed6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004eda:	f7fb f9d9 	bl	8000290 <__aeabi_uldivmod>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	4611      	mov	r1, r2
 8004ee4:	4b3b      	ldr	r3, [pc, #236]	; (8004fd4 <UART_SetConfig+0x2d4>)
 8004ee6:	fba3 2301 	umull	r2, r3, r3, r1
 8004eea:	095b      	lsrs	r3, r3, #5
 8004eec:	2264      	movs	r2, #100	; 0x64
 8004eee:	fb02 f303 	mul.w	r3, r2, r3
 8004ef2:	1acb      	subs	r3, r1, r3
 8004ef4:	00db      	lsls	r3, r3, #3
 8004ef6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004efa:	4b36      	ldr	r3, [pc, #216]	; (8004fd4 <UART_SetConfig+0x2d4>)
 8004efc:	fba3 2302 	umull	r2, r3, r3, r2
 8004f00:	095b      	lsrs	r3, r3, #5
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f08:	441c      	add	r4, r3
 8004f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f14:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004f18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004f1c:	4642      	mov	r2, r8
 8004f1e:	464b      	mov	r3, r9
 8004f20:	1891      	adds	r1, r2, r2
 8004f22:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f24:	415b      	adcs	r3, r3
 8004f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f2c:	4641      	mov	r1, r8
 8004f2e:	1851      	adds	r1, r2, r1
 8004f30:	6339      	str	r1, [r7, #48]	; 0x30
 8004f32:	4649      	mov	r1, r9
 8004f34:	414b      	adcs	r3, r1
 8004f36:	637b      	str	r3, [r7, #52]	; 0x34
 8004f38:	f04f 0200 	mov.w	r2, #0
 8004f3c:	f04f 0300 	mov.w	r3, #0
 8004f40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f44:	4659      	mov	r1, fp
 8004f46:	00cb      	lsls	r3, r1, #3
 8004f48:	4651      	mov	r1, sl
 8004f4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f4e:	4651      	mov	r1, sl
 8004f50:	00ca      	lsls	r2, r1, #3
 8004f52:	4610      	mov	r0, r2
 8004f54:	4619      	mov	r1, r3
 8004f56:	4603      	mov	r3, r0
 8004f58:	4642      	mov	r2, r8
 8004f5a:	189b      	adds	r3, r3, r2
 8004f5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f60:	464b      	mov	r3, r9
 8004f62:	460a      	mov	r2, r1
 8004f64:	eb42 0303 	adc.w	r3, r2, r3
 8004f68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f78:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f80:	460b      	mov	r3, r1
 8004f82:	18db      	adds	r3, r3, r3
 8004f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f86:	4613      	mov	r3, r2
 8004f88:	eb42 0303 	adc.w	r3, r2, r3
 8004f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f96:	f7fb f97b 	bl	8000290 <__aeabi_uldivmod>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	4b0d      	ldr	r3, [pc, #52]	; (8004fd4 <UART_SetConfig+0x2d4>)
 8004fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8004fa4:	095b      	lsrs	r3, r3, #5
 8004fa6:	2164      	movs	r1, #100	; 0x64
 8004fa8:	fb01 f303 	mul.w	r3, r1, r3
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	3332      	adds	r3, #50	; 0x32
 8004fb2:	4a08      	ldr	r2, [pc, #32]	; (8004fd4 <UART_SetConfig+0x2d4>)
 8004fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb8:	095b      	lsrs	r3, r3, #5
 8004fba:	f003 0207 	and.w	r2, r3, #7
 8004fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4422      	add	r2, r4
 8004fc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004fc8:	e106      	b.n	80051d8 <UART_SetConfig+0x4d8>
 8004fca:	bf00      	nop
 8004fcc:	40011000 	.word	0x40011000
 8004fd0:	40011400 	.word	0x40011400
 8004fd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004fe2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004fe6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004fea:	4642      	mov	r2, r8
 8004fec:	464b      	mov	r3, r9
 8004fee:	1891      	adds	r1, r2, r2
 8004ff0:	6239      	str	r1, [r7, #32]
 8004ff2:	415b      	adcs	r3, r3
 8004ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ffa:	4641      	mov	r1, r8
 8004ffc:	1854      	adds	r4, r2, r1
 8004ffe:	4649      	mov	r1, r9
 8005000:	eb43 0501 	adc.w	r5, r3, r1
 8005004:	f04f 0200 	mov.w	r2, #0
 8005008:	f04f 0300 	mov.w	r3, #0
 800500c:	00eb      	lsls	r3, r5, #3
 800500e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005012:	00e2      	lsls	r2, r4, #3
 8005014:	4614      	mov	r4, r2
 8005016:	461d      	mov	r5, r3
 8005018:	4643      	mov	r3, r8
 800501a:	18e3      	adds	r3, r4, r3
 800501c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005020:	464b      	mov	r3, r9
 8005022:	eb45 0303 	adc.w	r3, r5, r3
 8005026:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800502a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005036:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800503a:	f04f 0200 	mov.w	r2, #0
 800503e:	f04f 0300 	mov.w	r3, #0
 8005042:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005046:	4629      	mov	r1, r5
 8005048:	008b      	lsls	r3, r1, #2
 800504a:	4621      	mov	r1, r4
 800504c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005050:	4621      	mov	r1, r4
 8005052:	008a      	lsls	r2, r1, #2
 8005054:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005058:	f7fb f91a 	bl	8000290 <__aeabi_uldivmod>
 800505c:	4602      	mov	r2, r0
 800505e:	460b      	mov	r3, r1
 8005060:	4b60      	ldr	r3, [pc, #384]	; (80051e4 <UART_SetConfig+0x4e4>)
 8005062:	fba3 2302 	umull	r2, r3, r3, r2
 8005066:	095b      	lsrs	r3, r3, #5
 8005068:	011c      	lsls	r4, r3, #4
 800506a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800506e:	2200      	movs	r2, #0
 8005070:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005074:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005078:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800507c:	4642      	mov	r2, r8
 800507e:	464b      	mov	r3, r9
 8005080:	1891      	adds	r1, r2, r2
 8005082:	61b9      	str	r1, [r7, #24]
 8005084:	415b      	adcs	r3, r3
 8005086:	61fb      	str	r3, [r7, #28]
 8005088:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800508c:	4641      	mov	r1, r8
 800508e:	1851      	adds	r1, r2, r1
 8005090:	6139      	str	r1, [r7, #16]
 8005092:	4649      	mov	r1, r9
 8005094:	414b      	adcs	r3, r1
 8005096:	617b      	str	r3, [r7, #20]
 8005098:	f04f 0200 	mov.w	r2, #0
 800509c:	f04f 0300 	mov.w	r3, #0
 80050a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050a4:	4659      	mov	r1, fp
 80050a6:	00cb      	lsls	r3, r1, #3
 80050a8:	4651      	mov	r1, sl
 80050aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050ae:	4651      	mov	r1, sl
 80050b0:	00ca      	lsls	r2, r1, #3
 80050b2:	4610      	mov	r0, r2
 80050b4:	4619      	mov	r1, r3
 80050b6:	4603      	mov	r3, r0
 80050b8:	4642      	mov	r2, r8
 80050ba:	189b      	adds	r3, r3, r2
 80050bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050c0:	464b      	mov	r3, r9
 80050c2:	460a      	mov	r2, r1
 80050c4:	eb42 0303 	adc.w	r3, r2, r3
 80050c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80050d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80050d8:	f04f 0200 	mov.w	r2, #0
 80050dc:	f04f 0300 	mov.w	r3, #0
 80050e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80050e4:	4649      	mov	r1, r9
 80050e6:	008b      	lsls	r3, r1, #2
 80050e8:	4641      	mov	r1, r8
 80050ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050ee:	4641      	mov	r1, r8
 80050f0:	008a      	lsls	r2, r1, #2
 80050f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80050f6:	f7fb f8cb 	bl	8000290 <__aeabi_uldivmod>
 80050fa:	4602      	mov	r2, r0
 80050fc:	460b      	mov	r3, r1
 80050fe:	4611      	mov	r1, r2
 8005100:	4b38      	ldr	r3, [pc, #224]	; (80051e4 <UART_SetConfig+0x4e4>)
 8005102:	fba3 2301 	umull	r2, r3, r3, r1
 8005106:	095b      	lsrs	r3, r3, #5
 8005108:	2264      	movs	r2, #100	; 0x64
 800510a:	fb02 f303 	mul.w	r3, r2, r3
 800510e:	1acb      	subs	r3, r1, r3
 8005110:	011b      	lsls	r3, r3, #4
 8005112:	3332      	adds	r3, #50	; 0x32
 8005114:	4a33      	ldr	r2, [pc, #204]	; (80051e4 <UART_SetConfig+0x4e4>)
 8005116:	fba2 2303 	umull	r2, r3, r2, r3
 800511a:	095b      	lsrs	r3, r3, #5
 800511c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005120:	441c      	add	r4, r3
 8005122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005126:	2200      	movs	r2, #0
 8005128:	673b      	str	r3, [r7, #112]	; 0x70
 800512a:	677a      	str	r2, [r7, #116]	; 0x74
 800512c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005130:	4642      	mov	r2, r8
 8005132:	464b      	mov	r3, r9
 8005134:	1891      	adds	r1, r2, r2
 8005136:	60b9      	str	r1, [r7, #8]
 8005138:	415b      	adcs	r3, r3
 800513a:	60fb      	str	r3, [r7, #12]
 800513c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005140:	4641      	mov	r1, r8
 8005142:	1851      	adds	r1, r2, r1
 8005144:	6039      	str	r1, [r7, #0]
 8005146:	4649      	mov	r1, r9
 8005148:	414b      	adcs	r3, r1
 800514a:	607b      	str	r3, [r7, #4]
 800514c:	f04f 0200 	mov.w	r2, #0
 8005150:	f04f 0300 	mov.w	r3, #0
 8005154:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005158:	4659      	mov	r1, fp
 800515a:	00cb      	lsls	r3, r1, #3
 800515c:	4651      	mov	r1, sl
 800515e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005162:	4651      	mov	r1, sl
 8005164:	00ca      	lsls	r2, r1, #3
 8005166:	4610      	mov	r0, r2
 8005168:	4619      	mov	r1, r3
 800516a:	4603      	mov	r3, r0
 800516c:	4642      	mov	r2, r8
 800516e:	189b      	adds	r3, r3, r2
 8005170:	66bb      	str	r3, [r7, #104]	; 0x68
 8005172:	464b      	mov	r3, r9
 8005174:	460a      	mov	r2, r1
 8005176:	eb42 0303 	adc.w	r3, r2, r3
 800517a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800517c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	663b      	str	r3, [r7, #96]	; 0x60
 8005186:	667a      	str	r2, [r7, #100]	; 0x64
 8005188:	f04f 0200 	mov.w	r2, #0
 800518c:	f04f 0300 	mov.w	r3, #0
 8005190:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005194:	4649      	mov	r1, r9
 8005196:	008b      	lsls	r3, r1, #2
 8005198:	4641      	mov	r1, r8
 800519a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800519e:	4641      	mov	r1, r8
 80051a0:	008a      	lsls	r2, r1, #2
 80051a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80051a6:	f7fb f873 	bl	8000290 <__aeabi_uldivmod>
 80051aa:	4602      	mov	r2, r0
 80051ac:	460b      	mov	r3, r1
 80051ae:	4b0d      	ldr	r3, [pc, #52]	; (80051e4 <UART_SetConfig+0x4e4>)
 80051b0:	fba3 1302 	umull	r1, r3, r3, r2
 80051b4:	095b      	lsrs	r3, r3, #5
 80051b6:	2164      	movs	r1, #100	; 0x64
 80051b8:	fb01 f303 	mul.w	r3, r1, r3
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	011b      	lsls	r3, r3, #4
 80051c0:	3332      	adds	r3, #50	; 0x32
 80051c2:	4a08      	ldr	r2, [pc, #32]	; (80051e4 <UART_SetConfig+0x4e4>)
 80051c4:	fba2 2303 	umull	r2, r3, r2, r3
 80051c8:	095b      	lsrs	r3, r3, #5
 80051ca:	f003 020f 	and.w	r2, r3, #15
 80051ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4422      	add	r2, r4
 80051d6:	609a      	str	r2, [r3, #8]
}
 80051d8:	bf00      	nop
 80051da:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80051de:	46bd      	mov	sp, r7
 80051e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051e4:	51eb851f 	.word	0x51eb851f

080051e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051e8:	b084      	sub	sp, #16
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b084      	sub	sp, #16
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
 80051f2:	f107 001c 	add.w	r0, r7, #28
 80051f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d122      	bne.n	8005246 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005204:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800522a:	2b01      	cmp	r3, #1
 800522c:	d105      	bne.n	800523a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f001 fbee 	bl	8006a1c <USB_CoreReset>
 8005240:	4603      	mov	r3, r0
 8005242:	73fb      	strb	r3, [r7, #15]
 8005244:	e01a      	b.n	800527c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f001 fbe2 	bl	8006a1c <USB_CoreReset>
 8005258:	4603      	mov	r3, r0
 800525a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800525c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800525e:	2b00      	cmp	r3, #0
 8005260:	d106      	bne.n	8005270 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005266:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	639a      	str	r2, [r3, #56]	; 0x38
 800526e:	e005      	b.n	800527c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005274:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800527c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527e:	2b01      	cmp	r3, #1
 8005280:	d10b      	bne.n	800529a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f043 0206 	orr.w	r2, r3, #6
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f043 0220 	orr.w	r2, r3, #32
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800529a:	7bfb      	ldrb	r3, [r7, #15]
}
 800529c:	4618      	mov	r0, r3
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052a6:	b004      	add	sp, #16
 80052a8:	4770      	bx	lr
	...

080052ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	4613      	mov	r3, r2
 80052b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80052ba:	79fb      	ldrb	r3, [r7, #7]
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d165      	bne.n	800538c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	4a41      	ldr	r2, [pc, #260]	; (80053c8 <USB_SetTurnaroundTime+0x11c>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d906      	bls.n	80052d6 <USB_SetTurnaroundTime+0x2a>
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	4a40      	ldr	r2, [pc, #256]	; (80053cc <USB_SetTurnaroundTime+0x120>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d202      	bcs.n	80052d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80052d0:	230f      	movs	r3, #15
 80052d2:	617b      	str	r3, [r7, #20]
 80052d4:	e062      	b.n	800539c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	4a3c      	ldr	r2, [pc, #240]	; (80053cc <USB_SetTurnaroundTime+0x120>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d306      	bcc.n	80052ec <USB_SetTurnaroundTime+0x40>
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	4a3b      	ldr	r2, [pc, #236]	; (80053d0 <USB_SetTurnaroundTime+0x124>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d202      	bcs.n	80052ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80052e6:	230e      	movs	r3, #14
 80052e8:	617b      	str	r3, [r7, #20]
 80052ea:	e057      	b.n	800539c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	4a38      	ldr	r2, [pc, #224]	; (80053d0 <USB_SetTurnaroundTime+0x124>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d306      	bcc.n	8005302 <USB_SetTurnaroundTime+0x56>
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	4a37      	ldr	r2, [pc, #220]	; (80053d4 <USB_SetTurnaroundTime+0x128>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d202      	bcs.n	8005302 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80052fc:	230d      	movs	r3, #13
 80052fe:	617b      	str	r3, [r7, #20]
 8005300:	e04c      	b.n	800539c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	4a33      	ldr	r2, [pc, #204]	; (80053d4 <USB_SetTurnaroundTime+0x128>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d306      	bcc.n	8005318 <USB_SetTurnaroundTime+0x6c>
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	4a32      	ldr	r2, [pc, #200]	; (80053d8 <USB_SetTurnaroundTime+0x12c>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d802      	bhi.n	8005318 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005312:	230c      	movs	r3, #12
 8005314:	617b      	str	r3, [r7, #20]
 8005316:	e041      	b.n	800539c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	4a2f      	ldr	r2, [pc, #188]	; (80053d8 <USB_SetTurnaroundTime+0x12c>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d906      	bls.n	800532e <USB_SetTurnaroundTime+0x82>
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	4a2e      	ldr	r2, [pc, #184]	; (80053dc <USB_SetTurnaroundTime+0x130>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d802      	bhi.n	800532e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005328:	230b      	movs	r3, #11
 800532a:	617b      	str	r3, [r7, #20]
 800532c:	e036      	b.n	800539c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	4a2a      	ldr	r2, [pc, #168]	; (80053dc <USB_SetTurnaroundTime+0x130>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d906      	bls.n	8005344 <USB_SetTurnaroundTime+0x98>
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	4a29      	ldr	r2, [pc, #164]	; (80053e0 <USB_SetTurnaroundTime+0x134>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d802      	bhi.n	8005344 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800533e:	230a      	movs	r3, #10
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	e02b      	b.n	800539c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	4a26      	ldr	r2, [pc, #152]	; (80053e0 <USB_SetTurnaroundTime+0x134>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d906      	bls.n	800535a <USB_SetTurnaroundTime+0xae>
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	4a25      	ldr	r2, [pc, #148]	; (80053e4 <USB_SetTurnaroundTime+0x138>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d202      	bcs.n	800535a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005354:	2309      	movs	r3, #9
 8005356:	617b      	str	r3, [r7, #20]
 8005358:	e020      	b.n	800539c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	4a21      	ldr	r2, [pc, #132]	; (80053e4 <USB_SetTurnaroundTime+0x138>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d306      	bcc.n	8005370 <USB_SetTurnaroundTime+0xc4>
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	4a20      	ldr	r2, [pc, #128]	; (80053e8 <USB_SetTurnaroundTime+0x13c>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d802      	bhi.n	8005370 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800536a:	2308      	movs	r3, #8
 800536c:	617b      	str	r3, [r7, #20]
 800536e:	e015      	b.n	800539c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	4a1d      	ldr	r2, [pc, #116]	; (80053e8 <USB_SetTurnaroundTime+0x13c>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d906      	bls.n	8005386 <USB_SetTurnaroundTime+0xda>
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	4a1c      	ldr	r2, [pc, #112]	; (80053ec <USB_SetTurnaroundTime+0x140>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d202      	bcs.n	8005386 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005380:	2307      	movs	r3, #7
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	e00a      	b.n	800539c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005386:	2306      	movs	r3, #6
 8005388:	617b      	str	r3, [r7, #20]
 800538a:	e007      	b.n	800539c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800538c:	79fb      	ldrb	r3, [r7, #7]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d102      	bne.n	8005398 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005392:	2309      	movs	r3, #9
 8005394:	617b      	str	r3, [r7, #20]
 8005396:	e001      	b.n	800539c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005398:	2309      	movs	r3, #9
 800539a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	68da      	ldr	r2, [r3, #12]
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	029b      	lsls	r3, r3, #10
 80053b0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80053b4:	431a      	orrs	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	371c      	adds	r7, #28
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	00d8acbf 	.word	0x00d8acbf
 80053cc:	00e4e1c0 	.word	0x00e4e1c0
 80053d0:	00f42400 	.word	0x00f42400
 80053d4:	01067380 	.word	0x01067380
 80053d8:	011a499f 	.word	0x011a499f
 80053dc:	01312cff 	.word	0x01312cff
 80053e0:	014ca43f 	.word	0x014ca43f
 80053e4:	016e3600 	.word	0x016e3600
 80053e8:	01a6ab1f 	.word	0x01a6ab1f
 80053ec:	01e84800 	.word	0x01e84800

080053f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f043 0201 	orr.w	r2, r3, #1
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005412:	b480      	push	{r7}
 8005414:	b083      	sub	sp, #12
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f023 0201 	bic.w	r2, r3, #1
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	460b      	mov	r3, r1
 800543e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005450:	78fb      	ldrb	r3, [r7, #3]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d115      	bne.n	8005482 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005462:	2001      	movs	r0, #1
 8005464:	f7fb fe4e 	bl	8001104 <HAL_Delay>
      ms++;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	3301      	adds	r3, #1
 800546c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f001 fa45 	bl	80068fe <USB_GetMode>
 8005474:	4603      	mov	r3, r0
 8005476:	2b01      	cmp	r3, #1
 8005478:	d01e      	beq.n	80054b8 <USB_SetCurrentMode+0x84>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2b31      	cmp	r3, #49	; 0x31
 800547e:	d9f0      	bls.n	8005462 <USB_SetCurrentMode+0x2e>
 8005480:	e01a      	b.n	80054b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005482:	78fb      	ldrb	r3, [r7, #3]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d115      	bne.n	80054b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005494:	2001      	movs	r0, #1
 8005496:	f7fb fe35 	bl	8001104 <HAL_Delay>
      ms++;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	3301      	adds	r3, #1
 800549e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f001 fa2c 	bl	80068fe <USB_GetMode>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d005      	beq.n	80054b8 <USB_SetCurrentMode+0x84>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2b31      	cmp	r3, #49	; 0x31
 80054b0:	d9f0      	bls.n	8005494 <USB_SetCurrentMode+0x60>
 80054b2:	e001      	b.n	80054b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e005      	b.n	80054c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2b32      	cmp	r3, #50	; 0x32
 80054bc:	d101      	bne.n	80054c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e000      	b.n	80054c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054cc:	b084      	sub	sp, #16
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b086      	sub	sp, #24
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
 80054d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80054da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80054de:	2300      	movs	r3, #0
 80054e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80054e6:	2300      	movs	r3, #0
 80054e8:	613b      	str	r3, [r7, #16]
 80054ea:	e009      	b.n	8005500 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	3340      	adds	r3, #64	; 0x40
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	2200      	movs	r2, #0
 80054f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	3301      	adds	r3, #1
 80054fe:	613b      	str	r3, [r7, #16]
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	2b0e      	cmp	r3, #14
 8005504:	d9f2      	bls.n	80054ec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005508:	2b00      	cmp	r3, #0
 800550a:	d11c      	bne.n	8005546 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800551a:	f043 0302 	orr.w	r3, r3, #2
 800551e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005524:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005530:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	639a      	str	r2, [r3, #56]	; 0x38
 8005544:	e00b      	b.n	800555e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005556:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005564:	461a      	mov	r2, r3
 8005566:	2300      	movs	r3, #0
 8005568:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005570:	4619      	mov	r1, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005578:	461a      	mov	r2, r3
 800557a:	680b      	ldr	r3, [r1, #0]
 800557c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800557e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005580:	2b01      	cmp	r3, #1
 8005582:	d10c      	bne.n	800559e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005586:	2b00      	cmp	r3, #0
 8005588:	d104      	bne.n	8005594 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800558a:	2100      	movs	r1, #0
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 f965 	bl	800585c <USB_SetDevSpeed>
 8005592:	e008      	b.n	80055a6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005594:	2101      	movs	r1, #1
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f960 	bl	800585c <USB_SetDevSpeed>
 800559c:	e003      	b.n	80055a6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800559e:	2103      	movs	r1, #3
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f95b 	bl	800585c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80055a6:	2110      	movs	r1, #16
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 f8f3 	bl	8005794 <USB_FlushTxFifo>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d001      	beq.n	80055b8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f91f 	bl	80057fc <USB_FlushRxFifo>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ce:	461a      	mov	r2, r3
 80055d0:	2300      	movs	r3, #0
 80055d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055da:	461a      	mov	r2, r3
 80055dc:	2300      	movs	r3, #0
 80055de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e6:	461a      	mov	r2, r3
 80055e8:	2300      	movs	r3, #0
 80055ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055ec:	2300      	movs	r3, #0
 80055ee:	613b      	str	r3, [r7, #16]
 80055f0:	e043      	b.n	800567a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	015a      	lsls	r2, r3, #5
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	4413      	add	r3, r2
 80055fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005604:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005608:	d118      	bne.n	800563c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10a      	bne.n	8005626 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	015a      	lsls	r2, r3, #5
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	4413      	add	r3, r2
 8005618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800561c:	461a      	mov	r2, r3
 800561e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005622:	6013      	str	r3, [r2, #0]
 8005624:	e013      	b.n	800564e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	4413      	add	r3, r2
 800562e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005632:	461a      	mov	r2, r3
 8005634:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005638:	6013      	str	r3, [r2, #0]
 800563a:	e008      	b.n	800564e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005648:	461a      	mov	r2, r3
 800564a:	2300      	movs	r3, #0
 800564c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	4413      	add	r3, r2
 8005656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565a:	461a      	mov	r2, r3
 800565c:	2300      	movs	r3, #0
 800565e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	4413      	add	r3, r2
 8005668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566c:	461a      	mov	r2, r3
 800566e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005672:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	3301      	adds	r3, #1
 8005678:	613b      	str	r3, [r7, #16]
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	429a      	cmp	r2, r3
 8005680:	d3b7      	bcc.n	80055f2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005682:	2300      	movs	r3, #0
 8005684:	613b      	str	r3, [r7, #16]
 8005686:	e043      	b.n	8005710 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800569a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800569e:	d118      	bne.n	80056d2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10a      	bne.n	80056bc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b2:	461a      	mov	r2, r3
 80056b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056b8:	6013      	str	r3, [r2, #0]
 80056ba:	e013      	b.n	80056e4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	015a      	lsls	r2, r3, #5
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	4413      	add	r3, r2
 80056c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c8:	461a      	mov	r2, r3
 80056ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056ce:	6013      	str	r3, [r2, #0]
 80056d0:	e008      	b.n	80056e4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056de:	461a      	mov	r2, r3
 80056e0:	2300      	movs	r3, #0
 80056e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f0:	461a      	mov	r2, r3
 80056f2:	2300      	movs	r3, #0
 80056f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005702:	461a      	mov	r2, r3
 8005704:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005708:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	3301      	adds	r3, #1
 800570e:	613b      	str	r3, [r7, #16]
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	429a      	cmp	r2, r3
 8005716:	d3b7      	bcc.n	8005688 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005726:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800572a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005738:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800573a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573c:	2b00      	cmp	r3, #0
 800573e:	d105      	bne.n	800574c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	f043 0210 	orr.w	r2, r3, #16
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	699a      	ldr	r2, [r3, #24]
 8005750:	4b0f      	ldr	r3, [pc, #60]	; (8005790 <USB_DevInit+0x2c4>)
 8005752:	4313      	orrs	r3, r2
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800575a:	2b00      	cmp	r3, #0
 800575c:	d005      	beq.n	800576a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	f043 0208 	orr.w	r2, r3, #8
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800576a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800576c:	2b01      	cmp	r3, #1
 800576e:	d107      	bne.n	8005780 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005778:	f043 0304 	orr.w	r3, r3, #4
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005780:	7dfb      	ldrb	r3, [r7, #23]
}
 8005782:	4618      	mov	r0, r3
 8005784:	3718      	adds	r7, #24
 8005786:	46bd      	mov	sp, r7
 8005788:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800578c:	b004      	add	sp, #16
 800578e:	4770      	bx	lr
 8005790:	803c3800 	.word	0x803c3800

08005794 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800579e:	2300      	movs	r3, #0
 80057a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	3301      	adds	r3, #1
 80057a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4a13      	ldr	r2, [pc, #76]	; (80057f8 <USB_FlushTxFifo+0x64>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d901      	bls.n	80057b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e01b      	b.n	80057ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	daf2      	bge.n	80057a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80057bc:	2300      	movs	r3, #0
 80057be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	019b      	lsls	r3, r3, #6
 80057c4:	f043 0220 	orr.w	r2, r3, #32
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	3301      	adds	r3, #1
 80057d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	4a08      	ldr	r2, [pc, #32]	; (80057f8 <USB_FlushTxFifo+0x64>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d901      	bls.n	80057de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e006      	b.n	80057ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	f003 0320 	and.w	r3, r3, #32
 80057e6:	2b20      	cmp	r3, #32
 80057e8:	d0f0      	beq.n	80057cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	00030d40 	.word	0x00030d40

080057fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005804:	2300      	movs	r3, #0
 8005806:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	3301      	adds	r3, #1
 800580c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	4a11      	ldr	r2, [pc, #68]	; (8005858 <USB_FlushRxFifo+0x5c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d901      	bls.n	800581a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e018      	b.n	800584c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	2b00      	cmp	r3, #0
 8005820:	daf2      	bge.n	8005808 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005822:	2300      	movs	r3, #0
 8005824:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2210      	movs	r2, #16
 800582a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	3301      	adds	r3, #1
 8005830:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4a08      	ldr	r2, [pc, #32]	; (8005858 <USB_FlushRxFifo+0x5c>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d901      	bls.n	800583e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e006      	b.n	800584c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	f003 0310 	and.w	r3, r3, #16
 8005846:	2b10      	cmp	r3, #16
 8005848:	d0f0      	beq.n	800582c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	00030d40 	.word	0x00030d40

0800585c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	460b      	mov	r3, r1
 8005866:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	78fb      	ldrb	r3, [r7, #3]
 8005876:	68f9      	ldr	r1, [r7, #12]
 8005878:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800587c:	4313      	orrs	r3, r2
 800587e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800588e:	b480      	push	{r7}
 8005890:	b087      	sub	sp, #28
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f003 0306 	and.w	r3, r3, #6
 80058a6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d102      	bne.n	80058b4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80058ae:	2300      	movs	r3, #0
 80058b0:	75fb      	strb	r3, [r7, #23]
 80058b2:	e00a      	b.n	80058ca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d002      	beq.n	80058c0 <USB_GetDevSpeed+0x32>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2b06      	cmp	r3, #6
 80058be:	d102      	bne.n	80058c6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80058c0:	2302      	movs	r3, #2
 80058c2:	75fb      	strb	r3, [r7, #23]
 80058c4:	e001      	b.n	80058ca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80058c6:	230f      	movs	r3, #15
 80058c8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80058ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	371c      	adds	r7, #28
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	785b      	ldrb	r3, [r3, #1]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d13a      	bne.n	800596a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058fa:	69da      	ldr	r2, [r3, #28]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	f003 030f 	and.w	r3, r3, #15
 8005904:	2101      	movs	r1, #1
 8005906:	fa01 f303 	lsl.w	r3, r1, r3
 800590a:	b29b      	uxth	r3, r3
 800590c:	68f9      	ldr	r1, [r7, #12]
 800590e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005912:	4313      	orrs	r3, r2
 8005914:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	4413      	add	r3, r2
 800591e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d155      	bne.n	80059d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	015a      	lsls	r2, r3, #5
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4413      	add	r3, r2
 8005934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	791b      	ldrb	r3, [r3, #4]
 8005946:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005948:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	059b      	lsls	r3, r3, #22
 800594e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005950:	4313      	orrs	r3, r2
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	0151      	lsls	r1, r2, #5
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	440a      	add	r2, r1
 800595a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800595e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005966:	6013      	str	r3, [r2, #0]
 8005968:	e036      	b.n	80059d8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005970:	69da      	ldr	r2, [r3, #28]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	f003 030f 	and.w	r3, r3, #15
 800597a:	2101      	movs	r1, #1
 800597c:	fa01 f303 	lsl.w	r3, r1, r3
 8005980:	041b      	lsls	r3, r3, #16
 8005982:	68f9      	ldr	r1, [r7, #12]
 8005984:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005988:	4313      	orrs	r3, r2
 800598a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d11a      	bne.n	80059d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	015a      	lsls	r2, r3, #5
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	4413      	add	r3, r2
 80059aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	791b      	ldrb	r3, [r3, #4]
 80059bc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80059be:	430b      	orrs	r3, r1
 80059c0:	4313      	orrs	r3, r2
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	0151      	lsls	r1, r2, #5
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	440a      	add	r2, r1
 80059ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059d6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
	...

080059e8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	785b      	ldrb	r3, [r3, #1]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d161      	bne.n	8005ac8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	015a      	lsls	r2, r3, #5
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a1a:	d11f      	bne.n	8005a5c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	0151      	lsls	r1, r2, #5
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	440a      	add	r2, r1
 8005a32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a3a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	0151      	lsls	r1, r2, #5
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	440a      	add	r2, r1
 8005a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	f003 030f 	and.w	r3, r3, #15
 8005a6c:	2101      	movs	r1, #1
 8005a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	43db      	mvns	r3, r3
 8005a76:	68f9      	ldr	r1, [r7, #12]
 8005a78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a86:	69da      	ldr	r2, [r3, #28]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	f003 030f 	and.w	r3, r3, #15
 8005a90:	2101      	movs	r1, #1
 8005a92:	fa01 f303 	lsl.w	r3, r1, r3
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	43db      	mvns	r3, r3
 8005a9a:	68f9      	ldr	r1, [r7, #12]
 8005a9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	0159      	lsls	r1, r3, #5
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	440b      	add	r3, r1
 8005aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005abe:	4619      	mov	r1, r3
 8005ac0:	4b35      	ldr	r3, [pc, #212]	; (8005b98 <USB_DeactivateEndpoint+0x1b0>)
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	600b      	str	r3, [r1, #0]
 8005ac6:	e060      	b.n	8005b8a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	015a      	lsls	r2, r3, #5
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ada:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ade:	d11f      	bne.n	8005b20 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	0151      	lsls	r1, r2, #5
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	440a      	add	r2, r1
 8005af6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005afa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005afe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	0151      	lsls	r1, r2, #5
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	440a      	add	r2, r1
 8005b16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b1e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	f003 030f 	and.w	r3, r3, #15
 8005b30:	2101      	movs	r1, #1
 8005b32:	fa01 f303 	lsl.w	r3, r1, r3
 8005b36:	041b      	lsls	r3, r3, #16
 8005b38:	43db      	mvns	r3, r3
 8005b3a:	68f9      	ldr	r1, [r7, #12]
 8005b3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b40:	4013      	ands	r3, r2
 8005b42:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4a:	69da      	ldr	r2, [r3, #28]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	f003 030f 	and.w	r3, r3, #15
 8005b54:	2101      	movs	r1, #1
 8005b56:	fa01 f303 	lsl.w	r3, r1, r3
 8005b5a:	041b      	lsls	r3, r3, #16
 8005b5c:	43db      	mvns	r3, r3
 8005b5e:	68f9      	ldr	r1, [r7, #12]
 8005b60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b64:	4013      	ands	r3, r2
 8005b66:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	0159      	lsls	r1, r3, #5
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	440b      	add	r3, r1
 8005b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b82:	4619      	mov	r1, r3
 8005b84:	4b05      	ldr	r3, [pc, #20]	; (8005b9c <USB_DeactivateEndpoint+0x1b4>)
 8005b86:	4013      	ands	r3, r2
 8005b88:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr
 8005b98:	ec337800 	.word	0xec337800
 8005b9c:	eff37800 	.word	0xeff37800

08005ba0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b08a      	sub	sp, #40	; 0x28
 8005ba4:	af02      	add	r7, sp, #8
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	4613      	mov	r3, r2
 8005bac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	785b      	ldrb	r3, [r3, #1]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	f040 815c 	bne.w	8005e7a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d132      	bne.n	8005c30 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	015a      	lsls	r2, r3, #5
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	0151      	lsls	r1, r2, #5
 8005bdc:	69fa      	ldr	r2, [r7, #28]
 8005bde:	440a      	add	r2, r1
 8005be0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005be8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	015a      	lsls	r2, r3, #5
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	0151      	lsls	r1, r2, #5
 8005c00:	69fa      	ldr	r2, [r7, #28]
 8005c02:	440a      	add	r2, r1
 8005c04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	69ba      	ldr	r2, [r7, #24]
 8005c1e:	0151      	lsls	r1, r2, #5
 8005c20:	69fa      	ldr	r2, [r7, #28]
 8005c22:	440a      	add	r2, r1
 8005c24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c28:	0cdb      	lsrs	r3, r3, #19
 8005c2a:	04db      	lsls	r3, r3, #19
 8005c2c:	6113      	str	r3, [r2, #16]
 8005c2e:	e074      	b.n	8005d1a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	0151      	lsls	r1, r2, #5
 8005c42:	69fa      	ldr	r2, [r7, #28]
 8005c44:	440a      	add	r2, r1
 8005c46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c4a:	0cdb      	lsrs	r3, r3, #19
 8005c4c:	04db      	lsls	r3, r3, #19
 8005c4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	015a      	lsls	r2, r3, #5
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	69ba      	ldr	r2, [r7, #24]
 8005c60:	0151      	lsls	r1, r2, #5
 8005c62:	69fa      	ldr	r2, [r7, #28]
 8005c64:	440a      	add	r2, r1
 8005c66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c6a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c6e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c80:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	6999      	ldr	r1, [r3, #24]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	440b      	add	r3, r1
 8005c8c:	1e59      	subs	r1, r3, #1
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c96:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005c98:	4b9d      	ldr	r3, [pc, #628]	; (8005f10 <USB_EPStartXfer+0x370>)
 8005c9a:	400b      	ands	r3, r1
 8005c9c:	69b9      	ldr	r1, [r7, #24]
 8005c9e:	0148      	lsls	r0, r1, #5
 8005ca0:	69f9      	ldr	r1, [r7, #28]
 8005ca2:	4401      	add	r1, r0
 8005ca4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb8:	691a      	ldr	r2, [r3, #16]
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cc2:	69b9      	ldr	r1, [r7, #24]
 8005cc4:	0148      	lsls	r0, r1, #5
 8005cc6:	69f9      	ldr	r1, [r7, #28]
 8005cc8:	4401      	add	r1, r0
 8005cca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	791b      	ldrb	r3, [r3, #4]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d11f      	bne.n	8005d1a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	69ba      	ldr	r2, [r7, #24]
 8005cea:	0151      	lsls	r1, r2, #5
 8005cec:	69fa      	ldr	r2, [r7, #28]
 8005cee:	440a      	add	r2, r1
 8005cf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cf4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005cf8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	015a      	lsls	r2, r3, #5
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	4413      	add	r3, r2
 8005d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	0151      	lsls	r1, r2, #5
 8005d0c:	69fa      	ldr	r2, [r7, #28]
 8005d0e:	440a      	add	r2, r1
 8005d10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d18:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005d1a:	79fb      	ldrb	r3, [r7, #7]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d14b      	bne.n	8005db8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d009      	beq.n	8005d3c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	015a      	lsls	r2, r3, #5
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	4413      	add	r3, r2
 8005d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d34:	461a      	mov	r2, r3
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	791b      	ldrb	r3, [r3, #4]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d128      	bne.n	8005d96 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d110      	bne.n	8005d76 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	0151      	lsls	r1, r2, #5
 8005d66:	69fa      	ldr	r2, [r7, #28]
 8005d68:	440a      	add	r2, r1
 8005d6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d72:	6013      	str	r3, [r2, #0]
 8005d74:	e00f      	b.n	8005d96 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	0151      	lsls	r1, r2, #5
 8005d88:	69fa      	ldr	r2, [r7, #28]
 8005d8a:	440a      	add	r2, r1
 8005d8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d94:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	69ba      	ldr	r2, [r7, #24]
 8005da6:	0151      	lsls	r1, r2, #5
 8005da8:	69fa      	ldr	r2, [r7, #28]
 8005daa:	440a      	add	r2, r1
 8005dac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005db0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005db4:	6013      	str	r3, [r2, #0]
 8005db6:	e133      	b.n	8006020 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	0151      	lsls	r1, r2, #5
 8005dca:	69fa      	ldr	r2, [r7, #28]
 8005dcc:	440a      	add	r2, r1
 8005dce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005dd6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	791b      	ldrb	r3, [r3, #4]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d015      	beq.n	8005e0c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f000 811b 	beq.w	8006020 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	f003 030f 	and.w	r3, r3, #15
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8005e00:	69f9      	ldr	r1, [r7, #28]
 8005e02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e06:	4313      	orrs	r3, r2
 8005e08:	634b      	str	r3, [r1, #52]	; 0x34
 8005e0a:	e109      	b.n	8006020 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d110      	bne.n	8005e3e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	0151      	lsls	r1, r2, #5
 8005e2e:	69fa      	ldr	r2, [r7, #28]
 8005e30:	440a      	add	r2, r1
 8005e32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	e00f      	b.n	8005e5e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	015a      	lsls	r2, r3, #5
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	4413      	add	r3, r2
 8005e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	0151      	lsls	r1, r2, #5
 8005e50:	69fa      	ldr	r2, [r7, #28]
 8005e52:	440a      	add	r2, r1
 8005e54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e5c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	6919      	ldr	r1, [r3, #16]
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	781a      	ldrb	r2, [r3, #0]
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	b298      	uxth	r0, r3
 8005e6c:	79fb      	ldrb	r3, [r7, #7]
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	4603      	mov	r3, r0
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f000 fade 	bl	8006434 <USB_WritePacket>
 8005e78:	e0d2      	b.n	8006020 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	0151      	lsls	r1, r2, #5
 8005e8c:	69fa      	ldr	r2, [r7, #28]
 8005e8e:	440a      	add	r2, r1
 8005e90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e94:	0cdb      	lsrs	r3, r3, #19
 8005e96:	04db      	lsls	r3, r3, #19
 8005e98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	015a      	lsls	r2, r3, #5
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	0151      	lsls	r1, r2, #5
 8005eac:	69fa      	ldr	r2, [r7, #28]
 8005eae:	440a      	add	r2, r1
 8005eb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eb4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005eb8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ebc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d126      	bne.n	8005f14 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed2:	691a      	ldr	r2, [r3, #16]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005edc:	69b9      	ldr	r1, [r7, #24]
 8005ede:	0148      	lsls	r0, r1, #5
 8005ee0:	69f9      	ldr	r1, [r7, #28]
 8005ee2:	4401      	add	r1, r0
 8005ee4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	69ba      	ldr	r2, [r7, #24]
 8005efc:	0151      	lsls	r1, r2, #5
 8005efe:	69fa      	ldr	r2, [r7, #28]
 8005f00:	440a      	add	r2, r1
 8005f02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f0a:	6113      	str	r3, [r2, #16]
 8005f0c:	e03a      	b.n	8005f84 <USB_EPStartXfer+0x3e4>
 8005f0e:	bf00      	nop
 8005f10:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	699a      	ldr	r2, [r3, #24]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	1e5a      	subs	r2, r3, #1
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f28:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	8afa      	ldrh	r2, [r7, #22]
 8005f30:	fb03 f202 	mul.w	r2, r3, r2
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f44:	691a      	ldr	r2, [r3, #16]
 8005f46:	8afb      	ldrh	r3, [r7, #22]
 8005f48:	04d9      	lsls	r1, r3, #19
 8005f4a:	4b38      	ldr	r3, [pc, #224]	; (800602c <USB_EPStartXfer+0x48c>)
 8005f4c:	400b      	ands	r3, r1
 8005f4e:	69b9      	ldr	r1, [r7, #24]
 8005f50:	0148      	lsls	r0, r1, #5
 8005f52:	69f9      	ldr	r1, [r7, #28]
 8005f54:	4401      	add	r1, r0
 8005f56:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6a:	691a      	ldr	r2, [r3, #16]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f74:	69b9      	ldr	r1, [r7, #24]
 8005f76:	0148      	lsls	r0, r1, #5
 8005f78:	69f9      	ldr	r1, [r7, #28]
 8005f7a:	4401      	add	r1, r0
 8005f7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f80:	4313      	orrs	r3, r2
 8005f82:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f84:	79fb      	ldrb	r3, [r7, #7]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d10d      	bne.n	8005fa6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d009      	beq.n	8005fa6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	6919      	ldr	r1, [r3, #16]
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa2:	460a      	mov	r2, r1
 8005fa4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	791b      	ldrb	r3, [r3, #4]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d128      	bne.n	8006000 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d110      	bne.n	8005fe0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	0151      	lsls	r1, r2, #5
 8005fd0:	69fa      	ldr	r2, [r7, #28]
 8005fd2:	440a      	add	r2, r1
 8005fd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fd8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fdc:	6013      	str	r3, [r2, #0]
 8005fde:	e00f      	b.n	8006000 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	69ba      	ldr	r2, [r7, #24]
 8005ff0:	0151      	lsls	r1, r2, #5
 8005ff2:	69fa      	ldr	r2, [r7, #28]
 8005ff4:	440a      	add	r2, r1
 8005ff6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ffe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	4413      	add	r3, r2
 8006008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	0151      	lsls	r1, r2, #5
 8006012:	69fa      	ldr	r2, [r7, #28]
 8006014:	440a      	add	r2, r1
 8006016:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800601a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800601e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3720      	adds	r7, #32
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	1ff80000 	.word	0x1ff80000

08006030 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006030:	b480      	push	{r7}
 8006032:	b087      	sub	sp, #28
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	4613      	mov	r3, r2
 800603c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	785b      	ldrb	r3, [r3, #1]
 800604c:	2b01      	cmp	r3, #1
 800604e:	f040 80ce 	bne.w	80061ee <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d132      	bne.n	80060c0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	4413      	add	r3, r2
 8006062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	0151      	lsls	r1, r2, #5
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	440a      	add	r2, r1
 8006070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006074:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006078:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800607c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	015a      	lsls	r2, r3, #5
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	4413      	add	r3, r2
 8006086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	0151      	lsls	r1, r2, #5
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	440a      	add	r2, r1
 8006094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006098:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800609c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	015a      	lsls	r2, r3, #5
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	4413      	add	r3, r2
 80060a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	0151      	lsls	r1, r2, #5
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	440a      	add	r2, r1
 80060b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b8:	0cdb      	lsrs	r3, r3, #19
 80060ba:	04db      	lsls	r3, r3, #19
 80060bc:	6113      	str	r3, [r2, #16]
 80060be:	e04e      	b.n	800615e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	015a      	lsls	r2, r3, #5
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	0151      	lsls	r1, r2, #5
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	440a      	add	r2, r1
 80060d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060da:	0cdb      	lsrs	r3, r3, #19
 80060dc:	04db      	lsls	r3, r3, #19
 80060de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	015a      	lsls	r2, r3, #5
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	0151      	lsls	r1, r2, #5
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	440a      	add	r2, r1
 80060f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006102:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	699a      	ldr	r2, [r3, #24]
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	429a      	cmp	r2, r3
 800610e:	d903      	bls.n	8006118 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	4413      	add	r3, r2
 8006120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	0151      	lsls	r1, r2, #5
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	440a      	add	r2, r1
 800612e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006132:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006136:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	4413      	add	r3, r2
 8006140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006144:	691a      	ldr	r2, [r3, #16]
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800614e:	6939      	ldr	r1, [r7, #16]
 8006150:	0148      	lsls	r0, r1, #5
 8006152:	6979      	ldr	r1, [r7, #20]
 8006154:	4401      	add	r1, r0
 8006156:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800615a:	4313      	orrs	r3, r2
 800615c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800615e:	79fb      	ldrb	r3, [r7, #7]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d11e      	bne.n	80061a2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d009      	beq.n	8006180 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	4413      	add	r3, r2
 8006174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006178:	461a      	mov	r2, r3
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	4413      	add	r3, r2
 8006188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	0151      	lsls	r1, r2, #5
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	440a      	add	r2, r1
 8006196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800619a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800619e:	6013      	str	r3, [r2, #0]
 80061a0:	e097      	b.n	80062d2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	0151      	lsls	r1, r2, #5
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	440a      	add	r2, r1
 80061b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061c0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f000 8083 	beq.w	80062d2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	f003 030f 	and.w	r3, r3, #15
 80061dc:	2101      	movs	r1, #1
 80061de:	fa01 f303 	lsl.w	r3, r1, r3
 80061e2:	6979      	ldr	r1, [r7, #20]
 80061e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061e8:	4313      	orrs	r3, r2
 80061ea:	634b      	str	r3, [r1, #52]	; 0x34
 80061ec:	e071      	b.n	80062d2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	015a      	lsls	r2, r3, #5
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	0151      	lsls	r1, r2, #5
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	440a      	add	r2, r1
 8006204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006208:	0cdb      	lsrs	r3, r3, #19
 800620a:	04db      	lsls	r3, r3, #19
 800620c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	4413      	add	r3, r2
 8006216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	0151      	lsls	r1, r2, #5
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	440a      	add	r2, r1
 8006224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006228:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800622c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006230:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d003      	beq.n	8006242 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	68da      	ldr	r2, [r3, #12]
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	68da      	ldr	r2, [r3, #12]
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	015a      	lsls	r2, r3, #5
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	4413      	add	r3, r2
 8006252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	0151      	lsls	r1, r2, #5
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	440a      	add	r2, r1
 8006260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006264:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006268:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	4413      	add	r3, r2
 8006272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006276:	691a      	ldr	r2, [r3, #16]
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	69db      	ldr	r3, [r3, #28]
 800627c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006280:	6939      	ldr	r1, [r7, #16]
 8006282:	0148      	lsls	r0, r1, #5
 8006284:	6979      	ldr	r1, [r7, #20]
 8006286:	4401      	add	r1, r0
 8006288:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800628c:	4313      	orrs	r3, r2
 800628e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006290:	79fb      	ldrb	r3, [r7, #7]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d10d      	bne.n	80062b2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d009      	beq.n	80062b2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	6919      	ldr	r1, [r3, #16]
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	015a      	lsls	r2, r3, #5
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	4413      	add	r3, r2
 80062aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ae:	460a      	mov	r2, r1
 80062b0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	0151      	lsls	r1, r2, #5
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	440a      	add	r2, r1
 80062c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	371c      	adds	r7, #28
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80062ea:	2300      	movs	r3, #0
 80062ec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80062ee:	2300      	movs	r3, #0
 80062f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	785b      	ldrb	r3, [r3, #1]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d14a      	bne.n	8006394 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	4413      	add	r3, r2
 8006308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006312:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006316:	f040 8086 	bne.w	8006426 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	4413      	add	r3, r2
 8006324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	7812      	ldrb	r2, [r2, #0]
 800632e:	0151      	lsls	r1, r2, #5
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	440a      	add	r2, r1
 8006334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006338:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800633c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	4413      	add	r3, r2
 8006348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	7812      	ldrb	r2, [r2, #0]
 8006352:	0151      	lsls	r1, r2, #5
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	440a      	add	r2, r1
 8006358:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800635c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006360:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	3301      	adds	r3, #1
 8006366:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f242 7210 	movw	r2, #10000	; 0x2710
 800636e:	4293      	cmp	r3, r2
 8006370:	d902      	bls.n	8006378 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	75fb      	strb	r3, [r7, #23]
          break;
 8006376:	e056      	b.n	8006426 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	4413      	add	r3, r2
 8006382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800638c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006390:	d0e7      	beq.n	8006362 <USB_EPStopXfer+0x82>
 8006392:	e048      	b.n	8006426 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	015a      	lsls	r2, r3, #5
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	4413      	add	r3, r2
 800639e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063ac:	d13b      	bne.n	8006426 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	015a      	lsls	r2, r3, #5
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	4413      	add	r3, r2
 80063b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	7812      	ldrb	r2, [r2, #0]
 80063c2:	0151      	lsls	r1, r2, #5
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	440a      	add	r2, r1
 80063c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80063d0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	683a      	ldr	r2, [r7, #0]
 80063e4:	7812      	ldrb	r2, [r2, #0]
 80063e6:	0151      	lsls	r1, r2, #5
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	440a      	add	r2, r1
 80063ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	3301      	adds	r3, #1
 80063fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8006402:	4293      	cmp	r3, r2
 8006404:	d902      	bls.n	800640c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	75fb      	strb	r3, [r7, #23]
          break;
 800640a:	e00c      	b.n	8006426 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	4413      	add	r3, r2
 8006416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006420:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006424:	d0e7      	beq.n	80063f6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006426:	7dfb      	ldrb	r3, [r7, #23]
}
 8006428:	4618      	mov	r0, r3
 800642a:	371c      	adds	r7, #28
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006434:	b480      	push	{r7}
 8006436:	b089      	sub	sp, #36	; 0x24
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	4611      	mov	r1, r2
 8006440:	461a      	mov	r2, r3
 8006442:	460b      	mov	r3, r1
 8006444:	71fb      	strb	r3, [r7, #7]
 8006446:	4613      	mov	r3, r2
 8006448:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006452:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006456:	2b00      	cmp	r3, #0
 8006458:	d123      	bne.n	80064a2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800645a:	88bb      	ldrh	r3, [r7, #4]
 800645c:	3303      	adds	r3, #3
 800645e:	089b      	lsrs	r3, r3, #2
 8006460:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006462:	2300      	movs	r3, #0
 8006464:	61bb      	str	r3, [r7, #24]
 8006466:	e018      	b.n	800649a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006468:	79fb      	ldrb	r3, [r7, #7]
 800646a:	031a      	lsls	r2, r3, #12
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	4413      	add	r3, r2
 8006470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006474:	461a      	mov	r2, r3
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	3301      	adds	r3, #1
 8006480:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	3301      	adds	r3, #1
 8006486:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	3301      	adds	r3, #1
 800648c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	3301      	adds	r3, #1
 8006492:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	3301      	adds	r3, #1
 8006498:	61bb      	str	r3, [r7, #24]
 800649a:	69ba      	ldr	r2, [r7, #24]
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d3e2      	bcc.n	8006468 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3724      	adds	r7, #36	; 0x24
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b08b      	sub	sp, #44	; 0x2c
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	4613      	mov	r3, r2
 80064bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80064c6:	88fb      	ldrh	r3, [r7, #6]
 80064c8:	089b      	lsrs	r3, r3, #2
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80064ce:	88fb      	ldrh	r3, [r7, #6]
 80064d0:	f003 0303 	and.w	r3, r3, #3
 80064d4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80064d6:	2300      	movs	r3, #0
 80064d8:	623b      	str	r3, [r7, #32]
 80064da:	e014      	b.n	8006506 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ea:	3301      	adds	r3, #1
 80064ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f0:	3301      	adds	r3, #1
 80064f2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f6:	3301      	adds	r3, #1
 80064f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	3301      	adds	r3, #1
 80064fe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006500:	6a3b      	ldr	r3, [r7, #32]
 8006502:	3301      	adds	r3, #1
 8006504:	623b      	str	r3, [r7, #32]
 8006506:	6a3a      	ldr	r2, [r7, #32]
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	429a      	cmp	r2, r3
 800650c:	d3e6      	bcc.n	80064dc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800650e:	8bfb      	ldrh	r3, [r7, #30]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d01e      	beq.n	8006552 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006514:	2300      	movs	r3, #0
 8006516:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800651e:	461a      	mov	r2, r3
 8006520:	f107 0310 	add.w	r3, r7, #16
 8006524:	6812      	ldr	r2, [r2, #0]
 8006526:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	6a3b      	ldr	r3, [r7, #32]
 800652c:	b2db      	uxtb	r3, r3
 800652e:	00db      	lsls	r3, r3, #3
 8006530:	fa22 f303 	lsr.w	r3, r2, r3
 8006534:	b2da      	uxtb	r2, r3
 8006536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006538:	701a      	strb	r2, [r3, #0]
      i++;
 800653a:	6a3b      	ldr	r3, [r7, #32]
 800653c:	3301      	adds	r3, #1
 800653e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006542:	3301      	adds	r3, #1
 8006544:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006546:	8bfb      	ldrh	r3, [r7, #30]
 8006548:	3b01      	subs	r3, #1
 800654a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800654c:	8bfb      	ldrh	r3, [r7, #30]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1ea      	bne.n	8006528 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006554:	4618      	mov	r0, r3
 8006556:	372c      	adds	r7, #44	; 0x2c
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	785b      	ldrb	r3, [r3, #1]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d12c      	bne.n	80065d6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4413      	add	r3, r2
 8006584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	db12      	blt.n	80065b4 <USB_EPSetStall+0x54>
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00f      	beq.n	80065b4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	0151      	lsls	r1, r2, #5
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	440a      	add	r2, r1
 80065aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065b2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	0151      	lsls	r1, r2, #5
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	440a      	add	r2, r1
 80065ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065d2:	6013      	str	r3, [r2, #0]
 80065d4:	e02b      	b.n	800662e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	015a      	lsls	r2, r3, #5
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	4413      	add	r3, r2
 80065de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	db12      	blt.n	800660e <USB_EPSetStall+0xae>
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00f      	beq.n	800660e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	0151      	lsls	r1, r2, #5
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	440a      	add	r2, r1
 8006604:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006608:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800660c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	015a      	lsls	r2, r3, #5
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	4413      	add	r3, r2
 8006616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	0151      	lsls	r1, r2, #5
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	440a      	add	r2, r1
 8006624:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006628:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800662c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	785b      	ldrb	r3, [r3, #1]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d128      	bne.n	80066aa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	4413      	add	r3, r2
 8006660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	0151      	lsls	r1, r2, #5
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	440a      	add	r2, r1
 800666e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006672:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006676:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	791b      	ldrb	r3, [r3, #4]
 800667c:	2b03      	cmp	r3, #3
 800667e:	d003      	beq.n	8006688 <USB_EPClearStall+0x4c>
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	791b      	ldrb	r3, [r3, #4]
 8006684:	2b02      	cmp	r3, #2
 8006686:	d138      	bne.n	80066fa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	4413      	add	r3, r2
 8006690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	0151      	lsls	r1, r2, #5
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	440a      	add	r2, r1
 800669e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066a6:	6013      	str	r3, [r2, #0]
 80066a8:	e027      	b.n	80066fa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	0151      	lsls	r1, r2, #5
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	440a      	add	r2, r1
 80066c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	791b      	ldrb	r3, [r3, #4]
 80066ce:	2b03      	cmp	r3, #3
 80066d0:	d003      	beq.n	80066da <USB_EPClearStall+0x9e>
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	791b      	ldrb	r3, [r3, #4]
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d10f      	bne.n	80066fa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	015a      	lsls	r2, r3, #5
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	4413      	add	r3, r2
 80066e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	0151      	lsls	r1, r2, #5
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	440a      	add	r2, r1
 80066f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066f8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	460b      	mov	r3, r1
 8006712:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006726:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800672a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	78fb      	ldrb	r3, [r7, #3]
 8006736:	011b      	lsls	r3, r3, #4
 8006738:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800673c:	68f9      	ldr	r1, [r7, #12]
 800673e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006742:	4313      	orrs	r3, r2
 8006744:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3714      	adds	r7, #20
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800676e:	f023 0303 	bic.w	r3, r3, #3
 8006772:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006782:	f023 0302 	bic.w	r3, r3, #2
 8006786:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006796:	b480      	push	{r7}
 8006798:	b085      	sub	sp, #20
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80067b0:	f023 0303 	bic.w	r3, r3, #3
 80067b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067c4:	f043 0302 	orr.w	r3, r3, #2
 80067c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3714      	adds	r7, #20
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	695b      	ldr	r3, [r3, #20]
 80067e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	4013      	ands	r3, r2
 80067ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80067f0:	68fb      	ldr	r3, [r7, #12]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067fe:	b480      	push	{r7}
 8006800:	b085      	sub	sp, #20
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800681a:	69db      	ldr	r3, [r3, #28]
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	4013      	ands	r3, r2
 8006820:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	0c1b      	lsrs	r3, r3, #16
}
 8006826:	4618      	mov	r0, r3
 8006828:	3714      	adds	r7, #20
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006832:	b480      	push	{r7}
 8006834:	b085      	sub	sp, #20
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800684e:	69db      	ldr	r3, [r3, #28]
 8006850:	68ba      	ldr	r2, [r7, #8]
 8006852:	4013      	ands	r3, r2
 8006854:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	b29b      	uxth	r3, r3
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006866:	b480      	push	{r7}
 8006868:	b085      	sub	sp, #20
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
 800686e:	460b      	mov	r3, r1
 8006870:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006876:	78fb      	ldrb	r3, [r7, #3]
 8006878:	015a      	lsls	r2, r3, #5
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	4413      	add	r3, r2
 800687e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	4013      	ands	r3, r2
 8006892:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006894:	68bb      	ldr	r3, [r7, #8]
}
 8006896:	4618      	mov	r0, r3
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80068a2:	b480      	push	{r7}
 80068a4:	b087      	sub	sp, #28
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
 80068aa:	460b      	mov	r3, r1
 80068ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80068c6:	78fb      	ldrb	r3, [r7, #3]
 80068c8:	f003 030f 	and.w	r3, r3, #15
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	fa22 f303 	lsr.w	r3, r2, r3
 80068d2:	01db      	lsls	r3, r3, #7
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	4313      	orrs	r3, r2
 80068da:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80068dc:	78fb      	ldrb	r3, [r7, #3]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	4013      	ands	r3, r2
 80068ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80068f0:	68bb      	ldr	r3, [r7, #8]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	371c      	adds	r7, #28
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80068fe:	b480      	push	{r7}
 8006900:	b083      	sub	sp, #12
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	f003 0301 	and.w	r3, r3, #1
}
 800690e:	4618      	mov	r0, r3
 8006910:	370c      	adds	r7, #12
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr

0800691a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800691a:	b480      	push	{r7}
 800691c:	b085      	sub	sp, #20
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006934:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006938:	f023 0307 	bic.w	r3, r3, #7
 800693c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800694c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006950:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3714      	adds	r7, #20
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006960:	b480      	push	{r7}
 8006962:	b087      	sub	sp, #28
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	460b      	mov	r3, r1
 800696a:	607a      	str	r2, [r7, #4]
 800696c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	333c      	adds	r3, #60	; 0x3c
 8006976:	3304      	adds	r3, #4
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	4a26      	ldr	r2, [pc, #152]	; (8006a18 <USB_EP0_OutStart+0xb8>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d90a      	bls.n	800699a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006990:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006994:	d101      	bne.n	800699a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006996:	2300      	movs	r3, #0
 8006998:	e037      	b.n	8006a0a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a0:	461a      	mov	r2, r3
 80069a2:	2300      	movs	r3, #0
 80069a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069c8:	f043 0318 	orr.w	r3, r3, #24
 80069cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069dc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80069e0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80069e2:	7afb      	ldrb	r3, [r7, #11]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d10f      	bne.n	8006a08 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ee:	461a      	mov	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a02:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006a06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	371c      	adds	r7, #28
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	4f54300a 	.word	0x4f54300a

08006a1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a24:	2300      	movs	r3, #0
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	4a13      	ldr	r2, [pc, #76]	; (8006a80 <USB_CoreReset+0x64>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d901      	bls.n	8006a3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e01b      	b.n	8006a72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	daf2      	bge.n	8006a28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a42:	2300      	movs	r3, #0
 8006a44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	f043 0201 	orr.w	r2, r3, #1
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	3301      	adds	r3, #1
 8006a56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	4a09      	ldr	r2, [pc, #36]	; (8006a80 <USB_CoreReset+0x64>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d901      	bls.n	8006a64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e006      	b.n	8006a72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	f003 0301 	and.w	r3, r3, #1
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d0f0      	beq.n	8006a52 <USB_CoreReset+0x36>

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3714      	adds	r7, #20
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	00030d40 	.word	0x00030d40

08006a84 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006a90:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006a94:	f002 fc8a 	bl	80093ac <USBD_static_malloc>
 8006a98:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d109      	bne.n	8006ab4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	32b0      	adds	r2, #176	; 0xb0
 8006aaa:	2100      	movs	r1, #0
 8006aac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	e0d4      	b.n	8006c5e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006ab4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006ab8:	2100      	movs	r1, #0
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f002 fd96 	bl	80095ec <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	32b0      	adds	r2, #176	; 0xb0
 8006aca:	68f9      	ldr	r1, [r7, #12]
 8006acc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	32b0      	adds	r2, #176	; 0xb0
 8006ada:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	7c1b      	ldrb	r3, [r3, #16]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d138      	bne.n	8006b5e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006aec:	4b5e      	ldr	r3, [pc, #376]	; (8006c68 <USBD_CDC_Init+0x1e4>)
 8006aee:	7819      	ldrb	r1, [r3, #0]
 8006af0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006af4:	2202      	movs	r2, #2
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f002 fb35 	bl	8009166 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006afc:	4b5a      	ldr	r3, [pc, #360]	; (8006c68 <USBD_CDC_Init+0x1e4>)
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	f003 020f 	and.w	r2, r3, #15
 8006b04:	6879      	ldr	r1, [r7, #4]
 8006b06:	4613      	mov	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	440b      	add	r3, r1
 8006b10:	3324      	adds	r3, #36	; 0x24
 8006b12:	2201      	movs	r2, #1
 8006b14:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006b16:	4b55      	ldr	r3, [pc, #340]	; (8006c6c <USBD_CDC_Init+0x1e8>)
 8006b18:	7819      	ldrb	r1, [r3, #0]
 8006b1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b1e:	2202      	movs	r2, #2
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f002 fb20 	bl	8009166 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006b26:	4b51      	ldr	r3, [pc, #324]	; (8006c6c <USBD_CDC_Init+0x1e8>)
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	f003 020f 	and.w	r2, r3, #15
 8006b2e:	6879      	ldr	r1, [r7, #4]
 8006b30:	4613      	mov	r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4413      	add	r3, r2
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	440b      	add	r3, r1
 8006b3a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006b3e:	2201      	movs	r2, #1
 8006b40:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006b42:	4b4b      	ldr	r3, [pc, #300]	; (8006c70 <USBD_CDC_Init+0x1ec>)
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	f003 020f 	and.w	r2, r3, #15
 8006b4a:	6879      	ldr	r1, [r7, #4]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4413      	add	r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	440b      	add	r3, r1
 8006b56:	3326      	adds	r3, #38	; 0x26
 8006b58:	2210      	movs	r2, #16
 8006b5a:	801a      	strh	r2, [r3, #0]
 8006b5c:	e035      	b.n	8006bca <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006b5e:	4b42      	ldr	r3, [pc, #264]	; (8006c68 <USBD_CDC_Init+0x1e4>)
 8006b60:	7819      	ldrb	r1, [r3, #0]
 8006b62:	2340      	movs	r3, #64	; 0x40
 8006b64:	2202      	movs	r2, #2
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f002 fafd 	bl	8009166 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006b6c:	4b3e      	ldr	r3, [pc, #248]	; (8006c68 <USBD_CDC_Init+0x1e4>)
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	f003 020f 	and.w	r2, r3, #15
 8006b74:	6879      	ldr	r1, [r7, #4]
 8006b76:	4613      	mov	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	440b      	add	r3, r1
 8006b80:	3324      	adds	r3, #36	; 0x24
 8006b82:	2201      	movs	r2, #1
 8006b84:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006b86:	4b39      	ldr	r3, [pc, #228]	; (8006c6c <USBD_CDC_Init+0x1e8>)
 8006b88:	7819      	ldrb	r1, [r3, #0]
 8006b8a:	2340      	movs	r3, #64	; 0x40
 8006b8c:	2202      	movs	r2, #2
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f002 fae9 	bl	8009166 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006b94:	4b35      	ldr	r3, [pc, #212]	; (8006c6c <USBD_CDC_Init+0x1e8>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	f003 020f 	and.w	r2, r3, #15
 8006b9c:	6879      	ldr	r1, [r7, #4]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4413      	add	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	440b      	add	r3, r1
 8006ba8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006bac:	2201      	movs	r2, #1
 8006bae:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006bb0:	4b2f      	ldr	r3, [pc, #188]	; (8006c70 <USBD_CDC_Init+0x1ec>)
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	f003 020f 	and.w	r2, r3, #15
 8006bb8:	6879      	ldr	r1, [r7, #4]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4413      	add	r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	440b      	add	r3, r1
 8006bc4:	3326      	adds	r3, #38	; 0x26
 8006bc6:	2210      	movs	r2, #16
 8006bc8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006bca:	4b29      	ldr	r3, [pc, #164]	; (8006c70 <USBD_CDC_Init+0x1ec>)
 8006bcc:	7819      	ldrb	r1, [r3, #0]
 8006bce:	2308      	movs	r3, #8
 8006bd0:	2203      	movs	r2, #3
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f002 fac7 	bl	8009166 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006bd8:	4b25      	ldr	r3, [pc, #148]	; (8006c70 <USBD_CDC_Init+0x1ec>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	f003 020f 	and.w	r2, r3, #15
 8006be0:	6879      	ldr	r1, [r7, #4]
 8006be2:	4613      	mov	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	440b      	add	r3, r1
 8006bec:	3324      	adds	r3, #36	; 0x24
 8006bee:	2201      	movs	r2, #1
 8006bf0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	33b0      	adds	r3, #176	; 0xb0
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4413      	add	r3, r2
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d101      	bne.n	8006c2c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006c28:	2302      	movs	r3, #2
 8006c2a:	e018      	b.n	8006c5e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	7c1b      	ldrb	r3, [r3, #16]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10a      	bne.n	8006c4a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c34:	4b0d      	ldr	r3, [pc, #52]	; (8006c6c <USBD_CDC_Init+0x1e8>)
 8006c36:	7819      	ldrb	r1, [r3, #0]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f002 fb7e 	bl	8009344 <USBD_LL_PrepareReceive>
 8006c48:	e008      	b.n	8006c5c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c4a:	4b08      	ldr	r3, [pc, #32]	; (8006c6c <USBD_CDC_Init+0x1e8>)
 8006c4c:	7819      	ldrb	r1, [r3, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c54:	2340      	movs	r3, #64	; 0x40
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f002 fb74 	bl	8009344 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	20000093 	.word	0x20000093
 8006c6c:	20000094 	.word	0x20000094
 8006c70:	20000095 	.word	0x20000095

08006c74 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006c80:	4b3a      	ldr	r3, [pc, #232]	; (8006d6c <USBD_CDC_DeInit+0xf8>)
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	4619      	mov	r1, r3
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f002 fa93 	bl	80091b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006c8c:	4b37      	ldr	r3, [pc, #220]	; (8006d6c <USBD_CDC_DeInit+0xf8>)
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	f003 020f 	and.w	r2, r3, #15
 8006c94:	6879      	ldr	r1, [r7, #4]
 8006c96:	4613      	mov	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4413      	add	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	440b      	add	r3, r1
 8006ca0:	3324      	adds	r3, #36	; 0x24
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006ca6:	4b32      	ldr	r3, [pc, #200]	; (8006d70 <USBD_CDC_DeInit+0xfc>)
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	4619      	mov	r1, r3
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f002 fa80 	bl	80091b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006cb2:	4b2f      	ldr	r3, [pc, #188]	; (8006d70 <USBD_CDC_DeInit+0xfc>)
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	f003 020f 	and.w	r2, r3, #15
 8006cba:	6879      	ldr	r1, [r7, #4]
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4413      	add	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	440b      	add	r3, r1
 8006cc6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006cca:	2200      	movs	r2, #0
 8006ccc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006cce:	4b29      	ldr	r3, [pc, #164]	; (8006d74 <USBD_CDC_DeInit+0x100>)
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f002 fa6c 	bl	80091b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006cda:	4b26      	ldr	r3, [pc, #152]	; (8006d74 <USBD_CDC_DeInit+0x100>)
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	f003 020f 	and.w	r2, r3, #15
 8006ce2:	6879      	ldr	r1, [r7, #4]
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4413      	add	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	440b      	add	r3, r1
 8006cee:	3324      	adds	r3, #36	; 0x24
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006cf4:	4b1f      	ldr	r3, [pc, #124]	; (8006d74 <USBD_CDC_DeInit+0x100>)
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	f003 020f 	and.w	r2, r3, #15
 8006cfc:	6879      	ldr	r1, [r7, #4]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4413      	add	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	440b      	add	r3, r1
 8006d08:	3326      	adds	r3, #38	; 0x26
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	32b0      	adds	r2, #176	; 0xb0
 8006d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d01f      	beq.n	8006d60 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	33b0      	adds	r3, #176	; 0xb0
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	32b0      	adds	r2, #176	; 0xb0
 8006d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d42:	4618      	mov	r0, r3
 8006d44:	f002 fb40 	bl	80093c8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	32b0      	adds	r2, #176	; 0xb0
 8006d52:	2100      	movs	r1, #0
 8006d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	20000093 	.word	0x20000093
 8006d70:	20000094 	.word	0x20000094
 8006d74:	20000095 	.word	0x20000095

08006d78 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	32b0      	adds	r2, #176	; 0xb0
 8006d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d90:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006d92:	2300      	movs	r3, #0
 8006d94:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006d96:	2300      	movs	r3, #0
 8006d98:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e0bf      	b.n	8006f28 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d050      	beq.n	8006e56 <USBD_CDC_Setup+0xde>
 8006db4:	2b20      	cmp	r3, #32
 8006db6:	f040 80af 	bne.w	8006f18 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	88db      	ldrh	r3, [r3, #6]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d03a      	beq.n	8006e38 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	b25b      	sxtb	r3, r3
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	da1b      	bge.n	8006e04 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	33b0      	adds	r3, #176	; 0xb0
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4413      	add	r3, r2
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006de2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006de4:	683a      	ldr	r2, [r7, #0]
 8006de6:	88d2      	ldrh	r2, [r2, #6]
 8006de8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	88db      	ldrh	r3, [r3, #6]
 8006dee:	2b07      	cmp	r3, #7
 8006df0:	bf28      	it	cs
 8006df2:	2307      	movcs	r3, #7
 8006df4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	89fa      	ldrh	r2, [r7, #14]
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f001 fd89 	bl	8008914 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006e02:	e090      	b.n	8006f26 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	785a      	ldrb	r2, [r3, #1]
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	88db      	ldrh	r3, [r3, #6]
 8006e12:	2b3f      	cmp	r3, #63	; 0x3f
 8006e14:	d803      	bhi.n	8006e1e <USBD_CDC_Setup+0xa6>
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	88db      	ldrh	r3, [r3, #6]
 8006e1a:	b2da      	uxtb	r2, r3
 8006e1c:	e000      	b.n	8006e20 <USBD_CDC_Setup+0xa8>
 8006e1e:	2240      	movs	r2, #64	; 0x40
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006e26:	6939      	ldr	r1, [r7, #16]
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006e2e:	461a      	mov	r2, r3
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f001 fd9b 	bl	800896c <USBD_CtlPrepareRx>
      break;
 8006e36:	e076      	b.n	8006f26 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	33b0      	adds	r3, #176	; 0xb0
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4413      	add	r3, r2
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	683a      	ldr	r2, [r7, #0]
 8006e4c:	7850      	ldrb	r0, [r2, #1]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	6839      	ldr	r1, [r7, #0]
 8006e52:	4798      	blx	r3
      break;
 8006e54:	e067      	b.n	8006f26 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	785b      	ldrb	r3, [r3, #1]
 8006e5a:	2b0b      	cmp	r3, #11
 8006e5c:	d851      	bhi.n	8006f02 <USBD_CDC_Setup+0x18a>
 8006e5e:	a201      	add	r2, pc, #4	; (adr r2, 8006e64 <USBD_CDC_Setup+0xec>)
 8006e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e64:	08006e95 	.word	0x08006e95
 8006e68:	08006f11 	.word	0x08006f11
 8006e6c:	08006f03 	.word	0x08006f03
 8006e70:	08006f03 	.word	0x08006f03
 8006e74:	08006f03 	.word	0x08006f03
 8006e78:	08006f03 	.word	0x08006f03
 8006e7c:	08006f03 	.word	0x08006f03
 8006e80:	08006f03 	.word	0x08006f03
 8006e84:	08006f03 	.word	0x08006f03
 8006e88:	08006f03 	.word	0x08006f03
 8006e8c:	08006ebf 	.word	0x08006ebf
 8006e90:	08006ee9 	.word	0x08006ee9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	2b03      	cmp	r3, #3
 8006e9e:	d107      	bne.n	8006eb0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006ea0:	f107 030a 	add.w	r3, r7, #10
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f001 fd33 	bl	8008914 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006eae:	e032      	b.n	8006f16 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006eb0:	6839      	ldr	r1, [r7, #0]
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f001 fcbd 	bl	8008832 <USBD_CtlError>
            ret = USBD_FAIL;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	75fb      	strb	r3, [r7, #23]
          break;
 8006ebc:	e02b      	b.n	8006f16 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b03      	cmp	r3, #3
 8006ec8:	d107      	bne.n	8006eda <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006eca:	f107 030d 	add.w	r3, r7, #13
 8006ece:	2201      	movs	r2, #1
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f001 fd1e 	bl	8008914 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ed8:	e01d      	b.n	8006f16 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f001 fca8 	bl	8008832 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	75fb      	strb	r3, [r7, #23]
          break;
 8006ee6:	e016      	b.n	8006f16 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	2b03      	cmp	r3, #3
 8006ef2:	d00f      	beq.n	8006f14 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006ef4:	6839      	ldr	r1, [r7, #0]
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f001 fc9b 	bl	8008832 <USBD_CtlError>
            ret = USBD_FAIL;
 8006efc:	2303      	movs	r3, #3
 8006efe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006f00:	e008      	b.n	8006f14 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006f02:	6839      	ldr	r1, [r7, #0]
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f001 fc94 	bl	8008832 <USBD_CtlError>
          ret = USBD_FAIL;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	75fb      	strb	r3, [r7, #23]
          break;
 8006f0e:	e002      	b.n	8006f16 <USBD_CDC_Setup+0x19e>
          break;
 8006f10:	bf00      	nop
 8006f12:	e008      	b.n	8006f26 <USBD_CDC_Setup+0x1ae>
          break;
 8006f14:	bf00      	nop
      }
      break;
 8006f16:	e006      	b.n	8006f26 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006f18:	6839      	ldr	r1, [r7, #0]
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f001 fc89 	bl	8008832 <USBD_CtlError>
      ret = USBD_FAIL;
 8006f20:	2303      	movs	r3, #3
 8006f22:	75fb      	strb	r3, [r7, #23]
      break;
 8006f24:	bf00      	nop
  }

  return (uint8_t)ret;
 8006f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3718      	adds	r7, #24
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006f42:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	32b0      	adds	r2, #176	; 0xb0
 8006f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d101      	bne.n	8006f5a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e065      	b.n	8007026 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	32b0      	adds	r2, #176	; 0xb0
 8006f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f68:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006f6a:	78fb      	ldrb	r3, [r7, #3]
 8006f6c:	f003 020f 	and.w	r2, r3, #15
 8006f70:	6879      	ldr	r1, [r7, #4]
 8006f72:	4613      	mov	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	440b      	add	r3, r1
 8006f7c:	3318      	adds	r3, #24
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d02f      	beq.n	8006fe4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006f84:	78fb      	ldrb	r3, [r7, #3]
 8006f86:	f003 020f 	and.w	r2, r3, #15
 8006f8a:	6879      	ldr	r1, [r7, #4]
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	4413      	add	r3, r2
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	440b      	add	r3, r1
 8006f96:	3318      	adds	r3, #24
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	78fb      	ldrb	r3, [r7, #3]
 8006f9c:	f003 010f 	and.w	r1, r3, #15
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	00db      	lsls	r3, r3, #3
 8006fa6:	440b      	add	r3, r1
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4403      	add	r3, r0
 8006fac:	3348      	adds	r3, #72	; 0x48
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	fbb2 f1f3 	udiv	r1, r2, r3
 8006fb4:	fb01 f303 	mul.w	r3, r1, r3
 8006fb8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d112      	bne.n	8006fe4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006fbe:	78fb      	ldrb	r3, [r7, #3]
 8006fc0:	f003 020f 	and.w	r2, r3, #15
 8006fc4:	6879      	ldr	r1, [r7, #4]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4413      	add	r3, r2
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	440b      	add	r3, r1
 8006fd0:	3318      	adds	r3, #24
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006fd6:	78f9      	ldrb	r1, [r7, #3]
 8006fd8:	2300      	movs	r3, #0
 8006fda:	2200      	movs	r2, #0
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f002 f990 	bl	8009302 <USBD_LL_Transmit>
 8006fe2:	e01f      	b.n	8007024 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	33b0      	adds	r3, #176	; 0xb0
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	4413      	add	r3, r2
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d010      	beq.n	8007024 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	33b0      	adds	r3, #176	; 0xb0
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	4413      	add	r3, r2
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007020:	78fa      	ldrb	r2, [r7, #3]
 8007022:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b084      	sub	sp, #16
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
 8007036:	460b      	mov	r3, r1
 8007038:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	32b0      	adds	r2, #176	; 0xb0
 8007044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007048:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	32b0      	adds	r2, #176	; 0xb0
 8007054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d101      	bne.n	8007060 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800705c:	2303      	movs	r3, #3
 800705e:	e01a      	b.n	8007096 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007060:	78fb      	ldrb	r3, [r7, #3]
 8007062:	4619      	mov	r1, r3
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f002 f98e 	bl	8009386 <USBD_LL_GetRxDataSize>
 800706a:	4602      	mov	r2, r0
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	33b0      	adds	r3, #176	; 0xb0
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007090:	4611      	mov	r1, r2
 8007092:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b084      	sub	sp, #16
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	32b0      	adds	r2, #176	; 0xb0
 80070b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d101      	bne.n	80070c0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80070bc:	2303      	movs	r3, #3
 80070be:	e025      	b.n	800710c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	33b0      	adds	r3, #176	; 0xb0
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	4413      	add	r3, r2
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d01a      	beq.n	800710a <USBD_CDC_EP0_RxReady+0x6c>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80070da:	2bff      	cmp	r3, #255	; 0xff
 80070dc:	d015      	beq.n	800710a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	33b0      	adds	r3, #176	; 0xb0
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80070f6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80070fe:	b292      	uxth	r2, r2
 8007100:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	22ff      	movs	r2, #255	; 0xff
 8007106:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800711c:	2182      	movs	r1, #130	; 0x82
 800711e:	4818      	ldr	r0, [pc, #96]	; (8007180 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007120:	f000 fd4f 	bl	8007bc2 <USBD_GetEpDesc>
 8007124:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007126:	2101      	movs	r1, #1
 8007128:	4815      	ldr	r0, [pc, #84]	; (8007180 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800712a:	f000 fd4a 	bl	8007bc2 <USBD_GetEpDesc>
 800712e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007130:	2181      	movs	r1, #129	; 0x81
 8007132:	4813      	ldr	r0, [pc, #76]	; (8007180 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007134:	f000 fd45 	bl	8007bc2 <USBD_GetEpDesc>
 8007138:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d002      	beq.n	8007146 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	2210      	movs	r2, #16
 8007144:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d006      	beq.n	800715a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	2200      	movs	r2, #0
 8007150:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007154:	711a      	strb	r2, [r3, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d006      	beq.n	800716e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007168:	711a      	strb	r2, [r3, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2243      	movs	r2, #67	; 0x43
 8007172:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007174:	4b02      	ldr	r3, [pc, #8]	; (8007180 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007176:	4618      	mov	r0, r3
 8007178:	3718      	adds	r7, #24
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	20000050 	.word	0x20000050

08007184 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b086      	sub	sp, #24
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800718c:	2182      	movs	r1, #130	; 0x82
 800718e:	4818      	ldr	r0, [pc, #96]	; (80071f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007190:	f000 fd17 	bl	8007bc2 <USBD_GetEpDesc>
 8007194:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007196:	2101      	movs	r1, #1
 8007198:	4815      	ldr	r0, [pc, #84]	; (80071f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800719a:	f000 fd12 	bl	8007bc2 <USBD_GetEpDesc>
 800719e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80071a0:	2181      	movs	r1, #129	; 0x81
 80071a2:	4813      	ldr	r0, [pc, #76]	; (80071f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80071a4:	f000 fd0d 	bl	8007bc2 <USBD_GetEpDesc>
 80071a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d002      	beq.n	80071b6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	2210      	movs	r2, #16
 80071b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d006      	beq.n	80071ca <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	2200      	movs	r2, #0
 80071c0:	711a      	strb	r2, [r3, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f042 0202 	orr.w	r2, r2, #2
 80071c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d006      	beq.n	80071de <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	711a      	strb	r2, [r3, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f042 0202 	orr.w	r2, r2, #2
 80071dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2243      	movs	r2, #67	; 0x43
 80071e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80071e4:	4b02      	ldr	r3, [pc, #8]	; (80071f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3718      	adds	r7, #24
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	20000050 	.word	0x20000050

080071f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b086      	sub	sp, #24
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80071fc:	2182      	movs	r1, #130	; 0x82
 80071fe:	4818      	ldr	r0, [pc, #96]	; (8007260 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007200:	f000 fcdf 	bl	8007bc2 <USBD_GetEpDesc>
 8007204:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007206:	2101      	movs	r1, #1
 8007208:	4815      	ldr	r0, [pc, #84]	; (8007260 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800720a:	f000 fcda 	bl	8007bc2 <USBD_GetEpDesc>
 800720e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007210:	2181      	movs	r1, #129	; 0x81
 8007212:	4813      	ldr	r0, [pc, #76]	; (8007260 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007214:	f000 fcd5 	bl	8007bc2 <USBD_GetEpDesc>
 8007218:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d002      	beq.n	8007226 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	2210      	movs	r2, #16
 8007224:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d006      	beq.n	800723a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	2200      	movs	r2, #0
 8007230:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007234:	711a      	strb	r2, [r3, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d006      	beq.n	800724e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007248:	711a      	strb	r2, [r3, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2243      	movs	r2, #67	; 0x43
 8007252:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007254:	4b02      	ldr	r3, [pc, #8]	; (8007260 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007256:	4618      	mov	r0, r3
 8007258:	3718      	adds	r7, #24
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	20000050 	.word	0x20000050

08007264 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	220a      	movs	r2, #10
 8007270:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007272:	4b03      	ldr	r3, [pc, #12]	; (8007280 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007274:	4618      	mov	r0, r3
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr
 8007280:	2000000c 	.word	0x2000000c

08007284 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d101      	bne.n	8007298 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007294:	2303      	movs	r3, #3
 8007296:	e009      	b.n	80072ac <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	33b0      	adds	r3, #176	; 0xb0
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	4413      	add	r3, r2
 80072a6:	683a      	ldr	r2, [r7, #0]
 80072a8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b087      	sub	sp, #28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	32b0      	adds	r2, #176	; 0xb0
 80072ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072d2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d101      	bne.n	80072de <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80072da:	2303      	movs	r3, #3
 80072dc:	e008      	b.n	80072f0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	68ba      	ldr	r2, [r7, #8]
 80072e2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	371c      	adds	r7, #28
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	32b0      	adds	r2, #176	; 0xb0
 8007310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007314:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d101      	bne.n	8007320 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800731c:	2303      	movs	r3, #3
 800731e:	e004      	b.n	800732a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3714      	adds	r7, #20
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
	...

08007338 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	32b0      	adds	r2, #176	; 0xb0
 800734a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800734e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007350:	2301      	movs	r3, #1
 8007352:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	32b0      	adds	r2, #176	; 0xb0
 800735e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007366:	2303      	movs	r3, #3
 8007368:	e025      	b.n	80073b6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007370:	2b00      	cmp	r3, #0
 8007372:	d11f      	bne.n	80073b4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	2201      	movs	r2, #1
 8007378:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800737c:	4b10      	ldr	r3, [pc, #64]	; (80073c0 <USBD_CDC_TransmitPacket+0x88>)
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	f003 020f 	and.w	r2, r3, #15
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	4613      	mov	r3, r2
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4403      	add	r3, r0
 8007396:	3318      	adds	r3, #24
 8007398:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800739a:	4b09      	ldr	r3, [pc, #36]	; (80073c0 <USBD_CDC_TransmitPacket+0x88>)
 800739c:	7819      	ldrb	r1, [r3, #0]
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f001 ffa9 	bl	8009302 <USBD_LL_Transmit>

    ret = USBD_OK;
 80073b0:	2300      	movs	r3, #0
 80073b2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80073b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	20000093 	.word	0x20000093

080073c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	32b0      	adds	r2, #176	; 0xb0
 80073d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073da:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	32b0      	adds	r2, #176	; 0xb0
 80073e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d101      	bne.n	80073f2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80073ee:	2303      	movs	r3, #3
 80073f0:	e018      	b.n	8007424 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	7c1b      	ldrb	r3, [r3, #16]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d10a      	bne.n	8007410 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80073fa:	4b0c      	ldr	r3, [pc, #48]	; (800742c <USBD_CDC_ReceivePacket+0x68>)
 80073fc:	7819      	ldrb	r1, [r3, #0]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007404:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f001 ff9b 	bl	8009344 <USBD_LL_PrepareReceive>
 800740e:	e008      	b.n	8007422 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007410:	4b06      	ldr	r3, [pc, #24]	; (800742c <USBD_CDC_ReceivePacket+0x68>)
 8007412:	7819      	ldrb	r1, [r3, #0]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800741a:	2340      	movs	r3, #64	; 0x40
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f001 ff91 	bl	8009344 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	20000094 	.word	0x20000094

08007430 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	4613      	mov	r3, r2
 800743c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d101      	bne.n	8007448 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007444:	2303      	movs	r3, #3
 8007446:	e01f      	b.n	8007488 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2200      	movs	r2, #0
 800745c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d003      	beq.n	800746e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	79fa      	ldrb	r2, [r7, #7]
 800747a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f001 fe0b 	bl	8009098 <USBD_LL_Init>
 8007482:	4603      	mov	r3, r0
 8007484:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007486:	7dfb      	ldrb	r3, [r7, #23]
}
 8007488:	4618      	mov	r0, r3
 800748a:	3718      	adds	r7, #24
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800749a:	2300      	movs	r3, #0
 800749c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d101      	bne.n	80074a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e025      	b.n	80074f4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	683a      	ldr	r2, [r7, #0]
 80074ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	32ae      	adds	r2, #174	; 0xae
 80074ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00f      	beq.n	80074e4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	32ae      	adds	r2, #174	; 0xae
 80074ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d4:	f107 020e 	add.w	r2, r7, #14
 80074d8:	4610      	mov	r0, r2
 80074da:	4798      	blx	r3
 80074dc:	4602      	mov	r2, r0
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80074ea:	1c5a      	adds	r2, r3, #1
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f001 fe13 	bl	8009130 <USBD_LL_Start>
 800750a:	4603      	mov	r3, r0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3708      	adds	r7, #8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800751c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800751e:	4618      	mov	r0, r3
 8007520:	370c      	adds	r7, #12
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b084      	sub	sp, #16
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
 8007532:	460b      	mov	r3, r1
 8007534:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007536:	2300      	movs	r3, #0
 8007538:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007540:	2b00      	cmp	r3, #0
 8007542:	d009      	beq.n	8007558 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	78fa      	ldrb	r2, [r7, #3]
 800754e:	4611      	mov	r1, r2
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	4798      	blx	r3
 8007554:	4603      	mov	r3, r0
 8007556:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007558:	7bfb      	ldrb	r3, [r7, #15]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b084      	sub	sp, #16
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	460b      	mov	r3, r1
 800756c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800756e:	2300      	movs	r3, #0
 8007570:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	78fa      	ldrb	r2, [r7, #3]
 800757c:	4611      	mov	r1, r2
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	4798      	blx	r3
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d001      	beq.n	800758c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007588:	2303      	movs	r3, #3
 800758a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800758c:	7bfb      	ldrb	r3, [r7, #15]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b084      	sub	sp, #16
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
 800759e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075a6:	6839      	ldr	r1, [r7, #0]
 80075a8:	4618      	mov	r0, r3
 80075aa:	f001 f908 	bl	80087be <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80075bc:	461a      	mov	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80075ca:	f003 031f 	and.w	r3, r3, #31
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	d01a      	beq.n	8007608 <USBD_LL_SetupStage+0x72>
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d822      	bhi.n	800761c <USBD_LL_SetupStage+0x86>
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d002      	beq.n	80075e0 <USBD_LL_SetupStage+0x4a>
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d00a      	beq.n	80075f4 <USBD_LL_SetupStage+0x5e>
 80075de:	e01d      	b.n	800761c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075e6:	4619      	mov	r1, r3
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 fb5f 	bl	8007cac <USBD_StdDevReq>
 80075ee:	4603      	mov	r3, r0
 80075f0:	73fb      	strb	r3, [r7, #15]
      break;
 80075f2:	e020      	b.n	8007636 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075fa:	4619      	mov	r1, r3
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 fbc7 	bl	8007d90 <USBD_StdItfReq>
 8007602:	4603      	mov	r3, r0
 8007604:	73fb      	strb	r3, [r7, #15]
      break;
 8007606:	e016      	b.n	8007636 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800760e:	4619      	mov	r1, r3
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 fc29 	bl	8007e68 <USBD_StdEPReq>
 8007616:	4603      	mov	r3, r0
 8007618:	73fb      	strb	r3, [r7, #15]
      break;
 800761a:	e00c      	b.n	8007636 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007622:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007626:	b2db      	uxtb	r3, r3
 8007628:	4619      	mov	r1, r3
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f001 fde0 	bl	80091f0 <USBD_LL_StallEP>
 8007630:	4603      	mov	r3, r0
 8007632:	73fb      	strb	r3, [r7, #15]
      break;
 8007634:	bf00      	nop
  }

  return ret;
 8007636:	7bfb      	ldrb	r3, [r7, #15]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3710      	adds	r7, #16
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	460b      	mov	r3, r1
 800764a:	607a      	str	r2, [r7, #4]
 800764c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800764e:	2300      	movs	r3, #0
 8007650:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007652:	7afb      	ldrb	r3, [r7, #11]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d16e      	bne.n	8007736 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800765e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007666:	2b03      	cmp	r3, #3
 8007668:	f040 8098 	bne.w	800779c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	689a      	ldr	r2, [r3, #8]
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	429a      	cmp	r2, r3
 8007676:	d913      	bls.n	80076a0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	689a      	ldr	r2, [r3, #8]
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	1ad2      	subs	r2, r2, r3
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	68da      	ldr	r2, [r3, #12]
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	4293      	cmp	r3, r2
 8007690:	bf28      	it	cs
 8007692:	4613      	movcs	r3, r2
 8007694:	461a      	mov	r2, r3
 8007696:	6879      	ldr	r1, [r7, #4]
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f001 f984 	bl	80089a6 <USBD_CtlContinueRx>
 800769e:	e07d      	b.n	800779c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80076a6:	f003 031f 	and.w	r3, r3, #31
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d014      	beq.n	80076d8 <USBD_LL_DataOutStage+0x98>
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d81d      	bhi.n	80076ee <USBD_LL_DataOutStage+0xae>
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d002      	beq.n	80076bc <USBD_LL_DataOutStage+0x7c>
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d003      	beq.n	80076c2 <USBD_LL_DataOutStage+0x82>
 80076ba:	e018      	b.n	80076ee <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80076bc:	2300      	movs	r3, #0
 80076be:	75bb      	strb	r3, [r7, #22]
            break;
 80076c0:	e018      	b.n	80076f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	4619      	mov	r1, r3
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f000 fa5e 	bl	8007b8e <USBD_CoreFindIF>
 80076d2:	4603      	mov	r3, r0
 80076d4:	75bb      	strb	r3, [r7, #22]
            break;
 80076d6:	e00d      	b.n	80076f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	4619      	mov	r1, r3
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f000 fa60 	bl	8007ba8 <USBD_CoreFindEP>
 80076e8:	4603      	mov	r3, r0
 80076ea:	75bb      	strb	r3, [r7, #22]
            break;
 80076ec:	e002      	b.n	80076f4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80076ee:	2300      	movs	r3, #0
 80076f0:	75bb      	strb	r3, [r7, #22]
            break;
 80076f2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80076f4:	7dbb      	ldrb	r3, [r7, #22]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d119      	bne.n	800772e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b03      	cmp	r3, #3
 8007704:	d113      	bne.n	800772e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007706:	7dba      	ldrb	r2, [r7, #22]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	32ae      	adds	r2, #174	; 0xae
 800770c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00b      	beq.n	800772e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007716:	7dba      	ldrb	r2, [r7, #22]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800771e:	7dba      	ldrb	r2, [r7, #22]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	32ae      	adds	r2, #174	; 0xae
 8007724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f001 f94a 	bl	80089c8 <USBD_CtlSendStatus>
 8007734:	e032      	b.n	800779c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007736:	7afb      	ldrb	r3, [r7, #11]
 8007738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800773c:	b2db      	uxtb	r3, r3
 800773e:	4619      	mov	r1, r3
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f000 fa31 	bl	8007ba8 <USBD_CoreFindEP>
 8007746:	4603      	mov	r3, r0
 8007748:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800774a:	7dbb      	ldrb	r3, [r7, #22]
 800774c:	2bff      	cmp	r3, #255	; 0xff
 800774e:	d025      	beq.n	800779c <USBD_LL_DataOutStage+0x15c>
 8007750:	7dbb      	ldrb	r3, [r7, #22]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d122      	bne.n	800779c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b03      	cmp	r3, #3
 8007760:	d117      	bne.n	8007792 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007762:	7dba      	ldrb	r2, [r7, #22]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	32ae      	adds	r2, #174	; 0xae
 8007768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00f      	beq.n	8007792 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007772:	7dba      	ldrb	r2, [r7, #22]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800777a:	7dba      	ldrb	r2, [r7, #22]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	32ae      	adds	r2, #174	; 0xae
 8007780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007784:	699b      	ldr	r3, [r3, #24]
 8007786:	7afa      	ldrb	r2, [r7, #11]
 8007788:	4611      	mov	r1, r2
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	4798      	blx	r3
 800778e:	4603      	mov	r3, r0
 8007790:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007792:	7dfb      	ldrb	r3, [r7, #23]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d001      	beq.n	800779c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007798:	7dfb      	ldrb	r3, [r7, #23]
 800779a:	e000      	b.n	800779e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3718      	adds	r7, #24
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b086      	sub	sp, #24
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	60f8      	str	r0, [r7, #12]
 80077ae:	460b      	mov	r3, r1
 80077b0:	607a      	str	r2, [r7, #4]
 80077b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80077b4:	7afb      	ldrb	r3, [r7, #11]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d16f      	bne.n	800789a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	3314      	adds	r3, #20
 80077be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d15a      	bne.n	8007880 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	689a      	ldr	r2, [r3, #8]
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d914      	bls.n	8007800 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	689a      	ldr	r2, [r3, #8]
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	1ad2      	subs	r2, r2, r3
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	461a      	mov	r2, r3
 80077ea:	6879      	ldr	r1, [r7, #4]
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	f001 f8ac 	bl	800894a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077f2:	2300      	movs	r3, #0
 80077f4:	2200      	movs	r2, #0
 80077f6:	2100      	movs	r1, #0
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f001 fda3 	bl	8009344 <USBD_LL_PrepareReceive>
 80077fe:	e03f      	b.n	8007880 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	68da      	ldr	r2, [r3, #12]
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	429a      	cmp	r2, r3
 800780a:	d11c      	bne.n	8007846 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	685a      	ldr	r2, [r3, #4]
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007814:	429a      	cmp	r2, r3
 8007816:	d316      	bcc.n	8007846 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007822:	429a      	cmp	r2, r3
 8007824:	d20f      	bcs.n	8007846 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007826:	2200      	movs	r2, #0
 8007828:	2100      	movs	r1, #0
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f001 f88d 	bl	800894a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007838:	2300      	movs	r3, #0
 800783a:	2200      	movs	r2, #0
 800783c:	2100      	movs	r1, #0
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f001 fd80 	bl	8009344 <USBD_LL_PrepareReceive>
 8007844:	e01c      	b.n	8007880 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800784c:	b2db      	uxtb	r3, r3
 800784e:	2b03      	cmp	r3, #3
 8007850:	d10f      	bne.n	8007872 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d009      	beq.n	8007872 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2200      	movs	r2, #0
 8007862:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007872:	2180      	movs	r1, #128	; 0x80
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f001 fcbb 	bl	80091f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f001 f8b7 	bl	80089ee <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d03a      	beq.n	8007900 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f7ff fe42 	bl	8007514 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007898:	e032      	b.n	8007900 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800789a:	7afb      	ldrb	r3, [r7, #11]
 800789c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	4619      	mov	r1, r3
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f000 f97f 	bl	8007ba8 <USBD_CoreFindEP>
 80078aa:	4603      	mov	r3, r0
 80078ac:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078ae:	7dfb      	ldrb	r3, [r7, #23]
 80078b0:	2bff      	cmp	r3, #255	; 0xff
 80078b2:	d025      	beq.n	8007900 <USBD_LL_DataInStage+0x15a>
 80078b4:	7dfb      	ldrb	r3, [r7, #23]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d122      	bne.n	8007900 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b03      	cmp	r3, #3
 80078c4:	d11c      	bne.n	8007900 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80078c6:	7dfa      	ldrb	r2, [r7, #23]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	32ae      	adds	r2, #174	; 0xae
 80078cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d014      	beq.n	8007900 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80078d6:	7dfa      	ldrb	r2, [r7, #23]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80078de:	7dfa      	ldrb	r2, [r7, #23]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	32ae      	adds	r2, #174	; 0xae
 80078e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e8:	695b      	ldr	r3, [r3, #20]
 80078ea:	7afa      	ldrb	r2, [r7, #11]
 80078ec:	4611      	mov	r1, r2
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	4798      	blx	r3
 80078f2:	4603      	mov	r3, r0
 80078f4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80078f6:	7dbb      	ldrb	r3, [r7, #22]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d001      	beq.n	8007900 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80078fc:	7dbb      	ldrb	r3, [r7, #22]
 80078fe:	e000      	b.n	8007902 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3718      	adds	r7, #24
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b084      	sub	sp, #16
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007912:	2300      	movs	r3, #0
 8007914:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007942:	2b00      	cmp	r3, #0
 8007944:	d014      	beq.n	8007970 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00e      	beq.n	8007970 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	6852      	ldr	r2, [r2, #4]
 800795e:	b2d2      	uxtb	r2, r2
 8007960:	4611      	mov	r1, r2
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	4798      	blx	r3
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d001      	beq.n	8007970 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800796c:	2303      	movs	r3, #3
 800796e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007970:	2340      	movs	r3, #64	; 0x40
 8007972:	2200      	movs	r2, #0
 8007974:	2100      	movs	r1, #0
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f001 fbf5 	bl	8009166 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2240      	movs	r2, #64	; 0x40
 8007988:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800798c:	2340      	movs	r3, #64	; 0x40
 800798e:	2200      	movs	r2, #0
 8007990:	2180      	movs	r1, #128	; 0x80
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f001 fbe7 	bl	8009166 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2240      	movs	r2, #64	; 0x40
 80079a2:	621a      	str	r2, [r3, #32]

  return ret;
 80079a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80079ae:	b480      	push	{r7}
 80079b0:	b083      	sub	sp, #12
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
 80079b6:	460b      	mov	r3, r1
 80079b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	78fa      	ldrb	r2, [r7, #3]
 80079be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	370c      	adds	r7, #12
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr

080079ce <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80079ce:	b480      	push	{r7}
 80079d0:	b083      	sub	sp, #12
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079dc:	b2da      	uxtb	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2204      	movs	r2, #4
 80079e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b083      	sub	sp, #12
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2b04      	cmp	r3, #4
 8007a0c:	d106      	bne.n	8007a1c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	370c      	adds	r7, #12
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr

08007a2a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b082      	sub	sp, #8
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2b03      	cmp	r3, #3
 8007a3c:	d110      	bne.n	8007a60 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00b      	beq.n	8007a60 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a4e:	69db      	ldr	r3, [r3, #28]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d005      	beq.n	8007a60 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a5a:	69db      	ldr	r3, [r3, #28]
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3708      	adds	r7, #8
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b082      	sub	sp, #8
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
 8007a72:	460b      	mov	r3, r1
 8007a74:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	32ae      	adds	r2, #174	; 0xae
 8007a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d101      	bne.n	8007a8c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	e01c      	b.n	8007ac6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	2b03      	cmp	r3, #3
 8007a96:	d115      	bne.n	8007ac4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	32ae      	adds	r2, #174	; 0xae
 8007aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa6:	6a1b      	ldr	r3, [r3, #32]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00b      	beq.n	8007ac4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	32ae      	adds	r2, #174	; 0xae
 8007ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aba:	6a1b      	ldr	r3, [r3, #32]
 8007abc:	78fa      	ldrb	r2, [r7, #3]
 8007abe:	4611      	mov	r1, r2
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3708      	adds	r7, #8
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b082      	sub	sp, #8
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	32ae      	adds	r2, #174	; 0xae
 8007ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d101      	bne.n	8007af0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007aec:	2303      	movs	r3, #3
 8007aee:	e01c      	b.n	8007b2a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	2b03      	cmp	r3, #3
 8007afa:	d115      	bne.n	8007b28 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	32ae      	adds	r2, #174	; 0xae
 8007b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00b      	beq.n	8007b28 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	32ae      	adds	r2, #174	; 0xae
 8007b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b20:	78fa      	ldrb	r2, [r7, #3]
 8007b22:	4611      	mov	r1, r2
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3708      	adds	r7, #8
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007b32:	b480      	push	{r7}
 8007b34:	b083      	sub	sp, #12
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007b50:	2300      	movs	r3, #0
 8007b52:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00e      	beq.n	8007b84 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	6852      	ldr	r2, [r2, #4]
 8007b72:	b2d2      	uxtb	r2, r2
 8007b74:	4611      	mov	r1, r2
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	4798      	blx	r3
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d001      	beq.n	8007b84 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007b80:	2303      	movs	r3, #3
 8007b82:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b083      	sub	sp, #12
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	460b      	mov	r3, r1
 8007b98:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b9a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007bb4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	370c      	adds	r7, #12
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr

08007bc2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b086      	sub	sp, #24
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
 8007bca:	460b      	mov	r3, r1
 8007bcc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	885b      	ldrh	r3, [r3, #2]
 8007bde:	b29a      	uxth	r2, r3
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d920      	bls.n	8007c2c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007bf2:	e013      	b.n	8007c1c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007bf4:	f107 030a 	add.w	r3, r7, #10
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	6978      	ldr	r0, [r7, #20]
 8007bfc:	f000 f81b 	bl	8007c36 <USBD_GetNextDesc>
 8007c00:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	785b      	ldrb	r3, [r3, #1]
 8007c06:	2b05      	cmp	r3, #5
 8007c08:	d108      	bne.n	8007c1c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	789b      	ldrb	r3, [r3, #2]
 8007c12:	78fa      	ldrb	r2, [r7, #3]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d008      	beq.n	8007c2a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	885b      	ldrh	r3, [r3, #2]
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	897b      	ldrh	r3, [r7, #10]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d8e5      	bhi.n	8007bf4 <USBD_GetEpDesc+0x32>
 8007c28:	e000      	b.n	8007c2c <USBD_GetEpDesc+0x6a>
          break;
 8007c2a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007c2c:	693b      	ldr	r3, [r7, #16]
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3718      	adds	r7, #24
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007c36:	b480      	push	{r7}
 8007c38:	b085      	sub	sp, #20
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
 8007c3e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	881a      	ldrh	r2, [r3, #0]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	4413      	add	r3, r2
 8007c50:	b29a      	uxth	r2, r3
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4413      	add	r3, r2
 8007c60:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c62:	68fb      	ldr	r3, [r7, #12]
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3714      	adds	r7, #20
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b087      	sub	sp, #28
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	3301      	adds	r3, #1
 8007c86:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007c8e:	8a3b      	ldrh	r3, [r7, #16]
 8007c90:	021b      	lsls	r3, r3, #8
 8007c92:	b21a      	sxth	r2, r3
 8007c94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	b21b      	sxth	r3, r3
 8007c9c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007c9e:	89fb      	ldrh	r3, [r7, #14]
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	371c      	adds	r7, #28
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cc2:	2b40      	cmp	r3, #64	; 0x40
 8007cc4:	d005      	beq.n	8007cd2 <USBD_StdDevReq+0x26>
 8007cc6:	2b40      	cmp	r3, #64	; 0x40
 8007cc8:	d857      	bhi.n	8007d7a <USBD_StdDevReq+0xce>
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00f      	beq.n	8007cee <USBD_StdDevReq+0x42>
 8007cce:	2b20      	cmp	r3, #32
 8007cd0:	d153      	bne.n	8007d7a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	32ae      	adds	r2, #174	; 0xae
 8007cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	6839      	ldr	r1, [r7, #0]
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	4798      	blx	r3
 8007ce8:	4603      	mov	r3, r0
 8007cea:	73fb      	strb	r3, [r7, #15]
      break;
 8007cec:	e04a      	b.n	8007d84 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	785b      	ldrb	r3, [r3, #1]
 8007cf2:	2b09      	cmp	r3, #9
 8007cf4:	d83b      	bhi.n	8007d6e <USBD_StdDevReq+0xc2>
 8007cf6:	a201      	add	r2, pc, #4	; (adr r2, 8007cfc <USBD_StdDevReq+0x50>)
 8007cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cfc:	08007d51 	.word	0x08007d51
 8007d00:	08007d65 	.word	0x08007d65
 8007d04:	08007d6f 	.word	0x08007d6f
 8007d08:	08007d5b 	.word	0x08007d5b
 8007d0c:	08007d6f 	.word	0x08007d6f
 8007d10:	08007d2f 	.word	0x08007d2f
 8007d14:	08007d25 	.word	0x08007d25
 8007d18:	08007d6f 	.word	0x08007d6f
 8007d1c:	08007d47 	.word	0x08007d47
 8007d20:	08007d39 	.word	0x08007d39
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007d24:	6839      	ldr	r1, [r7, #0]
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fa3c 	bl	80081a4 <USBD_GetDescriptor>
          break;
 8007d2c:	e024      	b.n	8007d78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007d2e:	6839      	ldr	r1, [r7, #0]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fba1 	bl	8008478 <USBD_SetAddress>
          break;
 8007d36:	e01f      	b.n	8007d78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007d38:	6839      	ldr	r1, [r7, #0]
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fbe0 	bl	8008500 <USBD_SetConfig>
 8007d40:	4603      	mov	r3, r0
 8007d42:	73fb      	strb	r3, [r7, #15]
          break;
 8007d44:	e018      	b.n	8007d78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007d46:	6839      	ldr	r1, [r7, #0]
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 fc83 	bl	8008654 <USBD_GetConfig>
          break;
 8007d4e:	e013      	b.n	8007d78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007d50:	6839      	ldr	r1, [r7, #0]
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fcb4 	bl	80086c0 <USBD_GetStatus>
          break;
 8007d58:	e00e      	b.n	8007d78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007d5a:	6839      	ldr	r1, [r7, #0]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fce3 	bl	8008728 <USBD_SetFeature>
          break;
 8007d62:	e009      	b.n	8007d78 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007d64:	6839      	ldr	r1, [r7, #0]
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fd07 	bl	800877a <USBD_ClrFeature>
          break;
 8007d6c:	e004      	b.n	8007d78 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007d6e:	6839      	ldr	r1, [r7, #0]
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 fd5e 	bl	8008832 <USBD_CtlError>
          break;
 8007d76:	bf00      	nop
      }
      break;
 8007d78:	e004      	b.n	8007d84 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007d7a:	6839      	ldr	r1, [r7, #0]
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 fd58 	bl	8008832 <USBD_CtlError>
      break;
 8007d82:	bf00      	nop
  }

  return ret;
 8007d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop

08007d90 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007da6:	2b40      	cmp	r3, #64	; 0x40
 8007da8:	d005      	beq.n	8007db6 <USBD_StdItfReq+0x26>
 8007daa:	2b40      	cmp	r3, #64	; 0x40
 8007dac:	d852      	bhi.n	8007e54 <USBD_StdItfReq+0xc4>
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d001      	beq.n	8007db6 <USBD_StdItfReq+0x26>
 8007db2:	2b20      	cmp	r3, #32
 8007db4:	d14e      	bne.n	8007e54 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d840      	bhi.n	8007e46 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	889b      	ldrh	r3, [r3, #4]
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d836      	bhi.n	8007e3c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	889b      	ldrh	r3, [r3, #4]
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f7ff fed9 	bl	8007b8e <USBD_CoreFindIF>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007de0:	7bbb      	ldrb	r3, [r7, #14]
 8007de2:	2bff      	cmp	r3, #255	; 0xff
 8007de4:	d01d      	beq.n	8007e22 <USBD_StdItfReq+0x92>
 8007de6:	7bbb      	ldrb	r3, [r7, #14]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d11a      	bne.n	8007e22 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007dec:	7bba      	ldrb	r2, [r7, #14]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	32ae      	adds	r2, #174	; 0xae
 8007df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00f      	beq.n	8007e1c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007dfc:	7bba      	ldrb	r2, [r7, #14]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e04:	7bba      	ldrb	r2, [r7, #14]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	32ae      	adds	r2, #174	; 0xae
 8007e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	6839      	ldr	r1, [r7, #0]
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	4798      	blx	r3
 8007e16:	4603      	mov	r3, r0
 8007e18:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e1a:	e004      	b.n	8007e26 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e20:	e001      	b.n	8007e26 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007e22:	2303      	movs	r3, #3
 8007e24:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	88db      	ldrh	r3, [r3, #6]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d110      	bne.n	8007e50 <USBD_StdItfReq+0xc0>
 8007e2e:	7bfb      	ldrb	r3, [r7, #15]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10d      	bne.n	8007e50 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 fdc7 	bl	80089c8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007e3a:	e009      	b.n	8007e50 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007e3c:	6839      	ldr	r1, [r7, #0]
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fcf7 	bl	8008832 <USBD_CtlError>
          break;
 8007e44:	e004      	b.n	8007e50 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007e46:	6839      	ldr	r1, [r7, #0]
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 fcf2 	bl	8008832 <USBD_CtlError>
          break;
 8007e4e:	e000      	b.n	8007e52 <USBD_StdItfReq+0xc2>
          break;
 8007e50:	bf00      	nop
      }
      break;
 8007e52:	e004      	b.n	8007e5e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007e54:	6839      	ldr	r1, [r7, #0]
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fceb 	bl	8008832 <USBD_CtlError>
      break;
 8007e5c:	bf00      	nop
  }

  return ret;
 8007e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3710      	adds	r7, #16
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e72:	2300      	movs	r3, #0
 8007e74:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	889b      	ldrh	r3, [r3, #4]
 8007e7a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e84:	2b40      	cmp	r3, #64	; 0x40
 8007e86:	d007      	beq.n	8007e98 <USBD_StdEPReq+0x30>
 8007e88:	2b40      	cmp	r3, #64	; 0x40
 8007e8a:	f200 817f 	bhi.w	800818c <USBD_StdEPReq+0x324>
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d02a      	beq.n	8007ee8 <USBD_StdEPReq+0x80>
 8007e92:	2b20      	cmp	r3, #32
 8007e94:	f040 817a 	bne.w	800818c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007e98:	7bbb      	ldrb	r3, [r7, #14]
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f7ff fe83 	bl	8007ba8 <USBD_CoreFindEP>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ea6:	7b7b      	ldrb	r3, [r7, #13]
 8007ea8:	2bff      	cmp	r3, #255	; 0xff
 8007eaa:	f000 8174 	beq.w	8008196 <USBD_StdEPReq+0x32e>
 8007eae:	7b7b      	ldrb	r3, [r7, #13]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f040 8170 	bne.w	8008196 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007eb6:	7b7a      	ldrb	r2, [r7, #13]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007ebe:	7b7a      	ldrb	r2, [r7, #13]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	32ae      	adds	r2, #174	; 0xae
 8007ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f000 8163 	beq.w	8008196 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007ed0:	7b7a      	ldrb	r2, [r7, #13]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	32ae      	adds	r2, #174	; 0xae
 8007ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	6839      	ldr	r1, [r7, #0]
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	4798      	blx	r3
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007ee6:	e156      	b.n	8008196 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	785b      	ldrb	r3, [r3, #1]
 8007eec:	2b03      	cmp	r3, #3
 8007eee:	d008      	beq.n	8007f02 <USBD_StdEPReq+0x9a>
 8007ef0:	2b03      	cmp	r3, #3
 8007ef2:	f300 8145 	bgt.w	8008180 <USBD_StdEPReq+0x318>
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f000 809b 	beq.w	8008032 <USBD_StdEPReq+0x1ca>
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d03c      	beq.n	8007f7a <USBD_StdEPReq+0x112>
 8007f00:	e13e      	b.n	8008180 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	d002      	beq.n	8007f14 <USBD_StdEPReq+0xac>
 8007f0e:	2b03      	cmp	r3, #3
 8007f10:	d016      	beq.n	8007f40 <USBD_StdEPReq+0xd8>
 8007f12:	e02c      	b.n	8007f6e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f14:	7bbb      	ldrb	r3, [r7, #14]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00d      	beq.n	8007f36 <USBD_StdEPReq+0xce>
 8007f1a:	7bbb      	ldrb	r3, [r7, #14]
 8007f1c:	2b80      	cmp	r3, #128	; 0x80
 8007f1e:	d00a      	beq.n	8007f36 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f20:	7bbb      	ldrb	r3, [r7, #14]
 8007f22:	4619      	mov	r1, r3
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f001 f963 	bl	80091f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f2a:	2180      	movs	r1, #128	; 0x80
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f001 f95f 	bl	80091f0 <USBD_LL_StallEP>
 8007f32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f34:	e020      	b.n	8007f78 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007f36:	6839      	ldr	r1, [r7, #0]
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 fc7a 	bl	8008832 <USBD_CtlError>
              break;
 8007f3e:	e01b      	b.n	8007f78 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	885b      	ldrh	r3, [r3, #2]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d10e      	bne.n	8007f66 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007f48:	7bbb      	ldrb	r3, [r7, #14]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00b      	beq.n	8007f66 <USBD_StdEPReq+0xfe>
 8007f4e:	7bbb      	ldrb	r3, [r7, #14]
 8007f50:	2b80      	cmp	r3, #128	; 0x80
 8007f52:	d008      	beq.n	8007f66 <USBD_StdEPReq+0xfe>
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	88db      	ldrh	r3, [r3, #6]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d104      	bne.n	8007f66 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f5c:	7bbb      	ldrb	r3, [r7, #14]
 8007f5e:	4619      	mov	r1, r3
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f001 f945 	bl	80091f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 fd2e 	bl	80089c8 <USBD_CtlSendStatus>

              break;
 8007f6c:	e004      	b.n	8007f78 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007f6e:	6839      	ldr	r1, [r7, #0]
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fc5e 	bl	8008832 <USBD_CtlError>
              break;
 8007f76:	bf00      	nop
          }
          break;
 8007f78:	e107      	b.n	800818a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d002      	beq.n	8007f8c <USBD_StdEPReq+0x124>
 8007f86:	2b03      	cmp	r3, #3
 8007f88:	d016      	beq.n	8007fb8 <USBD_StdEPReq+0x150>
 8007f8a:	e04b      	b.n	8008024 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f8c:	7bbb      	ldrb	r3, [r7, #14]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00d      	beq.n	8007fae <USBD_StdEPReq+0x146>
 8007f92:	7bbb      	ldrb	r3, [r7, #14]
 8007f94:	2b80      	cmp	r3, #128	; 0x80
 8007f96:	d00a      	beq.n	8007fae <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f98:	7bbb      	ldrb	r3, [r7, #14]
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f001 f927 	bl	80091f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fa2:	2180      	movs	r1, #128	; 0x80
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f001 f923 	bl	80091f0 <USBD_LL_StallEP>
 8007faa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007fac:	e040      	b.n	8008030 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007fae:	6839      	ldr	r1, [r7, #0]
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 fc3e 	bl	8008832 <USBD_CtlError>
              break;
 8007fb6:	e03b      	b.n	8008030 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	885b      	ldrh	r3, [r3, #2]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d136      	bne.n	800802e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007fc0:	7bbb      	ldrb	r3, [r7, #14]
 8007fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d004      	beq.n	8007fd4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007fca:	7bbb      	ldrb	r3, [r7, #14]
 8007fcc:	4619      	mov	r1, r3
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f001 f92d 	bl	800922e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 fcf7 	bl	80089c8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007fda:	7bbb      	ldrb	r3, [r7, #14]
 8007fdc:	4619      	mov	r1, r3
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f7ff fde2 	bl	8007ba8 <USBD_CoreFindEP>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007fe8:	7b7b      	ldrb	r3, [r7, #13]
 8007fea:	2bff      	cmp	r3, #255	; 0xff
 8007fec:	d01f      	beq.n	800802e <USBD_StdEPReq+0x1c6>
 8007fee:	7b7b      	ldrb	r3, [r7, #13]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d11c      	bne.n	800802e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007ff4:	7b7a      	ldrb	r2, [r7, #13]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007ffc:	7b7a      	ldrb	r2, [r7, #13]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	32ae      	adds	r2, #174	; 0xae
 8008002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d010      	beq.n	800802e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800800c:	7b7a      	ldrb	r2, [r7, #13]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	32ae      	adds	r2, #174	; 0xae
 8008012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	6839      	ldr	r1, [r7, #0]
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	4798      	blx	r3
 800801e:	4603      	mov	r3, r0
 8008020:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008022:	e004      	b.n	800802e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008024:	6839      	ldr	r1, [r7, #0]
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 fc03 	bl	8008832 <USBD_CtlError>
              break;
 800802c:	e000      	b.n	8008030 <USBD_StdEPReq+0x1c8>
              break;
 800802e:	bf00      	nop
          }
          break;
 8008030:	e0ab      	b.n	800818a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008038:	b2db      	uxtb	r3, r3
 800803a:	2b02      	cmp	r3, #2
 800803c:	d002      	beq.n	8008044 <USBD_StdEPReq+0x1dc>
 800803e:	2b03      	cmp	r3, #3
 8008040:	d032      	beq.n	80080a8 <USBD_StdEPReq+0x240>
 8008042:	e097      	b.n	8008174 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008044:	7bbb      	ldrb	r3, [r7, #14]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d007      	beq.n	800805a <USBD_StdEPReq+0x1f2>
 800804a:	7bbb      	ldrb	r3, [r7, #14]
 800804c:	2b80      	cmp	r3, #128	; 0x80
 800804e:	d004      	beq.n	800805a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008050:	6839      	ldr	r1, [r7, #0]
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 fbed 	bl	8008832 <USBD_CtlError>
                break;
 8008058:	e091      	b.n	800817e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800805a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800805e:	2b00      	cmp	r3, #0
 8008060:	da0b      	bge.n	800807a <USBD_StdEPReq+0x212>
 8008062:	7bbb      	ldrb	r3, [r7, #14]
 8008064:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008068:	4613      	mov	r3, r2
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	4413      	add	r3, r2
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	3310      	adds	r3, #16
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	4413      	add	r3, r2
 8008076:	3304      	adds	r3, #4
 8008078:	e00b      	b.n	8008092 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800807a:	7bbb      	ldrb	r3, [r7, #14]
 800807c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008080:	4613      	mov	r3, r2
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	4413      	add	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	4413      	add	r3, r2
 8008090:	3304      	adds	r3, #4
 8008092:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	2200      	movs	r2, #0
 8008098:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	2202      	movs	r2, #2
 800809e:	4619      	mov	r1, r3
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fc37 	bl	8008914 <USBD_CtlSendData>
              break;
 80080a6:	e06a      	b.n	800817e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80080a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	da11      	bge.n	80080d4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80080b0:	7bbb      	ldrb	r3, [r7, #14]
 80080b2:	f003 020f 	and.w	r2, r3, #15
 80080b6:	6879      	ldr	r1, [r7, #4]
 80080b8:	4613      	mov	r3, r2
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	4413      	add	r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	440b      	add	r3, r1
 80080c2:	3324      	adds	r3, #36	; 0x24
 80080c4:	881b      	ldrh	r3, [r3, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d117      	bne.n	80080fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80080ca:	6839      	ldr	r1, [r7, #0]
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fbb0 	bl	8008832 <USBD_CtlError>
                  break;
 80080d2:	e054      	b.n	800817e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80080d4:	7bbb      	ldrb	r3, [r7, #14]
 80080d6:	f003 020f 	and.w	r2, r3, #15
 80080da:	6879      	ldr	r1, [r7, #4]
 80080dc:	4613      	mov	r3, r2
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	4413      	add	r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	440b      	add	r3, r1
 80080e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80080ea:	881b      	ldrh	r3, [r3, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d104      	bne.n	80080fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80080f0:	6839      	ldr	r1, [r7, #0]
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 fb9d 	bl	8008832 <USBD_CtlError>
                  break;
 80080f8:	e041      	b.n	800817e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	da0b      	bge.n	800811a <USBD_StdEPReq+0x2b2>
 8008102:	7bbb      	ldrb	r3, [r7, #14]
 8008104:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008108:	4613      	mov	r3, r2
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	4413      	add	r3, r2
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	3310      	adds	r3, #16
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	4413      	add	r3, r2
 8008116:	3304      	adds	r3, #4
 8008118:	e00b      	b.n	8008132 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800811a:	7bbb      	ldrb	r3, [r7, #14]
 800811c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008120:	4613      	mov	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	4413      	add	r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	4413      	add	r3, r2
 8008130:	3304      	adds	r3, #4
 8008132:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008134:	7bbb      	ldrb	r3, [r7, #14]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d002      	beq.n	8008140 <USBD_StdEPReq+0x2d8>
 800813a:	7bbb      	ldrb	r3, [r7, #14]
 800813c:	2b80      	cmp	r3, #128	; 0x80
 800813e:	d103      	bne.n	8008148 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	2200      	movs	r2, #0
 8008144:	601a      	str	r2, [r3, #0]
 8008146:	e00e      	b.n	8008166 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008148:	7bbb      	ldrb	r3, [r7, #14]
 800814a:	4619      	mov	r1, r3
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f001 f88d 	bl	800926c <USBD_LL_IsStallEP>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d003      	beq.n	8008160 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	2201      	movs	r2, #1
 800815c:	601a      	str	r2, [r3, #0]
 800815e:	e002      	b.n	8008166 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	2200      	movs	r2, #0
 8008164:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	2202      	movs	r2, #2
 800816a:	4619      	mov	r1, r3
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 fbd1 	bl	8008914 <USBD_CtlSendData>
              break;
 8008172:	e004      	b.n	800817e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008174:	6839      	ldr	r1, [r7, #0]
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fb5b 	bl	8008832 <USBD_CtlError>
              break;
 800817c:	bf00      	nop
          }
          break;
 800817e:	e004      	b.n	800818a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008180:	6839      	ldr	r1, [r7, #0]
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fb55 	bl	8008832 <USBD_CtlError>
          break;
 8008188:	bf00      	nop
      }
      break;
 800818a:	e005      	b.n	8008198 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800818c:	6839      	ldr	r1, [r7, #0]
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fb4f 	bl	8008832 <USBD_CtlError>
      break;
 8008194:	e000      	b.n	8008198 <USBD_StdEPReq+0x330>
      break;
 8008196:	bf00      	nop
  }

  return ret;
 8008198:	7bfb      	ldrb	r3, [r7, #15]
}
 800819a:	4618      	mov	r0, r3
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
	...

080081a4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081ae:	2300      	movs	r3, #0
 80081b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80081b2:	2300      	movs	r3, #0
 80081b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80081b6:	2300      	movs	r3, #0
 80081b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	885b      	ldrh	r3, [r3, #2]
 80081be:	0a1b      	lsrs	r3, r3, #8
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	3b01      	subs	r3, #1
 80081c4:	2b06      	cmp	r3, #6
 80081c6:	f200 8128 	bhi.w	800841a <USBD_GetDescriptor+0x276>
 80081ca:	a201      	add	r2, pc, #4	; (adr r2, 80081d0 <USBD_GetDescriptor+0x2c>)
 80081cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d0:	080081ed 	.word	0x080081ed
 80081d4:	08008205 	.word	0x08008205
 80081d8:	08008245 	.word	0x08008245
 80081dc:	0800841b 	.word	0x0800841b
 80081e0:	0800841b 	.word	0x0800841b
 80081e4:	080083bb 	.word	0x080083bb
 80081e8:	080083e7 	.word	0x080083e7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	7c12      	ldrb	r2, [r2, #16]
 80081f8:	f107 0108 	add.w	r1, r7, #8
 80081fc:	4610      	mov	r0, r2
 80081fe:	4798      	blx	r3
 8008200:	60f8      	str	r0, [r7, #12]
      break;
 8008202:	e112      	b.n	800842a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	7c1b      	ldrb	r3, [r3, #16]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10d      	bne.n	8008228 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008214:	f107 0208 	add.w	r2, r7, #8
 8008218:	4610      	mov	r0, r2
 800821a:	4798      	blx	r3
 800821c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	3301      	adds	r3, #1
 8008222:	2202      	movs	r2, #2
 8008224:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008226:	e100      	b.n	800842a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800822e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008230:	f107 0208 	add.w	r2, r7, #8
 8008234:	4610      	mov	r0, r2
 8008236:	4798      	blx	r3
 8008238:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	3301      	adds	r3, #1
 800823e:	2202      	movs	r2, #2
 8008240:	701a      	strb	r2, [r3, #0]
      break;
 8008242:	e0f2      	b.n	800842a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	885b      	ldrh	r3, [r3, #2]
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2b05      	cmp	r3, #5
 800824c:	f200 80ac 	bhi.w	80083a8 <USBD_GetDescriptor+0x204>
 8008250:	a201      	add	r2, pc, #4	; (adr r2, 8008258 <USBD_GetDescriptor+0xb4>)
 8008252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008256:	bf00      	nop
 8008258:	08008271 	.word	0x08008271
 800825c:	080082a5 	.word	0x080082a5
 8008260:	080082d9 	.word	0x080082d9
 8008264:	0800830d 	.word	0x0800830d
 8008268:	08008341 	.word	0x08008341
 800826c:	08008375 	.word	0x08008375
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00b      	beq.n	8008294 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	7c12      	ldrb	r2, [r2, #16]
 8008288:	f107 0108 	add.w	r1, r7, #8
 800828c:	4610      	mov	r0, r2
 800828e:	4798      	blx	r3
 8008290:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008292:	e091      	b.n	80083b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008294:	6839      	ldr	r1, [r7, #0]
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 facb 	bl	8008832 <USBD_CtlError>
            err++;
 800829c:	7afb      	ldrb	r3, [r7, #11]
 800829e:	3301      	adds	r3, #1
 80082a0:	72fb      	strb	r3, [r7, #11]
          break;
 80082a2:	e089      	b.n	80083b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00b      	beq.n	80082c8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	7c12      	ldrb	r2, [r2, #16]
 80082bc:	f107 0108 	add.w	r1, r7, #8
 80082c0:	4610      	mov	r0, r2
 80082c2:	4798      	blx	r3
 80082c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082c6:	e077      	b.n	80083b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082c8:	6839      	ldr	r1, [r7, #0]
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fab1 	bl	8008832 <USBD_CtlError>
            err++;
 80082d0:	7afb      	ldrb	r3, [r7, #11]
 80082d2:	3301      	adds	r3, #1
 80082d4:	72fb      	strb	r3, [r7, #11]
          break;
 80082d6:	e06f      	b.n	80083b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00b      	beq.n	80082fc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	7c12      	ldrb	r2, [r2, #16]
 80082f0:	f107 0108 	add.w	r1, r7, #8
 80082f4:	4610      	mov	r0, r2
 80082f6:	4798      	blx	r3
 80082f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082fa:	e05d      	b.n	80083b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082fc:	6839      	ldr	r1, [r7, #0]
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 fa97 	bl	8008832 <USBD_CtlError>
            err++;
 8008304:	7afb      	ldrb	r3, [r7, #11]
 8008306:	3301      	adds	r3, #1
 8008308:	72fb      	strb	r3, [r7, #11]
          break;
 800830a:	e055      	b.n	80083b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d00b      	beq.n	8008330 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	7c12      	ldrb	r2, [r2, #16]
 8008324:	f107 0108 	add.w	r1, r7, #8
 8008328:	4610      	mov	r0, r2
 800832a:	4798      	blx	r3
 800832c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800832e:	e043      	b.n	80083b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008330:	6839      	ldr	r1, [r7, #0]
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fa7d 	bl	8008832 <USBD_CtlError>
            err++;
 8008338:	7afb      	ldrb	r3, [r7, #11]
 800833a:	3301      	adds	r3, #1
 800833c:	72fb      	strb	r3, [r7, #11]
          break;
 800833e:	e03b      	b.n	80083b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008346:	695b      	ldr	r3, [r3, #20]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00b      	beq.n	8008364 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008352:	695b      	ldr	r3, [r3, #20]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	7c12      	ldrb	r2, [r2, #16]
 8008358:	f107 0108 	add.w	r1, r7, #8
 800835c:	4610      	mov	r0, r2
 800835e:	4798      	blx	r3
 8008360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008362:	e029      	b.n	80083b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008364:	6839      	ldr	r1, [r7, #0]
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fa63 	bl	8008832 <USBD_CtlError>
            err++;
 800836c:	7afb      	ldrb	r3, [r7, #11]
 800836e:	3301      	adds	r3, #1
 8008370:	72fb      	strb	r3, [r7, #11]
          break;
 8008372:	e021      	b.n	80083b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800837a:	699b      	ldr	r3, [r3, #24]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00b      	beq.n	8008398 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008386:	699b      	ldr	r3, [r3, #24]
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	7c12      	ldrb	r2, [r2, #16]
 800838c:	f107 0108 	add.w	r1, r7, #8
 8008390:	4610      	mov	r0, r2
 8008392:	4798      	blx	r3
 8008394:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008396:	e00f      	b.n	80083b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008398:	6839      	ldr	r1, [r7, #0]
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 fa49 	bl	8008832 <USBD_CtlError>
            err++;
 80083a0:	7afb      	ldrb	r3, [r7, #11]
 80083a2:	3301      	adds	r3, #1
 80083a4:	72fb      	strb	r3, [r7, #11]
          break;
 80083a6:	e007      	b.n	80083b8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80083a8:	6839      	ldr	r1, [r7, #0]
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fa41 	bl	8008832 <USBD_CtlError>
          err++;
 80083b0:	7afb      	ldrb	r3, [r7, #11]
 80083b2:	3301      	adds	r3, #1
 80083b4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80083b6:	bf00      	nop
      }
      break;
 80083b8:	e037      	b.n	800842a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	7c1b      	ldrb	r3, [r3, #16]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d109      	bne.n	80083d6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ca:	f107 0208 	add.w	r2, r7, #8
 80083ce:	4610      	mov	r0, r2
 80083d0:	4798      	blx	r3
 80083d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083d4:	e029      	b.n	800842a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80083d6:	6839      	ldr	r1, [r7, #0]
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 fa2a 	bl	8008832 <USBD_CtlError>
        err++;
 80083de:	7afb      	ldrb	r3, [r7, #11]
 80083e0:	3301      	adds	r3, #1
 80083e2:	72fb      	strb	r3, [r7, #11]
      break;
 80083e4:	e021      	b.n	800842a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	7c1b      	ldrb	r3, [r3, #16]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d10d      	bne.n	800840a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f6:	f107 0208 	add.w	r2, r7, #8
 80083fa:	4610      	mov	r0, r2
 80083fc:	4798      	blx	r3
 80083fe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	3301      	adds	r3, #1
 8008404:	2207      	movs	r2, #7
 8008406:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008408:	e00f      	b.n	800842a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800840a:	6839      	ldr	r1, [r7, #0]
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 fa10 	bl	8008832 <USBD_CtlError>
        err++;
 8008412:	7afb      	ldrb	r3, [r7, #11]
 8008414:	3301      	adds	r3, #1
 8008416:	72fb      	strb	r3, [r7, #11]
      break;
 8008418:	e007      	b.n	800842a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800841a:	6839      	ldr	r1, [r7, #0]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fa08 	bl	8008832 <USBD_CtlError>
      err++;
 8008422:	7afb      	ldrb	r3, [r7, #11]
 8008424:	3301      	adds	r3, #1
 8008426:	72fb      	strb	r3, [r7, #11]
      break;
 8008428:	bf00      	nop
  }

  if (err != 0U)
 800842a:	7afb      	ldrb	r3, [r7, #11]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d11e      	bne.n	800846e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	88db      	ldrh	r3, [r3, #6]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d016      	beq.n	8008466 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008438:	893b      	ldrh	r3, [r7, #8]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00e      	beq.n	800845c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	88da      	ldrh	r2, [r3, #6]
 8008442:	893b      	ldrh	r3, [r7, #8]
 8008444:	4293      	cmp	r3, r2
 8008446:	bf28      	it	cs
 8008448:	4613      	movcs	r3, r2
 800844a:	b29b      	uxth	r3, r3
 800844c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800844e:	893b      	ldrh	r3, [r7, #8]
 8008450:	461a      	mov	r2, r3
 8008452:	68f9      	ldr	r1, [r7, #12]
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 fa5d 	bl	8008914 <USBD_CtlSendData>
 800845a:	e009      	b.n	8008470 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800845c:	6839      	ldr	r1, [r7, #0]
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f9e7 	bl	8008832 <USBD_CtlError>
 8008464:	e004      	b.n	8008470 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 faae 	bl	80089c8 <USBD_CtlSendStatus>
 800846c:	e000      	b.n	8008470 <USBD_GetDescriptor+0x2cc>
    return;
 800846e:	bf00      	nop
  }
}
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop

08008478 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	889b      	ldrh	r3, [r3, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d131      	bne.n	80084ee <USBD_SetAddress+0x76>
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	88db      	ldrh	r3, [r3, #6]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d12d      	bne.n	80084ee <USBD_SetAddress+0x76>
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	885b      	ldrh	r3, [r3, #2]
 8008496:	2b7f      	cmp	r3, #127	; 0x7f
 8008498:	d829      	bhi.n	80084ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	885b      	ldrh	r3, [r3, #2]
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	2b03      	cmp	r3, #3
 80084b0:	d104      	bne.n	80084bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80084b2:	6839      	ldr	r1, [r7, #0]
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 f9bc 	bl	8008832 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ba:	e01d      	b.n	80084f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	7bfa      	ldrb	r2, [r7, #15]
 80084c0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80084c4:	7bfb      	ldrb	r3, [r7, #15]
 80084c6:	4619      	mov	r1, r3
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 fefb 	bl	80092c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 fa7a 	bl	80089c8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d004      	beq.n	80084e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2202      	movs	r2, #2
 80084de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084e2:	e009      	b.n	80084f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ec:	e004      	b.n	80084f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80084ee:	6839      	ldr	r1, [r7, #0]
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f99e 	bl	8008832 <USBD_CtlError>
  }
}
 80084f6:	bf00      	nop
 80084f8:	bf00      	nop
 80084fa:	3710      	adds	r7, #16
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800850a:	2300      	movs	r3, #0
 800850c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	885b      	ldrh	r3, [r3, #2]
 8008512:	b2da      	uxtb	r2, r3
 8008514:	4b4e      	ldr	r3, [pc, #312]	; (8008650 <USBD_SetConfig+0x150>)
 8008516:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008518:	4b4d      	ldr	r3, [pc, #308]	; (8008650 <USBD_SetConfig+0x150>)
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	2b01      	cmp	r3, #1
 800851e:	d905      	bls.n	800852c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 f985 	bl	8008832 <USBD_CtlError>
    return USBD_FAIL;
 8008528:	2303      	movs	r3, #3
 800852a:	e08c      	b.n	8008646 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008532:	b2db      	uxtb	r3, r3
 8008534:	2b02      	cmp	r3, #2
 8008536:	d002      	beq.n	800853e <USBD_SetConfig+0x3e>
 8008538:	2b03      	cmp	r3, #3
 800853a:	d029      	beq.n	8008590 <USBD_SetConfig+0x90>
 800853c:	e075      	b.n	800862a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800853e:	4b44      	ldr	r3, [pc, #272]	; (8008650 <USBD_SetConfig+0x150>)
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d020      	beq.n	8008588 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008546:	4b42      	ldr	r3, [pc, #264]	; (8008650 <USBD_SetConfig+0x150>)
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	461a      	mov	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008550:	4b3f      	ldr	r3, [pc, #252]	; (8008650 <USBD_SetConfig+0x150>)
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	4619      	mov	r1, r3
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f7fe ffe7 	bl	800752a <USBD_SetClassConfig>
 800855c:	4603      	mov	r3, r0
 800855e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008560:	7bfb      	ldrb	r3, [r7, #15]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d008      	beq.n	8008578 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008566:	6839      	ldr	r1, [r7, #0]
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 f962 	bl	8008832 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2202      	movs	r2, #2
 8008572:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008576:	e065      	b.n	8008644 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 fa25 	bl	80089c8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2203      	movs	r2, #3
 8008582:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008586:	e05d      	b.n	8008644 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 fa1d 	bl	80089c8 <USBD_CtlSendStatus>
      break;
 800858e:	e059      	b.n	8008644 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008590:	4b2f      	ldr	r3, [pc, #188]	; (8008650 <USBD_SetConfig+0x150>)
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d112      	bne.n	80085be <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2202      	movs	r2, #2
 800859c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80085a0:	4b2b      	ldr	r3, [pc, #172]	; (8008650 <USBD_SetConfig+0x150>)
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	461a      	mov	r2, r3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80085aa:	4b29      	ldr	r3, [pc, #164]	; (8008650 <USBD_SetConfig+0x150>)
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	4619      	mov	r1, r3
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f7fe ffd6 	bl	8007562 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 fa06 	bl	80089c8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085bc:	e042      	b.n	8008644 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80085be:	4b24      	ldr	r3, [pc, #144]	; (8008650 <USBD_SetConfig+0x150>)
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	461a      	mov	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d02a      	beq.n	8008622 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	4619      	mov	r1, r3
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f7fe ffc4 	bl	8007562 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80085da:	4b1d      	ldr	r3, [pc, #116]	; (8008650 <USBD_SetConfig+0x150>)
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	461a      	mov	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80085e4:	4b1a      	ldr	r3, [pc, #104]	; (8008650 <USBD_SetConfig+0x150>)
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	4619      	mov	r1, r3
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f7fe ff9d 	bl	800752a <USBD_SetClassConfig>
 80085f0:	4603      	mov	r3, r0
 80085f2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80085f4:	7bfb      	ldrb	r3, [r7, #15]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00f      	beq.n	800861a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80085fa:	6839      	ldr	r1, [r7, #0]
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 f918 	bl	8008832 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	b2db      	uxtb	r3, r3
 8008608:	4619      	mov	r1, r3
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f7fe ffa9 	bl	8007562 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2202      	movs	r2, #2
 8008614:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008618:	e014      	b.n	8008644 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 f9d4 	bl	80089c8 <USBD_CtlSendStatus>
      break;
 8008620:	e010      	b.n	8008644 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f9d0 	bl	80089c8 <USBD_CtlSendStatus>
      break;
 8008628:	e00c      	b.n	8008644 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800862a:	6839      	ldr	r1, [r7, #0]
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 f900 	bl	8008832 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008632:	4b07      	ldr	r3, [pc, #28]	; (8008650 <USBD_SetConfig+0x150>)
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	4619      	mov	r1, r3
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f7fe ff92 	bl	8007562 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800863e:	2303      	movs	r3, #3
 8008640:	73fb      	strb	r3, [r7, #15]
      break;
 8008642:	bf00      	nop
  }

  return ret;
 8008644:	7bfb      	ldrb	r3, [r7, #15]
}
 8008646:	4618      	mov	r0, r3
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	20000270 	.word	0x20000270

08008654 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	88db      	ldrh	r3, [r3, #6]
 8008662:	2b01      	cmp	r3, #1
 8008664:	d004      	beq.n	8008670 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008666:	6839      	ldr	r1, [r7, #0]
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 f8e2 	bl	8008832 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800866e:	e023      	b.n	80086b8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008676:	b2db      	uxtb	r3, r3
 8008678:	2b02      	cmp	r3, #2
 800867a:	dc02      	bgt.n	8008682 <USBD_GetConfig+0x2e>
 800867c:	2b00      	cmp	r3, #0
 800867e:	dc03      	bgt.n	8008688 <USBD_GetConfig+0x34>
 8008680:	e015      	b.n	80086ae <USBD_GetConfig+0x5a>
 8008682:	2b03      	cmp	r3, #3
 8008684:	d00b      	beq.n	800869e <USBD_GetConfig+0x4a>
 8008686:	e012      	b.n	80086ae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	3308      	adds	r3, #8
 8008692:	2201      	movs	r2, #1
 8008694:	4619      	mov	r1, r3
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 f93c 	bl	8008914 <USBD_CtlSendData>
        break;
 800869c:	e00c      	b.n	80086b8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	3304      	adds	r3, #4
 80086a2:	2201      	movs	r2, #1
 80086a4:	4619      	mov	r1, r3
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 f934 	bl	8008914 <USBD_CtlSendData>
        break;
 80086ac:	e004      	b.n	80086b8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80086ae:	6839      	ldr	r1, [r7, #0]
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f8be 	bl	8008832 <USBD_CtlError>
        break;
 80086b6:	bf00      	nop
}
 80086b8:	bf00      	nop
 80086ba:	3708      	adds	r7, #8
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	3b01      	subs	r3, #1
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d81e      	bhi.n	8008716 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	88db      	ldrh	r3, [r3, #6]
 80086dc:	2b02      	cmp	r3, #2
 80086de:	d004      	beq.n	80086ea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80086e0:	6839      	ldr	r1, [r7, #0]
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 f8a5 	bl	8008832 <USBD_CtlError>
        break;
 80086e8:	e01a      	b.n	8008720 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2201      	movs	r2, #1
 80086ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d005      	beq.n	8008706 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	f043 0202 	orr.w	r2, r3, #2
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	330c      	adds	r3, #12
 800870a:	2202      	movs	r2, #2
 800870c:	4619      	mov	r1, r3
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 f900 	bl	8008914 <USBD_CtlSendData>
      break;
 8008714:	e004      	b.n	8008720 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008716:	6839      	ldr	r1, [r7, #0]
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 f88a 	bl	8008832 <USBD_CtlError>
      break;
 800871e:	bf00      	nop
  }
}
 8008720:	bf00      	nop
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	885b      	ldrh	r3, [r3, #2]
 8008736:	2b01      	cmp	r3, #1
 8008738:	d107      	bne.n	800874a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2201      	movs	r2, #1
 800873e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 f940 	bl	80089c8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008748:	e013      	b.n	8008772 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	885b      	ldrh	r3, [r3, #2]
 800874e:	2b02      	cmp	r3, #2
 8008750:	d10b      	bne.n	800876a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	889b      	ldrh	r3, [r3, #4]
 8008756:	0a1b      	lsrs	r3, r3, #8
 8008758:	b29b      	uxth	r3, r3
 800875a:	b2da      	uxtb	r2, r3
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f930 	bl	80089c8 <USBD_CtlSendStatus>
}
 8008768:	e003      	b.n	8008772 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800876a:	6839      	ldr	r1, [r7, #0]
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 f860 	bl	8008832 <USBD_CtlError>
}
 8008772:	bf00      	nop
 8008774:	3708      	adds	r7, #8
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b082      	sub	sp, #8
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
 8008782:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800878a:	b2db      	uxtb	r3, r3
 800878c:	3b01      	subs	r3, #1
 800878e:	2b02      	cmp	r3, #2
 8008790:	d80b      	bhi.n	80087aa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	885b      	ldrh	r3, [r3, #2]
 8008796:	2b01      	cmp	r3, #1
 8008798:	d10c      	bne.n	80087b4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f910 	bl	80089c8 <USBD_CtlSendStatus>
      }
      break;
 80087a8:	e004      	b.n	80087b4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80087aa:	6839      	ldr	r1, [r7, #0]
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f840 	bl	8008832 <USBD_CtlError>
      break;
 80087b2:	e000      	b.n	80087b6 <USBD_ClrFeature+0x3c>
      break;
 80087b4:	bf00      	nop
  }
}
 80087b6:	bf00      	nop
 80087b8:	3708      	adds	r7, #8
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}

080087be <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b084      	sub	sp, #16
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
 80087c6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	781a      	ldrb	r2, [r3, #0]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	3301      	adds	r3, #1
 80087d8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	781a      	ldrb	r2, [r3, #0]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	3301      	adds	r3, #1
 80087e6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f7ff fa41 	bl	8007c70 <SWAPBYTE>
 80087ee:	4603      	mov	r3, r0
 80087f0:	461a      	mov	r2, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	3301      	adds	r3, #1
 80087fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	3301      	adds	r3, #1
 8008800:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008802:	68f8      	ldr	r0, [r7, #12]
 8008804:	f7ff fa34 	bl	8007c70 <SWAPBYTE>
 8008808:	4603      	mov	r3, r0
 800880a:	461a      	mov	r2, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	3301      	adds	r3, #1
 8008814:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	3301      	adds	r3, #1
 800881a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f7ff fa27 	bl	8007c70 <SWAPBYTE>
 8008822:	4603      	mov	r3, r0
 8008824:	461a      	mov	r2, r3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	80da      	strh	r2, [r3, #6]
}
 800882a:	bf00      	nop
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b082      	sub	sp, #8
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
 800883a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800883c:	2180      	movs	r1, #128	; 0x80
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 fcd6 	bl	80091f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008844:	2100      	movs	r1, #0
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fcd2 	bl	80091f0 <USBD_LL_StallEP>
}
 800884c:	bf00      	nop
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b086      	sub	sp, #24
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008860:	2300      	movs	r3, #0
 8008862:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d036      	beq.n	80088d8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800886e:	6938      	ldr	r0, [r7, #16]
 8008870:	f000 f836 	bl	80088e0 <USBD_GetLen>
 8008874:	4603      	mov	r3, r0
 8008876:	3301      	adds	r3, #1
 8008878:	b29b      	uxth	r3, r3
 800887a:	005b      	lsls	r3, r3, #1
 800887c:	b29a      	uxth	r2, r3
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008882:	7dfb      	ldrb	r3, [r7, #23]
 8008884:	68ba      	ldr	r2, [r7, #8]
 8008886:	4413      	add	r3, r2
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	7812      	ldrb	r2, [r2, #0]
 800888c:	701a      	strb	r2, [r3, #0]
  idx++;
 800888e:	7dfb      	ldrb	r3, [r7, #23]
 8008890:	3301      	adds	r3, #1
 8008892:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008894:	7dfb      	ldrb	r3, [r7, #23]
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	4413      	add	r3, r2
 800889a:	2203      	movs	r2, #3
 800889c:	701a      	strb	r2, [r3, #0]
  idx++;
 800889e:	7dfb      	ldrb	r3, [r7, #23]
 80088a0:	3301      	adds	r3, #1
 80088a2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80088a4:	e013      	b.n	80088ce <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80088a6:	7dfb      	ldrb	r3, [r7, #23]
 80088a8:	68ba      	ldr	r2, [r7, #8]
 80088aa:	4413      	add	r3, r2
 80088ac:	693a      	ldr	r2, [r7, #16]
 80088ae:	7812      	ldrb	r2, [r2, #0]
 80088b0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	3301      	adds	r3, #1
 80088b6:	613b      	str	r3, [r7, #16]
    idx++;
 80088b8:	7dfb      	ldrb	r3, [r7, #23]
 80088ba:	3301      	adds	r3, #1
 80088bc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80088be:	7dfb      	ldrb	r3, [r7, #23]
 80088c0:	68ba      	ldr	r2, [r7, #8]
 80088c2:	4413      	add	r3, r2
 80088c4:	2200      	movs	r2, #0
 80088c6:	701a      	strb	r2, [r3, #0]
    idx++;
 80088c8:	7dfb      	ldrb	r3, [r7, #23]
 80088ca:	3301      	adds	r3, #1
 80088cc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d1e7      	bne.n	80088a6 <USBD_GetString+0x52>
 80088d6:	e000      	b.n	80088da <USBD_GetString+0x86>
    return;
 80088d8:	bf00      	nop
  }
}
 80088da:	3718      	adds	r7, #24
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80088e8:	2300      	movs	r3, #0
 80088ea:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80088f0:	e005      	b.n	80088fe <USBD_GetLen+0x1e>
  {
    len++;
 80088f2:	7bfb      	ldrb	r3, [r7, #15]
 80088f4:	3301      	adds	r3, #1
 80088f6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	3301      	adds	r3, #1
 80088fc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1f5      	bne.n	80088f2 <USBD_GetLen+0x12>
  }

  return len;
 8008906:	7bfb      	ldrb	r3, [r7, #15]
}
 8008908:	4618      	mov	r0, r3
 800890a:	3714      	adds	r7, #20
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2202      	movs	r2, #2
 8008924:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	68ba      	ldr	r2, [r7, #8]
 8008938:	2100      	movs	r1, #0
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f000 fce1 	bl	8009302 <USBD_LL_Transmit>

  return USBD_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b084      	sub	sp, #16
 800894e:	af00      	add	r7, sp, #0
 8008950:	60f8      	str	r0, [r7, #12]
 8008952:	60b9      	str	r1, [r7, #8]
 8008954:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	2100      	movs	r1, #0
 800895c:	68f8      	ldr	r0, [r7, #12]
 800895e:	f000 fcd0 	bl	8009302 <USBD_LL_Transmit>

  return USBD_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3710      	adds	r7, #16
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2203      	movs	r2, #3
 800897c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	2100      	movs	r1, #0
 8008996:	68f8      	ldr	r0, [r7, #12]
 8008998:	f000 fcd4 	bl	8009344 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b084      	sub	sp, #16
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	60f8      	str	r0, [r7, #12]
 80089ae:	60b9      	str	r1, [r7, #8]
 80089b0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	68ba      	ldr	r2, [r7, #8]
 80089b6:	2100      	movs	r1, #0
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	f000 fcc3 	bl	8009344 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2204      	movs	r2, #4
 80089d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80089d8:	2300      	movs	r3, #0
 80089da:	2200      	movs	r2, #0
 80089dc:	2100      	movs	r1, #0
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 fc8f 	bl	8009302 <USBD_LL_Transmit>

  return USBD_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b082      	sub	sp, #8
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2205      	movs	r2, #5
 80089fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089fe:	2300      	movs	r3, #0
 8008a00:	2200      	movs	r2, #0
 8008a02:	2100      	movs	r1, #0
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 fc9d 	bl	8009344 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3708      	adds	r7, #8
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008a18:	2200      	movs	r2, #0
 8008a1a:	4912      	ldr	r1, [pc, #72]	; (8008a64 <MX_USB_DEVICE_Init+0x50>)
 8008a1c:	4812      	ldr	r0, [pc, #72]	; (8008a68 <MX_USB_DEVICE_Init+0x54>)
 8008a1e:	f7fe fd07 	bl	8007430 <USBD_Init>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d001      	beq.n	8008a2c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008a28:	f7f7 ff42 	bl	80008b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008a2c:	490f      	ldr	r1, [pc, #60]	; (8008a6c <MX_USB_DEVICE_Init+0x58>)
 8008a2e:	480e      	ldr	r0, [pc, #56]	; (8008a68 <MX_USB_DEVICE_Init+0x54>)
 8008a30:	f7fe fd2e 	bl	8007490 <USBD_RegisterClass>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d001      	beq.n	8008a3e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008a3a:	f7f7 ff39 	bl	80008b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008a3e:	490c      	ldr	r1, [pc, #48]	; (8008a70 <MX_USB_DEVICE_Init+0x5c>)
 8008a40:	4809      	ldr	r0, [pc, #36]	; (8008a68 <MX_USB_DEVICE_Init+0x54>)
 8008a42:	f7fe fc1f 	bl	8007284 <USBD_CDC_RegisterInterface>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d001      	beq.n	8008a50 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008a4c:	f7f7 ff30 	bl	80008b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008a50:	4805      	ldr	r0, [pc, #20]	; (8008a68 <MX_USB_DEVICE_Init+0x54>)
 8008a52:	f7fe fd53 	bl	80074fc <USBD_Start>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d001      	beq.n	8008a60 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008a5c:	f7f7 ff28 	bl	80008b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008a60:	bf00      	nop
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	200000ac 	.word	0x200000ac
 8008a68:	20000274 	.word	0x20000274
 8008a6c:	20000018 	.word	0x20000018
 8008a70:	20000098 	.word	0x20000098

08008a74 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008a78:	2200      	movs	r2, #0
 8008a7a:	4905      	ldr	r1, [pc, #20]	; (8008a90 <CDC_Init_FS+0x1c>)
 8008a7c:	4805      	ldr	r0, [pc, #20]	; (8008a94 <CDC_Init_FS+0x20>)
 8008a7e:	f7fe fc1b 	bl	80072b8 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008a82:	4905      	ldr	r1, [pc, #20]	; (8008a98 <CDC_Init_FS+0x24>)
 8008a84:	4803      	ldr	r0, [pc, #12]	; (8008a94 <CDC_Init_FS+0x20>)
 8008a86:	f7fe fc39 	bl	80072fc <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 8008a8a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	20000950 	.word	0x20000950
 8008a94:	20000274 	.word	0x20000274
 8008a98:	20000550 	.word	0x20000550

08008a9c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
    return (USBD_OK);
 8008aa0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	6039      	str	r1, [r7, #0]
 8008ab6:	71fb      	strb	r3, [r7, #7]
 8008ab8:	4613      	mov	r3, r2
 8008aba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
    switch (cmd) {
 8008abc:	79fb      	ldrb	r3, [r7, #7]
 8008abe:	2b23      	cmp	r3, #35	; 0x23
 8008ac0:	d84a      	bhi.n	8008b58 <CDC_Control_FS+0xac>
 8008ac2:	a201      	add	r2, pc, #4	; (adr r2, 8008ac8 <CDC_Control_FS+0x1c>)
 8008ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac8:	08008b59 	.word	0x08008b59
 8008acc:	08008b59 	.word	0x08008b59
 8008ad0:	08008b59 	.word	0x08008b59
 8008ad4:	08008b59 	.word	0x08008b59
 8008ad8:	08008b59 	.word	0x08008b59
 8008adc:	08008b59 	.word	0x08008b59
 8008ae0:	08008b59 	.word	0x08008b59
 8008ae4:	08008b59 	.word	0x08008b59
 8008ae8:	08008b59 	.word	0x08008b59
 8008aec:	08008b59 	.word	0x08008b59
 8008af0:	08008b59 	.word	0x08008b59
 8008af4:	08008b59 	.word	0x08008b59
 8008af8:	08008b59 	.word	0x08008b59
 8008afc:	08008b59 	.word	0x08008b59
 8008b00:	08008b59 	.word	0x08008b59
 8008b04:	08008b59 	.word	0x08008b59
 8008b08:	08008b59 	.word	0x08008b59
 8008b0c:	08008b59 	.word	0x08008b59
 8008b10:	08008b59 	.word	0x08008b59
 8008b14:	08008b59 	.word	0x08008b59
 8008b18:	08008b59 	.word	0x08008b59
 8008b1c:	08008b59 	.word	0x08008b59
 8008b20:	08008b59 	.word	0x08008b59
 8008b24:	08008b59 	.word	0x08008b59
 8008b28:	08008b59 	.word	0x08008b59
 8008b2c:	08008b59 	.word	0x08008b59
 8008b30:	08008b59 	.word	0x08008b59
 8008b34:	08008b59 	.word	0x08008b59
 8008b38:	08008b59 	.word	0x08008b59
 8008b3c:	08008b59 	.word	0x08008b59
 8008b40:	08008b59 	.word	0x08008b59
 8008b44:	08008b59 	.word	0x08008b59
 8008b48:	08008b59 	.word	0x08008b59
 8008b4c:	08008b59 	.word	0x08008b59
 8008b50:	08008b59 	.word	0x08008b59
 8008b54:	08008b59 	.word	0x08008b59
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 8008b58:	bf00      	nop
    }

    return (USBD_OK);
 8008b5a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008b72:	6879      	ldr	r1, [r7, #4]
 8008b74:	4805      	ldr	r0, [pc, #20]	; (8008b8c <CDC_Receive_FS+0x24>)
 8008b76:	f7fe fbc1 	bl	80072fc <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008b7a:	4804      	ldr	r0, [pc, #16]	; (8008b8c <CDC_Receive_FS+0x24>)
 8008b7c:	f7fe fc22 	bl	80073c4 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 8008b80:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3708      	adds	r7, #8
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	20000274 	.word	0x20000274

08008b90 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	460b      	mov	r3, r1
 8008b9a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 8008ba0:	4b0d      	ldr	r3, [pc, #52]	; (8008bd8 <CDC_Transmit_FS+0x48>)
 8008ba2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ba6:	60bb      	str	r3, [r7, #8]
    if (hcdc->TxState != 0) {
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d001      	beq.n	8008bb6 <CDC_Transmit_FS+0x26>
        return USBD_BUSY;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e00b      	b.n	8008bce <CDC_Transmit_FS+0x3e>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008bb6:	887b      	ldrh	r3, [r7, #2]
 8008bb8:	461a      	mov	r2, r3
 8008bba:	6879      	ldr	r1, [r7, #4]
 8008bbc:	4806      	ldr	r0, [pc, #24]	; (8008bd8 <CDC_Transmit_FS+0x48>)
 8008bbe:	f7fe fb7b 	bl	80072b8 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008bc2:	4805      	ldr	r0, [pc, #20]	; (8008bd8 <CDC_Transmit_FS+0x48>)
 8008bc4:	f7fe fbb8 	bl	8007338 <USBD_CDC_TransmitPacket>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	20000274 	.word	0x20000274

08008bdc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b087      	sub	sp, #28
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	4613      	mov	r3, r2
 8008be8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008bee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	371c      	adds	r7, #28
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr
	...

08008c00 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	4603      	mov	r3, r0
 8008c08:	6039      	str	r1, [r7, #0]
 8008c0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	2212      	movs	r2, #18
 8008c10:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008c12:	4b03      	ldr	r3, [pc, #12]	; (8008c20 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr
 8008c20:	200000c8 	.word	0x200000c8

08008c24 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	6039      	str	r1, [r7, #0]
 8008c2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	2204      	movs	r2, #4
 8008c34:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008c36:	4b03      	ldr	r3, [pc, #12]	; (8008c44 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr
 8008c44:	200000dc 	.word	0x200000dc

08008c48 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	4603      	mov	r3, r0
 8008c50:	6039      	str	r1, [r7, #0]
 8008c52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c54:	79fb      	ldrb	r3, [r7, #7]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d105      	bne.n	8008c66 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c5a:	683a      	ldr	r2, [r7, #0]
 8008c5c:	4907      	ldr	r1, [pc, #28]	; (8008c7c <USBD_FS_ProductStrDescriptor+0x34>)
 8008c5e:	4808      	ldr	r0, [pc, #32]	; (8008c80 <USBD_FS_ProductStrDescriptor+0x38>)
 8008c60:	f7ff fdf8 	bl	8008854 <USBD_GetString>
 8008c64:	e004      	b.n	8008c70 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c66:	683a      	ldr	r2, [r7, #0]
 8008c68:	4904      	ldr	r1, [pc, #16]	; (8008c7c <USBD_FS_ProductStrDescriptor+0x34>)
 8008c6a:	4805      	ldr	r0, [pc, #20]	; (8008c80 <USBD_FS_ProductStrDescriptor+0x38>)
 8008c6c:	f7ff fdf2 	bl	8008854 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c70:	4b02      	ldr	r3, [pc, #8]	; (8008c7c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	20000d50 	.word	0x20000d50
 8008c80:	08009df4 	.word	0x08009df4

08008c84 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	6039      	str	r1, [r7, #0]
 8008c8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008c90:	683a      	ldr	r2, [r7, #0]
 8008c92:	4904      	ldr	r1, [pc, #16]	; (8008ca4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008c94:	4804      	ldr	r0, [pc, #16]	; (8008ca8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008c96:	f7ff fddd 	bl	8008854 <USBD_GetString>
  return USBD_StrDesc;
 8008c9a:	4b02      	ldr	r3, [pc, #8]	; (8008ca4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3708      	adds	r7, #8
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	20000d50 	.word	0x20000d50
 8008ca8:	08009e0c 	.word	0x08009e0c

08008cac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	6039      	str	r1, [r7, #0]
 8008cb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	221a      	movs	r2, #26
 8008cbc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008cbe:	f000 f843 	bl	8008d48 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008cc2:	4b02      	ldr	r3, [pc, #8]	; (8008ccc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3708      	adds	r7, #8
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	200000e0 	.word	0x200000e0

08008cd0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	6039      	str	r1, [r7, #0]
 8008cda:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008cdc:	79fb      	ldrb	r3, [r7, #7]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d105      	bne.n	8008cee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008ce2:	683a      	ldr	r2, [r7, #0]
 8008ce4:	4907      	ldr	r1, [pc, #28]	; (8008d04 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ce6:	4808      	ldr	r0, [pc, #32]	; (8008d08 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ce8:	f7ff fdb4 	bl	8008854 <USBD_GetString>
 8008cec:	e004      	b.n	8008cf8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008cee:	683a      	ldr	r2, [r7, #0]
 8008cf0:	4904      	ldr	r1, [pc, #16]	; (8008d04 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008cf2:	4805      	ldr	r0, [pc, #20]	; (8008d08 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008cf4:	f7ff fdae 	bl	8008854 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cf8:	4b02      	ldr	r3, [pc, #8]	; (8008d04 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	20000d50 	.word	0x20000d50
 8008d08:	08009e20 	.word	0x08009e20

08008d0c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	4603      	mov	r3, r0
 8008d14:	6039      	str	r1, [r7, #0]
 8008d16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d18:	79fb      	ldrb	r3, [r7, #7]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d105      	bne.n	8008d2a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d1e:	683a      	ldr	r2, [r7, #0]
 8008d20:	4907      	ldr	r1, [pc, #28]	; (8008d40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d22:	4808      	ldr	r0, [pc, #32]	; (8008d44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d24:	f7ff fd96 	bl	8008854 <USBD_GetString>
 8008d28:	e004      	b.n	8008d34 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d2a:	683a      	ldr	r2, [r7, #0]
 8008d2c:	4904      	ldr	r1, [pc, #16]	; (8008d40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d2e:	4805      	ldr	r0, [pc, #20]	; (8008d44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d30:	f7ff fd90 	bl	8008854 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d34:	4b02      	ldr	r3, [pc, #8]	; (8008d40 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3708      	adds	r7, #8
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	20000d50 	.word	0x20000d50
 8008d44:	08009e2c 	.word	0x08009e2c

08008d48 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008d4e:	4b0f      	ldr	r3, [pc, #60]	; (8008d8c <Get_SerialNum+0x44>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008d54:	4b0e      	ldr	r3, [pc, #56]	; (8008d90 <Get_SerialNum+0x48>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008d5a:	4b0e      	ldr	r3, [pc, #56]	; (8008d94 <Get_SerialNum+0x4c>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4413      	add	r3, r2
 8008d66:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d009      	beq.n	8008d82 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008d6e:	2208      	movs	r2, #8
 8008d70:	4909      	ldr	r1, [pc, #36]	; (8008d98 <Get_SerialNum+0x50>)
 8008d72:	68f8      	ldr	r0, [r7, #12]
 8008d74:	f000 f814 	bl	8008da0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008d78:	2204      	movs	r2, #4
 8008d7a:	4908      	ldr	r1, [pc, #32]	; (8008d9c <Get_SerialNum+0x54>)
 8008d7c:	68b8      	ldr	r0, [r7, #8]
 8008d7e:	f000 f80f 	bl	8008da0 <IntToUnicode>
  }
}
 8008d82:	bf00      	nop
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	1fff7a10 	.word	0x1fff7a10
 8008d90:	1fff7a14 	.word	0x1fff7a14
 8008d94:	1fff7a18 	.word	0x1fff7a18
 8008d98:	200000e2 	.word	0x200000e2
 8008d9c:	200000f2 	.word	0x200000f2

08008da0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b087      	sub	sp, #28
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	4613      	mov	r3, r2
 8008dac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008dae:	2300      	movs	r3, #0
 8008db0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008db2:	2300      	movs	r3, #0
 8008db4:	75fb      	strb	r3, [r7, #23]
 8008db6:	e027      	b.n	8008e08 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	0f1b      	lsrs	r3, r3, #28
 8008dbc:	2b09      	cmp	r3, #9
 8008dbe:	d80b      	bhi.n	8008dd8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	0f1b      	lsrs	r3, r3, #28
 8008dc4:	b2da      	uxtb	r2, r3
 8008dc6:	7dfb      	ldrb	r3, [r7, #23]
 8008dc8:	005b      	lsls	r3, r3, #1
 8008dca:	4619      	mov	r1, r3
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	440b      	add	r3, r1
 8008dd0:	3230      	adds	r2, #48	; 0x30
 8008dd2:	b2d2      	uxtb	r2, r2
 8008dd4:	701a      	strb	r2, [r3, #0]
 8008dd6:	e00a      	b.n	8008dee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	0f1b      	lsrs	r3, r3, #28
 8008ddc:	b2da      	uxtb	r2, r3
 8008dde:	7dfb      	ldrb	r3, [r7, #23]
 8008de0:	005b      	lsls	r3, r3, #1
 8008de2:	4619      	mov	r1, r3
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	440b      	add	r3, r1
 8008de8:	3237      	adds	r2, #55	; 0x37
 8008dea:	b2d2      	uxtb	r2, r2
 8008dec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	011b      	lsls	r3, r3, #4
 8008df2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008df4:	7dfb      	ldrb	r3, [r7, #23]
 8008df6:	005b      	lsls	r3, r3, #1
 8008df8:	3301      	adds	r3, #1
 8008dfa:	68ba      	ldr	r2, [r7, #8]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	2200      	movs	r2, #0
 8008e00:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e02:	7dfb      	ldrb	r3, [r7, #23]
 8008e04:	3301      	adds	r3, #1
 8008e06:	75fb      	strb	r3, [r7, #23]
 8008e08:	7dfa      	ldrb	r2, [r7, #23]
 8008e0a:	79fb      	ldrb	r3, [r7, #7]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d3d3      	bcc.n	8008db8 <IntToUnicode+0x18>
  }
}
 8008e10:	bf00      	nop
 8008e12:	bf00      	nop
 8008e14:	371c      	adds	r7, #28
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr
	...

08008e20 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b08a      	sub	sp, #40	; 0x28
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e28:	f107 0314 	add.w	r3, r7, #20
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	601a      	str	r2, [r3, #0]
 8008e30:	605a      	str	r2, [r3, #4]
 8008e32:	609a      	str	r2, [r3, #8]
 8008e34:	60da      	str	r2, [r3, #12]
 8008e36:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e40:	d13a      	bne.n	8008eb8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e42:	2300      	movs	r3, #0
 8008e44:	613b      	str	r3, [r7, #16]
 8008e46:	4b1e      	ldr	r3, [pc, #120]	; (8008ec0 <HAL_PCD_MspInit+0xa0>)
 8008e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4a:	4a1d      	ldr	r2, [pc, #116]	; (8008ec0 <HAL_PCD_MspInit+0xa0>)
 8008e4c:	f043 0301 	orr.w	r3, r3, #1
 8008e50:	6313      	str	r3, [r2, #48]	; 0x30
 8008e52:	4b1b      	ldr	r3, [pc, #108]	; (8008ec0 <HAL_PCD_MspInit+0xa0>)
 8008e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e56:	f003 0301 	and.w	r3, r3, #1
 8008e5a:	613b      	str	r3, [r7, #16]
 8008e5c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008e5e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e64:	2302      	movs	r3, #2
 8008e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008e70:	230a      	movs	r3, #10
 8008e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e74:	f107 0314 	add.w	r3, r7, #20
 8008e78:	4619      	mov	r1, r3
 8008e7a:	4812      	ldr	r0, [pc, #72]	; (8008ec4 <HAL_PCD_MspInit+0xa4>)
 8008e7c:	f7f8 fc5e 	bl	800173c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008e80:	4b0f      	ldr	r3, [pc, #60]	; (8008ec0 <HAL_PCD_MspInit+0xa0>)
 8008e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e84:	4a0e      	ldr	r2, [pc, #56]	; (8008ec0 <HAL_PCD_MspInit+0xa0>)
 8008e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e8a:	6353      	str	r3, [r2, #52]	; 0x34
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	60fb      	str	r3, [r7, #12]
 8008e90:	4b0b      	ldr	r3, [pc, #44]	; (8008ec0 <HAL_PCD_MspInit+0xa0>)
 8008e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e94:	4a0a      	ldr	r2, [pc, #40]	; (8008ec0 <HAL_PCD_MspInit+0xa0>)
 8008e96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e9a:	6453      	str	r3, [r2, #68]	; 0x44
 8008e9c:	4b08      	ldr	r3, [pc, #32]	; (8008ec0 <HAL_PCD_MspInit+0xa0>)
 8008e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ea4:	60fb      	str	r3, [r7, #12]
 8008ea6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	2100      	movs	r1, #0
 8008eac:	2043      	movs	r0, #67	; 0x43
 8008eae:	f7f8 fa28 	bl	8001302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008eb2:	2043      	movs	r0, #67	; 0x43
 8008eb4:	f7f8 fa41 	bl	800133a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008eb8:	bf00      	nop
 8008eba:	3728      	adds	r7, #40	; 0x28
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	40023800 	.word	0x40023800
 8008ec4:	40020000 	.word	0x40020000

08008ec8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008edc:	4619      	mov	r1, r3
 8008ede:	4610      	mov	r0, r2
 8008ee0:	f7fe fb59 	bl	8007596 <USBD_LL_SetupStage>
}
 8008ee4:	bf00      	nop
 8008ee6:	3708      	adds	r7, #8
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008efe:	78fa      	ldrb	r2, [r7, #3]
 8008f00:	6879      	ldr	r1, [r7, #4]
 8008f02:	4613      	mov	r3, r2
 8008f04:	00db      	lsls	r3, r3, #3
 8008f06:	4413      	add	r3, r2
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	440b      	add	r3, r1
 8008f0c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	78fb      	ldrb	r3, [r7, #3]
 8008f14:	4619      	mov	r1, r3
 8008f16:	f7fe fb93 	bl	8007640 <USBD_LL_DataOutStage>
}
 8008f1a:	bf00      	nop
 8008f1c:	3708      	adds	r7, #8
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b082      	sub	sp, #8
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008f34:	78fa      	ldrb	r2, [r7, #3]
 8008f36:	6879      	ldr	r1, [r7, #4]
 8008f38:	4613      	mov	r3, r2
 8008f3a:	00db      	lsls	r3, r3, #3
 8008f3c:	4413      	add	r3, r2
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	440b      	add	r3, r1
 8008f42:	334c      	adds	r3, #76	; 0x4c
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	78fb      	ldrb	r3, [r7, #3]
 8008f48:	4619      	mov	r1, r3
 8008f4a:	f7fe fc2c 	bl	80077a6 <USBD_LL_DataInStage>
}
 8008f4e:	bf00      	nop
 8008f50:	3708      	adds	r7, #8
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b082      	sub	sp, #8
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f64:	4618      	mov	r0, r3
 8008f66:	f7fe fd60 	bl	8007a2a <USBD_LL_SOF>
}
 8008f6a:	bf00      	nop
 8008f6c:	3708      	adds	r7, #8
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b084      	sub	sp, #16
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	2b02      	cmp	r3, #2
 8008f84:	d001      	beq.n	8008f8a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008f86:	f7f7 fc93 	bl	80008b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f90:	7bfa      	ldrb	r2, [r7, #15]
 8008f92:	4611      	mov	r1, r2
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7fe fd0a 	bl	80079ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7fe fcb2 	bl	800790a <USBD_LL_Reset>
}
 8008fa6:	bf00      	nop
 8008fa8:	3710      	adds	r7, #16
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
	...

08008fb0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7fe fd05 	bl	80079ce <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	6812      	ldr	r2, [r2, #0]
 8008fd2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008fd6:	f043 0301 	orr.w	r3, r3, #1
 8008fda:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6a1b      	ldr	r3, [r3, #32]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d005      	beq.n	8008ff0 <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008fe4:	4b04      	ldr	r3, [pc, #16]	; (8008ff8 <HAL_PCD_SuspendCallback+0x48>)
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	4a03      	ldr	r2, [pc, #12]	; (8008ff8 <HAL_PCD_SuspendCallback+0x48>)
 8008fea:	f043 0306 	orr.w	r3, r3, #6
 8008fee:	6113      	str	r3, [r2, #16]
    }
  /* USER CODE END 2 */
}
 8008ff0:	bf00      	nop
 8008ff2:	3708      	adds	r7, #8
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	e000ed00 	.word	0xe000ed00

08008ffc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800900a:	4618      	mov	r0, r3
 800900c:	f7fe fcf5 	bl	80079fa <USBD_LL_Resume>
}
 8009010:	bf00      	nop
 8009012:	3708      	adds	r7, #8
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	460b      	mov	r3, r1
 8009022:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800902a:	78fa      	ldrb	r2, [r7, #3]
 800902c:	4611      	mov	r1, r2
 800902e:	4618      	mov	r0, r3
 8009030:	f7fe fd4d 	bl	8007ace <USBD_LL_IsoOUTIncomplete>
}
 8009034:	bf00      	nop
 8009036:	3708      	adds	r7, #8
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	460b      	mov	r3, r1
 8009046:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800904e:	78fa      	ldrb	r2, [r7, #3]
 8009050:	4611      	mov	r1, r2
 8009052:	4618      	mov	r0, r3
 8009054:	f7fe fd09 	bl	8007a6a <USBD_LL_IsoINIncomplete>
}
 8009058:	bf00      	nop
 800905a:	3708      	adds	r7, #8
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800906e:	4618      	mov	r0, r3
 8009070:	f7fe fd5f 	bl	8007b32 <USBD_LL_DevConnected>
}
 8009074:	bf00      	nop
 8009076:	3708      	adds	r7, #8
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800908a:	4618      	mov	r0, r3
 800908c:	f7fe fd5c 	bl	8007b48 <USBD_LL_DevDisconnected>
}
 8009090:	bf00      	nop
 8009092:	3708      	adds	r7, #8
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d13c      	bne.n	8009122 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80090a8:	4a20      	ldr	r2, [pc, #128]	; (800912c <USBD_LL_Init+0x94>)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a1e      	ldr	r2, [pc, #120]	; (800912c <USBD_LL_Init+0x94>)
 80090b4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80090b8:	4b1c      	ldr	r3, [pc, #112]	; (800912c <USBD_LL_Init+0x94>)
 80090ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80090be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80090c0:	4b1a      	ldr	r3, [pc, #104]	; (800912c <USBD_LL_Init+0x94>)
 80090c2:	2204      	movs	r2, #4
 80090c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80090c6:	4b19      	ldr	r3, [pc, #100]	; (800912c <USBD_LL_Init+0x94>)
 80090c8:	2202      	movs	r2, #2
 80090ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80090cc:	4b17      	ldr	r3, [pc, #92]	; (800912c <USBD_LL_Init+0x94>)
 80090ce:	2200      	movs	r2, #0
 80090d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80090d2:	4b16      	ldr	r3, [pc, #88]	; (800912c <USBD_LL_Init+0x94>)
 80090d4:	2202      	movs	r2, #2
 80090d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80090d8:	4b14      	ldr	r3, [pc, #80]	; (800912c <USBD_LL_Init+0x94>)
 80090da:	2200      	movs	r2, #0
 80090dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80090de:	4b13      	ldr	r3, [pc, #76]	; (800912c <USBD_LL_Init+0x94>)
 80090e0:	2200      	movs	r2, #0
 80090e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80090e4:	4b11      	ldr	r3, [pc, #68]	; (800912c <USBD_LL_Init+0x94>)
 80090e6:	2200      	movs	r2, #0
 80090e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80090ea:	4b10      	ldr	r3, [pc, #64]	; (800912c <USBD_LL_Init+0x94>)
 80090ec:	2200      	movs	r2, #0
 80090ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80090f0:	4b0e      	ldr	r3, [pc, #56]	; (800912c <USBD_LL_Init+0x94>)
 80090f2:	2200      	movs	r2, #0
 80090f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80090f6:	480d      	ldr	r0, [pc, #52]	; (800912c <USBD_LL_Init+0x94>)
 80090f8:	f7f9 fc63 	bl	80029c2 <HAL_PCD_Init>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d001      	beq.n	8009106 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009102:	f7f7 fbd5 	bl	80008b0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009106:	2180      	movs	r1, #128	; 0x80
 8009108:	4808      	ldr	r0, [pc, #32]	; (800912c <USBD_LL_Init+0x94>)
 800910a:	f7fa feba 	bl	8003e82 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800910e:	2240      	movs	r2, #64	; 0x40
 8009110:	2100      	movs	r1, #0
 8009112:	4806      	ldr	r0, [pc, #24]	; (800912c <USBD_LL_Init+0x94>)
 8009114:	f7fa fe6e 	bl	8003df4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009118:	2280      	movs	r2, #128	; 0x80
 800911a:	2101      	movs	r1, #1
 800911c:	4803      	ldr	r0, [pc, #12]	; (800912c <USBD_LL_Init+0x94>)
 800911e:	f7fa fe69 	bl	8003df4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	3708      	adds	r7, #8
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}
 800912c:	20000f50 	.word	0x20000f50

08009130 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800913c:	2300      	movs	r3, #0
 800913e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009146:	4618      	mov	r0, r3
 8009148:	f7f9 fd58 	bl	8002bfc <HAL_PCD_Start>
 800914c:	4603      	mov	r3, r0
 800914e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009150:	7bfb      	ldrb	r3, [r7, #15]
 8009152:	4618      	mov	r0, r3
 8009154:	f000 f942 	bl	80093dc <USBD_Get_USB_Status>
 8009158:	4603      	mov	r3, r0
 800915a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800915c:	7bbb      	ldrb	r3, [r7, #14]
}
 800915e:	4618      	mov	r0, r3
 8009160:	3710      	adds	r7, #16
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}

08009166 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009166:	b580      	push	{r7, lr}
 8009168:	b084      	sub	sp, #16
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
 800916e:	4608      	mov	r0, r1
 8009170:	4611      	mov	r1, r2
 8009172:	461a      	mov	r2, r3
 8009174:	4603      	mov	r3, r0
 8009176:	70fb      	strb	r3, [r7, #3]
 8009178:	460b      	mov	r3, r1
 800917a:	70bb      	strb	r3, [r7, #2]
 800917c:	4613      	mov	r3, r2
 800917e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009180:	2300      	movs	r3, #0
 8009182:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009184:	2300      	movs	r3, #0
 8009186:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800918e:	78bb      	ldrb	r3, [r7, #2]
 8009190:	883a      	ldrh	r2, [r7, #0]
 8009192:	78f9      	ldrb	r1, [r7, #3]
 8009194:	f7fa fa29 	bl	80035ea <HAL_PCD_EP_Open>
 8009198:	4603      	mov	r3, r0
 800919a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800919c:	7bfb      	ldrb	r3, [r7, #15]
 800919e:	4618      	mov	r0, r3
 80091a0:	f000 f91c 	bl	80093dc <USBD_Get_USB_Status>
 80091a4:	4603      	mov	r3, r0
 80091a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b084      	sub	sp, #16
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	460b      	mov	r3, r1
 80091bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091be:	2300      	movs	r3, #0
 80091c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091c2:	2300      	movs	r3, #0
 80091c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80091cc:	78fa      	ldrb	r2, [r7, #3]
 80091ce:	4611      	mov	r1, r2
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7fa fa72 	bl	80036ba <HAL_PCD_EP_Close>
 80091d6:	4603      	mov	r3, r0
 80091d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091da:	7bfb      	ldrb	r3, [r7, #15]
 80091dc:	4618      	mov	r0, r3
 80091de:	f000 f8fd 	bl	80093dc <USBD_Get_USB_Status>
 80091e2:	4603      	mov	r3, r0
 80091e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3710      	adds	r7, #16
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	460b      	mov	r3, r1
 80091fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091fc:	2300      	movs	r3, #0
 80091fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009200:	2300      	movs	r3, #0
 8009202:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800920a:	78fa      	ldrb	r2, [r7, #3]
 800920c:	4611      	mov	r1, r2
 800920e:	4618      	mov	r0, r3
 8009210:	f7fa fb4a 	bl	80038a8 <HAL_PCD_EP_SetStall>
 8009214:	4603      	mov	r3, r0
 8009216:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009218:	7bfb      	ldrb	r3, [r7, #15]
 800921a:	4618      	mov	r0, r3
 800921c:	f000 f8de 	bl	80093dc <USBD_Get_USB_Status>
 8009220:	4603      	mov	r3, r0
 8009222:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009224:	7bbb      	ldrb	r3, [r7, #14]
}
 8009226:	4618      	mov	r0, r3
 8009228:	3710      	adds	r7, #16
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b084      	sub	sp, #16
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
 8009236:	460b      	mov	r3, r1
 8009238:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800923a:	2300      	movs	r3, #0
 800923c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800923e:	2300      	movs	r3, #0
 8009240:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009248:	78fa      	ldrb	r2, [r7, #3]
 800924a:	4611      	mov	r1, r2
 800924c:	4618      	mov	r0, r3
 800924e:	f7fa fb8f 	bl	8003970 <HAL_PCD_EP_ClrStall>
 8009252:	4603      	mov	r3, r0
 8009254:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009256:	7bfb      	ldrb	r3, [r7, #15]
 8009258:	4618      	mov	r0, r3
 800925a:	f000 f8bf 	bl	80093dc <USBD_Get_USB_Status>
 800925e:	4603      	mov	r3, r0
 8009260:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009262:	7bbb      	ldrb	r3, [r7, #14]
}
 8009264:	4618      	mov	r0, r3
 8009266:	3710      	adds	r7, #16
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800926c:	b480      	push	{r7}
 800926e:	b085      	sub	sp, #20
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	460b      	mov	r3, r1
 8009276:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800927e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009280:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009284:	2b00      	cmp	r3, #0
 8009286:	da0b      	bge.n	80092a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009288:	78fb      	ldrb	r3, [r7, #3]
 800928a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800928e:	68f9      	ldr	r1, [r7, #12]
 8009290:	4613      	mov	r3, r2
 8009292:	00db      	lsls	r3, r3, #3
 8009294:	4413      	add	r3, r2
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	440b      	add	r3, r1
 800929a:	333e      	adds	r3, #62	; 0x3e
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	e00b      	b.n	80092b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80092a0:	78fb      	ldrb	r3, [r7, #3]
 80092a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092a6:	68f9      	ldr	r1, [r7, #12]
 80092a8:	4613      	mov	r3, r2
 80092aa:	00db      	lsls	r3, r3, #3
 80092ac:	4413      	add	r3, r2
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	440b      	add	r3, r1
 80092b2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80092b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3714      	adds	r7, #20
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	460b      	mov	r3, r1
 80092ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092d0:	2300      	movs	r3, #0
 80092d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092d4:	2300      	movs	r3, #0
 80092d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092de:	78fa      	ldrb	r2, [r7, #3]
 80092e0:	4611      	mov	r1, r2
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7fa f95c 	bl	80035a0 <HAL_PCD_SetAddress>
 80092e8:	4603      	mov	r3, r0
 80092ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092ec:	7bfb      	ldrb	r3, [r7, #15]
 80092ee:	4618      	mov	r0, r3
 80092f0:	f000 f874 	bl	80093dc <USBD_Get_USB_Status>
 80092f4:	4603      	mov	r3, r0
 80092f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3710      	adds	r7, #16
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b086      	sub	sp, #24
 8009306:	af00      	add	r7, sp, #0
 8009308:	60f8      	str	r0, [r7, #12]
 800930a:	607a      	str	r2, [r7, #4]
 800930c:	603b      	str	r3, [r7, #0]
 800930e:	460b      	mov	r3, r1
 8009310:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009312:	2300      	movs	r3, #0
 8009314:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009316:	2300      	movs	r3, #0
 8009318:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009320:	7af9      	ldrb	r1, [r7, #11]
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	f7fa fa75 	bl	8003814 <HAL_PCD_EP_Transmit>
 800932a:	4603      	mov	r3, r0
 800932c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800932e:	7dfb      	ldrb	r3, [r7, #23]
 8009330:	4618      	mov	r0, r3
 8009332:	f000 f853 	bl	80093dc <USBD_Get_USB_Status>
 8009336:	4603      	mov	r3, r0
 8009338:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800933a:	7dbb      	ldrb	r3, [r7, #22]
}
 800933c:	4618      	mov	r0, r3
 800933e:	3718      	adds	r7, #24
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b086      	sub	sp, #24
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	607a      	str	r2, [r7, #4]
 800934e:	603b      	str	r3, [r7, #0]
 8009350:	460b      	mov	r3, r1
 8009352:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009354:	2300      	movs	r3, #0
 8009356:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009358:	2300      	movs	r3, #0
 800935a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009362:	7af9      	ldrb	r1, [r7, #11]
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	f7fa f9f1 	bl	800374e <HAL_PCD_EP_Receive>
 800936c:	4603      	mov	r3, r0
 800936e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009370:	7dfb      	ldrb	r3, [r7, #23]
 8009372:	4618      	mov	r0, r3
 8009374:	f000 f832 	bl	80093dc <USBD_Get_USB_Status>
 8009378:	4603      	mov	r3, r0
 800937a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800937c:	7dbb      	ldrb	r3, [r7, #22]
}
 800937e:	4618      	mov	r0, r3
 8009380:	3718      	adds	r7, #24
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009386:	b580      	push	{r7, lr}
 8009388:	b082      	sub	sp, #8
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
 800938e:	460b      	mov	r3, r1
 8009390:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009398:	78fa      	ldrb	r2, [r7, #3]
 800939a:	4611      	mov	r1, r2
 800939c:	4618      	mov	r0, r3
 800939e:	f7fa fa21 	bl	80037e4 <HAL_PCD_EP_GetRxCount>
 80093a2:	4603      	mov	r3, r0
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3708      	adds	r7, #8
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80093b4:	4b03      	ldr	r3, [pc, #12]	; (80093c4 <USBD_static_malloc+0x18>)
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	370c      	adds	r7, #12
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr
 80093c2:	bf00      	nop
 80093c4:	2000145c 	.word	0x2000145c

080093c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b083      	sub	sp, #12
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]

}
 80093d0:	bf00      	nop
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	4603      	mov	r3, r0
 80093e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093e6:	2300      	movs	r3, #0
 80093e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80093ea:	79fb      	ldrb	r3, [r7, #7]
 80093ec:	2b03      	cmp	r3, #3
 80093ee:	d817      	bhi.n	8009420 <USBD_Get_USB_Status+0x44>
 80093f0:	a201      	add	r2, pc, #4	; (adr r2, 80093f8 <USBD_Get_USB_Status+0x1c>)
 80093f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f6:	bf00      	nop
 80093f8:	08009409 	.word	0x08009409
 80093fc:	0800940f 	.word	0x0800940f
 8009400:	08009415 	.word	0x08009415
 8009404:	0800941b 	.word	0x0800941b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009408:	2300      	movs	r3, #0
 800940a:	73fb      	strb	r3, [r7, #15]
    break;
 800940c:	e00b      	b.n	8009426 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800940e:	2303      	movs	r3, #3
 8009410:	73fb      	strb	r3, [r7, #15]
    break;
 8009412:	e008      	b.n	8009426 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009414:	2301      	movs	r3, #1
 8009416:	73fb      	strb	r3, [r7, #15]
    break;
 8009418:	e005      	b.n	8009426 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800941a:	2303      	movs	r3, #3
 800941c:	73fb      	strb	r3, [r7, #15]
    break;
 800941e:	e002      	b.n	8009426 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009420:	2303      	movs	r3, #3
 8009422:	73fb      	strb	r3, [r7, #15]
    break;
 8009424:	bf00      	nop
  }
  return usb_status;
 8009426:	7bfb      	ldrb	r3, [r7, #15]
}
 8009428:	4618      	mov	r0, r3
 800942a:	3714      	adds	r7, #20
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <malloc>:
 8009434:	4b02      	ldr	r3, [pc, #8]	; (8009440 <malloc+0xc>)
 8009436:	4601      	mov	r1, r0
 8009438:	6818      	ldr	r0, [r3, #0]
 800943a:	f000 b82b 	b.w	8009494 <_malloc_r>
 800943e:	bf00      	nop
 8009440:	20000148 	.word	0x20000148

08009444 <free>:
 8009444:	4b02      	ldr	r3, [pc, #8]	; (8009450 <free+0xc>)
 8009446:	4601      	mov	r1, r0
 8009448:	6818      	ldr	r0, [r3, #0]
 800944a:	f000 b913 	b.w	8009674 <_free_r>
 800944e:	bf00      	nop
 8009450:	20000148 	.word	0x20000148

08009454 <sbrk_aligned>:
 8009454:	b570      	push	{r4, r5, r6, lr}
 8009456:	4e0e      	ldr	r6, [pc, #56]	; (8009490 <sbrk_aligned+0x3c>)
 8009458:	460c      	mov	r4, r1
 800945a:	6831      	ldr	r1, [r6, #0]
 800945c:	4605      	mov	r5, r0
 800945e:	b911      	cbnz	r1, 8009466 <sbrk_aligned+0x12>
 8009460:	f000 f8cc 	bl	80095fc <_sbrk_r>
 8009464:	6030      	str	r0, [r6, #0]
 8009466:	4621      	mov	r1, r4
 8009468:	4628      	mov	r0, r5
 800946a:	f000 f8c7 	bl	80095fc <_sbrk_r>
 800946e:	1c43      	adds	r3, r0, #1
 8009470:	d00a      	beq.n	8009488 <sbrk_aligned+0x34>
 8009472:	1cc4      	adds	r4, r0, #3
 8009474:	f024 0403 	bic.w	r4, r4, #3
 8009478:	42a0      	cmp	r0, r4
 800947a:	d007      	beq.n	800948c <sbrk_aligned+0x38>
 800947c:	1a21      	subs	r1, r4, r0
 800947e:	4628      	mov	r0, r5
 8009480:	f000 f8bc 	bl	80095fc <_sbrk_r>
 8009484:	3001      	adds	r0, #1
 8009486:	d101      	bne.n	800948c <sbrk_aligned+0x38>
 8009488:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800948c:	4620      	mov	r0, r4
 800948e:	bd70      	pop	{r4, r5, r6, pc}
 8009490:	20001680 	.word	0x20001680

08009494 <_malloc_r>:
 8009494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009498:	1ccd      	adds	r5, r1, #3
 800949a:	f025 0503 	bic.w	r5, r5, #3
 800949e:	3508      	adds	r5, #8
 80094a0:	2d0c      	cmp	r5, #12
 80094a2:	bf38      	it	cc
 80094a4:	250c      	movcc	r5, #12
 80094a6:	2d00      	cmp	r5, #0
 80094a8:	4607      	mov	r7, r0
 80094aa:	db01      	blt.n	80094b0 <_malloc_r+0x1c>
 80094ac:	42a9      	cmp	r1, r5
 80094ae:	d905      	bls.n	80094bc <_malloc_r+0x28>
 80094b0:	230c      	movs	r3, #12
 80094b2:	603b      	str	r3, [r7, #0]
 80094b4:	2600      	movs	r6, #0
 80094b6:	4630      	mov	r0, r6
 80094b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009590 <_malloc_r+0xfc>
 80094c0:	f000 f868 	bl	8009594 <__malloc_lock>
 80094c4:	f8d8 3000 	ldr.w	r3, [r8]
 80094c8:	461c      	mov	r4, r3
 80094ca:	bb5c      	cbnz	r4, 8009524 <_malloc_r+0x90>
 80094cc:	4629      	mov	r1, r5
 80094ce:	4638      	mov	r0, r7
 80094d0:	f7ff ffc0 	bl	8009454 <sbrk_aligned>
 80094d4:	1c43      	adds	r3, r0, #1
 80094d6:	4604      	mov	r4, r0
 80094d8:	d155      	bne.n	8009586 <_malloc_r+0xf2>
 80094da:	f8d8 4000 	ldr.w	r4, [r8]
 80094de:	4626      	mov	r6, r4
 80094e0:	2e00      	cmp	r6, #0
 80094e2:	d145      	bne.n	8009570 <_malloc_r+0xdc>
 80094e4:	2c00      	cmp	r4, #0
 80094e6:	d048      	beq.n	800957a <_malloc_r+0xe6>
 80094e8:	6823      	ldr	r3, [r4, #0]
 80094ea:	4631      	mov	r1, r6
 80094ec:	4638      	mov	r0, r7
 80094ee:	eb04 0903 	add.w	r9, r4, r3
 80094f2:	f000 f883 	bl	80095fc <_sbrk_r>
 80094f6:	4581      	cmp	r9, r0
 80094f8:	d13f      	bne.n	800957a <_malloc_r+0xe6>
 80094fa:	6821      	ldr	r1, [r4, #0]
 80094fc:	1a6d      	subs	r5, r5, r1
 80094fe:	4629      	mov	r1, r5
 8009500:	4638      	mov	r0, r7
 8009502:	f7ff ffa7 	bl	8009454 <sbrk_aligned>
 8009506:	3001      	adds	r0, #1
 8009508:	d037      	beq.n	800957a <_malloc_r+0xe6>
 800950a:	6823      	ldr	r3, [r4, #0]
 800950c:	442b      	add	r3, r5
 800950e:	6023      	str	r3, [r4, #0]
 8009510:	f8d8 3000 	ldr.w	r3, [r8]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d038      	beq.n	800958a <_malloc_r+0xf6>
 8009518:	685a      	ldr	r2, [r3, #4]
 800951a:	42a2      	cmp	r2, r4
 800951c:	d12b      	bne.n	8009576 <_malloc_r+0xe2>
 800951e:	2200      	movs	r2, #0
 8009520:	605a      	str	r2, [r3, #4]
 8009522:	e00f      	b.n	8009544 <_malloc_r+0xb0>
 8009524:	6822      	ldr	r2, [r4, #0]
 8009526:	1b52      	subs	r2, r2, r5
 8009528:	d41f      	bmi.n	800956a <_malloc_r+0xd6>
 800952a:	2a0b      	cmp	r2, #11
 800952c:	d917      	bls.n	800955e <_malloc_r+0xca>
 800952e:	1961      	adds	r1, r4, r5
 8009530:	42a3      	cmp	r3, r4
 8009532:	6025      	str	r5, [r4, #0]
 8009534:	bf18      	it	ne
 8009536:	6059      	strne	r1, [r3, #4]
 8009538:	6863      	ldr	r3, [r4, #4]
 800953a:	bf08      	it	eq
 800953c:	f8c8 1000 	streq.w	r1, [r8]
 8009540:	5162      	str	r2, [r4, r5]
 8009542:	604b      	str	r3, [r1, #4]
 8009544:	4638      	mov	r0, r7
 8009546:	f104 060b 	add.w	r6, r4, #11
 800954a:	f000 f829 	bl	80095a0 <__malloc_unlock>
 800954e:	f026 0607 	bic.w	r6, r6, #7
 8009552:	1d23      	adds	r3, r4, #4
 8009554:	1af2      	subs	r2, r6, r3
 8009556:	d0ae      	beq.n	80094b6 <_malloc_r+0x22>
 8009558:	1b9b      	subs	r3, r3, r6
 800955a:	50a3      	str	r3, [r4, r2]
 800955c:	e7ab      	b.n	80094b6 <_malloc_r+0x22>
 800955e:	42a3      	cmp	r3, r4
 8009560:	6862      	ldr	r2, [r4, #4]
 8009562:	d1dd      	bne.n	8009520 <_malloc_r+0x8c>
 8009564:	f8c8 2000 	str.w	r2, [r8]
 8009568:	e7ec      	b.n	8009544 <_malloc_r+0xb0>
 800956a:	4623      	mov	r3, r4
 800956c:	6864      	ldr	r4, [r4, #4]
 800956e:	e7ac      	b.n	80094ca <_malloc_r+0x36>
 8009570:	4634      	mov	r4, r6
 8009572:	6876      	ldr	r6, [r6, #4]
 8009574:	e7b4      	b.n	80094e0 <_malloc_r+0x4c>
 8009576:	4613      	mov	r3, r2
 8009578:	e7cc      	b.n	8009514 <_malloc_r+0x80>
 800957a:	230c      	movs	r3, #12
 800957c:	603b      	str	r3, [r7, #0]
 800957e:	4638      	mov	r0, r7
 8009580:	f000 f80e 	bl	80095a0 <__malloc_unlock>
 8009584:	e797      	b.n	80094b6 <_malloc_r+0x22>
 8009586:	6025      	str	r5, [r4, #0]
 8009588:	e7dc      	b.n	8009544 <_malloc_r+0xb0>
 800958a:	605b      	str	r3, [r3, #4]
 800958c:	deff      	udf	#255	; 0xff
 800958e:	bf00      	nop
 8009590:	2000167c 	.word	0x2000167c

08009594 <__malloc_lock>:
 8009594:	4801      	ldr	r0, [pc, #4]	; (800959c <__malloc_lock+0x8>)
 8009596:	f000 b86b 	b.w	8009670 <__retarget_lock_acquire_recursive>
 800959a:	bf00      	nop
 800959c:	200017c0 	.word	0x200017c0

080095a0 <__malloc_unlock>:
 80095a0:	4801      	ldr	r0, [pc, #4]	; (80095a8 <__malloc_unlock+0x8>)
 80095a2:	f000 b866 	b.w	8009672 <__retarget_lock_release_recursive>
 80095a6:	bf00      	nop
 80095a8:	200017c0 	.word	0x200017c0

080095ac <siprintf>:
 80095ac:	b40e      	push	{r1, r2, r3}
 80095ae:	b500      	push	{lr}
 80095b0:	b09c      	sub	sp, #112	; 0x70
 80095b2:	ab1d      	add	r3, sp, #116	; 0x74
 80095b4:	9002      	str	r0, [sp, #8]
 80095b6:	9006      	str	r0, [sp, #24]
 80095b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80095bc:	4809      	ldr	r0, [pc, #36]	; (80095e4 <siprintf+0x38>)
 80095be:	9107      	str	r1, [sp, #28]
 80095c0:	9104      	str	r1, [sp, #16]
 80095c2:	4909      	ldr	r1, [pc, #36]	; (80095e8 <siprintf+0x3c>)
 80095c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80095c8:	9105      	str	r1, [sp, #20]
 80095ca:	6800      	ldr	r0, [r0, #0]
 80095cc:	9301      	str	r3, [sp, #4]
 80095ce:	a902      	add	r1, sp, #8
 80095d0:	f000 f8f6 	bl	80097c0 <_svfiprintf_r>
 80095d4:	9b02      	ldr	r3, [sp, #8]
 80095d6:	2200      	movs	r2, #0
 80095d8:	701a      	strb	r2, [r3, #0]
 80095da:	b01c      	add	sp, #112	; 0x70
 80095dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80095e0:	b003      	add	sp, #12
 80095e2:	4770      	bx	lr
 80095e4:	20000148 	.word	0x20000148
 80095e8:	ffff0208 	.word	0xffff0208

080095ec <memset>:
 80095ec:	4402      	add	r2, r0
 80095ee:	4603      	mov	r3, r0
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d100      	bne.n	80095f6 <memset+0xa>
 80095f4:	4770      	bx	lr
 80095f6:	f803 1b01 	strb.w	r1, [r3], #1
 80095fa:	e7f9      	b.n	80095f0 <memset+0x4>

080095fc <_sbrk_r>:
 80095fc:	b538      	push	{r3, r4, r5, lr}
 80095fe:	4d06      	ldr	r5, [pc, #24]	; (8009618 <_sbrk_r+0x1c>)
 8009600:	2300      	movs	r3, #0
 8009602:	4604      	mov	r4, r0
 8009604:	4608      	mov	r0, r1
 8009606:	602b      	str	r3, [r5, #0]
 8009608:	f7f7 fa78 	bl	8000afc <_sbrk>
 800960c:	1c43      	adds	r3, r0, #1
 800960e:	d102      	bne.n	8009616 <_sbrk_r+0x1a>
 8009610:	682b      	ldr	r3, [r5, #0]
 8009612:	b103      	cbz	r3, 8009616 <_sbrk_r+0x1a>
 8009614:	6023      	str	r3, [r4, #0]
 8009616:	bd38      	pop	{r3, r4, r5, pc}
 8009618:	200017bc 	.word	0x200017bc

0800961c <__errno>:
 800961c:	4b01      	ldr	r3, [pc, #4]	; (8009624 <__errno+0x8>)
 800961e:	6818      	ldr	r0, [r3, #0]
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop
 8009624:	20000148 	.word	0x20000148

08009628 <__libc_init_array>:
 8009628:	b570      	push	{r4, r5, r6, lr}
 800962a:	4d0d      	ldr	r5, [pc, #52]	; (8009660 <__libc_init_array+0x38>)
 800962c:	4c0d      	ldr	r4, [pc, #52]	; (8009664 <__libc_init_array+0x3c>)
 800962e:	1b64      	subs	r4, r4, r5
 8009630:	10a4      	asrs	r4, r4, #2
 8009632:	2600      	movs	r6, #0
 8009634:	42a6      	cmp	r6, r4
 8009636:	d109      	bne.n	800964c <__libc_init_array+0x24>
 8009638:	4d0b      	ldr	r5, [pc, #44]	; (8009668 <__libc_init_array+0x40>)
 800963a:	4c0c      	ldr	r4, [pc, #48]	; (800966c <__libc_init_array+0x44>)
 800963c:	f000 fbae 	bl	8009d9c <_init>
 8009640:	1b64      	subs	r4, r4, r5
 8009642:	10a4      	asrs	r4, r4, #2
 8009644:	2600      	movs	r6, #0
 8009646:	42a6      	cmp	r6, r4
 8009648:	d105      	bne.n	8009656 <__libc_init_array+0x2e>
 800964a:	bd70      	pop	{r4, r5, r6, pc}
 800964c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009650:	4798      	blx	r3
 8009652:	3601      	adds	r6, #1
 8009654:	e7ee      	b.n	8009634 <__libc_init_array+0xc>
 8009656:	f855 3b04 	ldr.w	r3, [r5], #4
 800965a:	4798      	blx	r3
 800965c:	3601      	adds	r6, #1
 800965e:	e7f2      	b.n	8009646 <__libc_init_array+0x1e>
 8009660:	08009e98 	.word	0x08009e98
 8009664:	08009e98 	.word	0x08009e98
 8009668:	08009e98 	.word	0x08009e98
 800966c:	08009e9c 	.word	0x08009e9c

08009670 <__retarget_lock_acquire_recursive>:
 8009670:	4770      	bx	lr

08009672 <__retarget_lock_release_recursive>:
 8009672:	4770      	bx	lr

08009674 <_free_r>:
 8009674:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009676:	2900      	cmp	r1, #0
 8009678:	d044      	beq.n	8009704 <_free_r+0x90>
 800967a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800967e:	9001      	str	r0, [sp, #4]
 8009680:	2b00      	cmp	r3, #0
 8009682:	f1a1 0404 	sub.w	r4, r1, #4
 8009686:	bfb8      	it	lt
 8009688:	18e4      	addlt	r4, r4, r3
 800968a:	f7ff ff83 	bl	8009594 <__malloc_lock>
 800968e:	4a1e      	ldr	r2, [pc, #120]	; (8009708 <_free_r+0x94>)
 8009690:	9801      	ldr	r0, [sp, #4]
 8009692:	6813      	ldr	r3, [r2, #0]
 8009694:	b933      	cbnz	r3, 80096a4 <_free_r+0x30>
 8009696:	6063      	str	r3, [r4, #4]
 8009698:	6014      	str	r4, [r2, #0]
 800969a:	b003      	add	sp, #12
 800969c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096a0:	f7ff bf7e 	b.w	80095a0 <__malloc_unlock>
 80096a4:	42a3      	cmp	r3, r4
 80096a6:	d908      	bls.n	80096ba <_free_r+0x46>
 80096a8:	6825      	ldr	r5, [r4, #0]
 80096aa:	1961      	adds	r1, r4, r5
 80096ac:	428b      	cmp	r3, r1
 80096ae:	bf01      	itttt	eq
 80096b0:	6819      	ldreq	r1, [r3, #0]
 80096b2:	685b      	ldreq	r3, [r3, #4]
 80096b4:	1949      	addeq	r1, r1, r5
 80096b6:	6021      	streq	r1, [r4, #0]
 80096b8:	e7ed      	b.n	8009696 <_free_r+0x22>
 80096ba:	461a      	mov	r2, r3
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	b10b      	cbz	r3, 80096c4 <_free_r+0x50>
 80096c0:	42a3      	cmp	r3, r4
 80096c2:	d9fa      	bls.n	80096ba <_free_r+0x46>
 80096c4:	6811      	ldr	r1, [r2, #0]
 80096c6:	1855      	adds	r5, r2, r1
 80096c8:	42a5      	cmp	r5, r4
 80096ca:	d10b      	bne.n	80096e4 <_free_r+0x70>
 80096cc:	6824      	ldr	r4, [r4, #0]
 80096ce:	4421      	add	r1, r4
 80096d0:	1854      	adds	r4, r2, r1
 80096d2:	42a3      	cmp	r3, r4
 80096d4:	6011      	str	r1, [r2, #0]
 80096d6:	d1e0      	bne.n	800969a <_free_r+0x26>
 80096d8:	681c      	ldr	r4, [r3, #0]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	6053      	str	r3, [r2, #4]
 80096de:	440c      	add	r4, r1
 80096e0:	6014      	str	r4, [r2, #0]
 80096e2:	e7da      	b.n	800969a <_free_r+0x26>
 80096e4:	d902      	bls.n	80096ec <_free_r+0x78>
 80096e6:	230c      	movs	r3, #12
 80096e8:	6003      	str	r3, [r0, #0]
 80096ea:	e7d6      	b.n	800969a <_free_r+0x26>
 80096ec:	6825      	ldr	r5, [r4, #0]
 80096ee:	1961      	adds	r1, r4, r5
 80096f0:	428b      	cmp	r3, r1
 80096f2:	bf04      	itt	eq
 80096f4:	6819      	ldreq	r1, [r3, #0]
 80096f6:	685b      	ldreq	r3, [r3, #4]
 80096f8:	6063      	str	r3, [r4, #4]
 80096fa:	bf04      	itt	eq
 80096fc:	1949      	addeq	r1, r1, r5
 80096fe:	6021      	streq	r1, [r4, #0]
 8009700:	6054      	str	r4, [r2, #4]
 8009702:	e7ca      	b.n	800969a <_free_r+0x26>
 8009704:	b003      	add	sp, #12
 8009706:	bd30      	pop	{r4, r5, pc}
 8009708:	2000167c 	.word	0x2000167c

0800970c <__ssputs_r>:
 800970c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009710:	688e      	ldr	r6, [r1, #8]
 8009712:	461f      	mov	r7, r3
 8009714:	42be      	cmp	r6, r7
 8009716:	680b      	ldr	r3, [r1, #0]
 8009718:	4682      	mov	sl, r0
 800971a:	460c      	mov	r4, r1
 800971c:	4690      	mov	r8, r2
 800971e:	d82c      	bhi.n	800977a <__ssputs_r+0x6e>
 8009720:	898a      	ldrh	r2, [r1, #12]
 8009722:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009726:	d026      	beq.n	8009776 <__ssputs_r+0x6a>
 8009728:	6965      	ldr	r5, [r4, #20]
 800972a:	6909      	ldr	r1, [r1, #16]
 800972c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009730:	eba3 0901 	sub.w	r9, r3, r1
 8009734:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009738:	1c7b      	adds	r3, r7, #1
 800973a:	444b      	add	r3, r9
 800973c:	106d      	asrs	r5, r5, #1
 800973e:	429d      	cmp	r5, r3
 8009740:	bf38      	it	cc
 8009742:	461d      	movcc	r5, r3
 8009744:	0553      	lsls	r3, r2, #21
 8009746:	d527      	bpl.n	8009798 <__ssputs_r+0x8c>
 8009748:	4629      	mov	r1, r5
 800974a:	f7ff fea3 	bl	8009494 <_malloc_r>
 800974e:	4606      	mov	r6, r0
 8009750:	b360      	cbz	r0, 80097ac <__ssputs_r+0xa0>
 8009752:	6921      	ldr	r1, [r4, #16]
 8009754:	464a      	mov	r2, r9
 8009756:	f000 fadb 	bl	8009d10 <memcpy>
 800975a:	89a3      	ldrh	r3, [r4, #12]
 800975c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009764:	81a3      	strh	r3, [r4, #12]
 8009766:	6126      	str	r6, [r4, #16]
 8009768:	6165      	str	r5, [r4, #20]
 800976a:	444e      	add	r6, r9
 800976c:	eba5 0509 	sub.w	r5, r5, r9
 8009770:	6026      	str	r6, [r4, #0]
 8009772:	60a5      	str	r5, [r4, #8]
 8009774:	463e      	mov	r6, r7
 8009776:	42be      	cmp	r6, r7
 8009778:	d900      	bls.n	800977c <__ssputs_r+0x70>
 800977a:	463e      	mov	r6, r7
 800977c:	6820      	ldr	r0, [r4, #0]
 800977e:	4632      	mov	r2, r6
 8009780:	4641      	mov	r1, r8
 8009782:	f000 faab 	bl	8009cdc <memmove>
 8009786:	68a3      	ldr	r3, [r4, #8]
 8009788:	1b9b      	subs	r3, r3, r6
 800978a:	60a3      	str	r3, [r4, #8]
 800978c:	6823      	ldr	r3, [r4, #0]
 800978e:	4433      	add	r3, r6
 8009790:	6023      	str	r3, [r4, #0]
 8009792:	2000      	movs	r0, #0
 8009794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009798:	462a      	mov	r2, r5
 800979a:	f000 fac7 	bl	8009d2c <_realloc_r>
 800979e:	4606      	mov	r6, r0
 80097a0:	2800      	cmp	r0, #0
 80097a2:	d1e0      	bne.n	8009766 <__ssputs_r+0x5a>
 80097a4:	6921      	ldr	r1, [r4, #16]
 80097a6:	4650      	mov	r0, sl
 80097a8:	f7ff ff64 	bl	8009674 <_free_r>
 80097ac:	230c      	movs	r3, #12
 80097ae:	f8ca 3000 	str.w	r3, [sl]
 80097b2:	89a3      	ldrh	r3, [r4, #12]
 80097b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097b8:	81a3      	strh	r3, [r4, #12]
 80097ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097be:	e7e9      	b.n	8009794 <__ssputs_r+0x88>

080097c0 <_svfiprintf_r>:
 80097c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c4:	4698      	mov	r8, r3
 80097c6:	898b      	ldrh	r3, [r1, #12]
 80097c8:	061b      	lsls	r3, r3, #24
 80097ca:	b09d      	sub	sp, #116	; 0x74
 80097cc:	4607      	mov	r7, r0
 80097ce:	460d      	mov	r5, r1
 80097d0:	4614      	mov	r4, r2
 80097d2:	d50e      	bpl.n	80097f2 <_svfiprintf_r+0x32>
 80097d4:	690b      	ldr	r3, [r1, #16]
 80097d6:	b963      	cbnz	r3, 80097f2 <_svfiprintf_r+0x32>
 80097d8:	2140      	movs	r1, #64	; 0x40
 80097da:	f7ff fe5b 	bl	8009494 <_malloc_r>
 80097de:	6028      	str	r0, [r5, #0]
 80097e0:	6128      	str	r0, [r5, #16]
 80097e2:	b920      	cbnz	r0, 80097ee <_svfiprintf_r+0x2e>
 80097e4:	230c      	movs	r3, #12
 80097e6:	603b      	str	r3, [r7, #0]
 80097e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097ec:	e0d0      	b.n	8009990 <_svfiprintf_r+0x1d0>
 80097ee:	2340      	movs	r3, #64	; 0x40
 80097f0:	616b      	str	r3, [r5, #20]
 80097f2:	2300      	movs	r3, #0
 80097f4:	9309      	str	r3, [sp, #36]	; 0x24
 80097f6:	2320      	movs	r3, #32
 80097f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009800:	2330      	movs	r3, #48	; 0x30
 8009802:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80099a8 <_svfiprintf_r+0x1e8>
 8009806:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800980a:	f04f 0901 	mov.w	r9, #1
 800980e:	4623      	mov	r3, r4
 8009810:	469a      	mov	sl, r3
 8009812:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009816:	b10a      	cbz	r2, 800981c <_svfiprintf_r+0x5c>
 8009818:	2a25      	cmp	r2, #37	; 0x25
 800981a:	d1f9      	bne.n	8009810 <_svfiprintf_r+0x50>
 800981c:	ebba 0b04 	subs.w	fp, sl, r4
 8009820:	d00b      	beq.n	800983a <_svfiprintf_r+0x7a>
 8009822:	465b      	mov	r3, fp
 8009824:	4622      	mov	r2, r4
 8009826:	4629      	mov	r1, r5
 8009828:	4638      	mov	r0, r7
 800982a:	f7ff ff6f 	bl	800970c <__ssputs_r>
 800982e:	3001      	adds	r0, #1
 8009830:	f000 80a9 	beq.w	8009986 <_svfiprintf_r+0x1c6>
 8009834:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009836:	445a      	add	r2, fp
 8009838:	9209      	str	r2, [sp, #36]	; 0x24
 800983a:	f89a 3000 	ldrb.w	r3, [sl]
 800983e:	2b00      	cmp	r3, #0
 8009840:	f000 80a1 	beq.w	8009986 <_svfiprintf_r+0x1c6>
 8009844:	2300      	movs	r3, #0
 8009846:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800984a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800984e:	f10a 0a01 	add.w	sl, sl, #1
 8009852:	9304      	str	r3, [sp, #16]
 8009854:	9307      	str	r3, [sp, #28]
 8009856:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800985a:	931a      	str	r3, [sp, #104]	; 0x68
 800985c:	4654      	mov	r4, sl
 800985e:	2205      	movs	r2, #5
 8009860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009864:	4850      	ldr	r0, [pc, #320]	; (80099a8 <_svfiprintf_r+0x1e8>)
 8009866:	f7f6 fcc3 	bl	80001f0 <memchr>
 800986a:	9a04      	ldr	r2, [sp, #16]
 800986c:	b9d8      	cbnz	r0, 80098a6 <_svfiprintf_r+0xe6>
 800986e:	06d0      	lsls	r0, r2, #27
 8009870:	bf44      	itt	mi
 8009872:	2320      	movmi	r3, #32
 8009874:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009878:	0711      	lsls	r1, r2, #28
 800987a:	bf44      	itt	mi
 800987c:	232b      	movmi	r3, #43	; 0x2b
 800987e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009882:	f89a 3000 	ldrb.w	r3, [sl]
 8009886:	2b2a      	cmp	r3, #42	; 0x2a
 8009888:	d015      	beq.n	80098b6 <_svfiprintf_r+0xf6>
 800988a:	9a07      	ldr	r2, [sp, #28]
 800988c:	4654      	mov	r4, sl
 800988e:	2000      	movs	r0, #0
 8009890:	f04f 0c0a 	mov.w	ip, #10
 8009894:	4621      	mov	r1, r4
 8009896:	f811 3b01 	ldrb.w	r3, [r1], #1
 800989a:	3b30      	subs	r3, #48	; 0x30
 800989c:	2b09      	cmp	r3, #9
 800989e:	d94d      	bls.n	800993c <_svfiprintf_r+0x17c>
 80098a0:	b1b0      	cbz	r0, 80098d0 <_svfiprintf_r+0x110>
 80098a2:	9207      	str	r2, [sp, #28]
 80098a4:	e014      	b.n	80098d0 <_svfiprintf_r+0x110>
 80098a6:	eba0 0308 	sub.w	r3, r0, r8
 80098aa:	fa09 f303 	lsl.w	r3, r9, r3
 80098ae:	4313      	orrs	r3, r2
 80098b0:	9304      	str	r3, [sp, #16]
 80098b2:	46a2      	mov	sl, r4
 80098b4:	e7d2      	b.n	800985c <_svfiprintf_r+0x9c>
 80098b6:	9b03      	ldr	r3, [sp, #12]
 80098b8:	1d19      	adds	r1, r3, #4
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	9103      	str	r1, [sp, #12]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	bfbb      	ittet	lt
 80098c2:	425b      	neglt	r3, r3
 80098c4:	f042 0202 	orrlt.w	r2, r2, #2
 80098c8:	9307      	strge	r3, [sp, #28]
 80098ca:	9307      	strlt	r3, [sp, #28]
 80098cc:	bfb8      	it	lt
 80098ce:	9204      	strlt	r2, [sp, #16]
 80098d0:	7823      	ldrb	r3, [r4, #0]
 80098d2:	2b2e      	cmp	r3, #46	; 0x2e
 80098d4:	d10c      	bne.n	80098f0 <_svfiprintf_r+0x130>
 80098d6:	7863      	ldrb	r3, [r4, #1]
 80098d8:	2b2a      	cmp	r3, #42	; 0x2a
 80098da:	d134      	bne.n	8009946 <_svfiprintf_r+0x186>
 80098dc:	9b03      	ldr	r3, [sp, #12]
 80098de:	1d1a      	adds	r2, r3, #4
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	9203      	str	r2, [sp, #12]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	bfb8      	it	lt
 80098e8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80098ec:	3402      	adds	r4, #2
 80098ee:	9305      	str	r3, [sp, #20]
 80098f0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80099b8 <_svfiprintf_r+0x1f8>
 80098f4:	7821      	ldrb	r1, [r4, #0]
 80098f6:	2203      	movs	r2, #3
 80098f8:	4650      	mov	r0, sl
 80098fa:	f7f6 fc79 	bl	80001f0 <memchr>
 80098fe:	b138      	cbz	r0, 8009910 <_svfiprintf_r+0x150>
 8009900:	9b04      	ldr	r3, [sp, #16]
 8009902:	eba0 000a 	sub.w	r0, r0, sl
 8009906:	2240      	movs	r2, #64	; 0x40
 8009908:	4082      	lsls	r2, r0
 800990a:	4313      	orrs	r3, r2
 800990c:	3401      	adds	r4, #1
 800990e:	9304      	str	r3, [sp, #16]
 8009910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009914:	4825      	ldr	r0, [pc, #148]	; (80099ac <_svfiprintf_r+0x1ec>)
 8009916:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800991a:	2206      	movs	r2, #6
 800991c:	f7f6 fc68 	bl	80001f0 <memchr>
 8009920:	2800      	cmp	r0, #0
 8009922:	d038      	beq.n	8009996 <_svfiprintf_r+0x1d6>
 8009924:	4b22      	ldr	r3, [pc, #136]	; (80099b0 <_svfiprintf_r+0x1f0>)
 8009926:	bb1b      	cbnz	r3, 8009970 <_svfiprintf_r+0x1b0>
 8009928:	9b03      	ldr	r3, [sp, #12]
 800992a:	3307      	adds	r3, #7
 800992c:	f023 0307 	bic.w	r3, r3, #7
 8009930:	3308      	adds	r3, #8
 8009932:	9303      	str	r3, [sp, #12]
 8009934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009936:	4433      	add	r3, r6
 8009938:	9309      	str	r3, [sp, #36]	; 0x24
 800993a:	e768      	b.n	800980e <_svfiprintf_r+0x4e>
 800993c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009940:	460c      	mov	r4, r1
 8009942:	2001      	movs	r0, #1
 8009944:	e7a6      	b.n	8009894 <_svfiprintf_r+0xd4>
 8009946:	2300      	movs	r3, #0
 8009948:	3401      	adds	r4, #1
 800994a:	9305      	str	r3, [sp, #20]
 800994c:	4619      	mov	r1, r3
 800994e:	f04f 0c0a 	mov.w	ip, #10
 8009952:	4620      	mov	r0, r4
 8009954:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009958:	3a30      	subs	r2, #48	; 0x30
 800995a:	2a09      	cmp	r2, #9
 800995c:	d903      	bls.n	8009966 <_svfiprintf_r+0x1a6>
 800995e:	2b00      	cmp	r3, #0
 8009960:	d0c6      	beq.n	80098f0 <_svfiprintf_r+0x130>
 8009962:	9105      	str	r1, [sp, #20]
 8009964:	e7c4      	b.n	80098f0 <_svfiprintf_r+0x130>
 8009966:	fb0c 2101 	mla	r1, ip, r1, r2
 800996a:	4604      	mov	r4, r0
 800996c:	2301      	movs	r3, #1
 800996e:	e7f0      	b.n	8009952 <_svfiprintf_r+0x192>
 8009970:	ab03      	add	r3, sp, #12
 8009972:	9300      	str	r3, [sp, #0]
 8009974:	462a      	mov	r2, r5
 8009976:	4b0f      	ldr	r3, [pc, #60]	; (80099b4 <_svfiprintf_r+0x1f4>)
 8009978:	a904      	add	r1, sp, #16
 800997a:	4638      	mov	r0, r7
 800997c:	f3af 8000 	nop.w
 8009980:	1c42      	adds	r2, r0, #1
 8009982:	4606      	mov	r6, r0
 8009984:	d1d6      	bne.n	8009934 <_svfiprintf_r+0x174>
 8009986:	89ab      	ldrh	r3, [r5, #12]
 8009988:	065b      	lsls	r3, r3, #25
 800998a:	f53f af2d 	bmi.w	80097e8 <_svfiprintf_r+0x28>
 800998e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009990:	b01d      	add	sp, #116	; 0x74
 8009992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009996:	ab03      	add	r3, sp, #12
 8009998:	9300      	str	r3, [sp, #0]
 800999a:	462a      	mov	r2, r5
 800999c:	4b05      	ldr	r3, [pc, #20]	; (80099b4 <_svfiprintf_r+0x1f4>)
 800999e:	a904      	add	r1, sp, #16
 80099a0:	4638      	mov	r0, r7
 80099a2:	f000 f879 	bl	8009a98 <_printf_i>
 80099a6:	e7eb      	b.n	8009980 <_svfiprintf_r+0x1c0>
 80099a8:	08009e5c 	.word	0x08009e5c
 80099ac:	08009e66 	.word	0x08009e66
 80099b0:	00000000 	.word	0x00000000
 80099b4:	0800970d 	.word	0x0800970d
 80099b8:	08009e62 	.word	0x08009e62

080099bc <_printf_common>:
 80099bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099c0:	4616      	mov	r6, r2
 80099c2:	4699      	mov	r9, r3
 80099c4:	688a      	ldr	r2, [r1, #8]
 80099c6:	690b      	ldr	r3, [r1, #16]
 80099c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099cc:	4293      	cmp	r3, r2
 80099ce:	bfb8      	it	lt
 80099d0:	4613      	movlt	r3, r2
 80099d2:	6033      	str	r3, [r6, #0]
 80099d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80099d8:	4607      	mov	r7, r0
 80099da:	460c      	mov	r4, r1
 80099dc:	b10a      	cbz	r2, 80099e2 <_printf_common+0x26>
 80099de:	3301      	adds	r3, #1
 80099e0:	6033      	str	r3, [r6, #0]
 80099e2:	6823      	ldr	r3, [r4, #0]
 80099e4:	0699      	lsls	r1, r3, #26
 80099e6:	bf42      	ittt	mi
 80099e8:	6833      	ldrmi	r3, [r6, #0]
 80099ea:	3302      	addmi	r3, #2
 80099ec:	6033      	strmi	r3, [r6, #0]
 80099ee:	6825      	ldr	r5, [r4, #0]
 80099f0:	f015 0506 	ands.w	r5, r5, #6
 80099f4:	d106      	bne.n	8009a04 <_printf_common+0x48>
 80099f6:	f104 0a19 	add.w	sl, r4, #25
 80099fa:	68e3      	ldr	r3, [r4, #12]
 80099fc:	6832      	ldr	r2, [r6, #0]
 80099fe:	1a9b      	subs	r3, r3, r2
 8009a00:	42ab      	cmp	r3, r5
 8009a02:	dc26      	bgt.n	8009a52 <_printf_common+0x96>
 8009a04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a08:	1e13      	subs	r3, r2, #0
 8009a0a:	6822      	ldr	r2, [r4, #0]
 8009a0c:	bf18      	it	ne
 8009a0e:	2301      	movne	r3, #1
 8009a10:	0692      	lsls	r2, r2, #26
 8009a12:	d42b      	bmi.n	8009a6c <_printf_common+0xb0>
 8009a14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a18:	4649      	mov	r1, r9
 8009a1a:	4638      	mov	r0, r7
 8009a1c:	47c0      	blx	r8
 8009a1e:	3001      	adds	r0, #1
 8009a20:	d01e      	beq.n	8009a60 <_printf_common+0xa4>
 8009a22:	6823      	ldr	r3, [r4, #0]
 8009a24:	6922      	ldr	r2, [r4, #16]
 8009a26:	f003 0306 	and.w	r3, r3, #6
 8009a2a:	2b04      	cmp	r3, #4
 8009a2c:	bf02      	ittt	eq
 8009a2e:	68e5      	ldreq	r5, [r4, #12]
 8009a30:	6833      	ldreq	r3, [r6, #0]
 8009a32:	1aed      	subeq	r5, r5, r3
 8009a34:	68a3      	ldr	r3, [r4, #8]
 8009a36:	bf0c      	ite	eq
 8009a38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a3c:	2500      	movne	r5, #0
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	bfc4      	itt	gt
 8009a42:	1a9b      	subgt	r3, r3, r2
 8009a44:	18ed      	addgt	r5, r5, r3
 8009a46:	2600      	movs	r6, #0
 8009a48:	341a      	adds	r4, #26
 8009a4a:	42b5      	cmp	r5, r6
 8009a4c:	d11a      	bne.n	8009a84 <_printf_common+0xc8>
 8009a4e:	2000      	movs	r0, #0
 8009a50:	e008      	b.n	8009a64 <_printf_common+0xa8>
 8009a52:	2301      	movs	r3, #1
 8009a54:	4652      	mov	r2, sl
 8009a56:	4649      	mov	r1, r9
 8009a58:	4638      	mov	r0, r7
 8009a5a:	47c0      	blx	r8
 8009a5c:	3001      	adds	r0, #1
 8009a5e:	d103      	bne.n	8009a68 <_printf_common+0xac>
 8009a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a68:	3501      	adds	r5, #1
 8009a6a:	e7c6      	b.n	80099fa <_printf_common+0x3e>
 8009a6c:	18e1      	adds	r1, r4, r3
 8009a6e:	1c5a      	adds	r2, r3, #1
 8009a70:	2030      	movs	r0, #48	; 0x30
 8009a72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a76:	4422      	add	r2, r4
 8009a78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a80:	3302      	adds	r3, #2
 8009a82:	e7c7      	b.n	8009a14 <_printf_common+0x58>
 8009a84:	2301      	movs	r3, #1
 8009a86:	4622      	mov	r2, r4
 8009a88:	4649      	mov	r1, r9
 8009a8a:	4638      	mov	r0, r7
 8009a8c:	47c0      	blx	r8
 8009a8e:	3001      	adds	r0, #1
 8009a90:	d0e6      	beq.n	8009a60 <_printf_common+0xa4>
 8009a92:	3601      	adds	r6, #1
 8009a94:	e7d9      	b.n	8009a4a <_printf_common+0x8e>
	...

08009a98 <_printf_i>:
 8009a98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a9c:	7e0f      	ldrb	r7, [r1, #24]
 8009a9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009aa0:	2f78      	cmp	r7, #120	; 0x78
 8009aa2:	4691      	mov	r9, r2
 8009aa4:	4680      	mov	r8, r0
 8009aa6:	460c      	mov	r4, r1
 8009aa8:	469a      	mov	sl, r3
 8009aaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009aae:	d807      	bhi.n	8009ac0 <_printf_i+0x28>
 8009ab0:	2f62      	cmp	r7, #98	; 0x62
 8009ab2:	d80a      	bhi.n	8009aca <_printf_i+0x32>
 8009ab4:	2f00      	cmp	r7, #0
 8009ab6:	f000 80d4 	beq.w	8009c62 <_printf_i+0x1ca>
 8009aba:	2f58      	cmp	r7, #88	; 0x58
 8009abc:	f000 80c0 	beq.w	8009c40 <_printf_i+0x1a8>
 8009ac0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ac4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ac8:	e03a      	b.n	8009b40 <_printf_i+0xa8>
 8009aca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ace:	2b15      	cmp	r3, #21
 8009ad0:	d8f6      	bhi.n	8009ac0 <_printf_i+0x28>
 8009ad2:	a101      	add	r1, pc, #4	; (adr r1, 8009ad8 <_printf_i+0x40>)
 8009ad4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ad8:	08009b31 	.word	0x08009b31
 8009adc:	08009b45 	.word	0x08009b45
 8009ae0:	08009ac1 	.word	0x08009ac1
 8009ae4:	08009ac1 	.word	0x08009ac1
 8009ae8:	08009ac1 	.word	0x08009ac1
 8009aec:	08009ac1 	.word	0x08009ac1
 8009af0:	08009b45 	.word	0x08009b45
 8009af4:	08009ac1 	.word	0x08009ac1
 8009af8:	08009ac1 	.word	0x08009ac1
 8009afc:	08009ac1 	.word	0x08009ac1
 8009b00:	08009ac1 	.word	0x08009ac1
 8009b04:	08009c49 	.word	0x08009c49
 8009b08:	08009b71 	.word	0x08009b71
 8009b0c:	08009c03 	.word	0x08009c03
 8009b10:	08009ac1 	.word	0x08009ac1
 8009b14:	08009ac1 	.word	0x08009ac1
 8009b18:	08009c6b 	.word	0x08009c6b
 8009b1c:	08009ac1 	.word	0x08009ac1
 8009b20:	08009b71 	.word	0x08009b71
 8009b24:	08009ac1 	.word	0x08009ac1
 8009b28:	08009ac1 	.word	0x08009ac1
 8009b2c:	08009c0b 	.word	0x08009c0b
 8009b30:	682b      	ldr	r3, [r5, #0]
 8009b32:	1d1a      	adds	r2, r3, #4
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	602a      	str	r2, [r5, #0]
 8009b38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b40:	2301      	movs	r3, #1
 8009b42:	e09f      	b.n	8009c84 <_printf_i+0x1ec>
 8009b44:	6820      	ldr	r0, [r4, #0]
 8009b46:	682b      	ldr	r3, [r5, #0]
 8009b48:	0607      	lsls	r7, r0, #24
 8009b4a:	f103 0104 	add.w	r1, r3, #4
 8009b4e:	6029      	str	r1, [r5, #0]
 8009b50:	d501      	bpl.n	8009b56 <_printf_i+0xbe>
 8009b52:	681e      	ldr	r6, [r3, #0]
 8009b54:	e003      	b.n	8009b5e <_printf_i+0xc6>
 8009b56:	0646      	lsls	r6, r0, #25
 8009b58:	d5fb      	bpl.n	8009b52 <_printf_i+0xba>
 8009b5a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009b5e:	2e00      	cmp	r6, #0
 8009b60:	da03      	bge.n	8009b6a <_printf_i+0xd2>
 8009b62:	232d      	movs	r3, #45	; 0x2d
 8009b64:	4276      	negs	r6, r6
 8009b66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b6a:	485a      	ldr	r0, [pc, #360]	; (8009cd4 <_printf_i+0x23c>)
 8009b6c:	230a      	movs	r3, #10
 8009b6e:	e012      	b.n	8009b96 <_printf_i+0xfe>
 8009b70:	682b      	ldr	r3, [r5, #0]
 8009b72:	6820      	ldr	r0, [r4, #0]
 8009b74:	1d19      	adds	r1, r3, #4
 8009b76:	6029      	str	r1, [r5, #0]
 8009b78:	0605      	lsls	r5, r0, #24
 8009b7a:	d501      	bpl.n	8009b80 <_printf_i+0xe8>
 8009b7c:	681e      	ldr	r6, [r3, #0]
 8009b7e:	e002      	b.n	8009b86 <_printf_i+0xee>
 8009b80:	0641      	lsls	r1, r0, #25
 8009b82:	d5fb      	bpl.n	8009b7c <_printf_i+0xe4>
 8009b84:	881e      	ldrh	r6, [r3, #0]
 8009b86:	4853      	ldr	r0, [pc, #332]	; (8009cd4 <_printf_i+0x23c>)
 8009b88:	2f6f      	cmp	r7, #111	; 0x6f
 8009b8a:	bf0c      	ite	eq
 8009b8c:	2308      	moveq	r3, #8
 8009b8e:	230a      	movne	r3, #10
 8009b90:	2100      	movs	r1, #0
 8009b92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b96:	6865      	ldr	r5, [r4, #4]
 8009b98:	60a5      	str	r5, [r4, #8]
 8009b9a:	2d00      	cmp	r5, #0
 8009b9c:	bfa2      	ittt	ge
 8009b9e:	6821      	ldrge	r1, [r4, #0]
 8009ba0:	f021 0104 	bicge.w	r1, r1, #4
 8009ba4:	6021      	strge	r1, [r4, #0]
 8009ba6:	b90e      	cbnz	r6, 8009bac <_printf_i+0x114>
 8009ba8:	2d00      	cmp	r5, #0
 8009baa:	d04b      	beq.n	8009c44 <_printf_i+0x1ac>
 8009bac:	4615      	mov	r5, r2
 8009bae:	fbb6 f1f3 	udiv	r1, r6, r3
 8009bb2:	fb03 6711 	mls	r7, r3, r1, r6
 8009bb6:	5dc7      	ldrb	r7, [r0, r7]
 8009bb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009bbc:	4637      	mov	r7, r6
 8009bbe:	42bb      	cmp	r3, r7
 8009bc0:	460e      	mov	r6, r1
 8009bc2:	d9f4      	bls.n	8009bae <_printf_i+0x116>
 8009bc4:	2b08      	cmp	r3, #8
 8009bc6:	d10b      	bne.n	8009be0 <_printf_i+0x148>
 8009bc8:	6823      	ldr	r3, [r4, #0]
 8009bca:	07de      	lsls	r6, r3, #31
 8009bcc:	d508      	bpl.n	8009be0 <_printf_i+0x148>
 8009bce:	6923      	ldr	r3, [r4, #16]
 8009bd0:	6861      	ldr	r1, [r4, #4]
 8009bd2:	4299      	cmp	r1, r3
 8009bd4:	bfde      	ittt	le
 8009bd6:	2330      	movle	r3, #48	; 0x30
 8009bd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009bdc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009be0:	1b52      	subs	r2, r2, r5
 8009be2:	6122      	str	r2, [r4, #16]
 8009be4:	f8cd a000 	str.w	sl, [sp]
 8009be8:	464b      	mov	r3, r9
 8009bea:	aa03      	add	r2, sp, #12
 8009bec:	4621      	mov	r1, r4
 8009bee:	4640      	mov	r0, r8
 8009bf0:	f7ff fee4 	bl	80099bc <_printf_common>
 8009bf4:	3001      	adds	r0, #1
 8009bf6:	d14a      	bne.n	8009c8e <_printf_i+0x1f6>
 8009bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bfc:	b004      	add	sp, #16
 8009bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c02:	6823      	ldr	r3, [r4, #0]
 8009c04:	f043 0320 	orr.w	r3, r3, #32
 8009c08:	6023      	str	r3, [r4, #0]
 8009c0a:	4833      	ldr	r0, [pc, #204]	; (8009cd8 <_printf_i+0x240>)
 8009c0c:	2778      	movs	r7, #120	; 0x78
 8009c0e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009c12:	6823      	ldr	r3, [r4, #0]
 8009c14:	6829      	ldr	r1, [r5, #0]
 8009c16:	061f      	lsls	r7, r3, #24
 8009c18:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c1c:	d402      	bmi.n	8009c24 <_printf_i+0x18c>
 8009c1e:	065f      	lsls	r7, r3, #25
 8009c20:	bf48      	it	mi
 8009c22:	b2b6      	uxthmi	r6, r6
 8009c24:	07df      	lsls	r7, r3, #31
 8009c26:	bf48      	it	mi
 8009c28:	f043 0320 	orrmi.w	r3, r3, #32
 8009c2c:	6029      	str	r1, [r5, #0]
 8009c2e:	bf48      	it	mi
 8009c30:	6023      	strmi	r3, [r4, #0]
 8009c32:	b91e      	cbnz	r6, 8009c3c <_printf_i+0x1a4>
 8009c34:	6823      	ldr	r3, [r4, #0]
 8009c36:	f023 0320 	bic.w	r3, r3, #32
 8009c3a:	6023      	str	r3, [r4, #0]
 8009c3c:	2310      	movs	r3, #16
 8009c3e:	e7a7      	b.n	8009b90 <_printf_i+0xf8>
 8009c40:	4824      	ldr	r0, [pc, #144]	; (8009cd4 <_printf_i+0x23c>)
 8009c42:	e7e4      	b.n	8009c0e <_printf_i+0x176>
 8009c44:	4615      	mov	r5, r2
 8009c46:	e7bd      	b.n	8009bc4 <_printf_i+0x12c>
 8009c48:	682b      	ldr	r3, [r5, #0]
 8009c4a:	6826      	ldr	r6, [r4, #0]
 8009c4c:	6961      	ldr	r1, [r4, #20]
 8009c4e:	1d18      	adds	r0, r3, #4
 8009c50:	6028      	str	r0, [r5, #0]
 8009c52:	0635      	lsls	r5, r6, #24
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	d501      	bpl.n	8009c5c <_printf_i+0x1c4>
 8009c58:	6019      	str	r1, [r3, #0]
 8009c5a:	e002      	b.n	8009c62 <_printf_i+0x1ca>
 8009c5c:	0670      	lsls	r0, r6, #25
 8009c5e:	d5fb      	bpl.n	8009c58 <_printf_i+0x1c0>
 8009c60:	8019      	strh	r1, [r3, #0]
 8009c62:	2300      	movs	r3, #0
 8009c64:	6123      	str	r3, [r4, #16]
 8009c66:	4615      	mov	r5, r2
 8009c68:	e7bc      	b.n	8009be4 <_printf_i+0x14c>
 8009c6a:	682b      	ldr	r3, [r5, #0]
 8009c6c:	1d1a      	adds	r2, r3, #4
 8009c6e:	602a      	str	r2, [r5, #0]
 8009c70:	681d      	ldr	r5, [r3, #0]
 8009c72:	6862      	ldr	r2, [r4, #4]
 8009c74:	2100      	movs	r1, #0
 8009c76:	4628      	mov	r0, r5
 8009c78:	f7f6 faba 	bl	80001f0 <memchr>
 8009c7c:	b108      	cbz	r0, 8009c82 <_printf_i+0x1ea>
 8009c7e:	1b40      	subs	r0, r0, r5
 8009c80:	6060      	str	r0, [r4, #4]
 8009c82:	6863      	ldr	r3, [r4, #4]
 8009c84:	6123      	str	r3, [r4, #16]
 8009c86:	2300      	movs	r3, #0
 8009c88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c8c:	e7aa      	b.n	8009be4 <_printf_i+0x14c>
 8009c8e:	6923      	ldr	r3, [r4, #16]
 8009c90:	462a      	mov	r2, r5
 8009c92:	4649      	mov	r1, r9
 8009c94:	4640      	mov	r0, r8
 8009c96:	47d0      	blx	sl
 8009c98:	3001      	adds	r0, #1
 8009c9a:	d0ad      	beq.n	8009bf8 <_printf_i+0x160>
 8009c9c:	6823      	ldr	r3, [r4, #0]
 8009c9e:	079b      	lsls	r3, r3, #30
 8009ca0:	d413      	bmi.n	8009cca <_printf_i+0x232>
 8009ca2:	68e0      	ldr	r0, [r4, #12]
 8009ca4:	9b03      	ldr	r3, [sp, #12]
 8009ca6:	4298      	cmp	r0, r3
 8009ca8:	bfb8      	it	lt
 8009caa:	4618      	movlt	r0, r3
 8009cac:	e7a6      	b.n	8009bfc <_printf_i+0x164>
 8009cae:	2301      	movs	r3, #1
 8009cb0:	4632      	mov	r2, r6
 8009cb2:	4649      	mov	r1, r9
 8009cb4:	4640      	mov	r0, r8
 8009cb6:	47d0      	blx	sl
 8009cb8:	3001      	adds	r0, #1
 8009cba:	d09d      	beq.n	8009bf8 <_printf_i+0x160>
 8009cbc:	3501      	adds	r5, #1
 8009cbe:	68e3      	ldr	r3, [r4, #12]
 8009cc0:	9903      	ldr	r1, [sp, #12]
 8009cc2:	1a5b      	subs	r3, r3, r1
 8009cc4:	42ab      	cmp	r3, r5
 8009cc6:	dcf2      	bgt.n	8009cae <_printf_i+0x216>
 8009cc8:	e7eb      	b.n	8009ca2 <_printf_i+0x20a>
 8009cca:	2500      	movs	r5, #0
 8009ccc:	f104 0619 	add.w	r6, r4, #25
 8009cd0:	e7f5      	b.n	8009cbe <_printf_i+0x226>
 8009cd2:	bf00      	nop
 8009cd4:	08009e6d 	.word	0x08009e6d
 8009cd8:	08009e7e 	.word	0x08009e7e

08009cdc <memmove>:
 8009cdc:	4288      	cmp	r0, r1
 8009cde:	b510      	push	{r4, lr}
 8009ce0:	eb01 0402 	add.w	r4, r1, r2
 8009ce4:	d902      	bls.n	8009cec <memmove+0x10>
 8009ce6:	4284      	cmp	r4, r0
 8009ce8:	4623      	mov	r3, r4
 8009cea:	d807      	bhi.n	8009cfc <memmove+0x20>
 8009cec:	1e43      	subs	r3, r0, #1
 8009cee:	42a1      	cmp	r1, r4
 8009cf0:	d008      	beq.n	8009d04 <memmove+0x28>
 8009cf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009cf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009cfa:	e7f8      	b.n	8009cee <memmove+0x12>
 8009cfc:	4402      	add	r2, r0
 8009cfe:	4601      	mov	r1, r0
 8009d00:	428a      	cmp	r2, r1
 8009d02:	d100      	bne.n	8009d06 <memmove+0x2a>
 8009d04:	bd10      	pop	{r4, pc}
 8009d06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d0e:	e7f7      	b.n	8009d00 <memmove+0x24>

08009d10 <memcpy>:
 8009d10:	440a      	add	r2, r1
 8009d12:	4291      	cmp	r1, r2
 8009d14:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009d18:	d100      	bne.n	8009d1c <memcpy+0xc>
 8009d1a:	4770      	bx	lr
 8009d1c:	b510      	push	{r4, lr}
 8009d1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d26:	4291      	cmp	r1, r2
 8009d28:	d1f9      	bne.n	8009d1e <memcpy+0xe>
 8009d2a:	bd10      	pop	{r4, pc}

08009d2c <_realloc_r>:
 8009d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d30:	4680      	mov	r8, r0
 8009d32:	4614      	mov	r4, r2
 8009d34:	460e      	mov	r6, r1
 8009d36:	b921      	cbnz	r1, 8009d42 <_realloc_r+0x16>
 8009d38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d3c:	4611      	mov	r1, r2
 8009d3e:	f7ff bba9 	b.w	8009494 <_malloc_r>
 8009d42:	b92a      	cbnz	r2, 8009d50 <_realloc_r+0x24>
 8009d44:	f7ff fc96 	bl	8009674 <_free_r>
 8009d48:	4625      	mov	r5, r4
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d50:	f000 f81b 	bl	8009d8a <_malloc_usable_size_r>
 8009d54:	4284      	cmp	r4, r0
 8009d56:	4607      	mov	r7, r0
 8009d58:	d802      	bhi.n	8009d60 <_realloc_r+0x34>
 8009d5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009d5e:	d812      	bhi.n	8009d86 <_realloc_r+0x5a>
 8009d60:	4621      	mov	r1, r4
 8009d62:	4640      	mov	r0, r8
 8009d64:	f7ff fb96 	bl	8009494 <_malloc_r>
 8009d68:	4605      	mov	r5, r0
 8009d6a:	2800      	cmp	r0, #0
 8009d6c:	d0ed      	beq.n	8009d4a <_realloc_r+0x1e>
 8009d6e:	42bc      	cmp	r4, r7
 8009d70:	4622      	mov	r2, r4
 8009d72:	4631      	mov	r1, r6
 8009d74:	bf28      	it	cs
 8009d76:	463a      	movcs	r2, r7
 8009d78:	f7ff ffca 	bl	8009d10 <memcpy>
 8009d7c:	4631      	mov	r1, r6
 8009d7e:	4640      	mov	r0, r8
 8009d80:	f7ff fc78 	bl	8009674 <_free_r>
 8009d84:	e7e1      	b.n	8009d4a <_realloc_r+0x1e>
 8009d86:	4635      	mov	r5, r6
 8009d88:	e7df      	b.n	8009d4a <_realloc_r+0x1e>

08009d8a <_malloc_usable_size_r>:
 8009d8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d8e:	1f18      	subs	r0, r3, #4
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	bfbc      	itt	lt
 8009d94:	580b      	ldrlt	r3, [r1, r0]
 8009d96:	18c0      	addlt	r0, r0, r3
 8009d98:	4770      	bx	lr
	...

08009d9c <_init>:
 8009d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d9e:	bf00      	nop
 8009da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009da2:	bc08      	pop	{r3}
 8009da4:	469e      	mov	lr, r3
 8009da6:	4770      	bx	lr

08009da8 <_fini>:
 8009da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009daa:	bf00      	nop
 8009dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dae:	bc08      	pop	{r3}
 8009db0:	469e      	mov	lr, r3
 8009db2:	4770      	bx	lr
