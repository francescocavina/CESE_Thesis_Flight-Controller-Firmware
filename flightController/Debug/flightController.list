
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097b4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08009954  08009954  00019954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a8c  08009a8c  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08009a8c  08009a8c  00019a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a94  08009a94  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a94  08009a94  00019a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a98  08009a98  00019a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08009a9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001674  2000014c  08009be8  0002014c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017c0  08009be8  000217c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015b35  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038d2  00000000  00000000  00035cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001170  00000000  00000000  000395c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d59  00000000  00000000  0003a738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019ade  00000000  00000000  0003b491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001be5e  00000000  00000000  00054f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d049  00000000  00000000  00070dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004cd4  00000000  00000000  000fde18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00102aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000014c 	.word	0x2000014c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800993c 	.word	0x0800993c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000150 	.word	0x20000150
 80001dc:	0800993c 	.word	0x0800993c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <flightController_App>:
extern DMA_HandleTypeDef hdma_usart2_rx;

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
void flightController_App(void) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b0b2      	sub	sp, #200	; 0xc8
 8000590:	af00      	add	r7, sp, #0
	//        CDC_Transmit_FS(str0, strlen((const char *)str0));
	//    }

	/* IMU Demo */
	MPU6050_HandleTypeDef_t * hmpu6050;
	hmpu6050 = MPU6050_Init(&hi2c1);
 8000592:	486a      	ldr	r0, [pc, #424]	; (800073c <flightController_App+0x1b0>)
 8000594:	f000 fcf4 	bl	8000f80 <MPU6050_Init>
 8000598:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
	gyroscopeValues_t * gyroscopeValues;
	accelerometerValues_t * accelerometerValues;
	magnetometerValues_t * magnetometerValues;

	while (1) {
		HAL_Delay(1000);
 800059c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a0:	f000 fe82 	bl	80012a8 <HAL_Delay>

		MPU6050_ReadGyroscope(hmpu6050, gyroscopeValues);
 80005a4:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80005a8:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80005ac:	f000 fd1c 	bl	8000fe8 <MPU6050_ReadGyroscope>
		sprintf((char *)str1, (const char *)"Value Gyro X: %d\r\n",
				gyroscopeValues->gyroscopeX); CDC_Transmit_FS(str1, strlen((const char *)str1));
 80005b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80005b4:	f9b3 3000 	ldrsh.w	r3, [r3]
		sprintf((char *)str1, (const char *)"Value Gyro X: %d\r\n",
 80005b8:	461a      	mov	r2, r3
 80005ba:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80005be:	4960      	ldr	r1, [pc, #384]	; (8000740 <flightController_App+0x1b4>)
 80005c0:	4618      	mov	r0, r3
 80005c2:	f008 fdc3 	bl	800914c <siprintf>
				gyroscopeValues->gyroscopeX); CDC_Transmit_FS(str1, strlen((const char *)str1));
 80005c6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80005ca:	4618      	mov	r0, r3
 80005cc:	f7ff fe08 	bl	80001e0 <strlen>
 80005d0:	4603      	mov	r3, r0
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80005d8:	4611      	mov	r1, r2
 80005da:	4618      	mov	r0, r3
 80005dc:	f008 f8a8 	bl	8008730 <CDC_Transmit_FS>
		HAL_Delay(10);
 80005e0:	200a      	movs	r0, #10
 80005e2:	f000 fe61 	bl	80012a8 <HAL_Delay>
		sprintf((char *)str1, (const char *)"Value Gyro Y: %d\r\n",
				gyroscopeValues->gyroscopeY); CDC_Transmit_FS(str1, strlen((const char *)str1));
 80005e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80005ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		sprintf((char *)str1, (const char *)"Value Gyro Y: %d\r\n",
 80005ee:	461a      	mov	r2, r3
 80005f0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80005f4:	4953      	ldr	r1, [pc, #332]	; (8000744 <flightController_App+0x1b8>)
 80005f6:	4618      	mov	r0, r3
 80005f8:	f008 fda8 	bl	800914c <siprintf>
				gyroscopeValues->gyroscopeY); CDC_Transmit_FS(str1, strlen((const char *)str1));
 80005fc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff fded 	bl	80001e0 <strlen>
 8000606:	4603      	mov	r3, r0
 8000608:	b29a      	uxth	r2, r3
 800060a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800060e:	4611      	mov	r1, r2
 8000610:	4618      	mov	r0, r3
 8000612:	f008 f88d 	bl	8008730 <CDC_Transmit_FS>
		HAL_Delay(10);
 8000616:	200a      	movs	r0, #10
 8000618:	f000 fe46 	bl	80012a8 <HAL_Delay>
		sprintf((char *)str1, (const char *)"Value Gyro Z: %d\r\n\n\n\n",
				gyroscopeValues->gyroscopeZ);
 800061c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000620:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		sprintf((char *)str1, (const char *)"Value Gyro Z: %d\r\n\n\n\n",
 8000624:	461a      	mov	r2, r3
 8000626:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800062a:	4947      	ldr	r1, [pc, #284]	; (8000748 <flightController_App+0x1bc>)
 800062c:	4618      	mov	r0, r3
 800062e:	f008 fd8d 	bl	800914c <siprintf>
		CDC_Transmit_FS(str1, strlen((const char *)str1));
 8000632:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff fdd2 	bl	80001e0 <strlen>
 800063c:	4603      	mov	r3, r0
 800063e:	b29a      	uxth	r2, r3
 8000640:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000644:	4611      	mov	r1, r2
 8000646:	4618      	mov	r0, r3
 8000648:	f008 f872 	bl	8008730 <CDC_Transmit_FS>
		HAL_Delay(100);
 800064c:	2064      	movs	r0, #100	; 0x64
 800064e:	f000 fe2b 	bl	80012a8 <HAL_Delay>

		MPU6050_ReadAccelerometer(hmpu6050, accelerometerValues);
 8000652:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8000656:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800065a:	f000 fd27 	bl	80010ac <MPU6050_ReadAccelerometer>
		sprintf((char *)str2, (const char *)"Value Accel X: %d\r\n",
				accelerometerValues->accelerometerX);
 800065e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000662:	f9b3 3000 	ldrsh.w	r3, [r3]
		sprintf((char *)str2, (const char *)"Value Accel X: %d\r\n",
 8000666:	461a      	mov	r2, r3
 8000668:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800066c:	4937      	ldr	r1, [pc, #220]	; (800074c <flightController_App+0x1c0>)
 800066e:	4618      	mov	r0, r3
 8000670:	f008 fd6c 	bl	800914c <siprintf>
		CDC_Transmit_FS(str2, strlen((const char *)str2));
 8000674:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff fdb1 	bl	80001e0 <strlen>
 800067e:	4603      	mov	r3, r0
 8000680:	b29a      	uxth	r2, r3
 8000682:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000686:	4611      	mov	r1, r2
 8000688:	4618      	mov	r0, r3
 800068a:	f008 f851 	bl	8008730 <CDC_Transmit_FS>
		HAL_Delay(10);
 800068e:	200a      	movs	r0, #10
 8000690:	f000 fe0a 	bl	80012a8 <HAL_Delay>
		sprintf((char *)str2, (const char *)"Value Accel Y: %d\r\n",
				accelerometerValues->accelerometerY);
 8000694:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000698:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		sprintf((char *)str2, (const char *)"Value Accel Y: %d\r\n",
 800069c:	461a      	mov	r2, r3
 800069e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80006a2:	492b      	ldr	r1, [pc, #172]	; (8000750 <flightController_App+0x1c4>)
 80006a4:	4618      	mov	r0, r3
 80006a6:	f008 fd51 	bl	800914c <siprintf>
		CDC_Transmit_FS(str2, strlen((const char *)str2));
 80006aa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff fd96 	bl	80001e0 <strlen>
 80006b4:	4603      	mov	r3, r0
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80006bc:	4611      	mov	r1, r2
 80006be:	4618      	mov	r0, r3
 80006c0:	f008 f836 	bl	8008730 <CDC_Transmit_FS>
		HAL_Delay(10);
 80006c4:	200a      	movs	r0, #10
 80006c6:	f000 fdef 	bl	80012a8 <HAL_Delay>
		sprintf((char *)str2, (const char *)"Value Accel Z: %d\r\n\n\n\n",
				accelerometerValues->accelerometerZ);
 80006ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80006ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		sprintf((char *)str2, (const char *)"Value Accel Z: %d\r\n\n\n\n",
 80006d2:	461a      	mov	r2, r3
 80006d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80006d8:	491e      	ldr	r1, [pc, #120]	; (8000754 <flightController_App+0x1c8>)
 80006da:	4618      	mov	r0, r3
 80006dc:	f008 fd36 	bl	800914c <siprintf>
		CDC_Transmit_FS(str2, strlen((const char *)str2));
 80006e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff fd7b 	bl	80001e0 <strlen>
 80006ea:	4603      	mov	r3, r0
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80006f2:	4611      	mov	r1, r2
 80006f4:	4618      	mov	r0, r3
 80006f6:	f008 f81b 	bl	8008730 <CDC_Transmit_FS>
		HAL_Delay(100);
 80006fa:	2064      	movs	r0, #100	; 0x64
 80006fc:	f000 fdd4 	bl	80012a8 <HAL_Delay>

		sprintf((char *)str3, (const char *)"Value Temperature: %d\r\n\n\n\n\n",
				MPU6050_ReadTemperatureSensor(hmpu6050));
 8000700:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8000704:	f000 fd35 	bl	8001172 <MPU6050_ReadTemperatureSensor>
 8000708:	4603      	mov	r3, r0
		sprintf((char *)str3, (const char *)"Value Temperature: %d\r\n\n\n\n\n",
 800070a:	461a      	mov	r2, r3
 800070c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000710:	4911      	ldr	r1, [pc, #68]	; (8000758 <flightController_App+0x1cc>)
 8000712:	4618      	mov	r0, r3
 8000714:	f008 fd1a 	bl	800914c <siprintf>
		CDC_Transmit_FS(str3, strlen((const char *)str3));
 8000718:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff fd5f 	bl	80001e0 <strlen>
 8000722:	4603      	mov	r3, r0
 8000724:	b29a      	uxth	r2, r3
 8000726:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800072a:	4611      	mov	r1, r2
 800072c:	4618      	mov	r0, r3
 800072e:	f007 ffff 	bl	8008730 <CDC_Transmit_FS>
		HAL_Delay(100);
 8000732:	2064      	movs	r0, #100	; 0x64
 8000734:	f000 fdb8 	bl	80012a8 <HAL_Delay>
		HAL_Delay(1000);
 8000738:	e730      	b.n	800059c <flightController_App+0x10>
 800073a:	bf00      	nop
 800073c:	20000168 	.word	0x20000168
 8000740:	08009954 	.word	0x08009954
 8000744:	08009968 	.word	0x08009968
 8000748:	0800997c 	.word	0x0800997c
 800074c:	08009994 	.word	0x08009994
 8000750:	080099a8 	.word	0x080099a8
 8000754:	080099bc 	.word	0x080099bc
 8000758:	080099d4 	.word	0x080099d4

0800075c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000760:	f000 fd30 	bl	80011c4 <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000764:	f000 f810 	bl	8000788 <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000768:	f000 f8ea 	bl	8000940 <MX_GPIO_Init>
    MX_DMA_Init();
 800076c:	f000 f8ce 	bl	800090c <MX_DMA_Init>
    MX_USB_DEVICE_Init();
 8000770:	f007 ff20 	bl	80085b4 <MX_USB_DEVICE_Init>
    MX_I2C1_Init();
 8000774:	f000 f872 	bl	800085c <MX_I2C1_Init>
    MX_USART2_UART_Init();
 8000778:	f000 f89e 	bl	80008b8 <MX_USART2_UART_Init>
    /* USER CODE BEGIN 2 */
    flightController_App();
 800077c:	f7ff ff06 	bl	800058c <flightController_App>
 8000780:	2300      	movs	r3, #0
    /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    /* USER CODE END 3 */
}
 8000782:	4618      	mov	r0, r3
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b094      	sub	sp, #80	; 0x50
 800078c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078e:	f107 0320 	add.w	r3, r7, #32
 8000792:	2230      	movs	r2, #48	; 0x30
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f008 fcf8 	bl	800918c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	4b28      	ldr	r3, [pc, #160]	; (8000854 <SystemClock_Config+0xcc>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	4a27      	ldr	r2, [pc, #156]	; (8000854 <SystemClock_Config+0xcc>)
 80007b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ba:	6413      	str	r3, [r2, #64]	; 0x40
 80007bc:	4b25      	ldr	r3, [pc, #148]	; (8000854 <SystemClock_Config+0xcc>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007c8:	2300      	movs	r3, #0
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	4b22      	ldr	r3, [pc, #136]	; (8000858 <SystemClock_Config+0xd0>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007d4:	4a20      	ldr	r2, [pc, #128]	; (8000858 <SystemClock_Config+0xd0>)
 80007d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <SystemClock_Config+0xd0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e8:	2301      	movs	r3, #1
 80007ea:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f2:	2302      	movs	r3, #2
 80007f4:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 15;
 80007fc:	230f      	movs	r3, #15
 80007fe:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 144;
 8000800:	2390      	movs	r3, #144	; 0x90
 8000802:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000804:	2304      	movs	r3, #4
 8000806:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 5;
 8000808:	2305      	movs	r3, #5
 800080a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800080c:	f107 0320 	add.w	r3, r7, #32
 8000810:	4618      	mov	r0, r3
 8000812:	f003 fb9f 	bl	8003f54 <HAL_RCC_OscConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x98>
        Error_Handler();
 800081c:	f000 f8c6 	bl	80009ac <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType =
 8000820:	230f      	movs	r3, #15
 8000822:	60fb      	str	r3, [r7, #12]
        RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000824:	2302      	movs	r3, #2
 8000826:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800082c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000830:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	2101      	movs	r1, #1
 800083c:	4618      	mov	r0, r3
 800083e:	f003 fe01 	bl	8004444 <HAL_RCC_ClockConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0xc4>
        Error_Handler();
 8000848:	f000 f8b0 	bl	80009ac <Error_Handler>
    }
}
 800084c:	bf00      	nop
 800084e:	3750      	adds	r7, #80	; 0x50
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40023800 	.word	0x40023800
 8000858:	40007000 	.word	0x40007000

0800085c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN I2C1_Init 0 */
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */
    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <MX_I2C1_Init+0x50>)
 8000862:	4a13      	ldr	r2, [pc, #76]	; (80008b0 <MX_I2C1_Init+0x54>)
 8000864:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 400000;
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_I2C1_Init+0x50>)
 8000868:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <MX_I2C1_Init+0x58>)
 800086a:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_I2C1_Init+0x50>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_I2C1_Init+0x50>)
 8000874:	2200      	movs	r2, #0
 8000876:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_I2C1_Init+0x50>)
 800087a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800087e:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <MX_I2C1_Init+0x50>)
 8000882:	2200      	movs	r2, #0
 8000884:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_I2C1_Init+0x50>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <MX_I2C1_Init+0x50>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_I2C1_Init+0x50>)
 8000894:	2200      	movs	r2, #0
 8000896:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000898:	4804      	ldr	r0, [pc, #16]	; (80008ac <MX_I2C1_Init+0x50>)
 800089a:	f001 f91f 	bl	8001adc <HAL_I2C_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_I2C1_Init+0x4c>
        Error_Handler();
 80008a4:	f000 f882 	bl	80009ac <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */
    /* USER CODE END I2C1_Init 2 */
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000168 	.word	0x20000168
 80008b0:	40005400 	.word	0x40005400
 80008b4:	00061a80 	.word	0x00061a80

080008b8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART2_Init 0 */
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */
    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008be:	4a12      	ldr	r2, [pc, #72]	; (8000908 <MX_USART2_UART_Init+0x50>)
 80008c0:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c8:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_RX;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008de:	2204      	movs	r2, #4
 80008e0:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008f0:	f003 ff88 	bl	8004804 <HAL_UART_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART2_UART_Init+0x46>
        Error_Handler();
 80008fa:	f000 f857 	bl	80009ac <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */
    /* USER CODE END USART2_Init 2 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200001bc 	.word	0x200001bc
 8000908:	40004400 	.word	0x40004400

0800090c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_DMA_Init+0x30>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a08      	ldr	r2, [pc, #32]	; (800093c <MX_DMA_Init+0x30>)
 800091c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_DMA_Init+0x30>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800

08000940 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <MX_GPIO_Init+0x68>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a16      	ldr	r2, [pc, #88]	; (80009a8 <MX_GPIO_Init+0x68>)
 8000950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_GPIO_Init+0x68>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_GPIO_Init+0x68>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a0f      	ldr	r2, [pc, #60]	; (80009a8 <MX_GPIO_Init+0x68>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <MX_GPIO_Init+0x68>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_GPIO_Init+0x68>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <MX_GPIO_Init+0x68>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_GPIO_Init+0x68>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 800099a:	bf00      	nop
 800099c:	3714      	adds	r7, #20
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800

080009ac <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* USER CODE END Error_Handler_Debug */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
	...

080009bc <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <HAL_MspInit+0x4c>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	4a0f      	ldr	r2, [pc, #60]	; (8000a08 <HAL_MspInit+0x4c>)
 80009cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d0:	6453      	str	r3, [r2, #68]	; 0x44
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <HAL_MspInit+0x4c>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <HAL_MspInit+0x4c>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <HAL_MspInit+0x4c>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ec:	6413      	str	r3, [r2, #64]	; 0x40
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_MspInit+0x4c>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]
    /* System interrupt init*/

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800

08000a0c <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef * hi2c) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
    if (hi2c->Instance == I2C1) {
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a19      	ldr	r2, [pc, #100]	; (8000a90 <HAL_I2C_MspInit+0x84>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d12b      	bne.n	8000a86 <HAL_I2C_MspInit+0x7a>
        /* USER CODE BEGIN I2C1_MspInit 0 */

        /* USER CODE END I2C1_MspInit 0 */

        __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <HAL_I2C_MspInit+0x88>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a17      	ldr	r2, [pc, #92]	; (8000a94 <HAL_I2C_MspInit+0x88>)
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <HAL_I2C_MspInit+0x88>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]
        /**I2C1 GPIO Configuration
        PB6     ------> I2C1_SCL
        PB7     ------> I2C1_SDA
        */
        GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8000a4a:	23c0      	movs	r3, #192	; 0xc0
 8000a4c:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a4e:	2312      	movs	r3, #18
 8000a50:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a56:	2303      	movs	r3, #3
 8000a58:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a5a:	2304      	movs	r3, #4
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	480c      	ldr	r0, [pc, #48]	; (8000a98 <HAL_I2C_MspInit+0x8c>)
 8000a66:	f000 feb5 	bl	80017d4 <HAL_GPIO_Init>

        /* Peripheral clock enable */
        __HAL_RCC_I2C1_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <HAL_I2C_MspInit+0x88>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	4a08      	ldr	r2, [pc, #32]	; (8000a94 <HAL_I2C_MspInit+0x88>)
 8000a74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a78:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_I2C_MspInit+0x88>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
        /* USER CODE BEGIN I2C1_MspInit 1 */

        /* USER CODE END I2C1_MspInit 1 */
    }
}
 8000a86:	bf00      	nop
 8000a88:	3728      	adds	r7, #40	; 0x28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40005400 	.word	0x40005400
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020400 	.word	0x40020400

08000a9c <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef * huart) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
    if (huart->Instance == USART2) {
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a30      	ldr	r2, [pc, #192]	; (8000b7c <HAL_UART_MspInit+0xe0>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d15a      	bne.n	8000b74 <HAL_UART_MspInit+0xd8>
        /* USER CODE BEGIN USART2_MspInit 0 */

        /* USER CODE END USART2_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_USART2_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	4b2f      	ldr	r3, [pc, #188]	; (8000b80 <HAL_UART_MspInit+0xe4>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	4a2e      	ldr	r2, [pc, #184]	; (8000b80 <HAL_UART_MspInit+0xe4>)
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	4b2c      	ldr	r3, [pc, #176]	; (8000b80 <HAL_UART_MspInit+0xe4>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	4b28      	ldr	r3, [pc, #160]	; (8000b80 <HAL_UART_MspInit+0xe4>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a27      	ldr	r2, [pc, #156]	; (8000b80 <HAL_UART_MspInit+0xe4>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b25      	ldr	r3, [pc, #148]	; (8000b80 <HAL_UART_MspInit+0xe4>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
        /**USART2 GPIO Configuration
        PA2     ------> USART2_TX
        PA3     ------> USART2_RX
        */
        GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8000af6:	230c      	movs	r3, #12
 8000af8:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b02:	2303      	movs	r3, #3
 8000b04:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b06:	2307      	movs	r3, #7
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	481c      	ldr	r0, [pc, #112]	; (8000b84 <HAL_UART_MspInit+0xe8>)
 8000b12:	f000 fe5f 	bl	80017d4 <HAL_GPIO_Init>

        /* USART2 DMA Init */
        /* USART2_RX Init */
        hdma_usart2_rx.Instance = DMA1_Stream5;
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <HAL_UART_MspInit+0xec>)
 8000b18:	4a1c      	ldr	r2, [pc, #112]	; (8000b8c <HAL_UART_MspInit+0xf0>)
 8000b1a:	601a      	str	r2, [r3, #0]
        hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <HAL_UART_MspInit+0xec>)
 8000b1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b22:	605a      	str	r2, [r3, #4]
        hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b24:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <HAL_UART_MspInit+0xec>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
        hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <HAL_UART_MspInit+0xec>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	60da      	str	r2, [r3, #12]
        hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <HAL_UART_MspInit+0xec>)
 8000b32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b36:	611a      	str	r2, [r3, #16]
        hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b38:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <HAL_UART_MspInit+0xec>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	615a      	str	r2, [r3, #20]
        hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b3e:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_UART_MspInit+0xec>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
        hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000b44:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <HAL_UART_MspInit+0xec>)
 8000b46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b4a:	61da      	str	r2, [r3, #28]
        hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <HAL_UART_MspInit+0xec>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	621a      	str	r2, [r3, #32]
        hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b52:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <HAL_UART_MspInit+0xec>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	625a      	str	r2, [r3, #36]	; 0x24
        if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 8000b58:	480b      	ldr	r0, [pc, #44]	; (8000b88 <HAL_UART_MspInit+0xec>)
 8000b5a:	f000 fcdb 	bl	8001514 <HAL_DMA_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <HAL_UART_MspInit+0xcc>
            Error_Handler();
 8000b64:	f7ff ff22 	bl	80009ac <Error_Handler>
        }

        __HAL_LINKDMA(huart, hdmarx, hdma_usart2_rx);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <HAL_UART_MspInit+0xec>)
 8000b6c:	639a      	str	r2, [r3, #56]	; 0x38
 8000b6e:	4a06      	ldr	r2, [pc, #24]	; (8000b88 <HAL_UART_MspInit+0xec>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6393      	str	r3, [r2, #56]	; 0x38

        /* USER CODE BEGIN USART2_MspInit 1 */

        /* USER CODE END USART2_MspInit 1 */
    }
}
 8000b74:	bf00      	nop
 8000b76:	3728      	adds	r7, #40	; 0x28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40004400 	.word	0x40004400
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020000 	.word	0x40020000
 8000b88:	20000200 	.word	0x20000200
 8000b8c:	40026088 	.word	0x40026088

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8000b94:	e7fe      	b.n	8000b94 <NMI_Handler+0x4>

08000b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <UsageFault_Handler+0x4>

08000bae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bdc:	f000 fb44 	bl	8001268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <OTG_FS_IRQHandler+0x10>)
 8000bea:	f002 f886 	bl	8002cfa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000f4c 	.word	0x20000f4c

08000bf8 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c00:	4a14      	ldr	r2, [pc, #80]	; (8000c54 <_sbrk+0x5c>)
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <_sbrk+0x60>)
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 8000c0c:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d102      	bne.n	8000c1a <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <_sbrk+0x64>)
 8000c16:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <_sbrk+0x68>)
 8000c18:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <_sbrk+0x64>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d207      	bcs.n	8000c38 <_sbrk+0x40>
        errno = ENOMEM;
 8000c28:	f008 fac8 	bl	80091bc <__errno>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	220c      	movs	r2, #12
 8000c30:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c36:	e009      	b.n	8000c4c <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 8000c3e:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <_sbrk+0x64>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <_sbrk+0x64>)
 8000c48:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20010000 	.word	0x20010000
 8000c58:	00000400 	.word	0x00000400
 8000c5c:	20000260 	.word	0x20000260
 8000c60:	200017c0 	.word	0x200017c0

08000c64 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <SystemInit+0x20>)
 8000c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <SystemInit+0x20>)
 8000c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c8c:	480d      	ldr	r0, [pc, #52]	; (8000cc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c8e:	490e      	ldr	r1, [pc, #56]	; (8000cc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c90:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c94:	e002      	b.n	8000c9c <LoopCopyDataInit>

08000c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9a:	3304      	adds	r3, #4

08000c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca0:	d3f9      	bcc.n	8000c96 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca2:	4a0b      	ldr	r2, [pc, #44]	; (8000cd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ca4:	4c0b      	ldr	r4, [pc, #44]	; (8000cd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca8:	e001      	b.n	8000cae <LoopFillZerobss>

08000caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cac:	3204      	adds	r2, #4

08000cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb0:	d3fb      	bcc.n	8000caa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cb2:	f7ff ffd7 	bl	8000c64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cb6:	f008 fa87 	bl	80091c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cba:	f7ff fd4f 	bl	800075c <main>
  bx  lr
 8000cbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cc0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc8:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000ccc:	08009a9c 	.word	0x08009a9c
  ldr r2, =_sbss
 8000cd0:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000cd4:	200017c0 	.word	0x200017c0

08000cd8 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC_IRQHandler>

08000cda <I2C_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t I2C_Init(MPU6050_HandleTypeDef_t * hmpu6050) {
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b086      	sub	sp, #24
 8000cde:	af02      	add	r7, sp, #8
 8000ce0:	6078      	str	r0, [r7, #4]

    uint8_t who_am_I_value;

    /* Check parameter */
    if (NULL == hmpu6050) {
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d101      	bne.n	8000cec <I2C_Init+0x12>
        return false;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	e010      	b.n	8000d0e <I2C_Init+0x34>
    }

    /* Read IMU device ID */
    I2C_Read(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_WHO_AM_I, &who_am_I_value, 1);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6858      	ldr	r0, [r3, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	7a19      	ldrb	r1, [r3, #8]
 8000cf4:	f107 030f 	add.w	r3, r7, #15
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	9200      	str	r2, [sp, #0]
 8000cfc:	2275      	movs	r2, #117	; 0x75
 8000cfe:	f000 f80a 	bl	8000d16 <I2C_Read>
    /* Check IMU device ID */
    if (who_am_I_value == MPU_6050_VAL_WHO_AM_I) {
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	2b68      	cmp	r3, #104	; 0x68
 8000d06:	d101      	bne.n	8000d0c <I2C_Init+0x32>
        /* Right IMU device ID */
        return true;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e000      	b.n	8000d0e <I2C_Init+0x34>
    } else {
        /* Wrong IMU device ID */
        return false;
 8000d0c:	2300      	movs	r3, #0
    }
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <I2C_Read>:

bool_t I2C_Read(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data,
                uint8_t dataSize) {
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b088      	sub	sp, #32
 8000d1a:	af04      	add	r7, sp, #16
 8000d1c:	60f8      	str	r0, [r7, #12]
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	460b      	mov	r3, r1
 8000d22:	72fb      	strb	r3, [r7, #11]
 8000d24:	4613      	mov	r3, r2
 8000d26:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d101      	bne.n	8000d32 <I2C_Read+0x1c>
        return false;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e02b      	b.n	8000d8a <I2C_Read+0x74>
    }
    if (0 == address) {
 8000d32:	7afb      	ldrb	r3, [r7, #11]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d101      	bne.n	8000d3c <I2C_Read+0x26>
        return false;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	e026      	b.n	8000d8a <I2C_Read+0x74>
    }
    if (reg < MPU_6050_MIN_REG_ADDR || reg > MPU_6050_MAX_REG_ADDR) {
 8000d3c:	7abb      	ldrb	r3, [r7, #10]
 8000d3e:	2b75      	cmp	r3, #117	; 0x75
 8000d40:	d901      	bls.n	8000d46 <I2C_Read+0x30>
        return false;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e021      	b.n	8000d8a <I2C_Read+0x74>
    }
    if (NULL == data) {
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d101      	bne.n	8000d50 <I2C_Read+0x3a>
        return false;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	e01c      	b.n	8000d8a <I2C_Read+0x74>
    }
    if (dataSize < MPU_6050_MIN_DATA_SIZE || dataSize > MPU_6050_MAX_DATA_SIZE) {
 8000d50:	7e3b      	ldrb	r3, [r7, #24]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d002      	beq.n	8000d5c <I2C_Read+0x46>
 8000d56:	7e3b      	ldrb	r3, [r7, #24]
 8000d58:	2b0a      	cmp	r3, #10
 8000d5a:	d901      	bls.n	8000d60 <I2C_Read+0x4a>
        return false;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	e014      	b.n	8000d8a <I2C_Read+0x74>
    }

    /* Read IMU data by passing a data register */
    if (HAL_OK != HAL_I2C_Mem_Read(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, dataSize,
 8000d60:	7afb      	ldrb	r3, [r7, #11]
 8000d62:	b299      	uxth	r1, r3
 8000d64:	7abb      	ldrb	r3, [r7, #10]
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	7e3b      	ldrb	r3, [r7, #24]
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	2064      	movs	r0, #100	; 0x64
 8000d6e:	9002      	str	r0, [sp, #8]
 8000d70:	9301      	str	r3, [sp, #4]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	2301      	movs	r3, #1
 8000d78:	68f8      	ldr	r0, [r7, #12]
 8000d7a:	f001 f8ed 	bl	8001f58 <HAL_I2C_Mem_Read>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <I2C_Read+0x72>
                                   MPU_6050_I2C_READ_TIMEOUT)) {

        /* Data couldn't be read */
        return false;
 8000d84:	2300      	movs	r3, #0
 8000d86:	e000      	b.n	8000d8a <I2C_Read+0x74>
    } else {

        /* Data read successfully */
        return true;
 8000d88:	2301      	movs	r3, #1
    }
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <I2C_Write>:

bool_t I2C_Write(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data,
                 uint8_t dataSize) {
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b088      	sub	sp, #32
 8000d96:	af04      	add	r7, sp, #16
 8000d98:	60f8      	str	r0, [r7, #12]
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	72fb      	strb	r3, [r7, #11]
 8000da0:	4613      	mov	r3, r2
 8000da2:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d101      	bne.n	8000dae <I2C_Write+0x1c>
        return false;
 8000daa:	2300      	movs	r3, #0
 8000dac:	e02b      	b.n	8000e06 <I2C_Write+0x74>
    }
    if (0 == address) {
 8000dae:	7afb      	ldrb	r3, [r7, #11]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d101      	bne.n	8000db8 <I2C_Write+0x26>
        return false;
 8000db4:	2300      	movs	r3, #0
 8000db6:	e026      	b.n	8000e06 <I2C_Write+0x74>
    }
    if (reg < MPU_6050_MIN_REG_ADDR || reg > MPU_6050_MAX_REG_ADDR) {
 8000db8:	7abb      	ldrb	r3, [r7, #10]
 8000dba:	2b75      	cmp	r3, #117	; 0x75
 8000dbc:	d901      	bls.n	8000dc2 <I2C_Write+0x30>
        return false;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e021      	b.n	8000e06 <I2C_Write+0x74>
    }
    if (NULL == data) {
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d101      	bne.n	8000dcc <I2C_Write+0x3a>
        return false;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	e01c      	b.n	8000e06 <I2C_Write+0x74>
    }
    if (dataSize < MPU_6050_MIN_DATA_SIZE || dataSize > MPU_6050_MAX_DATA_SIZE) {
 8000dcc:	7e3b      	ldrb	r3, [r7, #24]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d002      	beq.n	8000dd8 <I2C_Write+0x46>
 8000dd2:	7e3b      	ldrb	r3, [r7, #24]
 8000dd4:	2b0a      	cmp	r3, #10
 8000dd6:	d901      	bls.n	8000ddc <I2C_Write+0x4a>
        return false;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	e014      	b.n	8000e06 <I2C_Write+0x74>
    }

    /* Write to IMU */
    if (HAL_OK != HAL_I2C_Mem_Write(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, dataSize,
 8000ddc:	7afb      	ldrb	r3, [r7, #11]
 8000dde:	b299      	uxth	r1, r3
 8000de0:	7abb      	ldrb	r3, [r7, #10]
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	7e3b      	ldrb	r3, [r7, #24]
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	2064      	movs	r0, #100	; 0x64
 8000dea:	9002      	str	r0, [sp, #8]
 8000dec:	9301      	str	r3, [sp, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	2301      	movs	r3, #1
 8000df4:	68f8      	ldr	r0, [r7, #12]
 8000df6:	f000 ffb5 	bl	8001d64 <HAL_I2C_Mem_Write>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <I2C_Write+0x72>
                                    MPU_6050_I2C_WRITE_TIMEOUT)) {

        /* Data couldn't be written */
        return false;
 8000e00:	2300      	movs	r3, #0
 8000e02:	e000      	b.n	8000e06 <I2C_Write+0x74>
    } else {

        /* Data written successfully */
        return true;
 8000e04:	2301      	movs	r3, #1
    }
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <MPU6050_InstanceInit>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static MPU6050_HandleTypeDef_t * MPU6050_InstanceInit(I2C_HandleTypeDef * hi2c) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]

    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = pvortMalloc(sizeof(1));
#else
    /* Allocate dynamic memory for the MPU6050_HandleTypeDef_t structure */
    MPU6050_HandleTypeDef_t * hmpu6050 = malloc(sizeof(MPU6050_HandleTypeDef_t));
 8000e18:	2014      	movs	r0, #20
 8000e1a:	f008 f8db 	bl	8008fd4 <malloc>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	60fb      	str	r3, [r7, #12]

    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = malloc(sizeof(1));
 8000e22:	2004      	movs	r0, #4
 8000e24:	f008 f8d6 	bl	8008fd4 <malloc>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	60bb      	str	r3, [r7, #8]
#endif

    /* Check if dynamic memory allocation was successful */
    if (NULL == hmpu6050 || NULL == buffer) {
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d002      	beq.n	8000e38 <MPU6050_InstanceInit+0x28>
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d10c      	bne.n	8000e52 <MPU6050_InstanceInit+0x42>
        /* Free up dynamic allocated memory */
        vPortFree(hmpu6050->buffer);
        vPortFree(hmpu6050);
#else
        /* Free up dynamic allocated memory */
        hmpu6050->buffer = 0;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	60da      	str	r2, [r3, #12]
        free(hmpu6050->buffer);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f008 f8ce 	bl	8008fe4 <free>
        free(hmpu6050);
 8000e48:	68f8      	ldr	r0, [r7, #12]
 8000e4a:	f008 f8cb 	bl	8008fe4 <free>
#endif
        return NULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	e01b      	b.n	8000e8a <MPU6050_InstanceInit+0x7a>
    } else {
        /* Dynamic memory allocation was successful */

        /* Initialize MPU6050_HandleTypeDef_t structure */
        if (instancesNumber == 0) {
 8000e52:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <MPU6050_InstanceInit+0x84>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d106      	bne.n	8000e68 <MPU6050_InstanceInit+0x58>
            hmpu6050->instance = 1;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	701a      	strb	r2, [r3, #0]
            hmpu6050->address = MPU6050_AUX_VAL_I2C_ADDR1;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	22d0      	movs	r2, #208	; 0xd0
 8000e64:	721a      	strb	r2, [r3, #8]
 8000e66:	e009      	b.n	8000e7c <MPU6050_InstanceInit+0x6c>
        } else if (instancesNumber == 1) {
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <MPU6050_InstanceInit+0x84>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d105      	bne.n	8000e7c <MPU6050_InstanceInit+0x6c>
            hmpu6050->instance = 2;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2202      	movs	r2, #2
 8000e74:	701a      	strb	r2, [r3, #0]
            hmpu6050->address = MPU6050_AUX_VAL_I2C_ADDR2;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	22d1      	movs	r2, #209	; 0xd1
 8000e7a:	721a      	strb	r2, [r3, #8]
        }
        hmpu6050->hi2c = hi2c;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	605a      	str	r2, [r3, #4]
        hmpu6050->buffer = buffer;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	68ba      	ldr	r2, [r7, #8]
 8000e86:	60da      	str	r2, [r3, #12]
    }

    /* Return created instance */
    return hmpu6050;
 8000e88:	68fb      	ldr	r3, [r7, #12]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000264 	.word	0x20000264

08000e98 <MPU6050_Config>:

static void MPU6050_Config(MPU6050_HandleTypeDef_t * hmpu6050) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af02      	add	r7, sp, #8
 8000e9e:	6078      	str	r0, [r7, #4]

    /* Configure MPU6050 device */
    uint8_t regValue;

    /* Wake up device */
    regValue = MPU_6050_VAL_PWR_MGMT_1_WAKEUP;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_PWR_MGMT_1, &regValue,
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6858      	ldr	r0, [r3, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	7a19      	ldrb	r1, [r3, #8]
 8000eac:	f107 030f 	add.w	r3, r7, #15
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	9200      	str	r2, [sp, #0]
 8000eb4:	226b      	movs	r2, #107	; 0x6b
 8000eb6:	f000 f84d 	bl	8000f54 <MPU6050_WriteRegister>
                              sizeof(regValue));

    /* Set clock source */
    regValue = MPU_6050_VAL_PWR_MGMT_1_CLKSEL_1;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_PWR_MGMT_1, &regValue,
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6858      	ldr	r0, [r3, #4]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	7a19      	ldrb	r1, [r3, #8]
 8000ec6:	f107 030f 	add.w	r3, r7, #15
 8000eca:	2201      	movs	r2, #1
 8000ecc:	9200      	str	r2, [sp, #0]
 8000ece:	226b      	movs	r2, #107	; 0x6b
 8000ed0:	f000 f840 	bl	8000f54 <MPU6050_WriteRegister>
                              sizeof(regValue));

    /* Set sample rate divider */
    regValue = MPU_6050_VAL_SMPLRT_DIV;
 8000ed4:	2318      	movs	r3, #24
 8000ed6:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_SMPLRT_DIV, &regValue,
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6858      	ldr	r0, [r3, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	7a19      	ldrb	r1, [r3, #8]
 8000ee0:	f107 030f 	add.w	r3, r7, #15
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	9200      	str	r2, [sp, #0]
 8000ee8:	2219      	movs	r2, #25
 8000eea:	f000 f833 	bl	8000f54 <MPU6050_WriteRegister>
                              sizeof(regValue));

    /* Configure gyroscope full scale range */
    regValue = MPU_6050_VAL_GYRO_CONFIG_FS_SEL_3;
 8000eee:	2318      	movs	r3, #24
 8000ef0:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_GYRO_CONFIG,
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6858      	ldr	r0, [r3, #4]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	7a19      	ldrb	r1, [r3, #8]
 8000efa:	f107 030f 	add.w	r3, r7, #15
 8000efe:	2201      	movs	r2, #1
 8000f00:	9200      	str	r2, [sp, #0]
 8000f02:	221b      	movs	r2, #27
 8000f04:	f000 f826 	bl	8000f54 <MPU6050_WriteRegister>
                              &regValue, sizeof(regValue));

    /* Configure accelerometer full scale range */
    regValue = MPU_6050_VAL_ACCEL_CONFIG_FS_SEL_3;
 8000f08:	2318      	movs	r3, #24
 8000f0a:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_ACCEL_CONFIG,
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6858      	ldr	r0, [r3, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	7a19      	ldrb	r1, [r3, #8]
 8000f14:	f107 030f 	add.w	r3, r7, #15
 8000f18:	2201      	movs	r2, #1
 8000f1a:	9200      	str	r2, [sp, #0]
 8000f1c:	221c      	movs	r2, #28
 8000f1e:	f000 f819 	bl	8000f54 <MPU6050_WriteRegister>
//    MPU6050_WriteRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_I2C_SLV0_REG,
//                              &regValue, sizeof(regValue));
//    regValue = 0x80 | 0x06; // Number of data bytes
//    MPU6050_WriteRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_I2C_SLV0_CTRL,
//                              &regValue, sizeof(regValue));
}
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <MPU6050_ReadRegister>:

static void MPU6050_ReadRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg,
                                     uint8_t * data, uint8_t dataSize) {
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b086      	sub	sp, #24
 8000f2e:	af02      	add	r7, sp, #8
 8000f30:	60f8      	str	r0, [r7, #12]
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	460b      	mov	r3, r1
 8000f36:	72fb      	strb	r3, [r7, #11]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	72bb      	strb	r3, [r7, #10]

    I2C_Read(hi2c, address, reg, data, dataSize);
 8000f3c:	7aba      	ldrb	r2, [r7, #10]
 8000f3e:	7af9      	ldrb	r1, [r7, #11]
 8000f40:	7e3b      	ldrb	r3, [r7, #24]
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68f8      	ldr	r0, [r7, #12]
 8000f48:	f7ff fee5 	bl	8000d16 <I2C_Read>
}
 8000f4c:	bf00      	nop
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <MPU6050_WriteRegister>:

static void MPU6050_WriteRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg,
                                      uint8_t * data, uint8_t dataSize) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af02      	add	r7, sp, #8
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	72fb      	strb	r3, [r7, #11]
 8000f62:	4613      	mov	r3, r2
 8000f64:	72bb      	strb	r3, [r7, #10]

    I2C_Write(hi2c, address, reg, data, dataSize);
 8000f66:	7aba      	ldrb	r2, [r7, #10]
 8000f68:	7af9      	ldrb	r1, [r7, #11]
 8000f6a:	7e3b      	ldrb	r3, [r7, #24]
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	68f8      	ldr	r0, [r7, #12]
 8000f72:	f7ff ff0e 	bl	8000d92 <I2C_Write>
}
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <MPU6050_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
MPU6050_HandleTypeDef_t * MPU6050_Init(I2C_HandleTypeDef * hi2c) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

    /* Check if driver was already once or twice initialized */
    if (MPU6050_MAX_NUMBER_INSTANCES == instancesNumber) {
 8000f88:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <MPU6050_Init+0x64>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d101      	bne.n	8000f94 <MPU6050_Init+0x14>
        return NULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	e022      	b.n	8000fda <MPU6050_Init+0x5a>
    }

    /* Create an instance of the MPU6050_IMU device */
    MPU6050_HandleTypeDef_t * hmpu6050 = MPU6050_InstanceInit(hi2c);
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff ff3b 	bl	8000e10 <MPU6050_InstanceInit>
 8000f9a:	60f8      	str	r0, [r7, #12]

    /* Check if instance was successfully created */
    if (NULL != hmpu6050) {
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d01a      	beq.n	8000fd8 <MPU6050_Init+0x58>
        /* Instance was successfully created */

        /* Initialize I2C communication */
        if (I2C_Init(hmpu6050)) {
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	f7ff fe99 	bl	8000cda <I2C_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d00a      	beq.n	8000fc4 <MPU6050_Init+0x44>

            /* Initialization was successful */
            /* Configure device */
            MPU6050_Config(hmpu6050);
 8000fae:	68f8      	ldr	r0, [r7, #12]
 8000fb0:	f7ff ff72 	bl	8000e98 <MPU6050_Config>

            instancesNumber++;
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <MPU6050_Init+0x64>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <MPU6050_Init+0x64>)
 8000fbe:	701a      	strb	r2, [r3, #0]

            return hmpu6050;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	e00a      	b.n	8000fda <MPU6050_Init+0x5a>
            /* Free up dynamic allocated memory */
            vPortFree(hmpu6050->buffer);
            vPortFree(hmpu6050);
#else
            /* Free up dynamic allocated memory */
            free(hmpu6050->buffer);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f008 f80b 	bl	8008fe4 <free>
            free(hmpu6050);
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f008 f808 	bl	8008fe4 <free>
#endif
            return NULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	e000      	b.n	8000fda <MPU6050_Init+0x5a>
        }
    } else {

        /* Instance couldn't be created */
        return NULL;
 8000fd8:	2300      	movs	r3, #0
    }
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000264 	.word	0x20000264

08000fe8 <MPU6050_ReadGyroscope>:
    MPU6050_WriteRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_PWR_MGMT_1, &regValue,
                              sizeof(regValue));
}

void MPU6050_ReadGyroscope(MPU6050_HandleTypeDef_t * hmpu6050,
                               gyroscopeValues_t * gyroscopeValues) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]

    gyroscopeValues->gyroscopeX = 0;
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	801a      	strh	r2, [r3, #0]
    gyroscopeValues->gyroscopeY = 0;
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	805a      	strh	r2, [r3, #2]
    gyroscopeValues->gyroscopeZ = 0;
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	2200      	movs	r2, #0
 8001002:	809a      	strh	r2, [r3, #4]

    uint8_t gyroscopeRawData[2];
    int16_t scaleFactor = MPU_6050_AUX_VAL_GYRO_SF_2000;
 8001004:	2310      	movs	r3, #16
 8001006:	81fb      	strh	r3, [r7, #14]

    /* Read gyroscope in axis X */
    MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_GYRO_XOUT_H,
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6858      	ldr	r0, [r3, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	7a19      	ldrb	r1, [r3, #8]
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	2202      	movs	r2, #2
 8001016:	9200      	str	r2, [sp, #0]
 8001018:	2243      	movs	r2, #67	; 0x43
 800101a:	f7ff ff86 	bl	8000f2a <MPU6050_ReadRegister>
                             gyroscopeRawData, sizeof(uint16_t));
    gyroscopeValues->gyroscopeX =
        (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]) / scaleFactor;
 800101e:	7b3b      	ldrb	r3, [r7, #12]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	b21a      	sxth	r2, r3
 8001024:	7b7b      	ldrb	r3, [r7, #13]
 8001026:	b21b      	sxth	r3, r3
 8001028:	4313      	orrs	r3, r2
 800102a:	b21b      	sxth	r3, r3
 800102c:	461a      	mov	r2, r3
 800102e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001032:	fb92 f3f3 	sdiv	r3, r2, r3
    gyroscopeValues->gyroscopeX =
 8001036:	b21a      	sxth	r2, r3
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	801a      	strh	r2, [r3, #0]

    /* Read gyroscope in axis Y */
    MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_GYRO_YOUT_H,
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6858      	ldr	r0, [r3, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	7a19      	ldrb	r1, [r3, #8]
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	2202      	movs	r2, #2
 800104a:	9200      	str	r2, [sp, #0]
 800104c:	2245      	movs	r2, #69	; 0x45
 800104e:	f7ff ff6c 	bl	8000f2a <MPU6050_ReadRegister>
                             gyroscopeRawData, sizeof(uint16_t));
    gyroscopeValues->gyroscopeY =
        (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]) / scaleFactor;
 8001052:	7b3b      	ldrb	r3, [r7, #12]
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	b21a      	sxth	r2, r3
 8001058:	7b7b      	ldrb	r3, [r7, #13]
 800105a:	b21b      	sxth	r3, r3
 800105c:	4313      	orrs	r3, r2
 800105e:	b21b      	sxth	r3, r3
 8001060:	461a      	mov	r2, r3
 8001062:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001066:	fb92 f3f3 	sdiv	r3, r2, r3
    gyroscopeValues->gyroscopeY =
 800106a:	b21a      	sxth	r2, r3
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	805a      	strh	r2, [r3, #2]

    /* Read gyroscope in axis Z */
    MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_GYRO_ZOUT_H,
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6858      	ldr	r0, [r3, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	7a19      	ldrb	r1, [r3, #8]
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2202      	movs	r2, #2
 800107e:	9200      	str	r2, [sp, #0]
 8001080:	2247      	movs	r2, #71	; 0x47
 8001082:	f7ff ff52 	bl	8000f2a <MPU6050_ReadRegister>
                             gyroscopeRawData, sizeof(uint16_t));
    gyroscopeValues->gyroscopeZ =
        (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]) / scaleFactor;
 8001086:	7b3b      	ldrb	r3, [r7, #12]
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	b21a      	sxth	r2, r3
 800108c:	7b7b      	ldrb	r3, [r7, #13]
 800108e:	b21b      	sxth	r3, r3
 8001090:	4313      	orrs	r3, r2
 8001092:	b21b      	sxth	r3, r3
 8001094:	461a      	mov	r2, r3
 8001096:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800109a:	fb92 f3f3 	sdiv	r3, r2, r3
    gyroscopeValues->gyroscopeZ =
 800109e:	b21a      	sxth	r2, r3
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	809a      	strh	r2, [r3, #4]
}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <MPU6050_ReadAccelerometer>:

void MPU6050_ReadAccelerometer(MPU6050_HandleTypeDef_t * hmpu6050,
                                   accelerometerValues_t * accelerometerValues) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af02      	add	r7, sp, #8
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]

    accelerometerValues->accelerometerX = 0;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	2200      	movs	r2, #0
 80010ba:	801a      	strh	r2, [r3, #0]
    accelerometerValues->accelerometerY = 0;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	2200      	movs	r2, #0
 80010c0:	805a      	strh	r2, [r3, #2]
    accelerometerValues->accelerometerZ = 0;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	2200      	movs	r2, #0
 80010c6:	809a      	strh	r2, [r3, #4]

    uint8_t accelerometerRawData[2];
    int16_t scaleFactor = MPU_6050_AUX_VAL_ACCEL_SF_16;
 80010c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010cc:	81fb      	strh	r3, [r7, #14]

    /* Read accelerometer in axis X */
    MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_ACCEL_XOUT_H,
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6858      	ldr	r0, [r3, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	7a19      	ldrb	r1, [r3, #8]
 80010d6:	f107 030c 	add.w	r3, r7, #12
 80010da:	2202      	movs	r2, #2
 80010dc:	9200      	str	r2, [sp, #0]
 80010de:	223b      	movs	r2, #59	; 0x3b
 80010e0:	f7ff ff23 	bl	8000f2a <MPU6050_ReadRegister>
                             accelerometerRawData, sizeof(uint16_t));
    accelerometerValues->accelerometerX =
        (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]) / scaleFactor;
 80010e4:	7b3b      	ldrb	r3, [r7, #12]
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	7b7b      	ldrb	r3, [r7, #13]
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	4313      	orrs	r3, r2
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	461a      	mov	r2, r3
 80010f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010f8:	fb92 f3f3 	sdiv	r3, r2, r3
    accelerometerValues->accelerometerX =
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	801a      	strh	r2, [r3, #0]

    /* Read accelerometer in axis Y */
    MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_ACCEL_YOUT_H,
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6858      	ldr	r0, [r3, #4]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	7a19      	ldrb	r1, [r3, #8]
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	2202      	movs	r2, #2
 8001110:	9200      	str	r2, [sp, #0]
 8001112:	223d      	movs	r2, #61	; 0x3d
 8001114:	f7ff ff09 	bl	8000f2a <MPU6050_ReadRegister>
                             accelerometerRawData, sizeof(uint16_t));
    accelerometerValues->accelerometerY =
        (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]) / scaleFactor;
 8001118:	7b3b      	ldrb	r3, [r7, #12]
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	b21a      	sxth	r2, r3
 800111e:	7b7b      	ldrb	r3, [r7, #13]
 8001120:	b21b      	sxth	r3, r3
 8001122:	4313      	orrs	r3, r2
 8001124:	b21b      	sxth	r3, r3
 8001126:	461a      	mov	r2, r3
 8001128:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800112c:	fb92 f3f3 	sdiv	r3, r2, r3
    accelerometerValues->accelerometerY =
 8001130:	b21a      	sxth	r2, r3
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	805a      	strh	r2, [r3, #2]

    /* Read accelerometer in axis Z */
    MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_ACCEL_ZOUT_H,
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6858      	ldr	r0, [r3, #4]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	7a19      	ldrb	r1, [r3, #8]
 800113e:	f107 030c 	add.w	r3, r7, #12
 8001142:	2202      	movs	r2, #2
 8001144:	9200      	str	r2, [sp, #0]
 8001146:	223f      	movs	r2, #63	; 0x3f
 8001148:	f7ff feef 	bl	8000f2a <MPU6050_ReadRegister>
                             accelerometerRawData, sizeof(uint16_t));
    accelerometerValues->accelerometerZ =
        (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]) / scaleFactor;
 800114c:	7b3b      	ldrb	r3, [r7, #12]
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	b21a      	sxth	r2, r3
 8001152:	7b7b      	ldrb	r3, [r7, #13]
 8001154:	b21b      	sxth	r3, r3
 8001156:	4313      	orrs	r3, r2
 8001158:	b21b      	sxth	r3, r3
 800115a:	461a      	mov	r2, r3
 800115c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001160:	fb92 f3f3 	sdiv	r3, r2, r3
    accelerometerValues->accelerometerZ =
 8001164:	b21a      	sxth	r2, r3
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	809a      	strh	r2, [r3, #4]
}
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <MPU6050_ReadTemperatureSensor>:

int16_t MPU6050_ReadTemperatureSensor(MPU6050_HandleTypeDef_t * hmpu6050) {
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af02      	add	r7, sp, #8
 8001178:	6078      	str	r0, [r7, #4]

    uint8_t temperatureSensorRawData[2];
    int16_t scaleFactor = MPU_6050_AUX_VAL_TEMP_SF;
 800117a:	f44f 73aa 	mov.w	r3, #340	; 0x154
 800117e:	81fb      	strh	r3, [r7, #14]
    int16_t offset = MPU_6050_AUX_VAL_TEMP_OFS;
 8001180:	2324      	movs	r3, #36	; 0x24
 8001182:	81bb      	strh	r3, [r7, #12]

    /* Read temperature sensor */
    MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_TEMP_OUT_H,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6858      	ldr	r0, [r3, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	7a19      	ldrb	r1, [r3, #8]
 800118c:	f107 0308 	add.w	r3, r7, #8
 8001190:	2202      	movs	r2, #2
 8001192:	9200      	str	r2, [sp, #0]
 8001194:	2241      	movs	r2, #65	; 0x41
 8001196:	f7ff fec8 	bl	8000f2a <MPU6050_ReadRegister>
                             temperatureSensorRawData, sizeof(uint16_t));

    return ((int16_t)(temperatureSensorRawData[0] << 8 | temperatureSensorRawData[1]) /
 800119a:	7a3b      	ldrb	r3, [r7, #8]
 800119c:	021b      	lsls	r3, r3, #8
 800119e:	b21a      	sxth	r2, r3
 80011a0:	7a7b      	ldrb	r3, [r7, #9]
 80011a2:	b21b      	sxth	r3, r3
 80011a4:	4313      	orrs	r3, r2
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	461a      	mov	r2, r3
 80011aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ae:	fb92 f3f3 	sdiv	r3, r2, r3
            scaleFactor) +
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	89bb      	ldrh	r3, [r7, #12]
 80011b6:	4413      	add	r3, r2
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	b21b      	sxth	r3, r3
           offset;
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <HAL_Init+0x40>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <HAL_Init+0x40>)
 80011ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_Init+0x40>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <HAL_Init+0x40>)
 80011da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HAL_Init+0x40>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a07      	ldr	r2, [pc, #28]	; (8001204 <HAL_Init+0x40>)
 80011e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ec:	2003      	movs	r0, #3
 80011ee:	f000 f94f 	bl	8001490 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011f2:	200f      	movs	r0, #15
 80011f4:	f000 f808 	bl	8001208 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f8:	f7ff fbe0 	bl	80009bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023c00 	.word	0x40023c00

08001208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_InitTick+0x54>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_InitTick+0x58>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4619      	mov	r1, r3
 800121a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001222:	fbb2 f3f3 	udiv	r3, r2, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f000 f967 	bl	80014fa <HAL_SYSTICK_Config>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e00e      	b.n	8001254 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b0f      	cmp	r3, #15
 800123a:	d80a      	bhi.n	8001252 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800123c:	2200      	movs	r2, #0
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001244:	f000 f92f 	bl	80014a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001248:	4a06      	ldr	r2, [pc, #24]	; (8001264 <HAL_InitTick+0x5c>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124e:	2300      	movs	r3, #0
 8001250:	e000      	b.n	8001254 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000000 	.word	0x20000000
 8001260:	20000008 	.word	0x20000008
 8001264:	20000004 	.word	0x20000004

08001268 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_IncTick+0x20>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_IncTick+0x24>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4413      	add	r3, r2
 8001278:	4a04      	ldr	r2, [pc, #16]	; (800128c <HAL_IncTick+0x24>)
 800127a:	6013      	str	r3, [r2, #0]
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	20000008 	.word	0x20000008
 800128c:	20000268 	.word	0x20000268

08001290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return uwTick;
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <HAL_GetTick+0x14>)
 8001296:	681b      	ldr	r3, [r3, #0]
}
 8001298:	4618      	mov	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	20000268 	.word	0x20000268

080012a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b0:	f7ff ffee 	bl	8001290 <HAL_GetTick>
 80012b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012c0:	d005      	beq.n	80012ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <HAL_Delay+0x44>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4413      	add	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ce:	bf00      	nop
 80012d0:	f7ff ffde 	bl	8001290 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d8f7      	bhi.n	80012d0 <HAL_Delay+0x28>
  {
  }
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000008 	.word	0x20000008

080012f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <__NVIC_SetPriorityGrouping+0x44>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800130c:	4013      	ands	r3, r2
 800130e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001318:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800131c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001322:	4a04      	ldr	r2, [pc, #16]	; (8001334 <__NVIC_SetPriorityGrouping+0x44>)
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	60d3      	str	r3, [r2, #12]
}
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <__NVIC_GetPriorityGrouping+0x18>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	0a1b      	lsrs	r3, r3, #8
 8001342:	f003 0307 	and.w	r3, r3, #7
}
 8001346:	4618      	mov	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	2b00      	cmp	r3, #0
 8001364:	db0b      	blt.n	800137e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	f003 021f 	and.w	r2, r3, #31
 800136c:	4907      	ldr	r1, [pc, #28]	; (800138c <__NVIC_EnableIRQ+0x38>)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	095b      	lsrs	r3, r3, #5
 8001374:	2001      	movs	r0, #1
 8001376:	fa00 f202 	lsl.w	r2, r0, r2
 800137a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000e100 	.word	0xe000e100

08001390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	db0a      	blt.n	80013ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	490c      	ldr	r1, [pc, #48]	; (80013dc <__NVIC_SetPriority+0x4c>)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	0112      	lsls	r2, r2, #4
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	440b      	add	r3, r1
 80013b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b8:	e00a      	b.n	80013d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	4908      	ldr	r1, [pc, #32]	; (80013e0 <__NVIC_SetPriority+0x50>)
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	3b04      	subs	r3, #4
 80013c8:	0112      	lsls	r2, r2, #4
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	440b      	add	r3, r1
 80013ce:	761a      	strb	r2, [r3, #24]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000e100 	.word	0xe000e100
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b089      	sub	sp, #36	; 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f1c3 0307 	rsb	r3, r3, #7
 80013fe:	2b04      	cmp	r3, #4
 8001400:	bf28      	it	cs
 8001402:	2304      	movcs	r3, #4
 8001404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3304      	adds	r3, #4
 800140a:	2b06      	cmp	r3, #6
 800140c:	d902      	bls.n	8001414 <NVIC_EncodePriority+0x30>
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3b03      	subs	r3, #3
 8001412:	e000      	b.n	8001416 <NVIC_EncodePriority+0x32>
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43da      	mvns	r2, r3
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	401a      	ands	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800142c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	43d9      	mvns	r1, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	4313      	orrs	r3, r2
         );
}
 800143e:	4618      	mov	r0, r3
 8001440:	3724      	adds	r7, #36	; 0x24
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3b01      	subs	r3, #1
 8001458:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800145c:	d301      	bcc.n	8001462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145e:	2301      	movs	r3, #1
 8001460:	e00f      	b.n	8001482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001462:	4a0a      	ldr	r2, [pc, #40]	; (800148c <SysTick_Config+0x40>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3b01      	subs	r3, #1
 8001468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800146a:	210f      	movs	r1, #15
 800146c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001470:	f7ff ff8e 	bl	8001390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <SysTick_Config+0x40>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147a:	4b04      	ldr	r3, [pc, #16]	; (800148c <SysTick_Config+0x40>)
 800147c:	2207      	movs	r2, #7
 800147e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	e000e010 	.word	0xe000e010

08001490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ff29 	bl	80012f0 <__NVIC_SetPriorityGrouping>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014b8:	f7ff ff3e 	bl	8001338 <__NVIC_GetPriorityGrouping>
 80014bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	68b9      	ldr	r1, [r7, #8]
 80014c2:	6978      	ldr	r0, [r7, #20]
 80014c4:	f7ff ff8e 	bl	80013e4 <NVIC_EncodePriority>
 80014c8:	4602      	mov	r2, r0
 80014ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ce:	4611      	mov	r1, r2
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff5d 	bl	8001390 <__NVIC_SetPriority>
}
 80014d6:	bf00      	nop
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	4603      	mov	r3, r0
 80014e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff31 	bl	8001354 <__NVIC_EnableIRQ>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff ffa2 	bl	800144c <SysTick_Config>
 8001508:	4603      	mov	r3, r0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001520:	f7ff feb6 	bl	8001290 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e099      	b.n	8001664 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2202      	movs	r2, #2
 8001534:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 0201 	bic.w	r2, r2, #1
 800154e:	601a      	str	r2, [r3, #0]

  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001550:	e00f      	b.n	8001572 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001552:	f7ff fe9d 	bl	8001290 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b05      	cmp	r3, #5
 800155e:	d908      	bls.n	8001572 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2220      	movs	r2, #32
 8001564:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2203      	movs	r2, #3
 800156a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e078      	b.n	8001664 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1e8      	bne.n	8001552 <HAL_DMA_Init+0x3e>
    }
  }

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	4b38      	ldr	r3, [pc, #224]	; (800166c <HAL_DMA_Init+0x158>)
 800158c:	4013      	ands	r3, r2
 800158e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800159e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c8:	2b04      	cmp	r3, #4
 80015ca:	d107      	bne.n	80015dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d4:	4313      	orrs	r3, r2
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	4313      	orrs	r3, r2
 80015da:	617b      	str	r3, [r7, #20]
  }

  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	f023 0307 	bic.w	r3, r3, #7
 80015f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001602:	2b04      	cmp	r3, #4
 8001604:	d117      	bne.n	8001636 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	4313      	orrs	r3, r2
 800160e:	617b      	str	r3, [r7, #20]

    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00e      	beq.n	8001636 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 f85f 	bl	80016dc <DMA_CheckFifoParam>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d008      	beq.n	8001636 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2240      	movs	r2, #64	; 0x40
 8001628:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e016      	b.n	8001664 <HAL_DMA_Init+0x150>
      }
    }
  }

  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 f816 	bl	8001670 <DMA_CalcBaseAndBitshift>
 8001644:	4603      	mov	r3, r0
 8001646:	60fb      	str	r3, [r7, #12]

  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164c:	223f      	movs	r2, #63	; 0x3f
 800164e:	409a      	lsls	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	f010803f 	.word	0xf010803f

08001670 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	3b10      	subs	r3, #16
 8001680:	4a14      	ldr	r2, [pc, #80]	; (80016d4 <DMA_CalcBaseAndBitshift+0x64>)
 8001682:	fba2 2303 	umull	r2, r3, r2, r3
 8001686:	091b      	lsrs	r3, r3, #4
 8001688:	60fb      	str	r3, [r7, #12]

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800168a:	4a13      	ldr	r2, [pc, #76]	; (80016d8 <DMA_CalcBaseAndBitshift+0x68>)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4413      	add	r3, r2
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	461a      	mov	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	65da      	str	r2, [r3, #92]	; 0x5c

  if (stream_number > 3U)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2b03      	cmp	r3, #3
 800169c:	d909      	bls.n	80016b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016a6:	f023 0303 	bic.w	r3, r3, #3
 80016aa:	1d1a      	adds	r2, r3, #4
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	659a      	str	r2, [r3, #88]	; 0x58
 80016b0:	e007      	b.n	80016c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016ba:	f023 0303 	bic.w	r3, r3, #3
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3714      	adds	r7, #20
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	aaaaaaab 	.word	0xaaaaaaab
 80016d8:	08009a50 	.word	0x08009a50

080016dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	60bb      	str	r3, [r7, #8]

  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d11f      	bne.n	8001736 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	2b03      	cmp	r3, #3
 80016fa:	d856      	bhi.n	80017aa <DMA_CheckFifoParam+0xce>
 80016fc:	a201      	add	r2, pc, #4	; (adr r2, 8001704 <DMA_CheckFifoParam+0x28>)
 80016fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001702:	bf00      	nop
 8001704:	08001715 	.word	0x08001715
 8001708:	08001727 	.word	0x08001727
 800170c:	08001715 	.word	0x08001715
 8001710:	080017ab 	.word	0x080017ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001718:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d046      	beq.n	80017ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001724:	e043      	b.n	80017ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800172e:	d140      	bne.n	80017b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001734:	e03d      	b.n	80017b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800173e:	d121      	bne.n	8001784 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	2b03      	cmp	r3, #3
 8001744:	d837      	bhi.n	80017b6 <DMA_CheckFifoParam+0xda>
 8001746:	a201      	add	r2, pc, #4	; (adr r2, 800174c <DMA_CheckFifoParam+0x70>)
 8001748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174c:	0800175d 	.word	0x0800175d
 8001750:	08001763 	.word	0x08001763
 8001754:	0800175d 	.word	0x0800175d
 8001758:	08001775 	.word	0x08001775
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	73fb      	strb	r3, [r7, #15]
      break;
 8001760:	e030      	b.n	80017c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001766:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d025      	beq.n	80017ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001772:	e022      	b.n	80017ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001778:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800177c:	d11f      	bne.n	80017be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001782:	e01c      	b.n	80017be <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2b02      	cmp	r3, #2
 8001788:	d903      	bls.n	8001792 <DMA_CheckFifoParam+0xb6>
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2b03      	cmp	r3, #3
 800178e:	d003      	beq.n	8001798 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001790:	e018      	b.n	80017c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	73fb      	strb	r3, [r7, #15]
      break;
 8001796:	e015      	b.n	80017c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00e      	beq.n	80017c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]
      break;
 80017a8:	e00b      	b.n	80017c2 <DMA_CheckFifoParam+0xe6>
      break;
 80017aa:	bf00      	nop
 80017ac:	e00a      	b.n	80017c4 <DMA_CheckFifoParam+0xe8>
      break;
 80017ae:	bf00      	nop
 80017b0:	e008      	b.n	80017c4 <DMA_CheckFifoParam+0xe8>
      break;
 80017b2:	bf00      	nop
 80017b4:	e006      	b.n	80017c4 <DMA_CheckFifoParam+0xe8>
      break;
 80017b6:	bf00      	nop
 80017b8:	e004      	b.n	80017c4 <DMA_CheckFifoParam+0xe8>
      break;
 80017ba:	bf00      	nop
 80017bc:	e002      	b.n	80017c4 <DMA_CheckFifoParam+0xe8>
      break;
 80017be:	bf00      	nop
 80017c0:	e000      	b.n	80017c4 <DMA_CheckFifoParam+0xe8>
      break;
 80017c2:	bf00      	nop
    }
  }

  return status;
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop

080017d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b089      	sub	sp, #36	; 0x24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
 80017ee:	e159      	b.n	8001aa4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017f0:	2201      	movs	r2, #1
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	429a      	cmp	r2, r3
 800180a:	f040 8148 	bne.w	8001a9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	2b01      	cmp	r3, #1
 8001818:	d005      	beq.n	8001826 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001822:	2b02      	cmp	r3, #2
 8001824:	d130      	bne.n	8001888 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	2203      	movs	r2, #3
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800185c:	2201      	movs	r2, #1
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	091b      	lsrs	r3, r3, #4
 8001872:	f003 0201 	and.w	r2, r3, #1
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	2b03      	cmp	r3, #3
 8001892:	d017      	beq.n	80018c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2203      	movs	r2, #3
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d123      	bne.n	8001918 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	08da      	lsrs	r2, r3, #3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3208      	adds	r2, #8
 80018d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	220f      	movs	r2, #15
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	691a      	ldr	r2, [r3, #16]
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	08da      	lsrs	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3208      	adds	r2, #8
 8001912:	69b9      	ldr	r1, [r7, #24]
 8001914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0203 	and.w	r2, r3, #3
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 80a2 	beq.w	8001a9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b57      	ldr	r3, [pc, #348]	; (8001abc <HAL_GPIO_Init+0x2e8>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	4a56      	ldr	r2, [pc, #344]	; (8001abc <HAL_GPIO_Init+0x2e8>)
 8001964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001968:	6453      	str	r3, [r2, #68]	; 0x44
 800196a:	4b54      	ldr	r3, [pc, #336]	; (8001abc <HAL_GPIO_Init+0x2e8>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001976:	4a52      	ldr	r2, [pc, #328]	; (8001ac0 <HAL_GPIO_Init+0x2ec>)
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	089b      	lsrs	r3, r3, #2
 800197c:	3302      	adds	r3, #2
 800197e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	220f      	movs	r2, #15
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4013      	ands	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a49      	ldr	r2, [pc, #292]	; (8001ac4 <HAL_GPIO_Init+0x2f0>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d019      	beq.n	80019d6 <HAL_GPIO_Init+0x202>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a48      	ldr	r2, [pc, #288]	; (8001ac8 <HAL_GPIO_Init+0x2f4>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d013      	beq.n	80019d2 <HAL_GPIO_Init+0x1fe>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a47      	ldr	r2, [pc, #284]	; (8001acc <HAL_GPIO_Init+0x2f8>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d00d      	beq.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a46      	ldr	r2, [pc, #280]	; (8001ad0 <HAL_GPIO_Init+0x2fc>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d007      	beq.n	80019ca <HAL_GPIO_Init+0x1f6>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a45      	ldr	r2, [pc, #276]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d101      	bne.n	80019c6 <HAL_GPIO_Init+0x1f2>
 80019c2:	2304      	movs	r3, #4
 80019c4:	e008      	b.n	80019d8 <HAL_GPIO_Init+0x204>
 80019c6:	2307      	movs	r3, #7
 80019c8:	e006      	b.n	80019d8 <HAL_GPIO_Init+0x204>
 80019ca:	2303      	movs	r3, #3
 80019cc:	e004      	b.n	80019d8 <HAL_GPIO_Init+0x204>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e002      	b.n	80019d8 <HAL_GPIO_Init+0x204>
 80019d2:	2301      	movs	r3, #1
 80019d4:	e000      	b.n	80019d8 <HAL_GPIO_Init+0x204>
 80019d6:	2300      	movs	r3, #0
 80019d8:	69fa      	ldr	r2, [r7, #28]
 80019da:	f002 0203 	and.w	r2, r2, #3
 80019de:	0092      	lsls	r2, r2, #2
 80019e0:	4093      	lsls	r3, r2
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019e8:	4935      	ldr	r1, [pc, #212]	; (8001ac0 <HAL_GPIO_Init+0x2ec>)
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	089b      	lsrs	r3, r3, #2
 80019ee:	3302      	adds	r3, #2
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019f6:	4b38      	ldr	r3, [pc, #224]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a1a:	4a2f      	ldr	r2, [pc, #188]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a20:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a44:	4a24      	ldr	r2, [pc, #144]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a4a:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a6e:	4a1a      	ldr	r2, [pc, #104]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a74:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a98:	4a0f      	ldr	r2, [pc, #60]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	61fb      	str	r3, [r7, #28]
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	2b0f      	cmp	r3, #15
 8001aa8:	f67f aea2 	bls.w	80017f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001aac:	bf00      	nop
 8001aae:	bf00      	nop
 8001ab0:	3724      	adds	r7, #36	; 0x24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40013800 	.word	0x40013800
 8001ac4:	40020000 	.word	0x40020000
 8001ac8:	40020400 	.word	0x40020400
 8001acc:	40020800 	.word	0x40020800
 8001ad0:	40020c00 	.word	0x40020c00
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40013c00 	.word	0x40013c00

08001adc <HAL_I2C_Init>:
 *         in the I2C_InitTypeDef and initialize the associated handle.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef * hi2c) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
    uint32_t freqrange;
    uint32_t pclk1;

    /* Check the I2C handle allocation */
    if (hi2c == NULL) {
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_I2C_Init+0x12>
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e12b      	b.n	8001d46 <HAL_I2C_Init+0x26a>
    assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
    assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
    assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
    assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

    if (hi2c->State == HAL_I2C_STATE_RESET) {
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d106      	bne.n	8001b08 <HAL_I2C_Init+0x2c>
        /* Allocate lock resource and initialize it */
        hi2c->Lock = HAL_UNLOCKED;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        hi2c->MspInitCallback(hi2c);
#else
        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        HAL_I2C_MspInit(hi2c);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7fe ff82 	bl	8000a0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2224      	movs	r2, #36	; 0x24
 8001b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0201 	bic.w	r2, r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]

    /*Reset I2C*/
    hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b2e:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b3e:	601a      	str	r2, [r3, #0]

    /* Get PCLK1 frequency */
    pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b40:	f002 fe38 	bl	80047b4 <HAL_RCC_GetPCLK1Freq>
 8001b44:	60f8      	str	r0, [r7, #12]

    /* Check the minimum allowed PCLK1 frequency */
    if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U) {
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	4a81      	ldr	r2, [pc, #516]	; (8001d50 <HAL_I2C_Init+0x274>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d807      	bhi.n	8001b60 <HAL_I2C_Init+0x84>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4a80      	ldr	r2, [pc, #512]	; (8001d54 <HAL_I2C_Init+0x278>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	bf94      	ite	ls
 8001b58:	2301      	movls	r3, #1
 8001b5a:	2300      	movhi	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	e006      	b.n	8001b6e <HAL_I2C_Init+0x92>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4a7d      	ldr	r2, [pc, #500]	; (8001d58 <HAL_I2C_Init+0x27c>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	bf94      	ite	ls
 8001b68:	2301      	movls	r3, #1
 8001b6a:	2300      	movhi	r3, #0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_I2C_Init+0x9a>
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e0e7      	b.n	8001d46 <HAL_I2C_Init+0x26a>
    }

    /* Calculate frequency range */
    freqrange = I2C_FREQRANGE(pclk1);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	4a78      	ldr	r2, [pc, #480]	; (8001d5c <HAL_I2C_Init+0x280>)
 8001b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7e:	0c9b      	lsrs	r3, r3, #18
 8001b80:	60bb      	str	r3, [r7, #8]

    /*---------------------------- I2Cx CR2 Configuration ----------------------*/
    /* Configure I2Cx: Frequency range */
    MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68ba      	ldr	r2, [r7, #8]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	605a      	str	r2, [r3, #4]

    /*---------------------------- I2Cx TRISE Configuration --------------------*/
    /* Configure I2Cx: Rise Time */
    MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE,
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	4a6a      	ldr	r2, [pc, #424]	; (8001d50 <HAL_I2C_Init+0x274>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d802      	bhi.n	8001bb0 <HAL_I2C_Init+0xd4>
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	3301      	adds	r3, #1
 8001bae:	e009      	b.n	8001bc4 <HAL_I2C_Init+0xe8>
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001bb6:	fb02 f303 	mul.w	r3, r2, r3
 8001bba:	4a69      	ldr	r2, [pc, #420]	; (8001d60 <HAL_I2C_Init+0x284>)
 8001bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc0:	099b      	lsrs	r3, r3, #6
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6812      	ldr	r2, [r2, #0]
 8001bc8:	430b      	orrs	r3, r1
 8001bca:	6213      	str	r3, [r2, #32]
               I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

    /*---------------------------- I2Cx CCR Configuration ----------------------*/
    /* Configure I2Cx: Speed */
    MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR),
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001bd6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	495c      	ldr	r1, [pc, #368]	; (8001d50 <HAL_I2C_Init+0x274>)
 8001be0:	428b      	cmp	r3, r1
 8001be2:	d819      	bhi.n	8001c18 <HAL_I2C_Init+0x13c>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	1e59      	subs	r1, r3, #1
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bf2:	1c59      	adds	r1, r3, #1
 8001bf4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001bf8:	400b      	ands	r3, r1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00a      	beq.n	8001c14 <HAL_I2C_Init+0x138>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	1e59      	subs	r1, r3, #1
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c12:	e051      	b.n	8001cb8 <HAL_I2C_Init+0x1dc>
 8001c14:	2304      	movs	r3, #4
 8001c16:	e04f      	b.n	8001cb8 <HAL_I2C_Init+0x1dc>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d111      	bne.n	8001c44 <HAL_I2C_Init+0x168>
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	1e58      	subs	r0, r3, #1
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6859      	ldr	r1, [r3, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	440b      	add	r3, r1
 8001c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c32:	3301      	adds	r3, #1
 8001c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	bf0c      	ite	eq
 8001c3c:	2301      	moveq	r3, #1
 8001c3e:	2300      	movne	r3, #0
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	e012      	b.n	8001c6a <HAL_I2C_Init+0x18e>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	1e58      	subs	r0, r3, #1
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6859      	ldr	r1, [r3, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	0099      	lsls	r1, r3, #2
 8001c54:	440b      	add	r3, r1
 8001c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	bf0c      	ite	eq
 8001c64:	2301      	moveq	r3, #1
 8001c66:	2300      	movne	r3, #0
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_I2C_Init+0x196>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e022      	b.n	8001cb8 <HAL_I2C_Init+0x1dc>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10e      	bne.n	8001c98 <HAL_I2C_Init+0x1bc>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	1e58      	subs	r0, r3, #1
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6859      	ldr	r1, [r3, #4]
 8001c82:	460b      	mov	r3, r1
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	440b      	add	r3, r1
 8001c88:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c96:	e00f      	b.n	8001cb8 <HAL_I2C_Init+0x1dc>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	1e58      	subs	r0, r3, #1
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6859      	ldr	r1, [r3, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	0099      	lsls	r1, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cae:	3301      	adds	r3, #1
 8001cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	6809      	ldr	r1, [r1, #0]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61cb      	str	r3, [r1, #28]
               I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));

    /*---------------------------- I2Cx CR1 Configuration ----------------------*/
    /* Configure I2Cx: Generalcall and NoStretch mode */
    MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH),
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69da      	ldr	r2, [r3, #28]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	601a      	str	r2, [r3, #0]
               (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));

    /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
    /* Configure I2Cx: Own Address1 and addressing mode */
    MODIFY_REG(hi2c->Instance->OAR1,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ce6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6911      	ldr	r1, [r2, #16]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	68d2      	ldr	r2, [r2, #12]
 8001cf2:	4311      	orrs	r1, r2
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	430b      	orrs	r3, r1
 8001cfa:	6093      	str	r3, [r2, #8]
               (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0),
               (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));

    /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
    /* Configure I2Cx: Dual mode and Own Address2 */
    MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2),
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	695a      	ldr	r2, [r3, #20]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	60da      	str	r2, [r3, #12]
               (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));

    /* Enable the selected I2C peripheral */
    __HAL_I2C_ENABLE(hi2c);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0201 	orr.w	r2, r2, #1
 8001d26:	601a      	str	r2, [r3, #0]

    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2220      	movs	r2, #32
 8001d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	000186a0 	.word	0x000186a0
 8001d54:	001e847f 	.word	0x001e847f
 8001d58:	003d08ff 	.word	0x003d08ff
 8001d5c:	431bde83 	.word	0x431bde83
 8001d60:	10624dd3 	.word	0x10624dd3

08001d64 <HAL_I2C_Mem_Write>:
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef * hi2c, uint16_t DevAddress,
                                    uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData,
                                    uint16_t Size, uint32_t Timeout) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af02      	add	r7, sp, #8
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	4608      	mov	r0, r1
 8001d6e:	4611      	mov	r1, r2
 8001d70:	461a      	mov	r2, r3
 8001d72:	4603      	mov	r3, r0
 8001d74:	817b      	strh	r3, [r7, #10]
 8001d76:	460b      	mov	r3, r1
 8001d78:	813b      	strh	r3, [r7, #8]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	80fb      	strh	r3, [r7, #6]
    /* Init tickstart for timeout management*/
    uint32_t tickstart = HAL_GetTick();
 8001d7e:	f7ff fa87 	bl	8001290 <HAL_GetTick>
 8001d82:	6178      	str	r0, [r7, #20]

    /* Check the parameters */
    assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

    if (hi2c->State == HAL_I2C_STATE_READY) {
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b20      	cmp	r3, #32
 8001d8e:	f040 80d9 	bne.w	8001f44 <HAL_I2C_Mem_Write+0x1e0>
        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG,
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	2319      	movs	r3, #25
 8001d98:	2201      	movs	r2, #1
 8001d9a:	496d      	ldr	r1, [pc, #436]	; (8001f50 <HAL_I2C_Mem_Write+0x1ec>)
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f000 fc7f 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <HAL_I2C_Mem_Write+0x48>
                                       tickstart) != HAL_OK) {
            return HAL_BUSY;
 8001da8:	2302      	movs	r3, #2
 8001daa:	e0cc      	b.n	8001f46 <HAL_I2C_Mem_Write+0x1e2>
        }

        /* Process Locked */
        __HAL_LOCK(hi2c);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d101      	bne.n	8001dba <HAL_I2C_Mem_Write+0x56>
 8001db6:	2302      	movs	r3, #2
 8001db8:	e0c5      	b.n	8001f46 <HAL_I2C_Mem_Write+0x1e2>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Check if the I2C is already enabled */
        if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d007      	beq.n	8001de0 <HAL_I2C_Mem_Write+0x7c>
            /* Enable I2C peripheral */
            __HAL_I2C_ENABLE(hi2c);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 0201 	orr.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]
        }

        /* Disable Pos */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dee:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_BUSY_TX;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2221      	movs	r2, #33	; 0x21
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_MEM;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2240      	movs	r2, #64	; 0x40
 8001dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Prepare transfer parameters */
        hi2c->pBuffPtr = pData;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6a3a      	ldr	r2, [r7, #32]
 8001e0a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount = Size;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e10:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize = hi2c->XferCount;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4a4d      	ldr	r2, [pc, #308]	; (8001f54 <HAL_I2C_Mem_Write+0x1f0>)
 8001e20:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) !=
 8001e22:	88f8      	ldrh	r0, [r7, #6]
 8001e24:	893a      	ldrh	r2, [r7, #8]
 8001e26:	8979      	ldrh	r1, [r7, #10]
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	9301      	str	r3, [sp, #4]
 8001e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	4603      	mov	r3, r0
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f000 fab6 	bl	80023a4 <I2C_RequestMemoryWrite>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d052      	beq.n	8001ee4 <HAL_I2C_Mem_Write+0x180>
            HAL_OK) {
            return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e081      	b.n	8001f46 <HAL_I2C_Mem_Write+0x1e2>
        }

        while (hi2c->XferSize > 0U) {
            /* Wait until TXE flag is set */
            if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f000 fd00 	bl	800284c <I2C_WaitOnTXEFlagUntilTimeout>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00d      	beq.n	8001e6e <HAL_I2C_Mem_Write+0x10a>
                if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d107      	bne.n	8001e6a <HAL_I2C_Mem_Write+0x106>
                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e68:	601a      	str	r2, [r3, #0]
                }
                return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e06b      	b.n	8001f46 <HAL_I2C_Mem_Write+0x1e2>
            }

            /* Write data to DR */
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	781a      	ldrb	r2, [r3, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	611a      	str	r2, [r3, #16]

            /* Increment Buffer pointer */
            hi2c->pBuffPtr++;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7e:	1c5a      	adds	r2, r3, #1
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	625a      	str	r2, [r3, #36]	; 0x24

            /* Update counter */
            hi2c->XferSize--;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	851a      	strh	r2, [r3, #40]	; 0x28
            hi2c->XferCount--;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	3b01      	subs	r3, #1
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	855a      	strh	r2, [r3, #42]	; 0x2a

            if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U)) {
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d11b      	bne.n	8001ee4 <HAL_I2C_Mem_Write+0x180>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d017      	beq.n	8001ee4 <HAL_I2C_Mem_Write+0x180>
                /* Write data to DR */
                hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	781a      	ldrb	r2, [r3, #0]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	611a      	str	r2, [r3, #16]

                /* Increment Buffer pointer */
                hi2c->pBuffPtr++;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	1c5a      	adds	r2, r3, #1
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	625a      	str	r2, [r3, #36]	; 0x24

                /* Update counter */
                hi2c->XferSize--;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	851a      	strh	r2, [r3, #40]	; 0x28
                hi2c->XferCount--;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	3b01      	subs	r3, #1
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	855a      	strh	r2, [r3, #42]	; 0x2a
        while (hi2c->XferSize > 0U) {
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1aa      	bne.n	8001e42 <HAL_I2C_Mem_Write+0xde>
            }
        }

        /* Wait until BTF flag is set */
        if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f000 fcec 	bl	80028ce <I2C_WaitOnBTFFlagUntilTimeout>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00d      	beq.n	8001f18 <HAL_I2C_Mem_Write+0x1b4>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	2b04      	cmp	r3, #4
 8001f02:	d107      	bne.n	8001f14 <HAL_I2C_Mem_Write+0x1b0>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f12:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e016      	b.n	8001f46 <HAL_I2C_Mem_Write+0x1e2>
        }

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f26:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	e000      	b.n	8001f46 <HAL_I2C_Mem_Write+0x1e2>
    } else {
        return HAL_BUSY;
 8001f44:	2302      	movs	r3, #2
    }
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	00100002 	.word	0x00100002
 8001f54:	ffff0000 	.word	0xffff0000

08001f58 <HAL_I2C_Mem_Read>:
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef * hi2c, uint16_t DevAddress,
                                   uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData,
                                   uint16_t Size, uint32_t Timeout) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08c      	sub	sp, #48	; 0x30
 8001f5c:	af02      	add	r7, sp, #8
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	4608      	mov	r0, r1
 8001f62:	4611      	mov	r1, r2
 8001f64:	461a      	mov	r2, r3
 8001f66:	4603      	mov	r3, r0
 8001f68:	817b      	strh	r3, [r7, #10]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	813b      	strh	r3, [r7, #8]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	80fb      	strh	r3, [r7, #6]
    /* Init tickstart for timeout management*/
    uint32_t tickstart = HAL_GetTick();
 8001f72:	f7ff f98d 	bl	8001290 <HAL_GetTick>
 8001f76:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the parameters */
    assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

    if (hi2c->State == HAL_I2C_STATE_READY) {
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b20      	cmp	r3, #32
 8001f82:	f040 8208 	bne.w	8002396 <HAL_I2C_Mem_Read+0x43e>
        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG,
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	2319      	movs	r3, #25
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	497b      	ldr	r1, [pc, #492]	; (800217c <HAL_I2C_Mem_Read+0x224>)
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f000 fb85 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <HAL_I2C_Mem_Read+0x48>
                                       tickstart) != HAL_OK) {
            return HAL_BUSY;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e1fb      	b.n	8002398 <HAL_I2C_Mem_Read+0x440>
        }

        /* Process Locked */
        __HAL_LOCK(hi2c);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d101      	bne.n	8001fae <HAL_I2C_Mem_Read+0x56>
 8001faa:	2302      	movs	r3, #2
 8001fac:	e1f4      	b.n	8002398 <HAL_I2C_Mem_Read+0x440>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Check if the I2C is already enabled */
        if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d007      	beq.n	8001fd4 <HAL_I2C_Mem_Read+0x7c>
            /* Enable I2C peripheral */
            __HAL_I2C_ENABLE(hi2c);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]
        }

        /* Disable Pos */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fe2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_BUSY_RX;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2222      	movs	r2, #34	; 0x22
 8001fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_MEM;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2240      	movs	r2, #64	; 0x40
 8001ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Prepare transfer parameters */
        hi2c->pBuffPtr = pData;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ffe:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount = Size;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002004:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize = hi2c->XferCount;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4a5b      	ldr	r2, [pc, #364]	; (8002180 <HAL_I2C_Mem_Read+0x228>)
 8002014:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) !=
 8002016:	88f8      	ldrh	r0, [r7, #6]
 8002018:	893a      	ldrh	r2, [r7, #8]
 800201a:	8979      	ldrh	r1, [r7, #10]
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	9301      	str	r3, [sp, #4]
 8002020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	4603      	mov	r3, r0
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f000 fa52 	bl	80024d0 <I2C_RequestMemoryRead>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_I2C_Mem_Read+0xde>
            HAL_OK) {
            return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e1b0      	b.n	8002398 <HAL_I2C_Mem_Read+0x440>
        }

        if (hi2c->XferSize == 0U) {
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800203a:	2b00      	cmp	r3, #0
 800203c:	d113      	bne.n	8002066 <HAL_I2C_Mem_Read+0x10e>
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800203e:	2300      	movs	r3, #0
 8002040:	623b      	str	r3, [r7, #32]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	623b      	str	r3, [r7, #32]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	623b      	str	r3, [r7, #32]
 8002052:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	e184      	b.n	8002370 <HAL_I2C_Mem_Read+0x418>
        } else if (hi2c->XferSize == 1U) {
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800206a:	2b01      	cmp	r3, #1
 800206c:	d11b      	bne.n	80020a6 <HAL_I2C_Mem_Read+0x14e>
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800207c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	61fb      	str	r3, [r7, #28]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	61fb      	str	r3, [r7, #28]
 8002092:	69fb      	ldr	r3, [r7, #28]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	e164      	b.n	8002370 <HAL_I2C_Mem_Read+0x418>
        } else if (hi2c->XferSize == 2U) {
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d11b      	bne.n	80020e6 <HAL_I2C_Mem_Read+0x18e>
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020bc:	601a      	str	r2, [r3, #0]

            /* Enable Pos */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020cc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ce:	2300      	movs	r3, #0
 80020d0:	61bb      	str	r3, [r7, #24]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	61bb      	str	r3, [r7, #24]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	61bb      	str	r3, [r7, #24]
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	e144      	b.n	8002370 <HAL_I2C_Mem_Read+0x418>
        } else {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	617b      	str	r3, [r7, #20]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	697b      	ldr	r3, [r7, #20]
        }

        while (hi2c->XferSize > 0U) {
 80020fc:	e138      	b.n	8002370 <HAL_I2C_Mem_Read+0x418>
            if (hi2c->XferSize <= 3U) {
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002102:	2b03      	cmp	r3, #3
 8002104:	f200 80f1 	bhi.w	80022ea <HAL_I2C_Mem_Read+0x392>
                /* One byte */
                if (hi2c->XferSize == 1U) {
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210c:	2b01      	cmp	r3, #1
 800210e:	d123      	bne.n	8002158 <HAL_I2C_Mem_Read+0x200>
                    /* Wait until RXNE flag is set */
                    if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8002110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002112:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 fc1b 	bl	8002950 <I2C_WaitOnRXNEFlagUntilTimeout>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <HAL_I2C_Mem_Read+0x1cc>
                        return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e139      	b.n	8002398 <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	691a      	ldr	r2, [r3, #16]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002136:	1c5a      	adds	r2, r3, #1
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002140:	3b01      	subs	r3, #1
 8002142:	b29a      	uxth	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214c:	b29b      	uxth	r3, r3
 800214e:	3b01      	subs	r3, #1
 8002150:	b29a      	uxth	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002156:	e10b      	b.n	8002370 <HAL_I2C_Mem_Read+0x418>
                }
                /* Two bytes */
                else if (hi2c->XferSize == 2U) {
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215c:	2b02      	cmp	r3, #2
 800215e:	d14e      	bne.n	80021fe <HAL_I2C_Mem_Read+0x2a6>
                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) !=
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002166:	2200      	movs	r2, #0
 8002168:	4906      	ldr	r1, [pc, #24]	; (8002184 <HAL_I2C_Mem_Read+0x22c>)
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f000 fa98 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d008      	beq.n	8002188 <HAL_I2C_Mem_Read+0x230>
                        HAL_OK) {
                        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e10e      	b.n	8002398 <HAL_I2C_Mem_Read+0x440>
 800217a:	bf00      	nop
 800217c:	00100002 	.word	0x00100002
 8002180:	ffff0000 	.word	0xffff0000
 8002184:	00010004 	.word	0x00010004
                    }

                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002196:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	691a      	ldr	r2, [r3, #16]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b4:	3b01      	subs	r3, #1
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	3b01      	subs	r3, #1
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	855a      	strh	r2, [r3, #42]	; 0x2a

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	1c5a      	adds	r2, r3, #1
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	3b01      	subs	r3, #1
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021fc:	e0b8      	b.n	8002370 <HAL_I2C_Mem_Read+0x418>
                }
                /* 3 Last bytes */
                else {
                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) !=
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002204:	2200      	movs	r2, #0
 8002206:	4966      	ldr	r1, [pc, #408]	; (80023a0 <HAL_I2C_Mem_Read+0x448>)
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 fa49 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <HAL_I2C_Mem_Read+0x2c0>
                        HAL_OK) {
                        return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0bf      	b.n	8002398 <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Disable Acknowledge */
                    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002226:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	691a      	ldr	r2, [r3, #16]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002244:	3b01      	subs	r3, #1
 8002246:	b29a      	uxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002250:	b29b      	uxth	r3, r3
 8002252:	3b01      	subs	r3, #1
 8002254:	b29a      	uxth	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	855a      	strh	r2, [r3, #42]	; 0x2a

                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) !=
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002260:	2200      	movs	r2, #0
 8002262:	494f      	ldr	r1, [pc, #316]	; (80023a0 <HAL_I2C_Mem_Read+0x448>)
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 fa1b 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_I2C_Mem_Read+0x31c>
                        HAL_OK) {
                        return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e091      	b.n	8002398 <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002282:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	691a      	ldr	r2, [r3, #16]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002296:	1c5a      	adds	r2, r3, #1
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	3b01      	subs	r3, #1
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	855a      	strh	r2, [r3, #42]	; 0x2a

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022de:	b29b      	uxth	r3, r3
 80022e0:	3b01      	subs	r3, #1
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022e8:	e042      	b.n	8002370 <HAL_I2C_Mem_Read+0x418>
                }
            } else {
                /* Wait until RXNE flag is set */
                if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 80022ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f000 fb2e 	bl	8002950 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_I2C_Mem_Read+0x3a6>
                    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e04c      	b.n	8002398 <HAL_I2C_Mem_Read+0x440>
                }

                /* Read data from DR */
                *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	691a      	ldr	r2, [r3, #16]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	701a      	strb	r2, [r3, #0]

                /* Increment Buffer pointer */
                hi2c->pBuffPtr++;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	1c5a      	adds	r2, r3, #1
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	625a      	str	r2, [r3, #36]	; 0x24

                /* Update counter */
                hi2c->XferSize--;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231a:	3b01      	subs	r3, #1
 800231c:	b29a      	uxth	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	851a      	strh	r2, [r3, #40]	; 0x28
                hi2c->XferCount--;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002326:	b29b      	uxth	r3, r3
 8002328:	3b01      	subs	r3, #1
 800232a:	b29a      	uxth	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	855a      	strh	r2, [r3, #42]	; 0x2a

                if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) {
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	2b04      	cmp	r3, #4
 800233c:	d118      	bne.n	8002370 <HAL_I2C_Mem_Read+0x418>
                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	1c5a      	adds	r2, r3, #1
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235a:	3b01      	subs	r3, #1
 800235c:	b29a      	uxth	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002366:	b29b      	uxth	r3, r3
 8002368:	3b01      	subs	r3, #1
 800236a:	b29a      	uxth	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	855a      	strh	r2, [r3, #42]	; 0x2a
        while (hi2c->XferSize > 0U) {
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002374:	2b00      	cmp	r3, #0
 8002376:	f47f aec2 	bne.w	80020fe <HAL_I2C_Mem_Read+0x1a6>
                }
            }
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2220      	movs	r2, #32
 800237e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	e000      	b.n	8002398 <HAL_I2C_Mem_Read+0x440>
    } else {
        return HAL_BUSY;
 8002396:	2302      	movs	r3, #2
    }
}
 8002398:	4618      	mov	r0, r3
 800239a:	3728      	adds	r7, #40	; 0x28
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	00010004 	.word	0x00010004

080023a4 <I2C_RequestMemoryWrite>:
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef * hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize,
                                                uint32_t Timeout, uint32_t Tickstart) {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b088      	sub	sp, #32
 80023a8:	af02      	add	r7, sp, #8
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	4608      	mov	r0, r1
 80023ae:	4611      	mov	r1, r2
 80023b0:	461a      	mov	r2, r3
 80023b2:	4603      	mov	r3, r0
 80023b4:	817b      	strh	r3, [r7, #10]
 80023b6:	460b      	mov	r3, r1
 80023b8:	813b      	strh	r3, [r7, #8]
 80023ba:	4613      	mov	r3, r2
 80023bc:	80fb      	strh	r3, [r7, #6]
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023cc:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	6a3b      	ldr	r3, [r7, #32]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 f960 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00d      	beq.n	8002402 <I2C_RequestMemoryWrite+0x5e>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023f4:	d103      	bne.n	80023fe <I2C_RequestMemoryWrite+0x5a>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023fc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e05f      	b.n	80024c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002402:	897b      	ldrh	r3, [r7, #10]
 8002404:	b2db      	uxtb	r3, r3
 8002406:	461a      	mov	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002410:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) !=
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	6a3a      	ldr	r2, [r7, #32]
 8002416:	492d      	ldr	r1, [pc, #180]	; (80024cc <I2C_RequestMemoryWrite+0x128>)
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f000 f998 	bl	800274e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <I2C_RequestMemoryWrite+0x84>
        HAL_OK) {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e04c      	b.n	80024c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	617b      	str	r3, [r7, #20]
 800243c:	697b      	ldr	r3, [r7, #20]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 800243e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002440:	6a39      	ldr	r1, [r7, #32]
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 fa02 	bl	800284c <I2C_WaitOnTXEFlagUntilTimeout>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00d      	beq.n	800246a <I2C_RequestMemoryWrite+0xc6>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	2b04      	cmp	r3, #4
 8002454:	d107      	bne.n	8002466 <I2C_RequestMemoryWrite+0xc2>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002464:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e02b      	b.n	80024c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 800246a:	88fb      	ldrh	r3, [r7, #6]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d105      	bne.n	800247c <I2C_RequestMemoryWrite+0xd8>
        /* Send Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002470:	893b      	ldrh	r3, [r7, #8]
 8002472:	b2da      	uxtb	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	611a      	str	r2, [r3, #16]
 800247a:	e021      	b.n	80024c0 <I2C_RequestMemoryWrite+0x11c>
    }
    /* If Memory address size is 16Bit */
    else {
        /* Send MSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800247c:	893b      	ldrh	r3, [r7, #8]
 800247e:	0a1b      	lsrs	r3, r3, #8
 8002480:	b29b      	uxth	r3, r3
 8002482:	b2da      	uxtb	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	611a      	str	r2, [r3, #16]

        /* Wait until TXE flag is set */
        if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 800248a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248c:	6a39      	ldr	r1, [r7, #32]
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 f9dc 	bl	800284c <I2C_WaitOnTXEFlagUntilTimeout>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00d      	beq.n	80024b6 <I2C_RequestMemoryWrite+0x112>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	2b04      	cmp	r3, #4
 80024a0:	d107      	bne.n	80024b2 <I2C_RequestMemoryWrite+0x10e>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024b0:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e005      	b.n	80024c2 <I2C_RequestMemoryWrite+0x11e>
        }

        /* Send LSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80024b6:	893b      	ldrh	r3, [r7, #8]
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	611a      	str	r2, [r3, #16]
    }

    return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	00010002 	.word	0x00010002

080024d0 <I2C_RequestMemoryRead>:
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef * hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize,
                                               uint32_t Timeout, uint32_t Tickstart) {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b088      	sub	sp, #32
 80024d4:	af02      	add	r7, sp, #8
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	4608      	mov	r0, r1
 80024da:	4611      	mov	r1, r2
 80024dc:	461a      	mov	r2, r3
 80024de:	4603      	mov	r3, r0
 80024e0:	817b      	strh	r3, [r7, #10]
 80024e2:	460b      	mov	r3, r1
 80024e4:	813b      	strh	r3, [r7, #8]
 80024e6:	4613      	mov	r3, r2
 80024e8:	80fb      	strh	r3, [r7, #6]
    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024f8:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002508:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	2200      	movs	r2, #0
 8002512:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 f8c2 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00d      	beq.n	800253e <I2C_RequestMemoryRead+0x6e>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002530:	d103      	bne.n	800253a <I2C_RequestMemoryRead+0x6a>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002538:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e0aa      	b.n	8002694 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800253e:	897b      	ldrh	r3, [r7, #10]
 8002540:	b2db      	uxtb	r3, r3
 8002542:	461a      	mov	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800254c:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) !=
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	6a3a      	ldr	r2, [r7, #32]
 8002552:	4952      	ldr	r1, [pc, #328]	; (800269c <I2C_RequestMemoryRead+0x1cc>)
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 f8fa 	bl	800274e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <I2C_RequestMemoryRead+0x94>
        HAL_OK) {
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e097      	b.n	8002694 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	697b      	ldr	r3, [r7, #20]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 800257a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800257c:	6a39      	ldr	r1, [r7, #32]
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f000 f964 	bl	800284c <I2C_WaitOnTXEFlagUntilTimeout>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00d      	beq.n	80025a6 <I2C_RequestMemoryRead+0xd6>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	2b04      	cmp	r3, #4
 8002590:	d107      	bne.n	80025a2 <I2C_RequestMemoryRead+0xd2>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e076      	b.n	8002694 <I2C_RequestMemoryRead+0x1c4>
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 80025a6:	88fb      	ldrh	r3, [r7, #6]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d105      	bne.n	80025b8 <I2C_RequestMemoryRead+0xe8>
        /* Send Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025ac:	893b      	ldrh	r3, [r7, #8]
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	611a      	str	r2, [r3, #16]
 80025b6:	e021      	b.n	80025fc <I2C_RequestMemoryRead+0x12c>
    }
    /* If Memory address size is 16Bit */
    else {
        /* Send MSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80025b8:	893b      	ldrh	r3, [r7, #8]
 80025ba:	0a1b      	lsrs	r3, r3, #8
 80025bc:	b29b      	uxth	r3, r3
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	611a      	str	r2, [r3, #16]

        /* Wait until TXE flag is set */
        if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 80025c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c8:	6a39      	ldr	r1, [r7, #32]
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 f93e 	bl	800284c <I2C_WaitOnTXEFlagUntilTimeout>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00d      	beq.n	80025f2 <I2C_RequestMemoryRead+0x122>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d107      	bne.n	80025ee <I2C_RequestMemoryRead+0x11e>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ec:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e050      	b.n	8002694 <I2C_RequestMemoryRead+0x1c4>
        }

        /* Send LSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025f2:	893b      	ldrh	r3, [r7, #8]
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	611a      	str	r2, [r3, #16]
    }

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 80025fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025fe:	6a39      	ldr	r1, [r7, #32]
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f000 f923 	bl	800284c <I2C_WaitOnTXEFlagUntilTimeout>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00d      	beq.n	8002628 <I2C_RequestMemoryRead+0x158>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	2b04      	cmp	r3, #4
 8002612:	d107      	bne.n	8002624 <I2C_RequestMemoryRead+0x154>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002622:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e035      	b.n	8002694 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002636:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	2200      	movs	r2, #0
 8002640:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 f82b 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00d      	beq.n	800266c <I2C_RequestMemoryRead+0x19c>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800265e:	d103      	bne.n	8002668 <I2C_RequestMemoryRead+0x198>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002666:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e013      	b.n	8002694 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800266c:	897b      	ldrh	r3, [r7, #10]
 800266e:	b2db      	uxtb	r3, r3
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	b2da      	uxtb	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) !=
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	6a3a      	ldr	r2, [r7, #32]
 8002680:	4906      	ldr	r1, [pc, #24]	; (800269c <I2C_RequestMemoryRead+0x1cc>)
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 f863 	bl	800274e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <I2C_RequestMemoryRead+0x1c2>
        HAL_OK) {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <I2C_RequestMemoryRead+0x1c4>
    }

    return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	00010002 	.word	0x00010002

080026a0 <I2C_WaitOnFlagUntilTimeout>:
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Flag,
                                                    FlagStatus Status, uint32_t Timeout,
                                                    uint32_t Tickstart) {
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	603b      	str	r3, [r7, #0]
 80026ac:	4613      	mov	r3, r2
 80026ae:	71fb      	strb	r3, [r7, #7]
    /* Wait until flag is set */
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 80026b0:	e025      	b.n	80026fe <I2C_WaitOnFlagUntilTimeout+0x5e>
        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026b8:	d021      	beq.n	80026fe <I2C_WaitOnFlagUntilTimeout+0x5e>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 80026ba:	f7fe fde9 	bl	8001290 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d302      	bcc.n	80026d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d116      	bne.n	80026fe <I2C_WaitOnFlagUntilTimeout+0x5e>
                hi2c->PreviousState = I2C_STATE_NONE;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2220      	movs	r2, #32
 80026da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f043 0220 	orr.w	r2, r3, #32
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e023      	b.n	8002746 <I2C_WaitOnFlagUntilTimeout+0xa6>
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	0c1b      	lsrs	r3, r3, #16
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b01      	cmp	r3, #1
 8002706:	d10d      	bne.n	8002724 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	43da      	mvns	r2, r3
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	4013      	ands	r3, r2
 8002714:	b29b      	uxth	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	bf0c      	ite	eq
 800271a:	2301      	moveq	r3, #1
 800271c:	2300      	movne	r3, #0
 800271e:	b2db      	uxtb	r3, r3
 8002720:	461a      	mov	r2, r3
 8002722:	e00c      	b.n	800273e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	43da      	mvns	r2, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	4013      	ands	r3, r2
 8002730:	b29b      	uxth	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	bf0c      	ite	eq
 8002736:	2301      	moveq	r3, #1
 8002738:	2300      	movne	r3, #0
 800273a:	b2db      	uxtb	r3, r3
 800273c:	461a      	mov	r2, r3
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	429a      	cmp	r2, r3
 8002742:	d0b6      	beq.n	80026b2 <I2C_WaitOnFlagUntilTimeout+0x12>
            }
        }
    }
    return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef * hi2c,
                                                                 uint32_t Flag, uint32_t Timeout,
                                                                 uint32_t Tickstart) {
 800274e:	b580      	push	{r7, lr}
 8002750:	b084      	sub	sp, #16
 8002752:	af00      	add	r7, sp, #0
 8002754:	60f8      	str	r0, [r7, #12]
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	607a      	str	r2, [r7, #4]
 800275a:	603b      	str	r3, [r7, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 800275c:	e051      	b.n	8002802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800276c:	d123      	bne.n	80027b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277c:	601a      	str	r2, [r3, #0]

            /* Clear AF Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002786:	615a      	str	r2, [r3, #20]

            hi2c->PreviousState = I2C_STATE_NONE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	631a      	str	r2, [r3, #48]	; 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2220      	movs	r2, #32
 8002792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f043 0204 	orr.w	r2, r3, #4
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	641a      	str	r2, [r3, #64]	; 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e046      	b.n	8002844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027bc:	d021      	beq.n	8002802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 80027be:	f7fe fd67 	bl	8001290 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d302      	bcc.n	80027d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d116      	bne.n	8002802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
                hi2c->PreviousState = I2C_STATE_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2220      	movs	r2, #32
 80027de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	f043 0220 	orr.w	r2, r3, #32
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e020      	b.n	8002844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	0c1b      	lsrs	r3, r3, #16
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b01      	cmp	r3, #1
 800280a:	d10c      	bne.n	8002826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	43da      	mvns	r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	4013      	ands	r3, r2
 8002818:	b29b      	uxth	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	bf14      	ite	ne
 800281e:	2301      	movne	r3, #1
 8002820:	2300      	moveq	r3, #0
 8002822:	b2db      	uxtb	r3, r3
 8002824:	e00b      	b.n	800283e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	43da      	mvns	r2, r3
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	4013      	ands	r3, r2
 8002832:	b29b      	uxth	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	bf14      	ite	ne
 8002838:	2301      	movne	r3, #1
 800283a:	2300      	moveq	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d18d      	bne.n	800275e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
            }
        }
    }
    return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <I2C_WaitOnTXEFlagUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout,
                                                       uint32_t Tickstart) {
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 8002858:	e02d      	b.n	80028b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
        /* Check if a NACK is detected */
        if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 f8ce 	bl	80029fc <I2C_IsAcknowledgeFailed>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
            return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e02d      	b.n	80028c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002870:	d021      	beq.n	80028b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8002872:	f7fe fd0d 	bl	8001290 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	429a      	cmp	r2, r3
 8002880:	d302      	bcc.n	8002888 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d116      	bne.n	80028b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
                hi2c->PreviousState = I2C_STATE_NONE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2220      	movs	r2, #32
 8002892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f043 0220 	orr.w	r2, r3, #32
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e007      	b.n	80028c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c0:	2b80      	cmp	r3, #128	; 0x80
 80028c2:	d1ca      	bne.n	800285a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
            }
        }
    }
    return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <I2C_WaitOnBTFFlagUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout,
                                                       uint32_t Tickstart) {
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b084      	sub	sp, #16
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET) {
 80028da:	e02d      	b.n	8002938 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
        /* Check if a NACK is detected */
        if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 f88d 	bl	80029fc <I2C_IsAcknowledgeFailed>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
            return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e02d      	b.n	8002948 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028f2:	d021      	beq.n	8002938 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 80028f4:	f7fe fccc 	bl	8001290 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	429a      	cmp	r2, r3
 8002902:	d302      	bcc.n	800290a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d116      	bne.n	8002938 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
                hi2c->PreviousState = I2C_STATE_NONE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2220      	movs	r2, #32
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	f043 0220 	orr.w	r2, r3, #32
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e007      	b.n	8002948 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET) {
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b04      	cmp	r3, #4
 8002944:	d1ca      	bne.n	80028dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
            }
        }
    }
    return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <I2C_WaitOnRXNEFlagUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart) {
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]

    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 800295c:	e042      	b.n	80029e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
        /* Check if a STOPF is detected */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) {
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	f003 0310 	and.w	r3, r3, #16
 8002968:	2b10      	cmp	r3, #16
 800296a:	d119      	bne.n	80029a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f06f 0210 	mvn.w	r2, #16
 8002974:	615a      	str	r2, [r3, #20]

            hi2c->PreviousState = I2C_STATE_NONE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	631a      	str	r2, [r3, #48]	; 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2220      	movs	r2, #32
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_NONE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	641a      	str	r2, [r3, #64]	; 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e029      	b.n	80029f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
        }

        /* Check for the Timeout */
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 80029a0:	f7fe fc76 	bl	8001290 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d302      	bcc.n	80029b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d116      	bne.n	80029e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
            hi2c->PreviousState = I2C_STATE_NONE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	631a      	str	r2, [r3, #48]	; 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	f043 0220 	orr.w	r2, r3, #32
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	641a      	str	r2, [r3, #64]	; 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e007      	b.n	80029f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ee:	2b40      	cmp	r3, #64	; 0x40
 80029f0:	d1b5      	bne.n	800295e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
        }
    }
    return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <I2C_IsAcknowledgeFailed>:
 * @brief  This function handles Acknowledge failed detection during an I2C Communication.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef * hi2c) {
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a12:	d11b      	bne.n	8002a4c <I2C_IsAcknowledgeFailed+0x50>
        /* Clear NACKF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a1c:	615a      	str	r2, [r3, #20]

        hi2c->PreviousState = I2C_STATE_NONE;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	f043 0204 	orr.w	r2, r3, #4
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e000      	b.n	8002a4e <I2C_IsAcknowledgeFailed+0x52>
    }
    return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a5c:	b08f      	sub	sp, #60	; 0x3c
 8002a5e:	af0a      	add	r7, sp, #40	; 0x28
 8002a60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e10f      	b.n	8002c8c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d106      	bne.n	8002a8c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f005 ff9a 	bl	80089c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2203      	movs	r2, #3
 8002a90:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d102      	bne.n	8002aa6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f002 fa81 	bl	8004fb2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	603b      	str	r3, [r7, #0]
 8002ab6:	687e      	ldr	r6, [r7, #4]
 8002ab8:	466d      	mov	r5, sp
 8002aba:	f106 0410 	add.w	r4, r6, #16
 8002abe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ac0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ac4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ac6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002aca:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ace:	1d33      	adds	r3, r6, #4
 8002ad0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ad2:	6838      	ldr	r0, [r7, #0]
 8002ad4:	f002 f958 	bl	8004d88 <USB_CoreInit>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d005      	beq.n	8002aea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e0d0      	b.n	8002c8c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2100      	movs	r1, #0
 8002af0:	4618      	mov	r0, r3
 8002af2:	f002 fa6f 	bl	8004fd4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002af6:	2300      	movs	r3, #0
 8002af8:	73fb      	strb	r3, [r7, #15]
 8002afa:	e04a      	b.n	8002b92 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002afc:	7bfa      	ldrb	r2, [r7, #15]
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4413      	add	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	333d      	adds	r3, #61	; 0x3d
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b10:	7bfa      	ldrb	r2, [r7, #15]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	333c      	adds	r3, #60	; 0x3c
 8002b20:	7bfa      	ldrb	r2, [r7, #15]
 8002b22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b24:	7bfa      	ldrb	r2, [r7, #15]
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
 8002b28:	b298      	uxth	r0, r3
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	4413      	add	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	3344      	adds	r3, #68	; 0x44
 8002b38:	4602      	mov	r2, r0
 8002b3a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b3c:	7bfa      	ldrb	r2, [r7, #15]
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	4413      	add	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	3340      	adds	r3, #64	; 0x40
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b50:	7bfa      	ldrb	r2, [r7, #15]
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	4413      	add	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	3348      	adds	r3, #72	; 0x48
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b64:	7bfa      	ldrb	r2, [r7, #15]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	334c      	adds	r3, #76	; 0x4c
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b78:	7bfa      	ldrb	r2, [r7, #15]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	3354      	adds	r3, #84	; 0x54
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	73fb      	strb	r3, [r7, #15]
 8002b92:	7bfa      	ldrb	r2, [r7, #15]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d3af      	bcc.n	8002afc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	73fb      	strb	r3, [r7, #15]
 8002ba0:	e044      	b.n	8002c2c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ba2:	7bfa      	ldrb	r2, [r7, #15]
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	4413      	add	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	440b      	add	r3, r1
 8002bb0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bb8:	7bfa      	ldrb	r2, [r7, #15]
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002bca:	7bfa      	ldrb	r2, [r7, #15]
 8002bcc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bce:	7bfa      	ldrb	r2, [r7, #15]
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	440b      	add	r3, r1
 8002bdc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002be0:	2200      	movs	r2, #0
 8002be2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002be4:	7bfa      	ldrb	r2, [r7, #15]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4413      	add	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bfa:	7bfa      	ldrb	r2, [r7, #15]
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	4413      	add	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	440b      	add	r3, r1
 8002c08:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c10:	7bfa      	ldrb	r2, [r7, #15]
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c26:	7bfb      	ldrb	r3, [r7, #15]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	73fb      	strb	r3, [r7, #15]
 8002c2c:	7bfa      	ldrb	r2, [r7, #15]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d3b5      	bcc.n	8002ba2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	687e      	ldr	r6, [r7, #4]
 8002c3e:	466d      	mov	r5, sp
 8002c40:	f106 0410 	add.w	r4, r6, #16
 8002c44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c50:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c54:	1d33      	adds	r3, r6, #4
 8002c56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c58:	6838      	ldr	r0, [r7, #0]
 8002c5a:	f002 fa07 	bl	800506c <USB_DevInit>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e00d      	b.n	8002c8c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f003 fb56 	bl	8006336 <USB_DevDisconnect>

  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c94 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d101      	bne.n	8002cb0 <HAL_PCD_Start+0x1c>
 8002cac:	2302      	movs	r3, #2
 8002cae:	e020      	b.n	8002cf2 <HAL_PCD_Start+0x5e>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d109      	bne.n	8002cd4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d005      	beq.n	8002cd4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ccc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f002 f959 	bl	8004f90 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f003 fb06 	bl	80062f4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002cfa:	b590      	push	{r4, r7, lr}
 8002cfc:	b08d      	sub	sp, #52	; 0x34
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f003 fbc4 	bl	800649e <USB_GetMode>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f040 848a 	bne.w	8003632 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f003 fb28 	bl	8006378 <USB_ReadInterrupts>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 8480 	beq.w	8003630 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	0a1b      	lsrs	r3, r3, #8
 8002d3a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f003 fb15 	bl	8006378 <USB_ReadInterrupts>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d107      	bne.n	8002d68 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695a      	ldr	r2, [r3, #20]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f002 0202 	and.w	r2, r2, #2
 8002d66:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f003 fb03 	bl	8006378 <USB_ReadInterrupts>
 8002d72:	4603      	mov	r3, r0
 8002d74:	f003 0310 	and.w	r3, r3, #16
 8002d78:	2b10      	cmp	r3, #16
 8002d7a:	d161      	bne.n	8002e40 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699a      	ldr	r2, [r3, #24]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 0210 	bic.w	r2, r2, #16
 8002d8a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	f003 020f 	and.w	r2, r3, #15
 8002d98:	4613      	mov	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	4413      	add	r3, r2
 8002da8:	3304      	adds	r3, #4
 8002daa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	0c5b      	lsrs	r3, r3, #17
 8002db0:	f003 030f 	and.w	r3, r3, #15
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d124      	bne.n	8002e02 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d035      	beq.n	8002e30 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	091b      	lsrs	r3, r3, #4
 8002dcc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002dce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	6a38      	ldr	r0, [r7, #32]
 8002dd8:	f003 f93a 	bl	8006050 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	691a      	ldr	r2, [r3, #16]
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	091b      	lsrs	r3, r3, #4
 8002de4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002de8:	441a      	add	r2, r3
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	6a1a      	ldr	r2, [r3, #32]
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	091b      	lsrs	r3, r3, #4
 8002df6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dfa:	441a      	add	r2, r3
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	621a      	str	r2, [r3, #32]
 8002e00:	e016      	b.n	8002e30 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	0c5b      	lsrs	r3, r3, #17
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	2b06      	cmp	r3, #6
 8002e0c:	d110      	bne.n	8002e30 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e14:	2208      	movs	r2, #8
 8002e16:	4619      	mov	r1, r3
 8002e18:	6a38      	ldr	r0, [r7, #32]
 8002e1a:	f003 f919 	bl	8006050 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	6a1a      	ldr	r2, [r3, #32]
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	091b      	lsrs	r3, r3, #4
 8002e26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e2a:	441a      	add	r2, r3
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699a      	ldr	r2, [r3, #24]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0210 	orr.w	r2, r2, #16
 8002e3e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f003 fa97 	bl	8006378 <USB_ReadInterrupts>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e50:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e54:	f040 80a7 	bne.w	8002fa6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f003 fa9c 	bl	800639e <USB_ReadDevAllOutEpInterrupt>
 8002e66:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002e68:	e099      	b.n	8002f9e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 808e 	beq.w	8002f92 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	4611      	mov	r1, r2
 8002e80:	4618      	mov	r0, r3
 8002e82:	f003 fac0 	bl	8006406 <USB_ReadDevOutEPInterrupt>
 8002e86:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00c      	beq.n	8002eac <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ea4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 fec2 	bl	8003c30 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00c      	beq.n	8002ed0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	015a      	lsls	r2, r3, #5
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	2308      	movs	r3, #8
 8002ec6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ec8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 ff98 	bl	8003e00 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	f003 0310 	and.w	r3, r3, #16
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d008      	beq.n	8002eec <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	015a      	lsls	r2, r3, #5
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	2310      	movs	r3, #16
 8002eea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d030      	beq.n	8002f58 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efe:	2b80      	cmp	r3, #128	; 0x80
 8002f00:	d109      	bne.n	8002f16 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f14:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f18:	4613      	mov	r3, r2
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	4413      	add	r3, r2
 8002f28:	3304      	adds	r3, #4
 8002f2a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	78db      	ldrb	r3, [r3, #3]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d108      	bne.n	8002f46 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	2200      	movs	r2, #0
 8002f38:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	4619      	mov	r1, r3
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f005 fe39 	bl	8008bb8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	015a      	lsls	r2, r3, #5
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f52:	461a      	mov	r2, r3
 8002f54:	2302      	movs	r3, #2
 8002f56:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	f003 0320 	and.w	r3, r3, #32
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d008      	beq.n	8002f74 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f6e:	461a      	mov	r2, r3
 8002f70:	2320      	movs	r3, #32
 8002f72:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d009      	beq.n	8002f92 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	015a      	lsls	r2, r3, #5
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	4413      	add	r3, r2
 8002f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f90:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	3301      	adds	r3, #1
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9a:	085b      	lsrs	r3, r3, #1
 8002f9c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f47f af62 	bne.w	8002e6a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f003 f9e4 	bl	8006378 <USB_ReadInterrupts>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fba:	f040 80db 	bne.w	8003174 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f003 fa05 	bl	80063d2 <USB_ReadDevAllInEpInterrupt>
 8002fc8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002fce:	e0cd      	b.n	800316c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 80c2 	beq.w	8003160 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	4611      	mov	r1, r2
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f003 fa2b 	bl	8006442 <USB_ReadDevInEPInterrupt>
 8002fec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d057      	beq.n	80030a8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	2201      	movs	r2, #1
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800300c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	43db      	mvns	r3, r3
 8003012:	69f9      	ldr	r1, [r7, #28]
 8003014:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003018:	4013      	ands	r3, r2
 800301a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	4413      	add	r3, r2
 8003024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003028:	461a      	mov	r2, r3
 800302a:	2301      	movs	r3, #1
 800302c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d132      	bne.n	800309c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800303a:	4613      	mov	r3, r2
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	4413      	add	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	334c      	adds	r3, #76	; 0x4c
 8003046:	6819      	ldr	r1, [r3, #0]
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4413      	add	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4403      	add	r3, r0
 8003056:	3348      	adds	r3, #72	; 0x48
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4419      	add	r1, r3
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003060:	4613      	mov	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4413      	add	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4403      	add	r3, r0
 800306a:	334c      	adds	r3, #76	; 0x4c
 800306c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	2b00      	cmp	r3, #0
 8003072:	d113      	bne.n	800309c <HAL_PCD_IRQHandler+0x3a2>
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003078:	4613      	mov	r3, r2
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	3354      	adds	r3, #84	; 0x54
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d108      	bne.n	800309c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6818      	ldr	r0, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003094:	461a      	mov	r2, r3
 8003096:	2101      	movs	r1, #1
 8003098:	f003 fa32 	bl	8006500 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	4619      	mov	r1, r3
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f005 fd0d 	bl	8008ac2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d008      	beq.n	80030c4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	015a      	lsls	r2, r3, #5
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	4413      	add	r3, r2
 80030ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030be:	461a      	mov	r2, r3
 80030c0:	2308      	movs	r3, #8
 80030c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	f003 0310 	and.w	r3, r3, #16
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d008      	beq.n	80030e0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030da:	461a      	mov	r2, r3
 80030dc:	2310      	movs	r3, #16
 80030de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d008      	beq.n	80030fc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	015a      	lsls	r2, r3, #5
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030f6:	461a      	mov	r2, r3
 80030f8:	2340      	movs	r3, #64	; 0x40
 80030fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d023      	beq.n	800314e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003106:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003108:	6a38      	ldr	r0, [r7, #32]
 800310a:	f002 f913 	bl	8005334 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800310e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003110:	4613      	mov	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	3338      	adds	r3, #56	; 0x38
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	4413      	add	r3, r2
 800311e:	3304      	adds	r3, #4
 8003120:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	78db      	ldrb	r3, [r3, #3]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d108      	bne.n	800313c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	2200      	movs	r2, #0
 800312e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	b2db      	uxtb	r3, r3
 8003134:	4619      	mov	r1, r3
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f005 fd50 	bl	8008bdc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	4413      	add	r3, r2
 8003144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003148:	461a      	mov	r2, r3
 800314a:	2302      	movs	r3, #2
 800314c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003158:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 fcdb 	bl	8003b16 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	3301      	adds	r3, #1
 8003164:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003168:	085b      	lsrs	r3, r3, #1
 800316a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800316c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316e:	2b00      	cmp	r3, #0
 8003170:	f47f af2e 	bne.w	8002fd0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f003 f8fd 	bl	8006378 <USB_ReadInterrupts>
 800317e:	4603      	mov	r3, r0
 8003180:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003184:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003188:	d122      	bne.n	80031d0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	69fa      	ldr	r2, [r7, #28]
 8003194:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003198:	f023 0301 	bic.w	r3, r3, #1
 800319c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d108      	bne.n	80031ba <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80031b0:	2100      	movs	r1, #0
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 fec2 	bl	8003f3c <HAL_PCDEx_LPM_Callback>
 80031b8:	e002      	b.n	80031c0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f005 fcee 	bl	8008b9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80031ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f003 f8cf 	bl	8006378 <USB_ReadInterrupts>
 80031da:	4603      	mov	r3, r0
 80031dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031e4:	d112      	bne.n	800320c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d102      	bne.n	80031fc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f005 fcaa 	bl	8008b50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695a      	ldr	r2, [r3, #20]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800320a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f003 f8b1 	bl	8006378 <USB_ReadInterrupts>
 8003216:	4603      	mov	r3, r0
 8003218:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800321c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003220:	f040 80b7 	bne.w	8003392 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	69fa      	ldr	r2, [r7, #28]
 800322e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003232:	f023 0301 	bic.w	r3, r3, #1
 8003236:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2110      	movs	r1, #16
 800323e:	4618      	mov	r0, r3
 8003240:	f002 f878 	bl	8005334 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003244:	2300      	movs	r3, #0
 8003246:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003248:	e046      	b.n	80032d8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800324a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	4413      	add	r3, r2
 8003252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003256:	461a      	mov	r2, r3
 8003258:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800325c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800325e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003260:	015a      	lsls	r2, r3, #5
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	4413      	add	r3, r2
 8003266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800326e:	0151      	lsls	r1, r2, #5
 8003270:	69fa      	ldr	r2, [r7, #28]
 8003272:	440a      	add	r2, r1
 8003274:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003278:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800327c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800327e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003280:	015a      	lsls	r2, r3, #5
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	4413      	add	r3, r2
 8003286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800328a:	461a      	mov	r2, r3
 800328c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003290:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003294:	015a      	lsls	r2, r3, #5
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	4413      	add	r3, r2
 800329a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032a2:	0151      	lsls	r1, r2, #5
 80032a4:	69fa      	ldr	r2, [r7, #28]
 80032a6:	440a      	add	r2, r1
 80032a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80032b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032c2:	0151      	lsls	r1, r2, #5
 80032c4:	69fa      	ldr	r2, [r7, #28]
 80032c6:	440a      	add	r2, r1
 80032c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80032d0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d4:	3301      	adds	r3, #1
 80032d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032de:	429a      	cmp	r2, r3
 80032e0:	d3b3      	bcc.n	800324a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	69fa      	ldr	r2, [r7, #28]
 80032ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032f0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80032f4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d016      	beq.n	800332c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003308:	69fa      	ldr	r2, [r7, #28]
 800330a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800330e:	f043 030b 	orr.w	r3, r3, #11
 8003312:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800331c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331e:	69fa      	ldr	r2, [r7, #28]
 8003320:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003324:	f043 030b 	orr.w	r3, r3, #11
 8003328:	6453      	str	r3, [r2, #68]	; 0x44
 800332a:	e015      	b.n	8003358 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	69fa      	ldr	r2, [r7, #28]
 8003336:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800333a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800333e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003342:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	69fa      	ldr	r2, [r7, #28]
 800334e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003352:	f043 030b 	orr.w	r3, r3, #11
 8003356:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	69fa      	ldr	r2, [r7, #28]
 8003362:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003366:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800336a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6818      	ldr	r0, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800337c:	461a      	mov	r2, r3
 800337e:	f003 f8bf 	bl	8006500 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695a      	ldr	r2, [r3, #20]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003390:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f002 ffee 	bl	8006378 <USB_ReadInterrupts>
 800339c:	4603      	mov	r3, r0
 800339e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033a6:	d124      	bne.n	80033f2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f003 f884 	bl	80064ba <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f002 f839 	bl	800542e <USB_GetDevSpeed>
 80033bc:	4603      	mov	r3, r0
 80033be:	461a      	mov	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681c      	ldr	r4, [r3, #0]
 80033c8:	f001 f9e8 	bl	800479c <HAL_RCC_GetHCLKFreq>
 80033cc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	461a      	mov	r2, r3
 80033d6:	4620      	mov	r0, r4
 80033d8:	f001 fd38 	bl	8004e4c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f005 fb98 	bl	8008b12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695a      	ldr	r2, [r3, #20]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80033f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f002 ffbe 	bl	8006378 <USB_ReadInterrupts>
 80033fc:	4603      	mov	r3, r0
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b08      	cmp	r3, #8
 8003404:	d10a      	bne.n	800341c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f005 fb75 	bl	8008af6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	695a      	ldr	r2, [r3, #20]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f002 0208 	and.w	r2, r2, #8
 800341a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4618      	mov	r0, r3
 8003422:	f002 ffa9 	bl	8006378 <USB_ReadInterrupts>
 8003426:	4603      	mov	r3, r0
 8003428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342c:	2b80      	cmp	r3, #128	; 0x80
 800342e:	d122      	bne.n	8003476 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800343c:	2301      	movs	r3, #1
 800343e:	627b      	str	r3, [r7, #36]	; 0x24
 8003440:	e014      	b.n	800346c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003446:	4613      	mov	r3, r2
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	4413      	add	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	440b      	add	r3, r1
 8003450:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d105      	bne.n	8003466 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	b2db      	uxtb	r3, r3
 800345e:	4619      	mov	r1, r3
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 fb27 	bl	8003ab4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	3301      	adds	r3, #1
 800346a:	627b      	str	r3, [r7, #36]	; 0x24
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003472:	429a      	cmp	r2, r3
 8003474:	d3e5      	bcc.n	8003442 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f002 ff7c 	bl	8006378 <USB_ReadInterrupts>
 8003480:	4603      	mov	r3, r0
 8003482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003486:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800348a:	d13b      	bne.n	8003504 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800348c:	2301      	movs	r3, #1
 800348e:	627b      	str	r3, [r7, #36]	; 0x24
 8003490:	e02b      	b.n	80034ea <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	015a      	lsls	r2, r3, #5
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	4413      	add	r3, r2
 800349a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a6:	4613      	mov	r3, r2
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	4413      	add	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	440b      	add	r3, r1
 80034b0:	3340      	adds	r3, #64	; 0x40
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d115      	bne.n	80034e4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80034b8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	da12      	bge.n	80034e4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c2:	4613      	mov	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4413      	add	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	333f      	adds	r3, #63	; 0x3f
 80034ce:	2201      	movs	r2, #1
 80034d0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	4619      	mov	r1, r3
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fae8 	bl	8003ab4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	3301      	adds	r3, #1
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d3ce      	bcc.n	8003492 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	695a      	ldr	r2, [r3, #20]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003502:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f002 ff35 	bl	8006378 <USB_ReadInterrupts>
 800350e:	4603      	mov	r3, r0
 8003510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003514:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003518:	d155      	bne.n	80035c6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800351a:	2301      	movs	r3, #1
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
 800351e:	e045      	b.n	80035ac <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	4413      	add	r3, r2
 8003528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003534:	4613      	mov	r3, r2
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d12e      	bne.n	80035a6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003548:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800354a:	2b00      	cmp	r3, #0
 800354c:	da2b      	bge.n	80035a6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800355a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800355e:	429a      	cmp	r2, r3
 8003560:	d121      	bne.n	80035a6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003566:	4613      	mov	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003574:	2201      	movs	r2, #1
 8003576:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10a      	bne.n	80035a6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	69fa      	ldr	r2, [r7, #28]
 800359a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800359e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035a2:	6053      	str	r3, [r2, #4]
            break;
 80035a4:	e007      	b.n	80035b6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	3301      	adds	r3, #1
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d3b4      	bcc.n	8003520 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695a      	ldr	r2, [r3, #20]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80035c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f002 fed4 	bl	8006378 <USB_ReadInterrupts>
 80035d0:	4603      	mov	r3, r0
 80035d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80035d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035da:	d10a      	bne.n	80035f2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f005 fb0f 	bl	8008c00 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695a      	ldr	r2, [r3, #20]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80035f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f002 febe 	bl	8006378 <USB_ReadInterrupts>
 80035fc:	4603      	mov	r3, r0
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b04      	cmp	r3, #4
 8003604:	d115      	bne.n	8003632 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f005 faff 	bl	8008c1c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6859      	ldr	r1, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	430a      	orrs	r2, r1
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	e000      	b.n	8003632 <HAL_PCD_IRQHandler+0x938>
      return;
 8003630:	bf00      	nop
    }
  }
}
 8003632:	3734      	adds	r7, #52	; 0x34
 8003634:	46bd      	mov	sp, r7
 8003636:	bd90      	pop	{r4, r7, pc}

08003638 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_PCD_SetAddress+0x1a>
 800364e:	2302      	movs	r3, #2
 8003650:	e013      	b.n	800367a <HAL_PCD_SetAddress+0x42>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	78fa      	ldrb	r2, [r7, #3]
 800365e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	78fa      	ldrb	r2, [r7, #3]
 8003668:	4611      	mov	r1, r2
 800366a:	4618      	mov	r0, r3
 800366c:	f002 fe1c 	bl	80062a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b084      	sub	sp, #16
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	4608      	mov	r0, r1
 800368c:	4611      	mov	r1, r2
 800368e:	461a      	mov	r2, r3
 8003690:	4603      	mov	r3, r0
 8003692:	70fb      	strb	r3, [r7, #3]
 8003694:	460b      	mov	r3, r1
 8003696:	803b      	strh	r3, [r7, #0]
 8003698:	4613      	mov	r3, r2
 800369a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800369c:	2300      	movs	r3, #0
 800369e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	da0f      	bge.n	80036c8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036a8:	78fb      	ldrb	r3, [r7, #3]
 80036aa:	f003 020f 	and.w	r2, r3, #15
 80036ae:	4613      	mov	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	4413      	add	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	3338      	adds	r3, #56	; 0x38
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	4413      	add	r3, r2
 80036bc:	3304      	adds	r3, #4
 80036be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2201      	movs	r2, #1
 80036c4:	705a      	strb	r2, [r3, #1]
 80036c6:	e00f      	b.n	80036e8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036c8:	78fb      	ldrb	r3, [r7, #3]
 80036ca:	f003 020f 	and.w	r2, r3, #15
 80036ce:	4613      	mov	r3, r2
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	4413      	add	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	4413      	add	r3, r2
 80036de:	3304      	adds	r3, #4
 80036e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80036e8:	78fb      	ldrb	r3, [r7, #3]
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80036f4:	883a      	ldrh	r2, [r7, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	78ba      	ldrb	r2, [r7, #2]
 80036fe:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	785b      	ldrb	r3, [r3, #1]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d004      	beq.n	8003712 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	b29a      	uxth	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003712:	78bb      	ldrb	r3, [r7, #2]
 8003714:	2b02      	cmp	r3, #2
 8003716:	d102      	bne.n	800371e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003724:	2b01      	cmp	r3, #1
 8003726:	d101      	bne.n	800372c <HAL_PCD_EP_Open+0xaa>
 8003728:	2302      	movs	r3, #2
 800372a:	e00e      	b.n	800374a <HAL_PCD_EP_Open+0xc8>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68f9      	ldr	r1, [r7, #12]
 800373a:	4618      	mov	r0, r3
 800373c:	f001 fe9c 	bl	8005478 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003748:	7afb      	ldrb	r3, [r7, #11]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b084      	sub	sp, #16
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
 800375a:	460b      	mov	r3, r1
 800375c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800375e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003762:	2b00      	cmp	r3, #0
 8003764:	da0f      	bge.n	8003786 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003766:	78fb      	ldrb	r3, [r7, #3]
 8003768:	f003 020f 	and.w	r2, r3, #15
 800376c:	4613      	mov	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	3338      	adds	r3, #56	; 0x38
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	4413      	add	r3, r2
 800377a:	3304      	adds	r3, #4
 800377c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2201      	movs	r2, #1
 8003782:	705a      	strb	r2, [r3, #1]
 8003784:	e00f      	b.n	80037a6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003786:	78fb      	ldrb	r3, [r7, #3]
 8003788:	f003 020f 	and.w	r2, r3, #15
 800378c:	4613      	mov	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	4413      	add	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	4413      	add	r3, r2
 800379c:	3304      	adds	r3, #4
 800379e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80037a6:	78fb      	ldrb	r3, [r7, #3]
 80037a8:	f003 030f 	and.w	r3, r3, #15
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_PCD_EP_Close+0x6e>
 80037bc:	2302      	movs	r3, #2
 80037be:	e00e      	b.n	80037de <HAL_PCD_EP_Close+0x8c>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68f9      	ldr	r1, [r7, #12]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f001 feda 	bl	8005588 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b086      	sub	sp, #24
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	60f8      	str	r0, [r7, #12]
 80037ee:	607a      	str	r2, [r7, #4]
 80037f0:	603b      	str	r3, [r7, #0]
 80037f2:	460b      	mov	r3, r1
 80037f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037f6:	7afb      	ldrb	r3, [r7, #11]
 80037f8:	f003 020f 	and.w	r2, r3, #15
 80037fc:	4613      	mov	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	4413      	add	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	4413      	add	r3, r2
 800380c:	3304      	adds	r3, #4
 800380e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	2200      	movs	r2, #0
 8003820:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	2200      	movs	r2, #0
 8003826:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003828:	7afb      	ldrb	r3, [r7, #11]
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	b2da      	uxtb	r2, r3
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d102      	bne.n	8003842 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003842:	7afb      	ldrb	r3, [r7, #11]
 8003844:	f003 030f 	and.w	r3, r3, #15
 8003848:	2b00      	cmp	r3, #0
 800384a:	d109      	bne.n	8003860 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6818      	ldr	r0, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	b2db      	uxtb	r3, r3
 8003856:	461a      	mov	r2, r3
 8003858:	6979      	ldr	r1, [r7, #20]
 800385a:	f002 f9b9 	bl	8005bd0 <USB_EP0StartXfer>
 800385e:	e008      	b.n	8003872 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6818      	ldr	r0, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	b2db      	uxtb	r3, r3
 800386a:	461a      	mov	r2, r3
 800386c:	6979      	ldr	r1, [r7, #20]
 800386e:	f001 ff67 	bl	8005740 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3718      	adds	r7, #24
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003888:	78fb      	ldrb	r3, [r7, #3]
 800388a:	f003 020f 	and.w	r2, r3, #15
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	4613      	mov	r3, r2
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	4413      	add	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800389e:	681b      	ldr	r3, [r3, #0]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	607a      	str	r2, [r7, #4]
 80038b6:	603b      	str	r3, [r7, #0]
 80038b8:	460b      	mov	r3, r1
 80038ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038bc:	7afb      	ldrb	r3, [r7, #11]
 80038be:	f003 020f 	and.w	r2, r3, #15
 80038c2:	4613      	mov	r3, r2
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	4413      	add	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	3338      	adds	r3, #56	; 0x38
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	4413      	add	r3, r2
 80038d0:	3304      	adds	r3, #4
 80038d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	2200      	movs	r2, #0
 80038e4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2201      	movs	r2, #1
 80038ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038ec:	7afb      	ldrb	r3, [r7, #11]
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d102      	bne.n	8003906 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003906:	7afb      	ldrb	r3, [r7, #11]
 8003908:	f003 030f 	and.w	r3, r3, #15
 800390c:	2b00      	cmp	r3, #0
 800390e:	d109      	bne.n	8003924 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6818      	ldr	r0, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	b2db      	uxtb	r3, r3
 800391a:	461a      	mov	r2, r3
 800391c:	6979      	ldr	r1, [r7, #20]
 800391e:	f002 f957 	bl	8005bd0 <USB_EP0StartXfer>
 8003922:	e008      	b.n	8003936 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6818      	ldr	r0, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	b2db      	uxtb	r3, r3
 800392e:	461a      	mov	r2, r3
 8003930:	6979      	ldr	r1, [r7, #20]
 8003932:	f001 ff05 	bl	8005740 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	460b      	mov	r3, r1
 800394a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800394c:	78fb      	ldrb	r3, [r7, #3]
 800394e:	f003 020f 	and.w	r2, r3, #15
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	429a      	cmp	r2, r3
 8003958:	d901      	bls.n	800395e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e050      	b.n	8003a00 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800395e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003962:	2b00      	cmp	r3, #0
 8003964:	da0f      	bge.n	8003986 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003966:	78fb      	ldrb	r3, [r7, #3]
 8003968:	f003 020f 	and.w	r2, r3, #15
 800396c:	4613      	mov	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	4413      	add	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	3338      	adds	r3, #56	; 0x38
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	4413      	add	r3, r2
 800397a:	3304      	adds	r3, #4
 800397c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2201      	movs	r2, #1
 8003982:	705a      	strb	r2, [r3, #1]
 8003984:	e00d      	b.n	80039a2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003986:	78fa      	ldrb	r2, [r7, #3]
 8003988:	4613      	mov	r3, r2
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	4413      	add	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	4413      	add	r3, r2
 8003998:	3304      	adds	r3, #4
 800399a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2201      	movs	r2, #1
 80039a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039a8:	78fb      	ldrb	r3, [r7, #3]
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d101      	bne.n	80039c2 <HAL_PCD_EP_SetStall+0x82>
 80039be:	2302      	movs	r3, #2
 80039c0:	e01e      	b.n	8003a00 <HAL_PCD_EP_SetStall+0xc0>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68f9      	ldr	r1, [r7, #12]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f002 fb95 	bl	8006100 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039d6:	78fb      	ldrb	r3, [r7, #3]
 80039d8:	f003 030f 	and.w	r3, r3, #15
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10a      	bne.n	80039f6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6818      	ldr	r0, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	b2d9      	uxtb	r1, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039f0:	461a      	mov	r2, r3
 80039f2:	f002 fd85 	bl	8006500 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a14:	78fb      	ldrb	r3, [r7, #3]
 8003a16:	f003 020f 	and.w	r2, r3, #15
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d901      	bls.n	8003a26 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e042      	b.n	8003aac <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	da0f      	bge.n	8003a4e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a2e:	78fb      	ldrb	r3, [r7, #3]
 8003a30:	f003 020f 	and.w	r2, r3, #15
 8003a34:	4613      	mov	r3, r2
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	4413      	add	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	3338      	adds	r3, #56	; 0x38
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	4413      	add	r3, r2
 8003a42:	3304      	adds	r3, #4
 8003a44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	705a      	strb	r2, [r3, #1]
 8003a4c:	e00f      	b.n	8003a6e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a4e:	78fb      	ldrb	r3, [r7, #3]
 8003a50:	f003 020f 	and.w	r2, r3, #15
 8003a54:	4613      	mov	r3, r2
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	4413      	add	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	4413      	add	r3, r2
 8003a64:	3304      	adds	r3, #4
 8003a66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a74:	78fb      	ldrb	r3, [r7, #3]
 8003a76:	f003 030f 	and.w	r3, r3, #15
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d101      	bne.n	8003a8e <HAL_PCD_EP_ClrStall+0x86>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	e00e      	b.n	8003aac <HAL_PCD_EP_ClrStall+0xa4>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68f9      	ldr	r1, [r7, #12]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f002 fb9d 	bl	80061dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	460b      	mov	r3, r1
 8003abe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003ac0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	da0c      	bge.n	8003ae2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ac8:	78fb      	ldrb	r3, [r7, #3]
 8003aca:	f003 020f 	and.w	r2, r3, #15
 8003ace:	4613      	mov	r3, r2
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	4413      	add	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	3338      	adds	r3, #56	; 0x38
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	4413      	add	r3, r2
 8003adc:	3304      	adds	r3, #4
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	e00c      	b.n	8003afc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ae2:	78fb      	ldrb	r3, [r7, #3]
 8003ae4:	f003 020f 	and.w	r2, r3, #15
 8003ae8:	4613      	mov	r3, r2
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	4413      	add	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	4413      	add	r3, r2
 8003af8:	3304      	adds	r3, #4
 8003afa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68f9      	ldr	r1, [r7, #12]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f002 f9bc 	bl	8005e80 <USB_EPStopXfer>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003b0c:	7afb      	ldrb	r3, [r7, #11]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b08a      	sub	sp, #40	; 0x28
 8003b1a:	af02      	add	r7, sp, #8
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	4413      	add	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	3338      	adds	r3, #56	; 0x38
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	4413      	add	r3, r2
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a1a      	ldr	r2, [r3, #32]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d901      	bls.n	8003b4e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e06c      	b.n	8003c28 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	699a      	ldr	r2, [r3, #24]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	69fa      	ldr	r2, [r7, #28]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d902      	bls.n	8003b6a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	3303      	adds	r3, #3
 8003b6e:	089b      	lsrs	r3, r3, #2
 8003b70:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b72:	e02b      	b.n	8003bcc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	699a      	ldr	r2, [r3, #24]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	69fa      	ldr	r2, [r7, #28]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d902      	bls.n	8003b90 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	3303      	adds	r3, #3
 8003b94:	089b      	lsrs	r3, r3, #2
 8003b96:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6919      	ldr	r1, [r3, #16]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	4603      	mov	r3, r0
 8003bae:	6978      	ldr	r0, [r7, #20]
 8003bb0:	f002 fa10 	bl	8005fd4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	691a      	ldr	r2, [r3, #16]
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	441a      	add	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6a1a      	ldr	r2, [r3, #32]
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	441a      	add	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	015a      	lsls	r2, r3, #5
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d809      	bhi.n	8003bf6 <PCD_WriteEmptyTxFifo+0xe0>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6a1a      	ldr	r2, [r3, #32]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d203      	bcs.n	8003bf6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1be      	bne.n	8003b74 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	699a      	ldr	r2, [r3, #24]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d811      	bhi.n	8003c26 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	f003 030f 	and.w	r3, r3, #15
 8003c08:	2201      	movs	r2, #1
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	6939      	ldr	r1, [r7, #16]
 8003c1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c22:	4013      	ands	r3, r2
 8003c24:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3720      	adds	r7, #32
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b088      	sub	sp, #32
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	333c      	adds	r3, #60	; 0x3c
 8003c48:	3304      	adds	r3, #4
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	015a      	lsls	r2, r3, #5
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	4413      	add	r3, r2
 8003c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d17b      	bne.n	8003d5e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	f003 0308 	and.w	r3, r3, #8
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d015      	beq.n	8003c9c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	4a61      	ldr	r2, [pc, #388]	; (8003df8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	f240 80b9 	bls.w	8003dec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 80b3 	beq.w	8003dec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	015a      	lsls	r2, r3, #5
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c92:	461a      	mov	r2, r3
 8003c94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c98:	6093      	str	r3, [r2, #8]
 8003c9a:	e0a7      	b.n	8003dec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	f003 0320 	and.w	r3, r3, #32
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d009      	beq.n	8003cba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	015a      	lsls	r2, r3, #5
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	2320      	movs	r3, #32
 8003cb6:	6093      	str	r3, [r2, #8]
 8003cb8:	e098      	b.n	8003dec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f040 8093 	bne.w	8003dec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	4a4b      	ldr	r2, [pc, #300]	; (8003df8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d90f      	bls.n	8003cee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00a      	beq.n	8003cee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cea:	6093      	str	r3, [r2, #8]
 8003cec:	e07e      	b.n	8003dec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	4413      	add	r3, r2
 8003d00:	3304      	adds	r3, #4
 8003d02:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	69da      	ldr	r2, [r3, #28]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	0159      	lsls	r1, r3, #5
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	440b      	add	r3, r1
 8003d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d1a:	1ad2      	subs	r2, r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d114      	bne.n	8003d50 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d109      	bne.n	8003d42 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6818      	ldr	r0, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d38:	461a      	mov	r2, r3
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	f002 fbe0 	bl	8006500 <USB_EP0_OutStart>
 8003d40:	e006      	b.n	8003d50 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	691a      	ldr	r2, [r3, #16]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	441a      	add	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	4619      	mov	r1, r3
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f004 fe98 	bl	8008a8c <HAL_PCD_DataOutStageCallback>
 8003d5c:	e046      	b.n	8003dec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	4a26      	ldr	r2, [pc, #152]	; (8003dfc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d124      	bne.n	8003db0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d82:	6093      	str	r3, [r2, #8]
 8003d84:	e032      	b.n	8003dec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f003 0320 	and.w	r3, r3, #32
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d008      	beq.n	8003da2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	2320      	movs	r3, #32
 8003da0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	4619      	mov	r1, r3
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f004 fe6f 	bl	8008a8c <HAL_PCD_DataOutStageCallback>
 8003dae:	e01d      	b.n	8003dec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d114      	bne.n	8003de0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003db6:	6879      	ldr	r1, [r7, #4]
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	4413      	add	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	440b      	add	r3, r1
 8003dc4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d108      	bne.n	8003de0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6818      	ldr	r0, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003dd8:	461a      	mov	r2, r3
 8003dda:	2100      	movs	r1, #0
 8003ddc:	f002 fb90 	bl	8006500 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	4619      	mov	r1, r3
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f004 fe50 	bl	8008a8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3720      	adds	r7, #32
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	4f54300a 	.word	0x4f54300a
 8003dfc:	4f54310a 	.word	0x4f54310a

08003e00 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	333c      	adds	r3, #60	; 0x3c
 8003e18:	3304      	adds	r3, #4
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4a15      	ldr	r2, [pc, #84]	; (8003e88 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d90e      	bls.n	8003e54 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d009      	beq.n	8003e54 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e52:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f004 fe07 	bl	8008a68 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	4a0a      	ldr	r2, [pc, #40]	; (8003e88 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d90c      	bls.n	8003e7c <PCD_EP_OutSetupPacket_int+0x7c>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d108      	bne.n	8003e7c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6818      	ldr	r0, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e74:	461a      	mov	r2, r3
 8003e76:	2101      	movs	r1, #1
 8003e78:	f002 fb42 	bl	8006500 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3718      	adds	r7, #24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	4f54300a 	.word	0x4f54300a

08003e8c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	460b      	mov	r3, r1
 8003e96:	70fb      	strb	r3, [r7, #3]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ea4:	78fb      	ldrb	r3, [r7, #3]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d107      	bne.n	8003eba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003eaa:	883b      	ldrh	r3, [r7, #0]
 8003eac:	0419      	lsls	r1, r3, #16
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	629a      	str	r2, [r3, #40]	; 0x28
 8003eb8:	e028      	b.n	8003f0c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec0:	0c1b      	lsrs	r3, r3, #16
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ec8:	2300      	movs	r3, #0
 8003eca:	73fb      	strb	r3, [r7, #15]
 8003ecc:	e00d      	b.n	8003eea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	7bfb      	ldrb	r3, [r7, #15]
 8003ed4:	3340      	adds	r3, #64	; 0x40
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	0c1b      	lsrs	r3, r3, #16
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	73fb      	strb	r3, [r7, #15]
 8003eea:	7bfa      	ldrb	r2, [r7, #15]
 8003eec:	78fb      	ldrb	r3, [r7, #3]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d3ec      	bcc.n	8003ece <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ef4:	883b      	ldrh	r3, [r7, #0]
 8003ef6:	0418      	lsls	r0, r3, #16
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6819      	ldr	r1, [r3, #0]
 8003efc:	78fb      	ldrb	r3, [r7, #3]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	4302      	orrs	r2, r0
 8003f04:	3340      	adds	r3, #64	; 0x40
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	440b      	add	r3, r1
 8003f0a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	460b      	mov	r3, r1
 8003f24:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	887a      	ldrh	r2, [r7, #2]
 8003f2c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e267      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d075      	beq.n	800405e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f72:	4b88      	ldr	r3, [pc, #544]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d00c      	beq.n	8003f98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f7e:	4b85      	ldr	r3, [pc, #532]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d112      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f8a:	4b82      	ldr	r3, [pc, #520]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f96:	d10b      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f98:	4b7e      	ldr	r3, [pc, #504]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d05b      	beq.n	800405c <HAL_RCC_OscConfig+0x108>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d157      	bne.n	800405c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e242      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb8:	d106      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x74>
 8003fba:	4b76      	ldr	r3, [pc, #472]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a75      	ldr	r2, [pc, #468]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	e01d      	b.n	8004004 <HAL_RCC_OscConfig+0xb0>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fd0:	d10c      	bne.n	8003fec <HAL_RCC_OscConfig+0x98>
 8003fd2:	4b70      	ldr	r3, [pc, #448]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a6f      	ldr	r2, [pc, #444]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	4b6d      	ldr	r3, [pc, #436]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a6c      	ldr	r2, [pc, #432]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	e00b      	b.n	8004004 <HAL_RCC_OscConfig+0xb0>
 8003fec:	4b69      	ldr	r3, [pc, #420]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a68      	ldr	r2, [pc, #416]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	4b66      	ldr	r3, [pc, #408]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a65      	ldr	r2, [pc, #404]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004002:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d013      	beq.n	8004034 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400c:	f7fd f940 	bl	8001290 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004014:	f7fd f93c 	bl	8001290 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b64      	cmp	r3, #100	; 0x64
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e207      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004026:	4b5b      	ldr	r3, [pc, #364]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0f0      	beq.n	8004014 <HAL_RCC_OscConfig+0xc0>
 8004032:	e014      	b.n	800405e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004034:	f7fd f92c 	bl	8001290 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800403c:	f7fd f928 	bl	8001290 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b64      	cmp	r3, #100	; 0x64
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e1f3      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800404e:	4b51      	ldr	r3, [pc, #324]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f0      	bne.n	800403c <HAL_RCC_OscConfig+0xe8>
 800405a:	e000      	b.n	800405e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800405c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d063      	beq.n	8004132 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800406a:	4b4a      	ldr	r3, [pc, #296]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 030c 	and.w	r3, r3, #12
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00b      	beq.n	800408e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004076:	4b47      	ldr	r3, [pc, #284]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800407e:	2b08      	cmp	r3, #8
 8004080:	d11c      	bne.n	80040bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004082:	4b44      	ldr	r3, [pc, #272]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d116      	bne.n	80040bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800408e:	4b41      	ldr	r3, [pc, #260]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d005      	beq.n	80040a6 <HAL_RCC_OscConfig+0x152>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d001      	beq.n	80040a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e1c7      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a6:	4b3b      	ldr	r3, [pc, #236]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	4937      	ldr	r1, [pc, #220]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ba:	e03a      	b.n	8004132 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d020      	beq.n	8004106 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040c4:	4b34      	ldr	r3, [pc, #208]	; (8004198 <HAL_RCC_OscConfig+0x244>)
 80040c6:	2201      	movs	r2, #1
 80040c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ca:	f7fd f8e1 	bl	8001290 <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d0:	e008      	b.n	80040e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040d2:	f7fd f8dd 	bl	8001290 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e1a8      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e4:	4b2b      	ldr	r3, [pc, #172]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0f0      	beq.n	80040d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f0:	4b28      	ldr	r3, [pc, #160]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	4925      	ldr	r1, [pc, #148]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8004100:	4313      	orrs	r3, r2
 8004102:	600b      	str	r3, [r1, #0]
 8004104:	e015      	b.n	8004132 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004106:	4b24      	ldr	r3, [pc, #144]	; (8004198 <HAL_RCC_OscConfig+0x244>)
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410c:	f7fd f8c0 	bl	8001290 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004114:	f7fd f8bc 	bl	8001290 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e187      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004126:	4b1b      	ldr	r3, [pc, #108]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f0      	bne.n	8004114 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d036      	beq.n	80041ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d016      	beq.n	8004174 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004146:	4b15      	ldr	r3, [pc, #84]	; (800419c <HAL_RCC_OscConfig+0x248>)
 8004148:	2201      	movs	r2, #1
 800414a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800414c:	f7fd f8a0 	bl	8001290 <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004154:	f7fd f89c 	bl	8001290 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e167      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004166:	4b0b      	ldr	r3, [pc, #44]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8004168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0f0      	beq.n	8004154 <HAL_RCC_OscConfig+0x200>
 8004172:	e01b      	b.n	80041ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004174:	4b09      	ldr	r3, [pc, #36]	; (800419c <HAL_RCC_OscConfig+0x248>)
 8004176:	2200      	movs	r2, #0
 8004178:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800417a:	f7fd f889 	bl	8001290 <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004180:	e00e      	b.n	80041a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004182:	f7fd f885 	bl	8001290 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d907      	bls.n	80041a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e150      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
 8004194:	40023800 	.word	0x40023800
 8004198:	42470000 	.word	0x42470000
 800419c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a0:	4b88      	ldr	r3, [pc, #544]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 80041a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1ea      	bne.n	8004182 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 8097 	beq.w	80042e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ba:	2300      	movs	r3, #0
 80041bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041be:	4b81      	ldr	r3, [pc, #516]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10f      	bne.n	80041ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ca:	2300      	movs	r3, #0
 80041cc:	60bb      	str	r3, [r7, #8]
 80041ce:	4b7d      	ldr	r3, [pc, #500]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	4a7c      	ldr	r2, [pc, #496]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 80041d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d8:	6413      	str	r3, [r2, #64]	; 0x40
 80041da:	4b7a      	ldr	r3, [pc, #488]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e2:	60bb      	str	r3, [r7, #8]
 80041e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041e6:	2301      	movs	r3, #1
 80041e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ea:	4b77      	ldr	r3, [pc, #476]	; (80043c8 <HAL_RCC_OscConfig+0x474>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d118      	bne.n	8004228 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041f6:	4b74      	ldr	r3, [pc, #464]	; (80043c8 <HAL_RCC_OscConfig+0x474>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a73      	ldr	r2, [pc, #460]	; (80043c8 <HAL_RCC_OscConfig+0x474>)
 80041fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004202:	f7fd f845 	bl	8001290 <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004208:	e008      	b.n	800421c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800420a:	f7fd f841 	bl	8001290 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e10c      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800421c:	4b6a      	ldr	r3, [pc, #424]	; (80043c8 <HAL_RCC_OscConfig+0x474>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0f0      	beq.n	800420a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d106      	bne.n	800423e <HAL_RCC_OscConfig+0x2ea>
 8004230:	4b64      	ldr	r3, [pc, #400]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004234:	4a63      	ldr	r2, [pc, #396]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004236:	f043 0301 	orr.w	r3, r3, #1
 800423a:	6713      	str	r3, [r2, #112]	; 0x70
 800423c:	e01c      	b.n	8004278 <HAL_RCC_OscConfig+0x324>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	2b05      	cmp	r3, #5
 8004244:	d10c      	bne.n	8004260 <HAL_RCC_OscConfig+0x30c>
 8004246:	4b5f      	ldr	r3, [pc, #380]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424a:	4a5e      	ldr	r2, [pc, #376]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 800424c:	f043 0304 	orr.w	r3, r3, #4
 8004250:	6713      	str	r3, [r2, #112]	; 0x70
 8004252:	4b5c      	ldr	r3, [pc, #368]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004256:	4a5b      	ldr	r2, [pc, #364]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004258:	f043 0301 	orr.w	r3, r3, #1
 800425c:	6713      	str	r3, [r2, #112]	; 0x70
 800425e:	e00b      	b.n	8004278 <HAL_RCC_OscConfig+0x324>
 8004260:	4b58      	ldr	r3, [pc, #352]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004264:	4a57      	ldr	r2, [pc, #348]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004266:	f023 0301 	bic.w	r3, r3, #1
 800426a:	6713      	str	r3, [r2, #112]	; 0x70
 800426c:	4b55      	ldr	r3, [pc, #340]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 800426e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004270:	4a54      	ldr	r2, [pc, #336]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004272:	f023 0304 	bic.w	r3, r3, #4
 8004276:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d015      	beq.n	80042ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004280:	f7fd f806 	bl	8001290 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004286:	e00a      	b.n	800429e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004288:	f7fd f802 	bl	8001290 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	f241 3288 	movw	r2, #5000	; 0x1388
 8004296:	4293      	cmp	r3, r2
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e0cb      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800429e:	4b49      	ldr	r3, [pc, #292]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 80042a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0ee      	beq.n	8004288 <HAL_RCC_OscConfig+0x334>
 80042aa:	e014      	b.n	80042d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ac:	f7fc fff0 	bl	8001290 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042b2:	e00a      	b.n	80042ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b4:	f7fc ffec 	bl	8001290 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e0b5      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ca:	4b3e      	ldr	r3, [pc, #248]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 80042cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1ee      	bne.n	80042b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042d6:	7dfb      	ldrb	r3, [r7, #23]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d105      	bne.n	80042e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042dc:	4b39      	ldr	r3, [pc, #228]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 80042de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e0:	4a38      	ldr	r2, [pc, #224]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 80042e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 80a1 	beq.w	8004434 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042f2:	4b34      	ldr	r3, [pc, #208]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 030c 	and.w	r3, r3, #12
 80042fa:	2b08      	cmp	r3, #8
 80042fc:	d05c      	beq.n	80043b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	2b02      	cmp	r3, #2
 8004304:	d141      	bne.n	800438a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004306:	4b31      	ldr	r3, [pc, #196]	; (80043cc <HAL_RCC_OscConfig+0x478>)
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430c:	f7fc ffc0 	bl	8001290 <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004314:	f7fc ffbc 	bl	8001290 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e087      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004326:	4b27      	ldr	r3, [pc, #156]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1f0      	bne.n	8004314 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69da      	ldr	r2, [r3, #28]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	019b      	lsls	r3, r3, #6
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004348:	085b      	lsrs	r3, r3, #1
 800434a:	3b01      	subs	r3, #1
 800434c:	041b      	lsls	r3, r3, #16
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004354:	061b      	lsls	r3, r3, #24
 8004356:	491b      	ldr	r1, [pc, #108]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004358:	4313      	orrs	r3, r2
 800435a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800435c:	4b1b      	ldr	r3, [pc, #108]	; (80043cc <HAL_RCC_OscConfig+0x478>)
 800435e:	2201      	movs	r2, #1
 8004360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004362:	f7fc ff95 	bl	8001290 <HAL_GetTick>
 8004366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004368:	e008      	b.n	800437c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800436a:	f7fc ff91 	bl	8001290 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e05c      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800437c:	4b11      	ldr	r3, [pc, #68]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0f0      	beq.n	800436a <HAL_RCC_OscConfig+0x416>
 8004388:	e054      	b.n	8004434 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800438a:	4b10      	ldr	r3, [pc, #64]	; (80043cc <HAL_RCC_OscConfig+0x478>)
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004390:	f7fc ff7e 	bl	8001290 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004398:	f7fc ff7a 	bl	8001290 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e045      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043aa:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f0      	bne.n	8004398 <HAL_RCC_OscConfig+0x444>
 80043b6:	e03d      	b.n	8004434 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d107      	bne.n	80043d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e038      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
 80043c4:	40023800 	.word	0x40023800
 80043c8:	40007000 	.word	0x40007000
 80043cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043d0:	4b1b      	ldr	r3, [pc, #108]	; (8004440 <HAL_RCC_OscConfig+0x4ec>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d028      	beq.n	8004430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d121      	bne.n	8004430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d11a      	bne.n	8004430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004400:	4013      	ands	r3, r2
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004406:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004408:	4293      	cmp	r3, r2
 800440a:	d111      	bne.n	8004430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004416:	085b      	lsrs	r3, r3, #1
 8004418:	3b01      	subs	r3, #1
 800441a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800441c:	429a      	cmp	r2, r3
 800441e:	d107      	bne.n	8004430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800442c:	429a      	cmp	r2, r3
 800442e:	d001      	beq.n	8004434 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e000      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3718      	adds	r7, #24
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	40023800 	.word	0x40023800

08004444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e0cc      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004458:	4b68      	ldr	r3, [pc, #416]	; (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d90c      	bls.n	8004480 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004466:	4b65      	ldr	r3, [pc, #404]	; (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	b2d2      	uxtb	r2, r2
 800446c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800446e:	4b63      	ldr	r3, [pc, #396]	; (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	429a      	cmp	r2, r3
 800447a:	d001      	beq.n	8004480 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e0b8      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d020      	beq.n	80044ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b00      	cmp	r3, #0
 8004496:	d005      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004498:	4b59      	ldr	r3, [pc, #356]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	4a58      	ldr	r2, [pc, #352]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 800449e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0308 	and.w	r3, r3, #8
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d005      	beq.n	80044bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044b0:	4b53      	ldr	r3, [pc, #332]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	4a52      	ldr	r2, [pc, #328]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044bc:	4b50      	ldr	r3, [pc, #320]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	494d      	ldr	r1, [pc, #308]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d044      	beq.n	8004564 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d107      	bne.n	80044f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044e2:	4b47      	ldr	r3, [pc, #284]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d119      	bne.n	8004522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e07f      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d003      	beq.n	8004502 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044fe:	2b03      	cmp	r3, #3
 8004500:	d107      	bne.n	8004512 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004502:	4b3f      	ldr	r3, [pc, #252]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d109      	bne.n	8004522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e06f      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004512:	4b3b      	ldr	r3, [pc, #236]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e067      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004522:	4b37      	ldr	r3, [pc, #220]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f023 0203 	bic.w	r2, r3, #3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	4934      	ldr	r1, [pc, #208]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004530:	4313      	orrs	r3, r2
 8004532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004534:	f7fc feac 	bl	8001290 <HAL_GetTick>
 8004538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453a:	e00a      	b.n	8004552 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800453c:	f7fc fea8 	bl	8001290 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	f241 3288 	movw	r2, #5000	; 0x1388
 800454a:	4293      	cmp	r3, r2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e04f      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004552:	4b2b      	ldr	r3, [pc, #172]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 020c 	and.w	r2, r3, #12
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	429a      	cmp	r2, r3
 8004562:	d1eb      	bne.n	800453c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004564:	4b25      	ldr	r3, [pc, #148]	; (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d20c      	bcs.n	800458c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004572:	4b22      	ldr	r3, [pc, #136]	; (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800457a:	4b20      	ldr	r3, [pc, #128]	; (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	429a      	cmp	r2, r3
 8004586:	d001      	beq.n	800458c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e032      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	d008      	beq.n	80045aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004598:	4b19      	ldr	r3, [pc, #100]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	4916      	ldr	r1, [pc, #88]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0308 	and.w	r3, r3, #8
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d009      	beq.n	80045ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045b6:	4b12      	ldr	r3, [pc, #72]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	490e      	ldr	r1, [pc, #56]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045ca:	f000 f821 	bl	8004610 <HAL_RCC_GetSysClockFreq>
 80045ce:	4602      	mov	r2, r0
 80045d0:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	091b      	lsrs	r3, r3, #4
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	490a      	ldr	r1, [pc, #40]	; (8004604 <HAL_RCC_ClockConfig+0x1c0>)
 80045dc:	5ccb      	ldrb	r3, [r1, r3]
 80045de:	fa22 f303 	lsr.w	r3, r2, r3
 80045e2:	4a09      	ldr	r2, [pc, #36]	; (8004608 <HAL_RCC_ClockConfig+0x1c4>)
 80045e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045e6:	4b09      	ldr	r3, [pc, #36]	; (800460c <HAL_RCC_ClockConfig+0x1c8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fc fe0c 	bl	8001208 <HAL_InitTick>

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	40023c00 	.word	0x40023c00
 8004600:	40023800 	.word	0x40023800
 8004604:	08009a38 	.word	0x08009a38
 8004608:	20000000 	.word	0x20000000
 800460c:	20000004 	.word	0x20000004

08004610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004614:	b090      	sub	sp, #64	; 0x40
 8004616:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	637b      	str	r3, [r7, #52]	; 0x34
 800461c:	2300      	movs	r3, #0
 800461e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004620:	2300      	movs	r3, #0
 8004622:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004628:	4b59      	ldr	r3, [pc, #356]	; (8004790 <HAL_RCC_GetSysClockFreq+0x180>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 030c 	and.w	r3, r3, #12
 8004630:	2b08      	cmp	r3, #8
 8004632:	d00d      	beq.n	8004650 <HAL_RCC_GetSysClockFreq+0x40>
 8004634:	2b08      	cmp	r3, #8
 8004636:	f200 80a1 	bhi.w	800477c <HAL_RCC_GetSysClockFreq+0x16c>
 800463a:	2b00      	cmp	r3, #0
 800463c:	d002      	beq.n	8004644 <HAL_RCC_GetSysClockFreq+0x34>
 800463e:	2b04      	cmp	r3, #4
 8004640:	d003      	beq.n	800464a <HAL_RCC_GetSysClockFreq+0x3a>
 8004642:	e09b      	b.n	800477c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004644:	4b53      	ldr	r3, [pc, #332]	; (8004794 <HAL_RCC_GetSysClockFreq+0x184>)
 8004646:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004648:	e09b      	b.n	8004782 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800464a:	4b53      	ldr	r3, [pc, #332]	; (8004798 <HAL_RCC_GetSysClockFreq+0x188>)
 800464c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800464e:	e098      	b.n	8004782 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004650:	4b4f      	ldr	r3, [pc, #316]	; (8004790 <HAL_RCC_GetSysClockFreq+0x180>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004658:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800465a:	4b4d      	ldr	r3, [pc, #308]	; (8004790 <HAL_RCC_GetSysClockFreq+0x180>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d028      	beq.n	80046b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004666:	4b4a      	ldr	r3, [pc, #296]	; (8004790 <HAL_RCC_GetSysClockFreq+0x180>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	099b      	lsrs	r3, r3, #6
 800466c:	2200      	movs	r2, #0
 800466e:	623b      	str	r3, [r7, #32]
 8004670:	627a      	str	r2, [r7, #36]	; 0x24
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004678:	2100      	movs	r1, #0
 800467a:	4b47      	ldr	r3, [pc, #284]	; (8004798 <HAL_RCC_GetSysClockFreq+0x188>)
 800467c:	fb03 f201 	mul.w	r2, r3, r1
 8004680:	2300      	movs	r3, #0
 8004682:	fb00 f303 	mul.w	r3, r0, r3
 8004686:	4413      	add	r3, r2
 8004688:	4a43      	ldr	r2, [pc, #268]	; (8004798 <HAL_RCC_GetSysClockFreq+0x188>)
 800468a:	fba0 1202 	umull	r1, r2, r0, r2
 800468e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004690:	460a      	mov	r2, r1
 8004692:	62ba      	str	r2, [r7, #40]	; 0x28
 8004694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004696:	4413      	add	r3, r2
 8004698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800469a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800469c:	2200      	movs	r2, #0
 800469e:	61bb      	str	r3, [r7, #24]
 80046a0:	61fa      	str	r2, [r7, #28]
 80046a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80046aa:	f7fb fdf1 	bl	8000290 <__aeabi_uldivmod>
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	4613      	mov	r3, r2
 80046b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046b6:	e053      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046b8:	4b35      	ldr	r3, [pc, #212]	; (8004790 <HAL_RCC_GetSysClockFreq+0x180>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	099b      	lsrs	r3, r3, #6
 80046be:	2200      	movs	r2, #0
 80046c0:	613b      	str	r3, [r7, #16]
 80046c2:	617a      	str	r2, [r7, #20]
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80046ca:	f04f 0b00 	mov.w	fp, #0
 80046ce:	4652      	mov	r2, sl
 80046d0:	465b      	mov	r3, fp
 80046d2:	f04f 0000 	mov.w	r0, #0
 80046d6:	f04f 0100 	mov.w	r1, #0
 80046da:	0159      	lsls	r1, r3, #5
 80046dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046e0:	0150      	lsls	r0, r2, #5
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	ebb2 080a 	subs.w	r8, r2, sl
 80046ea:	eb63 090b 	sbc.w	r9, r3, fp
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	f04f 0300 	mov.w	r3, #0
 80046f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80046fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80046fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004702:	ebb2 0408 	subs.w	r4, r2, r8
 8004706:	eb63 0509 	sbc.w	r5, r3, r9
 800470a:	f04f 0200 	mov.w	r2, #0
 800470e:	f04f 0300 	mov.w	r3, #0
 8004712:	00eb      	lsls	r3, r5, #3
 8004714:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004718:	00e2      	lsls	r2, r4, #3
 800471a:	4614      	mov	r4, r2
 800471c:	461d      	mov	r5, r3
 800471e:	eb14 030a 	adds.w	r3, r4, sl
 8004722:	603b      	str	r3, [r7, #0]
 8004724:	eb45 030b 	adc.w	r3, r5, fp
 8004728:	607b      	str	r3, [r7, #4]
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	f04f 0300 	mov.w	r3, #0
 8004732:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004736:	4629      	mov	r1, r5
 8004738:	028b      	lsls	r3, r1, #10
 800473a:	4621      	mov	r1, r4
 800473c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004740:	4621      	mov	r1, r4
 8004742:	028a      	lsls	r2, r1, #10
 8004744:	4610      	mov	r0, r2
 8004746:	4619      	mov	r1, r3
 8004748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800474a:	2200      	movs	r2, #0
 800474c:	60bb      	str	r3, [r7, #8]
 800474e:	60fa      	str	r2, [r7, #12]
 8004750:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004754:	f7fb fd9c 	bl	8000290 <__aeabi_uldivmod>
 8004758:	4602      	mov	r2, r0
 800475a:	460b      	mov	r3, r1
 800475c:	4613      	mov	r3, r2
 800475e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004760:	4b0b      	ldr	r3, [pc, #44]	; (8004790 <HAL_RCC_GetSysClockFreq+0x180>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	0c1b      	lsrs	r3, r3, #16
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	3301      	adds	r3, #1
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004770:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004774:	fbb2 f3f3 	udiv	r3, r2, r3
 8004778:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800477a:	e002      	b.n	8004782 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800477c:	4b05      	ldr	r3, [pc, #20]	; (8004794 <HAL_RCC_GetSysClockFreq+0x184>)
 800477e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004780:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004784:	4618      	mov	r0, r3
 8004786:	3740      	adds	r7, #64	; 0x40
 8004788:	46bd      	mov	sp, r7
 800478a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800478e:	bf00      	nop
 8004790:	40023800 	.word	0x40023800
 8004794:	00f42400 	.word	0x00f42400
 8004798:	017d7840 	.word	0x017d7840

0800479c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047a0:	4b03      	ldr	r3, [pc, #12]	; (80047b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80047a2:	681b      	ldr	r3, [r3, #0]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	20000000 	.word	0x20000000

080047b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047b8:	f7ff fff0 	bl	800479c <HAL_RCC_GetHCLKFreq>
 80047bc:	4602      	mov	r2, r0
 80047be:	4b05      	ldr	r3, [pc, #20]	; (80047d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	0a9b      	lsrs	r3, r3, #10
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	4903      	ldr	r1, [pc, #12]	; (80047d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047ca:	5ccb      	ldrb	r3, [r1, r3]
 80047cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40023800 	.word	0x40023800
 80047d8:	08009a48 	.word	0x08009a48

080047dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047e0:	f7ff ffdc 	bl	800479c <HAL_RCC_GetHCLKFreq>
 80047e4:	4602      	mov	r2, r0
 80047e6:	4b05      	ldr	r3, [pc, #20]	; (80047fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	0b5b      	lsrs	r3, r3, #13
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	4903      	ldr	r1, [pc, #12]	; (8004800 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047f2:	5ccb      	ldrb	r3, [r1, r3]
 80047f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	40023800 	.word	0x40023800
 8004800:	08009a48 	.word	0x08009a48

08004804 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e03f      	b.n	8004896 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d106      	bne.n	8004830 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7fc f936 	bl	8000a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2224      	movs	r2, #36	; 0x24
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004846:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f829 	bl	80048a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	691a      	ldr	r2, [r3, #16]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800485c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	695a      	ldr	r2, [r3, #20]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800486c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68da      	ldr	r2, [r3, #12]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800487c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2220      	movs	r2, #32
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2220      	movs	r2, #32
 8004890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048a4:	b0c0      	sub	sp, #256	; 0x100
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048bc:	68d9      	ldr	r1, [r3, #12]
 80048be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	ea40 0301 	orr.w	r3, r0, r1
 80048c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	431a      	orrs	r2, r3
 80048d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	431a      	orrs	r2, r3
 80048e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80048f8:	f021 010c 	bic.w	r1, r1, #12
 80048fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004906:	430b      	orrs	r3, r1
 8004908:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800490a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491a:	6999      	ldr	r1, [r3, #24]
 800491c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	ea40 0301 	orr.w	r3, r0, r1
 8004926:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	4b8f      	ldr	r3, [pc, #572]	; (8004b6c <UART_SetConfig+0x2cc>)
 8004930:	429a      	cmp	r2, r3
 8004932:	d005      	beq.n	8004940 <UART_SetConfig+0xa0>
 8004934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	4b8d      	ldr	r3, [pc, #564]	; (8004b70 <UART_SetConfig+0x2d0>)
 800493c:	429a      	cmp	r2, r3
 800493e:	d104      	bne.n	800494a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004940:	f7ff ff4c 	bl	80047dc <HAL_RCC_GetPCLK2Freq>
 8004944:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004948:	e003      	b.n	8004952 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800494a:	f7ff ff33 	bl	80047b4 <HAL_RCC_GetPCLK1Freq>
 800494e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800495c:	f040 810c 	bne.w	8004b78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004960:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004964:	2200      	movs	r2, #0
 8004966:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800496a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800496e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004972:	4622      	mov	r2, r4
 8004974:	462b      	mov	r3, r5
 8004976:	1891      	adds	r1, r2, r2
 8004978:	65b9      	str	r1, [r7, #88]	; 0x58
 800497a:	415b      	adcs	r3, r3
 800497c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800497e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004982:	4621      	mov	r1, r4
 8004984:	eb12 0801 	adds.w	r8, r2, r1
 8004988:	4629      	mov	r1, r5
 800498a:	eb43 0901 	adc.w	r9, r3, r1
 800498e:	f04f 0200 	mov.w	r2, #0
 8004992:	f04f 0300 	mov.w	r3, #0
 8004996:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800499a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800499e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049a2:	4690      	mov	r8, r2
 80049a4:	4699      	mov	r9, r3
 80049a6:	4623      	mov	r3, r4
 80049a8:	eb18 0303 	adds.w	r3, r8, r3
 80049ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049b0:	462b      	mov	r3, r5
 80049b2:	eb49 0303 	adc.w	r3, r9, r3
 80049b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80049ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80049ce:	460b      	mov	r3, r1
 80049d0:	18db      	adds	r3, r3, r3
 80049d2:	653b      	str	r3, [r7, #80]	; 0x50
 80049d4:	4613      	mov	r3, r2
 80049d6:	eb42 0303 	adc.w	r3, r2, r3
 80049da:	657b      	str	r3, [r7, #84]	; 0x54
 80049dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80049e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80049e4:	f7fb fc54 	bl	8000290 <__aeabi_uldivmod>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4b61      	ldr	r3, [pc, #388]	; (8004b74 <UART_SetConfig+0x2d4>)
 80049ee:	fba3 2302 	umull	r2, r3, r3, r2
 80049f2:	095b      	lsrs	r3, r3, #5
 80049f4:	011c      	lsls	r4, r3, #4
 80049f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049fa:	2200      	movs	r2, #0
 80049fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a08:	4642      	mov	r2, r8
 8004a0a:	464b      	mov	r3, r9
 8004a0c:	1891      	adds	r1, r2, r2
 8004a0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a10:	415b      	adcs	r3, r3
 8004a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a18:	4641      	mov	r1, r8
 8004a1a:	eb12 0a01 	adds.w	sl, r2, r1
 8004a1e:	4649      	mov	r1, r9
 8004a20:	eb43 0b01 	adc.w	fp, r3, r1
 8004a24:	f04f 0200 	mov.w	r2, #0
 8004a28:	f04f 0300 	mov.w	r3, #0
 8004a2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a38:	4692      	mov	sl, r2
 8004a3a:	469b      	mov	fp, r3
 8004a3c:	4643      	mov	r3, r8
 8004a3e:	eb1a 0303 	adds.w	r3, sl, r3
 8004a42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a46:	464b      	mov	r3, r9
 8004a48:	eb4b 0303 	adc.w	r3, fp, r3
 8004a4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a64:	460b      	mov	r3, r1
 8004a66:	18db      	adds	r3, r3, r3
 8004a68:	643b      	str	r3, [r7, #64]	; 0x40
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	eb42 0303 	adc.w	r3, r2, r3
 8004a70:	647b      	str	r3, [r7, #68]	; 0x44
 8004a72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a7a:	f7fb fc09 	bl	8000290 <__aeabi_uldivmod>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	460b      	mov	r3, r1
 8004a82:	4611      	mov	r1, r2
 8004a84:	4b3b      	ldr	r3, [pc, #236]	; (8004b74 <UART_SetConfig+0x2d4>)
 8004a86:	fba3 2301 	umull	r2, r3, r3, r1
 8004a8a:	095b      	lsrs	r3, r3, #5
 8004a8c:	2264      	movs	r2, #100	; 0x64
 8004a8e:	fb02 f303 	mul.w	r3, r2, r3
 8004a92:	1acb      	subs	r3, r1, r3
 8004a94:	00db      	lsls	r3, r3, #3
 8004a96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a9a:	4b36      	ldr	r3, [pc, #216]	; (8004b74 <UART_SetConfig+0x2d4>)
 8004a9c:	fba3 2302 	umull	r2, r3, r3, r2
 8004aa0:	095b      	lsrs	r3, r3, #5
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004aa8:	441c      	add	r4, r3
 8004aaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ab4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ab8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004abc:	4642      	mov	r2, r8
 8004abe:	464b      	mov	r3, r9
 8004ac0:	1891      	adds	r1, r2, r2
 8004ac2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ac4:	415b      	adcs	r3, r3
 8004ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ac8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004acc:	4641      	mov	r1, r8
 8004ace:	1851      	adds	r1, r2, r1
 8004ad0:	6339      	str	r1, [r7, #48]	; 0x30
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	414b      	adcs	r3, r1
 8004ad6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ad8:	f04f 0200 	mov.w	r2, #0
 8004adc:	f04f 0300 	mov.w	r3, #0
 8004ae0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ae4:	4659      	mov	r1, fp
 8004ae6:	00cb      	lsls	r3, r1, #3
 8004ae8:	4651      	mov	r1, sl
 8004aea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aee:	4651      	mov	r1, sl
 8004af0:	00ca      	lsls	r2, r1, #3
 8004af2:	4610      	mov	r0, r2
 8004af4:	4619      	mov	r1, r3
 8004af6:	4603      	mov	r3, r0
 8004af8:	4642      	mov	r2, r8
 8004afa:	189b      	adds	r3, r3, r2
 8004afc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b00:	464b      	mov	r3, r9
 8004b02:	460a      	mov	r2, r1
 8004b04:	eb42 0303 	adc.w	r3, r2, r3
 8004b08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b20:	460b      	mov	r3, r1
 8004b22:	18db      	adds	r3, r3, r3
 8004b24:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b26:	4613      	mov	r3, r2
 8004b28:	eb42 0303 	adc.w	r3, r2, r3
 8004b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b36:	f7fb fbab 	bl	8000290 <__aeabi_uldivmod>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	4b0d      	ldr	r3, [pc, #52]	; (8004b74 <UART_SetConfig+0x2d4>)
 8004b40:	fba3 1302 	umull	r1, r3, r3, r2
 8004b44:	095b      	lsrs	r3, r3, #5
 8004b46:	2164      	movs	r1, #100	; 0x64
 8004b48:	fb01 f303 	mul.w	r3, r1, r3
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	3332      	adds	r3, #50	; 0x32
 8004b52:	4a08      	ldr	r2, [pc, #32]	; (8004b74 <UART_SetConfig+0x2d4>)
 8004b54:	fba2 2303 	umull	r2, r3, r2, r3
 8004b58:	095b      	lsrs	r3, r3, #5
 8004b5a:	f003 0207 	and.w	r2, r3, #7
 8004b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4422      	add	r2, r4
 8004b66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b68:	e106      	b.n	8004d78 <UART_SetConfig+0x4d8>
 8004b6a:	bf00      	nop
 8004b6c:	40011000 	.word	0x40011000
 8004b70:	40011400 	.word	0x40011400
 8004b74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b8a:	4642      	mov	r2, r8
 8004b8c:	464b      	mov	r3, r9
 8004b8e:	1891      	adds	r1, r2, r2
 8004b90:	6239      	str	r1, [r7, #32]
 8004b92:	415b      	adcs	r3, r3
 8004b94:	627b      	str	r3, [r7, #36]	; 0x24
 8004b96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b9a:	4641      	mov	r1, r8
 8004b9c:	1854      	adds	r4, r2, r1
 8004b9e:	4649      	mov	r1, r9
 8004ba0:	eb43 0501 	adc.w	r5, r3, r1
 8004ba4:	f04f 0200 	mov.w	r2, #0
 8004ba8:	f04f 0300 	mov.w	r3, #0
 8004bac:	00eb      	lsls	r3, r5, #3
 8004bae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bb2:	00e2      	lsls	r2, r4, #3
 8004bb4:	4614      	mov	r4, r2
 8004bb6:	461d      	mov	r5, r3
 8004bb8:	4643      	mov	r3, r8
 8004bba:	18e3      	adds	r3, r4, r3
 8004bbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004bc0:	464b      	mov	r3, r9
 8004bc2:	eb45 0303 	adc.w	r3, r5, r3
 8004bc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004bd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bda:	f04f 0200 	mov.w	r2, #0
 8004bde:	f04f 0300 	mov.w	r3, #0
 8004be2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004be6:	4629      	mov	r1, r5
 8004be8:	008b      	lsls	r3, r1, #2
 8004bea:	4621      	mov	r1, r4
 8004bec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bf0:	4621      	mov	r1, r4
 8004bf2:	008a      	lsls	r2, r1, #2
 8004bf4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004bf8:	f7fb fb4a 	bl	8000290 <__aeabi_uldivmod>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	4b60      	ldr	r3, [pc, #384]	; (8004d84 <UART_SetConfig+0x4e4>)
 8004c02:	fba3 2302 	umull	r2, r3, r3, r2
 8004c06:	095b      	lsrs	r3, r3, #5
 8004c08:	011c      	lsls	r4, r3, #4
 8004c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c1c:	4642      	mov	r2, r8
 8004c1e:	464b      	mov	r3, r9
 8004c20:	1891      	adds	r1, r2, r2
 8004c22:	61b9      	str	r1, [r7, #24]
 8004c24:	415b      	adcs	r3, r3
 8004c26:	61fb      	str	r3, [r7, #28]
 8004c28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c2c:	4641      	mov	r1, r8
 8004c2e:	1851      	adds	r1, r2, r1
 8004c30:	6139      	str	r1, [r7, #16]
 8004c32:	4649      	mov	r1, r9
 8004c34:	414b      	adcs	r3, r1
 8004c36:	617b      	str	r3, [r7, #20]
 8004c38:	f04f 0200 	mov.w	r2, #0
 8004c3c:	f04f 0300 	mov.w	r3, #0
 8004c40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c44:	4659      	mov	r1, fp
 8004c46:	00cb      	lsls	r3, r1, #3
 8004c48:	4651      	mov	r1, sl
 8004c4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c4e:	4651      	mov	r1, sl
 8004c50:	00ca      	lsls	r2, r1, #3
 8004c52:	4610      	mov	r0, r2
 8004c54:	4619      	mov	r1, r3
 8004c56:	4603      	mov	r3, r0
 8004c58:	4642      	mov	r2, r8
 8004c5a:	189b      	adds	r3, r3, r2
 8004c5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c60:	464b      	mov	r3, r9
 8004c62:	460a      	mov	r2, r1
 8004c64:	eb42 0303 	adc.w	r3, r2, r3
 8004c68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c78:	f04f 0200 	mov.w	r2, #0
 8004c7c:	f04f 0300 	mov.w	r3, #0
 8004c80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c84:	4649      	mov	r1, r9
 8004c86:	008b      	lsls	r3, r1, #2
 8004c88:	4641      	mov	r1, r8
 8004c8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c8e:	4641      	mov	r1, r8
 8004c90:	008a      	lsls	r2, r1, #2
 8004c92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c96:	f7fb fafb 	bl	8000290 <__aeabi_uldivmod>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	4611      	mov	r1, r2
 8004ca0:	4b38      	ldr	r3, [pc, #224]	; (8004d84 <UART_SetConfig+0x4e4>)
 8004ca2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ca6:	095b      	lsrs	r3, r3, #5
 8004ca8:	2264      	movs	r2, #100	; 0x64
 8004caa:	fb02 f303 	mul.w	r3, r2, r3
 8004cae:	1acb      	subs	r3, r1, r3
 8004cb0:	011b      	lsls	r3, r3, #4
 8004cb2:	3332      	adds	r3, #50	; 0x32
 8004cb4:	4a33      	ldr	r2, [pc, #204]	; (8004d84 <UART_SetConfig+0x4e4>)
 8004cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cba:	095b      	lsrs	r3, r3, #5
 8004cbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cc0:	441c      	add	r4, r3
 8004cc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	673b      	str	r3, [r7, #112]	; 0x70
 8004cca:	677a      	str	r2, [r7, #116]	; 0x74
 8004ccc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004cd0:	4642      	mov	r2, r8
 8004cd2:	464b      	mov	r3, r9
 8004cd4:	1891      	adds	r1, r2, r2
 8004cd6:	60b9      	str	r1, [r7, #8]
 8004cd8:	415b      	adcs	r3, r3
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ce0:	4641      	mov	r1, r8
 8004ce2:	1851      	adds	r1, r2, r1
 8004ce4:	6039      	str	r1, [r7, #0]
 8004ce6:	4649      	mov	r1, r9
 8004ce8:	414b      	adcs	r3, r1
 8004cea:	607b      	str	r3, [r7, #4]
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004cf8:	4659      	mov	r1, fp
 8004cfa:	00cb      	lsls	r3, r1, #3
 8004cfc:	4651      	mov	r1, sl
 8004cfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d02:	4651      	mov	r1, sl
 8004d04:	00ca      	lsls	r2, r1, #3
 8004d06:	4610      	mov	r0, r2
 8004d08:	4619      	mov	r1, r3
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	4642      	mov	r2, r8
 8004d0e:	189b      	adds	r3, r3, r2
 8004d10:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d12:	464b      	mov	r3, r9
 8004d14:	460a      	mov	r2, r1
 8004d16:	eb42 0303 	adc.w	r3, r2, r3
 8004d1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	663b      	str	r3, [r7, #96]	; 0x60
 8004d26:	667a      	str	r2, [r7, #100]	; 0x64
 8004d28:	f04f 0200 	mov.w	r2, #0
 8004d2c:	f04f 0300 	mov.w	r3, #0
 8004d30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d34:	4649      	mov	r1, r9
 8004d36:	008b      	lsls	r3, r1, #2
 8004d38:	4641      	mov	r1, r8
 8004d3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d3e:	4641      	mov	r1, r8
 8004d40:	008a      	lsls	r2, r1, #2
 8004d42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d46:	f7fb faa3 	bl	8000290 <__aeabi_uldivmod>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	4b0d      	ldr	r3, [pc, #52]	; (8004d84 <UART_SetConfig+0x4e4>)
 8004d50:	fba3 1302 	umull	r1, r3, r3, r2
 8004d54:	095b      	lsrs	r3, r3, #5
 8004d56:	2164      	movs	r1, #100	; 0x64
 8004d58:	fb01 f303 	mul.w	r3, r1, r3
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	011b      	lsls	r3, r3, #4
 8004d60:	3332      	adds	r3, #50	; 0x32
 8004d62:	4a08      	ldr	r2, [pc, #32]	; (8004d84 <UART_SetConfig+0x4e4>)
 8004d64:	fba2 2303 	umull	r2, r3, r2, r3
 8004d68:	095b      	lsrs	r3, r3, #5
 8004d6a:	f003 020f 	and.w	r2, r3, #15
 8004d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4422      	add	r2, r4
 8004d76:	609a      	str	r2, [r3, #8]
}
 8004d78:	bf00      	nop
 8004d7a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d84:	51eb851f 	.word	0x51eb851f

08004d88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d88:	b084      	sub	sp, #16
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b084      	sub	sp, #16
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	f107 001c 	add.w	r0, r7, #28
 8004d96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d122      	bne.n	8004de6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004db4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d105      	bne.n	8004dda <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f001 fbee 	bl	80065bc <USB_CoreReset>
 8004de0:	4603      	mov	r3, r0
 8004de2:	73fb      	strb	r3, [r7, #15]
 8004de4:	e01a      	b.n	8004e1c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f001 fbe2 	bl	80065bc <USB_CoreReset>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004dfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d106      	bne.n	8004e10 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e06:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	639a      	str	r2, [r3, #56]	; 0x38
 8004e0e:	e005      	b.n	8004e1c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d10b      	bne.n	8004e3a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f043 0206 	orr.w	r2, r3, #6
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f043 0220 	orr.w	r2, r3, #32
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e46:	b004      	add	sp, #16
 8004e48:	4770      	bx	lr
	...

08004e4c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b087      	sub	sp, #28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	4613      	mov	r3, r2
 8004e58:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e5a:	79fb      	ldrb	r3, [r7, #7]
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d165      	bne.n	8004f2c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	4a41      	ldr	r2, [pc, #260]	; (8004f68 <USB_SetTurnaroundTime+0x11c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d906      	bls.n	8004e76 <USB_SetTurnaroundTime+0x2a>
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	4a40      	ldr	r2, [pc, #256]	; (8004f6c <USB_SetTurnaroundTime+0x120>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d202      	bcs.n	8004e76 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004e70:	230f      	movs	r3, #15
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	e062      	b.n	8004f3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	4a3c      	ldr	r2, [pc, #240]	; (8004f6c <USB_SetTurnaroundTime+0x120>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d306      	bcc.n	8004e8c <USB_SetTurnaroundTime+0x40>
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	4a3b      	ldr	r2, [pc, #236]	; (8004f70 <USB_SetTurnaroundTime+0x124>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d202      	bcs.n	8004e8c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004e86:	230e      	movs	r3, #14
 8004e88:	617b      	str	r3, [r7, #20]
 8004e8a:	e057      	b.n	8004f3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4a38      	ldr	r2, [pc, #224]	; (8004f70 <USB_SetTurnaroundTime+0x124>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d306      	bcc.n	8004ea2 <USB_SetTurnaroundTime+0x56>
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	4a37      	ldr	r2, [pc, #220]	; (8004f74 <USB_SetTurnaroundTime+0x128>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d202      	bcs.n	8004ea2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004e9c:	230d      	movs	r3, #13
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	e04c      	b.n	8004f3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	4a33      	ldr	r2, [pc, #204]	; (8004f74 <USB_SetTurnaroundTime+0x128>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d306      	bcc.n	8004eb8 <USB_SetTurnaroundTime+0x6c>
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	4a32      	ldr	r2, [pc, #200]	; (8004f78 <USB_SetTurnaroundTime+0x12c>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d802      	bhi.n	8004eb8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004eb2:	230c      	movs	r3, #12
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	e041      	b.n	8004f3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	4a2f      	ldr	r2, [pc, #188]	; (8004f78 <USB_SetTurnaroundTime+0x12c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d906      	bls.n	8004ece <USB_SetTurnaroundTime+0x82>
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	4a2e      	ldr	r2, [pc, #184]	; (8004f7c <USB_SetTurnaroundTime+0x130>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d802      	bhi.n	8004ece <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004ec8:	230b      	movs	r3, #11
 8004eca:	617b      	str	r3, [r7, #20]
 8004ecc:	e036      	b.n	8004f3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	4a2a      	ldr	r2, [pc, #168]	; (8004f7c <USB_SetTurnaroundTime+0x130>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d906      	bls.n	8004ee4 <USB_SetTurnaroundTime+0x98>
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	4a29      	ldr	r2, [pc, #164]	; (8004f80 <USB_SetTurnaroundTime+0x134>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d802      	bhi.n	8004ee4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004ede:	230a      	movs	r3, #10
 8004ee0:	617b      	str	r3, [r7, #20]
 8004ee2:	e02b      	b.n	8004f3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4a26      	ldr	r2, [pc, #152]	; (8004f80 <USB_SetTurnaroundTime+0x134>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d906      	bls.n	8004efa <USB_SetTurnaroundTime+0xae>
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	4a25      	ldr	r2, [pc, #148]	; (8004f84 <USB_SetTurnaroundTime+0x138>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d202      	bcs.n	8004efa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004ef4:	2309      	movs	r3, #9
 8004ef6:	617b      	str	r3, [r7, #20]
 8004ef8:	e020      	b.n	8004f3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	4a21      	ldr	r2, [pc, #132]	; (8004f84 <USB_SetTurnaroundTime+0x138>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d306      	bcc.n	8004f10 <USB_SetTurnaroundTime+0xc4>
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	4a20      	ldr	r2, [pc, #128]	; (8004f88 <USB_SetTurnaroundTime+0x13c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d802      	bhi.n	8004f10 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004f0a:	2308      	movs	r3, #8
 8004f0c:	617b      	str	r3, [r7, #20]
 8004f0e:	e015      	b.n	8004f3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	4a1d      	ldr	r2, [pc, #116]	; (8004f88 <USB_SetTurnaroundTime+0x13c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d906      	bls.n	8004f26 <USB_SetTurnaroundTime+0xda>
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	4a1c      	ldr	r2, [pc, #112]	; (8004f8c <USB_SetTurnaroundTime+0x140>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d202      	bcs.n	8004f26 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004f20:	2307      	movs	r3, #7
 8004f22:	617b      	str	r3, [r7, #20]
 8004f24:	e00a      	b.n	8004f3c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004f26:	2306      	movs	r3, #6
 8004f28:	617b      	str	r3, [r7, #20]
 8004f2a:	e007      	b.n	8004f3c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004f2c:	79fb      	ldrb	r3, [r7, #7]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d102      	bne.n	8004f38 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004f32:	2309      	movs	r3, #9
 8004f34:	617b      	str	r3, [r7, #20]
 8004f36:	e001      	b.n	8004f3c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004f38:	2309      	movs	r3, #9
 8004f3a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	68da      	ldr	r2, [r3, #12]
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	029b      	lsls	r3, r3, #10
 8004f50:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004f54:	431a      	orrs	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	371c      	adds	r7, #28
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	00d8acbf 	.word	0x00d8acbf
 8004f6c:	00e4e1c0 	.word	0x00e4e1c0
 8004f70:	00f42400 	.word	0x00f42400
 8004f74:	01067380 	.word	0x01067380
 8004f78:	011a499f 	.word	0x011a499f
 8004f7c:	01312cff 	.word	0x01312cff
 8004f80:	014ca43f 	.word	0x014ca43f
 8004f84:	016e3600 	.word	0x016e3600
 8004f88:	01a6ab1f 	.word	0x01a6ab1f
 8004f8c:	01e84800 	.word	0x01e84800

08004f90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f043 0201 	orr.w	r2, r3, #1
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b083      	sub	sp, #12
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f023 0201 	bic.w	r2, r3, #1
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	460b      	mov	r3, r1
 8004fde:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ff0:	78fb      	ldrb	r3, [r7, #3]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d115      	bne.n	8005022 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005002:	2001      	movs	r0, #1
 8005004:	f7fc f950 	bl	80012a8 <HAL_Delay>
      ms++;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	3301      	adds	r3, #1
 800500c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f001 fa45 	bl	800649e <USB_GetMode>
 8005014:	4603      	mov	r3, r0
 8005016:	2b01      	cmp	r3, #1
 8005018:	d01e      	beq.n	8005058 <USB_SetCurrentMode+0x84>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2b31      	cmp	r3, #49	; 0x31
 800501e:	d9f0      	bls.n	8005002 <USB_SetCurrentMode+0x2e>
 8005020:	e01a      	b.n	8005058 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005022:	78fb      	ldrb	r3, [r7, #3]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d115      	bne.n	8005054 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005034:	2001      	movs	r0, #1
 8005036:	f7fc f937 	bl	80012a8 <HAL_Delay>
      ms++;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	3301      	adds	r3, #1
 800503e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f001 fa2c 	bl	800649e <USB_GetMode>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d005      	beq.n	8005058 <USB_SetCurrentMode+0x84>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2b31      	cmp	r3, #49	; 0x31
 8005050:	d9f0      	bls.n	8005034 <USB_SetCurrentMode+0x60>
 8005052:	e001      	b.n	8005058 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e005      	b.n	8005064 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2b32      	cmp	r3, #50	; 0x32
 800505c:	d101      	bne.n	8005062 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e000      	b.n	8005064 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800506c:	b084      	sub	sp, #16
 800506e:	b580      	push	{r7, lr}
 8005070:	b086      	sub	sp, #24
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
 8005076:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800507a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800507e:	2300      	movs	r3, #0
 8005080:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005086:	2300      	movs	r3, #0
 8005088:	613b      	str	r3, [r7, #16]
 800508a:	e009      	b.n	80050a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	3340      	adds	r3, #64	; 0x40
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	2200      	movs	r2, #0
 8005098:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	3301      	adds	r3, #1
 800509e:	613b      	str	r3, [r7, #16]
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	2b0e      	cmp	r3, #14
 80050a4:	d9f2      	bls.n	800508c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80050a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d11c      	bne.n	80050e6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050ba:	f043 0302 	orr.w	r3, r3, #2
 80050be:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050dc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	639a      	str	r2, [r3, #56]	; 0x38
 80050e4:	e00b      	b.n	80050fe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005104:	461a      	mov	r2, r3
 8005106:	2300      	movs	r3, #0
 8005108:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005110:	4619      	mov	r1, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005118:	461a      	mov	r2, r3
 800511a:	680b      	ldr	r3, [r1, #0]
 800511c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800511e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005120:	2b01      	cmp	r3, #1
 8005122:	d10c      	bne.n	800513e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005126:	2b00      	cmp	r3, #0
 8005128:	d104      	bne.n	8005134 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800512a:	2100      	movs	r1, #0
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f965 	bl	80053fc <USB_SetDevSpeed>
 8005132:	e008      	b.n	8005146 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005134:	2101      	movs	r1, #1
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f960 	bl	80053fc <USB_SetDevSpeed>
 800513c:	e003      	b.n	8005146 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800513e:	2103      	movs	r1, #3
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f95b 	bl	80053fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005146:	2110      	movs	r1, #16
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 f8f3 	bl	8005334 <USB_FlushTxFifo>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f91f 	bl	800539c <USB_FlushRxFifo>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d001      	beq.n	8005168 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800516e:	461a      	mov	r2, r3
 8005170:	2300      	movs	r3, #0
 8005172:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800517a:	461a      	mov	r2, r3
 800517c:	2300      	movs	r3, #0
 800517e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005186:	461a      	mov	r2, r3
 8005188:	2300      	movs	r3, #0
 800518a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800518c:	2300      	movs	r3, #0
 800518e:	613b      	str	r3, [r7, #16]
 8005190:	e043      	b.n	800521a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4413      	add	r3, r2
 800519a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051a8:	d118      	bne.n	80051dc <USB_DevInit+0x170>
    {
      if (i == 0U)
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10a      	bne.n	80051c6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051bc:	461a      	mov	r2, r3
 80051be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051c2:	6013      	str	r3, [r2, #0]
 80051c4:	e013      	b.n	80051ee <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d2:	461a      	mov	r2, r3
 80051d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051d8:	6013      	str	r3, [r2, #0]
 80051da:	e008      	b.n	80051ee <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e8:	461a      	mov	r2, r3
 80051ea:	2300      	movs	r3, #0
 80051ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051fa:	461a      	mov	r2, r3
 80051fc:	2300      	movs	r3, #0
 80051fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520c:	461a      	mov	r2, r3
 800520e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005212:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	3301      	adds	r3, #1
 8005218:	613b      	str	r3, [r7, #16]
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	429a      	cmp	r2, r3
 8005220:	d3b7      	bcc.n	8005192 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005222:	2300      	movs	r3, #0
 8005224:	613b      	str	r3, [r7, #16]
 8005226:	e043      	b.n	80052b0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800523a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800523e:	d118      	bne.n	8005272 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10a      	bne.n	800525c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	4413      	add	r3, r2
 800524e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005252:	461a      	mov	r2, r3
 8005254:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005258:	6013      	str	r3, [r2, #0]
 800525a:	e013      	b.n	8005284 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005268:	461a      	mov	r2, r3
 800526a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800526e:	6013      	str	r3, [r2, #0]
 8005270:	e008      	b.n	8005284 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4413      	add	r3, r2
 800527a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527e:	461a      	mov	r2, r3
 8005280:	2300      	movs	r3, #0
 8005282:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4413      	add	r3, r2
 800528c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005290:	461a      	mov	r2, r3
 8005292:	2300      	movs	r3, #0
 8005294:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	4413      	add	r3, r2
 800529e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a2:	461a      	mov	r2, r3
 80052a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	3301      	adds	r3, #1
 80052ae:	613b      	str	r3, [r7, #16]
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d3b7      	bcc.n	8005228 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80052d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d105      	bne.n	80052ec <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	f043 0210 	orr.w	r2, r3, #16
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	699a      	ldr	r2, [r3, #24]
 80052f0:	4b0f      	ldr	r3, [pc, #60]	; (8005330 <USB_DevInit+0x2c4>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80052f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d005      	beq.n	800530a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	f043 0208 	orr.w	r2, r3, #8
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800530a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800530c:	2b01      	cmp	r3, #1
 800530e:	d107      	bne.n	8005320 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005318:	f043 0304 	orr.w	r3, r3, #4
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005320:	7dfb      	ldrb	r3, [r7, #23]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3718      	adds	r7, #24
 8005326:	46bd      	mov	sp, r7
 8005328:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800532c:	b004      	add	sp, #16
 800532e:	4770      	bx	lr
 8005330:	803c3800 	.word	0x803c3800

08005334 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800533e:	2300      	movs	r3, #0
 8005340:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	3301      	adds	r3, #1
 8005346:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4a13      	ldr	r2, [pc, #76]	; (8005398 <USB_FlushTxFifo+0x64>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d901      	bls.n	8005354 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e01b      	b.n	800538c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	2b00      	cmp	r3, #0
 800535a:	daf2      	bge.n	8005342 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	019b      	lsls	r3, r3, #6
 8005364:	f043 0220 	orr.w	r2, r3, #32
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	3301      	adds	r3, #1
 8005370:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	4a08      	ldr	r2, [pc, #32]	; (8005398 <USB_FlushTxFifo+0x64>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d901      	bls.n	800537e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e006      	b.n	800538c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	f003 0320 	and.w	r3, r3, #32
 8005386:	2b20      	cmp	r3, #32
 8005388:	d0f0      	beq.n	800536c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	00030d40 	.word	0x00030d40

0800539c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	3301      	adds	r3, #1
 80053ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	4a11      	ldr	r2, [pc, #68]	; (80053f8 <USB_FlushRxFifo+0x5c>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d901      	bls.n	80053ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e018      	b.n	80053ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	daf2      	bge.n	80053a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2210      	movs	r2, #16
 80053ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	3301      	adds	r3, #1
 80053d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	4a08      	ldr	r2, [pc, #32]	; (80053f8 <USB_FlushRxFifo+0x5c>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d901      	bls.n	80053de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e006      	b.n	80053ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f003 0310 	and.w	r3, r3, #16
 80053e6:	2b10      	cmp	r3, #16
 80053e8:	d0f0      	beq.n	80053cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr
 80053f8:	00030d40 	.word	0x00030d40

080053fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	460b      	mov	r3, r1
 8005406:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	78fb      	ldrb	r3, [r7, #3]
 8005416:	68f9      	ldr	r1, [r7, #12]
 8005418:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800541c:	4313      	orrs	r3, r2
 800541e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800542e:	b480      	push	{r7}
 8005430:	b087      	sub	sp, #28
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 0306 	and.w	r3, r3, #6
 8005446:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d102      	bne.n	8005454 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800544e:	2300      	movs	r3, #0
 8005450:	75fb      	strb	r3, [r7, #23]
 8005452:	e00a      	b.n	800546a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2b02      	cmp	r3, #2
 8005458:	d002      	beq.n	8005460 <USB_GetDevSpeed+0x32>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2b06      	cmp	r3, #6
 800545e:	d102      	bne.n	8005466 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005460:	2302      	movs	r3, #2
 8005462:	75fb      	strb	r3, [r7, #23]
 8005464:	e001      	b.n	800546a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005466:	230f      	movs	r3, #15
 8005468:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800546a:	7dfb      	ldrb	r3, [r7, #23]
}
 800546c:	4618      	mov	r0, r3
 800546e:	371c      	adds	r7, #28
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	785b      	ldrb	r3, [r3, #1]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d13a      	bne.n	800550a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549a:	69da      	ldr	r2, [r3, #28]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	f003 030f 	and.w	r3, r3, #15
 80054a4:	2101      	movs	r1, #1
 80054a6:	fa01 f303 	lsl.w	r3, r1, r3
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	68f9      	ldr	r1, [r7, #12]
 80054ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054b2:	4313      	orrs	r3, r2
 80054b4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	015a      	lsls	r2, r3, #5
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	4413      	add	r3, r2
 80054be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d155      	bne.n	8005578 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	015a      	lsls	r2, r3, #5
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	791b      	ldrb	r3, [r3, #4]
 80054e6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054e8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	059b      	lsls	r3, r3, #22
 80054ee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054f0:	4313      	orrs	r3, r2
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	0151      	lsls	r1, r2, #5
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	440a      	add	r2, r1
 80054fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005506:	6013      	str	r3, [r2, #0]
 8005508:	e036      	b.n	8005578 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005510:	69da      	ldr	r2, [r3, #28]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	f003 030f 	and.w	r3, r3, #15
 800551a:	2101      	movs	r1, #1
 800551c:	fa01 f303 	lsl.w	r3, r1, r3
 8005520:	041b      	lsls	r3, r3, #16
 8005522:	68f9      	ldr	r1, [r7, #12]
 8005524:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005528:	4313      	orrs	r3, r2
 800552a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	4413      	add	r3, r2
 8005534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d11a      	bne.n	8005578 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4413      	add	r3, r2
 800554a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	791b      	ldrb	r3, [r3, #4]
 800555c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800555e:	430b      	orrs	r3, r1
 8005560:	4313      	orrs	r3, r2
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	0151      	lsls	r1, r2, #5
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	440a      	add	r2, r1
 800556a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800556e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005576:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
	...

08005588 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	785b      	ldrb	r3, [r3, #1]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d161      	bne.n	8005668 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055ba:	d11f      	bne.n	80055fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	0151      	lsls	r1, r2, #5
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	440a      	add	r2, r1
 80055d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	0151      	lsls	r1, r2, #5
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	440a      	add	r2, r1
 80055f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005602:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	f003 030f 	and.w	r3, r3, #15
 800560c:	2101      	movs	r1, #1
 800560e:	fa01 f303 	lsl.w	r3, r1, r3
 8005612:	b29b      	uxth	r3, r3
 8005614:	43db      	mvns	r3, r3
 8005616:	68f9      	ldr	r1, [r7, #12]
 8005618:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800561c:	4013      	ands	r3, r2
 800561e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005626:	69da      	ldr	r2, [r3, #28]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	f003 030f 	and.w	r3, r3, #15
 8005630:	2101      	movs	r1, #1
 8005632:	fa01 f303 	lsl.w	r3, r1, r3
 8005636:	b29b      	uxth	r3, r3
 8005638:	43db      	mvns	r3, r3
 800563a:	68f9      	ldr	r1, [r7, #12]
 800563c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005640:	4013      	ands	r3, r2
 8005642:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4413      	add	r3, r2
 800564c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	0159      	lsls	r1, r3, #5
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	440b      	add	r3, r1
 800565a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565e:	4619      	mov	r1, r3
 8005660:	4b35      	ldr	r3, [pc, #212]	; (8005738 <USB_DeactivateEndpoint+0x1b0>)
 8005662:	4013      	ands	r3, r2
 8005664:	600b      	str	r3, [r1, #0]
 8005666:	e060      	b.n	800572a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4413      	add	r3, r2
 8005670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800567a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800567e:	d11f      	bne.n	80056c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	0151      	lsls	r1, r2, #5
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	440a      	add	r2, r1
 8005696:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800569a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800569e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	0151      	lsls	r1, r2, #5
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	440a      	add	r2, r1
 80056b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	f003 030f 	and.w	r3, r3, #15
 80056d0:	2101      	movs	r1, #1
 80056d2:	fa01 f303 	lsl.w	r3, r1, r3
 80056d6:	041b      	lsls	r3, r3, #16
 80056d8:	43db      	mvns	r3, r3
 80056da:	68f9      	ldr	r1, [r7, #12]
 80056dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056e0:	4013      	ands	r3, r2
 80056e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ea:	69da      	ldr	r2, [r3, #28]
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	f003 030f 	and.w	r3, r3, #15
 80056f4:	2101      	movs	r1, #1
 80056f6:	fa01 f303 	lsl.w	r3, r1, r3
 80056fa:	041b      	lsls	r3, r3, #16
 80056fc:	43db      	mvns	r3, r3
 80056fe:	68f9      	ldr	r1, [r7, #12]
 8005700:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005704:	4013      	ands	r3, r2
 8005706:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	0159      	lsls	r1, r3, #5
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	440b      	add	r3, r1
 800571e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005722:	4619      	mov	r1, r3
 8005724:	4b05      	ldr	r3, [pc, #20]	; (800573c <USB_DeactivateEndpoint+0x1b4>)
 8005726:	4013      	ands	r3, r2
 8005728:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3714      	adds	r7, #20
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	ec337800 	.word	0xec337800
 800573c:	eff37800 	.word	0xeff37800

08005740 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b08a      	sub	sp, #40	; 0x28
 8005744:	af02      	add	r7, sp, #8
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	4613      	mov	r3, r2
 800574c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	785b      	ldrb	r3, [r3, #1]
 800575c:	2b01      	cmp	r3, #1
 800575e:	f040 815c 	bne.w	8005a1a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d132      	bne.n	80057d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	4413      	add	r3, r2
 8005772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	0151      	lsls	r1, r2, #5
 800577c:	69fa      	ldr	r2, [r7, #28]
 800577e:	440a      	add	r2, r1
 8005780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005784:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005788:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800578c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	015a      	lsls	r2, r3, #5
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	4413      	add	r3, r2
 8005796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	0151      	lsls	r1, r2, #5
 80057a0:	69fa      	ldr	r2, [r7, #28]
 80057a2:	440a      	add	r2, r1
 80057a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	0151      	lsls	r1, r2, #5
 80057c0:	69fa      	ldr	r2, [r7, #28]
 80057c2:	440a      	add	r2, r1
 80057c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c8:	0cdb      	lsrs	r3, r3, #19
 80057ca:	04db      	lsls	r3, r3, #19
 80057cc:	6113      	str	r3, [r2, #16]
 80057ce:	e074      	b.n	80058ba <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	0151      	lsls	r1, r2, #5
 80057e2:	69fa      	ldr	r2, [r7, #28]
 80057e4:	440a      	add	r2, r1
 80057e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ea:	0cdb      	lsrs	r3, r3, #19
 80057ec:	04db      	lsls	r3, r3, #19
 80057ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	69ba      	ldr	r2, [r7, #24]
 8005800:	0151      	lsls	r1, r2, #5
 8005802:	69fa      	ldr	r2, [r7, #28]
 8005804:	440a      	add	r2, r1
 8005806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800580a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800580e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005812:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005820:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	6999      	ldr	r1, [r3, #24]
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	440b      	add	r3, r1
 800582c:	1e59      	subs	r1, r3, #1
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	fbb1 f3f3 	udiv	r3, r1, r3
 8005836:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005838:	4b9d      	ldr	r3, [pc, #628]	; (8005ab0 <USB_EPStartXfer+0x370>)
 800583a:	400b      	ands	r3, r1
 800583c:	69b9      	ldr	r1, [r7, #24]
 800583e:	0148      	lsls	r0, r1, #5
 8005840:	69f9      	ldr	r1, [r7, #28]
 8005842:	4401      	add	r1, r0
 8005844:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005848:	4313      	orrs	r3, r2
 800584a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005858:	691a      	ldr	r2, [r3, #16]
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005862:	69b9      	ldr	r1, [r7, #24]
 8005864:	0148      	lsls	r0, r1, #5
 8005866:	69f9      	ldr	r1, [r7, #28]
 8005868:	4401      	add	r1, r0
 800586a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800586e:	4313      	orrs	r3, r2
 8005870:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	791b      	ldrb	r3, [r3, #4]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d11f      	bne.n	80058ba <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	4413      	add	r3, r2
 8005882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	0151      	lsls	r1, r2, #5
 800588c:	69fa      	ldr	r2, [r7, #28]
 800588e:	440a      	add	r2, r1
 8005890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005894:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005898:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	015a      	lsls	r2, r3, #5
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	4413      	add	r3, r2
 80058a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	0151      	lsls	r1, r2, #5
 80058ac:	69fa      	ldr	r2, [r7, #28]
 80058ae:	440a      	add	r2, r1
 80058b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058b8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80058ba:	79fb      	ldrb	r3, [r7, #7]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d14b      	bne.n	8005958 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d009      	beq.n	80058dc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d4:	461a      	mov	r2, r3
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	791b      	ldrb	r3, [r3, #4]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d128      	bne.n	8005936 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d110      	bne.n	8005916 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	015a      	lsls	r2, r3, #5
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	69ba      	ldr	r2, [r7, #24]
 8005904:	0151      	lsls	r1, r2, #5
 8005906:	69fa      	ldr	r2, [r7, #28]
 8005908:	440a      	add	r2, r1
 800590a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800590e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005912:	6013      	str	r3, [r2, #0]
 8005914:	e00f      	b.n	8005936 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	4413      	add	r3, r2
 800591e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	0151      	lsls	r1, r2, #5
 8005928:	69fa      	ldr	r2, [r7, #28]
 800592a:	440a      	add	r2, r1
 800592c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005934:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	4413      	add	r3, r2
 800593e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	0151      	lsls	r1, r2, #5
 8005948:	69fa      	ldr	r2, [r7, #28]
 800594a:	440a      	add	r2, r1
 800594c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005950:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005954:	6013      	str	r3, [r2, #0]
 8005956:	e133      	b.n	8005bc0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	4413      	add	r3, r2
 8005960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69ba      	ldr	r2, [r7, #24]
 8005968:	0151      	lsls	r1, r2, #5
 800596a:	69fa      	ldr	r2, [r7, #28]
 800596c:	440a      	add	r2, r1
 800596e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005972:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005976:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	791b      	ldrb	r3, [r3, #4]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d015      	beq.n	80059ac <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 811b 	beq.w	8005bc0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	f003 030f 	and.w	r3, r3, #15
 800599a:	2101      	movs	r1, #1
 800599c:	fa01 f303 	lsl.w	r3, r1, r3
 80059a0:	69f9      	ldr	r1, [r7, #28]
 80059a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059a6:	4313      	orrs	r3, r2
 80059a8:	634b      	str	r3, [r1, #52]	; 0x34
 80059aa:	e109      	b.n	8005bc0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d110      	bne.n	80059de <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	0151      	lsls	r1, r2, #5
 80059ce:	69fa      	ldr	r2, [r7, #28]
 80059d0:	440a      	add	r2, r1
 80059d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059da:	6013      	str	r3, [r2, #0]
 80059dc:	e00f      	b.n	80059fe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	0151      	lsls	r1, r2, #5
 80059f0:	69fa      	ldr	r2, [r7, #28]
 80059f2:	440a      	add	r2, r1
 80059f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059fc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	6919      	ldr	r1, [r3, #16]
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	781a      	ldrb	r2, [r3, #0]
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	b298      	uxth	r0, r3
 8005a0c:	79fb      	ldrb	r3, [r7, #7]
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	4603      	mov	r3, r0
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f000 fade 	bl	8005fd4 <USB_WritePacket>
 8005a18:	e0d2      	b.n	8005bc0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	0151      	lsls	r1, r2, #5
 8005a2c:	69fa      	ldr	r2, [r7, #28]
 8005a2e:	440a      	add	r2, r1
 8005a30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a34:	0cdb      	lsrs	r3, r3, #19
 8005a36:	04db      	lsls	r3, r3, #19
 8005a38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	69ba      	ldr	r2, [r7, #24]
 8005a4a:	0151      	lsls	r1, r2, #5
 8005a4c:	69fa      	ldr	r2, [r7, #28]
 8005a4e:	440a      	add	r2, r1
 8005a50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a54:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a58:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a5c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d126      	bne.n	8005ab4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	015a      	lsls	r2, r3, #5
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a72:	691a      	ldr	r2, [r3, #16]
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a7c:	69b9      	ldr	r1, [r7, #24]
 8005a7e:	0148      	lsls	r0, r1, #5
 8005a80:	69f9      	ldr	r1, [r7, #28]
 8005a82:	4401      	add	r1, r0
 8005a84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	0151      	lsls	r1, r2, #5
 8005a9e:	69fa      	ldr	r2, [r7, #28]
 8005aa0:	440a      	add	r2, r1
 8005aa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aa6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005aaa:	6113      	str	r3, [r2, #16]
 8005aac:	e03a      	b.n	8005b24 <USB_EPStartXfer+0x3e4>
 8005aae:	bf00      	nop
 8005ab0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	699a      	ldr	r2, [r3, #24]
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	4413      	add	r3, r2
 8005abe:	1e5a      	subs	r2, r3, #1
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	8afa      	ldrh	r2, [r7, #22]
 8005ad0:	fb03 f202 	mul.w	r2, r3, r2
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae4:	691a      	ldr	r2, [r3, #16]
 8005ae6:	8afb      	ldrh	r3, [r7, #22]
 8005ae8:	04d9      	lsls	r1, r3, #19
 8005aea:	4b38      	ldr	r3, [pc, #224]	; (8005bcc <USB_EPStartXfer+0x48c>)
 8005aec:	400b      	ands	r3, r1
 8005aee:	69b9      	ldr	r1, [r7, #24]
 8005af0:	0148      	lsls	r0, r1, #5
 8005af2:	69f9      	ldr	r1, [r7, #28]
 8005af4:	4401      	add	r1, r0
 8005af6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005afa:	4313      	orrs	r3, r2
 8005afc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0a:	691a      	ldr	r2, [r3, #16]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	69db      	ldr	r3, [r3, #28]
 8005b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b14:	69b9      	ldr	r1, [r7, #24]
 8005b16:	0148      	lsls	r0, r1, #5
 8005b18:	69f9      	ldr	r1, [r7, #28]
 8005b1a:	4401      	add	r1, r0
 8005b1c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b20:	4313      	orrs	r3, r2
 8005b22:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005b24:	79fb      	ldrb	r3, [r7, #7]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d10d      	bne.n	8005b46 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d009      	beq.n	8005b46 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	6919      	ldr	r1, [r3, #16]
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	015a      	lsls	r2, r3, #5
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b42:	460a      	mov	r2, r1
 8005b44:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	791b      	ldrb	r3, [r3, #4]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d128      	bne.n	8005ba0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d110      	bne.n	8005b80 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	015a      	lsls	r2, r3, #5
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	4413      	add	r3, r2
 8005b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	69ba      	ldr	r2, [r7, #24]
 8005b6e:	0151      	lsls	r1, r2, #5
 8005b70:	69fa      	ldr	r2, [r7, #28]
 8005b72:	440a      	add	r2, r1
 8005b74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b7c:	6013      	str	r3, [r2, #0]
 8005b7e:	e00f      	b.n	8005ba0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	0151      	lsls	r1, r2, #5
 8005b92:	69fa      	ldr	r2, [r7, #28]
 8005b94:	440a      	add	r2, r1
 8005b96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b9e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	0151      	lsls	r1, r2, #5
 8005bb2:	69fa      	ldr	r2, [r7, #28]
 8005bb4:	440a      	add	r2, r1
 8005bb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3720      	adds	r7, #32
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	1ff80000 	.word	0x1ff80000

08005bd0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	785b      	ldrb	r3, [r3, #1]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	f040 80ce 	bne.w	8005d8e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d132      	bne.n	8005c60 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	0151      	lsls	r1, r2, #5
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	440a      	add	r2, r1
 8005c10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	015a      	lsls	r2, r3, #5
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	4413      	add	r3, r2
 8005c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	0151      	lsls	r1, r2, #5
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	440a      	add	r2, r1
 8005c34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	0151      	lsls	r1, r2, #5
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	440a      	add	r2, r1
 8005c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c58:	0cdb      	lsrs	r3, r3, #19
 8005c5a:	04db      	lsls	r3, r3, #19
 8005c5c:	6113      	str	r3, [r2, #16]
 8005c5e:	e04e      	b.n	8005cfe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	0151      	lsls	r1, r2, #5
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	440a      	add	r2, r1
 8005c76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c7a:	0cdb      	lsrs	r3, r3, #19
 8005c7c:	04db      	lsls	r3, r3, #19
 8005c7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	0151      	lsls	r1, r2, #5
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	440a      	add	r2, r1
 8005c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c9a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c9e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ca2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	699a      	ldr	r2, [r3, #24]
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d903      	bls.n	8005cb8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	68da      	ldr	r2, [r3, #12]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	0151      	lsls	r1, r2, #5
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	440a      	add	r2, r1
 8005cce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce4:	691a      	ldr	r2, [r3, #16]
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cee:	6939      	ldr	r1, [r7, #16]
 8005cf0:	0148      	lsls	r0, r1, #5
 8005cf2:	6979      	ldr	r1, [r7, #20]
 8005cf4:	4401      	add	r1, r0
 8005cf6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005cfe:	79fb      	ldrb	r3, [r7, #7]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d11e      	bne.n	8005d42 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d009      	beq.n	8005d20 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d18:	461a      	mov	r2, r3
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	0151      	lsls	r1, r2, #5
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	440a      	add	r2, r1
 8005d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d3e:	6013      	str	r3, [r2, #0]
 8005d40:	e097      	b.n	8005e72 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	0151      	lsls	r1, r2, #5
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	440a      	add	r2, r1
 8005d58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d60:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f000 8083 	beq.w	8005e72 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	f003 030f 	and.w	r3, r3, #15
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d82:	6979      	ldr	r1, [r7, #20]
 8005d84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	634b      	str	r3, [r1, #52]	; 0x34
 8005d8c:	e071      	b.n	8005e72 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	0151      	lsls	r1, r2, #5
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	440a      	add	r2, r1
 8005da4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005da8:	0cdb      	lsrs	r3, r3, #19
 8005daa:	04db      	lsls	r3, r3, #19
 8005dac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	0151      	lsls	r1, r2, #5
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	440a      	add	r2, r1
 8005dc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dc8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005dcc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005dd0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d003      	beq.n	8005de2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	68da      	ldr	r2, [r3, #12]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	68da      	ldr	r2, [r3, #12]
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e16:	691a      	ldr	r2, [r3, #16]
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e20:	6939      	ldr	r1, [r7, #16]
 8005e22:	0148      	lsls	r0, r1, #5
 8005e24:	6979      	ldr	r1, [r7, #20]
 8005e26:	4401      	add	r1, r0
 8005e28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005e30:	79fb      	ldrb	r3, [r7, #7]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d10d      	bne.n	8005e52 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d009      	beq.n	8005e52 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	6919      	ldr	r1, [r3, #16]
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e4e:	460a      	mov	r2, r1
 8005e50:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	015a      	lsls	r2, r3, #5
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	4413      	add	r3, r2
 8005e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	0151      	lsls	r1, r2, #5
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	440a      	add	r2, r1
 8005e68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e70:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	371c      	adds	r7, #28
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	785b      	ldrb	r3, [r3, #1]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d14a      	bne.n	8005f34 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005eb6:	f040 8086 	bne.w	8005fc6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	7812      	ldrb	r2, [r2, #0]
 8005ece:	0151      	lsls	r1, r2, #5
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	440a      	add	r2, r1
 8005ed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ed8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005edc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	7812      	ldrb	r2, [r2, #0]
 8005ef2:	0151      	lsls	r1, r2, #5
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	440a      	add	r2, r1
 8005ef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005efc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f00:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	3301      	adds	r3, #1
 8005f06:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f242 7210 	movw	r2, #10000	; 0x2710
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d902      	bls.n	8005f18 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	75fb      	strb	r3, [r7, #23]
          break;
 8005f16:	e056      	b.n	8005fc6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	015a      	lsls	r2, r3, #5
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	4413      	add	r3, r2
 8005f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f30:	d0e7      	beq.n	8005f02 <USB_EPStopXfer+0x82>
 8005f32:	e048      	b.n	8005fc6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f4c:	d13b      	bne.n	8005fc6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	7812      	ldrb	r2, [r2, #0]
 8005f62:	0151      	lsls	r1, r2, #5
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	440a      	add	r2, r1
 8005f68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f70:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	7812      	ldrb	r2, [r2, #0]
 8005f86:	0151      	lsls	r1, r2, #5
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	440a      	add	r2, r1
 8005f8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f94:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d902      	bls.n	8005fac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	75fb      	strb	r3, [r7, #23]
          break;
 8005faa:	e00c      	b.n	8005fc6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	015a      	lsls	r2, r3, #5
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fc4:	d0e7      	beq.n	8005f96 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	371c      	adds	r7, #28
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b089      	sub	sp, #36	; 0x24
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	4611      	mov	r1, r2
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	71fb      	strb	r3, [r7, #7]
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005ff2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d123      	bne.n	8006042 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005ffa:	88bb      	ldrh	r3, [r7, #4]
 8005ffc:	3303      	adds	r3, #3
 8005ffe:	089b      	lsrs	r3, r3, #2
 8006000:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006002:	2300      	movs	r3, #0
 8006004:	61bb      	str	r3, [r7, #24]
 8006006:	e018      	b.n	800603a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006008:	79fb      	ldrb	r3, [r7, #7]
 800600a:	031a      	lsls	r2, r3, #12
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	4413      	add	r3, r2
 8006010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006014:	461a      	mov	r2, r3
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	3301      	adds	r3, #1
 8006020:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	3301      	adds	r3, #1
 8006026:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	3301      	adds	r3, #1
 800602c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	3301      	adds	r3, #1
 8006032:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	3301      	adds	r3, #1
 8006038:	61bb      	str	r3, [r7, #24]
 800603a:	69ba      	ldr	r2, [r7, #24]
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	429a      	cmp	r2, r3
 8006040:	d3e2      	bcc.n	8006008 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3724      	adds	r7, #36	; 0x24
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006050:	b480      	push	{r7}
 8006052:	b08b      	sub	sp, #44	; 0x2c
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	4613      	mov	r3, r2
 800605c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006066:	88fb      	ldrh	r3, [r7, #6]
 8006068:	089b      	lsrs	r3, r3, #2
 800606a:	b29b      	uxth	r3, r3
 800606c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800606e:	88fb      	ldrh	r3, [r7, #6]
 8006070:	f003 0303 	and.w	r3, r3, #3
 8006074:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006076:	2300      	movs	r3, #0
 8006078:	623b      	str	r3, [r7, #32]
 800607a:	e014      	b.n	80060a6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	601a      	str	r2, [r3, #0]
    pDest++;
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	3301      	adds	r3, #1
 800608c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800608e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006090:	3301      	adds	r3, #1
 8006092:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	3301      	adds	r3, #1
 8006098:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	3301      	adds	r3, #1
 800609e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80060a0:	6a3b      	ldr	r3, [r7, #32]
 80060a2:	3301      	adds	r3, #1
 80060a4:	623b      	str	r3, [r7, #32]
 80060a6:	6a3a      	ldr	r2, [r7, #32]
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d3e6      	bcc.n	800607c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80060ae:	8bfb      	ldrh	r3, [r7, #30]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d01e      	beq.n	80060f2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80060b4:	2300      	movs	r3, #0
 80060b6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060be:	461a      	mov	r2, r3
 80060c0:	f107 0310 	add.w	r3, r7, #16
 80060c4:	6812      	ldr	r2, [r2, #0]
 80060c6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	6a3b      	ldr	r3, [r7, #32]
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	00db      	lsls	r3, r3, #3
 80060d0:	fa22 f303 	lsr.w	r3, r2, r3
 80060d4:	b2da      	uxtb	r2, r3
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d8:	701a      	strb	r2, [r3, #0]
      i++;
 80060da:	6a3b      	ldr	r3, [r7, #32]
 80060dc:	3301      	adds	r3, #1
 80060de:	623b      	str	r3, [r7, #32]
      pDest++;
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	3301      	adds	r3, #1
 80060e4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80060e6:	8bfb      	ldrh	r3, [r7, #30]
 80060e8:	3b01      	subs	r3, #1
 80060ea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80060ec:	8bfb      	ldrh	r3, [r7, #30]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1ea      	bne.n	80060c8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	372c      	adds	r7, #44	; 0x2c
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	785b      	ldrb	r3, [r3, #1]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d12c      	bne.n	8006176 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	4413      	add	r3, r2
 8006124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	db12      	blt.n	8006154 <USB_EPSetStall+0x54>
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00f      	beq.n	8006154 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	0151      	lsls	r1, r2, #5
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	440a      	add	r2, r1
 800614a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800614e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006152:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	4413      	add	r3, r2
 800615c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	0151      	lsls	r1, r2, #5
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	440a      	add	r2, r1
 800616a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800616e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006172:	6013      	str	r3, [r2, #0]
 8006174:	e02b      	b.n	80061ce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	4413      	add	r3, r2
 800617e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	db12      	blt.n	80061ae <USB_EPSetStall+0xae>
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00f      	beq.n	80061ae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	4413      	add	r3, r2
 8006196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	0151      	lsls	r1, r2, #5
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	440a      	add	r2, r1
 80061a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061ac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	0151      	lsls	r1, r2, #5
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	440a      	add	r2, r1
 80061c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3714      	adds	r7, #20
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	785b      	ldrb	r3, [r3, #1]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d128      	bne.n	800624a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	015a      	lsls	r2, r3, #5
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	0151      	lsls	r1, r2, #5
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	440a      	add	r2, r1
 800620e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006212:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006216:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	791b      	ldrb	r3, [r3, #4]
 800621c:	2b03      	cmp	r3, #3
 800621e:	d003      	beq.n	8006228 <USB_EPClearStall+0x4c>
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	791b      	ldrb	r3, [r3, #4]
 8006224:	2b02      	cmp	r3, #2
 8006226:	d138      	bne.n	800629a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	4413      	add	r3, r2
 8006230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	0151      	lsls	r1, r2, #5
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	440a      	add	r2, r1
 800623e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006246:	6013      	str	r3, [r2, #0]
 8006248:	e027      	b.n	800629a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	015a      	lsls	r2, r3, #5
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	4413      	add	r3, r2
 8006252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	0151      	lsls	r1, r2, #5
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	440a      	add	r2, r1
 8006260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006264:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006268:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	791b      	ldrb	r3, [r3, #4]
 800626e:	2b03      	cmp	r3, #3
 8006270:	d003      	beq.n	800627a <USB_EPClearStall+0x9e>
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	791b      	ldrb	r3, [r3, #4]
 8006276:	2b02      	cmp	r3, #2
 8006278:	d10f      	bne.n	800629a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	015a      	lsls	r2, r3, #5
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	4413      	add	r3, r2
 8006282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68ba      	ldr	r2, [r7, #8]
 800628a:	0151      	lsls	r1, r2, #5
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	440a      	add	r2, r1
 8006290:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006298:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3714      	adds	r7, #20
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	460b      	mov	r3, r1
 80062b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062c6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80062ca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	78fb      	ldrb	r3, [r7, #3]
 80062d6:	011b      	lsls	r3, r3, #4
 80062d8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80062dc:	68f9      	ldr	r1, [r7, #12]
 80062de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062e2:	4313      	orrs	r3, r2
 80062e4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3714      	adds	r7, #20
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800630e:	f023 0303 	bic.w	r3, r3, #3
 8006312:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006322:	f023 0302 	bic.w	r3, r3, #2
 8006326:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006336:	b480      	push	{r7}
 8006338:	b085      	sub	sp, #20
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006350:	f023 0303 	bic.w	r3, r3, #3
 8006354:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006364:	f043 0302 	orr.w	r3, r3, #2
 8006368:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3714      	adds	r7, #20
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	4013      	ands	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006390:	68fb      	ldr	r3, [r7, #12]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3714      	adds	r7, #20
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800639e:	b480      	push	{r7}
 80063a0:	b085      	sub	sp, #20
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ba:	69db      	ldr	r3, [r3, #28]
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	4013      	ands	r3, r2
 80063c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	0c1b      	lsrs	r3, r3, #16
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b085      	sub	sp, #20
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ee:	69db      	ldr	r3, [r3, #28]
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	4013      	ands	r3, r2
 80063f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	b29b      	uxth	r3, r3
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3714      	adds	r7, #20
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006406:	b480      	push	{r7}
 8006408:	b085      	sub	sp, #20
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
 800640e:	460b      	mov	r3, r1
 8006410:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006416:	78fb      	ldrb	r3, [r7, #3]
 8006418:	015a      	lsls	r2, r3, #5
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	4413      	add	r3, r2
 800641e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	4013      	ands	r3, r2
 8006432:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006434:	68bb      	ldr	r3, [r7, #8]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3714      	adds	r7, #20
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006442:	b480      	push	{r7}
 8006444:	b087      	sub	sp, #28
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
 800644a:	460b      	mov	r3, r1
 800644c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006464:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006466:	78fb      	ldrb	r3, [r7, #3]
 8006468:	f003 030f 	and.w	r3, r3, #15
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	fa22 f303 	lsr.w	r3, r2, r3
 8006472:	01db      	lsls	r3, r3, #7
 8006474:	b2db      	uxtb	r3, r3
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	4313      	orrs	r3, r2
 800647a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800647c:	78fb      	ldrb	r3, [r7, #3]
 800647e:	015a      	lsls	r2, r3, #5
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	4413      	add	r3, r2
 8006484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	4013      	ands	r3, r2
 800648e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006490:	68bb      	ldr	r3, [r7, #8]
}
 8006492:	4618      	mov	r0, r3
 8006494:	371c      	adds	r7, #28
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800649e:	b480      	push	{r7}
 80064a0:	b083      	sub	sp, #12
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	f003 0301 	and.w	r3, r3, #1
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80064ba:	b480      	push	{r7}
 80064bc:	b085      	sub	sp, #20
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064d4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80064d8:	f023 0307 	bic.w	r3, r3, #7
 80064dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3714      	adds	r7, #20
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006500:	b480      	push	{r7}
 8006502:	b087      	sub	sp, #28
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	460b      	mov	r3, r1
 800650a:	607a      	str	r2, [r7, #4]
 800650c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	333c      	adds	r3, #60	; 0x3c
 8006516:	3304      	adds	r3, #4
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	4a26      	ldr	r2, [pc, #152]	; (80065b8 <USB_EP0_OutStart+0xb8>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d90a      	bls.n	800653a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006530:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006534:	d101      	bne.n	800653a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006536:	2300      	movs	r3, #0
 8006538:	e037      	b.n	80065aa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006540:	461a      	mov	r2, r3
 8006542:	2300      	movs	r3, #0
 8006544:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006554:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006558:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006568:	f043 0318 	orr.w	r3, r3, #24
 800656c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800657c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006580:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006582:	7afb      	ldrb	r3, [r7, #11]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d10f      	bne.n	80065a8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800658e:	461a      	mov	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065a2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80065a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	371c      	adds	r7, #28
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	4f54300a 	.word	0x4f54300a

080065bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	3301      	adds	r3, #1
 80065cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	4a13      	ldr	r2, [pc, #76]	; (8006620 <USB_CoreReset+0x64>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d901      	bls.n	80065da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e01b      	b.n	8006612 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	daf2      	bge.n	80065c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065e2:	2300      	movs	r3, #0
 80065e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	f043 0201 	orr.w	r2, r3, #1
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	3301      	adds	r3, #1
 80065f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	4a09      	ldr	r2, [pc, #36]	; (8006620 <USB_CoreReset+0x64>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d901      	bls.n	8006604 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e006      	b.n	8006612 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	2b01      	cmp	r3, #1
 800660e:	d0f0      	beq.n	80065f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	00030d40 	.word	0x00030d40

08006624 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	460b      	mov	r3, r1
 800662e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006630:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006634:	f002 fc8a 	bl	8008f4c <USBD_static_malloc>
 8006638:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d109      	bne.n	8006654 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	32b0      	adds	r2, #176	; 0xb0
 800664a:	2100      	movs	r1, #0
 800664c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006650:	2302      	movs	r3, #2
 8006652:	e0d4      	b.n	80067fe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006654:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006658:	2100      	movs	r1, #0
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f002 fd96 	bl	800918c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	32b0      	adds	r2, #176	; 0xb0
 800666a:	68f9      	ldr	r1, [r7, #12]
 800666c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	32b0      	adds	r2, #176	; 0xb0
 800667a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	7c1b      	ldrb	r3, [r3, #16]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d138      	bne.n	80066fe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800668c:	4b5e      	ldr	r3, [pc, #376]	; (8006808 <USBD_CDC_Init+0x1e4>)
 800668e:	7819      	ldrb	r1, [r3, #0]
 8006690:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006694:	2202      	movs	r2, #2
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f002 fb35 	bl	8008d06 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800669c:	4b5a      	ldr	r3, [pc, #360]	; (8006808 <USBD_CDC_Init+0x1e4>)
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	f003 020f 	and.w	r2, r3, #15
 80066a4:	6879      	ldr	r1, [r7, #4]
 80066a6:	4613      	mov	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4413      	add	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	440b      	add	r3, r1
 80066b0:	3324      	adds	r3, #36	; 0x24
 80066b2:	2201      	movs	r2, #1
 80066b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80066b6:	4b55      	ldr	r3, [pc, #340]	; (800680c <USBD_CDC_Init+0x1e8>)
 80066b8:	7819      	ldrb	r1, [r3, #0]
 80066ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066be:	2202      	movs	r2, #2
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f002 fb20 	bl	8008d06 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80066c6:	4b51      	ldr	r3, [pc, #324]	; (800680c <USBD_CDC_Init+0x1e8>)
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	f003 020f 	and.w	r2, r3, #15
 80066ce:	6879      	ldr	r1, [r7, #4]
 80066d0:	4613      	mov	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	440b      	add	r3, r1
 80066da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80066de:	2201      	movs	r2, #1
 80066e0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80066e2:	4b4b      	ldr	r3, [pc, #300]	; (8006810 <USBD_CDC_Init+0x1ec>)
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	f003 020f 	and.w	r2, r3, #15
 80066ea:	6879      	ldr	r1, [r7, #4]
 80066ec:	4613      	mov	r3, r2
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4413      	add	r3, r2
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	440b      	add	r3, r1
 80066f6:	3326      	adds	r3, #38	; 0x26
 80066f8:	2210      	movs	r2, #16
 80066fa:	801a      	strh	r2, [r3, #0]
 80066fc:	e035      	b.n	800676a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80066fe:	4b42      	ldr	r3, [pc, #264]	; (8006808 <USBD_CDC_Init+0x1e4>)
 8006700:	7819      	ldrb	r1, [r3, #0]
 8006702:	2340      	movs	r3, #64	; 0x40
 8006704:	2202      	movs	r2, #2
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f002 fafd 	bl	8008d06 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800670c:	4b3e      	ldr	r3, [pc, #248]	; (8006808 <USBD_CDC_Init+0x1e4>)
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	f003 020f 	and.w	r2, r3, #15
 8006714:	6879      	ldr	r1, [r7, #4]
 8006716:	4613      	mov	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	440b      	add	r3, r1
 8006720:	3324      	adds	r3, #36	; 0x24
 8006722:	2201      	movs	r2, #1
 8006724:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006726:	4b39      	ldr	r3, [pc, #228]	; (800680c <USBD_CDC_Init+0x1e8>)
 8006728:	7819      	ldrb	r1, [r3, #0]
 800672a:	2340      	movs	r3, #64	; 0x40
 800672c:	2202      	movs	r2, #2
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f002 fae9 	bl	8008d06 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006734:	4b35      	ldr	r3, [pc, #212]	; (800680c <USBD_CDC_Init+0x1e8>)
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	f003 020f 	and.w	r2, r3, #15
 800673c:	6879      	ldr	r1, [r7, #4]
 800673e:	4613      	mov	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	440b      	add	r3, r1
 8006748:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800674c:	2201      	movs	r2, #1
 800674e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006750:	4b2f      	ldr	r3, [pc, #188]	; (8006810 <USBD_CDC_Init+0x1ec>)
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	f003 020f 	and.w	r2, r3, #15
 8006758:	6879      	ldr	r1, [r7, #4]
 800675a:	4613      	mov	r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4413      	add	r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	440b      	add	r3, r1
 8006764:	3326      	adds	r3, #38	; 0x26
 8006766:	2210      	movs	r2, #16
 8006768:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800676a:	4b29      	ldr	r3, [pc, #164]	; (8006810 <USBD_CDC_Init+0x1ec>)
 800676c:	7819      	ldrb	r1, [r3, #0]
 800676e:	2308      	movs	r3, #8
 8006770:	2203      	movs	r2, #3
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f002 fac7 	bl	8008d06 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006778:	4b25      	ldr	r3, [pc, #148]	; (8006810 <USBD_CDC_Init+0x1ec>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	f003 020f 	and.w	r2, r3, #15
 8006780:	6879      	ldr	r1, [r7, #4]
 8006782:	4613      	mov	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	440b      	add	r3, r1
 800678c:	3324      	adds	r3, #36	; 0x24
 800678e:	2201      	movs	r2, #1
 8006790:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	33b0      	adds	r3, #176	; 0xb0
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d101      	bne.n	80067cc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80067c8:	2302      	movs	r3, #2
 80067ca:	e018      	b.n	80067fe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	7c1b      	ldrb	r3, [r3, #16]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10a      	bne.n	80067ea <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067d4:	4b0d      	ldr	r3, [pc, #52]	; (800680c <USBD_CDC_Init+0x1e8>)
 80067d6:	7819      	ldrb	r1, [r3, #0]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f002 fb7e 	bl	8008ee4 <USBD_LL_PrepareReceive>
 80067e8:	e008      	b.n	80067fc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067ea:	4b08      	ldr	r3, [pc, #32]	; (800680c <USBD_CDC_Init+0x1e8>)
 80067ec:	7819      	ldrb	r1, [r3, #0]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067f4:	2340      	movs	r3, #64	; 0x40
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f002 fb74 	bl	8008ee4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	20000093 	.word	0x20000093
 800680c:	20000094 	.word	0x20000094
 8006810:	20000095 	.word	0x20000095

08006814 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006820:	4b3a      	ldr	r3, [pc, #232]	; (800690c <USBD_CDC_DeInit+0xf8>)
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	4619      	mov	r1, r3
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f002 fa93 	bl	8008d52 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800682c:	4b37      	ldr	r3, [pc, #220]	; (800690c <USBD_CDC_DeInit+0xf8>)
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	f003 020f 	and.w	r2, r3, #15
 8006834:	6879      	ldr	r1, [r7, #4]
 8006836:	4613      	mov	r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4413      	add	r3, r2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	440b      	add	r3, r1
 8006840:	3324      	adds	r3, #36	; 0x24
 8006842:	2200      	movs	r2, #0
 8006844:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006846:	4b32      	ldr	r3, [pc, #200]	; (8006910 <USBD_CDC_DeInit+0xfc>)
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	4619      	mov	r1, r3
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f002 fa80 	bl	8008d52 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006852:	4b2f      	ldr	r3, [pc, #188]	; (8006910 <USBD_CDC_DeInit+0xfc>)
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	f003 020f 	and.w	r2, r3, #15
 800685a:	6879      	ldr	r1, [r7, #4]
 800685c:	4613      	mov	r3, r2
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	4413      	add	r3, r2
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	440b      	add	r3, r1
 8006866:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800686a:	2200      	movs	r2, #0
 800686c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800686e:	4b29      	ldr	r3, [pc, #164]	; (8006914 <USBD_CDC_DeInit+0x100>)
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	4619      	mov	r1, r3
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f002 fa6c 	bl	8008d52 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800687a:	4b26      	ldr	r3, [pc, #152]	; (8006914 <USBD_CDC_DeInit+0x100>)
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	f003 020f 	and.w	r2, r3, #15
 8006882:	6879      	ldr	r1, [r7, #4]
 8006884:	4613      	mov	r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	440b      	add	r3, r1
 800688e:	3324      	adds	r3, #36	; 0x24
 8006890:	2200      	movs	r2, #0
 8006892:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006894:	4b1f      	ldr	r3, [pc, #124]	; (8006914 <USBD_CDC_DeInit+0x100>)
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	f003 020f 	and.w	r2, r3, #15
 800689c:	6879      	ldr	r1, [r7, #4]
 800689e:	4613      	mov	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	440b      	add	r3, r1
 80068a8:	3326      	adds	r3, #38	; 0x26
 80068aa:	2200      	movs	r2, #0
 80068ac:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	32b0      	adds	r2, #176	; 0xb0
 80068b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d01f      	beq.n	8006900 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	33b0      	adds	r3, #176	; 0xb0
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	4413      	add	r3, r2
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	32b0      	adds	r2, #176	; 0xb0
 80068de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068e2:	4618      	mov	r0, r3
 80068e4:	f002 fb40 	bl	8008f68 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	32b0      	adds	r2, #176	; 0xb0
 80068f2:	2100      	movs	r1, #0
 80068f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	20000093 	.word	0x20000093
 8006910:	20000094 	.word	0x20000094
 8006914:	20000095 	.word	0x20000095

08006918 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b086      	sub	sp, #24
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	32b0      	adds	r2, #176	; 0xb0
 800692c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006930:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006932:	2300      	movs	r3, #0
 8006934:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006936:	2300      	movs	r3, #0
 8006938:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800693a:	2300      	movs	r3, #0
 800693c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d101      	bne.n	8006948 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006944:	2303      	movs	r3, #3
 8006946:	e0bf      	b.n	8006ac8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006950:	2b00      	cmp	r3, #0
 8006952:	d050      	beq.n	80069f6 <USBD_CDC_Setup+0xde>
 8006954:	2b20      	cmp	r3, #32
 8006956:	f040 80af 	bne.w	8006ab8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	88db      	ldrh	r3, [r3, #6]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d03a      	beq.n	80069d8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	b25b      	sxtb	r3, r3
 8006968:	2b00      	cmp	r3, #0
 800696a:	da1b      	bge.n	80069a4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	33b0      	adds	r3, #176	; 0xb0
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4413      	add	r3, r2
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006982:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006984:	683a      	ldr	r2, [r7, #0]
 8006986:	88d2      	ldrh	r2, [r2, #6]
 8006988:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	88db      	ldrh	r3, [r3, #6]
 800698e:	2b07      	cmp	r3, #7
 8006990:	bf28      	it	cs
 8006992:	2307      	movcs	r3, #7
 8006994:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	89fa      	ldrh	r2, [r7, #14]
 800699a:	4619      	mov	r1, r3
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f001 fd89 	bl	80084b4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80069a2:	e090      	b.n	8006ac6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	785a      	ldrb	r2, [r3, #1]
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	88db      	ldrh	r3, [r3, #6]
 80069b2:	2b3f      	cmp	r3, #63	; 0x3f
 80069b4:	d803      	bhi.n	80069be <USBD_CDC_Setup+0xa6>
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	88db      	ldrh	r3, [r3, #6]
 80069ba:	b2da      	uxtb	r2, r3
 80069bc:	e000      	b.n	80069c0 <USBD_CDC_Setup+0xa8>
 80069be:	2240      	movs	r2, #64	; 0x40
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80069c6:	6939      	ldr	r1, [r7, #16]
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80069ce:	461a      	mov	r2, r3
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f001 fd9b 	bl	800850c <USBD_CtlPrepareRx>
      break;
 80069d6:	e076      	b.n	8006ac6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	33b0      	adds	r3, #176	; 0xb0
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4413      	add	r3, r2
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	683a      	ldr	r2, [r7, #0]
 80069ec:	7850      	ldrb	r0, [r2, #1]
 80069ee:	2200      	movs	r2, #0
 80069f0:	6839      	ldr	r1, [r7, #0]
 80069f2:	4798      	blx	r3
      break;
 80069f4:	e067      	b.n	8006ac6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	785b      	ldrb	r3, [r3, #1]
 80069fa:	2b0b      	cmp	r3, #11
 80069fc:	d851      	bhi.n	8006aa2 <USBD_CDC_Setup+0x18a>
 80069fe:	a201      	add	r2, pc, #4	; (adr r2, 8006a04 <USBD_CDC_Setup+0xec>)
 8006a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a04:	08006a35 	.word	0x08006a35
 8006a08:	08006ab1 	.word	0x08006ab1
 8006a0c:	08006aa3 	.word	0x08006aa3
 8006a10:	08006aa3 	.word	0x08006aa3
 8006a14:	08006aa3 	.word	0x08006aa3
 8006a18:	08006aa3 	.word	0x08006aa3
 8006a1c:	08006aa3 	.word	0x08006aa3
 8006a20:	08006aa3 	.word	0x08006aa3
 8006a24:	08006aa3 	.word	0x08006aa3
 8006a28:	08006aa3 	.word	0x08006aa3
 8006a2c:	08006a5f 	.word	0x08006a5f
 8006a30:	08006a89 	.word	0x08006a89
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	2b03      	cmp	r3, #3
 8006a3e:	d107      	bne.n	8006a50 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006a40:	f107 030a 	add.w	r3, r7, #10
 8006a44:	2202      	movs	r2, #2
 8006a46:	4619      	mov	r1, r3
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f001 fd33 	bl	80084b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a4e:	e032      	b.n	8006ab6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a50:	6839      	ldr	r1, [r7, #0]
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f001 fcbd 	bl	80083d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	75fb      	strb	r3, [r7, #23]
          break;
 8006a5c:	e02b      	b.n	8006ab6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b03      	cmp	r3, #3
 8006a68:	d107      	bne.n	8006a7a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006a6a:	f107 030d 	add.w	r3, r7, #13
 8006a6e:	2201      	movs	r2, #1
 8006a70:	4619      	mov	r1, r3
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f001 fd1e 	bl	80084b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a78:	e01d      	b.n	8006ab6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a7a:	6839      	ldr	r1, [r7, #0]
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f001 fca8 	bl	80083d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a82:	2303      	movs	r3, #3
 8006a84:	75fb      	strb	r3, [r7, #23]
          break;
 8006a86:	e016      	b.n	8006ab6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b03      	cmp	r3, #3
 8006a92:	d00f      	beq.n	8006ab4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006a94:	6839      	ldr	r1, [r7, #0]
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f001 fc9b 	bl	80083d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006aa0:	e008      	b.n	8006ab4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006aa2:	6839      	ldr	r1, [r7, #0]
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f001 fc94 	bl	80083d2 <USBD_CtlError>
          ret = USBD_FAIL;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	75fb      	strb	r3, [r7, #23]
          break;
 8006aae:	e002      	b.n	8006ab6 <USBD_CDC_Setup+0x19e>
          break;
 8006ab0:	bf00      	nop
 8006ab2:	e008      	b.n	8006ac6 <USBD_CDC_Setup+0x1ae>
          break;
 8006ab4:	bf00      	nop
      }
      break;
 8006ab6:	e006      	b.n	8006ac6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006ab8:	6839      	ldr	r1, [r7, #0]
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f001 fc89 	bl	80083d2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ac4:	bf00      	nop
  }

  return (uint8_t)ret;
 8006ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3718      	adds	r7, #24
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	460b      	mov	r3, r1
 8006ada:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006ae2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	32b0      	adds	r2, #176	; 0xb0
 8006aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d101      	bne.n	8006afa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e065      	b.n	8006bc6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	32b0      	adds	r2, #176	; 0xb0
 8006b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b08:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006b0a:	78fb      	ldrb	r3, [r7, #3]
 8006b0c:	f003 020f 	and.w	r2, r3, #15
 8006b10:	6879      	ldr	r1, [r7, #4]
 8006b12:	4613      	mov	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4413      	add	r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	440b      	add	r3, r1
 8006b1c:	3318      	adds	r3, #24
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d02f      	beq.n	8006b84 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006b24:	78fb      	ldrb	r3, [r7, #3]
 8006b26:	f003 020f 	and.w	r2, r3, #15
 8006b2a:	6879      	ldr	r1, [r7, #4]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	440b      	add	r3, r1
 8006b36:	3318      	adds	r3, #24
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	78fb      	ldrb	r3, [r7, #3]
 8006b3c:	f003 010f 	and.w	r1, r3, #15
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	460b      	mov	r3, r1
 8006b44:	00db      	lsls	r3, r3, #3
 8006b46:	440b      	add	r3, r1
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4403      	add	r3, r0
 8006b4c:	3348      	adds	r3, #72	; 0x48
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b54:	fb01 f303 	mul.w	r3, r1, r3
 8006b58:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d112      	bne.n	8006b84 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006b5e:	78fb      	ldrb	r3, [r7, #3]
 8006b60:	f003 020f 	and.w	r2, r3, #15
 8006b64:	6879      	ldr	r1, [r7, #4]
 8006b66:	4613      	mov	r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4413      	add	r3, r2
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	440b      	add	r3, r1
 8006b70:	3318      	adds	r3, #24
 8006b72:	2200      	movs	r2, #0
 8006b74:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b76:	78f9      	ldrb	r1, [r7, #3]
 8006b78:	2300      	movs	r3, #0
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f002 f990 	bl	8008ea2 <USBD_LL_Transmit>
 8006b82:	e01f      	b.n	8006bc4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	33b0      	adds	r3, #176	; 0xb0
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	4413      	add	r3, r2
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d010      	beq.n	8006bc4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	33b0      	adds	r3, #176	; 0xb0
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006bc0:	78fa      	ldrb	r2, [r7, #3]
 8006bc2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b084      	sub	sp, #16
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	32b0      	adds	r2, #176	; 0xb0
 8006be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	32b0      	adds	r2, #176	; 0xb0
 8006bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d101      	bne.n	8006c00 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e01a      	b.n	8006c36 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006c00:	78fb      	ldrb	r3, [r7, #3]
 8006c02:	4619      	mov	r1, r3
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f002 f98e 	bl	8008f26 <USBD_LL_GetRxDataSize>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	33b0      	adds	r3, #176	; 0xb0
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006c30:	4611      	mov	r1, r2
 8006c32:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b084      	sub	sp, #16
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	32b0      	adds	r2, #176	; 0xb0
 8006c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c54:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e025      	b.n	8006cac <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	33b0      	adds	r3, #176	; 0xb0
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4413      	add	r3, r2
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d01a      	beq.n	8006caa <USBD_CDC_EP0_RxReady+0x6c>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c7a:	2bff      	cmp	r3, #255	; 0xff
 8006c7c:	d015      	beq.n	8006caa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	33b0      	adds	r3, #176	; 0xb0
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006c96:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c9e:	b292      	uxth	r2, r2
 8006ca0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	22ff      	movs	r2, #255	; 0xff
 8006ca6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b086      	sub	sp, #24
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006cbc:	2182      	movs	r1, #130	; 0x82
 8006cbe:	4818      	ldr	r0, [pc, #96]	; (8006d20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006cc0:	f000 fd4f 	bl	8007762 <USBD_GetEpDesc>
 8006cc4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006cc6:	2101      	movs	r1, #1
 8006cc8:	4815      	ldr	r0, [pc, #84]	; (8006d20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006cca:	f000 fd4a 	bl	8007762 <USBD_GetEpDesc>
 8006cce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006cd0:	2181      	movs	r1, #129	; 0x81
 8006cd2:	4813      	ldr	r0, [pc, #76]	; (8006d20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006cd4:	f000 fd45 	bl	8007762 <USBD_GetEpDesc>
 8006cd8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d002      	beq.n	8006ce6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	2210      	movs	r2, #16
 8006ce4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d006      	beq.n	8006cfa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cf4:	711a      	strb	r2, [r3, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d006      	beq.n	8006d0e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d08:	711a      	strb	r2, [r3, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2243      	movs	r2, #67	; 0x43
 8006d12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d14:	4b02      	ldr	r3, [pc, #8]	; (8006d20 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3718      	adds	r7, #24
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	20000050 	.word	0x20000050

08006d24 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b086      	sub	sp, #24
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d2c:	2182      	movs	r1, #130	; 0x82
 8006d2e:	4818      	ldr	r0, [pc, #96]	; (8006d90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d30:	f000 fd17 	bl	8007762 <USBD_GetEpDesc>
 8006d34:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d36:	2101      	movs	r1, #1
 8006d38:	4815      	ldr	r0, [pc, #84]	; (8006d90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d3a:	f000 fd12 	bl	8007762 <USBD_GetEpDesc>
 8006d3e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d40:	2181      	movs	r1, #129	; 0x81
 8006d42:	4813      	ldr	r0, [pc, #76]	; (8006d90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d44:	f000 fd0d 	bl	8007762 <USBD_GetEpDesc>
 8006d48:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d002      	beq.n	8006d56 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	2210      	movs	r2, #16
 8006d54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d006      	beq.n	8006d6a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	711a      	strb	r2, [r3, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f042 0202 	orr.w	r2, r2, #2
 8006d68:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d006      	beq.n	8006d7e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	711a      	strb	r2, [r3, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f042 0202 	orr.w	r2, r2, #2
 8006d7c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2243      	movs	r2, #67	; 0x43
 8006d82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d84:	4b02      	ldr	r3, [pc, #8]	; (8006d90 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3718      	adds	r7, #24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	20000050 	.word	0x20000050

08006d94 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b086      	sub	sp, #24
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d9c:	2182      	movs	r1, #130	; 0x82
 8006d9e:	4818      	ldr	r0, [pc, #96]	; (8006e00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006da0:	f000 fcdf 	bl	8007762 <USBD_GetEpDesc>
 8006da4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006da6:	2101      	movs	r1, #1
 8006da8:	4815      	ldr	r0, [pc, #84]	; (8006e00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006daa:	f000 fcda 	bl	8007762 <USBD_GetEpDesc>
 8006dae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006db0:	2181      	movs	r1, #129	; 0x81
 8006db2:	4813      	ldr	r0, [pc, #76]	; (8006e00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006db4:	f000 fcd5 	bl	8007762 <USBD_GetEpDesc>
 8006db8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d002      	beq.n	8006dc6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	2210      	movs	r2, #16
 8006dc4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d006      	beq.n	8006dda <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dd4:	711a      	strb	r2, [r3, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d006      	beq.n	8006dee <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006de8:	711a      	strb	r2, [r3, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2243      	movs	r2, #67	; 0x43
 8006df2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006df4:	4b02      	ldr	r3, [pc, #8]	; (8006e00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3718      	adds	r7, #24
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	20000050 	.word	0x20000050

08006e04 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	220a      	movs	r2, #10
 8006e10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006e12:	4b03      	ldr	r3, [pc, #12]	; (8006e20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr
 8006e20:	2000000c 	.word	0x2000000c

08006e24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d101      	bne.n	8006e38 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e009      	b.n	8006e4c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	33b0      	adds	r3, #176	; 0xb0
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4413      	add	r3, r2
 8006e46:	683a      	ldr	r2, [r7, #0]
 8006e48:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b087      	sub	sp, #28
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	32b0      	adds	r2, #176	; 0xb0
 8006e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e72:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e008      	b.n	8006e90 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	68ba      	ldr	r2, [r7, #8]
 8006e82:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	371c      	adds	r7, #28
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	32b0      	adds	r2, #176	; 0xb0
 8006eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eb4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d101      	bne.n	8006ec0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e004      	b.n	8006eca <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	683a      	ldr	r2, [r7, #0]
 8006ec4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3714      	adds	r7, #20
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
	...

08006ed8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	32b0      	adds	r2, #176	; 0xb0
 8006eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eee:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	32b0      	adds	r2, #176	; 0xb0
 8006efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d101      	bne.n	8006f0a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e025      	b.n	8006f56 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d11f      	bne.n	8006f54 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006f1c:	4b10      	ldr	r3, [pc, #64]	; (8006f60 <USBD_CDC_TransmitPacket+0x88>)
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	f003 020f 	and.w	r2, r3, #15
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4413      	add	r3, r2
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	4403      	add	r3, r0
 8006f36:	3318      	adds	r3, #24
 8006f38:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006f3a:	4b09      	ldr	r3, [pc, #36]	; (8006f60 <USBD_CDC_TransmitPacket+0x88>)
 8006f3c:	7819      	ldrb	r1, [r3, #0]
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f001 ffa9 	bl	8008ea2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006f50:	2300      	movs	r3, #0
 8006f52:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	20000093 	.word	0x20000093

08006f64 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	32b0      	adds	r2, #176	; 0xb0
 8006f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f7a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	32b0      	adds	r2, #176	; 0xb0
 8006f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e018      	b.n	8006fc4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	7c1b      	ldrb	r3, [r3, #16]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10a      	bne.n	8006fb0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f9a:	4b0c      	ldr	r3, [pc, #48]	; (8006fcc <USBD_CDC_ReceivePacket+0x68>)
 8006f9c:	7819      	ldrb	r1, [r3, #0]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f001 ff9b 	bl	8008ee4 <USBD_LL_PrepareReceive>
 8006fae:	e008      	b.n	8006fc2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006fb0:	4b06      	ldr	r3, [pc, #24]	; (8006fcc <USBD_CDC_ReceivePacket+0x68>)
 8006fb2:	7819      	ldrb	r1, [r3, #0]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fba:	2340      	movs	r3, #64	; 0x40
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f001 ff91 	bl	8008ee4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	20000094 	.word	0x20000094

08006fd0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d101      	bne.n	8006fe8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	e01f      	b.n	8007028 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d003      	beq.n	800700e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2201      	movs	r2, #1
 8007012:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	79fa      	ldrb	r2, [r7, #7]
 800701a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f001 fe0b 	bl	8008c38 <USBD_LL_Init>
 8007022:	4603      	mov	r3, r0
 8007024:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007026:	7dfb      	ldrb	r3, [r7, #23]
}
 8007028:	4618      	mov	r0, r3
 800702a:	3718      	adds	r7, #24
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800703a:	2300      	movs	r3, #0
 800703c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d101      	bne.n	8007048 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007044:	2303      	movs	r3, #3
 8007046:	e025      	b.n	8007094 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	32ae      	adds	r2, #174	; 0xae
 800705a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800705e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00f      	beq.n	8007084 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	32ae      	adds	r2, #174	; 0xae
 800706e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007074:	f107 020e 	add.w	r2, r7, #14
 8007078:	4610      	mov	r0, r2
 800707a:	4798      	blx	r3
 800707c:	4602      	mov	r2, r0
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800708a:	1c5a      	adds	r2, r3, #1
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f001 fe13 	bl	8008cd0 <USBD_LL_Start>
 80070aa:	4603      	mov	r3, r0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070bc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80070be:	4618      	mov	r0, r3
 80070c0:	370c      	adds	r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b084      	sub	sp, #16
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
 80070d2:	460b      	mov	r3, r1
 80070d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80070d6:	2300      	movs	r3, #0
 80070d8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d009      	beq.n	80070f8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	78fa      	ldrb	r2, [r7, #3]
 80070ee:	4611      	mov	r1, r2
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	4798      	blx	r3
 80070f4:	4603      	mov	r3, r0
 80070f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b084      	sub	sp, #16
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	460b      	mov	r3, r1
 800710c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800710e:	2300      	movs	r3, #0
 8007110:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	78fa      	ldrb	r2, [r7, #3]
 800711c:	4611      	mov	r1, r2
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	4798      	blx	r3
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d001      	beq.n	800712c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007128:	2303      	movs	r3, #3
 800712a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800712c:	7bfb      	ldrb	r3, [r7, #15]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b084      	sub	sp, #16
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
 800713e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007146:	6839      	ldr	r1, [r7, #0]
 8007148:	4618      	mov	r0, r3
 800714a:	f001 f908 	bl	800835e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2201      	movs	r2, #1
 8007152:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800715c:	461a      	mov	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800716a:	f003 031f 	and.w	r3, r3, #31
 800716e:	2b02      	cmp	r3, #2
 8007170:	d01a      	beq.n	80071a8 <USBD_LL_SetupStage+0x72>
 8007172:	2b02      	cmp	r3, #2
 8007174:	d822      	bhi.n	80071bc <USBD_LL_SetupStage+0x86>
 8007176:	2b00      	cmp	r3, #0
 8007178:	d002      	beq.n	8007180 <USBD_LL_SetupStage+0x4a>
 800717a:	2b01      	cmp	r3, #1
 800717c:	d00a      	beq.n	8007194 <USBD_LL_SetupStage+0x5e>
 800717e:	e01d      	b.n	80071bc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007186:	4619      	mov	r1, r3
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 fb5f 	bl	800784c <USBD_StdDevReq>
 800718e:	4603      	mov	r3, r0
 8007190:	73fb      	strb	r3, [r7, #15]
      break;
 8007192:	e020      	b.n	80071d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800719a:	4619      	mov	r1, r3
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 fbc7 	bl	8007930 <USBD_StdItfReq>
 80071a2:	4603      	mov	r3, r0
 80071a4:	73fb      	strb	r3, [r7, #15]
      break;
 80071a6:	e016      	b.n	80071d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071ae:	4619      	mov	r1, r3
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 fc29 	bl	8007a08 <USBD_StdEPReq>
 80071b6:	4603      	mov	r3, r0
 80071b8:	73fb      	strb	r3, [r7, #15]
      break;
 80071ba:	e00c      	b.n	80071d6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80071c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	4619      	mov	r1, r3
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f001 fde0 	bl	8008d90 <USBD_LL_StallEP>
 80071d0:	4603      	mov	r3, r0
 80071d2:	73fb      	strb	r3, [r7, #15]
      break;
 80071d4:	bf00      	nop
  }

  return ret;
 80071d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3710      	adds	r7, #16
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b086      	sub	sp, #24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	460b      	mov	r3, r1
 80071ea:	607a      	str	r2, [r7, #4]
 80071ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80071f2:	7afb      	ldrb	r3, [r7, #11]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d16e      	bne.n	80072d6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80071fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007206:	2b03      	cmp	r3, #3
 8007208:	f040 8098 	bne.w	800733c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	689a      	ldr	r2, [r3, #8]
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	429a      	cmp	r2, r3
 8007216:	d913      	bls.n	8007240 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	689a      	ldr	r2, [r3, #8]
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	1ad2      	subs	r2, r2, r3
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	68da      	ldr	r2, [r3, #12]
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	4293      	cmp	r3, r2
 8007230:	bf28      	it	cs
 8007232:	4613      	movcs	r3, r2
 8007234:	461a      	mov	r2, r3
 8007236:	6879      	ldr	r1, [r7, #4]
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f001 f984 	bl	8008546 <USBD_CtlContinueRx>
 800723e:	e07d      	b.n	800733c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007246:	f003 031f 	and.w	r3, r3, #31
 800724a:	2b02      	cmp	r3, #2
 800724c:	d014      	beq.n	8007278 <USBD_LL_DataOutStage+0x98>
 800724e:	2b02      	cmp	r3, #2
 8007250:	d81d      	bhi.n	800728e <USBD_LL_DataOutStage+0xae>
 8007252:	2b00      	cmp	r3, #0
 8007254:	d002      	beq.n	800725c <USBD_LL_DataOutStage+0x7c>
 8007256:	2b01      	cmp	r3, #1
 8007258:	d003      	beq.n	8007262 <USBD_LL_DataOutStage+0x82>
 800725a:	e018      	b.n	800728e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	75bb      	strb	r3, [r7, #22]
            break;
 8007260:	e018      	b.n	8007294 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007268:	b2db      	uxtb	r3, r3
 800726a:	4619      	mov	r1, r3
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f000 fa5e 	bl	800772e <USBD_CoreFindIF>
 8007272:	4603      	mov	r3, r0
 8007274:	75bb      	strb	r3, [r7, #22]
            break;
 8007276:	e00d      	b.n	8007294 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800727e:	b2db      	uxtb	r3, r3
 8007280:	4619      	mov	r1, r3
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	f000 fa60 	bl	8007748 <USBD_CoreFindEP>
 8007288:	4603      	mov	r3, r0
 800728a:	75bb      	strb	r3, [r7, #22]
            break;
 800728c:	e002      	b.n	8007294 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800728e:	2300      	movs	r3, #0
 8007290:	75bb      	strb	r3, [r7, #22]
            break;
 8007292:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007294:	7dbb      	ldrb	r3, [r7, #22]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d119      	bne.n	80072ce <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b03      	cmp	r3, #3
 80072a4:	d113      	bne.n	80072ce <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80072a6:	7dba      	ldrb	r2, [r7, #22]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	32ae      	adds	r2, #174	; 0xae
 80072ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00b      	beq.n	80072ce <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80072b6:	7dba      	ldrb	r2, [r7, #22]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80072be:	7dba      	ldrb	r2, [r7, #22]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	32ae      	adds	r2, #174	; 0xae
 80072c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f001 f94a 	bl	8008568 <USBD_CtlSendStatus>
 80072d4:	e032      	b.n	800733c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80072d6:	7afb      	ldrb	r3, [r7, #11]
 80072d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	4619      	mov	r1, r3
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f000 fa31 	bl	8007748 <USBD_CoreFindEP>
 80072e6:	4603      	mov	r3, r0
 80072e8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072ea:	7dbb      	ldrb	r3, [r7, #22]
 80072ec:	2bff      	cmp	r3, #255	; 0xff
 80072ee:	d025      	beq.n	800733c <USBD_LL_DataOutStage+0x15c>
 80072f0:	7dbb      	ldrb	r3, [r7, #22]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d122      	bne.n	800733c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	2b03      	cmp	r3, #3
 8007300:	d117      	bne.n	8007332 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007302:	7dba      	ldrb	r2, [r7, #22]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	32ae      	adds	r2, #174	; 0xae
 8007308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00f      	beq.n	8007332 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007312:	7dba      	ldrb	r2, [r7, #22]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800731a:	7dba      	ldrb	r2, [r7, #22]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	32ae      	adds	r2, #174	; 0xae
 8007320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	7afa      	ldrb	r2, [r7, #11]
 8007328:	4611      	mov	r1, r2
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	4798      	blx	r3
 800732e:	4603      	mov	r3, r0
 8007330:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007332:	7dfb      	ldrb	r3, [r7, #23]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d001      	beq.n	800733c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007338:	7dfb      	ldrb	r3, [r7, #23]
 800733a:	e000      	b.n	800733e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3718      	adds	r7, #24
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b086      	sub	sp, #24
 800734a:	af00      	add	r7, sp, #0
 800734c:	60f8      	str	r0, [r7, #12]
 800734e:	460b      	mov	r3, r1
 8007350:	607a      	str	r2, [r7, #4]
 8007352:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007354:	7afb      	ldrb	r3, [r7, #11]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d16f      	bne.n	800743a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	3314      	adds	r3, #20
 800735e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007366:	2b02      	cmp	r3, #2
 8007368:	d15a      	bne.n	8007420 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	689a      	ldr	r2, [r3, #8]
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	429a      	cmp	r2, r3
 8007374:	d914      	bls.n	80073a0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	689a      	ldr	r2, [r3, #8]
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	1ad2      	subs	r2, r2, r3
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	461a      	mov	r2, r3
 800738a:	6879      	ldr	r1, [r7, #4]
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f001 f8ac 	bl	80084ea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007392:	2300      	movs	r3, #0
 8007394:	2200      	movs	r2, #0
 8007396:	2100      	movs	r1, #0
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f001 fda3 	bl	8008ee4 <USBD_LL_PrepareReceive>
 800739e:	e03f      	b.n	8007420 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	68da      	ldr	r2, [r3, #12]
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d11c      	bne.n	80073e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	685a      	ldr	r2, [r3, #4]
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d316      	bcc.n	80073e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	685a      	ldr	r2, [r3, #4]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d20f      	bcs.n	80073e6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80073c6:	2200      	movs	r2, #0
 80073c8:	2100      	movs	r1, #0
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f001 f88d 	bl	80084ea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073d8:	2300      	movs	r3, #0
 80073da:	2200      	movs	r2, #0
 80073dc:	2100      	movs	r1, #0
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f001 fd80 	bl	8008ee4 <USBD_LL_PrepareReceive>
 80073e4:	e01c      	b.n	8007420 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b03      	cmp	r3, #3
 80073f0:	d10f      	bne.n	8007412 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d009      	beq.n	8007412 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007412:	2180      	movs	r1, #128	; 0x80
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f001 fcbb 	bl	8008d90 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f001 f8b7 	bl	800858e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d03a      	beq.n	80074a0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f7ff fe42 	bl	80070b4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007438:	e032      	b.n	80074a0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800743a:	7afb      	ldrb	r3, [r7, #11]
 800743c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007440:	b2db      	uxtb	r3, r3
 8007442:	4619      	mov	r1, r3
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f000 f97f 	bl	8007748 <USBD_CoreFindEP>
 800744a:	4603      	mov	r3, r0
 800744c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800744e:	7dfb      	ldrb	r3, [r7, #23]
 8007450:	2bff      	cmp	r3, #255	; 0xff
 8007452:	d025      	beq.n	80074a0 <USBD_LL_DataInStage+0x15a>
 8007454:	7dfb      	ldrb	r3, [r7, #23]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d122      	bne.n	80074a0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b03      	cmp	r3, #3
 8007464:	d11c      	bne.n	80074a0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007466:	7dfa      	ldrb	r2, [r7, #23]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	32ae      	adds	r2, #174	; 0xae
 800746c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007470:	695b      	ldr	r3, [r3, #20]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d014      	beq.n	80074a0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007476:	7dfa      	ldrb	r2, [r7, #23]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800747e:	7dfa      	ldrb	r2, [r7, #23]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	32ae      	adds	r2, #174	; 0xae
 8007484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	7afa      	ldrb	r2, [r7, #11]
 800748c:	4611      	mov	r1, r2
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	4798      	blx	r3
 8007492:	4603      	mov	r3, r0
 8007494:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007496:	7dbb      	ldrb	r3, [r7, #22]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d001      	beq.n	80074a0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800749c:	7dbb      	ldrb	r3, [r7, #22]
 800749e:	e000      	b.n	80074a2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3718      	adds	r7, #24
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b084      	sub	sp, #16
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d014      	beq.n	8007510 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00e      	beq.n	8007510 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	6852      	ldr	r2, [r2, #4]
 80074fe:	b2d2      	uxtb	r2, r2
 8007500:	4611      	mov	r1, r2
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	4798      	blx	r3
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d001      	beq.n	8007510 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800750c:	2303      	movs	r3, #3
 800750e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007510:	2340      	movs	r3, #64	; 0x40
 8007512:	2200      	movs	r2, #0
 8007514:	2100      	movs	r1, #0
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f001 fbf5 	bl	8008d06 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2240      	movs	r2, #64	; 0x40
 8007528:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800752c:	2340      	movs	r3, #64	; 0x40
 800752e:	2200      	movs	r2, #0
 8007530:	2180      	movs	r1, #128	; 0x80
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f001 fbe7 	bl	8008d06 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2240      	movs	r2, #64	; 0x40
 8007542:	621a      	str	r2, [r3, #32]

  return ret;
 8007544:	7bfb      	ldrb	r3, [r7, #15]
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800754e:	b480      	push	{r7}
 8007550:	b083      	sub	sp, #12
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	460b      	mov	r3, r1
 8007558:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	78fa      	ldrb	r2, [r7, #3]
 800755e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	370c      	adds	r7, #12
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr

0800756e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800756e:	b480      	push	{r7}
 8007570:	b083      	sub	sp, #12
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800757c:	b2da      	uxtb	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2204      	movs	r2, #4
 8007588:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	370c      	adds	r7, #12
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800759a:	b480      	push	{r7}
 800759c:	b083      	sub	sp, #12
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b04      	cmp	r3, #4
 80075ac:	d106      	bne.n	80075bc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80075b4:	b2da      	uxtb	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	370c      	adds	r7, #12
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr

080075ca <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b082      	sub	sp, #8
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b03      	cmp	r3, #3
 80075dc:	d110      	bne.n	8007600 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00b      	beq.n	8007600 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ee:	69db      	ldr	r3, [r3, #28]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d005      	beq.n	8007600 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075fa:	69db      	ldr	r3, [r3, #28]
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3708      	adds	r7, #8
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b082      	sub	sp, #8
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
 8007612:	460b      	mov	r3, r1
 8007614:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	32ae      	adds	r2, #174	; 0xae
 8007620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d101      	bne.n	800762c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007628:	2303      	movs	r3, #3
 800762a:	e01c      	b.n	8007666 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007632:	b2db      	uxtb	r3, r3
 8007634:	2b03      	cmp	r3, #3
 8007636:	d115      	bne.n	8007664 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	32ae      	adds	r2, #174	; 0xae
 8007642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007646:	6a1b      	ldr	r3, [r3, #32]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00b      	beq.n	8007664 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	32ae      	adds	r2, #174	; 0xae
 8007656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800765a:	6a1b      	ldr	r3, [r3, #32]
 800765c:	78fa      	ldrb	r2, [r7, #3]
 800765e:	4611      	mov	r1, r2
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3708      	adds	r7, #8
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b082      	sub	sp, #8
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
 8007676:	460b      	mov	r3, r1
 8007678:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	32ae      	adds	r2, #174	; 0xae
 8007684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d101      	bne.n	8007690 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800768c:	2303      	movs	r3, #3
 800768e:	e01c      	b.n	80076ca <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007696:	b2db      	uxtb	r3, r3
 8007698:	2b03      	cmp	r3, #3
 800769a:	d115      	bne.n	80076c8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	32ae      	adds	r2, #174	; 0xae
 80076a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00b      	beq.n	80076c8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	32ae      	adds	r2, #174	; 0xae
 80076ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c0:	78fa      	ldrb	r2, [r7, #3]
 80076c2:	4611      	mov	r1, r2
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3708      	adds	r7, #8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80076d2:	b480      	push	{r7}
 80076d4:	b083      	sub	sp, #12
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80076f0:	2300      	movs	r3, #0
 80076f2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00e      	beq.n	8007724 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	6852      	ldr	r2, [r2, #4]
 8007712:	b2d2      	uxtb	r2, r2
 8007714:	4611      	mov	r1, r2
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	4798      	blx	r3
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d001      	beq.n	8007724 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007720:	2303      	movs	r3, #3
 8007722:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007724:	7bfb      	ldrb	r3, [r7, #15]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800772e:	b480      	push	{r7}
 8007730:	b083      	sub	sp, #12
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
 8007736:	460b      	mov	r3, r1
 8007738:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800773a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800773c:	4618      	mov	r0, r3
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	460b      	mov	r3, r1
 8007752:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007754:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007756:	4618      	mov	r0, r3
 8007758:	370c      	adds	r7, #12
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr

08007762 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b086      	sub	sp, #24
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
 800776a:	460b      	mov	r3, r1
 800776c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007776:	2300      	movs	r3, #0
 8007778:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	885b      	ldrh	r3, [r3, #2]
 800777e:	b29a      	uxth	r2, r3
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	b29b      	uxth	r3, r3
 8007786:	429a      	cmp	r2, r3
 8007788:	d920      	bls.n	80077cc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	b29b      	uxth	r3, r3
 8007790:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007792:	e013      	b.n	80077bc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007794:	f107 030a 	add.w	r3, r7, #10
 8007798:	4619      	mov	r1, r3
 800779a:	6978      	ldr	r0, [r7, #20]
 800779c:	f000 f81b 	bl	80077d6 <USBD_GetNextDesc>
 80077a0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	785b      	ldrb	r3, [r3, #1]
 80077a6:	2b05      	cmp	r3, #5
 80077a8:	d108      	bne.n	80077bc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	789b      	ldrb	r3, [r3, #2]
 80077b2:	78fa      	ldrb	r2, [r7, #3]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d008      	beq.n	80077ca <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80077b8:	2300      	movs	r3, #0
 80077ba:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	885b      	ldrh	r3, [r3, #2]
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	897b      	ldrh	r3, [r7, #10]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d8e5      	bhi.n	8007794 <USBD_GetEpDesc+0x32>
 80077c8:	e000      	b.n	80077cc <USBD_GetEpDesc+0x6a>
          break;
 80077ca:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80077cc:	693b      	ldr	r3, [r7, #16]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3718      	adds	r7, #24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80077d6:	b480      	push	{r7}
 80077d8:	b085      	sub	sp, #20
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
 80077de:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	881a      	ldrh	r2, [r3, #0]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	4413      	add	r3, r2
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	461a      	mov	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4413      	add	r3, r2
 8007800:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007802:	68fb      	ldr	r3, [r7, #12]
}
 8007804:	4618      	mov	r0, r3
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007810:	b480      	push	{r7}
 8007812:	b087      	sub	sp, #28
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	3301      	adds	r3, #1
 8007826:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800782e:	8a3b      	ldrh	r3, [r7, #16]
 8007830:	021b      	lsls	r3, r3, #8
 8007832:	b21a      	sxth	r2, r3
 8007834:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007838:	4313      	orrs	r3, r2
 800783a:	b21b      	sxth	r3, r3
 800783c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800783e:	89fb      	ldrh	r3, [r7, #14]
}
 8007840:	4618      	mov	r0, r3
 8007842:	371c      	adds	r7, #28
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007856:	2300      	movs	r3, #0
 8007858:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007862:	2b40      	cmp	r3, #64	; 0x40
 8007864:	d005      	beq.n	8007872 <USBD_StdDevReq+0x26>
 8007866:	2b40      	cmp	r3, #64	; 0x40
 8007868:	d857      	bhi.n	800791a <USBD_StdDevReq+0xce>
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00f      	beq.n	800788e <USBD_StdDevReq+0x42>
 800786e:	2b20      	cmp	r3, #32
 8007870:	d153      	bne.n	800791a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	32ae      	adds	r2, #174	; 0xae
 800787c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	6839      	ldr	r1, [r7, #0]
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	4798      	blx	r3
 8007888:	4603      	mov	r3, r0
 800788a:	73fb      	strb	r3, [r7, #15]
      break;
 800788c:	e04a      	b.n	8007924 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	785b      	ldrb	r3, [r3, #1]
 8007892:	2b09      	cmp	r3, #9
 8007894:	d83b      	bhi.n	800790e <USBD_StdDevReq+0xc2>
 8007896:	a201      	add	r2, pc, #4	; (adr r2, 800789c <USBD_StdDevReq+0x50>)
 8007898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800789c:	080078f1 	.word	0x080078f1
 80078a0:	08007905 	.word	0x08007905
 80078a4:	0800790f 	.word	0x0800790f
 80078a8:	080078fb 	.word	0x080078fb
 80078ac:	0800790f 	.word	0x0800790f
 80078b0:	080078cf 	.word	0x080078cf
 80078b4:	080078c5 	.word	0x080078c5
 80078b8:	0800790f 	.word	0x0800790f
 80078bc:	080078e7 	.word	0x080078e7
 80078c0:	080078d9 	.word	0x080078d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fa3c 	bl	8007d44 <USBD_GetDescriptor>
          break;
 80078cc:	e024      	b.n	8007918 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fba1 	bl	8008018 <USBD_SetAddress>
          break;
 80078d6:	e01f      	b.n	8007918 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80078d8:	6839      	ldr	r1, [r7, #0]
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fbe0 	bl	80080a0 <USBD_SetConfig>
 80078e0:	4603      	mov	r3, r0
 80078e2:	73fb      	strb	r3, [r7, #15]
          break;
 80078e4:	e018      	b.n	8007918 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80078e6:	6839      	ldr	r1, [r7, #0]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 fc83 	bl	80081f4 <USBD_GetConfig>
          break;
 80078ee:	e013      	b.n	8007918 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fcb4 	bl	8008260 <USBD_GetStatus>
          break;
 80078f8:	e00e      	b.n	8007918 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fce3 	bl	80082c8 <USBD_SetFeature>
          break;
 8007902:	e009      	b.n	8007918 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007904:	6839      	ldr	r1, [r7, #0]
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fd07 	bl	800831a <USBD_ClrFeature>
          break;
 800790c:	e004      	b.n	8007918 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800790e:	6839      	ldr	r1, [r7, #0]
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fd5e 	bl	80083d2 <USBD_CtlError>
          break;
 8007916:	bf00      	nop
      }
      break;
 8007918:	e004      	b.n	8007924 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800791a:	6839      	ldr	r1, [r7, #0]
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fd58 	bl	80083d2 <USBD_CtlError>
      break;
 8007922:	bf00      	nop
  }

  return ret;
 8007924:	7bfb      	ldrb	r3, [r7, #15]
}
 8007926:	4618      	mov	r0, r3
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop

08007930 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800793a:	2300      	movs	r3, #0
 800793c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007946:	2b40      	cmp	r3, #64	; 0x40
 8007948:	d005      	beq.n	8007956 <USBD_StdItfReq+0x26>
 800794a:	2b40      	cmp	r3, #64	; 0x40
 800794c:	d852      	bhi.n	80079f4 <USBD_StdItfReq+0xc4>
 800794e:	2b00      	cmp	r3, #0
 8007950:	d001      	beq.n	8007956 <USBD_StdItfReq+0x26>
 8007952:	2b20      	cmp	r3, #32
 8007954:	d14e      	bne.n	80079f4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800795c:	b2db      	uxtb	r3, r3
 800795e:	3b01      	subs	r3, #1
 8007960:	2b02      	cmp	r3, #2
 8007962:	d840      	bhi.n	80079e6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	889b      	ldrh	r3, [r3, #4]
 8007968:	b2db      	uxtb	r3, r3
 800796a:	2b01      	cmp	r3, #1
 800796c:	d836      	bhi.n	80079dc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	889b      	ldrh	r3, [r3, #4]
 8007972:	b2db      	uxtb	r3, r3
 8007974:	4619      	mov	r1, r3
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f7ff fed9 	bl	800772e <USBD_CoreFindIF>
 800797c:	4603      	mov	r3, r0
 800797e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007980:	7bbb      	ldrb	r3, [r7, #14]
 8007982:	2bff      	cmp	r3, #255	; 0xff
 8007984:	d01d      	beq.n	80079c2 <USBD_StdItfReq+0x92>
 8007986:	7bbb      	ldrb	r3, [r7, #14]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d11a      	bne.n	80079c2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800798c:	7bba      	ldrb	r2, [r7, #14]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	32ae      	adds	r2, #174	; 0xae
 8007992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00f      	beq.n	80079bc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800799c:	7bba      	ldrb	r2, [r7, #14]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80079a4:	7bba      	ldrb	r2, [r7, #14]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	32ae      	adds	r2, #174	; 0xae
 80079aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	4798      	blx	r3
 80079b6:	4603      	mov	r3, r0
 80079b8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80079ba:	e004      	b.n	80079c6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80079bc:	2303      	movs	r3, #3
 80079be:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80079c0:	e001      	b.n	80079c6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80079c2:	2303      	movs	r3, #3
 80079c4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	88db      	ldrh	r3, [r3, #6]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d110      	bne.n	80079f0 <USBD_StdItfReq+0xc0>
 80079ce:	7bfb      	ldrb	r3, [r7, #15]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d10d      	bne.n	80079f0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 fdc7 	bl	8008568 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80079da:	e009      	b.n	80079f0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 fcf7 	bl	80083d2 <USBD_CtlError>
          break;
 80079e4:	e004      	b.n	80079f0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80079e6:	6839      	ldr	r1, [r7, #0]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fcf2 	bl	80083d2 <USBD_CtlError>
          break;
 80079ee:	e000      	b.n	80079f2 <USBD_StdItfReq+0xc2>
          break;
 80079f0:	bf00      	nop
      }
      break;
 80079f2:	e004      	b.n	80079fe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80079f4:	6839      	ldr	r1, [r7, #0]
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fceb 	bl	80083d2 <USBD_CtlError>
      break;
 80079fc:	bf00      	nop
  }

  return ret;
 80079fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3710      	adds	r7, #16
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a12:	2300      	movs	r3, #0
 8007a14:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	889b      	ldrh	r3, [r3, #4]
 8007a1a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a24:	2b40      	cmp	r3, #64	; 0x40
 8007a26:	d007      	beq.n	8007a38 <USBD_StdEPReq+0x30>
 8007a28:	2b40      	cmp	r3, #64	; 0x40
 8007a2a:	f200 817f 	bhi.w	8007d2c <USBD_StdEPReq+0x324>
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d02a      	beq.n	8007a88 <USBD_StdEPReq+0x80>
 8007a32:	2b20      	cmp	r3, #32
 8007a34:	f040 817a 	bne.w	8007d2c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007a38:	7bbb      	ldrb	r3, [r7, #14]
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f7ff fe83 	bl	8007748 <USBD_CoreFindEP>
 8007a42:	4603      	mov	r3, r0
 8007a44:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a46:	7b7b      	ldrb	r3, [r7, #13]
 8007a48:	2bff      	cmp	r3, #255	; 0xff
 8007a4a:	f000 8174 	beq.w	8007d36 <USBD_StdEPReq+0x32e>
 8007a4e:	7b7b      	ldrb	r3, [r7, #13]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f040 8170 	bne.w	8007d36 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007a56:	7b7a      	ldrb	r2, [r7, #13]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007a5e:	7b7a      	ldrb	r2, [r7, #13]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	32ae      	adds	r2, #174	; 0xae
 8007a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f000 8163 	beq.w	8007d36 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007a70:	7b7a      	ldrb	r2, [r7, #13]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	32ae      	adds	r2, #174	; 0xae
 8007a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	6839      	ldr	r1, [r7, #0]
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	4798      	blx	r3
 8007a82:	4603      	mov	r3, r0
 8007a84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a86:	e156      	b.n	8007d36 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	785b      	ldrb	r3, [r3, #1]
 8007a8c:	2b03      	cmp	r3, #3
 8007a8e:	d008      	beq.n	8007aa2 <USBD_StdEPReq+0x9a>
 8007a90:	2b03      	cmp	r3, #3
 8007a92:	f300 8145 	bgt.w	8007d20 <USBD_StdEPReq+0x318>
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f000 809b 	beq.w	8007bd2 <USBD_StdEPReq+0x1ca>
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d03c      	beq.n	8007b1a <USBD_StdEPReq+0x112>
 8007aa0:	e13e      	b.n	8007d20 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d002      	beq.n	8007ab4 <USBD_StdEPReq+0xac>
 8007aae:	2b03      	cmp	r3, #3
 8007ab0:	d016      	beq.n	8007ae0 <USBD_StdEPReq+0xd8>
 8007ab2:	e02c      	b.n	8007b0e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ab4:	7bbb      	ldrb	r3, [r7, #14]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00d      	beq.n	8007ad6 <USBD_StdEPReq+0xce>
 8007aba:	7bbb      	ldrb	r3, [r7, #14]
 8007abc:	2b80      	cmp	r3, #128	; 0x80
 8007abe:	d00a      	beq.n	8007ad6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ac0:	7bbb      	ldrb	r3, [r7, #14]
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f001 f963 	bl	8008d90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007aca:	2180      	movs	r1, #128	; 0x80
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f001 f95f 	bl	8008d90 <USBD_LL_StallEP>
 8007ad2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ad4:	e020      	b.n	8007b18 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007ad6:	6839      	ldr	r1, [r7, #0]
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 fc7a 	bl	80083d2 <USBD_CtlError>
              break;
 8007ade:	e01b      	b.n	8007b18 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	885b      	ldrh	r3, [r3, #2]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10e      	bne.n	8007b06 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ae8:	7bbb      	ldrb	r3, [r7, #14]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00b      	beq.n	8007b06 <USBD_StdEPReq+0xfe>
 8007aee:	7bbb      	ldrb	r3, [r7, #14]
 8007af0:	2b80      	cmp	r3, #128	; 0x80
 8007af2:	d008      	beq.n	8007b06 <USBD_StdEPReq+0xfe>
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	88db      	ldrh	r3, [r3, #6]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d104      	bne.n	8007b06 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007afc:	7bbb      	ldrb	r3, [r7, #14]
 8007afe:	4619      	mov	r1, r3
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f001 f945 	bl	8008d90 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fd2e 	bl	8008568 <USBD_CtlSendStatus>

              break;
 8007b0c:	e004      	b.n	8007b18 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007b0e:	6839      	ldr	r1, [r7, #0]
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 fc5e 	bl	80083d2 <USBD_CtlError>
              break;
 8007b16:	bf00      	nop
          }
          break;
 8007b18:	e107      	b.n	8007d2a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d002      	beq.n	8007b2c <USBD_StdEPReq+0x124>
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d016      	beq.n	8007b58 <USBD_StdEPReq+0x150>
 8007b2a:	e04b      	b.n	8007bc4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b2c:	7bbb      	ldrb	r3, [r7, #14]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00d      	beq.n	8007b4e <USBD_StdEPReq+0x146>
 8007b32:	7bbb      	ldrb	r3, [r7, #14]
 8007b34:	2b80      	cmp	r3, #128	; 0x80
 8007b36:	d00a      	beq.n	8007b4e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b38:	7bbb      	ldrb	r3, [r7, #14]
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f001 f927 	bl	8008d90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b42:	2180      	movs	r1, #128	; 0x80
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f001 f923 	bl	8008d90 <USBD_LL_StallEP>
 8007b4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b4c:	e040      	b.n	8007bd0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007b4e:	6839      	ldr	r1, [r7, #0]
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 fc3e 	bl	80083d2 <USBD_CtlError>
              break;
 8007b56:	e03b      	b.n	8007bd0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	885b      	ldrh	r3, [r3, #2]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d136      	bne.n	8007bce <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b60:	7bbb      	ldrb	r3, [r7, #14]
 8007b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d004      	beq.n	8007b74 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b6a:	7bbb      	ldrb	r3, [r7, #14]
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f001 f92d 	bl	8008dce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fcf7 	bl	8008568 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007b7a:	7bbb      	ldrb	r3, [r7, #14]
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f7ff fde2 	bl	8007748 <USBD_CoreFindEP>
 8007b84:	4603      	mov	r3, r0
 8007b86:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b88:	7b7b      	ldrb	r3, [r7, #13]
 8007b8a:	2bff      	cmp	r3, #255	; 0xff
 8007b8c:	d01f      	beq.n	8007bce <USBD_StdEPReq+0x1c6>
 8007b8e:	7b7b      	ldrb	r3, [r7, #13]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d11c      	bne.n	8007bce <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007b94:	7b7a      	ldrb	r2, [r7, #13]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007b9c:	7b7a      	ldrb	r2, [r7, #13]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	32ae      	adds	r2, #174	; 0xae
 8007ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d010      	beq.n	8007bce <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007bac:	7b7a      	ldrb	r2, [r7, #13]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	32ae      	adds	r2, #174	; 0xae
 8007bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	6839      	ldr	r1, [r7, #0]
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	4798      	blx	r3
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007bc2:	e004      	b.n	8007bce <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fc03 	bl	80083d2 <USBD_CtlError>
              break;
 8007bcc:	e000      	b.n	8007bd0 <USBD_StdEPReq+0x1c8>
              break;
 8007bce:	bf00      	nop
          }
          break;
 8007bd0:	e0ab      	b.n	8007d2a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d002      	beq.n	8007be4 <USBD_StdEPReq+0x1dc>
 8007bde:	2b03      	cmp	r3, #3
 8007be0:	d032      	beq.n	8007c48 <USBD_StdEPReq+0x240>
 8007be2:	e097      	b.n	8007d14 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007be4:	7bbb      	ldrb	r3, [r7, #14]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d007      	beq.n	8007bfa <USBD_StdEPReq+0x1f2>
 8007bea:	7bbb      	ldrb	r3, [r7, #14]
 8007bec:	2b80      	cmp	r3, #128	; 0x80
 8007bee:	d004      	beq.n	8007bfa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007bf0:	6839      	ldr	r1, [r7, #0]
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 fbed 	bl	80083d2 <USBD_CtlError>
                break;
 8007bf8:	e091      	b.n	8007d1e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bfa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	da0b      	bge.n	8007c1a <USBD_StdEPReq+0x212>
 8007c02:	7bbb      	ldrb	r3, [r7, #14]
 8007c04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c08:	4613      	mov	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4413      	add	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	3310      	adds	r3, #16
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	4413      	add	r3, r2
 8007c16:	3304      	adds	r3, #4
 8007c18:	e00b      	b.n	8007c32 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c1a:	7bbb      	ldrb	r3, [r7, #14]
 8007c1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c20:	4613      	mov	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	4413      	add	r3, r2
 8007c30:	3304      	adds	r3, #4
 8007c32:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	2200      	movs	r2, #0
 8007c38:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	2202      	movs	r2, #2
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fc37 	bl	80084b4 <USBD_CtlSendData>
              break;
 8007c46:	e06a      	b.n	8007d1e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	da11      	bge.n	8007c74 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c50:	7bbb      	ldrb	r3, [r7, #14]
 8007c52:	f003 020f 	and.w	r2, r3, #15
 8007c56:	6879      	ldr	r1, [r7, #4]
 8007c58:	4613      	mov	r3, r2
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	4413      	add	r3, r2
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	440b      	add	r3, r1
 8007c62:	3324      	adds	r3, #36	; 0x24
 8007c64:	881b      	ldrh	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d117      	bne.n	8007c9a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c6a:	6839      	ldr	r1, [r7, #0]
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fbb0 	bl	80083d2 <USBD_CtlError>
                  break;
 8007c72:	e054      	b.n	8007d1e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c74:	7bbb      	ldrb	r3, [r7, #14]
 8007c76:	f003 020f 	and.w	r2, r3, #15
 8007c7a:	6879      	ldr	r1, [r7, #4]
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	440b      	add	r3, r1
 8007c86:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c8a:	881b      	ldrh	r3, [r3, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d104      	bne.n	8007c9a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c90:	6839      	ldr	r1, [r7, #0]
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 fb9d 	bl	80083d2 <USBD_CtlError>
                  break;
 8007c98:	e041      	b.n	8007d1e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	da0b      	bge.n	8007cba <USBD_StdEPReq+0x2b2>
 8007ca2:	7bbb      	ldrb	r3, [r7, #14]
 8007ca4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ca8:	4613      	mov	r3, r2
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	4413      	add	r3, r2
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	3310      	adds	r3, #16
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	3304      	adds	r3, #4
 8007cb8:	e00b      	b.n	8007cd2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007cba:	7bbb      	ldrb	r3, [r7, #14]
 8007cbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4413      	add	r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	4413      	add	r3, r2
 8007cd0:	3304      	adds	r3, #4
 8007cd2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007cd4:	7bbb      	ldrb	r3, [r7, #14]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d002      	beq.n	8007ce0 <USBD_StdEPReq+0x2d8>
 8007cda:	7bbb      	ldrb	r3, [r7, #14]
 8007cdc:	2b80      	cmp	r3, #128	; 0x80
 8007cde:	d103      	bne.n	8007ce8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	601a      	str	r2, [r3, #0]
 8007ce6:	e00e      	b.n	8007d06 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007ce8:	7bbb      	ldrb	r3, [r7, #14]
 8007cea:	4619      	mov	r1, r3
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f001 f88d 	bl	8008e0c <USBD_LL_IsStallEP>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d003      	beq.n	8007d00 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	601a      	str	r2, [r3, #0]
 8007cfe:	e002      	b.n	8007d06 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	2200      	movs	r2, #0
 8007d04:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	2202      	movs	r2, #2
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 fbd1 	bl	80084b4 <USBD_CtlSendData>
              break;
 8007d12:	e004      	b.n	8007d1e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007d14:	6839      	ldr	r1, [r7, #0]
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 fb5b 	bl	80083d2 <USBD_CtlError>
              break;
 8007d1c:	bf00      	nop
          }
          break;
 8007d1e:	e004      	b.n	8007d2a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007d20:	6839      	ldr	r1, [r7, #0]
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fb55 	bl	80083d2 <USBD_CtlError>
          break;
 8007d28:	bf00      	nop
      }
      break;
 8007d2a:	e005      	b.n	8007d38 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007d2c:	6839      	ldr	r1, [r7, #0]
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fb4f 	bl	80083d2 <USBD_CtlError>
      break;
 8007d34:	e000      	b.n	8007d38 <USBD_StdEPReq+0x330>
      break;
 8007d36:	bf00      	nop
  }

  return ret;
 8007d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
	...

08007d44 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d52:	2300      	movs	r3, #0
 8007d54:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d56:	2300      	movs	r3, #0
 8007d58:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	885b      	ldrh	r3, [r3, #2]
 8007d5e:	0a1b      	lsrs	r3, r3, #8
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	3b01      	subs	r3, #1
 8007d64:	2b06      	cmp	r3, #6
 8007d66:	f200 8128 	bhi.w	8007fba <USBD_GetDescriptor+0x276>
 8007d6a:	a201      	add	r2, pc, #4	; (adr r2, 8007d70 <USBD_GetDescriptor+0x2c>)
 8007d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d70:	08007d8d 	.word	0x08007d8d
 8007d74:	08007da5 	.word	0x08007da5
 8007d78:	08007de5 	.word	0x08007de5
 8007d7c:	08007fbb 	.word	0x08007fbb
 8007d80:	08007fbb 	.word	0x08007fbb
 8007d84:	08007f5b 	.word	0x08007f5b
 8007d88:	08007f87 	.word	0x08007f87
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	7c12      	ldrb	r2, [r2, #16]
 8007d98:	f107 0108 	add.w	r1, r7, #8
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	4798      	blx	r3
 8007da0:	60f8      	str	r0, [r7, #12]
      break;
 8007da2:	e112      	b.n	8007fca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	7c1b      	ldrb	r3, [r3, #16]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d10d      	bne.n	8007dc8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db4:	f107 0208 	add.w	r2, r7, #8
 8007db8:	4610      	mov	r0, r2
 8007dba:	4798      	blx	r3
 8007dbc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	2202      	movs	r2, #2
 8007dc4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007dc6:	e100      	b.n	8007fca <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd0:	f107 0208 	add.w	r2, r7, #8
 8007dd4:	4610      	mov	r0, r2
 8007dd6:	4798      	blx	r3
 8007dd8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	2202      	movs	r2, #2
 8007de0:	701a      	strb	r2, [r3, #0]
      break;
 8007de2:	e0f2      	b.n	8007fca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	885b      	ldrh	r3, [r3, #2]
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b05      	cmp	r3, #5
 8007dec:	f200 80ac 	bhi.w	8007f48 <USBD_GetDescriptor+0x204>
 8007df0:	a201      	add	r2, pc, #4	; (adr r2, 8007df8 <USBD_GetDescriptor+0xb4>)
 8007df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df6:	bf00      	nop
 8007df8:	08007e11 	.word	0x08007e11
 8007dfc:	08007e45 	.word	0x08007e45
 8007e00:	08007e79 	.word	0x08007e79
 8007e04:	08007ead 	.word	0x08007ead
 8007e08:	08007ee1 	.word	0x08007ee1
 8007e0c:	08007f15 	.word	0x08007f15
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00b      	beq.n	8007e34 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	7c12      	ldrb	r2, [r2, #16]
 8007e28:	f107 0108 	add.w	r1, r7, #8
 8007e2c:	4610      	mov	r0, r2
 8007e2e:	4798      	blx	r3
 8007e30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e32:	e091      	b.n	8007f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e34:	6839      	ldr	r1, [r7, #0]
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 facb 	bl	80083d2 <USBD_CtlError>
            err++;
 8007e3c:	7afb      	ldrb	r3, [r7, #11]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	72fb      	strb	r3, [r7, #11]
          break;
 8007e42:	e089      	b.n	8007f58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00b      	beq.n	8007e68 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	7c12      	ldrb	r2, [r2, #16]
 8007e5c:	f107 0108 	add.w	r1, r7, #8
 8007e60:	4610      	mov	r0, r2
 8007e62:	4798      	blx	r3
 8007e64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e66:	e077      	b.n	8007f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e68:	6839      	ldr	r1, [r7, #0]
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 fab1 	bl	80083d2 <USBD_CtlError>
            err++;
 8007e70:	7afb      	ldrb	r3, [r7, #11]
 8007e72:	3301      	adds	r3, #1
 8007e74:	72fb      	strb	r3, [r7, #11]
          break;
 8007e76:	e06f      	b.n	8007f58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00b      	beq.n	8007e9c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	7c12      	ldrb	r2, [r2, #16]
 8007e90:	f107 0108 	add.w	r1, r7, #8
 8007e94:	4610      	mov	r0, r2
 8007e96:	4798      	blx	r3
 8007e98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e9a:	e05d      	b.n	8007f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e9c:	6839      	ldr	r1, [r7, #0]
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fa97 	bl	80083d2 <USBD_CtlError>
            err++;
 8007ea4:	7afb      	ldrb	r3, [r7, #11]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	72fb      	strb	r3, [r7, #11]
          break;
 8007eaa:	e055      	b.n	8007f58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00b      	beq.n	8007ed0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	7c12      	ldrb	r2, [r2, #16]
 8007ec4:	f107 0108 	add.w	r1, r7, #8
 8007ec8:	4610      	mov	r0, r2
 8007eca:	4798      	blx	r3
 8007ecc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ece:	e043      	b.n	8007f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ed0:	6839      	ldr	r1, [r7, #0]
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 fa7d 	bl	80083d2 <USBD_CtlError>
            err++;
 8007ed8:	7afb      	ldrb	r3, [r7, #11]
 8007eda:	3301      	adds	r3, #1
 8007edc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ede:	e03b      	b.n	8007f58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ee6:	695b      	ldr	r3, [r3, #20]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d00b      	beq.n	8007f04 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ef2:	695b      	ldr	r3, [r3, #20]
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	7c12      	ldrb	r2, [r2, #16]
 8007ef8:	f107 0108 	add.w	r1, r7, #8
 8007efc:	4610      	mov	r0, r2
 8007efe:	4798      	blx	r3
 8007f00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f02:	e029      	b.n	8007f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f04:	6839      	ldr	r1, [r7, #0]
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 fa63 	bl	80083d2 <USBD_CtlError>
            err++;
 8007f0c:	7afb      	ldrb	r3, [r7, #11]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	72fb      	strb	r3, [r7, #11]
          break;
 8007f12:	e021      	b.n	8007f58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f1a:	699b      	ldr	r3, [r3, #24]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00b      	beq.n	8007f38 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f26:	699b      	ldr	r3, [r3, #24]
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	7c12      	ldrb	r2, [r2, #16]
 8007f2c:	f107 0108 	add.w	r1, r7, #8
 8007f30:	4610      	mov	r0, r2
 8007f32:	4798      	blx	r3
 8007f34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f36:	e00f      	b.n	8007f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f38:	6839      	ldr	r1, [r7, #0]
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 fa49 	bl	80083d2 <USBD_CtlError>
            err++;
 8007f40:	7afb      	ldrb	r3, [r7, #11]
 8007f42:	3301      	adds	r3, #1
 8007f44:	72fb      	strb	r3, [r7, #11]
          break;
 8007f46:	e007      	b.n	8007f58 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fa41 	bl	80083d2 <USBD_CtlError>
          err++;
 8007f50:	7afb      	ldrb	r3, [r7, #11]
 8007f52:	3301      	adds	r3, #1
 8007f54:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007f56:	bf00      	nop
      }
      break;
 8007f58:	e037      	b.n	8007fca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	7c1b      	ldrb	r3, [r3, #16]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d109      	bne.n	8007f76 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f6a:	f107 0208 	add.w	r2, r7, #8
 8007f6e:	4610      	mov	r0, r2
 8007f70:	4798      	blx	r3
 8007f72:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f74:	e029      	b.n	8007fca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 fa2a 	bl	80083d2 <USBD_CtlError>
        err++;
 8007f7e:	7afb      	ldrb	r3, [r7, #11]
 8007f80:	3301      	adds	r3, #1
 8007f82:	72fb      	strb	r3, [r7, #11]
      break;
 8007f84:	e021      	b.n	8007fca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	7c1b      	ldrb	r3, [r3, #16]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10d      	bne.n	8007faa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f96:	f107 0208 	add.w	r2, r7, #8
 8007f9a:	4610      	mov	r0, r2
 8007f9c:	4798      	blx	r3
 8007f9e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	2207      	movs	r2, #7
 8007fa6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007fa8:	e00f      	b.n	8007fca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fa10 	bl	80083d2 <USBD_CtlError>
        err++;
 8007fb2:	7afb      	ldrb	r3, [r7, #11]
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	72fb      	strb	r3, [r7, #11]
      break;
 8007fb8:	e007      	b.n	8007fca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007fba:	6839      	ldr	r1, [r7, #0]
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fa08 	bl	80083d2 <USBD_CtlError>
      err++;
 8007fc2:	7afb      	ldrb	r3, [r7, #11]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	72fb      	strb	r3, [r7, #11]
      break;
 8007fc8:	bf00      	nop
  }

  if (err != 0U)
 8007fca:	7afb      	ldrb	r3, [r7, #11]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d11e      	bne.n	800800e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	88db      	ldrh	r3, [r3, #6]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d016      	beq.n	8008006 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007fd8:	893b      	ldrh	r3, [r7, #8]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00e      	beq.n	8007ffc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	88da      	ldrh	r2, [r3, #6]
 8007fe2:	893b      	ldrh	r3, [r7, #8]
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	bf28      	it	cs
 8007fe8:	4613      	movcs	r3, r2
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007fee:	893b      	ldrh	r3, [r7, #8]
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	68f9      	ldr	r1, [r7, #12]
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fa5d 	bl	80084b4 <USBD_CtlSendData>
 8007ffa:	e009      	b.n	8008010 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007ffc:	6839      	ldr	r1, [r7, #0]
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f9e7 	bl	80083d2 <USBD_CtlError>
 8008004:	e004      	b.n	8008010 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 faae 	bl	8008568 <USBD_CtlSendStatus>
 800800c:	e000      	b.n	8008010 <USBD_GetDescriptor+0x2cc>
    return;
 800800e:	bf00      	nop
  }
}
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop

08008018 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	889b      	ldrh	r3, [r3, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d131      	bne.n	800808e <USBD_SetAddress+0x76>
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	88db      	ldrh	r3, [r3, #6]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d12d      	bne.n	800808e <USBD_SetAddress+0x76>
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	885b      	ldrh	r3, [r3, #2]
 8008036:	2b7f      	cmp	r3, #127	; 0x7f
 8008038:	d829      	bhi.n	800808e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	885b      	ldrh	r3, [r3, #2]
 800803e:	b2db      	uxtb	r3, r3
 8008040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008044:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800804c:	b2db      	uxtb	r3, r3
 800804e:	2b03      	cmp	r3, #3
 8008050:	d104      	bne.n	800805c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008052:	6839      	ldr	r1, [r7, #0]
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 f9bc 	bl	80083d2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800805a:	e01d      	b.n	8008098 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	7bfa      	ldrb	r2, [r7, #15]
 8008060:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008064:	7bfb      	ldrb	r3, [r7, #15]
 8008066:	4619      	mov	r1, r3
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fefb 	bl	8008e64 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 fa7a 	bl	8008568 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008074:	7bfb      	ldrb	r3, [r7, #15]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d004      	beq.n	8008084 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2202      	movs	r2, #2
 800807e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008082:	e009      	b.n	8008098 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800808c:	e004      	b.n	8008098 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800808e:	6839      	ldr	r1, [r7, #0]
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 f99e 	bl	80083d2 <USBD_CtlError>
  }
}
 8008096:	bf00      	nop
 8008098:	bf00      	nop
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080aa:	2300      	movs	r3, #0
 80080ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	885b      	ldrh	r3, [r3, #2]
 80080b2:	b2da      	uxtb	r2, r3
 80080b4:	4b4e      	ldr	r3, [pc, #312]	; (80081f0 <USBD_SetConfig+0x150>)
 80080b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80080b8:	4b4d      	ldr	r3, [pc, #308]	; (80081f0 <USBD_SetConfig+0x150>)
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d905      	bls.n	80080cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80080c0:	6839      	ldr	r1, [r7, #0]
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f985 	bl	80083d2 <USBD_CtlError>
    return USBD_FAIL;
 80080c8:	2303      	movs	r3, #3
 80080ca:	e08c      	b.n	80081e6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	d002      	beq.n	80080de <USBD_SetConfig+0x3e>
 80080d8:	2b03      	cmp	r3, #3
 80080da:	d029      	beq.n	8008130 <USBD_SetConfig+0x90>
 80080dc:	e075      	b.n	80081ca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80080de:	4b44      	ldr	r3, [pc, #272]	; (80081f0 <USBD_SetConfig+0x150>)
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d020      	beq.n	8008128 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80080e6:	4b42      	ldr	r3, [pc, #264]	; (80081f0 <USBD_SetConfig+0x150>)
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	461a      	mov	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80080f0:	4b3f      	ldr	r3, [pc, #252]	; (80081f0 <USBD_SetConfig+0x150>)
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	4619      	mov	r1, r3
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f7fe ffe7 	bl	80070ca <USBD_SetClassConfig>
 80080fc:	4603      	mov	r3, r0
 80080fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008100:	7bfb      	ldrb	r3, [r7, #15]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d008      	beq.n	8008118 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008106:	6839      	ldr	r1, [r7, #0]
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 f962 	bl	80083d2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2202      	movs	r2, #2
 8008112:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008116:	e065      	b.n	80081e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fa25 	bl	8008568 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2203      	movs	r2, #3
 8008122:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008126:	e05d      	b.n	80081e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 fa1d 	bl	8008568 <USBD_CtlSendStatus>
      break;
 800812e:	e059      	b.n	80081e4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008130:	4b2f      	ldr	r3, [pc, #188]	; (80081f0 <USBD_SetConfig+0x150>)
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d112      	bne.n	800815e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2202      	movs	r2, #2
 800813c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008140:	4b2b      	ldr	r3, [pc, #172]	; (80081f0 <USBD_SetConfig+0x150>)
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	461a      	mov	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800814a:	4b29      	ldr	r3, [pc, #164]	; (80081f0 <USBD_SetConfig+0x150>)
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	4619      	mov	r1, r3
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f7fe ffd6 	bl	8007102 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 fa06 	bl	8008568 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800815c:	e042      	b.n	80081e4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800815e:	4b24      	ldr	r3, [pc, #144]	; (80081f0 <USBD_SetConfig+0x150>)
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	461a      	mov	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	429a      	cmp	r2, r3
 800816a:	d02a      	beq.n	80081c2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	b2db      	uxtb	r3, r3
 8008172:	4619      	mov	r1, r3
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f7fe ffc4 	bl	8007102 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800817a:	4b1d      	ldr	r3, [pc, #116]	; (80081f0 <USBD_SetConfig+0x150>)
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	461a      	mov	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008184:	4b1a      	ldr	r3, [pc, #104]	; (80081f0 <USBD_SetConfig+0x150>)
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	4619      	mov	r1, r3
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f7fe ff9d 	bl	80070ca <USBD_SetClassConfig>
 8008190:	4603      	mov	r3, r0
 8008192:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008194:	7bfb      	ldrb	r3, [r7, #15]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00f      	beq.n	80081ba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800819a:	6839      	ldr	r1, [r7, #0]
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f918 	bl	80083d2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	4619      	mov	r1, r3
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f7fe ffa9 	bl	8007102 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2202      	movs	r2, #2
 80081b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80081b8:	e014      	b.n	80081e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f9d4 	bl	8008568 <USBD_CtlSendStatus>
      break;
 80081c0:	e010      	b.n	80081e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f9d0 	bl	8008568 <USBD_CtlSendStatus>
      break;
 80081c8:	e00c      	b.n	80081e4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80081ca:	6839      	ldr	r1, [r7, #0]
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 f900 	bl	80083d2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80081d2:	4b07      	ldr	r3, [pc, #28]	; (80081f0 <USBD_SetConfig+0x150>)
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	4619      	mov	r1, r3
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f7fe ff92 	bl	8007102 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80081de:	2303      	movs	r3, #3
 80081e0:	73fb      	strb	r3, [r7, #15]
      break;
 80081e2:	bf00      	nop
  }

  return ret;
 80081e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	2000026c 	.word	0x2000026c

080081f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	88db      	ldrh	r3, [r3, #6]
 8008202:	2b01      	cmp	r3, #1
 8008204:	d004      	beq.n	8008210 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008206:	6839      	ldr	r1, [r7, #0]
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 f8e2 	bl	80083d2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800820e:	e023      	b.n	8008258 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008216:	b2db      	uxtb	r3, r3
 8008218:	2b02      	cmp	r3, #2
 800821a:	dc02      	bgt.n	8008222 <USBD_GetConfig+0x2e>
 800821c:	2b00      	cmp	r3, #0
 800821e:	dc03      	bgt.n	8008228 <USBD_GetConfig+0x34>
 8008220:	e015      	b.n	800824e <USBD_GetConfig+0x5a>
 8008222:	2b03      	cmp	r3, #3
 8008224:	d00b      	beq.n	800823e <USBD_GetConfig+0x4a>
 8008226:	e012      	b.n	800824e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	3308      	adds	r3, #8
 8008232:	2201      	movs	r2, #1
 8008234:	4619      	mov	r1, r3
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f93c 	bl	80084b4 <USBD_CtlSendData>
        break;
 800823c:	e00c      	b.n	8008258 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	3304      	adds	r3, #4
 8008242:	2201      	movs	r2, #1
 8008244:	4619      	mov	r1, r3
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 f934 	bl	80084b4 <USBD_CtlSendData>
        break;
 800824c:	e004      	b.n	8008258 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800824e:	6839      	ldr	r1, [r7, #0]
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 f8be 	bl	80083d2 <USBD_CtlError>
        break;
 8008256:	bf00      	nop
}
 8008258:	bf00      	nop
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008270:	b2db      	uxtb	r3, r3
 8008272:	3b01      	subs	r3, #1
 8008274:	2b02      	cmp	r3, #2
 8008276:	d81e      	bhi.n	80082b6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	88db      	ldrh	r3, [r3, #6]
 800827c:	2b02      	cmp	r3, #2
 800827e:	d004      	beq.n	800828a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f8a5 	bl	80083d2 <USBD_CtlError>
        break;
 8008288:	e01a      	b.n	80082c0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2201      	movs	r2, #1
 800828e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008296:	2b00      	cmp	r3, #0
 8008298:	d005      	beq.n	80082a6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	f043 0202 	orr.w	r2, r3, #2
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	330c      	adds	r3, #12
 80082aa:	2202      	movs	r2, #2
 80082ac:	4619      	mov	r1, r3
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f900 	bl	80084b4 <USBD_CtlSendData>
      break;
 80082b4:	e004      	b.n	80082c0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 f88a 	bl	80083d2 <USBD_CtlError>
      break;
 80082be:	bf00      	nop
  }
}
 80082c0:	bf00      	nop
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	885b      	ldrh	r3, [r3, #2]
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d107      	bne.n	80082ea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2201      	movs	r2, #1
 80082de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 f940 	bl	8008568 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80082e8:	e013      	b.n	8008312 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	885b      	ldrh	r3, [r3, #2]
 80082ee:	2b02      	cmp	r3, #2
 80082f0:	d10b      	bne.n	800830a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	889b      	ldrh	r3, [r3, #4]
 80082f6:	0a1b      	lsrs	r3, r3, #8
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	b2da      	uxtb	r2, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 f930 	bl	8008568 <USBD_CtlSendStatus>
}
 8008308:	e003      	b.n	8008312 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800830a:	6839      	ldr	r1, [r7, #0]
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 f860 	bl	80083d2 <USBD_CtlError>
}
 8008312:	bf00      	nop
 8008314:	3708      	adds	r7, #8
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b082      	sub	sp, #8
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
 8008322:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800832a:	b2db      	uxtb	r3, r3
 800832c:	3b01      	subs	r3, #1
 800832e:	2b02      	cmp	r3, #2
 8008330:	d80b      	bhi.n	800834a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	885b      	ldrh	r3, [r3, #2]
 8008336:	2b01      	cmp	r3, #1
 8008338:	d10c      	bne.n	8008354 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f910 	bl	8008568 <USBD_CtlSendStatus>
      }
      break;
 8008348:	e004      	b.n	8008354 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800834a:	6839      	ldr	r1, [r7, #0]
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f840 	bl	80083d2 <USBD_CtlError>
      break;
 8008352:	e000      	b.n	8008356 <USBD_ClrFeature+0x3c>
      break;
 8008354:	bf00      	nop
  }
}
 8008356:	bf00      	nop
 8008358:	3708      	adds	r7, #8
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b084      	sub	sp, #16
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
 8008366:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	781a      	ldrb	r2, [r3, #0]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	3301      	adds	r3, #1
 8008378:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	781a      	ldrb	r2, [r3, #0]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	3301      	adds	r3, #1
 8008386:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f7ff fa41 	bl	8007810 <SWAPBYTE>
 800838e:	4603      	mov	r3, r0
 8008390:	461a      	mov	r2, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	3301      	adds	r3, #1
 800839a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	3301      	adds	r3, #1
 80083a0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80083a2:	68f8      	ldr	r0, [r7, #12]
 80083a4:	f7ff fa34 	bl	8007810 <SWAPBYTE>
 80083a8:	4603      	mov	r3, r0
 80083aa:	461a      	mov	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	3301      	adds	r3, #1
 80083b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	3301      	adds	r3, #1
 80083ba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f7ff fa27 	bl	8007810 <SWAPBYTE>
 80083c2:	4603      	mov	r3, r0
 80083c4:	461a      	mov	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	80da      	strh	r2, [r3, #6]
}
 80083ca:	bf00      	nop
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b082      	sub	sp, #8
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
 80083da:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80083dc:	2180      	movs	r1, #128	; 0x80
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fcd6 	bl	8008d90 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80083e4:	2100      	movs	r1, #0
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 fcd2 	bl	8008d90 <USBD_LL_StallEP>
}
 80083ec:	bf00      	nop
 80083ee:	3708      	adds	r7, #8
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b086      	sub	sp, #24
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008400:	2300      	movs	r3, #0
 8008402:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d036      	beq.n	8008478 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800840e:	6938      	ldr	r0, [r7, #16]
 8008410:	f000 f836 	bl	8008480 <USBD_GetLen>
 8008414:	4603      	mov	r3, r0
 8008416:	3301      	adds	r3, #1
 8008418:	b29b      	uxth	r3, r3
 800841a:	005b      	lsls	r3, r3, #1
 800841c:	b29a      	uxth	r2, r3
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008422:	7dfb      	ldrb	r3, [r7, #23]
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	4413      	add	r3, r2
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	7812      	ldrb	r2, [r2, #0]
 800842c:	701a      	strb	r2, [r3, #0]
  idx++;
 800842e:	7dfb      	ldrb	r3, [r7, #23]
 8008430:	3301      	adds	r3, #1
 8008432:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008434:	7dfb      	ldrb	r3, [r7, #23]
 8008436:	68ba      	ldr	r2, [r7, #8]
 8008438:	4413      	add	r3, r2
 800843a:	2203      	movs	r2, #3
 800843c:	701a      	strb	r2, [r3, #0]
  idx++;
 800843e:	7dfb      	ldrb	r3, [r7, #23]
 8008440:	3301      	adds	r3, #1
 8008442:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008444:	e013      	b.n	800846e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008446:	7dfb      	ldrb	r3, [r7, #23]
 8008448:	68ba      	ldr	r2, [r7, #8]
 800844a:	4413      	add	r3, r2
 800844c:	693a      	ldr	r2, [r7, #16]
 800844e:	7812      	ldrb	r2, [r2, #0]
 8008450:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	3301      	adds	r3, #1
 8008456:	613b      	str	r3, [r7, #16]
    idx++;
 8008458:	7dfb      	ldrb	r3, [r7, #23]
 800845a:	3301      	adds	r3, #1
 800845c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800845e:	7dfb      	ldrb	r3, [r7, #23]
 8008460:	68ba      	ldr	r2, [r7, #8]
 8008462:	4413      	add	r3, r2
 8008464:	2200      	movs	r2, #0
 8008466:	701a      	strb	r2, [r3, #0]
    idx++;
 8008468:	7dfb      	ldrb	r3, [r7, #23]
 800846a:	3301      	adds	r3, #1
 800846c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d1e7      	bne.n	8008446 <USBD_GetString+0x52>
 8008476:	e000      	b.n	800847a <USBD_GetString+0x86>
    return;
 8008478:	bf00      	nop
  }
}
 800847a:	3718      	adds	r7, #24
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008480:	b480      	push	{r7}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008488:	2300      	movs	r3, #0
 800848a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008490:	e005      	b.n	800849e <USBD_GetLen+0x1e>
  {
    len++;
 8008492:	7bfb      	ldrb	r3, [r7, #15]
 8008494:	3301      	adds	r3, #1
 8008496:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	3301      	adds	r3, #1
 800849c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1f5      	bne.n	8008492 <USBD_GetLen+0x12>
  }

  return len;
 80084a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3714      	adds	r7, #20
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2202      	movs	r2, #2
 80084c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	68ba      	ldr	r2, [r7, #8]
 80084d8:	2100      	movs	r1, #0
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f000 fce1 	bl	8008ea2 <USBD_LL_Transmit>

  return USBD_OK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b084      	sub	sp, #16
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	60f8      	str	r0, [r7, #12]
 80084f2:	60b9      	str	r1, [r7, #8]
 80084f4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	2100      	movs	r1, #0
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f000 fcd0 	bl	8008ea2 <USBD_LL_Transmit>

  return USBD_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2203      	movs	r2, #3
 800851c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	2100      	movs	r1, #0
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f000 fcd4 	bl	8008ee4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b084      	sub	sp, #16
 800854a:	af00      	add	r7, sp, #0
 800854c:	60f8      	str	r0, [r7, #12]
 800854e:	60b9      	str	r1, [r7, #8]
 8008550:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	2100      	movs	r1, #0
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f000 fcc3 	bl	8008ee4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2204      	movs	r2, #4
 8008574:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008578:	2300      	movs	r3, #0
 800857a:	2200      	movs	r2, #0
 800857c:	2100      	movs	r1, #0
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 fc8f 	bl	8008ea2 <USBD_LL_Transmit>

  return USBD_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3708      	adds	r7, #8
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b082      	sub	sp, #8
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2205      	movs	r2, #5
 800859a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800859e:	2300      	movs	r3, #0
 80085a0:	2200      	movs	r2, #0
 80085a2:	2100      	movs	r1, #0
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 fc9d 	bl	8008ee4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3708      	adds	r7, #8
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80085b8:	2200      	movs	r2, #0
 80085ba:	4912      	ldr	r1, [pc, #72]	; (8008604 <MX_USB_DEVICE_Init+0x50>)
 80085bc:	4812      	ldr	r0, [pc, #72]	; (8008608 <MX_USB_DEVICE_Init+0x54>)
 80085be:	f7fe fd07 	bl	8006fd0 <USBD_Init>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d001      	beq.n	80085cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80085c8:	f7f8 f9f0 	bl	80009ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80085cc:	490f      	ldr	r1, [pc, #60]	; (800860c <MX_USB_DEVICE_Init+0x58>)
 80085ce:	480e      	ldr	r0, [pc, #56]	; (8008608 <MX_USB_DEVICE_Init+0x54>)
 80085d0:	f7fe fd2e 	bl	8007030 <USBD_RegisterClass>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d001      	beq.n	80085de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80085da:	f7f8 f9e7 	bl	80009ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80085de:	490c      	ldr	r1, [pc, #48]	; (8008610 <MX_USB_DEVICE_Init+0x5c>)
 80085e0:	4809      	ldr	r0, [pc, #36]	; (8008608 <MX_USB_DEVICE_Init+0x54>)
 80085e2:	f7fe fc1f 	bl	8006e24 <USBD_CDC_RegisterInterface>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d001      	beq.n	80085f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80085ec:	f7f8 f9de 	bl	80009ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80085f0:	4805      	ldr	r0, [pc, #20]	; (8008608 <MX_USB_DEVICE_Init+0x54>)
 80085f2:	f7fe fd53 	bl	800709c <USBD_Start>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d001      	beq.n	8008600 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80085fc:	f7f8 f9d6 	bl	80009ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008600:	bf00      	nop
 8008602:	bd80      	pop	{r7, pc}
 8008604:	200000ac 	.word	0x200000ac
 8008608:	20000270 	.word	0x20000270
 800860c:	20000018 	.word	0x20000018
 8008610:	20000098 	.word	0x20000098

08008614 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008618:	2200      	movs	r2, #0
 800861a:	4905      	ldr	r1, [pc, #20]	; (8008630 <CDC_Init_FS+0x1c>)
 800861c:	4805      	ldr	r0, [pc, #20]	; (8008634 <CDC_Init_FS+0x20>)
 800861e:	f7fe fc1b 	bl	8006e58 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008622:	4905      	ldr	r1, [pc, #20]	; (8008638 <CDC_Init_FS+0x24>)
 8008624:	4803      	ldr	r0, [pc, #12]	; (8008634 <CDC_Init_FS+0x20>)
 8008626:	f7fe fc39 	bl	8006e9c <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 800862a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800862c:	4618      	mov	r0, r3
 800862e:	bd80      	pop	{r7, pc}
 8008630:	2000094c 	.word	0x2000094c
 8008634:	20000270 	.word	0x20000270
 8008638:	2000054c 	.word	0x2000054c

0800863c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800863c:	b480      	push	{r7}
 800863e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
    return (USBD_OK);
 8008640:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008642:	4618      	mov	r0, r3
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	4603      	mov	r3, r0
 8008654:	6039      	str	r1, [r7, #0]
 8008656:	71fb      	strb	r3, [r7, #7]
 8008658:	4613      	mov	r3, r2
 800865a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
    switch (cmd) {
 800865c:	79fb      	ldrb	r3, [r7, #7]
 800865e:	2b23      	cmp	r3, #35	; 0x23
 8008660:	d84a      	bhi.n	80086f8 <CDC_Control_FS+0xac>
 8008662:	a201      	add	r2, pc, #4	; (adr r2, 8008668 <CDC_Control_FS+0x1c>)
 8008664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008668:	080086f9 	.word	0x080086f9
 800866c:	080086f9 	.word	0x080086f9
 8008670:	080086f9 	.word	0x080086f9
 8008674:	080086f9 	.word	0x080086f9
 8008678:	080086f9 	.word	0x080086f9
 800867c:	080086f9 	.word	0x080086f9
 8008680:	080086f9 	.word	0x080086f9
 8008684:	080086f9 	.word	0x080086f9
 8008688:	080086f9 	.word	0x080086f9
 800868c:	080086f9 	.word	0x080086f9
 8008690:	080086f9 	.word	0x080086f9
 8008694:	080086f9 	.word	0x080086f9
 8008698:	080086f9 	.word	0x080086f9
 800869c:	080086f9 	.word	0x080086f9
 80086a0:	080086f9 	.word	0x080086f9
 80086a4:	080086f9 	.word	0x080086f9
 80086a8:	080086f9 	.word	0x080086f9
 80086ac:	080086f9 	.word	0x080086f9
 80086b0:	080086f9 	.word	0x080086f9
 80086b4:	080086f9 	.word	0x080086f9
 80086b8:	080086f9 	.word	0x080086f9
 80086bc:	080086f9 	.word	0x080086f9
 80086c0:	080086f9 	.word	0x080086f9
 80086c4:	080086f9 	.word	0x080086f9
 80086c8:	080086f9 	.word	0x080086f9
 80086cc:	080086f9 	.word	0x080086f9
 80086d0:	080086f9 	.word	0x080086f9
 80086d4:	080086f9 	.word	0x080086f9
 80086d8:	080086f9 	.word	0x080086f9
 80086dc:	080086f9 	.word	0x080086f9
 80086e0:	080086f9 	.word	0x080086f9
 80086e4:	080086f9 	.word	0x080086f9
 80086e8:	080086f9 	.word	0x080086f9
 80086ec:	080086f9 	.word	0x080086f9
 80086f0:	080086f9 	.word	0x080086f9
 80086f4:	080086f9 	.word	0x080086f9
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 80086f8:	bf00      	nop
    }

    return (USBD_OK);
 80086fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008712:	6879      	ldr	r1, [r7, #4]
 8008714:	4805      	ldr	r0, [pc, #20]	; (800872c <CDC_Receive_FS+0x24>)
 8008716:	f7fe fbc1 	bl	8006e9c <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800871a:	4804      	ldr	r0, [pc, #16]	; (800872c <CDC_Receive_FS+0x24>)
 800871c:	f7fe fc22 	bl	8006f64 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 8008720:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008722:	4618      	mov	r0, r3
 8008724:	3708      	adds	r7, #8
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	20000270 	.word	0x20000270

08008730 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	460b      	mov	r3, r1
 800873a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800873c:	2300      	movs	r3, #0
 800873e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 8008740:	4b0d      	ldr	r3, [pc, #52]	; (8008778 <CDC_Transmit_FS+0x48>)
 8008742:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008746:	60bb      	str	r3, [r7, #8]
    if (hcdc->TxState != 0) {
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800874e:	2b00      	cmp	r3, #0
 8008750:	d001      	beq.n	8008756 <CDC_Transmit_FS+0x26>
        return USBD_BUSY;
 8008752:	2301      	movs	r3, #1
 8008754:	e00b      	b.n	800876e <CDC_Transmit_FS+0x3e>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008756:	887b      	ldrh	r3, [r7, #2]
 8008758:	461a      	mov	r2, r3
 800875a:	6879      	ldr	r1, [r7, #4]
 800875c:	4806      	ldr	r0, [pc, #24]	; (8008778 <CDC_Transmit_FS+0x48>)
 800875e:	f7fe fb7b 	bl	8006e58 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008762:	4805      	ldr	r0, [pc, #20]	; (8008778 <CDC_Transmit_FS+0x48>)
 8008764:	f7fe fbb8 	bl	8006ed8 <USBD_CDC_TransmitPacket>
 8008768:	4603      	mov	r3, r0
 800876a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800876c:	7bfb      	ldrb	r3, [r7, #15]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	20000270 	.word	0x20000270

0800877c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800877c:	b480      	push	{r7}
 800877e:	b087      	sub	sp, #28
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	4613      	mov	r3, r2
 8008788:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800878a:	2300      	movs	r3, #0
 800878c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800878e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008792:	4618      	mov	r0, r3
 8008794:	371c      	adds	r7, #28
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
	...

080087a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	4603      	mov	r3, r0
 80087a8:	6039      	str	r1, [r7, #0]
 80087aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	2212      	movs	r2, #18
 80087b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80087b2:	4b03      	ldr	r3, [pc, #12]	; (80087c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr
 80087c0:	200000c8 	.word	0x200000c8

080087c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	4603      	mov	r3, r0
 80087cc:	6039      	str	r1, [r7, #0]
 80087ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	2204      	movs	r2, #4
 80087d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80087d6:	4b03      	ldr	r3, [pc, #12]	; (80087e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80087d8:	4618      	mov	r0, r3
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr
 80087e4:	200000dc 	.word	0x200000dc

080087e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	4603      	mov	r3, r0
 80087f0:	6039      	str	r1, [r7, #0]
 80087f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80087f4:	79fb      	ldrb	r3, [r7, #7]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d105      	bne.n	8008806 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087fa:	683a      	ldr	r2, [r7, #0]
 80087fc:	4907      	ldr	r1, [pc, #28]	; (800881c <USBD_FS_ProductStrDescriptor+0x34>)
 80087fe:	4808      	ldr	r0, [pc, #32]	; (8008820 <USBD_FS_ProductStrDescriptor+0x38>)
 8008800:	f7ff fdf8 	bl	80083f4 <USBD_GetString>
 8008804:	e004      	b.n	8008810 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008806:	683a      	ldr	r2, [r7, #0]
 8008808:	4904      	ldr	r1, [pc, #16]	; (800881c <USBD_FS_ProductStrDescriptor+0x34>)
 800880a:	4805      	ldr	r0, [pc, #20]	; (8008820 <USBD_FS_ProductStrDescriptor+0x38>)
 800880c:	f7ff fdf2 	bl	80083f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008810:	4b02      	ldr	r3, [pc, #8]	; (800881c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008812:	4618      	mov	r0, r3
 8008814:	3708      	adds	r7, #8
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	20000d4c 	.word	0x20000d4c
 8008820:	080099f0 	.word	0x080099f0

08008824 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	4603      	mov	r3, r0
 800882c:	6039      	str	r1, [r7, #0]
 800882e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008830:	683a      	ldr	r2, [r7, #0]
 8008832:	4904      	ldr	r1, [pc, #16]	; (8008844 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008834:	4804      	ldr	r0, [pc, #16]	; (8008848 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008836:	f7ff fddd 	bl	80083f4 <USBD_GetString>
  return USBD_StrDesc;
 800883a:	4b02      	ldr	r3, [pc, #8]	; (8008844 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800883c:	4618      	mov	r0, r3
 800883e:	3708      	adds	r7, #8
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	20000d4c 	.word	0x20000d4c
 8008848:	08009a08 	.word	0x08009a08

0800884c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	4603      	mov	r3, r0
 8008854:	6039      	str	r1, [r7, #0]
 8008856:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	221a      	movs	r2, #26
 800885c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800885e:	f000 f843 	bl	80088e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008862:	4b02      	ldr	r3, [pc, #8]	; (800886c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008864:	4618      	mov	r0, r3
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	200000e0 	.word	0x200000e0

08008870 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	4603      	mov	r3, r0
 8008878:	6039      	str	r1, [r7, #0]
 800887a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800887c:	79fb      	ldrb	r3, [r7, #7]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d105      	bne.n	800888e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008882:	683a      	ldr	r2, [r7, #0]
 8008884:	4907      	ldr	r1, [pc, #28]	; (80088a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008886:	4808      	ldr	r0, [pc, #32]	; (80088a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008888:	f7ff fdb4 	bl	80083f4 <USBD_GetString>
 800888c:	e004      	b.n	8008898 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800888e:	683a      	ldr	r2, [r7, #0]
 8008890:	4904      	ldr	r1, [pc, #16]	; (80088a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008892:	4805      	ldr	r0, [pc, #20]	; (80088a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008894:	f7ff fdae 	bl	80083f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008898:	4b02      	ldr	r3, [pc, #8]	; (80088a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800889a:	4618      	mov	r0, r3
 800889c:	3708      	adds	r7, #8
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	20000d4c 	.word	0x20000d4c
 80088a8:	08009a1c 	.word	0x08009a1c

080088ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	4603      	mov	r3, r0
 80088b4:	6039      	str	r1, [r7, #0]
 80088b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80088b8:	79fb      	ldrb	r3, [r7, #7]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d105      	bne.n	80088ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80088be:	683a      	ldr	r2, [r7, #0]
 80088c0:	4907      	ldr	r1, [pc, #28]	; (80088e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80088c2:	4808      	ldr	r0, [pc, #32]	; (80088e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80088c4:	f7ff fd96 	bl	80083f4 <USBD_GetString>
 80088c8:	e004      	b.n	80088d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80088ca:	683a      	ldr	r2, [r7, #0]
 80088cc:	4904      	ldr	r1, [pc, #16]	; (80088e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80088ce:	4805      	ldr	r0, [pc, #20]	; (80088e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80088d0:	f7ff fd90 	bl	80083f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80088d4:	4b02      	ldr	r3, [pc, #8]	; (80088e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3708      	adds	r7, #8
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	20000d4c 	.word	0x20000d4c
 80088e4:	08009a28 	.word	0x08009a28

080088e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80088ee:	4b0f      	ldr	r3, [pc, #60]	; (800892c <Get_SerialNum+0x44>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80088f4:	4b0e      	ldr	r3, [pc, #56]	; (8008930 <Get_SerialNum+0x48>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80088fa:	4b0e      	ldr	r3, [pc, #56]	; (8008934 <Get_SerialNum+0x4c>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008900:	68fa      	ldr	r2, [r7, #12]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4413      	add	r3, r2
 8008906:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d009      	beq.n	8008922 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800890e:	2208      	movs	r2, #8
 8008910:	4909      	ldr	r1, [pc, #36]	; (8008938 <Get_SerialNum+0x50>)
 8008912:	68f8      	ldr	r0, [r7, #12]
 8008914:	f000 f814 	bl	8008940 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008918:	2204      	movs	r2, #4
 800891a:	4908      	ldr	r1, [pc, #32]	; (800893c <Get_SerialNum+0x54>)
 800891c:	68b8      	ldr	r0, [r7, #8]
 800891e:	f000 f80f 	bl	8008940 <IntToUnicode>
  }
}
 8008922:	bf00      	nop
 8008924:	3710      	adds	r7, #16
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	1fff7a10 	.word	0x1fff7a10
 8008930:	1fff7a14 	.word	0x1fff7a14
 8008934:	1fff7a18 	.word	0x1fff7a18
 8008938:	200000e2 	.word	0x200000e2
 800893c:	200000f2 	.word	0x200000f2

08008940 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008940:	b480      	push	{r7}
 8008942:	b087      	sub	sp, #28
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	4613      	mov	r3, r2
 800894c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800894e:	2300      	movs	r3, #0
 8008950:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008952:	2300      	movs	r3, #0
 8008954:	75fb      	strb	r3, [r7, #23]
 8008956:	e027      	b.n	80089a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	0f1b      	lsrs	r3, r3, #28
 800895c:	2b09      	cmp	r3, #9
 800895e:	d80b      	bhi.n	8008978 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	0f1b      	lsrs	r3, r3, #28
 8008964:	b2da      	uxtb	r2, r3
 8008966:	7dfb      	ldrb	r3, [r7, #23]
 8008968:	005b      	lsls	r3, r3, #1
 800896a:	4619      	mov	r1, r3
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	440b      	add	r3, r1
 8008970:	3230      	adds	r2, #48	; 0x30
 8008972:	b2d2      	uxtb	r2, r2
 8008974:	701a      	strb	r2, [r3, #0]
 8008976:	e00a      	b.n	800898e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	0f1b      	lsrs	r3, r3, #28
 800897c:	b2da      	uxtb	r2, r3
 800897e:	7dfb      	ldrb	r3, [r7, #23]
 8008980:	005b      	lsls	r3, r3, #1
 8008982:	4619      	mov	r1, r3
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	440b      	add	r3, r1
 8008988:	3237      	adds	r2, #55	; 0x37
 800898a:	b2d2      	uxtb	r2, r2
 800898c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	011b      	lsls	r3, r3, #4
 8008992:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008994:	7dfb      	ldrb	r3, [r7, #23]
 8008996:	005b      	lsls	r3, r3, #1
 8008998:	3301      	adds	r3, #1
 800899a:	68ba      	ldr	r2, [r7, #8]
 800899c:	4413      	add	r3, r2
 800899e:	2200      	movs	r2, #0
 80089a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80089a2:	7dfb      	ldrb	r3, [r7, #23]
 80089a4:	3301      	adds	r3, #1
 80089a6:	75fb      	strb	r3, [r7, #23]
 80089a8:	7dfa      	ldrb	r2, [r7, #23]
 80089aa:	79fb      	ldrb	r3, [r7, #7]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d3d3      	bcc.n	8008958 <IntToUnicode+0x18>
  }
}
 80089b0:	bf00      	nop
 80089b2:	bf00      	nop
 80089b4:	371c      	adds	r7, #28
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
	...

080089c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b08a      	sub	sp, #40	; 0x28
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089c8:	f107 0314 	add.w	r3, r7, #20
 80089cc:	2200      	movs	r2, #0
 80089ce:	601a      	str	r2, [r3, #0]
 80089d0:	605a      	str	r2, [r3, #4]
 80089d2:	609a      	str	r2, [r3, #8]
 80089d4:	60da      	str	r2, [r3, #12]
 80089d6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089e0:	d13a      	bne.n	8008a58 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089e2:	2300      	movs	r3, #0
 80089e4:	613b      	str	r3, [r7, #16]
 80089e6:	4b1e      	ldr	r3, [pc, #120]	; (8008a60 <HAL_PCD_MspInit+0xa0>)
 80089e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ea:	4a1d      	ldr	r2, [pc, #116]	; (8008a60 <HAL_PCD_MspInit+0xa0>)
 80089ec:	f043 0301 	orr.w	r3, r3, #1
 80089f0:	6313      	str	r3, [r2, #48]	; 0x30
 80089f2:	4b1b      	ldr	r3, [pc, #108]	; (8008a60 <HAL_PCD_MspInit+0xa0>)
 80089f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f6:	f003 0301 	and.w	r3, r3, #1
 80089fa:	613b      	str	r3, [r7, #16]
 80089fc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80089fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a04:	2302      	movs	r3, #2
 8008a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a0c:	2303      	movs	r3, #3
 8008a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008a10:	230a      	movs	r3, #10
 8008a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a14:	f107 0314 	add.w	r3, r7, #20
 8008a18:	4619      	mov	r1, r3
 8008a1a:	4812      	ldr	r0, [pc, #72]	; (8008a64 <HAL_PCD_MspInit+0xa4>)
 8008a1c:	f7f8 feda 	bl	80017d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008a20:	4b0f      	ldr	r3, [pc, #60]	; (8008a60 <HAL_PCD_MspInit+0xa0>)
 8008a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a24:	4a0e      	ldr	r2, [pc, #56]	; (8008a60 <HAL_PCD_MspInit+0xa0>)
 8008a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a2a:	6353      	str	r3, [r2, #52]	; 0x34
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	60fb      	str	r3, [r7, #12]
 8008a30:	4b0b      	ldr	r3, [pc, #44]	; (8008a60 <HAL_PCD_MspInit+0xa0>)
 8008a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a34:	4a0a      	ldr	r2, [pc, #40]	; (8008a60 <HAL_PCD_MspInit+0xa0>)
 8008a36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a3a:	6453      	str	r3, [r2, #68]	; 0x44
 8008a3c:	4b08      	ldr	r3, [pc, #32]	; (8008a60 <HAL_PCD_MspInit+0xa0>)
 8008a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a44:	60fb      	str	r3, [r7, #12]
 8008a46:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008a48:	2200      	movs	r2, #0
 8008a4a:	2100      	movs	r1, #0
 8008a4c:	2043      	movs	r0, #67	; 0x43
 8008a4e:	f7f8 fd2a 	bl	80014a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008a52:	2043      	movs	r0, #67	; 0x43
 8008a54:	f7f8 fd43 	bl	80014de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008a58:	bf00      	nop
 8008a5a:	3728      	adds	r7, #40	; 0x28
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	40023800 	.word	0x40023800
 8008a64:	40020000 	.word	0x40020000

08008a68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	4610      	mov	r0, r2
 8008a80:	f7fe fb59 	bl	8007136 <USBD_LL_SetupStage>
}
 8008a84:	bf00      	nop
 8008a86:	3708      	adds	r7, #8
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	460b      	mov	r3, r1
 8008a96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008a9e:	78fa      	ldrb	r2, [r7, #3]
 8008aa0:	6879      	ldr	r1, [r7, #4]
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	00db      	lsls	r3, r3, #3
 8008aa6:	4413      	add	r3, r2
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	440b      	add	r3, r1
 8008aac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	78fb      	ldrb	r3, [r7, #3]
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	f7fe fb93 	bl	80071e0 <USBD_LL_DataOutStage>
}
 8008aba:	bf00      	nop
 8008abc:	3708      	adds	r7, #8
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b082      	sub	sp, #8
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
 8008aca:	460b      	mov	r3, r1
 8008acc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008ad4:	78fa      	ldrb	r2, [r7, #3]
 8008ad6:	6879      	ldr	r1, [r7, #4]
 8008ad8:	4613      	mov	r3, r2
 8008ada:	00db      	lsls	r3, r3, #3
 8008adc:	4413      	add	r3, r2
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	440b      	add	r3, r1
 8008ae2:	334c      	adds	r3, #76	; 0x4c
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	78fb      	ldrb	r3, [r7, #3]
 8008ae8:	4619      	mov	r1, r3
 8008aea:	f7fe fc2c 	bl	8007346 <USBD_LL_DataInStage>
}
 8008aee:	bf00      	nop
 8008af0:	3708      	adds	r7, #8
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b082      	sub	sp, #8
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7fe fd60 	bl	80075ca <USBD_LL_SOF>
}
 8008b0a:	bf00      	nop
 8008b0c:	3708      	adds	r7, #8
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b084      	sub	sp, #16
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d001      	beq.n	8008b2a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008b26:	f7f7 ff41 	bl	80009ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b30:	7bfa      	ldrb	r2, [r7, #15]
 8008b32:	4611      	mov	r1, r2
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7fe fd0a 	bl	800754e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7fe fcb2 	bl	80074aa <USBD_LL_Reset>
}
 8008b46:	bf00      	nop
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
	...

08008b50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7fe fd05 	bl	800756e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	6812      	ldr	r2, [r2, #0]
 8008b72:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b76:	f043 0301 	orr.w	r3, r3, #1
 8008b7a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a1b      	ldr	r3, [r3, #32]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d005      	beq.n	8008b90 <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b84:	4b04      	ldr	r3, [pc, #16]	; (8008b98 <HAL_PCD_SuspendCallback+0x48>)
 8008b86:	691b      	ldr	r3, [r3, #16]
 8008b88:	4a03      	ldr	r2, [pc, #12]	; (8008b98 <HAL_PCD_SuspendCallback+0x48>)
 8008b8a:	f043 0306 	orr.w	r3, r3, #6
 8008b8e:	6113      	str	r3, [r2, #16]
    }
  /* USER CODE END 2 */
}
 8008b90:	bf00      	nop
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	e000ed00 	.word	0xe000ed00

08008b9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7fe fcf5 	bl	800759a <USBD_LL_Resume>
}
 8008bb0:	bf00      	nop
 8008bb2:	3708      	adds	r7, #8
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bca:	78fa      	ldrb	r2, [r7, #3]
 8008bcc:	4611      	mov	r1, r2
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7fe fd4d 	bl	800766e <USBD_LL_IsoOUTIncomplete>
}
 8008bd4:	bf00      	nop
 8008bd6:	3708      	adds	r7, #8
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	460b      	mov	r3, r1
 8008be6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bee:	78fa      	ldrb	r2, [r7, #3]
 8008bf0:	4611      	mov	r1, r2
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7fe fd09 	bl	800760a <USBD_LL_IsoINIncomplete>
}
 8008bf8:	bf00      	nop
 8008bfa:	3708      	adds	r7, #8
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7fe fd5f 	bl	80076d2 <USBD_LL_DevConnected>
}
 8008c14:	bf00      	nop
 8008c16:	3708      	adds	r7, #8
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7fe fd5c 	bl	80076e8 <USBD_LL_DevDisconnected>
}
 8008c30:	bf00      	nop
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d13c      	bne.n	8008cc2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008c48:	4a20      	ldr	r2, [pc, #128]	; (8008ccc <USBD_LL_Init+0x94>)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	4a1e      	ldr	r2, [pc, #120]	; (8008ccc <USBD_LL_Init+0x94>)
 8008c54:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008c58:	4b1c      	ldr	r3, [pc, #112]	; (8008ccc <USBD_LL_Init+0x94>)
 8008c5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008c5e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008c60:	4b1a      	ldr	r3, [pc, #104]	; (8008ccc <USBD_LL_Init+0x94>)
 8008c62:	2204      	movs	r2, #4
 8008c64:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008c66:	4b19      	ldr	r3, [pc, #100]	; (8008ccc <USBD_LL_Init+0x94>)
 8008c68:	2202      	movs	r2, #2
 8008c6a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008c6c:	4b17      	ldr	r3, [pc, #92]	; (8008ccc <USBD_LL_Init+0x94>)
 8008c6e:	2200      	movs	r2, #0
 8008c70:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008c72:	4b16      	ldr	r3, [pc, #88]	; (8008ccc <USBD_LL_Init+0x94>)
 8008c74:	2202      	movs	r2, #2
 8008c76:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008c78:	4b14      	ldr	r3, [pc, #80]	; (8008ccc <USBD_LL_Init+0x94>)
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008c7e:	4b13      	ldr	r3, [pc, #76]	; (8008ccc <USBD_LL_Init+0x94>)
 8008c80:	2200      	movs	r2, #0
 8008c82:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008c84:	4b11      	ldr	r3, [pc, #68]	; (8008ccc <USBD_LL_Init+0x94>)
 8008c86:	2200      	movs	r2, #0
 8008c88:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008c8a:	4b10      	ldr	r3, [pc, #64]	; (8008ccc <USBD_LL_Init+0x94>)
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008c90:	4b0e      	ldr	r3, [pc, #56]	; (8008ccc <USBD_LL_Init+0x94>)
 8008c92:	2200      	movs	r2, #0
 8008c94:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008c96:	480d      	ldr	r0, [pc, #52]	; (8008ccc <USBD_LL_Init+0x94>)
 8008c98:	f7f9 fedf 	bl	8002a5a <HAL_PCD_Init>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d001      	beq.n	8008ca6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008ca2:	f7f7 fe83 	bl	80009ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008ca6:	2180      	movs	r1, #128	; 0x80
 8008ca8:	4808      	ldr	r0, [pc, #32]	; (8008ccc <USBD_LL_Init+0x94>)
 8008caa:	f7fb f936 	bl	8003f1a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008cae:	2240      	movs	r2, #64	; 0x40
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	4806      	ldr	r0, [pc, #24]	; (8008ccc <USBD_LL_Init+0x94>)
 8008cb4:	f7fb f8ea 	bl	8003e8c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008cb8:	2280      	movs	r2, #128	; 0x80
 8008cba:	2101      	movs	r1, #1
 8008cbc:	4803      	ldr	r0, [pc, #12]	; (8008ccc <USBD_LL_Init+0x94>)
 8008cbe:	f7fb f8e5 	bl	8003e8c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3708      	adds	r7, #8
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	20000f4c 	.word	0x20000f4c

08008cd0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7f9 ffd4 	bl	8002c94 <HAL_PCD_Start>
 8008cec:	4603      	mov	r3, r0
 8008cee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cf0:	7bfb      	ldrb	r3, [r7, #15]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f000 f942 	bl	8008f7c <USBD_Get_USB_Status>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b084      	sub	sp, #16
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
 8008d0e:	4608      	mov	r0, r1
 8008d10:	4611      	mov	r1, r2
 8008d12:	461a      	mov	r2, r3
 8008d14:	4603      	mov	r3, r0
 8008d16:	70fb      	strb	r3, [r7, #3]
 8008d18:	460b      	mov	r3, r1
 8008d1a:	70bb      	strb	r3, [r7, #2]
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d20:	2300      	movs	r3, #0
 8008d22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d24:	2300      	movs	r3, #0
 8008d26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008d2e:	78bb      	ldrb	r3, [r7, #2]
 8008d30:	883a      	ldrh	r2, [r7, #0]
 8008d32:	78f9      	ldrb	r1, [r7, #3]
 8008d34:	f7fa fca5 	bl	8003682 <HAL_PCD_EP_Open>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d3c:	7bfb      	ldrb	r3, [r7, #15]
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f000 f91c 	bl	8008f7c <USBD_Get_USB_Status>
 8008d44:	4603      	mov	r3, r0
 8008d46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d48:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b084      	sub	sp, #16
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d62:	2300      	movs	r3, #0
 8008d64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d6c:	78fa      	ldrb	r2, [r7, #3]
 8008d6e:	4611      	mov	r1, r2
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7fa fcee 	bl	8003752 <HAL_PCD_EP_Close>
 8008d76:	4603      	mov	r3, r0
 8008d78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d7a:	7bfb      	ldrb	r3, [r7, #15]
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f000 f8fd 	bl	8008f7c <USBD_Get_USB_Status>
 8008d82:	4603      	mov	r3, r0
 8008d84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d86:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3710      	adds	r7, #16
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	460b      	mov	r3, r1
 8008d9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008da0:	2300      	movs	r3, #0
 8008da2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008daa:	78fa      	ldrb	r2, [r7, #3]
 8008dac:	4611      	mov	r1, r2
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7fa fdc6 	bl	8003940 <HAL_PCD_EP_SetStall>
 8008db4:	4603      	mov	r3, r0
 8008db6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008db8:	7bfb      	ldrb	r3, [r7, #15]
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f000 f8de 	bl	8008f7c <USBD_Get_USB_Status>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b084      	sub	sp, #16
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dde:	2300      	movs	r3, #0
 8008de0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008de8:	78fa      	ldrb	r2, [r7, #3]
 8008dea:	4611      	mov	r1, r2
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7fa fe0b 	bl	8003a08 <HAL_PCD_EP_ClrStall>
 8008df2:	4603      	mov	r3, r0
 8008df4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008df6:	7bfb      	ldrb	r3, [r7, #15]
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f000 f8bf 	bl	8008f7c <USBD_Get_USB_Status>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e02:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3710      	adds	r7, #16
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b085      	sub	sp, #20
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	460b      	mov	r3, r1
 8008e16:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e1e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008e20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	da0b      	bge.n	8008e40 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008e28:	78fb      	ldrb	r3, [r7, #3]
 8008e2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e2e:	68f9      	ldr	r1, [r7, #12]
 8008e30:	4613      	mov	r3, r2
 8008e32:	00db      	lsls	r3, r3, #3
 8008e34:	4413      	add	r3, r2
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	440b      	add	r3, r1
 8008e3a:	333e      	adds	r3, #62	; 0x3e
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	e00b      	b.n	8008e58 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008e40:	78fb      	ldrb	r3, [r7, #3]
 8008e42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e46:	68f9      	ldr	r1, [r7, #12]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	00db      	lsls	r3, r3, #3
 8008e4c:	4413      	add	r3, r2
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	440b      	add	r3, r1
 8008e52:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008e56:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3714      	adds	r7, #20
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e70:	2300      	movs	r3, #0
 8008e72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e74:	2300      	movs	r3, #0
 8008e76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e7e:	78fa      	ldrb	r2, [r7, #3]
 8008e80:	4611      	mov	r1, r2
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7fa fbd8 	bl	8003638 <HAL_PCD_SetAddress>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e8c:	7bfb      	ldrb	r3, [r7, #15]
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f000 f874 	bl	8008f7c <USBD_Get_USB_Status>
 8008e94:	4603      	mov	r3, r0
 8008e96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e98:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b086      	sub	sp, #24
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	60f8      	str	r0, [r7, #12]
 8008eaa:	607a      	str	r2, [r7, #4]
 8008eac:	603b      	str	r3, [r7, #0]
 8008eae:	460b      	mov	r3, r1
 8008eb0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008ec0:	7af9      	ldrb	r1, [r7, #11]
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	f7fa fcf1 	bl	80038ac <HAL_PCD_EP_Transmit>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ece:	7dfb      	ldrb	r3, [r7, #23]
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f000 f853 	bl	8008f7c <USBD_Get_USB_Status>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008eda:	7dbb      	ldrb	r3, [r7, #22]
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3718      	adds	r7, #24
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b086      	sub	sp, #24
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	607a      	str	r2, [r7, #4]
 8008eee:	603b      	str	r3, [r7, #0]
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008f02:	7af9      	ldrb	r1, [r7, #11]
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	f7fa fc6d 	bl	80037e6 <HAL_PCD_EP_Receive>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f10:	7dfb      	ldrb	r3, [r7, #23]
 8008f12:	4618      	mov	r0, r3
 8008f14:	f000 f832 	bl	8008f7c <USBD_Get_USB_Status>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f1c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3718      	adds	r7, #24
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b082      	sub	sp, #8
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
 8008f2e:	460b      	mov	r3, r1
 8008f30:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f38:	78fa      	ldrb	r2, [r7, #3]
 8008f3a:	4611      	mov	r1, r2
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7fa fc9d 	bl	800387c <HAL_PCD_EP_GetRxCount>
 8008f42:	4603      	mov	r3, r0
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3708      	adds	r7, #8
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008f54:	4b03      	ldr	r3, [pc, #12]	; (8008f64 <USBD_static_malloc+0x18>)
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	370c      	adds	r7, #12
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	20001458 	.word	0x20001458

08008f68 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]

}
 8008f70:	bf00      	nop
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b085      	sub	sp, #20
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	4603      	mov	r3, r0
 8008f84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f86:	2300      	movs	r3, #0
 8008f88:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008f8a:	79fb      	ldrb	r3, [r7, #7]
 8008f8c:	2b03      	cmp	r3, #3
 8008f8e:	d817      	bhi.n	8008fc0 <USBD_Get_USB_Status+0x44>
 8008f90:	a201      	add	r2, pc, #4	; (adr r2, 8008f98 <USBD_Get_USB_Status+0x1c>)
 8008f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f96:	bf00      	nop
 8008f98:	08008fa9 	.word	0x08008fa9
 8008f9c:	08008faf 	.word	0x08008faf
 8008fa0:	08008fb5 	.word	0x08008fb5
 8008fa4:	08008fbb 	.word	0x08008fbb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	73fb      	strb	r3, [r7, #15]
    break;
 8008fac:	e00b      	b.n	8008fc6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008fae:	2303      	movs	r3, #3
 8008fb0:	73fb      	strb	r3, [r7, #15]
    break;
 8008fb2:	e008      	b.n	8008fc6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	73fb      	strb	r3, [r7, #15]
    break;
 8008fb8:	e005      	b.n	8008fc6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008fba:	2303      	movs	r3, #3
 8008fbc:	73fb      	strb	r3, [r7, #15]
    break;
 8008fbe:	e002      	b.n	8008fc6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008fc0:	2303      	movs	r3, #3
 8008fc2:	73fb      	strb	r3, [r7, #15]
    break;
 8008fc4:	bf00      	nop
  }
  return usb_status;
 8008fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3714      	adds	r7, #20
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <malloc>:
 8008fd4:	4b02      	ldr	r3, [pc, #8]	; (8008fe0 <malloc+0xc>)
 8008fd6:	4601      	mov	r1, r0
 8008fd8:	6818      	ldr	r0, [r3, #0]
 8008fda:	f000 b82b 	b.w	8009034 <_malloc_r>
 8008fde:	bf00      	nop
 8008fe0:	20000148 	.word	0x20000148

08008fe4 <free>:
 8008fe4:	4b02      	ldr	r3, [pc, #8]	; (8008ff0 <free+0xc>)
 8008fe6:	4601      	mov	r1, r0
 8008fe8:	6818      	ldr	r0, [r3, #0]
 8008fea:	f000 b913 	b.w	8009214 <_free_r>
 8008fee:	bf00      	nop
 8008ff0:	20000148 	.word	0x20000148

08008ff4 <sbrk_aligned>:
 8008ff4:	b570      	push	{r4, r5, r6, lr}
 8008ff6:	4e0e      	ldr	r6, [pc, #56]	; (8009030 <sbrk_aligned+0x3c>)
 8008ff8:	460c      	mov	r4, r1
 8008ffa:	6831      	ldr	r1, [r6, #0]
 8008ffc:	4605      	mov	r5, r0
 8008ffe:	b911      	cbnz	r1, 8009006 <sbrk_aligned+0x12>
 8009000:	f000 f8cc 	bl	800919c <_sbrk_r>
 8009004:	6030      	str	r0, [r6, #0]
 8009006:	4621      	mov	r1, r4
 8009008:	4628      	mov	r0, r5
 800900a:	f000 f8c7 	bl	800919c <_sbrk_r>
 800900e:	1c43      	adds	r3, r0, #1
 8009010:	d00a      	beq.n	8009028 <sbrk_aligned+0x34>
 8009012:	1cc4      	adds	r4, r0, #3
 8009014:	f024 0403 	bic.w	r4, r4, #3
 8009018:	42a0      	cmp	r0, r4
 800901a:	d007      	beq.n	800902c <sbrk_aligned+0x38>
 800901c:	1a21      	subs	r1, r4, r0
 800901e:	4628      	mov	r0, r5
 8009020:	f000 f8bc 	bl	800919c <_sbrk_r>
 8009024:	3001      	adds	r0, #1
 8009026:	d101      	bne.n	800902c <sbrk_aligned+0x38>
 8009028:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800902c:	4620      	mov	r0, r4
 800902e:	bd70      	pop	{r4, r5, r6, pc}
 8009030:	2000167c 	.word	0x2000167c

08009034 <_malloc_r>:
 8009034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009038:	1ccd      	adds	r5, r1, #3
 800903a:	f025 0503 	bic.w	r5, r5, #3
 800903e:	3508      	adds	r5, #8
 8009040:	2d0c      	cmp	r5, #12
 8009042:	bf38      	it	cc
 8009044:	250c      	movcc	r5, #12
 8009046:	2d00      	cmp	r5, #0
 8009048:	4607      	mov	r7, r0
 800904a:	db01      	blt.n	8009050 <_malloc_r+0x1c>
 800904c:	42a9      	cmp	r1, r5
 800904e:	d905      	bls.n	800905c <_malloc_r+0x28>
 8009050:	230c      	movs	r3, #12
 8009052:	603b      	str	r3, [r7, #0]
 8009054:	2600      	movs	r6, #0
 8009056:	4630      	mov	r0, r6
 8009058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800905c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009130 <_malloc_r+0xfc>
 8009060:	f000 f868 	bl	8009134 <__malloc_lock>
 8009064:	f8d8 3000 	ldr.w	r3, [r8]
 8009068:	461c      	mov	r4, r3
 800906a:	bb5c      	cbnz	r4, 80090c4 <_malloc_r+0x90>
 800906c:	4629      	mov	r1, r5
 800906e:	4638      	mov	r0, r7
 8009070:	f7ff ffc0 	bl	8008ff4 <sbrk_aligned>
 8009074:	1c43      	adds	r3, r0, #1
 8009076:	4604      	mov	r4, r0
 8009078:	d155      	bne.n	8009126 <_malloc_r+0xf2>
 800907a:	f8d8 4000 	ldr.w	r4, [r8]
 800907e:	4626      	mov	r6, r4
 8009080:	2e00      	cmp	r6, #0
 8009082:	d145      	bne.n	8009110 <_malloc_r+0xdc>
 8009084:	2c00      	cmp	r4, #0
 8009086:	d048      	beq.n	800911a <_malloc_r+0xe6>
 8009088:	6823      	ldr	r3, [r4, #0]
 800908a:	4631      	mov	r1, r6
 800908c:	4638      	mov	r0, r7
 800908e:	eb04 0903 	add.w	r9, r4, r3
 8009092:	f000 f883 	bl	800919c <_sbrk_r>
 8009096:	4581      	cmp	r9, r0
 8009098:	d13f      	bne.n	800911a <_malloc_r+0xe6>
 800909a:	6821      	ldr	r1, [r4, #0]
 800909c:	1a6d      	subs	r5, r5, r1
 800909e:	4629      	mov	r1, r5
 80090a0:	4638      	mov	r0, r7
 80090a2:	f7ff ffa7 	bl	8008ff4 <sbrk_aligned>
 80090a6:	3001      	adds	r0, #1
 80090a8:	d037      	beq.n	800911a <_malloc_r+0xe6>
 80090aa:	6823      	ldr	r3, [r4, #0]
 80090ac:	442b      	add	r3, r5
 80090ae:	6023      	str	r3, [r4, #0]
 80090b0:	f8d8 3000 	ldr.w	r3, [r8]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d038      	beq.n	800912a <_malloc_r+0xf6>
 80090b8:	685a      	ldr	r2, [r3, #4]
 80090ba:	42a2      	cmp	r2, r4
 80090bc:	d12b      	bne.n	8009116 <_malloc_r+0xe2>
 80090be:	2200      	movs	r2, #0
 80090c0:	605a      	str	r2, [r3, #4]
 80090c2:	e00f      	b.n	80090e4 <_malloc_r+0xb0>
 80090c4:	6822      	ldr	r2, [r4, #0]
 80090c6:	1b52      	subs	r2, r2, r5
 80090c8:	d41f      	bmi.n	800910a <_malloc_r+0xd6>
 80090ca:	2a0b      	cmp	r2, #11
 80090cc:	d917      	bls.n	80090fe <_malloc_r+0xca>
 80090ce:	1961      	adds	r1, r4, r5
 80090d0:	42a3      	cmp	r3, r4
 80090d2:	6025      	str	r5, [r4, #0]
 80090d4:	bf18      	it	ne
 80090d6:	6059      	strne	r1, [r3, #4]
 80090d8:	6863      	ldr	r3, [r4, #4]
 80090da:	bf08      	it	eq
 80090dc:	f8c8 1000 	streq.w	r1, [r8]
 80090e0:	5162      	str	r2, [r4, r5]
 80090e2:	604b      	str	r3, [r1, #4]
 80090e4:	4638      	mov	r0, r7
 80090e6:	f104 060b 	add.w	r6, r4, #11
 80090ea:	f000 f829 	bl	8009140 <__malloc_unlock>
 80090ee:	f026 0607 	bic.w	r6, r6, #7
 80090f2:	1d23      	adds	r3, r4, #4
 80090f4:	1af2      	subs	r2, r6, r3
 80090f6:	d0ae      	beq.n	8009056 <_malloc_r+0x22>
 80090f8:	1b9b      	subs	r3, r3, r6
 80090fa:	50a3      	str	r3, [r4, r2]
 80090fc:	e7ab      	b.n	8009056 <_malloc_r+0x22>
 80090fe:	42a3      	cmp	r3, r4
 8009100:	6862      	ldr	r2, [r4, #4]
 8009102:	d1dd      	bne.n	80090c0 <_malloc_r+0x8c>
 8009104:	f8c8 2000 	str.w	r2, [r8]
 8009108:	e7ec      	b.n	80090e4 <_malloc_r+0xb0>
 800910a:	4623      	mov	r3, r4
 800910c:	6864      	ldr	r4, [r4, #4]
 800910e:	e7ac      	b.n	800906a <_malloc_r+0x36>
 8009110:	4634      	mov	r4, r6
 8009112:	6876      	ldr	r6, [r6, #4]
 8009114:	e7b4      	b.n	8009080 <_malloc_r+0x4c>
 8009116:	4613      	mov	r3, r2
 8009118:	e7cc      	b.n	80090b4 <_malloc_r+0x80>
 800911a:	230c      	movs	r3, #12
 800911c:	603b      	str	r3, [r7, #0]
 800911e:	4638      	mov	r0, r7
 8009120:	f000 f80e 	bl	8009140 <__malloc_unlock>
 8009124:	e797      	b.n	8009056 <_malloc_r+0x22>
 8009126:	6025      	str	r5, [r4, #0]
 8009128:	e7dc      	b.n	80090e4 <_malloc_r+0xb0>
 800912a:	605b      	str	r3, [r3, #4]
 800912c:	deff      	udf	#255	; 0xff
 800912e:	bf00      	nop
 8009130:	20001678 	.word	0x20001678

08009134 <__malloc_lock>:
 8009134:	4801      	ldr	r0, [pc, #4]	; (800913c <__malloc_lock+0x8>)
 8009136:	f000 b86b 	b.w	8009210 <__retarget_lock_acquire_recursive>
 800913a:	bf00      	nop
 800913c:	200017bc 	.word	0x200017bc

08009140 <__malloc_unlock>:
 8009140:	4801      	ldr	r0, [pc, #4]	; (8009148 <__malloc_unlock+0x8>)
 8009142:	f000 b866 	b.w	8009212 <__retarget_lock_release_recursive>
 8009146:	bf00      	nop
 8009148:	200017bc 	.word	0x200017bc

0800914c <siprintf>:
 800914c:	b40e      	push	{r1, r2, r3}
 800914e:	b500      	push	{lr}
 8009150:	b09c      	sub	sp, #112	; 0x70
 8009152:	ab1d      	add	r3, sp, #116	; 0x74
 8009154:	9002      	str	r0, [sp, #8]
 8009156:	9006      	str	r0, [sp, #24]
 8009158:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800915c:	4809      	ldr	r0, [pc, #36]	; (8009184 <siprintf+0x38>)
 800915e:	9107      	str	r1, [sp, #28]
 8009160:	9104      	str	r1, [sp, #16]
 8009162:	4909      	ldr	r1, [pc, #36]	; (8009188 <siprintf+0x3c>)
 8009164:	f853 2b04 	ldr.w	r2, [r3], #4
 8009168:	9105      	str	r1, [sp, #20]
 800916a:	6800      	ldr	r0, [r0, #0]
 800916c:	9301      	str	r3, [sp, #4]
 800916e:	a902      	add	r1, sp, #8
 8009170:	f000 f8f6 	bl	8009360 <_svfiprintf_r>
 8009174:	9b02      	ldr	r3, [sp, #8]
 8009176:	2200      	movs	r2, #0
 8009178:	701a      	strb	r2, [r3, #0]
 800917a:	b01c      	add	sp, #112	; 0x70
 800917c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009180:	b003      	add	sp, #12
 8009182:	4770      	bx	lr
 8009184:	20000148 	.word	0x20000148
 8009188:	ffff0208 	.word	0xffff0208

0800918c <memset>:
 800918c:	4402      	add	r2, r0
 800918e:	4603      	mov	r3, r0
 8009190:	4293      	cmp	r3, r2
 8009192:	d100      	bne.n	8009196 <memset+0xa>
 8009194:	4770      	bx	lr
 8009196:	f803 1b01 	strb.w	r1, [r3], #1
 800919a:	e7f9      	b.n	8009190 <memset+0x4>

0800919c <_sbrk_r>:
 800919c:	b538      	push	{r3, r4, r5, lr}
 800919e:	4d06      	ldr	r5, [pc, #24]	; (80091b8 <_sbrk_r+0x1c>)
 80091a0:	2300      	movs	r3, #0
 80091a2:	4604      	mov	r4, r0
 80091a4:	4608      	mov	r0, r1
 80091a6:	602b      	str	r3, [r5, #0]
 80091a8:	f7f7 fd26 	bl	8000bf8 <_sbrk>
 80091ac:	1c43      	adds	r3, r0, #1
 80091ae:	d102      	bne.n	80091b6 <_sbrk_r+0x1a>
 80091b0:	682b      	ldr	r3, [r5, #0]
 80091b2:	b103      	cbz	r3, 80091b6 <_sbrk_r+0x1a>
 80091b4:	6023      	str	r3, [r4, #0]
 80091b6:	bd38      	pop	{r3, r4, r5, pc}
 80091b8:	200017b8 	.word	0x200017b8

080091bc <__errno>:
 80091bc:	4b01      	ldr	r3, [pc, #4]	; (80091c4 <__errno+0x8>)
 80091be:	6818      	ldr	r0, [r3, #0]
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	20000148 	.word	0x20000148

080091c8 <__libc_init_array>:
 80091c8:	b570      	push	{r4, r5, r6, lr}
 80091ca:	4d0d      	ldr	r5, [pc, #52]	; (8009200 <__libc_init_array+0x38>)
 80091cc:	4c0d      	ldr	r4, [pc, #52]	; (8009204 <__libc_init_array+0x3c>)
 80091ce:	1b64      	subs	r4, r4, r5
 80091d0:	10a4      	asrs	r4, r4, #2
 80091d2:	2600      	movs	r6, #0
 80091d4:	42a6      	cmp	r6, r4
 80091d6:	d109      	bne.n	80091ec <__libc_init_array+0x24>
 80091d8:	4d0b      	ldr	r5, [pc, #44]	; (8009208 <__libc_init_array+0x40>)
 80091da:	4c0c      	ldr	r4, [pc, #48]	; (800920c <__libc_init_array+0x44>)
 80091dc:	f000 fbae 	bl	800993c <_init>
 80091e0:	1b64      	subs	r4, r4, r5
 80091e2:	10a4      	asrs	r4, r4, #2
 80091e4:	2600      	movs	r6, #0
 80091e6:	42a6      	cmp	r6, r4
 80091e8:	d105      	bne.n	80091f6 <__libc_init_array+0x2e>
 80091ea:	bd70      	pop	{r4, r5, r6, pc}
 80091ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80091f0:	4798      	blx	r3
 80091f2:	3601      	adds	r6, #1
 80091f4:	e7ee      	b.n	80091d4 <__libc_init_array+0xc>
 80091f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80091fa:	4798      	blx	r3
 80091fc:	3601      	adds	r6, #1
 80091fe:	e7f2      	b.n	80091e6 <__libc_init_array+0x1e>
 8009200:	08009a94 	.word	0x08009a94
 8009204:	08009a94 	.word	0x08009a94
 8009208:	08009a94 	.word	0x08009a94
 800920c:	08009a98 	.word	0x08009a98

08009210 <__retarget_lock_acquire_recursive>:
 8009210:	4770      	bx	lr

08009212 <__retarget_lock_release_recursive>:
 8009212:	4770      	bx	lr

08009214 <_free_r>:
 8009214:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009216:	2900      	cmp	r1, #0
 8009218:	d044      	beq.n	80092a4 <_free_r+0x90>
 800921a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800921e:	9001      	str	r0, [sp, #4]
 8009220:	2b00      	cmp	r3, #0
 8009222:	f1a1 0404 	sub.w	r4, r1, #4
 8009226:	bfb8      	it	lt
 8009228:	18e4      	addlt	r4, r4, r3
 800922a:	f7ff ff83 	bl	8009134 <__malloc_lock>
 800922e:	4a1e      	ldr	r2, [pc, #120]	; (80092a8 <_free_r+0x94>)
 8009230:	9801      	ldr	r0, [sp, #4]
 8009232:	6813      	ldr	r3, [r2, #0]
 8009234:	b933      	cbnz	r3, 8009244 <_free_r+0x30>
 8009236:	6063      	str	r3, [r4, #4]
 8009238:	6014      	str	r4, [r2, #0]
 800923a:	b003      	add	sp, #12
 800923c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009240:	f7ff bf7e 	b.w	8009140 <__malloc_unlock>
 8009244:	42a3      	cmp	r3, r4
 8009246:	d908      	bls.n	800925a <_free_r+0x46>
 8009248:	6825      	ldr	r5, [r4, #0]
 800924a:	1961      	adds	r1, r4, r5
 800924c:	428b      	cmp	r3, r1
 800924e:	bf01      	itttt	eq
 8009250:	6819      	ldreq	r1, [r3, #0]
 8009252:	685b      	ldreq	r3, [r3, #4]
 8009254:	1949      	addeq	r1, r1, r5
 8009256:	6021      	streq	r1, [r4, #0]
 8009258:	e7ed      	b.n	8009236 <_free_r+0x22>
 800925a:	461a      	mov	r2, r3
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	b10b      	cbz	r3, 8009264 <_free_r+0x50>
 8009260:	42a3      	cmp	r3, r4
 8009262:	d9fa      	bls.n	800925a <_free_r+0x46>
 8009264:	6811      	ldr	r1, [r2, #0]
 8009266:	1855      	adds	r5, r2, r1
 8009268:	42a5      	cmp	r5, r4
 800926a:	d10b      	bne.n	8009284 <_free_r+0x70>
 800926c:	6824      	ldr	r4, [r4, #0]
 800926e:	4421      	add	r1, r4
 8009270:	1854      	adds	r4, r2, r1
 8009272:	42a3      	cmp	r3, r4
 8009274:	6011      	str	r1, [r2, #0]
 8009276:	d1e0      	bne.n	800923a <_free_r+0x26>
 8009278:	681c      	ldr	r4, [r3, #0]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	6053      	str	r3, [r2, #4]
 800927e:	440c      	add	r4, r1
 8009280:	6014      	str	r4, [r2, #0]
 8009282:	e7da      	b.n	800923a <_free_r+0x26>
 8009284:	d902      	bls.n	800928c <_free_r+0x78>
 8009286:	230c      	movs	r3, #12
 8009288:	6003      	str	r3, [r0, #0]
 800928a:	e7d6      	b.n	800923a <_free_r+0x26>
 800928c:	6825      	ldr	r5, [r4, #0]
 800928e:	1961      	adds	r1, r4, r5
 8009290:	428b      	cmp	r3, r1
 8009292:	bf04      	itt	eq
 8009294:	6819      	ldreq	r1, [r3, #0]
 8009296:	685b      	ldreq	r3, [r3, #4]
 8009298:	6063      	str	r3, [r4, #4]
 800929a:	bf04      	itt	eq
 800929c:	1949      	addeq	r1, r1, r5
 800929e:	6021      	streq	r1, [r4, #0]
 80092a0:	6054      	str	r4, [r2, #4]
 80092a2:	e7ca      	b.n	800923a <_free_r+0x26>
 80092a4:	b003      	add	sp, #12
 80092a6:	bd30      	pop	{r4, r5, pc}
 80092a8:	20001678 	.word	0x20001678

080092ac <__ssputs_r>:
 80092ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092b0:	688e      	ldr	r6, [r1, #8]
 80092b2:	461f      	mov	r7, r3
 80092b4:	42be      	cmp	r6, r7
 80092b6:	680b      	ldr	r3, [r1, #0]
 80092b8:	4682      	mov	sl, r0
 80092ba:	460c      	mov	r4, r1
 80092bc:	4690      	mov	r8, r2
 80092be:	d82c      	bhi.n	800931a <__ssputs_r+0x6e>
 80092c0:	898a      	ldrh	r2, [r1, #12]
 80092c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80092c6:	d026      	beq.n	8009316 <__ssputs_r+0x6a>
 80092c8:	6965      	ldr	r5, [r4, #20]
 80092ca:	6909      	ldr	r1, [r1, #16]
 80092cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80092d0:	eba3 0901 	sub.w	r9, r3, r1
 80092d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80092d8:	1c7b      	adds	r3, r7, #1
 80092da:	444b      	add	r3, r9
 80092dc:	106d      	asrs	r5, r5, #1
 80092de:	429d      	cmp	r5, r3
 80092e0:	bf38      	it	cc
 80092e2:	461d      	movcc	r5, r3
 80092e4:	0553      	lsls	r3, r2, #21
 80092e6:	d527      	bpl.n	8009338 <__ssputs_r+0x8c>
 80092e8:	4629      	mov	r1, r5
 80092ea:	f7ff fea3 	bl	8009034 <_malloc_r>
 80092ee:	4606      	mov	r6, r0
 80092f0:	b360      	cbz	r0, 800934c <__ssputs_r+0xa0>
 80092f2:	6921      	ldr	r1, [r4, #16]
 80092f4:	464a      	mov	r2, r9
 80092f6:	f000 fadb 	bl	80098b0 <memcpy>
 80092fa:	89a3      	ldrh	r3, [r4, #12]
 80092fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009304:	81a3      	strh	r3, [r4, #12]
 8009306:	6126      	str	r6, [r4, #16]
 8009308:	6165      	str	r5, [r4, #20]
 800930a:	444e      	add	r6, r9
 800930c:	eba5 0509 	sub.w	r5, r5, r9
 8009310:	6026      	str	r6, [r4, #0]
 8009312:	60a5      	str	r5, [r4, #8]
 8009314:	463e      	mov	r6, r7
 8009316:	42be      	cmp	r6, r7
 8009318:	d900      	bls.n	800931c <__ssputs_r+0x70>
 800931a:	463e      	mov	r6, r7
 800931c:	6820      	ldr	r0, [r4, #0]
 800931e:	4632      	mov	r2, r6
 8009320:	4641      	mov	r1, r8
 8009322:	f000 faab 	bl	800987c <memmove>
 8009326:	68a3      	ldr	r3, [r4, #8]
 8009328:	1b9b      	subs	r3, r3, r6
 800932a:	60a3      	str	r3, [r4, #8]
 800932c:	6823      	ldr	r3, [r4, #0]
 800932e:	4433      	add	r3, r6
 8009330:	6023      	str	r3, [r4, #0]
 8009332:	2000      	movs	r0, #0
 8009334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009338:	462a      	mov	r2, r5
 800933a:	f000 fac7 	bl	80098cc <_realloc_r>
 800933e:	4606      	mov	r6, r0
 8009340:	2800      	cmp	r0, #0
 8009342:	d1e0      	bne.n	8009306 <__ssputs_r+0x5a>
 8009344:	6921      	ldr	r1, [r4, #16]
 8009346:	4650      	mov	r0, sl
 8009348:	f7ff ff64 	bl	8009214 <_free_r>
 800934c:	230c      	movs	r3, #12
 800934e:	f8ca 3000 	str.w	r3, [sl]
 8009352:	89a3      	ldrh	r3, [r4, #12]
 8009354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009358:	81a3      	strh	r3, [r4, #12]
 800935a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800935e:	e7e9      	b.n	8009334 <__ssputs_r+0x88>

08009360 <_svfiprintf_r>:
 8009360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009364:	4698      	mov	r8, r3
 8009366:	898b      	ldrh	r3, [r1, #12]
 8009368:	061b      	lsls	r3, r3, #24
 800936a:	b09d      	sub	sp, #116	; 0x74
 800936c:	4607      	mov	r7, r0
 800936e:	460d      	mov	r5, r1
 8009370:	4614      	mov	r4, r2
 8009372:	d50e      	bpl.n	8009392 <_svfiprintf_r+0x32>
 8009374:	690b      	ldr	r3, [r1, #16]
 8009376:	b963      	cbnz	r3, 8009392 <_svfiprintf_r+0x32>
 8009378:	2140      	movs	r1, #64	; 0x40
 800937a:	f7ff fe5b 	bl	8009034 <_malloc_r>
 800937e:	6028      	str	r0, [r5, #0]
 8009380:	6128      	str	r0, [r5, #16]
 8009382:	b920      	cbnz	r0, 800938e <_svfiprintf_r+0x2e>
 8009384:	230c      	movs	r3, #12
 8009386:	603b      	str	r3, [r7, #0]
 8009388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800938c:	e0d0      	b.n	8009530 <_svfiprintf_r+0x1d0>
 800938e:	2340      	movs	r3, #64	; 0x40
 8009390:	616b      	str	r3, [r5, #20]
 8009392:	2300      	movs	r3, #0
 8009394:	9309      	str	r3, [sp, #36]	; 0x24
 8009396:	2320      	movs	r3, #32
 8009398:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800939c:	f8cd 800c 	str.w	r8, [sp, #12]
 80093a0:	2330      	movs	r3, #48	; 0x30
 80093a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009548 <_svfiprintf_r+0x1e8>
 80093a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093aa:	f04f 0901 	mov.w	r9, #1
 80093ae:	4623      	mov	r3, r4
 80093b0:	469a      	mov	sl, r3
 80093b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093b6:	b10a      	cbz	r2, 80093bc <_svfiprintf_r+0x5c>
 80093b8:	2a25      	cmp	r2, #37	; 0x25
 80093ba:	d1f9      	bne.n	80093b0 <_svfiprintf_r+0x50>
 80093bc:	ebba 0b04 	subs.w	fp, sl, r4
 80093c0:	d00b      	beq.n	80093da <_svfiprintf_r+0x7a>
 80093c2:	465b      	mov	r3, fp
 80093c4:	4622      	mov	r2, r4
 80093c6:	4629      	mov	r1, r5
 80093c8:	4638      	mov	r0, r7
 80093ca:	f7ff ff6f 	bl	80092ac <__ssputs_r>
 80093ce:	3001      	adds	r0, #1
 80093d0:	f000 80a9 	beq.w	8009526 <_svfiprintf_r+0x1c6>
 80093d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093d6:	445a      	add	r2, fp
 80093d8:	9209      	str	r2, [sp, #36]	; 0x24
 80093da:	f89a 3000 	ldrb.w	r3, [sl]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	f000 80a1 	beq.w	8009526 <_svfiprintf_r+0x1c6>
 80093e4:	2300      	movs	r3, #0
 80093e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093ee:	f10a 0a01 	add.w	sl, sl, #1
 80093f2:	9304      	str	r3, [sp, #16]
 80093f4:	9307      	str	r3, [sp, #28]
 80093f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093fa:	931a      	str	r3, [sp, #104]	; 0x68
 80093fc:	4654      	mov	r4, sl
 80093fe:	2205      	movs	r2, #5
 8009400:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009404:	4850      	ldr	r0, [pc, #320]	; (8009548 <_svfiprintf_r+0x1e8>)
 8009406:	f7f6 fef3 	bl	80001f0 <memchr>
 800940a:	9a04      	ldr	r2, [sp, #16]
 800940c:	b9d8      	cbnz	r0, 8009446 <_svfiprintf_r+0xe6>
 800940e:	06d0      	lsls	r0, r2, #27
 8009410:	bf44      	itt	mi
 8009412:	2320      	movmi	r3, #32
 8009414:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009418:	0711      	lsls	r1, r2, #28
 800941a:	bf44      	itt	mi
 800941c:	232b      	movmi	r3, #43	; 0x2b
 800941e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009422:	f89a 3000 	ldrb.w	r3, [sl]
 8009426:	2b2a      	cmp	r3, #42	; 0x2a
 8009428:	d015      	beq.n	8009456 <_svfiprintf_r+0xf6>
 800942a:	9a07      	ldr	r2, [sp, #28]
 800942c:	4654      	mov	r4, sl
 800942e:	2000      	movs	r0, #0
 8009430:	f04f 0c0a 	mov.w	ip, #10
 8009434:	4621      	mov	r1, r4
 8009436:	f811 3b01 	ldrb.w	r3, [r1], #1
 800943a:	3b30      	subs	r3, #48	; 0x30
 800943c:	2b09      	cmp	r3, #9
 800943e:	d94d      	bls.n	80094dc <_svfiprintf_r+0x17c>
 8009440:	b1b0      	cbz	r0, 8009470 <_svfiprintf_r+0x110>
 8009442:	9207      	str	r2, [sp, #28]
 8009444:	e014      	b.n	8009470 <_svfiprintf_r+0x110>
 8009446:	eba0 0308 	sub.w	r3, r0, r8
 800944a:	fa09 f303 	lsl.w	r3, r9, r3
 800944e:	4313      	orrs	r3, r2
 8009450:	9304      	str	r3, [sp, #16]
 8009452:	46a2      	mov	sl, r4
 8009454:	e7d2      	b.n	80093fc <_svfiprintf_r+0x9c>
 8009456:	9b03      	ldr	r3, [sp, #12]
 8009458:	1d19      	adds	r1, r3, #4
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	9103      	str	r1, [sp, #12]
 800945e:	2b00      	cmp	r3, #0
 8009460:	bfbb      	ittet	lt
 8009462:	425b      	neglt	r3, r3
 8009464:	f042 0202 	orrlt.w	r2, r2, #2
 8009468:	9307      	strge	r3, [sp, #28]
 800946a:	9307      	strlt	r3, [sp, #28]
 800946c:	bfb8      	it	lt
 800946e:	9204      	strlt	r2, [sp, #16]
 8009470:	7823      	ldrb	r3, [r4, #0]
 8009472:	2b2e      	cmp	r3, #46	; 0x2e
 8009474:	d10c      	bne.n	8009490 <_svfiprintf_r+0x130>
 8009476:	7863      	ldrb	r3, [r4, #1]
 8009478:	2b2a      	cmp	r3, #42	; 0x2a
 800947a:	d134      	bne.n	80094e6 <_svfiprintf_r+0x186>
 800947c:	9b03      	ldr	r3, [sp, #12]
 800947e:	1d1a      	adds	r2, r3, #4
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	9203      	str	r2, [sp, #12]
 8009484:	2b00      	cmp	r3, #0
 8009486:	bfb8      	it	lt
 8009488:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800948c:	3402      	adds	r4, #2
 800948e:	9305      	str	r3, [sp, #20]
 8009490:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009558 <_svfiprintf_r+0x1f8>
 8009494:	7821      	ldrb	r1, [r4, #0]
 8009496:	2203      	movs	r2, #3
 8009498:	4650      	mov	r0, sl
 800949a:	f7f6 fea9 	bl	80001f0 <memchr>
 800949e:	b138      	cbz	r0, 80094b0 <_svfiprintf_r+0x150>
 80094a0:	9b04      	ldr	r3, [sp, #16]
 80094a2:	eba0 000a 	sub.w	r0, r0, sl
 80094a6:	2240      	movs	r2, #64	; 0x40
 80094a8:	4082      	lsls	r2, r0
 80094aa:	4313      	orrs	r3, r2
 80094ac:	3401      	adds	r4, #1
 80094ae:	9304      	str	r3, [sp, #16]
 80094b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094b4:	4825      	ldr	r0, [pc, #148]	; (800954c <_svfiprintf_r+0x1ec>)
 80094b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094ba:	2206      	movs	r2, #6
 80094bc:	f7f6 fe98 	bl	80001f0 <memchr>
 80094c0:	2800      	cmp	r0, #0
 80094c2:	d038      	beq.n	8009536 <_svfiprintf_r+0x1d6>
 80094c4:	4b22      	ldr	r3, [pc, #136]	; (8009550 <_svfiprintf_r+0x1f0>)
 80094c6:	bb1b      	cbnz	r3, 8009510 <_svfiprintf_r+0x1b0>
 80094c8:	9b03      	ldr	r3, [sp, #12]
 80094ca:	3307      	adds	r3, #7
 80094cc:	f023 0307 	bic.w	r3, r3, #7
 80094d0:	3308      	adds	r3, #8
 80094d2:	9303      	str	r3, [sp, #12]
 80094d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094d6:	4433      	add	r3, r6
 80094d8:	9309      	str	r3, [sp, #36]	; 0x24
 80094da:	e768      	b.n	80093ae <_svfiprintf_r+0x4e>
 80094dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80094e0:	460c      	mov	r4, r1
 80094e2:	2001      	movs	r0, #1
 80094e4:	e7a6      	b.n	8009434 <_svfiprintf_r+0xd4>
 80094e6:	2300      	movs	r3, #0
 80094e8:	3401      	adds	r4, #1
 80094ea:	9305      	str	r3, [sp, #20]
 80094ec:	4619      	mov	r1, r3
 80094ee:	f04f 0c0a 	mov.w	ip, #10
 80094f2:	4620      	mov	r0, r4
 80094f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094f8:	3a30      	subs	r2, #48	; 0x30
 80094fa:	2a09      	cmp	r2, #9
 80094fc:	d903      	bls.n	8009506 <_svfiprintf_r+0x1a6>
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d0c6      	beq.n	8009490 <_svfiprintf_r+0x130>
 8009502:	9105      	str	r1, [sp, #20]
 8009504:	e7c4      	b.n	8009490 <_svfiprintf_r+0x130>
 8009506:	fb0c 2101 	mla	r1, ip, r1, r2
 800950a:	4604      	mov	r4, r0
 800950c:	2301      	movs	r3, #1
 800950e:	e7f0      	b.n	80094f2 <_svfiprintf_r+0x192>
 8009510:	ab03      	add	r3, sp, #12
 8009512:	9300      	str	r3, [sp, #0]
 8009514:	462a      	mov	r2, r5
 8009516:	4b0f      	ldr	r3, [pc, #60]	; (8009554 <_svfiprintf_r+0x1f4>)
 8009518:	a904      	add	r1, sp, #16
 800951a:	4638      	mov	r0, r7
 800951c:	f3af 8000 	nop.w
 8009520:	1c42      	adds	r2, r0, #1
 8009522:	4606      	mov	r6, r0
 8009524:	d1d6      	bne.n	80094d4 <_svfiprintf_r+0x174>
 8009526:	89ab      	ldrh	r3, [r5, #12]
 8009528:	065b      	lsls	r3, r3, #25
 800952a:	f53f af2d 	bmi.w	8009388 <_svfiprintf_r+0x28>
 800952e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009530:	b01d      	add	sp, #116	; 0x74
 8009532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009536:	ab03      	add	r3, sp, #12
 8009538:	9300      	str	r3, [sp, #0]
 800953a:	462a      	mov	r2, r5
 800953c:	4b05      	ldr	r3, [pc, #20]	; (8009554 <_svfiprintf_r+0x1f4>)
 800953e:	a904      	add	r1, sp, #16
 8009540:	4638      	mov	r0, r7
 8009542:	f000 f879 	bl	8009638 <_printf_i>
 8009546:	e7eb      	b.n	8009520 <_svfiprintf_r+0x1c0>
 8009548:	08009a58 	.word	0x08009a58
 800954c:	08009a62 	.word	0x08009a62
 8009550:	00000000 	.word	0x00000000
 8009554:	080092ad 	.word	0x080092ad
 8009558:	08009a5e 	.word	0x08009a5e

0800955c <_printf_common>:
 800955c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009560:	4616      	mov	r6, r2
 8009562:	4699      	mov	r9, r3
 8009564:	688a      	ldr	r2, [r1, #8]
 8009566:	690b      	ldr	r3, [r1, #16]
 8009568:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800956c:	4293      	cmp	r3, r2
 800956e:	bfb8      	it	lt
 8009570:	4613      	movlt	r3, r2
 8009572:	6033      	str	r3, [r6, #0]
 8009574:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009578:	4607      	mov	r7, r0
 800957a:	460c      	mov	r4, r1
 800957c:	b10a      	cbz	r2, 8009582 <_printf_common+0x26>
 800957e:	3301      	adds	r3, #1
 8009580:	6033      	str	r3, [r6, #0]
 8009582:	6823      	ldr	r3, [r4, #0]
 8009584:	0699      	lsls	r1, r3, #26
 8009586:	bf42      	ittt	mi
 8009588:	6833      	ldrmi	r3, [r6, #0]
 800958a:	3302      	addmi	r3, #2
 800958c:	6033      	strmi	r3, [r6, #0]
 800958e:	6825      	ldr	r5, [r4, #0]
 8009590:	f015 0506 	ands.w	r5, r5, #6
 8009594:	d106      	bne.n	80095a4 <_printf_common+0x48>
 8009596:	f104 0a19 	add.w	sl, r4, #25
 800959a:	68e3      	ldr	r3, [r4, #12]
 800959c:	6832      	ldr	r2, [r6, #0]
 800959e:	1a9b      	subs	r3, r3, r2
 80095a0:	42ab      	cmp	r3, r5
 80095a2:	dc26      	bgt.n	80095f2 <_printf_common+0x96>
 80095a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80095a8:	1e13      	subs	r3, r2, #0
 80095aa:	6822      	ldr	r2, [r4, #0]
 80095ac:	bf18      	it	ne
 80095ae:	2301      	movne	r3, #1
 80095b0:	0692      	lsls	r2, r2, #26
 80095b2:	d42b      	bmi.n	800960c <_printf_common+0xb0>
 80095b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095b8:	4649      	mov	r1, r9
 80095ba:	4638      	mov	r0, r7
 80095bc:	47c0      	blx	r8
 80095be:	3001      	adds	r0, #1
 80095c0:	d01e      	beq.n	8009600 <_printf_common+0xa4>
 80095c2:	6823      	ldr	r3, [r4, #0]
 80095c4:	6922      	ldr	r2, [r4, #16]
 80095c6:	f003 0306 	and.w	r3, r3, #6
 80095ca:	2b04      	cmp	r3, #4
 80095cc:	bf02      	ittt	eq
 80095ce:	68e5      	ldreq	r5, [r4, #12]
 80095d0:	6833      	ldreq	r3, [r6, #0]
 80095d2:	1aed      	subeq	r5, r5, r3
 80095d4:	68a3      	ldr	r3, [r4, #8]
 80095d6:	bf0c      	ite	eq
 80095d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095dc:	2500      	movne	r5, #0
 80095de:	4293      	cmp	r3, r2
 80095e0:	bfc4      	itt	gt
 80095e2:	1a9b      	subgt	r3, r3, r2
 80095e4:	18ed      	addgt	r5, r5, r3
 80095e6:	2600      	movs	r6, #0
 80095e8:	341a      	adds	r4, #26
 80095ea:	42b5      	cmp	r5, r6
 80095ec:	d11a      	bne.n	8009624 <_printf_common+0xc8>
 80095ee:	2000      	movs	r0, #0
 80095f0:	e008      	b.n	8009604 <_printf_common+0xa8>
 80095f2:	2301      	movs	r3, #1
 80095f4:	4652      	mov	r2, sl
 80095f6:	4649      	mov	r1, r9
 80095f8:	4638      	mov	r0, r7
 80095fa:	47c0      	blx	r8
 80095fc:	3001      	adds	r0, #1
 80095fe:	d103      	bne.n	8009608 <_printf_common+0xac>
 8009600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009608:	3501      	adds	r5, #1
 800960a:	e7c6      	b.n	800959a <_printf_common+0x3e>
 800960c:	18e1      	adds	r1, r4, r3
 800960e:	1c5a      	adds	r2, r3, #1
 8009610:	2030      	movs	r0, #48	; 0x30
 8009612:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009616:	4422      	add	r2, r4
 8009618:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800961c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009620:	3302      	adds	r3, #2
 8009622:	e7c7      	b.n	80095b4 <_printf_common+0x58>
 8009624:	2301      	movs	r3, #1
 8009626:	4622      	mov	r2, r4
 8009628:	4649      	mov	r1, r9
 800962a:	4638      	mov	r0, r7
 800962c:	47c0      	blx	r8
 800962e:	3001      	adds	r0, #1
 8009630:	d0e6      	beq.n	8009600 <_printf_common+0xa4>
 8009632:	3601      	adds	r6, #1
 8009634:	e7d9      	b.n	80095ea <_printf_common+0x8e>
	...

08009638 <_printf_i>:
 8009638:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800963c:	7e0f      	ldrb	r7, [r1, #24]
 800963e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009640:	2f78      	cmp	r7, #120	; 0x78
 8009642:	4691      	mov	r9, r2
 8009644:	4680      	mov	r8, r0
 8009646:	460c      	mov	r4, r1
 8009648:	469a      	mov	sl, r3
 800964a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800964e:	d807      	bhi.n	8009660 <_printf_i+0x28>
 8009650:	2f62      	cmp	r7, #98	; 0x62
 8009652:	d80a      	bhi.n	800966a <_printf_i+0x32>
 8009654:	2f00      	cmp	r7, #0
 8009656:	f000 80d4 	beq.w	8009802 <_printf_i+0x1ca>
 800965a:	2f58      	cmp	r7, #88	; 0x58
 800965c:	f000 80c0 	beq.w	80097e0 <_printf_i+0x1a8>
 8009660:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009664:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009668:	e03a      	b.n	80096e0 <_printf_i+0xa8>
 800966a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800966e:	2b15      	cmp	r3, #21
 8009670:	d8f6      	bhi.n	8009660 <_printf_i+0x28>
 8009672:	a101      	add	r1, pc, #4	; (adr r1, 8009678 <_printf_i+0x40>)
 8009674:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009678:	080096d1 	.word	0x080096d1
 800967c:	080096e5 	.word	0x080096e5
 8009680:	08009661 	.word	0x08009661
 8009684:	08009661 	.word	0x08009661
 8009688:	08009661 	.word	0x08009661
 800968c:	08009661 	.word	0x08009661
 8009690:	080096e5 	.word	0x080096e5
 8009694:	08009661 	.word	0x08009661
 8009698:	08009661 	.word	0x08009661
 800969c:	08009661 	.word	0x08009661
 80096a0:	08009661 	.word	0x08009661
 80096a4:	080097e9 	.word	0x080097e9
 80096a8:	08009711 	.word	0x08009711
 80096ac:	080097a3 	.word	0x080097a3
 80096b0:	08009661 	.word	0x08009661
 80096b4:	08009661 	.word	0x08009661
 80096b8:	0800980b 	.word	0x0800980b
 80096bc:	08009661 	.word	0x08009661
 80096c0:	08009711 	.word	0x08009711
 80096c4:	08009661 	.word	0x08009661
 80096c8:	08009661 	.word	0x08009661
 80096cc:	080097ab 	.word	0x080097ab
 80096d0:	682b      	ldr	r3, [r5, #0]
 80096d2:	1d1a      	adds	r2, r3, #4
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	602a      	str	r2, [r5, #0]
 80096d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096e0:	2301      	movs	r3, #1
 80096e2:	e09f      	b.n	8009824 <_printf_i+0x1ec>
 80096e4:	6820      	ldr	r0, [r4, #0]
 80096e6:	682b      	ldr	r3, [r5, #0]
 80096e8:	0607      	lsls	r7, r0, #24
 80096ea:	f103 0104 	add.w	r1, r3, #4
 80096ee:	6029      	str	r1, [r5, #0]
 80096f0:	d501      	bpl.n	80096f6 <_printf_i+0xbe>
 80096f2:	681e      	ldr	r6, [r3, #0]
 80096f4:	e003      	b.n	80096fe <_printf_i+0xc6>
 80096f6:	0646      	lsls	r6, r0, #25
 80096f8:	d5fb      	bpl.n	80096f2 <_printf_i+0xba>
 80096fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80096fe:	2e00      	cmp	r6, #0
 8009700:	da03      	bge.n	800970a <_printf_i+0xd2>
 8009702:	232d      	movs	r3, #45	; 0x2d
 8009704:	4276      	negs	r6, r6
 8009706:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800970a:	485a      	ldr	r0, [pc, #360]	; (8009874 <_printf_i+0x23c>)
 800970c:	230a      	movs	r3, #10
 800970e:	e012      	b.n	8009736 <_printf_i+0xfe>
 8009710:	682b      	ldr	r3, [r5, #0]
 8009712:	6820      	ldr	r0, [r4, #0]
 8009714:	1d19      	adds	r1, r3, #4
 8009716:	6029      	str	r1, [r5, #0]
 8009718:	0605      	lsls	r5, r0, #24
 800971a:	d501      	bpl.n	8009720 <_printf_i+0xe8>
 800971c:	681e      	ldr	r6, [r3, #0]
 800971e:	e002      	b.n	8009726 <_printf_i+0xee>
 8009720:	0641      	lsls	r1, r0, #25
 8009722:	d5fb      	bpl.n	800971c <_printf_i+0xe4>
 8009724:	881e      	ldrh	r6, [r3, #0]
 8009726:	4853      	ldr	r0, [pc, #332]	; (8009874 <_printf_i+0x23c>)
 8009728:	2f6f      	cmp	r7, #111	; 0x6f
 800972a:	bf0c      	ite	eq
 800972c:	2308      	moveq	r3, #8
 800972e:	230a      	movne	r3, #10
 8009730:	2100      	movs	r1, #0
 8009732:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009736:	6865      	ldr	r5, [r4, #4]
 8009738:	60a5      	str	r5, [r4, #8]
 800973a:	2d00      	cmp	r5, #0
 800973c:	bfa2      	ittt	ge
 800973e:	6821      	ldrge	r1, [r4, #0]
 8009740:	f021 0104 	bicge.w	r1, r1, #4
 8009744:	6021      	strge	r1, [r4, #0]
 8009746:	b90e      	cbnz	r6, 800974c <_printf_i+0x114>
 8009748:	2d00      	cmp	r5, #0
 800974a:	d04b      	beq.n	80097e4 <_printf_i+0x1ac>
 800974c:	4615      	mov	r5, r2
 800974e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009752:	fb03 6711 	mls	r7, r3, r1, r6
 8009756:	5dc7      	ldrb	r7, [r0, r7]
 8009758:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800975c:	4637      	mov	r7, r6
 800975e:	42bb      	cmp	r3, r7
 8009760:	460e      	mov	r6, r1
 8009762:	d9f4      	bls.n	800974e <_printf_i+0x116>
 8009764:	2b08      	cmp	r3, #8
 8009766:	d10b      	bne.n	8009780 <_printf_i+0x148>
 8009768:	6823      	ldr	r3, [r4, #0]
 800976a:	07de      	lsls	r6, r3, #31
 800976c:	d508      	bpl.n	8009780 <_printf_i+0x148>
 800976e:	6923      	ldr	r3, [r4, #16]
 8009770:	6861      	ldr	r1, [r4, #4]
 8009772:	4299      	cmp	r1, r3
 8009774:	bfde      	ittt	le
 8009776:	2330      	movle	r3, #48	; 0x30
 8009778:	f805 3c01 	strble.w	r3, [r5, #-1]
 800977c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009780:	1b52      	subs	r2, r2, r5
 8009782:	6122      	str	r2, [r4, #16]
 8009784:	f8cd a000 	str.w	sl, [sp]
 8009788:	464b      	mov	r3, r9
 800978a:	aa03      	add	r2, sp, #12
 800978c:	4621      	mov	r1, r4
 800978e:	4640      	mov	r0, r8
 8009790:	f7ff fee4 	bl	800955c <_printf_common>
 8009794:	3001      	adds	r0, #1
 8009796:	d14a      	bne.n	800982e <_printf_i+0x1f6>
 8009798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800979c:	b004      	add	sp, #16
 800979e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097a2:	6823      	ldr	r3, [r4, #0]
 80097a4:	f043 0320 	orr.w	r3, r3, #32
 80097a8:	6023      	str	r3, [r4, #0]
 80097aa:	4833      	ldr	r0, [pc, #204]	; (8009878 <_printf_i+0x240>)
 80097ac:	2778      	movs	r7, #120	; 0x78
 80097ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80097b2:	6823      	ldr	r3, [r4, #0]
 80097b4:	6829      	ldr	r1, [r5, #0]
 80097b6:	061f      	lsls	r7, r3, #24
 80097b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80097bc:	d402      	bmi.n	80097c4 <_printf_i+0x18c>
 80097be:	065f      	lsls	r7, r3, #25
 80097c0:	bf48      	it	mi
 80097c2:	b2b6      	uxthmi	r6, r6
 80097c4:	07df      	lsls	r7, r3, #31
 80097c6:	bf48      	it	mi
 80097c8:	f043 0320 	orrmi.w	r3, r3, #32
 80097cc:	6029      	str	r1, [r5, #0]
 80097ce:	bf48      	it	mi
 80097d0:	6023      	strmi	r3, [r4, #0]
 80097d2:	b91e      	cbnz	r6, 80097dc <_printf_i+0x1a4>
 80097d4:	6823      	ldr	r3, [r4, #0]
 80097d6:	f023 0320 	bic.w	r3, r3, #32
 80097da:	6023      	str	r3, [r4, #0]
 80097dc:	2310      	movs	r3, #16
 80097de:	e7a7      	b.n	8009730 <_printf_i+0xf8>
 80097e0:	4824      	ldr	r0, [pc, #144]	; (8009874 <_printf_i+0x23c>)
 80097e2:	e7e4      	b.n	80097ae <_printf_i+0x176>
 80097e4:	4615      	mov	r5, r2
 80097e6:	e7bd      	b.n	8009764 <_printf_i+0x12c>
 80097e8:	682b      	ldr	r3, [r5, #0]
 80097ea:	6826      	ldr	r6, [r4, #0]
 80097ec:	6961      	ldr	r1, [r4, #20]
 80097ee:	1d18      	adds	r0, r3, #4
 80097f0:	6028      	str	r0, [r5, #0]
 80097f2:	0635      	lsls	r5, r6, #24
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	d501      	bpl.n	80097fc <_printf_i+0x1c4>
 80097f8:	6019      	str	r1, [r3, #0]
 80097fa:	e002      	b.n	8009802 <_printf_i+0x1ca>
 80097fc:	0670      	lsls	r0, r6, #25
 80097fe:	d5fb      	bpl.n	80097f8 <_printf_i+0x1c0>
 8009800:	8019      	strh	r1, [r3, #0]
 8009802:	2300      	movs	r3, #0
 8009804:	6123      	str	r3, [r4, #16]
 8009806:	4615      	mov	r5, r2
 8009808:	e7bc      	b.n	8009784 <_printf_i+0x14c>
 800980a:	682b      	ldr	r3, [r5, #0]
 800980c:	1d1a      	adds	r2, r3, #4
 800980e:	602a      	str	r2, [r5, #0]
 8009810:	681d      	ldr	r5, [r3, #0]
 8009812:	6862      	ldr	r2, [r4, #4]
 8009814:	2100      	movs	r1, #0
 8009816:	4628      	mov	r0, r5
 8009818:	f7f6 fcea 	bl	80001f0 <memchr>
 800981c:	b108      	cbz	r0, 8009822 <_printf_i+0x1ea>
 800981e:	1b40      	subs	r0, r0, r5
 8009820:	6060      	str	r0, [r4, #4]
 8009822:	6863      	ldr	r3, [r4, #4]
 8009824:	6123      	str	r3, [r4, #16]
 8009826:	2300      	movs	r3, #0
 8009828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800982c:	e7aa      	b.n	8009784 <_printf_i+0x14c>
 800982e:	6923      	ldr	r3, [r4, #16]
 8009830:	462a      	mov	r2, r5
 8009832:	4649      	mov	r1, r9
 8009834:	4640      	mov	r0, r8
 8009836:	47d0      	blx	sl
 8009838:	3001      	adds	r0, #1
 800983a:	d0ad      	beq.n	8009798 <_printf_i+0x160>
 800983c:	6823      	ldr	r3, [r4, #0]
 800983e:	079b      	lsls	r3, r3, #30
 8009840:	d413      	bmi.n	800986a <_printf_i+0x232>
 8009842:	68e0      	ldr	r0, [r4, #12]
 8009844:	9b03      	ldr	r3, [sp, #12]
 8009846:	4298      	cmp	r0, r3
 8009848:	bfb8      	it	lt
 800984a:	4618      	movlt	r0, r3
 800984c:	e7a6      	b.n	800979c <_printf_i+0x164>
 800984e:	2301      	movs	r3, #1
 8009850:	4632      	mov	r2, r6
 8009852:	4649      	mov	r1, r9
 8009854:	4640      	mov	r0, r8
 8009856:	47d0      	blx	sl
 8009858:	3001      	adds	r0, #1
 800985a:	d09d      	beq.n	8009798 <_printf_i+0x160>
 800985c:	3501      	adds	r5, #1
 800985e:	68e3      	ldr	r3, [r4, #12]
 8009860:	9903      	ldr	r1, [sp, #12]
 8009862:	1a5b      	subs	r3, r3, r1
 8009864:	42ab      	cmp	r3, r5
 8009866:	dcf2      	bgt.n	800984e <_printf_i+0x216>
 8009868:	e7eb      	b.n	8009842 <_printf_i+0x20a>
 800986a:	2500      	movs	r5, #0
 800986c:	f104 0619 	add.w	r6, r4, #25
 8009870:	e7f5      	b.n	800985e <_printf_i+0x226>
 8009872:	bf00      	nop
 8009874:	08009a69 	.word	0x08009a69
 8009878:	08009a7a 	.word	0x08009a7a

0800987c <memmove>:
 800987c:	4288      	cmp	r0, r1
 800987e:	b510      	push	{r4, lr}
 8009880:	eb01 0402 	add.w	r4, r1, r2
 8009884:	d902      	bls.n	800988c <memmove+0x10>
 8009886:	4284      	cmp	r4, r0
 8009888:	4623      	mov	r3, r4
 800988a:	d807      	bhi.n	800989c <memmove+0x20>
 800988c:	1e43      	subs	r3, r0, #1
 800988e:	42a1      	cmp	r1, r4
 8009890:	d008      	beq.n	80098a4 <memmove+0x28>
 8009892:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009896:	f803 2f01 	strb.w	r2, [r3, #1]!
 800989a:	e7f8      	b.n	800988e <memmove+0x12>
 800989c:	4402      	add	r2, r0
 800989e:	4601      	mov	r1, r0
 80098a0:	428a      	cmp	r2, r1
 80098a2:	d100      	bne.n	80098a6 <memmove+0x2a>
 80098a4:	bd10      	pop	{r4, pc}
 80098a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80098ae:	e7f7      	b.n	80098a0 <memmove+0x24>

080098b0 <memcpy>:
 80098b0:	440a      	add	r2, r1
 80098b2:	4291      	cmp	r1, r2
 80098b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80098b8:	d100      	bne.n	80098bc <memcpy+0xc>
 80098ba:	4770      	bx	lr
 80098bc:	b510      	push	{r4, lr}
 80098be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098c6:	4291      	cmp	r1, r2
 80098c8:	d1f9      	bne.n	80098be <memcpy+0xe>
 80098ca:	bd10      	pop	{r4, pc}

080098cc <_realloc_r>:
 80098cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098d0:	4680      	mov	r8, r0
 80098d2:	4614      	mov	r4, r2
 80098d4:	460e      	mov	r6, r1
 80098d6:	b921      	cbnz	r1, 80098e2 <_realloc_r+0x16>
 80098d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098dc:	4611      	mov	r1, r2
 80098de:	f7ff bba9 	b.w	8009034 <_malloc_r>
 80098e2:	b92a      	cbnz	r2, 80098f0 <_realloc_r+0x24>
 80098e4:	f7ff fc96 	bl	8009214 <_free_r>
 80098e8:	4625      	mov	r5, r4
 80098ea:	4628      	mov	r0, r5
 80098ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098f0:	f000 f81b 	bl	800992a <_malloc_usable_size_r>
 80098f4:	4284      	cmp	r4, r0
 80098f6:	4607      	mov	r7, r0
 80098f8:	d802      	bhi.n	8009900 <_realloc_r+0x34>
 80098fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80098fe:	d812      	bhi.n	8009926 <_realloc_r+0x5a>
 8009900:	4621      	mov	r1, r4
 8009902:	4640      	mov	r0, r8
 8009904:	f7ff fb96 	bl	8009034 <_malloc_r>
 8009908:	4605      	mov	r5, r0
 800990a:	2800      	cmp	r0, #0
 800990c:	d0ed      	beq.n	80098ea <_realloc_r+0x1e>
 800990e:	42bc      	cmp	r4, r7
 8009910:	4622      	mov	r2, r4
 8009912:	4631      	mov	r1, r6
 8009914:	bf28      	it	cs
 8009916:	463a      	movcs	r2, r7
 8009918:	f7ff ffca 	bl	80098b0 <memcpy>
 800991c:	4631      	mov	r1, r6
 800991e:	4640      	mov	r0, r8
 8009920:	f7ff fc78 	bl	8009214 <_free_r>
 8009924:	e7e1      	b.n	80098ea <_realloc_r+0x1e>
 8009926:	4635      	mov	r5, r6
 8009928:	e7df      	b.n	80098ea <_realloc_r+0x1e>

0800992a <_malloc_usable_size_r>:
 800992a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800992e:	1f18      	subs	r0, r3, #4
 8009930:	2b00      	cmp	r3, #0
 8009932:	bfbc      	itt	lt
 8009934:	580b      	ldrlt	r3, [r1, r0]
 8009936:	18c0      	addlt	r0, r0, r3
 8009938:	4770      	bx	lr
	...

0800993c <_init>:
 800993c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993e:	bf00      	nop
 8009940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009942:	bc08      	pop	{r3}
 8009944:	469e      	mov	lr, r3
 8009946:	4770      	bx	lr

08009948 <_fini>:
 8009948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800994a:	bf00      	nop
 800994c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800994e:	bc08      	pop	{r3}
 8009950:	469e      	mov	lr, r3
 8009952:	4770      	bx	lr
