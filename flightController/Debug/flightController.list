
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dac  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08007f40  08007f40  00017f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fc8  08007fc8  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08007fc8  08007fc8  00017fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fd0  08007fd0  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fd0  08007fd0  00017fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fd4  08007fd4  00017fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08007fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015d0  2000014c  08008124  0002014c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000171c  08008124  0002171c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001149f  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031d7  00000000  00000000  0003165e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e78  00000000  00000000  00034838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ae5  00000000  00000000  000356b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018d10  00000000  00000000  00036195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000143a0  00000000  00000000  0004eea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ad11  00000000  00000000  00063245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003de4  00000000  00000000  000edf58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  000f1d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000014c 	.word	0x2000014c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007f28 	.word	0x08007f28

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000150 	.word	0x20000150
 80001d0:	08007f28 	.word	0x08007f28

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b087      	sub	sp, #28
 80004d4:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80004d6:	f000 fad9 	bl	8000a8c <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80004da:	f000 f82f 	bl	800053c <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80004de:	f000 f897 	bl	8000610 <MX_GPIO_Init>
    MX_USB_DEVICE_Init();
 80004e2:	f006 fec5 	bl	8007270 <MX_USB_DEVICE_Init>
    /* USER CODE BEGIN 2 */
    /* USER CODE END 2 */
    char str[17] = "Initialized\r\n";
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <main+0x64>)
 80004e8:	463c      	mov	r4, r7
 80004ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004ec:	c407      	stmia	r4!, {r0, r1, r2}
 80004ee:	8023      	strh	r3, [r4, #0]
 80004f0:	f107 030e 	add.w	r3, r7, #14
 80004f4:	2100      	movs	r1, #0
 80004f6:	460a      	mov	r2, r1
 80004f8:	801a      	strh	r2, [r3, #0]
 80004fa:	460a      	mov	r2, r1
 80004fc:	709a      	strb	r2, [r3, #2]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    while (1) {
        MPU6050_HandleTypeDef_t * hmpu6050 = MPU6050_IMU_Init();
 80004fe:	f000 fa9d 	bl	8000a3c <MPU6050_IMU_Init>
 8000502:	6178      	str	r0, [r7, #20]
        // str[12] = hmpu6050->instance + 48;
        HAL_Delay(1000);
 8000504:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000508:	f000 fb32 	bl	8000b70 <HAL_Delay>

        if (hmpu6050->instance == 1 || hmpu6050->instance == 2) {
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b01      	cmp	r3, #1
 8000512:	d003      	beq.n	800051c <main+0x4c>
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b02      	cmp	r3, #2
 800051a:	d105      	bne.n	8000528 <main+0x58>
            CDC_Transmit_FS(str, 17);
 800051c:	463b      	mov	r3, r7
 800051e:	2111      	movs	r1, #17
 8000520:	4618      	mov	r0, r3
 8000522:	f006 ff63 	bl	80073ec <CDC_Transmit_FS>
 8000526:	e003      	b.n	8000530 <main+0x60>
        } else {
            CDC_Transmit_FS((char *)"Not initialized\r\n", 18);
 8000528:	2112      	movs	r1, #18
 800052a:	4803      	ldr	r0, [pc, #12]	; (8000538 <main+0x68>)
 800052c:	f006 ff5e 	bl	80073ec <CDC_Transmit_FS>
    while (1) {
 8000530:	e7e5      	b.n	80004fe <main+0x2e>
 8000532:	bf00      	nop
 8000534:	08007f54 	.word	0x08007f54
 8000538:	08007f40 	.word	0x08007f40

0800053c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	; 0x50
 8000540:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	; 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f007 fc5c 	bl	8007e08 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	4b28      	ldr	r3, [pc, #160]	; (8000608 <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	4a27      	ldr	r2, [pc, #156]	; (8000608 <SystemClock_Config+0xcc>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	; 0x40
 8000570:	4b25      	ldr	r3, [pc, #148]	; (8000608 <SystemClock_Config+0xcc>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b22      	ldr	r3, [pc, #136]	; (800060c <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000588:	4a20      	ldr	r2, [pc, #128]	; (800060c <SystemClock_Config+0xd0>)
 800058a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b1e      	ldr	r3, [pc, #120]	; (800060c <SystemClock_Config+0xd0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059c:	2301      	movs	r3, #1
 800059e:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a4:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 15;
 80005b0:	230f      	movs	r3, #15
 80005b2:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 144;
 80005b4:	2390      	movs	r3, #144	; 0x90
 80005b6:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005b8:	2304      	movs	r3, #4
 80005ba:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 5;
 80005bc:	2305      	movs	r3, #5
 80005be:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005c0:	f107 0320 	add.w	r3, r7, #32
 80005c4:	4618      	mov	r0, r3
 80005c6:	f002 fdf9 	bl	80031bc <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x98>
        Error_Handler();
 80005d0:	f000 f854 	bl	800067c <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType =
 80005d4:	230f      	movs	r3, #15
 80005d6:	60fb      	str	r3, [r7, #12]
        RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d8:	2302      	movs	r3, #2
 80005da:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e4:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2101      	movs	r1, #1
 80005f0:	4618      	mov	r0, r3
 80005f2:	f003 f85b 	bl	80036ac <HAL_RCC_ClockConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xc4>
        Error_Handler();
 80005fc:	f000 f83e 	bl	800067c <Error_Handler>
    }
}
 8000600:	bf00      	nop
 8000602:	3750      	adds	r7, #80	; 0x50
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40023800 	.word	0x40023800
 800060c:	40007000 	.word	0x40007000

08000610 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	4b17      	ldr	r3, [pc, #92]	; (8000678 <MX_GPIO_Init+0x68>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a16      	ldr	r2, [pc, #88]	; (8000678 <MX_GPIO_Init+0x68>)
 8000620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b14      	ldr	r3, [pc, #80]	; (8000678 <MX_GPIO_Init+0x68>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <MX_GPIO_Init+0x68>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a0f      	ldr	r2, [pc, #60]	; (8000678 <MX_GPIO_Init+0x68>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <MX_GPIO_Init+0x68>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_GPIO_Init+0x68>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a08      	ldr	r2, [pc, #32]	; (8000678 <MX_GPIO_Init+0x68>)
 8000658:	f043 0302 	orr.w	r3, r3, #2
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_GPIO_Init+0x68>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0302 	and.w	r3, r3, #2
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800

0800067c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* USER CODE END Error_Handler_Debug */
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
	...

0800068c <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <HAL_MspInit+0x4c>)
 8000698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800069a:	4a0f      	ldr	r2, [pc, #60]	; (80006d8 <HAL_MspInit+0x4c>)
 800069c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a0:	6453      	str	r3, [r2, #68]	; 0x44
 80006a2:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <HAL_MspInit+0x4c>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <HAL_MspInit+0x4c>)
 80006b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b6:	4a08      	ldr	r2, [pc, #32]	; (80006d8 <HAL_MspInit+0x4c>)
 80006b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006bc:	6413      	str	r3, [r2, #64]	; 0x40
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_MspInit+0x4c>)
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	683b      	ldr	r3, [r7, #0]
    /* System interrupt init*/

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800

080006dc <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef * hi2c) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
    if (hi2c->Instance == I2C1) {
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a19      	ldr	r2, [pc, #100]	; (8000760 <HAL_I2C_MspInit+0x84>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d12b      	bne.n	8000756 <HAL_I2C_MspInit+0x7a>
        /* USER CODE BEGIN I2C1_MspInit 0 */

        /* USER CODE END I2C1_MspInit 0 */

        __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <HAL_I2C_MspInit+0x88>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a17      	ldr	r2, [pc, #92]	; (8000764 <HAL_I2C_MspInit+0x88>)
 8000708:	f043 0302 	orr.w	r3, r3, #2
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <HAL_I2C_MspInit+0x88>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0302 	and.w	r3, r3, #2
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]
        /**I2C1 GPIO Configuration
        PB6     ------> I2C1_SCL
        PB7     ------> I2C1_SDA
        */
        GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 800071a:	23c0      	movs	r3, #192	; 0xc0
 800071c:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800071e:	2312      	movs	r3, #18
 8000720:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000726:	2303      	movs	r3, #3
 8000728:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800072a:	2304      	movs	r3, #4
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	4619      	mov	r1, r3
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <HAL_I2C_MspInit+0x8c>)
 8000736:	f000 fb51 	bl	8000ddc <HAL_GPIO_Init>

        /* Peripheral clock enable */
        __HAL_RCC_I2C1_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <HAL_I2C_MspInit+0x88>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000742:	4a08      	ldr	r2, [pc, #32]	; (8000764 <HAL_I2C_MspInit+0x88>)
 8000744:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000748:	6413      	str	r3, [r2, #64]	; 0x40
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <HAL_I2C_MspInit+0x88>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
        /* USER CODE BEGIN I2C1_MspInit 1 */

        /* USER CODE END I2C1_MspInit 1 */
    }
}
 8000756:	bf00      	nop
 8000758:	3728      	adds	r7, #40	; 0x28
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40005400 	.word	0x40005400
 8000764:	40023800 	.word	0x40023800
 8000768:	40020400 	.word	0x40020400

0800076c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8000770:	e7fe      	b.n	8000770 <NMI_Handler+0x4>

08000772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <HardFault_Handler+0x4>

08000778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <MemManage_Handler+0x4>

0800077e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <BusFault_Handler+0x4>

08000784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <UsageFault_Handler+0x4>

0800078a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b8:	f000 f9ba 	bl	8000b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}

080007c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007c4:	4802      	ldr	r0, [pc, #8]	; (80007d0 <OTG_FS_IRQHandler+0x10>)
 80007c6:	f001 fbcb 	bl	8001f60 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000ea8 	.word	0x20000ea8

080007d4 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007dc:	4a14      	ldr	r2, [pc, #80]	; (8000830 <_sbrk+0x5c>)
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <_sbrk+0x60>)
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 80007e8:	4b13      	ldr	r3, [pc, #76]	; (8000838 <_sbrk+0x64>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d102      	bne.n	80007f6 <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <_sbrk+0x64>)
 80007f2:	4a12      	ldr	r2, [pc, #72]	; (800083c <_sbrk+0x68>)
 80007f4:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <_sbrk+0x64>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4413      	add	r3, r2
 80007fe:	693a      	ldr	r2, [r7, #16]
 8000800:	429a      	cmp	r2, r3
 8000802:	d207      	bcs.n	8000814 <_sbrk+0x40>
        errno = ENOMEM;
 8000804:	f007 fb18 	bl	8007e38 <__errno>
 8000808:	4603      	mov	r3, r0
 800080a:	220c      	movs	r2, #12
 800080c:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 800080e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000812:	e009      	b.n	8000828 <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <_sbrk+0x64>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 800081a:	4b07      	ldr	r3, [pc, #28]	; (8000838 <_sbrk+0x64>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4413      	add	r3, r2
 8000822:	4a05      	ldr	r2, [pc, #20]	; (8000838 <_sbrk+0x64>)
 8000824:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 8000826:	68fb      	ldr	r3, [r7, #12]
}
 8000828:	4618      	mov	r0, r3
 800082a:	3718      	adds	r7, #24
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20010000 	.word	0x20010000
 8000834:	00000400 	.word	0x00000400
 8000838:	20000168 	.word	0x20000168
 800083c:	20001720 	.word	0x20001720

08000840 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <SystemInit+0x20>)
 8000846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800084a:	4a05      	ldr	r2, [pc, #20]	; (8000860 <SystemInit+0x20>)
 800084c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000850:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000864:	f8df d034 	ldr.w	sp, [pc, #52]	; 800089c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000868:	480d      	ldr	r0, [pc, #52]	; (80008a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800086a:	490e      	ldr	r1, [pc, #56]	; (80008a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800086c:	4a0e      	ldr	r2, [pc, #56]	; (80008a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000870:	e002      	b.n	8000878 <LoopCopyDataInit>

08000872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000876:	3304      	adds	r3, #4

08000878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800087c:	d3f9      	bcc.n	8000872 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087e:	4a0b      	ldr	r2, [pc, #44]	; (80008ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000880:	4c0b      	ldr	r4, [pc, #44]	; (80008b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000884:	e001      	b.n	800088a <LoopFillZerobss>

08000886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000888:	3204      	adds	r2, #4

0800088a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800088c:	d3fb      	bcc.n	8000886 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800088e:	f7ff ffd7 	bl	8000840 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000892:	f007 fad7 	bl	8007e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000896:	f7ff fe1b 	bl	80004d0 <main>
  bx  lr
 800089a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800089c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80008a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a4:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 80008a8:	08007fd8 	.word	0x08007fd8
  ldr r2, =_sbss
 80008ac:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 80008b0:	2000171c 	.word	0x2000171c

080008b4 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008b4:	e7fe      	b.n	80008b4 <ADC_IRQHandler>
	...

080008b8 <MX_I2C_Init>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static bool_t MX_I2C_Init(I2C_HandleTypeDef * hi2c) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
    /* BEGIN MODIFY 1*/
    hi2c->Instance = I2C1;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4a14      	ldr	r2, [pc, #80]	; (8000914 <MX_I2C_Init+0x5c>)
 80008c4:	601a      	str	r2, [r3, #0]
    hi2c->Init.ClockSpeed = 400000;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4a13      	ldr	r2, [pc, #76]	; (8000918 <MX_I2C_Init+0x60>)
 80008ca:	605a      	str	r2, [r3, #4]
    hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
    hi2c->Init.OwnAddress1 = 0;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
    hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008de:	611a      	str	r2, [r3, #16]
    hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2200      	movs	r2, #0
 80008e4:	615a      	str	r2, [r3, #20]
    hi2c->Init.OwnAddress2 = 0;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
    hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
    hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
    /* END MODIFY 1 */

    /* BEGIN MODIFY 2 */
    if (HAL_OK != HAL_I2C_Init(hi2c)) {
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f000 fbf3 	bl	80010e4 <HAL_I2C_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_I2C_Init+0x50>
        return false;
 8000904:	2300      	movs	r3, #0
 8000906:	e000      	b.n	800090a <MX_I2C_Init+0x52>
    }

    return true;
 8000908:	2301      	movs	r3, #1
}
 800090a:	4618      	mov	r0, r3
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40005400 	.word	0x40005400
 8000918:	00061a80 	.word	0x00061a80

0800091c <i2c_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
bool_t i2c_Init(MPU6050_HandleTypeDef_t * hmpu6050) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
    uint8_t who_am_I_value;

    /* Set I2C_HandleTypeDef to MPU6050 instance */
    if (hmpu6050->instance == 1) {
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d103      	bne.n	8000934 <i2c_Init+0x18>

        hmpu6050->hi2c = &hi2c;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a13      	ldr	r2, [pc, #76]	; (800097c <i2c_Init+0x60>)
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	e005      	b.n	8000940 <i2c_Init+0x24>
    } else if (hmpu6050->instance == 2) {
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b02      	cmp	r3, #2
 800093a:	d101      	bne.n	8000940 <i2c_Init+0x24>
    	// TODO
        return true;
 800093c:	2301      	movs	r3, #1
 800093e:	e019      	b.n	8000974 <i2c_Init+0x58>
    }

    /* Initialize I2C */
    if(!MX_I2C_Init(hmpu6050->hi2c)) {
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff ffb7 	bl	80008b8 <MX_I2C_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	f083 0301 	eor.w	r3, r3, #1
 8000950:	b2db      	uxtb	r3, r3
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <i2c_Init+0x3e>
    	/* I2C initialization was unsuccessful */
    	return false;
 8000956:	2300      	movs	r3, #0
 8000958:	e00c      	b.n	8000974 <i2c_Init+0x58>
    }

    /* Read IMU device ID */
    i2c_Read(hmpu6050, MPU_6050_DATA_REG_ADDRESS_WHO_AM_I, &who_am_I_value);
 800095a:	f107 030f 	add.w	r3, r7, #15
 800095e:	461a      	mov	r2, r3
 8000960:	2175      	movs	r1, #117	; 0x75
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f000 f80c 	bl	8000980 <i2c_Read>
    /* Check IMU device ID */
    if (who_am_I_value == MPU_6050_DATA_REG_VALUE_WHO_AM_I) {
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	2b68      	cmp	r3, #104	; 0x68
 800096c:	d101      	bne.n	8000972 <i2c_Init+0x56>

    	/* Right IMU device ID */
        return true;
 800096e:	2301      	movs	r3, #1
 8000970:	e000      	b.n	8000974 <i2c_Init+0x58>
    } else {

    	/* Wrong IMU device ID */
        return false;
 8000972:	2300      	movs	r3, #0
    }
}
 8000974:	4618      	mov	r0, r3
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	2000016c 	.word	0x2000016c

08000980 <i2c_Read>:

void i2c_Read(MPU6050_HandleTypeDef_t * hmpu6050, uint8_t reg, uint8_t * buffer) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af04      	add	r7, sp, #16
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	460b      	mov	r3, r1
 800098a:	607a      	str	r2, [r7, #4]
 800098c:	72fb      	strb	r3, [r7, #11]

	/* Read IMU data by passing a data register */
	HAL_I2C_Mem_Read(hmpu6050->hi2c, hmpu6050->address, reg, 1, buffer, 1, MPU_6050_I2C_TIMEOUT);
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	6858      	ldr	r0, [r3, #4]
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	7a1b      	ldrb	r3, [r3, #8]
 8000996:	b299      	uxth	r1, r3
 8000998:	7afb      	ldrb	r3, [r7, #11]
 800099a:	b29a      	uxth	r2, r3
 800099c:	2364      	movs	r3, #100	; 0x64
 800099e:	9302      	str	r3, [sp, #8]
 80009a0:	2301      	movs	r3, #1
 80009a2:	9301      	str	r3, [sp, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	2301      	movs	r3, #1
 80009aa:	f000 fcdf 	bl	800136c <HAL_I2C_Mem_Read>
}
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <MPU6050_IMU_InstanceInit>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static MPU6050_HandleTypeDef_t * MPU6050_IMU_InstanceInit() {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0

    /* Check if driver was already once or twice initialized */
    if (MPU6050_MAX_NUMBER_INSTANCES == instancesNumber) {
 80009be:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <MPU6050_IMU_InstanceInit+0x80>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d101      	bne.n	80009ca <MPU6050_IMU_InstanceInit+0x12>
        return NULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	e032      	b.n	8000a30 <MPU6050_IMU_InstanceInit+0x78>

    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = pvortMalloc(sizeof(1));
#else
    /* Allocate dynamic memory for the MPU6050_HandleTypeDef_t structure */
    MPU6050_HandleTypeDef_t * hmpu6050 = malloc(sizeof(MPU6050_HandleTypeDef_t));
 80009ca:	2014      	movs	r0, #20
 80009cc:	f007 f960 	bl	8007c90 <malloc>
 80009d0:	4603      	mov	r3, r0
 80009d2:	607b      	str	r3, [r7, #4]

    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = malloc(sizeof(1));
 80009d4:	2004      	movs	r0, #4
 80009d6:	f007 f95b 	bl	8007c90 <malloc>
 80009da:	4603      	mov	r3, r0
 80009dc:	603b      	str	r3, [r7, #0]
#endif

    /* Check if dynamic memory allocation was successful */
    if (NULL == hmpu6050 || NULL == buffer) {
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d002      	beq.n	80009ea <MPU6050_IMU_InstanceInit+0x32>
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d109      	bne.n	80009fe <MPU6050_IMU_InstanceInit+0x46>
        /* Free up dynamic allocated memory */
        vPortFree(hmpu6050->buffer);
        vPortFree(hmpu6050);
#else
        /* Free up dynamic allocated memory */
        free(hmpu6050->buffer);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	68db      	ldr	r3, [r3, #12]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f007 f956 	bl	8007ca0 <free>
        free(hmpu6050);
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f007 f953 	bl	8007ca0 <free>
#endif
        return NULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	e018      	b.n	8000a30 <MPU6050_IMU_InstanceInit+0x78>
    } else {
        /* Dynamic memory allocation was successful */

        /* Initialize MPU6050_HandleTypeDef_t structure */
        if (instancesNumber == 0) {
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MPU6050_IMU_InstanceInit+0x80>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d106      	bne.n	8000a14 <MPU6050_IMU_InstanceInit+0x5c>
            hmpu6050->instance = 1;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2201      	movs	r2, #1
 8000a0a:	701a      	strb	r2, [r3, #0]
            hmpu6050->address = MPU6050_I2C_ADDRESS1;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	22d0      	movs	r2, #208	; 0xd0
 8000a10:	721a      	strb	r2, [r3, #8]
 8000a12:	e009      	b.n	8000a28 <MPU6050_IMU_InstanceInit+0x70>
        } else if (instancesNumber == 1) {
 8000a14:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <MPU6050_IMU_InstanceInit+0x80>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d105      	bne.n	8000a28 <MPU6050_IMU_InstanceInit+0x70>
            hmpu6050->instance = 2;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2202      	movs	r2, #2
 8000a20:	701a      	strb	r2, [r3, #0]
            hmpu6050->address = MPU6050_I2C_ADDRESS2;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	22d1      	movs	r2, #209	; 0xd1
 8000a26:	721a      	strb	r2, [r3, #8]
        }
        hmpu6050->buffer = buffer;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	683a      	ldr	r2, [r7, #0]
 8000a2c:	60da      	str	r2, [r3, #12]
    }

    /* Return created instance */
    return hmpu6050;
 8000a2e:	687b      	ldr	r3, [r7, #4]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	200001c0 	.word	0x200001c0

08000a3c <MPU6050_IMU_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
MPU6050_HandleTypeDef_t * MPU6050_IMU_Init() {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0

    /* Create an instance of the MPU6050_IMU device */
    MPU6050_HandleTypeDef_t * hmpu6050 = MPU6050_IMU_InstanceInit();
 8000a42:	f7ff ffb9 	bl	80009b8 <MPU6050_IMU_InstanceInit>
 8000a46:	6078      	str	r0, [r7, #4]

    /* Check if instance was successfully created */
    if (NULL != hmpu6050) {
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d017      	beq.n	8000a7e <MPU6050_IMU_Init+0x42>
        /* Instance was successfully created */

        /* Initialize I2C communication */
        if (i2c_Init(hmpu6050)) {
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f7ff ff64 	bl	800091c <i2c_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d007      	beq.n	8000a6a <MPU6050_IMU_Init+0x2e>

            /* Initialization was successful */
            instancesNumber++;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <MPU6050_IMU_Init+0x4c>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <MPU6050_IMU_Init+0x4c>)
 8000a64:	701a      	strb	r2, [r3, #0]

            return hmpu6050;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	e00a      	b.n	8000a80 <MPU6050_IMU_Init+0x44>
            /* Free up dynamic allocated memory */
            vPortFree(hmpu6050->buffer);
            vPortFree(hmpu6050);
#else
            /* Free up dynamic allocated memory */
            free(hmpu6050->buffer);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f007 f916 	bl	8007ca0 <free>
            free(hmpu6050);
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f007 f913 	bl	8007ca0 <free>
#endif

            return NULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	e000      	b.n	8000a80 <MPU6050_IMU_Init+0x44>
        }
    } else {

        /* Instance couldn't be created */
        return NULL;
 8000a7e:	2300      	movs	r3, #0
    }
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	200001c0 	.word	0x200001c0

08000a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a90:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <HAL_Init+0x40>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a0d      	ldr	r2, [pc, #52]	; (8000acc <HAL_Init+0x40>)
 8000a96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <HAL_Init+0x40>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <HAL_Init+0x40>)
 8000aa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <HAL_Init+0x40>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a07      	ldr	r2, [pc, #28]	; (8000acc <HAL_Init+0x40>)
 8000aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab4:	2003      	movs	r0, #3
 8000ab6:	f000 f94f 	bl	8000d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aba:	200f      	movs	r0, #15
 8000abc:	f000 f808 	bl	8000ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac0:	f7ff fde4 	bl	800068c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023c00 	.word	0x40023c00

08000ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <HAL_InitTick+0x54>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <HAL_InitTick+0x58>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 f967 	bl	8000dc2 <HAL_SYSTICK_Config>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e00e      	b.n	8000b1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2b0f      	cmp	r3, #15
 8000b02:	d80a      	bhi.n	8000b1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b04:	2200      	movs	r2, #0
 8000b06:	6879      	ldr	r1, [r7, #4]
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b0c:	f000 f92f 	bl	8000d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b10:	4a06      	ldr	r2, [pc, #24]	; (8000b2c <HAL_InitTick+0x5c>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b16:	2300      	movs	r3, #0
 8000b18:	e000      	b.n	8000b1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000000 	.word	0x20000000
 8000b28:	20000008 	.word	0x20000008
 8000b2c:	20000004 	.word	0x20000004

08000b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_IncTick+0x20>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_IncTick+0x24>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4413      	add	r3, r2
 8000b40:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <HAL_IncTick+0x24>)
 8000b42:	6013      	str	r3, [r2, #0]
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	20000008 	.word	0x20000008
 8000b54:	200001c4 	.word	0x200001c4

08000b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <HAL_GetTick+0x14>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	200001c4 	.word	0x200001c4

08000b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b78:	f7ff ffee 	bl	8000b58 <HAL_GetTick>
 8000b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b88:	d005      	beq.n	8000b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <HAL_Delay+0x44>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4413      	add	r3, r2
 8000b94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b96:	bf00      	nop
 8000b98:	f7ff ffde 	bl	8000b58 <HAL_GetTick>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d8f7      	bhi.n	8000b98 <HAL_Delay+0x28>
  {
  }
}
 8000ba8:	bf00      	nop
 8000baa:	bf00      	nop
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000008 	.word	0x20000008

08000bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bea:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	60d3      	str	r3, [r2, #12]
}
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <__NVIC_GetPriorityGrouping+0x18>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	0a1b      	lsrs	r3, r3, #8
 8000c0a:	f003 0307 	and.w	r3, r3, #7
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db0b      	blt.n	8000c46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	f003 021f 	and.w	r2, r3, #31
 8000c34:	4907      	ldr	r1, [pc, #28]	; (8000c54 <__NVIC_EnableIRQ+0x38>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	095b      	lsrs	r3, r3, #5
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000e100 	.word	0xe000e100

08000c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db0a      	blt.n	8000c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	490c      	ldr	r1, [pc, #48]	; (8000ca4 <__NVIC_SetPriority+0x4c>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	0112      	lsls	r2, r2, #4
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c80:	e00a      	b.n	8000c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4908      	ldr	r1, [pc, #32]	; (8000ca8 <__NVIC_SetPriority+0x50>)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	761a      	strb	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	; 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f1c3 0307 	rsb	r3, r3, #7
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf28      	it	cs
 8000cca:	2304      	movcs	r3, #4
 8000ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d902      	bls.n	8000cdc <NVIC_EncodePriority+0x30>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3b03      	subs	r3, #3
 8000cda:	e000      	b.n	8000cde <NVIC_EncodePriority+0x32>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43da      	mvns	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43d9      	mvns	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4313      	orrs	r3, r2
         );
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3724      	adds	r7, #36	; 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d24:	d301      	bcc.n	8000d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00f      	b.n	8000d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <SysTick_Config+0x40>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d32:	210f      	movs	r1, #15
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d38:	f7ff ff8e 	bl	8000c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <SysTick_Config+0x40>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d42:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <SysTick_Config+0x40>)
 8000d44:	2207      	movs	r2, #7
 8000d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	e000e010 	.word	0xe000e010

08000d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ff29 	bl	8000bb8 <__NVIC_SetPriorityGrouping>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d80:	f7ff ff3e 	bl	8000c00 <__NVIC_GetPriorityGrouping>
 8000d84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	68b9      	ldr	r1, [r7, #8]
 8000d8a:	6978      	ldr	r0, [r7, #20]
 8000d8c:	f7ff ff8e 	bl	8000cac <NVIC_EncodePriority>
 8000d90:	4602      	mov	r2, r0
 8000d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d96:	4611      	mov	r1, r2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff5d 	bl	8000c58 <__NVIC_SetPriority>
}
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	4603      	mov	r3, r0
 8000dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff31 	bl	8000c1c <__NVIC_EnableIRQ>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff ffa2 	bl	8000d14 <SysTick_Config>
 8000dd0:	4603      	mov	r3, r0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	; 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
 8000df6:	e159      	b.n	80010ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000df8:	2201      	movs	r2, #1
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	f040 8148 	bne.w	80010a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d005      	beq.n	8000e2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d130      	bne.n	8000e90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	2203      	movs	r2, #3
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4013      	ands	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	68da      	ldr	r2, [r3, #12]
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e64:	2201      	movs	r2, #1
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	091b      	lsrs	r3, r3, #4
 8000e7a:	f003 0201 	and.w	r2, r3, #1
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	2b03      	cmp	r3, #3
 8000e9a:	d017      	beq.n	8000ecc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d123      	bne.n	8000f20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	08da      	lsrs	r2, r3, #3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3208      	adds	r2, #8
 8000ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	f003 0307 	and.w	r3, r3, #7
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	220f      	movs	r2, #15
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	691a      	ldr	r2, [r3, #16]
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	08da      	lsrs	r2, r3, #3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	3208      	adds	r2, #8
 8000f1a:	69b9      	ldr	r1, [r7, #24]
 8000f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0203 	and.w	r2, r3, #3
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	f000 80a2 	beq.w	80010a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	4b57      	ldr	r3, [pc, #348]	; (80010c4 <HAL_GPIO_Init+0x2e8>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	4a56      	ldr	r2, [pc, #344]	; (80010c4 <HAL_GPIO_Init+0x2e8>)
 8000f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f70:	6453      	str	r3, [r2, #68]	; 0x44
 8000f72:	4b54      	ldr	r3, [pc, #336]	; (80010c4 <HAL_GPIO_Init+0x2e8>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f7e:	4a52      	ldr	r2, [pc, #328]	; (80010c8 <HAL_GPIO_Init+0x2ec>)
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	3302      	adds	r3, #2
 8000f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	220f      	movs	r2, #15
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a49      	ldr	r2, [pc, #292]	; (80010cc <HAL_GPIO_Init+0x2f0>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d019      	beq.n	8000fde <HAL_GPIO_Init+0x202>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a48      	ldr	r2, [pc, #288]	; (80010d0 <HAL_GPIO_Init+0x2f4>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d013      	beq.n	8000fda <HAL_GPIO_Init+0x1fe>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a47      	ldr	r2, [pc, #284]	; (80010d4 <HAL_GPIO_Init+0x2f8>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d00d      	beq.n	8000fd6 <HAL_GPIO_Init+0x1fa>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a46      	ldr	r2, [pc, #280]	; (80010d8 <HAL_GPIO_Init+0x2fc>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d007      	beq.n	8000fd2 <HAL_GPIO_Init+0x1f6>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a45      	ldr	r2, [pc, #276]	; (80010dc <HAL_GPIO_Init+0x300>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d101      	bne.n	8000fce <HAL_GPIO_Init+0x1f2>
 8000fca:	2304      	movs	r3, #4
 8000fcc:	e008      	b.n	8000fe0 <HAL_GPIO_Init+0x204>
 8000fce:	2307      	movs	r3, #7
 8000fd0:	e006      	b.n	8000fe0 <HAL_GPIO_Init+0x204>
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e004      	b.n	8000fe0 <HAL_GPIO_Init+0x204>
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	e002      	b.n	8000fe0 <HAL_GPIO_Init+0x204>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e000      	b.n	8000fe0 <HAL_GPIO_Init+0x204>
 8000fde:	2300      	movs	r3, #0
 8000fe0:	69fa      	ldr	r2, [r7, #28]
 8000fe2:	f002 0203 	and.w	r2, r2, #3
 8000fe6:	0092      	lsls	r2, r2, #2
 8000fe8:	4093      	lsls	r3, r2
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ff0:	4935      	ldr	r1, [pc, #212]	; (80010c8 <HAL_GPIO_Init+0x2ec>)
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	089b      	lsrs	r3, r3, #2
 8000ff6:	3302      	adds	r3, #2
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ffe:	4b38      	ldr	r3, [pc, #224]	; (80010e0 <HAL_GPIO_Init+0x304>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001022:	4a2f      	ldr	r2, [pc, #188]	; (80010e0 <HAL_GPIO_Init+0x304>)
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001028:	4b2d      	ldr	r3, [pc, #180]	; (80010e0 <HAL_GPIO_Init+0x304>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800104c:	4a24      	ldr	r2, [pc, #144]	; (80010e0 <HAL_GPIO_Init+0x304>)
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001052:	4b23      	ldr	r3, [pc, #140]	; (80010e0 <HAL_GPIO_Init+0x304>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001076:	4a1a      	ldr	r2, [pc, #104]	; (80010e0 <HAL_GPIO_Init+0x304>)
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800107c:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <HAL_GPIO_Init+0x304>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010a0:	4a0f      	ldr	r2, [pc, #60]	; (80010e0 <HAL_GPIO_Init+0x304>)
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3301      	adds	r3, #1
 80010aa:	61fb      	str	r3, [r7, #28]
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	2b0f      	cmp	r3, #15
 80010b0:	f67f aea2 	bls.w	8000df8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3724      	adds	r7, #36	; 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40013800 	.word	0x40013800
 80010cc:	40020000 	.word	0x40020000
 80010d0:	40020400 	.word	0x40020400
 80010d4:	40020800 	.word	0x40020800
 80010d8:	40020c00 	.word	0x40020c00
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40013c00 	.word	0x40013c00

080010e4 <HAL_I2C_Init>:
 *         in the I2C_InitTypeDef and initialize the associated handle.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef * hi2c) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
    uint32_t freqrange;
    uint32_t pclk1;

    /* Check the I2C handle allocation */
    if (hi2c == NULL) {
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d101      	bne.n	80010f6 <HAL_I2C_Init+0x12>
        return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e12b      	b.n	800134e <HAL_I2C_Init+0x26a>
    assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
    assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
    assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
    assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

    if (hi2c->State == HAL_I2C_STATE_RESET) {
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d106      	bne.n	8001110 <HAL_I2C_Init+0x2c>
        /* Allocate lock resource and initialize it */
        hi2c->Lock = HAL_UNLOCKED;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        hi2c->MspInitCallback(hi2c);
#else
        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        HAL_I2C_MspInit(hi2c);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff fae6 	bl	80006dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2224      	movs	r2, #36	; 0x24
 8001114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f022 0201 	bic.w	r2, r2, #1
 8001126:	601a      	str	r2, [r3, #0]

    /*Reset I2C*/
    hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001136:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001146:	601a      	str	r2, [r3, #0]

    /* Get PCLK1 frequency */
    pclk1 = HAL_RCC_GetPCLK1Freq();
 8001148:	f002 fc68 	bl	8003a1c <HAL_RCC_GetPCLK1Freq>
 800114c:	60f8      	str	r0, [r7, #12]

    /* Check the minimum allowed PCLK1 frequency */
    if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U) {
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	4a81      	ldr	r2, [pc, #516]	; (8001358 <HAL_I2C_Init+0x274>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d807      	bhi.n	8001168 <HAL_I2C_Init+0x84>
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4a80      	ldr	r2, [pc, #512]	; (800135c <HAL_I2C_Init+0x278>)
 800115c:	4293      	cmp	r3, r2
 800115e:	bf94      	ite	ls
 8001160:	2301      	movls	r3, #1
 8001162:	2300      	movhi	r3, #0
 8001164:	b2db      	uxtb	r3, r3
 8001166:	e006      	b.n	8001176 <HAL_I2C_Init+0x92>
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4a7d      	ldr	r2, [pc, #500]	; (8001360 <HAL_I2C_Init+0x27c>)
 800116c:	4293      	cmp	r3, r2
 800116e:	bf94      	ite	ls
 8001170:	2301      	movls	r3, #1
 8001172:	2300      	movhi	r3, #0
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_I2C_Init+0x9a>
        return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e0e7      	b.n	800134e <HAL_I2C_Init+0x26a>
    }

    /* Calculate frequency range */
    freqrange = I2C_FREQRANGE(pclk1);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	4a78      	ldr	r2, [pc, #480]	; (8001364 <HAL_I2C_Init+0x280>)
 8001182:	fba2 2303 	umull	r2, r3, r2, r3
 8001186:	0c9b      	lsrs	r3, r3, #18
 8001188:	60bb      	str	r3, [r7, #8]

    /*---------------------------- I2Cx CR2 Configuration ----------------------*/
    /* Configure I2Cx: Frequency range */
    MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	68ba      	ldr	r2, [r7, #8]
 800119a:	430a      	orrs	r2, r1
 800119c:	605a      	str	r2, [r3, #4]

    /*---------------------------- I2Cx TRISE Configuration --------------------*/
    /* Configure I2Cx: Rise Time */
    MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE,
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	6a1b      	ldr	r3, [r3, #32]
 80011a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	4a6a      	ldr	r2, [pc, #424]	; (8001358 <HAL_I2C_Init+0x274>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d802      	bhi.n	80011b8 <HAL_I2C_Init+0xd4>
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	3301      	adds	r3, #1
 80011b6:	e009      	b.n	80011cc <HAL_I2C_Init+0xe8>
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011be:	fb02 f303 	mul.w	r3, r2, r3
 80011c2:	4a69      	ldr	r2, [pc, #420]	; (8001368 <HAL_I2C_Init+0x284>)
 80011c4:	fba2 2303 	umull	r2, r3, r2, r3
 80011c8:	099b      	lsrs	r3, r3, #6
 80011ca:	3301      	adds	r3, #1
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	6812      	ldr	r2, [r2, #0]
 80011d0:	430b      	orrs	r3, r1
 80011d2:	6213      	str	r3, [r2, #32]
               I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

    /*---------------------------- I2Cx CCR Configuration ----------------------*/
    /* Configure I2Cx: Speed */
    MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR),
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80011de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	495c      	ldr	r1, [pc, #368]	; (8001358 <HAL_I2C_Init+0x274>)
 80011e8:	428b      	cmp	r3, r1
 80011ea:	d819      	bhi.n	8001220 <HAL_I2C_Init+0x13c>
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	1e59      	subs	r1, r3, #1
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80011fa:	1c59      	adds	r1, r3, #1
 80011fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001200:	400b      	ands	r3, r1
 8001202:	2b00      	cmp	r3, #0
 8001204:	d00a      	beq.n	800121c <HAL_I2C_Init+0x138>
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	1e59      	subs	r1, r3, #1
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	fbb1 f3f3 	udiv	r3, r1, r3
 8001214:	3301      	adds	r3, #1
 8001216:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800121a:	e051      	b.n	80012c0 <HAL_I2C_Init+0x1dc>
 800121c:	2304      	movs	r3, #4
 800121e:	e04f      	b.n	80012c0 <HAL_I2C_Init+0x1dc>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d111      	bne.n	800124c <HAL_I2C_Init+0x168>
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	1e58      	subs	r0, r3, #1
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6859      	ldr	r1, [r3, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	440b      	add	r3, r1
 8001236:	fbb0 f3f3 	udiv	r3, r0, r3
 800123a:	3301      	adds	r3, #1
 800123c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001240:	2b00      	cmp	r3, #0
 8001242:	bf0c      	ite	eq
 8001244:	2301      	moveq	r3, #1
 8001246:	2300      	movne	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	e012      	b.n	8001272 <HAL_I2C_Init+0x18e>
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	1e58      	subs	r0, r3, #1
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6859      	ldr	r1, [r3, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	0099      	lsls	r1, r3, #2
 800125c:	440b      	add	r3, r1
 800125e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001262:	3301      	adds	r3, #1
 8001264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001268:	2b00      	cmp	r3, #0
 800126a:	bf0c      	ite	eq
 800126c:	2301      	moveq	r3, #1
 800126e:	2300      	movne	r3, #0
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <HAL_I2C_Init+0x196>
 8001276:	2301      	movs	r3, #1
 8001278:	e022      	b.n	80012c0 <HAL_I2C_Init+0x1dc>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10e      	bne.n	80012a0 <HAL_I2C_Init+0x1bc>
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	1e58      	subs	r0, r3, #1
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6859      	ldr	r1, [r3, #4]
 800128a:	460b      	mov	r3, r1
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	440b      	add	r3, r1
 8001290:	fbb0 f3f3 	udiv	r3, r0, r3
 8001294:	3301      	adds	r3, #1
 8001296:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800129a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800129e:	e00f      	b.n	80012c0 <HAL_I2C_Init+0x1dc>
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	1e58      	subs	r0, r3, #1
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6859      	ldr	r1, [r3, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	0099      	lsls	r1, r3, #2
 80012b0:	440b      	add	r3, r1
 80012b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80012b6:	3301      	adds	r3, #1
 80012b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	6809      	ldr	r1, [r1, #0]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61cb      	str	r3, [r1, #28]
               I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));

    /*---------------------------- I2Cx CR1 Configuration ----------------------*/
    /* Configure I2Cx: Generalcall and NoStretch mode */
    MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH),
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69da      	ldr	r2, [r3, #28]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a1b      	ldr	r3, [r3, #32]
 80012da:	431a      	orrs	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	430a      	orrs	r2, r1
 80012e2:	601a      	str	r2, [r3, #0]
               (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));

    /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
    /* Configure I2Cx: Own Address1 and addressing mode */
    MODIFY_REG(hi2c->Instance->OAR1,
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80012ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	6911      	ldr	r1, [r2, #16]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	68d2      	ldr	r2, [r2, #12]
 80012fa:	4311      	orrs	r1, r2
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	430b      	orrs	r3, r1
 8001302:	6093      	str	r3, [r2, #8]
               (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0),
               (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));

    /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
    /* Configure I2Cx: Dual mode and Own Address2 */
    MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2),
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	695a      	ldr	r2, [r3, #20]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	431a      	orrs	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	430a      	orrs	r2, r1
 800131e:	60da      	str	r2, [r3, #12]
               (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));

    /* Enable the selected I2C peripheral */
    __HAL_I2C_ENABLE(hi2c);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f042 0201 	orr.w	r2, r2, #1
 800132e:	601a      	str	r2, [r3, #0]

    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2220      	movs	r2, #32
 800133a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	000186a0 	.word	0x000186a0
 800135c:	001e847f 	.word	0x001e847f
 8001360:	003d08ff 	.word	0x003d08ff
 8001364:	431bde83 	.word	0x431bde83
 8001368:	10624dd3 	.word	0x10624dd3

0800136c <HAL_I2C_Mem_Read>:
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef * hi2c, uint16_t DevAddress,
                                   uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData,
                                   uint16_t Size, uint32_t Timeout) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b08c      	sub	sp, #48	; 0x30
 8001370:	af02      	add	r7, sp, #8
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	4608      	mov	r0, r1
 8001376:	4611      	mov	r1, r2
 8001378:	461a      	mov	r2, r3
 800137a:	4603      	mov	r3, r0
 800137c:	817b      	strh	r3, [r7, #10]
 800137e:	460b      	mov	r3, r1
 8001380:	813b      	strh	r3, [r7, #8]
 8001382:	4613      	mov	r3, r2
 8001384:	80fb      	strh	r3, [r7, #6]
    /* Init tickstart for timeout management*/
    uint32_t tickstart = HAL_GetTick();
 8001386:	f7ff fbe7 	bl	8000b58 <HAL_GetTick>
 800138a:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the parameters */
    assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

    if (hi2c->State == HAL_I2C_STATE_READY) {
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2b20      	cmp	r3, #32
 8001396:	f040 8208 	bne.w	80017aa <HAL_I2C_Mem_Read+0x43e>
        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG,
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	2319      	movs	r3, #25
 80013a0:	2201      	movs	r2, #1
 80013a2:	497b      	ldr	r1, [pc, #492]	; (8001590 <HAL_I2C_Mem_Read+0x224>)
 80013a4:	68f8      	ldr	r0, [r7, #12]
 80013a6:	f000 faef 	bl	8001988 <I2C_WaitOnFlagUntilTimeout>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <HAL_I2C_Mem_Read+0x48>
                                       tickstart) != HAL_OK) {
            return HAL_BUSY;
 80013b0:	2302      	movs	r3, #2
 80013b2:	e1fb      	b.n	80017ac <HAL_I2C_Mem_Read+0x440>
        }

        /* Process Locked */
        __HAL_LOCK(hi2c);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d101      	bne.n	80013c2 <HAL_I2C_Mem_Read+0x56>
 80013be:	2302      	movs	r3, #2
 80013c0:	e1f4      	b.n	80017ac <HAL_I2C_Mem_Read+0x440>
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2201      	movs	r2, #1
 80013c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Check if the I2C is already enabled */
        if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d007      	beq.n	80013e8 <HAL_I2C_Mem_Read+0x7c>
            /* Enable I2C peripheral */
            __HAL_I2C_ENABLE(hi2c);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f042 0201 	orr.w	r2, r2, #1
 80013e6:	601a      	str	r2, [r3, #0]
        }

        /* Disable Pos */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013f6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_BUSY_RX;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2222      	movs	r2, #34	; 0x22
 80013fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_MEM;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2240      	movs	r2, #64	; 0x40
 8001404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2200      	movs	r2, #0
 800140c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Prepare transfer parameters */
        hi2c->pBuffPtr = pData;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001412:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount = Size;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001418:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize = hi2c->XferCount;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800141e:	b29a      	uxth	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4a5b      	ldr	r2, [pc, #364]	; (8001594 <HAL_I2C_Mem_Read+0x228>)
 8001428:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) !=
 800142a:	88f8      	ldrh	r0, [r7, #6]
 800142c:	893a      	ldrh	r2, [r7, #8]
 800142e:	8979      	ldrh	r1, [r7, #10]
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	9301      	str	r3, [sp, #4]
 8001434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	4603      	mov	r3, r0
 800143a:	68f8      	ldr	r0, [r7, #12]
 800143c:	f000 f9bc 	bl	80017b8 <I2C_RequestMemoryRead>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_I2C_Mem_Read+0xde>
            HAL_OK) {
            return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e1b0      	b.n	80017ac <HAL_I2C_Mem_Read+0x440>
        }

        if (hi2c->XferSize == 0U) {
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800144e:	2b00      	cmp	r3, #0
 8001450:	d113      	bne.n	800147a <HAL_I2C_Mem_Read+0x10e>
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001452:	2300      	movs	r3, #0
 8001454:	623b      	str	r3, [r7, #32]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	623b      	str	r3, [r7, #32]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	623b      	str	r3, [r7, #32]
 8001466:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	e184      	b.n	8001784 <HAL_I2C_Mem_Read+0x418>
        } else if (hi2c->XferSize == 1U) {
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800147e:	2b01      	cmp	r3, #1
 8001480:	d11b      	bne.n	80014ba <HAL_I2C_Mem_Read+0x14e>
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001490:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	61fb      	str	r3, [r7, #28]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	61fb      	str	r3, [r7, #28]
 80014a6:	69fb      	ldr	r3, [r7, #28]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	e164      	b.n	8001784 <HAL_I2C_Mem_Read+0x418>
        } else if (hi2c->XferSize == 2U) {
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d11b      	bne.n	80014fa <HAL_I2C_Mem_Read+0x18e>
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014d0:	601a      	str	r2, [r3, #0]

            /* Enable Pos */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014e0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014e2:	2300      	movs	r3, #0
 80014e4:	61bb      	str	r3, [r7, #24]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	61bb      	str	r3, [r7, #24]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	61bb      	str	r3, [r7, #24]
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	e144      	b.n	8001784 <HAL_I2C_Mem_Read+0x418>
        } else {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	617b      	str	r3, [r7, #20]
 800150e:	697b      	ldr	r3, [r7, #20]
        }

        while (hi2c->XferSize > 0U) {
 8001510:	e138      	b.n	8001784 <HAL_I2C_Mem_Read+0x418>
            if (hi2c->XferSize <= 3U) {
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001516:	2b03      	cmp	r3, #3
 8001518:	f200 80f1 	bhi.w	80016fe <HAL_I2C_Mem_Read+0x392>
                /* One byte */
                if (hi2c->XferSize == 1U) {
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001520:	2b01      	cmp	r3, #1
 8001522:	d123      	bne.n	800156c <HAL_I2C_Mem_Read+0x200>
                    /* Wait until RXNE flag is set */
                    if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8001524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001526:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f000 fb44 	bl	8001bb6 <I2C_WaitOnRXNEFlagUntilTimeout>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <HAL_I2C_Mem_Read+0x1cc>
                        return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e139      	b.n	80017ac <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	691a      	ldr	r2, [r3, #16]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154a:	1c5a      	adds	r2, r3, #1
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001554:	3b01      	subs	r3, #1
 8001556:	b29a      	uxth	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001560:	b29b      	uxth	r3, r3
 8001562:	3b01      	subs	r3, #1
 8001564:	b29a      	uxth	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	855a      	strh	r2, [r3, #42]	; 0x2a
 800156a:	e10b      	b.n	8001784 <HAL_I2C_Mem_Read+0x418>
                }
                /* Two bytes */
                else if (hi2c->XferSize == 2U) {
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001570:	2b02      	cmp	r3, #2
 8001572:	d14e      	bne.n	8001612 <HAL_I2C_Mem_Read+0x2a6>
                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) !=
 8001574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800157a:	2200      	movs	r2, #0
 800157c:	4906      	ldr	r1, [pc, #24]	; (8001598 <HAL_I2C_Mem_Read+0x22c>)
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	f000 fa02 	bl	8001988 <I2C_WaitOnFlagUntilTimeout>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d008      	beq.n	800159c <HAL_I2C_Mem_Read+0x230>
                        HAL_OK) {
                        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e10e      	b.n	80017ac <HAL_I2C_Mem_Read+0x440>
 800158e:	bf00      	nop
 8001590:	00100002 	.word	0x00100002
 8001594:	ffff0000 	.word	0xffff0000
 8001598:	00010004 	.word	0x00010004
                    }

                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015aa:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	691a      	ldr	r2, [r3, #16]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c8:	3b01      	subs	r3, #1
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	3b01      	subs	r3, #1
 80015d8:	b29a      	uxth	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	855a      	strh	r2, [r3, #42]	; 0x2a

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	691a      	ldr	r2, [r3, #16]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f0:	1c5a      	adds	r2, r3, #1
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015fa:	3b01      	subs	r3, #1
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001606:	b29b      	uxth	r3, r3
 8001608:	3b01      	subs	r3, #1
 800160a:	b29a      	uxth	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001610:	e0b8      	b.n	8001784 <HAL_I2C_Mem_Read+0x418>
                }
                /* 3 Last bytes */
                else {
                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) !=
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001618:	2200      	movs	r2, #0
 800161a:	4966      	ldr	r1, [pc, #408]	; (80017b4 <HAL_I2C_Mem_Read+0x448>)
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f000 f9b3 	bl	8001988 <I2C_WaitOnFlagUntilTimeout>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <HAL_I2C_Mem_Read+0x2c0>
                        HAL_OK) {
                        return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e0bf      	b.n	80017ac <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Disable Acknowledge */
                    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800163a:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	691a      	ldr	r2, [r3, #16]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	1c5a      	adds	r2, r3, #1
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001658:	3b01      	subs	r3, #1
 800165a:	b29a      	uxth	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001664:	b29b      	uxth	r3, r3
 8001666:	3b01      	subs	r3, #1
 8001668:	b29a      	uxth	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	855a      	strh	r2, [r3, #42]	; 0x2a

                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) !=
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001674:	2200      	movs	r2, #0
 8001676:	494f      	ldr	r1, [pc, #316]	; (80017b4 <HAL_I2C_Mem_Read+0x448>)
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	f000 f985 	bl	8001988 <I2C_WaitOnFlagUntilTimeout>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <HAL_I2C_Mem_Read+0x31c>
                        HAL_OK) {
                        return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e091      	b.n	80017ac <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001696:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	691a      	ldr	r2, [r3, #16]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	1c5a      	adds	r2, r3, #1
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016b4:	3b01      	subs	r3, #1
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	3b01      	subs	r3, #1
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	855a      	strh	r2, [r3, #42]	; 0x2a

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	691a      	ldr	r2, [r3, #16]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	1c5a      	adds	r2, r3, #1
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e6:	3b01      	subs	r3, #1
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	3b01      	subs	r3, #1
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80016fc:	e042      	b.n	8001784 <HAL_I2C_Mem_Read+0x418>
                }
            } else {
                /* Wait until RXNE flag is set */
                if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 80016fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001700:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f000 fa57 	bl	8001bb6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_I2C_Mem_Read+0x3a6>
                    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e04c      	b.n	80017ac <HAL_I2C_Mem_Read+0x440>
                }

                /* Read data from DR */
                *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	691a      	ldr	r2, [r3, #16]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	701a      	strb	r2, [r3, #0]

                /* Increment Buffer pointer */
                hi2c->pBuffPtr++;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	1c5a      	adds	r2, r3, #1
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	625a      	str	r2, [r3, #36]	; 0x24

                /* Update counter */
                hi2c->XferSize--;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800172e:	3b01      	subs	r3, #1
 8001730:	b29a      	uxth	r2, r3
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	851a      	strh	r2, [r3, #40]	; 0x28
                hi2c->XferCount--;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800173a:	b29b      	uxth	r3, r3
 800173c:	3b01      	subs	r3, #1
 800173e:	b29a      	uxth	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	855a      	strh	r2, [r3, #42]	; 0x2a

                if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) {
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	2b04      	cmp	r3, #4
 8001750:	d118      	bne.n	8001784 <HAL_I2C_Mem_Read+0x418>
                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	691a      	ldr	r2, [r3, #16]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001764:	1c5a      	adds	r2, r3, #1
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800176e:	3b01      	subs	r3, #1
 8001770:	b29a      	uxth	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800177a:	b29b      	uxth	r3, r3
 800177c:	3b01      	subs	r3, #1
 800177e:	b29a      	uxth	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	855a      	strh	r2, [r3, #42]	; 0x2a
        while (hi2c->XferSize > 0U) {
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001788:	2b00      	cmp	r3, #0
 800178a:	f47f aec2 	bne.w	8001512 <HAL_I2C_Mem_Read+0x1a6>
                }
            }
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2220      	movs	r2, #32
 8001792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80017a6:	2300      	movs	r3, #0
 80017a8:	e000      	b.n	80017ac <HAL_I2C_Mem_Read+0x440>
    } else {
        return HAL_BUSY;
 80017aa:	2302      	movs	r3, #2
    }
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3728      	adds	r7, #40	; 0x28
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	00010004 	.word	0x00010004

080017b8 <I2C_RequestMemoryRead>:
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef * hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize,
                                               uint32_t Timeout, uint32_t Tickstart) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af02      	add	r7, sp, #8
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	4608      	mov	r0, r1
 80017c2:	4611      	mov	r1, r2
 80017c4:	461a      	mov	r2, r3
 80017c6:	4603      	mov	r3, r0
 80017c8:	817b      	strh	r3, [r7, #10]
 80017ca:	460b      	mov	r3, r1
 80017cc:	813b      	strh	r3, [r7, #8]
 80017ce:	4613      	mov	r3, r2
 80017d0:	80fb      	strh	r3, [r7, #6]
    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017e0:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017f0:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	6a3b      	ldr	r3, [r7, #32]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f000 f8c2 	bl	8001988 <I2C_WaitOnFlagUntilTimeout>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00d      	beq.n	8001826 <I2C_RequestMemoryRead+0x6e>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001818:	d103      	bne.n	8001822 <I2C_RequestMemoryRead+0x6a>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001820:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e0aa      	b.n	800197c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001826:	897b      	ldrh	r3, [r7, #10]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	461a      	mov	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001834:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) !=
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	6a3a      	ldr	r2, [r7, #32]
 800183a:	4952      	ldr	r1, [pc, #328]	; (8001984 <I2C_RequestMemoryRead+0x1cc>)
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f000 f8fa 	bl	8001a36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <I2C_RequestMemoryRead+0x94>
        HAL_OK) {
        return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e097      	b.n	800197c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	697b      	ldr	r3, [r7, #20]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8001862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001864:	6a39      	ldr	r1, [r7, #32]
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 f964 	bl	8001b34 <I2C_WaitOnTXEFlagUntilTimeout>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00d      	beq.n	800188e <I2C_RequestMemoryRead+0xd6>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	2b04      	cmp	r3, #4
 8001878:	d107      	bne.n	800188a <I2C_RequestMemoryRead+0xd2>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001888:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e076      	b.n	800197c <I2C_RequestMemoryRead+0x1c4>
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d105      	bne.n	80018a0 <I2C_RequestMemoryRead+0xe8>
        /* Send Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001894:	893b      	ldrh	r3, [r7, #8]
 8001896:	b2da      	uxtb	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	611a      	str	r2, [r3, #16]
 800189e:	e021      	b.n	80018e4 <I2C_RequestMemoryRead+0x12c>
    }
    /* If Memory address size is 16Bit */
    else {
        /* Send MSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80018a0:	893b      	ldrh	r3, [r7, #8]
 80018a2:	0a1b      	lsrs	r3, r3, #8
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	611a      	str	r2, [r3, #16]

        /* Wait until TXE flag is set */
        if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 80018ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b0:	6a39      	ldr	r1, [r7, #32]
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f000 f93e 	bl	8001b34 <I2C_WaitOnTXEFlagUntilTimeout>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00d      	beq.n	80018da <I2C_RequestMemoryRead+0x122>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d107      	bne.n	80018d6 <I2C_RequestMemoryRead+0x11e>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018d4:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e050      	b.n	800197c <I2C_RequestMemoryRead+0x1c4>
        }

        /* Send LSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80018da:	893b      	ldrh	r3, [r7, #8]
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	611a      	str	r2, [r3, #16]
    }

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 80018e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e6:	6a39      	ldr	r1, [r7, #32]
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f000 f923 	bl	8001b34 <I2C_WaitOnTXEFlagUntilTimeout>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00d      	beq.n	8001910 <I2C_RequestMemoryRead+0x158>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	2b04      	cmp	r3, #4
 80018fa:	d107      	bne.n	800190c <I2C_RequestMemoryRead+0x154>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800190a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e035      	b.n	800197c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800191e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	2200      	movs	r2, #0
 8001928:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f000 f82b 	bl	8001988 <I2C_WaitOnFlagUntilTimeout>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00d      	beq.n	8001954 <I2C_RequestMemoryRead+0x19c>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001946:	d103      	bne.n	8001950 <I2C_RequestMemoryRead+0x198>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800194e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e013      	b.n	800197c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001954:	897b      	ldrh	r3, [r7, #10]
 8001956:	b2db      	uxtb	r3, r3
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	b2da      	uxtb	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) !=
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	6a3a      	ldr	r2, [r7, #32]
 8001968:	4906      	ldr	r1, [pc, #24]	; (8001984 <I2C_RequestMemoryRead+0x1cc>)
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f000 f863 	bl	8001a36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <I2C_RequestMemoryRead+0x1c2>
        HAL_OK) {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e000      	b.n	800197c <I2C_RequestMemoryRead+0x1c4>
    }

    return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	00010002 	.word	0x00010002

08001988 <I2C_WaitOnFlagUntilTimeout>:
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Flag,
                                                    FlagStatus Status, uint32_t Timeout,
                                                    uint32_t Tickstart) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	603b      	str	r3, [r7, #0]
 8001994:	4613      	mov	r3, r2
 8001996:	71fb      	strb	r3, [r7, #7]
    /* Wait until flag is set */
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 8001998:	e025      	b.n	80019e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019a0:	d021      	beq.n	80019e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 80019a2:	f7ff f8d9 	bl	8000b58 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d302      	bcc.n	80019b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d116      	bne.n	80019e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
                hi2c->PreviousState = I2C_STATE_NONE;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2200      	movs	r2, #0
 80019bc:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2220      	movs	r2, #32
 80019c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f043 0220 	orr.w	r2, r3, #32
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e023      	b.n	8001a2e <I2C_WaitOnFlagUntilTimeout+0xa6>
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	0c1b      	lsrs	r3, r3, #16
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d10d      	bne.n	8001a0c <I2C_WaitOnFlagUntilTimeout+0x84>
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	43da      	mvns	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	4013      	ands	r3, r2
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	bf0c      	ite	eq
 8001a02:	2301      	moveq	r3, #1
 8001a04:	2300      	movne	r3, #0
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	461a      	mov	r2, r3
 8001a0a:	e00c      	b.n	8001a26 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	43da      	mvns	r2, r3
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	4013      	ands	r3, r2
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	bf0c      	ite	eq
 8001a1e:	2301      	moveq	r3, #1
 8001a20:	2300      	movne	r3, #0
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	461a      	mov	r2, r3
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d0b6      	beq.n	800199a <I2C_WaitOnFlagUntilTimeout+0x12>
            }
        }
    }
    return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef * hi2c,
                                                                 uint32_t Flag, uint32_t Timeout,
                                                                 uint32_t Tickstart) {
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b084      	sub	sp, #16
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	60f8      	str	r0, [r7, #12]
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	603b      	str	r3, [r7, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 8001a44:	e051      	b.n	8001aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a54:	d123      	bne.n	8001a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a64:	601a      	str	r2, [r3, #0]

            /* Clear AF Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a6e:	615a      	str	r2, [r3, #20]

            hi2c->PreviousState = I2C_STATE_NONE;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	631a      	str	r2, [r3, #48]	; 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2220      	movs	r2, #32
 8001a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f043 0204 	orr.w	r2, r3, #4
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	641a      	str	r2, [r3, #64]	; 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e046      	b.n	8001b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001aa4:	d021      	beq.n	8001aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8001aa6:	f7ff f857 	bl	8000b58 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d302      	bcc.n	8001abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d116      	bne.n	8001aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
                hi2c->PreviousState = I2C_STATE_NONE;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f043 0220 	orr.w	r2, r3, #32
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e020      	b.n	8001b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	0c1b      	lsrs	r3, r3, #16
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d10c      	bne.n	8001b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	43da      	mvns	r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	4013      	ands	r3, r2
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	bf14      	ite	ne
 8001b06:	2301      	movne	r3, #1
 8001b08:	2300      	moveq	r3, #0
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	e00b      	b.n	8001b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	43da      	mvns	r2, r3
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	bf14      	ite	ne
 8001b20:	2301      	movne	r3, #1
 8001b22:	2300      	moveq	r3, #0
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d18d      	bne.n	8001a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
            }
        }
    }
    return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <I2C_WaitOnTXEFlagUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout,
                                                       uint32_t Tickstart) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 8001b40:	e02d      	b.n	8001b9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
        /* Check if a NACK is detected */
        if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f000 f88d 	bl	8001c62 <I2C_IsAcknowledgeFailed>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
            return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e02d      	b.n	8001bae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b58:	d021      	beq.n	8001b9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8001b5a:	f7fe fffd 	bl	8000b58 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d302      	bcc.n	8001b70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d116      	bne.n	8001b9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
                hi2c->PreviousState = I2C_STATE_NONE;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2220      	movs	r2, #32
 8001b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f043 0220 	orr.w	r2, r3, #32
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e007      	b.n	8001bae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba8:	2b80      	cmp	r3, #128	; 0x80
 8001baa:	d1ca      	bne.n	8001b42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
            }
        }
    }
    return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <I2C_WaitOnRXNEFlagUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart) {
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b084      	sub	sp, #16
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	60f8      	str	r0, [r7, #12]
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	607a      	str	r2, [r7, #4]

    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 8001bc2:	e042      	b.n	8001c4a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
        /* Check if a STOPF is detected */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) {
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	f003 0310 	and.w	r3, r3, #16
 8001bce:	2b10      	cmp	r3, #16
 8001bd0:	d119      	bne.n	8001c06 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f06f 0210 	mvn.w	r2, #16
 8001bda:	615a      	str	r2, [r3, #20]

            hi2c->PreviousState = I2C_STATE_NONE;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	631a      	str	r2, [r3, #48]	; 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2220      	movs	r2, #32
 8001be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_NONE;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	641a      	str	r2, [r3, #64]	; 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e029      	b.n	8001c5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
        }

        /* Check for the Timeout */
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8001c06:	f7fe ffa7 	bl	8000b58 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	68ba      	ldr	r2, [r7, #8]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d302      	bcc.n	8001c1c <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d116      	bne.n	8001c4a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
            hi2c->PreviousState = I2C_STATE_NONE;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	631a      	str	r2, [r3, #48]	; 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2220      	movs	r2, #32
 8001c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f043 0220 	orr.w	r2, r3, #32
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	641a      	str	r2, [r3, #64]	; 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e007      	b.n	8001c5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c54:	2b40      	cmp	r3, #64	; 0x40
 8001c56:	d1b5      	bne.n	8001bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
        }
    }
    return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <I2C_IsAcknowledgeFailed>:
 * @brief  This function handles Acknowledge failed detection during an I2C Communication.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef * hi2c) {
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c78:	d11b      	bne.n	8001cb2 <I2C_IsAcknowledgeFailed+0x50>
        /* Clear NACKF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c82:	615a      	str	r2, [r3, #20]

        hi2c->PreviousState = I2C_STATE_NONE;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	f043 0204 	orr.w	r2, r3, #4
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <I2C_IsAcknowledgeFailed+0x52>
    }
    return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cc2:	b08f      	sub	sp, #60	; 0x3c
 8001cc4:	af0a      	add	r7, sp, #40	; 0x28
 8001cc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e10f      	b.n	8001ef2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d106      	bne.n	8001cf2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f005 fcc5 	bl	800767c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d102      	bne.n	8001d0c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f001 ffac 	bl	8003c6e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	603b      	str	r3, [r7, #0]
 8001d1c:	687e      	ldr	r6, [r7, #4]
 8001d1e:	466d      	mov	r5, sp
 8001d20:	f106 0410 	add.w	r4, r6, #16
 8001d24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d30:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d34:	1d33      	adds	r3, r6, #4
 8001d36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d38:	6838      	ldr	r0, [r7, #0]
 8001d3a:	f001 fe83 	bl	8003a44 <USB_CoreInit>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d005      	beq.n	8001d50 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2202      	movs	r2, #2
 8001d48:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e0d0      	b.n	8001ef2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2100      	movs	r1, #0
 8001d56:	4618      	mov	r0, r3
 8001d58:	f001 ff9a 	bl	8003c90 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	73fb      	strb	r3, [r7, #15]
 8001d60:	e04a      	b.n	8001df8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d62:	7bfa      	ldrb	r2, [r7, #15]
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	440b      	add	r3, r1
 8001d70:	333d      	adds	r3, #61	; 0x3d
 8001d72:	2201      	movs	r2, #1
 8001d74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d76:	7bfa      	ldrb	r2, [r7, #15]
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	4413      	add	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	333c      	adds	r3, #60	; 0x3c
 8001d86:	7bfa      	ldrb	r2, [r7, #15]
 8001d88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d8a:	7bfa      	ldrb	r2, [r7, #15]
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	b298      	uxth	r0, r3
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	4613      	mov	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	4413      	add	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	3344      	adds	r3, #68	; 0x44
 8001d9e:	4602      	mov	r2, r0
 8001da0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001da2:	7bfa      	ldrb	r2, [r7, #15]
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4413      	add	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	3340      	adds	r3, #64	; 0x40
 8001db2:	2200      	movs	r2, #0
 8001db4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001db6:	7bfa      	ldrb	r2, [r7, #15]
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	4413      	add	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	3348      	adds	r3, #72	; 0x48
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dca:	7bfa      	ldrb	r2, [r7, #15]
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	334c      	adds	r3, #76	; 0x4c
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001dde:	7bfa      	ldrb	r2, [r7, #15]
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	4413      	add	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	440b      	add	r3, r1
 8001dec:	3354      	adds	r3, #84	; 0x54
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
 8001df4:	3301      	adds	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
 8001df8:	7bfa      	ldrb	r2, [r7, #15]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d3af      	bcc.n	8001d62 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e02:	2300      	movs	r3, #0
 8001e04:	73fb      	strb	r3, [r7, #15]
 8001e06:	e044      	b.n	8001e92 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e08:	7bfa      	ldrb	r2, [r7, #15]
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	4413      	add	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	440b      	add	r3, r1
 8001e16:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e1e:	7bfa      	ldrb	r2, [r7, #15]
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	4613      	mov	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	4413      	add	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001e30:	7bfa      	ldrb	r2, [r7, #15]
 8001e32:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e34:	7bfa      	ldrb	r2, [r7, #15]
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e46:	2200      	movs	r2, #0
 8001e48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e4a:	7bfa      	ldrb	r2, [r7, #15]
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4413      	add	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	440b      	add	r3, r1
 8001e58:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e60:	7bfa      	ldrb	r2, [r7, #15]
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4413      	add	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e76:	7bfa      	ldrb	r2, [r7, #15]
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4413      	add	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	73fb      	strb	r3, [r7, #15]
 8001e92:	7bfa      	ldrb	r2, [r7, #15]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d3b5      	bcc.n	8001e08 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	603b      	str	r3, [r7, #0]
 8001ea2:	687e      	ldr	r6, [r7, #4]
 8001ea4:	466d      	mov	r5, sp
 8001ea6:	f106 0410 	add.w	r4, r6, #16
 8001eaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001eb6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001eba:	1d33      	adds	r3, r6, #4
 8001ebc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ebe:	6838      	ldr	r0, [r7, #0]
 8001ec0:	f001 ff32 	bl	8003d28 <USB_DevInit>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d005      	beq.n	8001ed6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2202      	movs	r2, #2
 8001ece:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e00d      	b.n	8001ef2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f003 f881 	bl	8004ff2 <USB_DevDisconnect>

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001efa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b084      	sub	sp, #16
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d101      	bne.n	8001f16 <HAL_PCD_Start+0x1c>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e020      	b.n	8001f58 <HAL_PCD_Start+0x5e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d109      	bne.n	8001f3a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d005      	beq.n	8001f3a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f001 fe84 	bl	8003c4c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f003 f831 	bl	8004fb0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f60:	b590      	push	{r4, r7, lr}
 8001f62:	b08d      	sub	sp, #52	; 0x34
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f6e:	6a3b      	ldr	r3, [r7, #32]
 8001f70:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f003 f8ef 	bl	800515a <USB_GetMode>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f040 848a 	bne.w	8002898 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f003 f853 	bl	8005034 <USB_ReadInterrupts>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 8480 	beq.w	8002896 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	0a1b      	lsrs	r3, r3, #8
 8001fa0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f003 f840 	bl	8005034 <USB_ReadInterrupts>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d107      	bne.n	8001fce <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695a      	ldr	r2, [r3, #20]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f002 0202 	and.w	r2, r2, #2
 8001fcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f003 f82e 	bl	8005034 <USB_ReadInterrupts>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f003 0310 	and.w	r3, r3, #16
 8001fde:	2b10      	cmp	r3, #16
 8001fe0:	d161      	bne.n	80020a6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	699a      	ldr	r2, [r3, #24]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0210 	bic.w	r2, r2, #16
 8001ff0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001ff2:	6a3b      	ldr	r3, [r7, #32]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	f003 020f 	and.w	r2, r3, #15
 8001ffe:	4613      	mov	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	4413      	add	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	4413      	add	r3, r2
 800200e:	3304      	adds	r3, #4
 8002010:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	0c5b      	lsrs	r3, r3, #17
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	2b02      	cmp	r3, #2
 800201c:	d124      	bne.n	8002068 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002024:	4013      	ands	r3, r2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d035      	beq.n	8002096 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	091b      	lsrs	r3, r3, #4
 8002032:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002034:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002038:	b29b      	uxth	r3, r3
 800203a:	461a      	mov	r2, r3
 800203c:	6a38      	ldr	r0, [r7, #32]
 800203e:	f002 fe65 	bl	8004d0c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	691a      	ldr	r2, [r3, #16]
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	091b      	lsrs	r3, r3, #4
 800204a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800204e:	441a      	add	r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	6a1a      	ldr	r2, [r3, #32]
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	091b      	lsrs	r3, r3, #4
 800205c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002060:	441a      	add	r2, r3
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	621a      	str	r2, [r3, #32]
 8002066:	e016      	b.n	8002096 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	0c5b      	lsrs	r3, r3, #17
 800206c:	f003 030f 	and.w	r3, r3, #15
 8002070:	2b06      	cmp	r3, #6
 8002072:	d110      	bne.n	8002096 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800207a:	2208      	movs	r2, #8
 800207c:	4619      	mov	r1, r3
 800207e:	6a38      	ldr	r0, [r7, #32]
 8002080:	f002 fe44 	bl	8004d0c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	6a1a      	ldr	r2, [r3, #32]
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	091b      	lsrs	r3, r3, #4
 800208c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002090:	441a      	add	r2, r3
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	699a      	ldr	r2, [r3, #24]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f042 0210 	orr.w	r2, r2, #16
 80020a4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f002 ffc2 	bl	8005034 <USB_ReadInterrupts>
 80020b0:	4603      	mov	r3, r0
 80020b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80020ba:	f040 80a7 	bne.w	800220c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f002 ffc7 	bl	800505a <USB_ReadDevAllOutEpInterrupt>
 80020cc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80020ce:	e099      	b.n	8002204 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80020d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 808e 	beq.w	80021f8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	4611      	mov	r1, r2
 80020e6:	4618      	mov	r0, r3
 80020e8:	f002 ffeb 	bl	80050c2 <USB_ReadDevOutEPInterrupt>
 80020ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00c      	beq.n	8002112 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	015a      	lsls	r2, r3, #5
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	4413      	add	r3, r2
 8002100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002104:	461a      	mov	r2, r3
 8002106:	2301      	movs	r3, #1
 8002108:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800210a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 fec3 	bl	8002e98 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00c      	beq.n	8002136 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	015a      	lsls	r2, r3, #5
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	4413      	add	r3, r2
 8002124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002128:	461a      	mov	r2, r3
 800212a:	2308      	movs	r3, #8
 800212c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800212e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 ff99 	bl	8003068 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	f003 0310 	and.w	r3, r3, #16
 800213c:	2b00      	cmp	r3, #0
 800213e:	d008      	beq.n	8002152 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	015a      	lsls	r2, r3, #5
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	4413      	add	r3, r2
 8002148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800214c:	461a      	mov	r2, r3
 800214e:	2310      	movs	r3, #16
 8002150:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d030      	beq.n	80021be <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800215c:	6a3b      	ldr	r3, [r7, #32]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002164:	2b80      	cmp	r3, #128	; 0x80
 8002166:	d109      	bne.n	800217c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	69fa      	ldr	r2, [r7, #28]
 8002172:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002176:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800217a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800217c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800217e:	4613      	mov	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	4413      	add	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	4413      	add	r3, r2
 800218e:	3304      	adds	r3, #4
 8002190:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	78db      	ldrb	r3, [r3, #3]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d108      	bne.n	80021ac <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	2200      	movs	r2, #0
 800219e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	4619      	mov	r1, r3
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f005 fb64 	bl	8007874 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	015a      	lsls	r2, r3, #5
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	4413      	add	r3, r2
 80021b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b8:	461a      	mov	r2, r3
 80021ba:	2302      	movs	r3, #2
 80021bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	f003 0320 	and.w	r3, r3, #32
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d008      	beq.n	80021da <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	015a      	lsls	r2, r3, #5
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	4413      	add	r3, r2
 80021d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021d4:	461a      	mov	r2, r3
 80021d6:	2320      	movs	r3, #32
 80021d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d009      	beq.n	80021f8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	015a      	lsls	r2, r3, #5
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	4413      	add	r3, r2
 80021ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021f0:	461a      	mov	r2, r3
 80021f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021f6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	3301      	adds	r3, #1
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80021fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002200:	085b      	lsrs	r3, r3, #1
 8002202:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002206:	2b00      	cmp	r3, #0
 8002208:	f47f af62 	bne.w	80020d0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f002 ff0f 	bl	8005034 <USB_ReadInterrupts>
 8002216:	4603      	mov	r3, r0
 8002218:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800221c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002220:	f040 80db 	bne.w	80023da <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f002 ff30 	bl	800508e <USB_ReadDevAllInEpInterrupt>
 800222e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002234:	e0cd      	b.n	80023d2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 80c2 	beq.w	80023c6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f002 ff56 	bl	80050fe <USB_ReadDevInEPInterrupt>
 8002252:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d057      	beq.n	800230e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	f003 030f 	and.w	r3, r3, #15
 8002264:	2201      	movs	r2, #1
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	43db      	mvns	r3, r3
 8002278:	69f9      	ldr	r1, [r7, #28]
 800227a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800227e:	4013      	ands	r3, r2
 8002280:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	015a      	lsls	r2, r3, #5
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	4413      	add	r3, r2
 800228a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800228e:	461a      	mov	r2, r3
 8002290:	2301      	movs	r3, #1
 8002292:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d132      	bne.n	8002302 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a0:	4613      	mov	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4413      	add	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	334c      	adds	r3, #76	; 0x4c
 80022ac:	6819      	ldr	r1, [r3, #0]
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b2:	4613      	mov	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	4413      	add	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4403      	add	r3, r0
 80022bc:	3348      	adds	r3, #72	; 0x48
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4419      	add	r1, r3
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c6:	4613      	mov	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	4413      	add	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4403      	add	r3, r0
 80022d0:	334c      	adds	r3, #76	; 0x4c
 80022d2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d113      	bne.n	8002302 <HAL_PCD_IRQHandler+0x3a2>
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022de:	4613      	mov	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4413      	add	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	440b      	add	r3, r1
 80022e8:	3354      	adds	r3, #84	; 0x54
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d108      	bne.n	8002302 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6818      	ldr	r0, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022fa:	461a      	mov	r2, r3
 80022fc:	2101      	movs	r1, #1
 80022fe:	f002 ff5d 	bl	80051bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	b2db      	uxtb	r3, r3
 8002306:	4619      	mov	r1, r3
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f005 fa38 	bl	800777e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	2b00      	cmp	r3, #0
 8002316:	d008      	beq.n	800232a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	4413      	add	r3, r2
 8002320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002324:	461a      	mov	r2, r3
 8002326:	2308      	movs	r3, #8
 8002328:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	f003 0310 	and.w	r3, r3, #16
 8002330:	2b00      	cmp	r3, #0
 8002332:	d008      	beq.n	8002346 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	015a      	lsls	r2, r3, #5
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	4413      	add	r3, r2
 800233c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002340:	461a      	mov	r2, r3
 8002342:	2310      	movs	r3, #16
 8002344:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234c:	2b00      	cmp	r3, #0
 800234e:	d008      	beq.n	8002362 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	015a      	lsls	r2, r3, #5
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	4413      	add	r3, r2
 8002358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800235c:	461a      	mov	r2, r3
 800235e:	2340      	movs	r3, #64	; 0x40
 8002360:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d023      	beq.n	80023b4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800236c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800236e:	6a38      	ldr	r0, [r7, #32]
 8002370:	f001 fe3e 	bl	8003ff0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002376:	4613      	mov	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	4413      	add	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	3338      	adds	r3, #56	; 0x38
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	4413      	add	r3, r2
 8002384:	3304      	adds	r3, #4
 8002386:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	78db      	ldrb	r3, [r3, #3]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d108      	bne.n	80023a2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	2200      	movs	r2, #0
 8002394:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	b2db      	uxtb	r3, r3
 800239a:	4619      	mov	r1, r3
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f005 fa7b 	bl	8007898 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	015a      	lsls	r2, r3, #5
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	4413      	add	r3, r2
 80023aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023ae:	461a      	mov	r2, r3
 80023b0:	2302      	movs	r3, #2
 80023b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80023be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 fcdb 	bl	8002d7c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	3301      	adds	r3, #1
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ce:	085b      	lsrs	r3, r3, #1
 80023d0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f47f af2e 	bne.w	8002236 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f002 fe28 	bl	8005034 <USB_ReadInterrupts>
 80023e4:	4603      	mov	r3, r0
 80023e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023ee:	d122      	bne.n	8002436 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	69fa      	ldr	r2, [r7, #28]
 80023fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023fe:	f023 0301 	bic.w	r3, r3, #1
 8002402:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800240a:	2b01      	cmp	r3, #1
 800240c:	d108      	bne.n	8002420 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002416:	2100      	movs	r1, #0
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 fec3 	bl	80031a4 <HAL_PCDEx_LPM_Callback>
 800241e:	e002      	b.n	8002426 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f005 fa19 	bl	8007858 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	695a      	ldr	r2, [r3, #20]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002434:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f002 fdfa 	bl	8005034 <USB_ReadInterrupts>
 8002440:	4603      	mov	r3, r0
 8002442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002446:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800244a:	d112      	bne.n	8002472 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b01      	cmp	r3, #1
 800245a:	d102      	bne.n	8002462 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f005 f9d5 	bl	800780c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	695a      	ldr	r2, [r3, #20]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002470:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f002 fddc 	bl	8005034 <USB_ReadInterrupts>
 800247c:	4603      	mov	r3, r0
 800247e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002486:	f040 80b7 	bne.w	80025f8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	69fa      	ldr	r2, [r7, #28]
 8002494:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002498:	f023 0301 	bic.w	r3, r3, #1
 800249c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2110      	movs	r1, #16
 80024a4:	4618      	mov	r0, r3
 80024a6:	f001 fda3 	bl	8003ff0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024aa:	2300      	movs	r3, #0
 80024ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024ae:	e046      	b.n	800253e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80024b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b2:	015a      	lsls	r2, r3, #5
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	4413      	add	r3, r2
 80024b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024bc:	461a      	mov	r2, r3
 80024be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024c2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80024c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c6:	015a      	lsls	r2, r3, #5
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024d4:	0151      	lsls	r1, r2, #5
 80024d6:	69fa      	ldr	r2, [r7, #28]
 80024d8:	440a      	add	r2, r1
 80024da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80024de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024e2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80024e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e6:	015a      	lsls	r2, r3, #5
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	4413      	add	r3, r2
 80024ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f0:	461a      	mov	r2, r3
 80024f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024f6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80024f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fa:	015a      	lsls	r2, r3, #5
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	4413      	add	r3, r2
 8002500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002508:	0151      	lsls	r1, r2, #5
 800250a:	69fa      	ldr	r2, [r7, #28]
 800250c:	440a      	add	r2, r1
 800250e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002512:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002516:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251a:	015a      	lsls	r2, r3, #5
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	4413      	add	r3, r2
 8002520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002528:	0151      	lsls	r1, r2, #5
 800252a:	69fa      	ldr	r2, [r7, #28]
 800252c:	440a      	add	r2, r1
 800252e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002532:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002536:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253a:	3301      	adds	r3, #1
 800253c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002544:	429a      	cmp	r2, r3
 8002546:	d3b3      	bcc.n	80024b0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	69fa      	ldr	r2, [r7, #28]
 8002552:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002556:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800255a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002560:	2b00      	cmp	r3, #0
 8002562:	d016      	beq.n	8002592 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800256a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800256e:	69fa      	ldr	r2, [r7, #28]
 8002570:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002574:	f043 030b 	orr.w	r3, r3, #11
 8002578:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002584:	69fa      	ldr	r2, [r7, #28]
 8002586:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800258a:	f043 030b 	orr.w	r3, r3, #11
 800258e:	6453      	str	r3, [r2, #68]	; 0x44
 8002590:	e015      	b.n	80025be <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	69fa      	ldr	r2, [r7, #28]
 800259c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025a4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80025a8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	69fa      	ldr	r2, [r7, #28]
 80025b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025b8:	f043 030b 	orr.w	r3, r3, #11
 80025bc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	69fa      	ldr	r2, [r7, #28]
 80025c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025cc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80025d0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025e2:	461a      	mov	r2, r3
 80025e4:	f002 fdea 	bl	80051bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695a      	ldr	r2, [r3, #20]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80025f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f002 fd19 	bl	8005034 <USB_ReadInterrupts>
 8002602:	4603      	mov	r3, r0
 8002604:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002608:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800260c:	d124      	bne.n	8002658 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f002 fdaf 	bl	8005176 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f001 fd64 	bl	80040ea <USB_GetDevSpeed>
 8002622:	4603      	mov	r3, r0
 8002624:	461a      	mov	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681c      	ldr	r4, [r3, #0]
 800262e:	f001 f9e9 	bl	8003a04 <HAL_RCC_GetHCLKFreq>
 8002632:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002638:	b2db      	uxtb	r3, r3
 800263a:	461a      	mov	r2, r3
 800263c:	4620      	mov	r0, r4
 800263e:	f001 fa63 	bl	8003b08 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f005 f8c3 	bl	80077ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695a      	ldr	r2, [r3, #20]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002656:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f002 fce9 	bl	8005034 <USB_ReadInterrupts>
 8002662:	4603      	mov	r3, r0
 8002664:	f003 0308 	and.w	r3, r3, #8
 8002668:	2b08      	cmp	r3, #8
 800266a:	d10a      	bne.n	8002682 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f005 f8a0 	bl	80077b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	695a      	ldr	r2, [r3, #20]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f002 0208 	and.w	r2, r2, #8
 8002680:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f002 fcd4 	bl	8005034 <USB_ReadInterrupts>
 800268c:	4603      	mov	r3, r0
 800268e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002692:	2b80      	cmp	r3, #128	; 0x80
 8002694:	d122      	bne.n	80026dc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002696:	6a3b      	ldr	r3, [r7, #32]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026a2:	2301      	movs	r3, #1
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
 80026a6:	e014      	b.n	80026d2 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ac:	4613      	mov	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	4413      	add	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d105      	bne.n	80026cc <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	4619      	mov	r1, r3
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 fb27 	bl	8002d1a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	3301      	adds	r3, #1
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d8:	429a      	cmp	r2, r3
 80026da:	d3e5      	bcc.n	80026a8 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f002 fca7 	bl	8005034 <USB_ReadInterrupts>
 80026e6:	4603      	mov	r3, r0
 80026e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026f0:	d13b      	bne.n	800276a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026f2:	2301      	movs	r3, #1
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24
 80026f6:	e02b      	b.n	8002750 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002708:	6879      	ldr	r1, [r7, #4]
 800270a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800270c:	4613      	mov	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4413      	add	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	3340      	adds	r3, #64	; 0x40
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d115      	bne.n	800274a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800271e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002720:	2b00      	cmp	r3, #0
 8002722:	da12      	bge.n	800274a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002728:	4613      	mov	r3, r2
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4413      	add	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	333f      	adds	r3, #63	; 0x3f
 8002734:	2201      	movs	r2, #1
 8002736:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	b2db      	uxtb	r3, r3
 800273c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002740:	b2db      	uxtb	r3, r3
 8002742:	4619      	mov	r1, r3
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 fae8 	bl	8002d1a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	3301      	adds	r3, #1
 800274e:	627b      	str	r3, [r7, #36]	; 0x24
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002756:	429a      	cmp	r2, r3
 8002758:	d3ce      	bcc.n	80026f8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695a      	ldr	r2, [r3, #20]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002768:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f002 fc60 	bl	8005034 <USB_ReadInterrupts>
 8002774:	4603      	mov	r3, r0
 8002776:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800277a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800277e:	d155      	bne.n	800282c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002780:	2301      	movs	r3, #1
 8002782:	627b      	str	r3, [r7, #36]	; 0x24
 8002784:	e045      	b.n	8002812 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	015a      	lsls	r2, r3, #5
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	4413      	add	r3, r2
 800278e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279a:	4613      	mov	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d12e      	bne.n	800280c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027ae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	da2b      	bge.n	800280c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80027c0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d121      	bne.n	800280c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027cc:	4613      	mov	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4413      	add	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80027da:	2201      	movs	r2, #1
 80027dc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80027de:	6a3b      	ldr	r3, [r7, #32]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10a      	bne.n	800280c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	69fa      	ldr	r2, [r7, #28]
 8002800:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002804:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002808:	6053      	str	r3, [r2, #4]
            break;
 800280a:	e007      	b.n	800281c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	3301      	adds	r3, #1
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002818:	429a      	cmp	r2, r3
 800281a:	d3b4      	bcc.n	8002786 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695a      	ldr	r2, [r3, #20]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800282a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f002 fbff 	bl	8005034 <USB_ReadInterrupts>
 8002836:	4603      	mov	r3, r0
 8002838:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800283c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002840:	d10a      	bne.n	8002858 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f005 f83a 	bl	80078bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	695a      	ldr	r2, [r3, #20]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002856:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f002 fbe9 	bl	8005034 <USB_ReadInterrupts>
 8002862:	4603      	mov	r3, r0
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b04      	cmp	r3, #4
 800286a:	d115      	bne.n	8002898 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	2b00      	cmp	r3, #0
 800287c:	d002      	beq.n	8002884 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f005 f82a 	bl	80078d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6859      	ldr	r1, [r3, #4]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	430a      	orrs	r2, r1
 8002892:	605a      	str	r2, [r3, #4]
 8002894:	e000      	b.n	8002898 <HAL_PCD_IRQHandler+0x938>
      return;
 8002896:	bf00      	nop
    }
  }
}
 8002898:	3734      	adds	r7, #52	; 0x34
 800289a:	46bd      	mov	sp, r7
 800289c:	bd90      	pop	{r4, r7, pc}

0800289e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b082      	sub	sp, #8
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	460b      	mov	r3, r1
 80028a8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <HAL_PCD_SetAddress+0x1a>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e013      	b.n	80028e0 <HAL_PCD_SetAddress+0x42>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	78fa      	ldrb	r2, [r7, #3]
 80028c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	78fa      	ldrb	r2, [r7, #3]
 80028ce:	4611      	mov	r1, r2
 80028d0:	4618      	mov	r0, r3
 80028d2:	f002 fb47 	bl	8004f64 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	4608      	mov	r0, r1
 80028f2:	4611      	mov	r1, r2
 80028f4:	461a      	mov	r2, r3
 80028f6:	4603      	mov	r3, r0
 80028f8:	70fb      	strb	r3, [r7, #3]
 80028fa:	460b      	mov	r3, r1
 80028fc:	803b      	strh	r3, [r7, #0]
 80028fe:	4613      	mov	r3, r2
 8002900:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002906:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800290a:	2b00      	cmp	r3, #0
 800290c:	da0f      	bge.n	800292e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800290e:	78fb      	ldrb	r3, [r7, #3]
 8002910:	f003 020f 	and.w	r2, r3, #15
 8002914:	4613      	mov	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	3338      	adds	r3, #56	; 0x38
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	4413      	add	r3, r2
 8002922:	3304      	adds	r3, #4
 8002924:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2201      	movs	r2, #1
 800292a:	705a      	strb	r2, [r3, #1]
 800292c:	e00f      	b.n	800294e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800292e:	78fb      	ldrb	r3, [r7, #3]
 8002930:	f003 020f 	and.w	r2, r3, #15
 8002934:	4613      	mov	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	4413      	add	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	4413      	add	r3, r2
 8002944:	3304      	adds	r3, #4
 8002946:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800294e:	78fb      	ldrb	r3, [r7, #3]
 8002950:	f003 030f 	and.w	r3, r3, #15
 8002954:	b2da      	uxtb	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800295a:	883a      	ldrh	r2, [r7, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	78ba      	ldrb	r2, [r7, #2]
 8002964:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	785b      	ldrb	r3, [r3, #1]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d004      	beq.n	8002978 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	b29a      	uxth	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002978:	78bb      	ldrb	r3, [r7, #2]
 800297a:	2b02      	cmp	r3, #2
 800297c:	d102      	bne.n	8002984 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800298a:	2b01      	cmp	r3, #1
 800298c:	d101      	bne.n	8002992 <HAL_PCD_EP_Open+0xaa>
 800298e:	2302      	movs	r3, #2
 8002990:	e00e      	b.n	80029b0 <HAL_PCD_EP_Open+0xc8>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68f9      	ldr	r1, [r7, #12]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f001 fbc7 	bl	8004134 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80029ae:	7afb      	ldrb	r3, [r7, #11]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	da0f      	bge.n	80029ec <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029cc:	78fb      	ldrb	r3, [r7, #3]
 80029ce:	f003 020f 	and.w	r2, r3, #15
 80029d2:	4613      	mov	r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	4413      	add	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	3338      	adds	r3, #56	; 0x38
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	4413      	add	r3, r2
 80029e0:	3304      	adds	r3, #4
 80029e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2201      	movs	r2, #1
 80029e8:	705a      	strb	r2, [r3, #1]
 80029ea:	e00f      	b.n	8002a0c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029ec:	78fb      	ldrb	r3, [r7, #3]
 80029ee:	f003 020f 	and.w	r2, r3, #15
 80029f2:	4613      	mov	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	4413      	add	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	4413      	add	r3, r2
 8002a02:	3304      	adds	r3, #4
 8002a04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002a0c:	78fb      	ldrb	r3, [r7, #3]
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d101      	bne.n	8002a26 <HAL_PCD_EP_Close+0x6e>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e00e      	b.n	8002a44 <HAL_PCD_EP_Close+0x8c>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68f9      	ldr	r1, [r7, #12]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f001 fc05 	bl	8004244 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	607a      	str	r2, [r7, #4]
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a5c:	7afb      	ldrb	r3, [r7, #11]
 8002a5e:	f003 020f 	and.w	r2, r3, #15
 8002a62:	4613      	mov	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4413      	add	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	4413      	add	r3, r2
 8002a72:	3304      	adds	r3, #4
 8002a74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2200      	movs	r2, #0
 8002a86:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a8e:	7afb      	ldrb	r3, [r7, #11]
 8002a90:	f003 030f 	and.w	r3, r3, #15
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d102      	bne.n	8002aa8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002aa8:	7afb      	ldrb	r3, [r7, #11]
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d109      	bne.n	8002ac6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	461a      	mov	r2, r3
 8002abe:	6979      	ldr	r1, [r7, #20]
 8002ac0:	f001 fee4 	bl	800488c <USB_EP0StartXfer>
 8002ac4:	e008      	b.n	8002ad8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6818      	ldr	r0, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	6979      	ldr	r1, [r7, #20]
 8002ad4:	f001 fc92 	bl	80043fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	460b      	mov	r3, r1
 8002aec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002aee:	78fb      	ldrb	r3, [r7, #3]
 8002af0:	f003 020f 	and.w	r2, r3, #15
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	4613      	mov	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4413      	add	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	440b      	add	r3, r1
 8002b00:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002b04:	681b      	ldr	r3, [r3, #0]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b086      	sub	sp, #24
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	60f8      	str	r0, [r7, #12]
 8002b1a:	607a      	str	r2, [r7, #4]
 8002b1c:	603b      	str	r3, [r7, #0]
 8002b1e:	460b      	mov	r3, r1
 8002b20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b22:	7afb      	ldrb	r3, [r7, #11]
 8002b24:	f003 020f 	and.w	r2, r3, #15
 8002b28:	4613      	mov	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	3338      	adds	r3, #56	; 0x38
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4413      	add	r3, r2
 8002b36:	3304      	adds	r3, #4
 8002b38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b52:	7afb      	ldrb	r3, [r7, #11]
 8002b54:	f003 030f 	and.w	r3, r3, #15
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d102      	bne.n	8002b6c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b6c:	7afb      	ldrb	r3, [r7, #11]
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d109      	bne.n	8002b8a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6818      	ldr	r0, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	461a      	mov	r2, r3
 8002b82:	6979      	ldr	r1, [r7, #20]
 8002b84:	f001 fe82 	bl	800488c <USB_EP0StartXfer>
 8002b88:	e008      	b.n	8002b9c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6818      	ldr	r0, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	461a      	mov	r2, r3
 8002b96:	6979      	ldr	r1, [r7, #20]
 8002b98:	f001 fc30 	bl	80043fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b084      	sub	sp, #16
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002bb2:	78fb      	ldrb	r3, [r7, #3]
 8002bb4:	f003 020f 	and.w	r2, r3, #15
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d901      	bls.n	8002bc4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e050      	b.n	8002c66 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	da0f      	bge.n	8002bec <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	f003 020f 	and.w	r2, r3, #15
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	3338      	adds	r3, #56	; 0x38
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	4413      	add	r3, r2
 8002be0:	3304      	adds	r3, #4
 8002be2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2201      	movs	r2, #1
 8002be8:	705a      	strb	r2, [r3, #1]
 8002bea:	e00d      	b.n	8002c08 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002bec:	78fa      	ldrb	r2, [r7, #3]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3304      	adds	r3, #4
 8002c00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	f003 030f 	and.w	r3, r3, #15
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_PCD_EP_SetStall+0x82>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e01e      	b.n	8002c66 <HAL_PCD_EP_SetStall+0xc0>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68f9      	ldr	r1, [r7, #12]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f002 f8c0 	bl	8004dbc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c3c:	78fb      	ldrb	r3, [r7, #3]
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10a      	bne.n	8002c5c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6818      	ldr	r0, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	b2d9      	uxtb	r1, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c56:	461a      	mov	r2, r3
 8002c58:	f002 fab0 	bl	80051bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b084      	sub	sp, #16
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	460b      	mov	r3, r1
 8002c78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c7a:	78fb      	ldrb	r3, [r7, #3]
 8002c7c:	f003 020f 	and.w	r2, r3, #15
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d901      	bls.n	8002c8c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e042      	b.n	8002d12 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	da0f      	bge.n	8002cb4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c94:	78fb      	ldrb	r3, [r7, #3]
 8002c96:	f003 020f 	and.w	r2, r3, #15
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	3338      	adds	r3, #56	; 0x38
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3304      	adds	r3, #4
 8002caa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	705a      	strb	r2, [r3, #1]
 8002cb2:	e00f      	b.n	8002cd4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cb4:	78fb      	ldrb	r3, [r7, #3]
 8002cb6:	f003 020f 	and.w	r2, r3, #15
 8002cba:	4613      	mov	r3, r2
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	4413      	add	r3, r2
 8002cca:	3304      	adds	r3, #4
 8002ccc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	f003 030f 	and.w	r3, r3, #15
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_PCD_EP_ClrStall+0x86>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e00e      	b.n	8002d12 <HAL_PCD_EP_ClrStall+0xa4>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68f9      	ldr	r1, [r7, #12]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f002 f8c8 	bl	8004e98 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b084      	sub	sp, #16
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	460b      	mov	r3, r1
 8002d24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002d26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	da0c      	bge.n	8002d48 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d2e:	78fb      	ldrb	r3, [r7, #3]
 8002d30:	f003 020f 	and.w	r2, r3, #15
 8002d34:	4613      	mov	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	4413      	add	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	3338      	adds	r3, #56	; 0x38
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	4413      	add	r3, r2
 8002d42:	3304      	adds	r3, #4
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	e00c      	b.n	8002d62 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d48:	78fb      	ldrb	r3, [r7, #3]
 8002d4a:	f003 020f 	and.w	r2, r3, #15
 8002d4e:	4613      	mov	r3, r2
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	4413      	add	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3304      	adds	r3, #4
 8002d60:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68f9      	ldr	r1, [r7, #12]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f001 fee7 	bl	8004b3c <USB_EPStopXfer>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002d72:	7afb      	ldrb	r3, [r7, #11]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08a      	sub	sp, #40	; 0x28
 8002d80:	af02      	add	r7, sp, #8
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	4613      	mov	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	4413      	add	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	3338      	adds	r3, #56	; 0x38
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	4413      	add	r3, r2
 8002da0:	3304      	adds	r3, #4
 8002da2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a1a      	ldr	r2, [r3, #32]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d901      	bls.n	8002db4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e06c      	b.n	8002e8e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	699a      	ldr	r2, [r3, #24]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	69fa      	ldr	r2, [r7, #28]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d902      	bls.n	8002dd0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	3303      	adds	r3, #3
 8002dd4:	089b      	lsrs	r3, r3, #2
 8002dd6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dd8:	e02b      	b.n	8002e32 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	699a      	ldr	r2, [r3, #24]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	69fa      	ldr	r2, [r7, #28]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d902      	bls.n	8002df6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	3303      	adds	r3, #3
 8002dfa:	089b      	lsrs	r3, r3, #2
 8002dfc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6919      	ldr	r1, [r3, #16]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	4603      	mov	r3, r0
 8002e14:	6978      	ldr	r0, [r7, #20]
 8002e16:	f001 ff3b 	bl	8004c90 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	691a      	ldr	r2, [r3, #16]
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	441a      	add	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a1a      	ldr	r2, [r3, #32]
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	441a      	add	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d809      	bhi.n	8002e5c <PCD_WriteEmptyTxFifo+0xe0>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a1a      	ldr	r2, [r3, #32]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d203      	bcs.n	8002e5c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1be      	bne.n	8002dda <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	699a      	ldr	r2, [r3, #24]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d811      	bhi.n	8002e8c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	2201      	movs	r2, #1
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	43db      	mvns	r3, r3
 8002e82:	6939      	ldr	r1, [r7, #16]
 8002e84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e88:	4013      	ands	r3, r2
 8002e8a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3720      	adds	r7, #32
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
	...

08002e98 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b088      	sub	sp, #32
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	333c      	adds	r3, #60	; 0x3c
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	015a      	lsls	r2, r3, #5
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d17b      	bne.n	8002fc6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d015      	beq.n	8002f04 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	4a61      	ldr	r2, [pc, #388]	; (8003060 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	f240 80b9 	bls.w	8003054 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 80b3 	beq.w	8003054 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002efa:	461a      	mov	r2, r3
 8002efc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f00:	6093      	str	r3, [r2, #8]
 8002f02:	e0a7      	b.n	8003054 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d009      	beq.n	8002f22 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	015a      	lsls	r2, r3, #5
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	4413      	add	r3, r2
 8002f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	2320      	movs	r3, #32
 8002f1e:	6093      	str	r3, [r2, #8]
 8002f20:	e098      	b.n	8003054 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f040 8093 	bne.w	8003054 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	4a4b      	ldr	r2, [pc, #300]	; (8003060 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d90f      	bls.n	8002f56 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00a      	beq.n	8002f56 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f52:	6093      	str	r3, [r2, #8]
 8002f54:	e07e      	b.n	8003054 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	4413      	add	r3, r2
 8002f68:	3304      	adds	r3, #4
 8002f6a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	69da      	ldr	r2, [r3, #28]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	0159      	lsls	r1, r3, #5
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	440b      	add	r3, r1
 8002f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f82:	1ad2      	subs	r2, r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d114      	bne.n	8002fb8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d109      	bne.n	8002faa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6818      	ldr	r0, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	f002 f90a 	bl	80051bc <USB_EP0_OutStart>
 8002fa8:	e006      	b.n	8002fb8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	691a      	ldr	r2, [r3, #16]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	441a      	add	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f004 fbc2 	bl	8007748 <HAL_PCD_DataOutStageCallback>
 8002fc4:	e046      	b.n	8003054 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	4a26      	ldr	r2, [pc, #152]	; (8003064 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d124      	bne.n	8003018 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00a      	beq.n	8002fee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	015a      	lsls	r2, r3, #5
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	4413      	add	r3, r2
 8002fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fea:	6093      	str	r3, [r2, #8]
 8002fec:	e032      	b.n	8003054 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f003 0320 	and.w	r3, r3, #32
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d008      	beq.n	800300a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	015a      	lsls	r2, r3, #5
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	4413      	add	r3, r2
 8003000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003004:	461a      	mov	r2, r3
 8003006:	2320      	movs	r3, #32
 8003008:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	b2db      	uxtb	r3, r3
 800300e:	4619      	mov	r1, r3
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f004 fb99 	bl	8007748 <HAL_PCD_DataOutStageCallback>
 8003016:	e01d      	b.n	8003054 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d114      	bne.n	8003048 <PCD_EP_OutXfrComplete_int+0x1b0>
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	4613      	mov	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	4413      	add	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	440b      	add	r3, r1
 800302c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d108      	bne.n	8003048 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6818      	ldr	r0, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003040:	461a      	mov	r2, r3
 8003042:	2100      	movs	r1, #0
 8003044:	f002 f8ba 	bl	80051bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	4619      	mov	r1, r3
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f004 fb7a 	bl	8007748 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3720      	adds	r7, #32
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	4f54300a 	.word	0x4f54300a
 8003064:	4f54310a 	.word	0x4f54310a

08003068 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	333c      	adds	r3, #60	; 0x3c
 8003080:	3304      	adds	r3, #4
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	015a      	lsls	r2, r3, #5
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	4413      	add	r3, r2
 800308e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	4a15      	ldr	r2, [pc, #84]	; (80030f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d90e      	bls.n	80030bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d009      	beq.n	80030bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b4:	461a      	mov	r2, r3
 80030b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f004 fb31 	bl	8007724 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4a0a      	ldr	r2, [pc, #40]	; (80030f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d90c      	bls.n	80030e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d108      	bne.n	80030e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6818      	ldr	r0, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030dc:	461a      	mov	r2, r3
 80030de:	2101      	movs	r1, #1
 80030e0:	f002 f86c 	bl	80051bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	4f54300a 	.word	0x4f54300a

080030f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	460b      	mov	r3, r1
 80030fe:	70fb      	strb	r3, [r7, #3]
 8003100:	4613      	mov	r3, r2
 8003102:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800310c:	78fb      	ldrb	r3, [r7, #3]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d107      	bne.n	8003122 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003112:	883b      	ldrh	r3, [r7, #0]
 8003114:	0419      	lsls	r1, r3, #16
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	430a      	orrs	r2, r1
 800311e:	629a      	str	r2, [r3, #40]	; 0x28
 8003120:	e028      	b.n	8003174 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003128:	0c1b      	lsrs	r3, r3, #16
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	4413      	add	r3, r2
 800312e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003130:	2300      	movs	r3, #0
 8003132:	73fb      	strb	r3, [r7, #15]
 8003134:	e00d      	b.n	8003152 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	7bfb      	ldrb	r3, [r7, #15]
 800313c:	3340      	adds	r3, #64	; 0x40
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	0c1b      	lsrs	r3, r3, #16
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	4413      	add	r3, r2
 800314a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800314c:	7bfb      	ldrb	r3, [r7, #15]
 800314e:	3301      	adds	r3, #1
 8003150:	73fb      	strb	r3, [r7, #15]
 8003152:	7bfa      	ldrb	r2, [r7, #15]
 8003154:	78fb      	ldrb	r3, [r7, #3]
 8003156:	3b01      	subs	r3, #1
 8003158:	429a      	cmp	r2, r3
 800315a:	d3ec      	bcc.n	8003136 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800315c:	883b      	ldrh	r3, [r7, #0]
 800315e:	0418      	lsls	r0, r3, #16
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6819      	ldr	r1, [r3, #0]
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	3b01      	subs	r3, #1
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	4302      	orrs	r2, r0
 800316c:	3340      	adds	r3, #64	; 0x40
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3714      	adds	r7, #20
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
 800318a:	460b      	mov	r3, r1
 800318c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	887a      	ldrh	r2, [r7, #2]
 8003194:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e267      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d075      	beq.n	80032c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031da:	4b88      	ldr	r3, [pc, #544]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 030c 	and.w	r3, r3, #12
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d00c      	beq.n	8003200 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031e6:	4b85      	ldr	r3, [pc, #532]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d112      	bne.n	8003218 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031f2:	4b82      	ldr	r3, [pc, #520]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031fe:	d10b      	bne.n	8003218 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003200:	4b7e      	ldr	r3, [pc, #504]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d05b      	beq.n	80032c4 <HAL_RCC_OscConfig+0x108>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d157      	bne.n	80032c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e242      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d106      	bne.n	8003230 <HAL_RCC_OscConfig+0x74>
 8003222:	4b76      	ldr	r3, [pc, #472]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a75      	ldr	r2, [pc, #468]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	e01d      	b.n	800326c <HAL_RCC_OscConfig+0xb0>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003238:	d10c      	bne.n	8003254 <HAL_RCC_OscConfig+0x98>
 800323a:	4b70      	ldr	r3, [pc, #448]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a6f      	ldr	r2, [pc, #444]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	4b6d      	ldr	r3, [pc, #436]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a6c      	ldr	r2, [pc, #432]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 800324c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	e00b      	b.n	800326c <HAL_RCC_OscConfig+0xb0>
 8003254:	4b69      	ldr	r3, [pc, #420]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a68      	ldr	r2, [pc, #416]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 800325a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800325e:	6013      	str	r3, [r2, #0]
 8003260:	4b66      	ldr	r3, [pc, #408]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a65      	ldr	r2, [pc, #404]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800326a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d013      	beq.n	800329c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003274:	f7fd fc70 	bl	8000b58 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800327c:	f7fd fc6c 	bl	8000b58 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	; 0x64
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e207      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328e:	4b5b      	ldr	r3, [pc, #364]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0xc0>
 800329a:	e014      	b.n	80032c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329c:	f7fd fc5c 	bl	8000b58 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032a4:	f7fd fc58 	bl	8000b58 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b64      	cmp	r3, #100	; 0x64
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e1f3      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b6:	4b51      	ldr	r3, [pc, #324]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0xe8>
 80032c2:	e000      	b.n	80032c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d063      	beq.n	800339a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032d2:	4b4a      	ldr	r3, [pc, #296]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00b      	beq.n	80032f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032de:	4b47      	ldr	r3, [pc, #284]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d11c      	bne.n	8003324 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ea:	4b44      	ldr	r3, [pc, #272]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d116      	bne.n	8003324 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f6:	4b41      	ldr	r3, [pc, #260]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d005      	beq.n	800330e <HAL_RCC_OscConfig+0x152>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d001      	beq.n	800330e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e1c7      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800330e:	4b3b      	ldr	r3, [pc, #236]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	4937      	ldr	r1, [pc, #220]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 800331e:	4313      	orrs	r3, r2
 8003320:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003322:	e03a      	b.n	800339a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d020      	beq.n	800336e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800332c:	4b34      	ldr	r3, [pc, #208]	; (8003400 <HAL_RCC_OscConfig+0x244>)
 800332e:	2201      	movs	r2, #1
 8003330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003332:	f7fd fc11 	bl	8000b58 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800333a:	f7fd fc0d 	bl	8000b58 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e1a8      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334c:	4b2b      	ldr	r3, [pc, #172]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f0      	beq.n	800333a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003358:	4b28      	ldr	r3, [pc, #160]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	4925      	ldr	r1, [pc, #148]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003368:	4313      	orrs	r3, r2
 800336a:	600b      	str	r3, [r1, #0]
 800336c:	e015      	b.n	800339a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800336e:	4b24      	ldr	r3, [pc, #144]	; (8003400 <HAL_RCC_OscConfig+0x244>)
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003374:	f7fd fbf0 	bl	8000b58 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800337c:	f7fd fbec 	bl	8000b58 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e187      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800338e:	4b1b      	ldr	r3, [pc, #108]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d036      	beq.n	8003414 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d016      	beq.n	80033dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ae:	4b15      	ldr	r3, [pc, #84]	; (8003404 <HAL_RCC_OscConfig+0x248>)
 80033b0:	2201      	movs	r2, #1
 80033b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b4:	f7fd fbd0 	bl	8000b58 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033bc:	f7fd fbcc 	bl	8000b58 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e167      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ce:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 80033d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCC_OscConfig+0x200>
 80033da:	e01b      	b.n	8003414 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033dc:	4b09      	ldr	r3, [pc, #36]	; (8003404 <HAL_RCC_OscConfig+0x248>)
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e2:	f7fd fbb9 	bl	8000b58 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e8:	e00e      	b.n	8003408 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ea:	f7fd fbb5 	bl	8000b58 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d907      	bls.n	8003408 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e150      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
 80033fc:	40023800 	.word	0x40023800
 8003400:	42470000 	.word	0x42470000
 8003404:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003408:	4b88      	ldr	r3, [pc, #544]	; (800362c <HAL_RCC_OscConfig+0x470>)
 800340a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1ea      	bne.n	80033ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 8097 	beq.w	8003550 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003422:	2300      	movs	r3, #0
 8003424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003426:	4b81      	ldr	r3, [pc, #516]	; (800362c <HAL_RCC_OscConfig+0x470>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10f      	bne.n	8003452 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003432:	2300      	movs	r3, #0
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	4b7d      	ldr	r3, [pc, #500]	; (800362c <HAL_RCC_OscConfig+0x470>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	4a7c      	ldr	r2, [pc, #496]	; (800362c <HAL_RCC_OscConfig+0x470>)
 800343c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003440:	6413      	str	r3, [r2, #64]	; 0x40
 8003442:	4b7a      	ldr	r3, [pc, #488]	; (800362c <HAL_RCC_OscConfig+0x470>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344a:	60bb      	str	r3, [r7, #8]
 800344c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800344e:	2301      	movs	r3, #1
 8003450:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003452:	4b77      	ldr	r3, [pc, #476]	; (8003630 <HAL_RCC_OscConfig+0x474>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345a:	2b00      	cmp	r3, #0
 800345c:	d118      	bne.n	8003490 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800345e:	4b74      	ldr	r3, [pc, #464]	; (8003630 <HAL_RCC_OscConfig+0x474>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a73      	ldr	r2, [pc, #460]	; (8003630 <HAL_RCC_OscConfig+0x474>)
 8003464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800346a:	f7fd fb75 	bl	8000b58 <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003470:	e008      	b.n	8003484 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003472:	f7fd fb71 	bl	8000b58 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e10c      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003484:	4b6a      	ldr	r3, [pc, #424]	; (8003630 <HAL_RCC_OscConfig+0x474>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0f0      	beq.n	8003472 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d106      	bne.n	80034a6 <HAL_RCC_OscConfig+0x2ea>
 8003498:	4b64      	ldr	r3, [pc, #400]	; (800362c <HAL_RCC_OscConfig+0x470>)
 800349a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349c:	4a63      	ldr	r2, [pc, #396]	; (800362c <HAL_RCC_OscConfig+0x470>)
 800349e:	f043 0301 	orr.w	r3, r3, #1
 80034a2:	6713      	str	r3, [r2, #112]	; 0x70
 80034a4:	e01c      	b.n	80034e0 <HAL_RCC_OscConfig+0x324>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2b05      	cmp	r3, #5
 80034ac:	d10c      	bne.n	80034c8 <HAL_RCC_OscConfig+0x30c>
 80034ae:	4b5f      	ldr	r3, [pc, #380]	; (800362c <HAL_RCC_OscConfig+0x470>)
 80034b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b2:	4a5e      	ldr	r2, [pc, #376]	; (800362c <HAL_RCC_OscConfig+0x470>)
 80034b4:	f043 0304 	orr.w	r3, r3, #4
 80034b8:	6713      	str	r3, [r2, #112]	; 0x70
 80034ba:	4b5c      	ldr	r3, [pc, #368]	; (800362c <HAL_RCC_OscConfig+0x470>)
 80034bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034be:	4a5b      	ldr	r2, [pc, #364]	; (800362c <HAL_RCC_OscConfig+0x470>)
 80034c0:	f043 0301 	orr.w	r3, r3, #1
 80034c4:	6713      	str	r3, [r2, #112]	; 0x70
 80034c6:	e00b      	b.n	80034e0 <HAL_RCC_OscConfig+0x324>
 80034c8:	4b58      	ldr	r3, [pc, #352]	; (800362c <HAL_RCC_OscConfig+0x470>)
 80034ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034cc:	4a57      	ldr	r2, [pc, #348]	; (800362c <HAL_RCC_OscConfig+0x470>)
 80034ce:	f023 0301 	bic.w	r3, r3, #1
 80034d2:	6713      	str	r3, [r2, #112]	; 0x70
 80034d4:	4b55      	ldr	r3, [pc, #340]	; (800362c <HAL_RCC_OscConfig+0x470>)
 80034d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d8:	4a54      	ldr	r2, [pc, #336]	; (800362c <HAL_RCC_OscConfig+0x470>)
 80034da:	f023 0304 	bic.w	r3, r3, #4
 80034de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d015      	beq.n	8003514 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e8:	f7fd fb36 	bl	8000b58 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ee:	e00a      	b.n	8003506 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034f0:	f7fd fb32 	bl	8000b58 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fe:	4293      	cmp	r3, r2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e0cb      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003506:	4b49      	ldr	r3, [pc, #292]	; (800362c <HAL_RCC_OscConfig+0x470>)
 8003508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0ee      	beq.n	80034f0 <HAL_RCC_OscConfig+0x334>
 8003512:	e014      	b.n	800353e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003514:	f7fd fb20 	bl	8000b58 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800351a:	e00a      	b.n	8003532 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800351c:	f7fd fb1c 	bl	8000b58 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	f241 3288 	movw	r2, #5000	; 0x1388
 800352a:	4293      	cmp	r3, r2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e0b5      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003532:	4b3e      	ldr	r3, [pc, #248]	; (800362c <HAL_RCC_OscConfig+0x470>)
 8003534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1ee      	bne.n	800351c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800353e:	7dfb      	ldrb	r3, [r7, #23]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d105      	bne.n	8003550 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003544:	4b39      	ldr	r3, [pc, #228]	; (800362c <HAL_RCC_OscConfig+0x470>)
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	4a38      	ldr	r2, [pc, #224]	; (800362c <HAL_RCC_OscConfig+0x470>)
 800354a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800354e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 80a1 	beq.w	800369c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800355a:	4b34      	ldr	r3, [pc, #208]	; (800362c <HAL_RCC_OscConfig+0x470>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 030c 	and.w	r3, r3, #12
 8003562:	2b08      	cmp	r3, #8
 8003564:	d05c      	beq.n	8003620 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d141      	bne.n	80035f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356e:	4b31      	ldr	r3, [pc, #196]	; (8003634 <HAL_RCC_OscConfig+0x478>)
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003574:	f7fd faf0 	bl	8000b58 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800357c:	f7fd faec 	bl	8000b58 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e087      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358e:	4b27      	ldr	r3, [pc, #156]	; (800362c <HAL_RCC_OscConfig+0x470>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f0      	bne.n	800357c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69da      	ldr	r2, [r3, #28]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	019b      	lsls	r3, r3, #6
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b0:	085b      	lsrs	r3, r3, #1
 80035b2:	3b01      	subs	r3, #1
 80035b4:	041b      	lsls	r3, r3, #16
 80035b6:	431a      	orrs	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035bc:	061b      	lsls	r3, r3, #24
 80035be:	491b      	ldr	r1, [pc, #108]	; (800362c <HAL_RCC_OscConfig+0x470>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035c4:	4b1b      	ldr	r3, [pc, #108]	; (8003634 <HAL_RCC_OscConfig+0x478>)
 80035c6:	2201      	movs	r2, #1
 80035c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ca:	f7fd fac5 	bl	8000b58 <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d0:	e008      	b.n	80035e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d2:	f7fd fac1 	bl	8000b58 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e05c      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035e4:	4b11      	ldr	r3, [pc, #68]	; (800362c <HAL_RCC_OscConfig+0x470>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0f0      	beq.n	80035d2 <HAL_RCC_OscConfig+0x416>
 80035f0:	e054      	b.n	800369c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f2:	4b10      	ldr	r3, [pc, #64]	; (8003634 <HAL_RCC_OscConfig+0x478>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f8:	f7fd faae 	bl	8000b58 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003600:	f7fd faaa 	bl	8000b58 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e045      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003612:	4b06      	ldr	r3, [pc, #24]	; (800362c <HAL_RCC_OscConfig+0x470>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f0      	bne.n	8003600 <HAL_RCC_OscConfig+0x444>
 800361e:	e03d      	b.n	800369c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d107      	bne.n	8003638 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e038      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
 800362c:	40023800 	.word	0x40023800
 8003630:	40007000 	.word	0x40007000
 8003634:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003638:	4b1b      	ldr	r3, [pc, #108]	; (80036a8 <HAL_RCC_OscConfig+0x4ec>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d028      	beq.n	8003698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003650:	429a      	cmp	r2, r3
 8003652:	d121      	bne.n	8003698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800365e:	429a      	cmp	r2, r3
 8003660:	d11a      	bne.n	8003698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003668:	4013      	ands	r3, r2
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800366e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003670:	4293      	cmp	r3, r2
 8003672:	d111      	bne.n	8003698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367e:	085b      	lsrs	r3, r3, #1
 8003680:	3b01      	subs	r3, #1
 8003682:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003684:	429a      	cmp	r2, r3
 8003686:	d107      	bne.n	8003698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003692:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003694:	429a      	cmp	r2, r3
 8003696:	d001      	beq.n	800369c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e000      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	40023800 	.word	0x40023800

080036ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d101      	bne.n	80036c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0cc      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036c0:	4b68      	ldr	r3, [pc, #416]	; (8003864 <HAL_RCC_ClockConfig+0x1b8>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d90c      	bls.n	80036e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ce:	4b65      	ldr	r3, [pc, #404]	; (8003864 <HAL_RCC_ClockConfig+0x1b8>)
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d6:	4b63      	ldr	r3, [pc, #396]	; (8003864 <HAL_RCC_ClockConfig+0x1b8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d001      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e0b8      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d020      	beq.n	8003736 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003700:	4b59      	ldr	r3, [pc, #356]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	4a58      	ldr	r2, [pc, #352]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800370a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b00      	cmp	r3, #0
 8003716:	d005      	beq.n	8003724 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003718:	4b53      	ldr	r3, [pc, #332]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	4a52      	ldr	r2, [pc, #328]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003722:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003724:	4b50      	ldr	r3, [pc, #320]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	494d      	ldr	r1, [pc, #308]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	4313      	orrs	r3, r2
 8003734:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d044      	beq.n	80037cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d107      	bne.n	800375a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374a:	4b47      	ldr	r3, [pc, #284]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d119      	bne.n	800378a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e07f      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b02      	cmp	r3, #2
 8003760:	d003      	beq.n	800376a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003766:	2b03      	cmp	r3, #3
 8003768:	d107      	bne.n	800377a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800376a:	4b3f      	ldr	r3, [pc, #252]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e06f      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377a:	4b3b      	ldr	r3, [pc, #236]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e067      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800378a:	4b37      	ldr	r3, [pc, #220]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f023 0203 	bic.w	r2, r3, #3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	4934      	ldr	r1, [pc, #208]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003798:	4313      	orrs	r3, r2
 800379a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800379c:	f7fd f9dc 	bl	8000b58 <HAL_GetTick>
 80037a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a2:	e00a      	b.n	80037ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a4:	f7fd f9d8 	bl	8000b58 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e04f      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ba:	4b2b      	ldr	r3, [pc, #172]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 020c 	and.w	r2, r3, #12
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d1eb      	bne.n	80037a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037cc:	4b25      	ldr	r3, [pc, #148]	; (8003864 <HAL_RCC_ClockConfig+0x1b8>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d20c      	bcs.n	80037f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037da:	4b22      	ldr	r3, [pc, #136]	; (8003864 <HAL_RCC_ClockConfig+0x1b8>)
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	b2d2      	uxtb	r2, r2
 80037e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e2:	4b20      	ldr	r3, [pc, #128]	; (8003864 <HAL_RCC_ClockConfig+0x1b8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d001      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e032      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d008      	beq.n	8003812 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003800:	4b19      	ldr	r3, [pc, #100]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	4916      	ldr	r1, [pc, #88]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800380e:	4313      	orrs	r3, r2
 8003810:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b00      	cmp	r3, #0
 800381c:	d009      	beq.n	8003832 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800381e:	4b12      	ldr	r3, [pc, #72]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	490e      	ldr	r1, [pc, #56]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	4313      	orrs	r3, r2
 8003830:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003832:	f000 f821 	bl	8003878 <HAL_RCC_GetSysClockFreq>
 8003836:	4602      	mov	r2, r0
 8003838:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	091b      	lsrs	r3, r3, #4
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	490a      	ldr	r1, [pc, #40]	; (800386c <HAL_RCC_ClockConfig+0x1c0>)
 8003844:	5ccb      	ldrb	r3, [r1, r3]
 8003846:	fa22 f303 	lsr.w	r3, r2, r3
 800384a:	4a09      	ldr	r2, [pc, #36]	; (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 800384c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800384e:	4b09      	ldr	r3, [pc, #36]	; (8003874 <HAL_RCC_ClockConfig+0x1c8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f7fd f93c 	bl	8000ad0 <HAL_InitTick>

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	40023c00 	.word	0x40023c00
 8003868:	40023800 	.word	0x40023800
 800386c:	08007fb0 	.word	0x08007fb0
 8003870:	20000000 	.word	0x20000000
 8003874:	20000004 	.word	0x20000004

08003878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800387c:	b090      	sub	sp, #64	; 0x40
 800387e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	637b      	str	r3, [r7, #52]	; 0x34
 8003884:	2300      	movs	r3, #0
 8003886:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003888:	2300      	movs	r3, #0
 800388a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800388c:	2300      	movs	r3, #0
 800388e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003890:	4b59      	ldr	r3, [pc, #356]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 030c 	and.w	r3, r3, #12
 8003898:	2b08      	cmp	r3, #8
 800389a:	d00d      	beq.n	80038b8 <HAL_RCC_GetSysClockFreq+0x40>
 800389c:	2b08      	cmp	r3, #8
 800389e:	f200 80a1 	bhi.w	80039e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <HAL_RCC_GetSysClockFreq+0x34>
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d003      	beq.n	80038b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80038aa:	e09b      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038ac:	4b53      	ldr	r3, [pc, #332]	; (80039fc <HAL_RCC_GetSysClockFreq+0x184>)
 80038ae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80038b0:	e09b      	b.n	80039ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038b2:	4b53      	ldr	r3, [pc, #332]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x188>)
 80038b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038b6:	e098      	b.n	80039ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038b8:	4b4f      	ldr	r3, [pc, #316]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038c0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038c2:	4b4d      	ldr	r3, [pc, #308]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d028      	beq.n	8003920 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ce:	4b4a      	ldr	r3, [pc, #296]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	099b      	lsrs	r3, r3, #6
 80038d4:	2200      	movs	r2, #0
 80038d6:	623b      	str	r3, [r7, #32]
 80038d8:	627a      	str	r2, [r7, #36]	; 0x24
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80038e0:	2100      	movs	r1, #0
 80038e2:	4b47      	ldr	r3, [pc, #284]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x188>)
 80038e4:	fb03 f201 	mul.w	r2, r3, r1
 80038e8:	2300      	movs	r3, #0
 80038ea:	fb00 f303 	mul.w	r3, r0, r3
 80038ee:	4413      	add	r3, r2
 80038f0:	4a43      	ldr	r2, [pc, #268]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x188>)
 80038f2:	fba0 1202 	umull	r1, r2, r0, r2
 80038f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038f8:	460a      	mov	r2, r1
 80038fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80038fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038fe:	4413      	add	r3, r2
 8003900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003904:	2200      	movs	r2, #0
 8003906:	61bb      	str	r3, [r7, #24]
 8003908:	61fa      	str	r2, [r7, #28]
 800390a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800390e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003912:	f7fc fc5f 	bl	80001d4 <__aeabi_uldivmod>
 8003916:	4602      	mov	r2, r0
 8003918:	460b      	mov	r3, r1
 800391a:	4613      	mov	r3, r2
 800391c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800391e:	e053      	b.n	80039c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003920:	4b35      	ldr	r3, [pc, #212]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	099b      	lsrs	r3, r3, #6
 8003926:	2200      	movs	r2, #0
 8003928:	613b      	str	r3, [r7, #16]
 800392a:	617a      	str	r2, [r7, #20]
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003932:	f04f 0b00 	mov.w	fp, #0
 8003936:	4652      	mov	r2, sl
 8003938:	465b      	mov	r3, fp
 800393a:	f04f 0000 	mov.w	r0, #0
 800393e:	f04f 0100 	mov.w	r1, #0
 8003942:	0159      	lsls	r1, r3, #5
 8003944:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003948:	0150      	lsls	r0, r2, #5
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	ebb2 080a 	subs.w	r8, r2, sl
 8003952:	eb63 090b 	sbc.w	r9, r3, fp
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	f04f 0300 	mov.w	r3, #0
 800395e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003962:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003966:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800396a:	ebb2 0408 	subs.w	r4, r2, r8
 800396e:	eb63 0509 	sbc.w	r5, r3, r9
 8003972:	f04f 0200 	mov.w	r2, #0
 8003976:	f04f 0300 	mov.w	r3, #0
 800397a:	00eb      	lsls	r3, r5, #3
 800397c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003980:	00e2      	lsls	r2, r4, #3
 8003982:	4614      	mov	r4, r2
 8003984:	461d      	mov	r5, r3
 8003986:	eb14 030a 	adds.w	r3, r4, sl
 800398a:	603b      	str	r3, [r7, #0]
 800398c:	eb45 030b 	adc.w	r3, r5, fp
 8003990:	607b      	str	r3, [r7, #4]
 8003992:	f04f 0200 	mov.w	r2, #0
 8003996:	f04f 0300 	mov.w	r3, #0
 800399a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800399e:	4629      	mov	r1, r5
 80039a0:	028b      	lsls	r3, r1, #10
 80039a2:	4621      	mov	r1, r4
 80039a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039a8:	4621      	mov	r1, r4
 80039aa:	028a      	lsls	r2, r1, #10
 80039ac:	4610      	mov	r0, r2
 80039ae:	4619      	mov	r1, r3
 80039b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b2:	2200      	movs	r2, #0
 80039b4:	60bb      	str	r3, [r7, #8]
 80039b6:	60fa      	str	r2, [r7, #12]
 80039b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039bc:	f7fc fc0a 	bl	80001d4 <__aeabi_uldivmod>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4613      	mov	r3, r2
 80039c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039c8:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	0c1b      	lsrs	r3, r3, #16
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	3301      	adds	r3, #1
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80039d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039e2:	e002      	b.n	80039ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039e4:	4b05      	ldr	r3, [pc, #20]	; (80039fc <HAL_RCC_GetSysClockFreq+0x184>)
 80039e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3740      	adds	r7, #64	; 0x40
 80039f0:	46bd      	mov	sp, r7
 80039f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039f6:	bf00      	nop
 80039f8:	40023800 	.word	0x40023800
 80039fc:	00f42400 	.word	0x00f42400
 8003a00:	017d7840 	.word	0x017d7840

08003a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a08:	4b03      	ldr	r3, [pc, #12]	; (8003a18 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	20000000 	.word	0x20000000

08003a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a20:	f7ff fff0 	bl	8003a04 <HAL_RCC_GetHCLKFreq>
 8003a24:	4602      	mov	r2, r0
 8003a26:	4b05      	ldr	r3, [pc, #20]	; (8003a3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	0a9b      	lsrs	r3, r3, #10
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	4903      	ldr	r1, [pc, #12]	; (8003a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a32:	5ccb      	ldrb	r3, [r1, r3]
 8003a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	08007fc0 	.word	0x08007fc0

08003a44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a44:	b084      	sub	sp, #16
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b084      	sub	sp, #16
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	f107 001c 	add.w	r0, r7, #28
 8003a52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d122      	bne.n	8003aa2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003a70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d105      	bne.n	8003a96 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f001 fbee 	bl	8005278 <USB_CoreReset>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	73fb      	strb	r3, [r7, #15]
 8003aa0:	e01a      	b.n	8003ad8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f001 fbe2 	bl	8005278 <USB_CoreReset>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d106      	bne.n	8003acc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	639a      	str	r2, [r3, #56]	; 0x38
 8003aca:	e005      	b.n	8003ad8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d10b      	bne.n	8003af6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f043 0206 	orr.w	r2, r3, #6
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f043 0220 	orr.w	r2, r3, #32
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b02:	b004      	add	sp, #16
 8003b04:	4770      	bx	lr
	...

08003b08 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	4613      	mov	r3, r2
 8003b14:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003b16:	79fb      	ldrb	r3, [r7, #7]
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d165      	bne.n	8003be8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	4a41      	ldr	r2, [pc, #260]	; (8003c24 <USB_SetTurnaroundTime+0x11c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d906      	bls.n	8003b32 <USB_SetTurnaroundTime+0x2a>
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	4a40      	ldr	r2, [pc, #256]	; (8003c28 <USB_SetTurnaroundTime+0x120>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d202      	bcs.n	8003b32 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003b2c:	230f      	movs	r3, #15
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	e062      	b.n	8003bf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	4a3c      	ldr	r2, [pc, #240]	; (8003c28 <USB_SetTurnaroundTime+0x120>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d306      	bcc.n	8003b48 <USB_SetTurnaroundTime+0x40>
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	4a3b      	ldr	r2, [pc, #236]	; (8003c2c <USB_SetTurnaroundTime+0x124>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d202      	bcs.n	8003b48 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003b42:	230e      	movs	r3, #14
 8003b44:	617b      	str	r3, [r7, #20]
 8003b46:	e057      	b.n	8003bf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	4a38      	ldr	r2, [pc, #224]	; (8003c2c <USB_SetTurnaroundTime+0x124>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d306      	bcc.n	8003b5e <USB_SetTurnaroundTime+0x56>
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	4a37      	ldr	r2, [pc, #220]	; (8003c30 <USB_SetTurnaroundTime+0x128>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d202      	bcs.n	8003b5e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003b58:	230d      	movs	r3, #13
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	e04c      	b.n	8003bf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	4a33      	ldr	r2, [pc, #204]	; (8003c30 <USB_SetTurnaroundTime+0x128>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d306      	bcc.n	8003b74 <USB_SetTurnaroundTime+0x6c>
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	4a32      	ldr	r2, [pc, #200]	; (8003c34 <USB_SetTurnaroundTime+0x12c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d802      	bhi.n	8003b74 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003b6e:	230c      	movs	r3, #12
 8003b70:	617b      	str	r3, [r7, #20]
 8003b72:	e041      	b.n	8003bf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	4a2f      	ldr	r2, [pc, #188]	; (8003c34 <USB_SetTurnaroundTime+0x12c>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d906      	bls.n	8003b8a <USB_SetTurnaroundTime+0x82>
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	4a2e      	ldr	r2, [pc, #184]	; (8003c38 <USB_SetTurnaroundTime+0x130>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d802      	bhi.n	8003b8a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003b84:	230b      	movs	r3, #11
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	e036      	b.n	8003bf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	4a2a      	ldr	r2, [pc, #168]	; (8003c38 <USB_SetTurnaroundTime+0x130>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d906      	bls.n	8003ba0 <USB_SetTurnaroundTime+0x98>
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	4a29      	ldr	r2, [pc, #164]	; (8003c3c <USB_SetTurnaroundTime+0x134>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d802      	bhi.n	8003ba0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003b9a:	230a      	movs	r3, #10
 8003b9c:	617b      	str	r3, [r7, #20]
 8003b9e:	e02b      	b.n	8003bf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	4a26      	ldr	r2, [pc, #152]	; (8003c3c <USB_SetTurnaroundTime+0x134>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d906      	bls.n	8003bb6 <USB_SetTurnaroundTime+0xae>
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	4a25      	ldr	r2, [pc, #148]	; (8003c40 <USB_SetTurnaroundTime+0x138>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d202      	bcs.n	8003bb6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003bb0:	2309      	movs	r3, #9
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	e020      	b.n	8003bf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	4a21      	ldr	r2, [pc, #132]	; (8003c40 <USB_SetTurnaroundTime+0x138>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d306      	bcc.n	8003bcc <USB_SetTurnaroundTime+0xc4>
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	4a20      	ldr	r2, [pc, #128]	; (8003c44 <USB_SetTurnaroundTime+0x13c>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d802      	bhi.n	8003bcc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003bc6:	2308      	movs	r3, #8
 8003bc8:	617b      	str	r3, [r7, #20]
 8003bca:	e015      	b.n	8003bf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	4a1d      	ldr	r2, [pc, #116]	; (8003c44 <USB_SetTurnaroundTime+0x13c>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d906      	bls.n	8003be2 <USB_SetTurnaroundTime+0xda>
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	4a1c      	ldr	r2, [pc, #112]	; (8003c48 <USB_SetTurnaroundTime+0x140>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d202      	bcs.n	8003be2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003bdc:	2307      	movs	r3, #7
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	e00a      	b.n	8003bf8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003be2:	2306      	movs	r3, #6
 8003be4:	617b      	str	r3, [r7, #20]
 8003be6:	e007      	b.n	8003bf8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003be8:	79fb      	ldrb	r3, [r7, #7]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d102      	bne.n	8003bf4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003bee:	2309      	movs	r3, #9
 8003bf0:	617b      	str	r3, [r7, #20]
 8003bf2:	e001      	b.n	8003bf8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003bf4:	2309      	movs	r3, #9
 8003bf6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	029b      	lsls	r3, r3, #10
 8003c0c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003c10:	431a      	orrs	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	371c      	adds	r7, #28
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	00d8acbf 	.word	0x00d8acbf
 8003c28:	00e4e1c0 	.word	0x00e4e1c0
 8003c2c:	00f42400 	.word	0x00f42400
 8003c30:	01067380 	.word	0x01067380
 8003c34:	011a499f 	.word	0x011a499f
 8003c38:	01312cff 	.word	0x01312cff
 8003c3c:	014ca43f 	.word	0x014ca43f
 8003c40:	016e3600 	.word	0x016e3600
 8003c44:	01a6ab1f 	.word	0x01a6ab1f
 8003c48:	01e84800 	.word	0x01e84800

08003c4c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f043 0201 	orr.w	r2, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f023 0201 	bic.w	r2, r3, #1
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003cac:	78fb      	ldrb	r3, [r7, #3]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d115      	bne.n	8003cde <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003cbe:	2001      	movs	r0, #1
 8003cc0:	f7fc ff56 	bl	8000b70 <HAL_Delay>
      ms++;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f001 fa45 	bl	800515a <USB_GetMode>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d01e      	beq.n	8003d14 <USB_SetCurrentMode+0x84>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2b31      	cmp	r3, #49	; 0x31
 8003cda:	d9f0      	bls.n	8003cbe <USB_SetCurrentMode+0x2e>
 8003cdc:	e01a      	b.n	8003d14 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003cde:	78fb      	ldrb	r3, [r7, #3]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d115      	bne.n	8003d10 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003cf0:	2001      	movs	r0, #1
 8003cf2:	f7fc ff3d 	bl	8000b70 <HAL_Delay>
      ms++;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f001 fa2c 	bl	800515a <USB_GetMode>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d005      	beq.n	8003d14 <USB_SetCurrentMode+0x84>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2b31      	cmp	r3, #49	; 0x31
 8003d0c:	d9f0      	bls.n	8003cf0 <USB_SetCurrentMode+0x60>
 8003d0e:	e001      	b.n	8003d14 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e005      	b.n	8003d20 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2b32      	cmp	r3, #50	; 0x32
 8003d18:	d101      	bne.n	8003d1e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e000      	b.n	8003d20 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d28:	b084      	sub	sp, #16
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b086      	sub	sp, #24
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
 8003d32:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003d36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003d42:	2300      	movs	r3, #0
 8003d44:	613b      	str	r3, [r7, #16]
 8003d46:	e009      	b.n	8003d5c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	3340      	adds	r3, #64	; 0x40
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4413      	add	r3, r2
 8003d52:	2200      	movs	r2, #0
 8003d54:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	613b      	str	r3, [r7, #16]
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	2b0e      	cmp	r3, #14
 8003d60:	d9f2      	bls.n	8003d48 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d11c      	bne.n	8003da2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d76:	f043 0302 	orr.w	r3, r3, #2
 8003d7a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d80:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d98:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	639a      	str	r2, [r3, #56]	; 0x38
 8003da0:	e00b      	b.n	8003dba <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dcc:	4619      	mov	r1, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	680b      	ldr	r3, [r1, #0]
 8003dd8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d10c      	bne.n	8003dfa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d104      	bne.n	8003df0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003de6:	2100      	movs	r1, #0
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f965 	bl	80040b8 <USB_SetDevSpeed>
 8003dee:	e008      	b.n	8003e02 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003df0:	2101      	movs	r1, #1
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f960 	bl	80040b8 <USB_SetDevSpeed>
 8003df8:	e003      	b.n	8003e02 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003dfa:	2103      	movs	r1, #3
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f95b 	bl	80040b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003e02:	2110      	movs	r1, #16
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f8f3 	bl	8003ff0 <USB_FlushTxFifo>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f91f 	bl	8004058 <USB_FlushRxFifo>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e36:	461a      	mov	r2, r3
 8003e38:	2300      	movs	r3, #0
 8003e3a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e42:	461a      	mov	r2, r3
 8003e44:	2300      	movs	r3, #0
 8003e46:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e48:	2300      	movs	r3, #0
 8003e4a:	613b      	str	r3, [r7, #16]
 8003e4c:	e043      	b.n	8003ed6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	015a      	lsls	r2, r3, #5
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e64:	d118      	bne.n	8003e98 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10a      	bne.n	8003e82 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e78:	461a      	mov	r2, r3
 8003e7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	e013      	b.n	8003eaa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	e008      	b.n	8003eaa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	015a      	lsls	r2, r3, #5
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	015a      	lsls	r2, r3, #5
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	2300      	movs	r3, #0
 8003eba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec8:	461a      	mov	r2, r3
 8003eca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ece:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	613b      	str	r3, [r7, #16]
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d3b7      	bcc.n	8003e4e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ede:	2300      	movs	r3, #0
 8003ee0:	613b      	str	r3, [r7, #16]
 8003ee2:	e043      	b.n	8003f6c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ef6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003efa:	d118      	bne.n	8003f2e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10a      	bne.n	8003f18 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	e013      	b.n	8003f40 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f24:	461a      	mov	r2, r3
 8003f26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f2a:	6013      	str	r3, [r2, #0]
 8003f2c:	e008      	b.n	8003f40 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	2300      	movs	r3, #0
 8003f50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	015a      	lsls	r2, r3, #5
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f5e:	461a      	mov	r2, r3
 8003f60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d3b7      	bcc.n	8003ee4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f86:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003f94:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d105      	bne.n	8003fa8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	f043 0210 	orr.w	r2, r3, #16
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	699a      	ldr	r2, [r3, #24]
 8003fac:	4b0f      	ldr	r3, [pc, #60]	; (8003fec <USB_DevInit+0x2c4>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d005      	beq.n	8003fc6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	f043 0208 	orr.w	r2, r3, #8
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d107      	bne.n	8003fdc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fd4:	f043 0304 	orr.w	r3, r3, #4
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3718      	adds	r7, #24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fe8:	b004      	add	sp, #16
 8003fea:	4770      	bx	lr
 8003fec:	803c3800 	.word	0x803c3800

08003ff0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	3301      	adds	r3, #1
 8004002:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4a13      	ldr	r2, [pc, #76]	; (8004054 <USB_FlushTxFifo+0x64>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d901      	bls.n	8004010 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e01b      	b.n	8004048 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	2b00      	cmp	r3, #0
 8004016:	daf2      	bge.n	8003ffe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004018:	2300      	movs	r3, #0
 800401a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	019b      	lsls	r3, r3, #6
 8004020:	f043 0220 	orr.w	r2, r3, #32
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	3301      	adds	r3, #1
 800402c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	4a08      	ldr	r2, [pc, #32]	; (8004054 <USB_FlushTxFifo+0x64>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d901      	bls.n	800403a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e006      	b.n	8004048 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	f003 0320 	and.w	r3, r3, #32
 8004042:	2b20      	cmp	r3, #32
 8004044:	d0f0      	beq.n	8004028 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	00030d40 	.word	0x00030d40

08004058 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	3301      	adds	r3, #1
 8004068:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	4a11      	ldr	r2, [pc, #68]	; (80040b4 <USB_FlushRxFifo+0x5c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d901      	bls.n	8004076 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e018      	b.n	80040a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	daf2      	bge.n	8004064 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800407e:	2300      	movs	r3, #0
 8004080:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2210      	movs	r2, #16
 8004086:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	3301      	adds	r3, #1
 800408c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4a08      	ldr	r2, [pc, #32]	; (80040b4 <USB_FlushRxFifo+0x5c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d901      	bls.n	800409a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e006      	b.n	80040a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	f003 0310 	and.w	r3, r3, #16
 80040a2:	2b10      	cmp	r3, #16
 80040a4:	d0f0      	beq.n	8004088 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	00030d40 	.word	0x00030d40

080040b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	78fb      	ldrb	r3, [r7, #3]
 80040d2:	68f9      	ldr	r1, [r7, #12]
 80040d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040d8:	4313      	orrs	r3, r2
 80040da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b087      	sub	sp, #28
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 0306 	and.w	r3, r3, #6
 8004102:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d102      	bne.n	8004110 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800410a:	2300      	movs	r3, #0
 800410c:	75fb      	strb	r3, [r7, #23]
 800410e:	e00a      	b.n	8004126 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2b02      	cmp	r3, #2
 8004114:	d002      	beq.n	800411c <USB_GetDevSpeed+0x32>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2b06      	cmp	r3, #6
 800411a:	d102      	bne.n	8004122 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800411c:	2302      	movs	r3, #2
 800411e:	75fb      	strb	r3, [r7, #23]
 8004120:	e001      	b.n	8004126 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004122:	230f      	movs	r3, #15
 8004124:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004126:	7dfb      	ldrb	r3, [r7, #23]
}
 8004128:	4618      	mov	r0, r3
 800412a:	371c      	adds	r7, #28
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	785b      	ldrb	r3, [r3, #1]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d13a      	bne.n	80041c6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004156:	69da      	ldr	r2, [r3, #28]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	f003 030f 	and.w	r3, r3, #15
 8004160:	2101      	movs	r1, #1
 8004162:	fa01 f303 	lsl.w	r3, r1, r3
 8004166:	b29b      	uxth	r3, r3
 8004168:	68f9      	ldr	r1, [r7, #12]
 800416a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800416e:	4313      	orrs	r3, r2
 8004170:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4413      	add	r3, r2
 800417a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d155      	bne.n	8004234 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	015a      	lsls	r2, r3, #5
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	4413      	add	r3, r2
 8004190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	791b      	ldrb	r3, [r3, #4]
 80041a2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80041a4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	059b      	lsls	r3, r3, #22
 80041aa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80041ac:	4313      	orrs	r3, r2
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	0151      	lsls	r1, r2, #5
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	440a      	add	r2, r1
 80041b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041c2:	6013      	str	r3, [r2, #0]
 80041c4:	e036      	b.n	8004234 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041cc:	69da      	ldr	r2, [r3, #28]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	f003 030f 	and.w	r3, r3, #15
 80041d6:	2101      	movs	r1, #1
 80041d8:	fa01 f303 	lsl.w	r3, r1, r3
 80041dc:	041b      	lsls	r3, r3, #16
 80041de:	68f9      	ldr	r1, [r7, #12]
 80041e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041e4:	4313      	orrs	r3, r2
 80041e6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d11a      	bne.n	8004234 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4413      	add	r3, r2
 8004206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	791b      	ldrb	r3, [r3, #4]
 8004218:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800421a:	430b      	orrs	r3, r1
 800421c:	4313      	orrs	r3, r2
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	0151      	lsls	r1, r2, #5
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	440a      	add	r2, r1
 8004226:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800422a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800422e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004232:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
	...

08004244 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	785b      	ldrb	r3, [r3, #1]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d161      	bne.n	8004324 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4413      	add	r3, r2
 8004268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004272:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004276:	d11f      	bne.n	80042b8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4413      	add	r3, r2
 8004280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	0151      	lsls	r1, r2, #5
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	440a      	add	r2, r1
 800428e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004292:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004296:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	0151      	lsls	r1, r2, #5
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	440a      	add	r2, r1
 80042ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	f003 030f 	and.w	r3, r3, #15
 80042c8:	2101      	movs	r1, #1
 80042ca:	fa01 f303 	lsl.w	r3, r1, r3
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	43db      	mvns	r3, r3
 80042d2:	68f9      	ldr	r1, [r7, #12]
 80042d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042d8:	4013      	ands	r3, r2
 80042da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e2:	69da      	ldr	r2, [r3, #28]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	f003 030f 	and.w	r3, r3, #15
 80042ec:	2101      	movs	r1, #1
 80042ee:	fa01 f303 	lsl.w	r3, r1, r3
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	43db      	mvns	r3, r3
 80042f6:	68f9      	ldr	r1, [r7, #12]
 80042f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042fc:	4013      	ands	r3, r2
 80042fe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	0159      	lsls	r1, r3, #5
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	440b      	add	r3, r1
 8004316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800431a:	4619      	mov	r1, r3
 800431c:	4b35      	ldr	r3, [pc, #212]	; (80043f4 <USB_DeactivateEndpoint+0x1b0>)
 800431e:	4013      	ands	r3, r2
 8004320:	600b      	str	r3, [r1, #0]
 8004322:	e060      	b.n	80043e6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4413      	add	r3, r2
 800432c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004336:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800433a:	d11f      	bne.n	800437c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4413      	add	r3, r2
 8004344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	0151      	lsls	r1, r2, #5
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	440a      	add	r2, r1
 8004352:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004356:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800435a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4413      	add	r3, r2
 8004364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	0151      	lsls	r1, r2, #5
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	440a      	add	r2, r1
 8004372:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004376:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800437a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	f003 030f 	and.w	r3, r3, #15
 800438c:	2101      	movs	r1, #1
 800438e:	fa01 f303 	lsl.w	r3, r1, r3
 8004392:	041b      	lsls	r3, r3, #16
 8004394:	43db      	mvns	r3, r3
 8004396:	68f9      	ldr	r1, [r7, #12]
 8004398:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800439c:	4013      	ands	r3, r2
 800439e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a6:	69da      	ldr	r2, [r3, #28]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	f003 030f 	and.w	r3, r3, #15
 80043b0:	2101      	movs	r1, #1
 80043b2:	fa01 f303 	lsl.w	r3, r1, r3
 80043b6:	041b      	lsls	r3, r3, #16
 80043b8:	43db      	mvns	r3, r3
 80043ba:	68f9      	ldr	r1, [r7, #12]
 80043bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043c0:	4013      	ands	r3, r2
 80043c2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	0159      	lsls	r1, r3, #5
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	440b      	add	r3, r1
 80043da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043de:	4619      	mov	r1, r3
 80043e0:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <USB_DeactivateEndpoint+0x1b4>)
 80043e2:	4013      	ands	r3, r2
 80043e4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	ec337800 	.word	0xec337800
 80043f8:	eff37800 	.word	0xeff37800

080043fc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b08a      	sub	sp, #40	; 0x28
 8004400:	af02      	add	r7, sp, #8
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	4613      	mov	r3, r2
 8004408:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	785b      	ldrb	r3, [r3, #1]
 8004418:	2b01      	cmp	r3, #1
 800441a:	f040 815c 	bne.w	80046d6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d132      	bne.n	800448c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	015a      	lsls	r2, r3, #5
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	4413      	add	r3, r2
 800442e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	0151      	lsls	r1, r2, #5
 8004438:	69fa      	ldr	r2, [r7, #28]
 800443a:	440a      	add	r2, r1
 800443c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004440:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004444:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004448:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	4413      	add	r3, r2
 8004452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	0151      	lsls	r1, r2, #5
 800445c:	69fa      	ldr	r2, [r7, #28]
 800445e:	440a      	add	r2, r1
 8004460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004464:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004468:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	015a      	lsls	r2, r3, #5
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	4413      	add	r3, r2
 8004472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	0151      	lsls	r1, r2, #5
 800447c:	69fa      	ldr	r2, [r7, #28]
 800447e:	440a      	add	r2, r1
 8004480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004484:	0cdb      	lsrs	r3, r3, #19
 8004486:	04db      	lsls	r3, r3, #19
 8004488:	6113      	str	r3, [r2, #16]
 800448a:	e074      	b.n	8004576 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	4413      	add	r3, r2
 8004494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	0151      	lsls	r1, r2, #5
 800449e:	69fa      	ldr	r2, [r7, #28]
 80044a0:	440a      	add	r2, r1
 80044a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044a6:	0cdb      	lsrs	r3, r3, #19
 80044a8:	04db      	lsls	r3, r3, #19
 80044aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	0151      	lsls	r1, r2, #5
 80044be:	69fa      	ldr	r2, [r7, #28]
 80044c0:	440a      	add	r2, r1
 80044c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044dc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	6999      	ldr	r1, [r3, #24]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	440b      	add	r3, r1
 80044e8:	1e59      	subs	r1, r3, #1
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80044f2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80044f4:	4b9d      	ldr	r3, [pc, #628]	; (800476c <USB_EPStartXfer+0x370>)
 80044f6:	400b      	ands	r3, r1
 80044f8:	69b9      	ldr	r1, [r7, #24]
 80044fa:	0148      	lsls	r0, r1, #5
 80044fc:	69f9      	ldr	r1, [r7, #28]
 80044fe:	4401      	add	r1, r0
 8004500:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004504:	4313      	orrs	r3, r2
 8004506:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	4413      	add	r3, r2
 8004510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004514:	691a      	ldr	r2, [r3, #16]
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800451e:	69b9      	ldr	r1, [r7, #24]
 8004520:	0148      	lsls	r0, r1, #5
 8004522:	69f9      	ldr	r1, [r7, #28]
 8004524:	4401      	add	r1, r0
 8004526:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800452a:	4313      	orrs	r3, r2
 800452c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	791b      	ldrb	r3, [r3, #4]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d11f      	bne.n	8004576 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	0151      	lsls	r1, r2, #5
 8004548:	69fa      	ldr	r2, [r7, #28]
 800454a:	440a      	add	r2, r1
 800454c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004550:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004554:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	015a      	lsls	r2, r3, #5
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	4413      	add	r3, r2
 800455e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	0151      	lsls	r1, r2, #5
 8004568:	69fa      	ldr	r2, [r7, #28]
 800456a:	440a      	add	r2, r1
 800456c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004570:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004574:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004576:	79fb      	ldrb	r3, [r7, #7]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d14b      	bne.n	8004614 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d009      	beq.n	8004598 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	4413      	add	r3, r2
 800458c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004590:	461a      	mov	r2, r3
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	791b      	ldrb	r3, [r3, #4]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d128      	bne.n	80045f2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d110      	bne.n	80045d2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	0151      	lsls	r1, r2, #5
 80045c2:	69fa      	ldr	r2, [r7, #28]
 80045c4:	440a      	add	r2, r1
 80045c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045ce:	6013      	str	r3, [r2, #0]
 80045d0:	e00f      	b.n	80045f2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	015a      	lsls	r2, r3, #5
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	0151      	lsls	r1, r2, #5
 80045e4:	69fa      	ldr	r2, [r7, #28]
 80045e6:	440a      	add	r2, r1
 80045e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045f0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	015a      	lsls	r2, r3, #5
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	0151      	lsls	r1, r2, #5
 8004604:	69fa      	ldr	r2, [r7, #28]
 8004606:	440a      	add	r2, r1
 8004608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800460c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004610:	6013      	str	r3, [r2, #0]
 8004612:	e133      	b.n	800487c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	015a      	lsls	r2, r3, #5
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	4413      	add	r3, r2
 800461c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	0151      	lsls	r1, r2, #5
 8004626:	69fa      	ldr	r2, [r7, #28]
 8004628:	440a      	add	r2, r1
 800462a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800462e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004632:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	791b      	ldrb	r3, [r3, #4]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d015      	beq.n	8004668 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 811b 	beq.w	800487c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800464c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	f003 030f 	and.w	r3, r3, #15
 8004656:	2101      	movs	r1, #1
 8004658:	fa01 f303 	lsl.w	r3, r1, r3
 800465c:	69f9      	ldr	r1, [r7, #28]
 800465e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004662:	4313      	orrs	r3, r2
 8004664:	634b      	str	r3, [r1, #52]	; 0x34
 8004666:	e109      	b.n	800487c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004674:	2b00      	cmp	r3, #0
 8004676:	d110      	bne.n	800469a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	0151      	lsls	r1, r2, #5
 800468a:	69fa      	ldr	r2, [r7, #28]
 800468c:	440a      	add	r2, r1
 800468e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004692:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004696:	6013      	str	r3, [r2, #0]
 8004698:	e00f      	b.n	80046ba <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	0151      	lsls	r1, r2, #5
 80046ac:	69fa      	ldr	r2, [r7, #28]
 80046ae:	440a      	add	r2, r1
 80046b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	6919      	ldr	r1, [r3, #16]
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	781a      	ldrb	r2, [r3, #0]
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	b298      	uxth	r0, r3
 80046c8:	79fb      	ldrb	r3, [r7, #7]
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	4603      	mov	r3, r0
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 fade 	bl	8004c90 <USB_WritePacket>
 80046d4:	e0d2      	b.n	800487c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	0151      	lsls	r1, r2, #5
 80046e8:	69fa      	ldr	r2, [r7, #28]
 80046ea:	440a      	add	r2, r1
 80046ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046f0:	0cdb      	lsrs	r3, r3, #19
 80046f2:	04db      	lsls	r3, r3, #19
 80046f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	0151      	lsls	r1, r2, #5
 8004708:	69fa      	ldr	r2, [r7, #28]
 800470a:	440a      	add	r2, r1
 800470c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004710:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004714:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004718:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d126      	bne.n	8004770 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	4413      	add	r3, r2
 800472a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800472e:	691a      	ldr	r2, [r3, #16]
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004738:	69b9      	ldr	r1, [r7, #24]
 800473a:	0148      	lsls	r0, r1, #5
 800473c:	69f9      	ldr	r1, [r7, #28]
 800473e:	4401      	add	r1, r0
 8004740:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004744:	4313      	orrs	r3, r2
 8004746:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	0151      	lsls	r1, r2, #5
 800475a:	69fa      	ldr	r2, [r7, #28]
 800475c:	440a      	add	r2, r1
 800475e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004762:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004766:	6113      	str	r3, [r2, #16]
 8004768:	e03a      	b.n	80047e0 <USB_EPStartXfer+0x3e4>
 800476a:	bf00      	nop
 800476c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	699a      	ldr	r2, [r3, #24]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	4413      	add	r3, r2
 800477a:	1e5a      	subs	r2, r3, #1
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	fbb2 f3f3 	udiv	r3, r2, r3
 8004784:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	8afa      	ldrh	r2, [r7, #22]
 800478c:	fb03 f202 	mul.w	r2, r3, r2
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a0:	691a      	ldr	r2, [r3, #16]
 80047a2:	8afb      	ldrh	r3, [r7, #22]
 80047a4:	04d9      	lsls	r1, r3, #19
 80047a6:	4b38      	ldr	r3, [pc, #224]	; (8004888 <USB_EPStartXfer+0x48c>)
 80047a8:	400b      	ands	r3, r1
 80047aa:	69b9      	ldr	r1, [r7, #24]
 80047ac:	0148      	lsls	r0, r1, #5
 80047ae:	69f9      	ldr	r1, [r7, #28]
 80047b0:	4401      	add	r1, r0
 80047b2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80047b6:	4313      	orrs	r3, r2
 80047b8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c6:	691a      	ldr	r2, [r3, #16]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047d0:	69b9      	ldr	r1, [r7, #24]
 80047d2:	0148      	lsls	r0, r1, #5
 80047d4:	69f9      	ldr	r1, [r7, #28]
 80047d6:	4401      	add	r1, r0
 80047d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80047dc:	4313      	orrs	r3, r2
 80047de:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80047e0:	79fb      	ldrb	r3, [r7, #7]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d10d      	bne.n	8004802 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d009      	beq.n	8004802 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	6919      	ldr	r1, [r3, #16]
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	015a      	lsls	r2, r3, #5
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047fe:	460a      	mov	r2, r1
 8004800:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	791b      	ldrb	r3, [r3, #4]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d128      	bne.n	800485c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004816:	2b00      	cmp	r3, #0
 8004818:	d110      	bne.n	800483c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	015a      	lsls	r2, r3, #5
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	4413      	add	r3, r2
 8004822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	0151      	lsls	r1, r2, #5
 800482c:	69fa      	ldr	r2, [r7, #28]
 800482e:	440a      	add	r2, r1
 8004830:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004834:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	e00f      	b.n	800485c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	0151      	lsls	r1, r2, #5
 800484e:	69fa      	ldr	r2, [r7, #28]
 8004850:	440a      	add	r2, r1
 8004852:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800485a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	4413      	add	r3, r2
 8004864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	0151      	lsls	r1, r2, #5
 800486e:	69fa      	ldr	r2, [r7, #28]
 8004870:	440a      	add	r2, r1
 8004872:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004876:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800487a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3720      	adds	r7, #32
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	1ff80000 	.word	0x1ff80000

0800488c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	4613      	mov	r3, r2
 8004898:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	785b      	ldrb	r3, [r3, #1]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	f040 80ce 	bne.w	8004a4a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d132      	bne.n	800491c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	015a      	lsls	r2, r3, #5
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	4413      	add	r3, r2
 80048be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	0151      	lsls	r1, r2, #5
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	440a      	add	r2, r1
 80048cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	0151      	lsls	r1, r2, #5
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	440a      	add	r2, r1
 80048f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	4413      	add	r3, r2
 8004902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	0151      	lsls	r1, r2, #5
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	440a      	add	r2, r1
 8004910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004914:	0cdb      	lsrs	r3, r3, #19
 8004916:	04db      	lsls	r3, r3, #19
 8004918:	6113      	str	r3, [r2, #16]
 800491a:	e04e      	b.n	80049ba <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	4413      	add	r3, r2
 8004924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	0151      	lsls	r1, r2, #5
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	440a      	add	r2, r1
 8004932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004936:	0cdb      	lsrs	r3, r3, #19
 8004938:	04db      	lsls	r3, r3, #19
 800493a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	4413      	add	r3, r2
 8004944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	0151      	lsls	r1, r2, #5
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	440a      	add	r2, r1
 8004952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004956:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800495a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800495e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	699a      	ldr	r2, [r3, #24]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	429a      	cmp	r2, r3
 800496a:	d903      	bls.n	8004974 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	68da      	ldr	r2, [r3, #12]
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	0151      	lsls	r1, r2, #5
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	440a      	add	r2, r1
 800498a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800498e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004992:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	015a      	lsls	r2, r3, #5
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	4413      	add	r3, r2
 800499c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a0:	691a      	ldr	r2, [r3, #16]
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049aa:	6939      	ldr	r1, [r7, #16]
 80049ac:	0148      	lsls	r0, r1, #5
 80049ae:	6979      	ldr	r1, [r7, #20]
 80049b0:	4401      	add	r1, r0
 80049b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049b6:	4313      	orrs	r3, r2
 80049b8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80049ba:	79fb      	ldrb	r3, [r7, #7]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d11e      	bne.n	80049fe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d009      	beq.n	80049dc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d4:	461a      	mov	r2, r3
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	0151      	lsls	r1, r2, #5
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	440a      	add	r2, r1
 80049f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049fa:	6013      	str	r3, [r2, #0]
 80049fc:	e097      	b.n	8004b2e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	015a      	lsls	r2, r3, #5
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	0151      	lsls	r1, r2, #5
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	440a      	add	r2, r1
 8004a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a1c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f000 8083 	beq.w	8004b2e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	f003 030f 	and.w	r3, r3, #15
 8004a38:	2101      	movs	r1, #1
 8004a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a3e:	6979      	ldr	r1, [r7, #20]
 8004a40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a44:	4313      	orrs	r3, r2
 8004a46:	634b      	str	r3, [r1, #52]	; 0x34
 8004a48:	e071      	b.n	8004b2e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	015a      	lsls	r2, r3, #5
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	0151      	lsls	r1, r2, #5
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	440a      	add	r2, r1
 8004a60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a64:	0cdb      	lsrs	r3, r3, #19
 8004a66:	04db      	lsls	r3, r3, #19
 8004a68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	015a      	lsls	r2, r3, #5
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	4413      	add	r3, r2
 8004a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	0151      	lsls	r1, r2, #5
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	440a      	add	r2, r1
 8004a80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a8c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	015a      	lsls	r2, r3, #5
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	4413      	add	r3, r2
 8004aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	0151      	lsls	r1, r2, #5
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	440a      	add	r2, r1
 8004abc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ac0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ac4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad2:	691a      	ldr	r2, [r3, #16]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	69db      	ldr	r3, [r3, #28]
 8004ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004adc:	6939      	ldr	r1, [r7, #16]
 8004ade:	0148      	lsls	r0, r1, #5
 8004ae0:	6979      	ldr	r1, [r7, #20]
 8004ae2:	4401      	add	r1, r0
 8004ae4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004aec:	79fb      	ldrb	r3, [r7, #7]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d10d      	bne.n	8004b0e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d009      	beq.n	8004b0e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	6919      	ldr	r1, [r3, #16]
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	015a      	lsls	r2, r3, #5
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	4413      	add	r3, r2
 8004b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0a:	460a      	mov	r2, r1
 8004b0c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	015a      	lsls	r2, r3, #5
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	0151      	lsls	r1, r2, #5
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	440a      	add	r2, r1
 8004b24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b28:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b2c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	371c      	adds	r7, #28
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b087      	sub	sp, #28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b46:	2300      	movs	r3, #0
 8004b48:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	785b      	ldrb	r3, [r3, #1]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d14a      	bne.n	8004bf0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b72:	f040 8086 	bne.w	8004c82 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	7812      	ldrb	r2, [r2, #0]
 8004b8a:	0151      	lsls	r1, r2, #5
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	440a      	add	r2, r1
 8004b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b98:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	7812      	ldrb	r2, [r2, #0]
 8004bae:	0151      	lsls	r1, r2, #5
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	440a      	add	r2, r1
 8004bb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bbc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f242 7210 	movw	r2, #10000	; 0x2710
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d902      	bls.n	8004bd4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	75fb      	strb	r3, [r7, #23]
          break;
 8004bd2:	e056      	b.n	8004c82 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004be8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bec:	d0e7      	beq.n	8004bbe <USB_EPStopXfer+0x82>
 8004bee:	e048      	b.n	8004c82 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c08:	d13b      	bne.n	8004c82 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	7812      	ldrb	r2, [r2, #0]
 8004c1e:	0151      	lsls	r1, r2, #5
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	440a      	add	r2, r1
 8004c24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c2c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	7812      	ldrb	r2, [r2, #0]
 8004c42:	0151      	lsls	r1, r2, #5
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	440a      	add	r2, r1
 8004c48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c50:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	3301      	adds	r3, #1
 8004c56:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d902      	bls.n	8004c68 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	75fb      	strb	r3, [r7, #23]
          break;
 8004c66:	e00c      	b.n	8004c82 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	015a      	lsls	r2, r3, #5
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c80:	d0e7      	beq.n	8004c52 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	371c      	adds	r7, #28
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b089      	sub	sp, #36	; 0x24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	4611      	mov	r1, r2
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	71fb      	strb	r3, [r7, #7]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004cae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d123      	bne.n	8004cfe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004cb6:	88bb      	ldrh	r3, [r7, #4]
 8004cb8:	3303      	adds	r3, #3
 8004cba:	089b      	lsrs	r3, r3, #2
 8004cbc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61bb      	str	r3, [r7, #24]
 8004cc2:	e018      	b.n	8004cf6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004cc4:	79fb      	ldrb	r3, [r7, #7]
 8004cc6:	031a      	lsls	r2, r3, #12
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	3301      	adds	r3, #1
 8004cee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	61bb      	str	r3, [r7, #24]
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d3e2      	bcc.n	8004cc4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3724      	adds	r7, #36	; 0x24
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b08b      	sub	sp, #44	; 0x2c
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	4613      	mov	r3, r2
 8004d18:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004d22:	88fb      	ldrh	r3, [r7, #6]
 8004d24:	089b      	lsrs	r3, r3, #2
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004d2a:	88fb      	ldrh	r3, [r7, #6]
 8004d2c:	f003 0303 	and.w	r3, r3, #3
 8004d30:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004d32:	2300      	movs	r3, #0
 8004d34:	623b      	str	r3, [r7, #32]
 8004d36:	e014      	b.n	8004d62 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	601a      	str	r2, [r3, #0]
    pDest++;
 8004d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d46:	3301      	adds	r3, #1
 8004d48:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d52:	3301      	adds	r3, #1
 8004d54:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	3301      	adds	r3, #1
 8004d5a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	623b      	str	r3, [r7, #32]
 8004d62:	6a3a      	ldr	r2, [r7, #32]
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d3e6      	bcc.n	8004d38 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004d6a:	8bfb      	ldrh	r3, [r7, #30]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d01e      	beq.n	8004dae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f107 0310 	add.w	r3, r7, #16
 8004d80:	6812      	ldr	r2, [r2, #0]
 8004d82:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	701a      	strb	r2, [r3, #0]
      i++;
 8004d96:	6a3b      	ldr	r3, [r7, #32]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	623b      	str	r3, [r7, #32]
      pDest++;
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	3301      	adds	r3, #1
 8004da0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004da2:	8bfb      	ldrh	r3, [r7, #30]
 8004da4:	3b01      	subs	r3, #1
 8004da6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004da8:	8bfb      	ldrh	r3, [r7, #30]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1ea      	bne.n	8004d84 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	372c      	adds	r7, #44	; 0x2c
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	785b      	ldrb	r3, [r3, #1]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d12c      	bne.n	8004e32 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	db12      	blt.n	8004e10 <USB_EPSetStall+0x54>
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00f      	beq.n	8004e10 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	0151      	lsls	r1, r2, #5
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	440a      	add	r2, r1
 8004e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e0e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	0151      	lsls	r1, r2, #5
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	440a      	add	r2, r1
 8004e26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e2e:	6013      	str	r3, [r2, #0]
 8004e30:	e02b      	b.n	8004e8a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	015a      	lsls	r2, r3, #5
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	db12      	blt.n	8004e6a <USB_EPSetStall+0xae>
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00f      	beq.n	8004e6a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	0151      	lsls	r1, r2, #5
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	440a      	add	r2, r1
 8004e60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e68:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	015a      	lsls	r2, r3, #5
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	4413      	add	r3, r2
 8004e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	0151      	lsls	r1, r2, #5
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	440a      	add	r2, r1
 8004e80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e88:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	785b      	ldrb	r3, [r3, #1]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d128      	bne.n	8004f06 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	0151      	lsls	r1, r2, #5
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	440a      	add	r2, r1
 8004eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ece:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ed2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	791b      	ldrb	r3, [r3, #4]
 8004ed8:	2b03      	cmp	r3, #3
 8004eda:	d003      	beq.n	8004ee4 <USB_EPClearStall+0x4c>
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	791b      	ldrb	r3, [r3, #4]
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d138      	bne.n	8004f56 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	0151      	lsls	r1, r2, #5
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	440a      	add	r2, r1
 8004efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f02:	6013      	str	r3, [r2, #0]
 8004f04:	e027      	b.n	8004f56 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	0151      	lsls	r1, r2, #5
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	440a      	add	r2, r1
 8004f1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f24:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	791b      	ldrb	r3, [r3, #4]
 8004f2a:	2b03      	cmp	r3, #3
 8004f2c:	d003      	beq.n	8004f36 <USB_EPClearStall+0x9e>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	791b      	ldrb	r3, [r3, #4]
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d10f      	bne.n	8004f56 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	0151      	lsls	r1, r2, #5
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	440a      	add	r2, r1
 8004f4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f54:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f82:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004f86:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	78fb      	ldrb	r3, [r7, #3]
 8004f92:	011b      	lsls	r3, r3, #4
 8004f94:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004f98:	68f9      	ldr	r1, [r7, #12]
 8004f9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004fca:	f023 0303 	bic.w	r3, r3, #3
 8004fce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fde:	f023 0302 	bic.w	r3, r3, #2
 8004fe2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b085      	sub	sp, #20
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800500c:	f023 0303 	bic.w	r3, r3, #3
 8005010:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005020:	f043 0302 	orr.w	r3, r3, #2
 8005024:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3714      	adds	r7, #20
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4013      	ands	r3, r2
 800504a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800504c:	68fb      	ldr	r3, [r7, #12]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800505a:	b480      	push	{r7}
 800505c:	b085      	sub	sp, #20
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	4013      	ands	r3, r2
 800507c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	0c1b      	lsrs	r3, r3, #16
}
 8005082:	4618      	mov	r0, r3
 8005084:	3714      	adds	r7, #20
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800508e:	b480      	push	{r7}
 8005090:	b085      	sub	sp, #20
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050aa:	69db      	ldr	r3, [r3, #28]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	4013      	ands	r3, r2
 80050b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	b29b      	uxth	r3, r3
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3714      	adds	r7, #20
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b085      	sub	sp, #20
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
 80050ca:	460b      	mov	r3, r1
 80050cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80050d2:	78fb      	ldrb	r3, [r7, #3]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	4013      	ands	r3, r2
 80050ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80050f0:	68bb      	ldr	r3, [r7, #8]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80050fe:	b480      	push	{r7}
 8005100:	b087      	sub	sp, #28
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	460b      	mov	r3, r1
 8005108:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800511e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005120:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005122:	78fb      	ldrb	r3, [r7, #3]
 8005124:	f003 030f 	and.w	r3, r3, #15
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	fa22 f303 	lsr.w	r3, r2, r3
 800512e:	01db      	lsls	r3, r3, #7
 8005130:	b2db      	uxtb	r3, r3
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	4313      	orrs	r3, r2
 8005136:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005138:	78fb      	ldrb	r3, [r7, #3]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	4013      	ands	r3, r2
 800514a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800514c:	68bb      	ldr	r3, [r7, #8]
}
 800514e:	4618      	mov	r0, r3
 8005150:	371c      	adds	r7, #28
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800515a:	b480      	push	{r7}
 800515c:	b083      	sub	sp, #12
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	f003 0301 	and.w	r3, r3, #1
}
 800516a:	4618      	mov	r0, r3
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005176:	b480      	push	{r7}
 8005178:	b085      	sub	sp, #20
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005190:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005194:	f023 0307 	bic.w	r3, r3, #7
 8005198:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80051bc:	b480      	push	{r7}
 80051be:	b087      	sub	sp, #28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	460b      	mov	r3, r1
 80051c6:	607a      	str	r2, [r7, #4]
 80051c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	333c      	adds	r3, #60	; 0x3c
 80051d2:	3304      	adds	r3, #4
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	4a26      	ldr	r2, [pc, #152]	; (8005274 <USB_EP0_OutStart+0xb8>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d90a      	bls.n	80051f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051f0:	d101      	bne.n	80051f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80051f2:	2300      	movs	r3, #0
 80051f4:	e037      	b.n	8005266 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051fc:	461a      	mov	r2, r3
 80051fe:	2300      	movs	r3, #0
 8005200:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005210:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005214:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005224:	f043 0318 	orr.w	r3, r3, #24
 8005228:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005238:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800523c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800523e:	7afb      	ldrb	r3, [r7, #11]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d10f      	bne.n	8005264 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524a:	461a      	mov	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800525e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005262:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	371c      	adds	r7, #28
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	4f54300a 	.word	0x4f54300a

08005278 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005280:	2300      	movs	r3, #0
 8005282:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	3301      	adds	r3, #1
 8005288:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	4a13      	ldr	r2, [pc, #76]	; (80052dc <USB_CoreReset+0x64>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d901      	bls.n	8005296 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e01b      	b.n	80052ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	2b00      	cmp	r3, #0
 800529c:	daf2      	bge.n	8005284 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	f043 0201 	orr.w	r2, r3, #1
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	3301      	adds	r3, #1
 80052b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4a09      	ldr	r2, [pc, #36]	; (80052dc <USB_CoreReset+0x64>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d901      	bls.n	80052c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e006      	b.n	80052ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d0f0      	beq.n	80052ae <USB_CoreReset+0x36>

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	00030d40 	.word	0x00030d40

080052e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	460b      	mov	r3, r1
 80052ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80052ec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80052f0:	f002 fc8a 	bl	8007c08 <USBD_static_malloc>
 80052f4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d109      	bne.n	8005310 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	32b0      	adds	r2, #176	; 0xb0
 8005306:	2100      	movs	r1, #0
 8005308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800530c:	2302      	movs	r3, #2
 800530e:	e0d4      	b.n	80054ba <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005310:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005314:	2100      	movs	r1, #0
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f002 fd76 	bl	8007e08 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	32b0      	adds	r2, #176	; 0xb0
 8005326:	68f9      	ldr	r1, [r7, #12]
 8005328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	32b0      	adds	r2, #176	; 0xb0
 8005336:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	7c1b      	ldrb	r3, [r3, #16]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d138      	bne.n	80053ba <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005348:	4b5e      	ldr	r3, [pc, #376]	; (80054c4 <USBD_CDC_Init+0x1e4>)
 800534a:	7819      	ldrb	r1, [r3, #0]
 800534c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005350:	2202      	movs	r2, #2
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f002 fb35 	bl	80079c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005358:	4b5a      	ldr	r3, [pc, #360]	; (80054c4 <USBD_CDC_Init+0x1e4>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	f003 020f 	and.w	r2, r3, #15
 8005360:	6879      	ldr	r1, [r7, #4]
 8005362:	4613      	mov	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	440b      	add	r3, r1
 800536c:	3324      	adds	r3, #36	; 0x24
 800536e:	2201      	movs	r2, #1
 8005370:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005372:	4b55      	ldr	r3, [pc, #340]	; (80054c8 <USBD_CDC_Init+0x1e8>)
 8005374:	7819      	ldrb	r1, [r3, #0]
 8005376:	f44f 7300 	mov.w	r3, #512	; 0x200
 800537a:	2202      	movs	r2, #2
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f002 fb20 	bl	80079c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005382:	4b51      	ldr	r3, [pc, #324]	; (80054c8 <USBD_CDC_Init+0x1e8>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	f003 020f 	and.w	r2, r3, #15
 800538a:	6879      	ldr	r1, [r7, #4]
 800538c:	4613      	mov	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	440b      	add	r3, r1
 8005396:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800539a:	2201      	movs	r2, #1
 800539c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800539e:	4b4b      	ldr	r3, [pc, #300]	; (80054cc <USBD_CDC_Init+0x1ec>)
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	f003 020f 	and.w	r2, r3, #15
 80053a6:	6879      	ldr	r1, [r7, #4]
 80053a8:	4613      	mov	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	440b      	add	r3, r1
 80053b2:	3326      	adds	r3, #38	; 0x26
 80053b4:	2210      	movs	r2, #16
 80053b6:	801a      	strh	r2, [r3, #0]
 80053b8:	e035      	b.n	8005426 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80053ba:	4b42      	ldr	r3, [pc, #264]	; (80054c4 <USBD_CDC_Init+0x1e4>)
 80053bc:	7819      	ldrb	r1, [r3, #0]
 80053be:	2340      	movs	r3, #64	; 0x40
 80053c0:	2202      	movs	r2, #2
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f002 fafd 	bl	80079c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80053c8:	4b3e      	ldr	r3, [pc, #248]	; (80054c4 <USBD_CDC_Init+0x1e4>)
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	f003 020f 	and.w	r2, r3, #15
 80053d0:	6879      	ldr	r1, [r7, #4]
 80053d2:	4613      	mov	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4413      	add	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	440b      	add	r3, r1
 80053dc:	3324      	adds	r3, #36	; 0x24
 80053de:	2201      	movs	r2, #1
 80053e0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80053e2:	4b39      	ldr	r3, [pc, #228]	; (80054c8 <USBD_CDC_Init+0x1e8>)
 80053e4:	7819      	ldrb	r1, [r3, #0]
 80053e6:	2340      	movs	r3, #64	; 0x40
 80053e8:	2202      	movs	r2, #2
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f002 fae9 	bl	80079c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80053f0:	4b35      	ldr	r3, [pc, #212]	; (80054c8 <USBD_CDC_Init+0x1e8>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	f003 020f 	and.w	r2, r3, #15
 80053f8:	6879      	ldr	r1, [r7, #4]
 80053fa:	4613      	mov	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	440b      	add	r3, r1
 8005404:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005408:	2201      	movs	r2, #1
 800540a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800540c:	4b2f      	ldr	r3, [pc, #188]	; (80054cc <USBD_CDC_Init+0x1ec>)
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	f003 020f 	and.w	r2, r3, #15
 8005414:	6879      	ldr	r1, [r7, #4]
 8005416:	4613      	mov	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	440b      	add	r3, r1
 8005420:	3326      	adds	r3, #38	; 0x26
 8005422:	2210      	movs	r2, #16
 8005424:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005426:	4b29      	ldr	r3, [pc, #164]	; (80054cc <USBD_CDC_Init+0x1ec>)
 8005428:	7819      	ldrb	r1, [r3, #0]
 800542a:	2308      	movs	r3, #8
 800542c:	2203      	movs	r2, #3
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f002 fac7 	bl	80079c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005434:	4b25      	ldr	r3, [pc, #148]	; (80054cc <USBD_CDC_Init+0x1ec>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	f003 020f 	and.w	r2, r3, #15
 800543c:	6879      	ldr	r1, [r7, #4]
 800543e:	4613      	mov	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	440b      	add	r3, r1
 8005448:	3324      	adds	r3, #36	; 0x24
 800544a:	2201      	movs	r2, #1
 800544c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	33b0      	adds	r3, #176	; 0xb0
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005480:	2b00      	cmp	r3, #0
 8005482:	d101      	bne.n	8005488 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005484:	2302      	movs	r3, #2
 8005486:	e018      	b.n	80054ba <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	7c1b      	ldrb	r3, [r3, #16]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10a      	bne.n	80054a6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005490:	4b0d      	ldr	r3, [pc, #52]	; (80054c8 <USBD_CDC_Init+0x1e8>)
 8005492:	7819      	ldrb	r1, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800549a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f002 fb7e 	bl	8007ba0 <USBD_LL_PrepareReceive>
 80054a4:	e008      	b.n	80054b8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80054a6:	4b08      	ldr	r3, [pc, #32]	; (80054c8 <USBD_CDC_Init+0x1e8>)
 80054a8:	7819      	ldrb	r1, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80054b0:	2340      	movs	r3, #64	; 0x40
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f002 fb74 	bl	8007ba0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	20000093 	.word	0x20000093
 80054c8:	20000094 	.word	0x20000094
 80054cc:	20000095 	.word	0x20000095

080054d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	460b      	mov	r3, r1
 80054da:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80054dc:	4b3a      	ldr	r3, [pc, #232]	; (80055c8 <USBD_CDC_DeInit+0xf8>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	4619      	mov	r1, r3
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f002 fa93 	bl	8007a0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80054e8:	4b37      	ldr	r3, [pc, #220]	; (80055c8 <USBD_CDC_DeInit+0xf8>)
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	f003 020f 	and.w	r2, r3, #15
 80054f0:	6879      	ldr	r1, [r7, #4]
 80054f2:	4613      	mov	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4413      	add	r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	440b      	add	r3, r1
 80054fc:	3324      	adds	r3, #36	; 0x24
 80054fe:	2200      	movs	r2, #0
 8005500:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005502:	4b32      	ldr	r3, [pc, #200]	; (80055cc <USBD_CDC_DeInit+0xfc>)
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	4619      	mov	r1, r3
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f002 fa80 	bl	8007a0e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800550e:	4b2f      	ldr	r3, [pc, #188]	; (80055cc <USBD_CDC_DeInit+0xfc>)
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	f003 020f 	and.w	r2, r3, #15
 8005516:	6879      	ldr	r1, [r7, #4]
 8005518:	4613      	mov	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	440b      	add	r3, r1
 8005522:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005526:	2200      	movs	r2, #0
 8005528:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800552a:	4b29      	ldr	r3, [pc, #164]	; (80055d0 <USBD_CDC_DeInit+0x100>)
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	4619      	mov	r1, r3
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f002 fa6c 	bl	8007a0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005536:	4b26      	ldr	r3, [pc, #152]	; (80055d0 <USBD_CDC_DeInit+0x100>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	f003 020f 	and.w	r2, r3, #15
 800553e:	6879      	ldr	r1, [r7, #4]
 8005540:	4613      	mov	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	440b      	add	r3, r1
 800554a:	3324      	adds	r3, #36	; 0x24
 800554c:	2200      	movs	r2, #0
 800554e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005550:	4b1f      	ldr	r3, [pc, #124]	; (80055d0 <USBD_CDC_DeInit+0x100>)
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	f003 020f 	and.w	r2, r3, #15
 8005558:	6879      	ldr	r1, [r7, #4]
 800555a:	4613      	mov	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4413      	add	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	440b      	add	r3, r1
 8005564:	3326      	adds	r3, #38	; 0x26
 8005566:	2200      	movs	r2, #0
 8005568:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	32b0      	adds	r2, #176	; 0xb0
 8005574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d01f      	beq.n	80055bc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	33b0      	adds	r3, #176	; 0xb0
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	32b0      	adds	r2, #176	; 0xb0
 800559a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800559e:	4618      	mov	r0, r3
 80055a0:	f002 fb40 	bl	8007c24 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	32b0      	adds	r2, #176	; 0xb0
 80055ae:	2100      	movs	r1, #0
 80055b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	20000093 	.word	0x20000093
 80055cc:	20000094 	.word	0x20000094
 80055d0:	20000095 	.word	0x20000095

080055d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	32b0      	adds	r2, #176	; 0xb0
 80055e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80055f2:	2300      	movs	r3, #0
 80055f4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80055f6:	2300      	movs	r3, #0
 80055f8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005600:	2303      	movs	r3, #3
 8005602:	e0bf      	b.n	8005784 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800560c:	2b00      	cmp	r3, #0
 800560e:	d050      	beq.n	80056b2 <USBD_CDC_Setup+0xde>
 8005610:	2b20      	cmp	r3, #32
 8005612:	f040 80af 	bne.w	8005774 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	88db      	ldrh	r3, [r3, #6]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d03a      	beq.n	8005694 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	b25b      	sxtb	r3, r3
 8005624:	2b00      	cmp	r3, #0
 8005626:	da1b      	bge.n	8005660 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	33b0      	adds	r3, #176	; 0xb0
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800563e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005640:	683a      	ldr	r2, [r7, #0]
 8005642:	88d2      	ldrh	r2, [r2, #6]
 8005644:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	88db      	ldrh	r3, [r3, #6]
 800564a:	2b07      	cmp	r3, #7
 800564c:	bf28      	it	cs
 800564e:	2307      	movcs	r3, #7
 8005650:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	89fa      	ldrh	r2, [r7, #14]
 8005656:	4619      	mov	r1, r3
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f001 fd89 	bl	8007170 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800565e:	e090      	b.n	8005782 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	785a      	ldrb	r2, [r3, #1]
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	88db      	ldrh	r3, [r3, #6]
 800566e:	2b3f      	cmp	r3, #63	; 0x3f
 8005670:	d803      	bhi.n	800567a <USBD_CDC_Setup+0xa6>
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	88db      	ldrh	r3, [r3, #6]
 8005676:	b2da      	uxtb	r2, r3
 8005678:	e000      	b.n	800567c <USBD_CDC_Setup+0xa8>
 800567a:	2240      	movs	r2, #64	; 0x40
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005682:	6939      	ldr	r1, [r7, #16]
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800568a:	461a      	mov	r2, r3
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f001 fd9b 	bl	80071c8 <USBD_CtlPrepareRx>
      break;
 8005692:	e076      	b.n	8005782 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	33b0      	adds	r3, #176	; 0xb0
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	7850      	ldrb	r0, [r2, #1]
 80056aa:	2200      	movs	r2, #0
 80056ac:	6839      	ldr	r1, [r7, #0]
 80056ae:	4798      	blx	r3
      break;
 80056b0:	e067      	b.n	8005782 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	785b      	ldrb	r3, [r3, #1]
 80056b6:	2b0b      	cmp	r3, #11
 80056b8:	d851      	bhi.n	800575e <USBD_CDC_Setup+0x18a>
 80056ba:	a201      	add	r2, pc, #4	; (adr r2, 80056c0 <USBD_CDC_Setup+0xec>)
 80056bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c0:	080056f1 	.word	0x080056f1
 80056c4:	0800576d 	.word	0x0800576d
 80056c8:	0800575f 	.word	0x0800575f
 80056cc:	0800575f 	.word	0x0800575f
 80056d0:	0800575f 	.word	0x0800575f
 80056d4:	0800575f 	.word	0x0800575f
 80056d8:	0800575f 	.word	0x0800575f
 80056dc:	0800575f 	.word	0x0800575f
 80056e0:	0800575f 	.word	0x0800575f
 80056e4:	0800575f 	.word	0x0800575f
 80056e8:	0800571b 	.word	0x0800571b
 80056ec:	08005745 	.word	0x08005745
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b03      	cmp	r3, #3
 80056fa:	d107      	bne.n	800570c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80056fc:	f107 030a 	add.w	r3, r7, #10
 8005700:	2202      	movs	r2, #2
 8005702:	4619      	mov	r1, r3
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f001 fd33 	bl	8007170 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800570a:	e032      	b.n	8005772 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800570c:	6839      	ldr	r1, [r7, #0]
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f001 fcbd 	bl	800708e <USBD_CtlError>
            ret = USBD_FAIL;
 8005714:	2303      	movs	r3, #3
 8005716:	75fb      	strb	r3, [r7, #23]
          break;
 8005718:	e02b      	b.n	8005772 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b03      	cmp	r3, #3
 8005724:	d107      	bne.n	8005736 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005726:	f107 030d 	add.w	r3, r7, #13
 800572a:	2201      	movs	r2, #1
 800572c:	4619      	mov	r1, r3
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f001 fd1e 	bl	8007170 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005734:	e01d      	b.n	8005772 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005736:	6839      	ldr	r1, [r7, #0]
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f001 fca8 	bl	800708e <USBD_CtlError>
            ret = USBD_FAIL;
 800573e:	2303      	movs	r3, #3
 8005740:	75fb      	strb	r3, [r7, #23]
          break;
 8005742:	e016      	b.n	8005772 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b03      	cmp	r3, #3
 800574e:	d00f      	beq.n	8005770 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005750:	6839      	ldr	r1, [r7, #0]
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f001 fc9b 	bl	800708e <USBD_CtlError>
            ret = USBD_FAIL;
 8005758:	2303      	movs	r3, #3
 800575a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800575c:	e008      	b.n	8005770 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800575e:	6839      	ldr	r1, [r7, #0]
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f001 fc94 	bl	800708e <USBD_CtlError>
          ret = USBD_FAIL;
 8005766:	2303      	movs	r3, #3
 8005768:	75fb      	strb	r3, [r7, #23]
          break;
 800576a:	e002      	b.n	8005772 <USBD_CDC_Setup+0x19e>
          break;
 800576c:	bf00      	nop
 800576e:	e008      	b.n	8005782 <USBD_CDC_Setup+0x1ae>
          break;
 8005770:	bf00      	nop
      }
      break;
 8005772:	e006      	b.n	8005782 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005774:	6839      	ldr	r1, [r7, #0]
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f001 fc89 	bl	800708e <USBD_CtlError>
      ret = USBD_FAIL;
 800577c:	2303      	movs	r3, #3
 800577e:	75fb      	strb	r3, [r7, #23]
      break;
 8005780:	bf00      	nop
  }

  return (uint8_t)ret;
 8005782:	7dfb      	ldrb	r3, [r7, #23]
}
 8005784:	4618      	mov	r0, r3
 8005786:	3718      	adds	r7, #24
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	460b      	mov	r3, r1
 8005796:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800579e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	32b0      	adds	r2, #176	; 0xb0
 80057aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e065      	b.n	8005882 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	32b0      	adds	r2, #176	; 0xb0
 80057c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80057c6:	78fb      	ldrb	r3, [r7, #3]
 80057c8:	f003 020f 	and.w	r2, r3, #15
 80057cc:	6879      	ldr	r1, [r7, #4]
 80057ce:	4613      	mov	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4413      	add	r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	440b      	add	r3, r1
 80057d8:	3318      	adds	r3, #24
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d02f      	beq.n	8005840 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80057e0:	78fb      	ldrb	r3, [r7, #3]
 80057e2:	f003 020f 	and.w	r2, r3, #15
 80057e6:	6879      	ldr	r1, [r7, #4]
 80057e8:	4613      	mov	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	440b      	add	r3, r1
 80057f2:	3318      	adds	r3, #24
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	78fb      	ldrb	r3, [r7, #3]
 80057f8:	f003 010f 	and.w	r1, r3, #15
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	460b      	mov	r3, r1
 8005800:	00db      	lsls	r3, r3, #3
 8005802:	440b      	add	r3, r1
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4403      	add	r3, r0
 8005808:	3348      	adds	r3, #72	; 0x48
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005810:	fb01 f303 	mul.w	r3, r1, r3
 8005814:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005816:	2b00      	cmp	r3, #0
 8005818:	d112      	bne.n	8005840 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800581a:	78fb      	ldrb	r3, [r7, #3]
 800581c:	f003 020f 	and.w	r2, r3, #15
 8005820:	6879      	ldr	r1, [r7, #4]
 8005822:	4613      	mov	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	440b      	add	r3, r1
 800582c:	3318      	adds	r3, #24
 800582e:	2200      	movs	r2, #0
 8005830:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005832:	78f9      	ldrb	r1, [r7, #3]
 8005834:	2300      	movs	r3, #0
 8005836:	2200      	movs	r2, #0
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f002 f990 	bl	8007b5e <USBD_LL_Transmit>
 800583e:	e01f      	b.n	8005880 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2200      	movs	r2, #0
 8005844:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	33b0      	adds	r3, #176	; 0xb0
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d010      	beq.n	8005880 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	33b0      	adds	r3, #176	; 0xb0
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4413      	add	r3, r2
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800587c:	78fa      	ldrb	r2, [r7, #3]
 800587e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b084      	sub	sp, #16
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
 8005892:	460b      	mov	r3, r1
 8005894:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	32b0      	adds	r2, #176	; 0xb0
 80058a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	32b0      	adds	r2, #176	; 0xb0
 80058b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e01a      	b.n	80058f2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80058bc:	78fb      	ldrb	r3, [r7, #3]
 80058be:	4619      	mov	r1, r3
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f002 f98e 	bl	8007be2 <USBD_LL_GetRxDataSize>
 80058c6:	4602      	mov	r2, r0
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	33b0      	adds	r3, #176	; 0xb0
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80058ec:	4611      	mov	r1, r2
 80058ee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b084      	sub	sp, #16
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	32b0      	adds	r2, #176	; 0xb0
 800590c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005910:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005918:	2303      	movs	r3, #3
 800591a:	e025      	b.n	8005968 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	33b0      	adds	r3, #176	; 0xb0
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4413      	add	r3, r2
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d01a      	beq.n	8005966 <USBD_CDC_EP0_RxReady+0x6c>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005936:	2bff      	cmp	r3, #255	; 0xff
 8005938:	d015      	beq.n	8005966 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	33b0      	adds	r3, #176	; 0xb0
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005952:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800595a:	b292      	uxth	r2, r2
 800595c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	22ff      	movs	r2, #255	; 0xff
 8005962:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005978:	2182      	movs	r1, #130	; 0x82
 800597a:	4818      	ldr	r0, [pc, #96]	; (80059dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800597c:	f000 fd4f 	bl	800641e <USBD_GetEpDesc>
 8005980:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005982:	2101      	movs	r1, #1
 8005984:	4815      	ldr	r0, [pc, #84]	; (80059dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005986:	f000 fd4a 	bl	800641e <USBD_GetEpDesc>
 800598a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800598c:	2181      	movs	r1, #129	; 0x81
 800598e:	4813      	ldr	r0, [pc, #76]	; (80059dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005990:	f000 fd45 	bl	800641e <USBD_GetEpDesc>
 8005994:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	2210      	movs	r2, #16
 80059a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d006      	beq.n	80059b6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059b0:	711a      	strb	r2, [r3, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d006      	beq.n	80059ca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059c4:	711a      	strb	r2, [r3, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2243      	movs	r2, #67	; 0x43
 80059ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80059d0:	4b02      	ldr	r3, [pc, #8]	; (80059dc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3718      	adds	r7, #24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	20000050 	.word	0x20000050

080059e0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80059e8:	2182      	movs	r1, #130	; 0x82
 80059ea:	4818      	ldr	r0, [pc, #96]	; (8005a4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80059ec:	f000 fd17 	bl	800641e <USBD_GetEpDesc>
 80059f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80059f2:	2101      	movs	r1, #1
 80059f4:	4815      	ldr	r0, [pc, #84]	; (8005a4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80059f6:	f000 fd12 	bl	800641e <USBD_GetEpDesc>
 80059fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80059fc:	2181      	movs	r1, #129	; 0x81
 80059fe:	4813      	ldr	r0, [pc, #76]	; (8005a4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005a00:	f000 fd0d 	bl	800641e <USBD_GetEpDesc>
 8005a04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d002      	beq.n	8005a12 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	2210      	movs	r2, #16
 8005a10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d006      	beq.n	8005a26 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	711a      	strb	r2, [r3, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f042 0202 	orr.w	r2, r2, #2
 8005a24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d006      	beq.n	8005a3a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	711a      	strb	r2, [r3, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f042 0202 	orr.w	r2, r2, #2
 8005a38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2243      	movs	r2, #67	; 0x43
 8005a3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005a40:	4b02      	ldr	r3, [pc, #8]	; (8005a4c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3718      	adds	r7, #24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	20000050 	.word	0x20000050

08005a50 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005a58:	2182      	movs	r1, #130	; 0x82
 8005a5a:	4818      	ldr	r0, [pc, #96]	; (8005abc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005a5c:	f000 fcdf 	bl	800641e <USBD_GetEpDesc>
 8005a60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005a62:	2101      	movs	r1, #1
 8005a64:	4815      	ldr	r0, [pc, #84]	; (8005abc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005a66:	f000 fcda 	bl	800641e <USBD_GetEpDesc>
 8005a6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005a6c:	2181      	movs	r1, #129	; 0x81
 8005a6e:	4813      	ldr	r0, [pc, #76]	; (8005abc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005a70:	f000 fcd5 	bl	800641e <USBD_GetEpDesc>
 8005a74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d002      	beq.n	8005a82 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	2210      	movs	r2, #16
 8005a80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d006      	beq.n	8005a96 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a90:	711a      	strb	r2, [r3, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d006      	beq.n	8005aaa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005aa4:	711a      	strb	r2, [r3, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2243      	movs	r2, #67	; 0x43
 8005aae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005ab0:	4b02      	ldr	r3, [pc, #8]	; (8005abc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3718      	adds	r7, #24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	20000050 	.word	0x20000050

08005ac0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	220a      	movs	r2, #10
 8005acc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005ace:	4b03      	ldr	r3, [pc, #12]	; (8005adc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	2000000c 	.word	0x2000000c

08005ae0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e009      	b.n	8005b08 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	33b0      	adds	r3, #176	; 0xb0
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4413      	add	r3, r2
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	32b0      	adds	r2, #176	; 0xb0
 8005b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b2e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e008      	b.n	8005b4c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	371c      	adds	r7, #28
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	32b0      	adds	r2, #176	; 0xb0
 8005b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e004      	b.n	8005b86 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3714      	adds	r7, #20
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
	...

08005b94 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	32b0      	adds	r2, #176	; 0xb0
 8005ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005baa:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005bac:	2301      	movs	r3, #1
 8005bae:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	32b0      	adds	r2, #176	; 0xb0
 8005bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e025      	b.n	8005c12 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d11f      	bne.n	8005c10 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005bd8:	4b10      	ldr	r3, [pc, #64]	; (8005c1c <USBD_CDC_TransmitPacket+0x88>)
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	f003 020f 	and.w	r2, r3, #15
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	4613      	mov	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4403      	add	r3, r0
 8005bf2:	3318      	adds	r3, #24
 8005bf4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005bf6:	4b09      	ldr	r3, [pc, #36]	; (8005c1c <USBD_CDC_TransmitPacket+0x88>)
 8005bf8:	7819      	ldrb	r1, [r3, #0]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f001 ffa9 	bl	8007b5e <USBD_LL_Transmit>

    ret = USBD_OK;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	20000093 	.word	0x20000093

08005c20 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	32b0      	adds	r2, #176	; 0xb0
 8005c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c36:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	32b0      	adds	r2, #176	; 0xb0
 8005c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e018      	b.n	8005c80 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	7c1b      	ldrb	r3, [r3, #16]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10a      	bne.n	8005c6c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005c56:	4b0c      	ldr	r3, [pc, #48]	; (8005c88 <USBD_CDC_ReceivePacket+0x68>)
 8005c58:	7819      	ldrb	r1, [r3, #0]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f001 ff9b 	bl	8007ba0 <USBD_LL_PrepareReceive>
 8005c6a:	e008      	b.n	8005c7e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005c6c:	4b06      	ldr	r3, [pc, #24]	; (8005c88 <USBD_CDC_ReceivePacket+0x68>)
 8005c6e:	7819      	ldrb	r1, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c76:	2340      	movs	r3, #64	; 0x40
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f001 ff91 	bl	8007ba0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	20000094 	.word	0x20000094

08005c8c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	4613      	mov	r3, r2
 8005c98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e01f      	b.n	8005ce4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d003      	beq.n	8005cca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	79fa      	ldrb	r2, [r7, #7]
 8005cd6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f001 fe0b 	bl	80078f4 <USBD_LL_Init>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005ce2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3718      	adds	r7, #24
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e025      	b.n	8005d50 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	32ae      	adds	r2, #174	; 0xae
 8005d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00f      	beq.n	8005d40 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	32ae      	adds	r2, #174	; 0xae
 8005d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d30:	f107 020e 	add.w	r2, r7, #14
 8005d34:	4610      	mov	r0, r2
 8005d36:	4798      	blx	r3
 8005d38:	4602      	mov	r2, r0
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005d46:	1c5a      	adds	r2, r3, #1
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f001 fe13 	bl	800798c <USBD_LL_Start>
 8005d66:	4603      	mov	r3, r0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3708      	adds	r7, #8
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d78:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b084      	sub	sp, #16
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	460b      	mov	r3, r1
 8005d90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d92:	2300      	movs	r3, #0
 8005d94:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d009      	beq.n	8005db4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	78fa      	ldrb	r2, [r7, #3]
 8005daa:	4611      	mov	r1, r2
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	4798      	blx	r3
 8005db0:	4603      	mov	r3, r0
 8005db2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b084      	sub	sp, #16
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	78fa      	ldrb	r2, [r7, #3]
 8005dd8:	4611      	mov	r1, r2
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	4798      	blx	r3
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005de4:	2303      	movs	r3, #3
 8005de6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b084      	sub	sp, #16
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
 8005dfa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e02:	6839      	ldr	r1, [r7, #0]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f001 f908 	bl	800701a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005e18:	461a      	mov	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e26:	f003 031f 	and.w	r3, r3, #31
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d01a      	beq.n	8005e64 <USBD_LL_SetupStage+0x72>
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d822      	bhi.n	8005e78 <USBD_LL_SetupStage+0x86>
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d002      	beq.n	8005e3c <USBD_LL_SetupStage+0x4a>
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d00a      	beq.n	8005e50 <USBD_LL_SetupStage+0x5e>
 8005e3a:	e01d      	b.n	8005e78 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e42:	4619      	mov	r1, r3
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fb5f 	bl	8006508 <USBD_StdDevReq>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e4e:	e020      	b.n	8005e92 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e56:	4619      	mov	r1, r3
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 fbc7 	bl	80065ec <USBD_StdItfReq>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	73fb      	strb	r3, [r7, #15]
      break;
 8005e62:	e016      	b.n	8005e92 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fc29 	bl	80066c4 <USBD_StdEPReq>
 8005e72:	4603      	mov	r3, r0
 8005e74:	73fb      	strb	r3, [r7, #15]
      break;
 8005e76:	e00c      	b.n	8005e92 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e7e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	4619      	mov	r1, r3
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f001 fde0 	bl	8007a4c <USBD_LL_StallEP>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e90:	bf00      	nop
  }

  return ret;
 8005e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b086      	sub	sp, #24
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	607a      	str	r2, [r7, #4]
 8005ea8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005eae:	7afb      	ldrb	r3, [r7, #11]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d16e      	bne.n	8005f92 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005eba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ec2:	2b03      	cmp	r3, #3
 8005ec4:	f040 8098 	bne.w	8005ff8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	689a      	ldr	r2, [r3, #8]
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d913      	bls.n	8005efc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	1ad2      	subs	r2, r2, r3
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	68da      	ldr	r2, [r3, #12]
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	4293      	cmp	r3, r2
 8005eec:	bf28      	it	cs
 8005eee:	4613      	movcs	r3, r2
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	6879      	ldr	r1, [r7, #4]
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f001 f984 	bl	8007202 <USBD_CtlContinueRx>
 8005efa:	e07d      	b.n	8005ff8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f02:	f003 031f 	and.w	r3, r3, #31
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d014      	beq.n	8005f34 <USBD_LL_DataOutStage+0x98>
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d81d      	bhi.n	8005f4a <USBD_LL_DataOutStage+0xae>
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d002      	beq.n	8005f18 <USBD_LL_DataOutStage+0x7c>
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d003      	beq.n	8005f1e <USBD_LL_DataOutStage+0x82>
 8005f16:	e018      	b.n	8005f4a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	75bb      	strb	r3, [r7, #22]
            break;
 8005f1c:	e018      	b.n	8005f50 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	4619      	mov	r1, r3
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f000 fa5e 	bl	80063ea <USBD_CoreFindIF>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	75bb      	strb	r3, [r7, #22]
            break;
 8005f32:	e00d      	b.n	8005f50 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f000 fa60 	bl	8006404 <USBD_CoreFindEP>
 8005f44:	4603      	mov	r3, r0
 8005f46:	75bb      	strb	r3, [r7, #22]
            break;
 8005f48:	e002      	b.n	8005f50 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	75bb      	strb	r3, [r7, #22]
            break;
 8005f4e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005f50:	7dbb      	ldrb	r3, [r7, #22]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d119      	bne.n	8005f8a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b03      	cmp	r3, #3
 8005f60:	d113      	bne.n	8005f8a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005f62:	7dba      	ldrb	r2, [r7, #22]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	32ae      	adds	r2, #174	; 0xae
 8005f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00b      	beq.n	8005f8a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005f72:	7dba      	ldrb	r2, [r7, #22]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005f7a:	7dba      	ldrb	r2, [r7, #22]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	32ae      	adds	r2, #174	; 0xae
 8005f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f001 f94a 	bl	8007224 <USBD_CtlSendStatus>
 8005f90:	e032      	b.n	8005ff8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005f92:	7afb      	ldrb	r3, [r7, #11]
 8005f94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f000 fa31 	bl	8006404 <USBD_CoreFindEP>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005fa6:	7dbb      	ldrb	r3, [r7, #22]
 8005fa8:	2bff      	cmp	r3, #255	; 0xff
 8005faa:	d025      	beq.n	8005ff8 <USBD_LL_DataOutStage+0x15c>
 8005fac:	7dbb      	ldrb	r3, [r7, #22]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d122      	bne.n	8005ff8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b03      	cmp	r3, #3
 8005fbc:	d117      	bne.n	8005fee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005fbe:	7dba      	ldrb	r2, [r7, #22]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	32ae      	adds	r2, #174	; 0xae
 8005fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00f      	beq.n	8005fee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005fce:	7dba      	ldrb	r2, [r7, #22]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005fd6:	7dba      	ldrb	r2, [r7, #22]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	32ae      	adds	r2, #174	; 0xae
 8005fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	7afa      	ldrb	r2, [r7, #11]
 8005fe4:	4611      	mov	r1, r2
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	4798      	blx	r3
 8005fea:	4603      	mov	r3, r0
 8005fec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005fee:	7dfb      	ldrb	r3, [r7, #23]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d001      	beq.n	8005ff8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005ff4:	7dfb      	ldrb	r3, [r7, #23]
 8005ff6:	e000      	b.n	8005ffa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3718      	adds	r7, #24
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b086      	sub	sp, #24
 8006006:	af00      	add	r7, sp, #0
 8006008:	60f8      	str	r0, [r7, #12]
 800600a:	460b      	mov	r3, r1
 800600c:	607a      	str	r2, [r7, #4]
 800600e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006010:	7afb      	ldrb	r3, [r7, #11]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d16f      	bne.n	80060f6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	3314      	adds	r3, #20
 800601a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006022:	2b02      	cmp	r3, #2
 8006024:	d15a      	bne.n	80060dc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	689a      	ldr	r2, [r3, #8]
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	429a      	cmp	r2, r3
 8006030:	d914      	bls.n	800605c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	689a      	ldr	r2, [r3, #8]
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	1ad2      	subs	r2, r2, r3
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	461a      	mov	r2, r3
 8006046:	6879      	ldr	r1, [r7, #4]
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f001 f8ac 	bl	80071a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800604e:	2300      	movs	r3, #0
 8006050:	2200      	movs	r2, #0
 8006052:	2100      	movs	r1, #0
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f001 fda3 	bl	8007ba0 <USBD_LL_PrepareReceive>
 800605a:	e03f      	b.n	80060dc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	68da      	ldr	r2, [r3, #12]
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	429a      	cmp	r2, r3
 8006066:	d11c      	bne.n	80060a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006070:	429a      	cmp	r2, r3
 8006072:	d316      	bcc.n	80060a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	685a      	ldr	r2, [r3, #4]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800607e:	429a      	cmp	r2, r3
 8006080:	d20f      	bcs.n	80060a2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006082:	2200      	movs	r2, #0
 8006084:	2100      	movs	r1, #0
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f001 f88d 	bl	80071a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006094:	2300      	movs	r3, #0
 8006096:	2200      	movs	r2, #0
 8006098:	2100      	movs	r1, #0
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f001 fd80 	bl	8007ba0 <USBD_LL_PrepareReceive>
 80060a0:	e01c      	b.n	80060dc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b03      	cmp	r3, #3
 80060ac:	d10f      	bne.n	80060ce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d009      	beq.n	80060ce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80060ce:	2180      	movs	r1, #128	; 0x80
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f001 fcbb 	bl	8007a4c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f001 f8b7 	bl	800724a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d03a      	beq.n	800615c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f7ff fe42 	bl	8005d70 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80060f4:	e032      	b.n	800615c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80060f6:	7afb      	ldrb	r3, [r7, #11]
 80060f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	4619      	mov	r1, r3
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f000 f97f 	bl	8006404 <USBD_CoreFindEP>
 8006106:	4603      	mov	r3, r0
 8006108:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800610a:	7dfb      	ldrb	r3, [r7, #23]
 800610c:	2bff      	cmp	r3, #255	; 0xff
 800610e:	d025      	beq.n	800615c <USBD_LL_DataInStage+0x15a>
 8006110:	7dfb      	ldrb	r3, [r7, #23]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d122      	bne.n	800615c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b03      	cmp	r3, #3
 8006120:	d11c      	bne.n	800615c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006122:	7dfa      	ldrb	r2, [r7, #23]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	32ae      	adds	r2, #174	; 0xae
 8006128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d014      	beq.n	800615c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006132:	7dfa      	ldrb	r2, [r7, #23]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800613a:	7dfa      	ldrb	r2, [r7, #23]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	32ae      	adds	r2, #174	; 0xae
 8006140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	7afa      	ldrb	r2, [r7, #11]
 8006148:	4611      	mov	r1, r2
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	4798      	blx	r3
 800614e:	4603      	mov	r3, r0
 8006150:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006152:	7dbb      	ldrb	r3, [r7, #22]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006158:	7dbb      	ldrb	r3, [r7, #22]
 800615a:	e000      	b.n	800615e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3718      	adds	r7, #24
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b084      	sub	sp, #16
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800616e:	2300      	movs	r3, #0
 8006170:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d014      	beq.n	80061cc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00e      	beq.n	80061cc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6852      	ldr	r2, [r2, #4]
 80061ba:	b2d2      	uxtb	r2, r2
 80061bc:	4611      	mov	r1, r2
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	4798      	blx	r3
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80061c8:	2303      	movs	r3, #3
 80061ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061cc:	2340      	movs	r3, #64	; 0x40
 80061ce:	2200      	movs	r2, #0
 80061d0:	2100      	movs	r1, #0
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f001 fbf5 	bl	80079c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2240      	movs	r2, #64	; 0x40
 80061e4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061e8:	2340      	movs	r3, #64	; 0x40
 80061ea:	2200      	movs	r2, #0
 80061ec:	2180      	movs	r1, #128	; 0x80
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f001 fbe7 	bl	80079c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2240      	movs	r2, #64	; 0x40
 80061fe:	621a      	str	r2, [r3, #32]

  return ret;
 8006200:	7bfb      	ldrb	r3, [r7, #15]
}
 8006202:	4618      	mov	r0, r3
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800620a:	b480      	push	{r7}
 800620c:	b083      	sub	sp, #12
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
 8006212:	460b      	mov	r3, r1
 8006214:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	78fa      	ldrb	r2, [r7, #3]
 800621a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	370c      	adds	r7, #12
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800622a:	b480      	push	{r7}
 800622c:	b083      	sub	sp, #12
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006238:	b2da      	uxtb	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2204      	movs	r2, #4
 8006244:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006256:	b480      	push	{r7}
 8006258:	b083      	sub	sp, #12
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b04      	cmp	r3, #4
 8006268:	d106      	bne.n	8006278 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006270:	b2da      	uxtb	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b082      	sub	sp, #8
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006294:	b2db      	uxtb	r3, r3
 8006296:	2b03      	cmp	r3, #3
 8006298:	d110      	bne.n	80062bc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00b      	beq.n	80062bc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062aa:	69db      	ldr	r3, [r3, #28]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d005      	beq.n	80062bc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062b6:	69db      	ldr	r3, [r3, #28]
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b082      	sub	sp, #8
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
 80062ce:	460b      	mov	r3, r1
 80062d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	32ae      	adds	r2, #174	; 0xae
 80062dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d101      	bne.n	80062e8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e01c      	b.n	8006322 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	2b03      	cmp	r3, #3
 80062f2:	d115      	bne.n	8006320 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	32ae      	adds	r2, #174	; 0xae
 80062fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006302:	6a1b      	ldr	r3, [r3, #32]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00b      	beq.n	8006320 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	32ae      	adds	r2, #174	; 0xae
 8006312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	78fa      	ldrb	r2, [r7, #3]
 800631a:	4611      	mov	r1, r2
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b082      	sub	sp, #8
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
 8006332:	460b      	mov	r3, r1
 8006334:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	32ae      	adds	r2, #174	; 0xae
 8006340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d101      	bne.n	800634c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006348:	2303      	movs	r3, #3
 800634a:	e01c      	b.n	8006386 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b03      	cmp	r3, #3
 8006356:	d115      	bne.n	8006384 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	32ae      	adds	r2, #174	; 0xae
 8006362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00b      	beq.n	8006384 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	32ae      	adds	r2, #174	; 0xae
 8006376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800637a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637c:	78fa      	ldrb	r2, [r7, #3]
 800637e:	4611      	mov	r1, r2
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3708      	adds	r7, #8
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800638e:	b480      	push	{r7}
 8006390:	b083      	sub	sp, #12
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80063ac:	2300      	movs	r3, #0
 80063ae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00e      	beq.n	80063e0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	6852      	ldr	r2, [r2, #4]
 80063ce:	b2d2      	uxtb	r2, r2
 80063d0:	4611      	mov	r1, r2
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	4798      	blx	r3
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80063dc:	2303      	movs	r3, #3
 80063de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80063e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b083      	sub	sp, #12
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
 80063f2:	460b      	mov	r3, r1
 80063f4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80063f6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	460b      	mov	r3, r1
 800640e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006410:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006412:	4618      	mov	r0, r3
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b086      	sub	sp, #24
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
 8006426:	460b      	mov	r3, r1
 8006428:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006432:	2300      	movs	r3, #0
 8006434:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	885b      	ldrh	r3, [r3, #2]
 800643a:	b29a      	uxth	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	b29b      	uxth	r3, r3
 8006442:	429a      	cmp	r2, r3
 8006444:	d920      	bls.n	8006488 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	b29b      	uxth	r3, r3
 800644c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800644e:	e013      	b.n	8006478 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006450:	f107 030a 	add.w	r3, r7, #10
 8006454:	4619      	mov	r1, r3
 8006456:	6978      	ldr	r0, [r7, #20]
 8006458:	f000 f81b 	bl	8006492 <USBD_GetNextDesc>
 800645c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	785b      	ldrb	r3, [r3, #1]
 8006462:	2b05      	cmp	r3, #5
 8006464:	d108      	bne.n	8006478 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	789b      	ldrb	r3, [r3, #2]
 800646e:	78fa      	ldrb	r2, [r7, #3]
 8006470:	429a      	cmp	r2, r3
 8006472:	d008      	beq.n	8006486 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006474:	2300      	movs	r3, #0
 8006476:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	885b      	ldrh	r3, [r3, #2]
 800647c:	b29a      	uxth	r2, r3
 800647e:	897b      	ldrh	r3, [r7, #10]
 8006480:	429a      	cmp	r2, r3
 8006482:	d8e5      	bhi.n	8006450 <USBD_GetEpDesc+0x32>
 8006484:	e000      	b.n	8006488 <USBD_GetEpDesc+0x6a>
          break;
 8006486:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006488:	693b      	ldr	r3, [r7, #16]
}
 800648a:	4618      	mov	r0, r3
 800648c:	3718      	adds	r7, #24
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006492:	b480      	push	{r7}
 8006494:	b085      	sub	sp, #20
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	881a      	ldrh	r2, [r3, #0]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	4413      	add	r3, r2
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	461a      	mov	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4413      	add	r3, r2
 80064bc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80064be:	68fb      	ldr	r3, [r7, #12]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	3301      	adds	r3, #1
 80064e2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80064ea:	8a3b      	ldrh	r3, [r7, #16]
 80064ec:	021b      	lsls	r3, r3, #8
 80064ee:	b21a      	sxth	r2, r3
 80064f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	b21b      	sxth	r3, r3
 80064f8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80064fa:	89fb      	ldrh	r3, [r7, #14]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	371c      	adds	r7, #28
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006512:	2300      	movs	r3, #0
 8006514:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800651e:	2b40      	cmp	r3, #64	; 0x40
 8006520:	d005      	beq.n	800652e <USBD_StdDevReq+0x26>
 8006522:	2b40      	cmp	r3, #64	; 0x40
 8006524:	d857      	bhi.n	80065d6 <USBD_StdDevReq+0xce>
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00f      	beq.n	800654a <USBD_StdDevReq+0x42>
 800652a:	2b20      	cmp	r3, #32
 800652c:	d153      	bne.n	80065d6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	32ae      	adds	r2, #174	; 0xae
 8006538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	6839      	ldr	r1, [r7, #0]
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	4798      	blx	r3
 8006544:	4603      	mov	r3, r0
 8006546:	73fb      	strb	r3, [r7, #15]
      break;
 8006548:	e04a      	b.n	80065e0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	785b      	ldrb	r3, [r3, #1]
 800654e:	2b09      	cmp	r3, #9
 8006550:	d83b      	bhi.n	80065ca <USBD_StdDevReq+0xc2>
 8006552:	a201      	add	r2, pc, #4	; (adr r2, 8006558 <USBD_StdDevReq+0x50>)
 8006554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006558:	080065ad 	.word	0x080065ad
 800655c:	080065c1 	.word	0x080065c1
 8006560:	080065cb 	.word	0x080065cb
 8006564:	080065b7 	.word	0x080065b7
 8006568:	080065cb 	.word	0x080065cb
 800656c:	0800658b 	.word	0x0800658b
 8006570:	08006581 	.word	0x08006581
 8006574:	080065cb 	.word	0x080065cb
 8006578:	080065a3 	.word	0x080065a3
 800657c:	08006595 	.word	0x08006595
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006580:	6839      	ldr	r1, [r7, #0]
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fa3c 	bl	8006a00 <USBD_GetDescriptor>
          break;
 8006588:	e024      	b.n	80065d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800658a:	6839      	ldr	r1, [r7, #0]
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fba1 	bl	8006cd4 <USBD_SetAddress>
          break;
 8006592:	e01f      	b.n	80065d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006594:	6839      	ldr	r1, [r7, #0]
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 fbe0 	bl	8006d5c <USBD_SetConfig>
 800659c:	4603      	mov	r3, r0
 800659e:	73fb      	strb	r3, [r7, #15]
          break;
 80065a0:	e018      	b.n	80065d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80065a2:	6839      	ldr	r1, [r7, #0]
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fc83 	bl	8006eb0 <USBD_GetConfig>
          break;
 80065aa:	e013      	b.n	80065d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80065ac:	6839      	ldr	r1, [r7, #0]
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 fcb4 	bl	8006f1c <USBD_GetStatus>
          break;
 80065b4:	e00e      	b.n	80065d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80065b6:	6839      	ldr	r1, [r7, #0]
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fce3 	bl	8006f84 <USBD_SetFeature>
          break;
 80065be:	e009      	b.n	80065d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fd07 	bl	8006fd6 <USBD_ClrFeature>
          break;
 80065c8:	e004      	b.n	80065d4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80065ca:	6839      	ldr	r1, [r7, #0]
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fd5e 	bl	800708e <USBD_CtlError>
          break;
 80065d2:	bf00      	nop
      }
      break;
 80065d4:	e004      	b.n	80065e0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 fd58 	bl	800708e <USBD_CtlError>
      break;
 80065de:	bf00      	nop
  }

  return ret;
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop

080065ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006602:	2b40      	cmp	r3, #64	; 0x40
 8006604:	d005      	beq.n	8006612 <USBD_StdItfReq+0x26>
 8006606:	2b40      	cmp	r3, #64	; 0x40
 8006608:	d852      	bhi.n	80066b0 <USBD_StdItfReq+0xc4>
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <USBD_StdItfReq+0x26>
 800660e:	2b20      	cmp	r3, #32
 8006610:	d14e      	bne.n	80066b0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006618:	b2db      	uxtb	r3, r3
 800661a:	3b01      	subs	r3, #1
 800661c:	2b02      	cmp	r3, #2
 800661e:	d840      	bhi.n	80066a2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	889b      	ldrh	r3, [r3, #4]
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b01      	cmp	r3, #1
 8006628:	d836      	bhi.n	8006698 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	889b      	ldrh	r3, [r3, #4]
 800662e:	b2db      	uxtb	r3, r3
 8006630:	4619      	mov	r1, r3
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f7ff fed9 	bl	80063ea <USBD_CoreFindIF>
 8006638:	4603      	mov	r3, r0
 800663a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800663c:	7bbb      	ldrb	r3, [r7, #14]
 800663e:	2bff      	cmp	r3, #255	; 0xff
 8006640:	d01d      	beq.n	800667e <USBD_StdItfReq+0x92>
 8006642:	7bbb      	ldrb	r3, [r7, #14]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d11a      	bne.n	800667e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006648:	7bba      	ldrb	r2, [r7, #14]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	32ae      	adds	r2, #174	; 0xae
 800664e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00f      	beq.n	8006678 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006658:	7bba      	ldrb	r2, [r7, #14]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006660:	7bba      	ldrb	r2, [r7, #14]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	32ae      	adds	r2, #174	; 0xae
 8006666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	6839      	ldr	r1, [r7, #0]
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	4798      	blx	r3
 8006672:	4603      	mov	r3, r0
 8006674:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006676:	e004      	b.n	8006682 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006678:	2303      	movs	r3, #3
 800667a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800667c:	e001      	b.n	8006682 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800667e:	2303      	movs	r3, #3
 8006680:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	88db      	ldrh	r3, [r3, #6]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d110      	bne.n	80066ac <USBD_StdItfReq+0xc0>
 800668a:	7bfb      	ldrb	r3, [r7, #15]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10d      	bne.n	80066ac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fdc7 	bl	8007224 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006696:	e009      	b.n	80066ac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006698:	6839      	ldr	r1, [r7, #0]
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fcf7 	bl	800708e <USBD_CtlError>
          break;
 80066a0:	e004      	b.n	80066ac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80066a2:	6839      	ldr	r1, [r7, #0]
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 fcf2 	bl	800708e <USBD_CtlError>
          break;
 80066aa:	e000      	b.n	80066ae <USBD_StdItfReq+0xc2>
          break;
 80066ac:	bf00      	nop
      }
      break;
 80066ae:	e004      	b.n	80066ba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80066b0:	6839      	ldr	r1, [r7, #0]
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 fceb 	bl	800708e <USBD_CtlError>
      break;
 80066b8:	bf00      	nop
  }

  return ret;
 80066ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80066ce:	2300      	movs	r3, #0
 80066d0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	889b      	ldrh	r3, [r3, #4]
 80066d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066e0:	2b40      	cmp	r3, #64	; 0x40
 80066e2:	d007      	beq.n	80066f4 <USBD_StdEPReq+0x30>
 80066e4:	2b40      	cmp	r3, #64	; 0x40
 80066e6:	f200 817f 	bhi.w	80069e8 <USBD_StdEPReq+0x324>
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d02a      	beq.n	8006744 <USBD_StdEPReq+0x80>
 80066ee:	2b20      	cmp	r3, #32
 80066f0:	f040 817a 	bne.w	80069e8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80066f4:	7bbb      	ldrb	r3, [r7, #14]
 80066f6:	4619      	mov	r1, r3
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f7ff fe83 	bl	8006404 <USBD_CoreFindEP>
 80066fe:	4603      	mov	r3, r0
 8006700:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006702:	7b7b      	ldrb	r3, [r7, #13]
 8006704:	2bff      	cmp	r3, #255	; 0xff
 8006706:	f000 8174 	beq.w	80069f2 <USBD_StdEPReq+0x32e>
 800670a:	7b7b      	ldrb	r3, [r7, #13]
 800670c:	2b00      	cmp	r3, #0
 800670e:	f040 8170 	bne.w	80069f2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006712:	7b7a      	ldrb	r2, [r7, #13]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800671a:	7b7a      	ldrb	r2, [r7, #13]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	32ae      	adds	r2, #174	; 0xae
 8006720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	2b00      	cmp	r3, #0
 8006728:	f000 8163 	beq.w	80069f2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800672c:	7b7a      	ldrb	r2, [r7, #13]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	32ae      	adds	r2, #174	; 0xae
 8006732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	6839      	ldr	r1, [r7, #0]
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	4798      	blx	r3
 800673e:	4603      	mov	r3, r0
 8006740:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006742:	e156      	b.n	80069f2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	785b      	ldrb	r3, [r3, #1]
 8006748:	2b03      	cmp	r3, #3
 800674a:	d008      	beq.n	800675e <USBD_StdEPReq+0x9a>
 800674c:	2b03      	cmp	r3, #3
 800674e:	f300 8145 	bgt.w	80069dc <USBD_StdEPReq+0x318>
 8006752:	2b00      	cmp	r3, #0
 8006754:	f000 809b 	beq.w	800688e <USBD_StdEPReq+0x1ca>
 8006758:	2b01      	cmp	r3, #1
 800675a:	d03c      	beq.n	80067d6 <USBD_StdEPReq+0x112>
 800675c:	e13e      	b.n	80069dc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b02      	cmp	r3, #2
 8006768:	d002      	beq.n	8006770 <USBD_StdEPReq+0xac>
 800676a:	2b03      	cmp	r3, #3
 800676c:	d016      	beq.n	800679c <USBD_StdEPReq+0xd8>
 800676e:	e02c      	b.n	80067ca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006770:	7bbb      	ldrb	r3, [r7, #14]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00d      	beq.n	8006792 <USBD_StdEPReq+0xce>
 8006776:	7bbb      	ldrb	r3, [r7, #14]
 8006778:	2b80      	cmp	r3, #128	; 0x80
 800677a:	d00a      	beq.n	8006792 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800677c:	7bbb      	ldrb	r3, [r7, #14]
 800677e:	4619      	mov	r1, r3
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f001 f963 	bl	8007a4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006786:	2180      	movs	r1, #128	; 0x80
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f001 f95f 	bl	8007a4c <USBD_LL_StallEP>
 800678e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006790:	e020      	b.n	80067d4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006792:	6839      	ldr	r1, [r7, #0]
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fc7a 	bl	800708e <USBD_CtlError>
              break;
 800679a:	e01b      	b.n	80067d4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	885b      	ldrh	r3, [r3, #2]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10e      	bne.n	80067c2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80067a4:	7bbb      	ldrb	r3, [r7, #14]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00b      	beq.n	80067c2 <USBD_StdEPReq+0xfe>
 80067aa:	7bbb      	ldrb	r3, [r7, #14]
 80067ac:	2b80      	cmp	r3, #128	; 0x80
 80067ae:	d008      	beq.n	80067c2 <USBD_StdEPReq+0xfe>
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	88db      	ldrh	r3, [r3, #6]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d104      	bne.n	80067c2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80067b8:	7bbb      	ldrb	r3, [r7, #14]
 80067ba:	4619      	mov	r1, r3
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f001 f945 	bl	8007a4c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 fd2e 	bl	8007224 <USBD_CtlSendStatus>

              break;
 80067c8:	e004      	b.n	80067d4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80067ca:	6839      	ldr	r1, [r7, #0]
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 fc5e 	bl	800708e <USBD_CtlError>
              break;
 80067d2:	bf00      	nop
          }
          break;
 80067d4:	e107      	b.n	80069e6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d002      	beq.n	80067e8 <USBD_StdEPReq+0x124>
 80067e2:	2b03      	cmp	r3, #3
 80067e4:	d016      	beq.n	8006814 <USBD_StdEPReq+0x150>
 80067e6:	e04b      	b.n	8006880 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067e8:	7bbb      	ldrb	r3, [r7, #14]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00d      	beq.n	800680a <USBD_StdEPReq+0x146>
 80067ee:	7bbb      	ldrb	r3, [r7, #14]
 80067f0:	2b80      	cmp	r3, #128	; 0x80
 80067f2:	d00a      	beq.n	800680a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80067f4:	7bbb      	ldrb	r3, [r7, #14]
 80067f6:	4619      	mov	r1, r3
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f001 f927 	bl	8007a4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80067fe:	2180      	movs	r1, #128	; 0x80
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f001 f923 	bl	8007a4c <USBD_LL_StallEP>
 8006806:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006808:	e040      	b.n	800688c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800680a:	6839      	ldr	r1, [r7, #0]
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 fc3e 	bl	800708e <USBD_CtlError>
              break;
 8006812:	e03b      	b.n	800688c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	885b      	ldrh	r3, [r3, #2]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d136      	bne.n	800688a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800681c:	7bbb      	ldrb	r3, [r7, #14]
 800681e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006822:	2b00      	cmp	r3, #0
 8006824:	d004      	beq.n	8006830 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006826:	7bbb      	ldrb	r3, [r7, #14]
 8006828:	4619      	mov	r1, r3
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f001 f92d 	bl	8007a8a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 fcf7 	bl	8007224 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006836:	7bbb      	ldrb	r3, [r7, #14]
 8006838:	4619      	mov	r1, r3
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7ff fde2 	bl	8006404 <USBD_CoreFindEP>
 8006840:	4603      	mov	r3, r0
 8006842:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006844:	7b7b      	ldrb	r3, [r7, #13]
 8006846:	2bff      	cmp	r3, #255	; 0xff
 8006848:	d01f      	beq.n	800688a <USBD_StdEPReq+0x1c6>
 800684a:	7b7b      	ldrb	r3, [r7, #13]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d11c      	bne.n	800688a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006850:	7b7a      	ldrb	r2, [r7, #13]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006858:	7b7a      	ldrb	r2, [r7, #13]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	32ae      	adds	r2, #174	; 0xae
 800685e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d010      	beq.n	800688a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006868:	7b7a      	ldrb	r2, [r7, #13]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	32ae      	adds	r2, #174	; 0xae
 800686e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	6839      	ldr	r1, [r7, #0]
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	4798      	blx	r3
 800687a:	4603      	mov	r3, r0
 800687c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800687e:	e004      	b.n	800688a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006880:	6839      	ldr	r1, [r7, #0]
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 fc03 	bl	800708e <USBD_CtlError>
              break;
 8006888:	e000      	b.n	800688c <USBD_StdEPReq+0x1c8>
              break;
 800688a:	bf00      	nop
          }
          break;
 800688c:	e0ab      	b.n	80069e6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b02      	cmp	r3, #2
 8006898:	d002      	beq.n	80068a0 <USBD_StdEPReq+0x1dc>
 800689a:	2b03      	cmp	r3, #3
 800689c:	d032      	beq.n	8006904 <USBD_StdEPReq+0x240>
 800689e:	e097      	b.n	80069d0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068a0:	7bbb      	ldrb	r3, [r7, #14]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d007      	beq.n	80068b6 <USBD_StdEPReq+0x1f2>
 80068a6:	7bbb      	ldrb	r3, [r7, #14]
 80068a8:	2b80      	cmp	r3, #128	; 0x80
 80068aa:	d004      	beq.n	80068b6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80068ac:	6839      	ldr	r1, [r7, #0]
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fbed 	bl	800708e <USBD_CtlError>
                break;
 80068b4:	e091      	b.n	80069da <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	da0b      	bge.n	80068d6 <USBD_StdEPReq+0x212>
 80068be:	7bbb      	ldrb	r3, [r7, #14]
 80068c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068c4:	4613      	mov	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4413      	add	r3, r2
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	3310      	adds	r3, #16
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	4413      	add	r3, r2
 80068d2:	3304      	adds	r3, #4
 80068d4:	e00b      	b.n	80068ee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80068d6:	7bbb      	ldrb	r3, [r7, #14]
 80068d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068dc:	4613      	mov	r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	4413      	add	r3, r2
 80068ec:	3304      	adds	r3, #4
 80068ee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	2200      	movs	r2, #0
 80068f4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	2202      	movs	r2, #2
 80068fa:	4619      	mov	r1, r3
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fc37 	bl	8007170 <USBD_CtlSendData>
              break;
 8006902:	e06a      	b.n	80069da <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006904:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006908:	2b00      	cmp	r3, #0
 800690a:	da11      	bge.n	8006930 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800690c:	7bbb      	ldrb	r3, [r7, #14]
 800690e:	f003 020f 	and.w	r2, r3, #15
 8006912:	6879      	ldr	r1, [r7, #4]
 8006914:	4613      	mov	r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4413      	add	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	440b      	add	r3, r1
 800691e:	3324      	adds	r3, #36	; 0x24
 8006920:	881b      	ldrh	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d117      	bne.n	8006956 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006926:	6839      	ldr	r1, [r7, #0]
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 fbb0 	bl	800708e <USBD_CtlError>
                  break;
 800692e:	e054      	b.n	80069da <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006930:	7bbb      	ldrb	r3, [r7, #14]
 8006932:	f003 020f 	and.w	r2, r3, #15
 8006936:	6879      	ldr	r1, [r7, #4]
 8006938:	4613      	mov	r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	440b      	add	r3, r1
 8006942:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d104      	bne.n	8006956 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800694c:	6839      	ldr	r1, [r7, #0]
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fb9d 	bl	800708e <USBD_CtlError>
                  break;
 8006954:	e041      	b.n	80069da <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006956:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800695a:	2b00      	cmp	r3, #0
 800695c:	da0b      	bge.n	8006976 <USBD_StdEPReq+0x2b2>
 800695e:	7bbb      	ldrb	r3, [r7, #14]
 8006960:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006964:	4613      	mov	r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	3310      	adds	r3, #16
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	4413      	add	r3, r2
 8006972:	3304      	adds	r3, #4
 8006974:	e00b      	b.n	800698e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006976:	7bbb      	ldrb	r3, [r7, #14]
 8006978:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800697c:	4613      	mov	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	4413      	add	r3, r2
 800698c:	3304      	adds	r3, #4
 800698e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006990:	7bbb      	ldrb	r3, [r7, #14]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d002      	beq.n	800699c <USBD_StdEPReq+0x2d8>
 8006996:	7bbb      	ldrb	r3, [r7, #14]
 8006998:	2b80      	cmp	r3, #128	; 0x80
 800699a:	d103      	bne.n	80069a4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	2200      	movs	r2, #0
 80069a0:	601a      	str	r2, [r3, #0]
 80069a2:	e00e      	b.n	80069c2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80069a4:	7bbb      	ldrb	r3, [r7, #14]
 80069a6:	4619      	mov	r1, r3
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f001 f88d 	bl	8007ac8 <USBD_LL_IsStallEP>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d003      	beq.n	80069bc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	2201      	movs	r2, #1
 80069b8:	601a      	str	r2, [r3, #0]
 80069ba:	e002      	b.n	80069c2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	2200      	movs	r2, #0
 80069c0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	2202      	movs	r2, #2
 80069c6:	4619      	mov	r1, r3
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 fbd1 	bl	8007170 <USBD_CtlSendData>
              break;
 80069ce:	e004      	b.n	80069da <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80069d0:	6839      	ldr	r1, [r7, #0]
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 fb5b 	bl	800708e <USBD_CtlError>
              break;
 80069d8:	bf00      	nop
          }
          break;
 80069da:	e004      	b.n	80069e6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80069dc:	6839      	ldr	r1, [r7, #0]
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fb55 	bl	800708e <USBD_CtlError>
          break;
 80069e4:	bf00      	nop
      }
      break;
 80069e6:	e005      	b.n	80069f4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80069e8:	6839      	ldr	r1, [r7, #0]
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 fb4f 	bl	800708e <USBD_CtlError>
      break;
 80069f0:	e000      	b.n	80069f4 <USBD_StdEPReq+0x330>
      break;
 80069f2:	bf00      	nop
  }

  return ret;
 80069f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
	...

08006a00 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006a12:	2300      	movs	r3, #0
 8006a14:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	885b      	ldrh	r3, [r3, #2]
 8006a1a:	0a1b      	lsrs	r3, r3, #8
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	2b06      	cmp	r3, #6
 8006a22:	f200 8128 	bhi.w	8006c76 <USBD_GetDescriptor+0x276>
 8006a26:	a201      	add	r2, pc, #4	; (adr r2, 8006a2c <USBD_GetDescriptor+0x2c>)
 8006a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2c:	08006a49 	.word	0x08006a49
 8006a30:	08006a61 	.word	0x08006a61
 8006a34:	08006aa1 	.word	0x08006aa1
 8006a38:	08006c77 	.word	0x08006c77
 8006a3c:	08006c77 	.word	0x08006c77
 8006a40:	08006c17 	.word	0x08006c17
 8006a44:	08006c43 	.word	0x08006c43
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	7c12      	ldrb	r2, [r2, #16]
 8006a54:	f107 0108 	add.w	r1, r7, #8
 8006a58:	4610      	mov	r0, r2
 8006a5a:	4798      	blx	r3
 8006a5c:	60f8      	str	r0, [r7, #12]
      break;
 8006a5e:	e112      	b.n	8006c86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	7c1b      	ldrb	r3, [r3, #16]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10d      	bne.n	8006a84 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a70:	f107 0208 	add.w	r2, r7, #8
 8006a74:	4610      	mov	r0, r2
 8006a76:	4798      	blx	r3
 8006a78:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	2202      	movs	r2, #2
 8006a80:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006a82:	e100      	b.n	8006c86 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8c:	f107 0208 	add.w	r2, r7, #8
 8006a90:	4610      	mov	r0, r2
 8006a92:	4798      	blx	r3
 8006a94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	701a      	strb	r2, [r3, #0]
      break;
 8006a9e:	e0f2      	b.n	8006c86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	885b      	ldrh	r3, [r3, #2]
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b05      	cmp	r3, #5
 8006aa8:	f200 80ac 	bhi.w	8006c04 <USBD_GetDescriptor+0x204>
 8006aac:	a201      	add	r2, pc, #4	; (adr r2, 8006ab4 <USBD_GetDescriptor+0xb4>)
 8006aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab2:	bf00      	nop
 8006ab4:	08006acd 	.word	0x08006acd
 8006ab8:	08006b01 	.word	0x08006b01
 8006abc:	08006b35 	.word	0x08006b35
 8006ac0:	08006b69 	.word	0x08006b69
 8006ac4:	08006b9d 	.word	0x08006b9d
 8006ac8:	08006bd1 	.word	0x08006bd1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00b      	beq.n	8006af0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	7c12      	ldrb	r2, [r2, #16]
 8006ae4:	f107 0108 	add.w	r1, r7, #8
 8006ae8:	4610      	mov	r0, r2
 8006aea:	4798      	blx	r3
 8006aec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006aee:	e091      	b.n	8006c14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006af0:	6839      	ldr	r1, [r7, #0]
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 facb 	bl	800708e <USBD_CtlError>
            err++;
 8006af8:	7afb      	ldrb	r3, [r7, #11]
 8006afa:	3301      	adds	r3, #1
 8006afc:	72fb      	strb	r3, [r7, #11]
          break;
 8006afe:	e089      	b.n	8006c14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00b      	beq.n	8006b24 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	7c12      	ldrb	r2, [r2, #16]
 8006b18:	f107 0108 	add.w	r1, r7, #8
 8006b1c:	4610      	mov	r0, r2
 8006b1e:	4798      	blx	r3
 8006b20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b22:	e077      	b.n	8006c14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b24:	6839      	ldr	r1, [r7, #0]
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 fab1 	bl	800708e <USBD_CtlError>
            err++;
 8006b2c:	7afb      	ldrb	r3, [r7, #11]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	72fb      	strb	r3, [r7, #11]
          break;
 8006b32:	e06f      	b.n	8006c14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00b      	beq.n	8006b58 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	7c12      	ldrb	r2, [r2, #16]
 8006b4c:	f107 0108 	add.w	r1, r7, #8
 8006b50:	4610      	mov	r0, r2
 8006b52:	4798      	blx	r3
 8006b54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b56:	e05d      	b.n	8006c14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b58:	6839      	ldr	r1, [r7, #0]
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fa97 	bl	800708e <USBD_CtlError>
            err++;
 8006b60:	7afb      	ldrb	r3, [r7, #11]
 8006b62:	3301      	adds	r3, #1
 8006b64:	72fb      	strb	r3, [r7, #11]
          break;
 8006b66:	e055      	b.n	8006c14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00b      	beq.n	8006b8c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	7c12      	ldrb	r2, [r2, #16]
 8006b80:	f107 0108 	add.w	r1, r7, #8
 8006b84:	4610      	mov	r0, r2
 8006b86:	4798      	blx	r3
 8006b88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b8a:	e043      	b.n	8006c14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b8c:	6839      	ldr	r1, [r7, #0]
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fa7d 	bl	800708e <USBD_CtlError>
            err++;
 8006b94:	7afb      	ldrb	r3, [r7, #11]
 8006b96:	3301      	adds	r3, #1
 8006b98:	72fb      	strb	r3, [r7, #11]
          break;
 8006b9a:	e03b      	b.n	8006c14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ba2:	695b      	ldr	r3, [r3, #20]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d00b      	beq.n	8006bc0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bae:	695b      	ldr	r3, [r3, #20]
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	7c12      	ldrb	r2, [r2, #16]
 8006bb4:	f107 0108 	add.w	r1, r7, #8
 8006bb8:	4610      	mov	r0, r2
 8006bba:	4798      	blx	r3
 8006bbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bbe:	e029      	b.n	8006c14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bc0:	6839      	ldr	r1, [r7, #0]
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fa63 	bl	800708e <USBD_CtlError>
            err++;
 8006bc8:	7afb      	ldrb	r3, [r7, #11]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	72fb      	strb	r3, [r7, #11]
          break;
 8006bce:	e021      	b.n	8006c14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00b      	beq.n	8006bf4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	7c12      	ldrb	r2, [r2, #16]
 8006be8:	f107 0108 	add.w	r1, r7, #8
 8006bec:	4610      	mov	r0, r2
 8006bee:	4798      	blx	r3
 8006bf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bf2:	e00f      	b.n	8006c14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bf4:	6839      	ldr	r1, [r7, #0]
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fa49 	bl	800708e <USBD_CtlError>
            err++;
 8006bfc:	7afb      	ldrb	r3, [r7, #11]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	72fb      	strb	r3, [r7, #11]
          break;
 8006c02:	e007      	b.n	8006c14 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006c04:	6839      	ldr	r1, [r7, #0]
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 fa41 	bl	800708e <USBD_CtlError>
          err++;
 8006c0c:	7afb      	ldrb	r3, [r7, #11]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006c12:	bf00      	nop
      }
      break;
 8006c14:	e037      	b.n	8006c86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	7c1b      	ldrb	r3, [r3, #16]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d109      	bne.n	8006c32 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c26:	f107 0208 	add.w	r2, r7, #8
 8006c2a:	4610      	mov	r0, r2
 8006c2c:	4798      	blx	r3
 8006c2e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c30:	e029      	b.n	8006c86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006c32:	6839      	ldr	r1, [r7, #0]
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 fa2a 	bl	800708e <USBD_CtlError>
        err++;
 8006c3a:	7afb      	ldrb	r3, [r7, #11]
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	72fb      	strb	r3, [r7, #11]
      break;
 8006c40:	e021      	b.n	8006c86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	7c1b      	ldrb	r3, [r3, #16]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d10d      	bne.n	8006c66 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c52:	f107 0208 	add.w	r2, r7, #8
 8006c56:	4610      	mov	r0, r2
 8006c58:	4798      	blx	r3
 8006c5a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	2207      	movs	r2, #7
 8006c62:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c64:	e00f      	b.n	8006c86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006c66:	6839      	ldr	r1, [r7, #0]
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fa10 	bl	800708e <USBD_CtlError>
        err++;
 8006c6e:	7afb      	ldrb	r3, [r7, #11]
 8006c70:	3301      	adds	r3, #1
 8006c72:	72fb      	strb	r3, [r7, #11]
      break;
 8006c74:	e007      	b.n	8006c86 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006c76:	6839      	ldr	r1, [r7, #0]
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 fa08 	bl	800708e <USBD_CtlError>
      err++;
 8006c7e:	7afb      	ldrb	r3, [r7, #11]
 8006c80:	3301      	adds	r3, #1
 8006c82:	72fb      	strb	r3, [r7, #11]
      break;
 8006c84:	bf00      	nop
  }

  if (err != 0U)
 8006c86:	7afb      	ldrb	r3, [r7, #11]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d11e      	bne.n	8006cca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	88db      	ldrh	r3, [r3, #6]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d016      	beq.n	8006cc2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006c94:	893b      	ldrh	r3, [r7, #8]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00e      	beq.n	8006cb8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	88da      	ldrh	r2, [r3, #6]
 8006c9e:	893b      	ldrh	r3, [r7, #8]
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	bf28      	it	cs
 8006ca4:	4613      	movcs	r3, r2
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006caa:	893b      	ldrh	r3, [r7, #8]
 8006cac:	461a      	mov	r2, r3
 8006cae:	68f9      	ldr	r1, [r7, #12]
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 fa5d 	bl	8007170 <USBD_CtlSendData>
 8006cb6:	e009      	b.n	8006ccc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006cb8:	6839      	ldr	r1, [r7, #0]
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f9e7 	bl	800708e <USBD_CtlError>
 8006cc0:	e004      	b.n	8006ccc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 faae 	bl	8007224 <USBD_CtlSendStatus>
 8006cc8:	e000      	b.n	8006ccc <USBD_GetDescriptor+0x2cc>
    return;
 8006cca:	bf00      	nop
  }
}
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop

08006cd4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	889b      	ldrh	r3, [r3, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d131      	bne.n	8006d4a <USBD_SetAddress+0x76>
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	88db      	ldrh	r3, [r3, #6]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d12d      	bne.n	8006d4a <USBD_SetAddress+0x76>
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	885b      	ldrh	r3, [r3, #2]
 8006cf2:	2b7f      	cmp	r3, #127	; 0x7f
 8006cf4:	d829      	bhi.n	8006d4a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	885b      	ldrh	r3, [r3, #2]
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b03      	cmp	r3, #3
 8006d0c:	d104      	bne.n	8006d18 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006d0e:	6839      	ldr	r1, [r7, #0]
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 f9bc 	bl	800708e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d16:	e01d      	b.n	8006d54 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	7bfa      	ldrb	r2, [r7, #15]
 8006d1c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
 8006d22:	4619      	mov	r1, r3
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fefb 	bl	8007b20 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 fa7a 	bl	8007224 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006d30:	7bfb      	ldrb	r3, [r7, #15]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d004      	beq.n	8006d40 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2202      	movs	r2, #2
 8006d3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d3e:	e009      	b.n	8006d54 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d48:	e004      	b.n	8006d54 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006d4a:	6839      	ldr	r1, [r7, #0]
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f99e 	bl	800708e <USBD_CtlError>
  }
}
 8006d52:	bf00      	nop
 8006d54:	bf00      	nop
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d66:	2300      	movs	r3, #0
 8006d68:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	885b      	ldrh	r3, [r3, #2]
 8006d6e:	b2da      	uxtb	r2, r3
 8006d70:	4b4e      	ldr	r3, [pc, #312]	; (8006eac <USBD_SetConfig+0x150>)
 8006d72:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006d74:	4b4d      	ldr	r3, [pc, #308]	; (8006eac <USBD_SetConfig+0x150>)
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d905      	bls.n	8006d88 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006d7c:	6839      	ldr	r1, [r7, #0]
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f985 	bl	800708e <USBD_CtlError>
    return USBD_FAIL;
 8006d84:	2303      	movs	r3, #3
 8006d86:	e08c      	b.n	8006ea2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d002      	beq.n	8006d9a <USBD_SetConfig+0x3e>
 8006d94:	2b03      	cmp	r3, #3
 8006d96:	d029      	beq.n	8006dec <USBD_SetConfig+0x90>
 8006d98:	e075      	b.n	8006e86 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006d9a:	4b44      	ldr	r3, [pc, #272]	; (8006eac <USBD_SetConfig+0x150>)
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d020      	beq.n	8006de4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006da2:	4b42      	ldr	r3, [pc, #264]	; (8006eac <USBD_SetConfig+0x150>)
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	461a      	mov	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006dac:	4b3f      	ldr	r3, [pc, #252]	; (8006eac <USBD_SetConfig+0x150>)
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	4619      	mov	r1, r3
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f7fe ffe7 	bl	8005d86 <USBD_SetClassConfig>
 8006db8:	4603      	mov	r3, r0
 8006dba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006dbc:	7bfb      	ldrb	r3, [r7, #15]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d008      	beq.n	8006dd4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006dc2:	6839      	ldr	r1, [r7, #0]
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f962 	bl	800708e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2202      	movs	r2, #2
 8006dce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006dd2:	e065      	b.n	8006ea0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 fa25 	bl	8007224 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2203      	movs	r2, #3
 8006dde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006de2:	e05d      	b.n	8006ea0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fa1d 	bl	8007224 <USBD_CtlSendStatus>
      break;
 8006dea:	e059      	b.n	8006ea0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006dec:	4b2f      	ldr	r3, [pc, #188]	; (8006eac <USBD_SetConfig+0x150>)
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d112      	bne.n	8006e1a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2202      	movs	r2, #2
 8006df8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006dfc:	4b2b      	ldr	r3, [pc, #172]	; (8006eac <USBD_SetConfig+0x150>)
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	461a      	mov	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e06:	4b29      	ldr	r3, [pc, #164]	; (8006eac <USBD_SetConfig+0x150>)
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f7fe ffd6 	bl	8005dbe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 fa06 	bl	8007224 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006e18:	e042      	b.n	8006ea0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006e1a:	4b24      	ldr	r3, [pc, #144]	; (8006eac <USBD_SetConfig+0x150>)
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	461a      	mov	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d02a      	beq.n	8006e7e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	4619      	mov	r1, r3
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f7fe ffc4 	bl	8005dbe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006e36:	4b1d      	ldr	r3, [pc, #116]	; (8006eac <USBD_SetConfig+0x150>)
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e40:	4b1a      	ldr	r3, [pc, #104]	; (8006eac <USBD_SetConfig+0x150>)
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	4619      	mov	r1, r3
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f7fe ff9d 	bl	8005d86 <USBD_SetClassConfig>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006e50:	7bfb      	ldrb	r3, [r7, #15]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00f      	beq.n	8006e76 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006e56:	6839      	ldr	r1, [r7, #0]
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f918 	bl	800708e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	4619      	mov	r1, r3
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f7fe ffa9 	bl	8005dbe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006e74:	e014      	b.n	8006ea0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f9d4 	bl	8007224 <USBD_CtlSendStatus>
      break;
 8006e7c:	e010      	b.n	8006ea0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 f9d0 	bl	8007224 <USBD_CtlSendStatus>
      break;
 8006e84:	e00c      	b.n	8006ea0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006e86:	6839      	ldr	r1, [r7, #0]
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 f900 	bl	800708e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e8e:	4b07      	ldr	r3, [pc, #28]	; (8006eac <USBD_SetConfig+0x150>)
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	4619      	mov	r1, r3
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f7fe ff92 	bl	8005dbe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	73fb      	strb	r3, [r7, #15]
      break;
 8006e9e:	bf00      	nop
  }

  return ret;
 8006ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	200001c8 	.word	0x200001c8

08006eb0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	88db      	ldrh	r3, [r3, #6]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d004      	beq.n	8006ecc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006ec2:	6839      	ldr	r1, [r7, #0]
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 f8e2 	bl	800708e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006eca:	e023      	b.n	8006f14 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	dc02      	bgt.n	8006ede <USBD_GetConfig+0x2e>
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	dc03      	bgt.n	8006ee4 <USBD_GetConfig+0x34>
 8006edc:	e015      	b.n	8006f0a <USBD_GetConfig+0x5a>
 8006ede:	2b03      	cmp	r3, #3
 8006ee0:	d00b      	beq.n	8006efa <USBD_GetConfig+0x4a>
 8006ee2:	e012      	b.n	8006f0a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	3308      	adds	r3, #8
 8006eee:	2201      	movs	r2, #1
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f93c 	bl	8007170 <USBD_CtlSendData>
        break;
 8006ef8:	e00c      	b.n	8006f14 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	3304      	adds	r3, #4
 8006efe:	2201      	movs	r2, #1
 8006f00:	4619      	mov	r1, r3
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f934 	bl	8007170 <USBD_CtlSendData>
        break;
 8006f08:	e004      	b.n	8006f14 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006f0a:	6839      	ldr	r1, [r7, #0]
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f8be 	bl	800708e <USBD_CtlError>
        break;
 8006f12:	bf00      	nop
}
 8006f14:	bf00      	nop
 8006f16:	3708      	adds	r7, #8
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d81e      	bhi.n	8006f72 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	88db      	ldrh	r3, [r3, #6]
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d004      	beq.n	8006f46 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006f3c:	6839      	ldr	r1, [r7, #0]
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 f8a5 	bl	800708e <USBD_CtlError>
        break;
 8006f44:	e01a      	b.n	8006f7c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d005      	beq.n	8006f62 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	f043 0202 	orr.w	r2, r3, #2
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	330c      	adds	r3, #12
 8006f66:	2202      	movs	r2, #2
 8006f68:	4619      	mov	r1, r3
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f900 	bl	8007170 <USBD_CtlSendData>
      break;
 8006f70:	e004      	b.n	8006f7c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f88a 	bl	800708e <USBD_CtlError>
      break;
 8006f7a:	bf00      	nop
  }
}
 8006f7c:	bf00      	nop
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	885b      	ldrh	r3, [r3, #2]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d107      	bne.n	8006fa6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f940 	bl	8007224 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006fa4:	e013      	b.n	8006fce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	885b      	ldrh	r3, [r3, #2]
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d10b      	bne.n	8006fc6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	889b      	ldrh	r3, [r3, #4]
 8006fb2:	0a1b      	lsrs	r3, r3, #8
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	b2da      	uxtb	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f930 	bl	8007224 <USBD_CtlSendStatus>
}
 8006fc4:	e003      	b.n	8006fce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006fc6:	6839      	ldr	r1, [r7, #0]
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 f860 	bl	800708e <USBD_CtlError>
}
 8006fce:	bf00      	nop
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b082      	sub	sp, #8
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
 8006fde:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d80b      	bhi.n	8007006 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	885b      	ldrh	r3, [r3, #2]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d10c      	bne.n	8007010 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f910 	bl	8007224 <USBD_CtlSendStatus>
      }
      break;
 8007004:	e004      	b.n	8007010 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007006:	6839      	ldr	r1, [r7, #0]
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f840 	bl	800708e <USBD_CtlError>
      break;
 800700e:	e000      	b.n	8007012 <USBD_ClrFeature+0x3c>
      break;
 8007010:	bf00      	nop
  }
}
 8007012:	bf00      	nop
 8007014:	3708      	adds	r7, #8
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b084      	sub	sp, #16
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
 8007022:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	781a      	ldrb	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	3301      	adds	r3, #1
 8007034:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	781a      	ldrb	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	3301      	adds	r3, #1
 8007042:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f7ff fa41 	bl	80064cc <SWAPBYTE>
 800704a:	4603      	mov	r3, r0
 800704c:	461a      	mov	r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	3301      	adds	r3, #1
 8007056:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	3301      	adds	r3, #1
 800705c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f7ff fa34 	bl	80064cc <SWAPBYTE>
 8007064:	4603      	mov	r3, r0
 8007066:	461a      	mov	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	3301      	adds	r3, #1
 8007070:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	3301      	adds	r3, #1
 8007076:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f7ff fa27 	bl	80064cc <SWAPBYTE>
 800707e:	4603      	mov	r3, r0
 8007080:	461a      	mov	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	80da      	strh	r2, [r3, #6]
}
 8007086:	bf00      	nop
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b082      	sub	sp, #8
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
 8007096:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007098:	2180      	movs	r1, #128	; 0x80
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 fcd6 	bl	8007a4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80070a0:	2100      	movs	r1, #0
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fcd2 	bl	8007a4c <USBD_LL_StallEP>
}
 80070a8:	bf00      	nop
 80070aa:	3708      	adds	r7, #8
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80070bc:	2300      	movs	r3, #0
 80070be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d036      	beq.n	8007134 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80070ca:	6938      	ldr	r0, [r7, #16]
 80070cc:	f000 f836 	bl	800713c <USBD_GetLen>
 80070d0:	4603      	mov	r3, r0
 80070d2:	3301      	adds	r3, #1
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	005b      	lsls	r3, r3, #1
 80070d8:	b29a      	uxth	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80070de:	7dfb      	ldrb	r3, [r7, #23]
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	4413      	add	r3, r2
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	7812      	ldrb	r2, [r2, #0]
 80070e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80070ea:	7dfb      	ldrb	r3, [r7, #23]
 80070ec:	3301      	adds	r3, #1
 80070ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80070f0:	7dfb      	ldrb	r3, [r7, #23]
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	4413      	add	r3, r2
 80070f6:	2203      	movs	r2, #3
 80070f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80070fa:	7dfb      	ldrb	r3, [r7, #23]
 80070fc:	3301      	adds	r3, #1
 80070fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007100:	e013      	b.n	800712a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007102:	7dfb      	ldrb	r3, [r7, #23]
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	4413      	add	r3, r2
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	7812      	ldrb	r2, [r2, #0]
 800710c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	3301      	adds	r3, #1
 8007112:	613b      	str	r3, [r7, #16]
    idx++;
 8007114:	7dfb      	ldrb	r3, [r7, #23]
 8007116:	3301      	adds	r3, #1
 8007118:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800711a:	7dfb      	ldrb	r3, [r7, #23]
 800711c:	68ba      	ldr	r2, [r7, #8]
 800711e:	4413      	add	r3, r2
 8007120:	2200      	movs	r2, #0
 8007122:	701a      	strb	r2, [r3, #0]
    idx++;
 8007124:	7dfb      	ldrb	r3, [r7, #23]
 8007126:	3301      	adds	r3, #1
 8007128:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1e7      	bne.n	8007102 <USBD_GetString+0x52>
 8007132:	e000      	b.n	8007136 <USBD_GetString+0x86>
    return;
 8007134:	bf00      	nop
  }
}
 8007136:	3718      	adds	r7, #24
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007144:	2300      	movs	r3, #0
 8007146:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800714c:	e005      	b.n	800715a <USBD_GetLen+0x1e>
  {
    len++;
 800714e:	7bfb      	ldrb	r3, [r7, #15]
 8007150:	3301      	adds	r3, #1
 8007152:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	3301      	adds	r3, #1
 8007158:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1f5      	bne.n	800714e <USBD_GetLen+0x12>
  }

  return len;
 8007162:	7bfb      	ldrb	r3, [r7, #15]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3714      	adds	r7, #20
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2202      	movs	r2, #2
 8007180:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	2100      	movs	r1, #0
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f000 fce1 	bl	8007b5e <USBD_LL_Transmit>

  return USBD_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b084      	sub	sp, #16
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	60f8      	str	r0, [r7, #12]
 80071ae:	60b9      	str	r1, [r7, #8]
 80071b0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	68ba      	ldr	r2, [r7, #8]
 80071b6:	2100      	movs	r1, #0
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f000 fcd0 	bl	8007b5e <USBD_LL_Transmit>

  return USBD_OK;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2203      	movs	r2, #3
 80071d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	68ba      	ldr	r2, [r7, #8]
 80071f0:	2100      	movs	r1, #0
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f000 fcd4 	bl	8007ba0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b084      	sub	sp, #16
 8007206:	af00      	add	r7, sp, #0
 8007208:	60f8      	str	r0, [r7, #12]
 800720a:	60b9      	str	r1, [r7, #8]
 800720c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	68ba      	ldr	r2, [r7, #8]
 8007212:	2100      	movs	r1, #0
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f000 fcc3 	bl	8007ba0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2204      	movs	r2, #4
 8007230:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007234:	2300      	movs	r3, #0
 8007236:	2200      	movs	r2, #0
 8007238:	2100      	movs	r1, #0
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fc8f 	bl	8007b5e <USBD_LL_Transmit>

  return USBD_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b082      	sub	sp, #8
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2205      	movs	r2, #5
 8007256:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800725a:	2300      	movs	r3, #0
 800725c:	2200      	movs	r2, #0
 800725e:	2100      	movs	r1, #0
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 fc9d 	bl	8007ba0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007274:	2200      	movs	r2, #0
 8007276:	4912      	ldr	r1, [pc, #72]	; (80072c0 <MX_USB_DEVICE_Init+0x50>)
 8007278:	4812      	ldr	r0, [pc, #72]	; (80072c4 <MX_USB_DEVICE_Init+0x54>)
 800727a:	f7fe fd07 	bl	8005c8c <USBD_Init>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d001      	beq.n	8007288 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007284:	f7f9 f9fa 	bl	800067c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007288:	490f      	ldr	r1, [pc, #60]	; (80072c8 <MX_USB_DEVICE_Init+0x58>)
 800728a:	480e      	ldr	r0, [pc, #56]	; (80072c4 <MX_USB_DEVICE_Init+0x54>)
 800728c:	f7fe fd2e 	bl	8005cec <USBD_RegisterClass>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007296:	f7f9 f9f1 	bl	800067c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800729a:	490c      	ldr	r1, [pc, #48]	; (80072cc <MX_USB_DEVICE_Init+0x5c>)
 800729c:	4809      	ldr	r0, [pc, #36]	; (80072c4 <MX_USB_DEVICE_Init+0x54>)
 800729e:	f7fe fc1f 	bl	8005ae0 <USBD_CDC_RegisterInterface>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d001      	beq.n	80072ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80072a8:	f7f9 f9e8 	bl	800067c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80072ac:	4805      	ldr	r0, [pc, #20]	; (80072c4 <MX_USB_DEVICE_Init+0x54>)
 80072ae:	f7fe fd53 	bl	8005d58 <USBD_Start>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d001      	beq.n	80072bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80072b8:	f7f9 f9e0 	bl	800067c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80072bc:	bf00      	nop
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	200000ac 	.word	0x200000ac
 80072c4:	200001cc 	.word	0x200001cc
 80072c8:	20000018 	.word	0x20000018
 80072cc:	20000098 	.word	0x20000098

080072d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80072d4:	2200      	movs	r2, #0
 80072d6:	4905      	ldr	r1, [pc, #20]	; (80072ec <CDC_Init_FS+0x1c>)
 80072d8:	4805      	ldr	r0, [pc, #20]	; (80072f0 <CDC_Init_FS+0x20>)
 80072da:	f7fe fc1b 	bl	8005b14 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80072de:	4905      	ldr	r1, [pc, #20]	; (80072f4 <CDC_Init_FS+0x24>)
 80072e0:	4803      	ldr	r0, [pc, #12]	; (80072f0 <CDC_Init_FS+0x20>)
 80072e2:	f7fe fc39 	bl	8005b58 <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 80072e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	200008a8 	.word	0x200008a8
 80072f0:	200001cc 	.word	0x200001cc
 80072f4:	200004a8 	.word	0x200004a8

080072f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80072f8:	b480      	push	{r7}
 80072fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
    return (USBD_OK);
 80072fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80072fe:	4618      	mov	r0, r3
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	4603      	mov	r3, r0
 8007310:	6039      	str	r1, [r7, #0]
 8007312:	71fb      	strb	r3, [r7, #7]
 8007314:	4613      	mov	r3, r2
 8007316:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
    switch (cmd) {
 8007318:	79fb      	ldrb	r3, [r7, #7]
 800731a:	2b23      	cmp	r3, #35	; 0x23
 800731c:	d84a      	bhi.n	80073b4 <CDC_Control_FS+0xac>
 800731e:	a201      	add	r2, pc, #4	; (adr r2, 8007324 <CDC_Control_FS+0x1c>)
 8007320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007324:	080073b5 	.word	0x080073b5
 8007328:	080073b5 	.word	0x080073b5
 800732c:	080073b5 	.word	0x080073b5
 8007330:	080073b5 	.word	0x080073b5
 8007334:	080073b5 	.word	0x080073b5
 8007338:	080073b5 	.word	0x080073b5
 800733c:	080073b5 	.word	0x080073b5
 8007340:	080073b5 	.word	0x080073b5
 8007344:	080073b5 	.word	0x080073b5
 8007348:	080073b5 	.word	0x080073b5
 800734c:	080073b5 	.word	0x080073b5
 8007350:	080073b5 	.word	0x080073b5
 8007354:	080073b5 	.word	0x080073b5
 8007358:	080073b5 	.word	0x080073b5
 800735c:	080073b5 	.word	0x080073b5
 8007360:	080073b5 	.word	0x080073b5
 8007364:	080073b5 	.word	0x080073b5
 8007368:	080073b5 	.word	0x080073b5
 800736c:	080073b5 	.word	0x080073b5
 8007370:	080073b5 	.word	0x080073b5
 8007374:	080073b5 	.word	0x080073b5
 8007378:	080073b5 	.word	0x080073b5
 800737c:	080073b5 	.word	0x080073b5
 8007380:	080073b5 	.word	0x080073b5
 8007384:	080073b5 	.word	0x080073b5
 8007388:	080073b5 	.word	0x080073b5
 800738c:	080073b5 	.word	0x080073b5
 8007390:	080073b5 	.word	0x080073b5
 8007394:	080073b5 	.word	0x080073b5
 8007398:	080073b5 	.word	0x080073b5
 800739c:	080073b5 	.word	0x080073b5
 80073a0:	080073b5 	.word	0x080073b5
 80073a4:	080073b5 	.word	0x080073b5
 80073a8:	080073b5 	.word	0x080073b5
 80073ac:	080073b5 	.word	0x080073b5
 80073b0:	080073b5 	.word	0x080073b5
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 80073b4:	bf00      	nop
    }

    return (USBD_OK);
 80073b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80073ce:	6879      	ldr	r1, [r7, #4]
 80073d0:	4805      	ldr	r0, [pc, #20]	; (80073e8 <CDC_Receive_FS+0x24>)
 80073d2:	f7fe fbc1 	bl	8005b58 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80073d6:	4804      	ldr	r0, [pc, #16]	; (80073e8 <CDC_Receive_FS+0x24>)
 80073d8:	f7fe fc22 	bl	8005c20 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 80073dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3708      	adds	r7, #8
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	200001cc 	.word	0x200001cc

080073ec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	460b      	mov	r3, r1
 80073f6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80073f8:	2300      	movs	r3, #0
 80073fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 80073fc:	4b0d      	ldr	r3, [pc, #52]	; (8007434 <CDC_Transmit_FS+0x48>)
 80073fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007402:	60bb      	str	r3, [r7, #8]
    if (hcdc->TxState != 0) {
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800740a:	2b00      	cmp	r3, #0
 800740c:	d001      	beq.n	8007412 <CDC_Transmit_FS+0x26>
        return USBD_BUSY;
 800740e:	2301      	movs	r3, #1
 8007410:	e00b      	b.n	800742a <CDC_Transmit_FS+0x3e>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007412:	887b      	ldrh	r3, [r7, #2]
 8007414:	461a      	mov	r2, r3
 8007416:	6879      	ldr	r1, [r7, #4]
 8007418:	4806      	ldr	r0, [pc, #24]	; (8007434 <CDC_Transmit_FS+0x48>)
 800741a:	f7fe fb7b 	bl	8005b14 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800741e:	4805      	ldr	r0, [pc, #20]	; (8007434 <CDC_Transmit_FS+0x48>)
 8007420:	f7fe fbb8 	bl	8005b94 <USBD_CDC_TransmitPacket>
 8007424:	4603      	mov	r3, r0
 8007426:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007428:	7bfb      	ldrb	r3, [r7, #15]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	200001cc 	.word	0x200001cc

08007438 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007438:	b480      	push	{r7}
 800743a:	b087      	sub	sp, #28
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	4613      	mov	r3, r2
 8007444:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007446:	2300      	movs	r3, #0
 8007448:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800744a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800744e:	4618      	mov	r0, r3
 8007450:	371c      	adds	r7, #28
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
	...

0800745c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	4603      	mov	r3, r0
 8007464:	6039      	str	r1, [r7, #0]
 8007466:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	2212      	movs	r2, #18
 800746c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800746e:	4b03      	ldr	r3, [pc, #12]	; (800747c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007470:	4618      	mov	r0, r3
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	200000c8 	.word	0x200000c8

08007480 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	4603      	mov	r3, r0
 8007488:	6039      	str	r1, [r7, #0]
 800748a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	2204      	movs	r2, #4
 8007490:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007492:	4b03      	ldr	r3, [pc, #12]	; (80074a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007494:	4618      	mov	r0, r3
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr
 80074a0:	200000dc 	.word	0x200000dc

080074a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	4603      	mov	r3, r0
 80074ac:	6039      	str	r1, [r7, #0]
 80074ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80074b0:	79fb      	ldrb	r3, [r7, #7]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d105      	bne.n	80074c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	4907      	ldr	r1, [pc, #28]	; (80074d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80074ba:	4808      	ldr	r0, [pc, #32]	; (80074dc <USBD_FS_ProductStrDescriptor+0x38>)
 80074bc:	f7ff fdf8 	bl	80070b0 <USBD_GetString>
 80074c0:	e004      	b.n	80074cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80074c2:	683a      	ldr	r2, [r7, #0]
 80074c4:	4904      	ldr	r1, [pc, #16]	; (80074d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80074c6:	4805      	ldr	r0, [pc, #20]	; (80074dc <USBD_FS_ProductStrDescriptor+0x38>)
 80074c8:	f7ff fdf2 	bl	80070b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80074cc:	4b02      	ldr	r3, [pc, #8]	; (80074d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	20000ca8 	.word	0x20000ca8
 80074dc:	08007f68 	.word	0x08007f68

080074e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	4603      	mov	r3, r0
 80074e8:	6039      	str	r1, [r7, #0]
 80074ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80074ec:	683a      	ldr	r2, [r7, #0]
 80074ee:	4904      	ldr	r1, [pc, #16]	; (8007500 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80074f0:	4804      	ldr	r0, [pc, #16]	; (8007504 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80074f2:	f7ff fddd 	bl	80070b0 <USBD_GetString>
  return USBD_StrDesc;
 80074f6:	4b02      	ldr	r3, [pc, #8]	; (8007500 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	20000ca8 	.word	0x20000ca8
 8007504:	08007f80 	.word	0x08007f80

08007508 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	4603      	mov	r3, r0
 8007510:	6039      	str	r1, [r7, #0]
 8007512:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	221a      	movs	r2, #26
 8007518:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800751a:	f000 f843 	bl	80075a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800751e:	4b02      	ldr	r3, [pc, #8]	; (8007528 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007520:	4618      	mov	r0, r3
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	200000e0 	.word	0x200000e0

0800752c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	4603      	mov	r3, r0
 8007534:	6039      	str	r1, [r7, #0]
 8007536:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007538:	79fb      	ldrb	r3, [r7, #7]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d105      	bne.n	800754a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800753e:	683a      	ldr	r2, [r7, #0]
 8007540:	4907      	ldr	r1, [pc, #28]	; (8007560 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007542:	4808      	ldr	r0, [pc, #32]	; (8007564 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007544:	f7ff fdb4 	bl	80070b0 <USBD_GetString>
 8007548:	e004      	b.n	8007554 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	4904      	ldr	r1, [pc, #16]	; (8007560 <USBD_FS_ConfigStrDescriptor+0x34>)
 800754e:	4805      	ldr	r0, [pc, #20]	; (8007564 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007550:	f7ff fdae 	bl	80070b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007554:	4b02      	ldr	r3, [pc, #8]	; (8007560 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007556:	4618      	mov	r0, r3
 8007558:	3708      	adds	r7, #8
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	20000ca8 	.word	0x20000ca8
 8007564:	08007f94 	.word	0x08007f94

08007568 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	4603      	mov	r3, r0
 8007570:	6039      	str	r1, [r7, #0]
 8007572:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007574:	79fb      	ldrb	r3, [r7, #7]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d105      	bne.n	8007586 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800757a:	683a      	ldr	r2, [r7, #0]
 800757c:	4907      	ldr	r1, [pc, #28]	; (800759c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800757e:	4808      	ldr	r0, [pc, #32]	; (80075a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007580:	f7ff fd96 	bl	80070b0 <USBD_GetString>
 8007584:	e004      	b.n	8007590 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	4904      	ldr	r1, [pc, #16]	; (800759c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800758a:	4805      	ldr	r0, [pc, #20]	; (80075a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800758c:	f7ff fd90 	bl	80070b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007590:	4b02      	ldr	r3, [pc, #8]	; (800759c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007592:	4618      	mov	r0, r3
 8007594:	3708      	adds	r7, #8
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	20000ca8 	.word	0x20000ca8
 80075a0:	08007fa0 	.word	0x08007fa0

080075a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80075aa:	4b0f      	ldr	r3, [pc, #60]	; (80075e8 <Get_SerialNum+0x44>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80075b0:	4b0e      	ldr	r3, [pc, #56]	; (80075ec <Get_SerialNum+0x48>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80075b6:	4b0e      	ldr	r3, [pc, #56]	; (80075f0 <Get_SerialNum+0x4c>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4413      	add	r3, r2
 80075c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d009      	beq.n	80075de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80075ca:	2208      	movs	r2, #8
 80075cc:	4909      	ldr	r1, [pc, #36]	; (80075f4 <Get_SerialNum+0x50>)
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f000 f814 	bl	80075fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80075d4:	2204      	movs	r2, #4
 80075d6:	4908      	ldr	r1, [pc, #32]	; (80075f8 <Get_SerialNum+0x54>)
 80075d8:	68b8      	ldr	r0, [r7, #8]
 80075da:	f000 f80f 	bl	80075fc <IntToUnicode>
  }
}
 80075de:	bf00      	nop
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	1fff7a10 	.word	0x1fff7a10
 80075ec:	1fff7a14 	.word	0x1fff7a14
 80075f0:	1fff7a18 	.word	0x1fff7a18
 80075f4:	200000e2 	.word	0x200000e2
 80075f8:	200000f2 	.word	0x200000f2

080075fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b087      	sub	sp, #28
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	4613      	mov	r3, r2
 8007608:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800760a:	2300      	movs	r3, #0
 800760c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800760e:	2300      	movs	r3, #0
 8007610:	75fb      	strb	r3, [r7, #23]
 8007612:	e027      	b.n	8007664 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	0f1b      	lsrs	r3, r3, #28
 8007618:	2b09      	cmp	r3, #9
 800761a:	d80b      	bhi.n	8007634 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	0f1b      	lsrs	r3, r3, #28
 8007620:	b2da      	uxtb	r2, r3
 8007622:	7dfb      	ldrb	r3, [r7, #23]
 8007624:	005b      	lsls	r3, r3, #1
 8007626:	4619      	mov	r1, r3
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	440b      	add	r3, r1
 800762c:	3230      	adds	r2, #48	; 0x30
 800762e:	b2d2      	uxtb	r2, r2
 8007630:	701a      	strb	r2, [r3, #0]
 8007632:	e00a      	b.n	800764a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	0f1b      	lsrs	r3, r3, #28
 8007638:	b2da      	uxtb	r2, r3
 800763a:	7dfb      	ldrb	r3, [r7, #23]
 800763c:	005b      	lsls	r3, r3, #1
 800763e:	4619      	mov	r1, r3
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	440b      	add	r3, r1
 8007644:	3237      	adds	r2, #55	; 0x37
 8007646:	b2d2      	uxtb	r2, r2
 8007648:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	011b      	lsls	r3, r3, #4
 800764e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007650:	7dfb      	ldrb	r3, [r7, #23]
 8007652:	005b      	lsls	r3, r3, #1
 8007654:	3301      	adds	r3, #1
 8007656:	68ba      	ldr	r2, [r7, #8]
 8007658:	4413      	add	r3, r2
 800765a:	2200      	movs	r2, #0
 800765c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800765e:	7dfb      	ldrb	r3, [r7, #23]
 8007660:	3301      	adds	r3, #1
 8007662:	75fb      	strb	r3, [r7, #23]
 8007664:	7dfa      	ldrb	r2, [r7, #23]
 8007666:	79fb      	ldrb	r3, [r7, #7]
 8007668:	429a      	cmp	r2, r3
 800766a:	d3d3      	bcc.n	8007614 <IntToUnicode+0x18>
  }
}
 800766c:	bf00      	nop
 800766e:	bf00      	nop
 8007670:	371c      	adds	r7, #28
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
	...

0800767c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b08a      	sub	sp, #40	; 0x28
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007684:	f107 0314 	add.w	r3, r7, #20
 8007688:	2200      	movs	r2, #0
 800768a:	601a      	str	r2, [r3, #0]
 800768c:	605a      	str	r2, [r3, #4]
 800768e:	609a      	str	r2, [r3, #8]
 8007690:	60da      	str	r2, [r3, #12]
 8007692:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800769c:	d13a      	bne.n	8007714 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800769e:	2300      	movs	r3, #0
 80076a0:	613b      	str	r3, [r7, #16]
 80076a2:	4b1e      	ldr	r3, [pc, #120]	; (800771c <HAL_PCD_MspInit+0xa0>)
 80076a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a6:	4a1d      	ldr	r2, [pc, #116]	; (800771c <HAL_PCD_MspInit+0xa0>)
 80076a8:	f043 0301 	orr.w	r3, r3, #1
 80076ac:	6313      	str	r3, [r2, #48]	; 0x30
 80076ae:	4b1b      	ldr	r3, [pc, #108]	; (800771c <HAL_PCD_MspInit+0xa0>)
 80076b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b2:	f003 0301 	and.w	r3, r3, #1
 80076b6:	613b      	str	r3, [r7, #16]
 80076b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80076ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80076be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076c0:	2302      	movs	r3, #2
 80076c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076c4:	2300      	movs	r3, #0
 80076c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076c8:	2303      	movs	r3, #3
 80076ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80076cc:	230a      	movs	r3, #10
 80076ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076d0:	f107 0314 	add.w	r3, r7, #20
 80076d4:	4619      	mov	r1, r3
 80076d6:	4812      	ldr	r0, [pc, #72]	; (8007720 <HAL_PCD_MspInit+0xa4>)
 80076d8:	f7f9 fb80 	bl	8000ddc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80076dc:	4b0f      	ldr	r3, [pc, #60]	; (800771c <HAL_PCD_MspInit+0xa0>)
 80076de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076e0:	4a0e      	ldr	r2, [pc, #56]	; (800771c <HAL_PCD_MspInit+0xa0>)
 80076e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076e6:	6353      	str	r3, [r2, #52]	; 0x34
 80076e8:	2300      	movs	r3, #0
 80076ea:	60fb      	str	r3, [r7, #12]
 80076ec:	4b0b      	ldr	r3, [pc, #44]	; (800771c <HAL_PCD_MspInit+0xa0>)
 80076ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f0:	4a0a      	ldr	r2, [pc, #40]	; (800771c <HAL_PCD_MspInit+0xa0>)
 80076f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076f6:	6453      	str	r3, [r2, #68]	; 0x44
 80076f8:	4b08      	ldr	r3, [pc, #32]	; (800771c <HAL_PCD_MspInit+0xa0>)
 80076fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007700:	60fb      	str	r3, [r7, #12]
 8007702:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007704:	2200      	movs	r2, #0
 8007706:	2100      	movs	r1, #0
 8007708:	2043      	movs	r0, #67	; 0x43
 800770a:	f7f9 fb30 	bl	8000d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800770e:	2043      	movs	r0, #67	; 0x43
 8007710:	f7f9 fb49 	bl	8000da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007714:	bf00      	nop
 8007716:	3728      	adds	r7, #40	; 0x28
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	40023800 	.word	0x40023800
 8007720:	40020000 	.word	0x40020000

08007724 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007738:	4619      	mov	r1, r3
 800773a:	4610      	mov	r0, r2
 800773c:	f7fe fb59 	bl	8005df2 <USBD_LL_SetupStage>
}
 8007740:	bf00      	nop
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	460b      	mov	r3, r1
 8007752:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800775a:	78fa      	ldrb	r2, [r7, #3]
 800775c:	6879      	ldr	r1, [r7, #4]
 800775e:	4613      	mov	r3, r2
 8007760:	00db      	lsls	r3, r3, #3
 8007762:	4413      	add	r3, r2
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	440b      	add	r3, r1
 8007768:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	78fb      	ldrb	r3, [r7, #3]
 8007770:	4619      	mov	r1, r3
 8007772:	f7fe fb93 	bl	8005e9c <USBD_LL_DataOutStage>
}
 8007776:	bf00      	nop
 8007778:	3708      	adds	r7, #8
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b082      	sub	sp, #8
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
 8007786:	460b      	mov	r3, r1
 8007788:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007790:	78fa      	ldrb	r2, [r7, #3]
 8007792:	6879      	ldr	r1, [r7, #4]
 8007794:	4613      	mov	r3, r2
 8007796:	00db      	lsls	r3, r3, #3
 8007798:	4413      	add	r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	440b      	add	r3, r1
 800779e:	334c      	adds	r3, #76	; 0x4c
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	78fb      	ldrb	r3, [r7, #3]
 80077a4:	4619      	mov	r1, r3
 80077a6:	f7fe fc2c 	bl	8006002 <USBD_LL_DataInStage>
}
 80077aa:	bf00      	nop
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b082      	sub	sp, #8
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7fe fd60 	bl	8006286 <USBD_LL_SOF>
}
 80077c6:	bf00      	nop
 80077c8:	3708      	adds	r7, #8
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b084      	sub	sp, #16
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80077d6:	2301      	movs	r3, #1
 80077d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d001      	beq.n	80077e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80077e2:	f7f8 ff4b 	bl	800067c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80077ec:	7bfa      	ldrb	r2, [r7, #15]
 80077ee:	4611      	mov	r1, r2
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7fe fd0a 	bl	800620a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80077fc:	4618      	mov	r0, r3
 80077fe:	f7fe fcb2 	bl	8006166 <USBD_LL_Reset>
}
 8007802:	bf00      	nop
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
	...

0800780c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800781a:	4618      	mov	r0, r3
 800781c:	f7fe fd05 	bl	800622a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	6812      	ldr	r2, [r2, #0]
 800782e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007832:	f043 0301 	orr.w	r3, r3, #1
 8007836:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a1b      	ldr	r3, [r3, #32]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d005      	beq.n	800784c <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007840:	4b04      	ldr	r3, [pc, #16]	; (8007854 <HAL_PCD_SuspendCallback+0x48>)
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	4a03      	ldr	r2, [pc, #12]	; (8007854 <HAL_PCD_SuspendCallback+0x48>)
 8007846:	f043 0306 	orr.w	r3, r3, #6
 800784a:	6113      	str	r3, [r2, #16]
    }
  /* USER CODE END 2 */
}
 800784c:	bf00      	nop
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	e000ed00 	.word	0xe000ed00

08007858 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007866:	4618      	mov	r0, r3
 8007868:	f7fe fcf5 	bl	8006256 <USBD_LL_Resume>
}
 800786c:	bf00      	nop
 800786e:	3708      	adds	r7, #8
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	460b      	mov	r3, r1
 800787e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007886:	78fa      	ldrb	r2, [r7, #3]
 8007888:	4611      	mov	r1, r2
 800788a:	4618      	mov	r0, r3
 800788c:	f7fe fd4d 	bl	800632a <USBD_LL_IsoOUTIncomplete>
}
 8007890:	bf00      	nop
 8007892:	3708      	adds	r7, #8
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	460b      	mov	r3, r1
 80078a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078aa:	78fa      	ldrb	r2, [r7, #3]
 80078ac:	4611      	mov	r1, r2
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7fe fd09 	bl	80062c6 <USBD_LL_IsoINIncomplete>
}
 80078b4:	bf00      	nop
 80078b6:	3708      	adds	r7, #8
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7fe fd5f 	bl	800638e <USBD_LL_DevConnected>
}
 80078d0:	bf00      	nop
 80078d2:	3708      	adds	r7, #8
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7fe fd5c 	bl	80063a4 <USBD_LL_DevDisconnected>
}
 80078ec:	bf00      	nop
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d13c      	bne.n	800797e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007904:	4a20      	ldr	r2, [pc, #128]	; (8007988 <USBD_LL_Init+0x94>)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a1e      	ldr	r2, [pc, #120]	; (8007988 <USBD_LL_Init+0x94>)
 8007910:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007914:	4b1c      	ldr	r3, [pc, #112]	; (8007988 <USBD_LL_Init+0x94>)
 8007916:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800791a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800791c:	4b1a      	ldr	r3, [pc, #104]	; (8007988 <USBD_LL_Init+0x94>)
 800791e:	2204      	movs	r2, #4
 8007920:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007922:	4b19      	ldr	r3, [pc, #100]	; (8007988 <USBD_LL_Init+0x94>)
 8007924:	2202      	movs	r2, #2
 8007926:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007928:	4b17      	ldr	r3, [pc, #92]	; (8007988 <USBD_LL_Init+0x94>)
 800792a:	2200      	movs	r2, #0
 800792c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800792e:	4b16      	ldr	r3, [pc, #88]	; (8007988 <USBD_LL_Init+0x94>)
 8007930:	2202      	movs	r2, #2
 8007932:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007934:	4b14      	ldr	r3, [pc, #80]	; (8007988 <USBD_LL_Init+0x94>)
 8007936:	2200      	movs	r2, #0
 8007938:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800793a:	4b13      	ldr	r3, [pc, #76]	; (8007988 <USBD_LL_Init+0x94>)
 800793c:	2200      	movs	r2, #0
 800793e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007940:	4b11      	ldr	r3, [pc, #68]	; (8007988 <USBD_LL_Init+0x94>)
 8007942:	2200      	movs	r2, #0
 8007944:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007946:	4b10      	ldr	r3, [pc, #64]	; (8007988 <USBD_LL_Init+0x94>)
 8007948:	2200      	movs	r2, #0
 800794a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800794c:	4b0e      	ldr	r3, [pc, #56]	; (8007988 <USBD_LL_Init+0x94>)
 800794e:	2200      	movs	r2, #0
 8007950:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007952:	480d      	ldr	r0, [pc, #52]	; (8007988 <USBD_LL_Init+0x94>)
 8007954:	f7fa f9b4 	bl	8001cc0 <HAL_PCD_Init>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d001      	beq.n	8007962 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800795e:	f7f8 fe8d 	bl	800067c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007962:	2180      	movs	r1, #128	; 0x80
 8007964:	4808      	ldr	r0, [pc, #32]	; (8007988 <USBD_LL_Init+0x94>)
 8007966:	f7fb fc0c 	bl	8003182 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800796a:	2240      	movs	r2, #64	; 0x40
 800796c:	2100      	movs	r1, #0
 800796e:	4806      	ldr	r0, [pc, #24]	; (8007988 <USBD_LL_Init+0x94>)
 8007970:	f7fb fbc0 	bl	80030f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007974:	2280      	movs	r2, #128	; 0x80
 8007976:	2101      	movs	r1, #1
 8007978:	4803      	ldr	r0, [pc, #12]	; (8007988 <USBD_LL_Init+0x94>)
 800797a:	f7fb fbbb 	bl	80030f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	20000ea8 	.word	0x20000ea8

0800798c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007994:	2300      	movs	r3, #0
 8007996:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007998:	2300      	movs	r3, #0
 800799a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7fa faa9 	bl	8001efa <HAL_PCD_Start>
 80079a8:	4603      	mov	r3, r0
 80079aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079ac:	7bfb      	ldrb	r3, [r7, #15]
 80079ae:	4618      	mov	r0, r3
 80079b0:	f000 f942 	bl	8007c38 <USBD_Get_USB_Status>
 80079b4:	4603      	mov	r3, r0
 80079b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b084      	sub	sp, #16
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
 80079ca:	4608      	mov	r0, r1
 80079cc:	4611      	mov	r1, r2
 80079ce:	461a      	mov	r2, r3
 80079d0:	4603      	mov	r3, r0
 80079d2:	70fb      	strb	r3, [r7, #3]
 80079d4:	460b      	mov	r3, r1
 80079d6:	70bb      	strb	r3, [r7, #2]
 80079d8:	4613      	mov	r3, r2
 80079da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079dc:	2300      	movs	r3, #0
 80079de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079e0:	2300      	movs	r3, #0
 80079e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80079ea:	78bb      	ldrb	r3, [r7, #2]
 80079ec:	883a      	ldrh	r2, [r7, #0]
 80079ee:	78f9      	ldrb	r1, [r7, #3]
 80079f0:	f7fa ff7a 	bl	80028e8 <HAL_PCD_EP_Open>
 80079f4:	4603      	mov	r3, r0
 80079f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079f8:	7bfb      	ldrb	r3, [r7, #15]
 80079fa:	4618      	mov	r0, r3
 80079fc:	f000 f91c 	bl	8007c38 <USBD_Get_USB_Status>
 8007a00:	4603      	mov	r3, r0
 8007a02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a04:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b084      	sub	sp, #16
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
 8007a16:	460b      	mov	r3, r1
 8007a18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a28:	78fa      	ldrb	r2, [r7, #3]
 8007a2a:	4611      	mov	r1, r2
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7fa ffc3 	bl	80029b8 <HAL_PCD_EP_Close>
 8007a32:	4603      	mov	r3, r0
 8007a34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a36:	7bfb      	ldrb	r3, [r7, #15]
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f000 f8fd 	bl	8007c38 <USBD_Get_USB_Status>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a42:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	460b      	mov	r3, r1
 8007a56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a66:	78fa      	ldrb	r2, [r7, #3]
 8007a68:	4611      	mov	r1, r2
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7fb f89b 	bl	8002ba6 <HAL_PCD_EP_SetStall>
 8007a70:	4603      	mov	r3, r0
 8007a72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a74:	7bfb      	ldrb	r3, [r7, #15]
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 f8de 	bl	8007c38 <USBD_Get_USB_Status>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a80:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b084      	sub	sp, #16
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
 8007a92:	460b      	mov	r3, r1
 8007a94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a96:	2300      	movs	r3, #0
 8007a98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007aa4:	78fa      	ldrb	r2, [r7, #3]
 8007aa6:	4611      	mov	r1, r2
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7fb f8e0 	bl	8002c6e <HAL_PCD_EP_ClrStall>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ab2:	7bfb      	ldrb	r3, [r7, #15]
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f000 f8bf 	bl	8007c38 <USBD_Get_USB_Status>
 8007aba:	4603      	mov	r3, r0
 8007abc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007abe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b085      	sub	sp, #20
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ada:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007adc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	da0b      	bge.n	8007afc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007ae4:	78fb      	ldrb	r3, [r7, #3]
 8007ae6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007aea:	68f9      	ldr	r1, [r7, #12]
 8007aec:	4613      	mov	r3, r2
 8007aee:	00db      	lsls	r3, r3, #3
 8007af0:	4413      	add	r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	440b      	add	r3, r1
 8007af6:	333e      	adds	r3, #62	; 0x3e
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	e00b      	b.n	8007b14 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007afc:	78fb      	ldrb	r3, [r7, #3]
 8007afe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b02:	68f9      	ldr	r1, [r7, #12]
 8007b04:	4613      	mov	r3, r2
 8007b06:	00db      	lsls	r3, r3, #3
 8007b08:	4413      	add	r3, r2
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	440b      	add	r3, r1
 8007b0e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007b12:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3714      	adds	r7, #20
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	460b      	mov	r3, r1
 8007b2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b30:	2300      	movs	r3, #0
 8007b32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b3a:	78fa      	ldrb	r2, [r7, #3]
 8007b3c:	4611      	mov	r1, r2
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7fa fead 	bl	800289e <HAL_PCD_SetAddress>
 8007b44:	4603      	mov	r3, r0
 8007b46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b48:	7bfb      	ldrb	r3, [r7, #15]
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f000 f874 	bl	8007c38 <USBD_Get_USB_Status>
 8007b50:	4603      	mov	r3, r0
 8007b52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b54:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b086      	sub	sp, #24
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	60f8      	str	r0, [r7, #12]
 8007b66:	607a      	str	r2, [r7, #4]
 8007b68:	603b      	str	r3, [r7, #0]
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007b7c:	7af9      	ldrb	r1, [r7, #11]
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	f7fa ffc6 	bl	8002b12 <HAL_PCD_EP_Transmit>
 8007b86:	4603      	mov	r3, r0
 8007b88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b8a:	7dfb      	ldrb	r3, [r7, #23]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f000 f853 	bl	8007c38 <USBD_Get_USB_Status>
 8007b92:	4603      	mov	r3, r0
 8007b94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b96:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3718      	adds	r7, #24
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b086      	sub	sp, #24
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	607a      	str	r2, [r7, #4]
 8007baa:	603b      	str	r3, [r7, #0]
 8007bac:	460b      	mov	r3, r1
 8007bae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007bbe:	7af9      	ldrb	r1, [r7, #11]
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	f7fa ff42 	bl	8002a4c <HAL_PCD_EP_Receive>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bcc:	7dfb      	ldrb	r3, [r7, #23]
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f000 f832 	bl	8007c38 <USBD_Get_USB_Status>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007bd8:	7dbb      	ldrb	r3, [r7, #22]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3718      	adds	r7, #24
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b082      	sub	sp, #8
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	460b      	mov	r3, r1
 8007bec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007bf4:	78fa      	ldrb	r2, [r7, #3]
 8007bf6:	4611      	mov	r1, r2
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7fa ff72 	bl	8002ae2 <HAL_PCD_EP_GetRxCount>
 8007bfe:	4603      	mov	r3, r0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007c10:	4b03      	ldr	r3, [pc, #12]	; (8007c20 <USBD_static_malloc+0x18>)
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	370c      	adds	r7, #12
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	200013b4 	.word	0x200013b4

08007c24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]

}
 8007c2c:	bf00      	nop
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	4603      	mov	r3, r0
 8007c40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c42:	2300      	movs	r3, #0
 8007c44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007c46:	79fb      	ldrb	r3, [r7, #7]
 8007c48:	2b03      	cmp	r3, #3
 8007c4a:	d817      	bhi.n	8007c7c <USBD_Get_USB_Status+0x44>
 8007c4c:	a201      	add	r2, pc, #4	; (adr r2, 8007c54 <USBD_Get_USB_Status+0x1c>)
 8007c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c52:	bf00      	nop
 8007c54:	08007c65 	.word	0x08007c65
 8007c58:	08007c6b 	.word	0x08007c6b
 8007c5c:	08007c71 	.word	0x08007c71
 8007c60:	08007c77 	.word	0x08007c77
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007c64:	2300      	movs	r3, #0
 8007c66:	73fb      	strb	r3, [r7, #15]
    break;
 8007c68:	e00b      	b.n	8007c82 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	73fb      	strb	r3, [r7, #15]
    break;
 8007c6e:	e008      	b.n	8007c82 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c70:	2301      	movs	r3, #1
 8007c72:	73fb      	strb	r3, [r7, #15]
    break;
 8007c74:	e005      	b.n	8007c82 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c76:	2303      	movs	r3, #3
 8007c78:	73fb      	strb	r3, [r7, #15]
    break;
 8007c7a:	e002      	b.n	8007c82 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	73fb      	strb	r3, [r7, #15]
    break;
 8007c80:	bf00      	nop
  }
  return usb_status;
 8007c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3714      	adds	r7, #20
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <malloc>:
 8007c90:	4b02      	ldr	r3, [pc, #8]	; (8007c9c <malloc+0xc>)
 8007c92:	4601      	mov	r1, r0
 8007c94:	6818      	ldr	r0, [r3, #0]
 8007c96:	f000 b82b 	b.w	8007cf0 <_malloc_r>
 8007c9a:	bf00      	nop
 8007c9c:	20000148 	.word	0x20000148

08007ca0 <free>:
 8007ca0:	4b02      	ldr	r3, [pc, #8]	; (8007cac <free+0xc>)
 8007ca2:	4601      	mov	r1, r0
 8007ca4:	6818      	ldr	r0, [r3, #0]
 8007ca6:	f000 b8f3 	b.w	8007e90 <_free_r>
 8007caa:	bf00      	nop
 8007cac:	20000148 	.word	0x20000148

08007cb0 <sbrk_aligned>:
 8007cb0:	b570      	push	{r4, r5, r6, lr}
 8007cb2:	4e0e      	ldr	r6, [pc, #56]	; (8007cec <sbrk_aligned+0x3c>)
 8007cb4:	460c      	mov	r4, r1
 8007cb6:	6831      	ldr	r1, [r6, #0]
 8007cb8:	4605      	mov	r5, r0
 8007cba:	b911      	cbnz	r1, 8007cc2 <sbrk_aligned+0x12>
 8007cbc:	f000 f8ac 	bl	8007e18 <_sbrk_r>
 8007cc0:	6030      	str	r0, [r6, #0]
 8007cc2:	4621      	mov	r1, r4
 8007cc4:	4628      	mov	r0, r5
 8007cc6:	f000 f8a7 	bl	8007e18 <_sbrk_r>
 8007cca:	1c43      	adds	r3, r0, #1
 8007ccc:	d00a      	beq.n	8007ce4 <sbrk_aligned+0x34>
 8007cce:	1cc4      	adds	r4, r0, #3
 8007cd0:	f024 0403 	bic.w	r4, r4, #3
 8007cd4:	42a0      	cmp	r0, r4
 8007cd6:	d007      	beq.n	8007ce8 <sbrk_aligned+0x38>
 8007cd8:	1a21      	subs	r1, r4, r0
 8007cda:	4628      	mov	r0, r5
 8007cdc:	f000 f89c 	bl	8007e18 <_sbrk_r>
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	d101      	bne.n	8007ce8 <sbrk_aligned+0x38>
 8007ce4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007ce8:	4620      	mov	r0, r4
 8007cea:	bd70      	pop	{r4, r5, r6, pc}
 8007cec:	200015d8 	.word	0x200015d8

08007cf0 <_malloc_r>:
 8007cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cf4:	1ccd      	adds	r5, r1, #3
 8007cf6:	f025 0503 	bic.w	r5, r5, #3
 8007cfa:	3508      	adds	r5, #8
 8007cfc:	2d0c      	cmp	r5, #12
 8007cfe:	bf38      	it	cc
 8007d00:	250c      	movcc	r5, #12
 8007d02:	2d00      	cmp	r5, #0
 8007d04:	4607      	mov	r7, r0
 8007d06:	db01      	blt.n	8007d0c <_malloc_r+0x1c>
 8007d08:	42a9      	cmp	r1, r5
 8007d0a:	d905      	bls.n	8007d18 <_malloc_r+0x28>
 8007d0c:	230c      	movs	r3, #12
 8007d0e:	603b      	str	r3, [r7, #0]
 8007d10:	2600      	movs	r6, #0
 8007d12:	4630      	mov	r0, r6
 8007d14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d18:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007dec <_malloc_r+0xfc>
 8007d1c:	f000 f868 	bl	8007df0 <__malloc_lock>
 8007d20:	f8d8 3000 	ldr.w	r3, [r8]
 8007d24:	461c      	mov	r4, r3
 8007d26:	bb5c      	cbnz	r4, 8007d80 <_malloc_r+0x90>
 8007d28:	4629      	mov	r1, r5
 8007d2a:	4638      	mov	r0, r7
 8007d2c:	f7ff ffc0 	bl	8007cb0 <sbrk_aligned>
 8007d30:	1c43      	adds	r3, r0, #1
 8007d32:	4604      	mov	r4, r0
 8007d34:	d155      	bne.n	8007de2 <_malloc_r+0xf2>
 8007d36:	f8d8 4000 	ldr.w	r4, [r8]
 8007d3a:	4626      	mov	r6, r4
 8007d3c:	2e00      	cmp	r6, #0
 8007d3e:	d145      	bne.n	8007dcc <_malloc_r+0xdc>
 8007d40:	2c00      	cmp	r4, #0
 8007d42:	d048      	beq.n	8007dd6 <_malloc_r+0xe6>
 8007d44:	6823      	ldr	r3, [r4, #0]
 8007d46:	4631      	mov	r1, r6
 8007d48:	4638      	mov	r0, r7
 8007d4a:	eb04 0903 	add.w	r9, r4, r3
 8007d4e:	f000 f863 	bl	8007e18 <_sbrk_r>
 8007d52:	4581      	cmp	r9, r0
 8007d54:	d13f      	bne.n	8007dd6 <_malloc_r+0xe6>
 8007d56:	6821      	ldr	r1, [r4, #0]
 8007d58:	1a6d      	subs	r5, r5, r1
 8007d5a:	4629      	mov	r1, r5
 8007d5c:	4638      	mov	r0, r7
 8007d5e:	f7ff ffa7 	bl	8007cb0 <sbrk_aligned>
 8007d62:	3001      	adds	r0, #1
 8007d64:	d037      	beq.n	8007dd6 <_malloc_r+0xe6>
 8007d66:	6823      	ldr	r3, [r4, #0]
 8007d68:	442b      	add	r3, r5
 8007d6a:	6023      	str	r3, [r4, #0]
 8007d6c:	f8d8 3000 	ldr.w	r3, [r8]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d038      	beq.n	8007de6 <_malloc_r+0xf6>
 8007d74:	685a      	ldr	r2, [r3, #4]
 8007d76:	42a2      	cmp	r2, r4
 8007d78:	d12b      	bne.n	8007dd2 <_malloc_r+0xe2>
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	605a      	str	r2, [r3, #4]
 8007d7e:	e00f      	b.n	8007da0 <_malloc_r+0xb0>
 8007d80:	6822      	ldr	r2, [r4, #0]
 8007d82:	1b52      	subs	r2, r2, r5
 8007d84:	d41f      	bmi.n	8007dc6 <_malloc_r+0xd6>
 8007d86:	2a0b      	cmp	r2, #11
 8007d88:	d917      	bls.n	8007dba <_malloc_r+0xca>
 8007d8a:	1961      	adds	r1, r4, r5
 8007d8c:	42a3      	cmp	r3, r4
 8007d8e:	6025      	str	r5, [r4, #0]
 8007d90:	bf18      	it	ne
 8007d92:	6059      	strne	r1, [r3, #4]
 8007d94:	6863      	ldr	r3, [r4, #4]
 8007d96:	bf08      	it	eq
 8007d98:	f8c8 1000 	streq.w	r1, [r8]
 8007d9c:	5162      	str	r2, [r4, r5]
 8007d9e:	604b      	str	r3, [r1, #4]
 8007da0:	4638      	mov	r0, r7
 8007da2:	f104 060b 	add.w	r6, r4, #11
 8007da6:	f000 f829 	bl	8007dfc <__malloc_unlock>
 8007daa:	f026 0607 	bic.w	r6, r6, #7
 8007dae:	1d23      	adds	r3, r4, #4
 8007db0:	1af2      	subs	r2, r6, r3
 8007db2:	d0ae      	beq.n	8007d12 <_malloc_r+0x22>
 8007db4:	1b9b      	subs	r3, r3, r6
 8007db6:	50a3      	str	r3, [r4, r2]
 8007db8:	e7ab      	b.n	8007d12 <_malloc_r+0x22>
 8007dba:	42a3      	cmp	r3, r4
 8007dbc:	6862      	ldr	r2, [r4, #4]
 8007dbe:	d1dd      	bne.n	8007d7c <_malloc_r+0x8c>
 8007dc0:	f8c8 2000 	str.w	r2, [r8]
 8007dc4:	e7ec      	b.n	8007da0 <_malloc_r+0xb0>
 8007dc6:	4623      	mov	r3, r4
 8007dc8:	6864      	ldr	r4, [r4, #4]
 8007dca:	e7ac      	b.n	8007d26 <_malloc_r+0x36>
 8007dcc:	4634      	mov	r4, r6
 8007dce:	6876      	ldr	r6, [r6, #4]
 8007dd0:	e7b4      	b.n	8007d3c <_malloc_r+0x4c>
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	e7cc      	b.n	8007d70 <_malloc_r+0x80>
 8007dd6:	230c      	movs	r3, #12
 8007dd8:	603b      	str	r3, [r7, #0]
 8007dda:	4638      	mov	r0, r7
 8007ddc:	f000 f80e 	bl	8007dfc <__malloc_unlock>
 8007de0:	e797      	b.n	8007d12 <_malloc_r+0x22>
 8007de2:	6025      	str	r5, [r4, #0]
 8007de4:	e7dc      	b.n	8007da0 <_malloc_r+0xb0>
 8007de6:	605b      	str	r3, [r3, #4]
 8007de8:	deff      	udf	#255	; 0xff
 8007dea:	bf00      	nop
 8007dec:	200015d4 	.word	0x200015d4

08007df0 <__malloc_lock>:
 8007df0:	4801      	ldr	r0, [pc, #4]	; (8007df8 <__malloc_lock+0x8>)
 8007df2:	f000 b84b 	b.w	8007e8c <__retarget_lock_acquire_recursive>
 8007df6:	bf00      	nop
 8007df8:	20001718 	.word	0x20001718

08007dfc <__malloc_unlock>:
 8007dfc:	4801      	ldr	r0, [pc, #4]	; (8007e04 <__malloc_unlock+0x8>)
 8007dfe:	f000 b846 	b.w	8007e8e <__retarget_lock_release_recursive>
 8007e02:	bf00      	nop
 8007e04:	20001718 	.word	0x20001718

08007e08 <memset>:
 8007e08:	4402      	add	r2, r0
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d100      	bne.n	8007e12 <memset+0xa>
 8007e10:	4770      	bx	lr
 8007e12:	f803 1b01 	strb.w	r1, [r3], #1
 8007e16:	e7f9      	b.n	8007e0c <memset+0x4>

08007e18 <_sbrk_r>:
 8007e18:	b538      	push	{r3, r4, r5, lr}
 8007e1a:	4d06      	ldr	r5, [pc, #24]	; (8007e34 <_sbrk_r+0x1c>)
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	4604      	mov	r4, r0
 8007e20:	4608      	mov	r0, r1
 8007e22:	602b      	str	r3, [r5, #0]
 8007e24:	f7f8 fcd6 	bl	80007d4 <_sbrk>
 8007e28:	1c43      	adds	r3, r0, #1
 8007e2a:	d102      	bne.n	8007e32 <_sbrk_r+0x1a>
 8007e2c:	682b      	ldr	r3, [r5, #0]
 8007e2e:	b103      	cbz	r3, 8007e32 <_sbrk_r+0x1a>
 8007e30:	6023      	str	r3, [r4, #0]
 8007e32:	bd38      	pop	{r3, r4, r5, pc}
 8007e34:	20001714 	.word	0x20001714

08007e38 <__errno>:
 8007e38:	4b01      	ldr	r3, [pc, #4]	; (8007e40 <__errno+0x8>)
 8007e3a:	6818      	ldr	r0, [r3, #0]
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	20000148 	.word	0x20000148

08007e44 <__libc_init_array>:
 8007e44:	b570      	push	{r4, r5, r6, lr}
 8007e46:	4d0d      	ldr	r5, [pc, #52]	; (8007e7c <__libc_init_array+0x38>)
 8007e48:	4c0d      	ldr	r4, [pc, #52]	; (8007e80 <__libc_init_array+0x3c>)
 8007e4a:	1b64      	subs	r4, r4, r5
 8007e4c:	10a4      	asrs	r4, r4, #2
 8007e4e:	2600      	movs	r6, #0
 8007e50:	42a6      	cmp	r6, r4
 8007e52:	d109      	bne.n	8007e68 <__libc_init_array+0x24>
 8007e54:	4d0b      	ldr	r5, [pc, #44]	; (8007e84 <__libc_init_array+0x40>)
 8007e56:	4c0c      	ldr	r4, [pc, #48]	; (8007e88 <__libc_init_array+0x44>)
 8007e58:	f000 f866 	bl	8007f28 <_init>
 8007e5c:	1b64      	subs	r4, r4, r5
 8007e5e:	10a4      	asrs	r4, r4, #2
 8007e60:	2600      	movs	r6, #0
 8007e62:	42a6      	cmp	r6, r4
 8007e64:	d105      	bne.n	8007e72 <__libc_init_array+0x2e>
 8007e66:	bd70      	pop	{r4, r5, r6, pc}
 8007e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e6c:	4798      	blx	r3
 8007e6e:	3601      	adds	r6, #1
 8007e70:	e7ee      	b.n	8007e50 <__libc_init_array+0xc>
 8007e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e76:	4798      	blx	r3
 8007e78:	3601      	adds	r6, #1
 8007e7a:	e7f2      	b.n	8007e62 <__libc_init_array+0x1e>
 8007e7c:	08007fd0 	.word	0x08007fd0
 8007e80:	08007fd0 	.word	0x08007fd0
 8007e84:	08007fd0 	.word	0x08007fd0
 8007e88:	08007fd4 	.word	0x08007fd4

08007e8c <__retarget_lock_acquire_recursive>:
 8007e8c:	4770      	bx	lr

08007e8e <__retarget_lock_release_recursive>:
 8007e8e:	4770      	bx	lr

08007e90 <_free_r>:
 8007e90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e92:	2900      	cmp	r1, #0
 8007e94:	d044      	beq.n	8007f20 <_free_r+0x90>
 8007e96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e9a:	9001      	str	r0, [sp, #4]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f1a1 0404 	sub.w	r4, r1, #4
 8007ea2:	bfb8      	it	lt
 8007ea4:	18e4      	addlt	r4, r4, r3
 8007ea6:	f7ff ffa3 	bl	8007df0 <__malloc_lock>
 8007eaa:	4a1e      	ldr	r2, [pc, #120]	; (8007f24 <_free_r+0x94>)
 8007eac:	9801      	ldr	r0, [sp, #4]
 8007eae:	6813      	ldr	r3, [r2, #0]
 8007eb0:	b933      	cbnz	r3, 8007ec0 <_free_r+0x30>
 8007eb2:	6063      	str	r3, [r4, #4]
 8007eb4:	6014      	str	r4, [r2, #0]
 8007eb6:	b003      	add	sp, #12
 8007eb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ebc:	f7ff bf9e 	b.w	8007dfc <__malloc_unlock>
 8007ec0:	42a3      	cmp	r3, r4
 8007ec2:	d908      	bls.n	8007ed6 <_free_r+0x46>
 8007ec4:	6825      	ldr	r5, [r4, #0]
 8007ec6:	1961      	adds	r1, r4, r5
 8007ec8:	428b      	cmp	r3, r1
 8007eca:	bf01      	itttt	eq
 8007ecc:	6819      	ldreq	r1, [r3, #0]
 8007ece:	685b      	ldreq	r3, [r3, #4]
 8007ed0:	1949      	addeq	r1, r1, r5
 8007ed2:	6021      	streq	r1, [r4, #0]
 8007ed4:	e7ed      	b.n	8007eb2 <_free_r+0x22>
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	b10b      	cbz	r3, 8007ee0 <_free_r+0x50>
 8007edc:	42a3      	cmp	r3, r4
 8007ede:	d9fa      	bls.n	8007ed6 <_free_r+0x46>
 8007ee0:	6811      	ldr	r1, [r2, #0]
 8007ee2:	1855      	adds	r5, r2, r1
 8007ee4:	42a5      	cmp	r5, r4
 8007ee6:	d10b      	bne.n	8007f00 <_free_r+0x70>
 8007ee8:	6824      	ldr	r4, [r4, #0]
 8007eea:	4421      	add	r1, r4
 8007eec:	1854      	adds	r4, r2, r1
 8007eee:	42a3      	cmp	r3, r4
 8007ef0:	6011      	str	r1, [r2, #0]
 8007ef2:	d1e0      	bne.n	8007eb6 <_free_r+0x26>
 8007ef4:	681c      	ldr	r4, [r3, #0]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	6053      	str	r3, [r2, #4]
 8007efa:	440c      	add	r4, r1
 8007efc:	6014      	str	r4, [r2, #0]
 8007efe:	e7da      	b.n	8007eb6 <_free_r+0x26>
 8007f00:	d902      	bls.n	8007f08 <_free_r+0x78>
 8007f02:	230c      	movs	r3, #12
 8007f04:	6003      	str	r3, [r0, #0]
 8007f06:	e7d6      	b.n	8007eb6 <_free_r+0x26>
 8007f08:	6825      	ldr	r5, [r4, #0]
 8007f0a:	1961      	adds	r1, r4, r5
 8007f0c:	428b      	cmp	r3, r1
 8007f0e:	bf04      	itt	eq
 8007f10:	6819      	ldreq	r1, [r3, #0]
 8007f12:	685b      	ldreq	r3, [r3, #4]
 8007f14:	6063      	str	r3, [r4, #4]
 8007f16:	bf04      	itt	eq
 8007f18:	1949      	addeq	r1, r1, r5
 8007f1a:	6021      	streq	r1, [r4, #0]
 8007f1c:	6054      	str	r4, [r2, #4]
 8007f1e:	e7ca      	b.n	8007eb6 <_free_r+0x26>
 8007f20:	b003      	add	sp, #12
 8007f22:	bd30      	pop	{r4, r5, pc}
 8007f24:	200015d4 	.word	0x200015d4

08007f28 <_init>:
 8007f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f2a:	bf00      	nop
 8007f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f2e:	bc08      	pop	{r3}
 8007f30:	469e      	mov	lr, r3
 8007f32:	4770      	bx	lr

08007f34 <_fini>:
 8007f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f36:	bf00      	nop
 8007f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f3a:	bc08      	pop	{r3}
 8007f3c:	469e      	mov	lr, r3
 8007f3e:	4770      	bx	lr
