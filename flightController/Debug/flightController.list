
flightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009788  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08009928  08009928  00019928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a60  08009a60  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08009a60  08009a60  00019a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a68  08009a68  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a68  08009a68  00019a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a6c  08009a6c  00019a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08009a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001674  2000014c  08009bbc  0002014c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017c0  08009bbc  000217c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015b14  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038d2  00000000  00000000  00035cd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001170  00000000  00000000  000395a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d58  00000000  00000000  0003a718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019a94  00000000  00000000  0003b470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001be85  00000000  00000000  00054f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cff9  00000000  00000000  00070d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004cd0  00000000  00000000  000fdd84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00102a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000014c 	.word	0x2000014c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009910 	.word	0x08009910

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000150 	.word	0x20000150
 80001dc:	08009910 	.word	0x08009910

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <flightController_App>:
extern DMA_HandleTypeDef hdma_usart2_rx;

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
void flightController_App(void) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b0b2      	sub	sp, #200	; 0xc8
 8000590:	af00      	add	r7, sp, #0
    //        CDC_Transmit_FS(str0, strlen((const char *)str0));
    //    }

    /* IMU Demo */
    MPU6050_HandleTypeDef_t * hmpu6050;
    hmpu6050 = MPU6050_Init(&hi2c1);
 8000592:	486a      	ldr	r0, [pc, #424]	; (800073c <flightController_App+0x1b0>)
 8000594:	f000 fcde 	bl	8000f54 <MPU6050_Init>
 8000598:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
    gyroscopeValues_t * gyroscopeValues;
    accelerometerValues_t * accelerometerValues;
    magnetometerValues_t * magnetometerValues;

    while (1) {
        HAL_Delay(1000);
 800059c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a0:	f000 fe6c 	bl	800127c <HAL_Delay>

        MPU6050_ReadGyroscope(hmpu6050, gyroscopeValues);
 80005a4:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80005a8:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80005ac:	f000 fd06 	bl	8000fbc <MPU6050_ReadGyroscope>
        sprintf((char *)str1, (const char *)"Value Gyro X: %d\r\n", gyroscopeValues->gyroscopeX);
 80005b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80005b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005b8:	461a      	mov	r2, r3
 80005ba:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80005be:	4960      	ldr	r1, [pc, #384]	; (8000740 <flightController_App+0x1b4>)
 80005c0:	4618      	mov	r0, r3
 80005c2:	f008 fdad 	bl	8009120 <siprintf>
        CDC_Transmit_FS(str1, strlen((const char *)str1));
 80005c6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80005ca:	4618      	mov	r0, r3
 80005cc:	f7ff fe08 	bl	80001e0 <strlen>
 80005d0:	4603      	mov	r3, r0
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80005d8:	4611      	mov	r1, r2
 80005da:	4618      	mov	r0, r3
 80005dc:	f008 f892 	bl	8008704 <CDC_Transmit_FS>
        HAL_Delay(10);
 80005e0:	200a      	movs	r0, #10
 80005e2:	f000 fe4b 	bl	800127c <HAL_Delay>
        sprintf((char *)str1, (const char *)"Value Gyro Y: %d\r\n", gyroscopeValues->gyroscopeY);
 80005e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80005ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80005ee:	461a      	mov	r2, r3
 80005f0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80005f4:	4953      	ldr	r1, [pc, #332]	; (8000744 <flightController_App+0x1b8>)
 80005f6:	4618      	mov	r0, r3
 80005f8:	f008 fd92 	bl	8009120 <siprintf>
        CDC_Transmit_FS(str1, strlen((const char *)str1));
 80005fc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff fded 	bl	80001e0 <strlen>
 8000606:	4603      	mov	r3, r0
 8000608:	b29a      	uxth	r2, r3
 800060a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800060e:	4611      	mov	r1, r2
 8000610:	4618      	mov	r0, r3
 8000612:	f008 f877 	bl	8008704 <CDC_Transmit_FS>
        HAL_Delay(10);
 8000616:	200a      	movs	r0, #10
 8000618:	f000 fe30 	bl	800127c <HAL_Delay>
        sprintf((char *)str1, (const char *)"Value Gyro Z: %d\r\n\n\n\n", gyroscopeValues->gyroscopeZ);
 800061c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000620:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000624:	461a      	mov	r2, r3
 8000626:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800062a:	4947      	ldr	r1, [pc, #284]	; (8000748 <flightController_App+0x1bc>)
 800062c:	4618      	mov	r0, r3
 800062e:	f008 fd77 	bl	8009120 <siprintf>
        CDC_Transmit_FS(str1, strlen((const char *)str1));
 8000632:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff fdd2 	bl	80001e0 <strlen>
 800063c:	4603      	mov	r3, r0
 800063e:	b29a      	uxth	r2, r3
 8000640:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000644:	4611      	mov	r1, r2
 8000646:	4618      	mov	r0, r3
 8000648:	f008 f85c 	bl	8008704 <CDC_Transmit_FS>
        HAL_Delay(1000);
 800064c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000650:	f000 fe14 	bl	800127c <HAL_Delay>

        MPU6050_ReadAccelerometer(hmpu6050, accelerometerValues);
 8000654:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8000658:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800065c:	f000 fd10 	bl	8001080 <MPU6050_ReadAccelerometer>
        sprintf((char *)str2, (const char *)"Value Accel X: %d\r\n", accelerometerValues->accelerometerX);
 8000660:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000664:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000668:	461a      	mov	r2, r3
 800066a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800066e:	4937      	ldr	r1, [pc, #220]	; (800074c <flightController_App+0x1c0>)
 8000670:	4618      	mov	r0, r3
 8000672:	f008 fd55 	bl	8009120 <siprintf>
        CDC_Transmit_FS(str2, strlen((const char *)str2));
 8000676:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff fdb0 	bl	80001e0 <strlen>
 8000680:	4603      	mov	r3, r0
 8000682:	b29a      	uxth	r2, r3
 8000684:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000688:	4611      	mov	r1, r2
 800068a:	4618      	mov	r0, r3
 800068c:	f008 f83a 	bl	8008704 <CDC_Transmit_FS>
        HAL_Delay(10);
 8000690:	200a      	movs	r0, #10
 8000692:	f000 fdf3 	bl	800127c <HAL_Delay>
        sprintf((char *)str2, (const char *)"Value Accel Y: %d\r\n", accelerometerValues->accelerometerY);
 8000696:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800069a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800069e:	461a      	mov	r2, r3
 80006a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80006a4:	492a      	ldr	r1, [pc, #168]	; (8000750 <flightController_App+0x1c4>)
 80006a6:	4618      	mov	r0, r3
 80006a8:	f008 fd3a 	bl	8009120 <siprintf>
        CDC_Transmit_FS(str2, strlen((const char *)str2));
 80006ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff fd95 	bl	80001e0 <strlen>
 80006b6:	4603      	mov	r3, r0
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80006be:	4611      	mov	r1, r2
 80006c0:	4618      	mov	r0, r3
 80006c2:	f008 f81f 	bl	8008704 <CDC_Transmit_FS>
        HAL_Delay(10);
 80006c6:	200a      	movs	r0, #10
 80006c8:	f000 fdd8 	bl	800127c <HAL_Delay>
        sprintf((char *)str2, (const char *)"Value Accel Z: %d\r\n\n\n\n", accelerometerValues->accelerometerZ);
 80006cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80006d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80006d4:	461a      	mov	r2, r3
 80006d6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80006da:	491e      	ldr	r1, [pc, #120]	; (8000754 <flightController_App+0x1c8>)
 80006dc:	4618      	mov	r0, r3
 80006de:	f008 fd1f 	bl	8009120 <siprintf>
        CDC_Transmit_FS(str2, strlen((const char *)str2));
 80006e2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff fd7a 	bl	80001e0 <strlen>
 80006ec:	4603      	mov	r3, r0
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80006f4:	4611      	mov	r1, r2
 80006f6:	4618      	mov	r0, r3
 80006f8:	f008 f804 	bl	8008704 <CDC_Transmit_FS>
        HAL_Delay(100);
 80006fc:	2064      	movs	r0, #100	; 0x64
 80006fe:	f000 fdbd 	bl	800127c <HAL_Delay>

        sprintf((char *)str3, (const char *)"Value Temperature: %d\r\n\n\n\n\n", MPU6050_ReadTemperatureSensor(hmpu6050));
 8000702:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8000706:	f000 fd1e 	bl	8001146 <MPU6050_ReadTemperatureSensor>
 800070a:	4603      	mov	r3, r0
 800070c:	461a      	mov	r2, r3
 800070e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000712:	4911      	ldr	r1, [pc, #68]	; (8000758 <flightController_App+0x1cc>)
 8000714:	4618      	mov	r0, r3
 8000716:	f008 fd03 	bl	8009120 <siprintf>
        CDC_Transmit_FS(str3, strlen((const char *)str3));
 800071a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff fd5e 	bl	80001e0 <strlen>
 8000724:	4603      	mov	r3, r0
 8000726:	b29a      	uxth	r2, r3
 8000728:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800072c:	4611      	mov	r1, r2
 800072e:	4618      	mov	r0, r3
 8000730:	f007 ffe8 	bl	8008704 <CDC_Transmit_FS>
        HAL_Delay(100);
 8000734:	2064      	movs	r0, #100	; 0x64
 8000736:	f000 fda1 	bl	800127c <HAL_Delay>
        HAL_Delay(1000);
 800073a:	e72f      	b.n	800059c <flightController_App+0x10>
 800073c:	20000168 	.word	0x20000168
 8000740:	08009928 	.word	0x08009928
 8000744:	0800993c 	.word	0x0800993c
 8000748:	08009950 	.word	0x08009950
 800074c:	08009968 	.word	0x08009968
 8000750:	0800997c 	.word	0x0800997c
 8000754:	08009990 	.word	0x08009990
 8000758:	080099a8 	.word	0x080099a8

0800075c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000760:	f000 fd1a 	bl	8001198 <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000764:	f000 f810 	bl	8000788 <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000768:	f000 f8ea 	bl	8000940 <MX_GPIO_Init>
    MX_DMA_Init();
 800076c:	f000 f8ce 	bl	800090c <MX_DMA_Init>
    MX_USB_DEVICE_Init();
 8000770:	f007 ff0a 	bl	8008588 <MX_USB_DEVICE_Init>
    MX_I2C1_Init();
 8000774:	f000 f872 	bl	800085c <MX_I2C1_Init>
    MX_USART2_UART_Init();
 8000778:	f000 f89e 	bl	80008b8 <MX_USART2_UART_Init>
    /* USER CODE BEGIN 2 */
    flightController_App();
 800077c:	f7ff ff06 	bl	800058c <flightController_App>
 8000780:	2300      	movs	r3, #0
    /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    /* USER CODE END 3 */
}
 8000782:	4618      	mov	r0, r3
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b094      	sub	sp, #80	; 0x50
 800078c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078e:	f107 0320 	add.w	r3, r7, #32
 8000792:	2230      	movs	r2, #48	; 0x30
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f008 fce2 	bl	8009160 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	4b28      	ldr	r3, [pc, #160]	; (8000854 <SystemClock_Config+0xcc>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	4a27      	ldr	r2, [pc, #156]	; (8000854 <SystemClock_Config+0xcc>)
 80007b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ba:	6413      	str	r3, [r2, #64]	; 0x40
 80007bc:	4b25      	ldr	r3, [pc, #148]	; (8000854 <SystemClock_Config+0xcc>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007c8:	2300      	movs	r3, #0
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	4b22      	ldr	r3, [pc, #136]	; (8000858 <SystemClock_Config+0xd0>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007d4:	4a20      	ldr	r2, [pc, #128]	; (8000858 <SystemClock_Config+0xd0>)
 80007d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <SystemClock_Config+0xd0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e8:	2301      	movs	r3, #1
 80007ea:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f2:	2302      	movs	r3, #2
 80007f4:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 15;
 80007fc:	230f      	movs	r3, #15
 80007fe:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 144;
 8000800:	2390      	movs	r3, #144	; 0x90
 8000802:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000804:	2304      	movs	r3, #4
 8000806:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 5;
 8000808:	2305      	movs	r3, #5
 800080a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800080c:	f107 0320 	add.w	r3, r7, #32
 8000810:	4618      	mov	r0, r3
 8000812:	f003 fb89 	bl	8003f28 <HAL_RCC_OscConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x98>
        Error_Handler();
 800081c:	f000 f8c6 	bl	80009ac <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType =
 8000820:	230f      	movs	r3, #15
 8000822:	60fb      	str	r3, [r7, #12]
        RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000824:	2302      	movs	r3, #2
 8000826:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800082c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000830:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	2101      	movs	r1, #1
 800083c:	4618      	mov	r0, r3
 800083e:	f003 fdeb 	bl	8004418 <HAL_RCC_ClockConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0xc4>
        Error_Handler();
 8000848:	f000 f8b0 	bl	80009ac <Error_Handler>
    }
}
 800084c:	bf00      	nop
 800084e:	3750      	adds	r7, #80	; 0x50
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40023800 	.word	0x40023800
 8000858:	40007000 	.word	0x40007000

0800085c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN I2C1_Init 0 */
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */
    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <MX_I2C1_Init+0x50>)
 8000862:	4a13      	ldr	r2, [pc, #76]	; (80008b0 <MX_I2C1_Init+0x54>)
 8000864:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 400000;
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_I2C1_Init+0x50>)
 8000868:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <MX_I2C1_Init+0x58>)
 800086a:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_I2C1_Init+0x50>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_I2C1_Init+0x50>)
 8000874:	2200      	movs	r2, #0
 8000876:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_I2C1_Init+0x50>)
 800087a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800087e:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <MX_I2C1_Init+0x50>)
 8000882:	2200      	movs	r2, #0
 8000884:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_I2C1_Init+0x50>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <MX_I2C1_Init+0x50>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_I2C1_Init+0x50>)
 8000894:	2200      	movs	r2, #0
 8000896:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000898:	4804      	ldr	r0, [pc, #16]	; (80008ac <MX_I2C1_Init+0x50>)
 800089a:	f001 f909 	bl	8001ab0 <HAL_I2C_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_I2C1_Init+0x4c>
        Error_Handler();
 80008a4:	f000 f882 	bl	80009ac <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */
    /* USER CODE END I2C1_Init 2 */
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000168 	.word	0x20000168
 80008b0:	40005400 	.word	0x40005400
 80008b4:	00061a80 	.word	0x00061a80

080008b8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART2_Init 0 */
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */
    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008be:	4a12      	ldr	r2, [pc, #72]	; (8000908 <MX_USART2_UART_Init+0x50>)
 80008c0:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c8:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_RX;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008de:	2204      	movs	r2, #4
 80008e0:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008f0:	f003 ff72 	bl	80047d8 <HAL_UART_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART2_UART_Init+0x46>
        Error_Handler();
 80008fa:	f000 f857 	bl	80009ac <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */
    /* USER CODE END USART2_Init 2 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200001bc 	.word	0x200001bc
 8000908:	40004400 	.word	0x40004400

0800090c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_DMA_Init+0x30>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a08      	ldr	r2, [pc, #32]	; (800093c <MX_DMA_Init+0x30>)
 800091c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_DMA_Init+0x30>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800

08000940 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <MX_GPIO_Init+0x68>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a16      	ldr	r2, [pc, #88]	; (80009a8 <MX_GPIO_Init+0x68>)
 8000950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_GPIO_Init+0x68>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_GPIO_Init+0x68>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a0f      	ldr	r2, [pc, #60]	; (80009a8 <MX_GPIO_Init+0x68>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <MX_GPIO_Init+0x68>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_GPIO_Init+0x68>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <MX_GPIO_Init+0x68>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_GPIO_Init+0x68>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 800099a:	bf00      	nop
 800099c:	3714      	adds	r7, #20
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800

080009ac <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* USER CODE END Error_Handler_Debug */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
	...

080009bc <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <HAL_MspInit+0x4c>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	4a0f      	ldr	r2, [pc, #60]	; (8000a08 <HAL_MspInit+0x4c>)
 80009cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d0:	6453      	str	r3, [r2, #68]	; 0x44
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <HAL_MspInit+0x4c>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <HAL_MspInit+0x4c>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <HAL_MspInit+0x4c>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ec:	6413      	str	r3, [r2, #64]	; 0x40
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_MspInit+0x4c>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]
    /* System interrupt init*/

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800

08000a0c <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef * hi2c) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
    if (hi2c->Instance == I2C1) {
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a19      	ldr	r2, [pc, #100]	; (8000a90 <HAL_I2C_MspInit+0x84>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d12b      	bne.n	8000a86 <HAL_I2C_MspInit+0x7a>
        /* USER CODE BEGIN I2C1_MspInit 0 */

        /* USER CODE END I2C1_MspInit 0 */

        __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <HAL_I2C_MspInit+0x88>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a17      	ldr	r2, [pc, #92]	; (8000a94 <HAL_I2C_MspInit+0x88>)
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <HAL_I2C_MspInit+0x88>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]
        /**I2C1 GPIO Configuration
        PB6     ------> I2C1_SCL
        PB7     ------> I2C1_SDA
        */
        GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8000a4a:	23c0      	movs	r3, #192	; 0xc0
 8000a4c:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a4e:	2312      	movs	r3, #18
 8000a50:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a56:	2303      	movs	r3, #3
 8000a58:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a5a:	2304      	movs	r3, #4
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	480c      	ldr	r0, [pc, #48]	; (8000a98 <HAL_I2C_MspInit+0x8c>)
 8000a66:	f000 fe9f 	bl	80017a8 <HAL_GPIO_Init>

        /* Peripheral clock enable */
        __HAL_RCC_I2C1_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <HAL_I2C_MspInit+0x88>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	4a08      	ldr	r2, [pc, #32]	; (8000a94 <HAL_I2C_MspInit+0x88>)
 8000a74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a78:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_I2C_MspInit+0x88>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
        /* USER CODE BEGIN I2C1_MspInit 1 */

        /* USER CODE END I2C1_MspInit 1 */
    }
}
 8000a86:	bf00      	nop
 8000a88:	3728      	adds	r7, #40	; 0x28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40005400 	.word	0x40005400
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020400 	.word	0x40020400

08000a9c <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef * huart) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
    if (huart->Instance == USART2) {
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a30      	ldr	r2, [pc, #192]	; (8000b7c <HAL_UART_MspInit+0xe0>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d15a      	bne.n	8000b74 <HAL_UART_MspInit+0xd8>
        /* USER CODE BEGIN USART2_MspInit 0 */

        /* USER CODE END USART2_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_USART2_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	4b2f      	ldr	r3, [pc, #188]	; (8000b80 <HAL_UART_MspInit+0xe4>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	4a2e      	ldr	r2, [pc, #184]	; (8000b80 <HAL_UART_MspInit+0xe4>)
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	4b2c      	ldr	r3, [pc, #176]	; (8000b80 <HAL_UART_MspInit+0xe4>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	4b28      	ldr	r3, [pc, #160]	; (8000b80 <HAL_UART_MspInit+0xe4>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a27      	ldr	r2, [pc, #156]	; (8000b80 <HAL_UART_MspInit+0xe4>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b25      	ldr	r3, [pc, #148]	; (8000b80 <HAL_UART_MspInit+0xe4>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
        /**USART2 GPIO Configuration
        PA2     ------> USART2_TX
        PA3     ------> USART2_RX
        */
        GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8000af6:	230c      	movs	r3, #12
 8000af8:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b02:	2303      	movs	r3, #3
 8000b04:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b06:	2307      	movs	r3, #7
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	481c      	ldr	r0, [pc, #112]	; (8000b84 <HAL_UART_MspInit+0xe8>)
 8000b12:	f000 fe49 	bl	80017a8 <HAL_GPIO_Init>

        /* USART2 DMA Init */
        /* USART2_RX Init */
        hdma_usart2_rx.Instance = DMA1_Stream5;
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <HAL_UART_MspInit+0xec>)
 8000b18:	4a1c      	ldr	r2, [pc, #112]	; (8000b8c <HAL_UART_MspInit+0xf0>)
 8000b1a:	601a      	str	r2, [r3, #0]
        hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <HAL_UART_MspInit+0xec>)
 8000b1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b22:	605a      	str	r2, [r3, #4]
        hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b24:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <HAL_UART_MspInit+0xec>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
        hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <HAL_UART_MspInit+0xec>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	60da      	str	r2, [r3, #12]
        hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <HAL_UART_MspInit+0xec>)
 8000b32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b36:	611a      	str	r2, [r3, #16]
        hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b38:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <HAL_UART_MspInit+0xec>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	615a      	str	r2, [r3, #20]
        hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b3e:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_UART_MspInit+0xec>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
        hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000b44:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <HAL_UART_MspInit+0xec>)
 8000b46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b4a:	61da      	str	r2, [r3, #28]
        hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <HAL_UART_MspInit+0xec>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	621a      	str	r2, [r3, #32]
        hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b52:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <HAL_UART_MspInit+0xec>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	625a      	str	r2, [r3, #36]	; 0x24
        if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 8000b58:	480b      	ldr	r0, [pc, #44]	; (8000b88 <HAL_UART_MspInit+0xec>)
 8000b5a:	f000 fcc5 	bl	80014e8 <HAL_DMA_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <HAL_UART_MspInit+0xcc>
            Error_Handler();
 8000b64:	f7ff ff22 	bl	80009ac <Error_Handler>
        }

        __HAL_LINKDMA(huart, hdmarx, hdma_usart2_rx);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <HAL_UART_MspInit+0xec>)
 8000b6c:	639a      	str	r2, [r3, #56]	; 0x38
 8000b6e:	4a06      	ldr	r2, [pc, #24]	; (8000b88 <HAL_UART_MspInit+0xec>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6393      	str	r3, [r2, #56]	; 0x38

        /* USER CODE BEGIN USART2_MspInit 1 */

        /* USER CODE END USART2_MspInit 1 */
    }
}
 8000b74:	bf00      	nop
 8000b76:	3728      	adds	r7, #40	; 0x28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40004400 	.word	0x40004400
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020000 	.word	0x40020000
 8000b88:	20000200 	.word	0x20000200
 8000b8c:	40026088 	.word	0x40026088

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8000b94:	e7fe      	b.n	8000b94 <NMI_Handler+0x4>

08000b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <UsageFault_Handler+0x4>

08000bae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bdc:	f000 fb2e 	bl	800123c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <OTG_FS_IRQHandler+0x10>)
 8000bea:	f002 f870 	bl	8002cce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000f4c 	.word	0x20000f4c

08000bf8 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c00:	4a14      	ldr	r2, [pc, #80]	; (8000c54 <_sbrk+0x5c>)
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <_sbrk+0x60>)
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 8000c0c:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d102      	bne.n	8000c1a <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <_sbrk+0x64>)
 8000c16:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <_sbrk+0x68>)
 8000c18:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <_sbrk+0x64>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d207      	bcs.n	8000c38 <_sbrk+0x40>
        errno = ENOMEM;
 8000c28:	f008 fab2 	bl	8009190 <__errno>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	220c      	movs	r2, #12
 8000c30:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c36:	e009      	b.n	8000c4c <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 8000c3e:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <_sbrk+0x64>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <_sbrk+0x64>)
 8000c48:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20010000 	.word	0x20010000
 8000c58:	00000400 	.word	0x00000400
 8000c5c:	20000260 	.word	0x20000260
 8000c60:	200017c0 	.word	0x200017c0

08000c64 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <SystemInit+0x20>)
 8000c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <SystemInit+0x20>)
 8000c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c8c:	480d      	ldr	r0, [pc, #52]	; (8000cc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c8e:	490e      	ldr	r1, [pc, #56]	; (8000cc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c90:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c94:	e002      	b.n	8000c9c <LoopCopyDataInit>

08000c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9a:	3304      	adds	r3, #4

08000c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca0:	d3f9      	bcc.n	8000c96 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca2:	4a0b      	ldr	r2, [pc, #44]	; (8000cd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ca4:	4c0b      	ldr	r4, [pc, #44]	; (8000cd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca8:	e001      	b.n	8000cae <LoopFillZerobss>

08000caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cac:	3204      	adds	r2, #4

08000cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb0:	d3fb      	bcc.n	8000caa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cb2:	f7ff ffd7 	bl	8000c64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cb6:	f008 fa71 	bl	800919c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cba:	f7ff fd4f 	bl	800075c <main>
  bx  lr
 8000cbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cc0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc8:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000ccc:	08009a70 	.word	0x08009a70
  ldr r2, =_sbss
 8000cd0:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000cd4:	200017c0 	.word	0x200017c0

08000cd8 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC_IRQHandler>

08000cda <I2C_Init>:
/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */

/* --- Public function implementation ---------------------------------------------------------- */
bool_t I2C_Init(MPU6050_HandleTypeDef_t * hmpu6050) {
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b086      	sub	sp, #24
 8000cde:	af02      	add	r7, sp, #8
 8000ce0:	6078      	str	r0, [r7, #4]

    uint8_t who_am_I_value;

    /* Check parameter */
    if (NULL == hmpu6050) {
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d101      	bne.n	8000cec <I2C_Init+0x12>
        return false;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	e010      	b.n	8000d0e <I2C_Init+0x34>
    }

    /* Read IMU device ID */
    I2C_Read(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_WHO_AM_I, &who_am_I_value, 1);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6858      	ldr	r0, [r3, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	7a19      	ldrb	r1, [r3, #8]
 8000cf4:	f107 030f 	add.w	r3, r7, #15
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	9200      	str	r2, [sp, #0]
 8000cfc:	2275      	movs	r2, #117	; 0x75
 8000cfe:	f000 f80a 	bl	8000d16 <I2C_Read>
    /* Check IMU device ID */
    if (who_am_I_value == MPU_6050_BIT_WHO_AM_I) {
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	2b68      	cmp	r3, #104	; 0x68
 8000d06:	d101      	bne.n	8000d0c <I2C_Init+0x32>
        /* Right IMU device ID */
        return true;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e000      	b.n	8000d0e <I2C_Init+0x34>
    } else {
        /* Wrong IMU device ID */
        return false;
 8000d0c:	2300      	movs	r3, #0
    }
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <I2C_Read>:

bool_t I2C_Read(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b088      	sub	sp, #32
 8000d1a:	af04      	add	r7, sp, #16
 8000d1c:	60f8      	str	r0, [r7, #12]
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	460b      	mov	r3, r1
 8000d22:	72fb      	strb	r3, [r7, #11]
 8000d24:	4613      	mov	r3, r2
 8000d26:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d101      	bne.n	8000d32 <I2C_Read+0x1c>
        return false;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e02b      	b.n	8000d8a <I2C_Read+0x74>
    }
    if (0 == address) {
 8000d32:	7afb      	ldrb	r3, [r7, #11]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d101      	bne.n	8000d3c <I2C_Read+0x26>
        return false;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	e026      	b.n	8000d8a <I2C_Read+0x74>
    }
    if (reg < MPU_6050_MIN_REG_ADDR || reg > MPU_6050_MAX_REG_ADDR) {
 8000d3c:	7abb      	ldrb	r3, [r7, #10]
 8000d3e:	2b75      	cmp	r3, #117	; 0x75
 8000d40:	d901      	bls.n	8000d46 <I2C_Read+0x30>
        return false;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e021      	b.n	8000d8a <I2C_Read+0x74>
    }
    if (NULL == data) {
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d101      	bne.n	8000d50 <I2C_Read+0x3a>
        return false;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	e01c      	b.n	8000d8a <I2C_Read+0x74>
    }
    if (dataSize < MPU_6050_MIN_DATA_SIZE || dataSize > MPU_6050_MAX_DATA_SIZE) {
 8000d50:	7e3b      	ldrb	r3, [r7, #24]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d002      	beq.n	8000d5c <I2C_Read+0x46>
 8000d56:	7e3b      	ldrb	r3, [r7, #24]
 8000d58:	2b0a      	cmp	r3, #10
 8000d5a:	d901      	bls.n	8000d60 <I2C_Read+0x4a>
        return false;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	e014      	b.n	8000d8a <I2C_Read+0x74>
    }

    /* Read IMU data by passing a data register */
    if (HAL_OK != HAL_I2C_Mem_Read(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, dataSize, MPU_6050_I2C_READ_TIMEOUT)) {
 8000d60:	7afb      	ldrb	r3, [r7, #11]
 8000d62:	b299      	uxth	r1, r3
 8000d64:	7abb      	ldrb	r3, [r7, #10]
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	7e3b      	ldrb	r3, [r7, #24]
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	2064      	movs	r0, #100	; 0x64
 8000d6e:	9002      	str	r0, [sp, #8]
 8000d70:	9301      	str	r3, [sp, #4]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	2301      	movs	r3, #1
 8000d78:	68f8      	ldr	r0, [r7, #12]
 8000d7a:	f001 f8d7 	bl	8001f2c <HAL_I2C_Mem_Read>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <I2C_Read+0x72>

        /* Data couldn't be read */
        return false;
 8000d84:	2300      	movs	r3, #0
 8000d86:	e000      	b.n	8000d8a <I2C_Read+0x74>
    } else {

        /* Data read successfully */
        return true;
 8000d88:	2301      	movs	r3, #1
    }
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <I2C_Write>:

bool_t I2C_Write(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data) {
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b088      	sub	sp, #32
 8000d96:	af04      	add	r7, sp, #16
 8000d98:	60f8      	str	r0, [r7, #12]
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	72fb      	strb	r3, [r7, #11]
 8000da0:	4613      	mov	r3, r2
 8000da2:	72bb      	strb	r3, [r7, #10]

    /* Check parameters */
    if (NULL == hi2c) {
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d101      	bne.n	8000dae <I2C_Write+0x1c>
        return false;
 8000daa:	2300      	movs	r3, #0
 8000dac:	e022      	b.n	8000df4 <I2C_Write+0x62>
    }
    if (0 == address) {
 8000dae:	7afb      	ldrb	r3, [r7, #11]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d101      	bne.n	8000db8 <I2C_Write+0x26>
        return false;
 8000db4:	2300      	movs	r3, #0
 8000db6:	e01d      	b.n	8000df4 <I2C_Write+0x62>
    }
    if (reg < MPU_6050_MIN_REG_ADDR || reg > MPU_6050_MAX_REG_ADDR) {
 8000db8:	7abb      	ldrb	r3, [r7, #10]
 8000dba:	2b75      	cmp	r3, #117	; 0x75
 8000dbc:	d901      	bls.n	8000dc2 <I2C_Write+0x30>
        return false;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e018      	b.n	8000df4 <I2C_Write+0x62>
    }
    if (NULL == data) {
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d101      	bne.n	8000dcc <I2C_Write+0x3a>
        return false;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	e013      	b.n	8000df4 <I2C_Write+0x62>
    }

    /* Write to IMU */
    if (HAL_OK != HAL_I2C_Mem_Write(hi2c, address, reg, MPU_6050_ADDR_SIZE, data, sizeof(*data), MPU_6050_I2C_WRITE_TIMEOUT)) {
 8000dcc:	7afb      	ldrb	r3, [r7, #11]
 8000dce:	b299      	uxth	r1, r3
 8000dd0:	7abb      	ldrb	r3, [r7, #10]
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	2364      	movs	r3, #100	; 0x64
 8000dd6:	9302      	str	r3, [sp, #8]
 8000dd8:	2301      	movs	r3, #1
 8000dda:	9301      	str	r3, [sp, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	2301      	movs	r3, #1
 8000de2:	68f8      	ldr	r0, [r7, #12]
 8000de4:	f000 ffa8 	bl	8001d38 <HAL_I2C_Mem_Write>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <I2C_Write+0x60>

        /* Data couldn't be written */
        return false;
 8000dee:	2300      	movs	r3, #0
 8000df0:	e000      	b.n	8000df4 <I2C_Write+0x62>
    } else {

        /* Data written successfully */
        return true;
 8000df2:	2301      	movs	r3, #1
    }
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <MPU6050_InstanceInit>:
/* --- Public variable definitions ------------------------------------------------------------- */

/* --- Private variable definitions ------------------------------------------------------------ */

/* --- Private function implementation --------------------------------------------------------- */
static MPU6050_HandleTypeDef_t * MPU6050_InstanceInit(I2C_HandleTypeDef * hi2c) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]

    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = pvortMalloc(sizeof(1));
#else
    /* Allocate dynamic memory for the MPU6050_HandleTypeDef_t structure */
    MPU6050_HandleTypeDef_t * hmpu6050 = malloc(sizeof(MPU6050_HandleTypeDef_t));
 8000e04:	2014      	movs	r0, #20
 8000e06:	f008 f8cf 	bl	8008fa8 <malloc>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	60fb      	str	r3, [r7, #12]

    /* Allocate dynamic memory for data buffer */
    uint8_t * buffer = malloc(sizeof(1));
 8000e0e:	2004      	movs	r0, #4
 8000e10:	f008 f8ca 	bl	8008fa8 <malloc>
 8000e14:	4603      	mov	r3, r0
 8000e16:	60bb      	str	r3, [r7, #8]
#endif

    /* Check if dynamic memory allocation was successful */
    if (NULL == hmpu6050 || NULL == buffer) {
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d002      	beq.n	8000e24 <MPU6050_InstanceInit+0x28>
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d10c      	bne.n	8000e3e <MPU6050_InstanceInit+0x42>
        /* Free up dynamic allocated memory */
        vPortFree(hmpu6050->buffer);
        vPortFree(hmpu6050);
#else
        /* Free up dynamic allocated memory */
        hmpu6050->buffer = 0;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2200      	movs	r2, #0
 8000e28:	60da      	str	r2, [r3, #12]
        free(hmpu6050->buffer);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f008 f8c2 	bl	8008fb8 <free>
        free(hmpu6050);
 8000e34:	68f8      	ldr	r0, [r7, #12]
 8000e36:	f008 f8bf 	bl	8008fb8 <free>
#endif
        return NULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e01b      	b.n	8000e76 <MPU6050_InstanceInit+0x7a>
    } else {
        /* Dynamic memory allocation was successful */

        /* Initialize MPU6050_HandleTypeDef_t structure */
        if (instancesNumber == 0) {
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <MPU6050_InstanceInit+0x84>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d106      	bne.n	8000e54 <MPU6050_InstanceInit+0x58>
            hmpu6050->instance = 1;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2201      	movs	r2, #1
 8000e4a:	701a      	strb	r2, [r3, #0]
            hmpu6050->address = MPU6050_AUX_VAL_I2C_ADDR1;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	22d0      	movs	r2, #208	; 0xd0
 8000e50:	721a      	strb	r2, [r3, #8]
 8000e52:	e009      	b.n	8000e68 <MPU6050_InstanceInit+0x6c>
        } else if (instancesNumber == 1) {
 8000e54:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <MPU6050_InstanceInit+0x84>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d105      	bne.n	8000e68 <MPU6050_InstanceInit+0x6c>
            hmpu6050->instance = 2;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2202      	movs	r2, #2
 8000e60:	701a      	strb	r2, [r3, #0]
            hmpu6050->address = MPU6050_AUX_VAL_I2C_ADDR2;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	22d1      	movs	r2, #209	; 0xd1
 8000e66:	721a      	strb	r2, [r3, #8]
        }
        hmpu6050->hi2c = hi2c;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	605a      	str	r2, [r3, #4]
        hmpu6050->buffer = buffer;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	68ba      	ldr	r2, [r7, #8]
 8000e72:	60da      	str	r2, [r3, #12]
    }

    /* Return created instance */
    return hmpu6050;
 8000e74:	68fb      	ldr	r3, [r7, #12]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000264 	.word	0x20000264

08000e84 <MPU6050_Config>:

static void MPU6050_Config(MPU6050_HandleTypeDef_t * hmpu6050) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]

    /* Configure MPU6050 device */
    uint8_t regValue;

    /* Wake up device */
    regValue = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_PWR_MGMT_1, &regValue);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6858      	ldr	r0, [r3, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	7a19      	ldrb	r1, [r3, #8]
 8000e98:	f107 030f 	add.w	r3, r7, #15
 8000e9c:	226b      	movs	r2, #107	; 0x6b
 8000e9e:	f000 f845 	bl	8000f2c <MPU6050_WriteRegister>

    /* Set clock source */
    regValue = MPU_6050_BIT_PWR_MGMT_1_CLKSEL_1;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_PWR_MGMT_1, &regValue);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6858      	ldr	r0, [r3, #4]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	7a19      	ldrb	r1, [r3, #8]
 8000eae:	f107 030f 	add.w	r3, r7, #15
 8000eb2:	226b      	movs	r2, #107	; 0x6b
 8000eb4:	f000 f83a 	bl	8000f2c <MPU6050_WriteRegister>

    /* Set sample rate divider */
    regValue = MPU_6050_BIT_SMPLRT_DIV;
 8000eb8:	2318      	movs	r3, #24
 8000eba:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_SMPLRT_DIV, &regValue);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6858      	ldr	r0, [r3, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	7a19      	ldrb	r1, [r3, #8]
 8000ec4:	f107 030f 	add.w	r3, r7, #15
 8000ec8:	2219      	movs	r2, #25
 8000eca:	f000 f82f 	bl	8000f2c <MPU6050_WriteRegister>

    /* Configure gyroscope full scale range */
    regValue = MPU_6050_BIT_GYRO_CONFIG_FS_SEL_3;
 8000ece:	2318      	movs	r3, #24
 8000ed0:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_GYRO_CONFIG, &regValue);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6858      	ldr	r0, [r3, #4]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	7a19      	ldrb	r1, [r3, #8]
 8000eda:	f107 030f 	add.w	r3, r7, #15
 8000ede:	221b      	movs	r2, #27
 8000ee0:	f000 f824 	bl	8000f2c <MPU6050_WriteRegister>

    /* Configure accelerometer full scale range */
    regValue = MPU_6050_BIT_ACCEL_CONFIG_FS_SEL_3;
 8000ee4:	2318      	movs	r3, #24
 8000ee6:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_ACCEL_CONFIG, &regValue);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6858      	ldr	r0, [r3, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	7a19      	ldrb	r1, [r3, #8]
 8000ef0:	f107 030f 	add.w	r3, r7, #15
 8000ef4:	221c      	movs	r2, #28
 8000ef6:	f000 f819 	bl	8000f2c <MPU6050_WriteRegister>
    //    MPU6050_WriteRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_I2C_SLV0_REG,
    //                              &regValue, sizeof(regValue));
    //    regValue = 0x80 | 0x06; // Number of data bytes
    //    MPU6050_WriteRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_I2C_SLV0_CTRL,
    //                              &regValue, sizeof(regValue));
}
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <MPU6050_ReadRegister>:

static void MPU6050_ReadRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data, uint8_t dataSize) {
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b086      	sub	sp, #24
 8000f06:	af02      	add	r7, sp, #8
 8000f08:	60f8      	str	r0, [r7, #12]
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	72fb      	strb	r3, [r7, #11]
 8000f10:	4613      	mov	r3, r2
 8000f12:	72bb      	strb	r3, [r7, #10]

    I2C_Read(hi2c, address, reg, data, dataSize);
 8000f14:	7aba      	ldrb	r2, [r7, #10]
 8000f16:	7af9      	ldrb	r1, [r7, #11]
 8000f18:	7e3b      	ldrb	r3, [r7, #24]
 8000f1a:	9300      	str	r3, [sp, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	68f8      	ldr	r0, [r7, #12]
 8000f20:	f7ff fef9 	bl	8000d16 <I2C_Read>
}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <MPU6050_WriteRegister>:

static void MPU6050_WriteRegister(I2C_HandleTypeDef * hi2c, uint8_t address, uint8_t reg, uint8_t * data) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	607b      	str	r3, [r7, #4]
 8000f36:	460b      	mov	r3, r1
 8000f38:	72fb      	strb	r3, [r7, #11]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	72bb      	strb	r3, [r7, #10]

    I2C_Write(hi2c, address, reg, data);
 8000f3e:	7aba      	ldrb	r2, [r7, #10]
 8000f40:	7af9      	ldrb	r1, [r7, #11]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	68f8      	ldr	r0, [r7, #12]
 8000f46:	f7ff ff24 	bl	8000d92 <I2C_Write>
}
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <MPU6050_Init>:

/* --- Public function implementation ---------------------------------------------------------- */
MPU6050_HandleTypeDef_t * MPU6050_Init(I2C_HandleTypeDef * hi2c) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]

    /* Check if driver was already once or twice initialized */
    if (MPU6050_MAX_NUMBER_INSTANCES == instancesNumber) {
 8000f5c:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <MPU6050_Init+0x64>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d101      	bne.n	8000f68 <MPU6050_Init+0x14>
        return NULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	e022      	b.n	8000fae <MPU6050_Init+0x5a>
    }

    /* Create an instance of the MPU6050_IMU device */
    MPU6050_HandleTypeDef_t * hmpu6050 = MPU6050_InstanceInit(hi2c);
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff ff47 	bl	8000dfc <MPU6050_InstanceInit>
 8000f6e:	60f8      	str	r0, [r7, #12]

    /* Check if instance was successfully created */
    if (NULL != hmpu6050) {
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d01a      	beq.n	8000fac <MPU6050_Init+0x58>
        /* Instance was successfully created */

        /* Initialize I2C communication */
        if (I2C_Init(hmpu6050)) {
 8000f76:	68f8      	ldr	r0, [r7, #12]
 8000f78:	f7ff feaf 	bl	8000cda <I2C_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00a      	beq.n	8000f98 <MPU6050_Init+0x44>

            /* Initialization was successful */
            /* Configure device */
            MPU6050_Config(hmpu6050);
 8000f82:	68f8      	ldr	r0, [r7, #12]
 8000f84:	f7ff ff7e 	bl	8000e84 <MPU6050_Config>

            instancesNumber++;
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <MPU6050_Init+0x64>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <MPU6050_Init+0x64>)
 8000f92:	701a      	strb	r2, [r3, #0]

            return hmpu6050;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	e00a      	b.n	8000fae <MPU6050_Init+0x5a>
            /* Free up dynamic allocated memory */
            vPortFree(hmpu6050->buffer);
            vPortFree(hmpu6050);
#else
            /* Free up dynamic allocated memory */
            free(hmpu6050->buffer);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f008 f80b 	bl	8008fb8 <free>
            free(hmpu6050);
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	f008 f808 	bl	8008fb8 <free>
#endif
            return NULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	e000      	b.n	8000fae <MPU6050_Init+0x5a>
        }
    } else {

        /* Instance couldn't be created */
        return NULL;
 8000fac:	2300      	movs	r3, #0
    }
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000264 	.word	0x20000264

08000fbc <MPU6050_ReadGyroscope>:

    /* Write '1' to PWR_MGMT_1 register to DEVICE_RESET bit (7) */
    MPU6050_WriteRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_PWR_MGMT_1, &regValue);
}

void MPU6050_ReadGyroscope(MPU6050_HandleTypeDef_t * hmpu6050, gyroscopeValues_t * gyroscopeValues) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af02      	add	r7, sp, #8
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]

    gyroscopeValues->gyroscopeX = 0;
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	801a      	strh	r2, [r3, #0]
    gyroscopeValues->gyroscopeY = 0;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	805a      	strh	r2, [r3, #2]
    gyroscopeValues->gyroscopeZ = 0;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	809a      	strh	r2, [r3, #4]

    uint8_t gyroscopeRawData[2];
    int16_t scaleFactor = MPU_6050_AUX_VAL_GYRO_SF_2000;
 8000fd8:	2310      	movs	r3, #16
 8000fda:	81fb      	strh	r3, [r7, #14]

    /* Read gyroscope in axis X */
    MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_GYRO_XOUT_H, gyroscopeRawData, sizeof(uint16_t));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6858      	ldr	r0, [r3, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	7a19      	ldrb	r1, [r3, #8]
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	2202      	movs	r2, #2
 8000fea:	9200      	str	r2, [sp, #0]
 8000fec:	2243      	movs	r2, #67	; 0x43
 8000fee:	f7ff ff88 	bl	8000f02 <MPU6050_ReadRegister>
    gyroscopeValues->gyroscopeX = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]) / scaleFactor;
 8000ff2:	7b3b      	ldrb	r3, [r7, #12]
 8000ff4:	021b      	lsls	r3, r3, #8
 8000ff6:	b21a      	sxth	r2, r3
 8000ff8:	7b7b      	ldrb	r3, [r7, #13]
 8000ffa:	b21b      	sxth	r3, r3
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	b21b      	sxth	r3, r3
 8001000:	461a      	mov	r2, r3
 8001002:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001006:	fb92 f3f3 	sdiv	r3, r2, r3
 800100a:	b21a      	sxth	r2, r3
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	801a      	strh	r2, [r3, #0]

    /* Read gyroscope in axis Y */
    MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_GYRO_YOUT_H, gyroscopeRawData, sizeof(uint16_t));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6858      	ldr	r0, [r3, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	7a19      	ldrb	r1, [r3, #8]
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	2202      	movs	r2, #2
 800101e:	9200      	str	r2, [sp, #0]
 8001020:	2245      	movs	r2, #69	; 0x45
 8001022:	f7ff ff6e 	bl	8000f02 <MPU6050_ReadRegister>
    gyroscopeValues->gyroscopeY = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]) / scaleFactor;
 8001026:	7b3b      	ldrb	r3, [r7, #12]
 8001028:	021b      	lsls	r3, r3, #8
 800102a:	b21a      	sxth	r2, r3
 800102c:	7b7b      	ldrb	r3, [r7, #13]
 800102e:	b21b      	sxth	r3, r3
 8001030:	4313      	orrs	r3, r2
 8001032:	b21b      	sxth	r3, r3
 8001034:	461a      	mov	r2, r3
 8001036:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800103a:	fb92 f3f3 	sdiv	r3, r2, r3
 800103e:	b21a      	sxth	r2, r3
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	805a      	strh	r2, [r3, #2]

    /* Read gyroscope in axis Z */
    MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_GYRO_ZOUT_H, gyroscopeRawData, sizeof(uint16_t));
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6858      	ldr	r0, [r3, #4]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	7a19      	ldrb	r1, [r3, #8]
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	2202      	movs	r2, #2
 8001052:	9200      	str	r2, [sp, #0]
 8001054:	2247      	movs	r2, #71	; 0x47
 8001056:	f7ff ff54 	bl	8000f02 <MPU6050_ReadRegister>
    gyroscopeValues->gyroscopeZ = (int16_t)(gyroscopeRawData[0] << 8 | gyroscopeRawData[1]) / scaleFactor;
 800105a:	7b3b      	ldrb	r3, [r7, #12]
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	b21a      	sxth	r2, r3
 8001060:	7b7b      	ldrb	r3, [r7, #13]
 8001062:	b21b      	sxth	r3, r3
 8001064:	4313      	orrs	r3, r2
 8001066:	b21b      	sxth	r3, r3
 8001068:	461a      	mov	r2, r3
 800106a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800106e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001072:	b21a      	sxth	r2, r3
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	809a      	strh	r2, [r3, #4]
}
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <MPU6050_ReadAccelerometer>:

void MPU6050_ReadAccelerometer(MPU6050_HandleTypeDef_t * hmpu6050, accelerometerValues_t * accelerometerValues) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af02      	add	r7, sp, #8
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]

    accelerometerValues->accelerometerX = 0;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	2200      	movs	r2, #0
 800108e:	801a      	strh	r2, [r3, #0]
    accelerometerValues->accelerometerY = 0;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	2200      	movs	r2, #0
 8001094:	805a      	strh	r2, [r3, #2]
    accelerometerValues->accelerometerZ = 0;
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	2200      	movs	r2, #0
 800109a:	809a      	strh	r2, [r3, #4]

    uint8_t accelerometerRawData[2];
    int16_t scaleFactor = MPU_6050_AUX_VAL_ACCEL_SF_16;
 800109c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010a0:	81fb      	strh	r3, [r7, #14]

    /* Read accelerometer in axis X */
    MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_ACCEL_XOUT_H, accelerometerRawData, sizeof(uint16_t));
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6858      	ldr	r0, [r3, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	7a19      	ldrb	r1, [r3, #8]
 80010aa:	f107 030c 	add.w	r3, r7, #12
 80010ae:	2202      	movs	r2, #2
 80010b0:	9200      	str	r2, [sp, #0]
 80010b2:	223b      	movs	r2, #59	; 0x3b
 80010b4:	f7ff ff25 	bl	8000f02 <MPU6050_ReadRegister>
    accelerometerValues->accelerometerX = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]) / scaleFactor;
 80010b8:	7b3b      	ldrb	r3, [r7, #12]
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	b21a      	sxth	r2, r3
 80010be:	7b7b      	ldrb	r3, [r7, #13]
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	4313      	orrs	r3, r2
 80010c4:	b21b      	sxth	r3, r3
 80010c6:	461a      	mov	r2, r3
 80010c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80010d0:	b21a      	sxth	r2, r3
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	801a      	strh	r2, [r3, #0]

    /* Read accelerometer in axis Y */
    MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_ACCEL_YOUT_H, accelerometerRawData, sizeof(uint16_t));
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6858      	ldr	r0, [r3, #4]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	7a19      	ldrb	r1, [r3, #8]
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	2202      	movs	r2, #2
 80010e4:	9200      	str	r2, [sp, #0]
 80010e6:	223d      	movs	r2, #61	; 0x3d
 80010e8:	f7ff ff0b 	bl	8000f02 <MPU6050_ReadRegister>
    accelerometerValues->accelerometerY = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]) / scaleFactor;
 80010ec:	7b3b      	ldrb	r3, [r7, #12]
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	7b7b      	ldrb	r3, [r7, #13]
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	4313      	orrs	r3, r2
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	461a      	mov	r2, r3
 80010fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001100:	fb92 f3f3 	sdiv	r3, r2, r3
 8001104:	b21a      	sxth	r2, r3
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	805a      	strh	r2, [r3, #2]

    /* Read accelerometer in axis Z */
    MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_ACCEL_ZOUT_H, accelerometerRawData, sizeof(uint16_t));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6858      	ldr	r0, [r3, #4]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	7a19      	ldrb	r1, [r3, #8]
 8001112:	f107 030c 	add.w	r3, r7, #12
 8001116:	2202      	movs	r2, #2
 8001118:	9200      	str	r2, [sp, #0]
 800111a:	223f      	movs	r2, #63	; 0x3f
 800111c:	f7ff fef1 	bl	8000f02 <MPU6050_ReadRegister>
    accelerometerValues->accelerometerZ = (int16_t)(accelerometerRawData[0] << 8 | accelerometerRawData[1]) / scaleFactor;
 8001120:	7b3b      	ldrb	r3, [r7, #12]
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	b21a      	sxth	r2, r3
 8001126:	7b7b      	ldrb	r3, [r7, #13]
 8001128:	b21b      	sxth	r3, r3
 800112a:	4313      	orrs	r3, r2
 800112c:	b21b      	sxth	r3, r3
 800112e:	461a      	mov	r2, r3
 8001130:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001134:	fb92 f3f3 	sdiv	r3, r2, r3
 8001138:	b21a      	sxth	r2, r3
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	809a      	strh	r2, [r3, #4]
}
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <MPU6050_ReadTemperatureSensor>:

int16_t MPU6050_ReadTemperatureSensor(MPU6050_HandleTypeDef_t * hmpu6050) {
 8001146:	b580      	push	{r7, lr}
 8001148:	b086      	sub	sp, #24
 800114a:	af02      	add	r7, sp, #8
 800114c:	6078      	str	r0, [r7, #4]

    uint8_t temperatureSensorRawData[2];
    int16_t scaleFactor = MPU_6050_AUX_VAL_TEMP_SF;
 800114e:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8001152:	81fb      	strh	r3, [r7, #14]
    int16_t offset = MPU_6050_AUX_VAL_TEMP_OFS;
 8001154:	2324      	movs	r3, #36	; 0x24
 8001156:	81bb      	strh	r3, [r7, #12]

    /* Read temperature sensor */
    MPU6050_ReadRegister(hmpu6050->hi2c, hmpu6050->address, MPU_6050_REG_TEMP_OUT_H, temperatureSensorRawData, sizeof(uint16_t));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6858      	ldr	r0, [r3, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	7a19      	ldrb	r1, [r3, #8]
 8001160:	f107 0308 	add.w	r3, r7, #8
 8001164:	2202      	movs	r2, #2
 8001166:	9200      	str	r2, [sp, #0]
 8001168:	2241      	movs	r2, #65	; 0x41
 800116a:	f7ff feca 	bl	8000f02 <MPU6050_ReadRegister>

    return ((int16_t)(temperatureSensorRawData[0] << 8 | temperatureSensorRawData[1]) / scaleFactor) + offset;
 800116e:	7a3b      	ldrb	r3, [r7, #8]
 8001170:	021b      	lsls	r3, r3, #8
 8001172:	b21a      	sxth	r2, r3
 8001174:	7a7b      	ldrb	r3, [r7, #9]
 8001176:	b21b      	sxth	r3, r3
 8001178:	4313      	orrs	r3, r2
 800117a:	b21b      	sxth	r3, r3
 800117c:	461a      	mov	r2, r3
 800117e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001182:	fb92 f3f3 	sdiv	r3, r2, r3
 8001186:	b29a      	uxth	r2, r3
 8001188:	89bb      	ldrh	r3, [r7, #12]
 800118a:	4413      	add	r3, r2
 800118c:	b29b      	uxth	r3, r3
 800118e:	b21b      	sxth	r3, r3
}
 8001190:	4618      	mov	r0, r3
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800119c:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <HAL_Init+0x40>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a0d      	ldr	r2, [pc, #52]	; (80011d8 <HAL_Init+0x40>)
 80011a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <HAL_Init+0x40>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <HAL_Init+0x40>)
 80011ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <HAL_Init+0x40>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <HAL_Init+0x40>)
 80011ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c0:	2003      	movs	r0, #3
 80011c2:	f000 f94f 	bl	8001464 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c6:	200f      	movs	r0, #15
 80011c8:	f000 f808 	bl	80011dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011cc:	f7ff fbf6 	bl	80009bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023c00 	.word	0x40023c00

080011dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <HAL_InitTick+0x54>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <HAL_InitTick+0x58>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	4619      	mov	r1, r3
 80011ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 f967 	bl	80014ce <HAL_SYSTICK_Config>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e00e      	b.n	8001228 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b0f      	cmp	r3, #15
 800120e:	d80a      	bhi.n	8001226 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001210:	2200      	movs	r2, #0
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001218:	f000 f92f 	bl	800147a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800121c:	4a06      	ldr	r2, [pc, #24]	; (8001238 <HAL_InitTick+0x5c>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001222:	2300      	movs	r3, #0
 8001224:	e000      	b.n	8001228 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
}
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000000 	.word	0x20000000
 8001234:	20000008 	.word	0x20000008
 8001238:	20000004 	.word	0x20000004

0800123c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_IncTick+0x20>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <HAL_IncTick+0x24>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4413      	add	r3, r2
 800124c:	4a04      	ldr	r2, [pc, #16]	; (8001260 <HAL_IncTick+0x24>)
 800124e:	6013      	str	r3, [r2, #0]
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000008 	.word	0x20000008
 8001260:	20000268 	.word	0x20000268

08001264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return uwTick;
 8001268:	4b03      	ldr	r3, [pc, #12]	; (8001278 <HAL_GetTick+0x14>)
 800126a:	681b      	ldr	r3, [r3, #0]
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000268 	.word	0x20000268

0800127c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001284:	f7ff ffee 	bl	8001264 <HAL_GetTick>
 8001288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001294:	d005      	beq.n	80012a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001296:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <HAL_Delay+0x44>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	461a      	mov	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4413      	add	r3, r2
 80012a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012a2:	bf00      	nop
 80012a4:	f7ff ffde 	bl	8001264 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d8f7      	bhi.n	80012a4 <HAL_Delay+0x28>
  {
  }
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000008 	.word	0x20000008

080012c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e0:	4013      	ands	r3, r2
 80012e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f6:	4a04      	ldr	r2, [pc, #16]	; (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	60d3      	str	r3, [r2, #12]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001310:	4b04      	ldr	r3, [pc, #16]	; (8001324 <__NVIC_GetPriorityGrouping+0x18>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	0a1b      	lsrs	r3, r3, #8
 8001316:	f003 0307 	and.w	r3, r3, #7
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	2b00      	cmp	r3, #0
 8001338:	db0b      	blt.n	8001352 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	f003 021f 	and.w	r2, r3, #31
 8001340:	4907      	ldr	r1, [pc, #28]	; (8001360 <__NVIC_EnableIRQ+0x38>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	095b      	lsrs	r3, r3, #5
 8001348:	2001      	movs	r0, #1
 800134a:	fa00 f202 	lsl.w	r2, r0, r2
 800134e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000e100 	.word	0xe000e100

08001364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	6039      	str	r1, [r7, #0]
 800136e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001374:	2b00      	cmp	r3, #0
 8001376:	db0a      	blt.n	800138e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	b2da      	uxtb	r2, r3
 800137c:	490c      	ldr	r1, [pc, #48]	; (80013b0 <__NVIC_SetPriority+0x4c>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	0112      	lsls	r2, r2, #4
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	440b      	add	r3, r1
 8001388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800138c:	e00a      	b.n	80013a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4908      	ldr	r1, [pc, #32]	; (80013b4 <__NVIC_SetPriority+0x50>)
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	3b04      	subs	r3, #4
 800139c:	0112      	lsls	r2, r2, #4
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	440b      	add	r3, r1
 80013a2:	761a      	strb	r2, [r3, #24]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000e100 	.word	0xe000e100
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b089      	sub	sp, #36	; 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f1c3 0307 	rsb	r3, r3, #7
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	bf28      	it	cs
 80013d6:	2304      	movcs	r3, #4
 80013d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3304      	adds	r3, #4
 80013de:	2b06      	cmp	r3, #6
 80013e0:	d902      	bls.n	80013e8 <NVIC_EncodePriority+0x30>
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3b03      	subs	r3, #3
 80013e6:	e000      	b.n	80013ea <NVIC_EncodePriority+0x32>
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43da      	mvns	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	401a      	ands	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001400:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	43d9      	mvns	r1, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	4313      	orrs	r3, r2
         );
}
 8001412:	4618      	mov	r0, r3
 8001414:	3724      	adds	r7, #36	; 0x24
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001430:	d301      	bcc.n	8001436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001432:	2301      	movs	r3, #1
 8001434:	e00f      	b.n	8001456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <SysTick_Config+0x40>)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3b01      	subs	r3, #1
 800143c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143e:	210f      	movs	r1, #15
 8001440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001444:	f7ff ff8e 	bl	8001364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <SysTick_Config+0x40>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144e:	4b04      	ldr	r3, [pc, #16]	; (8001460 <SysTick_Config+0x40>)
 8001450:	2207      	movs	r2, #7
 8001452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	e000e010 	.word	0xe000e010

08001464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ff29 	bl	80012c4 <__NVIC_SetPriorityGrouping>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b086      	sub	sp, #24
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
 8001486:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800148c:	f7ff ff3e 	bl	800130c <__NVIC_GetPriorityGrouping>
 8001490:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	6978      	ldr	r0, [r7, #20]
 8001498:	f7ff ff8e 	bl	80013b8 <NVIC_EncodePriority>
 800149c:	4602      	mov	r2, r0
 800149e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff5d 	bl	8001364 <__NVIC_SetPriority>
}
 80014aa:	bf00      	nop
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff31 	bl	8001328 <__NVIC_EnableIRQ>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff ffa2 	bl	8001420 <SysTick_Config>
 80014dc:	4603      	mov	r3, r0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80014f4:	f7ff feb6 	bl	8001264 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e099      	b.n	8001638 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2202      	movs	r2, #2
 8001508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f022 0201 	bic.w	r2, r2, #1
 8001522:	601a      	str	r2, [r3, #0]

  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001524:	e00f      	b.n	8001546 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001526:	f7ff fe9d 	bl	8001264 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b05      	cmp	r3, #5
 8001532:	d908      	bls.n	8001546 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2220      	movs	r2, #32
 8001538:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2203      	movs	r2, #3
 800153e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e078      	b.n	8001638 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1e8      	bne.n	8001526 <HAL_DMA_Init+0x3e>
    }
  }

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	4b38      	ldr	r3, [pc, #224]	; (8001640 <HAL_DMA_Init+0x158>)
 8001560:	4013      	ands	r3, r2
 8001562:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001572:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800157e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800158a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	4313      	orrs	r3, r2
 8001596:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	2b04      	cmp	r3, #4
 800159e:	d107      	bne.n	80015b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	4313      	orrs	r3, r2
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	f023 0307 	bic.w	r3, r3, #7
 80015c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015cc:	697a      	ldr	r2, [r7, #20]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	d117      	bne.n	800160a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	617b      	str	r3, [r7, #20]

    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d00e      	beq.n	800160a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 f85f 	bl	80016b0 <DMA_CheckFifoParam>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d008      	beq.n	800160a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2240      	movs	r2, #64	; 0x40
 80015fc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e016      	b.n	8001638 <HAL_DMA_Init+0x150>
      }
    }
  }

  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 f816 	bl	8001644 <DMA_CalcBaseAndBitshift>
 8001618:	4603      	mov	r3, r0
 800161a:	60fb      	str	r3, [r7, #12]

  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001620:	223f      	movs	r2, #63	; 0x3f
 8001622:	409a      	lsls	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	f010803f 	.word	0xf010803f

08001644 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	3b10      	subs	r3, #16
 8001654:	4a14      	ldr	r2, [pc, #80]	; (80016a8 <DMA_CalcBaseAndBitshift+0x64>)
 8001656:	fba2 2303 	umull	r2, r3, r2, r3
 800165a:	091b      	lsrs	r3, r3, #4
 800165c:	60fb      	str	r3, [r7, #12]

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800165e:	4a13      	ldr	r2, [pc, #76]	; (80016ac <DMA_CalcBaseAndBitshift+0x68>)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4413      	add	r3, r2
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	461a      	mov	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (stream_number > 3U)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2b03      	cmp	r3, #3
 8001670:	d909      	bls.n	8001686 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800167a:	f023 0303 	bic.w	r3, r3, #3
 800167e:	1d1a      	adds	r2, r3, #4
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	659a      	str	r2, [r3, #88]	; 0x58
 8001684:	e007      	b.n	8001696 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800168e:	f023 0303 	bic.w	r3, r3, #3
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6593      	str	r3, [r2, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800169a:	4618      	mov	r0, r3
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	aaaaaaab 	.word	0xaaaaaaab
 80016ac:	08009a24 	.word	0x08009a24

080016b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016b8:	2300      	movs	r3, #0
 80016ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c0:	60bb      	str	r3, [r7, #8]

  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d11f      	bne.n	800170a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	d856      	bhi.n	800177e <DMA_CheckFifoParam+0xce>
 80016d0:	a201      	add	r2, pc, #4	; (adr r2, 80016d8 <DMA_CheckFifoParam+0x28>)
 80016d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d6:	bf00      	nop
 80016d8:	080016e9 	.word	0x080016e9
 80016dc:	080016fb 	.word	0x080016fb
 80016e0:	080016e9 	.word	0x080016e9
 80016e4:	0800177f 	.word	0x0800177f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d046      	beq.n	8001782 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016f8:	e043      	b.n	8001782 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001702:	d140      	bne.n	8001786 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001708:	e03d      	b.n	8001786 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001712:	d121      	bne.n	8001758 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	2b03      	cmp	r3, #3
 8001718:	d837      	bhi.n	800178a <DMA_CheckFifoParam+0xda>
 800171a:	a201      	add	r2, pc, #4	; (adr r2, 8001720 <DMA_CheckFifoParam+0x70>)
 800171c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001720:	08001731 	.word	0x08001731
 8001724:	08001737 	.word	0x08001737
 8001728:	08001731 	.word	0x08001731
 800172c:	08001749 	.word	0x08001749
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	73fb      	strb	r3, [r7, #15]
      break;
 8001734:	e030      	b.n	8001798 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d025      	beq.n	800178e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001746:	e022      	b.n	800178e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001750:	d11f      	bne.n	8001792 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001756:	e01c      	b.n	8001792 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d903      	bls.n	8001766 <DMA_CheckFifoParam+0xb6>
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	2b03      	cmp	r3, #3
 8001762:	d003      	beq.n	800176c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001764:	e018      	b.n	8001798 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	73fb      	strb	r3, [r7, #15]
      break;
 800176a:	e015      	b.n	8001798 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d00e      	beq.n	8001796 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	73fb      	strb	r3, [r7, #15]
      break;
 800177c:	e00b      	b.n	8001796 <DMA_CheckFifoParam+0xe6>
      break;
 800177e:	bf00      	nop
 8001780:	e00a      	b.n	8001798 <DMA_CheckFifoParam+0xe8>
      break;
 8001782:	bf00      	nop
 8001784:	e008      	b.n	8001798 <DMA_CheckFifoParam+0xe8>
      break;
 8001786:	bf00      	nop
 8001788:	e006      	b.n	8001798 <DMA_CheckFifoParam+0xe8>
      break;
 800178a:	bf00      	nop
 800178c:	e004      	b.n	8001798 <DMA_CheckFifoParam+0xe8>
      break;
 800178e:	bf00      	nop
 8001790:	e002      	b.n	8001798 <DMA_CheckFifoParam+0xe8>
      break;
 8001792:	bf00      	nop
 8001794:	e000      	b.n	8001798 <DMA_CheckFifoParam+0xe8>
      break;
 8001796:	bf00      	nop
    }
  }

  return status;
 8001798:	7bfb      	ldrb	r3, [r7, #15]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop

080017a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b089      	sub	sp, #36	; 0x24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
 80017c2:	e159      	b.n	8001a78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017c4:	2201      	movs	r2, #1
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	429a      	cmp	r2, r3
 80017de:	f040 8148 	bne.w	8001a72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d005      	beq.n	80017fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d130      	bne.n	800185c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	2203      	movs	r2, #3
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	68da      	ldr	r2, [r3, #12]
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001830:	2201      	movs	r2, #1
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	091b      	lsrs	r3, r3, #4
 8001846:	f003 0201 	and.w	r2, r3, #1
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	2b03      	cmp	r3, #3
 8001866:	d017      	beq.n	8001898 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	2203      	movs	r2, #3
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d123      	bne.n	80018ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	08da      	lsrs	r2, r3, #3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3208      	adds	r2, #8
 80018ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	220f      	movs	r2, #15
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	691a      	ldr	r2, [r3, #16]
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	08da      	lsrs	r2, r3, #3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3208      	adds	r2, #8
 80018e6:	69b9      	ldr	r1, [r7, #24]
 80018e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	2203      	movs	r2, #3
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 0203 	and.w	r2, r3, #3
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 80a2 	beq.w	8001a72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	4b57      	ldr	r3, [pc, #348]	; (8001a90 <HAL_GPIO_Init+0x2e8>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	4a56      	ldr	r2, [pc, #344]	; (8001a90 <HAL_GPIO_Init+0x2e8>)
 8001938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193c:	6453      	str	r3, [r2, #68]	; 0x44
 800193e:	4b54      	ldr	r3, [pc, #336]	; (8001a90 <HAL_GPIO_Init+0x2e8>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800194a:	4a52      	ldr	r2, [pc, #328]	; (8001a94 <HAL_GPIO_Init+0x2ec>)
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	089b      	lsrs	r3, r3, #2
 8001950:	3302      	adds	r3, #2
 8001952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001956:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	220f      	movs	r2, #15
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a49      	ldr	r2, [pc, #292]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d019      	beq.n	80019aa <HAL_GPIO_Init+0x202>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a48      	ldr	r2, [pc, #288]	; (8001a9c <HAL_GPIO_Init+0x2f4>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d013      	beq.n	80019a6 <HAL_GPIO_Init+0x1fe>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a47      	ldr	r2, [pc, #284]	; (8001aa0 <HAL_GPIO_Init+0x2f8>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d00d      	beq.n	80019a2 <HAL_GPIO_Init+0x1fa>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a46      	ldr	r2, [pc, #280]	; (8001aa4 <HAL_GPIO_Init+0x2fc>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d007      	beq.n	800199e <HAL_GPIO_Init+0x1f6>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a45      	ldr	r2, [pc, #276]	; (8001aa8 <HAL_GPIO_Init+0x300>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d101      	bne.n	800199a <HAL_GPIO_Init+0x1f2>
 8001996:	2304      	movs	r3, #4
 8001998:	e008      	b.n	80019ac <HAL_GPIO_Init+0x204>
 800199a:	2307      	movs	r3, #7
 800199c:	e006      	b.n	80019ac <HAL_GPIO_Init+0x204>
 800199e:	2303      	movs	r3, #3
 80019a0:	e004      	b.n	80019ac <HAL_GPIO_Init+0x204>
 80019a2:	2302      	movs	r3, #2
 80019a4:	e002      	b.n	80019ac <HAL_GPIO_Init+0x204>
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <HAL_GPIO_Init+0x204>
 80019aa:	2300      	movs	r3, #0
 80019ac:	69fa      	ldr	r2, [r7, #28]
 80019ae:	f002 0203 	and.w	r2, r2, #3
 80019b2:	0092      	lsls	r2, r2, #2
 80019b4:	4093      	lsls	r3, r2
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019bc:	4935      	ldr	r1, [pc, #212]	; (8001a94 <HAL_GPIO_Init+0x2ec>)
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	089b      	lsrs	r3, r3, #2
 80019c2:	3302      	adds	r3, #2
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ca:	4b38      	ldr	r3, [pc, #224]	; (8001aac <HAL_GPIO_Init+0x304>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	43db      	mvns	r3, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4013      	ands	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019ee:	4a2f      	ldr	r2, [pc, #188]	; (8001aac <HAL_GPIO_Init+0x304>)
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019f4:	4b2d      	ldr	r3, [pc, #180]	; (8001aac <HAL_GPIO_Init+0x304>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a18:	4a24      	ldr	r2, [pc, #144]	; (8001aac <HAL_GPIO_Init+0x304>)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a1e:	4b23      	ldr	r3, [pc, #140]	; (8001aac <HAL_GPIO_Init+0x304>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	43db      	mvns	r3, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a42:	4a1a      	ldr	r2, [pc, #104]	; (8001aac <HAL_GPIO_Init+0x304>)
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a48:	4b18      	ldr	r3, [pc, #96]	; (8001aac <HAL_GPIO_Init+0x304>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a6c:	4a0f      	ldr	r2, [pc, #60]	; (8001aac <HAL_GPIO_Init+0x304>)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3301      	adds	r3, #1
 8001a76:	61fb      	str	r3, [r7, #28]
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	2b0f      	cmp	r3, #15
 8001a7c:	f67f aea2 	bls.w	80017c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a80:	bf00      	nop
 8001a82:	bf00      	nop
 8001a84:	3724      	adds	r7, #36	; 0x24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40013800 	.word	0x40013800
 8001a98:	40020000 	.word	0x40020000
 8001a9c:	40020400 	.word	0x40020400
 8001aa0:	40020800 	.word	0x40020800
 8001aa4:	40020c00 	.word	0x40020c00
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40013c00 	.word	0x40013c00

08001ab0 <HAL_I2C_Init>:
 *         in the I2C_InitTypeDef and initialize the associated handle.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef * hi2c) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
    uint32_t freqrange;
    uint32_t pclk1;

    /* Check the I2C handle allocation */
    if (hi2c == NULL) {
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_I2C_Init+0x12>
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e12b      	b.n	8001d1a <HAL_I2C_Init+0x26a>
    assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
    assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
    assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
    assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

    if (hi2c->State == HAL_I2C_STATE_RESET) {
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d106      	bne.n	8001adc <HAL_I2C_Init+0x2c>
        /* Allocate lock resource and initialize it */
        hi2c->Lock = HAL_UNLOCKED;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        hi2c->MspInitCallback(hi2c);
#else
        /* Init the low level hardware : GPIO, CLOCK, NVIC */
        HAL_I2C_MspInit(hi2c);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7fe ff98 	bl	8000a0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2224      	movs	r2, #36	; 0x24
 8001ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 0201 	bic.w	r2, r2, #1
 8001af2:	601a      	str	r2, [r3, #0]

    /*Reset I2C*/
    hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b02:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b12:	601a      	str	r2, [r3, #0]

    /* Get PCLK1 frequency */
    pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b14:	f002 fe38 	bl	8004788 <HAL_RCC_GetPCLK1Freq>
 8001b18:	60f8      	str	r0, [r7, #12]

    /* Check the minimum allowed PCLK1 frequency */
    if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U) {
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	4a81      	ldr	r2, [pc, #516]	; (8001d24 <HAL_I2C_Init+0x274>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d807      	bhi.n	8001b34 <HAL_I2C_Init+0x84>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4a80      	ldr	r2, [pc, #512]	; (8001d28 <HAL_I2C_Init+0x278>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	bf94      	ite	ls
 8001b2c:	2301      	movls	r3, #1
 8001b2e:	2300      	movhi	r3, #0
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	e006      	b.n	8001b42 <HAL_I2C_Init+0x92>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4a7d      	ldr	r2, [pc, #500]	; (8001d2c <HAL_I2C_Init+0x27c>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	bf94      	ite	ls
 8001b3c:	2301      	movls	r3, #1
 8001b3e:	2300      	movhi	r3, #0
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_I2C_Init+0x9a>
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e0e7      	b.n	8001d1a <HAL_I2C_Init+0x26a>
    }

    /* Calculate frequency range */
    freqrange = I2C_FREQRANGE(pclk1);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	4a78      	ldr	r2, [pc, #480]	; (8001d30 <HAL_I2C_Init+0x280>)
 8001b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b52:	0c9b      	lsrs	r3, r3, #18
 8001b54:	60bb      	str	r3, [r7, #8]

    /*---------------------------- I2Cx CR2 Configuration ----------------------*/
    /* Configure I2Cx: Frequency range */
    MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	605a      	str	r2, [r3, #4]

    /*---------------------------- I2Cx TRISE Configuration --------------------*/
    /* Configure I2Cx: Rise Time */
    MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE,
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	4a6a      	ldr	r2, [pc, #424]	; (8001d24 <HAL_I2C_Init+0x274>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d802      	bhi.n	8001b84 <HAL_I2C_Init+0xd4>
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	3301      	adds	r3, #1
 8001b82:	e009      	b.n	8001b98 <HAL_I2C_Init+0xe8>
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b8a:	fb02 f303 	mul.w	r3, r2, r3
 8001b8e:	4a69      	ldr	r2, [pc, #420]	; (8001d34 <HAL_I2C_Init+0x284>)
 8001b90:	fba2 2303 	umull	r2, r3, r2, r3
 8001b94:	099b      	lsrs	r3, r3, #6
 8001b96:	3301      	adds	r3, #1
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	430b      	orrs	r3, r1
 8001b9e:	6213      	str	r3, [r2, #32]
               I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

    /*---------------------------- I2Cx CCR Configuration ----------------------*/
    /* Configure I2Cx: Speed */
    MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR),
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001baa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	495c      	ldr	r1, [pc, #368]	; (8001d24 <HAL_I2C_Init+0x274>)
 8001bb4:	428b      	cmp	r3, r1
 8001bb6:	d819      	bhi.n	8001bec <HAL_I2C_Init+0x13c>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	1e59      	subs	r1, r3, #1
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bc6:	1c59      	adds	r1, r3, #1
 8001bc8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001bcc:	400b      	ands	r3, r1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00a      	beq.n	8001be8 <HAL_I2C_Init+0x138>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	1e59      	subs	r1, r3, #1
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001be0:	3301      	adds	r3, #1
 8001be2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001be6:	e051      	b.n	8001c8c <HAL_I2C_Init+0x1dc>
 8001be8:	2304      	movs	r3, #4
 8001bea:	e04f      	b.n	8001c8c <HAL_I2C_Init+0x1dc>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d111      	bne.n	8001c18 <HAL_I2C_Init+0x168>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	1e58      	subs	r0, r3, #1
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6859      	ldr	r1, [r3, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	440b      	add	r3, r1
 8001c02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c06:	3301      	adds	r3, #1
 8001c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	bf0c      	ite	eq
 8001c10:	2301      	moveq	r3, #1
 8001c12:	2300      	movne	r3, #0
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	e012      	b.n	8001c3e <HAL_I2C_Init+0x18e>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	1e58      	subs	r0, r3, #1
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6859      	ldr	r1, [r3, #4]
 8001c20:	460b      	mov	r3, r1
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	0099      	lsls	r1, r3, #2
 8001c28:	440b      	add	r3, r1
 8001c2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c2e:	3301      	adds	r3, #1
 8001c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	bf0c      	ite	eq
 8001c38:	2301      	moveq	r3, #1
 8001c3a:	2300      	movne	r3, #0
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_I2C_Init+0x196>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e022      	b.n	8001c8c <HAL_I2C_Init+0x1dc>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10e      	bne.n	8001c6c <HAL_I2C_Init+0x1bc>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	1e58      	subs	r0, r3, #1
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6859      	ldr	r1, [r3, #4]
 8001c56:	460b      	mov	r3, r1
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	440b      	add	r3, r1
 8001c5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c60:	3301      	adds	r3, #1
 8001c62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c6a:	e00f      	b.n	8001c8c <HAL_I2C_Init+0x1dc>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	1e58      	subs	r0, r3, #1
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6859      	ldr	r1, [r3, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	440b      	add	r3, r1
 8001c7a:	0099      	lsls	r1, r3, #2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c82:	3301      	adds	r3, #1
 8001c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c8c:	6879      	ldr	r1, [r7, #4]
 8001c8e:	6809      	ldr	r1, [r1, #0]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61cb      	str	r3, [r1, #28]
               I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));

    /*---------------------------- I2Cx CR1 Configuration ----------------------*/
    /* Configure I2Cx: Generalcall and NoStretch mode */
    MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH),
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69da      	ldr	r2, [r3, #28]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	601a      	str	r2, [r3, #0]
               (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));

    /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
    /* Configure I2Cx: Own Address1 and addressing mode */
    MODIFY_REG(hi2c->Instance->OAR1,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001cba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6911      	ldr	r1, [r2, #16]
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	68d2      	ldr	r2, [r2, #12]
 8001cc6:	4311      	orrs	r1, r2
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6812      	ldr	r2, [r2, #0]
 8001ccc:	430b      	orrs	r3, r1
 8001cce:	6093      	str	r3, [r2, #8]
               (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0),
               (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));

    /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
    /* Configure I2Cx: Dual mode and Own Address2 */
    MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2),
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	695a      	ldr	r2, [r3, #20]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	60da      	str	r2, [r3, #12]
               (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));

    /* Enable the selected I2C peripheral */
    __HAL_I2C_ENABLE(hi2c);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0201 	orr.w	r2, r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]

    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2220      	movs	r2, #32
 8001d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	000186a0 	.word	0x000186a0
 8001d28:	001e847f 	.word	0x001e847f
 8001d2c:	003d08ff 	.word	0x003d08ff
 8001d30:	431bde83 	.word	0x431bde83
 8001d34:	10624dd3 	.word	0x10624dd3

08001d38 <HAL_I2C_Mem_Write>:
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef * hi2c, uint16_t DevAddress,
                                    uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData,
                                    uint16_t Size, uint32_t Timeout) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b088      	sub	sp, #32
 8001d3c:	af02      	add	r7, sp, #8
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	4608      	mov	r0, r1
 8001d42:	4611      	mov	r1, r2
 8001d44:	461a      	mov	r2, r3
 8001d46:	4603      	mov	r3, r0
 8001d48:	817b      	strh	r3, [r7, #10]
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	813b      	strh	r3, [r7, #8]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	80fb      	strh	r3, [r7, #6]
    /* Init tickstart for timeout management*/
    uint32_t tickstart = HAL_GetTick();
 8001d52:	f7ff fa87 	bl	8001264 <HAL_GetTick>
 8001d56:	6178      	str	r0, [r7, #20]

    /* Check the parameters */
    assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

    if (hi2c->State == HAL_I2C_STATE_READY) {
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b20      	cmp	r3, #32
 8001d62:	f040 80d9 	bne.w	8001f18 <HAL_I2C_Mem_Write+0x1e0>
        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG,
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	2319      	movs	r3, #25
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	496d      	ldr	r1, [pc, #436]	; (8001f24 <HAL_I2C_Mem_Write+0x1ec>)
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f000 fc7f 	bl	8002674 <I2C_WaitOnFlagUntilTimeout>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <HAL_I2C_Mem_Write+0x48>
                                       tickstart) != HAL_OK) {
            return HAL_BUSY;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	e0cc      	b.n	8001f1a <HAL_I2C_Mem_Write+0x1e2>
        }

        /* Process Locked */
        __HAL_LOCK(hi2c);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d101      	bne.n	8001d8e <HAL_I2C_Mem_Write+0x56>
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e0c5      	b.n	8001f1a <HAL_I2C_Mem_Write+0x1e2>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Check if the I2C is already enabled */
        if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d007      	beq.n	8001db4 <HAL_I2C_Mem_Write+0x7c>
            /* Enable I2C peripheral */
            __HAL_I2C_ENABLE(hi2c);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0201 	orr.w	r2, r2, #1
 8001db2:	601a      	str	r2, [r3, #0]
        }

        /* Disable Pos */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dc2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_BUSY_TX;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2221      	movs	r2, #33	; 0x21
 8001dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_MEM;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2240      	movs	r2, #64	; 0x40
 8001dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Prepare transfer parameters */
        hi2c->pBuffPtr = pData;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6a3a      	ldr	r2, [r7, #32]
 8001dde:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount = Size;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001de4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize = hi2c->XferCount;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4a4d      	ldr	r2, [pc, #308]	; (8001f28 <HAL_I2C_Mem_Write+0x1f0>)
 8001df4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) !=
 8001df6:	88f8      	ldrh	r0, [r7, #6]
 8001df8:	893a      	ldrh	r2, [r7, #8]
 8001dfa:	8979      	ldrh	r1, [r7, #10]
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	9301      	str	r3, [sp, #4]
 8001e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	4603      	mov	r3, r0
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f000 fab6 	bl	8002378 <I2C_RequestMemoryWrite>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d052      	beq.n	8001eb8 <HAL_I2C_Mem_Write+0x180>
            HAL_OK) {
            return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e081      	b.n	8001f1a <HAL_I2C_Mem_Write+0x1e2>
        }

        while (hi2c->XferSize > 0U) {
            /* Wait until TXE flag is set */
            if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f000 fd00 	bl	8002820 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00d      	beq.n	8001e42 <HAL_I2C_Mem_Write+0x10a>
                if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d107      	bne.n	8001e3e <HAL_I2C_Mem_Write+0x106>
                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e3c:	601a      	str	r2, [r3, #0]
                }
                return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e06b      	b.n	8001f1a <HAL_I2C_Mem_Write+0x1e2>
            }

            /* Write data to DR */
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e46:	781a      	ldrb	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	611a      	str	r2, [r3, #16]

            /* Increment Buffer pointer */
            hi2c->pBuffPtr++;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e52:	1c5a      	adds	r2, r3, #1
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	625a      	str	r2, [r3, #36]	; 0x24

            /* Update counter */
            hi2c->XferSize--;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	851a      	strh	r2, [r3, #40]	; 0x28
            hi2c->XferCount--;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	855a      	strh	r2, [r3, #42]	; 0x2a

            if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U)) {
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d11b      	bne.n	8001eb8 <HAL_I2C_Mem_Write+0x180>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d017      	beq.n	8001eb8 <HAL_I2C_Mem_Write+0x180>
                /* Write data to DR */
                hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	781a      	ldrb	r2, [r3, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	611a      	str	r2, [r3, #16]

                /* Increment Buffer pointer */
                hi2c->pBuffPtr++;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	625a      	str	r2, [r3, #36]	; 0x24

                /* Update counter */
                hi2c->XferSize--;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	851a      	strh	r2, [r3, #40]	; 0x28
                hi2c->XferCount--;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
        while (hi2c->XferSize > 0U) {
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1aa      	bne.n	8001e16 <HAL_I2C_Mem_Write+0xde>
            }
        }

        /* Wait until BTF flag is set */
        if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f000 fcec 	bl	80028a2 <I2C_WaitOnBTFFlagUntilTimeout>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00d      	beq.n	8001eec <HAL_I2C_Mem_Write+0x1b4>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d107      	bne.n	8001ee8 <HAL_I2C_Mem_Write+0x1b0>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ee6:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e016      	b.n	8001f1a <HAL_I2C_Mem_Write+0x1e2>
        }

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001efa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2220      	movs	r2, #32
 8001f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001f14:	2300      	movs	r3, #0
 8001f16:	e000      	b.n	8001f1a <HAL_I2C_Mem_Write+0x1e2>
    } else {
        return HAL_BUSY;
 8001f18:	2302      	movs	r3, #2
    }
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	00100002 	.word	0x00100002
 8001f28:	ffff0000 	.word	0xffff0000

08001f2c <HAL_I2C_Mem_Read>:
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef * hi2c, uint16_t DevAddress,
                                   uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData,
                                   uint16_t Size, uint32_t Timeout) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08c      	sub	sp, #48	; 0x30
 8001f30:	af02      	add	r7, sp, #8
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	4608      	mov	r0, r1
 8001f36:	4611      	mov	r1, r2
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	817b      	strh	r3, [r7, #10]
 8001f3e:	460b      	mov	r3, r1
 8001f40:	813b      	strh	r3, [r7, #8]
 8001f42:	4613      	mov	r3, r2
 8001f44:	80fb      	strh	r3, [r7, #6]
    /* Init tickstart for timeout management*/
    uint32_t tickstart = HAL_GetTick();
 8001f46:	f7ff f98d 	bl	8001264 <HAL_GetTick>
 8001f4a:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check the parameters */
    assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

    if (hi2c->State == HAL_I2C_STATE_READY) {
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b20      	cmp	r3, #32
 8001f56:	f040 8208 	bne.w	800236a <HAL_I2C_Mem_Read+0x43e>
        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG,
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	2319      	movs	r3, #25
 8001f60:	2201      	movs	r2, #1
 8001f62:	497b      	ldr	r1, [pc, #492]	; (8002150 <HAL_I2C_Mem_Read+0x224>)
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f000 fb85 	bl	8002674 <I2C_WaitOnFlagUntilTimeout>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <HAL_I2C_Mem_Read+0x48>
                                       tickstart) != HAL_OK) {
            return HAL_BUSY;
 8001f70:	2302      	movs	r3, #2
 8001f72:	e1fb      	b.n	800236c <HAL_I2C_Mem_Read+0x440>
        }

        /* Process Locked */
        __HAL_LOCK(hi2c);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d101      	bne.n	8001f82 <HAL_I2C_Mem_Read+0x56>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e1f4      	b.n	800236c <HAL_I2C_Mem_Read+0x440>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Check if the I2C is already enabled */
        if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d007      	beq.n	8001fa8 <HAL_I2C_Mem_Read+0x7c>
            /* Enable I2C peripheral */
            __HAL_I2C_ENABLE(hi2c);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0201 	orr.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]
        }

        /* Disable Pos */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fb6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_BUSY_RX;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2222      	movs	r2, #34	; 0x22
 8001fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_MEM;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2240      	movs	r2, #64	; 0x40
 8001fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Prepare transfer parameters */
        hi2c->pBuffPtr = pData;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fd2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount = Size;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize = hi2c->XferCount;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4a5b      	ldr	r2, [pc, #364]	; (8002154 <HAL_I2C_Mem_Read+0x228>)
 8001fe8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) !=
 8001fea:	88f8      	ldrh	r0, [r7, #6]
 8001fec:	893a      	ldrh	r2, [r7, #8]
 8001fee:	8979      	ldrh	r1, [r7, #10]
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	9301      	str	r3, [sp, #4]
 8001ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f000 fa52 	bl	80024a4 <I2C_RequestMemoryRead>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_I2C_Mem_Read+0xde>
            HAL_OK) {
            return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e1b0      	b.n	800236c <HAL_I2C_Mem_Read+0x440>
        }

        if (hi2c->XferSize == 0U) {
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800200e:	2b00      	cmp	r3, #0
 8002010:	d113      	bne.n	800203a <HAL_I2C_Mem_Read+0x10e>
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002012:	2300      	movs	r3, #0
 8002014:	623b      	str	r3, [r7, #32]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	623b      	str	r3, [r7, #32]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	623b      	str	r3, [r7, #32]
 8002026:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	e184      	b.n	8002344 <HAL_I2C_Mem_Read+0x418>
        } else if (hi2c->XferSize == 1U) {
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800203e:	2b01      	cmp	r3, #1
 8002040:	d11b      	bne.n	800207a <HAL_I2C_Mem_Read+0x14e>
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002050:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	61fb      	str	r3, [r7, #28]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	61fb      	str	r3, [r7, #28]
 8002066:	69fb      	ldr	r3, [r7, #28]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	e164      	b.n	8002344 <HAL_I2C_Mem_Read+0x418>
        } else if (hi2c->XferSize == 2U) {
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207e:	2b02      	cmp	r3, #2
 8002080:	d11b      	bne.n	80020ba <HAL_I2C_Mem_Read+0x18e>
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002090:	601a      	str	r2, [r3, #0]

            /* Enable Pos */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020a0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020a2:	2300      	movs	r3, #0
 80020a4:	61bb      	str	r3, [r7, #24]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	61bb      	str	r3, [r7, #24]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	61bb      	str	r3, [r7, #24]
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	e144      	b.n	8002344 <HAL_I2C_Mem_Read+0x418>
        } else {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	697b      	ldr	r3, [r7, #20]
        }

        while (hi2c->XferSize > 0U) {
 80020d0:	e138      	b.n	8002344 <HAL_I2C_Mem_Read+0x418>
            if (hi2c->XferSize <= 3U) {
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d6:	2b03      	cmp	r3, #3
 80020d8:	f200 80f1 	bhi.w	80022be <HAL_I2C_Mem_Read+0x392>
                /* One byte */
                if (hi2c->XferSize == 1U) {
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d123      	bne.n	800212c <HAL_I2C_Mem_Read+0x200>
                    /* Wait until RXNE flag is set */
                    if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 80020e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 fc1b 	bl	8002924 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <HAL_I2C_Mem_Read+0x1cc>
                        return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e139      	b.n	800236c <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691a      	ldr	r2, [r3, #16]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002114:	3b01      	subs	r3, #1
 8002116:	b29a      	uxth	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002120:	b29b      	uxth	r3, r3
 8002122:	3b01      	subs	r3, #1
 8002124:	b29a      	uxth	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	855a      	strh	r2, [r3, #42]	; 0x2a
 800212a:	e10b      	b.n	8002344 <HAL_I2C_Mem_Read+0x418>
                }
                /* Two bytes */
                else if (hi2c->XferSize == 2U) {
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002130:	2b02      	cmp	r3, #2
 8002132:	d14e      	bne.n	80021d2 <HAL_I2C_Mem_Read+0x2a6>
                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) !=
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800213a:	2200      	movs	r2, #0
 800213c:	4906      	ldr	r1, [pc, #24]	; (8002158 <HAL_I2C_Mem_Read+0x22c>)
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 fa98 	bl	8002674 <I2C_WaitOnFlagUntilTimeout>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d008      	beq.n	800215c <HAL_I2C_Mem_Read+0x230>
                        HAL_OK) {
                        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e10e      	b.n	800236c <HAL_I2C_Mem_Read+0x440>
 800214e:	bf00      	nop
 8002150:	00100002 	.word	0x00100002
 8002154:	ffff0000 	.word	0xffff0000
 8002158:	00010004 	.word	0x00010004
                    }

                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800216a:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	691a      	ldr	r2, [r3, #16]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	1c5a      	adds	r2, r3, #1
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002188:	3b01      	subs	r3, #1
 800218a:	b29a      	uxth	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002194:	b29b      	uxth	r3, r3
 8002196:	3b01      	subs	r3, #1
 8002198:	b29a      	uxth	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	855a      	strh	r2, [r3, #42]	; 0x2a

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	691a      	ldr	r2, [r3, #16]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	1c5a      	adds	r2, r3, #1
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ba:	3b01      	subs	r3, #1
 80021bc:	b29a      	uxth	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	3b01      	subs	r3, #1
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021d0:	e0b8      	b.n	8002344 <HAL_I2C_Mem_Read+0x418>
                }
                /* 3 Last bytes */
                else {
                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) !=
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d8:	2200      	movs	r2, #0
 80021da:	4966      	ldr	r1, [pc, #408]	; (8002374 <HAL_I2C_Mem_Read+0x448>)
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 fa49 	bl	8002674 <I2C_WaitOnFlagUntilTimeout>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <HAL_I2C_Mem_Read+0x2c0>
                        HAL_OK) {
                        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e0bf      	b.n	800236c <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Disable Acknowledge */
                    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021fa:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	691a      	ldr	r2, [r3, #16]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	1c5a      	adds	r2, r3, #1
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002218:	3b01      	subs	r3, #1
 800221a:	b29a      	uxth	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002224:	b29b      	uxth	r3, r3
 8002226:	3b01      	subs	r3, #1
 8002228:	b29a      	uxth	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	855a      	strh	r2, [r3, #42]	; 0x2a

                    /* Wait until BTF flag is set */
                    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) !=
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002234:	2200      	movs	r2, #0
 8002236:	494f      	ldr	r1, [pc, #316]	; (8002374 <HAL_I2C_Mem_Read+0x448>)
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f000 fa1b 	bl	8002674 <I2C_WaitOnFlagUntilTimeout>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <HAL_I2C_Mem_Read+0x31c>
                        HAL_OK) {
                        return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e091      	b.n	800236c <HAL_I2C_Mem_Read+0x440>
                    }

                    /* Generate Stop */
                    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002256:	601a      	str	r2, [r3, #0]

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	691a      	ldr	r2, [r3, #16]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002274:	3b01      	subs	r3, #1
 8002276:	b29a      	uxth	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002280:	b29b      	uxth	r3, r3
 8002282:	3b01      	subs	r3, #1
 8002284:	b29a      	uxth	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	855a      	strh	r2, [r3, #42]	; 0x2a

                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a6:	3b01      	subs	r3, #1
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022bc:	e042      	b.n	8002344 <HAL_I2C_Mem_Read+0x418>
                }
            } else {
                /* Wait until RXNE flag is set */
                if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 80022be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 fb2e 	bl	8002924 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_I2C_Mem_Read+0x3a6>
                    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e04c      	b.n	800236c <HAL_I2C_Mem_Read+0x440>
                }

                /* Read data from DR */
                *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	701a      	strb	r2, [r3, #0]

                /* Increment Buffer pointer */
                hi2c->pBuffPtr++;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	1c5a      	adds	r2, r3, #1
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	625a      	str	r2, [r3, #36]	; 0x24

                /* Update counter */
                hi2c->XferSize--;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ee:	3b01      	subs	r3, #1
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	851a      	strh	r2, [r3, #40]	; 0x28
                hi2c->XferCount--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	3b01      	subs	r3, #1
 80022fe:	b29a      	uxth	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	855a      	strh	r2, [r3, #42]	; 0x2a

                if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) {
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	2b04      	cmp	r3, #4
 8002310:	d118      	bne.n	8002344 <HAL_I2C_Mem_Read+0x418>
                    /* Read data from DR */
                    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	691a      	ldr	r2, [r3, #16]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	701a      	strb	r2, [r3, #0]

                    /* Increment Buffer pointer */
                    hi2c->pBuffPtr++;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	1c5a      	adds	r2, r3, #1
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	625a      	str	r2, [r3, #36]	; 0x24

                    /* Update counter */
                    hi2c->XferSize--;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232e:	3b01      	subs	r3, #1
 8002330:	b29a      	uxth	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	851a      	strh	r2, [r3, #40]	; 0x28
                    hi2c->XferCount--;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233a:	b29b      	uxth	r3, r3
 800233c:	3b01      	subs	r3, #1
 800233e:	b29a      	uxth	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	855a      	strh	r2, [r3, #42]	; 0x2a
        while (hi2c->XferSize > 0U) {
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002348:	2b00      	cmp	r3, #0
 800234a:	f47f aec2 	bne.w	80020d2 <HAL_I2C_Mem_Read+0x1a6>
                }
            }
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2220      	movs	r2, #32
 8002352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002366:	2300      	movs	r3, #0
 8002368:	e000      	b.n	800236c <HAL_I2C_Mem_Read+0x440>
    } else {
        return HAL_BUSY;
 800236a:	2302      	movs	r3, #2
    }
}
 800236c:	4618      	mov	r0, r3
 800236e:	3728      	adds	r7, #40	; 0x28
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	00010004 	.word	0x00010004

08002378 <I2C_RequestMemoryWrite>:
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef * hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize,
                                                uint32_t Timeout, uint32_t Tickstart) {
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af02      	add	r7, sp, #8
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	4608      	mov	r0, r1
 8002382:	4611      	mov	r1, r2
 8002384:	461a      	mov	r2, r3
 8002386:	4603      	mov	r3, r0
 8002388:	817b      	strh	r3, [r7, #10]
 800238a:	460b      	mov	r3, r1
 800238c:	813b      	strh	r3, [r7, #8]
 800238e:	4613      	mov	r3, r2
 8002390:	80fb      	strh	r3, [r7, #6]
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023a0:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	6a3b      	ldr	r3, [r7, #32]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 f960 	bl	8002674 <I2C_WaitOnFlagUntilTimeout>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00d      	beq.n	80023d6 <I2C_RequestMemoryWrite+0x5e>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023c8:	d103      	bne.n	80023d2 <I2C_RequestMemoryWrite+0x5a>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023d0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e05f      	b.n	8002496 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023d6:	897b      	ldrh	r3, [r7, #10]
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	461a      	mov	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023e4:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) !=
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	6a3a      	ldr	r2, [r7, #32]
 80023ea:	492d      	ldr	r1, [pc, #180]	; (80024a0 <I2C_RequestMemoryWrite+0x128>)
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 f998 	bl	8002722 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <I2C_RequestMemoryWrite+0x84>
        HAL_OK) {
        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e04c      	b.n	8002496 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	697b      	ldr	r3, [r7, #20]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8002412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002414:	6a39      	ldr	r1, [r7, #32]
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 fa02 	bl	8002820 <I2C_WaitOnTXEFlagUntilTimeout>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00d      	beq.n	800243e <I2C_RequestMemoryWrite+0xc6>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	2b04      	cmp	r3, #4
 8002428:	d107      	bne.n	800243a <I2C_RequestMemoryWrite+0xc2>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002438:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e02b      	b.n	8002496 <I2C_RequestMemoryWrite+0x11e>
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 800243e:	88fb      	ldrh	r3, [r7, #6]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d105      	bne.n	8002450 <I2C_RequestMemoryWrite+0xd8>
        /* Send Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002444:	893b      	ldrh	r3, [r7, #8]
 8002446:	b2da      	uxtb	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	611a      	str	r2, [r3, #16]
 800244e:	e021      	b.n	8002494 <I2C_RequestMemoryWrite+0x11c>
    }
    /* If Memory address size is 16Bit */
    else {
        /* Send MSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002450:	893b      	ldrh	r3, [r7, #8]
 8002452:	0a1b      	lsrs	r3, r3, #8
 8002454:	b29b      	uxth	r3, r3
 8002456:	b2da      	uxtb	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	611a      	str	r2, [r3, #16]

        /* Wait until TXE flag is set */
        if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 800245e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002460:	6a39      	ldr	r1, [r7, #32]
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 f9dc 	bl	8002820 <I2C_WaitOnTXEFlagUntilTimeout>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00d      	beq.n	800248a <I2C_RequestMemoryWrite+0x112>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	2b04      	cmp	r3, #4
 8002474:	d107      	bne.n	8002486 <I2C_RequestMemoryWrite+0x10e>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002484:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e005      	b.n	8002496 <I2C_RequestMemoryWrite+0x11e>
        }

        /* Send LSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800248a:	893b      	ldrh	r3, [r7, #8]
 800248c:	b2da      	uxtb	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	611a      	str	r2, [r3, #16]
    }

    return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	00010002 	.word	0x00010002

080024a4 <I2C_RequestMemoryRead>:
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef * hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize,
                                               uint32_t Timeout, uint32_t Tickstart) {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af02      	add	r7, sp, #8
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	4608      	mov	r0, r1
 80024ae:	4611      	mov	r1, r2
 80024b0:	461a      	mov	r2, r3
 80024b2:	4603      	mov	r3, r0
 80024b4:	817b      	strh	r3, [r7, #10]
 80024b6:	460b      	mov	r3, r1
 80024b8:	813b      	strh	r3, [r7, #8]
 80024ba:	4613      	mov	r3, r2
 80024bc:	80fb      	strh	r3, [r7, #6]
    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024cc:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024dc:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	6a3b      	ldr	r3, [r7, #32]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 f8c2 	bl	8002674 <I2C_WaitOnFlagUntilTimeout>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00d      	beq.n	8002512 <I2C_RequestMemoryRead+0x6e>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002504:	d103      	bne.n	800250e <I2C_RequestMemoryRead+0x6a>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f44f 7200 	mov.w	r2, #512	; 0x200
 800250c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e0aa      	b.n	8002668 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002512:	897b      	ldrh	r3, [r7, #10]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	461a      	mov	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002520:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) !=
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	6a3a      	ldr	r2, [r7, #32]
 8002526:	4952      	ldr	r1, [pc, #328]	; (8002670 <I2C_RequestMemoryRead+0x1cc>)
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 f8fa 	bl	8002722 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <I2C_RequestMemoryRead+0x94>
        HAL_OK) {
        return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e097      	b.n	8002668 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	617b      	str	r3, [r7, #20]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	697b      	ldr	r3, [r7, #20]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 800254e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002550:	6a39      	ldr	r1, [r7, #32]
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 f964 	bl	8002820 <I2C_WaitOnTXEFlagUntilTimeout>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00d      	beq.n	800257a <I2C_RequestMemoryRead+0xd6>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	2b04      	cmp	r3, #4
 8002564:	d107      	bne.n	8002576 <I2C_RequestMemoryRead+0xd2>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002574:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e076      	b.n	8002668 <I2C_RequestMemoryRead+0x1c4>
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 800257a:	88fb      	ldrh	r3, [r7, #6]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d105      	bne.n	800258c <I2C_RequestMemoryRead+0xe8>
        /* Send Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002580:	893b      	ldrh	r3, [r7, #8]
 8002582:	b2da      	uxtb	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	611a      	str	r2, [r3, #16]
 800258a:	e021      	b.n	80025d0 <I2C_RequestMemoryRead+0x12c>
    }
    /* If Memory address size is 16Bit */
    else {
        /* Send MSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800258c:	893b      	ldrh	r3, [r7, #8]
 800258e:	0a1b      	lsrs	r3, r3, #8
 8002590:	b29b      	uxth	r3, r3
 8002592:	b2da      	uxtb	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	611a      	str	r2, [r3, #16]

        /* Wait until TXE flag is set */
        if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 800259a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800259c:	6a39      	ldr	r1, [r7, #32]
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 f93e 	bl	8002820 <I2C_WaitOnTXEFlagUntilTimeout>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00d      	beq.n	80025c6 <I2C_RequestMemoryRead+0x122>
            if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d107      	bne.n	80025c2 <I2C_RequestMemoryRead+0x11e>
                /* Generate Stop */
                SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c0:	601a      	str	r2, [r3, #0]
            }
            return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e050      	b.n	8002668 <I2C_RequestMemoryRead+0x1c4>
        }

        /* Send LSB of Memory Address */
        hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025c6:	893b      	ldrh	r3, [r7, #8]
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	611a      	str	r2, [r3, #16]
    }

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 80025d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025d2:	6a39      	ldr	r1, [r7, #32]
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f000 f923 	bl	8002820 <I2C_WaitOnTXEFlagUntilTimeout>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00d      	beq.n	80025fc <I2C_RequestMemoryRead+0x158>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d107      	bne.n	80025f8 <I2C_RequestMemoryRead+0x154>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e035      	b.n	8002668 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800260a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK) {
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	2200      	movs	r2, #0
 8002614:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 f82b 	bl	8002674 <I2C_WaitOnFlagUntilTimeout>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00d      	beq.n	8002640 <I2C_RequestMemoryRead+0x19c>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002632:	d103      	bne.n	800263c <I2C_RequestMemoryRead+0x198>
            hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800263a:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e013      	b.n	8002668 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002640:	897b      	ldrh	r3, [r7, #10]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	b2da      	uxtb	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) !=
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	6a3a      	ldr	r2, [r7, #32]
 8002654:	4906      	ldr	r1, [pc, #24]	; (8002670 <I2C_RequestMemoryRead+0x1cc>)
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f000 f863 	bl	8002722 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <I2C_RequestMemoryRead+0x1c2>
        HAL_OK) {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e000      	b.n	8002668 <I2C_RequestMemoryRead+0x1c4>
    }

    return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	00010002 	.word	0x00010002

08002674 <I2C_WaitOnFlagUntilTimeout>:
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Flag,
                                                    FlagStatus Status, uint32_t Timeout,
                                                    uint32_t Tickstart) {
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	603b      	str	r3, [r7, #0]
 8002680:	4613      	mov	r3, r2
 8002682:	71fb      	strb	r3, [r7, #7]
    /* Wait until flag is set */
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 8002684:	e025      	b.n	80026d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800268c:	d021      	beq.n	80026d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 800268e:	f7fe fde9 	bl	8001264 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d302      	bcc.n	80026a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d116      	bne.n	80026d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
                hi2c->PreviousState = I2C_STATE_NONE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2220      	movs	r2, #32
 80026ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f043 0220 	orr.w	r2, r3, #32
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e023      	b.n	800271a <I2C_WaitOnFlagUntilTimeout+0xa6>
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	0c1b      	lsrs	r3, r3, #16
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d10d      	bne.n	80026f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	43da      	mvns	r2, r3
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	4013      	ands	r3, r2
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	bf0c      	ite	eq
 80026ee:	2301      	moveq	r3, #1
 80026f0:	2300      	movne	r3, #0
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	461a      	mov	r2, r3
 80026f6:	e00c      	b.n	8002712 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	43da      	mvns	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	4013      	ands	r3, r2
 8002704:	b29b      	uxth	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	bf0c      	ite	eq
 800270a:	2301      	moveq	r3, #1
 800270c:	2300      	movne	r3, #0
 800270e:	b2db      	uxtb	r3, r3
 8002710:	461a      	mov	r2, r3
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	429a      	cmp	r2, r3
 8002716:	d0b6      	beq.n	8002686 <I2C_WaitOnFlagUntilTimeout+0x12>
            }
        }
    }
    return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef * hi2c,
                                                                 uint32_t Flag, uint32_t Timeout,
                                                                 uint32_t Tickstart) {
 8002722:	b580      	push	{r7, lr}
 8002724:	b084      	sub	sp, #16
 8002726:	af00      	add	r7, sp, #0
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
 800272e:	603b      	str	r3, [r7, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 8002730:	e051      	b.n	80027d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002740:	d123      	bne.n	800278a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002750:	601a      	str	r2, [r3, #0]

            /* Clear AF Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800275a:	615a      	str	r2, [r3, #20]

            hi2c->PreviousState = I2C_STATE_NONE;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	631a      	str	r2, [r3, #48]	; 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2220      	movs	r2, #32
 8002766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	f043 0204 	orr.w	r2, r3, #4
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	641a      	str	r2, [r3, #64]	; 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e046      	b.n	8002818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002790:	d021      	beq.n	80027d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8002792:	f7fe fd67 	bl	8001264 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d302      	bcc.n	80027a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d116      	bne.n	80027d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
                hi2c->PreviousState = I2C_STATE_NONE;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2220      	movs	r2, #32
 80027b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	f043 0220 	orr.w	r2, r3, #32
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e020      	b.n	8002818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	0c1b      	lsrs	r3, r3, #16
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d10c      	bne.n	80027fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	43da      	mvns	r2, r3
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	4013      	ands	r3, r2
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	bf14      	ite	ne
 80027f2:	2301      	movne	r3, #1
 80027f4:	2300      	moveq	r3, #0
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	e00b      	b.n	8002812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	43da      	mvns	r2, r3
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	4013      	ands	r3, r2
 8002806:	b29b      	uxth	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	bf14      	ite	ne
 800280c:	2301      	movne	r3, #1
 800280e:	2300      	moveq	r3, #0
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d18d      	bne.n	8002732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
            }
        }
    }
    return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <I2C_WaitOnTXEFlagUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout,
                                                       uint32_t Tickstart) {
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 800282c:	e02d      	b.n	800288a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
        /* Check if a NACK is detected */
        if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 f8ce 	bl	80029d0 <I2C_IsAcknowledgeFailed>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
            return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e02d      	b.n	800289a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002844:	d021      	beq.n	800288a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8002846:	f7fe fd0d 	bl	8001264 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	429a      	cmp	r2, r3
 8002854:	d302      	bcc.n	800285c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d116      	bne.n	800288a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
                hi2c->PreviousState = I2C_STATE_NONE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2220      	movs	r2, #32
 8002866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	f043 0220 	orr.w	r2, r3, #32
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e007      	b.n	800289a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002894:	2b80      	cmp	r3, #128	; 0x80
 8002896:	d1ca      	bne.n	800282e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
            }
        }
    }
    return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <I2C_WaitOnBTFFlagUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout,
                                                       uint32_t Tickstart) {
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b084      	sub	sp, #16
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	60f8      	str	r0, [r7, #12]
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET) {
 80028ae:	e02d      	b.n	800290c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
        /* Check if a NACK is detected */
        if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 f88d 	bl	80029d0 <I2C_IsAcknowledgeFailed>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
            return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e02d      	b.n	800291c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
        }

        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028c6:	d021      	beq.n	800290c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
            if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 80028c8:	f7fe fccc 	bl	8001264 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d302      	bcc.n	80028de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d116      	bne.n	800290c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
                hi2c->PreviousState = I2C_STATE_NONE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	631a      	str	r2, [r3, #48]	; 0x30
                hi2c->State = HAL_I2C_STATE_READY;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2220      	movs	r2, #32
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
                hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	f043 0220 	orr.w	r2, r3, #32
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	641a      	str	r2, [r3, #64]	; 0x40

                /* Process Unlocked */
                __HAL_UNLOCK(hi2c);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e007      	b.n	800291c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET) {
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	2b04      	cmp	r3, #4
 8002918:	d1ca      	bne.n	80028b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
            }
        }
    }
    return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <I2C_WaitOnRXNEFlagUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef * hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart) {
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]

    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 8002930:	e042      	b.n	80029b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
        /* Check if a STOPF is detected */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) {
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	f003 0310 	and.w	r3, r3, #16
 800293c:	2b10      	cmp	r3, #16
 800293e:	d119      	bne.n	8002974 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f06f 0210 	mvn.w	r2, #16
 8002948:	615a      	str	r2, [r3, #20]

            hi2c->PreviousState = I2C_STATE_NONE;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	631a      	str	r2, [r3, #48]	; 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2220      	movs	r2, #32
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_NONE;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	641a      	str	r2, [r3, #64]	; 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e029      	b.n	80029c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
        }

        /* Check for the Timeout */
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8002974:	f7fe fc76 	bl	8001264 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	429a      	cmp	r2, r3
 8002982:	d302      	bcc.n	800298a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d116      	bne.n	80029b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
            hi2c->PreviousState = I2C_STATE_NONE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	631a      	str	r2, [r3, #48]	; 0x30
            hi2c->State = HAL_I2C_STATE_READY;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2220      	movs	r2, #32
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            hi2c->Mode = HAL_I2C_MODE_NONE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	f043 0220 	orr.w	r2, r3, #32
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	641a      	str	r2, [r3, #64]	; 0x40

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e007      	b.n	80029c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c2:	2b40      	cmp	r3, #64	; 0x40
 80029c4:	d1b5      	bne.n	8002932 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
        }
    }
    return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <I2C_IsAcknowledgeFailed>:
 * @brief  This function handles Acknowledge failed detection during an I2C Communication.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef * hi2c) {
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029e6:	d11b      	bne.n	8002a20 <I2C_IsAcknowledgeFailed+0x50>
        /* Clear NACKF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029f0:	615a      	str	r2, [r3, #20]

        hi2c->PreviousState = I2C_STATE_NONE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2220      	movs	r2, #32
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	f043 0204 	orr.w	r2, r3, #4
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e000      	b.n	8002a22 <I2C_IsAcknowledgeFailed+0x52>
    }
    return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a30:	b08f      	sub	sp, #60	; 0x3c
 8002a32:	af0a      	add	r7, sp, #40	; 0x28
 8002a34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e10f      	b.n	8002c60 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d106      	bne.n	8002a60 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f005 ff9a 	bl	8008994 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2203      	movs	r2, #3
 8002a64:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d102      	bne.n	8002a7a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f002 fa81 	bl	8004f86 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	603b      	str	r3, [r7, #0]
 8002a8a:	687e      	ldr	r6, [r7, #4]
 8002a8c:	466d      	mov	r5, sp
 8002a8e:	f106 0410 	add.w	r4, r6, #16
 8002a92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002aa2:	1d33      	adds	r3, r6, #4
 8002aa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aa6:	6838      	ldr	r0, [r7, #0]
 8002aa8:	f002 f958 	bl	8004d5c <USB_CoreInit>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d005      	beq.n	8002abe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e0d0      	b.n	8002c60 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f002 fa6f 	bl	8004fa8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aca:	2300      	movs	r3, #0
 8002acc:	73fb      	strb	r3, [r7, #15]
 8002ace:	e04a      	b.n	8002b66 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ad0:	7bfa      	ldrb	r2, [r7, #15]
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	4413      	add	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	333d      	adds	r3, #61	; 0x3d
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ae4:	7bfa      	ldrb	r2, [r7, #15]
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4413      	add	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	333c      	adds	r3, #60	; 0x3c
 8002af4:	7bfa      	ldrb	r2, [r7, #15]
 8002af6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002af8:	7bfa      	ldrb	r2, [r7, #15]
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
 8002afc:	b298      	uxth	r0, r3
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4413      	add	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	3344      	adds	r3, #68	; 0x44
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b10:	7bfa      	ldrb	r2, [r7, #15]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	3340      	adds	r3, #64	; 0x40
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b24:	7bfa      	ldrb	r2, [r7, #15]
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	3348      	adds	r3, #72	; 0x48
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b38:	7bfa      	ldrb	r2, [r7, #15]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	4413      	add	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	334c      	adds	r3, #76	; 0x4c
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b4c:	7bfa      	ldrb	r2, [r7, #15]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	4413      	add	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	3354      	adds	r3, #84	; 0x54
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	3301      	adds	r3, #1
 8002b64:	73fb      	strb	r3, [r7, #15]
 8002b66:	7bfa      	ldrb	r2, [r7, #15]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d3af      	bcc.n	8002ad0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b70:	2300      	movs	r3, #0
 8002b72:	73fb      	strb	r3, [r7, #15]
 8002b74:	e044      	b.n	8002c00 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b76:	7bfa      	ldrb	r2, [r7, #15]
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	4413      	add	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	440b      	add	r3, r1
 8002b84:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002b88:	2200      	movs	r2, #0
 8002b8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b8c:	7bfa      	ldrb	r2, [r7, #15]
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002b9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ba0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ba2:	7bfa      	ldrb	r2, [r7, #15]
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	4413      	add	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	440b      	add	r3, r1
 8002bb0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bb8:	7bfa      	ldrb	r2, [r7, #15]
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bce:	7bfa      	ldrb	r2, [r7, #15]
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	440b      	add	r3, r1
 8002bdc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002be4:	7bfa      	ldrb	r2, [r7, #15]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4413      	add	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	73fb      	strb	r3, [r7, #15]
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d3b5      	bcc.n	8002b76 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	603b      	str	r3, [r7, #0]
 8002c10:	687e      	ldr	r6, [r7, #4]
 8002c12:	466d      	mov	r5, sp
 8002c14:	f106 0410 	add.w	r4, r6, #16
 8002c18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c20:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c24:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c28:	1d33      	adds	r3, r6, #4
 8002c2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c2c:	6838      	ldr	r0, [r7, #0]
 8002c2e:	f002 fa07 	bl	8005040 <USB_DevInit>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e00d      	b.n	8002c60 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f003 fb56 	bl	800630a <USB_DevDisconnect>

  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c68 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d101      	bne.n	8002c84 <HAL_PCD_Start+0x1c>
 8002c80:	2302      	movs	r3, #2
 8002c82:	e020      	b.n	8002cc6 <HAL_PCD_Start+0x5e>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d109      	bne.n	8002ca8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d005      	beq.n	8002ca8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f002 f959 	bl	8004f64 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f003 fb06 	bl	80062c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002cce:	b590      	push	{r4, r7, lr}
 8002cd0:	b08d      	sub	sp, #52	; 0x34
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f003 fbc4 	bl	8006472 <USB_GetMode>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f040 848a 	bne.w	8003606 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f003 fb28 	bl	800634c <USB_ReadInterrupts>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 8480 	beq.w	8003604 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	0a1b      	lsrs	r3, r3, #8
 8002d0e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f003 fb15 	bl	800634c <USB_ReadInterrupts>
 8002d22:	4603      	mov	r3, r0
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d107      	bne.n	8002d3c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	695a      	ldr	r2, [r3, #20]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f002 0202 	and.w	r2, r2, #2
 8002d3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f003 fb03 	bl	800634c <USB_ReadInterrupts>
 8002d46:	4603      	mov	r3, r0
 8002d48:	f003 0310 	and.w	r3, r3, #16
 8002d4c:	2b10      	cmp	r3, #16
 8002d4e:	d161      	bne.n	8002e14 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699a      	ldr	r2, [r3, #24]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0210 	bic.w	r2, r2, #16
 8002d5e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	f003 020f 	and.w	r2, r3, #15
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	4413      	add	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	0c5b      	lsrs	r3, r3, #17
 8002d84:	f003 030f 	and.w	r3, r3, #15
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d124      	bne.n	8002dd6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002d92:	4013      	ands	r3, r2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d035      	beq.n	8002e04 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	091b      	lsrs	r3, r3, #4
 8002da0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002da2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	461a      	mov	r2, r3
 8002daa:	6a38      	ldr	r0, [r7, #32]
 8002dac:	f003 f93a 	bl	8006024 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	691a      	ldr	r2, [r3, #16]
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	091b      	lsrs	r3, r3, #4
 8002db8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dbc:	441a      	add	r2, r3
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	6a1a      	ldr	r2, [r3, #32]
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	091b      	lsrs	r3, r3, #4
 8002dca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dce:	441a      	add	r2, r3
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	621a      	str	r2, [r3, #32]
 8002dd4:	e016      	b.n	8002e04 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	0c5b      	lsrs	r3, r3, #17
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	2b06      	cmp	r3, #6
 8002de0:	d110      	bne.n	8002e04 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002de8:	2208      	movs	r2, #8
 8002dea:	4619      	mov	r1, r3
 8002dec:	6a38      	ldr	r0, [r7, #32]
 8002dee:	f003 f919 	bl	8006024 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	6a1a      	ldr	r2, [r3, #32]
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	091b      	lsrs	r3, r3, #4
 8002dfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dfe:	441a      	add	r2, r3
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	699a      	ldr	r2, [r3, #24]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0210 	orr.w	r2, r2, #16
 8002e12:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f003 fa97 	bl	800634c <USB_ReadInterrupts>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e24:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e28:	f040 80a7 	bne.w	8002f7a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f003 fa9c 	bl	8006372 <USB_ReadDevAllOutEpInterrupt>
 8002e3a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002e3c:	e099      	b.n	8002f72 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 808e 	beq.w	8002f66 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	4611      	mov	r1, r2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f003 fac0 	bl	80063da <USB_ReadDevOutEPInterrupt>
 8002e5a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00c      	beq.n	8002e80 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	015a      	lsls	r2, r3, #5
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e72:	461a      	mov	r2, r3
 8002e74:	2301      	movs	r3, #1
 8002e76:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002e78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 fec2 	bl	8003c04 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00c      	beq.n	8002ea4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	015a      	lsls	r2, r3, #5
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e96:	461a      	mov	r2, r3
 8002e98:	2308      	movs	r3, #8
 8002e9a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002e9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 ff98 	bl	8003dd4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	f003 0310 	and.w	r3, r3, #16
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d008      	beq.n	8002ec0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eba:	461a      	mov	r2, r3
 8002ebc:	2310      	movs	r3, #16
 8002ebe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d030      	beq.n	8002f2c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed2:	2b80      	cmp	r3, #128	; 0x80
 8002ed4:	d109      	bne.n	8002eea <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	69fa      	ldr	r2, [r7, #28]
 8002ee0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ee4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ee8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eec:	4613      	mov	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	4413      	add	r3, r2
 8002efc:	3304      	adds	r3, #4
 8002efe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	78db      	ldrb	r3, [r3, #3]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d108      	bne.n	8002f1a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	4619      	mov	r1, r3
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f005 fe39 	bl	8008b8c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	015a      	lsls	r2, r3, #5
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f26:	461a      	mov	r2, r3
 8002f28:	2302      	movs	r3, #2
 8002f2a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f003 0320 	and.w	r3, r3, #32
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d008      	beq.n	8002f48 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f42:	461a      	mov	r2, r3
 8002f44:	2320      	movs	r3, #32
 8002f46:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d009      	beq.n	8002f66 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	015a      	lsls	r2, r3, #5
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	4413      	add	r3, r2
 8002f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f5e:	461a      	mov	r2, r3
 8002f60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f64:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	3301      	adds	r3, #1
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6e:	085b      	lsrs	r3, r3, #1
 8002f70:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f47f af62 	bne.w	8002e3e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f003 f9e4 	bl	800634c <USB_ReadInterrupts>
 8002f84:	4603      	mov	r3, r0
 8002f86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f8e:	f040 80db 	bne.w	8003148 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f003 fa05 	bl	80063a6 <USB_ReadDevAllInEpInterrupt>
 8002f9c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002fa2:	e0cd      	b.n	8003140 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 80c2 	beq.w	8003134 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	4611      	mov	r1, r2
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f003 fa2b 	bl	8006416 <USB_ReadDevInEPInterrupt>
 8002fc0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d057      	beq.n	800307c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	69f9      	ldr	r1, [r7, #28]
 8002fe8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fec:	4013      	ands	r3, r2
 8002fee:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	2301      	movs	r3, #1
 8003000:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d132      	bne.n	8003070 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300e:	4613      	mov	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	334c      	adds	r3, #76	; 0x4c
 800301a:	6819      	ldr	r1, [r3, #0]
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003020:	4613      	mov	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	4413      	add	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4403      	add	r3, r0
 800302a:	3348      	adds	r3, #72	; 0x48
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4419      	add	r1, r3
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003034:	4613      	mov	r3, r2
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	4413      	add	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4403      	add	r3, r0
 800303e:	334c      	adds	r3, #76	; 0x4c
 8003040:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	2b00      	cmp	r3, #0
 8003046:	d113      	bne.n	8003070 <HAL_PCD_IRQHandler+0x3a2>
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4413      	add	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	3354      	adds	r3, #84	; 0x54
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d108      	bne.n	8003070 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6818      	ldr	r0, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003068:	461a      	mov	r2, r3
 800306a:	2101      	movs	r1, #1
 800306c:	f003 fa32 	bl	80064d4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	b2db      	uxtb	r3, r3
 8003074:	4619      	mov	r1, r3
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f005 fd0d 	bl	8008a96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d008      	beq.n	8003098 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	015a      	lsls	r2, r3, #5
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	4413      	add	r3, r2
 800308e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003092:	461a      	mov	r2, r3
 8003094:	2308      	movs	r3, #8
 8003096:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f003 0310 	and.w	r3, r3, #16
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d008      	beq.n	80030b4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ae:	461a      	mov	r2, r3
 80030b0:	2310      	movs	r3, #16
 80030b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d008      	beq.n	80030d0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ca:	461a      	mov	r2, r3
 80030cc:	2340      	movs	r3, #64	; 0x40
 80030ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d023      	beq.n	8003122 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80030da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030dc:	6a38      	ldr	r0, [r7, #32]
 80030de:	f002 f913 	bl	8005308 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80030e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e4:	4613      	mov	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4413      	add	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	3338      	adds	r3, #56	; 0x38
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	4413      	add	r3, r2
 80030f2:	3304      	adds	r3, #4
 80030f4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	78db      	ldrb	r3, [r3, #3]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d108      	bne.n	8003110 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2200      	movs	r2, #0
 8003102:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	b2db      	uxtb	r3, r3
 8003108:	4619      	mov	r1, r3
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f005 fd50 	bl	8008bb0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	4413      	add	r3, r2
 8003118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800311c:	461a      	mov	r2, r3
 800311e:	2302      	movs	r3, #2
 8003120:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800312c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fcdb 	bl	8003aea <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	3301      	adds	r3, #1
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800313a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313c:	085b      	lsrs	r3, r3, #1
 800313e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003142:	2b00      	cmp	r3, #0
 8003144:	f47f af2e 	bne.w	8002fa4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f003 f8fd 	bl	800634c <USB_ReadInterrupts>
 8003152:	4603      	mov	r3, r0
 8003154:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003158:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800315c:	d122      	bne.n	80031a4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	69fa      	ldr	r2, [r7, #28]
 8003168:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800316c:	f023 0301 	bic.w	r3, r3, #1
 8003170:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003178:	2b01      	cmp	r3, #1
 800317a:	d108      	bne.n	800318e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003184:	2100      	movs	r1, #0
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 fec2 	bl	8003f10 <HAL_PCDEx_LPM_Callback>
 800318c:	e002      	b.n	8003194 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f005 fcee 	bl	8008b70 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695a      	ldr	r2, [r3, #20]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80031a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f003 f8cf 	bl	800634c <USB_ReadInterrupts>
 80031ae:	4603      	mov	r3, r0
 80031b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031b8:	d112      	bne.n	80031e0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d102      	bne.n	80031d0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f005 fcaa 	bl	8008b24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695a      	ldr	r2, [r3, #20]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80031de:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f003 f8b1 	bl	800634c <USB_ReadInterrupts>
 80031ea:	4603      	mov	r3, r0
 80031ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031f4:	f040 80b7 	bne.w	8003366 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	69fa      	ldr	r2, [r7, #28]
 8003202:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003206:	f023 0301 	bic.w	r3, r3, #1
 800320a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2110      	movs	r1, #16
 8003212:	4618      	mov	r0, r3
 8003214:	f002 f878 	bl	8005308 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003218:	2300      	movs	r3, #0
 800321a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800321c:	e046      	b.n	80032ac <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800321e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003220:	015a      	lsls	r2, r3, #5
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	4413      	add	r3, r2
 8003226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800322a:	461a      	mov	r2, r3
 800322c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003230:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	4413      	add	r3, r2
 800323a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003242:	0151      	lsls	r1, r2, #5
 8003244:	69fa      	ldr	r2, [r7, #28]
 8003246:	440a      	add	r2, r1
 8003248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800324c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003250:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	4413      	add	r3, r2
 800325a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800325e:	461a      	mov	r2, r3
 8003260:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003264:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003268:	015a      	lsls	r2, r3, #5
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	4413      	add	r3, r2
 800326e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003276:	0151      	lsls	r1, r2, #5
 8003278:	69fa      	ldr	r2, [r7, #28]
 800327a:	440a      	add	r2, r1
 800327c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003280:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003284:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003288:	015a      	lsls	r2, r3, #5
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	4413      	add	r3, r2
 800328e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003296:	0151      	lsls	r1, r2, #5
 8003298:	69fa      	ldr	r2, [r7, #28]
 800329a:	440a      	add	r2, r1
 800329c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80032a4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a8:	3301      	adds	r3, #1
 80032aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d3b3      	bcc.n	800321e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	69fa      	ldr	r2, [r7, #28]
 80032c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032c4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80032c8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d016      	beq.n	8003300 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032dc:	69fa      	ldr	r2, [r7, #28]
 80032de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032e2:	f043 030b 	orr.w	r3, r3, #11
 80032e6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	69fa      	ldr	r2, [r7, #28]
 80032f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032f8:	f043 030b 	orr.w	r3, r3, #11
 80032fc:	6453      	str	r3, [r2, #68]	; 0x44
 80032fe:	e015      	b.n	800332c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	69fa      	ldr	r2, [r7, #28]
 800330a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800330e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003312:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003316:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	69fa      	ldr	r2, [r7, #28]
 8003322:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003326:	f043 030b 	orr.w	r3, r3, #11
 800332a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	69fa      	ldr	r2, [r7, #28]
 8003336:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800333a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800333e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6818      	ldr	r0, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003350:	461a      	mov	r2, r3
 8003352:	f003 f8bf 	bl	80064d4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695a      	ldr	r2, [r3, #20]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003364:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f002 ffee 	bl	800634c <USB_ReadInterrupts>
 8003370:	4603      	mov	r3, r0
 8003372:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800337a:	d124      	bne.n	80033c6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f003 f884 	bl	800648e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f002 f839 	bl	8005402 <USB_GetDevSpeed>
 8003390:	4603      	mov	r3, r0
 8003392:	461a      	mov	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681c      	ldr	r4, [r3, #0]
 800339c:	f001 f9e8 	bl	8004770 <HAL_RCC_GetHCLKFreq>
 80033a0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	461a      	mov	r2, r3
 80033aa:	4620      	mov	r0, r4
 80033ac:	f001 fd38 	bl	8004e20 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f005 fb98 	bl	8008ae6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695a      	ldr	r2, [r3, #20]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80033c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f002 ffbe 	bl	800634c <USB_ReadInterrupts>
 80033d0:	4603      	mov	r3, r0
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d10a      	bne.n	80033f0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f005 fb75 	bl	8008aca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695a      	ldr	r2, [r3, #20]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f002 0208 	and.w	r2, r2, #8
 80033ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f002 ffa9 	bl	800634c <USB_ReadInterrupts>
 80033fa:	4603      	mov	r3, r0
 80033fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003400:	2b80      	cmp	r3, #128	; 0x80
 8003402:	d122      	bne.n	800344a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003410:	2301      	movs	r3, #1
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
 8003414:	e014      	b.n	8003440 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800341a:	4613      	mov	r3, r2
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	4413      	add	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d105      	bne.n	800343a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	b2db      	uxtb	r3, r3
 8003432:	4619      	mov	r1, r3
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 fb27 	bl	8003a88 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	3301      	adds	r3, #1
 800343e:	627b      	str	r3, [r7, #36]	; 0x24
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003446:	429a      	cmp	r2, r3
 8003448:	d3e5      	bcc.n	8003416 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f002 ff7c 	bl	800634c <USB_ReadInterrupts>
 8003454:	4603      	mov	r3, r0
 8003456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800345a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800345e:	d13b      	bne.n	80034d8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003460:	2301      	movs	r3, #1
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
 8003464:	e02b      	b.n	80034be <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	015a      	lsls	r2, r3, #5
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	4413      	add	r3, r2
 800346e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800347a:	4613      	mov	r3, r2
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	4413      	add	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	440b      	add	r3, r1
 8003484:	3340      	adds	r3, #64	; 0x40
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d115      	bne.n	80034b8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800348c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800348e:	2b00      	cmp	r3, #0
 8003490:	da12      	bge.n	80034b8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003496:	4613      	mov	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	333f      	adds	r3, #63	; 0x3f
 80034a2:	2201      	movs	r2, #1
 80034a4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	4619      	mov	r1, r3
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 fae8 	bl	8003a88 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	3301      	adds	r3, #1
 80034bc:	627b      	str	r3, [r7, #36]	; 0x24
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d3ce      	bcc.n	8003466 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695a      	ldr	r2, [r3, #20]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80034d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f002 ff35 	bl	800634c <USB_ReadInterrupts>
 80034e2:	4603      	mov	r3, r0
 80034e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034ec:	d155      	bne.n	800359a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034ee:	2301      	movs	r3, #1
 80034f0:	627b      	str	r3, [r7, #36]	; 0x24
 80034f2:	e045      	b.n	8003580 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003508:	4613      	mov	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	4413      	add	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d12e      	bne.n	800357a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800351c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800351e:	2b00      	cmp	r3, #0
 8003520:	da2b      	bge.n	800357a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800352e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003532:	429a      	cmp	r2, r3
 8003534:	d121      	bne.n	800357a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800353a:	4613      	mov	r3, r2
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	4413      	add	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	440b      	add	r3, r1
 8003544:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003548:	2201      	movs	r2, #1
 800354a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10a      	bne.n	800357a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	69fa      	ldr	r2, [r7, #28]
 800356e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003572:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003576:	6053      	str	r3, [r2, #4]
            break;
 8003578:	e007      	b.n	800358a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	3301      	adds	r3, #1
 800357e:	627b      	str	r3, [r7, #36]	; 0x24
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003586:	429a      	cmp	r2, r3
 8003588:	d3b4      	bcc.n	80034f4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695a      	ldr	r2, [r3, #20]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003598:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f002 fed4 	bl	800634c <USB_ReadInterrupts>
 80035a4:	4603      	mov	r3, r0
 80035a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80035aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ae:	d10a      	bne.n	80035c6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f005 fb0f 	bl	8008bd4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695a      	ldr	r2, [r3, #20]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80035c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f002 febe 	bl	800634c <USB_ReadInterrupts>
 80035d0:	4603      	mov	r3, r0
 80035d2:	f003 0304 	and.w	r3, r3, #4
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d115      	bne.n	8003606 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f005 faff 	bl	8008bf0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6859      	ldr	r1, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	430a      	orrs	r2, r1
 8003600:	605a      	str	r2, [r3, #4]
 8003602:	e000      	b.n	8003606 <HAL_PCD_IRQHandler+0x938>
      return;
 8003604:	bf00      	nop
    }
  }
}
 8003606:	3734      	adds	r7, #52	; 0x34
 8003608:	46bd      	mov	sp, r7
 800360a:	bd90      	pop	{r4, r7, pc}

0800360c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	460b      	mov	r3, r1
 8003616:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800361e:	2b01      	cmp	r3, #1
 8003620:	d101      	bne.n	8003626 <HAL_PCD_SetAddress+0x1a>
 8003622:	2302      	movs	r3, #2
 8003624:	e013      	b.n	800364e <HAL_PCD_SetAddress+0x42>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	78fa      	ldrb	r2, [r7, #3]
 8003632:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	78fa      	ldrb	r2, [r7, #3]
 800363c:	4611      	mov	r1, r2
 800363e:	4618      	mov	r0, r3
 8003640:	f002 fe1c 	bl	800627c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b084      	sub	sp, #16
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	4608      	mov	r0, r1
 8003660:	4611      	mov	r1, r2
 8003662:	461a      	mov	r2, r3
 8003664:	4603      	mov	r3, r0
 8003666:	70fb      	strb	r3, [r7, #3]
 8003668:	460b      	mov	r3, r1
 800366a:	803b      	strh	r3, [r7, #0]
 800366c:	4613      	mov	r3, r2
 800366e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003670:	2300      	movs	r3, #0
 8003672:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003674:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003678:	2b00      	cmp	r3, #0
 800367a:	da0f      	bge.n	800369c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	f003 020f 	and.w	r2, r3, #15
 8003682:	4613      	mov	r3, r2
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	4413      	add	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	3338      	adds	r3, #56	; 0x38
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	4413      	add	r3, r2
 8003690:	3304      	adds	r3, #4
 8003692:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2201      	movs	r2, #1
 8003698:	705a      	strb	r2, [r3, #1]
 800369a:	e00f      	b.n	80036bc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800369c:	78fb      	ldrb	r3, [r7, #3]
 800369e:	f003 020f 	and.w	r2, r3, #15
 80036a2:	4613      	mov	r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	4413      	add	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	4413      	add	r3, r2
 80036b2:	3304      	adds	r3, #4
 80036b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80036bc:	78fb      	ldrb	r3, [r7, #3]
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80036c8:	883a      	ldrh	r2, [r7, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	78ba      	ldrb	r2, [r7, #2]
 80036d2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	785b      	ldrb	r3, [r3, #1]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d004      	beq.n	80036e6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80036e6:	78bb      	ldrb	r3, [r7, #2]
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d102      	bne.n	80036f2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d101      	bne.n	8003700 <HAL_PCD_EP_Open+0xaa>
 80036fc:	2302      	movs	r3, #2
 80036fe:	e00e      	b.n	800371e <HAL_PCD_EP_Open+0xc8>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68f9      	ldr	r1, [r7, #12]
 800370e:	4618      	mov	r0, r3
 8003710:	f001 fe9c 	bl	800544c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800371c:	7afb      	ldrb	r3, [r7, #11]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b084      	sub	sp, #16
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	460b      	mov	r3, r1
 8003730:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003732:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003736:	2b00      	cmp	r3, #0
 8003738:	da0f      	bge.n	800375a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800373a:	78fb      	ldrb	r3, [r7, #3]
 800373c:	f003 020f 	and.w	r2, r3, #15
 8003740:	4613      	mov	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	4413      	add	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	3338      	adds	r3, #56	; 0x38
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	4413      	add	r3, r2
 800374e:	3304      	adds	r3, #4
 8003750:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2201      	movs	r2, #1
 8003756:	705a      	strb	r2, [r3, #1]
 8003758:	e00f      	b.n	800377a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800375a:	78fb      	ldrb	r3, [r7, #3]
 800375c:	f003 020f 	and.w	r2, r3, #15
 8003760:	4613      	mov	r3, r2
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	4413      	add	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	4413      	add	r3, r2
 8003770:	3304      	adds	r3, #4
 8003772:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800377a:	78fb      	ldrb	r3, [r7, #3]
 800377c:	f003 030f 	and.w	r3, r3, #15
 8003780:	b2da      	uxtb	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800378c:	2b01      	cmp	r3, #1
 800378e:	d101      	bne.n	8003794 <HAL_PCD_EP_Close+0x6e>
 8003790:	2302      	movs	r3, #2
 8003792:	e00e      	b.n	80037b2 <HAL_PCD_EP_Close+0x8c>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68f9      	ldr	r1, [r7, #12]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f001 feda 	bl	800555c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b086      	sub	sp, #24
 80037be:	af00      	add	r7, sp, #0
 80037c0:	60f8      	str	r0, [r7, #12]
 80037c2:	607a      	str	r2, [r7, #4]
 80037c4:	603b      	str	r3, [r7, #0]
 80037c6:	460b      	mov	r3, r1
 80037c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037ca:	7afb      	ldrb	r3, [r7, #11]
 80037cc:	f003 020f 	and.w	r2, r3, #15
 80037d0:	4613      	mov	r3, r2
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	4413      	add	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	4413      	add	r3, r2
 80037e0:	3304      	adds	r3, #4
 80037e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	2200      	movs	r2, #0
 80037f4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2200      	movs	r2, #0
 80037fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037fc:	7afb      	ldrb	r3, [r7, #11]
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	b2da      	uxtb	r2, r3
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d102      	bne.n	8003816 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003816:	7afb      	ldrb	r3, [r7, #11]
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	2b00      	cmp	r3, #0
 800381e:	d109      	bne.n	8003834 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6818      	ldr	r0, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	b2db      	uxtb	r3, r3
 800382a:	461a      	mov	r2, r3
 800382c:	6979      	ldr	r1, [r7, #20]
 800382e:	f002 f9b9 	bl	8005ba4 <USB_EP0StartXfer>
 8003832:	e008      	b.n	8003846 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6818      	ldr	r0, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	b2db      	uxtb	r3, r3
 800383e:	461a      	mov	r2, r3
 8003840:	6979      	ldr	r1, [r7, #20]
 8003842:	f001 ff67 	bl	8005714 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800385c:	78fb      	ldrb	r3, [r7, #3]
 800385e:	f003 020f 	and.w	r2, r3, #15
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	4613      	mov	r3, r2
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	4413      	add	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003872:	681b      	ldr	r3, [r3, #0]
}
 8003874:	4618      	mov	r0, r3
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	607a      	str	r2, [r7, #4]
 800388a:	603b      	str	r3, [r7, #0]
 800388c:	460b      	mov	r3, r1
 800388e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003890:	7afb      	ldrb	r3, [r7, #11]
 8003892:	f003 020f 	and.w	r2, r3, #15
 8003896:	4613      	mov	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	4413      	add	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	3338      	adds	r3, #56	; 0x38
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4413      	add	r3, r2
 80038a4:	3304      	adds	r3, #4
 80038a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	2200      	movs	r2, #0
 80038b8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2201      	movs	r2, #1
 80038be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038c0:	7afb      	ldrb	r3, [r7, #11]
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d102      	bne.n	80038da <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038da:	7afb      	ldrb	r3, [r7, #11]
 80038dc:	f003 030f 	and.w	r3, r3, #15
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d109      	bne.n	80038f8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6818      	ldr	r0, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	461a      	mov	r2, r3
 80038f0:	6979      	ldr	r1, [r7, #20]
 80038f2:	f002 f957 	bl	8005ba4 <USB_EP0StartXfer>
 80038f6:	e008      	b.n	800390a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6818      	ldr	r0, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	461a      	mov	r2, r3
 8003904:	6979      	ldr	r1, [r7, #20]
 8003906:	f001 ff05 	bl	8005714 <USB_EPStartXfer>
  }

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	f003 020f 	and.w	r2, r3, #15
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	429a      	cmp	r2, r3
 800392c:	d901      	bls.n	8003932 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e050      	b.n	80039d4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003932:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003936:	2b00      	cmp	r3, #0
 8003938:	da0f      	bge.n	800395a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800393a:	78fb      	ldrb	r3, [r7, #3]
 800393c:	f003 020f 	and.w	r2, r3, #15
 8003940:	4613      	mov	r3, r2
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	4413      	add	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	3338      	adds	r3, #56	; 0x38
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	4413      	add	r3, r2
 800394e:	3304      	adds	r3, #4
 8003950:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2201      	movs	r2, #1
 8003956:	705a      	strb	r2, [r3, #1]
 8003958:	e00d      	b.n	8003976 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800395a:	78fa      	ldrb	r2, [r7, #3]
 800395c:	4613      	mov	r3, r2
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	4413      	add	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	4413      	add	r3, r2
 800396c:	3304      	adds	r3, #4
 800396e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2201      	movs	r2, #1
 800397a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800397c:	78fb      	ldrb	r3, [r7, #3]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	b2da      	uxtb	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800398e:	2b01      	cmp	r3, #1
 8003990:	d101      	bne.n	8003996 <HAL_PCD_EP_SetStall+0x82>
 8003992:	2302      	movs	r3, #2
 8003994:	e01e      	b.n	80039d4 <HAL_PCD_EP_SetStall+0xc0>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68f9      	ldr	r1, [r7, #12]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f002 fb95 	bl	80060d4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039aa:	78fb      	ldrb	r3, [r7, #3]
 80039ac:	f003 030f 	and.w	r3, r3, #15
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10a      	bne.n	80039ca <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6818      	ldr	r0, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	b2d9      	uxtb	r1, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039c4:	461a      	mov	r2, r3
 80039c6:	f002 fd85 	bl	80064d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	460b      	mov	r3, r1
 80039e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80039e8:	78fb      	ldrb	r3, [r7, #3]
 80039ea:	f003 020f 	and.w	r2, r3, #15
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d901      	bls.n	80039fa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e042      	b.n	8003a80 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	da0f      	bge.n	8003a22 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a02:	78fb      	ldrb	r3, [r7, #3]
 8003a04:	f003 020f 	and.w	r2, r3, #15
 8003a08:	4613      	mov	r3, r2
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	4413      	add	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	3338      	adds	r3, #56	; 0x38
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	4413      	add	r3, r2
 8003a16:	3304      	adds	r3, #4
 8003a18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	705a      	strb	r2, [r3, #1]
 8003a20:	e00f      	b.n	8003a42 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a22:	78fb      	ldrb	r3, [r7, #3]
 8003a24:	f003 020f 	and.w	r2, r3, #15
 8003a28:	4613      	mov	r3, r2
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	4413      	add	r3, r2
 8003a38:	3304      	adds	r3, #4
 8003a3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a48:	78fb      	ldrb	r3, [r7, #3]
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d101      	bne.n	8003a62 <HAL_PCD_EP_ClrStall+0x86>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e00e      	b.n	8003a80 <HAL_PCD_EP_ClrStall+0xa4>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68f9      	ldr	r1, [r7, #12]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f002 fb9d 	bl	80061b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	460b      	mov	r3, r1
 8003a92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003a94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	da0c      	bge.n	8003ab6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a9c:	78fb      	ldrb	r3, [r7, #3]
 8003a9e:	f003 020f 	and.w	r2, r3, #15
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	4413      	add	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	3338      	adds	r3, #56	; 0x38
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	4413      	add	r3, r2
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	e00c      	b.n	8003ad0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ab6:	78fb      	ldrb	r3, [r7, #3]
 8003ab8:	f003 020f 	and.w	r2, r3, #15
 8003abc:	4613      	mov	r3, r2
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	4413      	add	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	4413      	add	r3, r2
 8003acc:	3304      	adds	r3, #4
 8003ace:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68f9      	ldr	r1, [r7, #12]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f002 f9bc 	bl	8005e54 <USB_EPStopXfer>
 8003adc:	4603      	mov	r3, r0
 8003ade:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003ae0:	7afb      	ldrb	r3, [r7, #11]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b08a      	sub	sp, #40	; 0x28
 8003aee:	af02      	add	r7, sp, #8
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	4613      	mov	r3, r2
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	4413      	add	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	3338      	adds	r3, #56	; 0x38
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	3304      	adds	r3, #4
 8003b10:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a1a      	ldr	r2, [r3, #32]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d901      	bls.n	8003b22 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e06c      	b.n	8003bfc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d902      	bls.n	8003b3e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	3303      	adds	r3, #3
 8003b42:	089b      	lsrs	r3, r3, #2
 8003b44:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b46:	e02b      	b.n	8003ba0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	699a      	ldr	r2, [r3, #24]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	69fa      	ldr	r2, [r7, #28]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d902      	bls.n	8003b64 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	3303      	adds	r3, #3
 8003b68:	089b      	lsrs	r3, r3, #2
 8003b6a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6919      	ldr	r1, [r3, #16]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	4603      	mov	r3, r0
 8003b82:	6978      	ldr	r0, [r7, #20]
 8003b84:	f002 fa10 	bl	8005fa8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	441a      	add	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a1a      	ldr	r2, [r3, #32]
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	441a      	add	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	015a      	lsls	r2, r3, #5
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d809      	bhi.n	8003bca <PCD_WriteEmptyTxFifo+0xe0>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a1a      	ldr	r2, [r3, #32]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d203      	bcs.n	8003bca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1be      	bne.n	8003b48 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	699a      	ldr	r2, [r3, #24]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d811      	bhi.n	8003bfa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	f003 030f 	and.w	r3, r3, #15
 8003bdc:	2201      	movs	r2, #1
 8003bde:	fa02 f303 	lsl.w	r3, r2, r3
 8003be2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	6939      	ldr	r1, [r7, #16]
 8003bf2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3720      	adds	r7, #32
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b088      	sub	sp, #32
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	333c      	adds	r3, #60	; 0x3c
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	015a      	lsls	r2, r3, #5
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d17b      	bne.n	8003d32 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	f003 0308 	and.w	r3, r3, #8
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d015      	beq.n	8003c70 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	4a61      	ldr	r2, [pc, #388]	; (8003dcc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	f240 80b9 	bls.w	8003dc0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 80b3 	beq.w	8003dc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	015a      	lsls	r2, r3, #5
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	4413      	add	r3, r2
 8003c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c66:	461a      	mov	r2, r3
 8003c68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c6c:	6093      	str	r3, [r2, #8]
 8003c6e:	e0a7      	b.n	8003dc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	f003 0320 	and.w	r3, r3, #32
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d009      	beq.n	8003c8e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c86:	461a      	mov	r2, r3
 8003c88:	2320      	movs	r3, #32
 8003c8a:	6093      	str	r3, [r2, #8]
 8003c8c:	e098      	b.n	8003dc0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f040 8093 	bne.w	8003dc0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	4a4b      	ldr	r2, [pc, #300]	; (8003dcc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d90f      	bls.n	8003cc2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	015a      	lsls	r2, r3, #5
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb8:	461a      	mov	r2, r3
 8003cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cbe:	6093      	str	r3, [r2, #8]
 8003cc0:	e07e      	b.n	8003dc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	4413      	add	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	69da      	ldr	r2, [r3, #28]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	0159      	lsls	r1, r3, #5
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	440b      	add	r3, r1
 8003ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cee:	1ad2      	subs	r2, r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d114      	bne.n	8003d24 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d109      	bne.n	8003d16 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6818      	ldr	r0, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	2101      	movs	r1, #1
 8003d10:	f002 fbe0 	bl	80064d4 <USB_EP0_OutStart>
 8003d14:	e006      	b.n	8003d24 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	691a      	ldr	r2, [r3, #16]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	441a      	add	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	4619      	mov	r1, r3
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f004 fe98 	bl	8008a60 <HAL_PCD_DataOutStageCallback>
 8003d30:	e046      	b.n	8003dc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	4a26      	ldr	r2, [pc, #152]	; (8003dd0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d124      	bne.n	8003d84 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00a      	beq.n	8003d5a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	015a      	lsls	r2, r3, #5
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d50:	461a      	mov	r2, r3
 8003d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d56:	6093      	str	r3, [r2, #8]
 8003d58:	e032      	b.n	8003dc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	f003 0320 	and.w	r3, r3, #32
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d008      	beq.n	8003d76 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d70:	461a      	mov	r2, r3
 8003d72:	2320      	movs	r3, #32
 8003d74:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f004 fe6f 	bl	8008a60 <HAL_PCD_DataOutStageCallback>
 8003d82:	e01d      	b.n	8003dc0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d114      	bne.n	8003db4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	4413      	add	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
 8003d98:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d108      	bne.n	8003db4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003dac:	461a      	mov	r2, r3
 8003dae:	2100      	movs	r1, #0
 8003db0:	f002 fb90 	bl	80064d4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	4619      	mov	r1, r3
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f004 fe50 	bl	8008a60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3720      	adds	r7, #32
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	4f54300a 	.word	0x4f54300a
 8003dd0:	4f54310a 	.word	0x4f54310a

08003dd4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	333c      	adds	r3, #60	; 0x3c
 8003dec:	3304      	adds	r3, #4
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	015a      	lsls	r2, r3, #5
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	4a15      	ldr	r2, [pc, #84]	; (8003e5c <PCD_EP_OutSetupPacket_int+0x88>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d90e      	bls.n	8003e28 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d009      	beq.n	8003e28 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e20:	461a      	mov	r2, r3
 8003e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e26:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f004 fe07 	bl	8008a3c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4a0a      	ldr	r2, [pc, #40]	; (8003e5c <PCD_EP_OutSetupPacket_int+0x88>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d90c      	bls.n	8003e50 <PCD_EP_OutSetupPacket_int+0x7c>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d108      	bne.n	8003e50 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6818      	ldr	r0, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e48:	461a      	mov	r2, r3
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	f002 fb42 	bl	80064d4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3718      	adds	r7, #24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	4f54300a 	.word	0x4f54300a

08003e60 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	70fb      	strb	r3, [r7, #3]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003e78:	78fb      	ldrb	r3, [r7, #3]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d107      	bne.n	8003e8e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003e7e:	883b      	ldrh	r3, [r7, #0]
 8003e80:	0419      	lsls	r1, r3, #16
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	629a      	str	r2, [r3, #40]	; 0x28
 8003e8c:	e028      	b.n	8003ee0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e94:	0c1b      	lsrs	r3, r3, #16
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	4413      	add	r3, r2
 8003e9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	73fb      	strb	r3, [r7, #15]
 8003ea0:	e00d      	b.n	8003ebe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
 8003ea8:	3340      	adds	r3, #64	; 0x40
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	0c1b      	lsrs	r3, r3, #16
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003eb8:	7bfb      	ldrb	r3, [r7, #15]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	73fb      	strb	r3, [r7, #15]
 8003ebe:	7bfa      	ldrb	r2, [r7, #15]
 8003ec0:	78fb      	ldrb	r3, [r7, #3]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d3ec      	bcc.n	8003ea2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ec8:	883b      	ldrh	r3, [r7, #0]
 8003eca:	0418      	lsls	r0, r3, #16
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6819      	ldr	r1, [r3, #0]
 8003ed0:	78fb      	ldrb	r3, [r7, #3]
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	4302      	orrs	r2, r0
 8003ed8:	3340      	adds	r3, #64	; 0x40
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	887a      	ldrh	r2, [r7, #2]
 8003f00:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e267      	b.n	800440a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d075      	beq.n	8004032 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f46:	4b88      	ldr	r3, [pc, #544]	; (8004168 <HAL_RCC_OscConfig+0x240>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 030c 	and.w	r3, r3, #12
 8003f4e:	2b04      	cmp	r3, #4
 8003f50:	d00c      	beq.n	8003f6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f52:	4b85      	ldr	r3, [pc, #532]	; (8004168 <HAL_RCC_OscConfig+0x240>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f5a:	2b08      	cmp	r3, #8
 8003f5c:	d112      	bne.n	8003f84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f5e:	4b82      	ldr	r3, [pc, #520]	; (8004168 <HAL_RCC_OscConfig+0x240>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f6a:	d10b      	bne.n	8003f84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f6c:	4b7e      	ldr	r3, [pc, #504]	; (8004168 <HAL_RCC_OscConfig+0x240>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d05b      	beq.n	8004030 <HAL_RCC_OscConfig+0x108>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d157      	bne.n	8004030 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e242      	b.n	800440a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f8c:	d106      	bne.n	8003f9c <HAL_RCC_OscConfig+0x74>
 8003f8e:	4b76      	ldr	r3, [pc, #472]	; (8004168 <HAL_RCC_OscConfig+0x240>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a75      	ldr	r2, [pc, #468]	; (8004168 <HAL_RCC_OscConfig+0x240>)
 8003f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f98:	6013      	str	r3, [r2, #0]
 8003f9a:	e01d      	b.n	8003fd8 <HAL_RCC_OscConfig+0xb0>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fa4:	d10c      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x98>
 8003fa6:	4b70      	ldr	r3, [pc, #448]	; (8004168 <HAL_RCC_OscConfig+0x240>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a6f      	ldr	r2, [pc, #444]	; (8004168 <HAL_RCC_OscConfig+0x240>)
 8003fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fb0:	6013      	str	r3, [r2, #0]
 8003fb2:	4b6d      	ldr	r3, [pc, #436]	; (8004168 <HAL_RCC_OscConfig+0x240>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a6c      	ldr	r2, [pc, #432]	; (8004168 <HAL_RCC_OscConfig+0x240>)
 8003fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	e00b      	b.n	8003fd8 <HAL_RCC_OscConfig+0xb0>
 8003fc0:	4b69      	ldr	r3, [pc, #420]	; (8004168 <HAL_RCC_OscConfig+0x240>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a68      	ldr	r2, [pc, #416]	; (8004168 <HAL_RCC_OscConfig+0x240>)
 8003fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fca:	6013      	str	r3, [r2, #0]
 8003fcc:	4b66      	ldr	r3, [pc, #408]	; (8004168 <HAL_RCC_OscConfig+0x240>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a65      	ldr	r2, [pc, #404]	; (8004168 <HAL_RCC_OscConfig+0x240>)
 8003fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d013      	beq.n	8004008 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe0:	f7fd f940 	bl	8001264 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fe8:	f7fd f93c 	bl	8001264 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b64      	cmp	r3, #100	; 0x64
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e207      	b.n	800440a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ffa:	4b5b      	ldr	r3, [pc, #364]	; (8004168 <HAL_RCC_OscConfig+0x240>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0f0      	beq.n	8003fe8 <HAL_RCC_OscConfig+0xc0>
 8004006:	e014      	b.n	8004032 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004008:	f7fd f92c 	bl	8001264 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004010:	f7fd f928 	bl	8001264 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b64      	cmp	r3, #100	; 0x64
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e1f3      	b.n	800440a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004022:	4b51      	ldr	r3, [pc, #324]	; (8004168 <HAL_RCC_OscConfig+0x240>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f0      	bne.n	8004010 <HAL_RCC_OscConfig+0xe8>
 800402e:	e000      	b.n	8004032 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d063      	beq.n	8004106 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800403e:	4b4a      	ldr	r3, [pc, #296]	; (8004168 <HAL_RCC_OscConfig+0x240>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 030c 	and.w	r3, r3, #12
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00b      	beq.n	8004062 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800404a:	4b47      	ldr	r3, [pc, #284]	; (8004168 <HAL_RCC_OscConfig+0x240>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004052:	2b08      	cmp	r3, #8
 8004054:	d11c      	bne.n	8004090 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004056:	4b44      	ldr	r3, [pc, #272]	; (8004168 <HAL_RCC_OscConfig+0x240>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d116      	bne.n	8004090 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004062:	4b41      	ldr	r3, [pc, #260]	; (8004168 <HAL_RCC_OscConfig+0x240>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d005      	beq.n	800407a <HAL_RCC_OscConfig+0x152>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d001      	beq.n	800407a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e1c7      	b.n	800440a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800407a:	4b3b      	ldr	r3, [pc, #236]	; (8004168 <HAL_RCC_OscConfig+0x240>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	4937      	ldr	r1, [pc, #220]	; (8004168 <HAL_RCC_OscConfig+0x240>)
 800408a:	4313      	orrs	r3, r2
 800408c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800408e:	e03a      	b.n	8004106 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d020      	beq.n	80040da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004098:	4b34      	ldr	r3, [pc, #208]	; (800416c <HAL_RCC_OscConfig+0x244>)
 800409a:	2201      	movs	r2, #1
 800409c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409e:	f7fd f8e1 	bl	8001264 <HAL_GetTick>
 80040a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040a4:	e008      	b.n	80040b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040a6:	f7fd f8dd 	bl	8001264 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e1a8      	b.n	800440a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b8:	4b2b      	ldr	r3, [pc, #172]	; (8004168 <HAL_RCC_OscConfig+0x240>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0f0      	beq.n	80040a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c4:	4b28      	ldr	r3, [pc, #160]	; (8004168 <HAL_RCC_OscConfig+0x240>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	4925      	ldr	r1, [pc, #148]	; (8004168 <HAL_RCC_OscConfig+0x240>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	600b      	str	r3, [r1, #0]
 80040d8:	e015      	b.n	8004106 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040da:	4b24      	ldr	r3, [pc, #144]	; (800416c <HAL_RCC_OscConfig+0x244>)
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e0:	f7fd f8c0 	bl	8001264 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040e8:	f7fd f8bc 	bl	8001264 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e187      	b.n	800440a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040fa:	4b1b      	ldr	r3, [pc, #108]	; (8004168 <HAL_RCC_OscConfig+0x240>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1f0      	bne.n	80040e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0308 	and.w	r3, r3, #8
 800410e:	2b00      	cmp	r3, #0
 8004110:	d036      	beq.n	8004180 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d016      	beq.n	8004148 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800411a:	4b15      	ldr	r3, [pc, #84]	; (8004170 <HAL_RCC_OscConfig+0x248>)
 800411c:	2201      	movs	r2, #1
 800411e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004120:	f7fd f8a0 	bl	8001264 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004128:	f7fd f89c 	bl	8001264 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e167      	b.n	800440a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800413a:	4b0b      	ldr	r3, [pc, #44]	; (8004168 <HAL_RCC_OscConfig+0x240>)
 800413c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0f0      	beq.n	8004128 <HAL_RCC_OscConfig+0x200>
 8004146:	e01b      	b.n	8004180 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004148:	4b09      	ldr	r3, [pc, #36]	; (8004170 <HAL_RCC_OscConfig+0x248>)
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800414e:	f7fd f889 	bl	8001264 <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004154:	e00e      	b.n	8004174 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004156:	f7fd f885 	bl	8001264 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d907      	bls.n	8004174 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e150      	b.n	800440a <HAL_RCC_OscConfig+0x4e2>
 8004168:	40023800 	.word	0x40023800
 800416c:	42470000 	.word	0x42470000
 8004170:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004174:	4b88      	ldr	r3, [pc, #544]	; (8004398 <HAL_RCC_OscConfig+0x470>)
 8004176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1ea      	bne.n	8004156 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 8097 	beq.w	80042bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800418e:	2300      	movs	r3, #0
 8004190:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004192:	4b81      	ldr	r3, [pc, #516]	; (8004398 <HAL_RCC_OscConfig+0x470>)
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10f      	bne.n	80041be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800419e:	2300      	movs	r3, #0
 80041a0:	60bb      	str	r3, [r7, #8]
 80041a2:	4b7d      	ldr	r3, [pc, #500]	; (8004398 <HAL_RCC_OscConfig+0x470>)
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	4a7c      	ldr	r2, [pc, #496]	; (8004398 <HAL_RCC_OscConfig+0x470>)
 80041a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ac:	6413      	str	r3, [r2, #64]	; 0x40
 80041ae:	4b7a      	ldr	r3, [pc, #488]	; (8004398 <HAL_RCC_OscConfig+0x470>)
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b6:	60bb      	str	r3, [r7, #8]
 80041b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041ba:	2301      	movs	r3, #1
 80041bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041be:	4b77      	ldr	r3, [pc, #476]	; (800439c <HAL_RCC_OscConfig+0x474>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d118      	bne.n	80041fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041ca:	4b74      	ldr	r3, [pc, #464]	; (800439c <HAL_RCC_OscConfig+0x474>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a73      	ldr	r2, [pc, #460]	; (800439c <HAL_RCC_OscConfig+0x474>)
 80041d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041d6:	f7fd f845 	bl	8001264 <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041dc:	e008      	b.n	80041f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041de:	f7fd f841 	bl	8001264 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e10c      	b.n	800440a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f0:	4b6a      	ldr	r3, [pc, #424]	; (800439c <HAL_RCC_OscConfig+0x474>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0f0      	beq.n	80041de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d106      	bne.n	8004212 <HAL_RCC_OscConfig+0x2ea>
 8004204:	4b64      	ldr	r3, [pc, #400]	; (8004398 <HAL_RCC_OscConfig+0x470>)
 8004206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004208:	4a63      	ldr	r2, [pc, #396]	; (8004398 <HAL_RCC_OscConfig+0x470>)
 800420a:	f043 0301 	orr.w	r3, r3, #1
 800420e:	6713      	str	r3, [r2, #112]	; 0x70
 8004210:	e01c      	b.n	800424c <HAL_RCC_OscConfig+0x324>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	2b05      	cmp	r3, #5
 8004218:	d10c      	bne.n	8004234 <HAL_RCC_OscConfig+0x30c>
 800421a:	4b5f      	ldr	r3, [pc, #380]	; (8004398 <HAL_RCC_OscConfig+0x470>)
 800421c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421e:	4a5e      	ldr	r2, [pc, #376]	; (8004398 <HAL_RCC_OscConfig+0x470>)
 8004220:	f043 0304 	orr.w	r3, r3, #4
 8004224:	6713      	str	r3, [r2, #112]	; 0x70
 8004226:	4b5c      	ldr	r3, [pc, #368]	; (8004398 <HAL_RCC_OscConfig+0x470>)
 8004228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422a:	4a5b      	ldr	r2, [pc, #364]	; (8004398 <HAL_RCC_OscConfig+0x470>)
 800422c:	f043 0301 	orr.w	r3, r3, #1
 8004230:	6713      	str	r3, [r2, #112]	; 0x70
 8004232:	e00b      	b.n	800424c <HAL_RCC_OscConfig+0x324>
 8004234:	4b58      	ldr	r3, [pc, #352]	; (8004398 <HAL_RCC_OscConfig+0x470>)
 8004236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004238:	4a57      	ldr	r2, [pc, #348]	; (8004398 <HAL_RCC_OscConfig+0x470>)
 800423a:	f023 0301 	bic.w	r3, r3, #1
 800423e:	6713      	str	r3, [r2, #112]	; 0x70
 8004240:	4b55      	ldr	r3, [pc, #340]	; (8004398 <HAL_RCC_OscConfig+0x470>)
 8004242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004244:	4a54      	ldr	r2, [pc, #336]	; (8004398 <HAL_RCC_OscConfig+0x470>)
 8004246:	f023 0304 	bic.w	r3, r3, #4
 800424a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d015      	beq.n	8004280 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004254:	f7fd f806 	bl	8001264 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800425a:	e00a      	b.n	8004272 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800425c:	f7fd f802 	bl	8001264 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	f241 3288 	movw	r2, #5000	; 0x1388
 800426a:	4293      	cmp	r3, r2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e0cb      	b.n	800440a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004272:	4b49      	ldr	r3, [pc, #292]	; (8004398 <HAL_RCC_OscConfig+0x470>)
 8004274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0ee      	beq.n	800425c <HAL_RCC_OscConfig+0x334>
 800427e:	e014      	b.n	80042aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004280:	f7fc fff0 	bl	8001264 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004286:	e00a      	b.n	800429e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004288:	f7fc ffec 	bl	8001264 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	f241 3288 	movw	r2, #5000	; 0x1388
 8004296:	4293      	cmp	r3, r2
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e0b5      	b.n	800440a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800429e:	4b3e      	ldr	r3, [pc, #248]	; (8004398 <HAL_RCC_OscConfig+0x470>)
 80042a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1ee      	bne.n	8004288 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042aa:	7dfb      	ldrb	r3, [r7, #23]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d105      	bne.n	80042bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042b0:	4b39      	ldr	r3, [pc, #228]	; (8004398 <HAL_RCC_OscConfig+0x470>)
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	4a38      	ldr	r2, [pc, #224]	; (8004398 <HAL_RCC_OscConfig+0x470>)
 80042b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 80a1 	beq.w	8004408 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042c6:	4b34      	ldr	r3, [pc, #208]	; (8004398 <HAL_RCC_OscConfig+0x470>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 030c 	and.w	r3, r3, #12
 80042ce:	2b08      	cmp	r3, #8
 80042d0:	d05c      	beq.n	800438c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d141      	bne.n	800435e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042da:	4b31      	ldr	r3, [pc, #196]	; (80043a0 <HAL_RCC_OscConfig+0x478>)
 80042dc:	2200      	movs	r2, #0
 80042de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e0:	f7fc ffc0 	bl	8001264 <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042e8:	f7fc ffbc 	bl	8001264 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e087      	b.n	800440a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042fa:	4b27      	ldr	r3, [pc, #156]	; (8004398 <HAL_RCC_OscConfig+0x470>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1f0      	bne.n	80042e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69da      	ldr	r2, [r3, #28]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	431a      	orrs	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	019b      	lsls	r3, r3, #6
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431c:	085b      	lsrs	r3, r3, #1
 800431e:	3b01      	subs	r3, #1
 8004320:	041b      	lsls	r3, r3, #16
 8004322:	431a      	orrs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004328:	061b      	lsls	r3, r3, #24
 800432a:	491b      	ldr	r1, [pc, #108]	; (8004398 <HAL_RCC_OscConfig+0x470>)
 800432c:	4313      	orrs	r3, r2
 800432e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004330:	4b1b      	ldr	r3, [pc, #108]	; (80043a0 <HAL_RCC_OscConfig+0x478>)
 8004332:	2201      	movs	r2, #1
 8004334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004336:	f7fc ff95 	bl	8001264 <HAL_GetTick>
 800433a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800433c:	e008      	b.n	8004350 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800433e:	f7fc ff91 	bl	8001264 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e05c      	b.n	800440a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004350:	4b11      	ldr	r3, [pc, #68]	; (8004398 <HAL_RCC_OscConfig+0x470>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0f0      	beq.n	800433e <HAL_RCC_OscConfig+0x416>
 800435c:	e054      	b.n	8004408 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435e:	4b10      	ldr	r3, [pc, #64]	; (80043a0 <HAL_RCC_OscConfig+0x478>)
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004364:	f7fc ff7e 	bl	8001264 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800436c:	f7fc ff7a 	bl	8001264 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e045      	b.n	800440a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800437e:	4b06      	ldr	r3, [pc, #24]	; (8004398 <HAL_RCC_OscConfig+0x470>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1f0      	bne.n	800436c <HAL_RCC_OscConfig+0x444>
 800438a:	e03d      	b.n	8004408 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d107      	bne.n	80043a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e038      	b.n	800440a <HAL_RCC_OscConfig+0x4e2>
 8004398:	40023800 	.word	0x40023800
 800439c:	40007000 	.word	0x40007000
 80043a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043a4:	4b1b      	ldr	r3, [pc, #108]	; (8004414 <HAL_RCC_OscConfig+0x4ec>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d028      	beq.n	8004404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043bc:	429a      	cmp	r2, r3
 80043be:	d121      	bne.n	8004404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d11a      	bne.n	8004404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043d4:	4013      	ands	r3, r2
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043dc:	4293      	cmp	r3, r2
 80043de:	d111      	bne.n	8004404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ea:	085b      	lsrs	r3, r3, #1
 80043ec:	3b01      	subs	r3, #1
 80043ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d107      	bne.n	8004404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004400:	429a      	cmp	r2, r3
 8004402:	d001      	beq.n	8004408 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e000      	b.n	800440a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3718      	adds	r7, #24
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	40023800 	.word	0x40023800

08004418 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e0cc      	b.n	80045c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800442c:	4b68      	ldr	r3, [pc, #416]	; (80045d0 <HAL_RCC_ClockConfig+0x1b8>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	429a      	cmp	r2, r3
 8004438:	d90c      	bls.n	8004454 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800443a:	4b65      	ldr	r3, [pc, #404]	; (80045d0 <HAL_RCC_ClockConfig+0x1b8>)
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004442:	4b63      	ldr	r3, [pc, #396]	; (80045d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	429a      	cmp	r2, r3
 800444e:	d001      	beq.n	8004454 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e0b8      	b.n	80045c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d020      	beq.n	80044a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	2b00      	cmp	r3, #0
 800446a:	d005      	beq.n	8004478 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800446c:	4b59      	ldr	r3, [pc, #356]	; (80045d4 <HAL_RCC_ClockConfig+0x1bc>)
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	4a58      	ldr	r2, [pc, #352]	; (80045d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004472:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004476:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0308 	and.w	r3, r3, #8
 8004480:	2b00      	cmp	r3, #0
 8004482:	d005      	beq.n	8004490 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004484:	4b53      	ldr	r3, [pc, #332]	; (80045d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	4a52      	ldr	r2, [pc, #328]	; (80045d4 <HAL_RCC_ClockConfig+0x1bc>)
 800448a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800448e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004490:	4b50      	ldr	r3, [pc, #320]	; (80045d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	494d      	ldr	r1, [pc, #308]	; (80045d4 <HAL_RCC_ClockConfig+0x1bc>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d044      	beq.n	8004538 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d107      	bne.n	80044c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044b6:	4b47      	ldr	r3, [pc, #284]	; (80045d4 <HAL_RCC_ClockConfig+0x1bc>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d119      	bne.n	80044f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e07f      	b.n	80045c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d003      	beq.n	80044d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044d2:	2b03      	cmp	r3, #3
 80044d4:	d107      	bne.n	80044e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044d6:	4b3f      	ldr	r3, [pc, #252]	; (80045d4 <HAL_RCC_ClockConfig+0x1bc>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d109      	bne.n	80044f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e06f      	b.n	80045c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e6:	4b3b      	ldr	r3, [pc, #236]	; (80045d4 <HAL_RCC_ClockConfig+0x1bc>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e067      	b.n	80045c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044f6:	4b37      	ldr	r3, [pc, #220]	; (80045d4 <HAL_RCC_ClockConfig+0x1bc>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f023 0203 	bic.w	r2, r3, #3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	4934      	ldr	r1, [pc, #208]	; (80045d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004504:	4313      	orrs	r3, r2
 8004506:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004508:	f7fc feac 	bl	8001264 <HAL_GetTick>
 800450c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800450e:	e00a      	b.n	8004526 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004510:	f7fc fea8 	bl	8001264 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	f241 3288 	movw	r2, #5000	; 0x1388
 800451e:	4293      	cmp	r3, r2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e04f      	b.n	80045c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004526:	4b2b      	ldr	r3, [pc, #172]	; (80045d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 020c 	and.w	r2, r3, #12
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	429a      	cmp	r2, r3
 8004536:	d1eb      	bne.n	8004510 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004538:	4b25      	ldr	r3, [pc, #148]	; (80045d0 <HAL_RCC_ClockConfig+0x1b8>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	429a      	cmp	r2, r3
 8004544:	d20c      	bcs.n	8004560 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004546:	4b22      	ldr	r3, [pc, #136]	; (80045d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800454e:	4b20      	ldr	r3, [pc, #128]	; (80045d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	429a      	cmp	r2, r3
 800455a:	d001      	beq.n	8004560 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e032      	b.n	80045c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	2b00      	cmp	r3, #0
 800456a:	d008      	beq.n	800457e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800456c:	4b19      	ldr	r3, [pc, #100]	; (80045d4 <HAL_RCC_ClockConfig+0x1bc>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	4916      	ldr	r1, [pc, #88]	; (80045d4 <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	4313      	orrs	r3, r2
 800457c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0308 	and.w	r3, r3, #8
 8004586:	2b00      	cmp	r3, #0
 8004588:	d009      	beq.n	800459e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800458a:	4b12      	ldr	r3, [pc, #72]	; (80045d4 <HAL_RCC_ClockConfig+0x1bc>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	490e      	ldr	r1, [pc, #56]	; (80045d4 <HAL_RCC_ClockConfig+0x1bc>)
 800459a:	4313      	orrs	r3, r2
 800459c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800459e:	f000 f821 	bl	80045e4 <HAL_RCC_GetSysClockFreq>
 80045a2:	4602      	mov	r2, r0
 80045a4:	4b0b      	ldr	r3, [pc, #44]	; (80045d4 <HAL_RCC_ClockConfig+0x1bc>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	091b      	lsrs	r3, r3, #4
 80045aa:	f003 030f 	and.w	r3, r3, #15
 80045ae:	490a      	ldr	r1, [pc, #40]	; (80045d8 <HAL_RCC_ClockConfig+0x1c0>)
 80045b0:	5ccb      	ldrb	r3, [r1, r3]
 80045b2:	fa22 f303 	lsr.w	r3, r2, r3
 80045b6:	4a09      	ldr	r2, [pc, #36]	; (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 80045b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045ba:	4b09      	ldr	r3, [pc, #36]	; (80045e0 <HAL_RCC_ClockConfig+0x1c8>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fc fe0c 	bl	80011dc <HAL_InitTick>

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	40023c00 	.word	0x40023c00
 80045d4:	40023800 	.word	0x40023800
 80045d8:	08009a0c 	.word	0x08009a0c
 80045dc:	20000000 	.word	0x20000000
 80045e0:	20000004 	.word	0x20000004

080045e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045e8:	b090      	sub	sp, #64	; 0x40
 80045ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	637b      	str	r3, [r7, #52]	; 0x34
 80045f0:	2300      	movs	r3, #0
 80045f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045f4:	2300      	movs	r3, #0
 80045f6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045fc:	4b59      	ldr	r3, [pc, #356]	; (8004764 <HAL_RCC_GetSysClockFreq+0x180>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f003 030c 	and.w	r3, r3, #12
 8004604:	2b08      	cmp	r3, #8
 8004606:	d00d      	beq.n	8004624 <HAL_RCC_GetSysClockFreq+0x40>
 8004608:	2b08      	cmp	r3, #8
 800460a:	f200 80a1 	bhi.w	8004750 <HAL_RCC_GetSysClockFreq+0x16c>
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <HAL_RCC_GetSysClockFreq+0x34>
 8004612:	2b04      	cmp	r3, #4
 8004614:	d003      	beq.n	800461e <HAL_RCC_GetSysClockFreq+0x3a>
 8004616:	e09b      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004618:	4b53      	ldr	r3, [pc, #332]	; (8004768 <HAL_RCC_GetSysClockFreq+0x184>)
 800461a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800461c:	e09b      	b.n	8004756 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800461e:	4b53      	ldr	r3, [pc, #332]	; (800476c <HAL_RCC_GetSysClockFreq+0x188>)
 8004620:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004622:	e098      	b.n	8004756 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004624:	4b4f      	ldr	r3, [pc, #316]	; (8004764 <HAL_RCC_GetSysClockFreq+0x180>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800462c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800462e:	4b4d      	ldr	r3, [pc, #308]	; (8004764 <HAL_RCC_GetSysClockFreq+0x180>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d028      	beq.n	800468c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800463a:	4b4a      	ldr	r3, [pc, #296]	; (8004764 <HAL_RCC_GetSysClockFreq+0x180>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	099b      	lsrs	r3, r3, #6
 8004640:	2200      	movs	r2, #0
 8004642:	623b      	str	r3, [r7, #32]
 8004644:	627a      	str	r2, [r7, #36]	; 0x24
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800464c:	2100      	movs	r1, #0
 800464e:	4b47      	ldr	r3, [pc, #284]	; (800476c <HAL_RCC_GetSysClockFreq+0x188>)
 8004650:	fb03 f201 	mul.w	r2, r3, r1
 8004654:	2300      	movs	r3, #0
 8004656:	fb00 f303 	mul.w	r3, r0, r3
 800465a:	4413      	add	r3, r2
 800465c:	4a43      	ldr	r2, [pc, #268]	; (800476c <HAL_RCC_GetSysClockFreq+0x188>)
 800465e:	fba0 1202 	umull	r1, r2, r0, r2
 8004662:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004664:	460a      	mov	r2, r1
 8004666:	62ba      	str	r2, [r7, #40]	; 0x28
 8004668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800466a:	4413      	add	r3, r2
 800466c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800466e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004670:	2200      	movs	r2, #0
 8004672:	61bb      	str	r3, [r7, #24]
 8004674:	61fa      	str	r2, [r7, #28]
 8004676:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800467a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800467e:	f7fb fe07 	bl	8000290 <__aeabi_uldivmod>
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	4613      	mov	r3, r2
 8004688:	63fb      	str	r3, [r7, #60]	; 0x3c
 800468a:	e053      	b.n	8004734 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800468c:	4b35      	ldr	r3, [pc, #212]	; (8004764 <HAL_RCC_GetSysClockFreq+0x180>)
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	099b      	lsrs	r3, r3, #6
 8004692:	2200      	movs	r2, #0
 8004694:	613b      	str	r3, [r7, #16]
 8004696:	617a      	str	r2, [r7, #20]
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800469e:	f04f 0b00 	mov.w	fp, #0
 80046a2:	4652      	mov	r2, sl
 80046a4:	465b      	mov	r3, fp
 80046a6:	f04f 0000 	mov.w	r0, #0
 80046aa:	f04f 0100 	mov.w	r1, #0
 80046ae:	0159      	lsls	r1, r3, #5
 80046b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046b4:	0150      	lsls	r0, r2, #5
 80046b6:	4602      	mov	r2, r0
 80046b8:	460b      	mov	r3, r1
 80046ba:	ebb2 080a 	subs.w	r8, r2, sl
 80046be:	eb63 090b 	sbc.w	r9, r3, fp
 80046c2:	f04f 0200 	mov.w	r2, #0
 80046c6:	f04f 0300 	mov.w	r3, #0
 80046ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80046ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80046d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80046d6:	ebb2 0408 	subs.w	r4, r2, r8
 80046da:	eb63 0509 	sbc.w	r5, r3, r9
 80046de:	f04f 0200 	mov.w	r2, #0
 80046e2:	f04f 0300 	mov.w	r3, #0
 80046e6:	00eb      	lsls	r3, r5, #3
 80046e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046ec:	00e2      	lsls	r2, r4, #3
 80046ee:	4614      	mov	r4, r2
 80046f0:	461d      	mov	r5, r3
 80046f2:	eb14 030a 	adds.w	r3, r4, sl
 80046f6:	603b      	str	r3, [r7, #0]
 80046f8:	eb45 030b 	adc.w	r3, r5, fp
 80046fc:	607b      	str	r3, [r7, #4]
 80046fe:	f04f 0200 	mov.w	r2, #0
 8004702:	f04f 0300 	mov.w	r3, #0
 8004706:	e9d7 4500 	ldrd	r4, r5, [r7]
 800470a:	4629      	mov	r1, r5
 800470c:	028b      	lsls	r3, r1, #10
 800470e:	4621      	mov	r1, r4
 8004710:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004714:	4621      	mov	r1, r4
 8004716:	028a      	lsls	r2, r1, #10
 8004718:	4610      	mov	r0, r2
 800471a:	4619      	mov	r1, r3
 800471c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800471e:	2200      	movs	r2, #0
 8004720:	60bb      	str	r3, [r7, #8]
 8004722:	60fa      	str	r2, [r7, #12]
 8004724:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004728:	f7fb fdb2 	bl	8000290 <__aeabi_uldivmod>
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	4613      	mov	r3, r2
 8004732:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004734:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <HAL_RCC_GetSysClockFreq+0x180>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	0c1b      	lsrs	r3, r3, #16
 800473a:	f003 0303 	and.w	r3, r3, #3
 800473e:	3301      	adds	r3, #1
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004744:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004748:	fbb2 f3f3 	udiv	r3, r2, r3
 800474c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800474e:	e002      	b.n	8004756 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004750:	4b05      	ldr	r3, [pc, #20]	; (8004768 <HAL_RCC_GetSysClockFreq+0x184>)
 8004752:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004754:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004758:	4618      	mov	r0, r3
 800475a:	3740      	adds	r7, #64	; 0x40
 800475c:	46bd      	mov	sp, r7
 800475e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004762:	bf00      	nop
 8004764:	40023800 	.word	0x40023800
 8004768:	00f42400 	.word	0x00f42400
 800476c:	017d7840 	.word	0x017d7840

08004770 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004770:	b480      	push	{r7}
 8004772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004774:	4b03      	ldr	r3, [pc, #12]	; (8004784 <HAL_RCC_GetHCLKFreq+0x14>)
 8004776:	681b      	ldr	r3, [r3, #0]
}
 8004778:	4618      	mov	r0, r3
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	20000000 	.word	0x20000000

08004788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800478c:	f7ff fff0 	bl	8004770 <HAL_RCC_GetHCLKFreq>
 8004790:	4602      	mov	r2, r0
 8004792:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	0a9b      	lsrs	r3, r3, #10
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	4903      	ldr	r1, [pc, #12]	; (80047ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800479e:	5ccb      	ldrb	r3, [r1, r3]
 80047a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40023800 	.word	0x40023800
 80047ac:	08009a1c 	.word	0x08009a1c

080047b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047b4:	f7ff ffdc 	bl	8004770 <HAL_RCC_GetHCLKFreq>
 80047b8:	4602      	mov	r2, r0
 80047ba:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	0b5b      	lsrs	r3, r3, #13
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	4903      	ldr	r1, [pc, #12]	; (80047d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047c6:	5ccb      	ldrb	r3, [r1, r3]
 80047c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	40023800 	.word	0x40023800
 80047d4:	08009a1c 	.word	0x08009a1c

080047d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e03f      	b.n	800486a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d106      	bne.n	8004804 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7fc f94c 	bl	8000a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2224      	movs	r2, #36	; 0x24
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68da      	ldr	r2, [r3, #12]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800481a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f829 	bl	8004874 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	691a      	ldr	r2, [r3, #16]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004830:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	695a      	ldr	r2, [r3, #20]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004840:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68da      	ldr	r2, [r3, #12]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004850:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2220      	movs	r2, #32
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2220      	movs	r2, #32
 8004864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
	...

08004874 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004878:	b0c0      	sub	sp, #256	; 0x100
 800487a:	af00      	add	r7, sp, #0
 800487c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800488c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004890:	68d9      	ldr	r1, [r3, #12]
 8004892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	ea40 0301 	orr.w	r3, r0, r1
 800489c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800489e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	431a      	orrs	r2, r3
 80048ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	431a      	orrs	r2, r3
 80048b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80048cc:	f021 010c 	bic.w	r1, r1, #12
 80048d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80048da:	430b      	orrs	r3, r1
 80048dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80048ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ee:	6999      	ldr	r1, [r3, #24]
 80048f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	ea40 0301 	orr.w	r3, r0, r1
 80048fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	4b8f      	ldr	r3, [pc, #572]	; (8004b40 <UART_SetConfig+0x2cc>)
 8004904:	429a      	cmp	r2, r3
 8004906:	d005      	beq.n	8004914 <UART_SetConfig+0xa0>
 8004908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	4b8d      	ldr	r3, [pc, #564]	; (8004b44 <UART_SetConfig+0x2d0>)
 8004910:	429a      	cmp	r2, r3
 8004912:	d104      	bne.n	800491e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004914:	f7ff ff4c 	bl	80047b0 <HAL_RCC_GetPCLK2Freq>
 8004918:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800491c:	e003      	b.n	8004926 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800491e:	f7ff ff33 	bl	8004788 <HAL_RCC_GetPCLK1Freq>
 8004922:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492a:	69db      	ldr	r3, [r3, #28]
 800492c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004930:	f040 810c 	bne.w	8004b4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004938:	2200      	movs	r2, #0
 800493a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800493e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004942:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004946:	4622      	mov	r2, r4
 8004948:	462b      	mov	r3, r5
 800494a:	1891      	adds	r1, r2, r2
 800494c:	65b9      	str	r1, [r7, #88]	; 0x58
 800494e:	415b      	adcs	r3, r3
 8004950:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004952:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004956:	4621      	mov	r1, r4
 8004958:	eb12 0801 	adds.w	r8, r2, r1
 800495c:	4629      	mov	r1, r5
 800495e:	eb43 0901 	adc.w	r9, r3, r1
 8004962:	f04f 0200 	mov.w	r2, #0
 8004966:	f04f 0300 	mov.w	r3, #0
 800496a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800496e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004972:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004976:	4690      	mov	r8, r2
 8004978:	4699      	mov	r9, r3
 800497a:	4623      	mov	r3, r4
 800497c:	eb18 0303 	adds.w	r3, r8, r3
 8004980:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004984:	462b      	mov	r3, r5
 8004986:	eb49 0303 	adc.w	r3, r9, r3
 800498a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800498e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800499a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800499e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80049a2:	460b      	mov	r3, r1
 80049a4:	18db      	adds	r3, r3, r3
 80049a6:	653b      	str	r3, [r7, #80]	; 0x50
 80049a8:	4613      	mov	r3, r2
 80049aa:	eb42 0303 	adc.w	r3, r2, r3
 80049ae:	657b      	str	r3, [r7, #84]	; 0x54
 80049b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80049b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80049b8:	f7fb fc6a 	bl	8000290 <__aeabi_uldivmod>
 80049bc:	4602      	mov	r2, r0
 80049be:	460b      	mov	r3, r1
 80049c0:	4b61      	ldr	r3, [pc, #388]	; (8004b48 <UART_SetConfig+0x2d4>)
 80049c2:	fba3 2302 	umull	r2, r3, r3, r2
 80049c6:	095b      	lsrs	r3, r3, #5
 80049c8:	011c      	lsls	r4, r3, #4
 80049ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049ce:	2200      	movs	r2, #0
 80049d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80049d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80049dc:	4642      	mov	r2, r8
 80049de:	464b      	mov	r3, r9
 80049e0:	1891      	adds	r1, r2, r2
 80049e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80049e4:	415b      	adcs	r3, r3
 80049e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80049ec:	4641      	mov	r1, r8
 80049ee:	eb12 0a01 	adds.w	sl, r2, r1
 80049f2:	4649      	mov	r1, r9
 80049f4:	eb43 0b01 	adc.w	fp, r3, r1
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	f04f 0300 	mov.w	r3, #0
 8004a00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a0c:	4692      	mov	sl, r2
 8004a0e:	469b      	mov	fp, r3
 8004a10:	4643      	mov	r3, r8
 8004a12:	eb1a 0303 	adds.w	r3, sl, r3
 8004a16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a1a:	464b      	mov	r3, r9
 8004a1c:	eb4b 0303 	adc.w	r3, fp, r3
 8004a20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a30:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a38:	460b      	mov	r3, r1
 8004a3a:	18db      	adds	r3, r3, r3
 8004a3c:	643b      	str	r3, [r7, #64]	; 0x40
 8004a3e:	4613      	mov	r3, r2
 8004a40:	eb42 0303 	adc.w	r3, r2, r3
 8004a44:	647b      	str	r3, [r7, #68]	; 0x44
 8004a46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a4e:	f7fb fc1f 	bl	8000290 <__aeabi_uldivmod>
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	4611      	mov	r1, r2
 8004a58:	4b3b      	ldr	r3, [pc, #236]	; (8004b48 <UART_SetConfig+0x2d4>)
 8004a5a:	fba3 2301 	umull	r2, r3, r3, r1
 8004a5e:	095b      	lsrs	r3, r3, #5
 8004a60:	2264      	movs	r2, #100	; 0x64
 8004a62:	fb02 f303 	mul.w	r3, r2, r3
 8004a66:	1acb      	subs	r3, r1, r3
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a6e:	4b36      	ldr	r3, [pc, #216]	; (8004b48 <UART_SetConfig+0x2d4>)
 8004a70:	fba3 2302 	umull	r2, r3, r3, r2
 8004a74:	095b      	lsrs	r3, r3, #5
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a7c:	441c      	add	r4, r3
 8004a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a82:	2200      	movs	r2, #0
 8004a84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a88:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a90:	4642      	mov	r2, r8
 8004a92:	464b      	mov	r3, r9
 8004a94:	1891      	adds	r1, r2, r2
 8004a96:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a98:	415b      	adcs	r3, r3
 8004a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004aa0:	4641      	mov	r1, r8
 8004aa2:	1851      	adds	r1, r2, r1
 8004aa4:	6339      	str	r1, [r7, #48]	; 0x30
 8004aa6:	4649      	mov	r1, r9
 8004aa8:	414b      	adcs	r3, r1
 8004aaa:	637b      	str	r3, [r7, #52]	; 0x34
 8004aac:	f04f 0200 	mov.w	r2, #0
 8004ab0:	f04f 0300 	mov.w	r3, #0
 8004ab4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ab8:	4659      	mov	r1, fp
 8004aba:	00cb      	lsls	r3, r1, #3
 8004abc:	4651      	mov	r1, sl
 8004abe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ac2:	4651      	mov	r1, sl
 8004ac4:	00ca      	lsls	r2, r1, #3
 8004ac6:	4610      	mov	r0, r2
 8004ac8:	4619      	mov	r1, r3
 8004aca:	4603      	mov	r3, r0
 8004acc:	4642      	mov	r2, r8
 8004ace:	189b      	adds	r3, r3, r2
 8004ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ad4:	464b      	mov	r3, r9
 8004ad6:	460a      	mov	r2, r1
 8004ad8:	eb42 0303 	adc.w	r3, r2, r3
 8004adc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004aec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004af0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004af4:	460b      	mov	r3, r1
 8004af6:	18db      	adds	r3, r3, r3
 8004af8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004afa:	4613      	mov	r3, r2
 8004afc:	eb42 0303 	adc.w	r3, r2, r3
 8004b00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b0a:	f7fb fbc1 	bl	8000290 <__aeabi_uldivmod>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	4b0d      	ldr	r3, [pc, #52]	; (8004b48 <UART_SetConfig+0x2d4>)
 8004b14:	fba3 1302 	umull	r1, r3, r3, r2
 8004b18:	095b      	lsrs	r3, r3, #5
 8004b1a:	2164      	movs	r1, #100	; 0x64
 8004b1c:	fb01 f303 	mul.w	r3, r1, r3
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	3332      	adds	r3, #50	; 0x32
 8004b26:	4a08      	ldr	r2, [pc, #32]	; (8004b48 <UART_SetConfig+0x2d4>)
 8004b28:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2c:	095b      	lsrs	r3, r3, #5
 8004b2e:	f003 0207 	and.w	r2, r3, #7
 8004b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4422      	add	r2, r4
 8004b3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b3c:	e106      	b.n	8004d4c <UART_SetConfig+0x4d8>
 8004b3e:	bf00      	nop
 8004b40:	40011000 	.word	0x40011000
 8004b44:	40011400 	.word	0x40011400
 8004b48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b50:	2200      	movs	r2, #0
 8004b52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b56:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b5e:	4642      	mov	r2, r8
 8004b60:	464b      	mov	r3, r9
 8004b62:	1891      	adds	r1, r2, r2
 8004b64:	6239      	str	r1, [r7, #32]
 8004b66:	415b      	adcs	r3, r3
 8004b68:	627b      	str	r3, [r7, #36]	; 0x24
 8004b6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b6e:	4641      	mov	r1, r8
 8004b70:	1854      	adds	r4, r2, r1
 8004b72:	4649      	mov	r1, r9
 8004b74:	eb43 0501 	adc.w	r5, r3, r1
 8004b78:	f04f 0200 	mov.w	r2, #0
 8004b7c:	f04f 0300 	mov.w	r3, #0
 8004b80:	00eb      	lsls	r3, r5, #3
 8004b82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b86:	00e2      	lsls	r2, r4, #3
 8004b88:	4614      	mov	r4, r2
 8004b8a:	461d      	mov	r5, r3
 8004b8c:	4643      	mov	r3, r8
 8004b8e:	18e3      	adds	r3, r4, r3
 8004b90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b94:	464b      	mov	r3, r9
 8004b96:	eb45 0303 	adc.w	r3, r5, r3
 8004b9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004baa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bae:	f04f 0200 	mov.w	r2, #0
 8004bb2:	f04f 0300 	mov.w	r3, #0
 8004bb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004bba:	4629      	mov	r1, r5
 8004bbc:	008b      	lsls	r3, r1, #2
 8004bbe:	4621      	mov	r1, r4
 8004bc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bc4:	4621      	mov	r1, r4
 8004bc6:	008a      	lsls	r2, r1, #2
 8004bc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004bcc:	f7fb fb60 	bl	8000290 <__aeabi_uldivmod>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	4b60      	ldr	r3, [pc, #384]	; (8004d58 <UART_SetConfig+0x4e4>)
 8004bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8004bda:	095b      	lsrs	r3, r3, #5
 8004bdc:	011c      	lsls	r4, r3, #4
 8004bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004be2:	2200      	movs	r2, #0
 8004be4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004be8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004bec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004bf0:	4642      	mov	r2, r8
 8004bf2:	464b      	mov	r3, r9
 8004bf4:	1891      	adds	r1, r2, r2
 8004bf6:	61b9      	str	r1, [r7, #24]
 8004bf8:	415b      	adcs	r3, r3
 8004bfa:	61fb      	str	r3, [r7, #28]
 8004bfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c00:	4641      	mov	r1, r8
 8004c02:	1851      	adds	r1, r2, r1
 8004c04:	6139      	str	r1, [r7, #16]
 8004c06:	4649      	mov	r1, r9
 8004c08:	414b      	adcs	r3, r1
 8004c0a:	617b      	str	r3, [r7, #20]
 8004c0c:	f04f 0200 	mov.w	r2, #0
 8004c10:	f04f 0300 	mov.w	r3, #0
 8004c14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c18:	4659      	mov	r1, fp
 8004c1a:	00cb      	lsls	r3, r1, #3
 8004c1c:	4651      	mov	r1, sl
 8004c1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c22:	4651      	mov	r1, sl
 8004c24:	00ca      	lsls	r2, r1, #3
 8004c26:	4610      	mov	r0, r2
 8004c28:	4619      	mov	r1, r3
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	4642      	mov	r2, r8
 8004c2e:	189b      	adds	r3, r3, r2
 8004c30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c34:	464b      	mov	r3, r9
 8004c36:	460a      	mov	r2, r1
 8004c38:	eb42 0303 	adc.w	r3, r2, r3
 8004c3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c4a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c58:	4649      	mov	r1, r9
 8004c5a:	008b      	lsls	r3, r1, #2
 8004c5c:	4641      	mov	r1, r8
 8004c5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c62:	4641      	mov	r1, r8
 8004c64:	008a      	lsls	r2, r1, #2
 8004c66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c6a:	f7fb fb11 	bl	8000290 <__aeabi_uldivmod>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	4611      	mov	r1, r2
 8004c74:	4b38      	ldr	r3, [pc, #224]	; (8004d58 <UART_SetConfig+0x4e4>)
 8004c76:	fba3 2301 	umull	r2, r3, r3, r1
 8004c7a:	095b      	lsrs	r3, r3, #5
 8004c7c:	2264      	movs	r2, #100	; 0x64
 8004c7e:	fb02 f303 	mul.w	r3, r2, r3
 8004c82:	1acb      	subs	r3, r1, r3
 8004c84:	011b      	lsls	r3, r3, #4
 8004c86:	3332      	adds	r3, #50	; 0x32
 8004c88:	4a33      	ldr	r2, [pc, #204]	; (8004d58 <UART_SetConfig+0x4e4>)
 8004c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8e:	095b      	lsrs	r3, r3, #5
 8004c90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c94:	441c      	add	r4, r3
 8004c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	673b      	str	r3, [r7, #112]	; 0x70
 8004c9e:	677a      	str	r2, [r7, #116]	; 0x74
 8004ca0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ca4:	4642      	mov	r2, r8
 8004ca6:	464b      	mov	r3, r9
 8004ca8:	1891      	adds	r1, r2, r2
 8004caa:	60b9      	str	r1, [r7, #8]
 8004cac:	415b      	adcs	r3, r3
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cb4:	4641      	mov	r1, r8
 8004cb6:	1851      	adds	r1, r2, r1
 8004cb8:	6039      	str	r1, [r7, #0]
 8004cba:	4649      	mov	r1, r9
 8004cbc:	414b      	adcs	r3, r1
 8004cbe:	607b      	str	r3, [r7, #4]
 8004cc0:	f04f 0200 	mov.w	r2, #0
 8004cc4:	f04f 0300 	mov.w	r3, #0
 8004cc8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ccc:	4659      	mov	r1, fp
 8004cce:	00cb      	lsls	r3, r1, #3
 8004cd0:	4651      	mov	r1, sl
 8004cd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cd6:	4651      	mov	r1, sl
 8004cd8:	00ca      	lsls	r2, r1, #3
 8004cda:	4610      	mov	r0, r2
 8004cdc:	4619      	mov	r1, r3
 8004cde:	4603      	mov	r3, r0
 8004ce0:	4642      	mov	r2, r8
 8004ce2:	189b      	adds	r3, r3, r2
 8004ce4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ce6:	464b      	mov	r3, r9
 8004ce8:	460a      	mov	r2, r1
 8004cea:	eb42 0303 	adc.w	r3, r2, r3
 8004cee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	663b      	str	r3, [r7, #96]	; 0x60
 8004cfa:	667a      	str	r2, [r7, #100]	; 0x64
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	f04f 0300 	mov.w	r3, #0
 8004d04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d08:	4649      	mov	r1, r9
 8004d0a:	008b      	lsls	r3, r1, #2
 8004d0c:	4641      	mov	r1, r8
 8004d0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d12:	4641      	mov	r1, r8
 8004d14:	008a      	lsls	r2, r1, #2
 8004d16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d1a:	f7fb fab9 	bl	8000290 <__aeabi_uldivmod>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	4b0d      	ldr	r3, [pc, #52]	; (8004d58 <UART_SetConfig+0x4e4>)
 8004d24:	fba3 1302 	umull	r1, r3, r3, r2
 8004d28:	095b      	lsrs	r3, r3, #5
 8004d2a:	2164      	movs	r1, #100	; 0x64
 8004d2c:	fb01 f303 	mul.w	r3, r1, r3
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	3332      	adds	r3, #50	; 0x32
 8004d36:	4a08      	ldr	r2, [pc, #32]	; (8004d58 <UART_SetConfig+0x4e4>)
 8004d38:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3c:	095b      	lsrs	r3, r3, #5
 8004d3e:	f003 020f 	and.w	r2, r3, #15
 8004d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4422      	add	r2, r4
 8004d4a:	609a      	str	r2, [r3, #8]
}
 8004d4c:	bf00      	nop
 8004d4e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d52:	46bd      	mov	sp, r7
 8004d54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d58:	51eb851f 	.word	0x51eb851f

08004d5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d5c:	b084      	sub	sp, #16
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b084      	sub	sp, #16
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	f107 001c 	add.w	r0, r7, #28
 8004d6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d122      	bne.n	8004dba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004d88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d105      	bne.n	8004dae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f001 fbee 	bl	8006590 <USB_CoreReset>
 8004db4:	4603      	mov	r3, r0
 8004db6:	73fb      	strb	r3, [r7, #15]
 8004db8:	e01a      	b.n	8004df0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f001 fbe2 	bl	8006590 <USB_CoreReset>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d106      	bne.n	8004de4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dda:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	639a      	str	r2, [r3, #56]	; 0x38
 8004de2:	e005      	b.n	8004df0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d10b      	bne.n	8004e0e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f043 0206 	orr.w	r2, r3, #6
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f043 0220 	orr.w	r2, r3, #32
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e1a:	b004      	add	sp, #16
 8004e1c:	4770      	bx	lr
	...

08004e20 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b087      	sub	sp, #28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e2e:	79fb      	ldrb	r3, [r7, #7]
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d165      	bne.n	8004f00 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4a41      	ldr	r2, [pc, #260]	; (8004f3c <USB_SetTurnaroundTime+0x11c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d906      	bls.n	8004e4a <USB_SetTurnaroundTime+0x2a>
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4a40      	ldr	r2, [pc, #256]	; (8004f40 <USB_SetTurnaroundTime+0x120>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d202      	bcs.n	8004e4a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004e44:	230f      	movs	r3, #15
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	e062      	b.n	8004f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	4a3c      	ldr	r2, [pc, #240]	; (8004f40 <USB_SetTurnaroundTime+0x120>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d306      	bcc.n	8004e60 <USB_SetTurnaroundTime+0x40>
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	4a3b      	ldr	r2, [pc, #236]	; (8004f44 <USB_SetTurnaroundTime+0x124>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d202      	bcs.n	8004e60 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004e5a:	230e      	movs	r3, #14
 8004e5c:	617b      	str	r3, [r7, #20]
 8004e5e:	e057      	b.n	8004f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	4a38      	ldr	r2, [pc, #224]	; (8004f44 <USB_SetTurnaroundTime+0x124>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d306      	bcc.n	8004e76 <USB_SetTurnaroundTime+0x56>
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	4a37      	ldr	r2, [pc, #220]	; (8004f48 <USB_SetTurnaroundTime+0x128>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d202      	bcs.n	8004e76 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004e70:	230d      	movs	r3, #13
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	e04c      	b.n	8004f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	4a33      	ldr	r2, [pc, #204]	; (8004f48 <USB_SetTurnaroundTime+0x128>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d306      	bcc.n	8004e8c <USB_SetTurnaroundTime+0x6c>
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	4a32      	ldr	r2, [pc, #200]	; (8004f4c <USB_SetTurnaroundTime+0x12c>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d802      	bhi.n	8004e8c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004e86:	230c      	movs	r3, #12
 8004e88:	617b      	str	r3, [r7, #20]
 8004e8a:	e041      	b.n	8004f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4a2f      	ldr	r2, [pc, #188]	; (8004f4c <USB_SetTurnaroundTime+0x12c>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d906      	bls.n	8004ea2 <USB_SetTurnaroundTime+0x82>
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	4a2e      	ldr	r2, [pc, #184]	; (8004f50 <USB_SetTurnaroundTime+0x130>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d802      	bhi.n	8004ea2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004e9c:	230b      	movs	r3, #11
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	e036      	b.n	8004f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	4a2a      	ldr	r2, [pc, #168]	; (8004f50 <USB_SetTurnaroundTime+0x130>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d906      	bls.n	8004eb8 <USB_SetTurnaroundTime+0x98>
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	4a29      	ldr	r2, [pc, #164]	; (8004f54 <USB_SetTurnaroundTime+0x134>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d802      	bhi.n	8004eb8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004eb2:	230a      	movs	r3, #10
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	e02b      	b.n	8004f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	4a26      	ldr	r2, [pc, #152]	; (8004f54 <USB_SetTurnaroundTime+0x134>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d906      	bls.n	8004ece <USB_SetTurnaroundTime+0xae>
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	4a25      	ldr	r2, [pc, #148]	; (8004f58 <USB_SetTurnaroundTime+0x138>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d202      	bcs.n	8004ece <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004ec8:	2309      	movs	r3, #9
 8004eca:	617b      	str	r3, [r7, #20]
 8004ecc:	e020      	b.n	8004f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	4a21      	ldr	r2, [pc, #132]	; (8004f58 <USB_SetTurnaroundTime+0x138>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d306      	bcc.n	8004ee4 <USB_SetTurnaroundTime+0xc4>
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	4a20      	ldr	r2, [pc, #128]	; (8004f5c <USB_SetTurnaroundTime+0x13c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d802      	bhi.n	8004ee4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004ede:	2308      	movs	r3, #8
 8004ee0:	617b      	str	r3, [r7, #20]
 8004ee2:	e015      	b.n	8004f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4a1d      	ldr	r2, [pc, #116]	; (8004f5c <USB_SetTurnaroundTime+0x13c>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d906      	bls.n	8004efa <USB_SetTurnaroundTime+0xda>
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	4a1c      	ldr	r2, [pc, #112]	; (8004f60 <USB_SetTurnaroundTime+0x140>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d202      	bcs.n	8004efa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004ef4:	2307      	movs	r3, #7
 8004ef6:	617b      	str	r3, [r7, #20]
 8004ef8:	e00a      	b.n	8004f10 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004efa:	2306      	movs	r3, #6
 8004efc:	617b      	str	r3, [r7, #20]
 8004efe:	e007      	b.n	8004f10 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004f00:	79fb      	ldrb	r3, [r7, #7]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d102      	bne.n	8004f0c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004f06:	2309      	movs	r3, #9
 8004f08:	617b      	str	r3, [r7, #20]
 8004f0a:	e001      	b.n	8004f10 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004f0c:	2309      	movs	r3, #9
 8004f0e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	68da      	ldr	r2, [r3, #12]
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	029b      	lsls	r3, r3, #10
 8004f24:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	371c      	adds	r7, #28
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	00d8acbf 	.word	0x00d8acbf
 8004f40:	00e4e1c0 	.word	0x00e4e1c0
 8004f44:	00f42400 	.word	0x00f42400
 8004f48:	01067380 	.word	0x01067380
 8004f4c:	011a499f 	.word	0x011a499f
 8004f50:	01312cff 	.word	0x01312cff
 8004f54:	014ca43f 	.word	0x014ca43f
 8004f58:	016e3600 	.word	0x016e3600
 8004f5c:	01a6ab1f 	.word	0x01a6ab1f
 8004f60:	01e84800 	.word	0x01e84800

08004f64 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f043 0201 	orr.w	r2, r3, #1
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f023 0201 	bic.w	r2, r3, #1
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004fc4:	78fb      	ldrb	r3, [r7, #3]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d115      	bne.n	8004ff6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fd6:	2001      	movs	r0, #1
 8004fd8:	f7fc f950 	bl	800127c <HAL_Delay>
      ms++;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f001 fa45 	bl	8006472 <USB_GetMode>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d01e      	beq.n	800502c <USB_SetCurrentMode+0x84>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2b31      	cmp	r3, #49	; 0x31
 8004ff2:	d9f0      	bls.n	8004fd6 <USB_SetCurrentMode+0x2e>
 8004ff4:	e01a      	b.n	800502c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ff6:	78fb      	ldrb	r3, [r7, #3]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d115      	bne.n	8005028 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005008:	2001      	movs	r0, #1
 800500a:	f7fc f937 	bl	800127c <HAL_Delay>
      ms++;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	3301      	adds	r3, #1
 8005012:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f001 fa2c 	bl	8006472 <USB_GetMode>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d005      	beq.n	800502c <USB_SetCurrentMode+0x84>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2b31      	cmp	r3, #49	; 0x31
 8005024:	d9f0      	bls.n	8005008 <USB_SetCurrentMode+0x60>
 8005026:	e001      	b.n	800502c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e005      	b.n	8005038 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b32      	cmp	r3, #50	; 0x32
 8005030:	d101      	bne.n	8005036 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e000      	b.n	8005038 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005040:	b084      	sub	sp, #16
 8005042:	b580      	push	{r7, lr}
 8005044:	b086      	sub	sp, #24
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
 800504a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800504e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005052:	2300      	movs	r3, #0
 8005054:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800505a:	2300      	movs	r3, #0
 800505c:	613b      	str	r3, [r7, #16]
 800505e:	e009      	b.n	8005074 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	3340      	adds	r3, #64	; 0x40
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	2200      	movs	r2, #0
 800506c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	3301      	adds	r3, #1
 8005072:	613b      	str	r3, [r7, #16]
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	2b0e      	cmp	r3, #14
 8005078:	d9f2      	bls.n	8005060 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800507a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800507c:	2b00      	cmp	r3, #0
 800507e:	d11c      	bne.n	80050ba <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800508e:	f043 0302 	orr.w	r3, r3, #2
 8005092:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005098:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	639a      	str	r2, [r3, #56]	; 0x38
 80050b8:	e00b      	b.n	80050d2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050be:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050d8:	461a      	mov	r2, r3
 80050da:	2300      	movs	r3, #0
 80050dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e4:	4619      	mov	r1, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ec:	461a      	mov	r2, r3
 80050ee:	680b      	ldr	r3, [r1, #0]
 80050f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d10c      	bne.n	8005112 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80050f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d104      	bne.n	8005108 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80050fe:	2100      	movs	r1, #0
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f965 	bl	80053d0 <USB_SetDevSpeed>
 8005106:	e008      	b.n	800511a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005108:	2101      	movs	r1, #1
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f960 	bl	80053d0 <USB_SetDevSpeed>
 8005110:	e003      	b.n	800511a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005112:	2103      	movs	r1, #3
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 f95b 	bl	80053d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800511a:	2110      	movs	r1, #16
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f8f3 	bl	8005308 <USB_FlushTxFifo>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d001      	beq.n	800512c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f91f 	bl	8005370 <USB_FlushRxFifo>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d001      	beq.n	800513c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005142:	461a      	mov	r2, r3
 8005144:	2300      	movs	r3, #0
 8005146:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800514e:	461a      	mov	r2, r3
 8005150:	2300      	movs	r3, #0
 8005152:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800515a:	461a      	mov	r2, r3
 800515c:	2300      	movs	r3, #0
 800515e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005160:	2300      	movs	r3, #0
 8005162:	613b      	str	r3, [r7, #16]
 8005164:	e043      	b.n	80051ee <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	4413      	add	r3, r2
 800516e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005178:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800517c:	d118      	bne.n	80051b0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10a      	bne.n	800519a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4413      	add	r3, r2
 800518c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005190:	461a      	mov	r2, r3
 8005192:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005196:	6013      	str	r3, [r2, #0]
 8005198:	e013      	b.n	80051c2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a6:	461a      	mov	r2, r3
 80051a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051ac:	6013      	str	r3, [r2, #0]
 80051ae:	e008      	b.n	80051c2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051bc:	461a      	mov	r2, r3
 80051be:	2300      	movs	r3, #0
 80051c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ce:	461a      	mov	r2, r3
 80051d0:	2300      	movs	r3, #0
 80051d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e0:	461a      	mov	r2, r3
 80051e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	3301      	adds	r3, #1
 80051ec:	613b      	str	r3, [r7, #16]
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d3b7      	bcc.n	8005166 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051f6:	2300      	movs	r3, #0
 80051f8:	613b      	str	r3, [r7, #16]
 80051fa:	e043      	b.n	8005284 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4413      	add	r3, r2
 8005204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800520e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005212:	d118      	bne.n	8005246 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10a      	bne.n	8005230 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	4413      	add	r3, r2
 8005222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005226:	461a      	mov	r2, r3
 8005228:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800522c:	6013      	str	r3, [r2, #0]
 800522e:	e013      	b.n	8005258 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	4413      	add	r3, r2
 8005238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523c:	461a      	mov	r2, r3
 800523e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005242:	6013      	str	r3, [r2, #0]
 8005244:	e008      	b.n	8005258 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	4413      	add	r3, r2
 800524e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005252:	461a      	mov	r2, r3
 8005254:	2300      	movs	r3, #0
 8005256:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	015a      	lsls	r2, r3, #5
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	4413      	add	r3, r2
 8005260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005264:	461a      	mov	r2, r3
 8005266:	2300      	movs	r3, #0
 8005268:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	4413      	add	r3, r2
 8005272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005276:	461a      	mov	r2, r3
 8005278:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800527c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	3301      	adds	r3, #1
 8005282:	613b      	str	r3, [r7, #16]
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	429a      	cmp	r2, r3
 800528a:	d3b7      	bcc.n	80051fc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800529a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800529e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80052ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d105      	bne.n	80052c0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	f043 0210 	orr.w	r2, r3, #16
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	699a      	ldr	r2, [r3, #24]
 80052c4:	4b0f      	ldr	r3, [pc, #60]	; (8005304 <USB_DevInit+0x2c4>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80052cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d005      	beq.n	80052de <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	f043 0208 	orr.w	r2, r3, #8
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d107      	bne.n	80052f4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052ec:	f043 0304 	orr.w	r3, r3, #4
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3718      	adds	r7, #24
 80052fa:	46bd      	mov	sp, r7
 80052fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005300:	b004      	add	sp, #16
 8005302:	4770      	bx	lr
 8005304:	803c3800 	.word	0x803c3800

08005308 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005312:	2300      	movs	r3, #0
 8005314:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	3301      	adds	r3, #1
 800531a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4a13      	ldr	r2, [pc, #76]	; (800536c <USB_FlushTxFifo+0x64>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d901      	bls.n	8005328 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e01b      	b.n	8005360 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	2b00      	cmp	r3, #0
 800532e:	daf2      	bge.n	8005316 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005330:	2300      	movs	r3, #0
 8005332:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	019b      	lsls	r3, r3, #6
 8005338:	f043 0220 	orr.w	r2, r3, #32
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	3301      	adds	r3, #1
 8005344:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	4a08      	ldr	r2, [pc, #32]	; (800536c <USB_FlushTxFifo+0x64>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d901      	bls.n	8005352 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e006      	b.n	8005360 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	f003 0320 	and.w	r3, r3, #32
 800535a:	2b20      	cmp	r3, #32
 800535c:	d0f0      	beq.n	8005340 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	00030d40 	.word	0x00030d40

08005370 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005378:	2300      	movs	r3, #0
 800537a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	3301      	adds	r3, #1
 8005380:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	4a11      	ldr	r2, [pc, #68]	; (80053cc <USB_FlushRxFifo+0x5c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d901      	bls.n	800538e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e018      	b.n	80053c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	2b00      	cmp	r3, #0
 8005394:	daf2      	bge.n	800537c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005396:	2300      	movs	r3, #0
 8005398:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2210      	movs	r2, #16
 800539e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	3301      	adds	r3, #1
 80053a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	4a08      	ldr	r2, [pc, #32]	; (80053cc <USB_FlushRxFifo+0x5c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d901      	bls.n	80053b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e006      	b.n	80053c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	f003 0310 	and.w	r3, r3, #16
 80053ba:	2b10      	cmp	r3, #16
 80053bc:	d0f0      	beq.n	80053a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3714      	adds	r7, #20
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr
 80053cc:	00030d40 	.word	0x00030d40

080053d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	460b      	mov	r3, r1
 80053da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	78fb      	ldrb	r3, [r7, #3]
 80053ea:	68f9      	ldr	r1, [r7, #12]
 80053ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053f0:	4313      	orrs	r3, r2
 80053f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005402:	b480      	push	{r7}
 8005404:	b087      	sub	sp, #28
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 0306 	and.w	r3, r3, #6
 800541a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d102      	bne.n	8005428 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005422:	2300      	movs	r3, #0
 8005424:	75fb      	strb	r3, [r7, #23]
 8005426:	e00a      	b.n	800543e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2b02      	cmp	r3, #2
 800542c:	d002      	beq.n	8005434 <USB_GetDevSpeed+0x32>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2b06      	cmp	r3, #6
 8005432:	d102      	bne.n	800543a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005434:	2302      	movs	r3, #2
 8005436:	75fb      	strb	r3, [r7, #23]
 8005438:	e001      	b.n	800543e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800543a:	230f      	movs	r3, #15
 800543c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800543e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005440:	4618      	mov	r0, r3
 8005442:	371c      	adds	r7, #28
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	785b      	ldrb	r3, [r3, #1]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d13a      	bne.n	80054de <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800546e:	69da      	ldr	r2, [r3, #28]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	f003 030f 	and.w	r3, r3, #15
 8005478:	2101      	movs	r1, #1
 800547a:	fa01 f303 	lsl.w	r3, r1, r3
 800547e:	b29b      	uxth	r3, r3
 8005480:	68f9      	ldr	r1, [r7, #12]
 8005482:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005486:	4313      	orrs	r3, r2
 8005488:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	4413      	add	r3, r2
 8005492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d155      	bne.n	800554c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	791b      	ldrb	r3, [r3, #4]
 80054ba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054bc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	059b      	lsls	r3, r3, #22
 80054c2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054c4:	4313      	orrs	r3, r2
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	0151      	lsls	r1, r2, #5
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	440a      	add	r2, r1
 80054ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	e036      	b.n	800554c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e4:	69da      	ldr	r2, [r3, #28]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	f003 030f 	and.w	r3, r3, #15
 80054ee:	2101      	movs	r1, #1
 80054f0:	fa01 f303 	lsl.w	r3, r1, r3
 80054f4:	041b      	lsls	r3, r3, #16
 80054f6:	68f9      	ldr	r1, [r7, #12]
 80054f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054fc:	4313      	orrs	r3, r2
 80054fe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4413      	add	r3, r2
 8005508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d11a      	bne.n	800554c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	015a      	lsls	r2, r3, #5
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	4413      	add	r3, r2
 800551e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	791b      	ldrb	r3, [r3, #4]
 8005530:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005532:	430b      	orrs	r3, r1
 8005534:	4313      	orrs	r3, r2
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	0151      	lsls	r1, r2, #5
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	440a      	add	r2, r1
 800553e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800554a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
	...

0800555c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	785b      	ldrb	r3, [r3, #1]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d161      	bne.n	800563c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4413      	add	r3, r2
 8005580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800558a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800558e:	d11f      	bne.n	80055d0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	0151      	lsls	r1, r2, #5
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	440a      	add	r2, r1
 80055a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055ae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	0151      	lsls	r1, r2, #5
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	440a      	add	r2, r1
 80055c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	f003 030f 	and.w	r3, r3, #15
 80055e0:	2101      	movs	r1, #1
 80055e2:	fa01 f303 	lsl.w	r3, r1, r3
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	43db      	mvns	r3, r3
 80055ea:	68f9      	ldr	r1, [r7, #12]
 80055ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055f0:	4013      	ands	r3, r2
 80055f2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055fa:	69da      	ldr	r2, [r3, #28]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	f003 030f 	and.w	r3, r3, #15
 8005604:	2101      	movs	r1, #1
 8005606:	fa01 f303 	lsl.w	r3, r1, r3
 800560a:	b29b      	uxth	r3, r3
 800560c:	43db      	mvns	r3, r3
 800560e:	68f9      	ldr	r1, [r7, #12]
 8005610:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005614:	4013      	ands	r3, r2
 8005616:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	0159      	lsls	r1, r3, #5
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	440b      	add	r3, r1
 800562e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005632:	4619      	mov	r1, r3
 8005634:	4b35      	ldr	r3, [pc, #212]	; (800570c <USB_DeactivateEndpoint+0x1b0>)
 8005636:	4013      	ands	r3, r2
 8005638:	600b      	str	r3, [r1, #0]
 800563a:	e060      	b.n	80056fe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800564e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005652:	d11f      	bne.n	8005694 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4413      	add	r3, r2
 800565c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	0151      	lsls	r1, r2, #5
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	440a      	add	r2, r1
 800566a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800566e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005672:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4413      	add	r3, r2
 800567c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	0151      	lsls	r1, r2, #5
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	440a      	add	r2, r1
 800568a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800568e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005692:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	f003 030f 	and.w	r3, r3, #15
 80056a4:	2101      	movs	r1, #1
 80056a6:	fa01 f303 	lsl.w	r3, r1, r3
 80056aa:	041b      	lsls	r3, r3, #16
 80056ac:	43db      	mvns	r3, r3
 80056ae:	68f9      	ldr	r1, [r7, #12]
 80056b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056b4:	4013      	ands	r3, r2
 80056b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056be:	69da      	ldr	r2, [r3, #28]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	f003 030f 	and.w	r3, r3, #15
 80056c8:	2101      	movs	r1, #1
 80056ca:	fa01 f303 	lsl.w	r3, r1, r3
 80056ce:	041b      	lsls	r3, r3, #16
 80056d0:	43db      	mvns	r3, r3
 80056d2:	68f9      	ldr	r1, [r7, #12]
 80056d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056d8:	4013      	ands	r3, r2
 80056da:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	0159      	lsls	r1, r3, #5
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	440b      	add	r3, r1
 80056f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f6:	4619      	mov	r1, r3
 80056f8:	4b05      	ldr	r3, [pc, #20]	; (8005710 <USB_DeactivateEndpoint+0x1b4>)
 80056fa:	4013      	ands	r3, r2
 80056fc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3714      	adds	r7, #20
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr
 800570c:	ec337800 	.word	0xec337800
 8005710:	eff37800 	.word	0xeff37800

08005714 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b08a      	sub	sp, #40	; 0x28
 8005718:	af02      	add	r7, sp, #8
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	4613      	mov	r3, r2
 8005720:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	785b      	ldrb	r3, [r3, #1]
 8005730:	2b01      	cmp	r3, #1
 8005732:	f040 815c 	bne.w	80059ee <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d132      	bne.n	80057a4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	4413      	add	r3, r2
 8005746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	0151      	lsls	r1, r2, #5
 8005750:	69fa      	ldr	r2, [r7, #28]
 8005752:	440a      	add	r2, r1
 8005754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005758:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800575c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005760:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	4413      	add	r3, r2
 800576a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	0151      	lsls	r1, r2, #5
 8005774:	69fa      	ldr	r2, [r7, #28]
 8005776:	440a      	add	r2, r1
 8005778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800577c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005780:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	4413      	add	r3, r2
 800578a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	0151      	lsls	r1, r2, #5
 8005794:	69fa      	ldr	r2, [r7, #28]
 8005796:	440a      	add	r2, r1
 8005798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800579c:	0cdb      	lsrs	r3, r3, #19
 800579e:	04db      	lsls	r3, r3, #19
 80057a0:	6113      	str	r3, [r2, #16]
 80057a2:	e074      	b.n	800588e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	0151      	lsls	r1, r2, #5
 80057b6:	69fa      	ldr	r2, [r7, #28]
 80057b8:	440a      	add	r2, r1
 80057ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057be:	0cdb      	lsrs	r3, r3, #19
 80057c0:	04db      	lsls	r3, r3, #19
 80057c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	0151      	lsls	r1, r2, #5
 80057d6:	69fa      	ldr	r2, [r7, #28]
 80057d8:	440a      	add	r2, r1
 80057da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	6999      	ldr	r1, [r3, #24]
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	440b      	add	r3, r1
 8005800:	1e59      	subs	r1, r3, #1
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	fbb1 f3f3 	udiv	r3, r1, r3
 800580a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800580c:	4b9d      	ldr	r3, [pc, #628]	; (8005a84 <USB_EPStartXfer+0x370>)
 800580e:	400b      	ands	r3, r1
 8005810:	69b9      	ldr	r1, [r7, #24]
 8005812:	0148      	lsls	r0, r1, #5
 8005814:	69f9      	ldr	r1, [r7, #28]
 8005816:	4401      	add	r1, r0
 8005818:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800581c:	4313      	orrs	r3, r2
 800581e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	4413      	add	r3, r2
 8005828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582c:	691a      	ldr	r2, [r3, #16]
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005836:	69b9      	ldr	r1, [r7, #24]
 8005838:	0148      	lsls	r0, r1, #5
 800583a:	69f9      	ldr	r1, [r7, #28]
 800583c:	4401      	add	r1, r0
 800583e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005842:	4313      	orrs	r3, r2
 8005844:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	791b      	ldrb	r3, [r3, #4]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d11f      	bne.n	800588e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	4413      	add	r3, r2
 8005856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	0151      	lsls	r1, r2, #5
 8005860:	69fa      	ldr	r2, [r7, #28]
 8005862:	440a      	add	r2, r1
 8005864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005868:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800586c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	015a      	lsls	r2, r3, #5
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	4413      	add	r3, r2
 8005876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	0151      	lsls	r1, r2, #5
 8005880:	69fa      	ldr	r2, [r7, #28]
 8005882:	440a      	add	r2, r1
 8005884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005888:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800588c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800588e:	79fb      	ldrb	r3, [r7, #7]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d14b      	bne.n	800592c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d009      	beq.n	80058b0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a8:	461a      	mov	r2, r3
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	791b      	ldrb	r3, [r3, #4]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d128      	bne.n	800590a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d110      	bne.n	80058ea <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	69ba      	ldr	r2, [r7, #24]
 80058d8:	0151      	lsls	r1, r2, #5
 80058da:	69fa      	ldr	r2, [r7, #28]
 80058dc:	440a      	add	r2, r1
 80058de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058e6:	6013      	str	r3, [r2, #0]
 80058e8:	e00f      	b.n	800590a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	015a      	lsls	r2, r3, #5
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	4413      	add	r3, r2
 80058f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	0151      	lsls	r1, r2, #5
 80058fc:	69fa      	ldr	r2, [r7, #28]
 80058fe:	440a      	add	r2, r1
 8005900:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005908:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	4413      	add	r3, r2
 8005912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	0151      	lsls	r1, r2, #5
 800591c:	69fa      	ldr	r2, [r7, #28]
 800591e:	440a      	add	r2, r1
 8005920:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005924:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005928:	6013      	str	r3, [r2, #0]
 800592a:	e133      	b.n	8005b94 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	015a      	lsls	r2, r3, #5
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	4413      	add	r3, r2
 8005934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	0151      	lsls	r1, r2, #5
 800593e:	69fa      	ldr	r2, [r7, #28]
 8005940:	440a      	add	r2, r1
 8005942:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005946:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800594a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	791b      	ldrb	r3, [r3, #4]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d015      	beq.n	8005980 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 811b 	beq.w	8005b94 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	f003 030f 	and.w	r3, r3, #15
 800596e:	2101      	movs	r1, #1
 8005970:	fa01 f303 	lsl.w	r3, r1, r3
 8005974:	69f9      	ldr	r1, [r7, #28]
 8005976:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800597a:	4313      	orrs	r3, r2
 800597c:	634b      	str	r3, [r1, #52]	; 0x34
 800597e:	e109      	b.n	8005b94 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800598c:	2b00      	cmp	r3, #0
 800598e:	d110      	bne.n	80059b2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	0151      	lsls	r1, r2, #5
 80059a2:	69fa      	ldr	r2, [r7, #28]
 80059a4:	440a      	add	r2, r1
 80059a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059ae:	6013      	str	r3, [r2, #0]
 80059b0:	e00f      	b.n	80059d2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	015a      	lsls	r2, r3, #5
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	4413      	add	r3, r2
 80059ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	0151      	lsls	r1, r2, #5
 80059c4:	69fa      	ldr	r2, [r7, #28]
 80059c6:	440a      	add	r2, r1
 80059c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059d0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	6919      	ldr	r1, [r3, #16]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	781a      	ldrb	r2, [r3, #0]
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	b298      	uxth	r0, r3
 80059e0:	79fb      	ldrb	r3, [r7, #7]
 80059e2:	9300      	str	r3, [sp, #0]
 80059e4:	4603      	mov	r3, r0
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f000 fade 	bl	8005fa8 <USB_WritePacket>
 80059ec:	e0d2      	b.n	8005b94 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	015a      	lsls	r2, r3, #5
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	4413      	add	r3, r2
 80059f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	0151      	lsls	r1, r2, #5
 8005a00:	69fa      	ldr	r2, [r7, #28]
 8005a02:	440a      	add	r2, r1
 8005a04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a08:	0cdb      	lsrs	r3, r3, #19
 8005a0a:	04db      	lsls	r3, r3, #19
 8005a0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	0151      	lsls	r1, r2, #5
 8005a20:	69fa      	ldr	r2, [r7, #28]
 8005a22:	440a      	add	r2, r1
 8005a24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a30:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d126      	bne.n	8005a88 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a46:	691a      	ldr	r2, [r3, #16]
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a50:	69b9      	ldr	r1, [r7, #24]
 8005a52:	0148      	lsls	r0, r1, #5
 8005a54:	69f9      	ldr	r1, [r7, #28]
 8005a56:	4401      	add	r1, r0
 8005a58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	0151      	lsls	r1, r2, #5
 8005a72:	69fa      	ldr	r2, [r7, #28]
 8005a74:	440a      	add	r2, r1
 8005a76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a7e:	6113      	str	r3, [r2, #16]
 8005a80:	e03a      	b.n	8005af8 <USB_EPStartXfer+0x3e4>
 8005a82:	bf00      	nop
 8005a84:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	699a      	ldr	r2, [r3, #24]
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	4413      	add	r3, r2
 8005a92:	1e5a      	subs	r2, r3, #1
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a9c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	8afa      	ldrh	r2, [r7, #22]
 8005aa4:	fb03 f202 	mul.w	r2, r3, r2
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab8:	691a      	ldr	r2, [r3, #16]
 8005aba:	8afb      	ldrh	r3, [r7, #22]
 8005abc:	04d9      	lsls	r1, r3, #19
 8005abe:	4b38      	ldr	r3, [pc, #224]	; (8005ba0 <USB_EPStartXfer+0x48c>)
 8005ac0:	400b      	ands	r3, r1
 8005ac2:	69b9      	ldr	r1, [r7, #24]
 8005ac4:	0148      	lsls	r0, r1, #5
 8005ac6:	69f9      	ldr	r1, [r7, #28]
 8005ac8:	4401      	add	r1, r0
 8005aca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ade:	691a      	ldr	r2, [r3, #16]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	69db      	ldr	r3, [r3, #28]
 8005ae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ae8:	69b9      	ldr	r1, [r7, #24]
 8005aea:	0148      	lsls	r0, r1, #5
 8005aec:	69f9      	ldr	r1, [r7, #28]
 8005aee:	4401      	add	r1, r0
 8005af0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005af4:	4313      	orrs	r3, r2
 8005af6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005af8:	79fb      	ldrb	r3, [r7, #7]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d10d      	bne.n	8005b1a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d009      	beq.n	8005b1a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	6919      	ldr	r1, [r3, #16]
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b16:	460a      	mov	r2, r1
 8005b18:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	791b      	ldrb	r3, [r3, #4]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d128      	bne.n	8005b74 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d110      	bne.n	8005b54 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	0151      	lsls	r1, r2, #5
 8005b44:	69fa      	ldr	r2, [r7, #28]
 8005b46:	440a      	add	r2, r1
 8005b48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b50:	6013      	str	r3, [r2, #0]
 8005b52:	e00f      	b.n	8005b74 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	0151      	lsls	r1, r2, #5
 8005b66:	69fa      	ldr	r2, [r7, #28]
 8005b68:	440a      	add	r2, r1
 8005b6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b72:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69ba      	ldr	r2, [r7, #24]
 8005b84:	0151      	lsls	r1, r2, #5
 8005b86:	69fa      	ldr	r2, [r7, #28]
 8005b88:	440a      	add	r2, r1
 8005b8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3720      	adds	r7, #32
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	1ff80000 	.word	0x1ff80000

08005ba4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	785b      	ldrb	r3, [r3, #1]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	f040 80ce 	bne.w	8005d62 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d132      	bne.n	8005c34 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	0151      	lsls	r1, r2, #5
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	440a      	add	r2, r1
 8005be4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bf0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	015a      	lsls	r2, r3, #5
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	0151      	lsls	r1, r2, #5
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	440a      	add	r2, r1
 8005c08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	015a      	lsls	r2, r3, #5
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	4413      	add	r3, r2
 8005c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	0151      	lsls	r1, r2, #5
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	440a      	add	r2, r1
 8005c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c2c:	0cdb      	lsrs	r3, r3, #19
 8005c2e:	04db      	lsls	r3, r3, #19
 8005c30:	6113      	str	r3, [r2, #16]
 8005c32:	e04e      	b.n	8005cd2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	0151      	lsls	r1, r2, #5
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	440a      	add	r2, r1
 8005c4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c4e:	0cdb      	lsrs	r3, r3, #19
 8005c50:	04db      	lsls	r3, r3, #19
 8005c52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	0151      	lsls	r1, r2, #5
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	440a      	add	r2, r1
 8005c6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c6e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c72:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c76:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	699a      	ldr	r2, [r3, #24]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d903      	bls.n	8005c8c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	68da      	ldr	r2, [r3, #12]
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	0151      	lsls	r1, r2, #5
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	440a      	add	r2, r1
 8005ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ca6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005caa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb8:	691a      	ldr	r2, [r3, #16]
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cc2:	6939      	ldr	r1, [r7, #16]
 8005cc4:	0148      	lsls	r0, r1, #5
 8005cc6:	6979      	ldr	r1, [r7, #20]
 8005cc8:	4401      	add	r1, r0
 8005cca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005cd2:	79fb      	ldrb	r3, [r7, #7]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d11e      	bne.n	8005d16 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d009      	beq.n	8005cf4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	015a      	lsls	r2, r3, #5
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cec:	461a      	mov	r2, r3
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	0151      	lsls	r1, r2, #5
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	440a      	add	r2, r1
 8005d0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d12:	6013      	str	r3, [r2, #0]
 8005d14:	e097      	b.n	8005e46 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	0151      	lsls	r1, r2, #5
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	440a      	add	r2, r1
 8005d2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d34:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f000 8083 	beq.w	8005e46 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	f003 030f 	and.w	r3, r3, #15
 8005d50:	2101      	movs	r1, #1
 8005d52:	fa01 f303 	lsl.w	r3, r1, r3
 8005d56:	6979      	ldr	r1, [r7, #20]
 8005d58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	634b      	str	r3, [r1, #52]	; 0x34
 8005d60:	e071      	b.n	8005e46 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	0151      	lsls	r1, r2, #5
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	440a      	add	r2, r1
 8005d78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d7c:	0cdb      	lsrs	r3, r3, #19
 8005d7e:	04db      	lsls	r3, r3, #19
 8005d80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	0151      	lsls	r1, r2, #5
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	440a      	add	r2, r1
 8005d98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005da0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005da4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	68da      	ldr	r2, [r3, #12]
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	68da      	ldr	r2, [r3, #12]
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	0151      	lsls	r1, r2, #5
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	440a      	add	r2, r1
 8005dd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ddc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dea:	691a      	ldr	r2, [r3, #16]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	69db      	ldr	r3, [r3, #28]
 8005df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005df4:	6939      	ldr	r1, [r7, #16]
 8005df6:	0148      	lsls	r0, r1, #5
 8005df8:	6979      	ldr	r1, [r7, #20]
 8005dfa:	4401      	add	r1, r0
 8005dfc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e00:	4313      	orrs	r3, r2
 8005e02:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005e04:	79fb      	ldrb	r3, [r7, #7]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d10d      	bne.n	8005e26 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d009      	beq.n	8005e26 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	6919      	ldr	r1, [r3, #16]
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	015a      	lsls	r2, r3, #5
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e22:	460a      	mov	r2, r1
 8005e24:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	0151      	lsls	r1, r2, #5
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	440a      	add	r2, r1
 8005e3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e40:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e44:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	371c      	adds	r7, #28
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b087      	sub	sp, #28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	785b      	ldrb	r3, [r3, #1]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d14a      	bne.n	8005f08 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e8a:	f040 8086 	bne.w	8005f9a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	683a      	ldr	r2, [r7, #0]
 8005ea0:	7812      	ldrb	r2, [r2, #0]
 8005ea2:	0151      	lsls	r1, r2, #5
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	440a      	add	r2, r1
 8005ea8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005eb0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	7812      	ldrb	r2, [r2, #0]
 8005ec6:	0151      	lsls	r1, r2, #5
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	440a      	add	r2, r1
 8005ecc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ed0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ed4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f242 7210 	movw	r2, #10000	; 0x2710
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d902      	bls.n	8005eec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	75fb      	strb	r3, [r7, #23]
          break;
 8005eea:	e056      	b.n	8005f9a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f04:	d0e7      	beq.n	8005ed6 <USB_EPStopXfer+0x82>
 8005f06:	e048      	b.n	8005f9a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	015a      	lsls	r2, r3, #5
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	4413      	add	r3, r2
 8005f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f20:	d13b      	bne.n	8005f9a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	7812      	ldrb	r2, [r2, #0]
 8005f36:	0151      	lsls	r1, r2, #5
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	440a      	add	r2, r1
 8005f3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f40:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f44:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	7812      	ldrb	r2, [r2, #0]
 8005f5a:	0151      	lsls	r1, r2, #5
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	440a      	add	r2, r1
 8005f60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f68:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f242 7210 	movw	r2, #10000	; 0x2710
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d902      	bls.n	8005f80 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	75fb      	strb	r3, [r7, #23]
          break;
 8005f7e:	e00c      	b.n	8005f9a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	015a      	lsls	r2, r3, #5
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	4413      	add	r3, r2
 8005f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f98:	d0e7      	beq.n	8005f6a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	371c      	adds	r7, #28
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b089      	sub	sp, #36	; 0x24
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	71fb      	strb	r3, [r7, #7]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005fc6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d123      	bne.n	8006016 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005fce:	88bb      	ldrh	r3, [r7, #4]
 8005fd0:	3303      	adds	r3, #3
 8005fd2:	089b      	lsrs	r3, r3, #2
 8005fd4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	61bb      	str	r3, [r7, #24]
 8005fda:	e018      	b.n	800600e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005fdc:	79fb      	ldrb	r3, [r7, #7]
 8005fde:	031a      	lsls	r2, r3, #12
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fe8:	461a      	mov	r2, r3
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	3301      	adds	r3, #1
 8006000:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	3301      	adds	r3, #1
 8006006:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	3301      	adds	r3, #1
 800600c:	61bb      	str	r3, [r7, #24]
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	429a      	cmp	r2, r3
 8006014:	d3e2      	bcc.n	8005fdc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3724      	adds	r7, #36	; 0x24
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006024:	b480      	push	{r7}
 8006026:	b08b      	sub	sp, #44	; 0x2c
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	4613      	mov	r3, r2
 8006030:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800603a:	88fb      	ldrh	r3, [r7, #6]
 800603c:	089b      	lsrs	r3, r3, #2
 800603e:	b29b      	uxth	r3, r3
 8006040:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006042:	88fb      	ldrh	r3, [r7, #6]
 8006044:	f003 0303 	and.w	r3, r3, #3
 8006048:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800604a:	2300      	movs	r3, #0
 800604c:	623b      	str	r3, [r7, #32]
 800604e:	e014      	b.n	800607a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	601a      	str	r2, [r3, #0]
    pDest++;
 800605c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605e:	3301      	adds	r3, #1
 8006060:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	3301      	adds	r3, #1
 8006066:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606a:	3301      	adds	r3, #1
 800606c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006070:	3301      	adds	r3, #1
 8006072:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006074:	6a3b      	ldr	r3, [r7, #32]
 8006076:	3301      	adds	r3, #1
 8006078:	623b      	str	r3, [r7, #32]
 800607a:	6a3a      	ldr	r2, [r7, #32]
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	429a      	cmp	r2, r3
 8006080:	d3e6      	bcc.n	8006050 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006082:	8bfb      	ldrh	r3, [r7, #30]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d01e      	beq.n	80060c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006088:	2300      	movs	r3, #0
 800608a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006092:	461a      	mov	r2, r3
 8006094:	f107 0310 	add.w	r3, r7, #16
 8006098:	6812      	ldr	r2, [r2, #0]
 800609a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	fa22 f303 	lsr.w	r3, r2, r3
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ac:	701a      	strb	r2, [r3, #0]
      i++;
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	3301      	adds	r3, #1
 80060b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	3301      	adds	r3, #1
 80060b8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80060ba:	8bfb      	ldrh	r3, [r7, #30]
 80060bc:	3b01      	subs	r3, #1
 80060be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80060c0:	8bfb      	ldrh	r3, [r7, #30]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1ea      	bne.n	800609c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80060c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	372c      	adds	r7, #44	; 0x2c
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	785b      	ldrb	r3, [r3, #1]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d12c      	bne.n	800614a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	db12      	blt.n	8006128 <USB_EPSetStall+0x54>
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00f      	beq.n	8006128 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4413      	add	r3, r2
 8006110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	0151      	lsls	r1, r2, #5
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	440a      	add	r2, r1
 800611e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006122:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006126:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	4413      	add	r3, r2
 8006130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	0151      	lsls	r1, r2, #5
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	440a      	add	r2, r1
 800613e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006142:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006146:	6013      	str	r3, [r2, #0]
 8006148:	e02b      	b.n	80061a2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	4413      	add	r3, r2
 8006152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	db12      	blt.n	8006182 <USB_EPSetStall+0xae>
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00f      	beq.n	8006182 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	015a      	lsls	r2, r3, #5
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4413      	add	r3, r2
 800616a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	0151      	lsls	r1, r2, #5
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	440a      	add	r2, r1
 8006178:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800617c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006180:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	015a      	lsls	r2, r3, #5
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	4413      	add	r3, r2
 800618a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	0151      	lsls	r1, r2, #5
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	440a      	add	r2, r1
 8006198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800619c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3714      	adds	r7, #20
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	785b      	ldrb	r3, [r3, #1]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d128      	bne.n	800621e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	0151      	lsls	r1, r2, #5
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	440a      	add	r2, r1
 80061e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	791b      	ldrb	r3, [r3, #4]
 80061f0:	2b03      	cmp	r3, #3
 80061f2:	d003      	beq.n	80061fc <USB_EPClearStall+0x4c>
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	791b      	ldrb	r3, [r3, #4]
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d138      	bne.n	800626e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	0151      	lsls	r1, r2, #5
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	440a      	add	r2, r1
 8006212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800621a:	6013      	str	r3, [r2, #0]
 800621c:	e027      	b.n	800626e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	4413      	add	r3, r2
 8006226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	0151      	lsls	r1, r2, #5
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	440a      	add	r2, r1
 8006234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006238:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800623c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	791b      	ldrb	r3, [r3, #4]
 8006242:	2b03      	cmp	r3, #3
 8006244:	d003      	beq.n	800624e <USB_EPClearStall+0x9e>
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	791b      	ldrb	r3, [r3, #4]
 800624a:	2b02      	cmp	r3, #2
 800624c:	d10f      	bne.n	800626e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	4413      	add	r3, r2
 8006256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	0151      	lsls	r1, r2, #5
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	440a      	add	r2, r1
 8006264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800626c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	460b      	mov	r3, r1
 8006286:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800629a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800629e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	78fb      	ldrb	r3, [r7, #3]
 80062aa:	011b      	lsls	r3, r3, #4
 80062ac:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80062b0:	68f9      	ldr	r1, [r7, #12]
 80062b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062b6:	4313      	orrs	r3, r2
 80062b8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3714      	adds	r7, #20
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80062e2:	f023 0303 	bic.w	r3, r3, #3
 80062e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062f6:	f023 0302 	bic.w	r3, r3, #2
 80062fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3714      	adds	r7, #20
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800630a:	b480      	push	{r7}
 800630c:	b085      	sub	sp, #20
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006324:	f023 0303 	bic.w	r3, r3, #3
 8006328:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006338:	f043 0302 	orr.w	r3, r3, #2
 800633c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3714      	adds	r7, #20
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	695b      	ldr	r3, [r3, #20]
 8006358:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	4013      	ands	r3, r2
 8006362:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006364:	68fb      	ldr	r3, [r7, #12]
}
 8006366:	4618      	mov	r0, r3
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006372:	b480      	push	{r7}
 8006374:	b085      	sub	sp, #20
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638e:	69db      	ldr	r3, [r3, #28]
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	4013      	ands	r3, r2
 8006394:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	0c1b      	lsrs	r3, r3, #16
}
 800639a:	4618      	mov	r0, r3
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b085      	sub	sp, #20
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c2:	69db      	ldr	r3, [r3, #28]
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	4013      	ands	r3, r2
 80063c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	b29b      	uxth	r3, r3
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3714      	adds	r7, #20
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80063da:	b480      	push	{r7}
 80063dc:	b085      	sub	sp, #20
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
 80063e2:	460b      	mov	r3, r1
 80063e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80063ea:	78fb      	ldrb	r3, [r7, #3]
 80063ec:	015a      	lsls	r2, r3, #5
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	4413      	add	r3, r2
 80063f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	4013      	ands	r3, r2
 8006406:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006408:	68bb      	ldr	r3, [r7, #8]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006416:	b480      	push	{r7}
 8006418:	b087      	sub	sp, #28
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	460b      	mov	r3, r1
 8006420:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006438:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800643a:	78fb      	ldrb	r3, [r7, #3]
 800643c:	f003 030f 	and.w	r3, r3, #15
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	fa22 f303 	lsr.w	r3, r2, r3
 8006446:	01db      	lsls	r3, r3, #7
 8006448:	b2db      	uxtb	r3, r3
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	4313      	orrs	r3, r2
 800644e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006450:	78fb      	ldrb	r3, [r7, #3]
 8006452:	015a      	lsls	r2, r3, #5
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	4413      	add	r3, r2
 8006458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	4013      	ands	r3, r2
 8006462:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006464:	68bb      	ldr	r3, [r7, #8]
}
 8006466:	4618      	mov	r0, r3
 8006468:	371c      	adds	r7, #28
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr

08006472 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006472:	b480      	push	{r7}
 8006474:	b083      	sub	sp, #12
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	f003 0301 	and.w	r3, r3, #1
}
 8006482:	4618      	mov	r0, r3
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800648e:	b480      	push	{r7}
 8006490:	b085      	sub	sp, #20
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064a8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80064ac:	f023 0307 	bic.w	r3, r3, #7
 80064b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3714      	adds	r7, #20
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	460b      	mov	r3, r1
 80064de:	607a      	str	r2, [r7, #4]
 80064e0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	333c      	adds	r3, #60	; 0x3c
 80064ea:	3304      	adds	r3, #4
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	4a26      	ldr	r2, [pc, #152]	; (800658c <USB_EP0_OutStart+0xb8>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d90a      	bls.n	800650e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006504:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006508:	d101      	bne.n	800650e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800650a:	2300      	movs	r3, #0
 800650c:	e037      	b.n	800657e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006514:	461a      	mov	r2, r3
 8006516:	2300      	movs	r3, #0
 8006518:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006528:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800652c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800653c:	f043 0318 	orr.w	r3, r3, #24
 8006540:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006550:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006554:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006556:	7afb      	ldrb	r3, [r7, #11]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d10f      	bne.n	800657c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006562:	461a      	mov	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006576:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800657a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	371c      	adds	r7, #28
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	4f54300a 	.word	0x4f54300a

08006590 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006598:	2300      	movs	r3, #0
 800659a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	3301      	adds	r3, #1
 80065a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	4a13      	ldr	r2, [pc, #76]	; (80065f4 <USB_CoreReset+0x64>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d901      	bls.n	80065ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e01b      	b.n	80065e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	daf2      	bge.n	800659c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065b6:	2300      	movs	r3, #0
 80065b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	f043 0201 	orr.w	r2, r3, #1
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	3301      	adds	r3, #1
 80065ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	4a09      	ldr	r2, [pc, #36]	; (80065f4 <USB_CoreReset+0x64>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d901      	bls.n	80065d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e006      	b.n	80065e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d0f0      	beq.n	80065c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	00030d40 	.word	0x00030d40

080065f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	460b      	mov	r3, r1
 8006602:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006604:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006608:	f002 fc8a 	bl	8008f20 <USBD_static_malloc>
 800660c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d109      	bne.n	8006628 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	32b0      	adds	r2, #176	; 0xb0
 800661e:	2100      	movs	r1, #0
 8006620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006624:	2302      	movs	r3, #2
 8006626:	e0d4      	b.n	80067d2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006628:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800662c:	2100      	movs	r1, #0
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f002 fd96 	bl	8009160 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	32b0      	adds	r2, #176	; 0xb0
 800663e:	68f9      	ldr	r1, [r7, #12]
 8006640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	32b0      	adds	r2, #176	; 0xb0
 800664e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	7c1b      	ldrb	r3, [r3, #16]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d138      	bne.n	80066d2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006660:	4b5e      	ldr	r3, [pc, #376]	; (80067dc <USBD_CDC_Init+0x1e4>)
 8006662:	7819      	ldrb	r1, [r3, #0]
 8006664:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006668:	2202      	movs	r2, #2
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f002 fb35 	bl	8008cda <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006670:	4b5a      	ldr	r3, [pc, #360]	; (80067dc <USBD_CDC_Init+0x1e4>)
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	f003 020f 	and.w	r2, r3, #15
 8006678:	6879      	ldr	r1, [r7, #4]
 800667a:	4613      	mov	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4413      	add	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	440b      	add	r3, r1
 8006684:	3324      	adds	r3, #36	; 0x24
 8006686:	2201      	movs	r2, #1
 8006688:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800668a:	4b55      	ldr	r3, [pc, #340]	; (80067e0 <USBD_CDC_Init+0x1e8>)
 800668c:	7819      	ldrb	r1, [r3, #0]
 800668e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006692:	2202      	movs	r2, #2
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f002 fb20 	bl	8008cda <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800669a:	4b51      	ldr	r3, [pc, #324]	; (80067e0 <USBD_CDC_Init+0x1e8>)
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	f003 020f 	and.w	r2, r3, #15
 80066a2:	6879      	ldr	r1, [r7, #4]
 80066a4:	4613      	mov	r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	440b      	add	r3, r1
 80066ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80066b2:	2201      	movs	r2, #1
 80066b4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80066b6:	4b4b      	ldr	r3, [pc, #300]	; (80067e4 <USBD_CDC_Init+0x1ec>)
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	f003 020f 	and.w	r2, r3, #15
 80066be:	6879      	ldr	r1, [r7, #4]
 80066c0:	4613      	mov	r3, r2
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	4413      	add	r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	440b      	add	r3, r1
 80066ca:	3326      	adds	r3, #38	; 0x26
 80066cc:	2210      	movs	r2, #16
 80066ce:	801a      	strh	r2, [r3, #0]
 80066d0:	e035      	b.n	800673e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80066d2:	4b42      	ldr	r3, [pc, #264]	; (80067dc <USBD_CDC_Init+0x1e4>)
 80066d4:	7819      	ldrb	r1, [r3, #0]
 80066d6:	2340      	movs	r3, #64	; 0x40
 80066d8:	2202      	movs	r2, #2
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f002 fafd 	bl	8008cda <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80066e0:	4b3e      	ldr	r3, [pc, #248]	; (80067dc <USBD_CDC_Init+0x1e4>)
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	f003 020f 	and.w	r2, r3, #15
 80066e8:	6879      	ldr	r1, [r7, #4]
 80066ea:	4613      	mov	r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	4413      	add	r3, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	440b      	add	r3, r1
 80066f4:	3324      	adds	r3, #36	; 0x24
 80066f6:	2201      	movs	r2, #1
 80066f8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80066fa:	4b39      	ldr	r3, [pc, #228]	; (80067e0 <USBD_CDC_Init+0x1e8>)
 80066fc:	7819      	ldrb	r1, [r3, #0]
 80066fe:	2340      	movs	r3, #64	; 0x40
 8006700:	2202      	movs	r2, #2
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f002 fae9 	bl	8008cda <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006708:	4b35      	ldr	r3, [pc, #212]	; (80067e0 <USBD_CDC_Init+0x1e8>)
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	f003 020f 	and.w	r2, r3, #15
 8006710:	6879      	ldr	r1, [r7, #4]
 8006712:	4613      	mov	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	440b      	add	r3, r1
 800671c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006720:	2201      	movs	r2, #1
 8006722:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006724:	4b2f      	ldr	r3, [pc, #188]	; (80067e4 <USBD_CDC_Init+0x1ec>)
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	f003 020f 	and.w	r2, r3, #15
 800672c:	6879      	ldr	r1, [r7, #4]
 800672e:	4613      	mov	r3, r2
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4413      	add	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	440b      	add	r3, r1
 8006738:	3326      	adds	r3, #38	; 0x26
 800673a:	2210      	movs	r2, #16
 800673c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800673e:	4b29      	ldr	r3, [pc, #164]	; (80067e4 <USBD_CDC_Init+0x1ec>)
 8006740:	7819      	ldrb	r1, [r3, #0]
 8006742:	2308      	movs	r3, #8
 8006744:	2203      	movs	r2, #3
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f002 fac7 	bl	8008cda <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800674c:	4b25      	ldr	r3, [pc, #148]	; (80067e4 <USBD_CDC_Init+0x1ec>)
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	f003 020f 	and.w	r2, r3, #15
 8006754:	6879      	ldr	r1, [r7, #4]
 8006756:	4613      	mov	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4413      	add	r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	440b      	add	r3, r1
 8006760:	3324      	adds	r3, #36	; 0x24
 8006762:	2201      	movs	r2, #1
 8006764:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	33b0      	adds	r3, #176	; 0xb0
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4413      	add	r3, r2
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006798:	2b00      	cmp	r3, #0
 800679a:	d101      	bne.n	80067a0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800679c:	2302      	movs	r3, #2
 800679e:	e018      	b.n	80067d2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	7c1b      	ldrb	r3, [r3, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d10a      	bne.n	80067be <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067a8:	4b0d      	ldr	r3, [pc, #52]	; (80067e0 <USBD_CDC_Init+0x1e8>)
 80067aa:	7819      	ldrb	r1, [r3, #0]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f002 fb7e 	bl	8008eb8 <USBD_LL_PrepareReceive>
 80067bc:	e008      	b.n	80067d0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067be:	4b08      	ldr	r3, [pc, #32]	; (80067e0 <USBD_CDC_Init+0x1e8>)
 80067c0:	7819      	ldrb	r1, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067c8:	2340      	movs	r3, #64	; 0x40
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f002 fb74 	bl	8008eb8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	20000093 	.word	0x20000093
 80067e0:	20000094 	.word	0x20000094
 80067e4:	20000095 	.word	0x20000095

080067e8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	460b      	mov	r3, r1
 80067f2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80067f4:	4b3a      	ldr	r3, [pc, #232]	; (80068e0 <USBD_CDC_DeInit+0xf8>)
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	4619      	mov	r1, r3
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f002 fa93 	bl	8008d26 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006800:	4b37      	ldr	r3, [pc, #220]	; (80068e0 <USBD_CDC_DeInit+0xf8>)
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	f003 020f 	and.w	r2, r3, #15
 8006808:	6879      	ldr	r1, [r7, #4]
 800680a:	4613      	mov	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	440b      	add	r3, r1
 8006814:	3324      	adds	r3, #36	; 0x24
 8006816:	2200      	movs	r2, #0
 8006818:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800681a:	4b32      	ldr	r3, [pc, #200]	; (80068e4 <USBD_CDC_DeInit+0xfc>)
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	4619      	mov	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f002 fa80 	bl	8008d26 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006826:	4b2f      	ldr	r3, [pc, #188]	; (80068e4 <USBD_CDC_DeInit+0xfc>)
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	f003 020f 	and.w	r2, r3, #15
 800682e:	6879      	ldr	r1, [r7, #4]
 8006830:	4613      	mov	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	440b      	add	r3, r1
 800683a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800683e:	2200      	movs	r2, #0
 8006840:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006842:	4b29      	ldr	r3, [pc, #164]	; (80068e8 <USBD_CDC_DeInit+0x100>)
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	4619      	mov	r1, r3
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f002 fa6c 	bl	8008d26 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800684e:	4b26      	ldr	r3, [pc, #152]	; (80068e8 <USBD_CDC_DeInit+0x100>)
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	f003 020f 	and.w	r2, r3, #15
 8006856:	6879      	ldr	r1, [r7, #4]
 8006858:	4613      	mov	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4413      	add	r3, r2
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	440b      	add	r3, r1
 8006862:	3324      	adds	r3, #36	; 0x24
 8006864:	2200      	movs	r2, #0
 8006866:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006868:	4b1f      	ldr	r3, [pc, #124]	; (80068e8 <USBD_CDC_DeInit+0x100>)
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	f003 020f 	and.w	r2, r3, #15
 8006870:	6879      	ldr	r1, [r7, #4]
 8006872:	4613      	mov	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	4413      	add	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	440b      	add	r3, r1
 800687c:	3326      	adds	r3, #38	; 0x26
 800687e:	2200      	movs	r2, #0
 8006880:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	32b0      	adds	r2, #176	; 0xb0
 800688c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d01f      	beq.n	80068d4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	33b0      	adds	r3, #176	; 0xb0
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4413      	add	r3, r2
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	32b0      	adds	r2, #176	; 0xb0
 80068b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068b6:	4618      	mov	r0, r3
 80068b8:	f002 fb40 	bl	8008f3c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	32b0      	adds	r2, #176	; 0xb0
 80068c6:	2100      	movs	r1, #0
 80068c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3708      	adds	r7, #8
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	20000093 	.word	0x20000093
 80068e4:	20000094 	.word	0x20000094
 80068e8:	20000095 	.word	0x20000095

080068ec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b086      	sub	sp, #24
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	32b0      	adds	r2, #176	; 0xb0
 8006900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006904:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006906:	2300      	movs	r3, #0
 8006908:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800690a:	2300      	movs	r3, #0
 800690c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800690e:	2300      	movs	r3, #0
 8006910:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d101      	bne.n	800691c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006918:	2303      	movs	r3, #3
 800691a:	e0bf      	b.n	8006a9c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006924:	2b00      	cmp	r3, #0
 8006926:	d050      	beq.n	80069ca <USBD_CDC_Setup+0xde>
 8006928:	2b20      	cmp	r3, #32
 800692a:	f040 80af 	bne.w	8006a8c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	88db      	ldrh	r3, [r3, #6]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d03a      	beq.n	80069ac <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	b25b      	sxtb	r3, r3
 800693c:	2b00      	cmp	r3, #0
 800693e:	da1b      	bge.n	8006978 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	33b0      	adds	r3, #176	; 0xb0
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	683a      	ldr	r2, [r7, #0]
 8006954:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006956:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	88d2      	ldrh	r2, [r2, #6]
 800695c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	88db      	ldrh	r3, [r3, #6]
 8006962:	2b07      	cmp	r3, #7
 8006964:	bf28      	it	cs
 8006966:	2307      	movcs	r3, #7
 8006968:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	89fa      	ldrh	r2, [r7, #14]
 800696e:	4619      	mov	r1, r3
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f001 fd89 	bl	8008488 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006976:	e090      	b.n	8006a9a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	785a      	ldrb	r2, [r3, #1]
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	88db      	ldrh	r3, [r3, #6]
 8006986:	2b3f      	cmp	r3, #63	; 0x3f
 8006988:	d803      	bhi.n	8006992 <USBD_CDC_Setup+0xa6>
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	88db      	ldrh	r3, [r3, #6]
 800698e:	b2da      	uxtb	r2, r3
 8006990:	e000      	b.n	8006994 <USBD_CDC_Setup+0xa8>
 8006992:	2240      	movs	r2, #64	; 0x40
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800699a:	6939      	ldr	r1, [r7, #16]
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80069a2:	461a      	mov	r2, r3
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f001 fd9b 	bl	80084e0 <USBD_CtlPrepareRx>
      break;
 80069aa:	e076      	b.n	8006a9a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	33b0      	adds	r3, #176	; 0xb0
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	4413      	add	r3, r2
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	683a      	ldr	r2, [r7, #0]
 80069c0:	7850      	ldrb	r0, [r2, #1]
 80069c2:	2200      	movs	r2, #0
 80069c4:	6839      	ldr	r1, [r7, #0]
 80069c6:	4798      	blx	r3
      break;
 80069c8:	e067      	b.n	8006a9a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	785b      	ldrb	r3, [r3, #1]
 80069ce:	2b0b      	cmp	r3, #11
 80069d0:	d851      	bhi.n	8006a76 <USBD_CDC_Setup+0x18a>
 80069d2:	a201      	add	r2, pc, #4	; (adr r2, 80069d8 <USBD_CDC_Setup+0xec>)
 80069d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d8:	08006a09 	.word	0x08006a09
 80069dc:	08006a85 	.word	0x08006a85
 80069e0:	08006a77 	.word	0x08006a77
 80069e4:	08006a77 	.word	0x08006a77
 80069e8:	08006a77 	.word	0x08006a77
 80069ec:	08006a77 	.word	0x08006a77
 80069f0:	08006a77 	.word	0x08006a77
 80069f4:	08006a77 	.word	0x08006a77
 80069f8:	08006a77 	.word	0x08006a77
 80069fc:	08006a77 	.word	0x08006a77
 8006a00:	08006a33 	.word	0x08006a33
 8006a04:	08006a5d 	.word	0x08006a5d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b03      	cmp	r3, #3
 8006a12:	d107      	bne.n	8006a24 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006a14:	f107 030a 	add.w	r3, r7, #10
 8006a18:	2202      	movs	r2, #2
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f001 fd33 	bl	8008488 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a22:	e032      	b.n	8006a8a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a24:	6839      	ldr	r1, [r7, #0]
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f001 fcbd 	bl	80083a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	75fb      	strb	r3, [r7, #23]
          break;
 8006a30:	e02b      	b.n	8006a8a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b03      	cmp	r3, #3
 8006a3c:	d107      	bne.n	8006a4e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006a3e:	f107 030d 	add.w	r3, r7, #13
 8006a42:	2201      	movs	r2, #1
 8006a44:	4619      	mov	r1, r3
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f001 fd1e 	bl	8008488 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a4c:	e01d      	b.n	8006a8a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a4e:	6839      	ldr	r1, [r7, #0]
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f001 fca8 	bl	80083a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a56:	2303      	movs	r3, #3
 8006a58:	75fb      	strb	r3, [r7, #23]
          break;
 8006a5a:	e016      	b.n	8006a8a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b03      	cmp	r3, #3
 8006a66:	d00f      	beq.n	8006a88 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006a68:	6839      	ldr	r1, [r7, #0]
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f001 fc9b 	bl	80083a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a70:	2303      	movs	r3, #3
 8006a72:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006a74:	e008      	b.n	8006a88 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006a76:	6839      	ldr	r1, [r7, #0]
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f001 fc94 	bl	80083a6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	75fb      	strb	r3, [r7, #23]
          break;
 8006a82:	e002      	b.n	8006a8a <USBD_CDC_Setup+0x19e>
          break;
 8006a84:	bf00      	nop
 8006a86:	e008      	b.n	8006a9a <USBD_CDC_Setup+0x1ae>
          break;
 8006a88:	bf00      	nop
      }
      break;
 8006a8a:	e006      	b.n	8006a9a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006a8c:	6839      	ldr	r1, [r7, #0]
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f001 fc89 	bl	80083a6 <USBD_CtlError>
      ret = USBD_FAIL;
 8006a94:	2303      	movs	r3, #3
 8006a96:	75fb      	strb	r3, [r7, #23]
      break;
 8006a98:	bf00      	nop
  }

  return (uint8_t)ret;
 8006a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3718      	adds	r7, #24
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	460b      	mov	r3, r1
 8006aae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006ab6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	32b0      	adds	r2, #176	; 0xb0
 8006ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d101      	bne.n	8006ace <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e065      	b.n	8006b9a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	32b0      	adds	r2, #176	; 0xb0
 8006ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006adc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006ade:	78fb      	ldrb	r3, [r7, #3]
 8006ae0:	f003 020f 	and.w	r2, r3, #15
 8006ae4:	6879      	ldr	r1, [r7, #4]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4413      	add	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	440b      	add	r3, r1
 8006af0:	3318      	adds	r3, #24
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d02f      	beq.n	8006b58 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006af8:	78fb      	ldrb	r3, [r7, #3]
 8006afa:	f003 020f 	and.w	r2, r3, #15
 8006afe:	6879      	ldr	r1, [r7, #4]
 8006b00:	4613      	mov	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	440b      	add	r3, r1
 8006b0a:	3318      	adds	r3, #24
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	78fb      	ldrb	r3, [r7, #3]
 8006b10:	f003 010f 	and.w	r1, r3, #15
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	460b      	mov	r3, r1
 8006b18:	00db      	lsls	r3, r3, #3
 8006b1a:	440b      	add	r3, r1
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4403      	add	r3, r0
 8006b20:	3348      	adds	r3, #72	; 0x48
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b28:	fb01 f303 	mul.w	r3, r1, r3
 8006b2c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d112      	bne.n	8006b58 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006b32:	78fb      	ldrb	r3, [r7, #3]
 8006b34:	f003 020f 	and.w	r2, r3, #15
 8006b38:	6879      	ldr	r1, [r7, #4]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4413      	add	r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	440b      	add	r3, r1
 8006b44:	3318      	adds	r3, #24
 8006b46:	2200      	movs	r2, #0
 8006b48:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b4a:	78f9      	ldrb	r1, [r7, #3]
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	2200      	movs	r2, #0
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f002 f990 	bl	8008e76 <USBD_LL_Transmit>
 8006b56:	e01f      	b.n	8006b98 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	33b0      	adds	r3, #176	; 0xb0
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d010      	beq.n	8006b98 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	33b0      	adds	r3, #176	; 0xb0
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	4413      	add	r3, r2
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006b94:	78fa      	ldrb	r2, [r7, #3]
 8006b96:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b084      	sub	sp, #16
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
 8006baa:	460b      	mov	r3, r1
 8006bac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	32b0      	adds	r2, #176	; 0xb0
 8006bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bbc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	32b0      	adds	r2, #176	; 0xb0
 8006bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e01a      	b.n	8006c0a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006bd4:	78fb      	ldrb	r3, [r7, #3]
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f002 f98e 	bl	8008efa <USBD_LL_GetRxDataSize>
 8006bde:	4602      	mov	r2, r0
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	33b0      	adds	r3, #176	; 0xb0
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006c04:	4611      	mov	r1, r2
 8006c06:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b084      	sub	sp, #16
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	32b0      	adds	r2, #176	; 0xb0
 8006c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c28:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d101      	bne.n	8006c34 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c30:	2303      	movs	r3, #3
 8006c32:	e025      	b.n	8006c80 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	33b0      	adds	r3, #176	; 0xb0
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d01a      	beq.n	8006c7e <USBD_CDC_EP0_RxReady+0x6c>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c4e:	2bff      	cmp	r3, #255	; 0xff
 8006c50:	d015      	beq.n	8006c7e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	33b0      	adds	r3, #176	; 0xb0
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006c6a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c72:	b292      	uxth	r2, r2
 8006c74:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	22ff      	movs	r2, #255	; 0xff
 8006c7a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c90:	2182      	movs	r1, #130	; 0x82
 8006c92:	4818      	ldr	r0, [pc, #96]	; (8006cf4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c94:	f000 fd4f 	bl	8007736 <USBD_GetEpDesc>
 8006c98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c9a:	2101      	movs	r1, #1
 8006c9c:	4815      	ldr	r0, [pc, #84]	; (8006cf4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c9e:	f000 fd4a 	bl	8007736 <USBD_GetEpDesc>
 8006ca2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006ca4:	2181      	movs	r1, #129	; 0x81
 8006ca6:	4813      	ldr	r0, [pc, #76]	; (8006cf4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ca8:	f000 fd45 	bl	8007736 <USBD_GetEpDesc>
 8006cac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d002      	beq.n	8006cba <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	2210      	movs	r2, #16
 8006cb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d006      	beq.n	8006cce <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cc8:	711a      	strb	r2, [r3, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d006      	beq.n	8006ce2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cdc:	711a      	strb	r2, [r3, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2243      	movs	r2, #67	; 0x43
 8006ce6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006ce8:	4b02      	ldr	r3, [pc, #8]	; (8006cf4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3718      	adds	r7, #24
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	20000050 	.word	0x20000050

08006cf8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b086      	sub	sp, #24
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d00:	2182      	movs	r1, #130	; 0x82
 8006d02:	4818      	ldr	r0, [pc, #96]	; (8006d64 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d04:	f000 fd17 	bl	8007736 <USBD_GetEpDesc>
 8006d08:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d0a:	2101      	movs	r1, #1
 8006d0c:	4815      	ldr	r0, [pc, #84]	; (8006d64 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d0e:	f000 fd12 	bl	8007736 <USBD_GetEpDesc>
 8006d12:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d14:	2181      	movs	r1, #129	; 0x81
 8006d16:	4813      	ldr	r0, [pc, #76]	; (8006d64 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d18:	f000 fd0d 	bl	8007736 <USBD_GetEpDesc>
 8006d1c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d002      	beq.n	8006d2a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	2210      	movs	r2, #16
 8006d28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d006      	beq.n	8006d3e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	2200      	movs	r2, #0
 8006d34:	711a      	strb	r2, [r3, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f042 0202 	orr.w	r2, r2, #2
 8006d3c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d006      	beq.n	8006d52 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	711a      	strb	r2, [r3, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f042 0202 	orr.w	r2, r2, #2
 8006d50:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2243      	movs	r2, #67	; 0x43
 8006d56:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d58:	4b02      	ldr	r3, [pc, #8]	; (8006d64 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3718      	adds	r7, #24
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	20000050 	.word	0x20000050

08006d68 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b086      	sub	sp, #24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d70:	2182      	movs	r1, #130	; 0x82
 8006d72:	4818      	ldr	r0, [pc, #96]	; (8006dd4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d74:	f000 fcdf 	bl	8007736 <USBD_GetEpDesc>
 8006d78:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d7a:	2101      	movs	r1, #1
 8006d7c:	4815      	ldr	r0, [pc, #84]	; (8006dd4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d7e:	f000 fcda 	bl	8007736 <USBD_GetEpDesc>
 8006d82:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d84:	2181      	movs	r1, #129	; 0x81
 8006d86:	4813      	ldr	r0, [pc, #76]	; (8006dd4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d88:	f000 fcd5 	bl	8007736 <USBD_GetEpDesc>
 8006d8c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d002      	beq.n	8006d9a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	2210      	movs	r2, #16
 8006d98:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d006      	beq.n	8006dae <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006da8:	711a      	strb	r2, [r3, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d006      	beq.n	8006dc2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dbc:	711a      	strb	r2, [r3, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2243      	movs	r2, #67	; 0x43
 8006dc6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006dc8:	4b02      	ldr	r3, [pc, #8]	; (8006dd4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3718      	adds	r7, #24
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	20000050 	.word	0x20000050

08006dd8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	220a      	movs	r2, #10
 8006de4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006de6:	4b03      	ldr	r3, [pc, #12]	; (8006df4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr
 8006df4:	2000000c 	.word	0x2000000c

08006df8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d101      	bne.n	8006e0c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e009      	b.n	8006e20 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	33b0      	adds	r3, #176	; 0xb0
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b087      	sub	sp, #28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	32b0      	adds	r2, #176	; 0xb0
 8006e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e46:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d101      	bne.n	8006e52 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e008      	b.n	8006e64 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	371c      	adds	r7, #28
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	32b0      	adds	r2, #176	; 0xb0
 8006e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e88:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d101      	bne.n	8006e94 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e004      	b.n	8006e9e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3714      	adds	r7, #20
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
	...

08006eac <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	32b0      	adds	r2, #176	; 0xb0
 8006ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ec2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	32b0      	adds	r2, #176	; 0xb0
 8006ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e025      	b.n	8006f2a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d11f      	bne.n	8006f28 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006ef0:	4b10      	ldr	r3, [pc, #64]	; (8006f34 <USBD_CDC_TransmitPacket+0x88>)
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	f003 020f 	and.w	r2, r3, #15
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	4613      	mov	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4403      	add	r3, r0
 8006f0a:	3318      	adds	r3, #24
 8006f0c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006f0e:	4b09      	ldr	r3, [pc, #36]	; (8006f34 <USBD_CDC_TransmitPacket+0x88>)
 8006f10:	7819      	ldrb	r1, [r3, #0]
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f001 ffa9 	bl	8008e76 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006f24:	2300      	movs	r3, #0
 8006f26:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	20000093 	.word	0x20000093

08006f38 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	32b0      	adds	r2, #176	; 0xb0
 8006f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f4e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	32b0      	adds	r2, #176	; 0xb0
 8006f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e018      	b.n	8006f98 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	7c1b      	ldrb	r3, [r3, #16]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d10a      	bne.n	8006f84 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f6e:	4b0c      	ldr	r3, [pc, #48]	; (8006fa0 <USBD_CDC_ReceivePacket+0x68>)
 8006f70:	7819      	ldrb	r1, [r3, #0]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f001 ff9b 	bl	8008eb8 <USBD_LL_PrepareReceive>
 8006f82:	e008      	b.n	8006f96 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f84:	4b06      	ldr	r3, [pc, #24]	; (8006fa0 <USBD_CDC_ReceivePacket+0x68>)
 8006f86:	7819      	ldrb	r1, [r3, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f8e:	2340      	movs	r3, #64	; 0x40
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f001 ff91 	bl	8008eb8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	20000094 	.word	0x20000094

08006fa4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b086      	sub	sp, #24
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d101      	bne.n	8006fbc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e01f      	b.n	8006ffc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d003      	beq.n	8006fe2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	79fa      	ldrb	r2, [r7, #7]
 8006fee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f001 fe0b 	bl	8008c0c <USBD_LL_Init>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3718      	adds	r7, #24
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800700e:	2300      	movs	r3, #0
 8007010:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d101      	bne.n	800701c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007018:	2303      	movs	r3, #3
 800701a:	e025      	b.n	8007068 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	32ae      	adds	r2, #174	; 0xae
 800702e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00f      	beq.n	8007058 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	32ae      	adds	r2, #174	; 0xae
 8007042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007048:	f107 020e 	add.w	r2, r7, #14
 800704c:	4610      	mov	r0, r2
 800704e:	4798      	blx	r3
 8007050:	4602      	mov	r2, r0
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800705e:	1c5a      	adds	r2, r3, #1
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f001 fe13 	bl	8008ca4 <USBD_LL_Start>
 800707e:	4603      	mov	r3, r0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007090:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007092:	4618      	mov	r0, r3
 8007094:	370c      	adds	r7, #12
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b084      	sub	sp, #16
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
 80070a6:	460b      	mov	r3, r1
 80070a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80070aa:	2300      	movs	r3, #0
 80070ac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d009      	beq.n	80070cc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	78fa      	ldrb	r2, [r7, #3]
 80070c2:	4611      	mov	r1, r2
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	4798      	blx	r3
 80070c8:	4603      	mov	r3, r0
 80070ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80070cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b084      	sub	sp, #16
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
 80070de:	460b      	mov	r3, r1
 80070e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80070e2:	2300      	movs	r3, #0
 80070e4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	78fa      	ldrb	r2, [r7, #3]
 80070f0:	4611      	mov	r1, r2
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	4798      	blx	r3
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d001      	beq.n	8007100 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80070fc:	2303      	movs	r3, #3
 80070fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007100:	7bfb      	ldrb	r3, [r7, #15]
}
 8007102:	4618      	mov	r0, r3
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b084      	sub	sp, #16
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
 8007112:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800711a:	6839      	ldr	r1, [r7, #0]
 800711c:	4618      	mov	r0, r3
 800711e:	f001 f908 	bl	8008332 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007130:	461a      	mov	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800713e:	f003 031f 	and.w	r3, r3, #31
 8007142:	2b02      	cmp	r3, #2
 8007144:	d01a      	beq.n	800717c <USBD_LL_SetupStage+0x72>
 8007146:	2b02      	cmp	r3, #2
 8007148:	d822      	bhi.n	8007190 <USBD_LL_SetupStage+0x86>
 800714a:	2b00      	cmp	r3, #0
 800714c:	d002      	beq.n	8007154 <USBD_LL_SetupStage+0x4a>
 800714e:	2b01      	cmp	r3, #1
 8007150:	d00a      	beq.n	8007168 <USBD_LL_SetupStage+0x5e>
 8007152:	e01d      	b.n	8007190 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800715a:	4619      	mov	r1, r3
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fb5f 	bl	8007820 <USBD_StdDevReq>
 8007162:	4603      	mov	r3, r0
 8007164:	73fb      	strb	r3, [r7, #15]
      break;
 8007166:	e020      	b.n	80071aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800716e:	4619      	mov	r1, r3
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fbc7 	bl	8007904 <USBD_StdItfReq>
 8007176:	4603      	mov	r3, r0
 8007178:	73fb      	strb	r3, [r7, #15]
      break;
 800717a:	e016      	b.n	80071aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007182:	4619      	mov	r1, r3
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 fc29 	bl	80079dc <USBD_StdEPReq>
 800718a:	4603      	mov	r3, r0
 800718c:	73fb      	strb	r3, [r7, #15]
      break;
 800718e:	e00c      	b.n	80071aa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007196:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800719a:	b2db      	uxtb	r3, r3
 800719c:	4619      	mov	r1, r3
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f001 fde0 	bl	8008d64 <USBD_LL_StallEP>
 80071a4:	4603      	mov	r3, r0
 80071a6:	73fb      	strb	r3, [r7, #15]
      break;
 80071a8:	bf00      	nop
  }

  return ret;
 80071aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3710      	adds	r7, #16
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b086      	sub	sp, #24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	460b      	mov	r3, r1
 80071be:	607a      	str	r2, [r7, #4]
 80071c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80071c2:	2300      	movs	r3, #0
 80071c4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80071c6:	7afb      	ldrb	r3, [r7, #11]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d16e      	bne.n	80072aa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80071d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071da:	2b03      	cmp	r3, #3
 80071dc:	f040 8098 	bne.w	8007310 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	689a      	ldr	r2, [r3, #8]
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d913      	bls.n	8007214 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	689a      	ldr	r2, [r3, #8]
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	1ad2      	subs	r2, r2, r3
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	68da      	ldr	r2, [r3, #12]
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	4293      	cmp	r3, r2
 8007204:	bf28      	it	cs
 8007206:	4613      	movcs	r3, r2
 8007208:	461a      	mov	r2, r3
 800720a:	6879      	ldr	r1, [r7, #4]
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f001 f984 	bl	800851a <USBD_CtlContinueRx>
 8007212:	e07d      	b.n	8007310 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800721a:	f003 031f 	and.w	r3, r3, #31
 800721e:	2b02      	cmp	r3, #2
 8007220:	d014      	beq.n	800724c <USBD_LL_DataOutStage+0x98>
 8007222:	2b02      	cmp	r3, #2
 8007224:	d81d      	bhi.n	8007262 <USBD_LL_DataOutStage+0xae>
 8007226:	2b00      	cmp	r3, #0
 8007228:	d002      	beq.n	8007230 <USBD_LL_DataOutStage+0x7c>
 800722a:	2b01      	cmp	r3, #1
 800722c:	d003      	beq.n	8007236 <USBD_LL_DataOutStage+0x82>
 800722e:	e018      	b.n	8007262 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007230:	2300      	movs	r3, #0
 8007232:	75bb      	strb	r3, [r7, #22]
            break;
 8007234:	e018      	b.n	8007268 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800723c:	b2db      	uxtb	r3, r3
 800723e:	4619      	mov	r1, r3
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f000 fa5e 	bl	8007702 <USBD_CoreFindIF>
 8007246:	4603      	mov	r3, r0
 8007248:	75bb      	strb	r3, [r7, #22]
            break;
 800724a:	e00d      	b.n	8007268 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007252:	b2db      	uxtb	r3, r3
 8007254:	4619      	mov	r1, r3
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f000 fa60 	bl	800771c <USBD_CoreFindEP>
 800725c:	4603      	mov	r3, r0
 800725e:	75bb      	strb	r3, [r7, #22]
            break;
 8007260:	e002      	b.n	8007268 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007262:	2300      	movs	r3, #0
 8007264:	75bb      	strb	r3, [r7, #22]
            break;
 8007266:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007268:	7dbb      	ldrb	r3, [r7, #22]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d119      	bne.n	80072a2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b03      	cmp	r3, #3
 8007278:	d113      	bne.n	80072a2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800727a:	7dba      	ldrb	r2, [r7, #22]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	32ae      	adds	r2, #174	; 0xae
 8007280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00b      	beq.n	80072a2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800728a:	7dba      	ldrb	r2, [r7, #22]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007292:	7dba      	ldrb	r2, [r7, #22]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	32ae      	adds	r2, #174	; 0xae
 8007298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f001 f94a 	bl	800853c <USBD_CtlSendStatus>
 80072a8:	e032      	b.n	8007310 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80072aa:	7afb      	ldrb	r3, [r7, #11]
 80072ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	4619      	mov	r1, r3
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f000 fa31 	bl	800771c <USBD_CoreFindEP>
 80072ba:	4603      	mov	r3, r0
 80072bc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072be:	7dbb      	ldrb	r3, [r7, #22]
 80072c0:	2bff      	cmp	r3, #255	; 0xff
 80072c2:	d025      	beq.n	8007310 <USBD_LL_DataOutStage+0x15c>
 80072c4:	7dbb      	ldrb	r3, [r7, #22]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d122      	bne.n	8007310 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	2b03      	cmp	r3, #3
 80072d4:	d117      	bne.n	8007306 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80072d6:	7dba      	ldrb	r2, [r7, #22]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	32ae      	adds	r2, #174	; 0xae
 80072dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00f      	beq.n	8007306 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80072e6:	7dba      	ldrb	r2, [r7, #22]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80072ee:	7dba      	ldrb	r2, [r7, #22]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	32ae      	adds	r2, #174	; 0xae
 80072f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	7afa      	ldrb	r2, [r7, #11]
 80072fc:	4611      	mov	r1, r2
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	4798      	blx	r3
 8007302:	4603      	mov	r3, r0
 8007304:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007306:	7dfb      	ldrb	r3, [r7, #23]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d001      	beq.n	8007310 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800730c:	7dfb      	ldrb	r3, [r7, #23]
 800730e:	e000      	b.n	8007312 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3718      	adds	r7, #24
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b086      	sub	sp, #24
 800731e:	af00      	add	r7, sp, #0
 8007320:	60f8      	str	r0, [r7, #12]
 8007322:	460b      	mov	r3, r1
 8007324:	607a      	str	r2, [r7, #4]
 8007326:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007328:	7afb      	ldrb	r3, [r7, #11]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d16f      	bne.n	800740e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	3314      	adds	r3, #20
 8007332:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800733a:	2b02      	cmp	r3, #2
 800733c:	d15a      	bne.n	80073f4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	689a      	ldr	r2, [r3, #8]
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	429a      	cmp	r2, r3
 8007348:	d914      	bls.n	8007374 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	689a      	ldr	r2, [r3, #8]
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	1ad2      	subs	r2, r2, r3
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	461a      	mov	r2, r3
 800735e:	6879      	ldr	r1, [r7, #4]
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f001 f8ac 	bl	80084be <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007366:	2300      	movs	r3, #0
 8007368:	2200      	movs	r2, #0
 800736a:	2100      	movs	r1, #0
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f001 fda3 	bl	8008eb8 <USBD_LL_PrepareReceive>
 8007372:	e03f      	b.n	80073f4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	68da      	ldr	r2, [r3, #12]
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	429a      	cmp	r2, r3
 800737e:	d11c      	bne.n	80073ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	685a      	ldr	r2, [r3, #4]
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007388:	429a      	cmp	r2, r3
 800738a:	d316      	bcc.n	80073ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	685a      	ldr	r2, [r3, #4]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007396:	429a      	cmp	r2, r3
 8007398:	d20f      	bcs.n	80073ba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800739a:	2200      	movs	r2, #0
 800739c:	2100      	movs	r1, #0
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f001 f88d 	bl	80084be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073ac:	2300      	movs	r3, #0
 80073ae:	2200      	movs	r2, #0
 80073b0:	2100      	movs	r1, #0
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f001 fd80 	bl	8008eb8 <USBD_LL_PrepareReceive>
 80073b8:	e01c      	b.n	80073f4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	d10f      	bne.n	80073e6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d009      	beq.n	80073e6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80073e6:	2180      	movs	r1, #128	; 0x80
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f001 fcbb 	bl	8008d64 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f001 f8b7 	bl	8008562 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d03a      	beq.n	8007474 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f7ff fe42 	bl	8007088 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800740c:	e032      	b.n	8007474 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800740e:	7afb      	ldrb	r3, [r7, #11]
 8007410:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007414:	b2db      	uxtb	r3, r3
 8007416:	4619      	mov	r1, r3
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f000 f97f 	bl	800771c <USBD_CoreFindEP>
 800741e:	4603      	mov	r3, r0
 8007420:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007422:	7dfb      	ldrb	r3, [r7, #23]
 8007424:	2bff      	cmp	r3, #255	; 0xff
 8007426:	d025      	beq.n	8007474 <USBD_LL_DataInStage+0x15a>
 8007428:	7dfb      	ldrb	r3, [r7, #23]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d122      	bne.n	8007474 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007434:	b2db      	uxtb	r3, r3
 8007436:	2b03      	cmp	r3, #3
 8007438:	d11c      	bne.n	8007474 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800743a:	7dfa      	ldrb	r2, [r7, #23]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	32ae      	adds	r2, #174	; 0xae
 8007440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d014      	beq.n	8007474 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800744a:	7dfa      	ldrb	r2, [r7, #23]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007452:	7dfa      	ldrb	r2, [r7, #23]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	32ae      	adds	r2, #174	; 0xae
 8007458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800745c:	695b      	ldr	r3, [r3, #20]
 800745e:	7afa      	ldrb	r2, [r7, #11]
 8007460:	4611      	mov	r1, r2
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	4798      	blx	r3
 8007466:	4603      	mov	r3, r0
 8007468:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800746a:	7dbb      	ldrb	r3, [r7, #22]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d001      	beq.n	8007474 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007470:	7dbb      	ldrb	r3, [r7, #22]
 8007472:	e000      	b.n	8007476 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3718      	adds	r7, #24
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b084      	sub	sp, #16
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007486:	2300      	movs	r3, #0
 8007488:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d014      	beq.n	80074e4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00e      	beq.n	80074e4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	6852      	ldr	r2, [r2, #4]
 80074d2:	b2d2      	uxtb	r2, r2
 80074d4:	4611      	mov	r1, r2
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	4798      	blx	r3
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d001      	beq.n	80074e4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80074e0:	2303      	movs	r3, #3
 80074e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074e4:	2340      	movs	r3, #64	; 0x40
 80074e6:	2200      	movs	r2, #0
 80074e8:	2100      	movs	r1, #0
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f001 fbf5 	bl	8008cda <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2240      	movs	r2, #64	; 0x40
 80074fc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007500:	2340      	movs	r3, #64	; 0x40
 8007502:	2200      	movs	r2, #0
 8007504:	2180      	movs	r1, #128	; 0x80
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f001 fbe7 	bl	8008cda <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2240      	movs	r2, #64	; 0x40
 8007516:	621a      	str	r2, [r3, #32]

  return ret;
 8007518:	7bfb      	ldrb	r3, [r7, #15]
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007522:	b480      	push	{r7}
 8007524:	b083      	sub	sp, #12
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
 800752a:	460b      	mov	r3, r1
 800752c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	78fa      	ldrb	r2, [r7, #3]
 8007532:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	370c      	adds	r7, #12
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr

08007542 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007542:	b480      	push	{r7}
 8007544:	b083      	sub	sp, #12
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007550:	b2da      	uxtb	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2204      	movs	r2, #4
 800755c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	370c      	adds	r7, #12
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr

0800756e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800756e:	b480      	push	{r7}
 8007570:	b083      	sub	sp, #12
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800757c:	b2db      	uxtb	r3, r3
 800757e:	2b04      	cmp	r3, #4
 8007580:	d106      	bne.n	8007590 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007588:	b2da      	uxtb	r2, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	370c      	adds	r7, #12
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr

0800759e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b082      	sub	sp, #8
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	2b03      	cmp	r3, #3
 80075b0:	d110      	bne.n	80075d4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00b      	beq.n	80075d4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075c2:	69db      	ldr	r3, [r3, #28]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d005      	beq.n	80075d4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ce:	69db      	ldr	r3, [r3, #28]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b082      	sub	sp, #8
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	460b      	mov	r3, r1
 80075e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	32ae      	adds	r2, #174	; 0xae
 80075f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d101      	bne.n	8007600 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e01c      	b.n	800763a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007606:	b2db      	uxtb	r3, r3
 8007608:	2b03      	cmp	r3, #3
 800760a:	d115      	bne.n	8007638 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	32ae      	adds	r2, #174	; 0xae
 8007616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800761a:	6a1b      	ldr	r3, [r3, #32]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00b      	beq.n	8007638 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	32ae      	adds	r2, #174	; 0xae
 800762a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800762e:	6a1b      	ldr	r3, [r3, #32]
 8007630:	78fa      	ldrb	r2, [r7, #3]
 8007632:	4611      	mov	r1, r2
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b082      	sub	sp, #8
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	460b      	mov	r3, r1
 800764c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	32ae      	adds	r2, #174	; 0xae
 8007658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d101      	bne.n	8007664 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007660:	2303      	movs	r3, #3
 8007662:	e01c      	b.n	800769e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800766a:	b2db      	uxtb	r3, r3
 800766c:	2b03      	cmp	r3, #3
 800766e:	d115      	bne.n	800769c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	32ae      	adds	r2, #174	; 0xae
 800767a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800767e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00b      	beq.n	800769c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	32ae      	adds	r2, #174	; 0xae
 800768e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007694:	78fa      	ldrb	r2, [r7, #3]
 8007696:	4611      	mov	r1, r2
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3708      	adds	r7, #8
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80076a6:	b480      	push	{r7}
 80076a8:	b083      	sub	sp, #12
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80076c4:	2300      	movs	r3, #0
 80076c6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00e      	beq.n	80076f8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	6852      	ldr	r2, [r2, #4]
 80076e6:	b2d2      	uxtb	r2, r2
 80076e8:	4611      	mov	r1, r2
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	4798      	blx	r3
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d001      	beq.n	80076f8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80076f4:	2303      	movs	r3, #3
 80076f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80076f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007702:	b480      	push	{r7}
 8007704:	b083      	sub	sp, #12
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
 800770a:	460b      	mov	r3, r1
 800770c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800770e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007710:	4618      	mov	r0, r3
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	460b      	mov	r3, r1
 8007726:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007728:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800772a:	4618      	mov	r0, r3
 800772c:	370c      	adds	r7, #12
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr

08007736 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b086      	sub	sp, #24
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
 800773e:	460b      	mov	r3, r1
 8007740:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800774a:	2300      	movs	r3, #0
 800774c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	885b      	ldrh	r3, [r3, #2]
 8007752:	b29a      	uxth	r2, r3
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	b29b      	uxth	r3, r3
 800775a:	429a      	cmp	r2, r3
 800775c:	d920      	bls.n	80077a0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	b29b      	uxth	r3, r3
 8007764:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007766:	e013      	b.n	8007790 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007768:	f107 030a 	add.w	r3, r7, #10
 800776c:	4619      	mov	r1, r3
 800776e:	6978      	ldr	r0, [r7, #20]
 8007770:	f000 f81b 	bl	80077aa <USBD_GetNextDesc>
 8007774:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	785b      	ldrb	r3, [r3, #1]
 800777a:	2b05      	cmp	r3, #5
 800777c:	d108      	bne.n	8007790 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	789b      	ldrb	r3, [r3, #2]
 8007786:	78fa      	ldrb	r2, [r7, #3]
 8007788:	429a      	cmp	r2, r3
 800778a:	d008      	beq.n	800779e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800778c:	2300      	movs	r3, #0
 800778e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	885b      	ldrh	r3, [r3, #2]
 8007794:	b29a      	uxth	r2, r3
 8007796:	897b      	ldrh	r3, [r7, #10]
 8007798:	429a      	cmp	r2, r3
 800779a:	d8e5      	bhi.n	8007768 <USBD_GetEpDesc+0x32>
 800779c:	e000      	b.n	80077a0 <USBD_GetEpDesc+0x6a>
          break;
 800779e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80077a0:	693b      	ldr	r3, [r7, #16]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3718      	adds	r7, #24
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80077aa:	b480      	push	{r7}
 80077ac:	b085      	sub	sp, #20
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
 80077b2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	881a      	ldrh	r2, [r3, #0]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	4413      	add	r3, r2
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	461a      	mov	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4413      	add	r3, r2
 80077d4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80077d6:	68fb      	ldr	r3, [r7, #12]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3714      	adds	r7, #20
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b087      	sub	sp, #28
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	3301      	adds	r3, #1
 80077fa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007802:	8a3b      	ldrh	r3, [r7, #16]
 8007804:	021b      	lsls	r3, r3, #8
 8007806:	b21a      	sxth	r2, r3
 8007808:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800780c:	4313      	orrs	r3, r2
 800780e:	b21b      	sxth	r3, r3
 8007810:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007812:	89fb      	ldrh	r3, [r7, #14]
}
 8007814:	4618      	mov	r0, r3
 8007816:	371c      	adds	r7, #28
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800782a:	2300      	movs	r3, #0
 800782c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007836:	2b40      	cmp	r3, #64	; 0x40
 8007838:	d005      	beq.n	8007846 <USBD_StdDevReq+0x26>
 800783a:	2b40      	cmp	r3, #64	; 0x40
 800783c:	d857      	bhi.n	80078ee <USBD_StdDevReq+0xce>
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00f      	beq.n	8007862 <USBD_StdDevReq+0x42>
 8007842:	2b20      	cmp	r3, #32
 8007844:	d153      	bne.n	80078ee <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	32ae      	adds	r2, #174	; 0xae
 8007850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	6839      	ldr	r1, [r7, #0]
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	4798      	blx	r3
 800785c:	4603      	mov	r3, r0
 800785e:	73fb      	strb	r3, [r7, #15]
      break;
 8007860:	e04a      	b.n	80078f8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	785b      	ldrb	r3, [r3, #1]
 8007866:	2b09      	cmp	r3, #9
 8007868:	d83b      	bhi.n	80078e2 <USBD_StdDevReq+0xc2>
 800786a:	a201      	add	r2, pc, #4	; (adr r2, 8007870 <USBD_StdDevReq+0x50>)
 800786c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007870:	080078c5 	.word	0x080078c5
 8007874:	080078d9 	.word	0x080078d9
 8007878:	080078e3 	.word	0x080078e3
 800787c:	080078cf 	.word	0x080078cf
 8007880:	080078e3 	.word	0x080078e3
 8007884:	080078a3 	.word	0x080078a3
 8007888:	08007899 	.word	0x08007899
 800788c:	080078e3 	.word	0x080078e3
 8007890:	080078bb 	.word	0x080078bb
 8007894:	080078ad 	.word	0x080078ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fa3c 	bl	8007d18 <USBD_GetDescriptor>
          break;
 80078a0:	e024      	b.n	80078ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80078a2:	6839      	ldr	r1, [r7, #0]
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 fba1 	bl	8007fec <USBD_SetAddress>
          break;
 80078aa:	e01f      	b.n	80078ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80078ac:	6839      	ldr	r1, [r7, #0]
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fbe0 	bl	8008074 <USBD_SetConfig>
 80078b4:	4603      	mov	r3, r0
 80078b6:	73fb      	strb	r3, [r7, #15]
          break;
 80078b8:	e018      	b.n	80078ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80078ba:	6839      	ldr	r1, [r7, #0]
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fc83 	bl	80081c8 <USBD_GetConfig>
          break;
 80078c2:	e013      	b.n	80078ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fcb4 	bl	8008234 <USBD_GetStatus>
          break;
 80078cc:	e00e      	b.n	80078ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fce3 	bl	800829c <USBD_SetFeature>
          break;
 80078d6:	e009      	b.n	80078ec <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80078d8:	6839      	ldr	r1, [r7, #0]
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fd07 	bl	80082ee <USBD_ClrFeature>
          break;
 80078e0:	e004      	b.n	80078ec <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80078e2:	6839      	ldr	r1, [r7, #0]
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fd5e 	bl	80083a6 <USBD_CtlError>
          break;
 80078ea:	bf00      	nop
      }
      break;
 80078ec:	e004      	b.n	80078f8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80078ee:	6839      	ldr	r1, [r7, #0]
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fd58 	bl	80083a6 <USBD_CtlError>
      break;
 80078f6:	bf00      	nop
  }

  return ret;
 80078f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop

08007904 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800790e:	2300      	movs	r3, #0
 8007910:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800791a:	2b40      	cmp	r3, #64	; 0x40
 800791c:	d005      	beq.n	800792a <USBD_StdItfReq+0x26>
 800791e:	2b40      	cmp	r3, #64	; 0x40
 8007920:	d852      	bhi.n	80079c8 <USBD_StdItfReq+0xc4>
 8007922:	2b00      	cmp	r3, #0
 8007924:	d001      	beq.n	800792a <USBD_StdItfReq+0x26>
 8007926:	2b20      	cmp	r3, #32
 8007928:	d14e      	bne.n	80079c8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007930:	b2db      	uxtb	r3, r3
 8007932:	3b01      	subs	r3, #1
 8007934:	2b02      	cmp	r3, #2
 8007936:	d840      	bhi.n	80079ba <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	889b      	ldrh	r3, [r3, #4]
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b01      	cmp	r3, #1
 8007940:	d836      	bhi.n	80079b0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	889b      	ldrh	r3, [r3, #4]
 8007946:	b2db      	uxtb	r3, r3
 8007948:	4619      	mov	r1, r3
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f7ff fed9 	bl	8007702 <USBD_CoreFindIF>
 8007950:	4603      	mov	r3, r0
 8007952:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007954:	7bbb      	ldrb	r3, [r7, #14]
 8007956:	2bff      	cmp	r3, #255	; 0xff
 8007958:	d01d      	beq.n	8007996 <USBD_StdItfReq+0x92>
 800795a:	7bbb      	ldrb	r3, [r7, #14]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d11a      	bne.n	8007996 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007960:	7bba      	ldrb	r2, [r7, #14]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	32ae      	adds	r2, #174	; 0xae
 8007966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00f      	beq.n	8007990 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007970:	7bba      	ldrb	r2, [r7, #14]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007978:	7bba      	ldrb	r2, [r7, #14]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	32ae      	adds	r2, #174	; 0xae
 800797e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	6839      	ldr	r1, [r7, #0]
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	4798      	blx	r3
 800798a:	4603      	mov	r3, r0
 800798c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800798e:	e004      	b.n	800799a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007990:	2303      	movs	r3, #3
 8007992:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007994:	e001      	b.n	800799a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007996:	2303      	movs	r3, #3
 8007998:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	88db      	ldrh	r3, [r3, #6]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d110      	bne.n	80079c4 <USBD_StdItfReq+0xc0>
 80079a2:	7bfb      	ldrb	r3, [r7, #15]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10d      	bne.n	80079c4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fdc7 	bl	800853c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80079ae:	e009      	b.n	80079c4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 fcf7 	bl	80083a6 <USBD_CtlError>
          break;
 80079b8:	e004      	b.n	80079c4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80079ba:	6839      	ldr	r1, [r7, #0]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fcf2 	bl	80083a6 <USBD_CtlError>
          break;
 80079c2:	e000      	b.n	80079c6 <USBD_StdItfReq+0xc2>
          break;
 80079c4:	bf00      	nop
      }
      break;
 80079c6:	e004      	b.n	80079d2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80079c8:	6839      	ldr	r1, [r7, #0]
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fceb 	bl	80083a6 <USBD_CtlError>
      break;
 80079d0:	bf00      	nop
  }

  return ret;
 80079d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3710      	adds	r7, #16
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	889b      	ldrh	r3, [r3, #4]
 80079ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079f8:	2b40      	cmp	r3, #64	; 0x40
 80079fa:	d007      	beq.n	8007a0c <USBD_StdEPReq+0x30>
 80079fc:	2b40      	cmp	r3, #64	; 0x40
 80079fe:	f200 817f 	bhi.w	8007d00 <USBD_StdEPReq+0x324>
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d02a      	beq.n	8007a5c <USBD_StdEPReq+0x80>
 8007a06:	2b20      	cmp	r3, #32
 8007a08:	f040 817a 	bne.w	8007d00 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007a0c:	7bbb      	ldrb	r3, [r7, #14]
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f7ff fe83 	bl	800771c <USBD_CoreFindEP>
 8007a16:	4603      	mov	r3, r0
 8007a18:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a1a:	7b7b      	ldrb	r3, [r7, #13]
 8007a1c:	2bff      	cmp	r3, #255	; 0xff
 8007a1e:	f000 8174 	beq.w	8007d0a <USBD_StdEPReq+0x32e>
 8007a22:	7b7b      	ldrb	r3, [r7, #13]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f040 8170 	bne.w	8007d0a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007a2a:	7b7a      	ldrb	r2, [r7, #13]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007a32:	7b7a      	ldrb	r2, [r7, #13]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	32ae      	adds	r2, #174	; 0xae
 8007a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f000 8163 	beq.w	8007d0a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007a44:	7b7a      	ldrb	r2, [r7, #13]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	32ae      	adds	r2, #174	; 0xae
 8007a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	6839      	ldr	r1, [r7, #0]
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	4798      	blx	r3
 8007a56:	4603      	mov	r3, r0
 8007a58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a5a:	e156      	b.n	8007d0a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	785b      	ldrb	r3, [r3, #1]
 8007a60:	2b03      	cmp	r3, #3
 8007a62:	d008      	beq.n	8007a76 <USBD_StdEPReq+0x9a>
 8007a64:	2b03      	cmp	r3, #3
 8007a66:	f300 8145 	bgt.w	8007cf4 <USBD_StdEPReq+0x318>
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f000 809b 	beq.w	8007ba6 <USBD_StdEPReq+0x1ca>
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d03c      	beq.n	8007aee <USBD_StdEPReq+0x112>
 8007a74:	e13e      	b.n	8007cf4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d002      	beq.n	8007a88 <USBD_StdEPReq+0xac>
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d016      	beq.n	8007ab4 <USBD_StdEPReq+0xd8>
 8007a86:	e02c      	b.n	8007ae2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a88:	7bbb      	ldrb	r3, [r7, #14]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00d      	beq.n	8007aaa <USBD_StdEPReq+0xce>
 8007a8e:	7bbb      	ldrb	r3, [r7, #14]
 8007a90:	2b80      	cmp	r3, #128	; 0x80
 8007a92:	d00a      	beq.n	8007aaa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a94:	7bbb      	ldrb	r3, [r7, #14]
 8007a96:	4619      	mov	r1, r3
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f001 f963 	bl	8008d64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a9e:	2180      	movs	r1, #128	; 0x80
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f001 f95f 	bl	8008d64 <USBD_LL_StallEP>
 8007aa6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007aa8:	e020      	b.n	8007aec <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fc7a 	bl	80083a6 <USBD_CtlError>
              break;
 8007ab2:	e01b      	b.n	8007aec <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	885b      	ldrh	r3, [r3, #2]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d10e      	bne.n	8007ada <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007abc:	7bbb      	ldrb	r3, [r7, #14]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00b      	beq.n	8007ada <USBD_StdEPReq+0xfe>
 8007ac2:	7bbb      	ldrb	r3, [r7, #14]
 8007ac4:	2b80      	cmp	r3, #128	; 0x80
 8007ac6:	d008      	beq.n	8007ada <USBD_StdEPReq+0xfe>
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	88db      	ldrh	r3, [r3, #6]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d104      	bne.n	8007ada <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ad0:	7bbb      	ldrb	r3, [r7, #14]
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f001 f945 	bl	8008d64 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 fd2e 	bl	800853c <USBD_CtlSendStatus>

              break;
 8007ae0:	e004      	b.n	8007aec <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007ae2:	6839      	ldr	r1, [r7, #0]
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 fc5e 	bl	80083a6 <USBD_CtlError>
              break;
 8007aea:	bf00      	nop
          }
          break;
 8007aec:	e107      	b.n	8007cfe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b02      	cmp	r3, #2
 8007af8:	d002      	beq.n	8007b00 <USBD_StdEPReq+0x124>
 8007afa:	2b03      	cmp	r3, #3
 8007afc:	d016      	beq.n	8007b2c <USBD_StdEPReq+0x150>
 8007afe:	e04b      	b.n	8007b98 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b00:	7bbb      	ldrb	r3, [r7, #14]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00d      	beq.n	8007b22 <USBD_StdEPReq+0x146>
 8007b06:	7bbb      	ldrb	r3, [r7, #14]
 8007b08:	2b80      	cmp	r3, #128	; 0x80
 8007b0a:	d00a      	beq.n	8007b22 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b0c:	7bbb      	ldrb	r3, [r7, #14]
 8007b0e:	4619      	mov	r1, r3
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f001 f927 	bl	8008d64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b16:	2180      	movs	r1, #128	; 0x80
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f001 f923 	bl	8008d64 <USBD_LL_StallEP>
 8007b1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b20:	e040      	b.n	8007ba4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fc3e 	bl	80083a6 <USBD_CtlError>
              break;
 8007b2a:	e03b      	b.n	8007ba4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	885b      	ldrh	r3, [r3, #2]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d136      	bne.n	8007ba2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b34:	7bbb      	ldrb	r3, [r7, #14]
 8007b36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d004      	beq.n	8007b48 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b3e:	7bbb      	ldrb	r3, [r7, #14]
 8007b40:	4619      	mov	r1, r3
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f001 f92d 	bl	8008da2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 fcf7 	bl	800853c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007b4e:	7bbb      	ldrb	r3, [r7, #14]
 8007b50:	4619      	mov	r1, r3
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7ff fde2 	bl	800771c <USBD_CoreFindEP>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b5c:	7b7b      	ldrb	r3, [r7, #13]
 8007b5e:	2bff      	cmp	r3, #255	; 0xff
 8007b60:	d01f      	beq.n	8007ba2 <USBD_StdEPReq+0x1c6>
 8007b62:	7b7b      	ldrb	r3, [r7, #13]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d11c      	bne.n	8007ba2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007b68:	7b7a      	ldrb	r2, [r7, #13]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007b70:	7b7a      	ldrb	r2, [r7, #13]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	32ae      	adds	r2, #174	; 0xae
 8007b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d010      	beq.n	8007ba2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b80:	7b7a      	ldrb	r2, [r7, #13]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	32ae      	adds	r2, #174	; 0xae
 8007b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	6839      	ldr	r1, [r7, #0]
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	4798      	blx	r3
 8007b92:	4603      	mov	r3, r0
 8007b94:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007b96:	e004      	b.n	8007ba2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007b98:	6839      	ldr	r1, [r7, #0]
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fc03 	bl	80083a6 <USBD_CtlError>
              break;
 8007ba0:	e000      	b.n	8007ba4 <USBD_StdEPReq+0x1c8>
              break;
 8007ba2:	bf00      	nop
          }
          break;
 8007ba4:	e0ab      	b.n	8007cfe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	d002      	beq.n	8007bb8 <USBD_StdEPReq+0x1dc>
 8007bb2:	2b03      	cmp	r3, #3
 8007bb4:	d032      	beq.n	8007c1c <USBD_StdEPReq+0x240>
 8007bb6:	e097      	b.n	8007ce8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bb8:	7bbb      	ldrb	r3, [r7, #14]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d007      	beq.n	8007bce <USBD_StdEPReq+0x1f2>
 8007bbe:	7bbb      	ldrb	r3, [r7, #14]
 8007bc0:	2b80      	cmp	r3, #128	; 0x80
 8007bc2:	d004      	beq.n	8007bce <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fbed 	bl	80083a6 <USBD_CtlError>
                break;
 8007bcc:	e091      	b.n	8007cf2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	da0b      	bge.n	8007bee <USBD_StdEPReq+0x212>
 8007bd6:	7bbb      	ldrb	r3, [r7, #14]
 8007bd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bdc:	4613      	mov	r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	4413      	add	r3, r2
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	3310      	adds	r3, #16
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	4413      	add	r3, r2
 8007bea:	3304      	adds	r3, #4
 8007bec:	e00b      	b.n	8007c06 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bee:	7bbb      	ldrb	r3, [r7, #14]
 8007bf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4413      	add	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	4413      	add	r3, r2
 8007c04:	3304      	adds	r3, #4
 8007c06:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	2202      	movs	r2, #2
 8007c12:	4619      	mov	r1, r3
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 fc37 	bl	8008488 <USBD_CtlSendData>
              break;
 8007c1a:	e06a      	b.n	8007cf2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	da11      	bge.n	8007c48 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c24:	7bbb      	ldrb	r3, [r7, #14]
 8007c26:	f003 020f 	and.w	r2, r3, #15
 8007c2a:	6879      	ldr	r1, [r7, #4]
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	4413      	add	r3, r2
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	440b      	add	r3, r1
 8007c36:	3324      	adds	r3, #36	; 0x24
 8007c38:	881b      	ldrh	r3, [r3, #0]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d117      	bne.n	8007c6e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c3e:	6839      	ldr	r1, [r7, #0]
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fbb0 	bl	80083a6 <USBD_CtlError>
                  break;
 8007c46:	e054      	b.n	8007cf2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c48:	7bbb      	ldrb	r3, [r7, #14]
 8007c4a:	f003 020f 	and.w	r2, r3, #15
 8007c4e:	6879      	ldr	r1, [r7, #4]
 8007c50:	4613      	mov	r3, r2
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	4413      	add	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	440b      	add	r3, r1
 8007c5a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c5e:	881b      	ldrh	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d104      	bne.n	8007c6e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c64:	6839      	ldr	r1, [r7, #0]
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fb9d 	bl	80083a6 <USBD_CtlError>
                  break;
 8007c6c:	e041      	b.n	8007cf2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	da0b      	bge.n	8007c8e <USBD_StdEPReq+0x2b2>
 8007c76:	7bbb      	ldrb	r3, [r7, #14]
 8007c78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	3310      	adds	r3, #16
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	4413      	add	r3, r2
 8007c8a:	3304      	adds	r3, #4
 8007c8c:	e00b      	b.n	8007ca6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c8e:	7bbb      	ldrb	r3, [r7, #14]
 8007c90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c94:	4613      	mov	r3, r2
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4413      	add	r3, r2
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	3304      	adds	r3, #4
 8007ca6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007ca8:	7bbb      	ldrb	r3, [r7, #14]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d002      	beq.n	8007cb4 <USBD_StdEPReq+0x2d8>
 8007cae:	7bbb      	ldrb	r3, [r7, #14]
 8007cb0:	2b80      	cmp	r3, #128	; 0x80
 8007cb2:	d103      	bne.n	8007cbc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	601a      	str	r2, [r3, #0]
 8007cba:	e00e      	b.n	8007cda <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007cbc:	7bbb      	ldrb	r3, [r7, #14]
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f001 f88d 	bl	8008de0 <USBD_LL_IsStallEP>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d003      	beq.n	8007cd4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	601a      	str	r2, [r3, #0]
 8007cd2:	e002      	b.n	8007cda <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	2202      	movs	r2, #2
 8007cde:	4619      	mov	r1, r3
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fbd1 	bl	8008488 <USBD_CtlSendData>
              break;
 8007ce6:	e004      	b.n	8007cf2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007ce8:	6839      	ldr	r1, [r7, #0]
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fb5b 	bl	80083a6 <USBD_CtlError>
              break;
 8007cf0:	bf00      	nop
          }
          break;
 8007cf2:	e004      	b.n	8007cfe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007cf4:	6839      	ldr	r1, [r7, #0]
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fb55 	bl	80083a6 <USBD_CtlError>
          break;
 8007cfc:	bf00      	nop
      }
      break;
 8007cfe:	e005      	b.n	8007d0c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007d00:	6839      	ldr	r1, [r7, #0]
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fb4f 	bl	80083a6 <USBD_CtlError>
      break;
 8007d08:	e000      	b.n	8007d0c <USBD_StdEPReq+0x330>
      break;
 8007d0a:	bf00      	nop
  }

  return ret;
 8007d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
	...

08007d18 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d22:	2300      	movs	r3, #0
 8007d24:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d26:	2300      	movs	r3, #0
 8007d28:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	885b      	ldrh	r3, [r3, #2]
 8007d32:	0a1b      	lsrs	r3, r3, #8
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	3b01      	subs	r3, #1
 8007d38:	2b06      	cmp	r3, #6
 8007d3a:	f200 8128 	bhi.w	8007f8e <USBD_GetDescriptor+0x276>
 8007d3e:	a201      	add	r2, pc, #4	; (adr r2, 8007d44 <USBD_GetDescriptor+0x2c>)
 8007d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d44:	08007d61 	.word	0x08007d61
 8007d48:	08007d79 	.word	0x08007d79
 8007d4c:	08007db9 	.word	0x08007db9
 8007d50:	08007f8f 	.word	0x08007f8f
 8007d54:	08007f8f 	.word	0x08007f8f
 8007d58:	08007f2f 	.word	0x08007f2f
 8007d5c:	08007f5b 	.word	0x08007f5b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	7c12      	ldrb	r2, [r2, #16]
 8007d6c:	f107 0108 	add.w	r1, r7, #8
 8007d70:	4610      	mov	r0, r2
 8007d72:	4798      	blx	r3
 8007d74:	60f8      	str	r0, [r7, #12]
      break;
 8007d76:	e112      	b.n	8007f9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	7c1b      	ldrb	r3, [r3, #16]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d10d      	bne.n	8007d9c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d88:	f107 0208 	add.w	r2, r7, #8
 8007d8c:	4610      	mov	r0, r2
 8007d8e:	4798      	blx	r3
 8007d90:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	3301      	adds	r3, #1
 8007d96:	2202      	movs	r2, #2
 8007d98:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d9a:	e100      	b.n	8007f9e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da4:	f107 0208 	add.w	r2, r7, #8
 8007da8:	4610      	mov	r0, r2
 8007daa:	4798      	blx	r3
 8007dac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	3301      	adds	r3, #1
 8007db2:	2202      	movs	r2, #2
 8007db4:	701a      	strb	r2, [r3, #0]
      break;
 8007db6:	e0f2      	b.n	8007f9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	885b      	ldrh	r3, [r3, #2]
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	2b05      	cmp	r3, #5
 8007dc0:	f200 80ac 	bhi.w	8007f1c <USBD_GetDescriptor+0x204>
 8007dc4:	a201      	add	r2, pc, #4	; (adr r2, 8007dcc <USBD_GetDescriptor+0xb4>)
 8007dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dca:	bf00      	nop
 8007dcc:	08007de5 	.word	0x08007de5
 8007dd0:	08007e19 	.word	0x08007e19
 8007dd4:	08007e4d 	.word	0x08007e4d
 8007dd8:	08007e81 	.word	0x08007e81
 8007ddc:	08007eb5 	.word	0x08007eb5
 8007de0:	08007ee9 	.word	0x08007ee9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00b      	beq.n	8007e08 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	7c12      	ldrb	r2, [r2, #16]
 8007dfc:	f107 0108 	add.w	r1, r7, #8
 8007e00:	4610      	mov	r0, r2
 8007e02:	4798      	blx	r3
 8007e04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e06:	e091      	b.n	8007f2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e08:	6839      	ldr	r1, [r7, #0]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 facb 	bl	80083a6 <USBD_CtlError>
            err++;
 8007e10:	7afb      	ldrb	r3, [r7, #11]
 8007e12:	3301      	adds	r3, #1
 8007e14:	72fb      	strb	r3, [r7, #11]
          break;
 8007e16:	e089      	b.n	8007f2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d00b      	beq.n	8007e3c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	7c12      	ldrb	r2, [r2, #16]
 8007e30:	f107 0108 	add.w	r1, r7, #8
 8007e34:	4610      	mov	r0, r2
 8007e36:	4798      	blx	r3
 8007e38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e3a:	e077      	b.n	8007f2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e3c:	6839      	ldr	r1, [r7, #0]
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fab1 	bl	80083a6 <USBD_CtlError>
            err++;
 8007e44:	7afb      	ldrb	r3, [r7, #11]
 8007e46:	3301      	adds	r3, #1
 8007e48:	72fb      	strb	r3, [r7, #11]
          break;
 8007e4a:	e06f      	b.n	8007f2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00b      	beq.n	8007e70 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	7c12      	ldrb	r2, [r2, #16]
 8007e64:	f107 0108 	add.w	r1, r7, #8
 8007e68:	4610      	mov	r0, r2
 8007e6a:	4798      	blx	r3
 8007e6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e6e:	e05d      	b.n	8007f2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e70:	6839      	ldr	r1, [r7, #0]
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fa97 	bl	80083a6 <USBD_CtlError>
            err++;
 8007e78:	7afb      	ldrb	r3, [r7, #11]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e7e:	e055      	b.n	8007f2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00b      	beq.n	8007ea4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	7c12      	ldrb	r2, [r2, #16]
 8007e98:	f107 0108 	add.w	r1, r7, #8
 8007e9c:	4610      	mov	r0, r2
 8007e9e:	4798      	blx	r3
 8007ea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ea2:	e043      	b.n	8007f2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ea4:	6839      	ldr	r1, [r7, #0]
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fa7d 	bl	80083a6 <USBD_CtlError>
            err++;
 8007eac:	7afb      	ldrb	r3, [r7, #11]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	72fb      	strb	r3, [r7, #11]
          break;
 8007eb2:	e03b      	b.n	8007f2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eba:	695b      	ldr	r3, [r3, #20]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00b      	beq.n	8007ed8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ec6:	695b      	ldr	r3, [r3, #20]
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	7c12      	ldrb	r2, [r2, #16]
 8007ecc:	f107 0108 	add.w	r1, r7, #8
 8007ed0:	4610      	mov	r0, r2
 8007ed2:	4798      	blx	r3
 8007ed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ed6:	e029      	b.n	8007f2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ed8:	6839      	ldr	r1, [r7, #0]
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fa63 	bl	80083a6 <USBD_CtlError>
            err++;
 8007ee0:	7afb      	ldrb	r3, [r7, #11]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ee6:	e021      	b.n	8007f2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eee:	699b      	ldr	r3, [r3, #24]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00b      	beq.n	8007f0c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007efa:	699b      	ldr	r3, [r3, #24]
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	7c12      	ldrb	r2, [r2, #16]
 8007f00:	f107 0108 	add.w	r1, r7, #8
 8007f04:	4610      	mov	r0, r2
 8007f06:	4798      	blx	r3
 8007f08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f0a:	e00f      	b.n	8007f2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f0c:	6839      	ldr	r1, [r7, #0]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 fa49 	bl	80083a6 <USBD_CtlError>
            err++;
 8007f14:	7afb      	ldrb	r3, [r7, #11]
 8007f16:	3301      	adds	r3, #1
 8007f18:	72fb      	strb	r3, [r7, #11]
          break;
 8007f1a:	e007      	b.n	8007f2c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007f1c:	6839      	ldr	r1, [r7, #0]
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fa41 	bl	80083a6 <USBD_CtlError>
          err++;
 8007f24:	7afb      	ldrb	r3, [r7, #11]
 8007f26:	3301      	adds	r3, #1
 8007f28:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007f2a:	bf00      	nop
      }
      break;
 8007f2c:	e037      	b.n	8007f9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	7c1b      	ldrb	r3, [r3, #16]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d109      	bne.n	8007f4a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f3e:	f107 0208 	add.w	r2, r7, #8
 8007f42:	4610      	mov	r0, r2
 8007f44:	4798      	blx	r3
 8007f46:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f48:	e029      	b.n	8007f9e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f4a:	6839      	ldr	r1, [r7, #0]
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 fa2a 	bl	80083a6 <USBD_CtlError>
        err++;
 8007f52:	7afb      	ldrb	r3, [r7, #11]
 8007f54:	3301      	adds	r3, #1
 8007f56:	72fb      	strb	r3, [r7, #11]
      break;
 8007f58:	e021      	b.n	8007f9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	7c1b      	ldrb	r3, [r3, #16]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10d      	bne.n	8007f7e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f6a:	f107 0208 	add.w	r2, r7, #8
 8007f6e:	4610      	mov	r0, r2
 8007f70:	4798      	blx	r3
 8007f72:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	3301      	adds	r3, #1
 8007f78:	2207      	movs	r2, #7
 8007f7a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f7c:	e00f      	b.n	8007f9e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f7e:	6839      	ldr	r1, [r7, #0]
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 fa10 	bl	80083a6 <USBD_CtlError>
        err++;
 8007f86:	7afb      	ldrb	r3, [r7, #11]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	72fb      	strb	r3, [r7, #11]
      break;
 8007f8c:	e007      	b.n	8007f9e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007f8e:	6839      	ldr	r1, [r7, #0]
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 fa08 	bl	80083a6 <USBD_CtlError>
      err++;
 8007f96:	7afb      	ldrb	r3, [r7, #11]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	72fb      	strb	r3, [r7, #11]
      break;
 8007f9c:	bf00      	nop
  }

  if (err != 0U)
 8007f9e:	7afb      	ldrb	r3, [r7, #11]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d11e      	bne.n	8007fe2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	88db      	ldrh	r3, [r3, #6]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d016      	beq.n	8007fda <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007fac:	893b      	ldrh	r3, [r7, #8]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d00e      	beq.n	8007fd0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	88da      	ldrh	r2, [r3, #6]
 8007fb6:	893b      	ldrh	r3, [r7, #8]
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	bf28      	it	cs
 8007fbc:	4613      	movcs	r3, r2
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007fc2:	893b      	ldrh	r3, [r7, #8]
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	68f9      	ldr	r1, [r7, #12]
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 fa5d 	bl	8008488 <USBD_CtlSendData>
 8007fce:	e009      	b.n	8007fe4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007fd0:	6839      	ldr	r1, [r7, #0]
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f9e7 	bl	80083a6 <USBD_CtlError>
 8007fd8:	e004      	b.n	8007fe4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 faae 	bl	800853c <USBD_CtlSendStatus>
 8007fe0:	e000      	b.n	8007fe4 <USBD_GetDescriptor+0x2cc>
    return;
 8007fe2:	bf00      	nop
  }
}
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop

08007fec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	889b      	ldrh	r3, [r3, #4]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d131      	bne.n	8008062 <USBD_SetAddress+0x76>
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	88db      	ldrh	r3, [r3, #6]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d12d      	bne.n	8008062 <USBD_SetAddress+0x76>
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	885b      	ldrh	r3, [r3, #2]
 800800a:	2b7f      	cmp	r3, #127	; 0x7f
 800800c:	d829      	bhi.n	8008062 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	885b      	ldrh	r3, [r3, #2]
 8008012:	b2db      	uxtb	r3, r3
 8008014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008018:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b03      	cmp	r3, #3
 8008024:	d104      	bne.n	8008030 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008026:	6839      	ldr	r1, [r7, #0]
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 f9bc 	bl	80083a6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800802e:	e01d      	b.n	800806c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	7bfa      	ldrb	r2, [r7, #15]
 8008034:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008038:	7bfb      	ldrb	r3, [r7, #15]
 800803a:	4619      	mov	r1, r3
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fefb 	bl	8008e38 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 fa7a 	bl	800853c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008048:	7bfb      	ldrb	r3, [r7, #15]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d004      	beq.n	8008058 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2202      	movs	r2, #2
 8008052:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008056:	e009      	b.n	800806c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008060:	e004      	b.n	800806c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008062:	6839      	ldr	r1, [r7, #0]
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 f99e 	bl	80083a6 <USBD_CtlError>
  }
}
 800806a:	bf00      	nop
 800806c:	bf00      	nop
 800806e:	3710      	adds	r7, #16
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800807e:	2300      	movs	r3, #0
 8008080:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	885b      	ldrh	r3, [r3, #2]
 8008086:	b2da      	uxtb	r2, r3
 8008088:	4b4e      	ldr	r3, [pc, #312]	; (80081c4 <USBD_SetConfig+0x150>)
 800808a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800808c:	4b4d      	ldr	r3, [pc, #308]	; (80081c4 <USBD_SetConfig+0x150>)
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d905      	bls.n	80080a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008094:	6839      	ldr	r1, [r7, #0]
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f985 	bl	80083a6 <USBD_CtlError>
    return USBD_FAIL;
 800809c:	2303      	movs	r3, #3
 800809e:	e08c      	b.n	80081ba <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d002      	beq.n	80080b2 <USBD_SetConfig+0x3e>
 80080ac:	2b03      	cmp	r3, #3
 80080ae:	d029      	beq.n	8008104 <USBD_SetConfig+0x90>
 80080b0:	e075      	b.n	800819e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80080b2:	4b44      	ldr	r3, [pc, #272]	; (80081c4 <USBD_SetConfig+0x150>)
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d020      	beq.n	80080fc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80080ba:	4b42      	ldr	r3, [pc, #264]	; (80081c4 <USBD_SetConfig+0x150>)
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	461a      	mov	r2, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80080c4:	4b3f      	ldr	r3, [pc, #252]	; (80081c4 <USBD_SetConfig+0x150>)
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	4619      	mov	r1, r3
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f7fe ffe7 	bl	800709e <USBD_SetClassConfig>
 80080d0:	4603      	mov	r3, r0
 80080d2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80080d4:	7bfb      	ldrb	r3, [r7, #15]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d008      	beq.n	80080ec <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80080da:	6839      	ldr	r1, [r7, #0]
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 f962 	bl	80083a6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2202      	movs	r2, #2
 80080e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080ea:	e065      	b.n	80081b8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 fa25 	bl	800853c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2203      	movs	r2, #3
 80080f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80080fa:	e05d      	b.n	80081b8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 fa1d 	bl	800853c <USBD_CtlSendStatus>
      break;
 8008102:	e059      	b.n	80081b8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008104:	4b2f      	ldr	r3, [pc, #188]	; (80081c4 <USBD_SetConfig+0x150>)
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d112      	bne.n	8008132 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2202      	movs	r2, #2
 8008110:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008114:	4b2b      	ldr	r3, [pc, #172]	; (80081c4 <USBD_SetConfig+0x150>)
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	461a      	mov	r2, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800811e:	4b29      	ldr	r3, [pc, #164]	; (80081c4 <USBD_SetConfig+0x150>)
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	4619      	mov	r1, r3
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f7fe ffd6 	bl	80070d6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fa06 	bl	800853c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008130:	e042      	b.n	80081b8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008132:	4b24      	ldr	r3, [pc, #144]	; (80081c4 <USBD_SetConfig+0x150>)
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	461a      	mov	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	429a      	cmp	r2, r3
 800813e:	d02a      	beq.n	8008196 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	b2db      	uxtb	r3, r3
 8008146:	4619      	mov	r1, r3
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f7fe ffc4 	bl	80070d6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800814e:	4b1d      	ldr	r3, [pc, #116]	; (80081c4 <USBD_SetConfig+0x150>)
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	461a      	mov	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008158:	4b1a      	ldr	r3, [pc, #104]	; (80081c4 <USBD_SetConfig+0x150>)
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	4619      	mov	r1, r3
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f7fe ff9d 	bl	800709e <USBD_SetClassConfig>
 8008164:	4603      	mov	r3, r0
 8008166:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008168:	7bfb      	ldrb	r3, [r7, #15]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d00f      	beq.n	800818e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 f918 	bl	80083a6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	b2db      	uxtb	r3, r3
 800817c:	4619      	mov	r1, r3
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f7fe ffa9 	bl	80070d6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2202      	movs	r2, #2
 8008188:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800818c:	e014      	b.n	80081b8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 f9d4 	bl	800853c <USBD_CtlSendStatus>
      break;
 8008194:	e010      	b.n	80081b8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 f9d0 	bl	800853c <USBD_CtlSendStatus>
      break;
 800819c:	e00c      	b.n	80081b8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800819e:	6839      	ldr	r1, [r7, #0]
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 f900 	bl	80083a6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80081a6:	4b07      	ldr	r3, [pc, #28]	; (80081c4 <USBD_SetConfig+0x150>)
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	4619      	mov	r1, r3
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f7fe ff92 	bl	80070d6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80081b2:	2303      	movs	r3, #3
 80081b4:	73fb      	strb	r3, [r7, #15]
      break;
 80081b6:	bf00      	nop
  }

  return ret;
 80081b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3710      	adds	r7, #16
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	2000026c 	.word	0x2000026c

080081c8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	88db      	ldrh	r3, [r3, #6]
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d004      	beq.n	80081e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80081da:	6839      	ldr	r1, [r7, #0]
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 f8e2 	bl	80083a6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80081e2:	e023      	b.n	800822c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	dc02      	bgt.n	80081f6 <USBD_GetConfig+0x2e>
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	dc03      	bgt.n	80081fc <USBD_GetConfig+0x34>
 80081f4:	e015      	b.n	8008222 <USBD_GetConfig+0x5a>
 80081f6:	2b03      	cmp	r3, #3
 80081f8:	d00b      	beq.n	8008212 <USBD_GetConfig+0x4a>
 80081fa:	e012      	b.n	8008222 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	3308      	adds	r3, #8
 8008206:	2201      	movs	r2, #1
 8008208:	4619      	mov	r1, r3
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 f93c 	bl	8008488 <USBD_CtlSendData>
        break;
 8008210:	e00c      	b.n	800822c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	3304      	adds	r3, #4
 8008216:	2201      	movs	r2, #1
 8008218:	4619      	mov	r1, r3
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 f934 	bl	8008488 <USBD_CtlSendData>
        break;
 8008220:	e004      	b.n	800822c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008222:	6839      	ldr	r1, [r7, #0]
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 f8be 	bl	80083a6 <USBD_CtlError>
        break;
 800822a:	bf00      	nop
}
 800822c:	bf00      	nop
 800822e:	3708      	adds	r7, #8
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008244:	b2db      	uxtb	r3, r3
 8008246:	3b01      	subs	r3, #1
 8008248:	2b02      	cmp	r3, #2
 800824a:	d81e      	bhi.n	800828a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	88db      	ldrh	r3, [r3, #6]
 8008250:	2b02      	cmp	r3, #2
 8008252:	d004      	beq.n	800825e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008254:	6839      	ldr	r1, [r7, #0]
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f8a5 	bl	80083a6 <USBD_CtlError>
        break;
 800825c:	e01a      	b.n	8008294 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2201      	movs	r2, #1
 8008262:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800826a:	2b00      	cmp	r3, #0
 800826c:	d005      	beq.n	800827a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	f043 0202 	orr.w	r2, r3, #2
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	330c      	adds	r3, #12
 800827e:	2202      	movs	r2, #2
 8008280:	4619      	mov	r1, r3
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f900 	bl	8008488 <USBD_CtlSendData>
      break;
 8008288:	e004      	b.n	8008294 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800828a:	6839      	ldr	r1, [r7, #0]
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 f88a 	bl	80083a6 <USBD_CtlError>
      break;
 8008292:	bf00      	nop
  }
}
 8008294:	bf00      	nop
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	885b      	ldrh	r3, [r3, #2]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d107      	bne.n	80082be <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f940 	bl	800853c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80082bc:	e013      	b.n	80082e6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	885b      	ldrh	r3, [r3, #2]
 80082c2:	2b02      	cmp	r3, #2
 80082c4:	d10b      	bne.n	80082de <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	889b      	ldrh	r3, [r3, #4]
 80082ca:	0a1b      	lsrs	r3, r3, #8
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	b2da      	uxtb	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 f930 	bl	800853c <USBD_CtlSendStatus>
}
 80082dc:	e003      	b.n	80082e6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80082de:	6839      	ldr	r1, [r7, #0]
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 f860 	bl	80083a6 <USBD_CtlError>
}
 80082e6:	bf00      	nop
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b082      	sub	sp, #8
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
 80082f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	3b01      	subs	r3, #1
 8008302:	2b02      	cmp	r3, #2
 8008304:	d80b      	bhi.n	800831e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	885b      	ldrh	r3, [r3, #2]
 800830a:	2b01      	cmp	r3, #1
 800830c:	d10c      	bne.n	8008328 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f910 	bl	800853c <USBD_CtlSendStatus>
      }
      break;
 800831c:	e004      	b.n	8008328 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800831e:	6839      	ldr	r1, [r7, #0]
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f840 	bl	80083a6 <USBD_CtlError>
      break;
 8008326:	e000      	b.n	800832a <USBD_ClrFeature+0x3c>
      break;
 8008328:	bf00      	nop
  }
}
 800832a:	bf00      	nop
 800832c:	3708      	adds	r7, #8
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008332:	b580      	push	{r7, lr}
 8008334:	b084      	sub	sp, #16
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
 800833a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	781a      	ldrb	r2, [r3, #0]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	3301      	adds	r3, #1
 800834c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	781a      	ldrb	r2, [r3, #0]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	3301      	adds	r3, #1
 800835a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f7ff fa41 	bl	80077e4 <SWAPBYTE>
 8008362:	4603      	mov	r3, r0
 8008364:	461a      	mov	r2, r3
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	3301      	adds	r3, #1
 800836e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	3301      	adds	r3, #1
 8008374:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f7ff fa34 	bl	80077e4 <SWAPBYTE>
 800837c:	4603      	mov	r3, r0
 800837e:	461a      	mov	r2, r3
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	3301      	adds	r3, #1
 8008388:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	3301      	adds	r3, #1
 800838e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f7ff fa27 	bl	80077e4 <SWAPBYTE>
 8008396:	4603      	mov	r3, r0
 8008398:	461a      	mov	r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	80da      	strh	r2, [r3, #6]
}
 800839e:	bf00      	nop
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b082      	sub	sp, #8
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
 80083ae:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80083b0:	2180      	movs	r1, #128	; 0x80
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 fcd6 	bl	8008d64 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80083b8:	2100      	movs	r1, #0
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 fcd2 	bl	8008d64 <USBD_LL_StallEP>
}
 80083c0:	bf00      	nop
 80083c2:	3708      	adds	r7, #8
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b086      	sub	sp, #24
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80083d4:	2300      	movs	r3, #0
 80083d6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d036      	beq.n	800844c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80083e2:	6938      	ldr	r0, [r7, #16]
 80083e4:	f000 f836 	bl	8008454 <USBD_GetLen>
 80083e8:	4603      	mov	r3, r0
 80083ea:	3301      	adds	r3, #1
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	005b      	lsls	r3, r3, #1
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80083f6:	7dfb      	ldrb	r3, [r7, #23]
 80083f8:	68ba      	ldr	r2, [r7, #8]
 80083fa:	4413      	add	r3, r2
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	7812      	ldrb	r2, [r2, #0]
 8008400:	701a      	strb	r2, [r3, #0]
  idx++;
 8008402:	7dfb      	ldrb	r3, [r7, #23]
 8008404:	3301      	adds	r3, #1
 8008406:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008408:	7dfb      	ldrb	r3, [r7, #23]
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	4413      	add	r3, r2
 800840e:	2203      	movs	r2, #3
 8008410:	701a      	strb	r2, [r3, #0]
  idx++;
 8008412:	7dfb      	ldrb	r3, [r7, #23]
 8008414:	3301      	adds	r3, #1
 8008416:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008418:	e013      	b.n	8008442 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800841a:	7dfb      	ldrb	r3, [r7, #23]
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	4413      	add	r3, r2
 8008420:	693a      	ldr	r2, [r7, #16]
 8008422:	7812      	ldrb	r2, [r2, #0]
 8008424:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	3301      	adds	r3, #1
 800842a:	613b      	str	r3, [r7, #16]
    idx++;
 800842c:	7dfb      	ldrb	r3, [r7, #23]
 800842e:	3301      	adds	r3, #1
 8008430:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008432:	7dfb      	ldrb	r3, [r7, #23]
 8008434:	68ba      	ldr	r2, [r7, #8]
 8008436:	4413      	add	r3, r2
 8008438:	2200      	movs	r2, #0
 800843a:	701a      	strb	r2, [r3, #0]
    idx++;
 800843c:	7dfb      	ldrb	r3, [r7, #23]
 800843e:	3301      	adds	r3, #1
 8008440:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d1e7      	bne.n	800841a <USBD_GetString+0x52>
 800844a:	e000      	b.n	800844e <USBD_GetString+0x86>
    return;
 800844c:	bf00      	nop
  }
}
 800844e:	3718      	adds	r7, #24
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008454:	b480      	push	{r7}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800845c:	2300      	movs	r3, #0
 800845e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008464:	e005      	b.n	8008472 <USBD_GetLen+0x1e>
  {
    len++;
 8008466:	7bfb      	ldrb	r3, [r7, #15]
 8008468:	3301      	adds	r3, #1
 800846a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	3301      	adds	r3, #1
 8008470:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1f5      	bne.n	8008466 <USBD_GetLen+0x12>
  }

  return len;
 800847a:	7bfb      	ldrb	r3, [r7, #15]
}
 800847c:	4618      	mov	r0, r3
 800847e:	3714      	adds	r7, #20
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2202      	movs	r2, #2
 8008498:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	68ba      	ldr	r2, [r7, #8]
 80084ac:	2100      	movs	r1, #0
 80084ae:	68f8      	ldr	r0, [r7, #12]
 80084b0:	f000 fce1 	bl	8008e76 <USBD_LL_Transmit>

  return USBD_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b084      	sub	sp, #16
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	60f8      	str	r0, [r7, #12]
 80084c6:	60b9      	str	r1, [r7, #8]
 80084c8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	68ba      	ldr	r2, [r7, #8]
 80084ce:	2100      	movs	r1, #0
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f000 fcd0 	bl	8008e76 <USBD_LL_Transmit>

  return USBD_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2203      	movs	r2, #3
 80084f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	68ba      	ldr	r2, [r7, #8]
 8008508:	2100      	movs	r1, #0
 800850a:	68f8      	ldr	r0, [r7, #12]
 800850c:	f000 fcd4 	bl	8008eb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b084      	sub	sp, #16
 800851e:	af00      	add	r7, sp, #0
 8008520:	60f8      	str	r0, [r7, #12]
 8008522:	60b9      	str	r1, [r7, #8]
 8008524:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	68ba      	ldr	r2, [r7, #8]
 800852a:	2100      	movs	r1, #0
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f000 fcc3 	bl	8008eb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2204      	movs	r2, #4
 8008548:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800854c:	2300      	movs	r3, #0
 800854e:	2200      	movs	r2, #0
 8008550:	2100      	movs	r1, #0
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fc8f 	bl	8008e76 <USBD_LL_Transmit>

  return USBD_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3708      	adds	r7, #8
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b082      	sub	sp, #8
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2205      	movs	r2, #5
 800856e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008572:	2300      	movs	r3, #0
 8008574:	2200      	movs	r2, #0
 8008576:	2100      	movs	r1, #0
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 fc9d 	bl	8008eb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800857e:	2300      	movs	r3, #0
}
 8008580:	4618      	mov	r0, r3
 8008582:	3708      	adds	r7, #8
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800858c:	2200      	movs	r2, #0
 800858e:	4912      	ldr	r1, [pc, #72]	; (80085d8 <MX_USB_DEVICE_Init+0x50>)
 8008590:	4812      	ldr	r0, [pc, #72]	; (80085dc <MX_USB_DEVICE_Init+0x54>)
 8008592:	f7fe fd07 	bl	8006fa4 <USBD_Init>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d001      	beq.n	80085a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800859c:	f7f8 fa06 	bl	80009ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80085a0:	490f      	ldr	r1, [pc, #60]	; (80085e0 <MX_USB_DEVICE_Init+0x58>)
 80085a2:	480e      	ldr	r0, [pc, #56]	; (80085dc <MX_USB_DEVICE_Init+0x54>)
 80085a4:	f7fe fd2e 	bl	8007004 <USBD_RegisterClass>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d001      	beq.n	80085b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80085ae:	f7f8 f9fd 	bl	80009ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80085b2:	490c      	ldr	r1, [pc, #48]	; (80085e4 <MX_USB_DEVICE_Init+0x5c>)
 80085b4:	4809      	ldr	r0, [pc, #36]	; (80085dc <MX_USB_DEVICE_Init+0x54>)
 80085b6:	f7fe fc1f 	bl	8006df8 <USBD_CDC_RegisterInterface>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d001      	beq.n	80085c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80085c0:	f7f8 f9f4 	bl	80009ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80085c4:	4805      	ldr	r0, [pc, #20]	; (80085dc <MX_USB_DEVICE_Init+0x54>)
 80085c6:	f7fe fd53 	bl	8007070 <USBD_Start>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d001      	beq.n	80085d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80085d0:	f7f8 f9ec 	bl	80009ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80085d4:	bf00      	nop
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	200000ac 	.word	0x200000ac
 80085dc:	20000270 	.word	0x20000270
 80085e0:	20000018 	.word	0x20000018
 80085e4:	20000098 	.word	0x20000098

080085e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80085ec:	2200      	movs	r2, #0
 80085ee:	4905      	ldr	r1, [pc, #20]	; (8008604 <CDC_Init_FS+0x1c>)
 80085f0:	4805      	ldr	r0, [pc, #20]	; (8008608 <CDC_Init_FS+0x20>)
 80085f2:	f7fe fc1b 	bl	8006e2c <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80085f6:	4905      	ldr	r1, [pc, #20]	; (800860c <CDC_Init_FS+0x24>)
 80085f8:	4803      	ldr	r0, [pc, #12]	; (8008608 <CDC_Init_FS+0x20>)
 80085fa:	f7fe fc39 	bl	8006e70 <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 80085fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008600:	4618      	mov	r0, r3
 8008602:	bd80      	pop	{r7, pc}
 8008604:	2000094c 	.word	0x2000094c
 8008608:	20000270 	.word	0x20000270
 800860c:	2000054c 	.word	0x2000054c

08008610 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008610:	b480      	push	{r7}
 8008612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
    return (USBD_OK);
 8008614:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008616:	4618      	mov	r0, r3
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	4603      	mov	r3, r0
 8008628:	6039      	str	r1, [r7, #0]
 800862a:	71fb      	strb	r3, [r7, #7]
 800862c:	4613      	mov	r3, r2
 800862e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
    switch (cmd) {
 8008630:	79fb      	ldrb	r3, [r7, #7]
 8008632:	2b23      	cmp	r3, #35	; 0x23
 8008634:	d84a      	bhi.n	80086cc <CDC_Control_FS+0xac>
 8008636:	a201      	add	r2, pc, #4	; (adr r2, 800863c <CDC_Control_FS+0x1c>)
 8008638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800863c:	080086cd 	.word	0x080086cd
 8008640:	080086cd 	.word	0x080086cd
 8008644:	080086cd 	.word	0x080086cd
 8008648:	080086cd 	.word	0x080086cd
 800864c:	080086cd 	.word	0x080086cd
 8008650:	080086cd 	.word	0x080086cd
 8008654:	080086cd 	.word	0x080086cd
 8008658:	080086cd 	.word	0x080086cd
 800865c:	080086cd 	.word	0x080086cd
 8008660:	080086cd 	.word	0x080086cd
 8008664:	080086cd 	.word	0x080086cd
 8008668:	080086cd 	.word	0x080086cd
 800866c:	080086cd 	.word	0x080086cd
 8008670:	080086cd 	.word	0x080086cd
 8008674:	080086cd 	.word	0x080086cd
 8008678:	080086cd 	.word	0x080086cd
 800867c:	080086cd 	.word	0x080086cd
 8008680:	080086cd 	.word	0x080086cd
 8008684:	080086cd 	.word	0x080086cd
 8008688:	080086cd 	.word	0x080086cd
 800868c:	080086cd 	.word	0x080086cd
 8008690:	080086cd 	.word	0x080086cd
 8008694:	080086cd 	.word	0x080086cd
 8008698:	080086cd 	.word	0x080086cd
 800869c:	080086cd 	.word	0x080086cd
 80086a0:	080086cd 	.word	0x080086cd
 80086a4:	080086cd 	.word	0x080086cd
 80086a8:	080086cd 	.word	0x080086cd
 80086ac:	080086cd 	.word	0x080086cd
 80086b0:	080086cd 	.word	0x080086cd
 80086b4:	080086cd 	.word	0x080086cd
 80086b8:	080086cd 	.word	0x080086cd
 80086bc:	080086cd 	.word	0x080086cd
 80086c0:	080086cd 	.word	0x080086cd
 80086c4:	080086cd 	.word	0x080086cd
 80086c8:	080086cd 	.word	0x080086cd
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 80086cc:	bf00      	nop
    }

    return (USBD_OK);
 80086ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80086e6:	6879      	ldr	r1, [r7, #4]
 80086e8:	4805      	ldr	r0, [pc, #20]	; (8008700 <CDC_Receive_FS+0x24>)
 80086ea:	f7fe fbc1 	bl	8006e70 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80086ee:	4804      	ldr	r0, [pc, #16]	; (8008700 <CDC_Receive_FS+0x24>)
 80086f0:	f7fe fc22 	bl	8006f38 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 80086f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3708      	adds	r7, #8
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	20000270 	.word	0x20000270

08008704 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	460b      	mov	r3, r1
 800870e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008710:	2300      	movs	r3, #0
 8008712:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 8008714:	4b0d      	ldr	r3, [pc, #52]	; (800874c <CDC_Transmit_FS+0x48>)
 8008716:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800871a:	60bb      	str	r3, [r7, #8]
    if (hcdc->TxState != 0) {
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008722:	2b00      	cmp	r3, #0
 8008724:	d001      	beq.n	800872a <CDC_Transmit_FS+0x26>
        return USBD_BUSY;
 8008726:	2301      	movs	r3, #1
 8008728:	e00b      	b.n	8008742 <CDC_Transmit_FS+0x3e>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800872a:	887b      	ldrh	r3, [r7, #2]
 800872c:	461a      	mov	r2, r3
 800872e:	6879      	ldr	r1, [r7, #4]
 8008730:	4806      	ldr	r0, [pc, #24]	; (800874c <CDC_Transmit_FS+0x48>)
 8008732:	f7fe fb7b 	bl	8006e2c <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008736:	4805      	ldr	r0, [pc, #20]	; (800874c <CDC_Transmit_FS+0x48>)
 8008738:	f7fe fbb8 	bl	8006eac <USBD_CDC_TransmitPacket>
 800873c:	4603      	mov	r3, r0
 800873e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008740:	7bfb      	ldrb	r3, [r7, #15]
}
 8008742:	4618      	mov	r0, r3
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop
 800874c:	20000270 	.word	0x20000270

08008750 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008750:	b480      	push	{r7}
 8008752:	b087      	sub	sp, #28
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	4613      	mov	r3, r2
 800875c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800875e:	2300      	movs	r3, #0
 8008760:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008762:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008766:	4618      	mov	r0, r3
 8008768:	371c      	adds	r7, #28
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
	...

08008774 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	4603      	mov	r3, r0
 800877c:	6039      	str	r1, [r7, #0]
 800877e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	2212      	movs	r2, #18
 8008784:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008786:	4b03      	ldr	r3, [pc, #12]	; (8008794 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008788:	4618      	mov	r0, r3
 800878a:	370c      	adds	r7, #12
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr
 8008794:	200000c8 	.word	0x200000c8

08008798 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	4603      	mov	r3, r0
 80087a0:	6039      	str	r1, [r7, #0]
 80087a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	2204      	movs	r2, #4
 80087a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80087aa:	4b03      	ldr	r3, [pc, #12]	; (80087b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr
 80087b8:	200000dc 	.word	0x200000dc

080087bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	4603      	mov	r3, r0
 80087c4:	6039      	str	r1, [r7, #0]
 80087c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80087c8:	79fb      	ldrb	r3, [r7, #7]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d105      	bne.n	80087da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087ce:	683a      	ldr	r2, [r7, #0]
 80087d0:	4907      	ldr	r1, [pc, #28]	; (80087f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80087d2:	4808      	ldr	r0, [pc, #32]	; (80087f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80087d4:	f7ff fdf8 	bl	80083c8 <USBD_GetString>
 80087d8:	e004      	b.n	80087e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087da:	683a      	ldr	r2, [r7, #0]
 80087dc:	4904      	ldr	r1, [pc, #16]	; (80087f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80087de:	4805      	ldr	r0, [pc, #20]	; (80087f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80087e0:	f7ff fdf2 	bl	80083c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087e4:	4b02      	ldr	r3, [pc, #8]	; (80087f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	20000d4c 	.word	0x20000d4c
 80087f4:	080099c4 	.word	0x080099c4

080087f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	4603      	mov	r3, r0
 8008800:	6039      	str	r1, [r7, #0]
 8008802:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008804:	683a      	ldr	r2, [r7, #0]
 8008806:	4904      	ldr	r1, [pc, #16]	; (8008818 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008808:	4804      	ldr	r0, [pc, #16]	; (800881c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800880a:	f7ff fddd 	bl	80083c8 <USBD_GetString>
  return USBD_StrDesc;
 800880e:	4b02      	ldr	r3, [pc, #8]	; (8008818 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008810:	4618      	mov	r0, r3
 8008812:	3708      	adds	r7, #8
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	20000d4c 	.word	0x20000d4c
 800881c:	080099dc 	.word	0x080099dc

08008820 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	4603      	mov	r3, r0
 8008828:	6039      	str	r1, [r7, #0]
 800882a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	221a      	movs	r2, #26
 8008830:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008832:	f000 f843 	bl	80088bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008836:	4b02      	ldr	r3, [pc, #8]	; (8008840 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008838:	4618      	mov	r0, r3
 800883a:	3708      	adds	r7, #8
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	200000e0 	.word	0x200000e0

08008844 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
 800884a:	4603      	mov	r3, r0
 800884c:	6039      	str	r1, [r7, #0]
 800884e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008850:	79fb      	ldrb	r3, [r7, #7]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d105      	bne.n	8008862 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008856:	683a      	ldr	r2, [r7, #0]
 8008858:	4907      	ldr	r1, [pc, #28]	; (8008878 <USBD_FS_ConfigStrDescriptor+0x34>)
 800885a:	4808      	ldr	r0, [pc, #32]	; (800887c <USBD_FS_ConfigStrDescriptor+0x38>)
 800885c:	f7ff fdb4 	bl	80083c8 <USBD_GetString>
 8008860:	e004      	b.n	800886c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008862:	683a      	ldr	r2, [r7, #0]
 8008864:	4904      	ldr	r1, [pc, #16]	; (8008878 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008866:	4805      	ldr	r0, [pc, #20]	; (800887c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008868:	f7ff fdae 	bl	80083c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800886c:	4b02      	ldr	r3, [pc, #8]	; (8008878 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800886e:	4618      	mov	r0, r3
 8008870:	3708      	adds	r7, #8
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	20000d4c 	.word	0x20000d4c
 800887c:	080099f0 	.word	0x080099f0

08008880 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	4603      	mov	r3, r0
 8008888:	6039      	str	r1, [r7, #0]
 800888a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800888c:	79fb      	ldrb	r3, [r7, #7]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d105      	bne.n	800889e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008892:	683a      	ldr	r2, [r7, #0]
 8008894:	4907      	ldr	r1, [pc, #28]	; (80088b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008896:	4808      	ldr	r0, [pc, #32]	; (80088b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008898:	f7ff fd96 	bl	80083c8 <USBD_GetString>
 800889c:	e004      	b.n	80088a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800889e:	683a      	ldr	r2, [r7, #0]
 80088a0:	4904      	ldr	r1, [pc, #16]	; (80088b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80088a2:	4805      	ldr	r0, [pc, #20]	; (80088b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80088a4:	f7ff fd90 	bl	80083c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80088a8:	4b02      	ldr	r3, [pc, #8]	; (80088b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3708      	adds	r7, #8
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	20000d4c 	.word	0x20000d4c
 80088b8:	080099fc 	.word	0x080099fc

080088bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80088c2:	4b0f      	ldr	r3, [pc, #60]	; (8008900 <Get_SerialNum+0x44>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80088c8:	4b0e      	ldr	r3, [pc, #56]	; (8008904 <Get_SerialNum+0x48>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80088ce:	4b0e      	ldr	r3, [pc, #56]	; (8008908 <Get_SerialNum+0x4c>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4413      	add	r3, r2
 80088da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d009      	beq.n	80088f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80088e2:	2208      	movs	r2, #8
 80088e4:	4909      	ldr	r1, [pc, #36]	; (800890c <Get_SerialNum+0x50>)
 80088e6:	68f8      	ldr	r0, [r7, #12]
 80088e8:	f000 f814 	bl	8008914 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80088ec:	2204      	movs	r2, #4
 80088ee:	4908      	ldr	r1, [pc, #32]	; (8008910 <Get_SerialNum+0x54>)
 80088f0:	68b8      	ldr	r0, [r7, #8]
 80088f2:	f000 f80f 	bl	8008914 <IntToUnicode>
  }
}
 80088f6:	bf00      	nop
 80088f8:	3710      	adds	r7, #16
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	1fff7a10 	.word	0x1fff7a10
 8008904:	1fff7a14 	.word	0x1fff7a14
 8008908:	1fff7a18 	.word	0x1fff7a18
 800890c:	200000e2 	.word	0x200000e2
 8008910:	200000f2 	.word	0x200000f2

08008914 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008914:	b480      	push	{r7}
 8008916:	b087      	sub	sp, #28
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	4613      	mov	r3, r2
 8008920:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008922:	2300      	movs	r3, #0
 8008924:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008926:	2300      	movs	r3, #0
 8008928:	75fb      	strb	r3, [r7, #23]
 800892a:	e027      	b.n	800897c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	0f1b      	lsrs	r3, r3, #28
 8008930:	2b09      	cmp	r3, #9
 8008932:	d80b      	bhi.n	800894c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	0f1b      	lsrs	r3, r3, #28
 8008938:	b2da      	uxtb	r2, r3
 800893a:	7dfb      	ldrb	r3, [r7, #23]
 800893c:	005b      	lsls	r3, r3, #1
 800893e:	4619      	mov	r1, r3
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	440b      	add	r3, r1
 8008944:	3230      	adds	r2, #48	; 0x30
 8008946:	b2d2      	uxtb	r2, r2
 8008948:	701a      	strb	r2, [r3, #0]
 800894a:	e00a      	b.n	8008962 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	0f1b      	lsrs	r3, r3, #28
 8008950:	b2da      	uxtb	r2, r3
 8008952:	7dfb      	ldrb	r3, [r7, #23]
 8008954:	005b      	lsls	r3, r3, #1
 8008956:	4619      	mov	r1, r3
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	440b      	add	r3, r1
 800895c:	3237      	adds	r2, #55	; 0x37
 800895e:	b2d2      	uxtb	r2, r2
 8008960:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	011b      	lsls	r3, r3, #4
 8008966:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008968:	7dfb      	ldrb	r3, [r7, #23]
 800896a:	005b      	lsls	r3, r3, #1
 800896c:	3301      	adds	r3, #1
 800896e:	68ba      	ldr	r2, [r7, #8]
 8008970:	4413      	add	r3, r2
 8008972:	2200      	movs	r2, #0
 8008974:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008976:	7dfb      	ldrb	r3, [r7, #23]
 8008978:	3301      	adds	r3, #1
 800897a:	75fb      	strb	r3, [r7, #23]
 800897c:	7dfa      	ldrb	r2, [r7, #23]
 800897e:	79fb      	ldrb	r3, [r7, #7]
 8008980:	429a      	cmp	r2, r3
 8008982:	d3d3      	bcc.n	800892c <IntToUnicode+0x18>
  }
}
 8008984:	bf00      	nop
 8008986:	bf00      	nop
 8008988:	371c      	adds	r7, #28
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr
	...

08008994 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b08a      	sub	sp, #40	; 0x28
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800899c:	f107 0314 	add.w	r3, r7, #20
 80089a0:	2200      	movs	r2, #0
 80089a2:	601a      	str	r2, [r3, #0]
 80089a4:	605a      	str	r2, [r3, #4]
 80089a6:	609a      	str	r2, [r3, #8]
 80089a8:	60da      	str	r2, [r3, #12]
 80089aa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089b4:	d13a      	bne.n	8008a2c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089b6:	2300      	movs	r3, #0
 80089b8:	613b      	str	r3, [r7, #16]
 80089ba:	4b1e      	ldr	r3, [pc, #120]	; (8008a34 <HAL_PCD_MspInit+0xa0>)
 80089bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089be:	4a1d      	ldr	r2, [pc, #116]	; (8008a34 <HAL_PCD_MspInit+0xa0>)
 80089c0:	f043 0301 	orr.w	r3, r3, #1
 80089c4:	6313      	str	r3, [r2, #48]	; 0x30
 80089c6:	4b1b      	ldr	r3, [pc, #108]	; (8008a34 <HAL_PCD_MspInit+0xa0>)
 80089c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ca:	f003 0301 	and.w	r3, r3, #1
 80089ce:	613b      	str	r3, [r7, #16]
 80089d0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80089d2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80089d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089d8:	2302      	movs	r3, #2
 80089da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089dc:	2300      	movs	r3, #0
 80089de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089e0:	2303      	movs	r3, #3
 80089e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80089e4:	230a      	movs	r3, #10
 80089e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089e8:	f107 0314 	add.w	r3, r7, #20
 80089ec:	4619      	mov	r1, r3
 80089ee:	4812      	ldr	r0, [pc, #72]	; (8008a38 <HAL_PCD_MspInit+0xa4>)
 80089f0:	f7f8 feda 	bl	80017a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80089f4:	4b0f      	ldr	r3, [pc, #60]	; (8008a34 <HAL_PCD_MspInit+0xa0>)
 80089f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f8:	4a0e      	ldr	r2, [pc, #56]	; (8008a34 <HAL_PCD_MspInit+0xa0>)
 80089fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089fe:	6353      	str	r3, [r2, #52]	; 0x34
 8008a00:	2300      	movs	r3, #0
 8008a02:	60fb      	str	r3, [r7, #12]
 8008a04:	4b0b      	ldr	r3, [pc, #44]	; (8008a34 <HAL_PCD_MspInit+0xa0>)
 8008a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a08:	4a0a      	ldr	r2, [pc, #40]	; (8008a34 <HAL_PCD_MspInit+0xa0>)
 8008a0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a0e:	6453      	str	r3, [r2, #68]	; 0x44
 8008a10:	4b08      	ldr	r3, [pc, #32]	; (8008a34 <HAL_PCD_MspInit+0xa0>)
 8008a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a18:	60fb      	str	r3, [r7, #12]
 8008a1a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	2100      	movs	r1, #0
 8008a20:	2043      	movs	r0, #67	; 0x43
 8008a22:	f7f8 fd2a 	bl	800147a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008a26:	2043      	movs	r0, #67	; 0x43
 8008a28:	f7f8 fd43 	bl	80014b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008a2c:	bf00      	nop
 8008a2e:	3728      	adds	r7, #40	; 0x28
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	40023800 	.word	0x40023800
 8008a38:	40020000 	.word	0x40020000

08008a3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008a50:	4619      	mov	r1, r3
 8008a52:	4610      	mov	r0, r2
 8008a54:	f7fe fb59 	bl	800710a <USBD_LL_SetupStage>
}
 8008a58:	bf00      	nop
 8008a5a:	3708      	adds	r7, #8
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	460b      	mov	r3, r1
 8008a6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008a72:	78fa      	ldrb	r2, [r7, #3]
 8008a74:	6879      	ldr	r1, [r7, #4]
 8008a76:	4613      	mov	r3, r2
 8008a78:	00db      	lsls	r3, r3, #3
 8008a7a:	4413      	add	r3, r2
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	440b      	add	r3, r1
 8008a80:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	78fb      	ldrb	r3, [r7, #3]
 8008a88:	4619      	mov	r1, r3
 8008a8a:	f7fe fb93 	bl	80071b4 <USBD_LL_DataOutStage>
}
 8008a8e:	bf00      	nop
 8008a90:	3708      	adds	r7, #8
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b082      	sub	sp, #8
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008aa8:	78fa      	ldrb	r2, [r7, #3]
 8008aaa:	6879      	ldr	r1, [r7, #4]
 8008aac:	4613      	mov	r3, r2
 8008aae:	00db      	lsls	r3, r3, #3
 8008ab0:	4413      	add	r3, r2
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	440b      	add	r3, r1
 8008ab6:	334c      	adds	r3, #76	; 0x4c
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	78fb      	ldrb	r3, [r7, #3]
 8008abc:	4619      	mov	r1, r3
 8008abe:	f7fe fc2c 	bl	800731a <USBD_LL_DataInStage>
}
 8008ac2:	bf00      	nop
 8008ac4:	3708      	adds	r7, #8
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b082      	sub	sp, #8
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7fe fd60 	bl	800759e <USBD_LL_SOF>
}
 8008ade:	bf00      	nop
 8008ae0:	3708      	adds	r7, #8
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b084      	sub	sp, #16
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008aee:	2301      	movs	r3, #1
 8008af0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d001      	beq.n	8008afe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008afa:	f7f7 ff57 	bl	80009ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b04:	7bfa      	ldrb	r2, [r7, #15]
 8008b06:	4611      	mov	r1, r2
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f7fe fd0a 	bl	8007522 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7fe fcb2 	bl	800747e <USBD_LL_Reset>
}
 8008b1a:	bf00      	nop
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
	...

08008b24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7fe fd05 	bl	8007542 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	6812      	ldr	r2, [r2, #0]
 8008b46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b4a:	f043 0301 	orr.w	r3, r3, #1
 8008b4e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
    if (hpcd->Init.low_power_enable) {
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6a1b      	ldr	r3, [r3, #32]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d005      	beq.n	8008b64 <HAL_PCD_SuspendCallback+0x40>
        /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
        SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b58:	4b04      	ldr	r3, [pc, #16]	; (8008b6c <HAL_PCD_SuspendCallback+0x48>)
 8008b5a:	691b      	ldr	r3, [r3, #16]
 8008b5c:	4a03      	ldr	r2, [pc, #12]	; (8008b6c <HAL_PCD_SuspendCallback+0x48>)
 8008b5e:	f043 0306 	orr.w	r3, r3, #6
 8008b62:	6113      	str	r3, [r2, #16]
    }
  /* USER CODE END 2 */
}
 8008b64:	bf00      	nop
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	e000ed00 	.word	0xe000ed00

08008b70 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7fe fcf5 	bl	800756e <USBD_LL_Resume>
}
 8008b84:	bf00      	nop
 8008b86:	3708      	adds	r7, #8
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	460b      	mov	r3, r1
 8008b96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b9e:	78fa      	ldrb	r2, [r7, #3]
 8008ba0:	4611      	mov	r1, r2
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7fe fd4d 	bl	8007642 <USBD_LL_IsoOUTIncomplete>
}
 8008ba8:	bf00      	nop
 8008baa:	3708      	adds	r7, #8
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	460b      	mov	r3, r1
 8008bba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bc2:	78fa      	ldrb	r2, [r7, #3]
 8008bc4:	4611      	mov	r1, r2
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7fe fd09 	bl	80075de <USBD_LL_IsoINIncomplete>
}
 8008bcc:	bf00      	nop
 8008bce:	3708      	adds	r7, #8
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7fe fd5f 	bl	80076a6 <USBD_LL_DevConnected>
}
 8008be8:	bf00      	nop
 8008bea:	3708      	adds	r7, #8
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7fe fd5c 	bl	80076bc <USBD_LL_DevDisconnected>
}
 8008c04:	bf00      	nop
 8008c06:	3708      	adds	r7, #8
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d13c      	bne.n	8008c96 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008c1c:	4a20      	ldr	r2, [pc, #128]	; (8008ca0 <USBD_LL_Init+0x94>)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4a1e      	ldr	r2, [pc, #120]	; (8008ca0 <USBD_LL_Init+0x94>)
 8008c28:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008c2c:	4b1c      	ldr	r3, [pc, #112]	; (8008ca0 <USBD_LL_Init+0x94>)
 8008c2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008c32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008c34:	4b1a      	ldr	r3, [pc, #104]	; (8008ca0 <USBD_LL_Init+0x94>)
 8008c36:	2204      	movs	r2, #4
 8008c38:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008c3a:	4b19      	ldr	r3, [pc, #100]	; (8008ca0 <USBD_LL_Init+0x94>)
 8008c3c:	2202      	movs	r2, #2
 8008c3e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008c40:	4b17      	ldr	r3, [pc, #92]	; (8008ca0 <USBD_LL_Init+0x94>)
 8008c42:	2200      	movs	r2, #0
 8008c44:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008c46:	4b16      	ldr	r3, [pc, #88]	; (8008ca0 <USBD_LL_Init+0x94>)
 8008c48:	2202      	movs	r2, #2
 8008c4a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008c4c:	4b14      	ldr	r3, [pc, #80]	; (8008ca0 <USBD_LL_Init+0x94>)
 8008c4e:	2200      	movs	r2, #0
 8008c50:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008c52:	4b13      	ldr	r3, [pc, #76]	; (8008ca0 <USBD_LL_Init+0x94>)
 8008c54:	2200      	movs	r2, #0
 8008c56:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008c58:	4b11      	ldr	r3, [pc, #68]	; (8008ca0 <USBD_LL_Init+0x94>)
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008c5e:	4b10      	ldr	r3, [pc, #64]	; (8008ca0 <USBD_LL_Init+0x94>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008c64:	4b0e      	ldr	r3, [pc, #56]	; (8008ca0 <USBD_LL_Init+0x94>)
 8008c66:	2200      	movs	r2, #0
 8008c68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008c6a:	480d      	ldr	r0, [pc, #52]	; (8008ca0 <USBD_LL_Init+0x94>)
 8008c6c:	f7f9 fedf 	bl	8002a2e <HAL_PCD_Init>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d001      	beq.n	8008c7a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008c76:	f7f7 fe99 	bl	80009ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008c7a:	2180      	movs	r1, #128	; 0x80
 8008c7c:	4808      	ldr	r0, [pc, #32]	; (8008ca0 <USBD_LL_Init+0x94>)
 8008c7e:	f7fb f936 	bl	8003eee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008c82:	2240      	movs	r2, #64	; 0x40
 8008c84:	2100      	movs	r1, #0
 8008c86:	4806      	ldr	r0, [pc, #24]	; (8008ca0 <USBD_LL_Init+0x94>)
 8008c88:	f7fb f8ea 	bl	8003e60 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008c8c:	2280      	movs	r2, #128	; 0x80
 8008c8e:	2101      	movs	r1, #1
 8008c90:	4803      	ldr	r0, [pc, #12]	; (8008ca0 <USBD_LL_Init+0x94>)
 8008c92:	f7fb f8e5 	bl	8003e60 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3708      	adds	r7, #8
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	20000f4c 	.word	0x20000f4c

08008ca4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cac:	2300      	movs	r3, #0
 8008cae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7f9 ffd4 	bl	8002c68 <HAL_PCD_Start>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cc4:	7bfb      	ldrb	r3, [r7, #15]
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f000 f942 	bl	8008f50 <USBD_Get_USB_Status>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b084      	sub	sp, #16
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
 8008ce2:	4608      	mov	r0, r1
 8008ce4:	4611      	mov	r1, r2
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	4603      	mov	r3, r0
 8008cea:	70fb      	strb	r3, [r7, #3]
 8008cec:	460b      	mov	r3, r1
 8008cee:	70bb      	strb	r3, [r7, #2]
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008d02:	78bb      	ldrb	r3, [r7, #2]
 8008d04:	883a      	ldrh	r2, [r7, #0]
 8008d06:	78f9      	ldrb	r1, [r7, #3]
 8008d08:	f7fa fca5 	bl	8003656 <HAL_PCD_EP_Open>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
 8008d12:	4618      	mov	r0, r3
 8008d14:	f000 f91c 	bl	8008f50 <USBD_Get_USB_Status>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3710      	adds	r7, #16
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b084      	sub	sp, #16
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
 8008d2e:	460b      	mov	r3, r1
 8008d30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d32:	2300      	movs	r3, #0
 8008d34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d36:	2300      	movs	r3, #0
 8008d38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d40:	78fa      	ldrb	r2, [r7, #3]
 8008d42:	4611      	mov	r1, r2
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7fa fcee 	bl	8003726 <HAL_PCD_EP_Close>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d4e:	7bfb      	ldrb	r3, [r7, #15]
 8008d50:	4618      	mov	r0, r3
 8008d52:	f000 f8fd 	bl	8008f50 <USBD_Get_USB_Status>
 8008d56:	4603      	mov	r3, r0
 8008d58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d70:	2300      	movs	r3, #0
 8008d72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d74:	2300      	movs	r3, #0
 8008d76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d7e:	78fa      	ldrb	r2, [r7, #3]
 8008d80:	4611      	mov	r1, r2
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7fa fdc6 	bl	8003914 <HAL_PCD_EP_SetStall>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d8c:	7bfb      	ldrb	r3, [r7, #15]
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f000 f8de 	bl	8008f50 <USBD_Get_USB_Status>
 8008d94:	4603      	mov	r3, r0
 8008d96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d98:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b084      	sub	sp, #16
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
 8008daa:	460b      	mov	r3, r1
 8008dac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dae:	2300      	movs	r3, #0
 8008db0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008db2:	2300      	movs	r3, #0
 8008db4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008dbc:	78fa      	ldrb	r2, [r7, #3]
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7fa fe0b 	bl	80039dc <HAL_PCD_EP_ClrStall>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dca:	7bfb      	ldrb	r3, [r7, #15]
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f000 f8bf 	bl	8008f50 <USBD_Get_USB_Status>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3710      	adds	r7, #16
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b085      	sub	sp, #20
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	460b      	mov	r3, r1
 8008dea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008df2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008df4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	da0b      	bge.n	8008e14 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008dfc:	78fb      	ldrb	r3, [r7, #3]
 8008dfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e02:	68f9      	ldr	r1, [r7, #12]
 8008e04:	4613      	mov	r3, r2
 8008e06:	00db      	lsls	r3, r3, #3
 8008e08:	4413      	add	r3, r2
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	440b      	add	r3, r1
 8008e0e:	333e      	adds	r3, #62	; 0x3e
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	e00b      	b.n	8008e2c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008e14:	78fb      	ldrb	r3, [r7, #3]
 8008e16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e1a:	68f9      	ldr	r1, [r7, #12]
 8008e1c:	4613      	mov	r3, r2
 8008e1e:	00db      	lsls	r3, r3, #3
 8008e20:	4413      	add	r3, r2
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	440b      	add	r3, r1
 8008e26:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008e2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3714      	adds	r7, #20
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	460b      	mov	r3, r1
 8008e42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e44:	2300      	movs	r3, #0
 8008e46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e52:	78fa      	ldrb	r2, [r7, #3]
 8008e54:	4611      	mov	r1, r2
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7fa fbd8 	bl	800360c <HAL_PCD_SetAddress>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e60:	7bfb      	ldrb	r3, [r7, #15]
 8008e62:	4618      	mov	r0, r3
 8008e64:	f000 f874 	bl	8008f50 <USBD_Get_USB_Status>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b086      	sub	sp, #24
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	60f8      	str	r0, [r7, #12]
 8008e7e:	607a      	str	r2, [r7, #4]
 8008e80:	603b      	str	r3, [r7, #0]
 8008e82:	460b      	mov	r3, r1
 8008e84:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e86:	2300      	movs	r3, #0
 8008e88:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008e94:	7af9      	ldrb	r1, [r7, #11]
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	f7fa fcf1 	bl	8003880 <HAL_PCD_EP_Transmit>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ea2:	7dfb      	ldrb	r3, [r7, #23]
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f000 f853 	bl	8008f50 <USBD_Get_USB_Status>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008eae:	7dbb      	ldrb	r3, [r7, #22]
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3718      	adds	r7, #24
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b086      	sub	sp, #24
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	607a      	str	r2, [r7, #4]
 8008ec2:	603b      	str	r3, [r7, #0]
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008ed6:	7af9      	ldrb	r1, [r7, #11]
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	f7fa fc6d 	bl	80037ba <HAL_PCD_EP_Receive>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ee4:	7dfb      	ldrb	r3, [r7, #23]
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f000 f832 	bl	8008f50 <USBD_Get_USB_Status>
 8008eec:	4603      	mov	r3, r0
 8008eee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ef0:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3718      	adds	r7, #24
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b082      	sub	sp, #8
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
 8008f02:	460b      	mov	r3, r1
 8008f04:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f0c:	78fa      	ldrb	r2, [r7, #3]
 8008f0e:	4611      	mov	r1, r2
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7fa fc9d 	bl	8003850 <HAL_PCD_EP_GetRxCount>
 8008f16:	4603      	mov	r3, r0
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3708      	adds	r7, #8
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008f28:	4b03      	ldr	r3, [pc, #12]	; (8008f38 <USBD_static_malloc+0x18>)
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	370c      	adds	r7, #12
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop
 8008f38:	20001458 	.word	0x20001458

08008f3c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]

}
 8008f44:	bf00      	nop
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b085      	sub	sp, #20
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	4603      	mov	r3, r0
 8008f58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008f5e:	79fb      	ldrb	r3, [r7, #7]
 8008f60:	2b03      	cmp	r3, #3
 8008f62:	d817      	bhi.n	8008f94 <USBD_Get_USB_Status+0x44>
 8008f64:	a201      	add	r2, pc, #4	; (adr r2, 8008f6c <USBD_Get_USB_Status+0x1c>)
 8008f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f6a:	bf00      	nop
 8008f6c:	08008f7d 	.word	0x08008f7d
 8008f70:	08008f83 	.word	0x08008f83
 8008f74:	08008f89 	.word	0x08008f89
 8008f78:	08008f8f 	.word	0x08008f8f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f80:	e00b      	b.n	8008f9a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f82:	2303      	movs	r3, #3
 8008f84:	73fb      	strb	r3, [r7, #15]
    break;
 8008f86:	e008      	b.n	8008f9a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f8c:	e005      	b.n	8008f9a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	73fb      	strb	r3, [r7, #15]
    break;
 8008f92:	e002      	b.n	8008f9a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008f94:	2303      	movs	r3, #3
 8008f96:	73fb      	strb	r3, [r7, #15]
    break;
 8008f98:	bf00      	nop
  }
  return usb_status;
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3714      	adds	r7, #20
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <malloc>:
 8008fa8:	4b02      	ldr	r3, [pc, #8]	; (8008fb4 <malloc+0xc>)
 8008faa:	4601      	mov	r1, r0
 8008fac:	6818      	ldr	r0, [r3, #0]
 8008fae:	f000 b82b 	b.w	8009008 <_malloc_r>
 8008fb2:	bf00      	nop
 8008fb4:	20000148 	.word	0x20000148

08008fb8 <free>:
 8008fb8:	4b02      	ldr	r3, [pc, #8]	; (8008fc4 <free+0xc>)
 8008fba:	4601      	mov	r1, r0
 8008fbc:	6818      	ldr	r0, [r3, #0]
 8008fbe:	f000 b913 	b.w	80091e8 <_free_r>
 8008fc2:	bf00      	nop
 8008fc4:	20000148 	.word	0x20000148

08008fc8 <sbrk_aligned>:
 8008fc8:	b570      	push	{r4, r5, r6, lr}
 8008fca:	4e0e      	ldr	r6, [pc, #56]	; (8009004 <sbrk_aligned+0x3c>)
 8008fcc:	460c      	mov	r4, r1
 8008fce:	6831      	ldr	r1, [r6, #0]
 8008fd0:	4605      	mov	r5, r0
 8008fd2:	b911      	cbnz	r1, 8008fda <sbrk_aligned+0x12>
 8008fd4:	f000 f8cc 	bl	8009170 <_sbrk_r>
 8008fd8:	6030      	str	r0, [r6, #0]
 8008fda:	4621      	mov	r1, r4
 8008fdc:	4628      	mov	r0, r5
 8008fde:	f000 f8c7 	bl	8009170 <_sbrk_r>
 8008fe2:	1c43      	adds	r3, r0, #1
 8008fe4:	d00a      	beq.n	8008ffc <sbrk_aligned+0x34>
 8008fe6:	1cc4      	adds	r4, r0, #3
 8008fe8:	f024 0403 	bic.w	r4, r4, #3
 8008fec:	42a0      	cmp	r0, r4
 8008fee:	d007      	beq.n	8009000 <sbrk_aligned+0x38>
 8008ff0:	1a21      	subs	r1, r4, r0
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	f000 f8bc 	bl	8009170 <_sbrk_r>
 8008ff8:	3001      	adds	r0, #1
 8008ffa:	d101      	bne.n	8009000 <sbrk_aligned+0x38>
 8008ffc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009000:	4620      	mov	r0, r4
 8009002:	bd70      	pop	{r4, r5, r6, pc}
 8009004:	2000167c 	.word	0x2000167c

08009008 <_malloc_r>:
 8009008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800900c:	1ccd      	adds	r5, r1, #3
 800900e:	f025 0503 	bic.w	r5, r5, #3
 8009012:	3508      	adds	r5, #8
 8009014:	2d0c      	cmp	r5, #12
 8009016:	bf38      	it	cc
 8009018:	250c      	movcc	r5, #12
 800901a:	2d00      	cmp	r5, #0
 800901c:	4607      	mov	r7, r0
 800901e:	db01      	blt.n	8009024 <_malloc_r+0x1c>
 8009020:	42a9      	cmp	r1, r5
 8009022:	d905      	bls.n	8009030 <_malloc_r+0x28>
 8009024:	230c      	movs	r3, #12
 8009026:	603b      	str	r3, [r7, #0]
 8009028:	2600      	movs	r6, #0
 800902a:	4630      	mov	r0, r6
 800902c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009030:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009104 <_malloc_r+0xfc>
 8009034:	f000 f868 	bl	8009108 <__malloc_lock>
 8009038:	f8d8 3000 	ldr.w	r3, [r8]
 800903c:	461c      	mov	r4, r3
 800903e:	bb5c      	cbnz	r4, 8009098 <_malloc_r+0x90>
 8009040:	4629      	mov	r1, r5
 8009042:	4638      	mov	r0, r7
 8009044:	f7ff ffc0 	bl	8008fc8 <sbrk_aligned>
 8009048:	1c43      	adds	r3, r0, #1
 800904a:	4604      	mov	r4, r0
 800904c:	d155      	bne.n	80090fa <_malloc_r+0xf2>
 800904e:	f8d8 4000 	ldr.w	r4, [r8]
 8009052:	4626      	mov	r6, r4
 8009054:	2e00      	cmp	r6, #0
 8009056:	d145      	bne.n	80090e4 <_malloc_r+0xdc>
 8009058:	2c00      	cmp	r4, #0
 800905a:	d048      	beq.n	80090ee <_malloc_r+0xe6>
 800905c:	6823      	ldr	r3, [r4, #0]
 800905e:	4631      	mov	r1, r6
 8009060:	4638      	mov	r0, r7
 8009062:	eb04 0903 	add.w	r9, r4, r3
 8009066:	f000 f883 	bl	8009170 <_sbrk_r>
 800906a:	4581      	cmp	r9, r0
 800906c:	d13f      	bne.n	80090ee <_malloc_r+0xe6>
 800906e:	6821      	ldr	r1, [r4, #0]
 8009070:	1a6d      	subs	r5, r5, r1
 8009072:	4629      	mov	r1, r5
 8009074:	4638      	mov	r0, r7
 8009076:	f7ff ffa7 	bl	8008fc8 <sbrk_aligned>
 800907a:	3001      	adds	r0, #1
 800907c:	d037      	beq.n	80090ee <_malloc_r+0xe6>
 800907e:	6823      	ldr	r3, [r4, #0]
 8009080:	442b      	add	r3, r5
 8009082:	6023      	str	r3, [r4, #0]
 8009084:	f8d8 3000 	ldr.w	r3, [r8]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d038      	beq.n	80090fe <_malloc_r+0xf6>
 800908c:	685a      	ldr	r2, [r3, #4]
 800908e:	42a2      	cmp	r2, r4
 8009090:	d12b      	bne.n	80090ea <_malloc_r+0xe2>
 8009092:	2200      	movs	r2, #0
 8009094:	605a      	str	r2, [r3, #4]
 8009096:	e00f      	b.n	80090b8 <_malloc_r+0xb0>
 8009098:	6822      	ldr	r2, [r4, #0]
 800909a:	1b52      	subs	r2, r2, r5
 800909c:	d41f      	bmi.n	80090de <_malloc_r+0xd6>
 800909e:	2a0b      	cmp	r2, #11
 80090a0:	d917      	bls.n	80090d2 <_malloc_r+0xca>
 80090a2:	1961      	adds	r1, r4, r5
 80090a4:	42a3      	cmp	r3, r4
 80090a6:	6025      	str	r5, [r4, #0]
 80090a8:	bf18      	it	ne
 80090aa:	6059      	strne	r1, [r3, #4]
 80090ac:	6863      	ldr	r3, [r4, #4]
 80090ae:	bf08      	it	eq
 80090b0:	f8c8 1000 	streq.w	r1, [r8]
 80090b4:	5162      	str	r2, [r4, r5]
 80090b6:	604b      	str	r3, [r1, #4]
 80090b8:	4638      	mov	r0, r7
 80090ba:	f104 060b 	add.w	r6, r4, #11
 80090be:	f000 f829 	bl	8009114 <__malloc_unlock>
 80090c2:	f026 0607 	bic.w	r6, r6, #7
 80090c6:	1d23      	adds	r3, r4, #4
 80090c8:	1af2      	subs	r2, r6, r3
 80090ca:	d0ae      	beq.n	800902a <_malloc_r+0x22>
 80090cc:	1b9b      	subs	r3, r3, r6
 80090ce:	50a3      	str	r3, [r4, r2]
 80090d0:	e7ab      	b.n	800902a <_malloc_r+0x22>
 80090d2:	42a3      	cmp	r3, r4
 80090d4:	6862      	ldr	r2, [r4, #4]
 80090d6:	d1dd      	bne.n	8009094 <_malloc_r+0x8c>
 80090d8:	f8c8 2000 	str.w	r2, [r8]
 80090dc:	e7ec      	b.n	80090b8 <_malloc_r+0xb0>
 80090de:	4623      	mov	r3, r4
 80090e0:	6864      	ldr	r4, [r4, #4]
 80090e2:	e7ac      	b.n	800903e <_malloc_r+0x36>
 80090e4:	4634      	mov	r4, r6
 80090e6:	6876      	ldr	r6, [r6, #4]
 80090e8:	e7b4      	b.n	8009054 <_malloc_r+0x4c>
 80090ea:	4613      	mov	r3, r2
 80090ec:	e7cc      	b.n	8009088 <_malloc_r+0x80>
 80090ee:	230c      	movs	r3, #12
 80090f0:	603b      	str	r3, [r7, #0]
 80090f2:	4638      	mov	r0, r7
 80090f4:	f000 f80e 	bl	8009114 <__malloc_unlock>
 80090f8:	e797      	b.n	800902a <_malloc_r+0x22>
 80090fa:	6025      	str	r5, [r4, #0]
 80090fc:	e7dc      	b.n	80090b8 <_malloc_r+0xb0>
 80090fe:	605b      	str	r3, [r3, #4]
 8009100:	deff      	udf	#255	; 0xff
 8009102:	bf00      	nop
 8009104:	20001678 	.word	0x20001678

08009108 <__malloc_lock>:
 8009108:	4801      	ldr	r0, [pc, #4]	; (8009110 <__malloc_lock+0x8>)
 800910a:	f000 b86b 	b.w	80091e4 <__retarget_lock_acquire_recursive>
 800910e:	bf00      	nop
 8009110:	200017bc 	.word	0x200017bc

08009114 <__malloc_unlock>:
 8009114:	4801      	ldr	r0, [pc, #4]	; (800911c <__malloc_unlock+0x8>)
 8009116:	f000 b866 	b.w	80091e6 <__retarget_lock_release_recursive>
 800911a:	bf00      	nop
 800911c:	200017bc 	.word	0x200017bc

08009120 <siprintf>:
 8009120:	b40e      	push	{r1, r2, r3}
 8009122:	b500      	push	{lr}
 8009124:	b09c      	sub	sp, #112	; 0x70
 8009126:	ab1d      	add	r3, sp, #116	; 0x74
 8009128:	9002      	str	r0, [sp, #8]
 800912a:	9006      	str	r0, [sp, #24]
 800912c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009130:	4809      	ldr	r0, [pc, #36]	; (8009158 <siprintf+0x38>)
 8009132:	9107      	str	r1, [sp, #28]
 8009134:	9104      	str	r1, [sp, #16]
 8009136:	4909      	ldr	r1, [pc, #36]	; (800915c <siprintf+0x3c>)
 8009138:	f853 2b04 	ldr.w	r2, [r3], #4
 800913c:	9105      	str	r1, [sp, #20]
 800913e:	6800      	ldr	r0, [r0, #0]
 8009140:	9301      	str	r3, [sp, #4]
 8009142:	a902      	add	r1, sp, #8
 8009144:	f000 f8f6 	bl	8009334 <_svfiprintf_r>
 8009148:	9b02      	ldr	r3, [sp, #8]
 800914a:	2200      	movs	r2, #0
 800914c:	701a      	strb	r2, [r3, #0]
 800914e:	b01c      	add	sp, #112	; 0x70
 8009150:	f85d eb04 	ldr.w	lr, [sp], #4
 8009154:	b003      	add	sp, #12
 8009156:	4770      	bx	lr
 8009158:	20000148 	.word	0x20000148
 800915c:	ffff0208 	.word	0xffff0208

08009160 <memset>:
 8009160:	4402      	add	r2, r0
 8009162:	4603      	mov	r3, r0
 8009164:	4293      	cmp	r3, r2
 8009166:	d100      	bne.n	800916a <memset+0xa>
 8009168:	4770      	bx	lr
 800916a:	f803 1b01 	strb.w	r1, [r3], #1
 800916e:	e7f9      	b.n	8009164 <memset+0x4>

08009170 <_sbrk_r>:
 8009170:	b538      	push	{r3, r4, r5, lr}
 8009172:	4d06      	ldr	r5, [pc, #24]	; (800918c <_sbrk_r+0x1c>)
 8009174:	2300      	movs	r3, #0
 8009176:	4604      	mov	r4, r0
 8009178:	4608      	mov	r0, r1
 800917a:	602b      	str	r3, [r5, #0]
 800917c:	f7f7 fd3c 	bl	8000bf8 <_sbrk>
 8009180:	1c43      	adds	r3, r0, #1
 8009182:	d102      	bne.n	800918a <_sbrk_r+0x1a>
 8009184:	682b      	ldr	r3, [r5, #0]
 8009186:	b103      	cbz	r3, 800918a <_sbrk_r+0x1a>
 8009188:	6023      	str	r3, [r4, #0]
 800918a:	bd38      	pop	{r3, r4, r5, pc}
 800918c:	200017b8 	.word	0x200017b8

08009190 <__errno>:
 8009190:	4b01      	ldr	r3, [pc, #4]	; (8009198 <__errno+0x8>)
 8009192:	6818      	ldr	r0, [r3, #0]
 8009194:	4770      	bx	lr
 8009196:	bf00      	nop
 8009198:	20000148 	.word	0x20000148

0800919c <__libc_init_array>:
 800919c:	b570      	push	{r4, r5, r6, lr}
 800919e:	4d0d      	ldr	r5, [pc, #52]	; (80091d4 <__libc_init_array+0x38>)
 80091a0:	4c0d      	ldr	r4, [pc, #52]	; (80091d8 <__libc_init_array+0x3c>)
 80091a2:	1b64      	subs	r4, r4, r5
 80091a4:	10a4      	asrs	r4, r4, #2
 80091a6:	2600      	movs	r6, #0
 80091a8:	42a6      	cmp	r6, r4
 80091aa:	d109      	bne.n	80091c0 <__libc_init_array+0x24>
 80091ac:	4d0b      	ldr	r5, [pc, #44]	; (80091dc <__libc_init_array+0x40>)
 80091ae:	4c0c      	ldr	r4, [pc, #48]	; (80091e0 <__libc_init_array+0x44>)
 80091b0:	f000 fbae 	bl	8009910 <_init>
 80091b4:	1b64      	subs	r4, r4, r5
 80091b6:	10a4      	asrs	r4, r4, #2
 80091b8:	2600      	movs	r6, #0
 80091ba:	42a6      	cmp	r6, r4
 80091bc:	d105      	bne.n	80091ca <__libc_init_array+0x2e>
 80091be:	bd70      	pop	{r4, r5, r6, pc}
 80091c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80091c4:	4798      	blx	r3
 80091c6:	3601      	adds	r6, #1
 80091c8:	e7ee      	b.n	80091a8 <__libc_init_array+0xc>
 80091ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80091ce:	4798      	blx	r3
 80091d0:	3601      	adds	r6, #1
 80091d2:	e7f2      	b.n	80091ba <__libc_init_array+0x1e>
 80091d4:	08009a68 	.word	0x08009a68
 80091d8:	08009a68 	.word	0x08009a68
 80091dc:	08009a68 	.word	0x08009a68
 80091e0:	08009a6c 	.word	0x08009a6c

080091e4 <__retarget_lock_acquire_recursive>:
 80091e4:	4770      	bx	lr

080091e6 <__retarget_lock_release_recursive>:
 80091e6:	4770      	bx	lr

080091e8 <_free_r>:
 80091e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091ea:	2900      	cmp	r1, #0
 80091ec:	d044      	beq.n	8009278 <_free_r+0x90>
 80091ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091f2:	9001      	str	r0, [sp, #4]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f1a1 0404 	sub.w	r4, r1, #4
 80091fa:	bfb8      	it	lt
 80091fc:	18e4      	addlt	r4, r4, r3
 80091fe:	f7ff ff83 	bl	8009108 <__malloc_lock>
 8009202:	4a1e      	ldr	r2, [pc, #120]	; (800927c <_free_r+0x94>)
 8009204:	9801      	ldr	r0, [sp, #4]
 8009206:	6813      	ldr	r3, [r2, #0]
 8009208:	b933      	cbnz	r3, 8009218 <_free_r+0x30>
 800920a:	6063      	str	r3, [r4, #4]
 800920c:	6014      	str	r4, [r2, #0]
 800920e:	b003      	add	sp, #12
 8009210:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009214:	f7ff bf7e 	b.w	8009114 <__malloc_unlock>
 8009218:	42a3      	cmp	r3, r4
 800921a:	d908      	bls.n	800922e <_free_r+0x46>
 800921c:	6825      	ldr	r5, [r4, #0]
 800921e:	1961      	adds	r1, r4, r5
 8009220:	428b      	cmp	r3, r1
 8009222:	bf01      	itttt	eq
 8009224:	6819      	ldreq	r1, [r3, #0]
 8009226:	685b      	ldreq	r3, [r3, #4]
 8009228:	1949      	addeq	r1, r1, r5
 800922a:	6021      	streq	r1, [r4, #0]
 800922c:	e7ed      	b.n	800920a <_free_r+0x22>
 800922e:	461a      	mov	r2, r3
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	b10b      	cbz	r3, 8009238 <_free_r+0x50>
 8009234:	42a3      	cmp	r3, r4
 8009236:	d9fa      	bls.n	800922e <_free_r+0x46>
 8009238:	6811      	ldr	r1, [r2, #0]
 800923a:	1855      	adds	r5, r2, r1
 800923c:	42a5      	cmp	r5, r4
 800923e:	d10b      	bne.n	8009258 <_free_r+0x70>
 8009240:	6824      	ldr	r4, [r4, #0]
 8009242:	4421      	add	r1, r4
 8009244:	1854      	adds	r4, r2, r1
 8009246:	42a3      	cmp	r3, r4
 8009248:	6011      	str	r1, [r2, #0]
 800924a:	d1e0      	bne.n	800920e <_free_r+0x26>
 800924c:	681c      	ldr	r4, [r3, #0]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	6053      	str	r3, [r2, #4]
 8009252:	440c      	add	r4, r1
 8009254:	6014      	str	r4, [r2, #0]
 8009256:	e7da      	b.n	800920e <_free_r+0x26>
 8009258:	d902      	bls.n	8009260 <_free_r+0x78>
 800925a:	230c      	movs	r3, #12
 800925c:	6003      	str	r3, [r0, #0]
 800925e:	e7d6      	b.n	800920e <_free_r+0x26>
 8009260:	6825      	ldr	r5, [r4, #0]
 8009262:	1961      	adds	r1, r4, r5
 8009264:	428b      	cmp	r3, r1
 8009266:	bf04      	itt	eq
 8009268:	6819      	ldreq	r1, [r3, #0]
 800926a:	685b      	ldreq	r3, [r3, #4]
 800926c:	6063      	str	r3, [r4, #4]
 800926e:	bf04      	itt	eq
 8009270:	1949      	addeq	r1, r1, r5
 8009272:	6021      	streq	r1, [r4, #0]
 8009274:	6054      	str	r4, [r2, #4]
 8009276:	e7ca      	b.n	800920e <_free_r+0x26>
 8009278:	b003      	add	sp, #12
 800927a:	bd30      	pop	{r4, r5, pc}
 800927c:	20001678 	.word	0x20001678

08009280 <__ssputs_r>:
 8009280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009284:	688e      	ldr	r6, [r1, #8]
 8009286:	461f      	mov	r7, r3
 8009288:	42be      	cmp	r6, r7
 800928a:	680b      	ldr	r3, [r1, #0]
 800928c:	4682      	mov	sl, r0
 800928e:	460c      	mov	r4, r1
 8009290:	4690      	mov	r8, r2
 8009292:	d82c      	bhi.n	80092ee <__ssputs_r+0x6e>
 8009294:	898a      	ldrh	r2, [r1, #12]
 8009296:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800929a:	d026      	beq.n	80092ea <__ssputs_r+0x6a>
 800929c:	6965      	ldr	r5, [r4, #20]
 800929e:	6909      	ldr	r1, [r1, #16]
 80092a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80092a4:	eba3 0901 	sub.w	r9, r3, r1
 80092a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80092ac:	1c7b      	adds	r3, r7, #1
 80092ae:	444b      	add	r3, r9
 80092b0:	106d      	asrs	r5, r5, #1
 80092b2:	429d      	cmp	r5, r3
 80092b4:	bf38      	it	cc
 80092b6:	461d      	movcc	r5, r3
 80092b8:	0553      	lsls	r3, r2, #21
 80092ba:	d527      	bpl.n	800930c <__ssputs_r+0x8c>
 80092bc:	4629      	mov	r1, r5
 80092be:	f7ff fea3 	bl	8009008 <_malloc_r>
 80092c2:	4606      	mov	r6, r0
 80092c4:	b360      	cbz	r0, 8009320 <__ssputs_r+0xa0>
 80092c6:	6921      	ldr	r1, [r4, #16]
 80092c8:	464a      	mov	r2, r9
 80092ca:	f000 fadb 	bl	8009884 <memcpy>
 80092ce:	89a3      	ldrh	r3, [r4, #12]
 80092d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80092d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092d8:	81a3      	strh	r3, [r4, #12]
 80092da:	6126      	str	r6, [r4, #16]
 80092dc:	6165      	str	r5, [r4, #20]
 80092de:	444e      	add	r6, r9
 80092e0:	eba5 0509 	sub.w	r5, r5, r9
 80092e4:	6026      	str	r6, [r4, #0]
 80092e6:	60a5      	str	r5, [r4, #8]
 80092e8:	463e      	mov	r6, r7
 80092ea:	42be      	cmp	r6, r7
 80092ec:	d900      	bls.n	80092f0 <__ssputs_r+0x70>
 80092ee:	463e      	mov	r6, r7
 80092f0:	6820      	ldr	r0, [r4, #0]
 80092f2:	4632      	mov	r2, r6
 80092f4:	4641      	mov	r1, r8
 80092f6:	f000 faab 	bl	8009850 <memmove>
 80092fa:	68a3      	ldr	r3, [r4, #8]
 80092fc:	1b9b      	subs	r3, r3, r6
 80092fe:	60a3      	str	r3, [r4, #8]
 8009300:	6823      	ldr	r3, [r4, #0]
 8009302:	4433      	add	r3, r6
 8009304:	6023      	str	r3, [r4, #0]
 8009306:	2000      	movs	r0, #0
 8009308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800930c:	462a      	mov	r2, r5
 800930e:	f000 fac7 	bl	80098a0 <_realloc_r>
 8009312:	4606      	mov	r6, r0
 8009314:	2800      	cmp	r0, #0
 8009316:	d1e0      	bne.n	80092da <__ssputs_r+0x5a>
 8009318:	6921      	ldr	r1, [r4, #16]
 800931a:	4650      	mov	r0, sl
 800931c:	f7ff ff64 	bl	80091e8 <_free_r>
 8009320:	230c      	movs	r3, #12
 8009322:	f8ca 3000 	str.w	r3, [sl]
 8009326:	89a3      	ldrh	r3, [r4, #12]
 8009328:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800932c:	81a3      	strh	r3, [r4, #12]
 800932e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009332:	e7e9      	b.n	8009308 <__ssputs_r+0x88>

08009334 <_svfiprintf_r>:
 8009334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009338:	4698      	mov	r8, r3
 800933a:	898b      	ldrh	r3, [r1, #12]
 800933c:	061b      	lsls	r3, r3, #24
 800933e:	b09d      	sub	sp, #116	; 0x74
 8009340:	4607      	mov	r7, r0
 8009342:	460d      	mov	r5, r1
 8009344:	4614      	mov	r4, r2
 8009346:	d50e      	bpl.n	8009366 <_svfiprintf_r+0x32>
 8009348:	690b      	ldr	r3, [r1, #16]
 800934a:	b963      	cbnz	r3, 8009366 <_svfiprintf_r+0x32>
 800934c:	2140      	movs	r1, #64	; 0x40
 800934e:	f7ff fe5b 	bl	8009008 <_malloc_r>
 8009352:	6028      	str	r0, [r5, #0]
 8009354:	6128      	str	r0, [r5, #16]
 8009356:	b920      	cbnz	r0, 8009362 <_svfiprintf_r+0x2e>
 8009358:	230c      	movs	r3, #12
 800935a:	603b      	str	r3, [r7, #0]
 800935c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009360:	e0d0      	b.n	8009504 <_svfiprintf_r+0x1d0>
 8009362:	2340      	movs	r3, #64	; 0x40
 8009364:	616b      	str	r3, [r5, #20]
 8009366:	2300      	movs	r3, #0
 8009368:	9309      	str	r3, [sp, #36]	; 0x24
 800936a:	2320      	movs	r3, #32
 800936c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009370:	f8cd 800c 	str.w	r8, [sp, #12]
 8009374:	2330      	movs	r3, #48	; 0x30
 8009376:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800951c <_svfiprintf_r+0x1e8>
 800937a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800937e:	f04f 0901 	mov.w	r9, #1
 8009382:	4623      	mov	r3, r4
 8009384:	469a      	mov	sl, r3
 8009386:	f813 2b01 	ldrb.w	r2, [r3], #1
 800938a:	b10a      	cbz	r2, 8009390 <_svfiprintf_r+0x5c>
 800938c:	2a25      	cmp	r2, #37	; 0x25
 800938e:	d1f9      	bne.n	8009384 <_svfiprintf_r+0x50>
 8009390:	ebba 0b04 	subs.w	fp, sl, r4
 8009394:	d00b      	beq.n	80093ae <_svfiprintf_r+0x7a>
 8009396:	465b      	mov	r3, fp
 8009398:	4622      	mov	r2, r4
 800939a:	4629      	mov	r1, r5
 800939c:	4638      	mov	r0, r7
 800939e:	f7ff ff6f 	bl	8009280 <__ssputs_r>
 80093a2:	3001      	adds	r0, #1
 80093a4:	f000 80a9 	beq.w	80094fa <_svfiprintf_r+0x1c6>
 80093a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093aa:	445a      	add	r2, fp
 80093ac:	9209      	str	r2, [sp, #36]	; 0x24
 80093ae:	f89a 3000 	ldrb.w	r3, [sl]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	f000 80a1 	beq.w	80094fa <_svfiprintf_r+0x1c6>
 80093b8:	2300      	movs	r3, #0
 80093ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093c2:	f10a 0a01 	add.w	sl, sl, #1
 80093c6:	9304      	str	r3, [sp, #16]
 80093c8:	9307      	str	r3, [sp, #28]
 80093ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093ce:	931a      	str	r3, [sp, #104]	; 0x68
 80093d0:	4654      	mov	r4, sl
 80093d2:	2205      	movs	r2, #5
 80093d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093d8:	4850      	ldr	r0, [pc, #320]	; (800951c <_svfiprintf_r+0x1e8>)
 80093da:	f7f6 ff09 	bl	80001f0 <memchr>
 80093de:	9a04      	ldr	r2, [sp, #16]
 80093e0:	b9d8      	cbnz	r0, 800941a <_svfiprintf_r+0xe6>
 80093e2:	06d0      	lsls	r0, r2, #27
 80093e4:	bf44      	itt	mi
 80093e6:	2320      	movmi	r3, #32
 80093e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093ec:	0711      	lsls	r1, r2, #28
 80093ee:	bf44      	itt	mi
 80093f0:	232b      	movmi	r3, #43	; 0x2b
 80093f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093f6:	f89a 3000 	ldrb.w	r3, [sl]
 80093fa:	2b2a      	cmp	r3, #42	; 0x2a
 80093fc:	d015      	beq.n	800942a <_svfiprintf_r+0xf6>
 80093fe:	9a07      	ldr	r2, [sp, #28]
 8009400:	4654      	mov	r4, sl
 8009402:	2000      	movs	r0, #0
 8009404:	f04f 0c0a 	mov.w	ip, #10
 8009408:	4621      	mov	r1, r4
 800940a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800940e:	3b30      	subs	r3, #48	; 0x30
 8009410:	2b09      	cmp	r3, #9
 8009412:	d94d      	bls.n	80094b0 <_svfiprintf_r+0x17c>
 8009414:	b1b0      	cbz	r0, 8009444 <_svfiprintf_r+0x110>
 8009416:	9207      	str	r2, [sp, #28]
 8009418:	e014      	b.n	8009444 <_svfiprintf_r+0x110>
 800941a:	eba0 0308 	sub.w	r3, r0, r8
 800941e:	fa09 f303 	lsl.w	r3, r9, r3
 8009422:	4313      	orrs	r3, r2
 8009424:	9304      	str	r3, [sp, #16]
 8009426:	46a2      	mov	sl, r4
 8009428:	e7d2      	b.n	80093d0 <_svfiprintf_r+0x9c>
 800942a:	9b03      	ldr	r3, [sp, #12]
 800942c:	1d19      	adds	r1, r3, #4
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	9103      	str	r1, [sp, #12]
 8009432:	2b00      	cmp	r3, #0
 8009434:	bfbb      	ittet	lt
 8009436:	425b      	neglt	r3, r3
 8009438:	f042 0202 	orrlt.w	r2, r2, #2
 800943c:	9307      	strge	r3, [sp, #28]
 800943e:	9307      	strlt	r3, [sp, #28]
 8009440:	bfb8      	it	lt
 8009442:	9204      	strlt	r2, [sp, #16]
 8009444:	7823      	ldrb	r3, [r4, #0]
 8009446:	2b2e      	cmp	r3, #46	; 0x2e
 8009448:	d10c      	bne.n	8009464 <_svfiprintf_r+0x130>
 800944a:	7863      	ldrb	r3, [r4, #1]
 800944c:	2b2a      	cmp	r3, #42	; 0x2a
 800944e:	d134      	bne.n	80094ba <_svfiprintf_r+0x186>
 8009450:	9b03      	ldr	r3, [sp, #12]
 8009452:	1d1a      	adds	r2, r3, #4
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	9203      	str	r2, [sp, #12]
 8009458:	2b00      	cmp	r3, #0
 800945a:	bfb8      	it	lt
 800945c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009460:	3402      	adds	r4, #2
 8009462:	9305      	str	r3, [sp, #20]
 8009464:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800952c <_svfiprintf_r+0x1f8>
 8009468:	7821      	ldrb	r1, [r4, #0]
 800946a:	2203      	movs	r2, #3
 800946c:	4650      	mov	r0, sl
 800946e:	f7f6 febf 	bl	80001f0 <memchr>
 8009472:	b138      	cbz	r0, 8009484 <_svfiprintf_r+0x150>
 8009474:	9b04      	ldr	r3, [sp, #16]
 8009476:	eba0 000a 	sub.w	r0, r0, sl
 800947a:	2240      	movs	r2, #64	; 0x40
 800947c:	4082      	lsls	r2, r0
 800947e:	4313      	orrs	r3, r2
 8009480:	3401      	adds	r4, #1
 8009482:	9304      	str	r3, [sp, #16]
 8009484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009488:	4825      	ldr	r0, [pc, #148]	; (8009520 <_svfiprintf_r+0x1ec>)
 800948a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800948e:	2206      	movs	r2, #6
 8009490:	f7f6 feae 	bl	80001f0 <memchr>
 8009494:	2800      	cmp	r0, #0
 8009496:	d038      	beq.n	800950a <_svfiprintf_r+0x1d6>
 8009498:	4b22      	ldr	r3, [pc, #136]	; (8009524 <_svfiprintf_r+0x1f0>)
 800949a:	bb1b      	cbnz	r3, 80094e4 <_svfiprintf_r+0x1b0>
 800949c:	9b03      	ldr	r3, [sp, #12]
 800949e:	3307      	adds	r3, #7
 80094a0:	f023 0307 	bic.w	r3, r3, #7
 80094a4:	3308      	adds	r3, #8
 80094a6:	9303      	str	r3, [sp, #12]
 80094a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094aa:	4433      	add	r3, r6
 80094ac:	9309      	str	r3, [sp, #36]	; 0x24
 80094ae:	e768      	b.n	8009382 <_svfiprintf_r+0x4e>
 80094b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80094b4:	460c      	mov	r4, r1
 80094b6:	2001      	movs	r0, #1
 80094b8:	e7a6      	b.n	8009408 <_svfiprintf_r+0xd4>
 80094ba:	2300      	movs	r3, #0
 80094bc:	3401      	adds	r4, #1
 80094be:	9305      	str	r3, [sp, #20]
 80094c0:	4619      	mov	r1, r3
 80094c2:	f04f 0c0a 	mov.w	ip, #10
 80094c6:	4620      	mov	r0, r4
 80094c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094cc:	3a30      	subs	r2, #48	; 0x30
 80094ce:	2a09      	cmp	r2, #9
 80094d0:	d903      	bls.n	80094da <_svfiprintf_r+0x1a6>
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d0c6      	beq.n	8009464 <_svfiprintf_r+0x130>
 80094d6:	9105      	str	r1, [sp, #20]
 80094d8:	e7c4      	b.n	8009464 <_svfiprintf_r+0x130>
 80094da:	fb0c 2101 	mla	r1, ip, r1, r2
 80094de:	4604      	mov	r4, r0
 80094e0:	2301      	movs	r3, #1
 80094e2:	e7f0      	b.n	80094c6 <_svfiprintf_r+0x192>
 80094e4:	ab03      	add	r3, sp, #12
 80094e6:	9300      	str	r3, [sp, #0]
 80094e8:	462a      	mov	r2, r5
 80094ea:	4b0f      	ldr	r3, [pc, #60]	; (8009528 <_svfiprintf_r+0x1f4>)
 80094ec:	a904      	add	r1, sp, #16
 80094ee:	4638      	mov	r0, r7
 80094f0:	f3af 8000 	nop.w
 80094f4:	1c42      	adds	r2, r0, #1
 80094f6:	4606      	mov	r6, r0
 80094f8:	d1d6      	bne.n	80094a8 <_svfiprintf_r+0x174>
 80094fa:	89ab      	ldrh	r3, [r5, #12]
 80094fc:	065b      	lsls	r3, r3, #25
 80094fe:	f53f af2d 	bmi.w	800935c <_svfiprintf_r+0x28>
 8009502:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009504:	b01d      	add	sp, #116	; 0x74
 8009506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800950a:	ab03      	add	r3, sp, #12
 800950c:	9300      	str	r3, [sp, #0]
 800950e:	462a      	mov	r2, r5
 8009510:	4b05      	ldr	r3, [pc, #20]	; (8009528 <_svfiprintf_r+0x1f4>)
 8009512:	a904      	add	r1, sp, #16
 8009514:	4638      	mov	r0, r7
 8009516:	f000 f879 	bl	800960c <_printf_i>
 800951a:	e7eb      	b.n	80094f4 <_svfiprintf_r+0x1c0>
 800951c:	08009a2c 	.word	0x08009a2c
 8009520:	08009a36 	.word	0x08009a36
 8009524:	00000000 	.word	0x00000000
 8009528:	08009281 	.word	0x08009281
 800952c:	08009a32 	.word	0x08009a32

08009530 <_printf_common>:
 8009530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009534:	4616      	mov	r6, r2
 8009536:	4699      	mov	r9, r3
 8009538:	688a      	ldr	r2, [r1, #8]
 800953a:	690b      	ldr	r3, [r1, #16]
 800953c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009540:	4293      	cmp	r3, r2
 8009542:	bfb8      	it	lt
 8009544:	4613      	movlt	r3, r2
 8009546:	6033      	str	r3, [r6, #0]
 8009548:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800954c:	4607      	mov	r7, r0
 800954e:	460c      	mov	r4, r1
 8009550:	b10a      	cbz	r2, 8009556 <_printf_common+0x26>
 8009552:	3301      	adds	r3, #1
 8009554:	6033      	str	r3, [r6, #0]
 8009556:	6823      	ldr	r3, [r4, #0]
 8009558:	0699      	lsls	r1, r3, #26
 800955a:	bf42      	ittt	mi
 800955c:	6833      	ldrmi	r3, [r6, #0]
 800955e:	3302      	addmi	r3, #2
 8009560:	6033      	strmi	r3, [r6, #0]
 8009562:	6825      	ldr	r5, [r4, #0]
 8009564:	f015 0506 	ands.w	r5, r5, #6
 8009568:	d106      	bne.n	8009578 <_printf_common+0x48>
 800956a:	f104 0a19 	add.w	sl, r4, #25
 800956e:	68e3      	ldr	r3, [r4, #12]
 8009570:	6832      	ldr	r2, [r6, #0]
 8009572:	1a9b      	subs	r3, r3, r2
 8009574:	42ab      	cmp	r3, r5
 8009576:	dc26      	bgt.n	80095c6 <_printf_common+0x96>
 8009578:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800957c:	1e13      	subs	r3, r2, #0
 800957e:	6822      	ldr	r2, [r4, #0]
 8009580:	bf18      	it	ne
 8009582:	2301      	movne	r3, #1
 8009584:	0692      	lsls	r2, r2, #26
 8009586:	d42b      	bmi.n	80095e0 <_printf_common+0xb0>
 8009588:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800958c:	4649      	mov	r1, r9
 800958e:	4638      	mov	r0, r7
 8009590:	47c0      	blx	r8
 8009592:	3001      	adds	r0, #1
 8009594:	d01e      	beq.n	80095d4 <_printf_common+0xa4>
 8009596:	6823      	ldr	r3, [r4, #0]
 8009598:	6922      	ldr	r2, [r4, #16]
 800959a:	f003 0306 	and.w	r3, r3, #6
 800959e:	2b04      	cmp	r3, #4
 80095a0:	bf02      	ittt	eq
 80095a2:	68e5      	ldreq	r5, [r4, #12]
 80095a4:	6833      	ldreq	r3, [r6, #0]
 80095a6:	1aed      	subeq	r5, r5, r3
 80095a8:	68a3      	ldr	r3, [r4, #8]
 80095aa:	bf0c      	ite	eq
 80095ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095b0:	2500      	movne	r5, #0
 80095b2:	4293      	cmp	r3, r2
 80095b4:	bfc4      	itt	gt
 80095b6:	1a9b      	subgt	r3, r3, r2
 80095b8:	18ed      	addgt	r5, r5, r3
 80095ba:	2600      	movs	r6, #0
 80095bc:	341a      	adds	r4, #26
 80095be:	42b5      	cmp	r5, r6
 80095c0:	d11a      	bne.n	80095f8 <_printf_common+0xc8>
 80095c2:	2000      	movs	r0, #0
 80095c4:	e008      	b.n	80095d8 <_printf_common+0xa8>
 80095c6:	2301      	movs	r3, #1
 80095c8:	4652      	mov	r2, sl
 80095ca:	4649      	mov	r1, r9
 80095cc:	4638      	mov	r0, r7
 80095ce:	47c0      	blx	r8
 80095d0:	3001      	adds	r0, #1
 80095d2:	d103      	bne.n	80095dc <_printf_common+0xac>
 80095d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095dc:	3501      	adds	r5, #1
 80095de:	e7c6      	b.n	800956e <_printf_common+0x3e>
 80095e0:	18e1      	adds	r1, r4, r3
 80095e2:	1c5a      	adds	r2, r3, #1
 80095e4:	2030      	movs	r0, #48	; 0x30
 80095e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80095ea:	4422      	add	r2, r4
 80095ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80095f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80095f4:	3302      	adds	r3, #2
 80095f6:	e7c7      	b.n	8009588 <_printf_common+0x58>
 80095f8:	2301      	movs	r3, #1
 80095fa:	4622      	mov	r2, r4
 80095fc:	4649      	mov	r1, r9
 80095fe:	4638      	mov	r0, r7
 8009600:	47c0      	blx	r8
 8009602:	3001      	adds	r0, #1
 8009604:	d0e6      	beq.n	80095d4 <_printf_common+0xa4>
 8009606:	3601      	adds	r6, #1
 8009608:	e7d9      	b.n	80095be <_printf_common+0x8e>
	...

0800960c <_printf_i>:
 800960c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009610:	7e0f      	ldrb	r7, [r1, #24]
 8009612:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009614:	2f78      	cmp	r7, #120	; 0x78
 8009616:	4691      	mov	r9, r2
 8009618:	4680      	mov	r8, r0
 800961a:	460c      	mov	r4, r1
 800961c:	469a      	mov	sl, r3
 800961e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009622:	d807      	bhi.n	8009634 <_printf_i+0x28>
 8009624:	2f62      	cmp	r7, #98	; 0x62
 8009626:	d80a      	bhi.n	800963e <_printf_i+0x32>
 8009628:	2f00      	cmp	r7, #0
 800962a:	f000 80d4 	beq.w	80097d6 <_printf_i+0x1ca>
 800962e:	2f58      	cmp	r7, #88	; 0x58
 8009630:	f000 80c0 	beq.w	80097b4 <_printf_i+0x1a8>
 8009634:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009638:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800963c:	e03a      	b.n	80096b4 <_printf_i+0xa8>
 800963e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009642:	2b15      	cmp	r3, #21
 8009644:	d8f6      	bhi.n	8009634 <_printf_i+0x28>
 8009646:	a101      	add	r1, pc, #4	; (adr r1, 800964c <_printf_i+0x40>)
 8009648:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800964c:	080096a5 	.word	0x080096a5
 8009650:	080096b9 	.word	0x080096b9
 8009654:	08009635 	.word	0x08009635
 8009658:	08009635 	.word	0x08009635
 800965c:	08009635 	.word	0x08009635
 8009660:	08009635 	.word	0x08009635
 8009664:	080096b9 	.word	0x080096b9
 8009668:	08009635 	.word	0x08009635
 800966c:	08009635 	.word	0x08009635
 8009670:	08009635 	.word	0x08009635
 8009674:	08009635 	.word	0x08009635
 8009678:	080097bd 	.word	0x080097bd
 800967c:	080096e5 	.word	0x080096e5
 8009680:	08009777 	.word	0x08009777
 8009684:	08009635 	.word	0x08009635
 8009688:	08009635 	.word	0x08009635
 800968c:	080097df 	.word	0x080097df
 8009690:	08009635 	.word	0x08009635
 8009694:	080096e5 	.word	0x080096e5
 8009698:	08009635 	.word	0x08009635
 800969c:	08009635 	.word	0x08009635
 80096a0:	0800977f 	.word	0x0800977f
 80096a4:	682b      	ldr	r3, [r5, #0]
 80096a6:	1d1a      	adds	r2, r3, #4
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	602a      	str	r2, [r5, #0]
 80096ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096b4:	2301      	movs	r3, #1
 80096b6:	e09f      	b.n	80097f8 <_printf_i+0x1ec>
 80096b8:	6820      	ldr	r0, [r4, #0]
 80096ba:	682b      	ldr	r3, [r5, #0]
 80096bc:	0607      	lsls	r7, r0, #24
 80096be:	f103 0104 	add.w	r1, r3, #4
 80096c2:	6029      	str	r1, [r5, #0]
 80096c4:	d501      	bpl.n	80096ca <_printf_i+0xbe>
 80096c6:	681e      	ldr	r6, [r3, #0]
 80096c8:	e003      	b.n	80096d2 <_printf_i+0xc6>
 80096ca:	0646      	lsls	r6, r0, #25
 80096cc:	d5fb      	bpl.n	80096c6 <_printf_i+0xba>
 80096ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 80096d2:	2e00      	cmp	r6, #0
 80096d4:	da03      	bge.n	80096de <_printf_i+0xd2>
 80096d6:	232d      	movs	r3, #45	; 0x2d
 80096d8:	4276      	negs	r6, r6
 80096da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096de:	485a      	ldr	r0, [pc, #360]	; (8009848 <_printf_i+0x23c>)
 80096e0:	230a      	movs	r3, #10
 80096e2:	e012      	b.n	800970a <_printf_i+0xfe>
 80096e4:	682b      	ldr	r3, [r5, #0]
 80096e6:	6820      	ldr	r0, [r4, #0]
 80096e8:	1d19      	adds	r1, r3, #4
 80096ea:	6029      	str	r1, [r5, #0]
 80096ec:	0605      	lsls	r5, r0, #24
 80096ee:	d501      	bpl.n	80096f4 <_printf_i+0xe8>
 80096f0:	681e      	ldr	r6, [r3, #0]
 80096f2:	e002      	b.n	80096fa <_printf_i+0xee>
 80096f4:	0641      	lsls	r1, r0, #25
 80096f6:	d5fb      	bpl.n	80096f0 <_printf_i+0xe4>
 80096f8:	881e      	ldrh	r6, [r3, #0]
 80096fa:	4853      	ldr	r0, [pc, #332]	; (8009848 <_printf_i+0x23c>)
 80096fc:	2f6f      	cmp	r7, #111	; 0x6f
 80096fe:	bf0c      	ite	eq
 8009700:	2308      	moveq	r3, #8
 8009702:	230a      	movne	r3, #10
 8009704:	2100      	movs	r1, #0
 8009706:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800970a:	6865      	ldr	r5, [r4, #4]
 800970c:	60a5      	str	r5, [r4, #8]
 800970e:	2d00      	cmp	r5, #0
 8009710:	bfa2      	ittt	ge
 8009712:	6821      	ldrge	r1, [r4, #0]
 8009714:	f021 0104 	bicge.w	r1, r1, #4
 8009718:	6021      	strge	r1, [r4, #0]
 800971a:	b90e      	cbnz	r6, 8009720 <_printf_i+0x114>
 800971c:	2d00      	cmp	r5, #0
 800971e:	d04b      	beq.n	80097b8 <_printf_i+0x1ac>
 8009720:	4615      	mov	r5, r2
 8009722:	fbb6 f1f3 	udiv	r1, r6, r3
 8009726:	fb03 6711 	mls	r7, r3, r1, r6
 800972a:	5dc7      	ldrb	r7, [r0, r7]
 800972c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009730:	4637      	mov	r7, r6
 8009732:	42bb      	cmp	r3, r7
 8009734:	460e      	mov	r6, r1
 8009736:	d9f4      	bls.n	8009722 <_printf_i+0x116>
 8009738:	2b08      	cmp	r3, #8
 800973a:	d10b      	bne.n	8009754 <_printf_i+0x148>
 800973c:	6823      	ldr	r3, [r4, #0]
 800973e:	07de      	lsls	r6, r3, #31
 8009740:	d508      	bpl.n	8009754 <_printf_i+0x148>
 8009742:	6923      	ldr	r3, [r4, #16]
 8009744:	6861      	ldr	r1, [r4, #4]
 8009746:	4299      	cmp	r1, r3
 8009748:	bfde      	ittt	le
 800974a:	2330      	movle	r3, #48	; 0x30
 800974c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009750:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009754:	1b52      	subs	r2, r2, r5
 8009756:	6122      	str	r2, [r4, #16]
 8009758:	f8cd a000 	str.w	sl, [sp]
 800975c:	464b      	mov	r3, r9
 800975e:	aa03      	add	r2, sp, #12
 8009760:	4621      	mov	r1, r4
 8009762:	4640      	mov	r0, r8
 8009764:	f7ff fee4 	bl	8009530 <_printf_common>
 8009768:	3001      	adds	r0, #1
 800976a:	d14a      	bne.n	8009802 <_printf_i+0x1f6>
 800976c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009770:	b004      	add	sp, #16
 8009772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009776:	6823      	ldr	r3, [r4, #0]
 8009778:	f043 0320 	orr.w	r3, r3, #32
 800977c:	6023      	str	r3, [r4, #0]
 800977e:	4833      	ldr	r0, [pc, #204]	; (800984c <_printf_i+0x240>)
 8009780:	2778      	movs	r7, #120	; 0x78
 8009782:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009786:	6823      	ldr	r3, [r4, #0]
 8009788:	6829      	ldr	r1, [r5, #0]
 800978a:	061f      	lsls	r7, r3, #24
 800978c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009790:	d402      	bmi.n	8009798 <_printf_i+0x18c>
 8009792:	065f      	lsls	r7, r3, #25
 8009794:	bf48      	it	mi
 8009796:	b2b6      	uxthmi	r6, r6
 8009798:	07df      	lsls	r7, r3, #31
 800979a:	bf48      	it	mi
 800979c:	f043 0320 	orrmi.w	r3, r3, #32
 80097a0:	6029      	str	r1, [r5, #0]
 80097a2:	bf48      	it	mi
 80097a4:	6023      	strmi	r3, [r4, #0]
 80097a6:	b91e      	cbnz	r6, 80097b0 <_printf_i+0x1a4>
 80097a8:	6823      	ldr	r3, [r4, #0]
 80097aa:	f023 0320 	bic.w	r3, r3, #32
 80097ae:	6023      	str	r3, [r4, #0]
 80097b0:	2310      	movs	r3, #16
 80097b2:	e7a7      	b.n	8009704 <_printf_i+0xf8>
 80097b4:	4824      	ldr	r0, [pc, #144]	; (8009848 <_printf_i+0x23c>)
 80097b6:	e7e4      	b.n	8009782 <_printf_i+0x176>
 80097b8:	4615      	mov	r5, r2
 80097ba:	e7bd      	b.n	8009738 <_printf_i+0x12c>
 80097bc:	682b      	ldr	r3, [r5, #0]
 80097be:	6826      	ldr	r6, [r4, #0]
 80097c0:	6961      	ldr	r1, [r4, #20]
 80097c2:	1d18      	adds	r0, r3, #4
 80097c4:	6028      	str	r0, [r5, #0]
 80097c6:	0635      	lsls	r5, r6, #24
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	d501      	bpl.n	80097d0 <_printf_i+0x1c4>
 80097cc:	6019      	str	r1, [r3, #0]
 80097ce:	e002      	b.n	80097d6 <_printf_i+0x1ca>
 80097d0:	0670      	lsls	r0, r6, #25
 80097d2:	d5fb      	bpl.n	80097cc <_printf_i+0x1c0>
 80097d4:	8019      	strh	r1, [r3, #0]
 80097d6:	2300      	movs	r3, #0
 80097d8:	6123      	str	r3, [r4, #16]
 80097da:	4615      	mov	r5, r2
 80097dc:	e7bc      	b.n	8009758 <_printf_i+0x14c>
 80097de:	682b      	ldr	r3, [r5, #0]
 80097e0:	1d1a      	adds	r2, r3, #4
 80097e2:	602a      	str	r2, [r5, #0]
 80097e4:	681d      	ldr	r5, [r3, #0]
 80097e6:	6862      	ldr	r2, [r4, #4]
 80097e8:	2100      	movs	r1, #0
 80097ea:	4628      	mov	r0, r5
 80097ec:	f7f6 fd00 	bl	80001f0 <memchr>
 80097f0:	b108      	cbz	r0, 80097f6 <_printf_i+0x1ea>
 80097f2:	1b40      	subs	r0, r0, r5
 80097f4:	6060      	str	r0, [r4, #4]
 80097f6:	6863      	ldr	r3, [r4, #4]
 80097f8:	6123      	str	r3, [r4, #16]
 80097fa:	2300      	movs	r3, #0
 80097fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009800:	e7aa      	b.n	8009758 <_printf_i+0x14c>
 8009802:	6923      	ldr	r3, [r4, #16]
 8009804:	462a      	mov	r2, r5
 8009806:	4649      	mov	r1, r9
 8009808:	4640      	mov	r0, r8
 800980a:	47d0      	blx	sl
 800980c:	3001      	adds	r0, #1
 800980e:	d0ad      	beq.n	800976c <_printf_i+0x160>
 8009810:	6823      	ldr	r3, [r4, #0]
 8009812:	079b      	lsls	r3, r3, #30
 8009814:	d413      	bmi.n	800983e <_printf_i+0x232>
 8009816:	68e0      	ldr	r0, [r4, #12]
 8009818:	9b03      	ldr	r3, [sp, #12]
 800981a:	4298      	cmp	r0, r3
 800981c:	bfb8      	it	lt
 800981e:	4618      	movlt	r0, r3
 8009820:	e7a6      	b.n	8009770 <_printf_i+0x164>
 8009822:	2301      	movs	r3, #1
 8009824:	4632      	mov	r2, r6
 8009826:	4649      	mov	r1, r9
 8009828:	4640      	mov	r0, r8
 800982a:	47d0      	blx	sl
 800982c:	3001      	adds	r0, #1
 800982e:	d09d      	beq.n	800976c <_printf_i+0x160>
 8009830:	3501      	adds	r5, #1
 8009832:	68e3      	ldr	r3, [r4, #12]
 8009834:	9903      	ldr	r1, [sp, #12]
 8009836:	1a5b      	subs	r3, r3, r1
 8009838:	42ab      	cmp	r3, r5
 800983a:	dcf2      	bgt.n	8009822 <_printf_i+0x216>
 800983c:	e7eb      	b.n	8009816 <_printf_i+0x20a>
 800983e:	2500      	movs	r5, #0
 8009840:	f104 0619 	add.w	r6, r4, #25
 8009844:	e7f5      	b.n	8009832 <_printf_i+0x226>
 8009846:	bf00      	nop
 8009848:	08009a3d 	.word	0x08009a3d
 800984c:	08009a4e 	.word	0x08009a4e

08009850 <memmove>:
 8009850:	4288      	cmp	r0, r1
 8009852:	b510      	push	{r4, lr}
 8009854:	eb01 0402 	add.w	r4, r1, r2
 8009858:	d902      	bls.n	8009860 <memmove+0x10>
 800985a:	4284      	cmp	r4, r0
 800985c:	4623      	mov	r3, r4
 800985e:	d807      	bhi.n	8009870 <memmove+0x20>
 8009860:	1e43      	subs	r3, r0, #1
 8009862:	42a1      	cmp	r1, r4
 8009864:	d008      	beq.n	8009878 <memmove+0x28>
 8009866:	f811 2b01 	ldrb.w	r2, [r1], #1
 800986a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800986e:	e7f8      	b.n	8009862 <memmove+0x12>
 8009870:	4402      	add	r2, r0
 8009872:	4601      	mov	r1, r0
 8009874:	428a      	cmp	r2, r1
 8009876:	d100      	bne.n	800987a <memmove+0x2a>
 8009878:	bd10      	pop	{r4, pc}
 800987a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800987e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009882:	e7f7      	b.n	8009874 <memmove+0x24>

08009884 <memcpy>:
 8009884:	440a      	add	r2, r1
 8009886:	4291      	cmp	r1, r2
 8009888:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800988c:	d100      	bne.n	8009890 <memcpy+0xc>
 800988e:	4770      	bx	lr
 8009890:	b510      	push	{r4, lr}
 8009892:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009896:	f803 4f01 	strb.w	r4, [r3, #1]!
 800989a:	4291      	cmp	r1, r2
 800989c:	d1f9      	bne.n	8009892 <memcpy+0xe>
 800989e:	bd10      	pop	{r4, pc}

080098a0 <_realloc_r>:
 80098a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098a4:	4680      	mov	r8, r0
 80098a6:	4614      	mov	r4, r2
 80098a8:	460e      	mov	r6, r1
 80098aa:	b921      	cbnz	r1, 80098b6 <_realloc_r+0x16>
 80098ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098b0:	4611      	mov	r1, r2
 80098b2:	f7ff bba9 	b.w	8009008 <_malloc_r>
 80098b6:	b92a      	cbnz	r2, 80098c4 <_realloc_r+0x24>
 80098b8:	f7ff fc96 	bl	80091e8 <_free_r>
 80098bc:	4625      	mov	r5, r4
 80098be:	4628      	mov	r0, r5
 80098c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098c4:	f000 f81b 	bl	80098fe <_malloc_usable_size_r>
 80098c8:	4284      	cmp	r4, r0
 80098ca:	4607      	mov	r7, r0
 80098cc:	d802      	bhi.n	80098d4 <_realloc_r+0x34>
 80098ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80098d2:	d812      	bhi.n	80098fa <_realloc_r+0x5a>
 80098d4:	4621      	mov	r1, r4
 80098d6:	4640      	mov	r0, r8
 80098d8:	f7ff fb96 	bl	8009008 <_malloc_r>
 80098dc:	4605      	mov	r5, r0
 80098de:	2800      	cmp	r0, #0
 80098e0:	d0ed      	beq.n	80098be <_realloc_r+0x1e>
 80098e2:	42bc      	cmp	r4, r7
 80098e4:	4622      	mov	r2, r4
 80098e6:	4631      	mov	r1, r6
 80098e8:	bf28      	it	cs
 80098ea:	463a      	movcs	r2, r7
 80098ec:	f7ff ffca 	bl	8009884 <memcpy>
 80098f0:	4631      	mov	r1, r6
 80098f2:	4640      	mov	r0, r8
 80098f4:	f7ff fc78 	bl	80091e8 <_free_r>
 80098f8:	e7e1      	b.n	80098be <_realloc_r+0x1e>
 80098fa:	4635      	mov	r5, r6
 80098fc:	e7df      	b.n	80098be <_realloc_r+0x1e>

080098fe <_malloc_usable_size_r>:
 80098fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009902:	1f18      	subs	r0, r3, #4
 8009904:	2b00      	cmp	r3, #0
 8009906:	bfbc      	itt	lt
 8009908:	580b      	ldrlt	r3, [r1, r0]
 800990a:	18c0      	addlt	r0, r0, r3
 800990c:	4770      	bx	lr
	...

08009910 <_init>:
 8009910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009912:	bf00      	nop
 8009914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009916:	bc08      	pop	{r3}
 8009918:	469e      	mov	lr, r3
 800991a:	4770      	bx	lr

0800991c <_fini>:
 800991c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800991e:	bf00      	nop
 8009920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009922:	bc08      	pop	{r3}
 8009924:	469e      	mov	lr, r3
 8009926:	4770      	bx	lr
